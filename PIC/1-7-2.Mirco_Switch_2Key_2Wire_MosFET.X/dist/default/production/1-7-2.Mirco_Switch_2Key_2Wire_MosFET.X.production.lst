

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Mar 25 17:15:14 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK5,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	intentry,global,class=CODE,delta=2
   170                           	psect	text150,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text151,local,class=CODE,merge=1,inline,delta=2
   172                           	psect	text152,local,class=CODE,merge=1,inline,delta=2
   173                           	psect	text153,local,class=CODE,merge=1,inline,delta=2
   174                           	psect	text154,local,class=CODE,merge=1,inline,delta=2
   175                           	psect	text155,local,class=CODE,merge=1,inline,delta=2
   176                           	dabs	1,0x7E,2
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0016                     	;# 
   198  0017                     	;# 
   199  0018                     	;# 
   200  0019                     	;# 
   201  001A                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  008C                     	;# 
   205  008D                     	;# 
   206  008E                     	;# 
   207  0090                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0097                     	;# 
   213  0099                     	;# 
   214  009A                     	;# 
   215  009B                     	;# 
   216  009B                     	;# 
   217  009C                     	;# 
   218  009D                     	;# 
   219  009E                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  0116                     	;# 
   224  0117                     	;# 
   225  011D                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  018E                     	;# 
   229  0191                     	;# 
   230  0191                     	;# 
   231  0192                     	;# 
   232  0193                     	;# 
   233  0193                     	;# 
   234  0194                     	;# 
   235  0195                     	;# 
   236  0196                     	;# 
   237  0197                     	;# 
   238  0199                     	;# 
   239  019A                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019B                     	;# 
   244  019C                     	;# 
   245  019C                     	;# 
   246  019D                     	;# 
   247  019E                     	;# 
   248  019F                     	;# 
   249  020D                     	;# 
   250  0210                     	;# 
   251  0211                     	;# 
   252  0211                     	;# 
   253  0212                     	;# 
   254  0212                     	;# 
   255  0213                     	;# 
   256  0213                     	;# 
   257  0214                     	;# 
   258  0214                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0215                     	;# 
   262  0216                     	;# 
   263  0216                     	;# 
   264  0217                     	;# 
   265  0217                     	;# 
   266  0291                     	;# 
   267  0291                     	;# 
   268  0292                     	;# 
   269  0293                     	;# 
   270  0298                     	;# 
   271  0298                     	;# 
   272  0299                     	;# 
   273  029A                     	;# 
   274  0394                     	;# 
   275  0395                     	;# 
   276  0396                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0015                     	;# 
   307  0016                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001C                     	;# 
   315  008C                     	;# 
   316  008D                     	;# 
   317  008E                     	;# 
   318  0090                     	;# 
   319  0091                     	;# 
   320  0092                     	;# 
   321  0095                     	;# 
   322  0096                     	;# 
   323  0097                     	;# 
   324  0099                     	;# 
   325  009A                     	;# 
   326  009B                     	;# 
   327  009B                     	;# 
   328  009C                     	;# 
   329  009D                     	;# 
   330  009E                     	;# 
   331  010C                     	;# 
   332  010D                     	;# 
   333  010E                     	;# 
   334  0116                     	;# 
   335  0117                     	;# 
   336  011D                     	;# 
   337  018C                     	;# 
   338  018D                     	;# 
   339  018E                     	;# 
   340  0191                     	;# 
   341  0191                     	;# 
   342  0192                     	;# 
   343  0193                     	;# 
   344  0193                     	;# 
   345  0194                     	;# 
   346  0195                     	;# 
   347  0196                     	;# 
   348  0197                     	;# 
   349  0199                     	;# 
   350  019A                     	;# 
   351  019B                     	;# 
   352  019B                     	;# 
   353  019B                     	;# 
   354  019B                     	;# 
   355  019C                     	;# 
   356  019C                     	;# 
   357  019D                     	;# 
   358  019E                     	;# 
   359  019F                     	;# 
   360  020D                     	;# 
   361  0210                     	;# 
   362  0211                     	;# 
   363  0211                     	;# 
   364  0212                     	;# 
   365  0212                     	;# 
   366  0213                     	;# 
   367  0213                     	;# 
   368  0214                     	;# 
   369  0214                     	;# 
   370  0215                     	;# 
   371  0215                     	;# 
   372  0215                     	;# 
   373  0216                     	;# 
   374  0216                     	;# 
   375  0217                     	;# 
   376  0217                     	;# 
   377  0291                     	;# 
   378  0291                     	;# 
   379  0292                     	;# 
   380  0293                     	;# 
   381  0298                     	;# 
   382  0298                     	;# 
   383  0299                     	;# 
   384  029A                     	;# 
   385  0394                     	;# 
   386  0395                     	;# 
   387  0396                     	;# 
   388  0FE4                     	;# 
   389  0FE5                     	;# 
   390  0FE6                     	;# 
   391  0FE7                     	;# 
   392  0FE8                     	;# 
   393  0FE9                     	;# 
   394  0FEA                     	;# 
   395  0FEB                     	;# 
   396  0FED                     	;# 
   397  0FEE                     	;# 
   398  0FEF                     	;# 
   399  0000                     	;# 
   400  0001                     	;# 
   401  0002                     	;# 
   402  0003                     	;# 
   403  0004                     	;# 
   404  0005                     	;# 
   405  0006                     	;# 
   406  0007                     	;# 
   407  0008                     	;# 
   408  0009                     	;# 
   409  000A                     	;# 
   410  000B                     	;# 
   411  000C                     	;# 
   412  000D                     	;# 
   413  000E                     	;# 
   414  0010                     	;# 
   415  0011                     	;# 
   416  0012                     	;# 
   417  0015                     	;# 
   418  0016                     	;# 
   419  0016                     	;# 
   420  0017                     	;# 
   421  0018                     	;# 
   422  0019                     	;# 
   423  001A                     	;# 
   424  001B                     	;# 
   425  001C                     	;# 
   426  008C                     	;# 
   427  008D                     	;# 
   428  008E                     	;# 
   429  0090                     	;# 
   430  0091                     	;# 
   431  0092                     	;# 
   432  0095                     	;# 
   433  0096                     	;# 
   434  0097                     	;# 
   435  0099                     	;# 
   436  009A                     	;# 
   437  009B                     	;# 
   438  009B                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  010C                     	;# 
   443  010D                     	;# 
   444  010E                     	;# 
   445  0116                     	;# 
   446  0117                     	;# 
   447  011D                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  018E                     	;# 
   451  0191                     	;# 
   452  0191                     	;# 
   453  0192                     	;# 
   454  0193                     	;# 
   455  0193                     	;# 
   456  0194                     	;# 
   457  0195                     	;# 
   458  0196                     	;# 
   459  0197                     	;# 
   460  0199                     	;# 
   461  019A                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019B                     	;# 
   465  019B                     	;# 
   466  019C                     	;# 
   467  019C                     	;# 
   468  019D                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  020D                     	;# 
   472  0210                     	;# 
   473  0211                     	;# 
   474  0211                     	;# 
   475  0212                     	;# 
   476  0212                     	;# 
   477  0213                     	;# 
   478  0213                     	;# 
   479  0214                     	;# 
   480  0214                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0215                     	;# 
   484  0216                     	;# 
   485  0216                     	;# 
   486  0217                     	;# 
   487  0217                     	;# 
   488  0291                     	;# 
   489  0291                     	;# 
   490  0292                     	;# 
   491  0293                     	;# 
   492  0298                     	;# 
   493  0298                     	;# 
   494  0299                     	;# 
   495  029A                     	;# 
   496  0394                     	;# 
   497  0395                     	;# 
   498  0396                     	;# 
   499  0FE4                     	;# 
   500  0FE5                     	;# 
   501  0FE6                     	;# 
   502  0FE7                     	;# 
   503  0FE8                     	;# 
   504  0FE9                     	;# 
   505  0FEA                     	;# 
   506  0FEB                     	;# 
   507  0FED                     	;# 
   508  0FEE                     	;# 
   509  0FEF                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  0010                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0015                     	;# 
   529  0016                     	;# 
   530  0016                     	;# 
   531  0017                     	;# 
   532  0018                     	;# 
   533  0019                     	;# 
   534  001A                     	;# 
   535  001B                     	;# 
   536  001C                     	;# 
   537  008C                     	;# 
   538  008D                     	;# 
   539  008E                     	;# 
   540  0090                     	;# 
   541  0091                     	;# 
   542  0092                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  010C                     	;# 
   554  010D                     	;# 
   555  010E                     	;# 
   556  0116                     	;# 
   557  0117                     	;# 
   558  011D                     	;# 
   559  018C                     	;# 
   560  018D                     	;# 
   561  018E                     	;# 
   562  0191                     	;# 
   563  0191                     	;# 
   564  0192                     	;# 
   565  0193                     	;# 
   566  0193                     	;# 
   567  0194                     	;# 
   568  0195                     	;# 
   569  0196                     	;# 
   570  0197                     	;# 
   571  0199                     	;# 
   572  019A                     	;# 
   573  019B                     	;# 
   574  019B                     	;# 
   575  019B                     	;# 
   576  019B                     	;# 
   577  019C                     	;# 
   578  019C                     	;# 
   579  019D                     	;# 
   580  019E                     	;# 
   581  019F                     	;# 
   582  020D                     	;# 
   583  0210                     	;# 
   584  0211                     	;# 
   585  0211                     	;# 
   586  0212                     	;# 
   587  0212                     	;# 
   588  0213                     	;# 
   589  0213                     	;# 
   590  0214                     	;# 
   591  0214                     	;# 
   592  0215                     	;# 
   593  0215                     	;# 
   594  0215                     	;# 
   595  0216                     	;# 
   596  0216                     	;# 
   597  0217                     	;# 
   598  0217                     	;# 
   599  0291                     	;# 
   600  0291                     	;# 
   601  0292                     	;# 
   602  0293                     	;# 
   603  0298                     	;# 
   604  0298                     	;# 
   605  0299                     	;# 
   606  029A                     	;# 
   607  0394                     	;# 
   608  0395                     	;# 
   609  0396                     	;# 
   610  0FE4                     	;# 
   611  0FE5                     	;# 
   612  0FE6                     	;# 
   613  0FE7                     	;# 
   614  0FE8                     	;# 
   615  0FE9                     	;# 
   616  0FEA                     	;# 
   617  0FEB                     	;# 
   618  0FED                     	;# 
   619  0FEE                     	;# 
   620  0FEF                     	;# 
   621  0000                     	;# 
   622  0001                     	;# 
   623  0002                     	;# 
   624  0003                     	;# 
   625  0004                     	;# 
   626  0005                     	;# 
   627  0006                     	;# 
   628  0007                     	;# 
   629  0008                     	;# 
   630  0009                     	;# 
   631  000A                     	;# 
   632  000B                     	;# 
   633  000C                     	;# 
   634  000D                     	;# 
   635  000E                     	;# 
   636  0010                     	;# 
   637  0011                     	;# 
   638  0012                     	;# 
   639  0015                     	;# 
   640  0016                     	;# 
   641  0016                     	;# 
   642  0017                     	;# 
   643  0018                     	;# 
   644  0019                     	;# 
   645  001A                     	;# 
   646  001B                     	;# 
   647  001C                     	;# 
   648  008C                     	;# 
   649  008D                     	;# 
   650  008E                     	;# 
   651  0090                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0095                     	;# 
   655  0096                     	;# 
   656  0097                     	;# 
   657  0099                     	;# 
   658  009A                     	;# 
   659  009B                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  010C                     	;# 
   665  010D                     	;# 
   666  010E                     	;# 
   667  0116                     	;# 
   668  0117                     	;# 
   669  011D                     	;# 
   670  018C                     	;# 
   671  018D                     	;# 
   672  018E                     	;# 
   673  0191                     	;# 
   674  0191                     	;# 
   675  0192                     	;# 
   676  0193                     	;# 
   677  0193                     	;# 
   678  0194                     	;# 
   679  0195                     	;# 
   680  0196                     	;# 
   681  0197                     	;# 
   682  0199                     	;# 
   683  019A                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019C                     	;# 
   689  019C                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019F                     	;# 
   693  020D                     	;# 
   694  0210                     	;# 
   695  0211                     	;# 
   696  0211                     	;# 
   697  0212                     	;# 
   698  0212                     	;# 
   699  0213                     	;# 
   700  0213                     	;# 
   701  0214                     	;# 
   702  0214                     	;# 
   703  0215                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0216                     	;# 
   707  0216                     	;# 
   708  0217                     	;# 
   709  0217                     	;# 
   710  0291                     	;# 
   711  0291                     	;# 
   712  0292                     	;# 
   713  0293                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  0394                     	;# 
   719  0395                     	;# 
   720  0396                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  0010                     	;# 
   748  0011                     	;# 
   749  0012                     	;# 
   750  0015                     	;# 
   751  0016                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001C                     	;# 
   759  008C                     	;# 
   760  008D                     	;# 
   761  008E                     	;# 
   762  0090                     	;# 
   763  0091                     	;# 
   764  0092                     	;# 
   765  0095                     	;# 
   766  0096                     	;# 
   767  0097                     	;# 
   768  0099                     	;# 
   769  009A                     	;# 
   770  009B                     	;# 
   771  009B                     	;# 
   772  009C                     	;# 
   773  009D                     	;# 
   774  009E                     	;# 
   775  010C                     	;# 
   776  010D                     	;# 
   777  010E                     	;# 
   778  0116                     	;# 
   779  0117                     	;# 
   780  011D                     	;# 
   781  018C                     	;# 
   782  018D                     	;# 
   783  018E                     	;# 
   784  0191                     	;# 
   785  0191                     	;# 
   786  0192                     	;# 
   787  0193                     	;# 
   788  0193                     	;# 
   789  0194                     	;# 
   790  0195                     	;# 
   791  0196                     	;# 
   792  0197                     	;# 
   793  0199                     	;# 
   794  019A                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019B                     	;# 
   799  019C                     	;# 
   800  019C                     	;# 
   801  019D                     	;# 
   802  019E                     	;# 
   803  019F                     	;# 
   804  020D                     	;# 
   805  0210                     	;# 
   806  0211                     	;# 
   807  0211                     	;# 
   808  0212                     	;# 
   809  0212                     	;# 
   810  0213                     	;# 
   811  0213                     	;# 
   812  0214                     	;# 
   813  0214                     	;# 
   814  0215                     	;# 
   815  0215                     	;# 
   816  0215                     	;# 
   817  0216                     	;# 
   818  0216                     	;# 
   819  0217                     	;# 
   820  0217                     	;# 
   821  0291                     	;# 
   822  0291                     	;# 
   823  0292                     	;# 
   824  0293                     	;# 
   825  0298                     	;# 
   826  0298                     	;# 
   827  0299                     	;# 
   828  029A                     	;# 
   829  0394                     	;# 
   830  0395                     	;# 
   831  0396                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000D                     	;# 
   857  000E                     	;# 
   858  0010                     	;# 
   859  0011                     	;# 
   860  0012                     	;# 
   861  0015                     	;# 
   862  0016                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001C                     	;# 
   870  008C                     	;# 
   871  008D                     	;# 
   872  008E                     	;# 
   873  0090                     	;# 
   874  0091                     	;# 
   875  0092                     	;# 
   876  0095                     	;# 
   877  0096                     	;# 
   878  0097                     	;# 
   879  0099                     	;# 
   880  009A                     	;# 
   881  009B                     	;# 
   882  009B                     	;# 
   883  009C                     	;# 
   884  009D                     	;# 
   885  009E                     	;# 
   886  010C                     	;# 
   887  010D                     	;# 
   888  010E                     	;# 
   889  0116                     	;# 
   890  0117                     	;# 
   891  011D                     	;# 
   892  018C                     	;# 
   893  018D                     	;# 
   894  018E                     	;# 
   895  0191                     	;# 
   896  0191                     	;# 
   897  0192                     	;# 
   898  0193                     	;# 
   899  0193                     	;# 
   900  0194                     	;# 
   901  0195                     	;# 
   902  0196                     	;# 
   903  0197                     	;# 
   904  0199                     	;# 
   905  019A                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019B                     	;# 
   909  019B                     	;# 
   910  019C                     	;# 
   911  019C                     	;# 
   912  019D                     	;# 
   913  019E                     	;# 
   914  019F                     	;# 
   915  020D                     	;# 
   916  0210                     	;# 
   917  0211                     	;# 
   918  0211                     	;# 
   919  0212                     	;# 
   920  0212                     	;# 
   921  0213                     	;# 
   922  0213                     	;# 
   923  0214                     	;# 
   924  0214                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0215                     	;# 
   928  0216                     	;# 
   929  0216                     	;# 
   930  0217                     	;# 
   931  0217                     	;# 
   932  0291                     	;# 
   933  0291                     	;# 
   934  0292                     	;# 
   935  0293                     	;# 
   936  0298                     	;# 
   937  0298                     	;# 
   938  0299                     	;# 
   939  029A                     	;# 
   940  0394                     	;# 
   941  0395                     	;# 
   942  0396                     	;# 
   943  0FE4                     	;# 
   944  0FE5                     	;# 
   945  0FE6                     	;# 
   946  0FE7                     	;# 
   947  0FE8                     	;# 
   948  0FE9                     	;# 
   949  0FEA                     	;# 
   950  0FEB                     	;# 
   951  0FED                     	;# 
   952  0FEE                     	;# 
   953  0FEF                     	;# 
   954  0000                     	;# 
   955  0001                     	;# 
   956  0002                     	;# 
   957  0003                     	;# 
   958  0004                     	;# 
   959  0005                     	;# 
   960  0006                     	;# 
   961  0007                     	;# 
   962  0008                     	;# 
   963  0009                     	;# 
   964  000A                     	;# 
   965  000B                     	;# 
   966  000C                     	;# 
   967  000D                     	;# 
   968  000E                     	;# 
   969  0010                     	;# 
   970  0011                     	;# 
   971  0012                     	;# 
   972  0015                     	;# 
   973  0016                     	;# 
   974  0016                     	;# 
   975  0017                     	;# 
   976  0018                     	;# 
   977  0019                     	;# 
   978  001A                     	;# 
   979  001B                     	;# 
   980  001C                     	;# 
   981  008C                     	;# 
   982  008D                     	;# 
   983  008E                     	;# 
   984  0090                     	;# 
   985  0091                     	;# 
   986  0092                     	;# 
   987  0095                     	;# 
   988  0096                     	;# 
   989  0097                     	;# 
   990  0099                     	;# 
   991  009A                     	;# 
   992  009B                     	;# 
   993  009B                     	;# 
   994  009C                     	;# 
   995  009D                     	;# 
   996  009E                     	;# 
   997  010C                     	;# 
   998  010D                     	;# 
   999  010E                     	;# 
  1000  0116                     	;# 
  1001  0117                     	;# 
  1002  011D                     	;# 
  1003  018C                     	;# 
  1004  018D                     	;# 
  1005  018E                     	;# 
  1006  0191                     	;# 
  1007  0191                     	;# 
  1008  0192                     	;# 
  1009  0193                     	;# 
  1010  0193                     	;# 
  1011  0194                     	;# 
  1012  0195                     	;# 
  1013  0196                     	;# 
  1014  0197                     	;# 
  1015  0199                     	;# 
  1016  019A                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019B                     	;# 
  1020  019B                     	;# 
  1021  019C                     	;# 
  1022  019C                     	;# 
  1023  019D                     	;# 
  1024  019E                     	;# 
  1025  019F                     	;# 
  1026  020D                     	;# 
  1027  0210                     	;# 
  1028  0211                     	;# 
  1029  0211                     	;# 
  1030  0212                     	;# 
  1031  0212                     	;# 
  1032  0213                     	;# 
  1033  0213                     	;# 
  1034  0214                     	;# 
  1035  0214                     	;# 
  1036  0215                     	;# 
  1037  0215                     	;# 
  1038  0215                     	;# 
  1039  0216                     	;# 
  1040  0216                     	;# 
  1041  0217                     	;# 
  1042  0217                     	;# 
  1043  0291                     	;# 
  1044  0291                     	;# 
  1045  0292                     	;# 
  1046  0293                     	;# 
  1047  0298                     	;# 
  1048  0298                     	;# 
  1049  0299                     	;# 
  1050  029A                     	;# 
  1051  0394                     	;# 
  1052  0395                     	;# 
  1053  0396                     	;# 
  1054  0FE4                     	;# 
  1055  0FE5                     	;# 
  1056  0FE6                     	;# 
  1057  0FE7                     	;# 
  1058  0FE8                     	;# 
  1059  0FE9                     	;# 
  1060  0FEA                     	;# 
  1061  0FEB                     	;# 
  1062  0FED                     	;# 
  1063  0FEE                     	;# 
  1064  0FEF                     	;# 
  1065  0000                     	;# 
  1066  0001                     	;# 
  1067  0002                     	;# 
  1068  0003                     	;# 
  1069  0004                     	;# 
  1070  0005                     	;# 
  1071  0006                     	;# 
  1072  0007                     	;# 
  1073  0008                     	;# 
  1074  0009                     	;# 
  1075  000A                     	;# 
  1076  000B                     	;# 
  1077  000C                     	;# 
  1078  000D                     	;# 
  1079  000E                     	;# 
  1080  0010                     	;# 
  1081  0011                     	;# 
  1082  0012                     	;# 
  1083  0015                     	;# 
  1084  0016                     	;# 
  1085  0016                     	;# 
  1086  0017                     	;# 
  1087  0018                     	;# 
  1088  0019                     	;# 
  1089  001A                     	;# 
  1090  001B                     	;# 
  1091  001C                     	;# 
  1092  008C                     	;# 
  1093  008D                     	;# 
  1094  008E                     	;# 
  1095  0090                     	;# 
  1096  0091                     	;# 
  1097  0092                     	;# 
  1098  0095                     	;# 
  1099  0096                     	;# 
  1100  0097                     	;# 
  1101  0099                     	;# 
  1102  009A                     	;# 
  1103  009B                     	;# 
  1104  009B                     	;# 
  1105  009C                     	;# 
  1106  009D                     	;# 
  1107  009E                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  0116                     	;# 
  1112  0117                     	;# 
  1113  011D                     	;# 
  1114  018C                     	;# 
  1115  018D                     	;# 
  1116  018E                     	;# 
  1117  0191                     	;# 
  1118  0191                     	;# 
  1119  0192                     	;# 
  1120  0193                     	;# 
  1121  0193                     	;# 
  1122  0194                     	;# 
  1123  0195                     	;# 
  1124  0196                     	;# 
  1125  0197                     	;# 
  1126  0199                     	;# 
  1127  019A                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019B                     	;# 
  1131  019B                     	;# 
  1132  019C                     	;# 
  1133  019C                     	;# 
  1134  019D                     	;# 
  1135  019E                     	;# 
  1136  019F                     	;# 
  1137  020D                     	;# 
  1138  0210                     	;# 
  1139  0211                     	;# 
  1140  0211                     	;# 
  1141  0212                     	;# 
  1142  0212                     	;# 
  1143  0213                     	;# 
  1144  0213                     	;# 
  1145  0214                     	;# 
  1146  0214                     	;# 
  1147  0215                     	;# 
  1148  0215                     	;# 
  1149  0215                     	;# 
  1150  0216                     	;# 
  1151  0216                     	;# 
  1152  0217                     	;# 
  1153  0217                     	;# 
  1154  0291                     	;# 
  1155  0291                     	;# 
  1156  0292                     	;# 
  1157  0293                     	;# 
  1158  0298                     	;# 
  1159  0298                     	;# 
  1160  0299                     	;# 
  1161  029A                     	;# 
  1162  0394                     	;# 
  1163  0395                     	;# 
  1164  0396                     	;# 
  1165  0FE4                     	;# 
  1166  0FE5                     	;# 
  1167  0FE6                     	;# 
  1168  0FE7                     	;# 
  1169  0FE8                     	;# 
  1170  0FE9                     	;# 
  1171  0FEA                     	;# 
  1172  0FEB                     	;# 
  1173  0FED                     	;# 
  1174  0FEE                     	;# 
  1175  0FEF                     	;# 
  1176  0000                     	;# 
  1177  0001                     	;# 
  1178  0002                     	;# 
  1179  0003                     	;# 
  1180  0004                     	;# 
  1181  0005                     	;# 
  1182  0006                     	;# 
  1183  0007                     	;# 
  1184  0008                     	;# 
  1185  0009                     	;# 
  1186  000A                     	;# 
  1187  000B                     	;# 
  1188  000C                     	;# 
  1189  000D                     	;# 
  1190  000E                     	;# 
  1191  0010                     	;# 
  1192  0011                     	;# 
  1193  0012                     	;# 
  1194  0015                     	;# 
  1195  0016                     	;# 
  1196  0016                     	;# 
  1197  0017                     	;# 
  1198  0018                     	;# 
  1199  0019                     	;# 
  1200  001A                     	;# 
  1201  001B                     	;# 
  1202  001C                     	;# 
  1203  008C                     	;# 
  1204  008D                     	;# 
  1205  008E                     	;# 
  1206  0090                     	;# 
  1207  0091                     	;# 
  1208  0092                     	;# 
  1209  0095                     	;# 
  1210  0096                     	;# 
  1211  0097                     	;# 
  1212  0099                     	;# 
  1213  009A                     	;# 
  1214  009B                     	;# 
  1215  009B                     	;# 
  1216  009C                     	;# 
  1217  009D                     	;# 
  1218  009E                     	;# 
  1219  010C                     	;# 
  1220  010D                     	;# 
  1221  010E                     	;# 
  1222  0116                     	;# 
  1223  0117                     	;# 
  1224  011D                     	;# 
  1225  018C                     	;# 
  1226  018D                     	;# 
  1227  018E                     	;# 
  1228  0191                     	;# 
  1229  0191                     	;# 
  1230  0192                     	;# 
  1231  0193                     	;# 
  1232  0193                     	;# 
  1233  0194                     	;# 
  1234  0195                     	;# 
  1235  0196                     	;# 
  1236  0197                     	;# 
  1237  0199                     	;# 
  1238  019A                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019B                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  019C                     	;# 
  1245  019D                     	;# 
  1246  019E                     	;# 
  1247  019F                     	;# 
  1248  020D                     	;# 
  1249  0210                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0213                     	;# 
  1256  0214                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0291                     	;# 
  1266  0291                     	;# 
  1267  0292                     	;# 
  1268  0293                     	;# 
  1269  0298                     	;# 
  1270  0298                     	;# 
  1271  0299                     	;# 
  1272  029A                     	;# 
  1273  0394                     	;# 
  1274  0395                     	;# 
  1275  0396                     	;# 
  1276  0FE4                     	;# 
  1277  0FE5                     	;# 
  1278  0FE6                     	;# 
  1279  0FE7                     	;# 
  1280  0FE8                     	;# 
  1281  0FE9                     	;# 
  1282  0FEA                     	;# 
  1283  0FEB                     	;# 
  1284  0FED                     	;# 
  1285  0FEE                     	;# 
  1286  0FEF                     	;# 
  1287  0000                     	;# 
  1288  0001                     	;# 
  1289  0002                     	;# 
  1290  0003                     	;# 
  1291  0004                     	;# 
  1292  0005                     	;# 
  1293  0006                     	;# 
  1294  0007                     	;# 
  1295  0008                     	;# 
  1296  0009                     	;# 
  1297  000A                     	;# 
  1298  000B                     	;# 
  1299  000C                     	;# 
  1300  000D                     	;# 
  1301  000E                     	;# 
  1302  0010                     	;# 
  1303  0011                     	;# 
  1304  0012                     	;# 
  1305  0015                     	;# 
  1306  0016                     	;# 
  1307  0016                     	;# 
  1308  0017                     	;# 
  1309  0018                     	;# 
  1310  0019                     	;# 
  1311  001A                     	;# 
  1312  001B                     	;# 
  1313  001C                     	;# 
  1314  008C                     	;# 
  1315  008D                     	;# 
  1316  008E                     	;# 
  1317  0090                     	;# 
  1318  0091                     	;# 
  1319  0092                     	;# 
  1320  0095                     	;# 
  1321  0096                     	;# 
  1322  0097                     	;# 
  1323  0099                     	;# 
  1324  009A                     	;# 
  1325  009B                     	;# 
  1326  009B                     	;# 
  1327  009C                     	;# 
  1328  009D                     	;# 
  1329  009E                     	;# 
  1330  010C                     	;# 
  1331  010D                     	;# 
  1332  010E                     	;# 
  1333  0116                     	;# 
  1334  0117                     	;# 
  1335  011D                     	;# 
  1336  018C                     	;# 
  1337  018D                     	;# 
  1338  018E                     	;# 
  1339  0191                     	;# 
  1340  0191                     	;# 
  1341  0192                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0194                     	;# 
  1345  0195                     	;# 
  1346  0196                     	;# 
  1347  0197                     	;# 
  1348  0199                     	;# 
  1349  019A                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019B                     	;# 
  1353  019B                     	;# 
  1354  019C                     	;# 
  1355  019C                     	;# 
  1356  019D                     	;# 
  1357  019E                     	;# 
  1358  019F                     	;# 
  1359  020D                     	;# 
  1360  0210                     	;# 
  1361  0211                     	;# 
  1362  0211                     	;# 
  1363  0212                     	;# 
  1364  0212                     	;# 
  1365  0213                     	;# 
  1366  0213                     	;# 
  1367  0214                     	;# 
  1368  0214                     	;# 
  1369  0215                     	;# 
  1370  0215                     	;# 
  1371  0215                     	;# 
  1372  0216                     	;# 
  1373  0216                     	;# 
  1374  0217                     	;# 
  1375  0217                     	;# 
  1376  0291                     	;# 
  1377  0291                     	;# 
  1378  0292                     	;# 
  1379  0293                     	;# 
  1380  0298                     	;# 
  1381  0298                     	;# 
  1382  0299                     	;# 
  1383  029A                     	;# 
  1384  0394                     	;# 
  1385  0395                     	;# 
  1386  0396                     	;# 
  1387  0FE4                     	;# 
  1388  0FE5                     	;# 
  1389  0FE6                     	;# 
  1390  0FE7                     	;# 
  1391  0FE8                     	;# 
  1392  0FE9                     	;# 
  1393  0FEA                     	;# 
  1394  0FEB                     	;# 
  1395  0FED                     	;# 
  1396  0FEE                     	;# 
  1397  0FEF                     	;# 
  1398  0000                     	;# 
  1399  0001                     	;# 
  1400  0002                     	;# 
  1401  0003                     	;# 
  1402  0004                     	;# 
  1403  0005                     	;# 
  1404  0006                     	;# 
  1405  0007                     	;# 
  1406  0008                     	;# 
  1407  0009                     	;# 
  1408  000A                     	;# 
  1409  000B                     	;# 
  1410  000C                     	;# 
  1411  000D                     	;# 
  1412  000E                     	;# 
  1413  0010                     	;# 
  1414  0011                     	;# 
  1415  0012                     	;# 
  1416  0015                     	;# 
  1417  0016                     	;# 
  1418  0016                     	;# 
  1419  0017                     	;# 
  1420  0018                     	;# 
  1421  0019                     	;# 
  1422  001A                     	;# 
  1423  001B                     	;# 
  1424  001C                     	;# 
  1425  008C                     	;# 
  1426  008D                     	;# 
  1427  008E                     	;# 
  1428  0090                     	;# 
  1429  0091                     	;# 
  1430  0092                     	;# 
  1431  0095                     	;# 
  1432  0096                     	;# 
  1433  0097                     	;# 
  1434  0099                     	;# 
  1435  009A                     	;# 
  1436  009B                     	;# 
  1437  009B                     	;# 
  1438  009C                     	;# 
  1439  009D                     	;# 
  1440  009E                     	;# 
  1441  010C                     	;# 
  1442  010D                     	;# 
  1443  010E                     	;# 
  1444  0116                     	;# 
  1445  0117                     	;# 
  1446  011D                     	;# 
  1447  018C                     	;# 
  1448  018D                     	;# 
  1449  018E                     	;# 
  1450  0191                     	;# 
  1451  0191                     	;# 
  1452  0192                     	;# 
  1453  0193                     	;# 
  1454  0193                     	;# 
  1455  0194                     	;# 
  1456  0195                     	;# 
  1457  0196                     	;# 
  1458  0197                     	;# 
  1459  0199                     	;# 
  1460  019A                     	;# 
  1461  019B                     	;# 
  1462  019B                     	;# 
  1463  019B                     	;# 
  1464  019B                     	;# 
  1465  019C                     	;# 
  1466  019C                     	;# 
  1467  019D                     	;# 
  1468  019E                     	;# 
  1469  019F                     	;# 
  1470  020D                     	;# 
  1471  0210                     	;# 
  1472  0211                     	;# 
  1473  0211                     	;# 
  1474  0212                     	;# 
  1475  0212                     	;# 
  1476  0213                     	;# 
  1477  0213                     	;# 
  1478  0214                     	;# 
  1479  0214                     	;# 
  1480  0215                     	;# 
  1481  0215                     	;# 
  1482  0215                     	;# 
  1483  0216                     	;# 
  1484  0216                     	;# 
  1485  0217                     	;# 
  1486  0217                     	;# 
  1487  0291                     	;# 
  1488  0291                     	;# 
  1489  0292                     	;# 
  1490  0293                     	;# 
  1491  0298                     	;# 
  1492  0298                     	;# 
  1493  0299                     	;# 
  1494  029A                     	;# 
  1495  0394                     	;# 
  1496  0395                     	;# 
  1497  0396                     	;# 
  1498  0FE4                     	;# 
  1499  0FE5                     	;# 
  1500  0FE6                     	;# 
  1501  0FE7                     	;# 
  1502  0FE8                     	;# 
  1503  0FE9                     	;# 
  1504  0FEA                     	;# 
  1505  0FEB                     	;# 
  1506  0FED                     	;# 
  1507  0FEE                     	;# 
  1508  0FEF                     	;# 
  1509  0000                     	;# 
  1510  0001                     	;# 
  1511  0002                     	;# 
  1512  0003                     	;# 
  1513  0004                     	;# 
  1514  0005                     	;# 
  1515  0006                     	;# 
  1516  0007                     	;# 
  1517  0008                     	;# 
  1518  0009                     	;# 
  1519  000A                     	;# 
  1520  000B                     	;# 
  1521  000C                     	;# 
  1522  000D                     	;# 
  1523  000E                     	;# 
  1524  0010                     	;# 
  1525  0011                     	;# 
  1526  0012                     	;# 
  1527  0015                     	;# 
  1528  0016                     	;# 
  1529  0016                     	;# 
  1530  0017                     	;# 
  1531  0018                     	;# 
  1532  0019                     	;# 
  1533  001A                     	;# 
  1534  001B                     	;# 
  1535  001C                     	;# 
  1536  008C                     	;# 
  1537  008D                     	;# 
  1538  008E                     	;# 
  1539  0090                     	;# 
  1540  0091                     	;# 
  1541  0092                     	;# 
  1542  0095                     	;# 
  1543  0096                     	;# 
  1544  0097                     	;# 
  1545  0099                     	;# 
  1546  009A                     	;# 
  1547  009B                     	;# 
  1548  009B                     	;# 
  1549  009C                     	;# 
  1550  009D                     	;# 
  1551  009E                     	;# 
  1552  010C                     	;# 
  1553  010D                     	;# 
  1554  010E                     	;# 
  1555  0116                     	;# 
  1556  0117                     	;# 
  1557  011D                     	;# 
  1558  018C                     	;# 
  1559  018D                     	;# 
  1560  018E                     	;# 
  1561  0191                     	;# 
  1562  0191                     	;# 
  1563  0192                     	;# 
  1564  0193                     	;# 
  1565  0193                     	;# 
  1566  0194                     	;# 
  1567  0195                     	;# 
  1568  0196                     	;# 
  1569  0197                     	;# 
  1570  0199                     	;# 
  1571  019A                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019B                     	;# 
  1576  019C                     	;# 
  1577  019C                     	;# 
  1578  019D                     	;# 
  1579  019E                     	;# 
  1580  019F                     	;# 
  1581  020D                     	;# 
  1582  0210                     	;# 
  1583  0211                     	;# 
  1584  0211                     	;# 
  1585  0212                     	;# 
  1586  0212                     	;# 
  1587  0213                     	;# 
  1588  0213                     	;# 
  1589  0214                     	;# 
  1590  0214                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0216                     	;# 
  1595  0216                     	;# 
  1596  0217                     	;# 
  1597  0217                     	;# 
  1598  0291                     	;# 
  1599  0291                     	;# 
  1600  0292                     	;# 
  1601  0293                     	;# 
  1602  0298                     	;# 
  1603  0298                     	;# 
  1604  0299                     	;# 
  1605  029A                     	;# 
  1606  0394                     	;# 
  1607  0395                     	;# 
  1608  0396                     	;# 
  1609  0FE4                     	;# 
  1610  0FE5                     	;# 
  1611  0FE6                     	;# 
  1612  0FE7                     	;# 
  1613  0FE8                     	;# 
  1614  0FE9                     	;# 
  1615  0FEA                     	;# 
  1616  0FEB                     	;# 
  1617  0FED                     	;# 
  1618  0FEE                     	;# 
  1619  0FEF                     	;# 
  1620  0000                     	;# 
  1621  0001                     	;# 
  1622  0002                     	;# 
  1623  0003                     	;# 
  1624  0004                     	;# 
  1625  0005                     	;# 
  1626  0006                     	;# 
  1627  0007                     	;# 
  1628  0008                     	;# 
  1629  0009                     	;# 
  1630  000A                     	;# 
  1631  000B                     	;# 
  1632  000C                     	;# 
  1633  000D                     	;# 
  1634  000E                     	;# 
  1635  0010                     	;# 
  1636  0011                     	;# 
  1637  0012                     	;# 
  1638  0015                     	;# 
  1639  0016                     	;# 
  1640  0016                     	;# 
  1641  0017                     	;# 
  1642  0018                     	;# 
  1643  0019                     	;# 
  1644  001A                     	;# 
  1645  001B                     	;# 
  1646  001C                     	;# 
  1647  008C                     	;# 
  1648  008D                     	;# 
  1649  008E                     	;# 
  1650  0090                     	;# 
  1651  0091                     	;# 
  1652  0092                     	;# 
  1653  0095                     	;# 
  1654  0096                     	;# 
  1655  0097                     	;# 
  1656  0099                     	;# 
  1657  009A                     	;# 
  1658  009B                     	;# 
  1659  009B                     	;# 
  1660  009C                     	;# 
  1661  009D                     	;# 
  1662  009E                     	;# 
  1663  010C                     	;# 
  1664  010D                     	;# 
  1665  010E                     	;# 
  1666  0116                     	;# 
  1667  0117                     	;# 
  1668  011D                     	;# 
  1669  018C                     	;# 
  1670  018D                     	;# 
  1671  018E                     	;# 
  1672  0191                     	;# 
  1673  0191                     	;# 
  1674  0192                     	;# 
  1675  0193                     	;# 
  1676  0193                     	;# 
  1677  0194                     	;# 
  1678  0195                     	;# 
  1679  0196                     	;# 
  1680  0197                     	;# 
  1681  0199                     	;# 
  1682  019A                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019B                     	;# 
  1686  019B                     	;# 
  1687  019C                     	;# 
  1688  019C                     	;# 
  1689  019D                     	;# 
  1690  019E                     	;# 
  1691  019F                     	;# 
  1692  020D                     	;# 
  1693  0210                     	;# 
  1694  0211                     	;# 
  1695  0211                     	;# 
  1696  0212                     	;# 
  1697  0212                     	;# 
  1698  0213                     	;# 
  1699  0213                     	;# 
  1700  0214                     	;# 
  1701  0214                     	;# 
  1702  0215                     	;# 
  1703  0215                     	;# 
  1704  0215                     	;# 
  1705  0216                     	;# 
  1706  0216                     	;# 
  1707  0217                     	;# 
  1708  0217                     	;# 
  1709  0291                     	;# 
  1710  0291                     	;# 
  1711  0292                     	;# 
  1712  0293                     	;# 
  1713  0298                     	;# 
  1714  0298                     	;# 
  1715  0299                     	;# 
  1716  029A                     	;# 
  1717  0394                     	;# 
  1718  0395                     	;# 
  1719  0396                     	;# 
  1720  0FE4                     	;# 
  1721  0FE5                     	;# 
  1722  0FE6                     	;# 
  1723  0FE7                     	;# 
  1724  0FE8                     	;# 
  1725  0FE9                     	;# 
  1726  0FEA                     	;# 
  1727  0FEB                     	;# 
  1728  0FED                     	;# 
  1729  0FEE                     	;# 
  1730  0FEF                     	;# 
  1731  0000                     	;# 
  1732  0001                     	;# 
  1733  0002                     	;# 
  1734  0003                     	;# 
  1735  0004                     	;# 
  1736  0005                     	;# 
  1737  0006                     	;# 
  1738  0007                     	;# 
  1739  0008                     	;# 
  1740  0009                     	;# 
  1741  000A                     	;# 
  1742  000B                     	;# 
  1743  000C                     	;# 
  1744  000D                     	;# 
  1745  000E                     	;# 
  1746  0010                     	;# 
  1747  0011                     	;# 
  1748  0012                     	;# 
  1749  0015                     	;# 
  1750  0016                     	;# 
  1751  0016                     	;# 
  1752  0017                     	;# 
  1753  0018                     	;# 
  1754  0019                     	;# 
  1755  001A                     	;# 
  1756  001B                     	;# 
  1757  001C                     	;# 
  1758  008C                     	;# 
  1759  008D                     	;# 
  1760  008E                     	;# 
  1761  0090                     	;# 
  1762  0091                     	;# 
  1763  0092                     	;# 
  1764  0095                     	;# 
  1765  0096                     	;# 
  1766  0097                     	;# 
  1767  0099                     	;# 
  1768  009A                     	;# 
  1769  009B                     	;# 
  1770  009B                     	;# 
  1771  009C                     	;# 
  1772  009D                     	;# 
  1773  009E                     	;# 
  1774  010C                     	;# 
  1775  010D                     	;# 
  1776  010E                     	;# 
  1777  0116                     	;# 
  1778  0117                     	;# 
  1779  011D                     	;# 
  1780  018C                     	;# 
  1781  018D                     	;# 
  1782  018E                     	;# 
  1783  0191                     	;# 
  1784  0191                     	;# 
  1785  0192                     	;# 
  1786  0193                     	;# 
  1787  0193                     	;# 
  1788  0194                     	;# 
  1789  0195                     	;# 
  1790  0196                     	;# 
  1791  0197                     	;# 
  1792  0199                     	;# 
  1793  019A                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019B                     	;# 
  1797  019B                     	;# 
  1798  019C                     	;# 
  1799  019C                     	;# 
  1800  019D                     	;# 
  1801  019E                     	;# 
  1802  019F                     	;# 
  1803  020D                     	;# 
  1804  0210                     	;# 
  1805  0211                     	;# 
  1806  0211                     	;# 
  1807  0212                     	;# 
  1808  0212                     	;# 
  1809  0213                     	;# 
  1810  0213                     	;# 
  1811  0214                     	;# 
  1812  0214                     	;# 
  1813  0215                     	;# 
  1814  0215                     	;# 
  1815  0215                     	;# 
  1816  0216                     	;# 
  1817  0216                     	;# 
  1818  0217                     	;# 
  1819  0217                     	;# 
  1820  0291                     	;# 
  1821  0291                     	;# 
  1822  0292                     	;# 
  1823  0293                     	;# 
  1824  0298                     	;# 
  1825  0298                     	;# 
  1826  0299                     	;# 
  1827  029A                     	;# 
  1828  0394                     	;# 
  1829  0395                     	;# 
  1830  0396                     	;# 
  1831  0FE4                     	;# 
  1832  0FE5                     	;# 
  1833  0FE6                     	;# 
  1834  0FE7                     	;# 
  1835  0FE8                     	;# 
  1836  0FE9                     	;# 
  1837  0FEA                     	;# 
  1838  0FEB                     	;# 
  1839  0FED                     	;# 
  1840  0FEE                     	;# 
  1841  0FEF                     	;# 
  1842  0000                     	;# 
  1843  0001                     	;# 
  1844  0002                     	;# 
  1845  0003                     	;# 
  1846  0004                     	;# 
  1847  0005                     	;# 
  1848  0006                     	;# 
  1849  0007                     	;# 
  1850  0008                     	;# 
  1851  0009                     	;# 
  1852  000A                     	;# 
  1853  000B                     	;# 
  1854  000C                     	;# 
  1855  000D                     	;# 
  1856  000E                     	;# 
  1857  0010                     	;# 
  1858  0011                     	;# 
  1859  0012                     	;# 
  1860  0015                     	;# 
  1861  0016                     	;# 
  1862  0016                     	;# 
  1863  0017                     	;# 
  1864  0018                     	;# 
  1865  0019                     	;# 
  1866  001A                     	;# 
  1867  001B                     	;# 
  1868  001C                     	;# 
  1869  008C                     	;# 
  1870  008D                     	;# 
  1871  008E                     	;# 
  1872  0090                     	;# 
  1873  0091                     	;# 
  1874  0092                     	;# 
  1875  0095                     	;# 
  1876  0096                     	;# 
  1877  0097                     	;# 
  1878  0099                     	;# 
  1879  009A                     	;# 
  1880  009B                     	;# 
  1881  009B                     	;# 
  1882  009C                     	;# 
  1883  009D                     	;# 
  1884  009E                     	;# 
  1885  010C                     	;# 
  1886  010D                     	;# 
  1887  010E                     	;# 
  1888  0116                     	;# 
  1889  0117                     	;# 
  1890  011D                     	;# 
  1891  018C                     	;# 
  1892  018D                     	;# 
  1893  018E                     	;# 
  1894  0191                     	;# 
  1895  0191                     	;# 
  1896  0192                     	;# 
  1897  0193                     	;# 
  1898  0193                     	;# 
  1899  0194                     	;# 
  1900  0195                     	;# 
  1901  0196                     	;# 
  1902  0197                     	;# 
  1903  0199                     	;# 
  1904  019A                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019B                     	;# 
  1908  019B                     	;# 
  1909  019C                     	;# 
  1910  019C                     	;# 
  1911  019D                     	;# 
  1912  019E                     	;# 
  1913  019F                     	;# 
  1914  020D                     	;# 
  1915  0210                     	;# 
  1916  0211                     	;# 
  1917  0211                     	;# 
  1918  0212                     	;# 
  1919  0212                     	;# 
  1920  0213                     	;# 
  1921  0213                     	;# 
  1922  0214                     	;# 
  1923  0214                     	;# 
  1924  0215                     	;# 
  1925  0215                     	;# 
  1926  0215                     	;# 
  1927  0216                     	;# 
  1928  0216                     	;# 
  1929  0217                     	;# 
  1930  0217                     	;# 
  1931  0291                     	;# 
  1932  0291                     	;# 
  1933  0292                     	;# 
  1934  0293                     	;# 
  1935  0298                     	;# 
  1936  0298                     	;# 
  1937  0299                     	;# 
  1938  029A                     	;# 
  1939  0394                     	;# 
  1940  0395                     	;# 
  1941  0396                     	;# 
  1942  0FE4                     	;# 
  1943  0FE5                     	;# 
  1944  0FE6                     	;# 
  1945  0FE7                     	;# 
  1946  0FE8                     	;# 
  1947  0FE9                     	;# 
  1948  0FEA                     	;# 
  1949  0FEB                     	;# 
  1950  0FED                     	;# 
  1951  0FEE                     	;# 
  1952  0FEF                     	;# 
  1953  0000                     	;# 
  1954  0001                     	;# 
  1955  0002                     	;# 
  1956  0003                     	;# 
  1957  0004                     	;# 
  1958  0005                     	;# 
  1959  0006                     	;# 
  1960  0007                     	;# 
  1961  0008                     	;# 
  1962  0009                     	;# 
  1963  000A                     	;# 
  1964  000B                     	;# 
  1965  000C                     	;# 
  1966  000D                     	;# 
  1967  000E                     	;# 
  1968  0010                     	;# 
  1969  0011                     	;# 
  1970  0012                     	;# 
  1971  0015                     	;# 
  1972  0016                     	;# 
  1973  0016                     	;# 
  1974  0017                     	;# 
  1975  0018                     	;# 
  1976  0019                     	;# 
  1977  001A                     	;# 
  1978  001B                     	;# 
  1979  001C                     	;# 
  1980  008C                     	;# 
  1981  008D                     	;# 
  1982  008E                     	;# 
  1983  0090                     	;# 
  1984  0091                     	;# 
  1985  0092                     	;# 
  1986  0095                     	;# 
  1987  0096                     	;# 
  1988  0097                     	;# 
  1989  0099                     	;# 
  1990  009A                     	;# 
  1991  009B                     	;# 
  1992  009B                     	;# 
  1993  009C                     	;# 
  1994  009D                     	;# 
  1995  009E                     	;# 
  1996  010C                     	;# 
  1997  010D                     	;# 
  1998  010E                     	;# 
  1999  0116                     	;# 
  2000  0117                     	;# 
  2001  011D                     	;# 
  2002  018C                     	;# 
  2003  018D                     	;# 
  2004  018E                     	;# 
  2005  0191                     	;# 
  2006  0191                     	;# 
  2007  0192                     	;# 
  2008  0193                     	;# 
  2009  0193                     	;# 
  2010  0194                     	;# 
  2011  0195                     	;# 
  2012  0196                     	;# 
  2013  0197                     	;# 
  2014  0199                     	;# 
  2015  019A                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019B                     	;# 
  2019  019B                     	;# 
  2020  019C                     	;# 
  2021  019C                     	;# 
  2022  019D                     	;# 
  2023  019E                     	;# 
  2024  019F                     	;# 
  2025  020D                     	;# 
  2026  0210                     	;# 
  2027  0211                     	;# 
  2028  0211                     	;# 
  2029  0212                     	;# 
  2030  0212                     	;# 
  2031  0213                     	;# 
  2032  0213                     	;# 
  2033  0214                     	;# 
  2034  0214                     	;# 
  2035  0215                     	;# 
  2036  0215                     	;# 
  2037  0215                     	;# 
  2038  0216                     	;# 
  2039  0216                     	;# 
  2040  0217                     	;# 
  2041  0217                     	;# 
  2042  0291                     	;# 
  2043  0291                     	;# 
  2044  0292                     	;# 
  2045  0293                     	;# 
  2046  0298                     	;# 
  2047  0298                     	;# 
  2048  0299                     	;# 
  2049  029A                     	;# 
  2050  0394                     	;# 
  2051  0395                     	;# 
  2052  0396                     	;# 
  2053  0FE4                     	;# 
  2054  0FE5                     	;# 
  2055  0FE6                     	;# 
  2056  0FE7                     	;# 
  2057  0FE8                     	;# 
  2058  0FE9                     	;# 
  2059  0FEA                     	;# 
  2060  0FEB                     	;# 
  2061  0FED                     	;# 
  2062  0FEE                     	;# 
  2063  0FEF                     	;# 
  2064  0000                     	;# 
  2065  0001                     	;# 
  2066  0002                     	;# 
  2067  0003                     	;# 
  2068  0004                     	;# 
  2069  0005                     	;# 
  2070  0006                     	;# 
  2071  0007                     	;# 
  2072  0008                     	;# 
  2073  0009                     	;# 
  2074  000A                     	;# 
  2075  000B                     	;# 
  2076  000C                     	;# 
  2077  000D                     	;# 
  2078  000E                     	;# 
  2079  0010                     	;# 
  2080  0011                     	;# 
  2081  0012                     	;# 
  2082  0015                     	;# 
  2083  0016                     	;# 
  2084  0016                     	;# 
  2085  0017                     	;# 
  2086  0018                     	;# 
  2087  0019                     	;# 
  2088  001A                     	;# 
  2089  001B                     	;# 
  2090  001C                     	;# 
  2091  008C                     	;# 
  2092  008D                     	;# 
  2093  008E                     	;# 
  2094  0090                     	;# 
  2095  0091                     	;# 
  2096  0092                     	;# 
  2097  0095                     	;# 
  2098  0096                     	;# 
  2099  0097                     	;# 
  2100  0099                     	;# 
  2101  009A                     	;# 
  2102  009B                     	;# 
  2103  009B                     	;# 
  2104  009C                     	;# 
  2105  009D                     	;# 
  2106  009E                     	;# 
  2107  010C                     	;# 
  2108  010D                     	;# 
  2109  010E                     	;# 
  2110  0116                     	;# 
  2111  0117                     	;# 
  2112  011D                     	;# 
  2113  018C                     	;# 
  2114  018D                     	;# 
  2115  018E                     	;# 
  2116  0191                     	;# 
  2117  0191                     	;# 
  2118  0192                     	;# 
  2119  0193                     	;# 
  2120  0193                     	;# 
  2121  0194                     	;# 
  2122  0195                     	;# 
  2123  0196                     	;# 
  2124  0197                     	;# 
  2125  0199                     	;# 
  2126  019A                     	;# 
  2127  019B                     	;# 
  2128  019B                     	;# 
  2129  019B                     	;# 
  2130  019B                     	;# 
  2131  019C                     	;# 
  2132  019C                     	;# 
  2133  019D                     	;# 
  2134  019E                     	;# 
  2135  019F                     	;# 
  2136  020D                     	;# 
  2137  0210                     	;# 
  2138  0211                     	;# 
  2139  0211                     	;# 
  2140  0212                     	;# 
  2141  0212                     	;# 
  2142  0213                     	;# 
  2143  0213                     	;# 
  2144  0214                     	;# 
  2145  0214                     	;# 
  2146  0215                     	;# 
  2147  0215                     	;# 
  2148  0215                     	;# 
  2149  0216                     	;# 
  2150  0216                     	;# 
  2151  0217                     	;# 
  2152  0217                     	;# 
  2153  0291                     	;# 
  2154  0291                     	;# 
  2155  0292                     	;# 
  2156  0293                     	;# 
  2157  0298                     	;# 
  2158  0298                     	;# 
  2159  0299                     	;# 
  2160  029A                     	;# 
  2161  0394                     	;# 
  2162  0395                     	;# 
  2163  0396                     	;# 
  2164  0FE4                     	;# 
  2165  0FE5                     	;# 
  2166  0FE6                     	;# 
  2167  0FE7                     	;# 
  2168  0FE8                     	;# 
  2169  0FE9                     	;# 
  2170  0FEA                     	;# 
  2171  0FEB                     	;# 
  2172  0FED                     	;# 
  2173  0FEE                     	;# 
  2174  0FEF                     	;# 
  2175                           
  2176                           	psect	idataBANK5
  2177  1C82                     __pidataBANK5:	
  2178                           
  2179                           ;initializer for __product
  2180  1C82  3463               	retlw	99
  2181  1C83  3402               	retlw	2
  2182  1C84  3400               	retlw	0
  2183  1C85  3400               	retlw	0
  2184  1C86  3400               	retlw	0
  2185  1C87  3400               	retlw	0
  2186  1C88  3400               	retlw	0
  2187  1C89  3400               	retlw	0
  2188  1C8A  3400               	retlw	0
  2189  1C8B  3400               	retlw	0
  2190  1C8C  3400               	retlw	0
  2191  1C8D  3400               	retlw	0
  2192  1C8E  34FF               	retlw	255
  2193  1C8F  34FF               	retlw	255
  2194  1C90  34FF               	retlw	255
  2195  1C91  3400               	retlw	0
  2196  1C92  3400               	retlw	0
  2197  1C93  3400               	retlw	0
  2198  1C94  3400               	retlw	0
  2199  1C95  3400               	retlw	0
  2200  1C96  3400               	retlw	0
  2201  1C97  3400               	retlw	0
  2202  1C98  3400               	retlw	0
  2203  1C99  3400               	retlw	0
  2204  1C9A  3400               	retlw	0
  2205  1C9B  3400               	retlw	0
  2206  1C9C  3400               	retlw	0
  2207  1C9D  3400               	retlw	0
  2208  1C9E  3400               	retlw	0
  2209  1C9F  3400               	retlw	0
  2210  1CA0  3400               	retlw	0
  2211  1CA1  3400               	retlw	0
  2212                           
  2213                           	psect	stringtext
  2214  1000                     __pstringtext:	
  2215  1000                     _CC2500_registers_address:	
  2216  1000  3403               	retlw	3
  2217  1001  3416               	retlw	22
  2218  1002  3417               	retlw	23
  2219  1003  341E               	retlw	30
  2220  1004  341F               	retlw	31
  2221  1005  3420               	retlw	32
  2222  1006  342A               	retlw	42
  2223  1007  342B               	retlw	43
  2224  1008  340B               	retlw	11
  2225  1009  340C               	retlw	12
  2226  100A  340D               	retlw	13
  2227  100B  340E               	retlw	14
  2228  100C  340F               	retlw	15
  2229  100D  3410               	retlw	16
  2230  100E  3411               	retlw	17
  2231  100F  3412               	retlw	18
  2232  1010  3413               	retlw	19
  2233  1011  3414               	retlw	20
  2234  1012  340A               	retlw	10
  2235  1013  3415               	retlw	21
  2236  1014  3421               	retlw	33
  2237  1015  3422               	retlw	34
  2238  1016  3418               	retlw	24
  2239  1017  3419               	retlw	25
  2240  1018  341A               	retlw	26
  2241  1019  341B               	retlw	27
  2242  101A  341C               	retlw	28
  2243  101B  341D               	retlw	29
  2244  101C  3423               	retlw	35
  2245  101D  3424               	retlw	36
  2246  101E  3425               	retlw	37
  2247  101F  3426               	retlw	38
  2248  1020  3429               	retlw	41
  2249  1021  342C               	retlw	44
  2250  1022  342D               	retlw	45
  2251  1023  342E               	retlw	46
  2252  1024  3400               	retlw	0
  2253  1025  3401               	retlw	1
  2254  1026  3402               	retlw	2
  2255  1027  3407               	retlw	7
  2256  1028  3408               	retlw	8
  2257  1029  3409               	retlw	9
  2258  102A  3406               	retlw	6
  2259  102B  3404               	retlw	4
  2260  102C  3405               	retlw	5
  2261  102D  3427               	retlw	39
  2262  102E  3428               	retlw	40
  2263  102F                     __end_of_CC2500_registers_address:	
  2264  102F                     _CC2500_rfSettings:	
  2265  102F  3407               	retlw	7
  2266  1030  3407               	retlw	7
  2267  1031  3430               	retlw	48
  2268  1032  3487               	retlw	135
  2269  1033  346B               	retlw	107
  2270  1034  34F8               	retlw	248
  2271  1035  347F               	retlw	127
  2272  1036  343F               	retlw	63
  2273  1037  3409               	retlw	9
  2274  1038  3400               	retlw	0
  2275  1039  345C               	retlw	92
  2276  103A  34A7               	retlw	167
  2277  103B  3462               	retlw	98
  2278  103C  3486               	retlw	134
  2279  103D  3483               	retlw	131
  2280  103E  3403               	retlw	3
  2281  103F  3422               	retlw	34
  2282  1040  34F8               	retlw	248
  2283  1041  3400               	retlw	0
  2284  1042  3444               	retlw	68
  2285  1043  34B6               	retlw	182
  2286  1044  3410               	retlw	16
  2287  1045  3418               	retlw	24
  2288  1046  341D               	retlw	29
  2289  1047  341C               	retlw	28
  2290  1048  34C7               	retlw	199
  2291  1049  3400               	retlw	0
  2292  104A  34B2               	retlw	178
  2293  104B  34EA               	retlw	234
  2294  104C  340A               	retlw	10
  2295  104D  3400               	retlw	0
  2296  104E  3411               	retlw	17
  2297  104F  3459               	retlw	89
  2298  1050  3488               	retlw	136
  2299  1051  3431               	retlw	49
  2300  1052  340B               	retlw	11
  2301  1053  342F               	retlw	47
  2302  1054  342E               	retlw	46
  2303  1055  3406               	retlw	6
  2304  1056  3404               	retlw	4
  2305  1057  3405               	retlw	5
  2306  1058  3400               	retlw	0
  2307  1059  3430               	retlw	48
  2308  105A  34D3               	retlw	211
  2309  105B  3491               	retlw	145
  2310  105C  3441               	retlw	65
  2311  105D  3400               	retlw	0
  2312  105E                     __end_of_CC2500_rfSettings:	
  2313  105E                     _CC2500_patable_vaule:	
  2314  105E  34FE               	retlw	254
  2315  105F  34FE               	retlw	254
  2316  1060  34FE               	retlw	254
  2317  1061  34FE               	retlw	254
  2318  1062  34FE               	retlw	254
  2319  1063  34FE               	retlw	254
  2320  1064  34FE               	retlw	254
  2321  1065  34FE               	retlw	254
  2322  1066                     __end_of_CC2500_patable_vaule:	
  2323                           
  2324                           	psect	nvCOMMON
  2325  007B                     __pnvCOMMON:	
  2326  007B                     _product:	
  2327  007B                     	ds	1
  2328  000C                     _PORTA	set	12
  2329  000D                     _PORTB	set	13
  2330  000E                     _PORTC	set	14
  2331  0018                     _T1CON	set	24
  2332  0017                     _TMR1H	set	23
  2333  0016                     _TMR1L	set	22
  2334  005F                     _GIE	set	95
  2335  005B                     _IOCIE	set	91
  2336  0058                     _IOCIF	set	88
  2337  005E                     _PEIE	set	94
  2338  0060                     _RA0	set	96
  2339  0063                     _RA3	set	99
  2340  0066                     _RA6	set	102
  2341  0067                     _RA7	set	103
  2342  0068                     _RB0	set	104
  2343  006A                     _RB2	set	106
  2344  006B                     _RB3	set	107
  2345  006C                     _RB4	set	108
  2346  006D                     _RB5	set	109
  2347  0070                     _RC0	set	112
  2348  0071                     _RC1	set	113
  2349  0072                     _RC2	set	114
  2350  0074                     _RC4	set	116
  2351  0075                     _RC5	set	117
  2352  0077                     _RC7	set	119
  2353  0088                     _TMR1IF	set	136
  2354  009D                     _ADCON0	set	157
  2355  009E                     _ADCON1	set	158
  2356  009C                     _ADRESH	set	156
  2357  009B                     _ADRESL	set	155
  2358  0099                     _OSCCON	set	153
  2359  008C                     _TRISA	set	140
  2360  008D                     _TRISB	set	141
  2361  008E                     _TRISC	set	142
  2362  0097                     _WDTCON	set	151
  2363  04E9                     _GO_nDONE	set	1257
  2364  0488                     _TMR1IE	set	1160
  2365  0117                     _FVRCON	set	279
  2366  010C                     _LATA	set	268
  2367  010D                     _LATB	set	269
  2368  010E                     _LATC	set	270
  2369  018C                     _ANSELA	set	396
  2370  018D                     _ANSELB	set	397
  2371  018E                     _ANSELC	set	398
  2372  0192                     _PMADRH	set	402
  2373  0191                     _PMADRL	set	401
  2374  0196                     _PMCON2	set	406
  2375  0194                     _PMDATH	set	404
  2376  0193                     _PMDATL	set	403
  2377  0CAE                     _CFGS	set	3246
  2378  0CAC                     _FREE	set	3244
  2379  0CAD                     _LWLO	set	3245
  2380  0CA8                     _RD	set	3240
  2381  0CA9                     _WR	set	3241
  2382  0CAA                     _WREN	set	3242
  2383  020D                     _WPUB	set	525
  2384  0396                     _IOCBF	set	918
  2385  0395                     _IOCBN	set	917
  2386  0394                     _IOCBP	set	916
  2387  1CB2                     _IOCBF2	set	7346
  2388                           
  2389                           ; #config settings
  2390  0000                     
  2391                           	psect	cinit
  2392  0021                     start_initialization:	
  2393  0021                     __initialization:	
  2394                           
  2395                           ; Clear objects allocated to BITCOMMON
  2396  0021  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2397                           
  2398                           ; Clear objects allocated to BANK0
  2399  0022  01EC               	clrf	__pbssBANK0& (0+127)
  2400  0023  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2401                           
  2402                           ; Clear objects allocated to BANK1
  2403  0024  30A0               	movlw	low __pbssBANK1
  2404  0025  0084               	movwf	4
  2405  0026  3000               	movlw	high __pbssBANK1
  2406  0027  0085               	movwf	5
  2407  0028  3050               	movlw	80
  2408  0029  31A7  27F3  3180   	fcall	clear_ram0
  2409                           
  2410                           ; Clear objects allocated to BANK2
  2411  002C  3020               	movlw	low __pbssBANK2
  2412  002D  0084               	movwf	4
  2413  002E  3001               	movlw	high __pbssBANK2
  2414  002F  0085               	movwf	5
  2415  0030  3050               	movlw	80
  2416  0031  31A7  27F3  3180   	fcall	clear_ram0
  2417                           
  2418                           ; Clear objects allocated to BANK3
  2419  0034  30A0               	movlw	low __pbssBANK3
  2420  0035  0084               	movwf	4
  2421  0036  3001               	movlw	high __pbssBANK3
  2422  0037  0085               	movwf	5
  2423  0038  3050               	movlw	80
  2424  0039  31A7  27F3  3180   	fcall	clear_ram0
  2425                           
  2426                           ; Clear objects allocated to BANK4
  2427  003C  3020               	movlw	low __pbssBANK4
  2428  003D  0084               	movwf	4
  2429  003E  3002               	movlw	high __pbssBANK4
  2430  003F  0085               	movwf	5
  2431  0040  3035               	movlw	53
  2432  0041  31A7  27F3  3180   	fcall	clear_ram0
  2433                           
  2434                           ; Initialize objects allocated to BANK5
  2435  0044  3082               	movlw	low __pidataBANK5
  2436  0045  0084               	movwf	4
  2437  0046  309C               	movlw	(high __pidataBANK5)| (0+128)
  2438  0047  0085               	movwf	5
  2439  0048  30A0               	movlw	low __pdataBANK5
  2440  0049  0086               	movwf	6
  2441  004A  3002               	movlw	high __pdataBANK5
  2442  004B  0087               	movwf	7
  2443  004C  3020               	movlw	32
  2444  004D  31A7  27ED         	fcall	init_ram
  2445  004F                     end_of_initialization:	
  2446                           ;End of C runtime variable initialization code
  2447                           
  2448  004F                     __end_of__initialization:	
  2449  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2450  0050  0020               	movlb	0
  2451  0051  3194  2C92         	ljmp	_main	;jump to C main() function
  2452                           
  2453                           	psect	bitbssCOMMON
  2454  03D0                     __pbitbssCOMMON:	
  2455  03D0                     _Receive_OK:	
  2456  03D0                     	ds	1
  2457  03D1                     _Transceive_OK:	
  2458  03D1                     	ds	1
  2459                           
  2460                           	psect	bssBANK0
  2461  006C                     __pbssBANK0:	
  2462  006C                     _DimmerLights:	
  2463  006C                     	ds	1
  2464  006D                     _Sw:	
  2465  006D                     	ds	1
  2466                           
  2467                           	psect	bssBANK1
  2468  00A0                     __pbssBANK1:	
  2469  00A0                     _DimmerIntr1:	
  2470  00A0                     	ds	16
  2471  00B0                     _DimmerIntr2:	
  2472  00B0                     	ds	16
  2473  00C0                     _RF1:	
  2474  00C0                     	ds	15
  2475  00CF                     _myMain:	
  2476  00CF                     	ds	13
  2477  00DC                     _Buz1:	
  2478  00DC                     	ds	12
  2479  00E8                     _CRC:	
  2480  00E8                     	ds	1
  2481  00E9                     _Cmd:	
  2482  00E9                     	ds	1
  2483  00EA                     _DelayOff:	
  2484  00EA                     	ds	1
  2485  00EB                     _LED:	
  2486  00EB                     	ds	1
  2487  00EC                     _Rx_Length:	
  2488  00EC                     	ds	1
  2489  00ED                     _SPI0Buffer:	
  2490  00ED                     	ds	1
  2491  00EE                     _Tx_Length:	
  2492  00EE                     	ds	1
  2493  00EF                     _s_data:	
  2494  00EF                     	ds	1
  2495                           
  2496                           	psect	bssBANK2
  2497  0120                     __pbssBANK2:	
  2498  0120                     _Dimmer:	
  2499  0120                     	ds	5
  2500  0125                     _Timer1:	
  2501  0125                     	ds	3
  2502  0128                     _RF_Count:	
  2503  0128                     	ds	2
  2504  012A                     _WDT:	
  2505  012A                     	ds	2
  2506  012C                     _DimmerIntr:	
  2507  012C                     	ds	1
  2508  012D                     _Light:	
  2509  012D                     	ds	1
  2510  012E                     _RSSI:	
  2511  012E                     	ds	1
  2512  012F                     _SwDetect:	
  2513  012F                     	ds	1
  2514  0130                     _r_address:	
  2515  0130                     	ds	1
  2516  0131                     _r_data:	
  2517  0131                     	ds	1
  2518  0132                     _Load:	
  2519  0132                     	ds	40
  2520  015A                     _Temp:	
  2521  015A                     	ds	14
  2522  0168                     _VarErrLED:	
  2523  0168                     	ds	4
  2524  016C                     _VarLED1:	
  2525  016C                     	ds	4
  2526                           
  2527                           	psect	bssBANK3
  2528  01A0                     __pbssBANK3:	
  2529  01A0                     _RF_Data:	
  2530  01A0                     	ds	30
  2531  01BE                     _DimmerLights1:	
  2532  01BE                     	ds	9
  2533  01C7                     _DimmerLights2:	
  2534  01C7                     	ds	9
  2535  01D0                     _Sw1:	
  2536  01D0                     	ds	9
  2537  01D9                     _Sw2:	
  2538  01D9                     	ds	9
  2539  01E2                     _DlySw1:	
  2540  01E2                     	ds	5
  2541  01E7                     _DlySw2:	
  2542  01E7                     	ds	5
  2543  01EC                     _VarLED2:	
  2544  01EC                     	ds	4
  2545                           
  2546                           	psect	bssBANK4
  2547  0220                     __pbssBANK4:	
  2548  0220                     _u1:	
  2549  0220                     	ds	16
  2550  0230                     _Memory:	
  2551  0230                     	ds	37
  2552                           
  2553                           	psect	dataBANK5
  2554  02A0                     __pdataBANK5:	
  2555  02A0                     __product:	
  2556  02A0                     	ds	32
  2557                           
  2558                           	psect	clrtext
  2559  27F3                     clear_ram0:	
  2560                           ;	Called with FSR0 containing the base address, and
  2561                           ;	WREG with the size to clear
  2562                           
  2563  27F3  0064               	clrwdt	;clear the watchdog before getting into this loop
  2564  27F4                     clrloop0:	
  2565  27F4  0180               	clrf	0	;clear RAM location pointed to by FSR
  2566  27F5  3101               	addfsr 0,1
  2567  27F6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2568  27F7  2FF4               	goto	clrloop0	;have we reached the end yet?
  2569  27F8  3400               	retlw	0	;all done for this memory range, return
  2570                           
  2571                           	psect	inittext
  2572  27ED                     init_ram:	
  2573  27ED  00FE               	movwf	126
  2574  27EE                     initloop:	
  2575  27EE  0012               	moviw fsr0++
  2576  27EF  001E               	movwi fsr1++
  2577  27F0  0BFE               	decfsz	126,f
  2578  27F1  2FEE               	goto	initloop
  2579  27F2  3400               	retlw	0
  2580                           
  2581                           	psect	cstackBANK4
  2582  0255                     __pcstackBANK4:	
  2583  0255                     ?_main:	
  2584  0255                     main@argc:	
  2585                           ; 2 bytes @ 0x0
  2586                           
  2587                           
  2588                           ; 2 bytes @ 0x0
  2589  0255                     	ds	2
  2590  0257                     main@argv:	
  2591                           
  2592                           ; 2 bytes @ 0x2
  2593  0257                     	ds	2
  2594                           
  2595                           	psect	cstackCOMMON
  2596  0070                     __pcstackCOMMON:	
  2597  0070                     ?_CC2500_WriteCommand:	
  2598  0070                     ?_RF_Timeout_Counter:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_setRF_TimeoutCleared:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_CC2500_WriteByte:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_CC2500_ReadStatus:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_CC2500_ReadByte:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_PowerRST:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_CC2500_InitSetREG:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_CC2500_InitPATable:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_CC2500_ClearTXFIFO:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_CC2500_ClearRXFIFO:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_CC2500_FrequencyCabr:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_CC2500_SIDLEMode:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_DlyOff_Initialization:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_DlyOff_Main:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setDimmerLights_SwOn:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setDimmerLights_SwOff:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setMemory_Modify:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setDimmerLights_Initialization:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setDimmerLights_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_DimmerLights_DimmingFunction:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_DimmerLights_TwoPhase_Main:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_DimmerLights_AssignationDimming:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setDimmerLights_Line:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_DimmerIntr_ValueCalculate:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setDimmerLights_DimmingClose:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_setTxData:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_setRF_TransceiveGO:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setLED_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setLED_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_Fosc_Set:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_IO_Set:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_TMR1_Set:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_ADC_Set:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_IOC_Set:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_WDT_Set:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_TMR1_ISR:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_IOC_ISR:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_Timeout_Counter:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_set_TimeoutCleared:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_Flash_Memory_Write:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_Flash_Memory_Modify:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_WDT_Clearing:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_myMain_Initialization:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_Temp_Initialization:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Load_Initialization:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_Switch_Initialization:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_RF_Initialization:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_getLoad_AD:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_getTemp_AD:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_my_MainTimer:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_Temp_Main:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_Load_Main:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_Switch_Main:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_RF_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_Exception_Main:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setLoad_AH_AL_Restore:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_setTemp_Initialization:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_setTemp_Main:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setOverTemp_ADV_Restore:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setRF_Initialization:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setRF_Main:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_RF_RxDisable:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setData:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_getRxData:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setLog_Code:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_setControl_Lights_Table:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_setRFSW_Control:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_setRFSW_AdjControl:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_setRF_AdjControl:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_setSw_Initialization:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_setSw_Main:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_Buzzer_Initialization:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_Buzzer_Main:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_CC2500_TxData:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_CC2500_RxData:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_CC2500_PowerOnInitial:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_DelayOffPointSelect:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DelayOff_Initialization:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DelayOff_Main:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_DimmerIntr_Initialization:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DimmerLights_SelectPointer:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_DimmerLights_Initialization:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_setDimmerLights_DimmingOn:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_DimmerLights_Main:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_DimmerLights_TMR_1:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ??_DimmerLights_TMR_1:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_DimmerLights_IOC_1:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ??_DimmerLights_IOC_1:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_DimmerLights_TMR_2:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ??_DimmerLights_TMR_2:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_DimmerLights_IOC_2:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ??_DimmerLights_IOC_2:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_LedPointSelect:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_LED_Initialization:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_LED_Main:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_Mcu_Initialization:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_ISR:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_Flash_Memory_Initialization:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_Flash_Memory_Main:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_Flash_Memory_Unlock:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_Flash_Memory_Erasing:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_setMemory_LoopSave:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0070                     ?_WDT_Main:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0070                     ?_setRF_Learn:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0070                     ?_TouchPower:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0070                     ?_SwPointSelect:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0070                     ?_getDimmerLights_Status:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0070                     ?_getDimmerLights_ValueToPercent:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_getDimmerLights_PercentToValue:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_getLoad_OK:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_getMain_All_Error_Status:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getMain_All_LightsStatus:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getDimmerLights_Allow_Condition:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getCmd_Status:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_Flash_Memory_Read:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getAll_Sw_KeyStatus:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_getRF_KeyStatus:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_getSw_KeyStatus:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_getDelayOff_GO:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_getDimmerIntr_DimmingValue:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_getDimmerLights_Line:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_getDimmer_LoadGO:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_getDimmer_Load_Status:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_getMain_Lights_Count:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0070                     setDimmerLights_Initialization@lights:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979                           
  2980                           ; 1 bytes @ 0x0
  2981  0070                     	ds	1
  2982  0071                     ??_TMR1_ISR:	
  2983  0071                     ??_IOC_ISR:	
  2984                           ; 0 bytes @ 0x1
  2985                           
  2986  0071                     ??_ISR:	
  2987                           ; 0 bytes @ 0x1
  2988                           
  2989                           
  2990                           ; 0 bytes @ 0x1
  2991  0071                     	ds	1
  2992  0072                     ??_RF_Timeout_Counter:	
  2993  0072                     ??_setRF_TimeoutCleared:	
  2994                           ; 0 bytes @ 0x2
  2995                           
  2996  0072                     ??_CC2500_WriteByte:	
  2997                           ; 0 bytes @ 0x2
  2998                           
  2999  0072                     ??_CC2500_ReadByte:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0072                     ?_DelayTime_1us:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0072                     ??_setMemory_Modify:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0072                     ??_setDimmerLights_Initialization:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0072                     ??_getLoad_OK:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0072                     ??_getMain_All_Error_Status:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0072                     ??_getMain_All_LightsStatus:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0072                     ??_setDimmerLights_Line:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0072                     ??_getCmd_Status:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0072                     ?_setCmd_Status:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0072                     ??_setTxData:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0072                     ??_setRF_TransceiveGO:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0072                     ??_Fosc_Set:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0072                     ??_IO_Set:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0072                     ??_TMR1_Set:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0072                     ??_ADC_Set:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0072                     ??_IOC_Set:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0072                     ??_WDT_Set:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0072                     ??_Timeout_Counter:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0072                     ??_set_TimeoutCleared:	
  3057                           ; 0 bytes @ 0x2
  3058                           
  3059  0072                     ??_Flash_Memory_Read:	
  3060                           ; 0 bytes @ 0x2
  3061                           
  3062  0072                     ?_setMemory_Data:	
  3063                           ; 0 bytes @ 0x2
  3064                           
  3065  0072                     ??_Flash_Memory_Write:	
  3066                           ; 0 bytes @ 0x2
  3067                           
  3068  0072                     ??_getAll_Sw_KeyStatus:	
  3069                           ; 0 bytes @ 0x2
  3070                           
  3071  0072                     ??_WDT_Clearing:	
  3072                           ; 0 bytes @ 0x2
  3073                           
  3074  0072                     ??_myMain_Initialization:	
  3075                           ; 0 bytes @ 0x2
  3076                           
  3077  0072                     ??_Temp_Initialization:	
  3078                           ; 0 bytes @ 0x2
  3079                           
  3080  0072                     ??_setLoad_AH_AL_Restore:	
  3081                           ; 0 bytes @ 0x2
  3082                           
  3083  0072                     ??_setTemp_Initialization:	
  3084                           ; 0 bytes @ 0x2
  3085                           
  3086  0072                     ??_setOverTemp_ADV_Restore:	
  3087                           ; 0 bytes @ 0x2
  3088                           
  3089  0072                     ??_setRF_Initialization:	
  3090                           ; 0 bytes @ 0x2
  3091                           
  3092  0072                     ??_getRF_KeyStatus:	
  3093                           ; 0 bytes @ 0x2
  3094                           
  3095  0072                     ??_RF_RxDisable:	
  3096                           ; 0 bytes @ 0x2
  3097                           
  3098  0072                     ??_setData:	
  3099                           ; 0 bytes @ 0x2
  3100                           
  3101  0072                     ??_getSw_KeyStatus:	
  3102                           ; 0 bytes @ 0x2
  3103                           
  3104  0072                     ??_Buzzer_Initialization:	
  3105                           ; 0 bytes @ 0x2
  3106                           
  3107  0072                     ??_Buzzer_Main:	
  3108                           ; 0 bytes @ 0x2
  3109                           
  3110  0072                     ??_DelayOffPointSelect:	
  3111                           ; 0 bytes @ 0x2
  3112                           
  3113  0072                     ?_setDimmerIntr_ControlStatus:	
  3114                           ; 0 bytes @ 0x2
  3115                           
  3116  0072                     ?_setDimmerIntr_DimmingValue:	
  3117                           ; 0 bytes @ 0x2
  3118                           
  3119  0072                     ??_getDimmerIntr_DimmingValue:	
  3120                           ; 0 bytes @ 0x2
  3121                           
  3122  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3123                           ; 0 bytes @ 0x2
  3124                           
  3125  0072                     ??_getDimmerIntr_Dimming_Sw:	
  3126                           ; 0 bytes @ 0x2
  3127                           
  3128  0072                     ?_setDimmerIntr_Dimming_RF:	
  3129                           ; 0 bytes @ 0x2
  3130                           
  3131  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3132                           ; 0 bytes @ 0x2
  3133                           
  3134  0072                     ??_DimmerLights_SelectPointer:	
  3135                           ; 0 bytes @ 0x2
  3136                           
  3137  0072                     ??_getDimmerLights_Line:	
  3138                           ; 0 bytes @ 0x2
  3139                           
  3140  0072                     ??_getDimmer_LoadGO:	
  3141                           ; 0 bytes @ 0x2
  3142                           
  3143  0072                     ??_getDimmer_Load_Status:	
  3144                           ; 0 bytes @ 0x2
  3145                           
  3146  0072                     ??_LedPointSelect:	
  3147                           ; 0 bytes @ 0x2
  3148                           
  3149  0072                     ??_Flash_Memory_Unlock:	
  3150                           ; 0 bytes @ 0x2
  3151                           
  3152  0072                     ??_Flash_Memory_Erasing:	
  3153                           ; 0 bytes @ 0x2
  3154                           
  3155  0072                     ??_setMemory_LoopSave:	
  3156                           ; 0 bytes @ 0x2
  3157                           
  3158  0072                     ??_WDT_Main:	
  3159                           ; 0 bytes @ 0x2
  3160                           
  3161  0072                     ??_getMain_Lights_Count:	
  3162                           ; 0 bytes @ 0x2
  3163                           
  3164  0072                     ??_setRF_Learn:	
  3165                           ; 0 bytes @ 0x2
  3166                           
  3167  0072                     ??_TouchPower:	
  3168                           ; 0 bytes @ 0x2
  3169                           
  3170  0072                     ??_SwPointSelect:	
  3171                           ; 0 bytes @ 0x2
  3172                           
  3173  0072                     ?___bmul:	
  3174                           ; 0 bytes @ 0x2
  3175                           
  3176  0072                     ?___lbdiv:	
  3177                           ; 1 bytes @ 0x2
  3178                           
  3179  0072                     ?_getBuz_GO:	
  3180                           ; 1 bytes @ 0x2
  3181                           
  3182  0072                     ?_getAD:	
  3183                           ; 2 bytes @ 0x2
  3184                           
  3185  0072                     ?___wmul:	
  3186                           ; 2 bytes @ 0x2
  3187                           
  3188  0072                     ?___awdiv:	
  3189                           ; 2 bytes @ 0x2
  3190                           
  3191  0072                     ?___lwdiv:	
  3192                           ; 2 bytes @ 0x2
  3193                           
  3194  0072                     ?___ftpack:	
  3195                           ; 2 bytes @ 0x2
  3196                           
  3197  0072                     setDimmerIntr_ControlStatus@command:	
  3198                           ; 3 bytes @ 0x2
  3199                           
  3200  0072                     setDimmerIntr_DimmingValue@value:	
  3201                           ; 1 bytes @ 0x2
  3202                           
  3203  0072                     setDimmerIntr_Dimming_Sw@command:	
  3204                           ; 1 bytes @ 0x2
  3205                           
  3206  0072                     getDimmerIntr_Dimming_Sw@status:	
  3207                           ; 1 bytes @ 0x2
  3208                           
  3209  0072                     setDimmerIntr_Dimming_RF@command:	
  3210                           ; 1 bytes @ 0x2
  3211                           
  3212  0072                     setDimmerLights_Line@lights:	
  3213                           ; 1 bytes @ 0x2
  3214                           
  3215  0072                     getDimmer_LoadGO@loadgo:	
  3216                           ; 1 bytes @ 0x2
  3217                           
  3218  0072                     getDimmer_Load_Status@status:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221  0072                     getAD@adcon1:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224  0072                     setMemory_Data@data:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0072                     getMain_All_LightsStatus@status:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0072                     setCmd_Status@cmd:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0072                     getCmd_Status@number:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0072                     getLoad_OK@ok:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0072                     getSw_KeyStatus@status:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242  0072                     ___bmul@multiplicand:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245  0072                     ___lbdiv@divisor:	
  3246                           ; 1 bytes @ 0x2
  3247                           
  3248  0072                     DelayTime_1us@count:	
  3249                           ; 1 bytes @ 0x2
  3250                           
  3251  0072                     ___wmul@multiplier:	
  3252                           ; 2 bytes @ 0x2
  3253                           
  3254  0072                     ___awdiv@divisor:	
  3255                           ; 2 bytes @ 0x2
  3256                           
  3257  0072                     ___lwdiv@divisor:	
  3258                           ; 2 bytes @ 0x2
  3259                           
  3260  0072                     ___ftpack@arg:	
  3261                           ; 2 bytes @ 0x2
  3262                           
  3263                           
  3264                           ; 3 bytes @ 0x2
  3265  0072                     	ds	1
  3266  0073                     ??_getDimmerLights_Allow_Condition:	
  3267  0073                     ??_setCmd_Status:	
  3268                           ; 0 bytes @ 0x3
  3269                           
  3270  0073                     ??_setMemory_Data:	
  3271                           ; 0 bytes @ 0x3
  3272                           
  3273  0073                     ??_RF_Initialization:	
  3274                           ; 0 bytes @ 0x3
  3275                           
  3276  0073                     ??_setDimmerIntr_ControlStatus:	
  3277                           ; 0 bytes @ 0x3
  3278                           
  3279  0073                     ??_setDimmerIntr_DimmingValue:	
  3280                           ; 0 bytes @ 0x3
  3281                           
  3282  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3283                           ; 0 bytes @ 0x3
  3284                           
  3285  0073                     ??_setDimmerIntr_Dimming_RF:	
  3286                           ; 0 bytes @ 0x3
  3287                           
  3288  0073                     ??_Mcu_Initialization:	
  3289                           ; 0 bytes @ 0x3
  3290                           
  3291  0073                     ??___bmul:	
  3292                           ; 0 bytes @ 0x3
  3293                           
  3294  0073                     ??___lbdiv:	
  3295                           ; 0 bytes @ 0x3
  3296                           
  3297  0073                     CC2500_WriteByte@loop_a:	
  3298                           ; 0 bytes @ 0x3
  3299                           
  3300  0073                     CC2500_ReadByte@loop_b:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0073                     DelayOffPointSelect@sw:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306  0073                     getDimmerIntr_DimmingValue@value:	
  3307                           ; 1 bytes @ 0x3
  3308                           
  3309  0073                     getDimmerIntr_Dimming_Sw@lights:	
  3310                           ; 1 bytes @ 0x3
  3311                           
  3312  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2605:	
  3313                           ; 1 bytes @ 0x3
  3314                           
  3315  0073                     DimmerLights_SelectPointer@lights:	
  3316                           ; 1 bytes @ 0x3
  3317                           
  3318  0073                     getDimmerLights_Line@line:	
  3319                           ; 1 bytes @ 0x3
  3320                           
  3321  0073                     LedPointSelect@led:	
  3322                           ; 1 bytes @ 0x3
  3323                           
  3324  0073                     Flash_Memory_Read@i:	
  3325                           ; 1 bytes @ 0x3
  3326                           
  3327  0073                     Flash_Memory_Write@i:	
  3328                           ; 1 bytes @ 0x3
  3329                           
  3330  0073                     setMemory_Modify@command:	
  3331                           ; 1 bytes @ 0x3
  3332                           
  3333  0073                     setMemory_LoopSave@command:	
  3334                           ; 1 bytes @ 0x3
  3335                           
  3336  0073                     getMain_Lights_Count@status1:	
  3337                           ; 1 bytes @ 0x3
  3338                           
  3339  0073                     getCmd_Status@cmd:	
  3340                           ; 1 bytes @ 0x3
  3341                           
  3342  0073                     setLoad_AH_AL_Restore@i:	
  3343                           ; 1 bytes @ 0x3
  3344                           
  3345  0073                     setRF_Learn@command:	
  3346                           ; 1 bytes @ 0x3
  3347                           
  3348  0073                     getRF_KeyStatus@key:	
  3349                           ; 1 bytes @ 0x3
  3350                           
  3351  0073                     setRF_TransceiveGO@command:	
  3352                           ; 1 bytes @ 0x3
  3353                           
  3354  0073                     SwPointSelect@sw:	
  3355                           ; 1 bytes @ 0x3
  3356                           
  3357  0073                     getSw_KeyStatus@sw:	
  3358                           ; 1 bytes @ 0x3
  3359                           
  3360  0073                     getAll_Sw_KeyStatus@status:	
  3361                           ; 1 bytes @ 0x3
  3362                           
  3363  0073                     _getMain_All_Error_Status$4214:	
  3364                           ; 1 bytes @ 0x3
  3365                           
  3366  0073                     setOverTemp_ADV_Restore@i:	
  3367                           ; 2 bytes @ 0x3
  3368                           
  3369                           
  3370                           ; 2 bytes @ 0x3
  3371  0073                     	ds	1
  3372  0074                     ??_CC2500_WriteCommand:	
  3373  0074                     ??_CC2500_ReadStatus:	
  3374                           ; 0 bytes @ 0x4
  3375                           
  3376  0074                     ??_DelayTime_1us:	
  3377                           ; 0 bytes @ 0x4
  3378                           
  3379  0074                     ?_CC2500_WriteREG:	
  3380                           ; 0 bytes @ 0x4
  3381                           
  3382  0074                     ??_DlyOff_Initialization:	
  3383                           ; 0 bytes @ 0x4
  3384                           
  3385  0074                     ??_getDimmerLights_Status:	
  3386                           ; 0 bytes @ 0x4
  3387                           
  3388  0074                     ??_setDimmerLights_SwOff:	
  3389                           ; 0 bytes @ 0x4
  3390                           
  3391  0074                     ?_setLED:	
  3392                           ; 0 bytes @ 0x4
  3393                           
  3394  0074                     ??_setLED_Main:	
  3395                           ; 0 bytes @ 0x4
  3396                           
  3397  0074                     ??_Load_Initialization:	
  3398                           ; 0 bytes @ 0x4
  3399                           
  3400  0074                     ??_getBuz_GO:	
  3401                           ; 0 bytes @ 0x4
  3402                           
  3403  0074                     ??_getDelayOff_GO:	
  3404                           ; 0 bytes @ 0x4
  3405                           
  3406  0074                     ??_setDimmerLights_DimmingOn:	
  3407                           ; 0 bytes @ 0x4
  3408                           
  3409  0074                     ?_setDimmerLights_DimmingRun:	
  3410                           ; 0 bytes @ 0x4
  3411                           
  3412  0074                     CC2500_WriteREG@value:	
  3413                           ; 0 bytes @ 0x4
  3414                           
  3415  0074                     DlyOff_Initialization@sw:	
  3416                           ; 1 bytes @ 0x4
  3417                           
  3418  0074                     getDelayOff_GO@sw:	
  3419                           ; 1 bytes @ 0x4
  3420                           
  3421  0074                     setDimmerIntr_ControlStatus@lights:	
  3422                           ; 1 bytes @ 0x4
  3423                           
  3424  0074                     setDimmerIntr_DimmingValue@lights:	
  3425                           ; 1 bytes @ 0x4
  3426                           
  3427  0074                     getDimmerIntr_DimmingValue@lights:	
  3428                           ; 1 bytes @ 0x4
  3429                           
  3430  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3431                           ; 1 bytes @ 0x4
  3432                           
  3433  0074                     setDimmerIntr_Dimming_RF@lights:	
  3434                           ; 1 bytes @ 0x4
  3435                           
  3436  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2606:	
  3437                           ; 1 bytes @ 0x4
  3438                           
  3439  0074                     setDimmerLights_SwOff@sw:	
  3440                           ; 1 bytes @ 0x4
  3441                           
  3442  0074                     setDimmerLights_DimmingOn@sw:	
  3443                           ; 1 bytes @ 0x4
  3444                           
  3445  0074                     _getDimmerLights_Allow_Condition$2729:	
  3446                           ; 1 bytes @ 0x4
  3447                           
  3448  0074                     getDimmerLights_Status@lights:	
  3449                           ; 1 bytes @ 0x4
  3450                           
  3451  0074                     setDimmerLights_DimmingRun@command:	
  3452                           ; 1 bytes @ 0x4
  3453                           
  3454  0074                     setLED@command:	
  3455                           ; 1 bytes @ 0x4
  3456                           
  3457  0074                     Flash_Memory_Read@address:	
  3458                           ; 1 bytes @ 0x4
  3459                           
  3460  0074                     setMemory_Data@address:	
  3461                           ; 1 bytes @ 0x4
  3462                           
  3463  0074                     getMain_Lights_Count@status2:	
  3464                           ; 1 bytes @ 0x4
  3465                           
  3466  0074                     setCmd_Status@number:	
  3467                           ; 1 bytes @ 0x4
  3468                           
  3469  0074                     _getRF_KeyStatus$6247:	
  3470                           ; 1 bytes @ 0x4
  3471                           
  3472  0074                     _getAll_Sw_KeyStatus$7441:	
  3473                           ; 1 bytes @ 0x4
  3474                           
  3475  0074                     ___bmul@product:	
  3476                           ; 1 bytes @ 0x4
  3477                           
  3478  0074                     ___lbdiv@dividend:	
  3479                           ; 1 bytes @ 0x4
  3480                           
  3481  0074                     DelayTime_1us@i:	
  3482                           ; 1 bytes @ 0x4
  3483                           
  3484  0074                     ___wmul@multiplicand:	
  3485                           ; 2 bytes @ 0x4
  3486                           
  3487  0074                     ___awdiv@dividend:	
  3488                           ; 2 bytes @ 0x4
  3489                           
  3490  0074                     ___lwdiv@dividend:	
  3491                           ; 2 bytes @ 0x4
  3492                           
  3493                           
  3494                           ; 2 bytes @ 0x4
  3495  0074                     	ds	1
  3496  0075                     ??_CC2500_WriteREG:	
  3497  0075                     ??_setLED:	
  3498                           ; 0 bytes @ 0x5
  3499                           
  3500  0075                     ??_setDimmerLights_DimmingClose:	
  3501                           ; 0 bytes @ 0x5
  3502                           
  3503  0075                     ??_DelayOff_Initialization:	
  3504                           ; 0 bytes @ 0x5
  3505                           
  3506  0075                     ??_setDimmerLights_DimmingRun:	
  3507                           ; 0 bytes @ 0x5
  3508                           
  3509  0075                     ??_getAD:	
  3510                           ; 0 bytes @ 0x5
  3511                           
  3512  0075                     CC2500_WriteCommand@command:	
  3513                           ; 0 bytes @ 0x5
  3514                           
  3515  0075                     CC2500_ReadStatus@status_addr:	
  3516                           ; 1 bytes @ 0x5
  3517                           
  3518  0075                     getDelayOff_GO@go:	
  3519                           ; 1 bytes @ 0x5
  3520                           
  3521  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3522                           ; 1 bytes @ 0x5
  3523                           
  3524  0075                     _getDimmerLights_Allow_Condition$2730:	
  3525                           ; 1 bytes @ 0x5
  3526                           
  3527  0075                     getDimmerLights_Status@status:	
  3528                           ; 1 bytes @ 0x5
  3529                           
  3530  0075                     setLED@led:	
  3531                           ; 1 bytes @ 0x5
  3532                           
  3533  0075                     getAD@adcon0:	
  3534                           ; 1 bytes @ 0x5
  3535                           
  3536  0075                     Flash_Memory_Read@ret:	
  3537                           ; 1 bytes @ 0x5
  3538                           
  3539  0075                     getMain_Lights_Count@count:	
  3540                           ; 1 bytes @ 0x5
  3541                           
  3542  0075                     ___bmul@multiplier:	
  3543                           ; 1 bytes @ 0x5
  3544                           
  3545  0075                     ___ftpack@exp:	
  3546                           ; 1 bytes @ 0x5
  3547                           
  3548  0075                     ___lbdiv@counter:	
  3549                           ; 1 bytes @ 0x5
  3550                           
  3551  0075                     _getMain_All_Error_Status$4215:	
  3552                           ; 1 bytes @ 0x5
  3553                           
  3554                           
  3555                           ; 2 bytes @ 0x5
  3556  0075                     	ds	1
  3557  0076                     ??_CC2500_ClearTXFIFO:	
  3558  0076                     ??_CC2500_ClearRXFIFO:	
  3559                           ; 0 bytes @ 0x6
  3560                           
  3561  0076                     ??_CC2500_SIDLEMode:	
  3562                           ; 0 bytes @ 0x6
  3563                           
  3564  0076                     ??_setLED_Initialization:	
  3565                           ; 0 bytes @ 0x6
  3566                           
  3567  0076                     ??_Flash_Memory_Modify:	
  3568                           ; 0 bytes @ 0x6
  3569                           
  3570  0076                     ??_getLoad_AD:	
  3571                           ; 0 bytes @ 0x6
  3572                           
  3573  0076                     ??_getTemp_AD:	
  3574                           ; 0 bytes @ 0x6
  3575                           
  3576  0076                     ??_setRF_AdjControl:	
  3577                           ; 0 bytes @ 0x6
  3578                           
  3579  0076                     ??_setSw_Initialization:	
  3580                           ; 0 bytes @ 0x6
  3581                           
  3582  0076                     ??_CC2500_TxData:	
  3583                           ; 0 bytes @ 0x6
  3584                           
  3585  0076                     ??_CC2500_RxData:	
  3586                           ; 0 bytes @ 0x6
  3587                           
  3588  0076                     ??_Flash_Memory_Initialization:	
  3589                           ; 0 bytes @ 0x6
  3590                           
  3591  0076                     ??___wmul:	
  3592                           ; 0 bytes @ 0x6
  3593                           
  3594  0076                     ??___awdiv:	
  3595                           ; 0 bytes @ 0x6
  3596                           
  3597  0076                     ??___lwdiv:	
  3598                           ; 0 bytes @ 0x6
  3599                           
  3600  0076                     CC2500_WriteREG@w_addr:	
  3601                           ; 0 bytes @ 0x6
  3602                           
  3603  0076                     _getDimmerLights_Allow_Condition$2731:	
  3604                           ; 1 bytes @ 0x6
  3605                           
  3606  0076                     setDimmerLights_DimmingRun@lights:	
  3607                           ; 1 bytes @ 0x6
  3608                           
  3609  0076                     setLED_Initialization@led:	
  3610                           ; 1 bytes @ 0x6
  3611                           
  3612  0076                     setLED_Main@led:	
  3613                           ; 1 bytes @ 0x6
  3614                           
  3615  0076                     setSw_Initialization@sw:	
  3616                           ; 1 bytes @ 0x6
  3617                           
  3618  0076                     ___ftpack@sign:	
  3619                           ; 1 bytes @ 0x6
  3620                           
  3621  0076                     ___lbdiv@quotient:	
  3622                           ; 1 bytes @ 0x6
  3623                           
  3624  0076                     getBuz_GO@i:	
  3625                           ; 1 bytes @ 0x6
  3626                           
  3627  0076                     DelayTime_1us@j:	
  3628                           ; 2 bytes @ 0x6
  3629                           
  3630  0076                     ___wmul@product:	
  3631                           ; 2 bytes @ 0x6
  3632                           
  3633                           
  3634                           ; 2 bytes @ 0x6
  3635  0076                     	ds	1
  3636  0077                     ??_CC2500_InitSetREG:	
  3637  0077                     ??_CC2500_InitPATable:	
  3638                           ; 0 bytes @ 0x7
  3639                           
  3640  0077                     ??_Switch_Initialization:	
  3641                           ; 0 bytes @ 0x7
  3642                           
  3643  0077                     ??___ftpack:	
  3644                           ; 0 bytes @ 0x7
  3645                           
  3646  0077                     ??_setBuz:	
  3647                           ; 0 bytes @ 0x7
  3648                           
  3649  0077                     ??_LED_Initialization:	
  3650                           ; 0 bytes @ 0x7
  3651                           
  3652  0077                     ??_LED_Main:	
  3653                           ; 0 bytes @ 0x7
  3654                           
  3655  0077                     ?_Division:	
  3656                           ; 0 bytes @ 0x7
  3657                           
  3658  0077                     CC2500_TxData@loop_e:	
  3659                           ; 1 bytes @ 0x7
  3660                           
  3661  0077                     CC2500_RxData@loop_f:	
  3662                           ; 1 bytes @ 0x7
  3663                           
  3664  0077                     getDimmerLights_Allow_Condition@lights:	
  3665                           ; 1 bytes @ 0x7
  3666                           
  3667  0077                     Division@num:	
  3668                           ; 1 bytes @ 0x7
  3669                           
  3670  0077                     Flash_Memory_Initialization@value:	
  3671                           ; 1 bytes @ 0x7
  3672                           
  3673  0077                     Flash_Memory_Modify@i:	
  3674                           ; 1 bytes @ 0x7
  3675                           
  3676  0077                     getMain_All_Error_Status@command:	
  3677                           ; 1 bytes @ 0x7
  3678                           
  3679  0077                     getTemp_AD@channel:	
  3680                           ; 1 bytes @ 0x7
  3681                           
  3682  0077                     setRF_AdjControl@status:	
  3683                           ; 1 bytes @ 0x7
  3684                           
  3685  0077                     ___lwdiv@quotient:	
  3686                           ; 1 bytes @ 0x7
  3687                           
  3688                           
  3689                           ; 2 bytes @ 0x7
  3690  0077                     	ds	1
  3691  0078                     ??_CC2500_PowerRST:	
  3692  0078                     ??_CC2500_FrequencyCabr:	
  3693                           ; 0 bytes @ 0x8
  3694                           
  3695  0078                     ??_Division:	
  3696                           ; 0 bytes @ 0x8
  3697                           
  3698  0078                     ??_Flash_Memory_Main:	
  3699                           ; 0 bytes @ 0x8
  3700                           
  3701  0078                     setBuz@count:	
  3702                           ; 0 bytes @ 0x8
  3703                           
  3704  0078                     CC2500_InitPATable@temp:	
  3705                           ; 1 bytes @ 0x8
  3706                           
  3707  0078                     getDimmerLights_Allow_Condition@allow:	
  3708                           ; 1 bytes @ 0x8
  3709                           
  3710  0078                     getMain_All_Error_Status@status:	
  3711                           ; 1 bytes @ 0x8
  3712                           
  3713  0078                     setRF_AdjControl@dimmingStatus:	
  3714                           ; 1 bytes @ 0x8
  3715                           
  3716  0078                     getTemp_AD@ADRES:	
  3717                           ; 1 bytes @ 0x8
  3718                           
  3719                           
  3720                           ; 2 bytes @ 0x8
  3721  0078                     	ds	1
  3722  0079                     ??_setDimmerLights_SwOn:	
  3723  0079                     ??_my_MainTimer:	
  3724                           ; 0 bytes @ 0x9
  3725                           
  3726  0079                     ??_Exception_Main:	
  3727                           ; 0 bytes @ 0x9
  3728                           
  3729  0079                     CC2500_InitPATable@loop_d:	
  3730                           ; 0 bytes @ 0x9
  3731                           
  3732  0079                     setRF_AdjControl@sw:	
  3733                           ; 1 bytes @ 0x9
  3734                           
  3735  0079                     ___lwdiv@counter:	
  3736                           ; 1 bytes @ 0x9
  3737                           
  3738                           
  3739                           ; 1 bytes @ 0x9
  3740  0079                     	ds	1
  3741  007A                     ??_setDimmerLights_Main:	
  3742  007A                     ??_DimmerLights_TwoPhase_Main:	
  3743                           ; 0 bytes @ 0xA
  3744                           
  3745  007A                     ??_Temp_Main:	
  3746                           ; 0 bytes @ 0xA
  3747                           
  3748  007A                     ??_Switch_Main:	
  3749                           ; 0 bytes @ 0xA
  3750                           
  3751  007A                     ??_RF_Main:	
  3752                           ; 0 bytes @ 0xA
  3753                           
  3754  007A                     ??_setControl_Lights_Table:	
  3755                           ; 0 bytes @ 0xA
  3756                           
  3757  007A                     ??_CC2500_PowerOnInitial:	
  3758                           ; 0 bytes @ 0xA
  3759                           
  3760  007A                     ??_DelayOff_Main:	
  3761                           ; 0 bytes @ 0xA
  3762                           
  3763  007A                     ??_DimmerLights_Initialization:	
  3764                           ; 0 bytes @ 0xA
  3765                           
  3766  007A                     ??_DimmerLights_Main:	
  3767                           ; 0 bytes @ 0xA
  3768                           
  3769  007A                     ??_main:	
  3770                           ; 0 bytes @ 0xA
  3771                           
  3772  007A                     ??___ftneg:	
  3773                           ; 0 bytes @ 0xA
  3774                           
  3775                           
  3776                           	psect	cstackBANK0
  3777  0020                     __pcstackBANK0:	
  3778                           ; 0 bytes @ 0xA
  3779                           
  3780  0020                     ??_Load_Main:	
  3781  0020                     ?___awtoft:	
  3782                           ; 0 bytes @ 0x0
  3783                           
  3784  0020                     CC2500_InitSetREG@temp1:	
  3785                           ; 3 bytes @ 0x0
  3786                           
  3787  0020                     Division@value:	
  3788                           ; 1 bytes @ 0x0
  3789                           
  3790  0020                     Flash_Memory_Main@key_Status:	
  3791                           ; 1 bytes @ 0x0
  3792                           
  3793  0020                     getLoad_AD@channel:	
  3794                           ; 1 bytes @ 0x0
  3795                           
  3796  0020                     ___awdiv@counter:	
  3797                           ; 1 bytes @ 0x0
  3798                           
  3799  0020                     ___awtoft@c:	
  3800                           ; 1 bytes @ 0x0
  3801                           
  3802                           
  3803                           ; 2 bytes @ 0x0
  3804  0020                     	ds	1
  3805  0021                     CC2500_InitSetREG@temp2:	
  3806  0021                     Division@result:	
  3807                           ; 1 bytes @ 0x1
  3808                           
  3809  0021                     _Flash_Memory_Main$3708:	
  3810                           ; 1 bytes @ 0x1
  3811                           
  3812  0021                     getLoad_AD@k:	
  3813                           ; 1 bytes @ 0x1
  3814                           
  3815  0021                     ___awdiv@sign:	
  3816                           ; 1 bytes @ 0x1
  3817                           
  3818                           
  3819                           ; 1 bytes @ 0x1
  3820  0021                     	ds	1
  3821  0022                     ??_DimmerIntr_ValueCalculate:	
  3822  0022                     CC2500_InitSetREG@loop_c:	
  3823                           ; 0 bytes @ 0x2
  3824                           
  3825  0022                     getLoad_AD@j:	
  3826                           ; 1 bytes @ 0x2
  3827                           
  3828  0022                     Load_Main@error:	
  3829                           ; 1 bytes @ 0x2
  3830                           
  3831  0022                     ___awdiv@quotient:	
  3832                           ; 1 bytes @ 0x2
  3833                           
  3834                           
  3835                           ; 2 bytes @ 0x2
  3836  0022                     	ds	1
  3837  0023                     ??___awtoft:	
  3838  0023                     getLoad_AD@ADRES:	
  3839                           ; 0 bytes @ 0x3
  3840                           
  3841  0023                     _Load_Main$4636:	
  3842                           ; 2 bytes @ 0x3
  3843                           
  3844                           
  3845                           ; 2 bytes @ 0x3
  3846  0023                     	ds	1
  3847  0024                     ?_setBuz:	
  3848  0024                     DimmerIntr_ValueCalculate@lights:	
  3849                           ; 0 bytes @ 0x4
  3850                           
  3851  0024                     setBuz@time:	
  3852                           ; 1 bytes @ 0x4
  3853                           
  3854                           
  3855                           ; 2 bytes @ 0x4
  3856  0024                     	ds	1
  3857  0025                     ??_DimmerLights_DimmingFunction:	
  3858  0025                     getLoad_AD@i:	
  3859                           ; 0 bytes @ 0x5
  3860                           
  3861  0025                     Load_Main@ErrorCountValue:	
  3862                           ; 1 bytes @ 0x5
  3863                           
  3864  0025                     ___awtoft@sign:	
  3865                           ; 1 bytes @ 0x5
  3866                           
  3867                           
  3868                           ; 1 bytes @ 0x5
  3869  0025                     	ds	1
  3870  0026                     ?___ftdiv:	
  3871  0026                     ?___ftmul:	
  3872                           ; 3 bytes @ 0x6
  3873                           
  3874  0026                     setDimmerLights_SwOn@dimmingStatus:	
  3875                           ; 3 bytes @ 0x6
  3876                           
  3877  0026                     DimmerLights_DimmingFunction@lights:	
  3878                           ; 1 bytes @ 0x6
  3879                           
  3880  0026                     Exception_Main@status:	
  3881                           ; 1 bytes @ 0x6
  3882                           
  3883  0026                     Load_Main@Load_RunStatus:	
  3884                           ; 1 bytes @ 0x6
  3885                           
  3886  0026                     ___ftdiv@f2:	
  3887                           ; 1 bytes @ 0x6
  3888                           
  3889  0026                     ___ftmul@f1:	
  3890                           ; 3 bytes @ 0x6
  3891                           
  3892                           
  3893                           ; 3 bytes @ 0x6
  3894  0026                     	ds	1
  3895  0027                     _setDimmerLights_SwOn$2659:	
  3896  0027                     Exception_Main@count:	
  3897                           ; 1 bytes @ 0x7
  3898                           
  3899  0027                     Load_Main@LightsCount:	
  3900                           ; 1 bytes @ 0x7
  3901                           
  3902                           
  3903                           ; 1 bytes @ 0x7
  3904  0027                     	ds	1
  3905  0028                     _setDimmerLights_SwOn$2668:	
  3906  0028                     Exception_Main@error:	
  3907                           ; 1 bytes @ 0x8
  3908                           
  3909  0028                     Load_Main@i:	
  3910                           ; 1 bytes @ 0x8
  3911                           
  3912                           
  3913                           ; 2 bytes @ 0x8
  3914  0028                     	ds	1
  3915  0029                     setDimmerLights_SwOn@idle:	
  3916  0029                     Exception_Main@i:	
  3917                           ; 1 bytes @ 0x9
  3918                           
  3919  0029                     ___ftdiv@f1:	
  3920                           ; 2 bytes @ 0x9
  3921                           
  3922  0029                     ___ftmul@f2:	
  3923                           ; 3 bytes @ 0x9
  3924                           
  3925                           
  3926                           ; 3 bytes @ 0x9
  3927  0029                     	ds	1
  3928  002A                     setDimmerLights_SwOn@sw:	
  3929                           
  3930                           ; 1 bytes @ 0xA
  3931  002A                     	ds	1
  3932  002B                     ??_setSw_Main:	
  3933  002B                     Exception_Main@i_4227:	
  3934                           ; 0 bytes @ 0xB
  3935                           
  3936                           
  3937                           ; 2 bytes @ 0xB
  3938  002B                     	ds	1
  3939  002C                     ??___ftdiv:	
  3940  002C                     ??___ftmul:	
  3941                           ; 0 bytes @ 0xC
  3942                           
  3943                           
  3944                           ; 0 bytes @ 0xC
  3945  002C                     	ds	1
  3946  002D                     Exception_Main@lights:	
  3947  002D                     setSw_Main@sw:	
  3948                           ; 1 bytes @ 0xD
  3949                           
  3950                           
  3951                           ; 1 bytes @ 0xD
  3952  002D                     	ds	3
  3953  0030                     ___ftdiv@cntr:	
  3954  0030                     ___ftmul@exp:	
  3955                           ; 1 bytes @ 0x10
  3956                           
  3957                           
  3958                           ; 1 bytes @ 0x10
  3959  0030                     	ds	1
  3960  0031                     ___ftdiv@f3:	
  3961  0031                     ___ftmul@f3_as_product:	
  3962                           ; 3 bytes @ 0x11
  3963                           
  3964                           
  3965                           ; 3 bytes @ 0x11
  3966  0031                     	ds	3
  3967  0034                     ___ftdiv@exp:	
  3968  0034                     ___ftmul@cntr:	
  3969                           ; 1 bytes @ 0x14
  3970                           
  3971                           
  3972                           ; 1 bytes @ 0x14
  3973  0034                     	ds	1
  3974  0035                     ___ftdiv@sign:	
  3975  0035                     ___ftmul@sign:	
  3976                           ; 1 bytes @ 0x15
  3977                           
  3978                           
  3979                           ; 1 bytes @ 0x15
  3980  0035                     	ds	1
  3981  0036                     ?___ftneg:	
  3982  0036                     ___ftneg@f1:	
  3983                           ; 3 bytes @ 0x16
  3984                           
  3985                           
  3986                           ; 3 bytes @ 0x16
  3987  0036                     	ds	3
  3988  0039                     ?___ftadd:	
  3989  0039                     ___ftadd@f1:	
  3990                           ; 3 bytes @ 0x19
  3991                           
  3992                           
  3993                           ; 3 bytes @ 0x19
  3994  0039                     	ds	3
  3995  003C                     ___ftadd@f2:	
  3996                           
  3997                           ; 3 bytes @ 0x1C
  3998  003C                     	ds	3
  3999  003F                     ??___ftadd:	
  4000                           
  4001                           ; 0 bytes @ 0x1F
  4002  003F                     	ds	4
  4003  0043                     ___ftadd@sign:	
  4004                           
  4005                           ; 1 bytes @ 0x23
  4006  0043                     	ds	1
  4007  0044                     ___ftadd@exp2:	
  4008                           
  4009                           ; 1 bytes @ 0x24
  4010  0044                     	ds	1
  4011  0045                     ___ftadd@exp1:	
  4012                           
  4013                           ; 1 bytes @ 0x25
  4014  0045                     	ds	1
  4015  0046                     ?___fttol:	
  4016  0046                     ___fttol@f1:	
  4017                           ; 4 bytes @ 0x26
  4018                           
  4019                           
  4020                           ; 3 bytes @ 0x26
  4021  0046                     	ds	4
  4022  004A                     ??___fttol:	
  4023                           
  4024                           ; 0 bytes @ 0x2A
  4025  004A                     	ds	4
  4026  004E                     ___fttol@sign1:	
  4027                           
  4028                           ; 1 bytes @ 0x2E
  4029  004E                     	ds	1
  4030  004F                     ___fttol@lval:	
  4031                           
  4032                           ; 4 bytes @ 0x2F
  4033  004F                     	ds	4
  4034  0053                     ___fttol@exp1:	
  4035                           
  4036                           ; 1 bytes @ 0x33
  4037  0053                     	ds	1
  4038  0054                     ??_getDimmerLights_ValueToPercent:	
  4039  0054                     ??_getDimmerLights_PercentToValue:	
  4040                           ; 0 bytes @ 0x34
  4041                           
  4042                           
  4043                           ; 0 bytes @ 0x34
  4044  0054                     	ds	2
  4045  0056                     getDimmerLights_PercentToValue@value:	
  4046  0056                     getDimmerLights_ValueToPercent@value:	
  4047                           ; 1 bytes @ 0x36
  4048                           
  4049                           
  4050                           ; 1 bytes @ 0x36
  4051  0056                     	ds	1
  4052  0057                     getDimmerLights_PercentToValue@i:	
  4053  0057                     getDimmerLights_ValueToPercent@i:	
  4054                           ; 3 bytes @ 0x37
  4055                           
  4056                           
  4057                           ; 3 bytes @ 0x37
  4058  0057                     	ds	3
  4059  005A                     ?_setProductData:	
  4060  005A                     ??_DimmerIntr_Initialization:	
  4061                           ; 0 bytes @ 0x3A
  4062                           
  4063  005A                     ?_setDimmerIntr_MaxmumValue:	
  4064                           ; 0 bytes @ 0x3A
  4065                           
  4066  005A                     setDimmerIntr_MaxmumValue@value:	
  4067                           ; 0 bytes @ 0x3A
  4068                           
  4069  005A                     setProductData@value:	
  4070                           ; 1 bytes @ 0x3A
  4071                           
  4072                           
  4073                           ; 1 bytes @ 0x3A
  4074  005A                     	ds	1
  4075  005B                     ??_setProductData:	
  4076  005B                     ??_setDimmerIntr_MaxmumValue:	
  4077                           ; 0 bytes @ 0x3B
  4078                           
  4079                           
  4080                           ; 0 bytes @ 0x3B
  4081  005B                     	ds	1
  4082  005C                     setDimmerIntr_MaxmumValue@lights:	
  4083  005C                     setProductData@address:	
  4084                           ; 1 bytes @ 0x3C
  4085                           
  4086                           
  4087                           ; 1 bytes @ 0x3C
  4088  005C                     	ds	1
  4089  005D                     ??_DlyOff_Main:	
  4090  005D                     ??_DimmerLights_AssignationDimming:	
  4091                           ; 0 bytes @ 0x3D
  4092                           
  4093  005D                     ?_setRF_DimmerLights:	
  4094                           ; 0 bytes @ 0x3D
  4095                           
  4096  005D                     ??_setTemp_Main:	
  4097                           ; 0 bytes @ 0x3D
  4098                           
  4099  005D                     ??_setLog_Code:	
  4100                           ; 0 bytes @ 0x3D
  4101                           
  4102  005D                     ??_setRFSW_AdjControl:	
  4103                           ; 0 bytes @ 0x3D
  4104                           
  4105  005D                     ?_setDelayOff_GO:	
  4106                           ; 0 bytes @ 0x3D
  4107                           
  4108  005D                     setDelayOff_GO@command:	
  4109                           ; 0 bytes @ 0x3D
  4110                           
  4111  005D                     setRF_DimmerLights@on:	
  4112                           ; 1 bytes @ 0x3D
  4113                           
  4114                           
  4115                           ; 1 bytes @ 0x3D
  4116  005D                     	ds	1
  4117  005E                     ??_setRF_DimmerLights:	
  4118  005E                     setDelayOff_GO@value:	
  4119                           ; 0 bytes @ 0x3E
  4120                           
  4121                           
  4122                           ; 1 bytes @ 0x3E
  4123  005E                     	ds	1
  4124  005F                     ??_setDelayOff_GO:	
  4125  005F                     DlyOff_Main@sw:	
  4126                           ; 0 bytes @ 0x3F
  4127                           
  4128  005F                     DimmerLights_AssignationDimming@status:	
  4129                           ; 1 bytes @ 0x3F
  4130                           
  4131  005F                     setTemp_Main@error:	
  4132                           ; 1 bytes @ 0x3F
  4133                           
  4134  005F                     setRFSW_AdjControl@status:	
  4135                           ; 1 bytes @ 0x3F
  4136                           
  4137                           
  4138                           ; 1 bytes @ 0x3F
  4139  005F                     	ds	1
  4140  0060                     DimmerLights_AssignationDimming@sw:	
  4141  0060                     setTemp_Main@TempGO:	
  4142                           ; 1 bytes @ 0x40
  4143                           
  4144  0060                     setRFSW_AdjControl@sw:	
  4145                           ; 1 bytes @ 0x40
  4146                           
  4147  0060                     setRF_DimmerLights@status:	
  4148                           ; 1 bytes @ 0x40
  4149                           
  4150                           
  4151                           ; 1 bytes @ 0x40
  4152  0060                     	ds	1
  4153  0061                     setDelayOff_GO@i:	
  4154  0061                     DimmerLights_TwoPhase_Main@lights:	
  4155                           ; 1 bytes @ 0x41
  4156                           
  4157  0061                     setRF_DimmerLights@lights:	
  4158                           ; 1 bytes @ 0x41
  4159                           
  4160  0061                     setTemp_Main@SafeValue:	
  4161                           ; 1 bytes @ 0x41
  4162                           
  4163                           
  4164                           ; 2 bytes @ 0x41
  4165  0061                     	ds	1
  4166  0062                     ?_setDimmerLights_Dimming:	
  4167  0062                     setDelayOff_GO@j:	
  4168                           ; 0 bytes @ 0x42
  4169                           
  4170  0062                     setDimmerLights_Dimming@status:	
  4171                           ; 1 bytes @ 0x42
  4172                           
  4173                           
  4174                           ; 1 bytes @ 0x42
  4175  0062                     	ds	1
  4176  0063                     ??_setDimmerLights_Dimming:	
  4177  0063                     setDelayOff_GO@k:	
  4178                           ; 0 bytes @ 0x43
  4179                           
  4180  0063                     setTemp_Main@DangerValue:	
  4181                           ; 1 bytes @ 0x43
  4182                           
  4183                           
  4184                           ; 2 bytes @ 0x43
  4185  0063                     	ds	1
  4186  0064                     setDelayOff_GO@sw:	
  4187  0064                     setDimmerLights_Dimming@value:	
  4188                           ; 1 bytes @ 0x44
  4189                           
  4190                           
  4191                           ; 1 bytes @ 0x44
  4192  0064                     	ds	1
  4193  0065                     ?_setDimmerLights_OnOff:	
  4194  0065                     ??_setRFSW_Control:	
  4195                           ; 0 bytes @ 0x45
  4196                           
  4197  0065                     setDimmerLights_OnOff@command:	
  4198                           ; 0 bytes @ 0x45
  4199                           
  4200  0065                     setDimmerLights_Dimming@lights:	
  4201                           ; 1 bytes @ 0x45
  4202                           
  4203  0065                     setTemp_Main@AD:	
  4204                           ; 1 bytes @ 0x45
  4205                           
  4206                           
  4207                           ; 2 bytes @ 0x45
  4208  0065                     	ds	1
  4209  0066                     ??_setDimmerLights_OnOff:	
  4210  0066                     setRFSW_Control@status:	
  4211                           ; 0 bytes @ 0x46
  4212                           
  4213                           
  4214                           ; 1 bytes @ 0x46
  4215  0066                     	ds	1
  4216  0067                     setRFSW_Control@sw:	
  4217                           
  4218                           ; 1 bytes @ 0x47
  4219  0067                     	ds	1
  4220  0068                     ??_getRxData:	
  4221  0068                     setDimmerLights_OnOff@lights:	
  4222                           ; 0 bytes @ 0x48
  4223                           
  4224                           
  4225                           ; 1 bytes @ 0x48
  4226  0068                     	ds	1
  4227  0069                     setDimmerLights_Main@lights:	
  4228  0069                     getRxData@error:	
  4229                           ; 1 bytes @ 0x49
  4230                           
  4231                           
  4232                           ; 1 bytes @ 0x49
  4233  0069                     	ds	1
  4234  006A                     ??_setRF_Main:	
  4235                           
  4236                           ; 0 bytes @ 0x4A
  4237  006A                     	ds	1
  4238  006B                     setRF_Main@error:	
  4239                           
  4240                           ; 1 bytes @ 0x4B
  4241  006B                     	ds	1
  4242                           
  4243                           	psect	maintext
  4244  1492                     __pmaintext:	
  4245 ;;
  4246 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4247 ;;
  4248 ;; *************** function _main *****************
  4249 ;; Defined at:
  4250 ;;		line 7 in file "../src/Main_B1.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  argc            2    0[BANK4 ] int 
  4253 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;		None
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  2    0[BANK4 ] int 
  4258 ;; Registers used:
  4259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4260 ;; Tracked objects:
  4261 ;;		On entry : 17F/0
  4262 ;;		On exit  : 0/0
  4263 ;;		Unchanged: 0/0
  4264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4265 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4269 ;;Total ram usage:        4 bytes
  4270 ;; Hardware stack levels required when called:   11
  4271 ;; This function calls:
  4272 ;;		_Buzzer_Initialization
  4273 ;;		_Buzzer_Main
  4274 ;;		_CC2500_PowerOnInitial
  4275 ;;		_DelayOff_Initialization
  4276 ;;		_DelayOff_Main
  4277 ;;		_DimmerLights_Initialization
  4278 ;;		_DimmerLights_Main
  4279 ;;		_Exception_Main
  4280 ;;		_Flash_Memory_Initialization
  4281 ;;		_Flash_Memory_Main
  4282 ;;		_LED_Initialization
  4283 ;;		_LED_Main
  4284 ;;		_Load_Initialization
  4285 ;;		_Load_Main
  4286 ;;		_Mcu_Initialization
  4287 ;;		_RF_Initialization
  4288 ;;		_RF_Main
  4289 ;;		_Switch_Initialization
  4290 ;;		_Switch_Main
  4291 ;;		_Temp_Initialization
  4292 ;;		_Temp_Main
  4293 ;;		_WDT_Main
  4294 ;;		_getLoad_AD
  4295 ;;		_getTemp_AD
  4296 ;;		_myMain_Initialization
  4297 ;;		_my_MainTimer
  4298 ;; This function is called by:
  4299 ;;		Startup code after reset
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           
  4304                           ;psect for function _main
  4305  1492                     _main:	
  4306                           
  4307                           ;Main_B1.c: 8: myMain_Initialization();
  4308                           
  4309                           ;incstack = 0
  4310                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4311  1492  3199  2106  3194   	fcall	_myMain_Initialization
  4312                           
  4313                           ;Main_B1.c: 9: Mcu_Initialization();
  4314  1495  319A  2202  3194   	fcall	_Mcu_Initialization
  4315                           
  4316                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4317  1498  3186  2601  3194   	fcall	_Flash_Memory_Initialization
  4318                           
  4319                           ;Main_B1.c: 11: LED_Initialization();
  4320  149B  3198  20C6  3194   	fcall	_LED_Initialization
  4321                           
  4322                           ;Main_B1.c: 12: Buzzer_Initialization();
  4323  149E  31A7  27BD  3194   	fcall	_Buzzer_Initialization
  4324                           
  4325                           ;Main_B1.c: 14: ;;
  4326                           ;Main_B1.c: 15: Temp_Initialization();
  4327  14A1  31A7  27C9  3194   	fcall	_Temp_Initialization
  4328                           
  4329                           ;Main_B1.c: 16: Load_Initialization();
  4330  14A4  31A7  27C0  3194   	fcall	_Load_Initialization
  4331                           
  4332                           ;Main_B1.c: 17: ;;
  4333                           ;Main_B1.c: 18: DelayOff_Initialization();
  4334  14A7  3198  2024  3194   	fcall	_DelayOff_Initialization
  4335                           
  4336                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4337  14AA  3198  206B  3194   	fcall	_DimmerLights_Initialization
  4338                           
  4339                           ;Main_B1.c: 21: ;;
  4340                           ;Main_B1.c: 22: ;;
  4341                           ;Main_B1.c: 23: ;;
  4342                           ;Main_B1.c: 24: Switch_Initialization();
  4343  14AD  3198  203C  3194   	fcall	_Switch_Initialization
  4344                           
  4345                           ;Main_B1.c: 25: RF_Initialization();
  4346  14B0  31A7  27C3  3194   	fcall	_RF_Initialization
  4347                           
  4348                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4349  14B3  319A  2291  3194   	fcall	_CC2500_PowerOnInitial
  4350  14B6                     l11305:	
  4351                           ;Main_B1.c: 27: ;;
  4352                           ;Main_B1.c: 28: ;;
  4353                           ;Main_B1.c: 30: while (1) {
  4354                           
  4355                           
  4356                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4357  14B6  0021               	movlb	1	; select bank1
  4358  14B7  1C4F               	btfss	_myMain^(0+128),0
  4359  14B8  2CC1               	goto	l11309
  4360                           
  4361                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4362  14B9  3005               	movlw	5
  4363  14BA  3189  2164  3194   	fcall	_getLoad_AD
  4364                           
  4365                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4366  14BD  3009               	movlw	9
  4367  14BE  3196  266D  3194   	fcall	_getTemp_AD
  4368  14C1                     l11309:	
  4369                           
  4370                           ;Main_B1.c: 57: }
  4371                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4372  14C1  0022               	movlb	2	; select bank2
  4373  14C2  1C25               	btfss	_Timer1^(0+256),0
  4374  14C3  2CB6               	goto	l11305
  4375                           
  4376                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4377  14C4  1025               	bcf	_Timer1^(0+256),0
  4378                           
  4379                           ;Main_B1.c: 96: my_MainTimer();
  4380  14C5  3190  20EA  3194   	fcall	_my_MainTimer
  4381                           
  4382                           ;Main_B1.c: 97: WDT_Main();
  4383  14C8  3199  21BF  3194   	fcall	_WDT_Main
  4384                           
  4385                           ;Main_B1.c: 98: ;;
  4386                           ;Main_B1.c: 99: ;;
  4387                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4388  14CB  0021               	movlb	1	; select bank1
  4389  14CC  1C4F               	btfss	_myMain^(0+128),0
  4390  14CD  2CB6               	goto	l11305
  4391                           
  4392                           ;Main_B1.c: 101: Flash_Memory_Main();
  4393  14CE  3191  219C  3194   	fcall	_Flash_Memory_Main
  4394                           
  4395                           ;Main_B1.c: 103: LED_Main();
  4396  14D1  3198  20D2  3194   	fcall	_LED_Main
  4397                           
  4398                           ;Main_B1.c: 104: Buzzer_Main();
  4399  14D4  3192  22A6  3194   	fcall	_Buzzer_Main
  4400                           
  4401                           ;Main_B1.c: 106: ;;
  4402                           ;Main_B1.c: 107: Temp_Main();
  4403  14D7  31A7  27CC  3194   	fcall	_Temp_Main
  4404                           
  4405                           ;Main_B1.c: 108: Load_Main();
  4406  14DA  3180  2053  3194   	fcall	_Load_Main
  4407                           
  4408                           ;Main_B1.c: 109: ;;
  4409                           ;Main_B1.c: 111: ;;
  4410                           ;Main_B1.c: 112: DimmerLights_Main();
  4411  14DD  319E  26F9  3194   	fcall	_DimmerLights_Main
  4412                           
  4413                           ;Main_B1.c: 113: Switch_Main();
  4414  14E0  3198  2097  3194   	fcall	_Switch_Main
  4415                           
  4416                           ;Main_B1.c: 114: ;;
  4417                           ;Main_B1.c: 115: ;;
  4418                           ;Main_B1.c: 117: RF_Main();
  4419  14E3  31A7  27C6  3194   	fcall	_RF_Main
  4420                           
  4421                           ;Main_B1.c: 118: DelayOff_Main();
  4422  14E6  3198  202C  3194   	fcall	_DelayOff_Main
  4423                           
  4424                           ;Main_B1.c: 119: ;;
  4425                           ;Main_B1.c: 120: ;;
  4426                           ;Main_B1.c: 121: Exception_Main();
  4427  14E9  3185  252F  3194   	fcall	_Exception_Main
  4428  14EC  2CB6               	goto	l11305
  4429  14ED                     __end_of_main:	
  4430                           ;Main_B1.c: 128: }
  4431                           ;Main_B1.c: 129: }
  4432                           ;Main_B1.c: 163: }
  4433                           ;Main_B1.c: 164: return (0);
  4434                           ;	Return value of _main is never used
  4435                           
  4436                           
  4437                           	psect	text1
  4438  10EA                     __ptext1:	
  4439 ;; *************** function _my_MainTimer *****************
  4440 ;; Defined at:
  4441 ;;		line 185 in file "../src/Main_B1.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;		None
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;		None
  4446 ;; Return value:  Size  Location     Type
  4447 ;;		None               void
  4448 ;; Registers used:
  4449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4457 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4458 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4459 ;;Total ram usage:        1 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    5
  4462 ;; This function calls:
  4463 ;;		_setBuz
  4464 ;; This function is called by:
  4465 ;;		_main
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           
  4470                           ;psect for function _my_MainTimer
  4471  10EA                     _my_MainTimer:	
  4472                           
  4473                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4474                           
  4475                           ;incstack = 0
  4476                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4477  10EA  0021               	movlb	1	; select bank1
  4478  10EB  184F               	btfsc	_myMain^(0+128),0
  4479  10EC  2902               	goto	l11021
  4480                           
  4481                           ;Main_B1.c: 188: myMain.PowerCount++;
  4482  10ED  3001               	movlw	1
  4483  10EE  00F9               	movwf	??_my_MainTimer
  4484  10EF  0879               	movf	??_my_MainTimer,w
  4485  10F0  07D0               	addwf	(_myMain^(0+128)+1),f
  4486                           
  4487                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4488  10F1  0850               	movf	(_myMain^(0+128)+1),w
  4489  10F2  3A4B               	xorlw	75
  4490  10F3  1D03               	skipz
  4491  10F4  0008               	return
  4492                           
  4493                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4494  10F5  01D0               	clrf	(_myMain^(0+128)+1)
  4495                           
  4496                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4497  10F6  144F               	bsf	_myMain^(0+128),0
  4498                           
  4499                           ;Main_B1.c: 196: setBuz(3, 50);
  4500  10F7  3032               	movlw	50
  4501  10F8  0020               	movlb	0	; select bank0
  4502  10F9  00A4               	movwf	setBuz@time
  4503  10FA  3000               	movlw	0
  4504  10FB  00A5               	movwf	setBuz@time+1
  4505  10FC  3003               	movlw	3
  4506  10FD  3192  22EC         	fcall	_setBuz
  4507                           
  4508                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4509  10FF  0021               	movlb	1	; select bank1
  4510  1100  164F               	bsf	_myMain^(0+128),4
  4511                           
  4512                           ;Main_B1.c: 206: }
  4513                           ;Main_B1.c: 207: } else {
  4514  1101  0008               	return
  4515  1102                     l11021:	
  4516                           
  4517                           ;Main_B1.c: 208: myMain.PowerCount++;
  4518  1102  3001               	movlw	1
  4519  1103  00F9               	movwf	??_my_MainTimer
  4520  1104  0879               	movf	??_my_MainTimer,w
  4521  1105  07D0               	addwf	(_myMain^(0+128)+1),f
  4522                           
  4523                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4524  1106  0850               	movf	(_myMain^(0+128)+1),w
  4525  1107  3A32               	xorlw	50
  4526  1108  1903               	btfsc	3,2
  4527                           
  4528                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4529  1109  01D0               	clrf	(_myMain^(0+128)+1)
  4530                           
  4531                           ;Main_B1.c: 226: }
  4532                           ;Main_B1.c: 228: myMain.Count1++;
  4533  110A  3001               	movlw	1
  4534  110B  07D3               	addwf	(_myMain^(0+128)+4),f
  4535  110C  3000               	movlw	0
  4536  110D  3DD4               	addwfc	((_myMain+1)^(0+128)+4),f
  4537                           
  4538                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4539  110E  3004               	movlw	4
  4540  110F  3ECF               	addlw	_myMain& (0+255)
  4541  1110  0086               	movwf	6
  4542  1111  0187               	clrf	7
  4543  1112  3F40               	moviw [0]fsr1
  4544  1113  3A32               	xorlw	50
  4545  1114  1D03               	skipz
  4546  1115  2918               	goto	u12505
  4547  1116  3F41               	moviw [1]fsr1
  4548  1117  3A00               	xorlw	0
  4549  1118                     u12505:	
  4550  1118  1D03               	skipz
  4551  1119  0008               	return
  4552                           
  4553                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4554  111A  01D3               	clrf	(_myMain^(0+128)+4)
  4555  111B  01D4               	clrf	((_myMain+1)^(0+128)+4)
  4556                           
  4557                           ;Main_B1.c: 242: if (myMain.Flag) {
  4558  111C  1CCF               	btfss	_myMain^(0+128),1
  4559  111D  2920               	goto	l1716
  4560                           
  4561                           ;Main_B1.c: 243: myMain.Flag = 0;
  4562  111E  10CF               	bcf	_myMain^(0+128),1
  4563                           
  4564                           ;Main_B1.c: 252: } else {
  4565  111F  0008               	return
  4566  1120                     l1716:	
  4567                           
  4568                           ;Main_B1.c: 253: myMain.Flag = 1;
  4569  1120  14CF               	bsf	_myMain^(0+128),1
  4570  1121  0008               	return
  4571  1122                     __end_of_my_MainTimer:	
  4572                           
  4573                           	psect	text2
  4574  1906                     __ptext2:	
  4575 ;; *************** function _myMain_Initialization *****************
  4576 ;; Defined at:
  4577 ;;		line 170 in file "../src/Main_B1.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;		None
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;		None
  4582 ;; Return value:  Size  Location     Type
  4583 ;;		None               void
  4584 ;; Registers used:
  4585 ;;		wreg, fsr1l, fsr1h
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4594 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4595 ;;Total ram usage:        1 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    3
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_main
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           
  4606                           ;psect for function _myMain_Initialization
  4607  1906                     _myMain_Initialization:	
  4608                           
  4609                           ;Main_B1.c: 173: product = &_product;
  4610                           
  4611                           ;incstack = 0
  4612                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4613  1906  30A0               	movlw	__product& (0+255)
  4614  1907  00F2               	movwf	??_myMain_Initialization
  4615  1908  0872               	movf	??_myMain_Initialization,w
  4616  1909  00FB               	movwf	_product
  4617                           
  4618                           ;Main_B1.c: 174: product->Data[20] = 210;
  4619  190A  30D2               	movlw	210
  4620  190B  00F2               	movwf	??_myMain_Initialization
  4621  190C  087B               	movf	_product,w
  4622  190D  3E14               	addlw	20
  4623  190E  0086               	movwf	6
  4624  190F  3002               	movlw	2	; select bank4/5
  4625  1910  0087               	movwf	7
  4626  1911  0872               	movf	??_myMain_Initialization,w
  4627  1912  0081               	movwf	1
  4628  1913  0008               	return
  4629  1914                     __end_of_myMain_Initialization:	
  4630                           
  4631                           	psect	text3
  4632  166D                     __ptext3:	
  4633 ;; *************** function _getTemp_AD *****************
  4634 ;; Defined at:
  4635 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;  channel         1    wreg     unsigned char 
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;  channel         1    7[COMMON] unsigned char 
  4640 ;;  ADRES           2    8[COMMON] unsigned int 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;		None               void
  4643 ;; Registers used:
  4644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4651 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4652 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4653 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4654 ;;Total ram usage:        4 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    5
  4657 ;; This function calls:
  4658 ;;		_getAD
  4659 ;; This function is called by:
  4660 ;;		_main
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           
  4665                           ;psect for function _getTemp_AD
  4666  166D                     _getTemp_AD:	
  4667                           
  4668                           ;incstack = 0
  4669                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4670                           ;getTemp_AD@channel stored from wreg
  4671  166D  00F7               	movwf	getTemp_AD@channel
  4672                           
  4673                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4674  166E  01F8               	clrf	getTemp_AD@ADRES
  4675  166F  01F9               	clrf	getTemp_AD@ADRES+1
  4676                           
  4677                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4678  1670  0022               	movlb	2	; select bank2
  4679  1671  1D5A               	btfss	_Temp^(0+256),2
  4680  1672  0008               	return
  4681                           
  4682                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4683  1673  30F0               	movlw	240
  4684  1674  00F6               	movwf	??_getTemp_AD
  4685  1675  0876               	movf	??_getTemp_AD,w
  4686  1676  00F2               	movwf	getAD@adcon1
  4687  1677  0877               	movf	getTemp_AD@channel,w
  4688  1678  319B  23A4  3196   	fcall	_getAD
  4689  167B  0873               	movf	?_getAD+1,w
  4690  167C  01F9               	clrf	getTemp_AD@ADRES+1
  4691  167D  07F9               	addwf	getTemp_AD@ADRES+1,f
  4692  167E  0872               	movf	?_getAD,w
  4693  167F  01F8               	clrf	getTemp_AD@ADRES
  4694  1680  07F8               	addwf	getTemp_AD@ADRES,f
  4695                           
  4696                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4697  1681  0879               	movf	getTemp_AD@ADRES+1,w
  4698  1682  0478               	iorwf	getTemp_AD@ADRES,w
  4699  1683  1903               	skipnz
  4700  1684  0008               	return
  4701                           
  4702                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4703  1685  0879               	movf	getTemp_AD@ADRES+1,w
  4704  1686  0022               	movlb	2	; select bank2
  4705  1687  025F               	subwf	((_Temp+1)^(0+256)+4),w
  4706  1688  1D03               	skipz
  4707  1689  2E8C               	goto	u9685
  4708  168A  0878               	movf	getTemp_AD@ADRES,w
  4709  168B  025E               	subwf	(_Temp^(0+256)+4),w
  4710  168C                     u9685:	
  4711  168C  1803               	skipnc
  4712  168D  2E95               	goto	l9195
  4713                           
  4714                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4715  168E  0879               	movf	getTemp_AD@ADRES+1,w
  4716  168F  01DF               	clrf	((_Temp+1)^(0+256)+4)
  4717  1690  07DF               	addwf	((_Temp+1)^(0+256)+4),f
  4718  1691  0878               	movf	getTemp_AD@ADRES,w
  4719  1692  01DE               	clrf	(_Temp^(0+256)+4)
  4720  1693  07DE               	addwf	(_Temp^(0+256)+4),f
  4721                           
  4722                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4723  1694  0008               	return
  4724  1695                     l9195:	
  4725  1695  0879               	movf	getTemp_AD@ADRES+1,w
  4726  1696  0261               	subwf	((_Temp+1)^(0+256)+6),w
  4727  1697  1D03               	skipz
  4728  1698  2E9B               	goto	u9695
  4729  1699  0878               	movf	getTemp_AD@ADRES,w
  4730  169A  0260               	subwf	(_Temp^(0+256)+6),w
  4731  169B                     u9695:	
  4732  169B  1803               	skipnc
  4733  169C  2EA4               	goto	l9199
  4734                           
  4735                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4736  169D  0879               	movf	getTemp_AD@ADRES+1,w
  4737  169E  01E1               	clrf	((_Temp+1)^(0+256)+6)
  4738  169F  07E1               	addwf	((_Temp+1)^(0+256)+6),f
  4739  16A0  0878               	movf	getTemp_AD@ADRES,w
  4740  16A1  01E0               	clrf	(_Temp^(0+256)+6)
  4741  16A2  07E0               	addwf	(_Temp^(0+256)+6),f
  4742                           
  4743                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4744  16A3  0008               	return
  4745  16A4                     l9199:	
  4746  16A4  0879               	movf	getTemp_AD@ADRES+1,w
  4747  16A5  0263               	subwf	((_Temp+1)^(0+256)+8),w
  4748  16A6  1D03               	skipz
  4749  16A7  2EAA               	goto	u9705
  4750  16A8  0878               	movf	getTemp_AD@ADRES,w
  4751  16A9  0262               	subwf	(_Temp^(0+256)+8),w
  4752  16AA                     u9705:	
  4753  16AA  1803               	skipnc
  4754  16AB  2EB3               	goto	l9203
  4755                           
  4756                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4757  16AC  0879               	movf	getTemp_AD@ADRES+1,w
  4758  16AD  01E3               	clrf	((_Temp+1)^(0+256)+8)
  4759  16AE  07E3               	addwf	((_Temp+1)^(0+256)+8),f
  4760  16AF  0878               	movf	getTemp_AD@ADRES,w
  4761  16B0  01E2               	clrf	(_Temp^(0+256)+8)
  4762  16B1  07E2               	addwf	(_Temp^(0+256)+8),f
  4763                           
  4764                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4765  16B2  0008               	return
  4766  16B3                     l9203:	
  4767  16B3  0879               	movf	getTemp_AD@ADRES+1,w
  4768  16B4  0265               	subwf	((_Temp+1)^(0+256)+10),w
  4769  16B5  1D03               	skipz
  4770  16B6  2EB9               	goto	u9715
  4771  16B7  0878               	movf	getTemp_AD@ADRES,w
  4772  16B8  0264               	subwf	(_Temp^(0+256)+10),w
  4773  16B9                     u9715:	
  4774  16B9  1803               	skipnc
  4775  16BA  2EC2               	goto	l9207
  4776                           
  4777                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4778  16BB  0879               	movf	getTemp_AD@ADRES+1,w
  4779  16BC  01E5               	clrf	((_Temp+1)^(0+256)+10)
  4780  16BD  07E5               	addwf	((_Temp+1)^(0+256)+10),f
  4781  16BE  0878               	movf	getTemp_AD@ADRES,w
  4782  16BF  01E4               	clrf	(_Temp^(0+256)+10)
  4783  16C0  07E4               	addwf	(_Temp^(0+256)+10),f
  4784                           
  4785                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4786  16C1  0008               	return
  4787  16C2                     l9207:	
  4788  16C2  0879               	movf	getTemp_AD@ADRES+1,w
  4789  16C3  0267               	subwf	((_Temp+1)^(0+256)+12),w
  4790  16C4  1D03               	skipz
  4791  16C5  2EC8               	goto	u9725
  4792  16C6  0878               	movf	getTemp_AD@ADRES,w
  4793  16C7  0266               	subwf	(_Temp^(0+256)+12),w
  4794  16C8                     u9725:	
  4795  16C8  1803               	skipnc
  4796  16C9  0008               	return
  4797                           
  4798                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4799  16CA  0879               	movf	getTemp_AD@ADRES+1,w
  4800  16CB  01E7               	clrf	((_Temp+1)^(0+256)+12)
  4801  16CC  07E7               	addwf	((_Temp+1)^(0+256)+12),f
  4802  16CD  0878               	movf	getTemp_AD@ADRES,w
  4803  16CE  01E6               	clrf	(_Temp^(0+256)+12)
  4804  16CF  07E6               	addwf	(_Temp^(0+256)+12),f
  4805  16D0  0008               	return
  4806  16D1                     __end_of_getTemp_AD:	
  4807                           
  4808                           	psect	text4
  4809  0964                     __ptext4:	
  4810 ;; *************** function _getLoad_AD *****************
  4811 ;; Defined at:
  4812 ;;		line 16 in file "../src/OverLoad_B1.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  channel         1    wreg     unsigned char 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  channel         1    0[BANK0 ] unsigned char 
  4817 ;;  ADRES           2    3[BANK0 ] unsigned int 
  4818 ;;  i               1    5[BANK0 ] unsigned char 
  4819 ;;  j               1    2[BANK0 ] unsigned char 
  4820 ;;  k               1    1[BANK0 ] unsigned char 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;		None               void
  4823 ;; Registers used:
  4824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;Total ram usage:        8 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    5
  4837 ;; This function calls:
  4838 ;;		_getAD
  4839 ;; This function is called by:
  4840 ;;		_main
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           
  4845                           ;psect for function _getLoad_AD
  4846  0964                     _getLoad_AD:	
  4847                           
  4848                           ;incstack = 0
  4849                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4850                           ;getLoad_AD@channel stored from wreg
  4851  0964  0020               	movlb	0	; select bank0
  4852  0965  00A0               	movwf	getLoad_AD@channel
  4853                           
  4854                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4855  0966  01A5               	clrf	getLoad_AD@i
  4856  0967  01A2               	clrf	getLoad_AD@j
  4857  0968  01A1               	clrf	getLoad_AD@k
  4858                           
  4859                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4860  0969  01A3               	clrf	getLoad_AD@ADRES
  4861  096A  01A4               	clrf	getLoad_AD@ADRES+1
  4862                           
  4863                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4864  096B  0022               	movlb	2	; select bank2
  4865  096C  1E32               	btfss	_Load^(0+256),4
  4866  096D  0008               	return
  4867                           
  4868                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4869  096E  30F3               	movlw	243
  4870  096F  00F6               	movwf	??_getLoad_AD
  4871  0970  0876               	movf	??_getLoad_AD,w
  4872  0971  00F2               	movwf	getAD@adcon1
  4873  0972  0020               	movlb	0	; select bank0
  4874  0973  0820               	movf	getLoad_AD@channel,w
  4875  0974  319B  23A4  3189   	fcall	_getAD
  4876  0977  0873               	movf	?_getAD+1,w
  4877  0978  0020               	movlb	0	; select bank0
  4878  0979  01A4               	clrf	getLoad_AD@ADRES+1
  4879  097A  07A4               	addwf	getLoad_AD@ADRES+1,f
  4880  097B  0872               	movf	?_getAD,w
  4881  097C  01A3               	clrf	getLoad_AD@ADRES
  4882  097D  07A3               	addwf	getLoad_AD@ADRES,f
  4883                           
  4884                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4885  097E  01A5               	clrf	getLoad_AD@i
  4886  097F  3004               	movlw	4
  4887  0980  0225               	subwf	getLoad_AD@i,w
  4888  0981  1803               	btfsc	3,0
  4889  0982  29AA               	goto	l9163
  4890  0983                     l9151:	
  4891                           
  4892                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4893  0983  3525               	lslf	getLoad_AD@i,w
  4894  0984  3E3D               	addlw	(_Load+11)& (0+255)
  4895  0985  0086               	movwf	6
  4896  0986  3001               	movlw	1	; select bank2/3
  4897  0987  0087               	movwf	7
  4898  0988  3F40               	moviw [0]fsr1
  4899  0989  00F6               	movwf	??_getLoad_AD
  4900  098A  3F41               	moviw [1]fsr1
  4901  098B  00F7               	movwf	??_getLoad_AD+1
  4902  098C  0824               	movf	getLoad_AD@ADRES+1,w
  4903  098D  0277               	subwf	??_getLoad_AD+1,w
  4904  098E  1D03               	skipz
  4905  098F  2992               	goto	u9585
  4906  0990  0823               	movf	getLoad_AD@ADRES,w
  4907  0991  0276               	subwf	??_getLoad_AD,w
  4908  0992                     u9585:	
  4909  0992  1803               	skipnc
  4910  0993  29A2               	goto	l9159
  4911  0994  08A2               	movf	getLoad_AD@j,f
  4912  0995  1D03               	skipz
  4913  0996  29A2               	goto	l9159
  4914                           
  4915                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4916  0997  3525               	lslf	getLoad_AD@i,w
  4917  0998  3E3D               	addlw	(_Load+11)& (0+255)
  4918  0999  0086               	movwf	6
  4919  099A  3001               	movlw	1	; select bank2/3
  4920  099B  0087               	movwf	7
  4921  099C  0823               	movf	getLoad_AD@ADRES,w
  4922  099D  3FC0               	movwi [0]fsr1
  4923  099E  0824               	movf	getLoad_AD@ADRES+1,w
  4924  099F  3FC1               	movwi [1]fsr1
  4925                           
  4926                           ;OverLoad_B1.c: 25: j = 1;
  4927  09A0  01A2               	clrf	getLoad_AD@j
  4928  09A1  0AA2               	incf	getLoad_AD@j,f
  4929  09A2                     l9159:	
  4930  09A2  3001               	movlw	1
  4931  09A3  00F6               	movwf	??_getLoad_AD
  4932  09A4  0876               	movf	??_getLoad_AD,w
  4933  09A5  07A5               	addwf	getLoad_AD@i,f
  4934  09A6  3004               	movlw	4
  4935  09A7  0225               	subwf	getLoad_AD@i,w
  4936  09A8  1C03               	skipc
  4937  09A9  2983               	goto	l9151
  4938  09AA                     l9163:	
  4939                           
  4940                           ;OverLoad_B1.c: 26: }
  4941                           ;OverLoad_B1.c: 27: }
  4942                           ;OverLoad_B1.c: 28: if (j == 0) {
  4943  09AA  08A2               	movf	getLoad_AD@j,f
  4944  09AB  1D03               	skipz
  4945  09AC  0008               	return
  4946                           
  4947                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4948  09AD  01A5               	clrf	getLoad_AD@i
  4949  09AE                     L1:	
  4950  09AE  3004               	movlw	4
  4951  09AF  0225               	subwf	getLoad_AD@i,w
  4952  09B0  1803               	btfsc	3,0
  4953  09B1  0008               	return
  4954                           
  4955                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4956  09B2  3525               	lslf	getLoad_AD@i,w
  4957  09B3  3E47               	addlw	(_Load+21)& (0+255)
  4958  09B4  0086               	movwf	6
  4959  09B5  3001               	movlw	1	; select bank2/3
  4960  09B6  0087               	movwf	7
  4961  09B7  3F40               	moviw [0]fsr1
  4962  09B8  00F6               	movwf	??_getLoad_AD
  4963  09B9  3F41               	moviw [1]fsr1
  4964  09BA  00F7               	movwf	??_getLoad_AD+1
  4965  09BB  0877               	movf	??_getLoad_AD+1,w
  4966  09BC  0224               	subwf	getLoad_AD@ADRES+1,w
  4967  09BD  1D03               	skipz
  4968  09BE  29C1               	goto	u9635
  4969  09BF  0876               	movf	??_getLoad_AD,w
  4970  09C0  0223               	subwf	getLoad_AD@ADRES,w
  4971  09C1                     u9635:	
  4972  09C1  1803               	skipnc
  4973  09C2  29D1               	goto	l9179
  4974  09C3  08A1               	movf	getLoad_AD@k,f
  4975  09C4  1D03               	skipz
  4976  09C5  29D1               	goto	l9179
  4977                           
  4978                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4979  09C6  3525               	lslf	getLoad_AD@i,w
  4980  09C7  3E47               	addlw	(_Load+21)& (0+255)
  4981  09C8  0086               	movwf	6
  4982  09C9  3001               	movlw	1	; select bank2/3
  4983  09CA  0087               	movwf	7
  4984  09CB  0823               	movf	getLoad_AD@ADRES,w
  4985  09CC  3FC0               	movwi [0]fsr1
  4986  09CD  0824               	movf	getLoad_AD@ADRES+1,w
  4987  09CE  3FC1               	movwi [1]fsr1
  4988                           
  4989                           ;OverLoad_B1.c: 32: k = 1;
  4990  09CF  01A1               	clrf	getLoad_AD@k
  4991  09D0  0AA1               	incf	getLoad_AD@k,f
  4992  09D1                     l9179:	
  4993  09D1  3001               	movlw	1
  4994  09D2  00F6               	movwf	??_getLoad_AD
  4995  09D3  0876               	movf	??_getLoad_AD,w
  4996  09D4  07A5               	addwf	getLoad_AD@i,f
  4997  09D5  29AE               	goto	L1
  4998  09D6                     __end_of_getLoad_AD:	
  4999                           
  5000                           	psect	text5
  5001  1BA4                     __ptext5:	
  5002 ;; *************** function _getAD *****************
  5003 ;; Defined at:
  5004 ;;		line 461 in file "../src/MCU_B1.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;  adcon0          1    wreg     unsigned char 
  5007 ;;  adcon1          1    2[COMMON] unsigned char 
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;  adcon0          1    5[COMMON] unsigned char 
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  2    2[COMMON] int 
  5012 ;; Registers used:
  5013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5019 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5022 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5023 ;;Total ram usage:        4 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    4
  5026 ;; This function calls:
  5027 ;;		_Timeout_Counter
  5028 ;;		_set_TimeoutCleared
  5029 ;; This function is called by:
  5030 ;;		_getLoad_AD
  5031 ;;		_getTemp_AD
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           
  5036                           ;psect for function _getAD
  5037  1BA4                     _getAD:	
  5038                           
  5039                           ;incstack = 0
  5040                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5041                           ;getAD@adcon0 stored from wreg
  5042  1BA4  00F5               	movwf	getAD@adcon0
  5043                           
  5044                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  5045  1BA5  0875               	movf	getAD@adcon0,w
  5046  1BA6  0021               	movlb	1	; select bank1
  5047  1BA7  009D               	movwf	29	;volatile
  5048                           
  5049                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  5050  1BA8  0872               	movf	getAD@adcon1,w
  5051  1BA9  009E               	movwf	30	;volatile
  5052                           
  5053                           ;MCU_B1.c: 464: GO_nDONE = 1;
  5054  1BAA  149D               	bsf	29,1	;volatile
  5055                           
  5056                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5057  1BAB  2BAF               	goto	l8619
  5058  1BAC                     l8617:	
  5059                           
  5060                           ;MCU_B1.c: 466: Timeout_Counter();
  5061  1BAC  319A  22A6  319B   	fcall	_Timeout_Counter
  5062  1BAF                     l8619:	
  5063  1BAF  0021               	movlb	1	; select bank1
  5064  1BB0  1C9D               	btfss	29,1	;volatile
  5065  1BB1  2BB4               	goto	l8623
  5066  1BB2  1D59               	btfss	(_myMain^(0+128)+10),2
  5067  1BB3  2BAC               	goto	l8617
  5068  1BB4                     l8623:	
  5069                           
  5070                           ;MCU_B1.c: 467: };
  5071                           ;MCU_B1.c: 468: set_TimeoutCleared();
  5072  1BB4  31A7  27E8         	fcall	_set_TimeoutCleared
  5073                           
  5074                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  5075  1BB6  0021               	movlb	1	; select bank1
  5076  1BB7  081C               	movf	28,w	;volatile
  5077  1BB8  01F3               	clrf	?_getAD+1
  5078  1BB9  07F3               	addwf	?_getAD+1,f
  5079  1BBA  081B               	movf	27,w	;volatile
  5080  1BBB  01F2               	clrf	?_getAD
  5081  1BBC  07F2               	addwf	?_getAD,f
  5082  1BBD  0008               	return
  5083  1BBE                     __end_of_getAD:	
  5084                           
  5085                           	psect	text6
  5086  19BF                     __ptext6:	
  5087 ;; *************** function _WDT_Main *****************
  5088 ;; Defined at:
  5089 ;;		line 1119 in file "../src/MCU_B1.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;		None
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;		None
  5094 ;; Return value:  Size  Location     Type
  5095 ;;		None               void
  5096 ;; Registers used:
  5097 ;;		wreg, status,2, status,0, pclath, cstack
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;Total ram usage:        1 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    4
  5110 ;; This function calls:
  5111 ;;		_WDT_Clearing
  5112 ;; This function is called by:
  5113 ;;		_main
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           
  5118                           ;psect for function _WDT_Main
  5119  19BF                     _WDT_Main:	
  5120                           
  5121                           ;MCU_B1.c: 1120: if (WDT.Enable == 1) {
  5122                           
  5123                           ;incstack = 0
  5124                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5125  19BF  0022               	movlb	2	; select bank2
  5126  19C0  1C2A               	btfss	_WDT^(0+256),0
  5127  19C1  0008               	return
  5128                           
  5129                           ;MCU_B1.c: 1121: if (WDT.Timer-- > 0) {
  5130  19C2  3001               	movlw	1
  5131  19C3  02AB               	subwf	(_WDT^(0+256)+1),f
  5132  19C4  082B               	movf	(_WDT^(0+256)+1),w
  5133  19C5  3AFF               	xorlw	255
  5134  19C6  1903               	skipnz
  5135  19C7  0008               	return
  5136                           
  5137                           ;MCU_B1.c: 1122: WDT.Timer = 100;
  5138  19C8  3064               	movlw	100
  5139  19C9  00F2               	movwf	??_WDT_Main
  5140  19CA  0872               	movf	??_WDT_Main,w
  5141  19CB  00AB               	movwf	(_WDT^(0+256)+1)
  5142                           
  5143                           ;MCU_B1.c: 1123: WDT_Clearing();
  5144  19CC  3180  2002         	fcall	_WDT_Clearing
  5145  19CE  0008               	return
  5146  19CF                     __end_of_WDT_Main:	
  5147                           
  5148                           	psect	text7
  5149  0002                     __ptext7:	
  5150 ;; *************** function _WDT_Clearing *****************
  5151 ;; Defined at:
  5152 ;;		line 1129 in file "../src/MCU_B1.c"
  5153 ;; Parameters:    Size  Location     Type
  5154 ;;		None
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;		None
  5157 ;; Return value:  Size  Location     Type
  5158 ;;		None               void
  5159 ;; Registers used:
  5160 ;;		None
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5170 ;;Total ram usage:        0 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:    3
  5173 ;; This function calls:
  5174 ;;		Nothing
  5175 ;; This function is called by:
  5176 ;;		_WDT_Main
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           
  5181                           ;psect for function _WDT_Clearing
  5182  0002                     _WDT_Clearing:	
  5183                           
  5184                           ;incstack = 0
  5185                           ; Regs used in _WDT_Clearing: []
  5186  0002  0064               	clrwdt	;# 
  5187  0003  0008               	return
  5188  0004                     __end_of_WDT_Clearing:	
  5189                           
  5190                           	psect	text8
  5191  27CC                     __ptext8:	
  5192 ;; *************** function _Temp_Main *****************
  5193 ;; Defined at:
  5194 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;		None
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;		None
  5199 ;; Return value:  Size  Location     Type
  5200 ;;		None               void
  5201 ;; Registers used:
  5202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;Total ram usage:        0 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    6
  5215 ;; This function calls:
  5216 ;;		_setTemp_Main
  5217 ;; This function is called by:
  5218 ;;		_main
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function _Temp_Main
  5224  27CC                     _Temp_Main:	
  5225                           
  5226                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5227                           
  5228                           ;incstack = 0
  5229                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5230  27CC  3184  245A         	fcall	_setTemp_Main
  5231  27CE  0008               	return
  5232  27CF                     __end_of_Temp_Main:	
  5233                           
  5234                           	psect	text9
  5235  045A                     __ptext9:	
  5236 ;; *************** function _setTemp_Main *****************
  5237 ;; Defined at:
  5238 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;		None
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  AD              2   69[BANK0 ] int 
  5243 ;;  DangerValue     2   67[BANK0 ] unsigned int 
  5244 ;;  SafeValue       2   65[BANK0 ] unsigned int 
  5245 ;;  TempGO          1   64[BANK0 ] unsigned char 
  5246 ;;  error           1   63[BANK0 ] unsigned char 
  5247 ;; Return value:  Size  Location     Type
  5248 ;;		None               void
  5249 ;; Registers used:
  5250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;Total ram usage:       10 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    5
  5263 ;; This function calls:
  5264 ;;		___lwdiv
  5265 ;;		_getMain_All_Error_Status
  5266 ;;		_getMain_All_LightsStatus
  5267 ;;		_setBuz
  5268 ;;		_setOverTemp_ADV_Restore
  5269 ;;		_setProductData
  5270 ;; This function is called by:
  5271 ;;		_Temp_Main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _setTemp_Main
  5277  045A                     _setTemp_Main:	
  5278                           
  5279                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5280                           
  5281                           ;incstack = 0
  5282                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5283  045A  3000               	movlw	0
  5284  045B  319E  263C  3184   	fcall	_getMain_All_Error_Status
  5285  045E  0020               	movlb	0	; select bank0
  5286  045F  00DD               	movwf	??_setTemp_Main
  5287  0460  085D               	movf	??_setTemp_Main,w
  5288  0461  00DF               	movwf	setTemp_Main@error
  5289                           
  5290                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5291  0462  01E1               	clrf	setTemp_Main@SafeValue
  5292  0463  01E2               	clrf	setTemp_Main@SafeValue+1
  5293  0464  01E3               	clrf	setTemp_Main@DangerValue
  5294  0465  01E4               	clrf	setTemp_Main@DangerValue+1
  5295                           
  5296                           ;OverTemperature_B1.c: 75: int AD = 0;
  5297  0466  01E5               	clrf	setTemp_Main@AD
  5298  0467  01E6               	clrf	setTemp_Main@AD+1
  5299                           
  5300                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5301  0468  3199  2141  3184   	fcall	_getMain_All_LightsStatus
  5302  046B  0020               	movlb	0	; select bank0
  5303  046C  00DD               	movwf	??_setTemp_Main
  5304  046D  085D               	movf	??_setTemp_Main,w
  5305  046E  00E0               	movwf	setTemp_Main@TempGO
  5306                           
  5307                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5308  046F  0022               	movlb	2	; select bank2
  5309  0470  1C5A               	btfss	_Temp^(0+256),0
  5310  0471  2D29               	goto	l2094
  5311                           
  5312                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5313  0472  195A               	btfsc	_Temp^(0+256),2
  5314  0473  2C91               	goto	l10707
  5315                           
  5316                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5317  0474  0020               	movlb	0	; select bank0
  5318  0475  0860               	movf	setTemp_Main@TempGO,w
  5319  0476  3A01               	xorlw	1
  5320  0477  1D03               	skipz
  5321  0478  2C7C               	goto	l2100
  5322  0479  0022               	movlb	2	; select bank2
  5323  047A  1CDA               	btfss	_Temp^(0+256),1
  5324  047B  2C7F               	goto	l10699
  5325  047C                     l2100:	
  5326  047C  0022               	movlb	2	; select bank2
  5327  047D  1CDA               	btfss	_Temp^(0+256),1
  5328  047E  2C8E               	goto	l10705
  5329  047F                     l10699:	
  5330                           
  5331                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5332  047F  3001               	movlw	1
  5333  0480  07DB               	addwf	(_Temp^(0+256)+1),f
  5334  0481  3000               	movlw	0
  5335  0482  3DDC               	addwfc	((_Temp+1)^(0+256)+1),f
  5336                           
  5337                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5338  0483  3000               	movlw	0
  5339  0484  025C               	subwf	((_Temp+1)^(0+256)+1),w
  5340  0485  30FA               	movlw	250
  5341  0486  1903               	skipnz
  5342  0487  025B               	subwf	(_Temp^(0+256)+1),w
  5343  0488  1C03               	skipc
  5344  0489  0008               	return
  5345                           
  5346                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5347  048A  01DB               	clrf	(_Temp^(0+256)+1)
  5348  048B  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5349                           
  5350                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5351  048C  155A               	bsf	_Temp^(0+256),2
  5352                           
  5353                           ;OverTemperature_B1.c: 92: }
  5354                           ;OverTemperature_B1.c: 93: } else {
  5355  048D  0008               	return
  5356  048E                     l10705:	
  5357                           
  5358                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5359  048E  01DB               	clrf	(_Temp^(0+256)+1)
  5360  048F  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5361                           
  5362                           ;OverTemperature_B1.c: 95: }
  5363                           ;OverTemperature_B1.c: 96: } else {
  5364  0490  0008               	return
  5365  0491                     l10707:	
  5366                           
  5367                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5368  0491  3001               	movlw	1
  5369  0492  07DB               	addwf	(_Temp^(0+256)+1),f
  5370  0493  3000               	movlw	0
  5371  0494  3DDC               	addwfc	((_Temp+1)^(0+256)+1),f
  5372                           
  5373                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5374  0495  3000               	movlw	0
  5375  0496  025C               	subwf	((_Temp+1)^(0+256)+1),w
  5376  0497  3005               	movlw	5
  5377  0498  1903               	skipnz
  5378  0499  025B               	subwf	(_Temp^(0+256)+1),w
  5379  049A  1C03               	skipc
  5380  049B  0008               	return
  5381                           
  5382                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5383  049C  01DB               	clrf	(_Temp^(0+256)+1)
  5384  049D  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5385                           
  5386                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5387  049E  3003               	movlw	3
  5388  049F  00F2               	movwf	___lwdiv@divisor
  5389  04A0  3000               	movlw	0
  5390  04A1  00F3               	movwf	___lwdiv@divisor+1
  5391  04A2  300A               	movlw	10
  5392  04A3  3E5A               	addlw	_Temp& (0+255)
  5393  04A4  0086               	movwf	6
  5394  04A5  3001               	movlw	1	; select bank2/3
  5395  04A6  0087               	movwf	7
  5396  04A7  3008               	movlw	8
  5397  04A8  3E5A               	addlw	_Temp& (0+255)
  5398  04A9  0084               	movwf	4
  5399  04AA  3001               	movlw	1	; select bank2/3
  5400  04AB  0085               	movwf	5
  5401  04AC  3F00               	moviw [0]fsr0
  5402  04AD  0760               	addwf	(_Temp^(0+256)+6),w
  5403  04AE  0020               	movlb	0	; select bank0
  5404  04AF  00DD               	movwf	??_setTemp_Main
  5405  04B0  3F01               	moviw [1]fsr0
  5406  04B1  0022               	movlb	2	; select bank2
  5407  04B2  3D61               	addwfc	((_Temp+1)^(0+256)+6),w
  5408  04B3  0020               	movlb	0	; select bank0
  5409  04B4  00DE               	movwf	??_setTemp_Main+1
  5410  04B5  3F40               	moviw [0]fsr1
  5411  04B6  075D               	addwf	??_setTemp_Main,w
  5412  04B7  00F4               	movwf	___lwdiv@dividend
  5413  04B8  3F41               	moviw [1]fsr1
  5414  04B9  3D5E               	addwfc	??_setTemp_Main+1,w
  5415  04BA  00F5               	movwf	___lwdiv@dividend+1
  5416  04BB  319F  275D  3184   	fcall	___lwdiv
  5417  04BE  0873               	movf	?___lwdiv+1,w
  5418  04BF  0020               	movlb	0	; select bank0
  5419  04C0  01E6               	clrf	setTemp_Main@AD+1
  5420  04C1  07E6               	addwf	setTemp_Main@AD+1,f
  5421  04C2  0872               	movf	?___lwdiv,w
  5422  04C3  01E5               	clrf	setTemp_Main@AD
  5423  04C4  07E5               	addwf	setTemp_Main@AD,f
  5424                           
  5425                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5426  04C5  319B  238A  3184   	fcall	_setOverTemp_ADV_Restore
  5427                           
  5428                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5429  04C8  0020               	movlb	0	; select bank0
  5430  04C9  0866               	movf	setTemp_Main@AD+1,w
  5431  04CA  3A80               	xorlw	128
  5432  04CB  00DD               	movwf	??_setTemp_Main
  5433  04CC  3080               	movlw	128
  5434  04CD  025D               	subwf	??_setTemp_Main,w
  5435  04CE  1D03               	skipz
  5436  04CF  2CD2               	goto	u11975
  5437  04D0  3001               	movlw	1
  5438  04D1  0265               	subwf	setTemp_Main@AD,w
  5439  04D2                     u11975:	
  5440  04D2  1C03               	skipc
  5441  04D3  0008               	return
  5442                           
  5443                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5444  04D4  0022               	movlb	2	; select bank2
  5445  04D5  115A               	bcf	_Temp^(0+256),2
  5446                           
  5447                           ;OverTemperature_B1.c: 123: SafeValue = 420;
  5448  04D6  30A4               	movlw	164
  5449  04D7  0020               	movlb	0	; select bank0
  5450  04D8  00E1               	movwf	setTemp_Main@SafeValue
  5451  04D9  3001               	movlw	1
  5452  04DA  00E2               	movwf	setTemp_Main@SafeValue+1
  5453                           
  5454                           ;OverTemperature_B1.c: 124: DangerValue = 365;
  5455  04DB  306D               	movlw	109
  5456  04DC  00E3               	movwf	setTemp_Main@DangerValue
  5457  04DD  3001               	movlw	1
  5458  04DE  00E4               	movwf	setTemp_Main@DangerValue+1
  5459                           
  5460                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5461  04DF  0022               	movlb	2	; select bank2
  5462  04E0  1CDA               	btfss	_Temp^(0+256),1
  5463  04E1  2D00               	goto	l10737
  5464                           
  5465                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5466  04E2  0020               	movlb	0	; select bank0
  5467  04E3  0862               	movf	setTemp_Main@SafeValue+1,w
  5468  04E4  0266               	subwf	setTemp_Main@AD+1,w
  5469  04E5  1D03               	skipz
  5470  04E6  2CE9               	goto	u11995
  5471  04E7  0861               	movf	setTemp_Main@SafeValue,w
  5472  04E8  0265               	subwf	setTemp_Main@AD,w
  5473  04E9                     u11995:	
  5474  04E9  1C03               	skipc
  5475  04EA  2D15               	goto	l10747
  5476                           
  5477                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5478  04EB  3001               	movlw	1
  5479  04EC  00DD               	movwf	??_setTemp_Main
  5480  04ED  085D               	movf	??_setTemp_Main,w
  5481  04EE  0022               	movlb	2	; select bank2
  5482  04EF  07DD               	addwf	(_Temp^(0+256)+3),f
  5483                           
  5484                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5485  04F0  3003               	movlw	3
  5486  04F1  025D               	subwf	(_Temp^(0+256)+3),w
  5487  04F2  1C03               	skipc
  5488  04F3  2D17               	goto	l10749
  5489                           
  5490                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5491  04F4  01DD               	clrf	(_Temp^(0+256)+3)
  5492                           
  5493                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5494  04F5  10DA               	bcf	_Temp^(0+256),1
  5495                           
  5496                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5497  04F6  3064               	movlw	100
  5498  04F7  0020               	movlb	0	; select bank0
  5499  04F8  00A4               	movwf	setBuz@time
  5500  04F9  3000               	movlw	0
  5501  04FA  00A5               	movwf	setBuz@time+1
  5502  04FB  3002               	movlw	2
  5503  04FC  3192  22EC  3184   	fcall	_setBuz
  5504                           
  5505                           ;OverTemperature_B1.c: 137: }
  5506                           ;OverTemperature_B1.c: 138: } else {
  5507  04FF  2D17               	goto	l10749
  5508  0500                     l10737:	
  5509                           ;OverTemperature_B1.c: 140: }
  5510                           ;OverTemperature_B1.c: 141: } else {
  5511                           
  5512                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5513                           
  5514                           
  5515                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5516  0500  0020               	movlb	0	; select bank0
  5517  0501  0866               	movf	setTemp_Main@AD+1,w
  5518  0502  0264               	subwf	setTemp_Main@DangerValue+1,w
  5519  0503  1D03               	skipz
  5520  0504  2D07               	goto	u12015
  5521  0505  0865               	movf	setTemp_Main@AD,w
  5522  0506  0263               	subwf	setTemp_Main@DangerValue,w
  5523  0507                     u12015:	
  5524  0507  1C03               	skipc
  5525  0508  2D15               	goto	l10747
  5526                           
  5527                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5528  0509  3001               	movlw	1
  5529  050A  00DD               	movwf	??_setTemp_Main
  5530  050B  085D               	movf	??_setTemp_Main,w
  5531  050C  0022               	movlb	2	; select bank2
  5532  050D  07DD               	addwf	(_Temp^(0+256)+3),f
  5533                           
  5534                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5535  050E  3003               	movlw	3
  5536  050F  025D               	subwf	(_Temp^(0+256)+3),w
  5537  0510  1C03               	skipc
  5538  0511  2D17               	goto	l10749
  5539                           
  5540                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5541  0512  01DD               	clrf	(_Temp^(0+256)+3)
  5542                           
  5543                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5544  0513  14DA               	bsf	_Temp^(0+256),1
  5545                           
  5546                           ;OverTemperature_B1.c: 147: }
  5547                           ;OverTemperature_B1.c: 148: } else {
  5548  0514  2D17               	goto	l10749
  5549  0515                     l10747:	
  5550                           
  5551                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5552  0515  0022               	movlb	2	; select bank2
  5553  0516  01DD               	clrf	(_Temp^(0+256)+3)
  5554  0517                     l10749:	
  5555                           
  5556                           ;OverTemperature_B1.c: 150: }
  5557                           ;OverTemperature_B1.c: 151: }
  5558                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5559  0517  0020               	movlb	0	; select bank0
  5560  0518  0866               	movf	setTemp_Main@AD+1,w
  5561  0519  00DD               	movwf	??_setTemp_Main
  5562  051A  085D               	movf	??_setTemp_Main,w
  5563  051B  00DA               	movwf	setProductData@value
  5564  051C  3018               	movlw	24
  5565  051D  3198  20AE  3184   	fcall	_setProductData
  5566                           
  5567                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5568  0520  0020               	movlb	0	; select bank0
  5569  0521  0865               	movf	setTemp_Main@AD,w
  5570  0522  00DD               	movwf	??_setTemp_Main
  5571  0523  085D               	movf	??_setTemp_Main,w
  5572  0524  00DA               	movwf	setProductData@value
  5573  0525  3019               	movlw	25
  5574  0526  3198  20AE         	fcall	_setProductData
  5575                           
  5576                           ;OverTemperature_B1.c: 169: }
  5577                           ;OverTemperature_B1.c: 170: }
  5578                           ;OverTemperature_B1.c: 171: }
  5579                           ;OverTemperature_B1.c: 174: } else {
  5580  0528  0008               	return
  5581  0529                     l2094:	
  5582                           
  5583                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5584  0529  0021               	movlb	1	; select bank1
  5585  052A  1C4F               	btfss	_myMain^(0+128),0
  5586  052B  0008               	return
  5587                           
  5588                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5589  052C  0022               	movlb	2	; select bank2
  5590  052D  145A               	bsf	_Temp^(0+256),0
  5591  052E  0008               	return
  5592  052F                     __end_of_setTemp_Main:	
  5593                           
  5594                           	psect	text10
  5595  1B8A                     __ptext10:	
  5596 ;; *************** function _setOverTemp_ADV_Restore *****************
  5597 ;; Defined at:
  5598 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;		None
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  i               2    3[COMMON] int 
  5603 ;; Return value:  Size  Location     Type
  5604 ;;		None               void
  5605 ;; Registers used:
  5606 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5614 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5615 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;Total ram usage:        3 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:    3
  5619 ;; This function calls:
  5620 ;;		Nothing
  5621 ;; This function is called by:
  5622 ;;		_setTemp_Main
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function _setOverTemp_ADV_Restore
  5628  1B8A                     _setOverTemp_ADV_Restore:	
  5629                           
  5630                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5631                           
  5632                           ;incstack = 0
  5633                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5634  1B8A  01F3               	clrf	setOverTemp_ADV_Restore@i
  5635  1B8B  01F4               	clrf	setOverTemp_ADV_Restore@i+1
  5636  1B8C                     L2:	
  5637  1B8C  0874               	movf	setOverTemp_ADV_Restore@i+1,w
  5638  1B8D  3A80               	xorlw	128
  5639  1B8E  00F2               	movwf	??_setOverTemp_ADV_Restore
  5640  1B8F  3080               	movlw	128
  5641  1B90  0272               	subwf	??_setOverTemp_ADV_Restore,w
  5642  1B91  1D03               	skipz
  5643  1B92  2B95               	goto	u7535
  5644  1B93  3005               	movlw	5
  5645  1B94  0273               	subwf	setOverTemp_ADV_Restore@i,w
  5646  1B95                     u7535:	
  5647  1B95  1803               	btfsc	3,0
  5648  1B96  0008               	return
  5649                           
  5650                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5651  1B97  3573               	lslf	setOverTemp_ADV_Restore@i,w
  5652  1B98  3E5E               	addlw	(_Temp+4)& (0+255)
  5653  1B99  0086               	movwf	6
  5654  1B9A  3001               	movlw	1	; select bank2/3
  5655  1B9B  0087               	movwf	7
  5656  1B9C  3000               	movlw	0
  5657  1B9D  3FC0               	movwi [0]fsr1
  5658  1B9E  3FC1               	movwi [1]fsr1
  5659  1B9F  3001               	movlw	1
  5660  1BA0  07F3               	addwf	setOverTemp_ADV_Restore@i,f
  5661  1BA1  3000               	movlw	0
  5662  1BA2  3DF4               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5663  1BA3  2B8C               	goto	L2
  5664  1BA4                     __end_of_setOverTemp_ADV_Restore:	
  5665                           
  5666                           	psect	text11
  5667  27C9                     __ptext11:	
  5668 ;; *************** function _Temp_Initialization *****************
  5669 ;; Defined at:
  5670 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;		None
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;		None
  5675 ;; Return value:  Size  Location     Type
  5676 ;;		None               void
  5677 ;; Registers used:
  5678 ;;		status,2, status,0, pclath, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;Total ram usage:        0 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    4
  5691 ;; This function calls:
  5692 ;;		_setTemp_Initialization
  5693 ;; This function is called by:
  5694 ;;		_main
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           
  5699                           ;psect for function _Temp_Initialization
  5700  27C9                     _Temp_Initialization:	
  5701                           
  5702                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5706  27C9  3198  2000         	fcall	_setTemp_Initialization
  5707  27CB  0008               	return
  5708  27CC                     __end_of_Temp_Initialization:	
  5709                           
  5710                           	psect	text12
  5711  1800                     __ptext12:	
  5712 ;; *************** function _setTemp_Initialization *****************
  5713 ;; Defined at:
  5714 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;		None
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;		None
  5719 ;; Return value:  Size  Location     Type
  5720 ;;		None               void
  5721 ;; Registers used:
  5722 ;;		None
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;Total ram usage:        0 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    3
  5735 ;; This function calls:
  5736 ;;		Nothing
  5737 ;; This function is called by:
  5738 ;;		_Temp_Initialization
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741                           
  5742                           
  5743                           ;psect for function _setTemp_Initialization
  5744  1800                     _setTemp_Initialization:	
  5745                           
  5746                           ;incstack = 0
  5747                           ; Regs used in _setTemp_Initialization: []
  5748  1800  0008               	return
  5749  1801                     __end_of_setTemp_Initialization:	
  5750                           
  5751                           	psect	text13
  5752  1897                     __ptext13:	
  5753 ;; *************** function _Switch_Main *****************
  5754 ;; Defined at:
  5755 ;;		line 76 in file "../src/Switch_B1.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;		None
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;		None
  5760 ;; Return value:  Size  Location     Type
  5761 ;;		None               void
  5762 ;; Registers used:
  5763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : 0/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;Total ram usage:        0 bytes
  5774 ;; Hardware stack levels used:    1
  5775 ;; Hardware stack levels required when called:    7
  5776 ;; This function calls:
  5777 ;;		_TouchPower
  5778 ;;		_setSw_Main
  5779 ;; This function is called by:
  5780 ;;		_main
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           
  5785                           ;psect for function _Switch_Main
  5786  1897                     _Switch_Main:	
  5787                           
  5788                           ;Switch_B1.c: 79: setSw_Main(1);
  5789                           
  5790                           ;incstack = 0
  5791                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5792  1897  3001               	movlw	1
  5793  1898  3181  21F3  3198   	fcall	_setSw_Main
  5794                           
  5795                           ;Switch_B1.c: 83: setSw_Main(2);
  5796  189B  3002               	movlw	2
  5797  189C  3181  21F3  3198   	fcall	_setSw_Main
  5798                           
  5799                           ;Switch_B1.c: 91: TouchPower();
  5800  189F  319A  22BB         	fcall	_TouchPower
  5801  18A1  0008               	return
  5802  18A2                     __end_of_Switch_Main:	
  5803                           
  5804                           	psect	text14
  5805  01F3                     __ptext14:	
  5806 ;; *************** function _setSw_Main *****************
  5807 ;; Defined at:
  5808 ;;		line 117 in file "../src/Switch_B1.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;  sw              1    wreg     unsigned char 
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;  sw              1   13[BANK0 ] unsigned char 
  5813 ;; Return value:  Size  Location     Type
  5814 ;;		None               void
  5815 ;; Registers used:
  5816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5824 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5825 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5826 ;;Total ram usage:        3 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; Hardware stack levels required when called:    6
  5829 ;; This function calls:
  5830 ;;		_SwPointSelect
  5831 ;;		_getMain_All_Error_Status
  5832 ;;		_getSw_KeyStatus
  5833 ;;		_setBuz
  5834 ;;		_setDimmerLights_DimmingOn
  5835 ;;		_setDimmerLights_SwOff
  5836 ;;		_setDimmerLights_SwOn
  5837 ;;		_setRF_Learn
  5838 ;; This function is called by:
  5839 ;;		_Switch_Main
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           
  5844                           ;psect for function _setSw_Main
  5845  01F3                     _setSw_Main:	
  5846                           
  5847                           ;incstack = 0
  5848                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5849                           ;setSw_Main@sw stored from wreg
  5850  01F3  0020               	movlb	0	; select bank0
  5851  01F4  00AD               	movwf	setSw_Main@sw
  5852                           
  5853                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5854  01F5  082D               	movf	setSw_Main@sw,w
  5855  01F6  319A  22D0  3181   	fcall	_SwPointSelect
  5856                           
  5857                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5858  01F9  0020               	movlb	0	; select bank0
  5859  01FA  086D               	movf	_Sw,w
  5860  01FB  0086               	movwf	6
  5861  01FC  3001               	movlw	1	; select bank2/3
  5862  01FD  0087               	movwf	7
  5863  01FE  1C01               	btfss	1,0
  5864  01FF  2B5A               	goto	l2917
  5865                           
  5866                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5867  0200  3000               	movlw	0
  5868  0201  319E  263C  3181   	fcall	_getMain_All_Error_Status
  5869  0204  3800               	iorlw	0
  5870  0205  1D03               	skipz
  5871  0206  2A22               	goto	l10843
  5872                           
  5873                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5874  0207  0020               	movlb	0	; select bank0
  5875  0208  0A6D               	incf	_Sw,w
  5876  0209  0086               	movwf	6
  5877  020A  3001               	movlw	1	; select bank2/3
  5878  020B  0087               	movwf	7
  5879  020C  1081               	bcf	1,1
  5880                           
  5881                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5882  020D  082D               	movf	setSw_Main@sw,w
  5883  020E  319B  2329  3181   	fcall	_getSw_KeyStatus
  5884  0211  3A01               	xorlw	1
  5885  0212  3000               	movlw	0
  5886  0213  1903               	skipnz
  5887  0214  3001               	movlw	1
  5888  0215  0020               	movlb	0	; select bank0
  5889  0216  00AB               	movwf	??_setSw_Main
  5890  0217  086D               	movf	_Sw,w
  5891  0218  0086               	movwf	6
  5892  0219  3001               	movlw	1	; select bank2/3
  5893  021A  0087               	movwf	7
  5894  021B  0DAB               	rlf	??_setSw_Main,f
  5895  021C  0801               	movf	1,w
  5896  021D  062B               	xorwf	??_setSw_Main,w
  5897  021E  39FD               	andlw	-3
  5898  021F  062B               	xorwf	??_setSw_Main,w
  5899  0220  0081               	movwf	1
  5900                           
  5901                           ;Switch_B1.c: 124: } else {
  5902  0221  2A38               	goto	l2919
  5903  0222                     l10843:	
  5904                           
  5905                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5906  0222  0020               	movlb	0	; select bank0
  5907  0223  0A6D               	incf	_Sw,w
  5908  0224  0086               	movwf	6
  5909  0225  3001               	movlw	1	; select bank2/3
  5910  0226  0087               	movwf	7
  5911  0227  1881               	btfsc	1,1
  5912  0228  2A38               	goto	l2919
  5913                           
  5914                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5915  0229  0A6D               	incf	_Sw,w
  5916  022A  0086               	movwf	6
  5917  022B  3001               	movlw	1	; select bank2/3
  5918  022C  0087               	movwf	7
  5919  022D  1481               	bsf	1,1
  5920                           
  5921                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5922  022E  086D               	movf	_Sw,w
  5923  022F  0086               	movwf	6
  5924  0230  3001               	movlw	1	; select bank2/3
  5925  0231  0087               	movwf	7
  5926  0232  1081               	bcf	1,1
  5927                           
  5928                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5929  0233  086D               	movf	_Sw,w
  5930  0234  0086               	movwf	6
  5931  0235  3001               	movlw	1	; select bank2/3
  5932  0236  0087               	movwf	7
  5933  0237  1501               	bsf	1,2
  5934  0238                     l2919:	
  5935                           
  5936                           ;Switch_B1.c: 130: }
  5937                           ;Switch_B1.c: 131: }
  5938                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5939  0238  086D               	movf	_Sw,w
  5940  0239  0086               	movwf	6
  5941  023A  3001               	movlw	1	; select bank2/3
  5942  023B  0087               	movwf	7
  5943  023C  1C81               	btfss	1,1
  5944  023D  2B07               	goto	l10893
  5945                           
  5946                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5947  023E  086D               	movf	_Sw,w
  5948  023F  0086               	movwf	6
  5949  0240  3001               	movlw	1	; select bank2/3
  5950  0241  0087               	movwf	7
  5951  0242  1901               	btfsc	1,2
  5952  0243  2A65               	goto	l10859
  5953                           
  5954                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5955  0244  3001               	movlw	1
  5956  0245  00AB               	movwf	??_setSw_Main
  5957  0246  086D               	movf	_Sw,w
  5958  0247  3E02               	addlw	2
  5959  0248  0086               	movwf	6
  5960  0249  3001               	movlw	1	; select bank2/3
  5961  024A  0087               	movwf	7
  5962  024B  082B               	movf	??_setSw_Main,w
  5963  024C  0781               	addwf	1,f
  5964                           
  5965                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (100 / 20)) {
  5966  024D  086D               	movf	_Sw,w
  5967  024E  3E02               	addlw	2
  5968  024F  0086               	movwf	6
  5969  0250  3001               	movlw	1	; select bank2/3
  5970  0251  0087               	movwf	7
  5971  0252  3005               	movlw	5
  5972  0253  0201               	subwf	1,w
  5973  0254  1C03               	skipc
  5974  0255  0008               	return
  5975                           
  5976                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5977  0256  086D               	movf	_Sw,w
  5978  0257  3E02               	addlw	2
  5979  0258  0086               	movwf	6
  5980  0259  3001               	movlw	1	; select bank2/3
  5981  025A  0087               	movwf	7
  5982  025B  0181               	clrf	1
  5983                           
  5984                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5985  025C  086D               	movf	_Sw,w
  5986  025D  0086               	movwf	6
  5987  025E  3001               	movlw	1	; select bank2/3
  5988  025F  0087               	movwf	7
  5989  0260  1501               	bsf	1,2
  5990                           
  5991                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5992  0261  082D               	movf	setSw_Main@sw,w
  5993  0262  3187  2784         	fcall	_setDimmerLights_SwOn
  5994                           
  5995                           ;Switch_B1.c: 147: }
  5996                           ;Switch_B1.c: 148: } else {
  5997  0264  0008               	return
  5998  0265                     l10859:	
  5999                           
  6000                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  6001  0265  0020               	movlb	0	; select bank0
  6002  0266  086D               	movf	_Sw,w
  6003  0267  0086               	movwf	6
  6004  0268  3001               	movlw	1	; select bank2/3
  6005  0269  0087               	movwf	7
  6006  026A  1981               	btfsc	1,3
  6007  026B  2A97               	goto	l10869
  6008                           
  6009                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  6010  026C  086D               	movf	_Sw,w
  6011  026D  3E03               	addlw	3
  6012  026E  0086               	movwf	6
  6013  026F  3001               	movlw	1	; select bank2/3
  6014  0270  0087               	movwf	7
  6015  0271  3001               	movlw	1
  6016  0272  0781               	addwf	1,f
  6017  0273  3141               	addfsr 1,1
  6018  0274  1803               	skipnc
  6019  0275  0A81               	incf	1,f
  6020                           
  6021                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6022  0276  086D               	movf	_Sw,w
  6023  0277  3E03               	addlw	3
  6024  0278  0086               	movwf	6
  6025  0279  3001               	movlw	1	; select bank2/3
  6026  027A  0087               	movwf	7
  6027  027B  3F40               	moviw [0]fsr1
  6028  027C  00AB               	movwf	??_setSw_Main
  6029  027D  3F41               	moviw [1]fsr1
  6030  027E  00AC               	movwf	??_setSw_Main+1
  6031  027F  3000               	movlw	0
  6032  0280  022C               	subwf	??_setSw_Main+1,w
  6033  0281  304B               	movlw	75
  6034  0282  1903               	skipnz
  6035  0283  022B               	subwf	??_setSw_Main,w
  6036  0284  1C03               	skipc
  6037  0285  0008               	return
  6038                           
  6039                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6040  0286  086D               	movf	_Sw,w
  6041  0287  3E03               	addlw	3
  6042  0288  0086               	movwf	6
  6043  0289  3001               	movlw	1	; select bank2/3
  6044  028A  0087               	movwf	7
  6045  028B  3000               	movlw	0
  6046  028C  3FC0               	movwi [0]fsr1
  6047  028D  3FC1               	movwi [1]fsr1
  6048                           
  6049                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6050  028E  086D               	movf	_Sw,w
  6051  028F  0086               	movwf	6
  6052  0290  3001               	movlw	1	; select bank2/3
  6053  0291  0087               	movwf	7
  6054  0292  1581               	bsf	1,3
  6055                           
  6056                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6057  0293  082D               	movf	setSw_Main@sw,w
  6058  0294  3188  2000         	fcall	_setDimmerLights_DimmingOn
  6059                           
  6060                           ;Switch_B1.c: 162: }
  6061                           ;Switch_B1.c: 163: } else {
  6062  0296  0008               	return
  6063  0297                     l10869:	
  6064                           
  6065                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6066  0297  0020               	movlb	0	; select bank0
  6067  0298  086D               	movf	_Sw,w
  6068  0299  0086               	movwf	6
  6069  029A  3001               	movlw	1	; select bank2/3
  6070  029B  0087               	movwf	7
  6071  029C  1A01               	btfsc	1,4
  6072  029D  2AD5               	goto	l10883
  6073                           
  6074                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6075  029E  086D               	movf	_Sw,w
  6076  029F  3E05               	addlw	5
  6077  02A0  0086               	movwf	6
  6078  02A1  3001               	movlw	1	; select bank2/3
  6079  02A2  0087               	movwf	7
  6080  02A3  3001               	movlw	1
  6081  02A4  0781               	addwf	1,f
  6082  02A5  3141               	addfsr 1,1
  6083  02A6  1803               	skipnc
  6084  02A7  0A81               	incf	1,f
  6085                           
  6086                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6087  02A8  086D               	movf	_Sw,w
  6088  02A9  3E05               	addlw	5
  6089  02AA  0086               	movwf	6
  6090  02AB  3001               	movlw	1	; select bank2/3
  6091  02AC  0087               	movwf	7
  6092  02AD  3F40               	moviw [0]fsr1
  6093  02AE  00AB               	movwf	??_setSw_Main
  6094  02AF  3F41               	moviw [1]fsr1
  6095  02B0  00AC               	movwf	??_setSw_Main+1
  6096  02B1  3000               	movlw	0
  6097  02B2  022C               	subwf	??_setSw_Main+1,w
  6098  02B3  304B               	movlw	75
  6099  02B4  1903               	skipnz
  6100  02B5  022B               	subwf	??_setSw_Main,w
  6101  02B6  1C03               	skipc
  6102  02B7  0008               	return
  6103                           
  6104                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6105  02B8  086D               	movf	_Sw,w
  6106  02B9  3E05               	addlw	5
  6107  02BA  0086               	movwf	6
  6108  02BB  3001               	movlw	1	; select bank2/3
  6109  02BC  0087               	movwf	7
  6110  02BD  3000               	movlw	0
  6111  02BE  3FC0               	movwi [0]fsr1
  6112  02BF  3FC1               	movwi [1]fsr1
  6113                           
  6114                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6115  02C0  086D               	movf	_Sw,w
  6116  02C1  0086               	movwf	6
  6117  02C2  3001               	movlw	1	; select bank2/3
  6118  02C3  0087               	movwf	7
  6119  02C4  1601               	bsf	1,4
  6120                           
  6121                           ;Switch_B1.c: 172: setRF_Learn(1);
  6122  02C5  3001               	movlw	1
  6123  02C6  3199  21F1  3181   	fcall	_setRF_Learn
  6124                           
  6125                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6126  02C9  0021               	movlb	1	; select bank1
  6127  02CA  1ECF               	btfss	_myMain^(0+128),5
  6128  02CB  0008               	return
  6129                           
  6130                           ;Switch_B1.c: 174: setBuz(2, 100);
  6131  02CC  3064               	movlw	100
  6132  02CD  0020               	movlb	0	; select bank0
  6133  02CE  00A4               	movwf	setBuz@time
  6134  02CF  3000               	movlw	0
  6135  02D0  00A5               	movwf	setBuz@time+1
  6136  02D1  3002               	movlw	2
  6137  02D2  3192  22EC         	fcall	_setBuz
  6138                           
  6139                           ;Switch_B1.c: 175: }
  6140                           ;Switch_B1.c: 179: }
  6141                           ;Switch_B1.c: 180: } else {
  6142  02D4  0008               	return
  6143  02D5                     l10883:	
  6144                           
  6145                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6146  02D5  0020               	movlb	0	; select bank0
  6147  02D6  086D               	movf	_Sw,w
  6148  02D7  0086               	movwf	6
  6149  02D8  3001               	movlw	1	; select bank2/3
  6150  02D9  0087               	movwf	7
  6151  02DA  1A81               	btfsc	1,5
  6152  02DB  0008               	return
  6153                           
  6154                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6155  02DC  086D               	movf	_Sw,w
  6156  02DD  3E07               	addlw	7
  6157  02DE  0086               	movwf	6
  6158  02DF  3001               	movlw	1	; select bank2/3
  6159  02E0  0087               	movwf	7
  6160  02E1  3001               	movlw	1
  6161  02E2  0781               	addwf	1,f
  6162  02E3  3141               	addfsr 1,1
  6163  02E4  1803               	skipnc
  6164  02E5  0A81               	incf	1,f
  6165                           
  6166                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6167  02E6  086D               	movf	_Sw,w
  6168  02E7  3E07               	addlw	7
  6169  02E8  0086               	movwf	6
  6170  02E9  3001               	movlw	1	; select bank2/3
  6171  02EA  0087               	movwf	7
  6172  02EB  3F40               	moviw [0]fsr1
  6173  02EC  00AB               	movwf	??_setSw_Main
  6174  02ED  3F41               	moviw [1]fsr1
  6175  02EE  00AC               	movwf	??_setSw_Main+1
  6176  02EF  3000               	movlw	0
  6177  02F0  022C               	subwf	??_setSw_Main+1,w
  6178  02F1  3096               	movlw	150
  6179  02F2  1903               	skipnz
  6180  02F3  022B               	subwf	??_setSw_Main,w
  6181  02F4  1C03               	skipc
  6182  02F5  0008               	return
  6183                           
  6184                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6185  02F6  086D               	movf	_Sw,w
  6186  02F7  3E07               	addlw	7
  6187  02F8  0086               	movwf	6
  6188  02F9  3001               	movlw	1	; select bank2/3
  6189  02FA  0087               	movwf	7
  6190  02FB  3000               	movlw	0
  6191  02FC  3FC0               	movwi [0]fsr1
  6192  02FD  3FC1               	movwi [1]fsr1
  6193                           
  6194                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6195  02FE  086D               	movf	_Sw,w
  6196  02FF  0086               	movwf	6
  6197  0300  3001               	movlw	1	; select bank2/3
  6198  0301  0087               	movwf	7
  6199  0302  1681               	bsf	1,5
  6200                           
  6201                           ;Switch_B1.c: 188: setRF_Learn(0);
  6202  0303  3000               	movlw	0
  6203  0304  3199  21F1         	fcall	_setRF_Learn
  6204                           
  6205                           ;Switch_B1.c: 191: }
  6206                           ;Switch_B1.c: 192: }
  6207                           ;Switch_B1.c: 193: }
  6208                           ;Switch_B1.c: 195: }
  6209                           ;Switch_B1.c: 196: }
  6210                           ;Switch_B1.c: 197: } else {
  6211  0306  0008               	return
  6212  0307                     l10893:	
  6213                           
  6214                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6215  0307  0020               	movlb	0	; select bank0
  6216  0308  086D               	movf	_Sw,w
  6217  0309  0086               	movwf	6
  6218  030A  3001               	movlw	1	; select bank2/3
  6219  030B  0087               	movwf	7
  6220  030C  1D01               	btfss	1,2
  6221  030D  0008               	return
  6222                           
  6223                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6224  030E  3001               	movlw	1
  6225  030F  00AB               	movwf	??_setSw_Main
  6226  0310  086D               	movf	_Sw,w
  6227  0311  3E02               	addlw	2
  6228  0312  0086               	movwf	6
  6229  0313  3001               	movlw	1	; select bank2/3
  6230  0314  0087               	movwf	7
  6231  0315  082B               	movf	??_setSw_Main,w
  6232  0316  0781               	addwf	1,f
  6233                           
  6234                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (100 / 20)) {
  6235  0317  086D               	movf	_Sw,w
  6236  0318  3E02               	addlw	2
  6237  0319  0086               	movwf	6
  6238  031A  3001               	movlw	1	; select bank2/3
  6239  031B  0087               	movwf	7
  6240  031C  3005               	movlw	5
  6241  031D  0201               	subwf	1,w
  6242  031E  1C03               	skipc
  6243  031F  0008               	return
  6244                           
  6245                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6246  0320  086D               	movf	_Sw,w
  6247  0321  3E02               	addlw	2
  6248  0322  0086               	movwf	6
  6249  0323  3001               	movlw	1	; select bank2/3
  6250  0324  0087               	movwf	7
  6251  0325  0181               	clrf	1
  6252                           
  6253                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6254  0326  086D               	movf	_Sw,w
  6255  0327  0086               	movwf	6
  6256  0328  3001               	movlw	1	; select bank2/3
  6257  0329  0087               	movwf	7
  6258  032A  1101               	bcf	1,2
  6259                           
  6260                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6261  032B  086D               	movf	_Sw,w
  6262  032C  3E03               	addlw	3
  6263  032D  0086               	movwf	6
  6264  032E  3001               	movlw	1	; select bank2/3
  6265  032F  0087               	movwf	7
  6266  0330  3000               	movlw	0
  6267  0331  3FC0               	movwi [0]fsr1
  6268  0332  3FC1               	movwi [1]fsr1
  6269                           
  6270                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6271  0333  086D               	movf	_Sw,w
  6272  0334  0086               	movwf	6
  6273  0335  3001               	movlw	1	; select bank2/3
  6274  0336  0087               	movwf	7
  6275  0337  1181               	bcf	1,3
  6276                           
  6277                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6278  0338  086D               	movf	_Sw,w
  6279  0339  0086               	movwf	6
  6280  033A  3001               	movlw	1	; select bank2/3
  6281  033B  0087               	movwf	7
  6282  033C  1201               	bcf	1,4
  6283                           
  6284                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6285  033D  086D               	movf	_Sw,w
  6286  033E  0086               	movwf	6
  6287  033F  3001               	movlw	1	; select bank2/3
  6288  0340  0087               	movwf	7
  6289  0341  1281               	bcf	1,5
  6290                           
  6291                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6292  0342  086D               	movf	_Sw,w
  6293  0343  3E05               	addlw	5
  6294  0344  0086               	movwf	6
  6295  0345  3001               	movlw	1	; select bank2/3
  6296  0346  0087               	movwf	7
  6297  0347  3000               	movlw	0
  6298  0348  3FC0               	movwi [0]fsr1
  6299  0349  3FC1               	movwi [1]fsr1
  6300                           
  6301                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6302  034A  086D               	movf	_Sw,w
  6303  034B  3E07               	addlw	7
  6304  034C  0086               	movwf	6
  6305  034D  3001               	movlw	1	; select bank2/3
  6306  034E  0087               	movwf	7
  6307  034F  3000               	movlw	0
  6308  0350  3FC0               	movwi [0]fsr1
  6309  0351  3FC1               	movwi [1]fsr1
  6310                           
  6311                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6312  0352  082D               	movf	setSw_Main@sw,w
  6313  0353  3191  2122  3181   	fcall	_setDimmerLights_SwOff
  6314                           
  6315                           ;Switch_B1.c: 220: setRF_Learn(0);
  6316  0356  3000               	movlw	0
  6317  0357  3199  21F1         	fcall	_setRF_Learn
  6318                           
  6319                           ;Switch_B1.c: 222: }
  6320                           ;Switch_B1.c: 223: }
  6321                           ;Switch_B1.c: 224: }
  6322                           ;Switch_B1.c: 225: } else {
  6323  0359  0008               	return
  6324  035A                     l2917:	
  6325                           
  6326                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6327  035A  0021               	movlb	1	; select bank1
  6328  035B  1C4F               	btfss	_myMain^(0+128),0
  6329  035C  0008               	return
  6330                           
  6331                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6332  035D  0020               	movlb	0	; select bank0
  6333  035E  086D               	movf	_Sw,w
  6334  035F  0086               	movwf	6
  6335  0360  3001               	movlw	1	; select bank2/3
  6336  0361  0087               	movwf	7
  6337  0362  1401               	bsf	1,0
  6338  0363  0008               	return
  6339  0364                     __end_of_setSw_Main:	
  6340                           
  6341                           	psect	text15
  6342  19F1                     __ptext15:	
  6343 ;; *************** function _setRF_Learn *****************
  6344 ;; Defined at:
  6345 ;;		line 33 in file "../src/RF_Control_B1.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;  command         1    wreg     unsigned char 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  command         1    3[COMMON] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;		None               void
  6352 ;; Registers used:
  6353 ;;		wreg, status,2, status,0
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;Total ram usage:        2 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    3
  6366 ;; This function calls:
  6367 ;;		Nothing
  6368 ;; This function is called by:
  6369 ;;		_setSw_Main
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           
  6374                           ;psect for function _setRF_Learn
  6375  19F1                     _setRF_Learn:	
  6376                           
  6377                           ;incstack = 0
  6378                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6379                           ;setRF_Learn@command stored from wreg
  6380  19F1  00F3               	movwf	setRF_Learn@command
  6381                           
  6382                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6383  19F2  0873               	movf	setRF_Learn@command,w
  6384  19F3  3A01               	xorlw	1
  6385  19F4  3000               	movlw	0
  6386  19F5  1903               	skipnz
  6387  19F6  3001               	movlw	1
  6388  19F7  00F2               	movwf	??_setRF_Learn
  6389  19F8  0EF2               	swapf	??_setRF_Learn,f
  6390  19F9  0DF2               	rlf	??_setRF_Learn,f
  6391  19FA  0DF2               	rlf	??_setRF_Learn,f
  6392  19FB  0021               	movlb	1	; select bank1
  6393  19FC  0840               	movf	_RF1^(0+128),w
  6394  19FD  0672               	xorwf	??_setRF_Learn,w
  6395  19FE  39BF               	andlw	-65
  6396  19FF  0672               	xorwf	??_setRF_Learn,w
  6397  1A00  00C0               	movwf	_RF1^(0+128)
  6398  1A01  0008               	return
  6399  1A02                     __end_of_setRF_Learn:	
  6400                           
  6401                           	psect	text16
  6402  0800                     __ptext16:	
  6403 ;; *************** function _setDimmerLights_DimmingOn *****************
  6404 ;; Defined at:
  6405 ;;		line 818 in file "../src/Dimmer_B1.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;  sw              1    wreg     unsigned char 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  sw              1    4[COMMON] unsigned char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;		None               void
  6412 ;; Registers used:
  6413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;Total ram usage:        1 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    4
  6426 ;; This function calls:
  6427 ;;		_DimmerLights_SelectPointer
  6428 ;; This function is called by:
  6429 ;;		_setSw_Main
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           
  6434                           ;psect for function _setDimmerLights_DimmingOn
  6435  0800                     _setDimmerLights_DimmingOn:	
  6436                           
  6437                           ;incstack = 0
  6438                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6439                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6440  0800  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6441                           
  6442                           ;Dimmer_B1.c: 824: DimmerLights_SelectPointer(sw);
  6443  0801  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6444  0802  319A  223D  3188   	fcall	_DimmerLights_SelectPointer
  6445                           
  6446                           ;Dimmer_B1.c: 825: if (DimmerLights->Trigger == 0) {
  6447  0805  0020               	movlb	0	; select bank0
  6448  0806  086C               	movf	_DimmerLights,w
  6449  0807  0086               	movwf	6
  6450  0808  3001               	movlw	1	; select bank2/3
  6451  0809  0087               	movwf	7
  6452  080A  1881               	btfsc	1,1
  6453  080B  0008               	return
  6454                           
  6455                           ;Dimmer_B1.c: 826: if (DimmerLights->SwFlag == 1) {
  6456  080C  086C               	movf	_DimmerLights,w
  6457  080D  0086               	movwf	6
  6458  080E  3001               	movlw	1	; select bank2/3
  6459  080F  0087               	movwf	7
  6460  0810  1C01               	btfss	1,0
  6461  0811  0008               	return
  6462                           
  6463                           ;Dimmer_B1.c: 827: DimmerLights->Status = 1;
  6464  0812  0A6C               	incf	_DimmerLights,w
  6465  0813  0086               	movwf	6
  6466  0814  3001               	movlw	1	; select bank2/3
  6467  0815  0087               	movwf	7
  6468  0816  1401               	bsf	1,0
  6469                           
  6470                           ;Dimmer_B1.c: 829: DimmerLights->DimmingSwFlag = 1;
  6471  0817  086C               	movf	_DimmerLights,w
  6472  0818  0086               	movwf	6
  6473  0819  3001               	movlw	1	; select bank2/3
  6474  081A  0087               	movwf	7
  6475  081B  1581               	bsf	1,3
  6476                           
  6477                           ;Dimmer_B1.c: 830: DimmerLights->DimmingTrigger = 1;
  6478  081C  086C               	movf	_DimmerLights,w
  6479  081D  0086               	movwf	6
  6480  081E  3001               	movlw	1	; select bank2/3
  6481  081F  0087               	movwf	7
  6482  0820  1601               	bsf	1,4
  6483                           
  6484                           ;Dimmer_B1.c: 831: DimmerLights->DimmingSwitch = 1;
  6485  0821  086C               	movf	_DimmerLights,w
  6486  0822  0086               	movwf	6
  6487  0823  3001               	movlw	1	; select bank2/3
  6488  0824  0087               	movwf	7
  6489  0825  1681               	bsf	1,5
  6490  0826  0008               	return
  6491  0827                     __end_of_setDimmerLights_DimmingOn:	
  6492                           
  6493                           	psect	text17
  6494  1B29                     __ptext17:	
  6495 ;; *************** function _getSw_KeyStatus *****************
  6496 ;; Defined at:
  6497 ;;		line 238 in file "../src/Switch_B1.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;  sw              1    wreg     unsigned char 
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;  sw              1    3[COMMON] unsigned char 
  6502 ;;  status          1    2[COMMON] unsigned char 
  6503 ;; Return value:  Size  Location     Type
  6504 ;;                  1    wreg      unsigned char 
  6505 ;; Registers used:
  6506 ;;		wreg, status,2
  6507 ;; Tracked objects:
  6508 ;;		On entry : 0/0
  6509 ;;		On exit  : 0/0
  6510 ;;		Unchanged: 0/0
  6511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;Total ram usage:        2 bytes
  6517 ;; Hardware stack levels used:    1
  6518 ;; Hardware stack levels required when called:    3
  6519 ;; This function calls:
  6520 ;;		Nothing
  6521 ;; This function is called by:
  6522 ;;		_setSw_Main
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           
  6527                           ;psect for function _getSw_KeyStatus
  6528  1B29                     _getSw_KeyStatus:	
  6529                           
  6530                           ;incstack = 0
  6531                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6532                           ;getSw_KeyStatus@sw stored from wreg
  6533  1B29  00F3               	movwf	getSw_KeyStatus@sw
  6534                           
  6535                           ;Switch_B1.c: 239: char status = 0;
  6536  1B2A  01F2               	clrf	getSw_KeyStatus@status
  6537                           
  6538                           ;Switch_B1.c: 259: if (sw == 1) {
  6539  1B2B  0873               	movf	getSw_KeyStatus@sw,w
  6540  1B2C  3A01               	xorlw	1
  6541  1B2D  1D03               	skipz
  6542  1B2E  2B35               	goto	l8137
  6543                           
  6544                           ;Switch_B1.c: 260: status = RA6 == 1 ? 1 : 0;
  6545  1B2F  3000               	movlw	0
  6546  1B30  0020               	movlb	0	; select bank0
  6547  1B31  1B0C               	btfsc	12,6	;volatile
  6548  1B32  3001               	movlw	1
  6549  1B33  00F2               	movwf	getSw_KeyStatus@status
  6550                           
  6551                           ;Switch_B1.c: 261: } else if (sw == 2) {
  6552  1B34  2B3E               	goto	l8141
  6553  1B35                     l8137:	
  6554  1B35  0873               	movf	getSw_KeyStatus@sw,w
  6555  1B36  3A02               	xorlw	2
  6556  1B37  1D03               	skipz
  6557  1B38  2B3E               	goto	l8141
  6558                           
  6559                           ;Switch_B1.c: 262: status = RA0 == 1 ? 1 : 0;
  6560  1B39  3000               	movlw	0
  6561  1B3A  0020               	movlb	0	; select bank0
  6562  1B3B  180C               	btfsc	12,0	;volatile
  6563  1B3C  3001               	movlw	1
  6564  1B3D  00F2               	movwf	getSw_KeyStatus@status
  6565  1B3E                     l8141:	
  6566                           
  6567                           ;Switch_B1.c: 263: }
  6568                           ;Switch_B1.c: 283: return status;
  6569  1B3E  0872               	movf	getSw_KeyStatus@status,w
  6570  1B3F  0008               	return
  6571  1B40                     __end_of_getSw_KeyStatus:	
  6572                           
  6573                           	psect	text18
  6574  1AD0                     __ptext18:	
  6575 ;; *************** function _SwPointSelect *****************
  6576 ;; Defined at:
  6577 ;;		line 25 in file "../src/Switch_B1.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  sw              1    wreg     unsigned char 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  sw              1    3[COMMON] unsigned char 
  6582 ;; Return value:  Size  Location     Type
  6583 ;;		None               void
  6584 ;; Registers used:
  6585 ;;		wreg
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;Total ram usage:        2 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    3
  6598 ;; This function calls:
  6599 ;;		Nothing
  6600 ;; This function is called by:
  6601 ;;		_setSw_Main
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           
  6606                           ;psect for function _SwPointSelect
  6607  1AD0                     _SwPointSelect:	
  6608                           
  6609                           ;incstack = 0
  6610                           ; Regs used in _SwPointSelect: [wreg]
  6611                           ;SwPointSelect@sw stored from wreg
  6612  1AD0  00F3               	movwf	SwPointSelect@sw
  6613                           
  6614                           ;Switch_B1.c: 28: if (sw == 1) {
  6615  1AD1  0873               	movf	SwPointSelect@sw,w
  6616  1AD2  3A01               	xorlw	1
  6617  1AD3  1D03               	skipz
  6618  1AD4  2ADB               	goto	l8127
  6619                           
  6620                           ;Switch_B1.c: 29: Sw = &Sw1;
  6621  1AD5  30D0               	movlw	_Sw1& (0+255)
  6622  1AD6  00F2               	movwf	??_SwPointSelect
  6623  1AD7  0872               	movf	??_SwPointSelect,w
  6624  1AD8  0020               	movlb	0	; select bank0
  6625  1AD9  00ED               	movwf	_Sw
  6626                           
  6627                           ;Switch_B1.c: 30: }
  6628  1ADA  0008               	return
  6629  1ADB                     l8127:	
  6630                           
  6631                           ;Switch_B1.c: 33: else if (sw == 2) {
  6632  1ADB  0873               	movf	SwPointSelect@sw,w
  6633  1ADC  3A02               	xorlw	2
  6634  1ADD  1D03               	skipz
  6635  1ADE  0008               	return
  6636                           
  6637                           ;Switch_B1.c: 34: Sw = &Sw2;
  6638  1ADF  30D9               	movlw	_Sw2& (0+255)
  6639  1AE0  00F2               	movwf	??_SwPointSelect
  6640  1AE1  0872               	movf	??_SwPointSelect,w
  6641  1AE2  0020               	movlb	0	; select bank0
  6642  1AE3  00ED               	movwf	_Sw
  6643  1AE4  0008               	return
  6644  1AE5                     __end_of_SwPointSelect:	
  6645                           
  6646                           	psect	text19
  6647  1ABB                     __ptext19:	
  6648 ;; *************** function _TouchPower *****************
  6649 ;; Defined at:
  6650 ;;		line 10 in file "../src/Switch_B1.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;		None
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;		None
  6655 ;; Return value:  Size  Location     Type
  6656 ;;		None               void
  6657 ;; Registers used:
  6658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;Total ram usage:        0 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    4
  6671 ;; This function calls:
  6672 ;;		_Timeout_Counter
  6673 ;;		_set_TimeoutCleared
  6674 ;; This function is called by:
  6675 ;;		_Switch_Main
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           
  6680                           ;psect for function _TouchPower
  6681  1ABB                     _TouchPower:	
  6682                           
  6683                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6684                           
  6685                           ;incstack = 0
  6686                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6687  1ABB  0021               	movlb	1	; select bank1
  6688  1ABC  1C4F               	btfss	_myMain^(0+128),0
  6689  1ABD  0008               	return
  6690                           
  6691                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6692  1ABE  0020               	movlb	0	; select bank0
  6693  1ABF  1A8E               	btfsc	14,5	;volatile
  6694  1AC0  0008               	return
  6695  1AC1  2AC7               	goto	l8863
  6696  1AC2                     l2895:	
  6697                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6698                           
  6699                           
  6700                           ;Switch_B1.c: 14: RC5 = 1;
  6701  1AC2  0020               	movlb	0	; select bank0
  6702  1AC3  168E               	bsf	14,5	;volatile
  6703                           
  6704                           ;Switch_B1.c: 15: Timeout_Counter();
  6705  1AC4  319A  22A6  319A   	fcall	_Timeout_Counter
  6706  1AC7                     l8863:	
  6707  1AC7  0020               	movlb	0	; select bank0
  6708  1AC8  1A8E               	btfsc	14,5	;volatile
  6709  1AC9  2ACD               	goto	l8867
  6710  1ACA  0021               	movlb	1	; select bank1
  6711  1ACB  1D59               	btfss	(_myMain^(0+128)+10),2
  6712  1ACC  2AC2               	goto	l2895
  6713  1ACD                     l8867:	
  6714                           
  6715                           ;Switch_B1.c: 16: }
  6716                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6717  1ACD  31A7  27E8         	fcall	_set_TimeoutCleared
  6718  1ACF  0008               	return
  6719  1AD0                     __end_of_TouchPower:	
  6720                           
  6721                           	psect	text20
  6722  27E8                     __ptext20:	
  6723 ;; *************** function _set_TimeoutCleared *****************
  6724 ;; Defined at:
  6725 ;;		line 281 in file "../src/Main_B1.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;		None
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;		None
  6730 ;; Return value:  Size  Location     Type
  6731 ;;		None               void
  6732 ;; Registers used:
  6733 ;;		status,2
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;Total ram usage:        0 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    3
  6746 ;; This function calls:
  6747 ;;		Nothing
  6748 ;; This function is called by:
  6749 ;;		_getAD
  6750 ;;		_TouchPower
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           
  6755                           ;psect for function _set_TimeoutCleared
  6756  27E8                     _set_TimeoutCleared:	
  6757                           
  6758                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6759                           
  6760                           ;incstack = 0
  6761                           ; Regs used in _set_TimeoutCleared: [status,2]
  6762  27E8  0021               	movlb	1	; select bank1
  6763  27E9  1159               	bcf	(_myMain^(0+128)+10),2
  6764                           
  6765                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6766  27EA  01DA               	clrf	(_myMain^(0+128)+11)
  6767  27EB  01DB               	clrf	((_myMain+1)^(0+128)+11)
  6768  27EC  0008               	return
  6769  27ED                     __end_of_set_TimeoutCleared:	
  6770                           
  6771                           	psect	text21
  6772  1AA6                     __ptext21:	
  6773 ;; *************** function _Timeout_Counter *****************
  6774 ;; Defined at:
  6775 ;;		line 272 in file "../src/Main_B1.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;		None
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;		None
  6780 ;; Return value:  Size  Location     Type
  6781 ;;		None               void
  6782 ;; Registers used:
  6783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;Total ram usage:        0 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:    3
  6796 ;; This function calls:
  6797 ;;		Nothing
  6798 ;; This function is called by:
  6799 ;;		_getAD
  6800 ;;		_TouchPower
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           
  6805                           ;psect for function _Timeout_Counter
  6806  1AA6                     _Timeout_Counter:	
  6807                           
  6808                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6809                           
  6810                           ;incstack = 0
  6811                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6812  1AA6  3001               	movlw	1
  6813  1AA7  0021               	movlb	1	; select bank1
  6814  1AA8  07DA               	addwf	(_myMain^(0+128)+11),f
  6815  1AA9  3000               	movlw	0
  6816  1AAA  3DDB               	addwfc	((_myMain+1)^(0+128)+11),f
  6817                           
  6818                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6819  1AAB  300B               	movlw	11
  6820  1AAC  3ECF               	addlw	_myMain& (0+255)
  6821  1AAD  0086               	movwf	6
  6822  1AAE  0187               	clrf	7
  6823  1AAF  3F40               	moviw [0]fsr1
  6824  1AB0  3AA8               	xorlw	168
  6825  1AB1  1D03               	skipz
  6826  1AB2  2AB5               	goto	u7505
  6827  1AB3  3F41               	moviw [1]fsr1
  6828  1AB4  3A61               	xorlw	97
  6829  1AB5                     u7505:	
  6830  1AB5  1D03               	skipz
  6831  1AB6  0008               	return
  6832                           
  6833                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6834  1AB7  01DA               	clrf	(_myMain^(0+128)+11)
  6835  1AB8  01DB               	clrf	((_myMain+1)^(0+128)+11)
  6836                           
  6837                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6838  1AB9  1559               	bsf	(_myMain^(0+128)+10),2
  6839  1ABA  0008               	return
  6840  1ABB                     __end_of_Timeout_Counter:	
  6841                           
  6842                           	psect	text22
  6843  183C                     __ptext22:	
  6844 ;; *************** function _Switch_Initialization *****************
  6845 ;; Defined at:
  6846 ;;		line 46 in file "../src/Switch_B1.c"
  6847 ;; Parameters:    Size  Location     Type
  6848 ;;		None
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;		None
  6851 ;; Return value:  Size  Location     Type
  6852 ;;		None               void
  6853 ;; Registers used:
  6854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;Total ram usage:        0 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; Hardware stack levels required when called:    6
  6867 ;; This function calls:
  6868 ;;		_setSw_Initialization
  6869 ;; This function is called by:
  6870 ;;		_main
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           
  6875                           ;psect for function _Switch_Initialization
  6876  183C                     _Switch_Initialization:	
  6877                           
  6878                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6879                           
  6880                           ;incstack = 0
  6881                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6882  183C  3001               	movlw	1
  6883  183D  3198  201D  3198   	fcall	_setSw_Initialization
  6884                           
  6885                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6886  1840  3002               	movlw	2
  6887  1841  3198  201D         	fcall	_setSw_Initialization
  6888  1843  0008               	return
  6889  1844                     __end_of_Switch_Initialization:	
  6890                           
  6891                           	psect	text23
  6892  181D                     __ptext23:	
  6893 ;; *************** function _setSw_Initialization *****************
  6894 ;; Defined at:
  6895 ;;		line 66 in file "../src/Switch_B1.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;  sw              1    wreg     unsigned char 
  6898 ;; Auto vars:     Size  Location     Type
  6899 ;;  sw              1    6[COMMON] unsigned char 
  6900 ;; Return value:  Size  Location     Type
  6901 ;;		None               void
  6902 ;; Registers used:
  6903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6904 ;; Tracked objects:
  6905 ;;		On entry : 0/0
  6906 ;;		On exit  : 0/0
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;Total ram usage:        1 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; Hardware stack levels required when called:    5
  6916 ;; This function calls:
  6917 ;;		_setLED
  6918 ;; This function is called by:
  6919 ;;		_Switch_Initialization
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           
  6924                           ;psect for function _setSw_Initialization
  6925  181D                     _setSw_Initialization:	
  6926                           
  6927                           ;incstack = 0
  6928                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6929                           ;setSw_Initialization@sw stored from wreg
  6930  181D  00F6               	movwf	setSw_Initialization@sw
  6931                           
  6932                           ;Switch_B1.c: 68: setLED(sw, 1);
  6933  181E  01F4               	clrf	setLED@command
  6934  181F  0AF4               	incf	setLED@command,f
  6935  1820  0876               	movf	setSw_Initialization@sw,w
  6936  1821  3194  24ED         	fcall	_setLED
  6937  1823  0008               	return
  6938  1824                     __end_of_setSw_Initialization:	
  6939                           
  6940                           	psect	text24
  6941  27C6                     __ptext24:	
  6942 ;; *************** function _RF_Main *****************
  6943 ;; Defined at:
  6944 ;;		line 26 in file "../src/RF_Control_B1.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;		None
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;		None
  6949 ;; Return value:  Size  Location     Type
  6950 ;;		None               void
  6951 ;; Registers used:
  6952 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6962 ;;Total ram usage:        0 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:   10
  6965 ;; This function calls:
  6966 ;;		_setRF_Main
  6967 ;; This function is called by:
  6968 ;;		_main
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           
  6973                           ;psect for function _RF_Main
  6974  27C6                     _RF_Main:	
  6975                           
  6976                           ;RF_Control_B1.c: 28: setRF_Main();
  6977                           
  6978                           ;incstack = 0
  6979                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6980  27C6  3186  26C5         	fcall	_setRF_Main
  6981  27C8  0008               	return
  6982  27C9                     __end_of_RF_Main:	
  6983                           
  6984                           	psect	text25
  6985  06C5                     __ptext25:	
  6986 ;; *************** function _setRF_Main *****************
  6987 ;; Defined at:
  6988 ;;		line 53 in file "../src/RF_Control_B1.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;		None
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  error           1   75[BANK0 ] unsigned char 
  6993 ;; Return value:  Size  Location     Type
  6994 ;;		None               void
  6995 ;; Registers used:
  6996 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;Total ram usage:        2 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; Hardware stack levels required when called:    9
  7009 ;; This function calls:
  7010 ;;		_CC2500_PowerOnInitial
  7011 ;;		_CC2500_RxData
  7012 ;;		_CC2500_TxData
  7013 ;;		_CC2500_WriteCommand
  7014 ;;		_RF_RxDisable
  7015 ;;		___lwdiv
  7016 ;;		_getBuz_GO
  7017 ;;		_getRF_KeyStatus
  7018 ;;		_getRxData
  7019 ;;		_setData
  7020 ;; This function is called by:
  7021 ;;		_RF_Main
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           
  7026                           ;psect for function _setRF_Main
  7027  06C5                     _setRF_Main:	
  7028                           
  7029                           ;RF_Control_B1.c: 54: char error = 0;
  7030                           
  7031                           ;incstack = 0
  7032                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7033  06C5  0020               	movlb	0	; select bank0
  7034  06C6  01EB               	clrf	setRF_Main@error
  7035                           
  7036                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7037  06C7  0021               	movlb	1	; select bank1
  7038  06C8  1C40               	btfss	_RF1^(0+128),0
  7039  06C9  2F80               	goto	l2477
  7040                           
  7041                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7042  06CA  3199  219F  3186   	fcall	_getBuz_GO
  7043  06CD  0873               	movf	?_getBuz_GO+1,w
  7044  06CE  0472               	iorwf	?_getBuz_GO,w
  7045  06CF  1D03               	skipz
  7046  06D0  2F65               	goto	l10813
  7047                           
  7048                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7049  06D1  3198  20F8  3186   	fcall	_getRF_KeyStatus
  7050  06D4  3A01               	xorlw	1
  7051  06D5  3000               	movlw	0
  7052  06D6  1903               	skipnz
  7053  06D7  3001               	movlw	1
  7054  06D8  0020               	movlb	0	; select bank0
  7055  06D9  00EA               	movwf	??_setRF_Main
  7056  06DA  0CEA               	rrf	??_setRF_Main,f
  7057  06DB  0CEA               	rrf	??_setRF_Main,f
  7058  06DC  0021               	movlb	1	; select bank1
  7059  06DD  0840               	movf	_RF1^(0+128),w
  7060  06DE  0020               	movlb	0	; select bank0
  7061  06DF  066A               	xorwf	??_setRF_Main,w
  7062  06E0  397F               	andlw	-129
  7063  06E1  066A               	xorwf	??_setRF_Main,w
  7064  06E2  0021               	movlb	1	; select bank1
  7065  06E3  00C0               	movwf	_RF1^(0+128)
  7066                           
  7067                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7068  06E4  1FC0               	btfss	_RF1^(0+128),7
  7069  06E5  2EE8               	goto	l2481
  7070  06E6  1F40               	btfss	_RF1^(0+128),6
  7071  06E7  2F65               	goto	l10813
  7072  06E8                     l2481:	
  7073                           
  7074                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7075  06E8  1D40               	btfss	_RF1^(0+128),2
  7076  06E9  2F2C               	goto	l2482
  7077                           
  7078                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7079  06EA  1B40               	btfsc	_RF1^(0+128),6
  7080  06EB  2F27               	goto	l10785
  7081                           
  7082                           ;RF_Control_B1.c: 68: RF1.Count++;
  7083  06EC  3001               	movlw	1
  7084  06ED  07C3               	addwf	(_RF1^(0+128)+3),f
  7085  06EE  3000               	movlw	0
  7086  06EF  3DC4               	addwfc	((_RF1+1)^(0+128)+3),f
  7087                           
  7088                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7089  06F0  3014               	movlw	20
  7090  06F1  00F2               	movwf	___lwdiv@divisor
  7091  06F2  3000               	movlw	0
  7092  06F3  00F3               	movwf	___lwdiv@divisor+1
  7093  06F4  0849               	movf	((_RF1+1)^(0+128)+8),w
  7094  06F5  01F5               	clrf	___lwdiv@dividend+1
  7095  06F6  07F5               	addwf	___lwdiv@dividend+1,f
  7096  06F7  0848               	movf	(_RF1^(0+128)+8),w
  7097  06F8  01F4               	clrf	___lwdiv@dividend
  7098  06F9  07F4               	addwf	___lwdiv@dividend,f
  7099  06FA  319F  275D  3186   	fcall	___lwdiv
  7100  06FD  0873               	movf	?___lwdiv+1,w
  7101  06FE  0021               	movlb	1	; select bank1
  7102  06FF  0244               	subwf	((_RF1+1)^(0+128)+3),w
  7103  0700  1D03               	skipz
  7104  0701  2F04               	goto	u12105
  7105  0702  0872               	movf	?___lwdiv,w
  7106  0703  0243               	subwf	(_RF1^(0+128)+3),w
  7107  0704                     u12105:	
  7108  0704  1C03               	skipc
  7109  0705  2F65               	goto	l10813
  7110                           
  7111                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7112  0706  3014               	movlw	20
  7113  0707  00F2               	movwf	___lwdiv@divisor
  7114  0708  3000               	movlw	0
  7115  0709  00F3               	movwf	___lwdiv@divisor+1
  7116  070A  0849               	movf	((_RF1+1)^(0+128)+8),w
  7117  070B  01F5               	clrf	___lwdiv@dividend+1
  7118  070C  07F5               	addwf	___lwdiv@dividend+1,f
  7119  070D  0848               	movf	(_RF1^(0+128)+8),w
  7120  070E  01F4               	clrf	___lwdiv@dividend
  7121  070F  07F4               	addwf	___lwdiv@dividend,f
  7122  0710  319F  275D  3186   	fcall	___lwdiv
  7123  0713  0873               	movf	?___lwdiv+1,w
  7124  0714  0021               	movlb	1	; select bank1
  7125  0715  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7126  0716  07C4               	addwf	((_RF1+1)^(0+128)+3),f
  7127  0717  0872               	movf	?___lwdiv,w
  7128  0718  01C3               	clrf	(_RF1^(0+128)+3)
  7129  0719  07C3               	addwf	(_RF1^(0+128)+3),f
  7130                           
  7131                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7132  071A  1140               	bcf	_RF1^(0+128),2
  7133                           
  7134                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7135  071B  01CB               	clrf	(_RF1^(0+128)+11)
  7136  071C  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7137                           
  7138                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7139  071D  3198  2034  3186   	fcall	_RF_RxDisable
  7140                           
  7141                           ;RF_Control_B1.c: 75: setData();
  7142  0720  3192  2262  3186   	fcall	_setData
  7143                           
  7144                           ;RF_Control_B1.c: 76: CC2500_TxData();
  7145  0723  3188  208D  3186   	fcall	_CC2500_TxData
  7146                           
  7147                           ;RF_Control_B1.c: 78: }
  7148                           ;RF_Control_B1.c: 79: } else {
  7149  0726  2F65               	goto	l10813
  7150  0727                     l10785:	
  7151                           
  7152                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  7153  0727  0021               	movlb	1	; select bank1
  7154  0728  01C3               	clrf	(_RF1^(0+128)+3)
  7155  0729  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7156                           
  7157                           ;RF_Control_B1.c: 81: RF1.TransceiveGO = 0;
  7158  072A  1140               	bcf	_RF1^(0+128),2
  7159                           
  7160                           ;RF_Control_B1.c: 82: }
  7161                           ;RF_Control_B1.c: 83: } else {
  7162  072B  2F65               	goto	l10813
  7163  072C                     l2482:	
  7164                           
  7165                           ;RF_Control_B1.c: 84: if (RF1.RxStatus == 1) {
  7166  072C  1DC0               	btfss	_RF1^(0+128),3
  7167  072D  2F3B               	goto	l10799
  7168                           
  7169                           ;RF_Control_B1.c: 86: CC2500_RxData();
  7170  072E  3196  260B  3186   	fcall	_CC2500_RxData
  7171                           
  7172                           ;RF_Control_B1.c: 88: if (RF1.ReceiveGO == 1) {
  7173  0731  0021               	movlb	1	; select bank1
  7174  0732  1CC0               	btfss	_RF1^(0+128),1
  7175  0733  2F65               	goto	l10813
  7176                           
  7177                           ;RF_Control_B1.c: 89: RF1.ReceiveGO = 0;
  7178  0734  10C0               	bcf	_RF1^(0+128),1
  7179                           
  7180                           ;RF_Control_B1.c: 90: RF1.CorrectionCounter = 0;
  7181  0735  01CB               	clrf	(_RF1^(0+128)+11)
  7182  0736  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7183                           
  7184                           ;RF_Control_B1.c: 98: getRxData();
  7185  0737  3195  254C  3186   	fcall	_getRxData
  7186                           
  7187                           ;RF_Control_B1.c: 101: }
  7188                           ;RF_Control_B1.c: 102: } else {
  7189  073A  2F65               	goto	l10813
  7190  073B                     l10799:	
  7191                           
  7192                           ;RF_Control_B1.c: 103: RF1.Count++;
  7193  073B  3001               	movlw	1
  7194  073C  0021               	movlb	1	; select bank1
  7195  073D  07C3               	addwf	(_RF1^(0+128)+3),f
  7196  073E  3000               	movlw	0
  7197  073F  3DC4               	addwfc	((_RF1+1)^(0+128)+3),f
  7198                           
  7199                           ;RF_Control_B1.c: 104: if (RF1.Count >= (RF1.RunTime / 20)) {
  7200  0740  3014               	movlw	20
  7201  0741  00F2               	movwf	___lwdiv@divisor
  7202  0742  3000               	movlw	0
  7203  0743  00F3               	movwf	___lwdiv@divisor+1
  7204  0744  0849               	movf	((_RF1+1)^(0+128)+8),w
  7205  0745  01F5               	clrf	___lwdiv@dividend+1
  7206  0746  07F5               	addwf	___lwdiv@dividend+1,f
  7207  0747  0848               	movf	(_RF1^(0+128)+8),w
  7208  0748  01F4               	clrf	___lwdiv@dividend
  7209  0749  07F4               	addwf	___lwdiv@dividend,f
  7210  074A  319F  275D  3186   	fcall	___lwdiv
  7211  074D  0873               	movf	?___lwdiv+1,w
  7212  074E  0021               	movlb	1	; select bank1
  7213  074F  0244               	subwf	((_RF1+1)^(0+128)+3),w
  7214  0750  1D03               	skipz
  7215  0751  2F54               	goto	u12135
  7216  0752  0872               	movf	?___lwdiv,w
  7217  0753  0243               	subwf	(_RF1^(0+128)+3),w
  7218  0754                     u12135:	
  7219  0754  1C03               	skipc
  7220  0755  2F65               	goto	l10813
  7221                           
  7222                           ;RF_Control_B1.c: 105: RF1.Count = 0;
  7223  0756  01C3               	clrf	(_RF1^(0+128)+3)
  7224  0757  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7225                           
  7226                           ;RF_Control_B1.c: 107: RF1.RxStatus = 1;
  7227  0758  15C0               	bsf	_RF1^(0+128),3
  7228                           
  7229                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x36);
  7230  0759  3036               	movlw	54
  7231  075A  319B  2370  3186   	fcall	_CC2500_WriteCommand
  7232                           
  7233                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x3A);
  7234  075D  303A               	movlw	58
  7235  075E  319B  2370  3186   	fcall	_CC2500_WriteCommand
  7236                           
  7237                           ;RF_Control_B1.c: 110: CC2500_WriteCommand(0x34);
  7238  0761  3034               	movlw	52
  7239  0762  319B  2370  3186   	fcall	_CC2500_WriteCommand
  7240  0765                     l10813:	
  7241                           
  7242                           ;RF_Control_B1.c: 112: }
  7243                           ;RF_Control_B1.c: 113: }
  7244                           ;RF_Control_B1.c: 114: }
  7245                           ;RF_Control_B1.c: 115: }
  7246                           ;RF_Control_B1.c: 116: }
  7247                           ;RF_Control_B1.c: 118: RF1.CorrectionCounter++;
  7248  0765  3001               	movlw	1
  7249  0766  0021               	movlb	1	; select bank1
  7250  0767  07CB               	addwf	(_RF1^(0+128)+11),f
  7251  0768  3000               	movlw	0
  7252  0769  3DCC               	addwfc	((_RF1+1)^(0+128)+11),f
  7253                           
  7254                           ;RF_Control_B1.c: 119: if (RF1.CorrectionCounter > (60000 / 20)) {
  7255  076A  300B               	movlw	11
  7256  076B  024C               	subwf	((_RF1+1)^(0+128)+11),w
  7257  076C  30B9               	movlw	185
  7258  076D  1903               	skipnz
  7259  076E  024B               	subwf	(_RF1^(0+128)+11),w
  7260  076F  1C03               	skipc
  7261  0770  2F79               	goto	l10825
  7262                           
  7263                           ;RF_Control_B1.c: 120: RF1.CorrectionCounter = 0;
  7264  0771  01CB               	clrf	(_RF1^(0+128)+11)
  7265  0772  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7266                           
  7267                           ;RF_Control_B1.c: 122: RF1.RxStatus = 0;
  7268  0773  11C0               	bcf	_RF1^(0+128),3
  7269                           
  7270                           ;RF_Control_B1.c: 123: RF1.ReceiveGO = 0;
  7271  0774  10C0               	bcf	_RF1^(0+128),1
  7272                           
  7273                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x36);
  7274  0775  3036               	movlw	54
  7275  0776  319B  2370  3186   	fcall	_CC2500_WriteCommand
  7276  0779                     l10825:	
  7277                           
  7278                           ;RF_Control_B1.c: 126: }
  7279                           ;RF_Control_B1.c: 128: if (RF1.Timeout == 1) {
  7280  0779  0021               	movlb	1	; select bank1
  7281  077A  1F41               	btfss	(_RF1^(0+128)+1),6
  7282  077B  0008               	return
  7283                           
  7284                           ;RF_Control_B1.c: 129: RF1.Timeout = 0;
  7285  077C  1341               	bcf	(_RF1^(0+128)+1),6
  7286                           
  7287                           ;RF_Control_B1.c: 130: CC2500_PowerOnInitial();
  7288  077D  319A  2291         	fcall	_CC2500_PowerOnInitial
  7289                           
  7290                           ;RF_Control_B1.c: 131: }
  7291                           ;RF_Control_B1.c: 133: } else {
  7292  077F  0008               	return
  7293  0780                     l2477:	
  7294                           
  7295                           ;RF_Control_B1.c: 134: if (myMain.PowerON == 1) {
  7296  0780  1C4F               	btfss	_myMain^(0+128),0
  7297  0781  0008               	return
  7298                           
  7299                           ;RF_Control_B1.c: 135: RF1.Enable = 1;
  7300  0782  1440               	bsf	_RF1^(0+128),0
  7301  0783  0008               	return
  7302  0784                     __end_of_setRF_Main:	
  7303                           
  7304                           	psect	text26
  7305  1262                     __ptext26:	
  7306 ;; *************** function _setData *****************
  7307 ;; Defined at:
  7308 ;;		line 188 in file "../src/RF_Control_B1.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;		None
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;		None
  7313 ;; Return value:  Size  Location     Type
  7314 ;;		None               void
  7315 ;; Registers used:
  7316 ;;		wreg, fsr1l, fsr1h, status,2
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7324 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;Total ram usage:        1 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    3
  7329 ;; This function calls:
  7330 ;;		Nothing
  7331 ;; This function is called by:
  7332 ;;		_setRF_Main
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           
  7337                           ;psect for function _setData
  7338  1262                     _setData:	
  7339                           
  7340                           ;RF_Control_B1.c: 212: RF_Data[0] = 0x63;
  7341                           
  7342                           ;incstack = 0
  7343                           ; Regs used in _setData: [wreg+fsr1l+fsr1h+status,2]
  7344  1262  3063               	movlw	99
  7345  1263  00F2               	movwf	??_setData
  7346  1264  0872               	movf	??_setData,w
  7347  1265  0023               	movlb	3	; select bank3
  7348  1266  00A0               	movwf	_RF_Data^(0+384)
  7349                           
  7350                           ;RF_Control_B1.c: 213: RF_Data[1] = 0x02;
  7351  1267  3002               	movlw	2
  7352  1268  00F2               	movwf	??_setData
  7353  1269  0872               	movf	??_setData,w
  7354  126A  00A1               	movwf	(_RF_Data^(0+384)+1)
  7355                           
  7356                           ;RF_Control_B1.c: 215: RF_Data[2] = 0;
  7357  126B  01A2               	clrf	(_RF_Data^(0+384)+2)
  7358                           
  7359                           ;RF_Control_B1.c: 216: RF_Data[3] = 0;
  7360  126C  01A3               	clrf	(_RF_Data^(0+384)+3)
  7361                           
  7362                           ;RF_Control_B1.c: 217: RF_Data[4] = 0;
  7363  126D  01A4               	clrf	(_RF_Data^(0+384)+4)
  7364                           
  7365                           ;RF_Control_B1.c: 218: RF_Data[5] = 0;
  7366  126E  01A5               	clrf	(_RF_Data^(0+384)+5)
  7367                           
  7368                           ;RF_Control_B1.c: 219: RF_Data[6] = 0;
  7369  126F  01A6               	clrf	(_RF_Data^(0+384)+6)
  7370                           
  7371                           ;RF_Control_B1.c: 220: RF_Data[7] = 0;
  7372  1270  01A7               	clrf	(_RF_Data^(0+384)+7)
  7373                           
  7374                           ;RF_Control_B1.c: 221: RF_Data[8] = 0;
  7375  1271  01A8               	clrf	(_RF_Data^(0+384)+8)
  7376                           
  7377                           ;RF_Control_B1.c: 222: RF_Data[9] = product->Data[9];
  7378  1272  087B               	movf	_product,w
  7379  1273  0086               	movwf	6
  7380  1274  3002               	movlw	2	; select bank4/5
  7381  1275  0087               	movwf	7
  7382  1276  3002               	movlw	2	; select bank4/5
  7383  1277  3F49               	moviw [9]fsr1
  7384  1278  00A9               	movwf	(_RF_Data^(0+384)+9)
  7385                           
  7386                           ;RF_Control_B1.c: 223: RF_Data[10] = 0;
  7387  1279  01AA               	clrf	(_RF_Data^(0+384)+10)
  7388                           
  7389                           ;RF_Control_B1.c: 224: RF_Data[11] = product->Data[11];
  7390  127A  087B               	movf	_product,w
  7391  127B  0086               	movwf	6
  7392  127C  3002               	movlw	2	; select bank4/5
  7393  127D  0087               	movwf	7
  7394  127E  3002               	movlw	2	; select bank4/5
  7395  127F  3F4B               	moviw [11]fsr1
  7396  1280  00AB               	movwf	(_RF_Data^(0+384)+11)
  7397                           
  7398                           ;RF_Control_B1.c: 225: RF_Data[12] = product->Data[12];
  7399  1281  087B               	movf	_product,w
  7400  1282  0086               	movwf	6
  7401  1283  3002               	movlw	2	; select bank4/5
  7402  1284  0087               	movwf	7
  7403  1285  3002               	movlw	2	; select bank4/5
  7404  1286  3F4C               	moviw [12]fsr1
  7405  1287  00AC               	movwf	(_RF_Data^(0+384)+12)
  7406                           
  7407                           ;RF_Control_B1.c: 226: RF_Data[13] = product->Data[13];
  7408  1288  087B               	movf	_product,w
  7409  1289  0086               	movwf	6
  7410  128A  3002               	movlw	2	; select bank4/5
  7411  128B  0087               	movwf	7
  7412  128C  3002               	movlw	2	; select bank4/5
  7413  128D  3F4D               	moviw [13]fsr1
  7414  128E  00AD               	movwf	(_RF_Data^(0+384)+13)
  7415                           
  7416                           ;RF_Control_B1.c: 227: RF_Data[14] = product->Data[14];
  7417  128F  087B               	movf	_product,w
  7418  1290  0086               	movwf	6
  7419  1291  3002               	movlw	2	; select bank4/5
  7420  1292  0087               	movwf	7
  7421  1293  3002               	movlw	2	; select bank4/5
  7422  1294  3F4E               	moviw [14]fsr1
  7423  1295  00AE               	movwf	(_RF_Data^(0+384)+14)
  7424                           
  7425                           ;RF_Control_B1.c: 228: RF_Data[15] = product->Data[15];
  7426  1296  087B               	movf	_product,w
  7427  1297  0086               	movwf	6
  7428  1298  3002               	movlw	2	; select bank4/5
  7429  1299  0087               	movwf	7
  7430  129A  3002               	movlw	2	; select bank4/5
  7431  129B  3F4F               	moviw [15]fsr1
  7432  129C  00AF               	movwf	(_RF_Data^(0+384)+15)
  7433                           
  7434                           ;RF_Control_B1.c: 229: RF_Data[16] = 0;
  7435  129D  01B0               	clrf	(_RF_Data^(0+384)+16)
  7436                           
  7437                           ;RF_Control_B1.c: 230: RF_Data[17] = 0;
  7438  129E  01B1               	clrf	(_RF_Data^(0+384)+17)
  7439                           
  7440                           ;RF_Control_B1.c: 231: RF_Data[18] = 0;
  7441  129F  01B2               	clrf	(_RF_Data^(0+384)+18)
  7442                           
  7443                           ;RF_Control_B1.c: 232: RF_Data[19] = 0;
  7444  12A0  01B3               	clrf	(_RF_Data^(0+384)+19)
  7445                           
  7446                           ;RF_Control_B1.c: 233: RF_Data[20] = 210;
  7447  12A1  30D2               	movlw	210
  7448  12A2  00F2               	movwf	??_setData
  7449  12A3  0872               	movf	??_setData,w
  7450  12A4  00B4               	movwf	(_RF_Data^(0+384)+20)
  7451  12A5  0008               	return
  7452  12A6                     __end_of_setData:	
  7453                           
  7454                           	psect	text27
  7455  154C                     __ptext27:	
  7456 ;; *************** function _getRxData *****************
  7457 ;; Defined at:
  7458 ;;		line 256 in file "../src/RF_Control_B1.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;		None
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;  error           1   73[BANK0 ] unsigned char 
  7463 ;; Return value:  Size  Location     Type
  7464 ;;		None               void
  7465 ;; Registers used:
  7466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7476 ;;Total ram usage:        2 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    8
  7479 ;; This function calls:
  7480 ;;		_getMain_All_Error_Status
  7481 ;;		_setControl_Lights_Table
  7482 ;;		_setLog_Code
  7483 ;;		_setTxData
  7484 ;; This function is called by:
  7485 ;;		_setRF_Main
  7486 ;; This function uses a non-reentrant model
  7487 ;;
  7488                           
  7489                           
  7490                           ;psect for function _getRxData
  7491  154C                     _getRxData:	
  7492                           
  7493                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7494                           
  7495                           ;incstack = 0
  7496                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7497  154C  0023               	movlb	3	; select bank3
  7498  154D  0820               	movf	_RF_Data^(0+384),w
  7499  154E  3AAA               	xorlw	170
  7500  154F  1D03               	skipz
  7501  1550  2D62               	goto	l10409
  7502  1551  0821               	movf	(_RF_Data^(0+384)+1),w
  7503  1552  3A01               	xorlw	1
  7504  1553  1D03               	skipz
  7505  1554  2D62               	goto	l10409
  7506                           
  7507                           ;RF_Control_B1.c: 259: product->Data[2] = 0x55;
  7508  1555  3055               	movlw	85
  7509  1556  0020               	movlb	0	; select bank0
  7510  1557  00E8               	movwf	??_getRxData
  7511  1558  087B               	movf	_product,w
  7512  1559  3E02               	addlw	2
  7513  155A  0086               	movwf	6
  7514  155B  3002               	movlw	2	; select bank4/5
  7515  155C  0087               	movwf	7
  7516  155D  0868               	movf	??_getRxData,w
  7517  155E  0081               	movwf	1
  7518                           
  7519                           ;RF_Control_B1.c: 260: setTxData();
  7520  155F  3198  2001         	fcall	_setTxData
  7521                           
  7522                           ;RF_Control_B1.c: 264: } else {
  7523  1561  0008               	return
  7524  1562                     l10409:	
  7525                           
  7526                           ;RF_Control_B1.c: 265: char error = getMain_All_Error_Status(0);
  7527  1562  3000               	movlw	0
  7528  1563  319E  263C  3195   	fcall	_getMain_All_Error_Status
  7529  1566  0020               	movlb	0	; select bank0
  7530  1567  00E8               	movwf	??_getRxData
  7531  1568  0868               	movf	??_getRxData,w
  7532  1569  00E9               	movwf	getRxData@error
  7533                           
  7534                           ;RF_Control_B1.c: 266: if (error == 0) {
  7535  156A  08E9               	movf	getRxData@error,f
  7536  156B  1D03               	skipz
  7537  156C  2DA9               	goto	l2525
  7538                           
  7539                           ;RF_Control_B1.c: 267: if (RF1.Learn == 1) {
  7540  156D  0021               	movlb	1	; select bank1
  7541  156E  1F40               	btfss	_RF1^(0+128),6
  7542  156F  2D7B               	goto	l10421
  7543                           
  7544                           ;RF_Control_B1.c: 269: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7545  1570  0023               	movlb	3	; select bank3
  7546  1571  08A0               	movf	_RF_Data^(0+384),f
  7547  1572  1D03               	skipz
  7548  1573  0008               	return
  7549  1574  0821               	movf	(_RF_Data^(0+384)+1),w
  7550  1575  3A64               	xorlw	100
  7551  1576  1D03               	skipz
  7552  1577  0008               	return
  7553                           
  7554                           ;RF_Control_B1.c: 270: setLog_Code();
  7555  1578  319F  2729         	fcall	_setLog_Code
  7556                           
  7557                           ;RF_Control_B1.c: 271: }
  7558                           ;RF_Control_B1.c: 289: } else {
  7559  157A  0008               	return
  7560  157B                     l10421:	
  7561                           
  7562                           ;RF_Control_B1.c: 290: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7563  157B  0023               	movlb	3	; select bank3
  7564  157C  0834               	movf	(_RF_Data^(0+384)+20),w
  7565  157D  3AD2               	xorlw	210
  7566  157E  1903               	skipnz
  7567  157F  2D84               	goto	l10425
  7568  1580  0834               	movf	(_RF_Data^(0+384)+20),w
  7569  1581  3A0A               	xorlw	10
  7570  1582  1D03               	skipz
  7571  1583  0008               	return
  7572  1584                     l10425:	
  7573                           
  7574                           ;RF_Control_B1.c: 292: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7575  1584  08A0               	movf	_RF_Data^(0+384),f
  7576  1585  1D03               	skipz
  7577  1586  0008               	return
  7578  1587  0821               	movf	(_RF_Data^(0+384)+1),w
  7579  1588  3A02               	xorlw	2
  7580  1589  1D03               	skipz
  7581  158A  0008               	return
  7582                           
  7583                           ;RF_Control_B1.c: 294: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7584  158B  087B               	movf	_product,w
  7585  158C  3E0C               	addlw	12
  7586  158D  0086               	movwf	6
  7587  158E  3002               	movlw	2	; select bank4/5
  7588  158F  0087               	movwf	7
  7589  1590  082C               	movf	(_RF_Data^(0+384)+12),w
  7590  1591  0601               	xorwf	1,w
  7591  1592  1D03               	skipz
  7592  1593  0008               	return
  7593  1594  087B               	movf	_product,w
  7594  1595  3E0D               	addlw	13
  7595  1596  0086               	movwf	6
  7596  1597  3002               	movlw	2	; select bank4/5
  7597  1598  0087               	movwf	7
  7598  1599  082D               	movf	(_RF_Data^(0+384)+13),w
  7599  159A  0601               	xorwf	1,w
  7600  159B  1D03               	skipz
  7601  159C  0008               	return
  7602  159D  087B               	movf	_product,w
  7603  159E  3E0E               	addlw	14
  7604  159F  0086               	movwf	6
  7605  15A0  3002               	movlw	2	; select bank4/5
  7606  15A1  0087               	movwf	7
  7607  15A2  082E               	movf	(_RF_Data^(0+384)+14),w
  7608  15A3  0601               	xorwf	1,w
  7609  15A4  1D03               	skipz
  7610  15A5  0008               	return
  7611                           
  7612                           ;RF_Control_B1.c: 295: setControl_Lights_Table();
  7613  15A6  318B  23F2         	fcall	_setControl_Lights_Table
  7614                           
  7615                           ;RF_Control_B1.c: 296: }
  7616                           ;RF_Control_B1.c: 299: }
  7617                           ;RF_Control_B1.c: 310: }
  7618                           ;RF_Control_B1.c: 311: }
  7619                           ;RF_Control_B1.c: 312: } else {
  7620  15A8  0008               	return
  7621  15A9                     l2525:	
  7622                           
  7623                           ;RF_Control_B1.c: 313: __nop();
  7624  15A9  0000               	nop
  7625  15AA  0008               	return
  7626  15AB                     __end_of_getRxData:	
  7627                           
  7628                           	psect	text28
  7629  1F29                     __ptext28:	
  7630 ;; *************** function _setLog_Code *****************
  7631 ;; Defined at:
  7632 ;;		line 319 in file "../src/RF_Control_B1.c"
  7633 ;; Parameters:    Size  Location     Type
  7634 ;;		None
  7635 ;; Auto vars:     Size  Location     Type
  7636 ;;		None
  7637 ;; Return value:  Size  Location     Type
  7638 ;;		None               void
  7639 ;; Registers used:
  7640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7641 ;; Tracked objects:
  7642 ;;		On entry : 0/0
  7643 ;;		On exit  : 0/0
  7644 ;;		Unchanged: 0/0
  7645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7650 ;;Total ram usage:        1 bytes
  7651 ;; Hardware stack levels used:    1
  7652 ;; Hardware stack levels required when called:    5
  7653 ;; This function calls:
  7654 ;;		_setBuz
  7655 ;;		_setMemory_LoopSave
  7656 ;;		_setMemory_Modify
  7657 ;;		_setProductData
  7658 ;; This function is called by:
  7659 ;;		_getRxData
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           
  7664                           ;psect for function _setLog_Code
  7665  1F29                     _setLog_Code:	
  7666                           
  7667                           ;RF_Control_B1.c: 320: RF1.Learn = 0;
  7668                           
  7669                           ;incstack = 0
  7670                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7671  1F29  0021               	movlb	1	; select bank1
  7672  1F2A  1340               	bcf	_RF1^(0+128),6
  7673                           
  7674                           ;RF_Control_B1.c: 321: setProductData(12, RF_Data[12]);
  7675  1F2B  0023               	movlb	3	; select bank3
  7676  1F2C  082C               	movf	(_RF_Data^(0+384)+12),w
  7677  1F2D  0020               	movlb	0	; select bank0
  7678  1F2E  00DD               	movwf	??_setLog_Code
  7679  1F2F  085D               	movf	??_setLog_Code,w
  7680  1F30  00DA               	movwf	setProductData@value
  7681  1F31  300C               	movlw	12
  7682  1F32  3198  20AE  319F   	fcall	_setProductData
  7683                           
  7684                           ;RF_Control_B1.c: 322: setProductData(13, RF_Data[13]);
  7685  1F35  0023               	movlb	3	; select bank3
  7686  1F36  082D               	movf	(_RF_Data^(0+384)+13),w
  7687  1F37  0020               	movlb	0	; select bank0
  7688  1F38  00DD               	movwf	??_setLog_Code
  7689  1F39  085D               	movf	??_setLog_Code,w
  7690  1F3A  00DA               	movwf	setProductData@value
  7691  1F3B  300D               	movlw	13
  7692  1F3C  3198  20AE  319F   	fcall	_setProductData
  7693                           
  7694                           ;RF_Control_B1.c: 323: setProductData(14, RF_Data[14]);
  7695  1F3F  0023               	movlb	3	; select bank3
  7696  1F40  082E               	movf	(_RF_Data^(0+384)+14),w
  7697  1F41  0020               	movlb	0	; select bank0
  7698  1F42  00DD               	movwf	??_setLog_Code
  7699  1F43  085D               	movf	??_setLog_Code,w
  7700  1F44  00DA               	movwf	setProductData@value
  7701  1F45  300E               	movlw	14
  7702  1F46  3198  20AE  319F   	fcall	_setProductData
  7703                           
  7704                           ;RF_Control_B1.c: 324: setBuz(1, 100);
  7705  1F49  3064               	movlw	100
  7706  1F4A  0020               	movlb	0	; select bank0
  7707  1F4B  00A4               	movwf	setBuz@time
  7708  1F4C  3000               	movlw	0
  7709  1F4D  00A5               	movwf	setBuz@time+1
  7710  1F4E  3001               	movlw	1
  7711  1F4F  3192  22EC  319F   	fcall	_setBuz
  7712                           
  7713                           ;RF_Control_B1.c: 325: if (myMain.First == 1) {
  7714  1F52  0021               	movlb	1	; select bank1
  7715  1F53  1ECF               	btfss	_myMain^(0+128),5
  7716  1F54  2F59               	goto	l2538
  7717                           
  7718                           ;RF_Control_B1.c: 326: setMemory_LoopSave(1);
  7719  1F55  3001               	movlw	1
  7720  1F56  3199  21AF  319F   	fcall	_setMemory_LoopSave
  7721  1F59                     l2538:	
  7722                           
  7723                           ;RF_Control_B1.c: 327: }
  7724                           ;RF_Control_B1.c: 328: setMemory_Modify(1);
  7725  1F59  3001               	movlw	1
  7726  1F5A  3199  215F         	fcall	_setMemory_Modify
  7727  1F5C  0008               	return
  7728  1F5D                     __end_of_setLog_Code:	
  7729                           
  7730                           	psect	text29
  7731  19AF                     __ptext29:	
  7732 ;; *************** function _setMemory_LoopSave *****************
  7733 ;; Defined at:
  7734 ;;		line 1092 in file "../src/MCU_B1.c"
  7735 ;; Parameters:    Size  Location     Type
  7736 ;;  command         1    wreg     unsigned char 
  7737 ;; Auto vars:     Size  Location     Type
  7738 ;;  command         1    3[COMMON] unsigned char 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;		None               void
  7741 ;; Registers used:
  7742 ;;		wreg, status,2, status,0
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7749 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;Total ram usage:        2 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:    3
  7755 ;; This function calls:
  7756 ;;		Nothing
  7757 ;; This function is called by:
  7758 ;;		_setLog_Code
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           
  7763                           ;psect for function _setMemory_LoopSave
  7764  19AF                     _setMemory_LoopSave:	
  7765                           
  7766                           ;incstack = 0
  7767                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7768                           ;setMemory_LoopSave@command stored from wreg
  7769  19AF  00F3               	movwf	setMemory_LoopSave@command
  7770                           
  7771                           ;MCU_B1.c: 1093: Memory.LoopSave = command == 1 ? 1 : 0;
  7772  19B0  0873               	movf	setMemory_LoopSave@command,w
  7773  19B1  3A01               	xorlw	1
  7774  19B2  3000               	movlw	0
  7775  19B3  1903               	skipnz
  7776  19B4  3001               	movlw	1
  7777  19B5  00F2               	movwf	??_setMemory_LoopSave
  7778  19B6  0DF2               	rlf	??_setMemory_LoopSave,f
  7779  19B7  0DF2               	rlf	??_setMemory_LoopSave,f
  7780  19B8  0024               	movlb	4	; select bank4
  7781  19B9  0854               	movf	(_Memory^(0+512)+36),w
  7782  19BA  0672               	xorwf	??_setMemory_LoopSave,w
  7783  19BB  39FB               	andlw	-5
  7784  19BC  0672               	xorwf	??_setMemory_LoopSave,w
  7785  19BD  00D4               	movwf	(_Memory^(0+512)+36)
  7786  19BE  0008               	return
  7787  19BF                     __end_of_setMemory_LoopSave:	
  7788                           
  7789                           	psect	text30
  7790  0BF2                     __ptext30:	
  7791 ;; *************** function _setControl_Lights_Table *****************
  7792 ;; Defined at:
  7793 ;;		line 332 in file "../src/RF_Control_B1.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;		None
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;		None
  7798 ;; Return value:  Size  Location     Type
  7799 ;;		None               void
  7800 ;; Registers used:
  7801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7802 ;; Tracked objects:
  7803 ;;		On entry : 0/0
  7804 ;;		On exit  : 0/0
  7805 ;;		Unchanged: 0/0
  7806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7811 ;;Total ram usage:        0 bytes
  7812 ;; Hardware stack levels used:    1
  7813 ;; Hardware stack levels required when called:    7
  7814 ;; This function calls:
  7815 ;;		_getDimmerLights_Status
  7816 ;;		_getMain_All_LightsStatus
  7817 ;;		_setCmd_Status
  7818 ;;		_setDimmerLights_SwOff
  7819 ;;		_setDimmerLights_SwOn
  7820 ;;		_setProductData
  7821 ;;		_setRFSW_AdjControl
  7822 ;;		_setRFSW_Control
  7823 ;;		_setRF_AdjControl
  7824 ;;		_setTxData
  7825 ;; This function is called by:
  7826 ;;		_getRxData
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           
  7831                           ;psect for function _setControl_Lights_Table
  7832  0BF2                     _setControl_Lights_Table:	
  7833                           
  7834                           ;RF_Control_B1.c: 334: switch (RF_Data[15]) {
  7835                           
  7836                           ;incstack = 0
  7837                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7838  0BF2  2C71               	goto	l10127
  7839  0BF3                     l10095:	
  7840                           ;RF_Control_B1.c: 336: case 0x00:
  7841                           
  7842                           
  7843                           ;RF_Control_B1.c: 337: if (getMain_All_LightsStatus() == 1) {
  7844  0BF3  3199  2141  318B   	fcall	_getMain_All_LightsStatus
  7845  0BF6  3A01               	xorlw	1
  7846  0BF7  1D03               	skipz
  7847  0BF8  2C1D               	goto	l10105
  7848                           
  7849                           ;RF_Control_B1.c: 340: if (getDimmerLights_Status(1) == 1) {
  7850  0BF9  3001               	movlw	1
  7851  0BFA  3199  2114  318B   	fcall	_getDimmerLights_Status
  7852  0BFD  3A01               	xorlw	1
  7853  0BFE  1D03               	skipz
  7854  0BFF  2C08               	goto	l2545
  7855                           
  7856                           ;RF_Control_B1.c: 341: setDimmerLights_SwOn(1);
  7857  0C00  3001               	movlw	1
  7858  0C01  3187  2784  318B   	fcall	_setDimmerLights_SwOn
  7859                           
  7860                           ;RF_Control_B1.c: 342: setDimmerLights_SwOff(1);
  7861  0C04  3001               	movlw	1
  7862  0C05  3191  2122  318B   	fcall	_setDimmerLights_SwOff
  7863  0C08                     l2545:	
  7864                           
  7865                           ;RF_Control_B1.c: 343: }
  7866                           ;RF_Control_B1.c: 346: if (getDimmerLights_Status(2) == 1) {
  7867  0C08  3002               	movlw	2
  7868  0C09  3199  2114  318B   	fcall	_getDimmerLights_Status
  7869  0C0C  3A01               	xorlw	1
  7870  0C0D  1D03               	skipz
  7871  0C0E  2C17               	goto	l10103
  7872                           
  7873                           ;RF_Control_B1.c: 347: setDimmerLights_SwOn(2);
  7874  0C0F  3002               	movlw	2
  7875  0C10  3187  2784  318B   	fcall	_setDimmerLights_SwOn
  7876                           
  7877                           ;RF_Control_B1.c: 348: setDimmerLights_SwOff(2);
  7878  0C13  3002               	movlw	2
  7879  0C14  3191  2122  318B   	fcall	_setDimmerLights_SwOff
  7880  0C17                     l10103:	
  7881                           
  7882                           ;RF_Control_B1.c: 349: }
  7883                           ;RF_Control_B1.c: 358: setCmd_Status(1, 1);
  7884  0C17  01F2               	clrf	setCmd_Status@cmd
  7885  0C18  0AF2               	incf	setCmd_Status@cmd,f
  7886  0C19  3001               	movlw	1
  7887  0C1A  319A  2252         	fcall	_setCmd_Status
  7888                           
  7889                           ;RF_Control_B1.c: 359: } else {
  7890  0C1C  0008               	return
  7891  0C1D                     l10105:	
  7892                           
  7893                           ;RF_Control_B1.c: 360: setProductData(9, 0);
  7894  0C1D  0020               	movlb	0	; select bank0
  7895  0C1E  01DA               	clrf	setProductData@value
  7896  0C1F  3009               	movlw	9
  7897  0C20  3198  20AE  318B   	fcall	_setProductData
  7898                           
  7899                           ;RF_Control_B1.c: 361: setProductData(11, 0);
  7900  0C23  0020               	movlb	0	; select bank0
  7901  0C24  01DA               	clrf	setProductData@value
  7902  0C25  300B               	movlw	11
  7903  0C26  3198  20AE  318B   	fcall	_setProductData
  7904                           
  7905                           ;RF_Control_B1.c: 362: setProductData(15, 0);
  7906  0C29  0020               	movlb	0	; select bank0
  7907  0C2A  01DA               	clrf	setProductData@value
  7908  0C2B  300F               	movlw	15
  7909  0C2C  3198  20AE  318B   	fcall	_setProductData
  7910                           
  7911                           ;RF_Control_B1.c: 363: setProductData(17, 0);
  7912  0C2F  0020               	movlb	0	; select bank0
  7913  0C30  01DA               	clrf	setProductData@value
  7914  0C31  3011               	movlw	17
  7915  0C32  3198  20AE  318B   	fcall	_setProductData
  7916                           
  7917                           ;RF_Control_B1.c: 364: setTxData();
  7918  0C35  3198  2001         	fcall	_setTxData
  7919                           
  7920                           ;RF_Control_B1.c: 365: }
  7921                           ;RF_Control_B1.c: 366: break;
  7922  0C37  0008               	return
  7923  0C38                     l10109:	
  7924                           ;RF_Control_B1.c: 368: case 0x20:
  7925                           
  7926                           
  7927                           ;RF_Control_B1.c: 369: setProductData(9, 0);
  7928  0C38  0020               	movlb	0	; select bank0
  7929  0C39  01DA               	clrf	setProductData@value
  7930  0C3A  3009               	movlw	9
  7931  0C3B  3198  20AE  318B   	fcall	_setProductData
  7932                           
  7933                           ;RF_Control_B1.c: 370: setProductData(11, 0);
  7934  0C3E  0020               	movlb	0	; select bank0
  7935  0C3F  01DA               	clrf	setProductData@value
  7936  0C40  300B               	movlw	11
  7937  0C41  3198  20AE  318B   	fcall	_setProductData
  7938                           
  7939                           ;RF_Control_B1.c: 371: setProductData(15, product->Data[15]);
  7940  0C44  087B               	movf	_product,w
  7941  0C45  0086               	movwf	6
  7942  0C46  3002               	movlw	2	; select bank4/5
  7943  0C47  0087               	movwf	7
  7944  0C48  3002               	movlw	2	; select bank4/5
  7945  0C49  3F4F               	moviw [15]fsr1
  7946  0C4A  0020               	movlb	0	; select bank0
  7947  0C4B  00DA               	movwf	setProductData@value
  7948  0C4C  300F               	movlw	15
  7949  0C4D  3198  20AE  318B   	fcall	_setProductData
  7950                           
  7951                           ;RF_Control_B1.c: 372: setProductData(17, 0);
  7952  0C50  0020               	movlb	0	; select bank0
  7953  0C51  01DA               	clrf	setProductData@value
  7954  0C52  3011               	movlw	17
  7955  0C53  3198  20AE  318B   	fcall	_setProductData
  7956                           
  7957                           ;RF_Control_B1.c: 373: setTxData();
  7958  0C56  3198  2001         	fcall	_setTxData
  7959                           
  7960                           ;RF_Control_B1.c: 374: break;
  7961  0C58  0008               	return
  7962  0C59                     l10113:	
  7963                           ;RF_Control_B1.c: 377: case 0x01:
  7964                           
  7965                           
  7966                           ;RF_Control_B1.c: 378: setRFSW_Control(1);
  7967  0C59  3001               	movlw	1
  7968  0C5A  3191  215C         	fcall	_setRFSW_Control
  7969                           
  7970                           ;RF_Control_B1.c: 379: break;
  7971  0C5C  0008               	return
  7972  0C5D                     l10115:	
  7973                           ;RF_Control_B1.c: 383: case 0x11:
  7974                           
  7975                           
  7976                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  7977  0C5D  3001               	movlw	1
  7978  0C5E  318A  22DF         	fcall	_setRFSW_AdjControl
  7979                           
  7980                           ;RF_Control_B1.c: 385: break;
  7981  0C60  0008               	return
  7982  0C61                     l10117:	
  7983                           ;RF_Control_B1.c: 387: case 0xd1:
  7984                           
  7985                           
  7986                           ;RF_Control_B1.c: 388: setRF_AdjControl(1);
  7987  0C61  3001               	movlw	1
  7988  0C62  319F  2793         	fcall	_setRF_AdjControl
  7989                           
  7990                           ;RF_Control_B1.c: 389: break;
  7991  0C64  0008               	return
  7992  0C65                     l10119:	
  7993                           ;RF_Control_B1.c: 394: case 0x02:
  7994                           
  7995                           
  7996                           ;RF_Control_B1.c: 395: setRFSW_Control(2);
  7997  0C65  3002               	movlw	2
  7998  0C66  3191  215C         	fcall	_setRFSW_Control
  7999                           
  8000                           ;RF_Control_B1.c: 396: break;
  8001  0C68  0008               	return
  8002  0C69                     l10121:	
  8003                           ;RF_Control_B1.c: 399: case 0x21:
  8004                           
  8005                           
  8006                           ;RF_Control_B1.c: 400: setRFSW_AdjControl(2);
  8007  0C69  3002               	movlw	2
  8008  0C6A  318A  22DF         	fcall	_setRFSW_AdjControl
  8009                           
  8010                           ;RF_Control_B1.c: 401: break;
  8011  0C6C  0008               	return
  8012  0C6D                     l10123:	
  8013                           ;RF_Control_B1.c: 403: case 0xd2:
  8014                           
  8015                           
  8016                           ;RF_Control_B1.c: 404: setRF_AdjControl(2);
  8017  0C6D  3002               	movlw	2
  8018  0C6E  319F  2793         	fcall	_setRF_AdjControl
  8019                           
  8020                           ;RF_Control_B1.c: 422: }
  8021                           
  8022                           ;RF_Control_B1.c: 405: break;
  8023  0C70  0008               	return
  8024  0C71                     l10127:	
  8025  0C71  0023               	movlb	3	; select bank3
  8026  0C72  082F               	movf	(_RF_Data^(0+384)+15),w
  8027                           
  8028                           ; Switch size 1, requested type "space"
  8029                           ; Number of cases is 8, Range of values is 0 to 210
  8030                           ; switch strategies available:
  8031                           ; Name         Instructions Cycles
  8032                           ; simple_byte           25    13 (average)
  8033                           ; jumptable            260     6 (fixed)
  8034                           ;	Chosen strategy is simple_byte
  8035  0C73  3A00               	xorlw	0	; case 0
  8036  0C74  1903               	skipnz
  8037  0C75  2BF3               	goto	l10095
  8038  0C76  3A01               	xorlw	1	; case 1
  8039  0C77  1903               	skipnz
  8040  0C78  2C59               	goto	l10113
  8041  0C79  3A03               	xorlw	3	; case 2
  8042  0C7A  1903               	skipnz
  8043  0C7B  2C65               	goto	l10119
  8044  0C7C  3A13               	xorlw	19	; case 17
  8045  0C7D  1903               	skipnz
  8046  0C7E  2C5D               	goto	l10115
  8047  0C7F  3A31               	xorlw	49	; case 32
  8048  0C80  1903               	skipnz
  8049  0C81  2C38               	goto	l10109
  8050  0C82  3A01               	xorlw	1	; case 33
  8051  0C83  1903               	skipnz
  8052  0C84  2C69               	goto	l10121
  8053  0C85  3AF0               	xorlw	240	; case 209
  8054  0C86  1903               	skipnz
  8055  0C87  2C61               	goto	l10117
  8056  0C88  3A03               	xorlw	3	; case 210
  8057  0C89  1903               	skipnz
  8058  0C8A  2C6D               	goto	l10123
  8059  0C8B  2C8C               	goto	l2556
  8060  0C8C                     l2556:	
  8061  0C8C  0008               	return
  8062  0C8D                     __end_of_setControl_Lights_Table:	
  8063                           
  8064                           	psect	text31
  8065  1F93                     __ptext31:	
  8066 ;; *************** function _setRF_AdjControl *****************
  8067 ;; Defined at:
  8068 ;;		line 501 in file "../src/RF_Control_B1.c"
  8069 ;; Parameters:    Size  Location     Type
  8070 ;;  sw              1    wreg     unsigned char 
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;  sw              1    9[COMMON] unsigned char 
  8073 ;;  dimmingStatu    1    8[COMMON] unsigned char 
  8074 ;;  status          1    7[COMMON] unsigned char 
  8075 ;; Return value:  Size  Location     Type
  8076 ;;		None               void
  8077 ;; Registers used:
  8078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8086 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8087 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;Total ram usage:        4 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    5
  8091 ;; This function calls:
  8092 ;;		_DimmerLights_SelectPointer
  8093 ;;		_getDimmerIntr_Dimming_Sw
  8094 ;;		_getDimmerLights_Status
  8095 ;; This function is called by:
  8096 ;;		_setControl_Lights_Table
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           
  8101                           ;psect for function _setRF_AdjControl
  8102  1F93                     _setRF_AdjControl:	
  8103                           
  8104                           ;incstack = 0
  8105                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8106                           ;setRF_AdjControl@sw stored from wreg
  8107  1F93  00F9               	movwf	setRF_AdjControl@sw
  8108                           
  8109                           ;RF_Control_B1.c: 502: char status = 0;
  8110  1F94  01F7               	clrf	setRF_AdjControl@status
  8111                           
  8112                           ;RF_Control_B1.c: 504: status = getDimmerLights_Status(sw);
  8113  1F95  0879               	movf	setRF_AdjControl@sw,w
  8114  1F96  3199  2114  319F   	fcall	_getDimmerLights_Status
  8115  1F99  00F6               	movwf	??_setRF_AdjControl
  8116  1F9A  0876               	movf	??_setRF_AdjControl,w
  8117  1F9B  00F7               	movwf	setRF_AdjControl@status
  8118                           
  8119                           ;RF_Control_B1.c: 505: char dimmingStatus = 0;
  8120  1F9C  01F8               	clrf	setRF_AdjControl@dimmingStatus
  8121                           
  8122                           ;RF_Control_B1.c: 506: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  8123  1F9D  0879               	movf	setRF_AdjControl@sw,w
  8124  1F9E  319A  22E5  319F   	fcall	_getDimmerIntr_Dimming_Sw
  8125  1FA1  00F6               	movwf	??_setRF_AdjControl
  8126  1FA2  0876               	movf	??_setRF_AdjControl,w
  8127  1FA3  00F8               	movwf	setRF_AdjControl@dimmingStatus
  8128                           
  8129                           ;RF_Control_B1.c: 508: if (status == 1) {
  8130  1FA4  0877               	movf	setRF_AdjControl@status,w
  8131  1FA5  3A01               	xorlw	1
  8132  1FA6  1D03               	skipz
  8133  1FA7  0008               	return
  8134                           
  8135                           ;RF_Control_B1.c: 509: if (dimmingStatus == 0) {
  8136  1FA8  08F8               	movf	setRF_AdjControl@dimmingStatus,f
  8137  1FA9  1D03               	skipz
  8138  1FAA  2FBA               	goto	l7351
  8139                           
  8140                           ;RF_Control_B1.c: 510: DimmerLights_SelectPointer(sw);
  8141  1FAB  0879               	movf	setRF_AdjControl@sw,w
  8142  1FAC  319A  223D         	fcall	_DimmerLights_SelectPointer
  8143                           
  8144                           ;RF_Control_B1.c: 511: DimmerLights->DimmingTrigger = 1;
  8145  1FAE  0020               	movlb	0	; select bank0
  8146  1FAF  086C               	movf	_DimmerLights,w
  8147  1FB0  0086               	movwf	6
  8148  1FB1  3001               	movlw	1	; select bank2/3
  8149  1FB2  0087               	movwf	7
  8150  1FB3  1601               	bsf	1,4
  8151                           
  8152                           ;RF_Control_B1.c: 512: DimmerLights->DimmingSwitch = 1;
  8153  1FB4  086C               	movf	_DimmerLights,w
  8154  1FB5  0086               	movwf	6
  8155  1FB6  3001               	movlw	1	; select bank2/3
  8156  1FB7  0087               	movwf	7
  8157  1FB8  1681               	bsf	1,5
  8158                           
  8159                           ;RF_Control_B1.c: 514: } else {
  8160  1FB9  0008               	return
  8161  1FBA                     l7351:	
  8162                           
  8163                           ;RF_Control_B1.c: 515: DimmerLights_SelectPointer(sw);
  8164  1FBA  0879               	movf	setRF_AdjControl@sw,w
  8165  1FBB  319A  223D         	fcall	_DimmerLights_SelectPointer
  8166                           
  8167                           ;RF_Control_B1.c: 516: DimmerLights->DimmingTrigger = 1;
  8168  1FBD  0020               	movlb	0	; select bank0
  8169  1FBE  086C               	movf	_DimmerLights,w
  8170  1FBF  0086               	movwf	6
  8171  1FC0  3001               	movlw	1	; select bank2/3
  8172  1FC1  0087               	movwf	7
  8173  1FC2  1601               	bsf	1,4
  8174                           
  8175                           ;RF_Control_B1.c: 517: DimmerLights->DimmingSwitch = 0;
  8176  1FC3  086C               	movf	_DimmerLights,w
  8177  1FC4  0086               	movwf	6
  8178  1FC5  3001               	movlw	1	; select bank2/3
  8179  1FC6  0087               	movwf	7
  8180  1FC7  1281               	bcf	1,5
  8181  1FC8  0008               	return
  8182  1FC9                     __end_of_setRF_AdjControl:	
  8183                           
  8184                           	psect	text32
  8185  115C                     __ptext32:	
  8186 ;; *************** function _setRFSW_Control *****************
  8187 ;; Defined at:
  8188 ;;		line 430 in file "../src/RF_Control_B1.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;  sw              1    wreg     unsigned char 
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;  sw              1   71[BANK0 ] unsigned char 
  8193 ;;  status          1   70[BANK0 ] unsigned char 
  8194 ;; Return value:  Size  Location     Type
  8195 ;;		None               void
  8196 ;; Registers used:
  8197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8198 ;; Tracked objects:
  8199 ;;		On entry : 0/0
  8200 ;;		On exit  : 0/0
  8201 ;;		Unchanged: 0/0
  8202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;Total ram usage:        3 bytes
  8208 ;; Hardware stack levels used:    1
  8209 ;; Hardware stack levels required when called:    6
  8210 ;; This function calls:
  8211 ;;		_getDimmerLights_Status
  8212 ;;		_setBuz
  8213 ;;		_setDelayOff_GO
  8214 ;;		_setDimmerLights_SwOff
  8215 ;;		_setDimmerLights_SwOn
  8216 ;;		_setRF_DimmerLights
  8217 ;;		_setTxData
  8218 ;; This function is called by:
  8219 ;;		_setControl_Lights_Table
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           
  8224                           ;psect for function _setRFSW_Control
  8225  115C                     _setRFSW_Control:	
  8226                           
  8227                           ;incstack = 0
  8228                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8229                           ;setRFSW_Control@sw stored from wreg
  8230  115C  0020               	movlb	0	; select bank0
  8231  115D  00E7               	movwf	setRFSW_Control@sw
  8232                           
  8233                           ;RF_Control_B1.c: 431: char status = 0;
  8234  115E  01E6               	clrf	setRFSW_Control@status
  8235                           
  8236                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  8237  115F  0023               	movlb	3	; select bank3
  8238  1160  0830               	movf	(_RF_Data^(0+384)+16),w
  8239  1161  3A80               	xorlw	128
  8240  1162  1D03               	skipz
  8241  1163  298F               	goto	l9919
  8242                           
  8243                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  8244  1164  0020               	movlb	0	; select bank0
  8245  1165  01DD               	clrf	setDelayOff_GO@command
  8246  1166  0ADD               	incf	setDelayOff_GO@command,f
  8247  1167  0023               	movlb	3	; select bank3
  8248  1168  0831               	movf	(_RF_Data^(0+384)+17),w
  8249  1169  0020               	movlb	0	; select bank0
  8250  116A  00E5               	movwf	??_setRFSW_Control
  8251  116B  0865               	movf	??_setRFSW_Control,w
  8252  116C  00DE               	movwf	setDelayOff_GO@value
  8253  116D  0867               	movf	setRFSW_Control@sw,w
  8254  116E  318B  2366  3191   	fcall	_setDelayOff_GO
  8255                           
  8256                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  8257  1171  0020               	movlb	0	; select bank0
  8258  1172  0867               	movf	setRFSW_Control@sw,w
  8259  1173  3199  2114  3191   	fcall	_getDimmerLights_Status
  8260  1176  3A01               	xorlw	1
  8261  1177  1D03               	skipz
  8262  1178  298F               	goto	l9919
  8263                           
  8264                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  8265  1179  3064               	movlw	100
  8266  117A  0020               	movlb	0	; select bank0
  8267  117B  00A4               	movwf	setBuz@time
  8268  117C  3000               	movlw	0
  8269  117D  00A5               	movwf	setBuz@time+1
  8270  117E  3001               	movlw	1
  8271  117F  3192  22EC  3191   	fcall	_setBuz
  8272                           
  8273                           ;RF_Control_B1.c: 437: setRF_DimmerLights(sw, 1);
  8274  1182  0020               	movlb	0	; select bank0
  8275  1183  01DD               	clrf	setRF_DimmerLights@on
  8276  1184  0ADD               	incf	setRF_DimmerLights@on,f
  8277  1185  0867               	movf	setRFSW_Control@sw,w
  8278  1186  3188  2027  3191   	fcall	_setRF_DimmerLights
  8279                           
  8280                           ;RF_Control_B1.c: 438: setTxData();
  8281  1189  3198  2001  3191   	fcall	_setTxData
  8282                           
  8283                           ;RF_Control_B1.c: 439: status = 1;
  8284  118C  0020               	movlb	0	; select bank0
  8285  118D  01E6               	clrf	setRFSW_Control@status
  8286  118E  0AE6               	incf	setRFSW_Control@status,f
  8287  118F                     l9919:	
  8288                           
  8289                           ;RF_Control_B1.c: 440: }
  8290                           ;RF_Control_B1.c: 441: }
  8291                           ;RF_Control_B1.c: 443: if (status == 0) {
  8292  118F  0020               	movlb	0	; select bank0
  8293  1190  08E6               	movf	setRFSW_Control@status,f
  8294  1191  1D03               	skipz
  8295  1192  0008               	return
  8296                           
  8297                           ;RF_Control_B1.c: 445: setDimmerLights_SwOn(sw);
  8298  1193  0867               	movf	setRFSW_Control@sw,w
  8299  1194  3187  2784  3191   	fcall	_setDimmerLights_SwOn
  8300                           
  8301                           ;RF_Control_B1.c: 446: setDimmerLights_SwOff(sw);
  8302  1197  0020               	movlb	0	; select bank0
  8303  1198  0867               	movf	setRFSW_Control@sw,w
  8304  1199  3191  2122         	fcall	_setDimmerLights_SwOff
  8305  119B  0008               	return
  8306  119C                     __end_of_setRFSW_Control:	
  8307                           
  8308                           	psect	text33
  8309  0ADF                     __ptext33:	
  8310 ;; *************** function _setRFSW_AdjControl *****************
  8311 ;; Defined at:
  8312 ;;		line 453 in file "../src/RF_Control_B1.c"
  8313 ;; Parameters:    Size  Location     Type
  8314 ;;  sw              1    wreg     unsigned char 
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;  sw              1   64[BANK0 ] unsigned char 
  8317 ;;  status          1   63[BANK0 ] unsigned char 
  8318 ;; Return value:  Size  Location     Type
  8319 ;;		None               void
  8320 ;; Registers used:
  8321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8330 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8331 ;;Total ram usage:        4 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:    6
  8334 ;; This function calls:
  8335 ;;		_getDimmerLights_PercentToValue
  8336 ;;		_getDimmerLights_Status
  8337 ;;		_setBuz
  8338 ;;		_setDimmerIntr_Dimming_RF
  8339 ;;		_setDimmerIntr_MaxmumValue
  8340 ;;		_setDimmerLights_DimmingRun
  8341 ;;		_setDimmerLights_SwOff
  8342 ;;		_setDimmerLights_SwOn
  8343 ;;		_setMemory_Modify
  8344 ;;		_setProductData
  8345 ;;		_setTxData
  8346 ;; This function is called by:
  8347 ;;		_setControl_Lights_Table
  8348 ;; This function uses a non-reentrant model
  8349 ;;
  8350                           
  8351                           
  8352                           ;psect for function _setRFSW_AdjControl
  8353  0ADF                     _setRFSW_AdjControl:	
  8354                           
  8355                           ;incstack = 0
  8356                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8357                           ;setRFSW_AdjControl@sw stored from wreg
  8358  0ADF  0020               	movlb	0	; select bank0
  8359  0AE0  00E0               	movwf	setRFSW_AdjControl@sw
  8360                           
  8361                           ;RF_Control_B1.c: 454: char status = 0;
  8362  0AE1  01DF               	clrf	setRFSW_AdjControl@status
  8363                           
  8364                           ;RF_Control_B1.c: 456: status = getDimmerLights_Status(sw);
  8365  0AE2  0860               	movf	setRFSW_AdjControl@sw,w
  8366  0AE3  3199  2114  318A   	fcall	_getDimmerLights_Status
  8367  0AE6  0020               	movlb	0	; select bank0
  8368  0AE7  00DD               	movwf	??_setRFSW_AdjControl
  8369  0AE8  085D               	movf	??_setRFSW_AdjControl,w
  8370  0AE9  00DF               	movwf	setRFSW_AdjControl@status
  8371                           
  8372                           ;RF_Control_B1.c: 458: if (RF_Data[9] > 0x64) {
  8373  0AEA  3065               	movlw	101
  8374  0AEB  0023               	movlb	3	; select bank3
  8375  0AEC  0229               	subwf	(_RF_Data^(0+384)+9),w
  8376  0AED  1C03               	skipc
  8377  0AEE  2AF6               	goto	l9931
  8378                           
  8379                           ;RF_Control_B1.c: 459: RF_Data[9] = 0x64;
  8380  0AEF  3064               	movlw	100
  8381  0AF0  0020               	movlb	0	; select bank0
  8382  0AF1  00DD               	movwf	??_setRFSW_AdjControl
  8383  0AF2  085D               	movf	??_setRFSW_AdjControl,w
  8384  0AF3  0023               	movlb	3	; select bank3
  8385  0AF4  00A9               	movwf	(_RF_Data^(0+384)+9)
  8386                           
  8387                           ;RF_Control_B1.c: 460: } else if (RF_Data[9] < 0x01) {
  8388  0AF5  2AFB               	goto	l9935
  8389  0AF6                     l9931:	
  8390  0AF6  08A9               	movf	(_RF_Data^(0+384)+9),f
  8391  0AF7  1D03               	skipz
  8392  0AF8  2AFB               	goto	l9935
  8393                           
  8394                           ;RF_Control_B1.c: 461: RF_Data[9] = 0x01;
  8395  0AF9  01A9               	clrf	(_RF_Data^(0+384)+9)
  8396  0AFA  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8397  0AFB                     l9935:	
  8398                           
  8399                           ;RF_Control_B1.c: 462: }
  8400                           ;RF_Control_B1.c: 463: setProductData(9, RF_Data[9]);
  8401  0AFB  0829               	movf	(_RF_Data^(0+384)+9),w
  8402  0AFC  0020               	movlb	0	; select bank0
  8403  0AFD  00DD               	movwf	??_setRFSW_AdjControl
  8404  0AFE  085D               	movf	??_setRFSW_AdjControl,w
  8405  0AFF  00DA               	movwf	setProductData@value
  8406  0B00  3009               	movlw	9
  8407  0B01  3198  20AE  318A   	fcall	_setProductData
  8408                           
  8409                           ;RF_Control_B1.c: 464: setProductData(11, sw);
  8410  0B04  0020               	movlb	0	; select bank0
  8411  0B05  0860               	movf	setRFSW_AdjControl@sw,w
  8412  0B06  00DD               	movwf	??_setRFSW_AdjControl
  8413  0B07  085D               	movf	??_setRFSW_AdjControl,w
  8414  0B08  00DA               	movwf	setProductData@value
  8415  0B09  300B               	movlw	11
  8416  0B0A  3198  20AE  318A   	fcall	_setProductData
  8417                           
  8418                           ;RF_Control_B1.c: 465: setProductData(17, product->Data[26 + sw]);
  8419  0B0D  0020               	movlb	0	; select bank0
  8420  0B0E  0860               	movf	setRFSW_AdjControl@sw,w
  8421  0B0F  3E1A               	addlw	26
  8422  0B10  077B               	addwf	_product,w
  8423  0B11  00DD               	movwf	??_setRFSW_AdjControl
  8424  0B12  085D               	movf	??_setRFSW_AdjControl,w
  8425  0B13  0086               	movwf	6
  8426  0B14  3002               	movlw	2	; select bank4/5
  8427  0B15  0087               	movwf	7
  8428  0B16  0801               	movf	1,w
  8429  0B17  00DE               	movwf	??_setRFSW_AdjControl+1
  8430  0B18  085E               	movf	??_setRFSW_AdjControl+1,w
  8431  0B19  00DA               	movwf	setProductData@value
  8432  0B1A  3011               	movlw	17
  8433  0B1B  3198  20AE  318A   	fcall	_setProductData
  8434                           
  8435                           ;RF_Control_B1.c: 466: setProductData((20 + sw), RF_Data[9]);
  8436  0B1E  0023               	movlb	3	; select bank3
  8437  0B1F  0829               	movf	(_RF_Data^(0+384)+9),w
  8438  0B20  0020               	movlb	0	; select bank0
  8439  0B21  00DD               	movwf	??_setRFSW_AdjControl
  8440  0B22  085D               	movf	??_setRFSW_AdjControl,w
  8441  0B23  00DA               	movwf	setProductData@value
  8442  0B24  0860               	movf	setRFSW_AdjControl@sw,w
  8443  0B25  3E14               	addlw	20
  8444  0B26  3198  20AE  318A   	fcall	_setProductData
  8445                           
  8446                           ;RF_Control_B1.c: 474: setMemory_Modify(1);
  8447  0B29  3001               	movlw	1
  8448  0B2A  3199  215F  318A   	fcall	_setMemory_Modify
  8449                           
  8450                           ;RF_Control_B1.c: 478: if (status == 1) {
  8451  0B2D  0020               	movlb	0	; select bank0
  8452  0B2E  085F               	movf	setRFSW_AdjControl@status,w
  8453  0B2F  3A01               	xorlw	1
  8454  0B30  1D03               	skipz
  8455  0B31  2B52               	goto	l9947
  8456                           
  8457                           ;RF_Control_B1.c: 480: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8458  0B32  0023               	movlb	3	; select bank3
  8459  0B33  0829               	movf	(_RF_Data^(0+384)+9),w
  8460  0B34  3196  26D1  318A   	fcall	_getDimmerLights_PercentToValue
  8461  0B37  0020               	movlb	0	; select bank0
  8462  0B38  00DD               	movwf	??_setRFSW_AdjControl
  8463  0B39  085D               	movf	??_setRFSW_AdjControl,w
  8464  0B3A  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  8465  0B3B  0860               	movf	setRFSW_AdjControl@sw,w
  8466  0B3C  319A  22FB  318A   	fcall	_setDimmerIntr_MaxmumValue
  8467                           
  8468                           ;RF_Control_B1.c: 481: setDimmerIntr_Dimming_RF(sw, 1);
  8469  0B3F  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  8470  0B40  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  8471  0B41  0020               	movlb	0	; select bank0
  8472  0B42  0860               	movf	setRFSW_AdjControl@sw,w
  8473  0B43  319D  2596  318A   	fcall	_setDimmerIntr_Dimming_RF
  8474                           
  8475                           ;RF_Control_B1.c: 483: setTxData();
  8476  0B46  3198  2001  318A   	fcall	_setTxData
  8477                           
  8478                           ;RF_Control_B1.c: 485: setBuz(1, 100);
  8479  0B49  3064               	movlw	100
  8480  0B4A  0020               	movlb	0	; select bank0
  8481  0B4B  00A4               	movwf	setBuz@time
  8482  0B4C  3000               	movlw	0
  8483  0B4D  00A5               	movwf	setBuz@time+1
  8484  0B4E  3001               	movlw	1
  8485  0B4F  3192  22EC         	fcall	_setBuz
  8486                           
  8487                           ;RF_Control_B1.c: 486: } else if (status == 0) {
  8488  0B51  0008               	return
  8489  0B52                     l9947:	
  8490  0B52  0020               	movlb	0	; select bank0
  8491  0B53  08DF               	movf	setRFSW_AdjControl@status,f
  8492  0B54  1D03               	skipz
  8493  0B55  0008               	return
  8494                           
  8495                           ;RF_Control_B1.c: 490: setDimmerLights_DimmingRun(sw, 1);
  8496  0B56  01F4               	clrf	setDimmerLights_DimmingRun@command
  8497  0B57  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  8498  0B58  0860               	movf	setRFSW_AdjControl@sw,w
  8499  0B59  319B  2358  318A   	fcall	_setDimmerLights_DimmingRun
  8500                           
  8501                           ;RF_Control_B1.c: 491: setDimmerLights_SwOn(sw);
  8502  0B5C  0020               	movlb	0	; select bank0
  8503  0B5D  0860               	movf	setRFSW_AdjControl@sw,w
  8504  0B5E  3187  2784  318A   	fcall	_setDimmerLights_SwOn
  8505                           
  8506                           ;RF_Control_B1.c: 492: setDimmerLights_SwOff(sw);
  8507  0B61  0020               	movlb	0	; select bank0
  8508  0B62  0860               	movf	setRFSW_AdjControl@sw,w
  8509  0B63  3191  2122         	fcall	_setDimmerLights_SwOff
  8510  0B65  0008               	return
  8511  0B66                     __end_of_setRFSW_AdjControl:	
  8512                           
  8513                           	psect	text34
  8514  1B58                     __ptext34:	
  8515 ;; *************** function _setDimmerLights_DimmingRun *****************
  8516 ;; Defined at:
  8517 ;;		line 1213 in file "../src/Dimmer_B1.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;  lights          1    wreg     unsigned char 
  8520 ;;  command         1    4[COMMON] unsigned char 
  8521 ;; Auto vars:     Size  Location     Type
  8522 ;;  lights          1    6[COMMON] unsigned char 
  8523 ;; Return value:  Size  Location     Type
  8524 ;;		None               void
  8525 ;; Registers used:
  8526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8532 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8536 ;;Total ram usage:        3 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; Hardware stack levels required when called:    4
  8539 ;; This function calls:
  8540 ;;		_DimmerLights_SelectPointer
  8541 ;; This function is called by:
  8542 ;;		_setRFSW_AdjControl
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           
  8547                           ;psect for function _setDimmerLights_DimmingRun
  8548  1B58                     _setDimmerLights_DimmingRun:	
  8549                           
  8550                           ;incstack = 0
  8551                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8552                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8553  1B58  00F6               	movwf	setDimmerLights_DimmingRun@lights
  8554                           
  8555                           ;Dimmer_B1.c: 1214: DimmerLights_SelectPointer(lights);
  8556  1B59  0876               	movf	setDimmerLights_DimmingRun@lights,w
  8557  1B5A  319A  223D         	fcall	_DimmerLights_SelectPointer
  8558                           
  8559                           ;Dimmer_B1.c: 1215: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8560  1B5C  0874               	movf	setDimmerLights_DimmingRun@command,w
  8561  1B5D  3A01               	xorlw	1
  8562  1B5E  3000               	movlw	0
  8563  1B5F  1903               	skipnz
  8564  1B60  3001               	movlw	1
  8565  1B61  00F5               	movwf	??_setDimmerLights_DimmingRun
  8566  1B62  0020               	movlb	0	; select bank0
  8567  1B63  0A6C               	incf	_DimmerLights,w
  8568  1B64  0086               	movwf	6
  8569  1B65  3001               	movlw	1	; select bank2/3
  8570  1B66  0087               	movwf	7
  8571  1B67  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  8572  1B68  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8573  1B69  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8574  1B6A  0801               	movf	1,w
  8575  1B6B  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8576  1B6C  39BF               	andlw	-65
  8577  1B6D  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8578  1B6E  0081               	movwf	1
  8579  1B6F  0008               	return
  8580  1B70                     __end_of_setDimmerLights_DimmingRun:	
  8581                           
  8582                           	psect	text35
  8583  18F8                     __ptext35:	
  8584 ;; *************** function _getRF_KeyStatus *****************
  8585 ;; Defined at:
  8586 ;;		line 167 in file "../src/RF_Control_B1.c"
  8587 ;; Parameters:    Size  Location     Type
  8588 ;;		None
  8589 ;; Auto vars:     Size  Location     Type
  8590 ;;  key             1    3[COMMON] unsigned char 
  8591 ;; Return value:  Size  Location     Type
  8592 ;;                  1    wreg      unsigned char 
  8593 ;; Registers used:
  8594 ;;		wreg, status,2
  8595 ;; Tracked objects:
  8596 ;;		On entry : 0/0
  8597 ;;		On exit  : 0/0
  8598 ;;		Unchanged: 0/0
  8599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;Total ram usage:        3 bytes
  8605 ;; Hardware stack levels used:    1
  8606 ;; Hardware stack levels required when called:    3
  8607 ;; This function calls:
  8608 ;;		Nothing
  8609 ;; This function is called by:
  8610 ;;		_setRF_Main
  8611 ;; This function uses a non-reentrant model
  8612 ;;
  8613                           
  8614                           
  8615                           ;psect for function _getRF_KeyStatus
  8616  18F8                     _getRF_KeyStatus:	
  8617                           
  8618                           ;RF_Control_B1.c: 168: char key = 0;
  8619                           
  8620                           ;incstack = 0
  8621                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8622  18F8  01F3               	clrf	getRF_KeyStatus@key
  8623                           
  8624                           ;RF_Control_B1.c: 175: key = (RA6 == 1 || RA0 == 1) ? 1 : 0;
  8625  18F9  01F4               	clrf	_getRF_KeyStatus$6247
  8626  18FA  0AF4               	incf	_getRF_KeyStatus$6247,f
  8627  18FB  0020               	movlb	0	; select bank0
  8628  18FC  1F0C               	btfss	12,6	;volatile
  8629  18FD  180C               	btfsc	12,0	;volatile
  8630  18FE  2900               	goto	l8039
  8631  18FF  01F4               	clrf	_getRF_KeyStatus$6247
  8632  1900                     l8039:	
  8633  1900  0874               	movf	_getRF_KeyStatus$6247,w
  8634  1901  00F2               	movwf	??_getRF_KeyStatus
  8635  1902  0872               	movf	??_getRF_KeyStatus,w
  8636  1903  00F3               	movwf	getRF_KeyStatus@key
  8637                           
  8638                           ;RF_Control_B1.c: 184: return key;
  8639  1904  0873               	movf	getRF_KeyStatus@key,w
  8640  1905  0008               	return
  8641  1906                     __end_of_getRF_KeyStatus:	
  8642                           
  8643                           	psect	text36
  8644  199F                     __ptext36:	
  8645 ;; *************** function _getBuz_GO *****************
  8646 ;; Defined at:
  8647 ;;		line 82 in file "../src/Buzzer_B1.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;		None
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;  i               2    6[COMMON] int 
  8652 ;; Return value:  Size  Location     Type
  8653 ;;                  2    2[COMMON] int 
  8654 ;; Registers used:
  8655 ;;		wreg, status,2, status,0
  8656 ;; Tracked objects:
  8657 ;;		On entry : 0/0
  8658 ;;		On exit  : 0/0
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8661 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8663 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;Total ram usage:        6 bytes
  8666 ;; Hardware stack levels used:    1
  8667 ;; Hardware stack levels required when called:    3
  8668 ;; This function calls:
  8669 ;;		Nothing
  8670 ;; This function is called by:
  8671 ;;		_setRF_Main
  8672 ;; This function uses a non-reentrant model
  8673 ;;
  8674                           
  8675                           
  8676                           ;psect for function _getBuz_GO
  8677  199F                     _getBuz_GO:	
  8678                           
  8679                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8680                           
  8681                           ;incstack = 0
  8682                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8683  199F  0021               	movlb	1	; select bank1
  8684  19A0  0C5C               	rrf	_Buz1^(0+128),w
  8685  19A1  3901               	andlw	1
  8686  19A2  00F4               	movwf	??_getBuz_GO
  8687  19A3  01F5               	clrf	??_getBuz_GO+1
  8688  19A4  0874               	movf	??_getBuz_GO,w
  8689  19A5  00F6               	movwf	getBuz_GO@i
  8690  19A6  0875               	movf	??_getBuz_GO+1,w
  8691  19A7  00F7               	movwf	getBuz_GO@i+1
  8692                           
  8693                           ;Buzzer_B1.c: 84: return i;
  8694  19A8  0877               	movf	getBuz_GO@i+1,w
  8695  19A9  01F3               	clrf	?_getBuz_GO+1
  8696  19AA  07F3               	addwf	?_getBuz_GO+1,f
  8697  19AB  0876               	movf	getBuz_GO@i,w
  8698  19AC  01F2               	clrf	?_getBuz_GO
  8699  19AD  07F2               	addwf	?_getBuz_GO,f
  8700  19AE  0008               	return
  8701  19AF                     __end_of_getBuz_GO:	
  8702                           
  8703                           	psect	text37
  8704  1834                     __ptext37:	
  8705 ;; *************** function _RF_RxDisable *****************
  8706 ;; Defined at:
  8707 ;;		line 155 in file "../src/RF_Control_B1.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;		None
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;		None
  8712 ;; Return value:  Size  Location     Type
  8713 ;;		None               void
  8714 ;; Registers used:
  8715 ;;		None
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;Total ram usage:        0 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:    3
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_setRF_Main
  8732 ;; This function uses a non-reentrant model
  8733 ;;
  8734                           
  8735                           
  8736                           ;psect for function _RF_RxDisable
  8737  1834                     _RF_RxDisable:	
  8738                           
  8739                           ;RF_Control_B1.c: 156: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8740                           
  8741                           ;incstack = 0
  8742                           ; Regs used in _RF_RxDisable: []
  8743  1834  0021               	movlb	1	; select bank1
  8744  1835  18C0               	btfsc	_RF1^(0+128),1
  8745  1836  2839               	goto	l2507
  8746  1837  1DC0               	btfss	_RF1^(0+128),3
  8747  1838  0008               	return
  8748  1839                     l2507:	
  8749                           
  8750                           ;RF_Control_B1.c: 157: RF1.RxStatus = 0;
  8751  1839  11C0               	bcf	_RF1^(0+128),3
  8752                           
  8753                           ;RF_Control_B1.c: 158: RF1.ReceiveGO = 0;
  8754  183A  10C0               	bcf	_RF1^(0+128),1
  8755  183B  0008               	return
  8756  183C                     __end_of_RF_RxDisable:	
  8757                           
  8758                           	psect	text38
  8759  088D                     __ptext38:	
  8760 ;; *************** function _CC2500_TxData *****************
  8761 ;; Defined at:
  8762 ;;		line 32 in file "../src/CC2500_B1.c"
  8763 ;; Parameters:    Size  Location     Type
  8764 ;;		None
  8765 ;; Auto vars:     Size  Location     Type
  8766 ;;  loop_e          1    7[COMMON] unsigned char 
  8767 ;; Return value:  Size  Location     Type
  8768 ;;		None               void
  8769 ;; Registers used:
  8770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8771 ;; Tracked objects:
  8772 ;;		On entry : 0/0
  8773 ;;		On exit  : 0/0
  8774 ;;		Unchanged: 0/0
  8775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;Total ram usage:        2 bytes
  8781 ;; Hardware stack levels used:    1
  8782 ;; Hardware stack levels required when called:    5
  8783 ;; This function calls:
  8784 ;;		_CC2500_WriteByte
  8785 ;;		_CC2500_WriteCommand
  8786 ;;		_RF_Timeout_Counter
  8787 ;;		_setRF_TimeoutCleared
  8788 ;; This function is called by:
  8789 ;;		_setRF_Main
  8790 ;; This function uses a non-reentrant model
  8791 ;;
  8792                           
  8793                           
  8794                           ;psect for function _CC2500_TxData
  8795  088D                     _CC2500_TxData:	
  8796                           
  8797                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8798                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8799                           
  8800                           ;incstack = 0
  8801                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8802  088D  3036               	movlw	54
  8803  088E  319B  2370  3188   	fcall	_CC2500_WriteCommand
  8804                           
  8805                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8806  0891  303B               	movlw	59
  8807  0892  319B  2370  3188   	fcall	_CC2500_WriteCommand
  8808                           
  8809                           ;CC2500_B1.c: 38: RC4 = 0;
  8810  0895  0020               	movlb	0	; select bank0
  8811  0896  120E               	bcf	14,4	;volatile
  8812                           
  8813                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8814  0897  307F               	movlw	127
  8815  0898  00F6               	movwf	??_CC2500_TxData
  8816  0899  0876               	movf	??_CC2500_TxData,w
  8817  089A  0021               	movlb	1	; select bank1
  8818  089B  00ED               	movwf	_SPI0Buffer^(0+128)
  8819                           
  8820                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8821  089C  28A0               	goto	l10137
  8822  089D                     l10135:	
  8823                           
  8824                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8825  089D  319A  227C  3188   	fcall	_RF_Timeout_Counter
  8826  08A0                     l10137:	
  8827  08A0  0020               	movlb	0	; select bank0
  8828  08A1  1D0E               	btfss	14,2	;volatile
  8829  08A2  28A6               	goto	l10141
  8830  08A3  0021               	movlb	1	; select bank1
  8831  08A4  1F41               	btfss	(_RF1^(0+128)+1),6
  8832  08A5  289D               	goto	l10135
  8833  08A6                     l10141:	
  8834                           
  8835                           ;CC2500_B1.c: 42: };
  8836                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8837  08A6  31A7  27D3  3188   	fcall	_setRF_TimeoutCleared
  8838                           
  8839                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8840  08A9  319B  2340  3188   	fcall	_CC2500_WriteByte
  8841                           
  8842                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8843  08AC  0021               	movlb	1	; select bank1
  8844  08AD  086E               	movf	_Tx_Length^(0+128),w
  8845  08AE  00F6               	movwf	??_CC2500_TxData
  8846  08AF  0876               	movf	??_CC2500_TxData,w
  8847  08B0  00ED               	movwf	_SPI0Buffer^(0+128)
  8848                           
  8849                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8850  08B1  319B  2340  3188   	fcall	_CC2500_WriteByte
  8851                           
  8852                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8853  08B4  01F7               	clrf	CC2500_TxData@loop_e
  8854  08B5                     l10155:	
  8855  08B5  0021               	movlb	1	; select bank1
  8856  08B6  086E               	movf	_Tx_Length^(0+128),w
  8857  08B7  0277               	subwf	CC2500_TxData@loop_e,w
  8858  08B8  1803               	btfsc	3,0
  8859  08B9  28CC               	goto	l263
  8860                           
  8861                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8862  08BA  0877               	movf	CC2500_TxData@loop_e,w
  8863  08BB  3EA0               	addlw	_RF_Data& (0+255)
  8864  08BC  0086               	movwf	6
  8865  08BD  3001               	movlw	1	; select bank3/4
  8866  08BE  0087               	movwf	7
  8867  08BF  0801               	movf	1,w
  8868  08C0  00F6               	movwf	??_CC2500_TxData
  8869  08C1  0876               	movf	??_CC2500_TxData,w
  8870  08C2  0021               	movlb	1	; select bank1
  8871  08C3  00ED               	movwf	_SPI0Buffer^(0+128)
  8872                           
  8873                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8874  08C4  319B  2340  3188   	fcall	_CC2500_WriteByte
  8875  08C7  3001               	movlw	1
  8876  08C8  00F6               	movwf	??_CC2500_TxData
  8877  08C9  0876               	movf	??_CC2500_TxData,w
  8878  08CA  07F7               	addwf	CC2500_TxData@loop_e,f
  8879  08CB  28B5               	goto	l10155
  8880  08CC                     l263:	
  8881                           
  8882                           ;CC2500_B1.c: 51: }
  8883                           ;CC2500_B1.c: 52: RC4 = 1;
  8884  08CC  0020               	movlb	0	; select bank0
  8885  08CD  160E               	bsf	14,4	;volatile
  8886                           
  8887                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8888  08CE  3035               	movlw	53
  8889  08CF  319B  2370  3188   	fcall	_CC2500_WriteCommand
  8890                           
  8891                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8892  08D2  28D6               	goto	l10161
  8893  08D3                     l10159:	
  8894                           
  8895                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8896  08D3  319A  227C  3188   	fcall	_RF_Timeout_Counter
  8897  08D6                     l10161:	
  8898  08D6  0020               	movlb	0	; select bank0
  8899  08D7  180D               	btfsc	13,0	;volatile
  8900  08D8  28DC               	goto	l10165
  8901  08D9  0021               	movlb	1	; select bank1
  8902  08DA  1F41               	btfss	(_RF1^(0+128)+1),6
  8903  08DB  28D3               	goto	l10159
  8904  08DC                     l10165:	
  8905                           
  8906                           ;CC2500_B1.c: 56: };
  8907                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8908  08DC  31A7  27D3  3188   	fcall	_setRF_TimeoutCleared
  8909                           
  8910                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8911  08DF  28E3               	goto	l10169
  8912  08E0                     l10167:	
  8913                           
  8914                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8915  08E0  319A  227C  3188   	fcall	_RF_Timeout_Counter
  8916  08E3                     l10169:	
  8917  08E3  0020               	movlb	0	; select bank0
  8918  08E4  1C0D               	btfss	13,0	;volatile
  8919  08E5  28E9               	goto	l10173
  8920  08E6  0021               	movlb	1	; select bank1
  8921  08E7  1F41               	btfss	(_RF1^(0+128)+1),6
  8922  08E8  28E0               	goto	l10167
  8923  08E9                     l10173:	
  8924                           
  8925                           ;CC2500_B1.c: 61: };
  8926                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8927  08E9  31A7  27D3  3188   	fcall	_setRF_TimeoutCleared
  8928                           
  8929                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8930  08EC  3036               	movlw	54
  8931  08ED  319B  2370  3188   	fcall	_CC2500_WriteCommand
  8932                           
  8933                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8934  08F0  303B               	movlw	59
  8935  08F1  319B  2370         	fcall	_CC2500_WriteCommand
  8936                           
  8937                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8938  08F3  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8939  08F4  0008               	return
  8940  08F5                     __end_of_CC2500_TxData:	
  8941                           
  8942                           	psect	text39
  8943  160B                     __ptext39:	
  8944 ;; *************** function _CC2500_RxData *****************
  8945 ;; Defined at:
  8946 ;;		line 73 in file "../src/CC2500_B1.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;		None
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;  loop_f          1    7[COMMON] unsigned char 
  8951 ;; Return value:  Size  Location     Type
  8952 ;;		None               void
  8953 ;; Registers used:
  8954 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8955 ;; Tracked objects:
  8956 ;;		On entry : 0/0
  8957 ;;		On exit  : 0/0
  8958 ;;		Unchanged: 0/0
  8959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;Total ram usage:        2 bytes
  8965 ;; Hardware stack levels used:    1
  8966 ;; Hardware stack levels required when called:    5
  8967 ;; This function calls:
  8968 ;;		_CC2500_ReadByte
  8969 ;;		_CC2500_ReadStatus
  8970 ;;		_CC2500_WriteByte
  8971 ;;		_CC2500_WriteCommand
  8972 ;;		_RF_Timeout_Counter
  8973 ;;		_setRF_TimeoutCleared
  8974 ;; This function is called by:
  8975 ;;		_setRF_Main
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           
  8980                           ;psect for function _CC2500_RxData
  8981  160B                     _CC2500_RxData:	
  8982                           
  8983                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8984                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8985                           
  8986                           ;incstack = 0
  8987                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8988  160B  0020               	movlb	0	; select bank0
  8989  160C  180D               	btfsc	13,0	;volatile
  8990  160D  0008               	return
  8991                           
  8992                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8993  160E  303B               	movlw	59
  8994  160F  319D  2529  3196   	fcall	_CC2500_ReadStatus
  8995                           
  8996                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8997  1612  0021               	movlb	1	; select bank1
  8998  1613  086F               	movf	_s_data^(0+128),w
  8999  1614  1903               	btfsc	3,2
  9000  1615  0008               	return
  9001                           
  9002                           ;CC2500_B1.c: 90: RC4 = 0;
  9003  1616  0020               	movlb	0	; select bank0
  9004  1617  120E               	bcf	14,4	;volatile
  9005                           
  9006                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  9007  1618  30FF               	movlw	255
  9008  1619  00F6               	movwf	??_CC2500_RxData
  9009  161A  0876               	movf	??_CC2500_RxData,w
  9010  161B  0021               	movlb	1	; select bank1
  9011  161C  00ED               	movwf	_SPI0Buffer^(0+128)
  9012                           
  9013                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  9014  161D  2E21               	goto	l10193
  9015  161E                     l10191:	
  9016                           
  9017                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  9018  161E  319A  227C  3196   	fcall	_RF_Timeout_Counter
  9019  1621                     l10193:	
  9020  1621  0020               	movlb	0	; select bank0
  9021  1622  1D0E               	btfss	14,2	;volatile
  9022  1623  2E27               	goto	l10197
  9023  1624  0021               	movlb	1	; select bank1
  9024  1625  1F41               	btfss	(_RF1^(0+128)+1),6
  9025  1626  2E1E               	goto	l10191
  9026  1627                     l10197:	
  9027                           
  9028                           ;CC2500_B1.c: 95: };
  9029                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  9030  1627  31A7  27D3  3196   	fcall	_setRF_TimeoutCleared
  9031                           
  9032                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  9033  162A  319B  2340  3196   	fcall	_CC2500_WriteByte
  9034                           
  9035                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  9036  162D  319C  240F  3196   	fcall	_CC2500_ReadByte
  9037                           
  9038                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  9039  1630  0021               	movlb	1	; select bank1
  9040  1631  086D               	movf	_SPI0Buffer^(0+128),w
  9041  1632  00F6               	movwf	??_CC2500_RxData
  9042  1633  0876               	movf	??_CC2500_RxData,w
  9043  1634  00EC               	movwf	_Rx_Length^(0+128)
  9044                           
  9045                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9046  1635  01F7               	clrf	CC2500_RxData@loop_f
  9047  1636                     l10213:	
  9048  1636  086C               	movf	_Rx_Length^(0+128),w
  9049  1637  0277               	subwf	CC2500_RxData@loop_f,w
  9050  1638  1803               	btfsc	3,0
  9051  1639  2E4C               	goto	l10215
  9052                           
  9053                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9054  163A  319C  240F  3196   	fcall	_CC2500_ReadByte
  9055                           
  9056                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  9057  163D  0021               	movlb	1	; select bank1
  9058  163E  086D               	movf	_SPI0Buffer^(0+128),w
  9059  163F  00F6               	movwf	??_CC2500_RxData
  9060  1640  0877               	movf	CC2500_RxData@loop_f,w
  9061  1641  3EA0               	addlw	_RF_Data& (0+255)
  9062  1642  0086               	movwf	6
  9063  1643  3001               	movlw	1	; select bank3/4
  9064  1644  0087               	movwf	7
  9065  1645  0876               	movf	??_CC2500_RxData,w
  9066  1646  0081               	movwf	1
  9067  1647  3001               	movlw	1
  9068  1648  00F6               	movwf	??_CC2500_RxData
  9069  1649  0876               	movf	??_CC2500_RxData,w
  9070  164A  07F7               	addwf	CC2500_RxData@loop_f,f
  9071  164B  2E36               	goto	l10213
  9072  164C                     l10215:	
  9073                           
  9074                           ;CC2500_B1.c: 104: }
  9075                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  9076  164C  319C  240F  3196   	fcall	_CC2500_ReadByte
  9077                           
  9078                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  9079  164F  0021               	movlb	1	; select bank1
  9080  1650  086D               	movf	_SPI0Buffer^(0+128),w
  9081  1651  00F6               	movwf	??_CC2500_RxData
  9082  1652  0876               	movf	??_CC2500_RxData,w
  9083  1653  0022               	movlb	2	; select bank2
  9084  1654  00AE               	movwf	_RSSI^(0+256)
  9085                           
  9086                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  9087  1655  319C  240F  3196   	fcall	_CC2500_ReadByte
  9088                           
  9089                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  9090  1658  0021               	movlb	1	; select bank1
  9091  1659  086D               	movf	_SPI0Buffer^(0+128),w
  9092  165A  00F6               	movwf	??_CC2500_RxData
  9093  165B  0876               	movf	??_CC2500_RxData,w
  9094  165C  00E8               	movwf	_CRC^(0+128)
  9095                           
  9096                           ;CC2500_B1.c: 109: RC4 = 1;
  9097  165D  0020               	movlb	0	; select bank0
  9098  165E  160E               	bsf	14,4	;volatile
  9099                           
  9100                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  9101  165F  0021               	movlb	1	; select bank1
  9102  1660  1BE8               	btfsc	_CRC^(0+128),7
  9103                           
  9104                           ;CC2500_B1.c: 111: Receive_OK = 1;
  9105  1661  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9106                           
  9107                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  9108  1662  11C0               	bcf	_RF1^(0+128),3
  9109                           
  9110                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  9111  1663  14C0               	bsf	_RF1^(0+128),1
  9112                           
  9113                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  9114  1664  3036               	movlw	54
  9115  1665  319B  2370  3196   	fcall	_CC2500_WriteCommand
  9116                           
  9117                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  9118  1668  303A               	movlw	58
  9119  1669  319B  2370         	fcall	_CC2500_WriteCommand
  9120  166B  0021               	movlb	1	; select bank1
  9121  166C  0008               	return
  9122  166D                     __end_of_CC2500_RxData:	
  9123                           
  9124                           	psect	text40
  9125  1D29                     __ptext40:	
  9126 ;; *************** function _CC2500_ReadStatus *****************
  9127 ;; Defined at:
  9128 ;;		line 308 in file "../src/CC2500_B1.c"
  9129 ;; Parameters:    Size  Location     Type
  9130 ;;  status_addr     1    wreg     unsigned char 
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;  status_addr     1    5[COMMON] unsigned char 
  9133 ;; Return value:  Size  Location     Type
  9134 ;;		None               void
  9135 ;; Registers used:
  9136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9144 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9145 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9146 ;;Total ram usage:        2 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; Hardware stack levels required when called:    4
  9149 ;; This function calls:
  9150 ;;		_CC2500_ReadByte
  9151 ;;		_CC2500_WriteByte
  9152 ;;		_RF_Timeout_Counter
  9153 ;;		_setRF_TimeoutCleared
  9154 ;; This function is called by:
  9155 ;;		_CC2500_RxData
  9156 ;; This function uses a non-reentrant model
  9157 ;;
  9158                           
  9159                           
  9160                           ;psect for function _CC2500_ReadStatus
  9161  1D29                     _CC2500_ReadStatus:	
  9162                           
  9163                           ;incstack = 0
  9164                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9165                           ;CC2500_ReadStatus@status_addr stored from wreg
  9166  1D29  00F5               	movwf	CC2500_ReadStatus@status_addr
  9167                           
  9168                           ;CC2500_B1.c: 309: RC4 = 0;
  9169  1D2A  0020               	movlb	0	; select bank0
  9170  1D2B  120E               	bcf	14,4	;volatile
  9171                           
  9172                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9173  1D2C  0875               	movf	CC2500_ReadStatus@status_addr,w
  9174  1D2D  3EC0               	addlw	192
  9175  1D2E  00F4               	movwf	??_CC2500_ReadStatus
  9176  1D2F  0874               	movf	??_CC2500_ReadStatus,w
  9177  1D30  0021               	movlb	1	; select bank1
  9178  1D31  00ED               	movwf	_SPI0Buffer^(0+128)
  9179                           
  9180                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  9181  1D32  2D36               	goto	l9957
  9182  1D33                     l9955:	
  9183                           
  9184                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9185  1D33  319A  227C  319D   	fcall	_RF_Timeout_Counter
  9186  1D36                     l9957:	
  9187  1D36  0020               	movlb	0	; select bank0
  9188  1D37  1D0E               	btfss	14,2	;volatile
  9189  1D38  2D3C               	goto	l9961
  9190  1D39  0021               	movlb	1	; select bank1
  9191  1D3A  1F41               	btfss	(_RF1^(0+128)+1),6
  9192  1D3B  2D33               	goto	l9955
  9193  1D3C                     l9961:	
  9194                           
  9195                           ;CC2500_B1.c: 314: };
  9196                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9197  1D3C  31A7  27D3  319D   	fcall	_setRF_TimeoutCleared
  9198                           
  9199                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9200  1D3F  319B  2340  319D   	fcall	_CC2500_WriteByte
  9201                           
  9202                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9203  1D42  319C  240F         	fcall	_CC2500_ReadByte
  9204                           
  9205                           ;CC2500_B1.c: 319: RC4 = 1;
  9206  1D44  0020               	movlb	0	; select bank0
  9207  1D45  160E               	bsf	14,4	;volatile
  9208                           
  9209                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9210  1D46  0021               	movlb	1	; select bank1
  9211  1D47  086D               	movf	_SPI0Buffer^(0+128),w
  9212  1D48  00F4               	movwf	??_CC2500_ReadStatus
  9213  1D49  0874               	movf	??_CC2500_ReadStatus,w
  9214  1D4A  00EF               	movwf	_s_data^(0+128)
  9215  1D4B  0008               	return
  9216  1D4C                     __end_of_CC2500_ReadStatus:	
  9217                           
  9218                           	psect	text41
  9219  1C0F                     __ptext41:	
  9220 ;; *************** function _CC2500_ReadByte *****************
  9221 ;; Defined at:
  9222 ;;		line 242 in file "../src/CC2500_B1.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;		None
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;  loop_b          1    3[COMMON] unsigned char 
  9227 ;; Return value:  Size  Location     Type
  9228 ;;		None               void
  9229 ;; Registers used:
  9230 ;;		wreg, status,2, status,0
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9238 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;Total ram usage:        2 bytes
  9241 ;; Hardware stack levels used:    1
  9242 ;; Hardware stack levels required when called:    3
  9243 ;; This function calls:
  9244 ;;		Nothing
  9245 ;; This function is called by:
  9246 ;;		_CC2500_RxData
  9247 ;;		_CC2500_ReadStatus
  9248 ;;		_CC2500_ReadREG
  9249 ;; This function uses a non-reentrant model
  9250 ;;
  9251                           
  9252                           
  9253                           ;psect for function _CC2500_ReadByte
  9254  1C0F                     _CC2500_ReadByte:	
  9255                           
  9256                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9257                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9258                           
  9259                           ;incstack = 0
  9260                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9261  1C0F  01F3               	clrf	CC2500_ReadByte@loop_b
  9262  1C10                     L3:	
  9263  1C10  3008               	movlw	8
  9264  1C11  0273               	subwf	CC2500_ReadByte@loop_b,w
  9265  1C12  1803               	btfsc	3,0
  9266  1C13  0008               	return
  9267                           
  9268                           ;CC2500_B1.c: 245: RC1 = 1;
  9269  1C14  0020               	movlb	0	; select bank0
  9270  1C15  148E               	bsf	14,1	;volatile
  9271                           
  9272                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9273  1C16  1003               	clrc
  9274  1C17  0021               	movlb	1	; select bank1
  9275  1C18  0DED               	rlf	_SPI0Buffer^(0+128),f
  9276                           
  9277                           ;CC2500_B1.c: 247: if (RC2 == 1)
  9278  1C19  0020               	movlb	0	; select bank0
  9279  1C1A  1D0E               	btfss	14,2	;volatile
  9280  1C1B  2C1F               	goto	l7207
  9281                           
  9282                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9283  1C1C  0021               	movlb	1	; select bank1
  9284  1C1D  146D               	bsf	_SPI0Buffer^(0+128),0
  9285  1C1E  2C24               	goto	l7209
  9286  1C1F                     l7207:	
  9287                           
  9288                           ;CC2500_B1.c: 249: else
  9289                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9290  1C1F  30FE               	movlw	254
  9291  1C20  00F2               	movwf	??_CC2500_ReadByte
  9292  1C21  0872               	movf	??_CC2500_ReadByte,w
  9293  1C22  0021               	movlb	1	; select bank1
  9294  1C23  05ED               	andwf	_SPI0Buffer^(0+128),f
  9295  1C24                     l7209:	
  9296                           
  9297                           ;CC2500_B1.c: 251: RC1 = 0;
  9298  1C24  0020               	movlb	0	; select bank0
  9299  1C25  108E               	bcf	14,1	;volatile
  9300  1C26  3001               	movlw	1
  9301  1C27  00F2               	movwf	??_CC2500_ReadByte
  9302  1C28  0872               	movf	??_CC2500_ReadByte,w
  9303  1C29  07F3               	addwf	CC2500_ReadByte@loop_b,f
  9304  1C2A  2C10               	goto	L3
  9305  1C2B                     __end_of_CC2500_ReadByte:	
  9306                           
  9307                           	psect	text42
  9308  1A91                     __ptext42:	
  9309 ;; *************** function _CC2500_PowerOnInitial *****************
  9310 ;; Defined at:
  9311 ;;		line 126 in file "../src/CC2500_B1.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;		None
  9314 ;; Auto vars:     Size  Location     Type
  9315 ;;		None
  9316 ;; Return value:  Size  Location     Type
  9317 ;;		None               void
  9318 ;; Registers used:
  9319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9320 ;; Tracked objects:
  9321 ;;		On entry : 0/0
  9322 ;;		On exit  : 0/0
  9323 ;;		Unchanged: 0/0
  9324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;Total ram usage:        0 bytes
  9330 ;; Hardware stack levels used:    1
  9331 ;; Hardware stack levels required when called:    6
  9332 ;; This function calls:
  9333 ;;		_CC2500_ClearRXFIFO
  9334 ;;		_CC2500_ClearTXFIFO
  9335 ;;		_CC2500_FrequencyCabr
  9336 ;;		_CC2500_InitPATable
  9337 ;;		_CC2500_InitSetREG
  9338 ;;		_CC2500_PowerRST
  9339 ;;		_CC2500_SIDLEMode
  9340 ;; This function is called by:
  9341 ;;		_main
  9342 ;;		_setRF_Main
  9343 ;; This function uses a non-reentrant model
  9344 ;;
  9345                           
  9346                           
  9347                           ;psect for function _CC2500_PowerOnInitial
  9348  1A91                     _CC2500_PowerOnInitial:	
  9349                           
  9350                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9351                           
  9352                           ;incstack = 0
  9353                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9354  1A91  3192  221E  319A   	fcall	_CC2500_PowerRST
  9355                           
  9356                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9357  1A94  319E  2612  319A   	fcall	_CC2500_InitSetREG
  9358                           
  9359                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9360  1A97  319C  2465  319A   	fcall	_CC2500_InitPATable
  9361                           
  9362                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9363  1A9A  31A7  27DB  319A   	fcall	_CC2500_ClearTXFIFO
  9364                           
  9365                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9366  1A9D  31A7  27D7  319A   	fcall	_CC2500_ClearRXFIFO
  9367                           
  9368                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9369  1AA0  3198  208C  319A   	fcall	_CC2500_FrequencyCabr
  9370                           
  9371                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9372  1AA3  31A7  27DF         	fcall	_CC2500_SIDLEMode
  9373  1AA5  0008               	return
  9374  1AA6                     __end_of_CC2500_PowerOnInitial:	
  9375                           
  9376                           	psect	text43
  9377  27DF                     __ptext43:	
  9378 ;; *************** function _CC2500_SIDLEMode *****************
  9379 ;; Defined at:
  9380 ;;		line 216 in file "../src/CC2500_B1.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;		None
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;		None
  9385 ;; Return value:  Size  Location     Type
  9386 ;;		None               void
  9387 ;; Registers used:
  9388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9398 ;;Total ram usage:        0 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:    5
  9401 ;; This function calls:
  9402 ;;		_CC2500_WriteCommand
  9403 ;; This function is called by:
  9404 ;;		_CC2500_PowerOnInitial
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           
  9409                           ;psect for function _CC2500_SIDLEMode
  9410  27DF                     _CC2500_SIDLEMode:	
  9411                           
  9412                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9413                           
  9414                           ;incstack = 0
  9415                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9416  27DF  3036               	movlw	54
  9417  27E0  319B  2370         	fcall	_CC2500_WriteCommand
  9418  27E2  0008               	return
  9419  27E3                     __end_of_CC2500_SIDLEMode:	
  9420                           
  9421                           	psect	text44
  9422  121E                     __ptext44:	
  9423 ;; *************** function _CC2500_PowerRST *****************
  9424 ;; Defined at:
  9425 ;;		line 139 in file "../src/CC2500_B1.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;		None
  9428 ;; Auto vars:     Size  Location     Type
  9429 ;;		None
  9430 ;; Return value:  Size  Location     Type
  9431 ;;		None               void
  9432 ;; Registers used:
  9433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9434 ;; Tracked objects:
  9435 ;;		On entry : 0/0
  9436 ;;		On exit  : 0/0
  9437 ;;		Unchanged: 0/0
  9438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;Total ram usage:        1 bytes
  9444 ;; Hardware stack levels used:    1
  9445 ;; Hardware stack levels required when called:    4
  9446 ;; This function calls:
  9447 ;;		_CC2500_WriteByte
  9448 ;;		_DelayTime_1us
  9449 ;;		_RF_Timeout_Counter
  9450 ;;		_setRF_TimeoutCleared
  9451 ;; This function is called by:
  9452 ;;		_CC2500_PowerOnInitial
  9453 ;; This function uses a non-reentrant model
  9454 ;;
  9455                           
  9456                           
  9457                           ;psect for function _CC2500_PowerRST
  9458  121E                     _CC2500_PowerRST:	
  9459                           
  9460                           ;CC2500_B1.c: 140: RC1 = 0;
  9461                           
  9462                           ;incstack = 0
  9463                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9464  121E  0020               	movlb	0	; select bank0
  9465  121F  108E               	bcf	14,1	;volatile
  9466                           
  9467                           ;CC2500_B1.c: 141: RC0 = 0;
  9468  1220  100E               	bcf	14,0	;volatile
  9469                           
  9470                           ;CC2500_B1.c: 142: RC4 = 1;
  9471  1221  160E               	bsf	14,4	;volatile
  9472                           
  9473                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9474  1222  300A               	movlw	10
  9475  1223  00F2               	movwf	DelayTime_1us@count
  9476  1224  3000               	movlw	0
  9477  1225  00F3               	movwf	DelayTime_1us@count+1
  9478  1226  319D  2571  3192   	fcall	_DelayTime_1us
  9479                           
  9480                           ;CC2500_B1.c: 144: RC4 = 0;
  9481  1229  0020               	movlb	0	; select bank0
  9482  122A  120E               	bcf	14,4	;volatile
  9483                           
  9484                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9485  122B  300A               	movlw	10
  9486  122C  00F2               	movwf	DelayTime_1us@count
  9487  122D  3000               	movlw	0
  9488  122E  00F3               	movwf	DelayTime_1us@count+1
  9489  122F  319D  2571  3192   	fcall	_DelayTime_1us
  9490                           
  9491                           ;CC2500_B1.c: 146: RC4 = 1;
  9492  1232  0020               	movlb	0	; select bank0
  9493  1233  160E               	bsf	14,4	;volatile
  9494                           
  9495                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9496  1234  3028               	movlw	40
  9497  1235  00F2               	movwf	DelayTime_1us@count
  9498  1236  3000               	movlw	0
  9499  1237  00F3               	movwf	DelayTime_1us@count+1
  9500  1238  319D  2571  3192   	fcall	_DelayTime_1us
  9501                           
  9502                           ;CC2500_B1.c: 148: RC4 = 0;
  9503  123B  0020               	movlb	0	; select bank0
  9504  123C  120E               	bcf	14,4	;volatile
  9505                           
  9506                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9507  123D  3030               	movlw	48
  9508  123E  00F8               	movwf	??_CC2500_PowerRST
  9509  123F  0878               	movf	??_CC2500_PowerRST,w
  9510  1240  0021               	movlb	1	; select bank1
  9511  1241  00ED               	movwf	_SPI0Buffer^(0+128)
  9512                           
  9513                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9514  1242  2A46               	goto	l9985
  9515  1243                     l9983:	
  9516                           
  9517                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9518  1243  319A  227C  3192   	fcall	_RF_Timeout_Counter
  9519  1246                     l9985:	
  9520  1246  0020               	movlb	0	; select bank0
  9521  1247  1D0E               	btfss	14,2	;volatile
  9522  1248  2A4C               	goto	l9989
  9523  1249  0021               	movlb	1	; select bank1
  9524  124A  1F41               	btfss	(_RF1^(0+128)+1),6
  9525  124B  2A43               	goto	l9983
  9526  124C                     l9989:	
  9527                           
  9528                           ;CC2500_B1.c: 152: };
  9529                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9530  124C  31A7  27D3  3192   	fcall	_setRF_TimeoutCleared
  9531                           
  9532                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9533  124F  319B  2340  3192   	fcall	_CC2500_WriteByte
  9534                           
  9535                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9536  1252  2A56               	goto	l9995
  9537  1253                     l9993:	
  9538                           
  9539                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9540  1253  319A  227C  3192   	fcall	_RF_Timeout_Counter
  9541  1256                     l9995:	
  9542  1256  0020               	movlb	0	; select bank0
  9543  1257  1D0E               	btfss	14,2	;volatile
  9544  1258  2A5C               	goto	l9999
  9545  1259  0021               	movlb	1	; select bank1
  9546  125A  1F41               	btfss	(_RF1^(0+128)+1),6
  9547  125B  2A53               	goto	l9993
  9548  125C                     l9999:	
  9549                           
  9550                           ;CC2500_B1.c: 157: };
  9551                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9552  125C  31A7  27D3         	fcall	_setRF_TimeoutCleared
  9553                           
  9554                           ;CC2500_B1.c: 159: RC0 = 0;
  9555  125E  0020               	movlb	0	; select bank0
  9556  125F  100E               	bcf	14,0	;volatile
  9557                           
  9558                           ;CC2500_B1.c: 160: RC4 = 1;
  9559  1260  160E               	bsf	14,4	;volatile
  9560  1261  0008               	return
  9561  1262                     __end_of_CC2500_PowerRST:	
  9562                           
  9563                           	psect	text45
  9564  1E12                     __ptext45:	
  9565 ;; *************** function _CC2500_InitSetREG *****************
  9566 ;; Defined at:
  9567 ;;		line 166 in file "../src/CC2500_B1.c"
  9568 ;; Parameters:    Size  Location     Type
  9569 ;;		None
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9572 ;;  temp2           1    1[BANK0 ] unsigned char 
  9573 ;;  temp1           1    0[BANK0 ] unsigned char 
  9574 ;; Return value:  Size  Location     Type
  9575 ;;		None               void
  9576 ;; Registers used:
  9577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/0
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;Total ram usage:        4 bytes
  9588 ;; Hardware stack levels used:    1
  9589 ;; Hardware stack levels required when called:    5
  9590 ;; This function calls:
  9591 ;;		_CC2500_WriteREG
  9592 ;; This function is called by:
  9593 ;;		_CC2500_PowerOnInitial
  9594 ;; This function uses a non-reentrant model
  9595 ;;
  9596                           
  9597                           
  9598                           ;psect for function _CC2500_InitSetREG
  9599  1E12                     _CC2500_InitSetREG:	
  9600                           
  9601                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9602                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9603                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9604                           
  9605                           ;incstack = 0
  9606                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9607  1E12  0020               	movlb	0	; select bank0
  9608  1E13  01A2               	clrf	CC2500_InitSetREG@loop_c
  9609  1E14                     L4:	
  9610  1E14  302F               	movlw	47
  9611  1E15  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9612  1E16  1803               	btfsc	3,0
  9613  1E17  0008               	return
  9614                           
  9615                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9616  1E18  0822               	movf	CC2500_InitSetREG@loop_c,w
  9617  1E19  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9618  1E1A  0084               	movwf	4
  9619  1E1B  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9620  1E1C  1803               	skipnc
  9621  1E1D  3E01               	addlw	1
  9622  1E1E  0085               	movwf	5
  9623  1E1F  0800               	movf	0,w	;code access
  9624  1E20  00F7               	movwf	??_CC2500_InitSetREG
  9625  1E21  0877               	movf	??_CC2500_InitSetREG,w
  9626  1E22  00A0               	movwf	CC2500_InitSetREG@temp1
  9627                           
  9628                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9629  1E23  0822               	movf	CC2500_InitSetREG@loop_c,w
  9630  1E24  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9631  1E25  0084               	movwf	4
  9632  1E26  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9633  1E27  1803               	skipnc
  9634  1E28  3E01               	addlw	1
  9635  1E29  0085               	movwf	5
  9636  1E2A  0800               	movf	0,w	;code access
  9637  1E2B  00F7               	movwf	??_CC2500_InitSetREG
  9638  1E2C  0877               	movf	??_CC2500_InitSetREG,w
  9639  1E2D  00A1               	movwf	CC2500_InitSetREG@temp2
  9640                           
  9641                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9642  1E2E  0821               	movf	CC2500_InitSetREG@temp2,w
  9643  1E2F  00F7               	movwf	??_CC2500_InitSetREG
  9644  1E30  0877               	movf	??_CC2500_InitSetREG,w
  9645  1E31  00F4               	movwf	CC2500_WriteREG@value
  9646  1E32  0820               	movf	CC2500_InitSetREG@temp1,w
  9647  1E33  319D  2507  319E   	fcall	_CC2500_WriteREG
  9648  1E36  3001               	movlw	1
  9649  1E37  00F7               	movwf	??_CC2500_InitSetREG
  9650  1E38  0877               	movf	??_CC2500_InitSetREG,w
  9651  1E39  0020               	movlb	0	; select bank0
  9652  1E3A  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9653  1E3B  2E14               	goto	L4
  9654  1E3C                     __end_of_CC2500_InitSetREG:	
  9655                           
  9656                           	psect	text46
  9657  1C65                     __ptext46:	
  9658 ;; *************** function _CC2500_InitPATable *****************
  9659 ;; Defined at:
  9660 ;;		line 181 in file "../src/CC2500_B1.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;		None
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  loop_d          1    9[COMMON] unsigned char 
  9665 ;;  temp            1    8[COMMON] unsigned char 
  9666 ;; Return value:  Size  Location     Type
  9667 ;;		None               void
  9668 ;; Registers used:
  9669 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9670 ;; Tracked objects:
  9671 ;;		On entry : 0/0
  9672 ;;		On exit  : 0/0
  9673 ;;		Unchanged: 0/0
  9674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;Total ram usage:        3 bytes
  9680 ;; Hardware stack levels used:    1
  9681 ;; Hardware stack levels required when called:    5
  9682 ;; This function calls:
  9683 ;;		_CC2500_WriteREG
  9684 ;; This function is called by:
  9685 ;;		_CC2500_PowerOnInitial
  9686 ;; This function uses a non-reentrant model
  9687 ;;
  9688                           
  9689                           
  9690                           ;psect for function _CC2500_InitPATable
  9691  1C65                     _CC2500_InitPATable:	
  9692                           
  9693                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9694                           ;CC2500_B1.c: 183: unsigned char temp;
  9695                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9696                           
  9697                           ;incstack = 0
  9698                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9699  1C65  01F9               	clrf	CC2500_InitPATable@loop_d
  9700  1C66                     L5:	
  9701  1C66  3008               	movlw	8
  9702  1C67  0279               	subwf	CC2500_InitPATable@loop_d,w
  9703  1C68  1803               	btfsc	3,0
  9704  1C69  0008               	return
  9705                           
  9706                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9707  1C6A  0879               	movf	CC2500_InitPATable@loop_d,w
  9708  1C6B  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9709  1C6C  0084               	movwf	4
  9710  1C6D  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9711  1C6E  1803               	skipnc
  9712  1C6F  3E01               	addlw	1
  9713  1C70  0085               	movwf	5
  9714  1C71  0800               	movf	0,w	;code access
  9715  1C72  00F7               	movwf	??_CC2500_InitPATable
  9716  1C73  0877               	movf	??_CC2500_InitPATable,w
  9717  1C74  00F8               	movwf	CC2500_InitPATable@temp
  9718                           
  9719                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9720  1C75  0878               	movf	CC2500_InitPATable@temp,w
  9721  1C76  00F7               	movwf	??_CC2500_InitPATable
  9722  1C77  0877               	movf	??_CC2500_InitPATable,w
  9723  1C78  00F4               	movwf	CC2500_WriteREG@value
  9724  1C79  303E               	movlw	62
  9725  1C7A  319D  2507  319C   	fcall	_CC2500_WriteREG
  9726  1C7D  3001               	movlw	1
  9727  1C7E  00F7               	movwf	??_CC2500_InitPATable
  9728  1C7F  0877               	movf	??_CC2500_InitPATable,w
  9729  1C80  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9730  1C81  2C66               	goto	L5
  9731  1C82                     __end_of_CC2500_InitPATable:	
  9732                           
  9733                           	psect	text47
  9734  1D07                     __ptext47:	
  9735 ;; *************** function _CC2500_WriteREG *****************
  9736 ;; Defined at:
  9737 ;;		line 258 in file "../src/CC2500_B1.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;  w_addr          1    wreg     unsigned char 
  9740 ;;  value           1    4[COMMON] unsigned char 
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;  w_addr          1    6[COMMON] unsigned char 
  9743 ;; Return value:  Size  Location     Type
  9744 ;;		None               void
  9745 ;; Registers used:
  9746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9752 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;Total ram usage:        3 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    4
  9759 ;; This function calls:
  9760 ;;		_CC2500_WriteByte
  9761 ;;		_RF_Timeout_Counter
  9762 ;;		_setRF_TimeoutCleared
  9763 ;; This function is called by:
  9764 ;;		_CC2500_InitSetREG
  9765 ;;		_CC2500_InitPATable
  9766 ;; This function uses a non-reentrant model
  9767 ;;
  9768                           
  9769                           
  9770                           ;psect for function _CC2500_WriteREG
  9771  1D07                     _CC2500_WriteREG:	
  9772                           
  9773                           ;incstack = 0
  9774                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9775                           ;CC2500_WriteREG@w_addr stored from wreg
  9776  1D07  00F6               	movwf	CC2500_WriteREG@w_addr
  9777                           
  9778                           ;CC2500_B1.c: 259: RC4 = 0;
  9779  1D08  0020               	movlb	0	; select bank0
  9780  1D09  120E               	bcf	14,4	;volatile
  9781                           
  9782                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9783  1D0A  0876               	movf	CC2500_WriteREG@w_addr,w
  9784  1D0B  00F5               	movwf	??_CC2500_WriteREG
  9785  1D0C  0875               	movf	??_CC2500_WriteREG,w
  9786  1D0D  0021               	movlb	1	; select bank1
  9787  1D0E  00ED               	movwf	_SPI0Buffer^(0+128)
  9788                           
  9789                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9790  1D0F  2D13               	goto	l9875
  9791  1D10                     l9873:	
  9792                           
  9793                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9794  1D10  319A  227C  319D   	fcall	_RF_Timeout_Counter
  9795  1D13                     l9875:	
  9796  1D13  0020               	movlb	0	; select bank0
  9797  1D14  1D0E               	btfss	14,2	;volatile
  9798  1D15  2D19               	goto	l9879
  9799  1D16  0021               	movlb	1	; select bank1
  9800  1D17  1F41               	btfss	(_RF1^(0+128)+1),6
  9801  1D18  2D10               	goto	l9873
  9802  1D19                     l9879:	
  9803                           
  9804                           ;CC2500_B1.c: 263: };
  9805                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9806  1D19  31A7  27D3  319D   	fcall	_setRF_TimeoutCleared
  9807                           
  9808                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9809  1D1C  319B  2340  319D   	fcall	_CC2500_WriteByte
  9810                           
  9811                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9812  1D1F  0874               	movf	CC2500_WriteREG@value,w
  9813  1D20  00F5               	movwf	??_CC2500_WriteREG
  9814  1D21  0875               	movf	??_CC2500_WriteREG,w
  9815  1D22  0021               	movlb	1	; select bank1
  9816  1D23  00ED               	movwf	_SPI0Buffer^(0+128)
  9817                           
  9818                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9819  1D24  319B  2340         	fcall	_CC2500_WriteByte
  9820                           
  9821                           ;CC2500_B1.c: 269: RC4 = 1;
  9822  1D26  0020               	movlb	0	; select bank0
  9823  1D27  160E               	bsf	14,4	;volatile
  9824  1D28  0008               	return
  9825  1D29                     __end_of_CC2500_WriteREG:	
  9826                           
  9827                           	psect	text48
  9828  188C                     __ptext48:	
  9829 ;; *************** function _CC2500_FrequencyCabr *****************
  9830 ;; Defined at:
  9831 ;;		line 208 in file "../src/CC2500_B1.c"
  9832 ;; Parameters:    Size  Location     Type
  9833 ;;		None
  9834 ;; Auto vars:     Size  Location     Type
  9835 ;;		None
  9836 ;; Return value:  Size  Location     Type
  9837 ;;		None               void
  9838 ;; Registers used:
  9839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9840 ;; Tracked objects:
  9841 ;;		On entry : 0/0
  9842 ;;		On exit  : 0/0
  9843 ;;		Unchanged: 0/0
  9844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;Total ram usage:        0 bytes
  9850 ;; Hardware stack levels used:    1
  9851 ;; Hardware stack levels required when called:    5
  9852 ;; This function calls:
  9853 ;;		_CC2500_WriteCommand
  9854 ;;		_DelayTime_1us
  9855 ;; This function is called by:
  9856 ;;		_CC2500_PowerOnInitial
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           
  9861                           ;psect for function _CC2500_FrequencyCabr
  9862  188C                     _CC2500_FrequencyCabr:	
  9863                           
  9864                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9865                           
  9866                           ;incstack = 0
  9867                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9868  188C  3033               	movlw	51
  9869  188D  319B  2370  3198   	fcall	_CC2500_WriteCommand
  9870                           
  9871                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9872  1890  30E8               	movlw	232
  9873  1891  00F2               	movwf	DelayTime_1us@count
  9874  1892  3003               	movlw	3
  9875  1893  00F3               	movwf	DelayTime_1us@count+1
  9876  1894  319D  2571         	fcall	_DelayTime_1us
  9877  1896  0008               	return
  9878  1897                     __end_of_CC2500_FrequencyCabr:	
  9879                           
  9880                           	psect	text49
  9881  1D71                     __ptext49:	
  9882 ;; *************** function _DelayTime_1us *****************
  9883 ;; Defined at:
  9884 ;;		line 327 in file "../src/CC2500_B1.c"
  9885 ;; Parameters:    Size  Location     Type
  9886 ;;  count           2    2[COMMON] int 
  9887 ;; Auto vars:     Size  Location     Type
  9888 ;;  j               2    6[COMMON] unsigned int 
  9889 ;;  i               2    4[COMMON] unsigned int 
  9890 ;; Return value:  Size  Location     Type
  9891 ;;		None               void
  9892 ;; Registers used:
  9893 ;;		wreg, status,2
  9894 ;; Tracked objects:
  9895 ;;		On entry : 0/0
  9896 ;;		On exit  : 0/0
  9897 ;;		Unchanged: 0/0
  9898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9899 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;Total ram usage:        6 bytes
  9904 ;; Hardware stack levels used:    1
  9905 ;; Hardware stack levels required when called:    3
  9906 ;; This function calls:
  9907 ;;		Nothing
  9908 ;; This function is called by:
  9909 ;;		_CC2500_PowerRST
  9910 ;;		_CC2500_FrequencyCabr
  9911 ;; This function uses a non-reentrant model
  9912 ;;
  9913                           
  9914                           
  9915                           ;psect for function _DelayTime_1us
  9916  1D71                     _DelayTime_1us:	
  9917                           
  9918                           ;CC2500_B1.c: 328: unsigned int i, j;
  9919                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9920                           
  9921                           ;incstack = 0
  9922                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9923  1D71  3001               	movlw	1
  9924  1D72  00F4               	movwf	DelayTime_1us@i
  9925  1D73  3000               	movlw	0
  9926  1D74  00F5               	movwf	DelayTime_1us@i+1
  9927  1D75                     l375:	
  9928  1D75  0873               	movf	DelayTime_1us@count+1,w
  9929  1D76  0275               	subwf	DelayTime_1us@i+1,w
  9930  1D77  1D03               	skipz
  9931  1D78  2D7B               	goto	u6505
  9932  1D79  0872               	movf	DelayTime_1us@count,w
  9933  1D7A  0274               	subwf	DelayTime_1us@i,w
  9934  1D7B                     u6505:	
  9935  1D7B  1803               	btfsc	3,0
  9936  1D7C  0008               	return
  9937                           
  9938                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9939  1D7D  01F6               	clrf	DelayTime_1us@j
  9940  1D7E  01F7               	clrf	DelayTime_1us@j+1
  9941  1D7F  3000               	movlw	0
  9942  1D80  0277               	subwf	DelayTime_1us@j+1,w
  9943  1D81  3002               	movlw	2
  9944  1D82  1903               	skipnz
  9945  1D83  0276               	subwf	DelayTime_1us@j,w
  9946  1D84  1803               	btfsc	3,0
  9947  1D85  2D91               	goto	l7223
  9948  1D86                     l7221:	
  9949  1D86  3001               	movlw	1
  9950  1D87  07F6               	addwf	DelayTime_1us@j,f
  9951  1D88  3000               	movlw	0
  9952  1D89  3DF7               	addwfc	DelayTime_1us@j+1,f
  9953  1D8A  3000               	movlw	0
  9954  1D8B  0277               	subwf	DelayTime_1us@j+1,w
  9955  1D8C  3002               	movlw	2
  9956  1D8D  1903               	skipnz
  9957  1D8E  0276               	subwf	DelayTime_1us@j,w
  9958  1D8F  1C03               	skipc
  9959  1D90  2D86               	goto	l7221
  9960  1D91                     l7223:	
  9961  1D91  3001               	movlw	1
  9962  1D92  07F4               	addwf	DelayTime_1us@i,f
  9963  1D93  3000               	movlw	0
  9964  1D94  3DF5               	addwfc	DelayTime_1us@i+1,f
  9965  1D95  2D75               	goto	l375
  9966  1D96                     __end_of_DelayTime_1us:	
  9967                           
  9968                           	psect	text50
  9969  27DB                     __ptext50:	
  9970 ;; *************** function _CC2500_ClearTXFIFO *****************
  9971 ;; Defined at:
  9972 ;;		line 194 in file "../src/CC2500_B1.c"
  9973 ;; Parameters:    Size  Location     Type
  9974 ;;		None
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;		None
  9977 ;; Return value:  Size  Location     Type
  9978 ;;		None               void
  9979 ;; Registers used:
  9980 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;Total ram usage:        0 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    5
  9993 ;; This function calls:
  9994 ;;		_CC2500_WriteCommand
  9995 ;; This function is called by:
  9996 ;;		_CC2500_PowerOnInitial
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           
 10001                           ;psect for function _CC2500_ClearTXFIFO
 10002  27DB                     _CC2500_ClearTXFIFO:	
 10003                           
 10004                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
 10005                           
 10006                           ;incstack = 0
 10007                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10008  27DB  303B               	movlw	59
 10009  27DC  319B  2370         	fcall	_CC2500_WriteCommand
 10010  27DE  0008               	return
 10011  27DF                     __end_of_CC2500_ClearTXFIFO:	
 10012                           
 10013                           	psect	text51
 10014  27D7                     __ptext51:	
 10015 ;; *************** function _CC2500_ClearRXFIFO *****************
 10016 ;; Defined at:
 10017 ;;		line 201 in file "../src/CC2500_B1.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;		None
 10020 ;; Auto vars:     Size  Location     Type
 10021 ;;		None
 10022 ;; Return value:  Size  Location     Type
 10023 ;;		None               void
 10024 ;; Registers used:
 10025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10026 ;; Tracked objects:
 10027 ;;		On entry : 0/0
 10028 ;;		On exit  : 0/0
 10029 ;;		Unchanged: 0/0
 10030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;Total ram usage:        0 bytes
 10036 ;; Hardware stack levels used:    1
 10037 ;; Hardware stack levels required when called:    5
 10038 ;; This function calls:
 10039 ;;		_CC2500_WriteCommand
 10040 ;; This function is called by:
 10041 ;;		_CC2500_PowerOnInitial
 10042 ;; This function uses a non-reentrant model
 10043 ;;
 10044                           
 10045                           
 10046                           ;psect for function _CC2500_ClearRXFIFO
 10047  27D7                     _CC2500_ClearRXFIFO:	
 10048                           
 10049                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
 10050                           
 10051                           ;incstack = 0
 10052                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10053  27D7  303A               	movlw	58
 10054  27D8  319B  2370         	fcall	_CC2500_WriteCommand
 10055  27DA  0008               	return
 10056  27DB                     __end_of_CC2500_ClearRXFIFO:	
 10057                           
 10058                           	psect	text52
 10059  1B70                     __ptext52:	
 10060 ;; *************** function _CC2500_WriteCommand *****************
 10061 ;; Defined at:
 10062 ;;		line 292 in file "../src/CC2500_B1.c"
 10063 ;; Parameters:    Size  Location     Type
 10064 ;;  command         1    wreg     unsigned char 
 10065 ;; Auto vars:     Size  Location     Type
 10066 ;;  command         1    5[COMMON] unsigned char 
 10067 ;; Return value:  Size  Location     Type
 10068 ;;		None               void
 10069 ;; Registers used:
 10070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;Total ram usage:        2 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; Hardware stack levels required when called:    4
 10083 ;; This function calls:
 10084 ;;		_CC2500_WriteByte
 10085 ;;		_RF_Timeout_Counter
 10086 ;;		_setRF_TimeoutCleared
 10087 ;; This function is called by:
 10088 ;;		_CC2500_TxData
 10089 ;;		_CC2500_RxData
 10090 ;;		_CC2500_ClearTXFIFO
 10091 ;;		_CC2500_ClearRXFIFO
 10092 ;;		_CC2500_FrequencyCabr
 10093 ;;		_CC2500_SIDLEMode
 10094 ;;		_setRF_Main
 10095 ;; This function uses a non-reentrant model
 10096 ;;
 10097                           
 10098                           
 10099                           ;psect for function _CC2500_WriteCommand
 10100  1B70                     _CC2500_WriteCommand:	
 10101                           
 10102                           ;incstack = 0
 10103                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10104                           ;CC2500_WriteCommand@command stored from wreg
 10105  1B70  00F5               	movwf	CC2500_WriteCommand@command
 10106                           
 10107                           ;CC2500_B1.c: 293: RC4 = 0;
 10108  1B71  0020               	movlb	0	; select bank0
 10109  1B72  120E               	bcf	14,4	;volatile
 10110                           
 10111                           ;CC2500_B1.c: 294: SPI0Buffer = command;
 10112  1B73  0875               	movf	CC2500_WriteCommand@command,w
 10113  1B74  00F4               	movwf	??_CC2500_WriteCommand
 10114  1B75  0874               	movf	??_CC2500_WriteCommand,w
 10115  1B76  0021               	movlb	1	; select bank1
 10116  1B77  00ED               	movwf	_SPI0Buffer^(0+128)
 10117                           
 10118                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
 10119  1B78  2B7C               	goto	l9859
 10120  1B79                     l9857:	
 10121                           
 10122                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
 10123  1B79  319A  227C  319B   	fcall	_RF_Timeout_Counter
 10124  1B7C                     l9859:	
 10125  1B7C  0020               	movlb	0	; select bank0
 10126  1B7D  1D0E               	btfss	14,2	;volatile
 10127  1B7E  2B82               	goto	l9863
 10128  1B7F  0021               	movlb	1	; select bank1
 10129  1B80  1F41               	btfss	(_RF1^(0+128)+1),6
 10130  1B81  2B79               	goto	l9857
 10131  1B82                     l9863:	
 10132                           
 10133                           ;CC2500_B1.c: 298: };
 10134                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10135  1B82  31A7  27D3  319B   	fcall	_setRF_TimeoutCleared
 10136                           
 10137                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10138  1B85  319B  2340         	fcall	_CC2500_WriteByte
 10139                           
 10140                           ;CC2500_B1.c: 302: RC4 = 1;
 10141  1B87  0020               	movlb	0	; select bank0
 10142  1B88  160E               	bsf	14,4	;volatile
 10143  1B89  0008               	return
 10144  1B8A                     __end_of_CC2500_WriteCommand:	
 10145                           
 10146                           	psect	text53
 10147  27D3                     __ptext53:	
 10148 ;; *************** function _setRF_TimeoutCleared *****************
 10149 ;; Defined at:
 10150 ;;		line 150 in file "../src/RF_Control_B1.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;		None
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;		None
 10155 ;; Return value:  Size  Location     Type
 10156 ;;		None               void
 10157 ;; Registers used:
 10158 ;;		status,2
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;Total ram usage:        0 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; Hardware stack levels required when called:    3
 10171 ;; This function calls:
 10172 ;;		Nothing
 10173 ;; This function is called by:
 10174 ;;		_CC2500_TxData
 10175 ;;		_CC2500_RxData
 10176 ;;		_CC2500_PowerRST
 10177 ;;		_CC2500_WriteREG
 10178 ;;		_CC2500_WriteCommand
 10179 ;;		_CC2500_ReadStatus
 10180 ;;		_CC2500_ReadREG
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           
 10185                           ;psect for function _setRF_TimeoutCleared
 10186  27D3                     _setRF_TimeoutCleared:	
 10187                           
 10188                           ;RF_Control_B1.c: 151: RF1.TimeoutCount = 0;
 10189                           
 10190                           ;incstack = 0
 10191                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10192  27D3  0021               	movlb	1	; select bank1
 10193  27D4  01CD               	clrf	(_RF1^(0+128)+13)
 10194  27D5  01CE               	clrf	((_RF1+1)^(0+128)+13)
 10195  27D6  0008               	return
 10196  27D7                     __end_of_setRF_TimeoutCleared:	
 10197                           
 10198                           	psect	text54
 10199  1A7C                     __ptext54:	
 10200 ;; *************** function _RF_Timeout_Counter *****************
 10201 ;; Defined at:
 10202 ;;		line 142 in file "../src/RF_Control_B1.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;		None
 10205 ;; Auto vars:     Size  Location     Type
 10206 ;;		None
 10207 ;; Return value:  Size  Location     Type
 10208 ;;		None               void
 10209 ;; Registers used:
 10210 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10211 ;; Tracked objects:
 10212 ;;		On entry : 0/0
 10213 ;;		On exit  : 0/0
 10214 ;;		Unchanged: 0/0
 10215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;Total ram usage:        0 bytes
 10221 ;; Hardware stack levels used:    1
 10222 ;; Hardware stack levels required when called:    3
 10223 ;; This function calls:
 10224 ;;		Nothing
 10225 ;; This function is called by:
 10226 ;;		_CC2500_TxData
 10227 ;;		_CC2500_RxData
 10228 ;;		_CC2500_PowerRST
 10229 ;;		_CC2500_WriteREG
 10230 ;;		_CC2500_WriteCommand
 10231 ;;		_CC2500_ReadStatus
 10232 ;;		_CC2500_ReadREG
 10233 ;; This function uses a non-reentrant model
 10234 ;;
 10235                           
 10236                           
 10237                           ;psect for function _RF_Timeout_Counter
 10238  1A7C                     _RF_Timeout_Counter:	
 10239                           
 10240                           ;RF_Control_B1.c: 143: RF1.TimeoutCount++;
 10241                           
 10242                           ;incstack = 0
 10243                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10244  1A7C  3001               	movlw	1
 10245  1A7D  0021               	movlb	1	; select bank1
 10246  1A7E  07CD               	addwf	(_RF1^(0+128)+13),f
 10247  1A7F  3000               	movlw	0
 10248  1A80  3DCE               	addwfc	((_RF1+1)^(0+128)+13),f
 10249                           
 10250                           ;RF_Control_B1.c: 144: if (RF1.TimeoutCount == 25000) {
 10251  1A81  300D               	movlw	13
 10252  1A82  3EC0               	addlw	_RF1& (0+255)
 10253  1A83  0086               	movwf	6
 10254  1A84  0187               	clrf	7
 10255  1A85  3F40               	moviw [0]fsr1
 10256  1A86  3AA8               	xorlw	168
 10257  1A87  1D03               	skipz
 10258  1A88  2A8B               	goto	u10585
 10259  1A89  3F41               	moviw [1]fsr1
 10260  1A8A  3A61               	xorlw	97
 10261  1A8B                     u10585:	
 10262  1A8B  1D03               	skipz
 10263  1A8C  0008               	return
 10264                           
 10265                           ;RF_Control_B1.c: 145: RF1.TimeoutCount = 0;
 10266  1A8D  01CD               	clrf	(_RF1^(0+128)+13)
 10267  1A8E  01CE               	clrf	((_RF1+1)^(0+128)+13)
 10268                           
 10269                           ;RF_Control_B1.c: 146: RF1.Timeout = 1;
 10270  1A8F  1741               	bsf	(_RF1^(0+128)+1),6
 10271  1A90  0008               	return
 10272  1A91                     __end_of_RF_Timeout_Counter:	
 10273                           
 10274                           	psect	text55
 10275  1B40                     __ptext55:	
 10276 ;; *************** function _CC2500_WriteByte *****************
 10277 ;; Defined at:
 10278 ;;		line 226 in file "../src/CC2500_B1.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;		None
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;  loop_a          1    3[COMMON] unsigned char 
 10283 ;; Return value:  Size  Location     Type
 10284 ;;		None               void
 10285 ;; Registers used:
 10286 ;;		wreg, status,2, status,0
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;Total ram usage:        2 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    3
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		_CC2500_TxData
 10303 ;;		_CC2500_RxData
 10304 ;;		_CC2500_PowerRST
 10305 ;;		_CC2500_WriteREG
 10306 ;;		_CC2500_WriteCommand
 10307 ;;		_CC2500_ReadStatus
 10308 ;;		_CC2500_ReadREG
 10309 ;; This function uses a non-reentrant model
 10310 ;;
 10311                           
 10312                           
 10313                           ;psect for function _CC2500_WriteByte
 10314  1B40                     _CC2500_WriteByte:	
 10315                           
 10316                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10317                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10318                           
 10319                           ;incstack = 0
 10320                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10321  1B40  01F3               	clrf	CC2500_WriteByte@loop_a
 10322  1B41                     L6:	
 10323  1B41  3008               	movlw	8
 10324  1B42  0273               	subwf	CC2500_WriteByte@loop_a,w
 10325  1B43  1803               	btfsc	3,0
 10326  1B44  0008               	return
 10327                           
 10328                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10329  1B45  0021               	movlb	1	; select bank1
 10330  1B46  1FED               	btfss	_SPI0Buffer^(0+128),7
 10331  1B47  2B4B               	goto	l331
 10332                           
 10333                           ;CC2500_B1.c: 230: RC0 = 1;
 10334  1B48  0020               	movlb	0	; select bank0
 10335  1B49  140E               	bsf	14,0	;volatile
 10336  1B4A  2B4D               	goto	l332
 10337  1B4B                     l331:	
 10338                           
 10339                           ;CC2500_B1.c: 231: else
 10340                           ;CC2500_B1.c: 232: RC0 = 0;
 10341  1B4B  0020               	movlb	0	; select bank0
 10342  1B4C  100E               	bcf	14,0	;volatile
 10343  1B4D                     l332:	
 10344                           
 10345                           ;CC2500_B1.c: 233: RC1 = 1;
 10346  1B4D  148E               	bsf	14,1	;volatile
 10347                           
 10348                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10349  1B4E  1003               	clrc
 10350  1B4F  0021               	movlb	1	; select bank1
 10351  1B50  0DED               	rlf	_SPI0Buffer^(0+128),f
 10352                           
 10353                           ;CC2500_B1.c: 235: RC1 = 0;
 10354  1B51  0020               	movlb	0	; select bank0
 10355  1B52  108E               	bcf	14,1	;volatile
 10356  1B53  3001               	movlw	1
 10357  1B54  00F2               	movwf	??_CC2500_WriteByte
 10358  1B55  0872               	movf	??_CC2500_WriteByte,w
 10359  1B56  07F3               	addwf	CC2500_WriteByte@loop_a,f
 10360  1B57  2B41               	goto	L6
 10361  1B58                     __end_of_CC2500_WriteByte:	
 10362                           
 10363                           	psect	text56
 10364  27C3                     __ptext56:	
 10365 ;; *************** function _RF_Initialization *****************
 10366 ;; Defined at:
 10367 ;;		line 9 in file "../src/RF_Control_B1.c"
 10368 ;; Parameters:    Size  Location     Type
 10369 ;;		None
 10370 ;; Auto vars:     Size  Location     Type
 10371 ;;		None
 10372 ;; Return value:  Size  Location     Type
 10373 ;;		None               void
 10374 ;; Registers used:
 10375 ;;		wreg, status,2, status,0, pclath, cstack
 10376 ;; Tracked objects:
 10377 ;;		On entry : 0/0
 10378 ;;		On exit  : 0/0
 10379 ;;		Unchanged: 0/0
 10380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;Total ram usage:        0 bytes
 10386 ;; Hardware stack levels used:    1
 10387 ;; Hardware stack levels required when called:    4
 10388 ;; This function calls:
 10389 ;;		_setRF_Initialization
 10390 ;; This function is called by:
 10391 ;;		_main
 10392 ;; This function uses a non-reentrant model
 10393 ;;
 10394                           
 10395                           
 10396                           ;psect for function _RF_Initialization
 10397  27C3                     _RF_Initialization:	
 10398                           
 10399                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10400                           
 10401                           ;incstack = 0
 10402                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10403  27C3  3198  2061         	fcall	_setRF_Initialization
 10404  27C5  0008               	return
 10405  27C6                     __end_of_RF_Initialization:	
 10406                           
 10407                           	psect	text57
 10408  1861                     __ptext57:	
 10409 ;; *************** function _setRF_Initialization *****************
 10410 ;; Defined at:
 10411 ;;		line 17 in file "../src/RF_Control_B1.c"
 10412 ;; Parameters:    Size  Location     Type
 10413 ;;		None
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;		None
 10416 ;; Return value:  Size  Location     Type
 10417 ;;		None               void
 10418 ;; Registers used:
 10419 ;;		wreg
 10420 ;; Tracked objects:
 10421 ;;		On entry : 0/0
 10422 ;;		On exit  : 0/0
 10423 ;;		Unchanged: 0/0
 10424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;Total ram usage:        1 bytes
 10430 ;; Hardware stack levels used:    1
 10431 ;; Hardware stack levels required when called:    3
 10432 ;; This function calls:
 10433 ;;		Nothing
 10434 ;; This function is called by:
 10435 ;;		_RF_Initialization
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           
 10440                           ;psect for function _setRF_Initialization
 10441  1861                     _setRF_Initialization:	
 10442                           
 10443                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10444                           
 10445                           ;incstack = 0
 10446                           ; Regs used in _setRF_Initialization: [wreg]
 10447  1861  3015               	movlw	21
 10448  1862  00F2               	movwf	??_setRF_Initialization
 10449  1863  0872               	movf	??_setRF_Initialization,w
 10450  1864  0021               	movlb	1	; select bank1
 10451  1865  00EE               	movwf	_Tx_Length^(0+128)
 10452                           
 10453                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10454  1866  30C8               	movlw	200
 10455  1867  00C8               	movwf	(_RF1^(0+128)+8)
 10456  1868  3000               	movlw	0
 10457  1869  00C9               	movwf	(_RF1^(0+128)+9)
 10458  186A  0008               	return
 10459  186B                     __end_of_setRF_Initialization:	
 10460                           
 10461                           	psect	text58
 10462  1A02                     __ptext58:	
 10463 ;; *************** function _Mcu_Initialization *****************
 10464 ;; Defined at:
 10465 ;;		line 30 in file "../src/MCU_B1.c"
 10466 ;; Parameters:    Size  Location     Type
 10467 ;;		None
 10468 ;; Auto vars:     Size  Location     Type
 10469 ;;		None
 10470 ;; Return value:  Size  Location     Type
 10471 ;;		None               void
 10472 ;; Registers used:
 10473 ;;		wreg, status,2, status,0, pclath, cstack
 10474 ;; Tracked objects:
 10475 ;;		On entry : 0/0
 10476 ;;		On exit  : 0/0
 10477 ;;		Unchanged: 0/0
 10478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;Total ram usage:        0 bytes
 10484 ;; Hardware stack levels used:    1
 10485 ;; Hardware stack levels required when called:    4
 10486 ;; This function calls:
 10487 ;;		_ADC_Set
 10488 ;;		_Fosc_Set
 10489 ;;		_IOC_Set
 10490 ;;		_IO_Set
 10491 ;;		_TMR1_Set
 10492 ;;		_WDT_Set
 10493 ;; This function is called by:
 10494 ;;		_main
 10495 ;; This function uses a non-reentrant model
 10496 ;;
 10497                           
 10498                           
 10499                           ;psect for function _Mcu_Initialization
 10500  1A02                     _Mcu_Initialization:	
 10501                           
 10502                           ;MCU_B1.c: 32: Fosc_Set();
 10503                           
 10504                           ;incstack = 0
 10505                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10506  1A02  31A7  27CF  319A   	fcall	_Fosc_Set
 10507                           
 10508                           ;MCU_B1.c: 34: IO_Set();
 10509  1A05  319B  23F4  319A   	fcall	_IO_Set
 10510                           
 10511                           ;MCU_B1.c: 36: ;;
 10512                           ;MCU_B1.c: 38: TMR1_Set();
 10513  1A08  3198  20DE  319A   	fcall	_TMR1_Set
 10514                           
 10515                           ;MCU_B1.c: 40: ADC_Set();
 10516  1A0B  3198  2016  319A   	fcall	_ADC_Set
 10517                           
 10518                           ;MCU_B1.c: 42: ;;
 10519                           ;MCU_B1.c: 44: ;;
 10520                           ;MCU_B1.c: 46: IOC_Set();
 10521  1A0E  3198  2081  319A   	fcall	_IOC_Set
 10522                           
 10523                           ;MCU_B1.c: 48: ;;
 10524                           ;MCU_B1.c: 50: ;;
 10525                           ;MCU_B1.c: 52: WDT_Set();
 10526  1A11  3198  2057         	fcall	_WDT_Set
 10527  1A13  0008               	return
 10528  1A14                     __end_of_Mcu_Initialization:	
 10529                           
 10530                           	psect	text59
 10531  1857                     __ptext59:	
 10532 ;; *************** function _WDT_Set *****************
 10533 ;; Defined at:
 10534 ;;		line 1105 in file "../src/MCU_B1.c"
 10535 ;; Parameters:    Size  Location     Type
 10536 ;;		None
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;		None
 10539 ;; Return value:  Size  Location     Type
 10540 ;;		None               void
 10541 ;; Registers used:
 10542 ;;		wreg
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;Total ram usage:        1 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    3
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_Mcu_Initialization
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           
 10563                           ;psect for function _WDT_Set
 10564  1857                     _WDT_Set:	
 10565                           
 10566                           ;MCU_B1.c: 1112: WDTCON = 0b00010111;;
 10567                           
 10568                           ;incstack = 0
 10569                           ; Regs used in _WDT_Set: [wreg]
 10570  1857  3017               	movlw	23
 10571  1858  0021               	movlb	1	; select bank1
 10572  1859  0097               	movwf	23	;volatile
 10573                           
 10574                           ;MCU_B1.c: 1114: WDT.Enable = 1;
 10575  185A  0022               	movlb	2	; select bank2
 10576  185B  142A               	bsf	_WDT^(0+256),0
 10577                           
 10578                           ;MCU_B1.c: 1115: WDT.Timer = 10;
 10579  185C  300A               	movlw	10
 10580  185D  00F2               	movwf	??_WDT_Set
 10581  185E  0872               	movf	??_WDT_Set,w
 10582  185F  00AB               	movwf	(_WDT^(0+256)+1)
 10583  1860  0008               	return
 10584  1861                     __end_of_WDT_Set:	
 10585                           
 10586                           	psect	text60
 10587  18DE                     __ptext60:	
 10588 ;; *************** function _TMR1_Set *****************
 10589 ;; Defined at:
 10590 ;;		line 226 in file "../src/MCU_B1.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;		None
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;		None
 10595 ;; Return value:  Size  Location     Type
 10596 ;;		None               void
 10597 ;; Registers used:
 10598 ;;		wreg
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;Total ram usage:        0 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:    3
 10611 ;; This function calls:
 10612 ;;		Nothing
 10613 ;; This function is called by:
 10614 ;;		_Mcu_Initialization
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           
 10619                           ;psect for function _TMR1_Set
 10620  18DE                     _TMR1_Set:	
 10621                           
 10622                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10623                           
 10624                           ;incstack = 0
 10625                           ; Regs used in _TMR1_Set: [wreg]
 10626  18DE  3041               	movlw	65
 10627  18DF  0020               	movlb	0	; select bank0
 10628  18E0  0098               	movwf	24	;volatile
 10629                           
 10630                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10631  18E1  30FA               	movlw	250
 10632  18E2  0097               	movwf	23	;volatile
 10633                           
 10634                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10635  18E3  3038               	movlw	56
 10636  18E4  0096               	movwf	22	;volatile
 10637                           
 10638                           ;MCU_B1.c: 230: TMR1IE = 1;
 10639  18E5  0021               	movlb	1	; select bank1
 10640  18E6  1411               	bsf	17,0	;volatile
 10641                           
 10642                           ;MCU_B1.c: 231: PEIE = 1;
 10643  18E7  170B               	bsf	11,6	;volatile
 10644                           
 10645                           ;MCU_B1.c: 232: GIE = 1;
 10646  18E8  178B               	bsf	11,7	;volatile
 10647  18E9  0008               	return
 10648  18EA                     __end_of_TMR1_Set:	
 10649                           
 10650                           	psect	text61
 10651  1BF4                     __ptext61:	
 10652 ;; *************** function _IO_Set *****************
 10653 ;; Defined at:
 10654 ;;		line 60 in file "../src/MCU_B1.c"
 10655 ;; Parameters:    Size  Location     Type
 10656 ;;		None
 10657 ;; Auto vars:     Size  Location     Type
 10658 ;;		None
 10659 ;; Return value:  Size  Location     Type
 10660 ;;		None               void
 10661 ;; Registers used:
 10662 ;;		wreg, status,2
 10663 ;; Tracked objects:
 10664 ;;		On entry : 0/0
 10665 ;;		On exit  : 0/0
 10666 ;;		Unchanged: 0/0
 10667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;Total ram usage:        0 bytes
 10673 ;; Hardware stack levels used:    1
 10674 ;; Hardware stack levels required when called:    3
 10675 ;; This function calls:
 10676 ;;		Nothing
 10677 ;; This function is called by:
 10678 ;;		_Mcu_Initialization
 10679 ;; This function uses a non-reentrant model
 10680 ;;
 10681                           
 10682                           
 10683                           ;psect for function _IO_Set
 10684  1BF4                     _IO_Set:	
 10685                           
 10686                           ;MCU_B1.c: 92: TRISA = 0b01010111;;
 10687                           
 10688                           ;incstack = 0
 10689                           ; Regs used in _IO_Set: [wreg+status,2]
 10690  1BF4  3057               	movlw	87
 10691  1BF5  0021               	movlb	1	; select bank1
 10692  1BF6  008C               	movwf	12	;volatile
 10693                           
 10694                           ;MCU_B1.c: 93: TRISB = 0b00000101;;
 10695  1BF7  3005               	movlw	5
 10696  1BF8  008D               	movwf	13	;volatile
 10697                           
 10698                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10699  1BF9  300C               	movlw	12
 10700  1BFA  008E               	movwf	14	;volatile
 10701                           
 10702                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10703  1BFB  0022               	movlb	2	; select bank2
 10704  1BFC  018C               	clrf	12	;volatile
 10705                           
 10706                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10707  1BFD  3002               	movlw	2
 10708  1BFE  008D               	movwf	13	;volatile
 10709                           
 10710                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10711  1BFF  018E               	clrf	14	;volatile
 10712                           
 10713                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10714  1C00  3022               	movlw	34
 10715  1C01  0023               	movlb	3	; select bank3
 10716  1C02  008C               	movwf	12	;volatile
 10717                           
 10718                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10719  1C03  018D               	clrf	13	;volatile
 10720                           
 10721                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10722  1C04  018E               	clrf	14	;volatile
 10723                           
 10724                           ;MCU_B1.c: 104: PORTA = 0b01010111;;
 10725  1C05  3057               	movlw	87
 10726  1C06  0020               	movlb	0	; select bank0
 10727  1C07  008C               	movwf	12	;volatile
 10728                           
 10729                           ;MCU_B1.c: 105: PORTB = 0b00000101;;
 10730  1C08  3005               	movlw	5
 10731  1C09  008D               	movwf	13	;volatile
 10732                           
 10733                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10734  1C0A  300C               	movlw	12
 10735  1C0B  008E               	movwf	14	;volatile
 10736                           
 10737                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10738  1C0C  0024               	movlb	4	; select bank4
 10739  1C0D  018D               	clrf	13	;volatile
 10740  1C0E  0008               	return
 10741  1C0F                     __end_of_IO_Set:	
 10742                           
 10743                           	psect	text62
 10744  1881                     __ptext62:	
 10745 ;; *************** function _IOC_Set *****************
 10746 ;; Defined at:
 10747 ;;		line 380 in file "../src/MCU_B1.c"
 10748 ;; Parameters:    Size  Location     Type
 10749 ;;		None
 10750 ;; Auto vars:     Size  Location     Type
 10751 ;;		None
 10752 ;; Return value:  Size  Location     Type
 10753 ;;		None               void
 10754 ;; Registers used:
 10755 ;;		wreg, status,2
 10756 ;; Tracked objects:
 10757 ;;		On entry : 0/0
 10758 ;;		On exit  : 0/0
 10759 ;;		Unchanged: 0/0
 10760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;Total ram usage:        0 bytes
 10766 ;; Hardware stack levels used:    1
 10767 ;; Hardware stack levels required when called:    3
 10768 ;; This function calls:
 10769 ;;		Nothing
 10770 ;; This function is called by:
 10771 ;;		_Mcu_Initialization
 10772 ;; This function uses a non-reentrant model
 10773 ;;
 10774                           
 10775                           
 10776                           ;psect for function _IOC_Set
 10777  1881                     _IOC_Set:	
 10778                           
 10779                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10780                           
 10781                           ;incstack = 0
 10782                           ; Regs used in _IOC_Set: [wreg+status,2]
 10783  1881  3004               	movlw	4
 10784  1882  0027               	movlb	7	; select bank7
 10785  1883  0094               	movwf	20	;volatile
 10786                           
 10787                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10788  1884  3004               	movlw	4
 10789  1885  0095               	movwf	21	;volatile
 10790                           
 10791                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10792  1886  0196               	clrf	22	;volatile
 10793                           
 10794                           ;MCU_B1.c: 387: IOCIE = 1;
 10795  1887  158B               	bsf	11,3	;volatile
 10796                           
 10797                           ;MCU_B1.c: 388: IOCIF = 0;
 10798  1888  100B               	bcf	11,0	;volatile
 10799                           
 10800                           ;MCU_B1.c: 389: PEIE = 1;
 10801  1889  170B               	bsf	11,6	;volatile
 10802                           
 10803                           ;MCU_B1.c: 390: GIE = 1;
 10804  188A  178B               	bsf	11,7	;volatile
 10805  188B  0008               	return
 10806  188C                     __end_of_IOC_Set:	
 10807                           
 10808                           	psect	text63
 10809  27CF                     __ptext63:	
 10810 ;; *************** function _Fosc_Set *****************
 10811 ;; Defined at:
 10812 ;;		line 56 in file "../src/MCU_B1.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;		None
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;		None
 10817 ;; Return value:  Size  Location     Type
 10818 ;;		None               void
 10819 ;; Registers used:
 10820 ;;		wreg
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;Total ram usage:        0 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    3
 10833 ;; This function calls:
 10834 ;;		Nothing
 10835 ;; This function is called by:
 10836 ;;		_Mcu_Initialization
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           
 10841                           ;psect for function _Fosc_Set
 10842  27CF                     _Fosc_Set:	
 10843                           
 10844                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10845                           
 10846                           ;incstack = 0
 10847                           ; Regs used in _Fosc_Set: [wreg]
 10848  27CF  3078               	movlw	120
 10849  27D0  0021               	movlb	1	; select bank1
 10850  27D1  0099               	movwf	25	;volatile
 10851  27D2  0008               	return
 10852  27D3                     __end_of_Fosc_Set:	
 10853                           
 10854                           	psect	text64
 10855  1816                     __ptext64:	
 10856 ;; *************** function _ADC_Set *****************
 10857 ;; Defined at:
 10858 ;;		line 427 in file "../src/MCU_B1.c"
 10859 ;; Parameters:    Size  Location     Type
 10860 ;;		None
 10861 ;; Auto vars:     Size  Location     Type
 10862 ;;		None
 10863 ;; Return value:  Size  Location     Type
 10864 ;;		None               void
 10865 ;; Registers used:
 10866 ;;		wreg
 10867 ;; Tracked objects:
 10868 ;;		On entry : 0/0
 10869 ;;		On exit  : 0/0
 10870 ;;		Unchanged: 0/0
 10871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10876 ;;Total ram usage:        0 bytes
 10877 ;; Hardware stack levels used:    1
 10878 ;; Hardware stack levels required when called:    3
 10879 ;; This function calls:
 10880 ;;		Nothing
 10881 ;; This function is called by:
 10882 ;;		_Mcu_Initialization
 10883 ;; This function uses a non-reentrant model
 10884 ;;
 10885                           
 10886                           
 10887                           ;psect for function _ADC_Set
 10888  1816                     _ADC_Set:	
 10889                           
 10890                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10891                           
 10892                           ;incstack = 0
 10893                           ; Regs used in _ADC_Set: [wreg]
 10894  1816  30F3               	movlw	243
 10895  1817  0021               	movlb	1	; select bank1
 10896  1818  009E               	movwf	30	;volatile
 10897                           
 10898                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10899  1819  30C1               	movlw	193
 10900  181A  0022               	movlb	2	; select bank2
 10901  181B  0097               	movwf	23	;volatile
 10902  181C  0008               	return
 10903  181D                     __end_of_ADC_Set:	
 10904                           
 10905                           	psect	text65
 10906  0053                     __ptext65:	
 10907 ;; *************** function _Load_Main *****************
 10908 ;; Defined at:
 10909 ;;		line 40 in file "../src/OverLoad_B1.c"
 10910 ;; Parameters:    Size  Location     Type
 10911 ;;		None
 10912 ;; Auto vars:     Size  Location     Type
 10913 ;;  i               2    8[BANK0 ] int 
 10914 ;;  LightsCount     1    7[BANK0 ] unsigned char 
 10915 ;;  Load_RunStat    1    6[BANK0 ] unsigned char 
 10916 ;;  ErrorCountVa    1    5[BANK0 ] unsigned char 
 10917 ;;  error           1    2[BANK0 ] unsigned char 
 10918 ;; Return value:  Size  Location     Type
 10919 ;;		None               void
 10920 ;; Registers used:
 10921 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10922 ;; Tracked objects:
 10923 ;;		On entry : 0/0
 10924 ;;		On exit  : 0/0
 10925 ;;		Unchanged: 0/0
 10926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;Total ram usage:       10 bytes
 10932 ;; Hardware stack levels used:    1
 10933 ;; Hardware stack levels required when called:    4
 10934 ;; This function calls:
 10935 ;;		___lwdiv
 10936 ;;		___wmul
 10937 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10938 ;;		_getDimmer_LoadGO
 10939 ;;		_getDimmer_Load_Status
 10940 ;;		_getMain_All_Error_Status
 10941 ;;		_getMain_All_LightsStatus
 10942 ;;		_getMain_Lights_Count
 10943 ;;		_setLoad_AH_AL_Restore
 10944 ;; This function is called by:
 10945 ;;		_main
 10946 ;; This function uses a non-reentrant model
 10947 ;;
 10948                           
 10949                           
 10950                           ;psect for function _Load_Main
 10951  0053                     _Load_Main:	
 10952                           
 10953                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10954                           
 10955                           ;incstack = 0
 10956                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10957  0053  3000               	movlw	0
 10958  0054  319E  263C  3180   	fcall	_getMain_All_Error_Status
 10959  0057  0020               	movlb	0	; select bank0
 10960  0058  00A0               	movwf	??_Load_Main
 10961  0059  0820               	movf	??_Load_Main,w
 10962  005A  00A2               	movwf	Load_Main@error
 10963                           
 10964                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10965  005B  01A6               	clrf	Load_Main@Load_RunStatus
 10966  005C  01A5               	clrf	Load_Main@ErrorCountValue
 10967  005D  01A7               	clrf	Load_Main@LightsCount
 10968                           
 10969                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10970  005E  0022               	movlb	2	; select bank2
 10971  005F  1C32               	btfss	_Load^(0+256),0
 10972  0060  29ED               	goto	l1908
 10973                           
 10974                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10975  0061  3199  2141  3180   	fcall	_getMain_All_LightsStatus
 10976  0064  3800               	iorlw	0
 10977  0065  1D03               	skipz
 10978  0066  2869               	goto	l11053
 10979                           
 10980                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10981  0067  0022               	movlb	2	; select bank2
 10982  0068  288A               	goto	l11071
 10983  0069                     l11053:	
 10984                           ;OverLoad_B1.c: 47: } else {
 10985                           
 10986                           
 10987                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10988  0069  0020               	movlb	0	; select bank0
 10989  006A  08A2               	movf	Load_Main@error,f
 10990  006B  1D03               	skipz
 10991  006C  2887               	goto	l1911
 10992  006D  319B  23D9  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10993  0070  3800               	iorlw	0
 10994  0071  1D03               	skipz
 10995  0072  2887               	goto	l1911
 10996                           
 10997                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10998  0073  0022               	movlb	2	; select bank2
 10999  0074  14B2               	bsf	_Load^(0+256),1
 11000                           
 11001                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 11002  0075  3198  2008  3180   	fcall	_getDimmer_LoadGO
 11003  0078  3A01               	xorlw	1
 11004  0079  1D03               	skipz
 11005  007A  2882               	goto	l1912
 11006                           
 11007                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 11008  007B  0022               	movlb	2	; select bank2
 11009  007C  1DB2               	btfss	_Load^(0+256),3
 11010  007D  1BB2               	btfsc	_Load^(0+256),7
 11011  007E  288B               	goto	l1910
 11012                           
 11013                           ;OverLoad_B1.c: 55: Load.Run = 1;
 11014  007F  15B2               	bsf	_Load^(0+256),3
 11015                           
 11016                           ;OverLoad_B1.c: 56: Load.Count = 0;
 11017  0080  01D7               	clrf	(_Load^(0+256)+37)
 11018                           
 11019                           ;OverLoad_B1.c: 57: }
 11020                           ;OverLoad_B1.c: 58: } else {
 11021  0081  288B               	goto	l1910
 11022  0082                     l1912:	
 11023                           
 11024                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 11025  0082  0022               	movlb	2	; select bank2
 11026  0083  1FB2               	btfss	_Load^(0+256),7
 11027  0084  288B               	goto	l1910
 11028                           
 11029                           ;OverLoad_B1.c: 60: Load.OK = 0;
 11030  0085  13B2               	bcf	_Load^(0+256),7
 11031                           
 11032                           ;OverLoad_B1.c: 61: }
 11033                           ;OverLoad_B1.c: 62: }
 11034                           ;OverLoad_B1.c: 63: } else {
 11035  0086  288B               	goto	l1910
 11036  0087                     l1911:	
 11037                           
 11038                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 11039  0087  0022               	movlb	2	; select bank2
 11040  0088  1CB2               	btfss	_Load^(0+256),1
 11041  0089  288B               	goto	l1910
 11042  008A                     l11071:	
 11043                           
 11044                           ;OverLoad_B1.c: 65: Load.GO = 0;
 11045  008A  10B2               	bcf	_Load^(0+256),1
 11046  008B                     l1910:	
 11047                           
 11048                           ;OverLoad_B1.c: 66: }
 11049                           ;OverLoad_B1.c: 67: }
 11050                           ;OverLoad_B1.c: 89: }
 11051                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 11052  008B  1CB2               	btfss	_Load^(0+256),1
 11053  008C  29C9               	goto	l1918
 11054                           
 11055                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 11056  008D  1532               	bsf	_Load^(0+256),2
 11057                           
 11058                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 11059  008E  1E32               	btfss	_Load^(0+256),4
 11060  008F  29C7               	goto	l1919
 11061                           
 11062                           ;OverLoad_B1.c: 96: Load.Time++;
 11063  0090  3001               	movlw	1
 11064  0091  07B3               	addwf	(_Load^(0+256)+1),f
 11065  0092  3000               	movlw	0
 11066  0093  3DB4               	addwfc	((_Load+1)^(0+256)+1),f
 11067                           
 11068                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 11069  0094  3000               	movlw	0
 11070  0095  0234               	subwf	((_Load+1)^(0+256)+1),w
 11071  0096  3002               	movlw	2
 11072  0097  1903               	skipnz
 11073  0098  0233               	subwf	(_Load^(0+256)+1),w
 11074  0099  1C03               	skipc
 11075  009A  0008               	return
 11076                           
 11077                           ;OverLoad_B1.c: 98: Load.Time = 0;
 11078  009B  01B3               	clrf	(_Load^(0+256)+1)
 11079  009C  01B4               	clrf	((_Load+1)^(0+256)+1)
 11080                           
 11081                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 11082  009D  1232               	bcf	_Load^(0+256),4
 11083                           
 11084                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 11085  009E  3001               	movlw	1
 11086  009F  0020               	movlb	0	; select bank0
 11087  00A0  00A8               	movwf	Load_Main@i
 11088  00A1  3000               	movlw	0
 11089  00A2  00A9               	movwf	Load_Main@i+1
 11090  00A3  0829               	movf	Load_Main@i+1,w
 11091  00A4  3A80               	xorlw	128
 11092  00A5  00A0               	movwf	??_Load_Main
 11093  00A6  3080               	movlw	128
 11094  00A7  0220               	subwf	??_Load_Main,w
 11095  00A8  1D03               	skipz
 11096  00A9  28AC               	goto	u12645
 11097  00AA  3004               	movlw	4
 11098  00AB  0228               	subwf	Load_Main@i,w
 11099  00AC                     u12645:	
 11100  00AC  1803               	btfsc	3,0
 11101  00AD  28E0               	goto	l11093
 11102  00AE                     l11087:	
 11103                           
 11104                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 11105  00AE  0020               	movlb	0	; select bank0
 11106  00AF  3528               	lslf	Load_Main@i,w
 11107  00B0  3E3D               	addlw	(_Load+11)& (0+255)
 11108  00B1  0086               	movwf	6
 11109  00B2  3001               	movlw	1	; select bank2/3
 11110  00B3  0087               	movwf	7
 11111  00B4  3F40               	moviw [0]fsr1
 11112  00B5  00A0               	movwf	??_Load_Main
 11113  00B6  3F41               	moviw [1]fsr1
 11114  00B7  00A1               	movwf	??_Load_Main+1
 11115  00B8  0820               	movf	??_Load_Main,w
 11116  00B9  0022               	movlb	2	; select bank2
 11117  00BA  07B7               	addwf	(_Load^(0+256)+5),f
 11118  00BB  0020               	movlb	0	; select bank0
 11119  00BC  0821               	movf	??_Load_Main+1,w
 11120  00BD  0022               	movlb	2	; select bank2
 11121  00BE  3DB8               	addwfc	((_Load+1)^(0+256)+5),f
 11122                           
 11123                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 11124  00BF  0020               	movlb	0	; select bank0
 11125  00C0  3528               	lslf	Load_Main@i,w
 11126  00C1  3E47               	addlw	(_Load+21)& (0+255)
 11127  00C2  0086               	movwf	6
 11128  00C3  3001               	movlw	1	; select bank2/3
 11129  00C4  0087               	movwf	7
 11130  00C5  3F40               	moviw [0]fsr1
 11131  00C6  00A0               	movwf	??_Load_Main
 11132  00C7  3F41               	moviw [1]fsr1
 11133  00C8  00A1               	movwf	??_Load_Main+1
 11134  00C9  0820               	movf	??_Load_Main,w
 11135  00CA  0022               	movlb	2	; select bank2
 11136  00CB  07B9               	addwf	(_Load^(0+256)+7),f
 11137  00CC  0020               	movlb	0	; select bank0
 11138  00CD  0821               	movf	??_Load_Main+1,w
 11139  00CE  0022               	movlb	2	; select bank2
 11140  00CF  3DBA               	addwfc	((_Load+1)^(0+256)+7),f
 11141  00D0  3001               	movlw	1
 11142  00D1  0020               	movlb	0	; select bank0
 11143  00D2  07A8               	addwf	Load_Main@i,f
 11144  00D3  3000               	movlw	0
 11145  00D4  3DA9               	addwfc	Load_Main@i+1,f
 11146  00D5  0829               	movf	Load_Main@i+1,w
 11147  00D6  3A80               	xorlw	128
 11148  00D7  00A0               	movwf	??_Load_Main
 11149  00D8  3080               	movlw	128
 11150  00D9  0220               	subwf	??_Load_Main,w
 11151  00DA  1D03               	skipz
 11152  00DB  28DE               	goto	u12655
 11153  00DC  3004               	movlw	4
 11154  00DD  0228               	subwf	Load_Main@i,w
 11155  00DE                     u12655:	
 11156  00DE  1C03               	skipc
 11157  00DF  28AE               	goto	l11087
 11158  00E0                     l11093:	
 11159                           
 11160                           ;OverLoad_B1.c: 104: }
 11161                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11162  00E0  3003               	movlw	3
 11163  00E1  00F2               	movwf	___lwdiv@divisor
 11164  00E2  3000               	movlw	0
 11165  00E3  00F3               	movwf	___lwdiv@divisor+1
 11166  00E4  0022               	movlb	2	; select bank2
 11167  00E5  0838               	movf	((_Load+1)^(0+256)+5),w
 11168  00E6  01F5               	clrf	___lwdiv@dividend+1
 11169  00E7  07F5               	addwf	___lwdiv@dividend+1,f
 11170  00E8  0837               	movf	(_Load^(0+256)+5),w
 11171  00E9  01F4               	clrf	___lwdiv@dividend
 11172  00EA  07F4               	addwf	___lwdiv@dividend,f
 11173  00EB  319F  275D  3180   	fcall	___lwdiv
 11174  00EE  0873               	movf	?___lwdiv+1,w
 11175  00EF  0022               	movlb	2	; select bank2
 11176  00F0  01B8               	clrf	((_Load+1)^(0+256)+5)
 11177  00F1  07B8               	addwf	((_Load+1)^(0+256)+5),f
 11178  00F2  0872               	movf	?___lwdiv,w
 11179  00F3  01B7               	clrf	(_Load^(0+256)+5)
 11180  00F4  07B7               	addwf	(_Load^(0+256)+5),f
 11181                           
 11182                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11183  00F5  3003               	movlw	3
 11184  00F6  00F2               	movwf	___lwdiv@divisor
 11185  00F7  3000               	movlw	0
 11186  00F8  00F3               	movwf	___lwdiv@divisor+1
 11187  00F9  083A               	movf	((_Load+1)^(0+256)+7),w
 11188  00FA  01F5               	clrf	___lwdiv@dividend+1
 11189  00FB  07F5               	addwf	___lwdiv@dividend+1,f
 11190  00FC  0839               	movf	(_Load^(0+256)+7),w
 11191  00FD  01F4               	clrf	___lwdiv@dividend
 11192  00FE  07F4               	addwf	___lwdiv@dividend,f
 11193  00FF  319F  275D  3180   	fcall	___lwdiv
 11194  0102  0873               	movf	?___lwdiv+1,w
 11195  0103  0022               	movlb	2	; select bank2
 11196  0104  01BA               	clrf	((_Load+1)^(0+256)+7)
 11197  0105  07BA               	addwf	((_Load+1)^(0+256)+7),f
 11198  0106  0872               	movf	?___lwdiv,w
 11199  0107  01B9               	clrf	(_Load^(0+256)+7)
 11200  0108  07B9               	addwf	(_Load^(0+256)+7),f
 11201                           
 11202                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11203  0109  319B  23BE  3180   	fcall	_setLoad_AH_AL_Restore
 11204                           
 11205                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11206  010C  0022               	movlb	2	; select bank2
 11207  010D  083A               	movf	((_Load+1)^(0+256)+7),w
 11208  010E  0238               	subwf	((_Load+1)^(0+256)+5),w
 11209  010F  1D03               	skipz
 11210  0110  2913               	goto	u12665
 11211  0111  0839               	movf	(_Load^(0+256)+7),w
 11212  0112  0237               	subwf	(_Load^(0+256)+5),w
 11213  0113                     u12665:	
 11214  0113  1C03               	skipc
 11215  0114  0008               	return
 11216                           
 11217                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11218  0115  3005               	movlw	5
 11219  0116  3E32               	addlw	_Load& (0+255)
 11220  0117  0086               	movwf	6
 11221  0118  3001               	movlw	1	; select bank2/3
 11222  0119  0087               	movwf	7
 11223  011A  0939               	comf	(_Load^(0+256)+7),w
 11224  011B  0020               	movlb	0	; select bank0
 11225  011C  00A0               	movwf	??_Load_Main
 11226  011D  0022               	movlb	2	; select bank2
 11227  011E  093A               	comf	((_Load+1)^(0+256)+7),w
 11228  011F  0020               	movlb	0	; select bank0
 11229  0120  00A1               	movwf	??_Load_Main+1
 11230  0121  0AA0               	incf	??_Load_Main,f
 11231  0122  1903               	skipnz
 11232  0123  0AA1               	incf	??_Load_Main+1,f
 11233  0124  3F40               	moviw [0]fsr1
 11234  0125  0720               	addwf	??_Load_Main,w
 11235  0126  0022               	movlb	2	; select bank2
 11236  0127  00D1               	movwf	(_Load^(0+256)+31)
 11237  0128  3F41               	moviw [1]fsr1
 11238  0129  0020               	movlb	0	; select bank0
 11239  012A  3D21               	addwfc	??_Load_Main+1,w
 11240  012B  0022               	movlb	2	; select bank2
 11241  012C  00D2               	movwf	(_Load^(0+256)+32)
 11242                           
 11243                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11244  012D  01B7               	clrf	(_Load^(0+256)+5)
 11245  012E  01B8               	clrf	((_Load+1)^(0+256)+5)
 11246                           
 11247                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11248  012F  01B9               	clrf	(_Load^(0+256)+7)
 11249  0130  01BA               	clrf	((_Load+1)^(0+256)+7)
 11250                           
 11251                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11252  0131  1DB2               	btfss	_Load^(0+256),3
 11253  0132  2989               	goto	l11133
 11254                           
 11255                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11256  0133  3002               	movlw	2
 11257  0134  0257               	subwf	(_Load^(0+256)+37),w
 11258  0135  1803               	skipnc
 11259  0136  2989               	goto	l11133
 11260                           
 11261                           ;OverLoad_B1.c: 117: Load.Count++;
 11262  0137  3001               	movlw	1
 11263  0138  0020               	movlb	0	; select bank0
 11264  0139  00A0               	movwf	??_Load_Main
 11265  013A  0820               	movf	??_Load_Main,w
 11266  013B  0022               	movlb	2	; select bank2
 11267  013C  07D7               	addwf	(_Load^(0+256)+37),f
 11268                           
 11269                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11270  013D  3198  200F  3180   	fcall	_getDimmer_Load_Status
 11271  0140  0020               	movlb	0	; select bank0
 11272  0141  00A0               	movwf	??_Load_Main
 11273  0142  0820               	movf	??_Load_Main,w
 11274  0143  00A6               	movwf	Load_Main@Load_RunStatus
 11275                           
 11276                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11277  0144  3199  21E0  3180   	fcall	_getMain_Lights_Count
 11278  0147  0020               	movlb	0	; select bank0
 11279  0148  00A0               	movwf	??_Load_Main
 11280  0149  0820               	movf	??_Load_Main,w
 11281  014A  00A7               	movwf	Load_Main@LightsCount
 11282                           
 11283                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11284  014B  0022               	movlb	2	; select bank2
 11285  014C  0857               	movf	(_Load^(0+256)+37),w
 11286  014D  3A01               	xorlw	1
 11287  014E  1D03               	skipz
 11288  014F  2954               	goto	l11119
 11289                           
 11290                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*56);
 11291  0150  3060               	movlw	96
 11292  0151  00D5               	movwf	(_Load^(0+256)+35)
 11293  0152  3004               	movlw	4
 11294  0153  2961               	goto	L7
 11295  0154                     l11119:	
 11296                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11297                           
 11298  0154  0857               	movf	(_Load^(0+256)+37),w
 11299  0155  3A02               	xorlw	2
 11300  0156  1D03               	skipz
 11301  0157  2989               	goto	l11133
 11302                           
 11303                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11304  0158  0020               	movlb	0	; select bank0
 11305  0159  0827               	movf	Load_Main@LightsCount,w
 11306  015A  3A01               	xorlw	1
 11307  015B  1D03               	skipz
 11308  015C  2963               	goto	l11125
 11309                           
 11310                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.2*56);
 11311  015D  3043               	movlw	67
 11312  015E  0022               	movlb	2	; select bank2
 11313  015F  00D5               	movwf	(_Load^(0+256)+35)
 11314  0160  3000               	movlw	0
 11315  0161                     L7:	
 11316  0161  00D6               	movwf	(_Load^(0+256)+36)
 11317                           
 11318                           ;OverLoad_B1.c: 132: } else {
 11319  0162  2989               	goto	l11133
 11320  0163                     l11125:	
 11321                           
 11322                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11323  0163  0020               	movlb	0	; select bank0
 11324  0164  08A6               	movf	Load_Main@Load_RunStatus,f
 11325  0165  1D03               	skipz
 11326  0166  297D               	goto	l11129
 11327                           
 11328                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.2*56) * LightsCount;
 11329  0167  0827               	movf	Load_Main@LightsCount,w
 11330  0168  00A0               	movwf	??_Load_Main
 11331  0169  01A1               	clrf	??_Load_Main+1
 11332  016A  0820               	movf	??_Load_Main,w
 11333  016B  00F2               	movwf	___wmul@multiplier
 11334  016C  0821               	movf	??_Load_Main+1,w
 11335  016D  00F3               	movwf	___wmul@multiplier+1
 11336  016E  3043               	movlw	67
 11337  016F  00F4               	movwf	___wmul@multiplicand
 11338  0170  3000               	movlw	0
 11339  0171  00F5               	movwf	___wmul@multiplicand+1
 11340  0172  319C  2448  3180   	fcall	___wmul
 11341  0175  0873               	movf	?___wmul+1,w
 11342  0176  0022               	movlb	2	; select bank2
 11343  0177  01D6               	clrf	((_Load+1)^(0+256)+35)
 11344  0178  07D6               	addwf	((_Load+1)^(0+256)+35),f
 11345  0179  0872               	movf	?___wmul,w
 11346  017A  01D5               	clrf	(_Load^(0+256)+35)
 11347  017B  07D5               	addwf	(_Load^(0+256)+35),f
 11348                           
 11349                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11350  017C  2989               	goto	l11133
 11351  017D                     l11129:	
 11352  017D  0020               	movlb	0	; select bank0
 11353  017E  0826               	movf	Load_Main@Load_RunStatus,w
 11354  017F  3A01               	xorlw	1
 11355  0180  1D03               	skipz
 11356  0181  2989               	goto	l11133
 11357                           
 11358                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.2*56) + Load.TotalLoad;
 11359  0182  0022               	movlb	2	; select bank2
 11360  0183  083B               	movf	(_Load^(0+256)+9),w
 11361  0184  3E43               	addlw	67
 11362  0185  00D5               	movwf	(_Load^(0+256)+35)
 11363  0186  3000               	movlw	0
 11364  0187  3D3C               	addwfc	((_Load+1)^(0+256)+9),w
 11365  0188  00D6               	movwf	((_Load+1)^(0+256)+35)
 11366  0189                     l11133:	
 11367                           
 11368                           ;OverLoad_B1.c: 137: }
 11369                           ;OverLoad_B1.c: 138: }
 11370                           ;OverLoad_B1.c: 139: }
 11371                           ;OverLoad_B1.c: 140: }
 11372                           ;OverLoad_B1.c: 141: }
 11373                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11374  0189  0022               	movlb	2	; select bank2
 11375  018A  0856               	movf	((_Load+1)^(0+256)+35),w
 11376  018B  0252               	subwf	((_Load+1)^(0+256)+31),w
 11377  018C  1D03               	skipz
 11378  018D  2990               	goto	u12745
 11379  018E  0855               	movf	(_Load^(0+256)+35),w
 11380  018F  0251               	subwf	(_Load^(0+256)+31),w
 11381  0190                     u12745:	
 11382  0190  1C03               	skipc
 11383  0191  29AF               	goto	l11149
 11384                           
 11385                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11386  0192  0020               	movlb	0	; select bank0
 11387  0193  0827               	movf	Load_Main@LightsCount,w
 11388  0194  3A01               	xorlw	1
 11389  0195  1903               	skipnz
 11390  0196  2999               	goto	l11139
 11391  0197  3003               	movlw	3
 11392  0198  299A               	goto	L8
 11393  0199                     l11139:	
 11394  0199  3002               	movlw	2
 11395  019A                     L8:	
 11396  019A  00A3               	movwf	_Load_Main$4636
 11397  019B  3000               	movlw	0
 11398  019C  00A4               	movwf	_Load_Main$4636+1
 11399  019D  0823               	movf	_Load_Main$4636,w
 11400  019E  00A0               	movwf	??_Load_Main
 11401  019F  0820               	movf	??_Load_Main,w
 11402  01A0  00A5               	movwf	Load_Main@ErrorCountValue
 11403                           
 11404                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11405  01A1  3001               	movlw	1
 11406  01A2  00A0               	movwf	??_Load_Main
 11407  01A3  0820               	movf	??_Load_Main,w
 11408  01A4  0022               	movlb	2	; select bank2
 11409  01A5  07D8               	addwf	(_Load^(0+256)+38),f
 11410                           
 11411                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11412  01A6  0858               	movf	(_Load^(0+256)+38),w
 11413  01A7  0020               	movlb	0	; select bank0
 11414  01A8  0225               	subwf	Load_Main@ErrorCountValue,w
 11415  01A9  1803               	skipnc
 11416  01AA  0008               	return
 11417                           
 11418                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11419  01AB  0022               	movlb	2	; select bank2
 11420  01AC  01D8               	clrf	(_Load^(0+256)+38)
 11421                           
 11422                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11423  01AD  16B2               	bsf	_Load^(0+256),5
 11424                           
 11425                           ;OverLoad_B1.c: 170: }
 11426                           ;OverLoad_B1.c: 171: } else {
 11427  01AE  0008               	return
 11428  01AF                     l11149:	
 11429                           
 11430                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11431  01AF  01D8               	clrf	(_Load^(0+256)+38)
 11432                           
 11433                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11434  01B0  1DB2               	btfss	_Load^(0+256),3
 11435  01B1  0008               	return
 11436                           
 11437                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11438  01B2  3001               	movlw	1
 11439  01B3  0020               	movlb	0	; select bank0
 11440  01B4  00A0               	movwf	??_Load_Main
 11441  01B5  0820               	movf	??_Load_Main,w
 11442  01B6  0022               	movlb	2	; select bank2
 11443  01B7  07D9               	addwf	(_Load^(0+256)+39),f
 11444                           
 11445                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11446  01B8  3003               	movlw	3
 11447  01B9  0259               	subwf	(_Load^(0+256)+39),w
 11448  01BA  1C03               	skipc
 11449  01BB  0008               	return
 11450                           
 11451                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11452  01BC  01D9               	clrf	(_Load^(0+256)+39)
 11453                           
 11454                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11455  01BD  17B2               	bsf	_Load^(0+256),7
 11456                           
 11457                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11458  01BE  11B2               	bcf	_Load^(0+256),3
 11459                           
 11460                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11461  01BF  01D7               	clrf	(_Load^(0+256)+37)
 11462                           
 11463                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11464  01C0  0852               	movf	((_Load+1)^(0+256)+31),w
 11465  01C1  01BC               	clrf	((_Load+1)^(0+256)+9)
 11466  01C2  07BC               	addwf	((_Load+1)^(0+256)+9),f
 11467  01C3  0851               	movf	(_Load^(0+256)+31),w
 11468  01C4  01BB               	clrf	(_Load^(0+256)+9)
 11469  01C5  07BB               	addwf	(_Load^(0+256)+9),f
 11470                           
 11471                           ;OverLoad_B1.c: 184: }
 11472                           ;OverLoad_B1.c: 185: }
 11473                           ;OverLoad_B1.c: 208: }
 11474                           ;OverLoad_B1.c: 209: }
 11475                           ;OverLoad_B1.c: 210: }
 11476                           ;OverLoad_B1.c: 211: } else {
 11477  01C6  0008               	return
 11478  01C7                     l1919:	
 11479                           
 11480                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11481  01C7  1632               	bsf	_Load^(0+256),4
 11482                           
 11483                           ;OverLoad_B1.c: 213: }
 11484                           ;OverLoad_B1.c: 214: } else {
 11485  01C8  0008               	return
 11486  01C9                     l1918:	
 11487                           
 11488                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11489  01C9  1D32               	btfss	_Load^(0+256),2
 11490  01CA  29DC               	goto	l11185
 11491                           
 11492                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11493  01CB  1132               	bcf	_Load^(0+256),2
 11494                           
 11495                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11496  01CC  1232               	bcf	_Load^(0+256),4
 11497                           
 11498                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11499  01CD  01B3               	clrf	(_Load^(0+256)+1)
 11500  01CE  01B4               	clrf	((_Load+1)^(0+256)+1)
 11501                           
 11502                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11503  01CF  319B  23BE  3180   	fcall	_setLoad_AH_AL_Restore
 11504                           
 11505                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11506  01D2  0022               	movlb	2	; select bank2
 11507  01D3  01D8               	clrf	(_Load^(0+256)+38)
 11508                           
 11509                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11510  01D4  01D9               	clrf	(_Load^(0+256)+39)
 11511                           
 11512                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11513  01D5  01B7               	clrf	(_Load^(0+256)+5)
 11514  01D6  01B8               	clrf	((_Load+1)^(0+256)+5)
 11515                           
 11516                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11517  01D7  01B9               	clrf	(_Load^(0+256)+7)
 11518  01D8  01BA               	clrf	((_Load+1)^(0+256)+7)
 11519                           
 11520                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11521  01D9  11B2               	bcf	_Load^(0+256),3
 11522                           
 11523                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11524  01DA  01D7               	clrf	(_Load^(0+256)+37)
 11525                           
 11526                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11527  01DB  13B2               	bcf	_Load^(0+256),7
 11528  01DC                     l11185:	
 11529                           
 11530                           ;OverLoad_B1.c: 257: }
 11531                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11532  01DC  1EB2               	btfss	_Load^(0+256),5
 11533  01DD  0008               	return
 11534                           
 11535                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11536  01DE  3001               	movlw	1
 11537  01DF  07B5               	addwf	(_Load^(0+256)+3),f
 11538  01E0  3000               	movlw	0
 11539  01E1  3DB6               	addwfc	((_Load+1)^(0+256)+3),f
 11540                           
 11541                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11542  01E2  3001               	movlw	1
 11543  01E3  0236               	subwf	((_Load+1)^(0+256)+3),w
 11544  01E4  30F4               	movlw	244
 11545  01E5  1903               	skipnz
 11546  01E6  0235               	subwf	(_Load^(0+256)+3),w
 11547  01E7  1C03               	skipc
 11548  01E8  0008               	return
 11549                           
 11550                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11551  01E9  01B5               	clrf	(_Load^(0+256)+3)
 11552  01EA  01B6               	clrf	((_Load+1)^(0+256)+3)
 11553                           
 11554                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11555  01EB  12B2               	bcf	_Load^(0+256),5
 11556                           
 11557                           ;OverLoad_B1.c: 263: }
 11558                           ;OverLoad_B1.c: 264: }
 11559                           ;OverLoad_B1.c: 265: }
 11560                           ;OverLoad_B1.c: 266: } else {
 11561  01EC  0008               	return
 11562  01ED                     l1908:	
 11563                           
 11564                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11565  01ED  0021               	movlb	1	; select bank1
 11566  01EE  1C4F               	btfss	_myMain^(0+128),0
 11567  01EF  0008               	return
 11568                           
 11569                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11570  01F0  0022               	movlb	2	; select bank2
 11571  01F1  1432               	bsf	_Load^(0+256),0
 11572  01F2  0008               	return
 11573  01F3                     __end_of_Load_Main:	
 11574                           
 11575                           	psect	text66
 11576  19E0                     __ptext66:	
 11577 ;; *************** function _getMain_Lights_Count *****************
 11578 ;; Defined at:
 11579 ;;		line 459 in file "../src/Main_B1.c"
 11580 ;; Parameters:    Size  Location     Type
 11581 ;;		None
 11582 ;; Auto vars:     Size  Location     Type
 11583 ;;  count           1    5[COMMON] unsigned char 
 11584 ;;  status2         1    4[COMMON] unsigned char 
 11585 ;;  status1         1    3[COMMON] unsigned char 
 11586 ;; Return value:  Size  Location     Type
 11587 ;;                  1    wreg      unsigned char 
 11588 ;; Registers used:
 11589 ;;		wreg, status,2, status,0
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;Total ram usage:        4 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; Hardware stack levels required when called:    3
 11602 ;; This function calls:
 11603 ;;		Nothing
 11604 ;; This function is called by:
 11605 ;;		_Load_Main
 11606 ;; This function uses a non-reentrant model
 11607 ;;
 11608                           
 11609                           
 11610                           ;psect for function _getMain_Lights_Count
 11611  19E0                     _getMain_Lights_Count:	
 11612                           
 11613                           ;Main_B1.c: 460: char count = 0;
 11614                           
 11615                           ;incstack = 0
 11616                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11617  19E0  01F5               	clrf	getMain_Lights_Count@count
 11618                           
 11619                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11620  19E1  3000               	movlw	0
 11621  19E2  0021               	movlb	1	; select bank1
 11622  19E3  19A0               	btfsc	_DimmerIntr1^(0+128),3
 11623  19E4  3001               	movlw	1
 11624  19E5  00F3               	movwf	getMain_Lights_Count@status1
 11625                           
 11626                           ;Main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11627  19E6  3000               	movlw	0
 11628  19E7  19B0               	btfsc	_DimmerIntr2^(0+128),3
 11629  19E8  3001               	movlw	1
 11630  19E9  00F4               	movwf	getMain_Lights_Count@status2
 11631                           
 11632                           ;Main_B1.c: 490: count = (status1 + status2);
 11633  19EA  0873               	movf	getMain_Lights_Count@status1,w
 11634  19EB  0774               	addwf	getMain_Lights_Count@status2,w
 11635  19EC  00F2               	movwf	??_getMain_Lights_Count
 11636  19ED  0872               	movf	??_getMain_Lights_Count,w
 11637  19EE  00F5               	movwf	getMain_Lights_Count@count
 11638                           
 11639                           ;Main_B1.c: 495: return count;
 11640  19EF  0875               	movf	getMain_Lights_Count@count,w
 11641  19F0  0008               	return
 11642  19F1                     __end_of_getMain_Lights_Count:	
 11643                           
 11644                           	psect	text67
 11645  180F                     __ptext67:	
 11646 ;; *************** function _getDimmer_Load_Status *****************
 11647 ;; Defined at:
 11648 ;;		line 1285 in file "../src/Dimmer_B1.c"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;		None
 11651 ;; Auto vars:     Size  Location     Type
 11652 ;;  status          1    2[COMMON] unsigned char 
 11653 ;; Return value:  Size  Location     Type
 11654 ;;                  1    wreg      unsigned char 
 11655 ;; Registers used:
 11656 ;;		wreg, status,2
 11657 ;; Tracked objects:
 11658 ;;		On entry : 0/0
 11659 ;;		On exit  : 0/0
 11660 ;;		Unchanged: 0/0
 11661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11663 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;Total ram usage:        1 bytes
 11667 ;; Hardware stack levels used:    1
 11668 ;; Hardware stack levels required when called:    3
 11669 ;; This function calls:
 11670 ;;		Nothing
 11671 ;; This function is called by:
 11672 ;;		_Load_Main
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           
 11677                           ;psect for function _getDimmer_Load_Status
 11678  180F                     _getDimmer_Load_Status:	
 11679                           
 11680                           ;Dimmer_B1.c: 1286: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11681                           
 11682                           ;incstack = 0
 11683                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11684  180F  3000               	movlw	0
 11685  1810  0022               	movlb	2	; select bank2
 11686  1811  1920               	btfsc	_Dimmer^(0+256),2
 11687  1812  3001               	movlw	1
 11688  1813  00F2               	movwf	getDimmer_Load_Status@status
 11689                           
 11690                           ;Dimmer_B1.c: 1287: return status;
 11691  1814  0872               	movf	getDimmer_Load_Status@status,w
 11692  1815  0008               	return
 11693  1816                     __end_of_getDimmer_Load_Status:	
 11694                           
 11695                           	psect	text68
 11696  1808                     __ptext68:	
 11697 ;; *************** function _getDimmer_LoadGO *****************
 11698 ;; Defined at:
 11699 ;;		line 1279 in file "../src/Dimmer_B1.c"
 11700 ;; Parameters:    Size  Location     Type
 11701 ;;		None
 11702 ;; Auto vars:     Size  Location     Type
 11703 ;;  loadgo          1    2[COMMON] unsigned char 
 11704 ;; Return value:  Size  Location     Type
 11705 ;;                  1    wreg      unsigned char 
 11706 ;; Registers used:
 11707 ;;		wreg, status,2
 11708 ;; Tracked objects:
 11709 ;;		On entry : 0/0
 11710 ;;		On exit  : 0/0
 11711 ;;		Unchanged: 0/0
 11712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11716 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11717 ;;Total ram usage:        1 bytes
 11718 ;; Hardware stack levels used:    1
 11719 ;; Hardware stack levels required when called:    3
 11720 ;; This function calls:
 11721 ;;		Nothing
 11722 ;; This function is called by:
 11723 ;;		_Load_Main
 11724 ;; This function uses a non-reentrant model
 11725 ;;
 11726                           
 11727                           
 11728                           ;psect for function _getDimmer_LoadGO
 11729  1808                     _getDimmer_LoadGO:	
 11730                           
 11731                           ;Dimmer_B1.c: 1280: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11732                           
 11733                           ;incstack = 0
 11734                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11735  1808  3000               	movlw	0
 11736  1809  0022               	movlb	2	; select bank2
 11737  180A  18A0               	btfsc	_Dimmer^(0+256),1
 11738  180B  3001               	movlw	1
 11739  180C  00F2               	movwf	getDimmer_LoadGO@loadgo
 11740                           
 11741                           ;Dimmer_B1.c: 1281: return loadgo;
 11742  180D  0872               	movf	getDimmer_LoadGO@loadgo,w
 11743  180E  0008               	return
 11744  180F                     __end_of_getDimmer_LoadGO:	
 11745                           
 11746                           	psect	text69
 11747  1BD9                     __ptext69:	
 11748 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11749 ;; Defined at:
 11750 ;;		line 320 in file "../src/Dimmer_B1.c"
 11751 ;; Parameters:    Size  Location     Type
 11752 ;;		None
 11753 ;; Auto vars:     Size  Location     Type
 11754 ;;  status          1    5[COMMON] unsigned char 
 11755 ;; Return value:  Size  Location     Type
 11756 ;;                  1    wreg      unsigned char 
 11757 ;; Registers used:
 11758 ;;		wreg, status,2, status,0
 11759 ;; Tracked objects:
 11760 ;;		On entry : 0/0
 11761 ;;		On exit  : 0/0
 11762 ;;		Unchanged: 0/0
 11763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;Total ram usage:        4 bytes
 11769 ;; Hardware stack levels used:    1
 11770 ;; Hardware stack levels required when called:    3
 11771 ;; This function calls:
 11772 ;;		Nothing
 11773 ;; This function is called by:
 11774 ;;		_Load_Main
 11775 ;; This function uses a non-reentrant model
 11776 ;;
 11777                           
 11778                           
 11779                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11780  1BD9                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11781                           
 11782                           ;Dimmer_B1.c: 321: char status = 0;
 11783                           
 11784                           ;incstack = 0
 11785                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11786  1BD9  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11787                           
 11788                           ;Dimmer_B1.c: 328: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11789  1BDA  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2605
 11790  1BDB  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2605,f
 11791  1BDC  0021               	movlb	1	; select bank1
 11792  1BDD  1E20               	btfss	_DimmerIntr1^(0+128),4
 11793  1BDE  1A30               	btfsc	_DimmerIntr2^(0+128),4
 11794  1BDF  2BE1               	goto	l8251
 11795  1BE0  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2605
 11796  1BE1                     l8251:	
 11797  1BE1  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2605,w
 11798  1BE2  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11799  1BE3  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11800  1BE4  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11801                           
 11802                           ;Dimmer_B1.c: 336: if (status == 0) {
 11803  1BE5  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11804  1BE6  1D03               	skipz
 11805  1BE7  2BF2               	goto	l8263
 11806                           
 11807                           ;Dimmer_B1.c: 342: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11808  1BE8  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2606
 11809  1BE9  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2606,f
 11810  1BEA  1F20               	btfss	_DimmerIntr1^(0+128),6
 11811  1BEB  1B30               	btfsc	_DimmerIntr2^(0+128),6
 11812  1BEC  2BEE               	goto	l8261
 11813  1BED  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2606
 11814  1BEE                     l8261:	
 11815  1BEE  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2606,w
 11816  1BEF  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11817  1BF0  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11818  1BF1  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11819  1BF2                     l8263:	
 11820                           
 11821                           ;Dimmer_B1.c: 348: }
 11822                           ;Dimmer_B1.c: 350: return status;
 11823  1BF2  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11824  1BF3  0008               	return
 11825  1BF4                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11826                           
 11827                           	psect	text70
 11828  1C48                     __ptext70:	
 11829 ;; *************** function ___wmul *****************
 11830 ;; Defined at:
 11831 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11832 ;; Parameters:    Size  Location     Type
 11833 ;;  multiplier      2    2[COMMON] unsigned int 
 11834 ;;  multiplicand    2    4[COMMON] unsigned int 
 11835 ;; Auto vars:     Size  Location     Type
 11836 ;;  product         2    6[COMMON] unsigned int 
 11837 ;; Return value:  Size  Location     Type
 11838 ;;                  2    2[COMMON] unsigned int 
 11839 ;; Registers used:
 11840 ;;		wreg, status,2, status,0
 11841 ;; Tracked objects:
 11842 ;;		On entry : 0/0
 11843 ;;		On exit  : 0/0
 11844 ;;		Unchanged: 0/0
 11845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11846 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11847 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11850 ;;Total ram usage:        6 bytes
 11851 ;; Hardware stack levels used:    1
 11852 ;; Hardware stack levels required when called:    3
 11853 ;; This function calls:
 11854 ;;		Nothing
 11855 ;; This function is called by:
 11856 ;;		_Load_Main
 11857 ;; This function uses a non-reentrant model
 11858 ;;
 11859                           
 11860                           
 11861                           ;psect for function ___wmul
 11862  1C48                     ___wmul:	
 11863                           
 11864                           ;incstack = 0
 11865                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11866  1C48  01F6               	clrf	___wmul@product
 11867  1C49  01F7               	clrf	___wmul@product+1
 11868  1C4A                     l8961:	
 11869  1C4A  1C72               	btfss	___wmul@multiplier,0
 11870  1C4B  2C50               	goto	l3130
 11871  1C4C  0874               	movf	___wmul@multiplicand,w
 11872  1C4D  07F6               	addwf	___wmul@product,f
 11873  1C4E  0875               	movf	___wmul@multiplicand+1,w
 11874  1C4F  3DF7               	addwfc	___wmul@product+1,f
 11875  1C50                     l3130:	
 11876  1C50  3001               	movlw	1
 11877  1C51                     u9285:	
 11878  1C51  35F4               	lslf	___wmul@multiplicand,f
 11879  1C52  0DF5               	rlf	___wmul@multiplicand+1,f
 11880  1C53  0B89               	decfsz	9,f
 11881  1C54  2C51               	goto	u9285
 11882  1C55  3001               	movlw	1
 11883  1C56                     u9295:	
 11884  1C56  36F3               	lsrf	___wmul@multiplier+1,f
 11885  1C57  0CF2               	rrf	___wmul@multiplier,f
 11886  1C58  0B89               	decfsz	9,f
 11887  1C59  2C56               	goto	u9295
 11888  1C5A  0873               	movf	___wmul@multiplier+1,w
 11889  1C5B  0472               	iorwf	___wmul@multiplier,w
 11890  1C5C  1D03               	skipz
 11891  1C5D  2C4A               	goto	l8961
 11892  1C5E  0877               	movf	___wmul@product+1,w
 11893  1C5F  01F3               	clrf	?___wmul+1
 11894  1C60  07F3               	addwf	?___wmul+1,f
 11895  1C61  0876               	movf	___wmul@product,w
 11896  1C62  01F2               	clrf	?___wmul
 11897  1C63  07F2               	addwf	?___wmul,f
 11898  1C64  0008               	return
 11899  1C65                     __end_of___wmul:	
 11900                           
 11901                           	psect	text71
 11902  1F5D                     __ptext71:	
 11903 ;; *************** function ___lwdiv *****************
 11904 ;; Defined at:
 11905 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11906 ;; Parameters:    Size  Location     Type
 11907 ;;  divisor         2    2[COMMON] unsigned int 
 11908 ;;  dividend        2    4[COMMON] unsigned int 
 11909 ;; Auto vars:     Size  Location     Type
 11910 ;;  quotient        2    7[COMMON] unsigned int 
 11911 ;;  counter         1    9[COMMON] unsigned char 
 11912 ;; Return value:  Size  Location     Type
 11913 ;;                  2    2[COMMON] unsigned int 
 11914 ;; Registers used:
 11915 ;;		wreg, status,2, status,0
 11916 ;; Tracked objects:
 11917 ;;		On entry : 0/0
 11918 ;;		On exit  : 0/0
 11919 ;;		Unchanged: 0/0
 11920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11922 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11923 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;Total ram usage:        8 bytes
 11926 ;; Hardware stack levels used:    1
 11927 ;; Hardware stack levels required when called:    3
 11928 ;; This function calls:
 11929 ;;		Nothing
 11930 ;; This function is called by:
 11931 ;;		_Load_Main
 11932 ;;		_setTemp_Main
 11933 ;;		_setRF_Main
 11934 ;; This function uses a non-reentrant model
 11935 ;;
 11936                           
 11937                           
 11938                           ;psect for function ___lwdiv
 11939  1F5D                     ___lwdiv:	
 11940                           
 11941                           ;incstack = 0
 11942                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11943  1F5D  01F7               	clrf	___lwdiv@quotient
 11944  1F5E  01F8               	clrf	___lwdiv@quotient+1
 11945  1F5F  0873               	movf	___lwdiv@divisor+1,w
 11946  1F60  0472               	iorwf	___lwdiv@divisor,w
 11947  1F61  1903               	skipnz
 11948  1F62  2F8C               	goto	l8167
 11949  1F63  01F9               	clrf	___lwdiv@counter
 11950  1F64  0AF9               	incf	___lwdiv@counter,f
 11951  1F65                     l8155:	
 11952  1F65  1BF3               	btfsc	___lwdiv@divisor+1,7
 11953  1F66  2F71               	goto	l8157
 11954  1F67  3001               	movlw	1
 11955  1F68                     u7775:	
 11956  1F68  35F2               	lslf	___lwdiv@divisor,f
 11957  1F69  0DF3               	rlf	___lwdiv@divisor+1,f
 11958  1F6A  0B89               	decfsz	9,f
 11959  1F6B  2F68               	goto	u7775
 11960  1F6C  3001               	movlw	1
 11961  1F6D  00F6               	movwf	??___lwdiv
 11962  1F6E  0876               	movf	??___lwdiv,w
 11963  1F6F  07F9               	addwf	___lwdiv@counter,f
 11964  1F70  2F65               	goto	l8155
 11965  1F71                     l8157:	
 11966  1F71  3001               	movlw	1
 11967  1F72                     u7795:	
 11968  1F72  35F7               	lslf	___lwdiv@quotient,f
 11969  1F73  0DF8               	rlf	___lwdiv@quotient+1,f
 11970  1F74  0B89               	decfsz	9,f
 11971  1F75  2F72               	goto	u7795
 11972  1F76  0873               	movf	___lwdiv@divisor+1,w
 11973  1F77  0275               	subwf	___lwdiv@dividend+1,w
 11974  1F78  1D03               	skipz
 11975  1F79  2F7C               	goto	u7805
 11976  1F7A  0872               	movf	___lwdiv@divisor,w
 11977  1F7B  0274               	subwf	___lwdiv@dividend,w
 11978  1F7C                     u7805:	
 11979  1F7C  1C03               	skipc
 11980  1F7D  2F83               	goto	l8163
 11981  1F7E  0872               	movf	___lwdiv@divisor,w
 11982  1F7F  02F4               	subwf	___lwdiv@dividend,f
 11983  1F80  0873               	movf	___lwdiv@divisor+1,w
 11984  1F81  3BF5               	subwfb	___lwdiv@dividend+1,f
 11985  1F82  1477               	bsf	___lwdiv@quotient,0
 11986  1F83                     l8163:	
 11987  1F83  3001               	movlw	1
 11988  1F84                     u7815:	
 11989  1F84  36F3               	lsrf	___lwdiv@divisor+1,f
 11990  1F85  0CF2               	rrf	___lwdiv@divisor,f
 11991  1F86  0B89               	decfsz	9,f
 11992  1F87  2F84               	goto	u7815
 11993  1F88  3001               	movlw	1
 11994  1F89  02F9               	subwf	___lwdiv@counter,f
 11995  1F8A  1D03               	btfss	3,2
 11996  1F8B  2F71               	goto	l8157
 11997  1F8C                     l8167:	
 11998  1F8C  0878               	movf	___lwdiv@quotient+1,w
 11999  1F8D  01F3               	clrf	?___lwdiv+1
 12000  1F8E  07F3               	addwf	?___lwdiv+1,f
 12001  1F8F  0877               	movf	___lwdiv@quotient,w
 12002  1F90  01F2               	clrf	?___lwdiv
 12003  1F91  07F2               	addwf	?___lwdiv,f
 12004  1F92  0008               	return
 12005  1F93                     __end_of___lwdiv:	
 12006                           
 12007                           	psect	text72
 12008  27C0                     __ptext72:	
 12009 ;; *************** function _Load_Initialization *****************
 12010 ;; Defined at:
 12011 ;;		line 9 in file "../src/OverLoad_B1.c"
 12012 ;; Parameters:    Size  Location     Type
 12013 ;;		None
 12014 ;; Auto vars:     Size  Location     Type
 12015 ;;		None
 12016 ;; Return value:  Size  Location     Type
 12017 ;;		None               void
 12018 ;; Registers used:
 12019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12020 ;; Tracked objects:
 12021 ;;		On entry : 0/0
 12022 ;;		On exit  : 0/0
 12023 ;;		Unchanged: 0/0
 12024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12029 ;;Total ram usage:        0 bytes
 12030 ;; Hardware stack levels used:    1
 12031 ;; Hardware stack levels required when called:    4
 12032 ;; This function calls:
 12033 ;;		_setLoad_AH_AL_Restore
 12034 ;; This function is called by:
 12035 ;;		_main
 12036 ;; This function uses a non-reentrant model
 12037 ;;
 12038                           
 12039                           
 12040                           ;psect for function _Load_Initialization
 12041  27C0                     _Load_Initialization:	
 12042                           
 12043                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12044                           
 12045                           ;incstack = 0
 12046                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12047  27C0  319B  23BE         	fcall	_setLoad_AH_AL_Restore
 12048  27C2  0008               	return
 12049  27C3                     __end_of_Load_Initialization:	
 12050                           
 12051                           	psect	text73
 12052  1BBE                     __ptext73:	
 12053 ;; *************** function _setLoad_AH_AL_Restore *****************
 12054 ;; Defined at:
 12055 ;;		line 294 in file "../src/OverLoad_B1.c"
 12056 ;; Parameters:    Size  Location     Type
 12057 ;;		None
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;  i               1    3[COMMON] unsigned char 
 12060 ;; Return value:  Size  Location     Type
 12061 ;;		None               void
 12062 ;; Registers used:
 12063 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12064 ;; Tracked objects:
 12065 ;;		On entry : 0/0
 12066 ;;		On exit  : 0/0
 12067 ;;		Unchanged: 0/0
 12068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;Total ram usage:        2 bytes
 12074 ;; Hardware stack levels used:    1
 12075 ;; Hardware stack levels required when called:    3
 12076 ;; This function calls:
 12077 ;;		Nothing
 12078 ;; This function is called by:
 12079 ;;		_Load_Initialization
 12080 ;;		_Load_Main
 12081 ;; This function uses a non-reentrant model
 12082 ;;
 12083                           
 12084                           
 12085                           ;psect for function _setLoad_AH_AL_Restore
 12086  1BBE                     _setLoad_AH_AL_Restore:	
 12087                           
 12088                           ;OverLoad_B1.c: 295: char i;
 12089                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 12090                           
 12091                           ;incstack = 0
 12092                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12093  1BBE  01F3               	clrf	setLoad_AH_AL_Restore@i
 12094  1BBF                     L9:	
 12095  1BBF  3005               	movlw	5
 12096  1BC0  0273               	subwf	setLoad_AH_AL_Restore@i,w
 12097  1BC1  1803               	btfsc	3,0
 12098  1BC2  0008               	return
 12099                           
 12100                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 12101  1BC3  3573               	lslf	setLoad_AH_AL_Restore@i,w
 12102  1BC4  3E3D               	addlw	(_Load+11)& (0+255)
 12103  1BC5  0086               	movwf	6
 12104  1BC6  3001               	movlw	1	; select bank2/3
 12105  1BC7  0087               	movwf	7
 12106  1BC8  3000               	movlw	0
 12107  1BC9  3FC0               	movwi [0]fsr1
 12108  1BCA  3FC1               	movwi [1]fsr1
 12109                           
 12110                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 12111  1BCB  3573               	lslf	setLoad_AH_AL_Restore@i,w
 12112  1BCC  3E47               	addlw	(_Load+21)& (0+255)
 12113  1BCD  0086               	movwf	6
 12114  1BCE  3001               	movlw	1	; select bank2/3
 12115  1BCF  0087               	movwf	7
 12116  1BD0  30FF               	movlw	255
 12117  1BD1  3FC0               	movwi [0]fsr1
 12118  1BD2  30FF               	movlw	255
 12119  1BD3  3FC1               	movwi [1]fsr1
 12120  1BD4  3001               	movlw	1
 12121  1BD5  00F2               	movwf	??_setLoad_AH_AL_Restore
 12122  1BD6  0872               	movf	??_setLoad_AH_AL_Restore,w
 12123  1BD7  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 12124  1BD8  2BBF               	goto	L9
 12125  1BD9                     __end_of_setLoad_AH_AL_Restore:	
 12126                           
 12127                           	psect	text74
 12128  18D2                     __ptext74:	
 12129 ;; *************** function _LED_Main *****************
 12130 ;; Defined at:
 12131 ;;		line 47 in file "../src/LED_B1.c"
 12132 ;; Parameters:    Size  Location     Type
 12133 ;;		None
 12134 ;; Auto vars:     Size  Location     Type
 12135 ;;		None
 12136 ;; Return value:  Size  Location     Type
 12137 ;;		None               void
 12138 ;; Registers used:
 12139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12140 ;; Tracked objects:
 12141 ;;		On entry : 0/0
 12142 ;;		On exit  : 0/0
 12143 ;;		Unchanged: 0/0
 12144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;Total ram usage:        0 bytes
 12150 ;; Hardware stack levels used:    1
 12151 ;; Hardware stack levels required when called:    5
 12152 ;; This function calls:
 12153 ;;		_setLED_Main
 12154 ;; This function is called by:
 12155 ;;		_main
 12156 ;; This function uses a non-reentrant model
 12157 ;;
 12158                           
 12159                           
 12160                           ;psect for function _LED_Main
 12161  18D2                     _LED_Main:	
 12162                           
 12163                           ;LED_B1.c: 58: setLED_Main(1);
 12164                           
 12165                           ;incstack = 0
 12166                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12167  18D2  3001               	movlw	1
 12168  18D3  3191  21DD  3198   	fcall	_setLED_Main
 12169                           
 12170                           ;LED_B1.c: 61: setLED_Main(2);
 12171  18D6  3002               	movlw	2
 12172  18D7  3191  21DD  3198   	fcall	_setLED_Main
 12173                           
 12174                           ;LED_B1.c: 67: setLED_Main(99);
 12175  18DA  3063               	movlw	99
 12176  18DB  3191  21DD         	fcall	_setLED_Main
 12177  18DD  0008               	return
 12178  18DE                     __end_of_LED_Main:	
 12179                           
 12180                           	psect	text75
 12181  11DD                     __ptext75:	
 12182 ;; *************** function _setLED_Main *****************
 12183 ;; Defined at:
 12184 ;;		line 229 in file "../src/LED_B1.c"
 12185 ;; Parameters:    Size  Location     Type
 12186 ;;  led             1    wreg     unsigned char 
 12187 ;; Auto vars:     Size  Location     Type
 12188 ;;  led             1    6[COMMON] unsigned char 
 12189 ;; Return value:  Size  Location     Type
 12190 ;;		None               void
 12191 ;; Registers used:
 12192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12193 ;; Tracked objects:
 12194 ;;		On entry : 0/0
 12195 ;;		On exit  : 0/0
 12196 ;;		Unchanged: 0/0
 12197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;Total ram usage:        3 bytes
 12203 ;; Hardware stack levels used:    1
 12204 ;; Hardware stack levels required when called:    4
 12205 ;; This function calls:
 12206 ;;		_LedPointSelect
 12207 ;; This function is called by:
 12208 ;;		_LED_Main
 12209 ;; This function uses a non-reentrant model
 12210 ;;
 12211                           
 12212                           
 12213                           ;psect for function _setLED_Main
 12214  11DD                     _setLED_Main:	
 12215                           
 12216                           ;incstack = 0
 12217                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12218                           ;setLED_Main@led stored from wreg
 12219  11DD  00F6               	movwf	setLED_Main@led
 12220                           
 12221                           ;LED_B1.c: 230: LedPointSelect(led);
 12222  11DE  0876               	movf	setLED_Main@led,w
 12223  11DF  319C  242B  3191   	fcall	_LedPointSelect
 12224                           
 12225                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12226  11E2  0021               	movlb	1	; select bank1
 12227  11E3  086B               	movf	_LED^(0+128),w
 12228  11E4  0086               	movwf	6
 12229  11E5  3001               	movlw	1	; select bank2/3
 12230  11E6  0087               	movwf	7
 12231  11E7  1C81               	btfss	1,1
 12232  11E8  0008               	return
 12233                           
 12234                           ;LED_B1.c: 232: LED->Time++;
 12235  11E9  0A6B               	incf	_LED^(0+128),w
 12236  11EA  0086               	movwf	6
 12237  11EB  3001               	movlw	1	; select bank2/3
 12238  11EC  0087               	movwf	7
 12239  11ED  3001               	movlw	1
 12240  11EE  0781               	addwf	1,f
 12241  11EF  3141               	addfsr 1,1
 12242  11F0  1803               	skipnc
 12243  11F1  0A81               	incf	1,f
 12244                           
 12245                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12246  11F2  0A6B               	incf	_LED^(0+128),w
 12247  11F3  0086               	movwf	6
 12248  11F4  3001               	movlw	1	; select bank2/3
 12249  11F5  0087               	movwf	7
 12250  11F6  3F40               	moviw [0]fsr1
 12251  11F7  00F4               	movwf	??_setLED_Main
 12252  11F8  3F41               	moviw [1]fsr1
 12253  11F9  00F5               	movwf	??_setLED_Main+1
 12254  11FA  3000               	movlw	0
 12255  11FB  0275               	subwf	??_setLED_Main+1,w
 12256  11FC  3019               	movlw	25
 12257  11FD  1903               	skipnz
 12258  11FE  0274               	subwf	??_setLED_Main,w
 12259  11FF  1C03               	skipc
 12260  1200  0008               	return
 12261                           
 12262                           ;LED_B1.c: 234: LED->Time = 0;
 12263  1201  0A6B               	incf	_LED^(0+128),w
 12264  1202  0086               	movwf	6
 12265  1203  3001               	movlw	1	; select bank2/3
 12266  1204  0087               	movwf	7
 12267  1205  3000               	movlw	0
 12268  1206  3FC0               	movwi [0]fsr1
 12269  1207  3FC1               	movwi [1]fsr1
 12270                           
 12271                           ;LED_B1.c: 237: if (led == 1) {
 12272  1208  0876               	movf	setLED_Main@led,w
 12273  1209  3A01               	xorlw	1
 12274  120A  1D03               	skipz
 12275  120B  2A0F               	goto	l1225
 12276                           
 12277                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
 12278  120C  3080               	movlw	128
 12279  120D  0020               	movlb	0	; select bank0
 12280  120E  068E               	xorwf	14,f
 12281  120F                     l1225:	
 12282                           
 12283                           ;LED_B1.c: 239: }
 12284                           ;LED_B1.c: 242: if (led == 2) {
 12285  120F  0876               	movf	setLED_Main@led,w
 12286  1210  3A02               	xorlw	2
 12287  1211  1D03               	skipz
 12288  1212  2A16               	goto	l1226
 12289                           
 12290                           ;LED_B1.c: 243: RA3 = RA3 == 1 ? 0 : 1;
 12291  1213  3008               	movlw	8
 12292  1214  0020               	movlb	0	; select bank0
 12293  1215  068C               	xorwf	12,f
 12294  1216                     l1226:	
 12295                           
 12296                           ;LED_B1.c: 244: }
 12297                           ;LED_B1.c: 252: if (led == 99) {
 12298  1216  0876               	movf	setLED_Main@led,w
 12299  1217  3A63               	xorlw	99
 12300  1218  1D03               	skipz
 12301  1219  0008               	return
 12302                           
 12303                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12304  121A  3020               	movlw	32
 12305  121B  0020               	movlb	0	; select bank0
 12306  121C  068D               	xorwf	13,f
 12307  121D  0008               	return
 12308  121E                     __end_of_setLED_Main:	
 12309                           
 12310                           	psect	text76
 12311  18C6                     __ptext76:	
 12312 ;; *************** function _LED_Initialization *****************
 12313 ;; Defined at:
 12314 ;;		line 31 in file "../src/LED_B1.c"
 12315 ;; Parameters:    Size  Location     Type
 12316 ;;		None
 12317 ;; Auto vars:     Size  Location     Type
 12318 ;;		None
 12319 ;; Return value:  Size  Location     Type
 12320 ;;		None               void
 12321 ;; Registers used:
 12322 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12323 ;; Tracked objects:
 12324 ;;		On entry : 0/0
 12325 ;;		On exit  : 0/0
 12326 ;;		Unchanged: 0/0
 12327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;Total ram usage:        0 bytes
 12333 ;; Hardware stack levels used:    1
 12334 ;; Hardware stack levels required when called:    6
 12335 ;; This function calls:
 12336 ;;		_setLED_Initialization
 12337 ;; This function is called by:
 12338 ;;		_main
 12339 ;; This function uses a non-reentrant model
 12340 ;;
 12341                           
 12342                           
 12343                           ;psect for function _LED_Initialization
 12344  18C6                     _LED_Initialization:	
 12345                           
 12346                           ;LED_B1.c: 33: setLED_Initialization(1);
 12347                           
 12348                           ;incstack = 0
 12349                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12350  18C6  3001               	movlw	1
 12351  18C7  3199  218F  3198   	fcall	_setLED_Initialization
 12352                           
 12353                           ;LED_B1.c: 36: setLED_Initialization(2);
 12354  18CA  3002               	movlw	2
 12355  18CB  3199  218F  3198   	fcall	_setLED_Initialization
 12356                           
 12357                           ;LED_B1.c: 42: setLED_Initialization(99);
 12358  18CE  3063               	movlw	99
 12359  18CF  3199  218F         	fcall	_setLED_Initialization
 12360  18D1  0008               	return
 12361  18D2                     __end_of_LED_Initialization:	
 12362                           
 12363                           	psect	text77
 12364  198F                     __ptext77:	
 12365 ;; *************** function _setLED_Initialization *****************
 12366 ;; Defined at:
 12367 ;;		line 74 in file "../src/LED_B1.c"
 12368 ;; Parameters:    Size  Location     Type
 12369 ;;  led             1    wreg     unsigned char 
 12370 ;; Auto vars:     Size  Location     Type
 12371 ;;  led             1    6[COMMON] unsigned char 
 12372 ;; Return value:  Size  Location     Type
 12373 ;;		None               void
 12374 ;; Registers used:
 12375 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12376 ;; Tracked objects:
 12377 ;;		On entry : 0/0
 12378 ;;		On exit  : 0/0
 12379 ;;		Unchanged: 0/0
 12380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12382 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12384 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12385 ;;Total ram usage:        1 bytes
 12386 ;; Hardware stack levels used:    1
 12387 ;; Hardware stack levels required when called:    5
 12388 ;; This function calls:
 12389 ;;		_LedPointSelect
 12390 ;;		_setLED
 12391 ;; This function is called by:
 12392 ;;		_LED_Initialization
 12393 ;; This function uses a non-reentrant model
 12394 ;;
 12395                           
 12396                           
 12397                           ;psect for function _setLED_Initialization
 12398  198F                     _setLED_Initialization:	
 12399                           
 12400                           ;incstack = 0
 12401                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12402                           ;setLED_Initialization@led stored from wreg
 12403  198F  00F6               	movwf	setLED_Initialization@led
 12404                           
 12405                           ;LED_B1.c: 75: LedPointSelect(led);
 12406  1990  0876               	movf	setLED_Initialization@led,w
 12407  1991  319C  242B  3199   	fcall	_LedPointSelect
 12408                           
 12409                           ;LED_B1.c: 76: LED->Enable = 1;
 12410  1994  0021               	movlb	1	; select bank1
 12411  1995  086B               	movf	_LED^(0+128),w
 12412  1996  0086               	movwf	6
 12413  1997  3001               	movlw	1	; select bank2/3
 12414  1998  0087               	movwf	7
 12415  1999  1401               	bsf	1,0
 12416                           
 12417                           ;LED_B1.c: 77: setLED(led, 0);
 12418  199A  01F4               	clrf	setLED@command
 12419  199B  0876               	movf	setLED_Initialization@led,w
 12420  199C  3194  24ED         	fcall	_setLED
 12421  199E  0008               	return
 12422  199F                     __end_of_setLED_Initialization:	
 12423                           
 12424                           	psect	text78
 12425  119C                     __ptext78:	
 12426 ;; *************** function _Flash_Memory_Main *****************
 12427 ;; Defined at:
 12428 ;;		line 978 in file "../src/MCU_B1.c"
 12429 ;; Parameters:    Size  Location     Type
 12430 ;;		None
 12431 ;; Auto vars:     Size  Location     Type
 12432 ;;  key_Status      1    0[BANK0 ] unsigned char 
 12433 ;; Return value:  Size  Location     Type
 12434 ;;		None               void
 12435 ;; Registers used:
 12436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12437 ;; Tracked objects:
 12438 ;;		On entry : 0/0
 12439 ;;		On exit  : 0/0
 12440 ;;		Unchanged: 0/0
 12441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12443 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12446 ;;Total ram usage:        3 bytes
 12447 ;; Hardware stack levels used:    1
 12448 ;; Hardware stack levels required when called:    6
 12449 ;; This function calls:
 12450 ;;		_Flash_Memory_Modify
 12451 ;;		_getAll_Sw_KeyStatus
 12452 ;;		_getMain_All_LightsStatus
 12453 ;; This function is called by:
 12454 ;;		_main
 12455 ;; This function uses a non-reentrant model
 12456 ;;
 12457                           
 12458                           
 12459                           ;psect for function _Flash_Memory_Main
 12460  119C                     _Flash_Memory_Main:	
 12461                           
 12462                           ;MCU_B1.c: 979: char key_Status = 0;
 12463                           
 12464                           ;incstack = 0
 12465                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12466  119C  0020               	movlb	0	; select bank0
 12467  119D  01A0               	clrf	Flash_Memory_Main@key_Status
 12468                           
 12469                           ;MCU_B1.c: 981: key_Status = getAll_Sw_KeyStatus();
 12470  119E  3198  20EA  3191   	fcall	_getAll_Sw_KeyStatus
 12471  11A1  00F8               	movwf	??_Flash_Memory_Main
 12472  11A2  0878               	movf	??_Flash_Memory_Main,w
 12473  11A3  0020               	movlb	0	; select bank0
 12474  11A4  00A0               	movwf	Flash_Memory_Main@key_Status
 12475                           
 12476                           ;MCU_B1.c: 983: if (Memory.Modify == 1) {
 12477  11A5  0024               	movlb	4	; select bank4
 12478  11A6  1C54               	btfss	(_Memory^(0+512)+36),0
 12479  11A7  0008               	return
 12480                           
 12481                           ;MCU_B1.c: 984: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12482  11A8  0020               	movlb	0	; select bank0
 12483  11A9  01A1               	clrf	_Flash_Memory_Main$3708
 12484  11AA  3199  2141  3191   	fcall	_getMain_All_LightsStatus
 12485  11AD  3800               	iorlw	0
 12486  11AE  1D03               	skipz
 12487  11AF  29B6               	goto	l10985
 12488  11B0  0020               	movlb	0	; select bank0
 12489  11B1  08A0               	movf	Flash_Memory_Main@key_Status,f
 12490  11B2  1D03               	skipz
 12491  11B3  29B6               	goto	l10985
 12492  11B4  01A1               	clrf	_Flash_Memory_Main$3708
 12493  11B5  0AA1               	incf	_Flash_Memory_Main$3708,f
 12494  11B6                     l10985:	
 12495  11B6  0020               	movlb	0	; select bank0
 12496  11B7  0821               	movf	_Flash_Memory_Main$3708,w
 12497  11B8  0024               	movlb	4	; select bank4
 12498  11B9  10D4               	bcf	(_Memory^(0+512)+36),1
 12499  11BA  1D03               	skipz
 12500  11BB  14D4               	bsf	(_Memory^(0+512)+36),1
 12501                           
 12502                           ;MCU_B1.c: 985: if (Memory.GO == 1) {
 12503  11BC  1CD4               	btfss	(_Memory^(0+512)+36),1
 12504  11BD  29D7               	goto	l1501
 12505                           
 12506                           ;MCU_B1.c: 986: Memory.Runtime = 1;
 12507  11BE  15D4               	bsf	(_Memory^(0+512)+36),3
 12508                           
 12509                           ;MCU_B1.c: 987: Memory.Time++;
 12510  11BF  3001               	movlw	1
 12511  11C0  07D2               	addwf	(_Memory^(0+512)+34),f
 12512  11C1  3000               	movlw	0
 12513  11C2  3DD3               	addwfc	((_Memory+1)^(0+512)+34),f
 12514                           
 12515                           ;MCU_B1.c: 988: if (Memory.Time == (200 / 20)) {
 12516  11C3  3022               	movlw	34
 12517  11C4  3E30               	addlw	_Memory& (0+255)
 12518  11C5  0086               	movwf	6
 12519  11C6  3002               	movlw	2	; select bank4/5
 12520  11C7  0087               	movwf	7
 12521  11C8  3F40               	moviw [0]fsr1
 12522  11C9  3A0A               	xorlw	10
 12523  11CA  1D03               	skipz
 12524  11CB  29CE               	goto	u12455
 12525  11CC  3F41               	moviw [1]fsr1
 12526  11CD  3A00               	xorlw	0
 12527  11CE                     u12455:	
 12528  11CE  1D03               	skipz
 12529  11CF  0008               	return
 12530                           
 12531                           ;MCU_B1.c: 989: Memory.Time = 0;
 12532  11D0  01D2               	clrf	(_Memory^(0+512)+34)
 12533  11D1  01D3               	clrf	((_Memory+1)^(0+512)+34)
 12534                           
 12535                           ;MCU_B1.c: 990: Memory.Modify = 0;
 12536  11D2  1054               	bcf	(_Memory^(0+512)+36),0
 12537                           
 12538                           ;MCU_B1.c: 991: Memory.GO = 0;
 12539  11D3  10D4               	bcf	(_Memory^(0+512)+36),1
 12540                           
 12541                           ;MCU_B1.c: 992: Flash_Memory_Modify();
 12542  11D4  3189  21D6         	fcall	_Flash_Memory_Modify
 12543                           
 12544                           ;MCU_B1.c: 993: }
 12545                           ;MCU_B1.c: 994: } else {
 12546  11D6  0008               	return
 12547  11D7                     l1501:	
 12548                           
 12549                           ;MCU_B1.c: 995: if (Memory.Runtime == 1) {
 12550  11D7  1DD4               	btfss	(_Memory^(0+512)+36),3
 12551  11D8  0008               	return
 12552                           
 12553                           ;MCU_B1.c: 996: Memory.Runtime = 0;
 12554  11D9  11D4               	bcf	(_Memory^(0+512)+36),3
 12555                           
 12556                           ;MCU_B1.c: 997: Memory.Time = 0;
 12557  11DA  01D2               	clrf	(_Memory^(0+512)+34)
 12558  11DB  01D3               	clrf	((_Memory+1)^(0+512)+34)
 12559  11DC  0008               	return
 12560  11DD                     __end_of_Flash_Memory_Main:	
 12561                           
 12562                           	psect	text79
 12563  18EA                     __ptext79:	
 12564 ;; *************** function _getAll_Sw_KeyStatus *****************
 12565 ;; Defined at:
 12566 ;;		line 286 in file "../src/Switch_B1.c"
 12567 ;; Parameters:    Size  Location     Type
 12568 ;;		None
 12569 ;; Auto vars:     Size  Location     Type
 12570 ;;  status          1    3[COMMON] unsigned char 
 12571 ;; Return value:  Size  Location     Type
 12572 ;;                  1    wreg      unsigned char 
 12573 ;; Registers used:
 12574 ;;		wreg, status,2
 12575 ;; Tracked objects:
 12576 ;;		On entry : 0/0
 12577 ;;		On exit  : 0/0
 12578 ;;		Unchanged: 0/0
 12579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12581 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12582 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12583 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12584 ;;Total ram usage:        3 bytes
 12585 ;; Hardware stack levels used:    1
 12586 ;; Hardware stack levels required when called:    3
 12587 ;; This function calls:
 12588 ;;		Nothing
 12589 ;; This function is called by:
 12590 ;;		_Flash_Memory_Main
 12591 ;; This function uses a non-reentrant model
 12592 ;;
 12593                           
 12594                           
 12595                           ;psect for function _getAll_Sw_KeyStatus
 12596  18EA                     _getAll_Sw_KeyStatus:	
 12597                           
 12598                           ;Switch_B1.c: 287: char status = 0;
 12599                           
 12600                           ;incstack = 0
 12601                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12602  18EA  01F3               	clrf	getAll_Sw_KeyStatus@status
 12603                           
 12604                           ;Switch_B1.c: 299: status = (RA6 == 1 || RA0 == 1) ? 1 : 0;
 12605  18EB  01F4               	clrf	_getAll_Sw_KeyStatus$7441
 12606  18EC  0AF4               	incf	_getAll_Sw_KeyStatus$7441,f
 12607  18ED  0020               	movlb	0	; select bank0
 12608  18EE  1F0C               	btfss	12,6	;volatile
 12609  18EF  180C               	btfsc	12,0	;volatile
 12610  18F0  28F2               	goto	l10645
 12611  18F1  01F4               	clrf	_getAll_Sw_KeyStatus$7441
 12612  18F2                     l10645:	
 12613  18F2  0874               	movf	_getAll_Sw_KeyStatus$7441,w
 12614  18F3  00F2               	movwf	??_getAll_Sw_KeyStatus
 12615  18F4  0872               	movf	??_getAll_Sw_KeyStatus,w
 12616  18F5  00F3               	movwf	getAll_Sw_KeyStatus@status
 12617                           
 12618                           ;Switch_B1.c: 315: return status;
 12619  18F6  0873               	movf	getAll_Sw_KeyStatus@status,w
 12620  18F7  0008               	return
 12621  18F8                     __end_of_getAll_Sw_KeyStatus:	
 12622                           
 12623                           	psect	text80
 12624  09D6                     __ptext80:	
 12625 ;; *************** function _Flash_Memory_Modify *****************
 12626 ;; Defined at:
 12627 ;;		line 1055 in file "../src/MCU_B1.c"
 12628 ;; Parameters:    Size  Location     Type
 12629 ;;		None
 12630 ;; Auto vars:     Size  Location     Type
 12631 ;;  i               1    7[COMMON] unsigned char 
 12632 ;; Return value:  Size  Location     Type
 12633 ;;		None               void
 12634 ;; Registers used:
 12635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12636 ;; Tracked objects:
 12637 ;;		On entry : 0/0
 12638 ;;		On exit  : 0/0
 12639 ;;		Unchanged: 0/0
 12640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;Total ram usage:        2 bytes
 12646 ;; Hardware stack levels used:    1
 12647 ;; Hardware stack levels required when called:    5
 12648 ;; This function calls:
 12649 ;;		_Flash_Memory_Erasing
 12650 ;;		_Flash_Memory_Read
 12651 ;;		_Flash_Memory_Write
 12652 ;;		_setMemory_Data
 12653 ;; This function is called by:
 12654 ;;		_Flash_Memory_Main
 12655 ;; This function uses a non-reentrant model
 12656 ;;
 12657                           
 12658                           
 12659                           ;psect for function _Flash_Memory_Modify
 12660  09D6                     _Flash_Memory_Modify:	
 12661                           
 12662                           ;MCU_B1.c: 1056: char i = 0;
 12663                           
 12664                           ;incstack = 0
 12665                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12666  09D6  01F7               	clrf	Flash_Memory_Modify@i
 12667                           
 12668                           ;MCU_B1.c: 1057: for (i = 0; i < 32; i++) {
 12669  09D7  01F7               	clrf	Flash_Memory_Modify@i
 12670  09D8  3020               	movlw	32
 12671  09D9  0277               	subwf	Flash_Memory_Modify@i,w
 12672  09DA  1803               	btfsc	3,0
 12673  09DB  29F0               	goto	l10663
 12674  09DC                     l10657:	
 12675                           
 12676                           ;MCU_B1.c: 1058: Memory.Data[i] = Flash_Memory_Read(i);
 12677  09DC  0877               	movf	Flash_Memory_Modify@i,w
 12678  09DD  3190  2066  3189   	fcall	_Flash_Memory_Read
 12679  09E0  00F6               	movwf	??_Flash_Memory_Modify
 12680  09E1  0877               	movf	Flash_Memory_Modify@i,w
 12681  09E2  3E30               	addlw	_Memory& (0+255)
 12682  09E3  0086               	movwf	6
 12683  09E4  3002               	movlw	2	; select bank4/5
 12684  09E5  0087               	movwf	7
 12685  09E6  0876               	movf	??_Flash_Memory_Modify,w
 12686  09E7  0081               	movwf	1
 12687  09E8  3001               	movlw	1
 12688  09E9  00F6               	movwf	??_Flash_Memory_Modify
 12689  09EA  0876               	movf	??_Flash_Memory_Modify,w
 12690  09EB  07F7               	addwf	Flash_Memory_Modify@i,f
 12691  09EC  3020               	movlw	32
 12692  09ED  0277               	subwf	Flash_Memory_Modify@i,w
 12693  09EE  1C03               	skipc
 12694  09EF  29DC               	goto	l10657
 12695  09F0                     l10663:	
 12696                           
 12697                           ;MCU_B1.c: 1059: }
 12698                           ;MCU_B1.c: 1060: setMemory_Data(6, product->Data[11]);
 12699  09F0  087B               	movf	_product,w
 12700  09F1  0086               	movwf	6
 12701  09F2  3002               	movlw	2	; select bank4/5
 12702  09F3  0087               	movwf	7
 12703  09F4  3002               	movlw	2	; select bank4/5
 12704  09F5  3F4B               	moviw [11]fsr1
 12705  09F6  00F2               	movwf	setMemory_Data@data
 12706  09F7  3006               	movlw	6
 12707  09F8  3198  2076  3189   	fcall	_setMemory_Data
 12708                           
 12709                           ;MCU_B1.c: 1061: setMemory_Data(0, product->Data[12]);
 12710  09FB  087B               	movf	_product,w
 12711  09FC  0086               	movwf	6
 12712  09FD  3002               	movlw	2	; select bank4/5
 12713  09FE  0087               	movwf	7
 12714  09FF  3002               	movlw	2	; select bank4/5
 12715  0A00  3F4C               	moviw [12]fsr1
 12716  0A01  00F2               	movwf	setMemory_Data@data
 12717  0A02  3000               	movlw	0
 12718  0A03  3198  2076  3189   	fcall	_setMemory_Data
 12719                           
 12720                           ;MCU_B1.c: 1062: setMemory_Data(1, product->Data[13]);
 12721  0A06  087B               	movf	_product,w
 12722  0A07  0086               	movwf	6
 12723  0A08  3002               	movlw	2	; select bank4/5
 12724  0A09  0087               	movwf	7
 12725  0A0A  3002               	movlw	2	; select bank4/5
 12726  0A0B  3F4D               	moviw [13]fsr1
 12727  0A0C  00F2               	movwf	setMemory_Data@data
 12728  0A0D  3001               	movlw	1
 12729  0A0E  3198  2076  3189   	fcall	_setMemory_Data
 12730                           
 12731                           ;MCU_B1.c: 1063: setMemory_Data(2, product->Data[14]);
 12732  0A11  087B               	movf	_product,w
 12733  0A12  0086               	movwf	6
 12734  0A13  3002               	movlw	2	; select bank4/5
 12735  0A14  0087               	movwf	7
 12736  0A15  3002               	movlw	2	; select bank4/5
 12737  0A16  3F4E               	moviw [14]fsr1
 12738  0A17  00F2               	movwf	setMemory_Data@data
 12739  0A18  3002               	movlw	2
 12740  0A19  3198  2076  3189   	fcall	_setMemory_Data
 12741                           
 12742                           ;MCU_B1.c: 1065: setMemory_Data(3, product->Data[21]);
 12743  0A1C  087B               	movf	_product,w
 12744  0A1D  0086               	movwf	6
 12745  0A1E  3002               	movlw	2	; select bank4/5
 12746  0A1F  0087               	movwf	7
 12747  0A20  3002               	movlw	2	; select bank4/5
 12748  0A21  3F55               	moviw [21]fsr1
 12749  0A22  00F2               	movwf	setMemory_Data@data
 12750  0A23  3003               	movlw	3
 12751  0A24  3198  2076  3189   	fcall	_setMemory_Data
 12752                           
 12753                           ;MCU_B1.c: 1066: setMemory_Data(4, product->Data[22]);
 12754  0A27  087B               	movf	_product,w
 12755  0A28  0086               	movwf	6
 12756  0A29  3002               	movlw	2	; select bank4/5
 12757  0A2A  0087               	movwf	7
 12758  0A2B  3002               	movlw	2	; select bank4/5
 12759  0A2C  3F56               	moviw [22]fsr1
 12760  0A2D  00F2               	movwf	setMemory_Data@data
 12761  0A2E  3004               	movlw	4
 12762  0A2F  3198  2076  3189   	fcall	_setMemory_Data
 12763                           
 12764                           ;MCU_B1.c: 1067: setMemory_Data(5, product->Data[23]);
 12765  0A32  087B               	movf	_product,w
 12766  0A33  0086               	movwf	6
 12767  0A34  3002               	movlw	2	; select bank4/5
 12768  0A35  0087               	movwf	7
 12769  0A36  3002               	movlw	2	; select bank4/5
 12770  0A37  3F57               	moviw [23]fsr1
 12771  0A38  00F2               	movwf	setMemory_Data@data
 12772  0A39  3005               	movlw	5
 12773  0A3A  3198  2076  3189   	fcall	_setMemory_Data
 12774                           
 12775                           ;MCU_B1.c: 1068: if (myMain.SaveDimmer == 1) {
 12776  0A3D  0021               	movlb	1	; select bank1
 12777  0A3E  1ED9               	btfss	(_myMain^(0+128)+10),5
 12778  0A3F  2A49               	goto	l10671
 12779                           
 12780                           ;MCU_B1.c: 1069: myMain.SaveDimmer = 0;
 12781  0A40  12D9               	bcf	(_myMain^(0+128)+10),5
 12782                           
 12783                           ;MCU_B1.c: 1070: setMemory_Data(30, 0xaa);
 12784  0A41  30AA               	movlw	170
 12785  0A42  00F6               	movwf	??_Flash_Memory_Modify
 12786  0A43  0876               	movf	??_Flash_Memory_Modify,w
 12787  0A44  00F2               	movwf	setMemory_Data@data
 12788  0A45  301E               	movlw	30
 12789  0A46  3198  2076  3189   	fcall	_setMemory_Data
 12790  0A49                     l10671:	
 12791                           
 12792                           ;MCU_B1.c: 1071: }
 12793                           ;MCU_B1.c: 1073: if (Memory.LoopSave == 1) {
 12794  0A49  0024               	movlb	4	; select bank4
 12795  0A4A  1D54               	btfss	(_Memory^(0+512)+36),2
 12796  0A4B  2A50               	goto	l1525
 12797                           
 12798                           ;MCU_B1.c: 1074: Memory.LoopSave = 0;
 12799  0A4C  1154               	bcf	(_Memory^(0+512)+36),2
 12800                           
 12801                           ;MCU_B1.c: 1075: myMain.FirstOpen = 0;
 12802  0A4D  0021               	movlb	1	; select bank1
 12803  0A4E  11CF               	bcf	_myMain^(0+128),3
 12804                           
 12805                           ;MCU_B1.c: 1076: myMain.First = 0;
 12806  0A4F  12CF               	bcf	_myMain^(0+128),5
 12807  0A50                     l1525:	
 12808                           
 12809                           ;MCU_B1.c: 1078: }
 12810                           ;MCU_B1.c: 1079: GIE = 0;
 12811  0A50  138B               	bcf	11,7	;volatile
 12812                           
 12813                           ;MCU_B1.c: 1080: Flash_Memory_Erasing();
 12814  0A51  3198  20BA  3189   	fcall	_Flash_Memory_Erasing
 12815                           
 12816                           ;MCU_B1.c: 1081: Flash_Memory_Write();
 12817  0A54  319D  25E8         	fcall	_Flash_Memory_Write
 12818                           
 12819                           ;MCU_B1.c: 1082: GIE = 1;
 12820  0A56  178B               	bsf	11,7	;volatile
 12821  0A57  0008               	return
 12822  0A58                     __end_of_Flash_Memory_Modify:	
 12823                           
 12824                           	psect	text81
 12825  18BA                     __ptext81:	
 12826 ;; *************** function _Flash_Memory_Erasing *****************
 12827 ;; Defined at:
 12828 ;;		line 1044 in file "../src/MCU_B1.c"
 12829 ;; Parameters:    Size  Location     Type
 12830 ;;		None
 12831 ;; Auto vars:     Size  Location     Type
 12832 ;;		None
 12833 ;; Return value:  Size  Location     Type
 12834 ;;		None               void
 12835 ;; Registers used:
 12836 ;;		wreg, status,2, status,0, pclath, cstack
 12837 ;; Tracked objects:
 12838 ;;		On entry : 0/0
 12839 ;;		On exit  : 0/0
 12840 ;;		Unchanged: 0/0
 12841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12846 ;;Total ram usage:        0 bytes
 12847 ;; Hardware stack levels used:    1
 12848 ;; Hardware stack levels required when called:    4
 12849 ;; This function calls:
 12850 ;;		_Flash_Memory_Unlock
 12851 ;; This function is called by:
 12852 ;;		_Flash_Memory_Modify
 12853 ;; This function uses a non-reentrant model
 12854 ;;
 12855                           
 12856                           
 12857                           ;psect for function _Flash_Memory_Erasing
 12858  18BA                     _Flash_Memory_Erasing:	
 12859                           
 12860                           ;MCU_B1.c: 1045: CFGS = 0;
 12861                           
 12862                           ;incstack = 0
 12863                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12864  18BA  0023               	movlb	3	; select bank3
 12865  18BB  1315               	bcf	21,6	;volatile
 12866                           
 12867                           ;MCU_B1.c: 1046: PMADRH = 0x30;
 12868  18BC  3030               	movlw	48
 12869  18BD  0092               	movwf	18	;volatile
 12870                           
 12871                           ;MCU_B1.c: 1047: PMADRL = 0x00;
 12872  18BE  0191               	clrf	17	;volatile
 12873                           
 12874                           ;MCU_B1.c: 1048: FREE = 1;
 12875  18BF  1615               	bsf	21,4	;volatile
 12876                           
 12877                           ;MCU_B1.c: 1049: WREN = 1;
 12878  18C0  1515               	bsf	21,2	;volatile
 12879                           
 12880                           ;MCU_B1.c: 1050: Flash_Memory_Unlock();
 12881  18C1  3187  27F7         	fcall	_Flash_Memory_Unlock
 12882                           
 12883                           ;MCU_B1.c: 1051: WREN = 0;
 12884  18C3  0023               	movlb	3	; select bank3
 12885  18C4  1115               	bcf	21,2	;volatile
 12886  18C5  0008               	return
 12887  18C6                     __end_of_Flash_Memory_Erasing:	
 12888                           
 12889                           	psect	text82
 12890  0601                     __ptext82:	
 12891 ;; *************** function _Flash_Memory_Initialization *****************
 12892 ;; Defined at:
 12893 ;;		line 932 in file "../src/MCU_B1.c"
 12894 ;; Parameters:    Size  Location     Type
 12895 ;;		None
 12896 ;; Auto vars:     Size  Location     Type
 12897 ;;  value           1    7[COMMON] unsigned char 
 12898 ;; Return value:  Size  Location     Type
 12899 ;;		None               void
 12900 ;; Registers used:
 12901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12902 ;; Tracked objects:
 12903 ;;		On entry : 0/0
 12904 ;;		On exit  : 0/0
 12905 ;;		Unchanged: 0/0
 12906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12911 ;;Total ram usage:        2 bytes
 12912 ;; Hardware stack levels used:    1
 12913 ;; Hardware stack levels required when called:    5
 12914 ;; This function calls:
 12915 ;;		_Flash_Memory_Read
 12916 ;;		_Flash_Memory_Write
 12917 ;;		_setMemory_Data
 12918 ;; This function is called by:
 12919 ;;		_main
 12920 ;; This function uses a non-reentrant model
 12921 ;;
 12922                           
 12923                           
 12924                           ;psect for function _Flash_Memory_Initialization
 12925  0601                     _Flash_Memory_Initialization:	
 12926                           
 12927                           ;MCU_B1.c: 933: char value = 0;
 12928                           
 12929                           ;incstack = 0
 12930                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12931  0601  01F7               	clrf	Flash_Memory_Initialization@value
 12932                           
 12933                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12934  0602  301F               	movlw	31
 12935  0603  3190  2066  3186   	fcall	_Flash_Memory_Read
 12936  0606  3AAA               	xorlw	170
 12937  0607  1D03               	skipz
 12938  0608  2E7C               	goto	l10959
 12939                           
 12940                           ;MCU_B1.c: 935: product->Data[11] = Flash_Memory_Read(6);
 12941  0609  3006               	movlw	6
 12942  060A  3190  2066  3186   	fcall	_Flash_Memory_Read
 12943  060D  00F6               	movwf	??_Flash_Memory_Initialization
 12944  060E  087B               	movf	_product,w
 12945  060F  3E0B               	addlw	11
 12946  0610  0086               	movwf	6
 12947  0611  3002               	movlw	2	; select bank4/5
 12948  0612  0087               	movwf	7
 12949  0613  0876               	movf	??_Flash_Memory_Initialization,w
 12950  0614  0081               	movwf	1
 12951                           
 12952                           ;MCU_B1.c: 936: product->Data[12] = Flash_Memory_Read(0);
 12953  0615  3000               	movlw	0
 12954  0616  3190  2066  3186   	fcall	_Flash_Memory_Read
 12955  0619  00F6               	movwf	??_Flash_Memory_Initialization
 12956  061A  087B               	movf	_product,w
 12957  061B  3E0C               	addlw	12
 12958  061C  0086               	movwf	6
 12959  061D  3002               	movlw	2	; select bank4/5
 12960  061E  0087               	movwf	7
 12961  061F  0876               	movf	??_Flash_Memory_Initialization,w
 12962  0620  0081               	movwf	1
 12963                           
 12964                           ;MCU_B1.c: 937: product->Data[13] = Flash_Memory_Read(1);
 12965  0621  3001               	movlw	1
 12966  0622  3190  2066  3186   	fcall	_Flash_Memory_Read
 12967  0625  00F6               	movwf	??_Flash_Memory_Initialization
 12968  0626  087B               	movf	_product,w
 12969  0627  3E0D               	addlw	13
 12970  0628  0086               	movwf	6
 12971  0629  3002               	movlw	2	; select bank4/5
 12972  062A  0087               	movwf	7
 12973  062B  0876               	movf	??_Flash_Memory_Initialization,w
 12974  062C  0081               	movwf	1
 12975                           
 12976                           ;MCU_B1.c: 938: product->Data[14] = Flash_Memory_Read(2);
 12977  062D  3002               	movlw	2
 12978  062E  3190  2066  3186   	fcall	_Flash_Memory_Read
 12979  0631  00F6               	movwf	??_Flash_Memory_Initialization
 12980  0632  087B               	movf	_product,w
 12981  0633  3E0E               	addlw	14
 12982  0634  0086               	movwf	6
 12983  0635  3002               	movlw	2	; select bank4/5
 12984  0636  0087               	movwf	7
 12985  0637  0876               	movf	??_Flash_Memory_Initialization,w
 12986  0638  0081               	movwf	1
 12987                           
 12988                           ;MCU_B1.c: 941: product->Data[21] = Flash_Memory_Read(3);
 12989  0639  3003               	movlw	3
 12990  063A  3190  2066  3186   	fcall	_Flash_Memory_Read
 12991  063D  00F6               	movwf	??_Flash_Memory_Initialization
 12992  063E  087B               	movf	_product,w
 12993  063F  3E15               	addlw	21
 12994  0640  0086               	movwf	6
 12995  0641  3002               	movlw	2	; select bank4/5
 12996  0642  0087               	movwf	7
 12997  0643  0876               	movf	??_Flash_Memory_Initialization,w
 12998  0644  0081               	movwf	1
 12999                           
 13000                           ;MCU_B1.c: 942: product->Data[22] = Flash_Memory_Read(4);
 13001  0645  3004               	movlw	4
 13002  0646  3190  2066  3186   	fcall	_Flash_Memory_Read
 13003  0649  00F6               	movwf	??_Flash_Memory_Initialization
 13004  064A  087B               	movf	_product,w
 13005  064B  3E16               	addlw	22
 13006  064C  0086               	movwf	6
 13007  064D  3002               	movlw	2	; select bank4/5
 13008  064E  0087               	movwf	7
 13009  064F  0876               	movf	??_Flash_Memory_Initialization,w
 13010  0650  0081               	movwf	1
 13011                           
 13012                           ;MCU_B1.c: 943: product->Data[23] = Flash_Memory_Read(5);
 13013  0651  3005               	movlw	5
 13014  0652  3190  2066  3186   	fcall	_Flash_Memory_Read
 13015  0655  00F6               	movwf	??_Flash_Memory_Initialization
 13016  0656  087B               	movf	_product,w
 13017  0657  3E17               	addlw	23
 13018  0658  0086               	movwf	6
 13019  0659  3002               	movlw	2	; select bank4/5
 13020  065A  0087               	movwf	7
 13021  065B  0876               	movf	??_Flash_Memory_Initialization,w
 13022  065C  0081               	movwf	1
 13023                           
 13024                           ;MCU_B1.c: 950: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 13025  065D  087B               	movf	_product,w
 13026  065E  3E0C               	addlw	12
 13027  065F  0086               	movwf	6
 13028  0660  3002               	movlw	2	; select bank4/5
 13029  0661  0087               	movwf	7
 13030  0662  0801               	movf	1,w
 13031  0663  3AFF               	xorlw	255
 13032  0664  1D03               	skipz
 13033  0665  0008               	return
 13034  0666  087B               	movf	_product,w
 13035  0667  3E0D               	addlw	13
 13036  0668  0086               	movwf	6
 13037  0669  3002               	movlw	2	; select bank4/5
 13038  066A  0087               	movwf	7
 13039  066B  0801               	movf	1,w
 13040  066C  3AFF               	xorlw	255
 13041  066D  1D03               	skipz
 13042  066E  0008               	return
 13043  066F  087B               	movf	_product,w
 13044  0670  3E0E               	addlw	14
 13045  0671  0086               	movwf	6
 13046  0672  3002               	movlw	2	; select bank4/5
 13047  0673  0087               	movwf	7
 13048  0674  0801               	movf	1,w
 13049  0675  3AFF               	xorlw	255
 13050  0676  1D03               	skipz
 13051  0677  0008               	return
 13052                           
 13053                           ;MCU_B1.c: 951: myMain.FirstOpen = 1;
 13054  0678  0021               	movlb	1	; select bank1
 13055  0679  15CF               	bsf	_myMain^(0+128),3
 13056                           
 13057                           ;MCU_B1.c: 952: myMain.First = 1;
 13058  067A  16CF               	bsf	_myMain^(0+128),5
 13059                           
 13060                           ;MCU_B1.c: 953: }
 13061                           ;MCU_B1.c: 954: } else {
 13062  067B  0008               	return
 13063  067C                     l10959:	
 13064                           
 13065                           ;MCU_B1.c: 956: setMemory_Data(0, 0xff);
 13066  067C  30FF               	movlw	255
 13067  067D  00F6               	movwf	??_Flash_Memory_Initialization
 13068  067E  0876               	movf	??_Flash_Memory_Initialization,w
 13069  067F  00F2               	movwf	setMemory_Data@data
 13070  0680  3000               	movlw	0
 13071  0681  3198  2076  3186   	fcall	_setMemory_Data
 13072                           
 13073                           ;MCU_B1.c: 957: setMemory_Data(1, 0xff);
 13074  0684  30FF               	movlw	255
 13075  0685  00F6               	movwf	??_Flash_Memory_Initialization
 13076  0686  0876               	movf	??_Flash_Memory_Initialization,w
 13077  0687  00F2               	movwf	setMemory_Data@data
 13078  0688  3001               	movlw	1
 13079  0689  3198  2076  3186   	fcall	_setMemory_Data
 13080                           
 13081                           ;MCU_B1.c: 958: setMemory_Data(2, 0xff);
 13082  068C  30FF               	movlw	255
 13083  068D  00F6               	movwf	??_Flash_Memory_Initialization
 13084  068E  0876               	movf	??_Flash_Memory_Initialization,w
 13085  068F  00F2               	movwf	setMemory_Data@data
 13086  0690  3002               	movlw	2
 13087  0691  3198  2076  3186   	fcall	_setMemory_Data
 13088                           
 13089                           ;MCU_B1.c: 959: setMemory_Data(3, 0xff);
 13090  0694  30FF               	movlw	255
 13091  0695  00F6               	movwf	??_Flash_Memory_Initialization
 13092  0696  0876               	movf	??_Flash_Memory_Initialization,w
 13093  0697  00F2               	movwf	setMemory_Data@data
 13094  0698  3003               	movlw	3
 13095  0699  3198  2076  3186   	fcall	_setMemory_Data
 13096                           
 13097                           ;MCU_B1.c: 960: setMemory_Data(4, 0xff);
 13098  069C  30FF               	movlw	255
 13099  069D  00F6               	movwf	??_Flash_Memory_Initialization
 13100  069E  0876               	movf	??_Flash_Memory_Initialization,w
 13101  069F  00F2               	movwf	setMemory_Data@data
 13102  06A0  3004               	movlw	4
 13103  06A1  3198  2076  3186   	fcall	_setMemory_Data
 13104                           
 13105                           ;MCU_B1.c: 961: setMemory_Data(5, 0xff);
 13106  06A4  30FF               	movlw	255
 13107  06A5  00F6               	movwf	??_Flash_Memory_Initialization
 13108  06A6  0876               	movf	??_Flash_Memory_Initialization,w
 13109  06A7  00F2               	movwf	setMemory_Data@data
 13110  06A8  3005               	movlw	5
 13111  06A9  3198  2076  3186   	fcall	_setMemory_Data
 13112                           
 13113                           ;MCU_B1.c: 962: setMemory_Data(6, 0xff);
 13114  06AC  30FF               	movlw	255
 13115  06AD  00F6               	movwf	??_Flash_Memory_Initialization
 13116  06AE  0876               	movf	??_Flash_Memory_Initialization,w
 13117  06AF  00F2               	movwf	setMemory_Data@data
 13118  06B0  3006               	movlw	6
 13119  06B1  3198  2076  3186   	fcall	_setMemory_Data
 13120                           
 13121                           ;MCU_B1.c: 963: setMemory_Data(31, 0xaa);
 13122  06B4  30AA               	movlw	170
 13123  06B5  00F6               	movwf	??_Flash_Memory_Initialization
 13124  06B6  0876               	movf	??_Flash_Memory_Initialization,w
 13125  06B7  00F2               	movwf	setMemory_Data@data
 13126  06B8  301F               	movlw	31
 13127  06B9  3198  2076  3186   	fcall	_setMemory_Data
 13128                           
 13129                           ;MCU_B1.c: 968: GIE = 0;
 13130  06BC  138B               	bcf	11,7	;volatile
 13131                           
 13132                           ;MCU_B1.c: 969: Flash_Memory_Write();
 13133  06BD  319D  25E8         	fcall	_Flash_Memory_Write
 13134                           
 13135                           ;MCU_B1.c: 970: GIE = 1;
 13136  06BF  178B               	bsf	11,7	;volatile
 13137                           
 13138                           ;MCU_B1.c: 971: myMain.FirstOpen = 1;
 13139  06C0  0021               	movlb	1	; select bank1
 13140  06C1  15CF               	bsf	_myMain^(0+128),3
 13141                           
 13142                           ;MCU_B1.c: 972: myMain.First = 1;
 13143  06C2  16CF               	bsf	_myMain^(0+128),5
 13144                           
 13145                           ;MCU_B1.c: 973: myMain.InitDimmer = 1;
 13146  06C3  1659               	bsf	(_myMain^(0+128)+10),4
 13147  06C4  0008               	return
 13148  06C5                     __end_of_Flash_Memory_Initialization:	
 13149                           
 13150                           	psect	text83
 13151  1876                     __ptext83:	
 13152 ;; *************** function _setMemory_Data *****************
 13153 ;; Defined at:
 13154 ;;		line 1097 in file "../src/MCU_B1.c"
 13155 ;; Parameters:    Size  Location     Type
 13156 ;;  address         1    wreg     unsigned char 
 13157 ;;  data            1    2[COMMON] unsigned char 
 13158 ;; Auto vars:     Size  Location     Type
 13159 ;;  address         1    4[COMMON] unsigned char 
 13160 ;; Return value:  Size  Location     Type
 13161 ;;		None               void
 13162 ;; Registers used:
 13163 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13164 ;; Tracked objects:
 13165 ;;		On entry : 0/0
 13166 ;;		On exit  : 0/0
 13167 ;;		Unchanged: 0/0
 13168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13169 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;Total ram usage:        3 bytes
 13174 ;; Hardware stack levels used:    1
 13175 ;; Hardware stack levels required when called:    3
 13176 ;; This function calls:
 13177 ;;		Nothing
 13178 ;; This function is called by:
 13179 ;;		_Flash_Memory_Initialization
 13180 ;;		_Flash_Memory_Modify
 13181 ;; This function uses a non-reentrant model
 13182 ;;
 13183                           
 13184                           
 13185                           ;psect for function _setMemory_Data
 13186  1876                     _setMemory_Data:	
 13187                           
 13188                           ;incstack = 0
 13189                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13190                           ;setMemory_Data@address stored from wreg
 13191  1876  00F4               	movwf	setMemory_Data@address
 13192                           
 13193                           ;MCU_B1.c: 1098: Memory.Data[address] = data;
 13194  1877  0872               	movf	setMemory_Data@data,w
 13195  1878  00F3               	movwf	??_setMemory_Data
 13196  1879  0874               	movf	setMemory_Data@address,w
 13197  187A  3E30               	addlw	_Memory& (0+255)
 13198  187B  0086               	movwf	6
 13199  187C  3002               	movlw	2	; select bank4/5
 13200  187D  0087               	movwf	7
 13201  187E  0873               	movf	??_setMemory_Data,w
 13202  187F  0081               	movwf	1
 13203  1880  0008               	return
 13204  1881                     __end_of_setMemory_Data:	
 13205                           
 13206                           	psect	text84
 13207  1DE8                     __ptext84:	
 13208 ;; *************** function _Flash_Memory_Write *****************
 13209 ;; Defined at:
 13210 ;;		line 1025 in file "../src/MCU_B1.c"
 13211 ;; Parameters:    Size  Location     Type
 13212 ;;		None
 13213 ;; Auto vars:     Size  Location     Type
 13214 ;;  i               1    3[COMMON] unsigned char 
 13215 ;; Return value:  Size  Location     Type
 13216 ;;		None               void
 13217 ;; Registers used:
 13218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13219 ;; Tracked objects:
 13220 ;;		On entry : 0/0
 13221 ;;		On exit  : 0/0
 13222 ;;		Unchanged: 0/0
 13223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13226 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13227 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13228 ;;Total ram usage:        2 bytes
 13229 ;; Hardware stack levels used:    1
 13230 ;; Hardware stack levels required when called:    4
 13231 ;; This function calls:
 13232 ;;		_Flash_Memory_Unlock
 13233 ;; This function is called by:
 13234 ;;		_Flash_Memory_Initialization
 13235 ;;		_Flash_Memory_Modify
 13236 ;; This function uses a non-reentrant model
 13237 ;;
 13238                           
 13239                           
 13240                           ;psect for function _Flash_Memory_Write
 13241  1DE8                     _Flash_Memory_Write:	
 13242                           
 13243                           ;MCU_B1.c: 1026: char i = 0;
 13244                           
 13245                           ;incstack = 0
 13246                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13247  1DE8  01F3               	clrf	Flash_Memory_Write@i
 13248                           
 13249                           ;MCU_B1.c: 1027: CFGS = 0;
 13250  1DE9  0023               	movlb	3	; select bank3
 13251  1DEA  1315               	bcf	21,6	;volatile
 13252                           
 13253                           ;MCU_B1.c: 1028: PMADRH = 0x30;
 13254  1DEB  3030               	movlw	48
 13255  1DEC  0092               	movwf	18	;volatile
 13256                           
 13257                           ;MCU_B1.c: 1029: PMDATH = 0;
 13258  1DED  0194               	clrf	20	;volatile
 13259                           
 13260                           ;MCU_B1.c: 1030: FREE = 0;
 13261  1DEE  1215               	bcf	21,4	;volatile
 13262                           
 13263                           ;MCU_B1.c: 1031: LWLO = 1;
 13264  1DEF  1695               	bsf	21,5	;volatile
 13265                           
 13266                           ;MCU_B1.c: 1032: WREN = 1;
 13267  1DF0  1515               	bsf	21,2	;volatile
 13268                           
 13269                           ;MCU_B1.c: 1033: for (i = 0; i < 32; i++) {
 13270  1DF1  01F3               	clrf	Flash_Memory_Write@i
 13271  1DF2  3020               	movlw	32
 13272  1DF3  0273               	subwf	Flash_Memory_Write@i,w
 13273  1DF4  1803               	btfsc	3,0
 13274  1DF5  2E0B               	goto	l1515
 13275  1DF6                     l10373:	
 13276                           
 13277                           ;MCU_B1.c: 1034: PMADRL = i;
 13278  1DF6  0873               	movf	Flash_Memory_Write@i,w
 13279  1DF7  0023               	movlb	3	; select bank3
 13280  1DF8  0091               	movwf	17	;volatile
 13281                           
 13282                           ;MCU_B1.c: 1035: PMDATL = Memory.Data[i];
 13283  1DF9  0873               	movf	Flash_Memory_Write@i,w
 13284  1DFA  3E30               	addlw	_Memory& (0+255)
 13285  1DFB  0086               	movwf	6
 13286  1DFC  3002               	movlw	2	; select bank4/5
 13287  1DFD  0087               	movwf	7
 13288  1DFE  0801               	movf	1,w
 13289  1DFF  0093               	movwf	19	;volatile
 13290                           
 13291                           ;MCU_B1.c: 1036: Flash_Memory_Unlock();
 13292  1E00  3187  27F7  319D   	fcall	_Flash_Memory_Unlock
 13293  1E03  3001               	movlw	1
 13294  1E04  00F2               	movwf	??_Flash_Memory_Write
 13295  1E05  0872               	movf	??_Flash_Memory_Write,w
 13296  1E06  07F3               	addwf	Flash_Memory_Write@i,f
 13297  1E07  3020               	movlw	32
 13298  1E08  0273               	subwf	Flash_Memory_Write@i,w
 13299  1E09  1C03               	skipc
 13300  1E0A  2DF6               	goto	l10373
 13301  1E0B                     l1515:	
 13302                           
 13303                           ;MCU_B1.c: 1037: }
 13304                           ;MCU_B1.c: 1038: LWLO = 0;
 13305  1E0B  0023               	movlb	3	; select bank3
 13306  1E0C  1295               	bcf	21,5	;volatile
 13307                           
 13308                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
 13309  1E0D  3187  27F7         	fcall	_Flash_Memory_Unlock
 13310                           
 13311                           ;MCU_B1.c: 1040: WREN = 0;
 13312  1E0F  0023               	movlb	3	; select bank3
 13313  1E10  1115               	bcf	21,2	;volatile
 13314  1E11  0008               	return
 13315  1E12                     __end_of_Flash_Memory_Write:	
 13316                           
 13317                           	psect	text85
 13318  07F7                     __ptext85:	
 13319 ;; *************** function _Flash_Memory_Unlock *****************
 13320 ;; Defined at:
 13321 ;;		line 1004 in file "../src/MCU_B1.c"
 13322 ;; Parameters:    Size  Location     Type
 13323 ;;		None
 13324 ;; Auto vars:     Size  Location     Type
 13325 ;;		None
 13326 ;; Return value:  Size  Location     Type
 13327 ;;		None               void
 13328 ;; Registers used:
 13329 ;;		wreg
 13330 ;; Tracked objects:
 13331 ;;		On entry : 0/0
 13332 ;;		On exit  : 0/0
 13333 ;;		Unchanged: 0/0
 13334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13339 ;;Total ram usage:        0 bytes
 13340 ;; Hardware stack levels used:    1
 13341 ;; Hardware stack levels required when called:    3
 13342 ;; This function calls:
 13343 ;;		Nothing
 13344 ;; This function is called by:
 13345 ;;		_Flash_Memory_Write
 13346 ;;		_Flash_Memory_Erasing
 13347 ;; This function uses a non-reentrant model
 13348 ;;
 13349                           
 13350                           
 13351                           ;psect for function _Flash_Memory_Unlock
 13352  07F7                     _Flash_Memory_Unlock:	
 13353                           
 13354                           ;MCU_B1.c: 1005: PMCON2 = 0x55;
 13355                           
 13356                           ;incstack = 0
 13357                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13358  07F7  3055               	movlw	85
 13359  07F8  0023               	movlb	3	; select bank3
 13360  07F9  0096               	movwf	22	;volatile
 13361                           
 13362                           ;MCU_B1.c: 1006: PMCON2 = 0xaa;
 13363  07FA  30AA               	movlw	170
 13364  07FB  0096               	movwf	22	;volatile
 13365                           
 13366                           ;MCU_B1.c: 1007: WR = 1;
 13367  07FC  1495               	bsf	21,1	;volatile
 13368                           
 13369                           ;MCU_B1.c: 1008: __nop();
 13370  07FD  0000               	nop
 13371                           
 13372                           ;MCU_B1.c: 1009: __nop();
 13373  07FE  0000               	nop
 13374  07FF  0008               	return
 13375  0800                     __end_of_Flash_Memory_Unlock:	
 13376                           
 13377                           	psect	text86
 13378  1066                     __ptext86:	
 13379 ;; *************** function _Flash_Memory_Read *****************
 13380 ;; Defined at:
 13381 ;;		line 1013 in file "../src/MCU_B1.c"
 13382 ;; Parameters:    Size  Location     Type
 13383 ;;  address         1    wreg     unsigned char 
 13384 ;; Auto vars:     Size  Location     Type
 13385 ;;  address         1    4[COMMON] unsigned char 
 13386 ;;  ret             1    5[COMMON] unsigned char 
 13387 ;;  i               1    3[COMMON] unsigned char 
 13388 ;; Return value:  Size  Location     Type
 13389 ;;                  1    wreg      unsigned char 
 13390 ;; Registers used:
 13391 ;;		wreg, status,2
 13392 ;; Tracked objects:
 13393 ;;		On entry : 0/0
 13394 ;;		On exit  : 0/0
 13395 ;;		Unchanged: 0/0
 13396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13398 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13400 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13401 ;;Total ram usage:        4 bytes
 13402 ;; Hardware stack levels used:    1
 13403 ;; Hardware stack levels required when called:    3
 13404 ;; This function calls:
 13405 ;;		Nothing
 13406 ;; This function is called by:
 13407 ;;		_Flash_Memory_Initialization
 13408 ;;		_Flash_Memory_Modify
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412                           
 13413                           ;psect for function _Flash_Memory_Read
 13414  1066                     _Flash_Memory_Read:	
 13415                           
 13416                           ;incstack = 0
 13417                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13418                           ;Flash_Memory_Read@address stored from wreg
 13419  1066  00F4               	movwf	Flash_Memory_Read@address
 13420                           
 13421                           ;MCU_B1.c: 1014: char i = 0, ret = 0;
 13422  1067  01F3               	clrf	Flash_Memory_Read@i
 13423  1068  01F5               	clrf	Flash_Memory_Read@ret
 13424                           
 13425                           ;MCU_B1.c: 1015: PMADRH = 0x30;
 13426  1069  3030               	movlw	48
 13427  106A  0023               	movlb	3	; select bank3
 13428  106B  0092               	movwf	18	;volatile
 13429                           
 13430                           ;MCU_B1.c: 1016: PMADRL = address;
 13431  106C  0874               	movf	Flash_Memory_Read@address,w
 13432  106D  0091               	movwf	17	;volatile
 13433                           
 13434                           ;MCU_B1.c: 1017: CFGS = 0;
 13435  106E  1315               	bcf	21,6	;volatile
 13436                           
 13437                           ;MCU_B1.c: 1018: RD = 1;
 13438  106F  1415               	bsf	21,0	;volatile
 13439                           
 13440                           ;MCU_B1.c: 1019: i = PMDATH;
 13441  1070  0814               	movf	20,w	;volatile
 13442  1071  00F2               	movwf	??_Flash_Memory_Read
 13443  1072  0872               	movf	??_Flash_Memory_Read,w
 13444  1073  00F3               	movwf	Flash_Memory_Read@i
 13445                           
 13446                           ;MCU_B1.c: 1020: ret = PMDATL;
 13447  1074  0813               	movf	19,w	;volatile
 13448  1075  00F2               	movwf	??_Flash_Memory_Read
 13449  1076  0872               	movf	??_Flash_Memory_Read,w
 13450  1077  00F5               	movwf	Flash_Memory_Read@ret
 13451                           
 13452                           ;MCU_B1.c: 1021: return ret;
 13453  1078  0875               	movf	Flash_Memory_Read@ret,w
 13454  1079  0008               	return
 13455  107A                     __end_of_Flash_Memory_Read:	
 13456                           
 13457                           	psect	text87
 13458  052F                     __ptext87:	
 13459 ;; *************** function _Exception_Main *****************
 13460 ;; Defined at:
 13461 ;;		line 499 in file "../src/Main_B1.c"
 13462 ;; Parameters:    Size  Location     Type
 13463 ;;		None
 13464 ;; Auto vars:     Size  Location     Type
 13465 ;;  i               2   11[BANK0 ] int 
 13466 ;;  i               2    9[BANK0 ] int 
 13467 ;;  lights          1   13[BANK0 ] unsigned char 
 13468 ;;  error           1    8[BANK0 ] unsigned char 
 13469 ;;  count           1    7[BANK0 ] unsigned char 
 13470 ;;  status          1    6[BANK0 ] unsigned char 
 13471 ;; Return value:  Size  Location     Type
 13472 ;;		None               void
 13473 ;; Registers used:
 13474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13475 ;; Tracked objects:
 13476 ;;		On entry : 0/0
 13477 ;;		On exit  : 0/0
 13478 ;;		Unchanged: 0/0
 13479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13481 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;Total ram usage:        9 bytes
 13485 ;; Hardware stack levels used:    1
 13486 ;; Hardware stack levels required when called:    5
 13487 ;; This function calls:
 13488 ;;		_getDimmerLights_Line
 13489 ;;		_getDimmerLights_Status
 13490 ;;		_getMain_All_Error_Status
 13491 ;;		_getMain_All_LightsStatus
 13492 ;;		_setBuz
 13493 ;;		_setDimmerLights_SwOff
 13494 ;;		_setLED
 13495 ;; This function is called by:
 13496 ;;		_main
 13497 ;; This function uses a non-reentrant model
 13498 ;;
 13499                           
 13500                           
 13501                           ;psect for function _Exception_Main
 13502  052F                     _Exception_Main:	
 13503                           
 13504                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13505                           
 13506                           ;incstack = 0
 13507                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13508  052F  3000               	movlw	0
 13509  0530  319E  263C  3185   	fcall	_getMain_All_Error_Status
 13510  0533  00F9               	movwf	??_Exception_Main
 13511  0534  0879               	movf	??_Exception_Main,w
 13512  0535  0020               	movlb	0	; select bank0
 13513  0536  00A8               	movwf	Exception_Main@error
 13514                           
 13515                           ;Main_B1.c: 501: char lights = 0, count = 2;
 13516  0537  01AD               	clrf	Exception_Main@lights
 13517  0538  3002               	movlw	2
 13518  0539  00F9               	movwf	??_Exception_Main
 13519  053A  0879               	movf	??_Exception_Main,w
 13520  053B  00A7               	movwf	Exception_Main@count
 13521                           
 13522                           ;Main_B1.c: 502: char status = 0;
 13523  053C  01A6               	clrf	Exception_Main@status
 13524                           
 13525                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13526  053D  0021               	movlb	1	; select bank1
 13527  053E  1DD9               	btfss	(_myMain^(0+128)+10),3
 13528  053F  2D4E               	goto	l11215
 13529                           
 13530                           ;Main_B1.c: 505: if (error == 0) {
 13531  0540  0020               	movlb	0	; select bank0
 13532  0541  08A8               	movf	Exception_Main@error,f
 13533  0542  1D03               	skipz
 13534  0543  0008               	return
 13535                           
 13536                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13537  0544  0021               	movlb	1	; select bank1
 13538  0545  11D9               	bcf	(_myMain^(0+128)+10),3
 13539                           
 13540                           ;Main_B1.c: 509: setLED(99, 10);
 13541  0546  300A               	movlw	10
 13542  0547  00F9               	movwf	??_Exception_Main
 13543  0548  0879               	movf	??_Exception_Main,w
 13544  0549  00F4               	movwf	setLED@command
 13545  054A  3063               	movlw	99
 13546  054B  3194  24ED         	fcall	_setLED
 13547                           
 13548                           ;Main_B1.c: 522: }
 13549                           ;Main_B1.c: 523: } else {
 13550  054D  0008               	return
 13551  054E                     l11215:	
 13552                           
 13553                           ;Main_B1.c: 524: if (error != 0) {
 13554  054E  0020               	movlb	0	; select bank0
 13555  054F  0828               	movf	Exception_Main@error,w
 13556  0550  1903               	btfsc	3,2
 13557  0551  0008               	return
 13558                           
 13559                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13560  0552  0021               	movlb	1	; select bank1
 13561  0553  15D9               	bsf	(_myMain^(0+128)+10),3
 13562                           
 13563                           ;Main_B1.c: 527: setLED(99, 11);
 13564  0554  300B               	movlw	11
 13565  0555  00F9               	movwf	??_Exception_Main
 13566  0556  0879               	movf	??_Exception_Main,w
 13567  0557  00F4               	movwf	setLED@command
 13568  0558  3063               	movlw	99
 13569  0559  3194  24ED  3185   	fcall	_setLED
 13570                           
 13571                           ;Main_B1.c: 538: switch (error) {
 13572  055C  2DF6               	goto	l11263
 13573  055D                     l11221:	
 13574                           ;Main_B1.c: 539: case 2:
 13575                           
 13576                           
 13577                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13578  055D  3199  2141  3185   	fcall	_getMain_All_LightsStatus
 13579  0560  3A01               	xorlw	1
 13580  0561  1D03               	skipz
 13581  0562  2D6C               	goto	l11225
 13582                           
 13583                           ;Main_B1.c: 547: setBuz(10, 300);
 13584  0563  302C               	movlw	44
 13585  0564  0020               	movlb	0	; select bank0
 13586  0565  00A4               	movwf	setBuz@time
 13587  0566  3001               	movlw	1
 13588  0567  00A5               	movwf	setBuz@time+1
 13589  0568  300A               	movlw	10
 13590  0569  3192  22EC  3185   	fcall	_setBuz
 13591  056C                     l11225:	
 13592                           
 13593                           ;Main_B1.c: 548: }
 13594                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13595  056C  0020               	movlb	0	; select bank0
 13596  056D  01A9               	clrf	Exception_Main@i
 13597  056E  01AA               	clrf	Exception_Main@i+1
 13598  056F                     l11235:	
 13599  056F  082A               	movf	Exception_Main@i+1,w
 13600  0570  3A80               	xorlw	128
 13601  0571  00F9               	movwf	??_Exception_Main
 13602  0572  3080               	movlw	128
 13603  0573  0279               	subwf	??_Exception_Main,w
 13604  0574  1D03               	skipz
 13605  0575  2D78               	goto	u12885
 13606  0576  0827               	movf	Exception_Main@count,w
 13607  0577  0229               	subwf	Exception_Main@i,w
 13608  0578                     u12885:	
 13609  0578  1803               	btfsc	3,0
 13610  0579  2D99               	goto	u12880
 13611                           
 13612                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13613  057A  0020               	movlb	0	; select bank0
 13614  057B  0829               	movf	Exception_Main@i,w
 13615  057C  3E01               	addlw	1
 13616  057D  3199  2114  3185   	fcall	_getDimmerLights_Status
 13617  0580  3A01               	xorlw	1
 13618  0581  1D03               	skipz
 13619  0582  2D93               	goto	l11233
 13620                           
 13621                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13622  0583  0020               	movlb	0	; select bank0
 13623  0584  086C               	movf	_DimmerLights,w
 13624  0585  0086               	movwf	6
 13625  0586  3001               	movlw	1	; select bank2/3
 13626  0587  0087               	movwf	7
 13627  0588  1401               	bsf	1,0
 13628                           
 13629                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13630  0589  0A6C               	incf	_DimmerLights,w
 13631  058A  0086               	movwf	6
 13632  058B  3001               	movlw	1	; select bank2/3
 13633  058C  0087               	movwf	7
 13634  058D  1001               	bcf	1,0
 13635                           
 13636                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13637  058E  0829               	movf	Exception_Main@i,w
 13638  058F  3E01               	addlw	1
 13639  0590  3191  2122  3185   	fcall	_setDimmerLights_SwOff
 13640  0593                     l11233:	
 13641  0593  3001               	movlw	1
 13642  0594  0020               	movlb	0	; select bank0
 13643  0595  07A9               	addwf	Exception_Main@i,f
 13644  0596  3000               	movlw	0
 13645  0597  3DAA               	addwfc	Exception_Main@i+1,f
 13646  0598  2D6F               	goto	l11235
 13647  0599                     u12880:	
 13648  0599  0020               	movlb	0	; select bank0
 13649  059A  0008               	return
 13650  059B                     l11237:	
 13651                           ;Main_B1.c: 561: case 3:
 13652                           
 13653                           ;Main_B1.c: 556: }
 13654                           ;Main_B1.c: 557: }
 13655                           ;Main_B1.c: 560: break;
 13656                           
 13657                           
 13658                           ;Main_B1.c: 563: setBuz(5, 300);
 13659  059B  302C               	movlw	44
 13660  059C  0020               	movlb	0	; select bank0
 13661  059D  00A4               	movwf	setBuz@time
 13662  059E  3001               	movlw	1
 13663  059F  00A5               	movwf	setBuz@time+1
 13664  05A0  3005               	movlw	5
 13665  05A1  3192  22EC  3185   	fcall	_setBuz
 13666                           
 13667                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13668  05A4  3199  2150  3185   	fcall	_getDimmerLights_Line
 13669  05A7  00F9               	movwf	??_Exception_Main
 13670  05A8  0879               	movf	??_Exception_Main,w
 13671  05A9  0020               	movlb	0	; select bank0
 13672  05AA  00AD               	movwf	Exception_Main@lights
 13673                           
 13674                           ;Main_B1.c: 565: if (lights == 0) {
 13675  05AB  08AD               	movf	Exception_Main@lights,f
 13676  05AC  1D03               	skipz
 13677  05AD  2DDC               	goto	l11255
 13678                           
 13679                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13680  05AE  01AB               	clrf	Exception_Main@i_4227
 13681  05AF  01AC               	clrf	Exception_Main@i_4227+1
 13682  05B0                     l11253:	
 13683  05B0  082C               	movf	Exception_Main@i_4227+1,w
 13684  05B1  3A80               	xorlw	128
 13685  05B2  00F9               	movwf	??_Exception_Main
 13686  05B3  3080               	movlw	128
 13687  05B4  0279               	subwf	??_Exception_Main,w
 13688  05B5  1D03               	skipz
 13689  05B6  2DB9               	goto	u12915
 13690  05B7  0827               	movf	Exception_Main@count,w
 13691  05B8  022B               	subwf	Exception_Main@i_4227,w
 13692  05B9                     u12915:	
 13693  05B9  1803               	btfsc	3,0
 13694  05BA  2DDA               	goto	u12910
 13695                           
 13696                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13697  05BB  0020               	movlb	0	; select bank0
 13698  05BC  082B               	movf	Exception_Main@i_4227,w
 13699  05BD  3E01               	addlw	1
 13700  05BE  3199  2114  3185   	fcall	_getDimmerLights_Status
 13701  05C1  3A01               	xorlw	1
 13702  05C2  1D03               	skipz
 13703  05C3  2DD4               	goto	l11251
 13704                           
 13705                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13706  05C4  0020               	movlb	0	; select bank0
 13707  05C5  086C               	movf	_DimmerLights,w
 13708  05C6  0086               	movwf	6
 13709  05C7  3001               	movlw	1	; select bank2/3
 13710  05C8  0087               	movwf	7
 13711  05C9  1401               	bsf	1,0
 13712                           
 13713                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13714  05CA  0A6C               	incf	_DimmerLights,w
 13715  05CB  0086               	movwf	6
 13716  05CC  3001               	movlw	1	; select bank2/3
 13717  05CD  0087               	movwf	7
 13718  05CE  1001               	bcf	1,0
 13719                           
 13720                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13721  05CF  082B               	movf	Exception_Main@i_4227,w
 13722  05D0  3E01               	addlw	1
 13723  05D1  3191  2122  3185   	fcall	_setDimmerLights_SwOff
 13724  05D4                     l11251:	
 13725  05D4  3001               	movlw	1
 13726  05D5  0020               	movlb	0	; select bank0
 13727  05D6  07AB               	addwf	Exception_Main@i_4227,f
 13728  05D7  3000               	movlw	0
 13729  05D8  3DAC               	addwfc	Exception_Main@i_4227+1,f
 13730  05D9  2DB0               	goto	l11253
 13731  05DA                     u12910:	
 13732  05DA  0020               	movlb	0	; select bank0
 13733  05DB  0008               	return
 13734  05DC                     l11255:	
 13735                           ;Main_B1.c: 573: }
 13736                           ;Main_B1.c: 574: }
 13737                           ;Main_B1.c: 575: } else {
 13738                           
 13739                           
 13740                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13741  05DC  0020               	movlb	0	; select bank0
 13742  05DD  082D               	movf	Exception_Main@lights,w
 13743  05DE  3199  2114  3185   	fcall	_getDimmerLights_Status
 13744  05E1  3A01               	xorlw	1
 13745  05E2  1903               	btfsc	3,2
 13746  05E3  2DE6               	goto	l11257
 13747  05E4  0020               	movlb	0	; select bank0
 13748  05E5  0008               	return
 13749  05E6                     l11257:	
 13750                           
 13751                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13752  05E6  0020               	movlb	0	; select bank0
 13753  05E7  086C               	movf	_DimmerLights,w
 13754  05E8  0086               	movwf	6
 13755  05E9  3001               	movlw	1	; select bank2/3
 13756  05EA  0087               	movwf	7
 13757  05EB  1401               	bsf	1,0
 13758                           
 13759                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13760  05EC  0A6C               	incf	_DimmerLights,w
 13761  05ED  0086               	movwf	6
 13762  05EE  3001               	movlw	1	; select bank2/3
 13763  05EF  0087               	movwf	7
 13764  05F0  1001               	bcf	1,0
 13765                           
 13766                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13767  05F1  082D               	movf	Exception_Main@lights,w
 13768  05F2  3191  2122         	fcall	_setDimmerLights_SwOff
 13769  05F4  0020               	movlb	0	; select bank0
 13770  05F5  0008               	return
 13771  05F6                     l11263:	
 13772                           ;Main_B1.c: 586: }
 13773                           
 13774                           ;Main_B1.c: 582: }
 13775                           ;Main_B1.c: 583: }
 13776                           ;Main_B1.c: 585: break;
 13777                           
 13778  05F6  0020               	movlb	0	; select bank0
 13779  05F7  0828               	movf	Exception_Main@error,w
 13780                           
 13781                           ; Switch size 1, requested type "space"
 13782                           ; Number of cases is 2, Range of values is 2 to 3
 13783                           ; switch strategies available:
 13784                           ; Name         Instructions Cycles
 13785                           ; simple_byte            7     4 (average)
 13786                           ; direct_byte           13     9 (fixed)
 13787                           ; jumptable            263     9 (fixed)
 13788                           ;	Chosen strategy is simple_byte
 13789  05F8  3A02               	xorlw	2	; case 2
 13790  05F9  1903               	skipnz
 13791  05FA  2D5D               	goto	l11221
 13792  05FB  3A01               	xorlw	1	; case 3
 13793  05FC  1903               	skipnz
 13794  05FD  2D9B               	goto	l11237
 13795  05FE  2E00               	goto	l1772
 13796  05FF  0008               	return
 13797  0600                     l1772:	
 13798  0600  0008               	return
 13799  0601                     __end_of_Exception_Main:	
 13800                           
 13801                           	psect	text88
 13802  1950                     __ptext88:	
 13803 ;; *************** function _getDimmerLights_Line *****************
 13804 ;; Defined at:
 13805 ;;		line 1179 in file "../src/Dimmer_B1.c"
 13806 ;; Parameters:    Size  Location     Type
 13807 ;;		None
 13808 ;; Auto vars:     Size  Location     Type
 13809 ;;  line            1    3[COMMON] unsigned char 
 13810 ;; Return value:  Size  Location     Type
 13811 ;;                  1    wreg      unsigned char 
 13812 ;; Registers used:
 13813 ;;		wreg, status,2
 13814 ;; Tracked objects:
 13815 ;;		On entry : 0/0
 13816 ;;		On exit  : 0/0
 13817 ;;		Unchanged: 0/0
 13818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13820 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13822 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;Total ram usage:        2 bytes
 13824 ;; Hardware stack levels used:    1
 13825 ;; Hardware stack levels required when called:    3
 13826 ;; This function calls:
 13827 ;;		Nothing
 13828 ;; This function is called by:
 13829 ;;		_Exception_Main
 13830 ;; This function uses a non-reentrant model
 13831 ;;
 13832                           
 13833                           
 13834                           ;psect for function _getDimmerLights_Line
 13835  1950                     _getDimmerLights_Line:	
 13836                           
 13837                           ;Dimmer_B1.c: 1180: char line = 0;
 13838                           
 13839                           ;incstack = 0
 13840                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13841  1950  01F3               	clrf	getDimmerLights_Line@line
 13842                           
 13843                           ;Dimmer_B1.c: 1182: if (DimmerLights1.Line == 1) {
 13844  1951  0023               	movlb	3	; select bank3
 13845  1952  1CBF               	btfss	(_DimmerLights1^(0+384)+1),1
 13846  1953  2957               	goto	l962
 13847                           
 13848                           ;Dimmer_B1.c: 1183: line = 1;
 13849  1954  01F3               	clrf	getDimmerLights_Line@line
 13850  1955  0AF3               	incf	getDimmerLights_Line@line,f
 13851                           
 13852                           ;Dimmer_B1.c: 1184: }
 13853  1956  295D               	goto	l963
 13854  1957                     l962:	
 13855                           
 13856                           ;Dimmer_B1.c: 1187: else if (DimmerLights2.Line == 1) {
 13857  1957  1CC8               	btfss	(_DimmerLights2^(0+384)+1),1
 13858  1958  295D               	goto	l963
 13859                           
 13860                           ;Dimmer_B1.c: 1188: line = 2;
 13861  1959  3002               	movlw	2
 13862  195A  00F2               	movwf	??_getDimmerLights_Line
 13863  195B  0872               	movf	??_getDimmerLights_Line,w
 13864  195C  00F3               	movwf	getDimmerLights_Line@line
 13865  195D                     l963:	
 13866                           
 13867                           ;Dimmer_B1.c: 1189: }
 13868                           ;Dimmer_B1.c: 1196: return line;
 13869  195D  0873               	movf	getDimmerLights_Line@line,w
 13870  195E  0008               	return
 13871  195F                     __end_of_getDimmerLights_Line:	
 13872                           
 13873                           	psect	text89
 13874  1EF9                     __ptext89:	
 13875 ;; *************** function _DimmerLights_Main *****************
 13876 ;; Defined at:
 13877 ;;		line 839 in file "../src/Dimmer_B1.c"
 13878 ;; Parameters:    Size  Location     Type
 13879 ;;		None
 13880 ;; Auto vars:     Size  Location     Type
 13881 ;;		None
 13882 ;; Return value:  Size  Location     Type
 13883 ;;		None               void
 13884 ;; Registers used:
 13885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13886 ;; Tracked objects:
 13887 ;;		On entry : 0/0
 13888 ;;		On exit  : 0/0
 13889 ;;		Unchanged: 0/0
 13890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13895 ;;Total ram usage:        0 bytes
 13896 ;; Hardware stack levels used:    1
 13897 ;; Hardware stack levels required when called:    8
 13898 ;; This function calls:
 13899 ;;		_DimmerLights_DimmingFunction
 13900 ;;		_DimmerLights_TwoPhase_Main
 13901 ;;		_getLoad_OK
 13902 ;;		_getMain_All_Error_Status
 13903 ;;		_getMain_All_LightsStatus
 13904 ;;		_setDimmerLights_Main
 13905 ;; This function is called by:
 13906 ;;		_main
 13907 ;; This function uses a non-reentrant model
 13908 ;;
 13909                           
 13910                           
 13911                           ;psect for function _DimmerLights_Main
 13912  1EF9                     _DimmerLights_Main:	
 13913                           
 13914                           ;Dimmer_B1.c: 842: if (Dimmer.LoadGO == 1) {
 13915                           
 13916                           ;incstack = 0
 13917                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13918  1EF9  0022               	movlb	2	; select bank2
 13919  1EFA  1CA0               	btfss	_Dimmer^(0+256),1
 13920  1EFB  2F11               	goto	l10935
 13921                           
 13922                           ;Dimmer_B1.c: 843: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13923  1EFC  31A7  27F9  319E   	fcall	_getLoad_OK
 13924  1EFF  3A01               	xorlw	1
 13925  1F00  1903               	skipnz
 13926  1F01  2F0F               	goto	l888
 13927  1F02  3000               	movlw	0
 13928  1F03  319E  263C  319E   	fcall	_getMain_All_Error_Status
 13929  1F06  3800               	iorlw	0
 13930  1F07  1D03               	skipz
 13931  1F08  2F0F               	goto	l888
 13932  1F09  3199  2141  319E   	fcall	_getMain_All_LightsStatus
 13933  1F0C  3800               	iorlw	0
 13934  1F0D  1D03               	skipz
 13935  1F0E  2F11               	goto	l10935
 13936  1F0F                     l888:	
 13937                           
 13938                           ;Dimmer_B1.c: 844: Dimmer.LoadGO = 0;
 13939  1F0F  0022               	movlb	2	; select bank2
 13940  1F10  10A0               	bcf	_Dimmer^(0+256),1
 13941  1F11                     l10935:	
 13942                           
 13943                           ;Dimmer_B1.c: 845: }
 13944                           ;Dimmer_B1.c: 846: }
 13945                           ;Dimmer_B1.c: 851: setDimmerLights_Main(1);
 13946  1F11  3001               	movlw	1
 13947  1F12  3197  279B  319E   	fcall	_setDimmerLights_Main
 13948                           
 13949                           ;Dimmer_B1.c: 854: DimmerLights_DimmingFunction(1);
 13950  1F15  3001               	movlw	1
 13951  1F16  318C  248D  319E   	fcall	_DimmerLights_DimmingFunction
 13952                           
 13953                           ;Dimmer_B1.c: 858: DimmerLights_TwoPhase_Main(1);
 13954  1F19  3001               	movlw	1
 13955  1F1A  3193  2393  319E   	fcall	_DimmerLights_TwoPhase_Main
 13956                           
 13957                           ;Dimmer_B1.c: 864: setDimmerLights_Main(2);
 13958  1F1D  3002               	movlw	2
 13959  1F1E  3197  279B  319E   	fcall	_setDimmerLights_Main
 13960                           
 13961                           ;Dimmer_B1.c: 866: DimmerLights_DimmingFunction(2);
 13962  1F21  3002               	movlw	2
 13963  1F22  318C  248D  319E   	fcall	_DimmerLights_DimmingFunction
 13964                           
 13965                           ;Dimmer_B1.c: 870: DimmerLights_TwoPhase_Main(2);
 13966  1F25  3002               	movlw	2
 13967  1F26  3193  2393         	fcall	_DimmerLights_TwoPhase_Main
 13968  1F28  0008               	return
 13969  1F29                     __end_of_DimmerLights_Main:	
 13970                           
 13971                           	psect	text90
 13972  179B                     __ptext90:	
 13973 ;; *************** function _setDimmerLights_Main *****************
 13974 ;; Defined at:
 13975 ;;		line 886 in file "../src/Dimmer_B1.c"
 13976 ;; Parameters:    Size  Location     Type
 13977 ;;  lights          1    wreg     unsigned char 
 13978 ;; Auto vars:     Size  Location     Type
 13979 ;;  lights          1   73[BANK0 ] unsigned char 
 13980 ;; Return value:  Size  Location     Type
 13981 ;;		None               void
 13982 ;; Registers used:
 13983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13984 ;; Tracked objects:
 13985 ;;		On entry : 0/0
 13986 ;;		On exit  : 0/0
 13987 ;;		Unchanged: 0/0
 13988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13992 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13993 ;;Total ram usage:        1 bytes
 13994 ;; Hardware stack levels used:    1
 13995 ;; Hardware stack levels required when called:    7
 13996 ;; This function calls:
 13997 ;;		_DimmerLights_SelectPointer
 13998 ;;		_getDimmerLights_Allow_Condition
 13999 ;;		_getMain_All_LightsStatus
 14000 ;;		_setDimmerLights_Dimming
 14001 ;;		_setDimmerLights_OnOff
 14002 ;; This function is called by:
 14003 ;;		_DimmerLights_Main
 14004 ;; This function uses a non-reentrant model
 14005 ;;
 14006                           
 14007                           
 14008                           ;psect for function _setDimmerLights_Main
 14009  179B                     _setDimmerLights_Main:	
 14010                           
 14011                           ;incstack = 0
 14012                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14013                           ;setDimmerLights_Main@lights stored from wreg
 14014  179B  0020               	movlb	0	; select bank0
 14015  179C  00E9               	movwf	setDimmerLights_Main@lights
 14016                           
 14017                           ;Dimmer_B1.c: 888: DimmerLights_SelectPointer(lights);
 14018  179D  0869               	movf	setDimmerLights_Main@lights,w
 14019  179E  319A  223D  3197   	fcall	_DimmerLights_SelectPointer
 14020                           
 14021                           ;Dimmer_B1.c: 889: if (DimmerLights->Trigger == 1) {
 14022  17A1  0020               	movlb	0	; select bank0
 14023  17A2  086C               	movf	_DimmerLights,w
 14024  17A3  0086               	movwf	6
 14025  17A4  3001               	movlw	1	; select bank2/3
 14026  17A5  0087               	movwf	7
 14027  17A6  1C81               	btfss	1,1
 14028  17A7  2FC7               	goto	l10517
 14029                           
 14030                           ;Dimmer_B1.c: 890: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14031  17A8  0869               	movf	setDimmerLights_Main@lights,w
 14032  17A9  319F  27C9  3197   	fcall	_getDimmerLights_Allow_Condition
 14033  17AC  3800               	iorlw	0
 14034  17AD  1D03               	skipz
 14035  17AE  0008               	return
 14036                           
 14037                           ;Dimmer_B1.c: 891: DimmerLights->Trigger = 0;
 14038  17AF  0020               	movlb	0	; select bank0
 14039  17B0  086C               	movf	_DimmerLights,w
 14040  17B1  0086               	movwf	6
 14041  17B2  3001               	movlw	1	; select bank2/3
 14042  17B3  0087               	movwf	7
 14043  17B4  1081               	bcf	1,1
 14044                           
 14045                           ;Dimmer_B1.c: 892: if (DimmerLights->Switch == 1) {
 14046  17B5  086C               	movf	_DimmerLights,w
 14047  17B6  0086               	movwf	6
 14048  17B7  3001               	movlw	1	; select bank2/3
 14049  17B8  0087               	movwf	7
 14050  17B9  1D01               	btfss	1,2
 14051  17BA  2FC1               	goto	l10515
 14052                           
 14053                           ;Dimmer_B1.c: 893: setDimmerLights_OnOff(lights, 1);
 14054  17BB  01E5               	clrf	setDimmerLights_OnOff@command
 14055  17BC  0AE5               	incf	setDimmerLights_OnOff@command,f
 14056  17BD  0869               	movf	setDimmerLights_Main@lights,w
 14057  17BE  318F  2742         	fcall	_setDimmerLights_OnOff
 14058                           
 14059                           ;Dimmer_B1.c: 894: } else {
 14060  17C0  0008               	return
 14061  17C1                     l10515:	
 14062                           
 14063                           ;Dimmer_B1.c: 895: setDimmerLights_OnOff(lights, 0);
 14064  17C1  0020               	movlb	0	; select bank0
 14065  17C2  01E5               	clrf	setDimmerLights_OnOff@command
 14066  17C3  0869               	movf	setDimmerLights_Main@lights,w
 14067  17C4  318F  2742         	fcall	_setDimmerLights_OnOff
 14068                           
 14069                           ;Dimmer_B1.c: 896: }
 14070                           ;Dimmer_B1.c: 897: }
 14071                           ;Dimmer_B1.c: 898: } else {
 14072  17C6  0008               	return
 14073  17C7                     l10517:	
 14074                           
 14075                           ;Dimmer_B1.c: 899: if (getMain_All_LightsStatus() == 1) {
 14076  17C7  3199  2141  3197   	fcall	_getMain_All_LightsStatus
 14077  17CA  3A01               	xorlw	1
 14078  17CB  1D03               	skipz
 14079  17CC  2FF3               	goto	l10529
 14080                           
 14081                           ;Dimmer_B1.c: 900: if (DimmerLights->DimmingTrigger == 1) {
 14082  17CD  0020               	movlb	0	; select bank0
 14083  17CE  086C               	movf	_DimmerLights,w
 14084  17CF  0086               	movwf	6
 14085  17D0  3001               	movlw	1	; select bank2/3
 14086  17D1  0087               	movwf	7
 14087  17D2  1E01               	btfss	1,4
 14088  17D3  0008               	return
 14089                           
 14090                           ;Dimmer_B1.c: 901: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14091  17D4  0869               	movf	setDimmerLights_Main@lights,w
 14092  17D5  319F  27C9  3197   	fcall	_getDimmerLights_Allow_Condition
 14093  17D8  3800               	iorlw	0
 14094  17D9  1D03               	skipz
 14095  17DA  0008               	return
 14096                           
 14097                           ;Dimmer_B1.c: 902: DimmerLights->DimmingTrigger = 0;
 14098  17DB  0020               	movlb	0	; select bank0
 14099  17DC  086C               	movf	_DimmerLights,w
 14100  17DD  0086               	movwf	6
 14101  17DE  3001               	movlw	1	; select bank2/3
 14102  17DF  0087               	movwf	7
 14103  17E0  1201               	bcf	1,4
 14104                           
 14105                           ;Dimmer_B1.c: 903: if (DimmerLights->DimmingSwitch == 1) {
 14106  17E1  086C               	movf	_DimmerLights,w
 14107  17E2  0086               	movwf	6
 14108  17E3  3001               	movlw	1	; select bank2/3
 14109  17E4  0087               	movwf	7
 14110  17E5  1E81               	btfss	1,5
 14111  17E6  2FED               	goto	l10527
 14112                           
 14113                           ;Dimmer_B1.c: 904: setDimmerLights_Dimming(lights, 1);
 14114  17E7  01E2               	clrf	setDimmerLights_Dimming@status
 14115  17E8  0AE2               	incf	setDimmerLights_Dimming@status,f
 14116  17E9  0869               	movf	setDimmerLights_Main@lights,w
 14117  17EA  3193  23E7         	fcall	_setDimmerLights_Dimming
 14118                           
 14119                           ;Dimmer_B1.c: 905: } else {
 14120  17EC  0008               	return
 14121  17ED                     l10527:	
 14122                           
 14123                           ;Dimmer_B1.c: 906: setDimmerLights_Dimming(lights, 0);
 14124  17ED  0020               	movlb	0	; select bank0
 14125  17EE  01E2               	clrf	setDimmerLights_Dimming@status
 14126  17EF  0869               	movf	setDimmerLights_Main@lights,w
 14127  17F0  3193  23E7         	fcall	_setDimmerLights_Dimming
 14128                           
 14129                           ;Dimmer_B1.c: 907: }
 14130                           ;Dimmer_B1.c: 908: }
 14131                           ;Dimmer_B1.c: 909: }
 14132                           ;Dimmer_B1.c: 910: } else {
 14133  17F2  0008               	return
 14134  17F3                     l10529:	
 14135                           
 14136                           ;Dimmer_B1.c: 911: if (DimmerLights->DimmingTrigger == 1) {
 14137  17F3  0020               	movlb	0	; select bank0
 14138  17F4  086C               	movf	_DimmerLights,w
 14139  17F5  0086               	movwf	6
 14140  17F6  3001               	movlw	1	; select bank2/3
 14141  17F7  0087               	movwf	7
 14142  17F8  1E01               	btfss	1,4
 14143  17F9  0008               	return
 14144                           
 14145                           ;Dimmer_B1.c: 912: DimmerLights->DimmingTrigger = 0;
 14146  17FA  086C               	movf	_DimmerLights,w
 14147  17FB  0086               	movwf	6
 14148  17FC  3001               	movlw	1	; select bank2/3
 14149  17FD  0087               	movwf	7
 14150  17FE  1201               	bcf	1,4
 14151  17FF  0008               	return
 14152  1800                     __end_of_setDimmerLights_Main:	
 14153                           
 14154                           	psect	text91
 14155  0F42                     __ptext91:	
 14156 ;; *************** function _setDimmerLights_OnOff *****************
 14157 ;; Defined at:
 14158 ;;		line 963 in file "../src/Dimmer_B1.c"
 14159 ;; Parameters:    Size  Location     Type
 14160 ;;  lights          1    wreg     unsigned char 
 14161 ;;  command         1   69[BANK0 ] unsigned char 
 14162 ;; Auto vars:     Size  Location     Type
 14163 ;;  lights          1   72[BANK0 ] unsigned char 
 14164 ;; Return value:  Size  Location     Type
 14165 ;;		None               void
 14166 ;; Registers used:
 14167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14168 ;; Tracked objects:
 14169 ;;		On entry : 0/0
 14170 ;;		On exit  : 0/0
 14171 ;;		Unchanged: 0/0
 14172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14173 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14175 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14176 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14177 ;;Total ram usage:        4 bytes
 14178 ;; Hardware stack levels used:    1
 14179 ;; Hardware stack levels required when called:    6
 14180 ;; This function calls:
 14181 ;;		_DimmerIntr_ValueCalculate
 14182 ;;		_getCmd_Status
 14183 ;;		_getDelayOff_GO
 14184 ;;		_getDimmerLights_PercentToValue
 14185 ;;		_getMain_All_LightsStatus
 14186 ;;		_setCmd_Status
 14187 ;;		_setDelayOff_GO
 14188 ;;		_setDimmerIntr_ControlStatus
 14189 ;;		_setDimmerIntr_DimmingValue
 14190 ;;		_setDimmerIntr_Dimming_RF
 14191 ;;		_setDimmerIntr_MaxmumValue
 14192 ;;		_setDimmerLights_DimmingClose
 14193 ;;		_setDimmerLights_Line
 14194 ;;		_setLED
 14195 ;;		_setProductData
 14196 ;;		_setRF_DimmerLights
 14197 ;;		_setTxData
 14198 ;; This function is called by:
 14199 ;;		_setDimmerLights_Main
 14200 ;; This function uses a non-reentrant model
 14201 ;;
 14202                           
 14203                           
 14204                           ;psect for function _setDimmerLights_OnOff
 14205  0F42                     _setDimmerLights_OnOff:	
 14206                           
 14207                           ;incstack = 0
 14208                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14209                           ;setDimmerLights_OnOff@lights stored from wreg
 14210  0F42  0020               	movlb	0	; select bank0
 14211  0F43  00E8               	movwf	setDimmerLights_OnOff@lights
 14212                           
 14213                           ;Dimmer_B1.c: 965: if (command == 1) {
 14214  0F44  0865               	movf	setDimmerLights_OnOff@command,w
 14215  0F45  3A01               	xorlw	1
 14216  0F46  1D03               	skipz
 14217  0F47  2FA0               	goto	l10261
 14218                           
 14219                           ;Dimmer_B1.c: 967: setDimmerIntr_ControlStatus(lights, 1);
 14220  0F48  01F2               	clrf	setDimmerIntr_ControlStatus@command
 14221  0F49  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 14222  0F4A  0868               	movf	setDimmerLights_OnOff@lights,w
 14223  0F4B  319D  25BF  318F   	fcall	_setDimmerIntr_ControlStatus
 14224                           
 14225                           ;Dimmer_B1.c: 970: Dimmer.Load_Status = 1;
 14226  0F4E  0022               	movlb	2	; select bank2
 14227  0F4F  1520               	bsf	_Dimmer^(0+256),2
 14228                           
 14229                           ;Dimmer_B1.c: 971: setDimmerLights_Line(lights);
 14230  0F50  0020               	movlb	0	; select bank0
 14231  0F51  0868               	movf	setDimmerLights_OnOff@lights,w
 14232  0F52  319B  2312  318F   	fcall	_setDimmerLights_Line
 14233                           
 14234                           ;Dimmer_B1.c: 977: setLED(lights, 0);
 14235  0F55  01F4               	clrf	setLED@command
 14236  0F56  0020               	movlb	0	; select bank0
 14237  0F57  0868               	movf	setDimmerLights_OnOff@lights,w
 14238  0F58  3194  24ED  318F   	fcall	_setLED
 14239                           
 14240                           ;Dimmer_B1.c: 998: if (DimmerLights->DimmingRun == 1) {
 14241  0F5B  0020               	movlb	0	; select bank0
 14242  0F5C  0A6C               	incf	_DimmerLights,w
 14243  0F5D  0086               	movwf	6
 14244  0F5E  3001               	movlw	1	; select bank2/3
 14245  0F5F  0087               	movwf	7
 14246  0F60  1F01               	btfss	1,6
 14247  0F61  2F83               	goto	l10251
 14248                           
 14249                           ;Dimmer_B1.c: 999: DimmerLights->DimmingRun = 0;
 14250  0F62  0A6C               	incf	_DimmerLights,w
 14251  0F63  0086               	movwf	6
 14252  0F64  3001               	movlw	1	; select bank2/3
 14253  0F65  0087               	movwf	7
 14254  0F66  1301               	bcf	1,6
 14255                           
 14256                           ;Dimmer_B1.c: 1000: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14257  0F67  0868               	movf	setDimmerLights_OnOff@lights,w
 14258  0F68  3E14               	addlw	20
 14259  0F69  077B               	addwf	_product,w
 14260  0F6A  00E6               	movwf	??_setDimmerLights_OnOff
 14261  0F6B  0866               	movf	??_setDimmerLights_OnOff,w
 14262  0F6C  0086               	movwf	6
 14263  0F6D  3002               	movlw	2	; select bank4/5
 14264  0F6E  0087               	movwf	7
 14265  0F6F  0801               	movf	1,w
 14266  0F70  3196  26D1  318F   	fcall	_getDimmerLights_PercentToValue
 14267  0F73  0020               	movlb	0	; select bank0
 14268  0F74  00E7               	movwf	??_setDimmerLights_OnOff+1
 14269  0F75  0867               	movf	??_setDimmerLights_OnOff+1,w
 14270  0F76  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 14271  0F77  0868               	movf	setDimmerLights_OnOff@lights,w
 14272  0F78  319A  22FB  318F   	fcall	_setDimmerIntr_MaxmumValue
 14273                           
 14274                           ;Dimmer_B1.c: 1001: setDimmerIntr_Dimming_RF(lights, 1);
 14275  0F7B  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 14276  0F7C  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 14277  0F7D  0020               	movlb	0	; select bank0
 14278  0F7E  0868               	movf	setDimmerLights_OnOff@lights,w
 14279  0F7F  319D  2596  318F   	fcall	_setDimmerIntr_Dimming_RF
 14280                           
 14281                           ;Dimmer_B1.c: 1002: } else {
 14282  0F82  2F8C               	goto	l10253
 14283  0F83                     l10251:	
 14284                           
 14285                           ;Dimmer_B1.c: 1007: setDimmerIntr_DimmingValue(lights, ((char)(5*0.55))+((((char)(77*0.5
      +                          5))-((char)(5*0.55)))/2));
 14286  0F83  3016               	movlw	22
 14287  0F84  0020               	movlb	0	; select bank0
 14288  0F85  00E6               	movwf	??_setDimmerLights_OnOff
 14289  0F86  0866               	movf	??_setDimmerLights_OnOff,w
 14290  0F87  00F2               	movwf	setDimmerIntr_DimmingValue@value
 14291  0F88  0868               	movf	setDimmerLights_OnOff@lights,w
 14292  0F89  319A  2267  318F   	fcall	_setDimmerIntr_DimmingValue
 14293  0F8C                     l10253:	
 14294                           
 14295                           ;Dimmer_B1.c: 1011: }
 14296                           ;Dimmer_B1.c: 1013: if (lights == 1) {
 14297  0F8C  0020               	movlb	0	; select bank0
 14298  0F8D  0868               	movf	setDimmerLights_OnOff@lights,w
 14299  0F8E  3A01               	xorlw	1
 14300  0F8F  1D03               	skipz
 14301  0F90  2F96               	goto	l10257
 14302                           
 14303                           ;Dimmer_B1.c: 1016: DimmerIntr_ValueCalculate(1);
 14304  0F91  3001               	movlw	1
 14305  0F92  3194  243B  318F   	fcall	_DimmerIntr_ValueCalculate
 14306                           
 14307                           ;Dimmer_B1.c: 1018: } else if (lights == 2) {
 14308  0F95  2FD0               	goto	l10279
 14309  0F96                     l10257:	
 14310  0F96  0020               	movlb	0	; select bank0
 14311  0F97  0868               	movf	setDimmerLights_OnOff@lights,w
 14312  0F98  3A02               	xorlw	2
 14313  0F99  1D03               	skipz
 14314  0F9A  2FD0               	goto	l10279
 14315                           
 14316                           ;Dimmer_B1.c: 1021: DimmerIntr_ValueCalculate(2);
 14317  0F9B  3002               	movlw	2
 14318  0F9C  3194  243B  318F   	fcall	_DimmerIntr_ValueCalculate
 14319                           
 14320                           ;Dimmer_B1.c: 1023: }
 14321                           ;Dimmer_B1.c: 1029: } else if (command == 0) {
 14322  0F9F  2FD0               	goto	l10279
 14323  0FA0                     l10261:	
 14324  0FA0  0020               	movlb	0	; select bank0
 14325  0FA1  08E5               	movf	setDimmerLights_OnOff@command,f
 14326  0FA2  1D03               	skipz
 14327  0FA3  2FD0               	goto	l10279
 14328                           
 14329                           ;Dimmer_B1.c: 1031: setDimmerIntr_ControlStatus(lights, 0);
 14330  0FA4  01F2               	clrf	setDimmerIntr_ControlStatus@command
 14331  0FA5  0868               	movf	setDimmerLights_OnOff@lights,w
 14332  0FA6  319D  25BF  318F   	fcall	_setDimmerIntr_ControlStatus
 14333                           
 14334                           ;Dimmer_B1.c: 1033: Dimmer.Load_Status = 0;
 14335  0FA9  0022               	movlb	2	; select bank2
 14336  0FAA  1120               	bcf	_Dimmer^(0+256),2
 14337                           
 14338                           ;Dimmer_B1.c: 1034: setDimmerLights_Line(0);
 14339  0FAB  3000               	movlw	0
 14340  0FAC  319B  2312  318F   	fcall	_setDimmerLights_Line
 14341                           
 14342                           ;Dimmer_B1.c: 1038: if (getDelayOff_GO(lights) == 1) {
 14343  0FAF  0020               	movlb	0	; select bank0
 14344  0FB0  0868               	movf	setDimmerLights_OnOff@lights,w
 14345  0FB1  3199  2132  318F   	fcall	_getDelayOff_GO
 14346  0FB4  3A01               	xorlw	1
 14347  0FB5  1D03               	skipz
 14348  0FB6  2FBE               	goto	l928
 14349                           
 14350                           ;Dimmer_B1.c: 1039: setDelayOff_GO(lights, 0, 0);
 14351  0FB7  0020               	movlb	0	; select bank0
 14352  0FB8  01DD               	clrf	setDelayOff_GO@command
 14353  0FB9  01DE               	clrf	setDelayOff_GO@value
 14354  0FBA  0868               	movf	setDimmerLights_OnOff@lights,w
 14355  0FBB  318B  2366  318F   	fcall	_setDelayOff_GO
 14356  0FBE                     l928:	
 14357                           
 14358                           ;Dimmer_B1.c: 1040: }
 14359                           ;Dimmer_B1.c: 1045: setLED(lights, 1);
 14360  0FBE  01F4               	clrf	setLED@command
 14361  0FBF  0AF4               	incf	setLED@command,f
 14362  0FC0  0020               	movlb	0	; select bank0
 14363  0FC1  0868               	movf	setDimmerLights_OnOff@lights,w
 14364  0FC2  3194  24ED  318F   	fcall	_setLED
 14365                           
 14366                           ;Dimmer_B1.c: 1050: if (lights == 1) {
 14367  0FC5  0020               	movlb	0	; select bank0
 14368  0FC6  0868               	movf	setDimmerLights_OnOff@lights,w
 14369  0FC7  3A01               	xorlw	1
 14370  0FC8  1D03               	skipz
 14371  0FC9  2FCC               	goto	l10275
 14372                           
 14373                           ;Dimmer_B1.c: 1051: RB4 = 0;
 14374  0FCA  120D               	bcf	13,4	;volatile
 14375                           
 14376                           ;Dimmer_B1.c: 1053: }
 14377  0FCB  2FD0               	goto	l10279
 14378  0FCC                     l10275:	
 14379                           
 14380                           ;Dimmer_B1.c: 1056: else if (lights == 2) {
 14381  0FCC  0868               	movf	setDimmerLights_OnOff@lights,w
 14382  0FCD  3A02               	xorlw	2
 14383  0FCE  1903               	btfsc	3,2
 14384                           
 14385                           ;Dimmer_B1.c: 1057: RA7 = 0;
 14386  0FCF  138C               	bcf	12,7	;volatile
 14387  0FD0                     l10279:	
 14388                           
 14389                           ;Dimmer_B1.c: 1058: }
 14390                           ;Dimmer_B1.c: 1064: }
 14391                           ;Dimmer_B1.c: 1066: setDimmerLights_DimmingClose();
 14392  0FD0  3198  204D  318F   	fcall	_setDimmerLights_DimmingClose
 14393                           
 14394                           ;Dimmer_B1.c: 1068: setRF_DimmerLights(lights, command);
 14395  0FD3  0020               	movlb	0	; select bank0
 14396  0FD4  0865               	movf	setDimmerLights_OnOff@command,w
 14397  0FD5  00E6               	movwf	??_setDimmerLights_OnOff
 14398  0FD6  0866               	movf	??_setDimmerLights_OnOff,w
 14399  0FD7  00DD               	movwf	setRF_DimmerLights@on
 14400  0FD8  0868               	movf	setDimmerLights_OnOff@lights,w
 14401  0FD9  3188  2027  318F   	fcall	_setRF_DimmerLights
 14402                           
 14403                           ;Dimmer_B1.c: 1070: if (getCmd_Status(1) == 1) {
 14404  0FDC  3001               	movlw	1
 14405  0FDD  3199  217F  318F   	fcall	_getCmd_Status
 14406  0FE0  3A01               	xorlw	1
 14407  0FE1  1D03               	skipz
 14408  0FE2  2FFD               	goto	l10295
 14409                           
 14410                           ;Dimmer_B1.c: 1071: if (getMain_All_LightsStatus() == 0) {
 14411  0FE3  3199  2141  318F   	fcall	_getMain_All_LightsStatus
 14412  0FE6  3800               	iorlw	0
 14413  0FE7  1D03               	skipz
 14414  0FE8  0008               	return
 14415                           
 14416                           ;Dimmer_B1.c: 1072: setCmd_Status(1, 0);
 14417  0FE9  01F2               	clrf	setCmd_Status@cmd
 14418  0FEA  3001               	movlw	1
 14419  0FEB  319A  2252  318F   	fcall	_setCmd_Status
 14420                           
 14421                           ;Dimmer_B1.c: 1073: setProductData(11, 0);
 14422  0FEE  0020               	movlb	0	; select bank0
 14423  0FEF  01DA               	clrf	setProductData@value
 14424  0FF0  300B               	movlw	11
 14425  0FF1  3198  20AE  318F   	fcall	_setProductData
 14426                           
 14427                           ;Dimmer_B1.c: 1074: setProductData(17, 0);
 14428  0FF4  0020               	movlb	0	; select bank0
 14429  0FF5  01DA               	clrf	setProductData@value
 14430  0FF6  3011               	movlw	17
 14431  0FF7  3198  20AE  318F   	fcall	_setProductData
 14432                           
 14433                           ;Dimmer_B1.c: 1075: setTxData();
 14434  0FFA  3198  2001         	fcall	_setTxData
 14435                           
 14436                           ;Dimmer_B1.c: 1076: }
 14437                           ;Dimmer_B1.c: 1077: } else {
 14438  0FFC  0008               	return
 14439  0FFD                     l10295:	
 14440                           
 14441                           ;Dimmer_B1.c: 1078: setTxData();
 14442  0FFD  3198  2001         	fcall	_setTxData
 14443  0FFF  0008               	return
 14444  1000                     __end_of_setDimmerLights_OnOff:	
 14445                           
 14446                           	psect	text92
 14447  14ED                     __ptext92:	
 14448 ;; *************** function _setLED *****************
 14449 ;; Defined at:
 14450 ;;		line 81 in file "../src/LED_B1.c"
 14451 ;; Parameters:    Size  Location     Type
 14452 ;;  led             1    wreg     unsigned char 
 14453 ;;  command         1    4[COMMON] unsigned char 
 14454 ;; Auto vars:     Size  Location     Type
 14455 ;;  led             1    5[COMMON] unsigned char 
 14456 ;; Return value:  Size  Location     Type
 14457 ;;		None               void
 14458 ;; Registers used:
 14459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14460 ;; Tracked objects:
 14461 ;;		On entry : 0/0
 14462 ;;		On exit  : 0/0
 14463 ;;		Unchanged: 0/0
 14464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14465 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14466 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14468 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14469 ;;Total ram usage:        2 bytes
 14470 ;; Hardware stack levels used:    1
 14471 ;; Hardware stack levels required when called:    4
 14472 ;; This function calls:
 14473 ;;		_LedPointSelect
 14474 ;; This function is called by:
 14475 ;;		_setDimmerLights_OnOff
 14476 ;;		_setLED_Initialization
 14477 ;;		_Exception_Main
 14478 ;;		_setSw_Initialization
 14479 ;; This function uses a non-reentrant model
 14480 ;;
 14481                           
 14482                           
 14483                           ;psect for function _setLED
 14484  14ED                     _setLED:	
 14485                           
 14486                           ;incstack = 0
 14487                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14488                           ;setLED@led stored from wreg
 14489  14ED  00F5               	movwf	setLED@led
 14490                           
 14491                           ;LED_B1.c: 82: LedPointSelect(led);
 14492  14EE  0875               	movf	setLED@led,w
 14493  14EF  319C  242B  3194   	fcall	_LedPointSelect
 14494                           
 14495                           ;LED_B1.c: 83: if (command == 0) {
 14496  14F2  08F4               	movf	setLED@command,f
 14497  14F3  1D03               	skipz
 14498  14F4  2D07               	goto	l7553
 14499                           
 14500                           ;LED_B1.c: 85: if (led == 1) {
 14501  14F5  0875               	movf	setLED@led,w
 14502  14F6  3A01               	xorlw	1
 14503  14F7  1D03               	skipz
 14504  14F8  2CFB               	goto	l7545
 14505                           
 14506                           ;LED_B1.c: 89: RC7 = 1;
 14507  14F9  0020               	movlb	0	; select bank0
 14508  14FA  178E               	bsf	14,7	;volatile
 14509  14FB                     l7545:	
 14510                           
 14511                           ;LED_B1.c: 91: }
 14512                           ;LED_B1.c: 94: if (led == 2) {
 14513  14FB  0875               	movf	setLED@led,w
 14514  14FC  3A02               	xorlw	2
 14515  14FD  1D03               	skipz
 14516  14FE  2D01               	goto	l7549
 14517                           
 14518                           ;LED_B1.c: 98: RA3 = 1;
 14519  14FF  0020               	movlb	0	; select bank0
 14520  1500  158C               	bsf	12,3	;volatile
 14521  1501                     l7549:	
 14522                           
 14523                           ;LED_B1.c: 100: }
 14524                           ;LED_B1.c: 112: if (led == 99) {
 14525  1501  0875               	movf	setLED@led,w
 14526  1502  3A63               	xorlw	99
 14527  1503  1D03               	skipz
 14528  1504  2D07               	goto	l7553
 14529                           
 14530                           ;LED_B1.c: 116: RB5 = 1;
 14531  1505  0020               	movlb	0	; select bank0
 14532  1506  168D               	bsf	13,5	;volatile
 14533  1507                     l7553:	
 14534                           
 14535                           ;LED_B1.c: 118: }
 14536                           ;LED_B1.c: 120: }
 14537                           ;LED_B1.c: 121: if (command == 1) {
 14538  1507  0874               	movf	setLED@command,w
 14539  1508  3A01               	xorlw	1
 14540  1509  1D03               	skipz
 14541  150A  2D1D               	goto	l7567
 14542                           
 14543                           ;LED_B1.c: 123: if (led == 1) {
 14544  150B  0875               	movf	setLED@led,w
 14545  150C  3A01               	xorlw	1
 14546  150D  1D03               	skipz
 14547  150E  2D11               	goto	l7559
 14548                           
 14549                           ;LED_B1.c: 127: RC7 = 0;
 14550  150F  0020               	movlb	0	; select bank0
 14551  1510  138E               	bcf	14,7	;volatile
 14552  1511                     l7559:	
 14553                           
 14554                           ;LED_B1.c: 129: }
 14555                           ;LED_B1.c: 132: if (led == 2) {
 14556  1511  0875               	movf	setLED@led,w
 14557  1512  3A02               	xorlw	2
 14558  1513  1D03               	skipz
 14559  1514  2D17               	goto	l7563
 14560                           
 14561                           ;LED_B1.c: 136: RA3 = 0;
 14562  1515  0020               	movlb	0	; select bank0
 14563  1516  118C               	bcf	12,3	;volatile
 14564  1517                     l7563:	
 14565                           
 14566                           ;LED_B1.c: 138: }
 14567                           ;LED_B1.c: 150: if (led == 99) {
 14568  1517  0875               	movf	setLED@led,w
 14569  1518  3A63               	xorlw	99
 14570  1519  1D03               	skipz
 14571  151A  2D1D               	goto	l7567
 14572                           
 14573                           ;LED_B1.c: 154: RB5 = 0;
 14574  151B  0020               	movlb	0	; select bank0
 14575  151C  128D               	bcf	13,5	;volatile
 14576  151D                     l7567:	
 14577                           
 14578                           ;LED_B1.c: 156: }
 14579                           ;LED_B1.c: 158: }
 14580                           ;LED_B1.c: 159: if (command == 10) {
 14581  151D  0874               	movf	setLED@command,w
 14582  151E  3A0A               	xorlw	10
 14583  151F  1D03               	skipz
 14584  1520  2D41               	goto	l7583
 14585                           
 14586                           ;LED_B1.c: 160: LED->GO = 0;
 14587  1521  0021               	movlb	1	; select bank1
 14588  1522  086B               	movf	_LED^(0+128),w
 14589  1523  0086               	movwf	6
 14590  1524  3001               	movlw	1	; select bank2/3
 14591  1525  0087               	movwf	7
 14592  1526  1081               	bcf	1,1
 14593                           
 14594                           ;LED_B1.c: 161: LED->Time = 0;
 14595  1527  0A6B               	incf	_LED^(0+128),w
 14596  1528  0086               	movwf	6
 14597  1529  3001               	movlw	1	; select bank2/3
 14598  152A  0087               	movwf	7
 14599  152B  3000               	movlw	0
 14600  152C  3FC0               	movwi [0]fsr1
 14601  152D  3FC1               	movwi [1]fsr1
 14602                           
 14603                           ;LED_B1.c: 163: if (led == 1) {
 14604  152E  0875               	movf	setLED@led,w
 14605  152F  3A01               	xorlw	1
 14606  1530  1D03               	skipz
 14607  1531  2D35               	goto	l7575
 14608                           
 14609                           ;LED_B1.c: 167: RC7 = 1;
 14610  1532  0020               	movlb	0	; select bank0
 14611  1533  178E               	bsf	14,7	;volatile
 14612                           
 14613                           ;LED_B1.c: 169: }
 14614  1534  2D3B               	goto	l7579
 14615  1535                     l7575:	
 14616                           
 14617                           ;LED_B1.c: 172: else if (led == 2) {
 14618  1535  0875               	movf	setLED@led,w
 14619  1536  3A02               	xorlw	2
 14620  1537  1D03               	skipz
 14621  1538  2D3B               	goto	l7579
 14622                           
 14623                           ;LED_B1.c: 176: RA3 = 1;
 14624  1539  0020               	movlb	0	; select bank0
 14625  153A  158C               	bsf	12,3	;volatile
 14626  153B                     l7579:	
 14627                           
 14628                           ;LED_B1.c: 178: }
 14629                           ;LED_B1.c: 190: if (led == 99) {
 14630  153B  0875               	movf	setLED@led,w
 14631  153C  3A63               	xorlw	99
 14632  153D  1D03               	skipz
 14633  153E  2D41               	goto	l7583
 14634                           
 14635                           ;LED_B1.c: 194: RB5 = 1;
 14636  153F  0020               	movlb	0	; select bank0
 14637  1540  168D               	bsf	13,5	;volatile
 14638  1541                     l7583:	
 14639                           
 14640                           ;LED_B1.c: 196: }
 14641                           ;LED_B1.c: 198: }
 14642                           ;LED_B1.c: 199: if (command == 11) {
 14643  1541  0874               	movf	setLED@command,w
 14644  1542  3A0B               	xorlw	11
 14645  1543  1D03               	skipz
 14646  1544  0008               	return
 14647                           
 14648                           ;LED_B1.c: 200: LED->GO = 1;
 14649  1545  0021               	movlb	1	; select bank1
 14650  1546  086B               	movf	_LED^(0+128),w
 14651  1547  0086               	movwf	6
 14652  1548  3001               	movlw	1	; select bank2/3
 14653  1549  0087               	movwf	7
 14654  154A  1481               	bsf	1,1
 14655  154B  0008               	return
 14656  154C                     __end_of_setLED:	
 14657                           
 14658                           	psect	text93
 14659  1C2B                     __ptext93:	
 14660 ;; *************** function _LedPointSelect *****************
 14661 ;; Defined at:
 14662 ;;		line 7 in file "../src/LED_B1.c"
 14663 ;; Parameters:    Size  Location     Type
 14664 ;;  led             1    wreg     unsigned char 
 14665 ;; Auto vars:     Size  Location     Type
 14666 ;;  led             1    3[COMMON] unsigned char 
 14667 ;; Return value:  Size  Location     Type
 14668 ;;		None               void
 14669 ;; Registers used:
 14670 ;;		wreg
 14671 ;; Tracked objects:
 14672 ;;		On entry : 0/0
 14673 ;;		On exit  : 0/0
 14674 ;;		Unchanged: 0/0
 14675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;Total ram usage:        2 bytes
 14681 ;; Hardware stack levels used:    1
 14682 ;; Hardware stack levels required when called:    3
 14683 ;; This function calls:
 14684 ;;		Nothing
 14685 ;; This function is called by:
 14686 ;;		_setLED_Initialization
 14687 ;;		_setLED
 14688 ;;		_setLED_Main
 14689 ;; This function uses a non-reentrant model
 14690 ;;
 14691                           
 14692                           
 14693                           ;psect for function _LedPointSelect
 14694  1C2B                     _LedPointSelect:	
 14695                           
 14696                           ;incstack = 0
 14697                           ; Regs used in _LedPointSelect: [wreg]
 14698                           ;LedPointSelect@led stored from wreg
 14699  1C2B  00F3               	movwf	LedPointSelect@led
 14700                           
 14701                           ;LED_B1.c: 9: if (led == 1) {
 14702  1C2C  0873               	movf	LedPointSelect@led,w
 14703  1C2D  3A01               	xorlw	1
 14704  1C2E  1D03               	skipz
 14705  1C2F  2C35               	goto	l1191
 14706                           
 14707                           ;LED_B1.c: 10: LED = &VarLED1;
 14708  1C30  306C               	movlw	_VarLED1& (0+255)
 14709  1C31  00F2               	movwf	??_LedPointSelect
 14710  1C32  0872               	movf	??_LedPointSelect,w
 14711  1C33  0021               	movlb	1	; select bank1
 14712  1C34  00EB               	movwf	_LED^(0+128)
 14713  1C35                     l1191:	
 14714                           
 14715                           ;LED_B1.c: 11: }
 14716                           ;LED_B1.c: 14: if (led == 2) {
 14717  1C35  0873               	movf	LedPointSelect@led,w
 14718  1C36  3A02               	xorlw	2
 14719  1C37  1D03               	skipz
 14720  1C38  2C3E               	goto	l1192
 14721                           
 14722                           ;LED_B1.c: 15: LED = &VarLED2;
 14723  1C39  30EC               	movlw	_VarLED2& (0+255)
 14724  1C3A  00F2               	movwf	??_LedPointSelect
 14725  1C3B  0872               	movf	??_LedPointSelect,w
 14726  1C3C  0021               	movlb	1	; select bank1
 14727  1C3D  00EB               	movwf	_LED^(0+128)
 14728  1C3E                     l1192:	
 14729                           
 14730                           ;LED_B1.c: 16: }
 14731                           ;LED_B1.c: 24: if (led == 99) {
 14732  1C3E  0873               	movf	LedPointSelect@led,w
 14733  1C3F  3A63               	xorlw	99
 14734  1C40  1D03               	skipz
 14735  1C41  0008               	return
 14736                           
 14737                           ;LED_B1.c: 25: LED = &VarErrLED;
 14738  1C42  3068               	movlw	_VarErrLED& (0+255)
 14739  1C43  00F2               	movwf	??_LedPointSelect
 14740  1C44  0872               	movf	??_LedPointSelect,w
 14741  1C45  0021               	movlb	1	; select bank1
 14742  1C46  00EB               	movwf	_LED^(0+128)
 14743  1C47  0008               	return
 14744  1C48                     __end_of_LedPointSelect:	
 14745                           
 14746                           	psect	text94
 14747  184D                     __ptext94:	
 14748 ;; *************** function _setDimmerLights_DimmingClose *****************
 14749 ;; Defined at:
 14750 ;;		line 1836 in file "../src/Dimmer_B1.c"
 14751 ;; Parameters:    Size  Location     Type
 14752 ;;		None
 14753 ;; Auto vars:     Size  Location     Type
 14754 ;;		None
 14755 ;; Return value:  Size  Location     Type
 14756 ;;		None               void
 14757 ;; Registers used:
 14758 ;;		wreg, status,2, status,0, pclath, cstack
 14759 ;; Tracked objects:
 14760 ;;		On entry : 0/0
 14761 ;;		On exit  : 0/0
 14762 ;;		Unchanged: 0/0
 14763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;Total ram usage:        0 bytes
 14769 ;; Hardware stack levels used:    1
 14770 ;; Hardware stack levels required when called:    4
 14771 ;; This function calls:
 14772 ;;		_setDimmerIntr_Dimming_Sw
 14773 ;; This function is called by:
 14774 ;;		_setDimmerLights_OnOff
 14775 ;; This function uses a non-reentrant model
 14776 ;;
 14777                           
 14778                           
 14779                           ;psect for function _setDimmerLights_DimmingClose
 14780  184D                     _setDimmerLights_DimmingClose:	
 14781                           
 14782                           ;Dimmer_B1.c: 1838: setDimmerIntr_Dimming_Sw(1, 0);
 14783                           
 14784                           ;incstack = 0
 14785                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14786  184D  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14787  184E  3001               	movlw	1
 14788  184F  319D  254C  3198   	fcall	_setDimmerIntr_Dimming_Sw
 14789                           
 14790                           ;Dimmer_B1.c: 1842: setDimmerIntr_Dimming_Sw(2, 0);
 14791  1852  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14792  1853  3002               	movlw	2
 14793  1854  319D  254C         	fcall	_setDimmerIntr_Dimming_Sw
 14794  1856  0008               	return
 14795  1857                     __end_of_setDimmerLights_DimmingClose:	
 14796                           
 14797                           	psect	text95
 14798  1A67                     __ptext95:	
 14799 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14800 ;; Defined at:
 14801 ;;		line 109 in file "../src/Dimmer_B1.c"
 14802 ;; Parameters:    Size  Location     Type
 14803 ;;  lights          1    wreg     unsigned char 
 14804 ;;  value           1    2[COMMON] unsigned char 
 14805 ;; Auto vars:     Size  Location     Type
 14806 ;;  lights          1    4[COMMON] unsigned char 
 14807 ;; Return value:  Size  Location     Type
 14808 ;;		None               void
 14809 ;; Registers used:
 14810 ;;		wreg
 14811 ;; Tracked objects:
 14812 ;;		On entry : 0/0
 14813 ;;		On exit  : 0/0
 14814 ;;		Unchanged: 0/0
 14815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14816 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14820 ;;Total ram usage:        3 bytes
 14821 ;; Hardware stack levels used:    1
 14822 ;; Hardware stack levels required when called:    3
 14823 ;; This function calls:
 14824 ;;		Nothing
 14825 ;; This function is called by:
 14826 ;;		_setDimmerLights_OnOff
 14827 ;; This function uses a non-reentrant model
 14828 ;;
 14829                           
 14830                           
 14831                           ;psect for function _setDimmerIntr_DimmingValue
 14832  1A67                     _setDimmerIntr_DimmingValue:	
 14833                           
 14834                           ;incstack = 0
 14835                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14836                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14837  1A67  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 14838                           
 14839                           ;Dimmer_B1.c: 111: if (lights == 1) {
 14840  1A68  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14841  1A69  3A01               	xorlw	1
 14842  1A6A  1D03               	skipz
 14843  1A6B  2A72               	goto	l7477
 14844                           
 14845                           ;Dimmer_B1.c: 112: DimmerIntr1.DimmingValue = value;
 14846  1A6C  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14847  1A6D  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14848  1A6E  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14849  1A6F  0021               	movlb	1	; select bank1
 14850  1A70  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 14851                           
 14852                           ;Dimmer_B1.c: 113: }
 14853  1A71  0008               	return
 14854  1A72                     l7477:	
 14855                           
 14856                           ;Dimmer_B1.c: 116: else if (lights == 2) {
 14857  1A72  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14858  1A73  3A02               	xorlw	2
 14859  1A74  1D03               	skipz
 14860  1A75  0008               	return
 14861                           
 14862                           ;Dimmer_B1.c: 117: DimmerIntr2.DimmingValue = value;
 14863  1A76  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14864  1A77  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14865  1A78  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14866  1A79  0021               	movlb	1	; select bank1
 14867  1A7A  00B5               	movwf	(_DimmerIntr2^(0+128)+5)
 14868  1A7B  0008               	return
 14869  1A7C                     __end_of_setDimmerIntr_DimmingValue:	
 14870                           
 14871                           	psect	text96
 14872  1DBF                     __ptext96:	
 14873 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14874 ;; Defined at:
 14875 ;;		line 91 in file "../src/Dimmer_B1.c"
 14876 ;; Parameters:    Size  Location     Type
 14877 ;;  lights          1    wreg     unsigned char 
 14878 ;;  command         1    2[COMMON] unsigned char 
 14879 ;; Auto vars:     Size  Location     Type
 14880 ;;  lights          1    4[COMMON] unsigned char 
 14881 ;; Return value:  Size  Location     Type
 14882 ;;		None               void
 14883 ;; Registers used:
 14884 ;;		wreg, status,2, status,0
 14885 ;; Tracked objects:
 14886 ;;		On entry : 0/0
 14887 ;;		On exit  : 0/0
 14888 ;;		Unchanged: 0/0
 14889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14890 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14892 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14893 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14894 ;;Total ram usage:        3 bytes
 14895 ;; Hardware stack levels used:    1
 14896 ;; Hardware stack levels required when called:    3
 14897 ;; This function calls:
 14898 ;;		Nothing
 14899 ;; This function is called by:
 14900 ;;		_setDimmerLights_OnOff
 14901 ;; This function uses a non-reentrant model
 14902 ;;
 14903                           
 14904                           
 14905                           ;psect for function _setDimmerIntr_ControlStatus
 14906  1DBF                     _setDimmerIntr_ControlStatus:	
 14907                           
 14908                           ;incstack = 0
 14909                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14910                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14911  1DBF  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14912                           
 14913                           ;Dimmer_B1.c: 93: if (lights == 1) {
 14914  1DC0  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14915  1DC1  3A01               	xorlw	1
 14916  1DC2  1D03               	skipz
 14917  1DC3  2DD4               	goto	l7469
 14918                           
 14919                           ;Dimmer_B1.c: 94: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14920  1DC4  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14921  1DC5  3A01               	xorlw	1
 14922  1DC6  3000               	movlw	0
 14923  1DC7  1903               	skipnz
 14924  1DC8  3001               	movlw	1
 14925  1DC9  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14926  1DCA  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14927  1DCB  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14928  1DCC  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14929  1DCD  0021               	movlb	1	; select bank1
 14930  1DCE  0820               	movf	_DimmerIntr1^(0+128),w
 14931  1DCF  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14932  1DD0  39F7               	andlw	-9
 14933  1DD1  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14934  1DD2  00A0               	movwf	_DimmerIntr1^(0+128)
 14935                           
 14936                           ;Dimmer_B1.c: 95: }
 14937  1DD3  0008               	return
 14938  1DD4                     l7469:	
 14939                           
 14940                           ;Dimmer_B1.c: 98: else if (lights == 2) {
 14941  1DD4  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14942  1DD5  3A02               	xorlw	2
 14943  1DD6  1D03               	skipz
 14944  1DD7  0008               	return
 14945                           
 14946                           ;Dimmer_B1.c: 99: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14947  1DD8  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14948  1DD9  3A01               	xorlw	1
 14949  1DDA  3000               	movlw	0
 14950  1DDB  1903               	skipnz
 14951  1DDC  3001               	movlw	1
 14952  1DDD  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14953  1DDE  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14954  1DDF  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14955  1DE0  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14956  1DE1  0021               	movlb	1	; select bank1
 14957  1DE2  0830               	movf	_DimmerIntr2^(0+128),w
 14958  1DE3  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14959  1DE4  39F7               	andlw	-9
 14960  1DE5  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14961  1DE6  00B0               	movwf	_DimmerIntr2^(0+128)
 14962  1DE7  0008               	return
 14963  1DE8                     __end_of_setDimmerIntr_ControlStatus:	
 14964                           
 14965                           	psect	text97
 14966  0B66                     __ptext97:	
 14967 ;; *************** function _setDelayOff_GO *****************
 14968 ;; Defined at:
 14969 ;;		line 87 in file "../src/DelayOff_B1.c"
 14970 ;; Parameters:    Size  Location     Type
 14971 ;;  sw              1    wreg     unsigned char 
 14972 ;;  command         1   61[BANK0 ] unsigned char 
 14973 ;;  value           1   62[BANK0 ] unsigned char 
 14974 ;; Auto vars:     Size  Location     Type
 14975 ;;  sw              1   68[BANK0 ] unsigned char 
 14976 ;;  k               1   67[BANK0 ] unsigned char 
 14977 ;;  j               1   66[BANK0 ] unsigned char 
 14978 ;;  i               1   65[BANK0 ] unsigned char 
 14979 ;; Return value:  Size  Location     Type
 14980 ;;		None               void
 14981 ;; Registers used:
 14982 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14983 ;; Tracked objects:
 14984 ;;		On entry : 0/0
 14985 ;;		On exit  : 0/0
 14986 ;;		Unchanged: 0/0
 14987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14988 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14992 ;;Total ram usage:        8 bytes
 14993 ;; Hardware stack levels used:    1
 14994 ;; Hardware stack levels required when called:    4
 14995 ;; This function calls:
 14996 ;;		_DelayOffPointSelect
 14997 ;;		___bmul
 14998 ;;		_setProductData
 14999 ;; This function is called by:
 15000 ;;		_setDimmerLights_OnOff
 15001 ;;		_setRFSW_Control
 15002 ;; This function uses a non-reentrant model
 15003 ;;
 15004                           
 15005                           
 15006                           ;psect for function _setDelayOff_GO
 15007  0B66                     _setDelayOff_GO:	
 15008                           
 15009                           ;incstack = 0
 15010                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15011                           ;setDelayOff_GO@sw stored from wreg
 15012  0B66  0020               	movlb	0	; select bank0
 15013  0B67  00E4               	movwf	setDelayOff_GO@sw
 15014                           
 15015                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 15016  0B68  0864               	movf	setDelayOff_GO@sw,w
 15017  0B69  319A  2228  318B   	fcall	_DelayOffPointSelect
 15018                           
 15019                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 15020  0B6C  0020               	movlb	0	; select bank0
 15021  0B6D  085D               	movf	setDelayOff_GO@command,w
 15022  0B6E  3A01               	xorlw	1
 15023  0B6F  3000               	movlw	0
 15024  0B70  1903               	skipnz
 15025  0B71  3001               	movlw	1
 15026  0B72  00DF               	movwf	??_setDelayOff_GO
 15027  0B73  0021               	movlb	1	; select bank1
 15028  0B74  086A               	movf	_DelayOff^(0+128),w
 15029  0B75  0086               	movwf	6
 15030  0B76  3001               	movlw	1	; select bank2/3
 15031  0B77  0087               	movwf	7
 15032  0B78  0020               	movlb	0	; select bank0
 15033  0B79  0DDF               	rlf	??_setDelayOff_GO,f
 15034  0B7A  0801               	movf	1,w
 15035  0B7B  065F               	xorwf	??_setDelayOff_GO,w
 15036  0B7C  39FD               	andlw	-3
 15037  0B7D  065F               	xorwf	??_setDelayOff_GO,w
 15038  0B7E  0081               	movwf	1
 15039                           
 15040                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 15041  0B7F  0021               	movlb	1	; select bank1
 15042  0B80  086A               	movf	_DelayOff^(0+128),w
 15043  0B81  3E02               	addlw	2
 15044  0B82  0086               	movwf	6
 15045  0B83  3001               	movlw	1	; select bank2/3
 15046  0B84  0087               	movwf	7
 15047  0B85  3000               	movlw	0
 15048  0B86  3FC0               	movwi [0]fsr1
 15049  0B87  3FC1               	movwi [1]fsr1
 15050                           
 15051                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 15052  0B88  086A               	movf	_DelayOff^(0+128),w
 15053  0B89  3E04               	addlw	4
 15054  0B8A  0086               	movwf	6
 15055  0B8B  3001               	movlw	1	; select bank2/3
 15056  0B8C  0087               	movwf	7
 15057  0B8D  0181               	clrf	1
 15058                           
 15059                           ;DelayOff_B1.c: 94: if (command == 1) {
 15060  0B8E  0020               	movlb	0	; select bank0
 15061  0B8F  085D               	movf	setDelayOff_GO@command,w
 15062  0B90  3A01               	xorlw	1
 15063  0B91  1D03               	skipz
 15064  0B92  2BE8               	goto	l7093
 15065                           
 15066                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 15067  0B93  3005               	movlw	5
 15068  0B94  00DF               	movwf	??_setDelayOff_GO
 15069  0B95  085F               	movf	??_setDelayOff_GO,w
 15070  0B96  00E1               	movwf	setDelayOff_GO@i
 15071  0B97  01E2               	clrf	setDelayOff_GO@j
 15072  0B98  01E3               	clrf	setDelayOff_GO@k
 15073                           
 15074                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 15075  0B99  300F               	movlw	15
 15076  0B9A  055E               	andwf	setDelayOff_GO@value,w
 15077  0B9B  00DF               	movwf	??_setDelayOff_GO
 15078  0B9C  085F               	movf	??_setDelayOff_GO,w
 15079  0B9D  3A05               	xorlw	5
 15080  0B9E  1903               	skipnz
 15081  0B9F  2BA4               	goto	l7079
 15082  0BA0  085E               	movf	setDelayOff_GO@value,w
 15083  0BA1  390F               	andlw	15
 15084  0BA2  1D03               	btfss	3,2
 15085  0BA3  2BD4               	goto	l7089
 15086  0BA4                     l7079:	
 15087  0BA4  3031               	movlw	49
 15088  0BA5  025E               	subwf	setDelayOff_GO@value,w
 15089  0BA6  1803               	skipnc
 15090  0BA7  2BD4               	goto	l7089
 15091                           
 15092                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 15093  0BA8  085E               	movf	setDelayOff_GO@value,w
 15094  0BA9  390F               	andlw	15
 15095  0BAA  00DF               	movwf	??_setDelayOff_GO
 15096  0BAB  085F               	movf	??_setDelayOff_GO,w
 15097  0BAC  00E2               	movwf	setDelayOff_GO@j
 15098                           
 15099                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 15100  0BAD  085E               	movf	setDelayOff_GO@value,w
 15101  0BAE  00DF               	movwf	??_setDelayOff_GO
 15102  0BAF  3004               	movlw	4
 15103  0BB0                     u6315:	
 15104  0BB0  36DF               	lsrf	??_setDelayOff_GO,f
 15105  0BB1  0B89               	decfsz	9,f
 15106  0BB2  2BB0               	goto	u6315
 15107  0BB3  085F               	movf	??_setDelayOff_GO,w
 15108  0BB4  390F               	andlw	15
 15109  0BB5  00E0               	movwf	??_setDelayOff_GO+1
 15110  0BB6  0860               	movf	??_setDelayOff_GO+1,w
 15111  0BB7  00E3               	movwf	setDelayOff_GO@k
 15112                           
 15113                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 15114  0BB8  300A               	movlw	10
 15115  0BB9  00DF               	movwf	??_setDelayOff_GO
 15116  0BBA  085F               	movf	??_setDelayOff_GO,w
 15117  0BBB  00F2               	movwf	___bmul@multiplicand
 15118  0BBC  0863               	movf	setDelayOff_GO@k,w
 15119  0BBD  3199  21CF  318B   	fcall	___bmul
 15120  0BC0  0020               	movlb	0	; select bank0
 15121  0BC1  0762               	addwf	setDelayOff_GO@j,w
 15122  0BC2  00E0               	movwf	??_setDelayOff_GO+1
 15123  0BC3  0021               	movlb	1	; select bank1
 15124  0BC4  0A6A               	incf	_DelayOff^(0+128),w
 15125  0BC5  0086               	movwf	6
 15126  0BC6  3001               	movlw	1	; select bank2/3
 15127  0BC7  0087               	movwf	7
 15128  0BC8  0020               	movlb	0	; select bank0
 15129  0BC9  0860               	movf	??_setDelayOff_GO+1,w
 15130  0BCA  0081               	movwf	1
 15131                           
 15132                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 15133  0BCB  085E               	movf	setDelayOff_GO@value,w
 15134  0BCC  00DF               	movwf	??_setDelayOff_GO
 15135  0BCD  085F               	movf	??_setDelayOff_GO,w
 15136  0BCE  00DA               	movwf	setProductData@value
 15137  0BCF  0864               	movf	setDelayOff_GO@sw,w
 15138  0BD0  3E1A               	addlw	26
 15139  0BD1  3198  20AE         	fcall	_setProductData
 15140                           
 15141                           ;DelayOff_B1.c: 103: } else {
 15142  0BD3  0008               	return
 15143  0BD4                     l7089:	
 15144                           
 15145                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 15146  0BD4  3005               	movlw	5
 15147  0BD5  0020               	movlb	0	; select bank0
 15148  0BD6  00DF               	movwf	??_setDelayOff_GO
 15149  0BD7  0021               	movlb	1	; select bank1
 15150  0BD8  0A6A               	incf	_DelayOff^(0+128),w
 15151  0BD9  0086               	movwf	6
 15152  0BDA  3001               	movlw	1	; select bank2/3
 15153  0BDB  0087               	movwf	7
 15154  0BDC  0020               	movlb	0	; select bank0
 15155  0BDD  085F               	movf	??_setDelayOff_GO,w
 15156  0BDE  0081               	movwf	1
 15157                           
 15158                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 15159  0BDF  3005               	movlw	5
 15160  0BE0  00DF               	movwf	??_setDelayOff_GO
 15161  0BE1  085F               	movf	??_setDelayOff_GO,w
 15162  0BE2  00DA               	movwf	setProductData@value
 15163  0BE3  0864               	movf	setDelayOff_GO@sw,w
 15164  0BE4  3E1A               	addlw	26
 15165  0BE5  3198  20AE         	fcall	_setProductData
 15166                           
 15167                           ;DelayOff_B1.c: 106: }
 15168                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 15169  0BE7  0008               	return
 15170  0BE8                     l7093:	
 15171  0BE8  0020               	movlb	0	; select bank0
 15172  0BE9  08DD               	movf	setDelayOff_GO@command,f
 15173  0BEA  1D03               	skipz
 15174  0BEB  0008               	return
 15175                           
 15176                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 15177  0BEC  01DA               	clrf	setProductData@value
 15178  0BED  0864               	movf	setDelayOff_GO@sw,w
 15179  0BEE  3E1A               	addlw	26
 15180  0BEF  3198  20AE         	fcall	_setProductData
 15181  0BF1  0008               	return
 15182  0BF2                     __end_of_setDelayOff_GO:	
 15183                           
 15184                           	psect	text98
 15185  19CF                     __ptext98:	
 15186 ;; *************** function ___bmul *****************
 15187 ;; Defined at:
 15188 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15189 ;; Parameters:    Size  Location     Type
 15190 ;;  multiplier      1    wreg     unsigned char 
 15191 ;;  multiplicand    1    2[COMMON] unsigned char 
 15192 ;; Auto vars:     Size  Location     Type
 15193 ;;  multiplier      1    5[COMMON] unsigned char 
 15194 ;;  product         1    4[COMMON] unsigned char 
 15195 ;; Return value:  Size  Location     Type
 15196 ;;                  1    wreg      unsigned char 
 15197 ;; Registers used:
 15198 ;;		wreg, status,2, status,0
 15199 ;; Tracked objects:
 15200 ;;		On entry : 0/0
 15201 ;;		On exit  : 0/0
 15202 ;;		Unchanged: 0/0
 15203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15204 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;Total ram usage:        4 bytes
 15209 ;; Hardware stack levels used:    1
 15210 ;; Hardware stack levels required when called:    3
 15211 ;; This function calls:
 15212 ;;		Nothing
 15213 ;; This function is called by:
 15214 ;;		_setDelayOff_GO
 15215 ;;		_DelayTimejudge
 15216 ;; This function uses a non-reentrant model
 15217 ;;
 15218                           
 15219                           
 15220                           ;psect for function ___bmul
 15221  19CF                     ___bmul:	
 15222                           
 15223                           ;incstack = 0
 15224                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15225                           ;___bmul@multiplier stored from wreg
 15226  19CF  00F5               	movwf	___bmul@multiplier
 15227  19D0  01F4               	clrf	___bmul@product
 15228  19D1                     l6729:	
 15229  19D1  1C75               	btfss	___bmul@multiplier,0
 15230  19D2  29D7               	goto	l6733
 15231  19D3  0872               	movf	___bmul@multiplicand,w
 15232  19D4  00F3               	movwf	??___bmul
 15233  19D5  0873               	movf	??___bmul,w
 15234  19D6  07F4               	addwf	___bmul@product,f
 15235  19D7                     l6733:	
 15236  19D7  1003               	clrc
 15237  19D8  0DF2               	rlf	___bmul@multiplicand,f
 15238  19D9  1003               	clrc
 15239  19DA  0CF5               	rrf	___bmul@multiplier,f
 15240  19DB  08F5               	movf	___bmul@multiplier,f
 15241  19DC  1D03               	skipz
 15242  19DD  29D1               	goto	l6729
 15243  19DE  0874               	movf	___bmul@product,w
 15244  19DF  0008               	return
 15245  19E0                     __end_of___bmul:	
 15246                           
 15247                           	psect	text99
 15248  1A52                     __ptext99:	
 15249 ;; *************** function _setCmd_Status *****************
 15250 ;; Defined at:
 15251 ;;		line 651 in file "../src/Main_B1.c"
 15252 ;; Parameters:    Size  Location     Type
 15253 ;;  number          1    wreg     unsigned char 
 15254 ;;  cmd             1    2[COMMON] unsigned char 
 15255 ;; Auto vars:     Size  Location     Type
 15256 ;;  number          1    4[COMMON] unsigned char 
 15257 ;; Return value:  Size  Location     Type
 15258 ;;		None               void
 15259 ;; Registers used:
 15260 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15261 ;; Tracked objects:
 15262 ;;		On entry : 0/0
 15263 ;;		On exit  : 0/0
 15264 ;;		Unchanged: 0/0
 15265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15266 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;Total ram usage:        3 bytes
 15271 ;; Hardware stack levels used:    1
 15272 ;; Hardware stack levels required when called:    3
 15273 ;; This function calls:
 15274 ;;		Nothing
 15275 ;; This function is called by:
 15276 ;;		_setDimmerLights_OnOff
 15277 ;;		_setControl_Lights_Table
 15278 ;; This function uses a non-reentrant model
 15279 ;;
 15280                           
 15281                           
 15282                           ;psect for function _setCmd_Status
 15283  1A52                     _setCmd_Status:	
 15284                           
 15285                           ;incstack = 0
 15286                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15287                           ;setCmd_Status@number stored from wreg
 15288  1A52  00F4               	movwf	setCmd_Status@number
 15289                           
 15290                           ;Main_B1.c: 652: switch (number) {
 15291  1A53  2A61               	goto	l7275
 15292  1A54                     l7271:	
 15293                           ;Main_B1.c: 653: case 1:
 15294                           
 15295                           
 15296                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15297  1A54  0872               	movf	setCmd_Status@cmd,w
 15298  1A55  3A01               	xorlw	1
 15299  1A56  3000               	movlw	0
 15300  1A57  1903               	skipnz
 15301  1A58  3001               	movlw	1
 15302  1A59  00F3               	movwf	??_setCmd_Status
 15303  1A5A  0021               	movlb	1	; select bank1
 15304  1A5B  0869               	movf	_Cmd^(0+128),w
 15305  1A5C  0673               	xorwf	??_setCmd_Status,w
 15306  1A5D  39FE               	andlw	-2
 15307  1A5E  0673               	xorwf	??_setCmd_Status,w
 15308  1A5F  00E9               	movwf	_Cmd^(0+128)
 15309                           
 15310                           ;Main_B1.c: 656: }
 15311                           
 15312                           ;Main_B1.c: 655: break;
 15313  1A60  0008               	return
 15314  1A61                     l7275:	
 15315  1A61  0874               	movf	setCmd_Status@number,w
 15316                           
 15317                           ; Switch size 1, requested type "space"
 15318                           ; Number of cases is 1, Range of values is 1 to 1
 15319                           ; switch strategies available:
 15320                           ; Name         Instructions Cycles
 15321                           ; simple_byte            4     3 (average)
 15322                           ; direct_byte           11     9 (fixed)
 15323                           ; jumptable            263     9 (fixed)
 15324                           ;	Chosen strategy is simple_byte
 15325  1A62  3A01               	xorlw	1	; case 1
 15326  1A63  1903               	skipnz
 15327  1A64  2A54               	goto	l7271
 15328  1A65  2A66               	goto	l1781
 15329  1A66                     l1781:	
 15330  1A66  0008               	return
 15331  1A67                     __end_of_setCmd_Status:	
 15332                           
 15333                           	psect	text100
 15334  1941                     __ptext100:	
 15335 ;; *************** function _getMain_All_LightsStatus *****************
 15336 ;; Defined at:
 15337 ;;		line 373 in file "../src/Main_B1.c"
 15338 ;; Parameters:    Size  Location     Type
 15339 ;;		None
 15340 ;; Auto vars:     Size  Location     Type
 15341 ;;  status          1    2[COMMON] unsigned char 
 15342 ;; Return value:  Size  Location     Type
 15343 ;;                  1    wreg      unsigned char 
 15344 ;; Registers used:
 15345 ;;		wreg, status,2, status,0
 15346 ;; Tracked objects:
 15347 ;;		On entry : 0/0
 15348 ;;		On exit  : 0/0
 15349 ;;		Unchanged: 0/0
 15350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15354 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15355 ;;Total ram usage:        1 bytes
 15356 ;; Hardware stack levels used:    1
 15357 ;; Hardware stack levels required when called:    3
 15358 ;; This function calls:
 15359 ;;		Nothing
 15360 ;; This function is called by:
 15361 ;;		_DimmerLights_Main
 15362 ;;		_setDimmerLights_Main
 15363 ;;		_setDimmerLights_OnOff
 15364 ;;		_Flash_Memory_Main
 15365 ;;		_Exception_Main
 15366 ;;		_Load_Main
 15367 ;;		_setTemp_Main
 15368 ;;		_setControl_Lights_Table
 15369 ;; This function uses a non-reentrant model
 15370 ;;
 15371                           
 15372                           
 15373                           ;psect for function _getMain_All_LightsStatus
 15374  1941                     _getMain_All_LightsStatus:	
 15375                           
 15376                           ;Main_B1.c: 374: char status = 0;
 15377                           
 15378                           ;incstack = 0
 15379                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15380  1941  01F2               	clrf	getMain_All_LightsStatus@status
 15381                           
 15382                           ;Main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 15383  1942  3000               	movlw	0
 15384  1943  0023               	movlb	3	; select bank3
 15385  1944  183F               	btfsc	(_DimmerLights1^(0+384)+1),0
 15386  1945  3001               	movlw	1
 15387  1946  00F2               	movwf	getMain_All_LightsStatus@status
 15388                           
 15389                           ;Main_B1.c: 394: if (status == 0) {
 15390  1947  08F2               	movf	getMain_All_LightsStatus@status,f
 15391  1948  1D03               	skipz
 15392  1949  294E               	goto	l9901
 15393                           
 15394                           ;Main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 15395  194A  3000               	movlw	0
 15396  194B  1848               	btfsc	(_DimmerLights2^(0+384)+1),0
 15397  194C  3001               	movlw	1
 15398  194D  00F2               	movwf	getMain_All_LightsStatus@status
 15399  194E                     l9901:	
 15400                           
 15401                           ;Main_B1.c: 396: }
 15402                           ;Main_B1.c: 420: return status;
 15403  194E  0872               	movf	getMain_All_LightsStatus@status,w
 15404  194F  0008               	return
 15405  1950                     __end_of_getMain_All_LightsStatus:	
 15406                           
 15407                           	psect	text101
 15408  1932                     __ptext101:	
 15409 ;; *************** function _getDelayOff_GO *****************
 15410 ;; Defined at:
 15411 ;;		line 114 in file "../src/DelayOff_B1.c"
 15412 ;; Parameters:    Size  Location     Type
 15413 ;;  sw              1    wreg     unsigned char 
 15414 ;; Auto vars:     Size  Location     Type
 15415 ;;  sw              1    4[COMMON] unsigned char 
 15416 ;;  go              1    5[COMMON] unsigned char 
 15417 ;; Return value:  Size  Location     Type
 15418 ;;                  1    wreg      unsigned char 
 15419 ;; Registers used:
 15420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15421 ;; Tracked objects:
 15422 ;;		On entry : 0/0
 15423 ;;		On exit  : 0/0
 15424 ;;		Unchanged: 0/0
 15425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15427 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;Total ram usage:        2 bytes
 15431 ;; Hardware stack levels used:    1
 15432 ;; Hardware stack levels required when called:    4
 15433 ;; This function calls:
 15434 ;;		_DelayOffPointSelect
 15435 ;; This function is called by:
 15436 ;;		_setDimmerLights_OnOff
 15437 ;; This function uses a non-reentrant model
 15438 ;;
 15439                           
 15440                           
 15441                           ;psect for function _getDelayOff_GO
 15442  1932                     _getDelayOff_GO:	
 15443                           
 15444                           ;incstack = 0
 15445                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15446                           ;getDelayOff_GO@sw stored from wreg
 15447  1932  00F4               	movwf	getDelayOff_GO@sw
 15448                           
 15449                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15450  1933  0874               	movf	getDelayOff_GO@sw,w
 15451  1934  319A  2228         	fcall	_DelayOffPointSelect
 15452                           
 15453                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15454  1936  0021               	movlb	1	; select bank1
 15455  1937  086A               	movf	_DelayOff^(0+128),w
 15456  1938  0086               	movwf	6
 15457  1939  3001               	movlw	1	; select bank2/3
 15458  193A  0087               	movwf	7
 15459  193B  3000               	movlw	0
 15460  193C  1881               	btfsc	1,1
 15461  193D  3001               	movlw	1
 15462  193E  00F5               	movwf	getDelayOff_GO@go
 15463                           
 15464                           ;DelayOff_B1.c: 117: return go;
 15465  193F  0875               	movf	getDelayOff_GO@go,w
 15466  1940  0008               	return
 15467  1941                     __end_of_getDelayOff_GO:	
 15468                           
 15469                           	psect	text102
 15470  197F                     __ptext102:	
 15471 ;; *************** function _getCmd_Status *****************
 15472 ;; Defined at:
 15473 ;;		line 659 in file "../src/Main_B1.c"
 15474 ;; Parameters:    Size  Location     Type
 15475 ;;  number          1    wreg     unsigned char 
 15476 ;; Auto vars:     Size  Location     Type
 15477 ;;  number          1    2[COMMON] unsigned char 
 15478 ;;  cmd             1    3[COMMON] unsigned char 
 15479 ;; Return value:  Size  Location     Type
 15480 ;;                  1    wreg      unsigned char 
 15481 ;; Registers used:
 15482 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15483 ;; Tracked objects:
 15484 ;;		On entry : 0/0
 15485 ;;		On exit  : 0/0
 15486 ;;		Unchanged: 0/0
 15487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15491 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15492 ;;Total ram usage:        2 bytes
 15493 ;; Hardware stack levels used:    1
 15494 ;; Hardware stack levels required when called:    3
 15495 ;; This function calls:
 15496 ;;		Nothing
 15497 ;; This function is called by:
 15498 ;;		_setDimmerLights_OnOff
 15499 ;; This function uses a non-reentrant model
 15500 ;;
 15501                           
 15502                           
 15503                           ;psect for function _getCmd_Status
 15504  197F                     _getCmd_Status:	
 15505                           
 15506                           ;incstack = 0
 15507                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15508                           ;getCmd_Status@number stored from wreg
 15509  197F  00F2               	movwf	getCmd_Status@number
 15510                           
 15511                           ;Main_B1.c: 660: char cmd = 0;
 15512  1980  01F3               	clrf	getCmd_Status@cmd
 15513                           
 15514                           ;Main_B1.c: 661: switch (number) {
 15515  1981  2988               	goto	l7619
 15516  1982                     l7615:	
 15517                           ;Main_B1.c: 662: case 1:
 15518                           
 15519                           
 15520                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15521  1982  3000               	movlw	0
 15522  1983  0021               	movlb	1	; select bank1
 15523  1984  1869               	btfsc	_Cmd^(0+128),0
 15524  1985  3001               	movlw	1
 15525  1986  00F3               	movwf	getCmd_Status@cmd
 15526                           
 15527                           ;Main_B1.c: 665: }
 15528                           
 15529                           ;Main_B1.c: 664: break;
 15530  1987  298D               	goto	l7621
 15531  1988                     l7619:	
 15532  1988  0872               	movf	getCmd_Status@number,w
 15533                           
 15534                           ; Switch size 1, requested type "space"
 15535                           ; Number of cases is 1, Range of values is 1 to 1
 15536                           ; switch strategies available:
 15537                           ; Name         Instructions Cycles
 15538                           ; simple_byte            4     3 (average)
 15539                           ; direct_byte           11     9 (fixed)
 15540                           ; jumptable            263     9 (fixed)
 15541                           ;	Chosen strategy is simple_byte
 15542  1989  3A01               	xorlw	1	; case 1
 15543  198A  1903               	skipnz
 15544  198B  2982               	goto	l7615
 15545  198C  298D               	goto	l7621
 15546  198D                     l7621:	
 15547                           
 15548                           ;Main_B1.c: 666: return cmd;
 15549  198D  0873               	movf	getCmd_Status@cmd,w
 15550  198E  0008               	return
 15551  198F                     __end_of_getCmd_Status:	
 15552                           
 15553                           	psect	text103
 15554  13E7                     __ptext103:	
 15555 ;; *************** function _setDimmerLights_Dimming *****************
 15556 ;; Defined at:
 15557 ;;		line 1084 in file "../src/Dimmer_B1.c"
 15558 ;; Parameters:    Size  Location     Type
 15559 ;;  lights          1    wreg     unsigned char 
 15560 ;;  status          1   66[BANK0 ] unsigned char 
 15561 ;; Auto vars:     Size  Location     Type
 15562 ;;  lights          1   69[BANK0 ] unsigned char 
 15563 ;;  value           1   68[BANK0 ] unsigned char 
 15564 ;; Return value:  Size  Location     Type
 15565 ;;		None               void
 15566 ;; Registers used:
 15567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15568 ;; Tracked objects:
 15569 ;;		On entry : 0/0
 15570 ;;		On exit  : 0/0
 15571 ;;		Unchanged: 0/0
 15572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15573 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15574 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15576 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15577 ;;Total ram usage:        4 bytes
 15578 ;; Hardware stack levels used:    1
 15579 ;; Hardware stack levels required when called:    6
 15580 ;; This function calls:
 15581 ;;		_getDimmerIntr_DimmingValue
 15582 ;;		_getDimmerLights_ValueToPercent
 15583 ;;		_setBuz
 15584 ;;		_setDimmerIntr_Dimming_Sw
 15585 ;;		_setDimmerIntr_MaxmumValue
 15586 ;;		_setDimmerLights_Line
 15587 ;;		_setMemory_Modify
 15588 ;;		_setProductData
 15589 ;;		_setRF_DimmerLights
 15590 ;;		_setRF_TransceiveGO
 15591 ;;		_setTxData
 15592 ;; This function is called by:
 15593 ;;		_setDimmerLights_Main
 15594 ;; This function uses a non-reentrant model
 15595 ;;
 15596                           
 15597                           
 15598                           ;psect for function _setDimmerLights_Dimming
 15599  13E7                     _setDimmerLights_Dimming:	
 15600                           
 15601                           ;incstack = 0
 15602                           ; Regs used in _setDimmerLights_Dimming: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15603                           ;setDimmerLights_Dimming@lights stored from wreg
 15604  13E7  0020               	movlb	0	; select bank0
 15605  13E8  00E5               	movwf	setDimmerLights_Dimming@lights
 15606                           
 15607                           ;Dimmer_B1.c: 1085: setDimmerIntr_Dimming_Sw(lights, status);
 15608  13E9  0862               	movf	setDimmerLights_Dimming@status,w
 15609  13EA  00E3               	movwf	??_setDimmerLights_Dimming
 15610  13EB  0863               	movf	??_setDimmerLights_Dimming,w
 15611  13EC  00F2               	movwf	setDimmerIntr_Dimming_Sw@command
 15612  13ED  0865               	movf	setDimmerLights_Dimming@lights,w
 15613  13EE  319D  254C  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15614                           
 15615                           ;Dimmer_B1.c: 1086: if (status == 1) {
 15616  13F1  0020               	movlb	0	; select bank0
 15617  13F2  0862               	movf	setDimmerLights_Dimming@status,w
 15618  13F3  3A01               	xorlw	1
 15619  13F4  1D03               	skipz
 15620  13F5  2C03               	goto	l10303
 15621                           
 15622                           ;Dimmer_B1.c: 1088: setRF_TransceiveGO(0);
 15623  13F6  3000               	movlw	0
 15624  13F7  3199  216F  3193   	fcall	_setRF_TransceiveGO
 15625                           
 15626                           ;Dimmer_B1.c: 1090: setBuz(1, 100);
 15627  13FA  3064               	movlw	100
 15628  13FB  0020               	movlb	0	; select bank0
 15629  13FC  00A4               	movwf	setBuz@time
 15630  13FD  3000               	movlw	0
 15631  13FE  00A5               	movwf	setBuz@time+1
 15632  13FF  3001               	movlw	1
 15633  1400  3192  22EC         	fcall	_setBuz
 15634                           
 15635                           ;Dimmer_B1.c: 1091: } else if (status == 0) {
 15636  1402  0008               	return
 15637  1403                     l10303:	
 15638  1403  0020               	movlb	0	; select bank0
 15639  1404  08E2               	movf	setDimmerLights_Dimming@status,f
 15640  1405  1D03               	skipz
 15641  1406  0008               	return
 15642                           
 15643                           ;Dimmer_B1.c: 1094: Dimmer.Load_Status = 0;
 15644  1407  0022               	movlb	2	; select bank2
 15645  1408  1120               	bcf	_Dimmer^(0+256),2
 15646                           
 15647                           ;Dimmer_B1.c: 1095: setDimmerLights_Line(lights);
 15648  1409  0020               	movlb	0	; select bank0
 15649  140A  0865               	movf	setDimmerLights_Dimming@lights,w
 15650  140B  319B  2312  3193   	fcall	_setDimmerLights_Line
 15651                           
 15652                           ;Dimmer_B1.c: 1097: char value = getDimmerIntr_DimmingValue(lights);
 15653  140E  0020               	movlb	0	; select bank0
 15654  140F  0865               	movf	setDimmerLights_Dimming@lights,w
 15655  1410  319A  2214  3193   	fcall	_getDimmerIntr_DimmingValue
 15656  1413  0020               	movlb	0	; select bank0
 15657  1414  00E3               	movwf	??_setDimmerLights_Dimming
 15658  1415  0863               	movf	??_setDimmerLights_Dimming,w
 15659  1416  00E4               	movwf	setDimmerLights_Dimming@value
 15660                           
 15661                           ;Dimmer_B1.c: 1098: setDimmerIntr_MaxmumValue(lights, value);
 15662  1417  0864               	movf	setDimmerLights_Dimming@value,w
 15663  1418  00E3               	movwf	??_setDimmerLights_Dimming
 15664  1419  0863               	movf	??_setDimmerLights_Dimming,w
 15665  141A  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 15666  141B  0865               	movf	setDimmerLights_Dimming@lights,w
 15667  141C  319A  22FB  3193   	fcall	_setDimmerIntr_MaxmumValue
 15668                           
 15669                           ;Dimmer_B1.c: 1099: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 15670  141F  0020               	movlb	0	; select bank0
 15671  1420  0864               	movf	setDimmerLights_Dimming@value,w
 15672  1421  3197  2736  3193   	fcall	_getDimmerLights_ValueToPercent
 15673  1424  0020               	movlb	0	; select bank0
 15674  1425  00E3               	movwf	??_setDimmerLights_Dimming
 15675  1426  0863               	movf	??_setDimmerLights_Dimming,w
 15676  1427  00DA               	movwf	setProductData@value
 15677  1428  0865               	movf	setDimmerLights_Dimming@lights,w
 15678  1429  3E14               	addlw	20
 15679  142A  3198  20AE  3193   	fcall	_setProductData
 15680                           
 15681                           ;Dimmer_B1.c: 1106: setMemory_Modify(1);
 15682  142D  3001               	movlw	1
 15683  142E  3199  215F  3193   	fcall	_setMemory_Modify
 15684                           
 15685                           ;Dimmer_B1.c: 1110: setRF_DimmerLights(lights, 1);
 15686  1431  0020               	movlb	0	; select bank0
 15687  1432  01DD               	clrf	setRF_DimmerLights@on
 15688  1433  0ADD               	incf	setRF_DimmerLights@on,f
 15689  1434  0865               	movf	setDimmerLights_Dimming@lights,w
 15690  1435  3188  2027  3193   	fcall	_setRF_DimmerLights
 15691                           
 15692                           ;Dimmer_B1.c: 1111: setTxData();
 15693  1438  3198  2001         	fcall	_setTxData
 15694  143A  0008               	return
 15695  143B                     __end_of_setDimmerLights_Dimming:	
 15696                           
 15697                           	psect	text104
 15698  1801                     __ptext104:	
 15699 ;; *************** function _setTxData *****************
 15700 ;; Defined at:
 15701 ;;		line 237 in file "../src/RF_Control_B1.c"
 15702 ;; Parameters:    Size  Location     Type
 15703 ;;		None
 15704 ;; Auto vars:     Size  Location     Type
 15705 ;;  i               1    0        unsigned char 
 15706 ;; Return value:  Size  Location     Type
 15707 ;;		None               void
 15708 ;; Registers used:
 15709 ;;		status,2
 15710 ;; Tracked objects:
 15711 ;;		On entry : 0/0
 15712 ;;		On exit  : 0/0
 15713 ;;		Unchanged: 0/0
 15714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15719 ;;Total ram usage:        0 bytes
 15720 ;; Hardware stack levels used:    1
 15721 ;; Hardware stack levels required when called:    3
 15722 ;; This function calls:
 15723 ;;		Nothing
 15724 ;; This function is called by:
 15725 ;;		_setDimmerLights_OnOff
 15726 ;;		_setDimmerLights_Dimming
 15727 ;;		_getRxData
 15728 ;;		_setControl_Lights_Table
 15729 ;;		_setRFSW_Control
 15730 ;;		_setRFSW_AdjControl
 15731 ;; This function uses a non-reentrant model
 15732 ;;
 15733                           
 15734                           
 15735                           ;psect for function _setTxData
 15736  1801                     _setTxData:	
 15737                           
 15738                           ;RF_Control_B1.c: 238: char i;
 15739                           ;RF_Control_B1.c: 239: if (RF1.Enable == 1) {
 15740                           
 15741                           ;incstack = 0
 15742                           ; Regs used in _setTxData: [status,2]
 15743  1801  0021               	movlb	1	; select bank1
 15744  1802  1C40               	btfss	_RF1^(0+128),0
 15745  1803  0008               	return
 15746                           
 15747                           ;RF_Control_B1.c: 241: RF1.TransceiveGO = 1;
 15748  1804  1540               	bsf	_RF1^(0+128),2
 15749                           
 15750                           ;RF_Control_B1.c: 242: RF1.Count = 0;
 15751  1805  01C3               	clrf	(_RF1^(0+128)+3)
 15752  1806  01C4               	clrf	((_RF1+1)^(0+128)+3)
 15753  1807  0008               	return
 15754  1808                     __end_of_setTxData:	
 15755                           
 15756                           	psect	text105
 15757  196F                     __ptext105:	
 15758 ;; *************** function _setRF_TransceiveGO *****************
 15759 ;; Defined at:
 15760 ;;		line 571 in file "../src/RF_Control_B1.c"
 15761 ;; Parameters:    Size  Location     Type
 15762 ;;  command         1    wreg     unsigned char 
 15763 ;; Auto vars:     Size  Location     Type
 15764 ;;  command         1    3[COMMON] unsigned char 
 15765 ;; Return value:  Size  Location     Type
 15766 ;;		None               void
 15767 ;; Registers used:
 15768 ;;		wreg, status,2, status,0
 15769 ;; Tracked objects:
 15770 ;;		On entry : 0/0
 15771 ;;		On exit  : 0/0
 15772 ;;		Unchanged: 0/0
 15773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15776 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15777 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15778 ;;Total ram usage:        2 bytes
 15779 ;; Hardware stack levels used:    1
 15780 ;; Hardware stack levels required when called:    3
 15781 ;; This function calls:
 15782 ;;		Nothing
 15783 ;; This function is called by:
 15784 ;;		_setDimmerLights_Dimming
 15785 ;; This function uses a non-reentrant model
 15786 ;;
 15787                           
 15788                           
 15789                           ;psect for function _setRF_TransceiveGO
 15790  196F                     _setRF_TransceiveGO:	
 15791                           
 15792                           ;incstack = 0
 15793                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15794                           ;setRF_TransceiveGO@command stored from wreg
 15795  196F  00F3               	movwf	setRF_TransceiveGO@command
 15796                           
 15797                           ;RF_Control_B1.c: 572: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15798  1970  0873               	movf	setRF_TransceiveGO@command,w
 15799  1971  3A01               	xorlw	1
 15800  1972  3000               	movlw	0
 15801  1973  1903               	skipnz
 15802  1974  3001               	movlw	1
 15803  1975  00F2               	movwf	??_setRF_TransceiveGO
 15804  1976  0DF2               	rlf	??_setRF_TransceiveGO,f
 15805  1977  0DF2               	rlf	??_setRF_TransceiveGO,f
 15806  1978  0021               	movlb	1	; select bank1
 15807  1979  0840               	movf	_RF1^(0+128),w
 15808  197A  0672               	xorwf	??_setRF_TransceiveGO,w
 15809  197B  39FB               	andlw	-5
 15810  197C  0672               	xorwf	??_setRF_TransceiveGO,w
 15811  197D  00C0               	movwf	_RF1^(0+128)
 15812  197E  0008               	return
 15813  197F                     __end_of_setRF_TransceiveGO:	
 15814                           
 15815                           	psect	text106
 15816  0827                     __ptext106:	
 15817 ;; *************** function _setRF_DimmerLights *****************
 15818 ;; Defined at:
 15819 ;;		line 547 in file "../src/RF_Control_B1.c"
 15820 ;; Parameters:    Size  Location     Type
 15821 ;;  lights          1    wreg     unsigned char 
 15822 ;;  on              1   61[BANK0 ] unsigned char 
 15823 ;; Auto vars:     Size  Location     Type
 15824 ;;  lights          1   65[BANK0 ] unsigned char 
 15825 ;;  status          1   64[BANK0 ] unsigned char 
 15826 ;; Return value:  Size  Location     Type
 15827 ;;		None               void
 15828 ;; Registers used:
 15829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15830 ;; Tracked objects:
 15831 ;;		On entry : 0/0
 15832 ;;		On exit  : 0/0
 15833 ;;		Unchanged: 0/0
 15834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15835 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15836 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15838 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15839 ;;Total ram usage:        5 bytes
 15840 ;; Hardware stack levels used:    1
 15841 ;; Hardware stack levels required when called:    4
 15842 ;; This function calls:
 15843 ;;		_setProductData
 15844 ;; This function is called by:
 15845 ;;		_setDimmerLights_OnOff
 15846 ;;		_setDimmerLights_Dimming
 15847 ;;		_setRFSW_Control
 15848 ;; This function uses a non-reentrant model
 15849 ;;
 15850                           
 15851                           
 15852                           ;psect for function _setRF_DimmerLights
 15853  0827                     _setRF_DimmerLights:	
 15854                           
 15855                           ;incstack = 0
 15856                           ; Regs used in _setRF_DimmerLights: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15857                           ;setRF_DimmerLights@lights stored from wreg
 15858  0827  0020               	movlb	0	; select bank0
 15859  0828  00E1               	movwf	setRF_DimmerLights@lights
 15860                           
 15861                           ;RF_Control_B1.c: 548: char status = 1;
 15862  0829  01E0               	clrf	setRF_DimmerLights@status
 15863  082A  0AE0               	incf	setRF_DimmerLights@status,f
 15864                           
 15865                           ;RF_Control_B1.c: 549: switch (lights) {
 15866  082B  2832               	goto	l7133
 15867  082C                     l7127:	
 15868                           ;RF_Control_B1.c: 550: case 2:
 15869                           
 15870  082C  282F               	goto	L10
 15871  082D                     l7129:	
 15872                           ;RF_Control_B1.c: 553: case 3:
 15873                           
 15874                           ;RF_Control_B1.c: 552: break;
 15875                           
 15876                           ;RF_Control_B1.c: 551: status <<= 1;
 15877                           
 15878                           
 15879                           ;RF_Control_B1.c: 554: status <<= 2;
 15880  082D  1003               	clrc
 15881  082E  0DE0               	rlf	setRF_DimmerLights@status,f
 15882  082F                     L10:	
 15883  082F  1003               	clrc
 15884  0830  0DE0               	rlf	setRF_DimmerLights@status,f
 15885                           
 15886                           ;RF_Control_B1.c: 556: }
 15887                           
 15888                           ;RF_Control_B1.c: 555: break;
 15889  0831  283A               	goto	l2588
 15890  0832                     l7133:	
 15891  0832  0861               	movf	setRF_DimmerLights@lights,w
 15892                           
 15893                           ; Switch size 1, requested type "space"
 15894                           ; Number of cases is 2, Range of values is 2 to 3
 15895                           ; switch strategies available:
 15896                           ; Name         Instructions Cycles
 15897                           ; simple_byte            7     4 (average)
 15898                           ; direct_byte           13     9 (fixed)
 15899                           ; jumptable            263     9 (fixed)
 15900                           ;	Chosen strategy is simple_byte
 15901  0833  3A02               	xorlw	2	; case 2
 15902  0834  1903               	skipnz
 15903  0835  282C               	goto	l7127
 15904  0836  3A01               	xorlw	1	; case 3
 15905  0837  1903               	skipnz
 15906  0838  282D               	goto	l7129
 15907  0839  283A               	goto	l2588
 15908  083A                     l2588:	
 15909                           
 15910                           ;RF_Control_B1.c: 557: status = ~status;
 15911  083A  09E0               	comf	setRF_DimmerLights@status,f
 15912                           
 15913                           ;RF_Control_B1.c: 559: setProductData(11, lights);
 15914  083B  0861               	movf	setRF_DimmerLights@lights,w
 15915  083C  00DE               	movwf	??_setRF_DimmerLights
 15916  083D  085E               	movf	??_setRF_DimmerLights,w
 15917  083E  00DA               	movwf	setProductData@value
 15918  083F  300B               	movlw	11
 15919  0840  3198  20AE  3188   	fcall	_setProductData
 15920                           
 15921                           ;RF_Control_B1.c: 560: setProductData(17, product->Data[26 + lights]);
 15922  0843  0020               	movlb	0	; select bank0
 15923  0844  0861               	movf	setRF_DimmerLights@lights,w
 15924  0845  3E1A               	addlw	26
 15925  0846  077B               	addwf	_product,w
 15926  0847  00DE               	movwf	??_setRF_DimmerLights
 15927  0848  085E               	movf	??_setRF_DimmerLights,w
 15928  0849  0086               	movwf	6
 15929  084A  3002               	movlw	2	; select bank4/5
 15930  084B  0087               	movwf	7
 15931  084C  0801               	movf	1,w
 15932  084D  00DF               	movwf	??_setRF_DimmerLights+1
 15933  084E  085F               	movf	??_setRF_DimmerLights+1,w
 15934  084F  00DA               	movwf	setProductData@value
 15935  0850  3011               	movlw	17
 15936  0851  3198  20AE  3188   	fcall	_setProductData
 15937                           
 15938                           ;RF_Control_B1.c: 561: if (on == 1) {
 15939  0854  0020               	movlb	0	; select bank0
 15940  0855  085D               	movf	setRF_DimmerLights@on,w
 15941  0856  3A01               	xorlw	1
 15942  0857  1D03               	skipz
 15943  0858  2878               	goto	l7141
 15944                           
 15945                           ;RF_Control_B1.c: 562: setProductData(9, product->Data[20 + lights]);
 15946  0859  0861               	movf	setRF_DimmerLights@lights,w
 15947  085A  3E14               	addlw	20
 15948  085B  077B               	addwf	_product,w
 15949  085C  00DE               	movwf	??_setRF_DimmerLights
 15950  085D  085E               	movf	??_setRF_DimmerLights,w
 15951  085E  0086               	movwf	6
 15952  085F  3002               	movlw	2	; select bank4/5
 15953  0860  0087               	movwf	7
 15954  0861  0801               	movf	1,w
 15955  0862  00DF               	movwf	??_setRF_DimmerLights+1
 15956  0863  085F               	movf	??_setRF_DimmerLights+1,w
 15957  0864  00DA               	movwf	setProductData@value
 15958  0865  3009               	movlw	9
 15959  0866  3198  20AE  3188   	fcall	_setProductData
 15960                           
 15961                           ;RF_Control_B1.c: 563: setProductData(15, (product->Data[15] | lights));
 15962  0869  087B               	movf	_product,w
 15963  086A  3E0F               	addlw	15
 15964  086B  0086               	movwf	6
 15965  086C  3002               	movlw	2	; select bank4/5
 15966  086D  0087               	movwf	7
 15967  086E  0801               	movf	1,w
 15968  086F  0020               	movlb	0	; select bank0
 15969  0870  0461               	iorwf	setRF_DimmerLights@lights,w
 15970  0871  00DE               	movwf	??_setRF_DimmerLights
 15971  0872  085E               	movf	??_setRF_DimmerLights,w
 15972  0873  00DA               	movwf	setProductData@value
 15973  0874  300F               	movlw	15
 15974  0875  3198  20AE         	fcall	_setProductData
 15975                           
 15976                           ;RF_Control_B1.c: 564: } else {
 15977  0877  0008               	return
 15978  0878                     l7141:	
 15979                           
 15980                           ;RF_Control_B1.c: 565: setProductData(9, 0x00);
 15981  0878  0020               	movlb	0	; select bank0
 15982  0879  01DA               	clrf	setProductData@value
 15983  087A  3009               	movlw	9
 15984  087B  3198  20AE  3188   	fcall	_setProductData
 15985                           
 15986                           ;RF_Control_B1.c: 566: setProductData(15, (product->Data[15] & status));
 15987  087E  087B               	movf	_product,w
 15988  087F  3E0F               	addlw	15
 15989  0880  0086               	movwf	6
 15990  0881  3002               	movlw	2	; select bank4/5
 15991  0882  0087               	movwf	7
 15992  0883  0801               	movf	1,w
 15993  0884  0020               	movlb	0	; select bank0
 15994  0885  0560               	andwf	setRF_DimmerLights@status,w
 15995  0886  00DE               	movwf	??_setRF_DimmerLights
 15996  0887  085E               	movf	??_setRF_DimmerLights,w
 15997  0888  00DA               	movwf	setProductData@value
 15998  0889  300F               	movlw	15
 15999  088A  3198  20AE         	fcall	_setProductData
 16000  088C  0008               	return
 16001  088D                     __end_of_setRF_DimmerLights:	
 16002                           
 16003                           	psect	text107
 16004  1B12                     __ptext107:	
 16005 ;; *************** function _setDimmerLights_Line *****************
 16006 ;; Defined at:
 16007 ;;		line 1156 in file "../src/Dimmer_B1.c"
 16008 ;; Parameters:    Size  Location     Type
 16009 ;;  lights          1    wreg     unsigned char 
 16010 ;; Auto vars:     Size  Location     Type
 16011 ;;  lights          1    2[COMMON] unsigned char 
 16012 ;; Return value:  Size  Location     Type
 16013 ;;		None               void
 16014 ;; Registers used:
 16015 ;;		wreg
 16016 ;; Tracked objects:
 16017 ;;		On entry : 0/0
 16018 ;;		On exit  : 0/0
 16019 ;;		Unchanged: 0/0
 16020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16025 ;;Total ram usage:        1 bytes
 16026 ;; Hardware stack levels used:    1
 16027 ;; Hardware stack levels required when called:    3
 16028 ;; This function calls:
 16029 ;;		Nothing
 16030 ;; This function is called by:
 16031 ;;		_setDimmerLights_OnOff
 16032 ;;		_setDimmerLights_Dimming
 16033 ;; This function uses a non-reentrant model
 16034 ;;
 16035                           
 16036                           
 16037                           ;psect for function _setDimmerLights_Line
 16038  1B12                     _setDimmerLights_Line:	
 16039                           
 16040                           ;incstack = 0
 16041                           ; Regs used in _setDimmerLights_Line: [wreg]
 16042                           ;setDimmerLights_Line@lights stored from wreg
 16043  1B12  00F2               	movwf	setDimmerLights_Line@lights
 16044                           
 16045                           ;Dimmer_B1.c: 1157: Dimmer.LoadGO = 1;
 16046  1B13  0022               	movlb	2	; select bank2
 16047  1B14  14A0               	bsf	_Dimmer^(0+256),1
 16048                           
 16049                           ;Dimmer_B1.c: 1159: DimmerLights1.Line = 0;
 16050  1B15  0023               	movlb	3	; select bank3
 16051  1B16  10BF               	bcf	(_DimmerLights1^(0+384)+1),1
 16052                           
 16053                           ;Dimmer_B1.c: 1160: if (lights == 1 && lights != 0) {
 16054  1B17  0872               	movf	setDimmerLights_Line@lights,w
 16055  1B18  3A01               	xorlw	1
 16056  1B19  1D03               	skipz
 16057  1B1A  2B1F               	goto	l957
 16058  1B1B  0872               	movf	setDimmerLights_Line@lights,w
 16059  1B1C  1903               	btfsc	3,2
 16060  1B1D  2B1F               	goto	l957
 16061                           
 16062                           ;Dimmer_B1.c: 1161: DimmerLights1.Line = 1;
 16063  1B1E  14BF               	bsf	(_DimmerLights1^(0+384)+1),1
 16064  1B1F                     l957:	
 16065                           
 16066                           ;Dimmer_B1.c: 1162: }
 16067                           ;Dimmer_B1.c: 1165: DimmerLights2.Line = 0;
 16068  1B1F  10C8               	bcf	(_DimmerLights2^(0+384)+1),1
 16069                           
 16070                           ;Dimmer_B1.c: 1166: if (lights == 2 && lights != 0) {
 16071  1B20  0872               	movf	setDimmerLights_Line@lights,w
 16072  1B21  3A02               	xorlw	2
 16073  1B22  1D03               	skipz
 16074  1B23  0008               	return
 16075  1B24  0872               	movf	setDimmerLights_Line@lights,w
 16076  1B25  1903               	btfsc	3,2
 16077  1B26  0008               	return
 16078                           
 16079                           ;Dimmer_B1.c: 1167: DimmerLights2.Line = 1;
 16080  1B27  14C8               	bsf	(_DimmerLights2^(0+384)+1),1
 16081  1B28  0008               	return
 16082  1B29                     __end_of_setDimmerLights_Line:	
 16083                           
 16084                           	psect	text108
 16085  1D4C                     __ptext108:	
 16086 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16087 ;; Defined at:
 16088 ;;		line 223 in file "../src/Dimmer_B1.c"
 16089 ;; Parameters:    Size  Location     Type
 16090 ;;  lights          1    wreg     unsigned char 
 16091 ;;  command         1    2[COMMON] unsigned char 
 16092 ;; Auto vars:     Size  Location     Type
 16093 ;;  lights          1    4[COMMON] unsigned char 
 16094 ;; Return value:  Size  Location     Type
 16095 ;;		None               void
 16096 ;; Registers used:
 16097 ;;		wreg, status,2, status,0
 16098 ;; Tracked objects:
 16099 ;;		On entry : 0/0
 16100 ;;		On exit  : 0/0
 16101 ;;		Unchanged: 0/0
 16102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16103 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16104 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16105 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;Total ram usage:        3 bytes
 16108 ;; Hardware stack levels used:    1
 16109 ;; Hardware stack levels required when called:    3
 16110 ;; This function calls:
 16111 ;;		Nothing
 16112 ;; This function is called by:
 16113 ;;		_setDimmerLights_Dimming
 16114 ;;		_setDimmerLights_DimmingClose
 16115 ;; This function uses a non-reentrant model
 16116 ;;
 16117                           
 16118                           
 16119                           ;psect for function _setDimmerIntr_Dimming_Sw
 16120  1D4C                     _setDimmerIntr_Dimming_Sw:	
 16121                           
 16122                           ;incstack = 0
 16123                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16124                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16125  1D4C  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 16126                           
 16127                           ;Dimmer_B1.c: 225: if (lights == 1) {
 16128  1D4D  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16129  1D4E  3A01               	xorlw	1
 16130  1D4F  1D03               	skipz
 16131  1D50  2D5F               	goto	l7253
 16132                           
 16133                           ;Dimmer_B1.c: 226: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16134  1D51  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16135  1D52  3A01               	xorlw	1
 16136  1D53  3000               	movlw	0
 16137  1D54  1903               	skipnz
 16138  1D55  3001               	movlw	1
 16139  1D56  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16140  1D57  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16141  1D58  0021               	movlb	1	; select bank1
 16142  1D59  0820               	movf	_DimmerIntr1^(0+128),w
 16143  1D5A  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16144  1D5B  39EF               	andlw	-17
 16145  1D5C  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16146  1D5D  00A0               	movwf	_DimmerIntr1^(0+128)
 16147                           
 16148                           ;Dimmer_B1.c: 227: }
 16149  1D5E  0008               	return
 16150  1D5F                     l7253:	
 16151                           
 16152                           ;Dimmer_B1.c: 230: else if (lights == 2) {
 16153  1D5F  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16154  1D60  3A02               	xorlw	2
 16155  1D61  1D03               	skipz
 16156  1D62  0008               	return
 16157                           
 16158                           ;Dimmer_B1.c: 231: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16159  1D63  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16160  1D64  3A01               	xorlw	1
 16161  1D65  3000               	movlw	0
 16162  1D66  1903               	skipnz
 16163  1D67  3001               	movlw	1
 16164  1D68  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16165  1D69  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16166  1D6A  0021               	movlb	1	; select bank1
 16167  1D6B  0830               	movf	_DimmerIntr2^(0+128),w
 16168  1D6C  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16169  1D6D  39EF               	andlw	-17
 16170  1D6E  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16171  1D6F  00B0               	movwf	_DimmerIntr2^(0+128)
 16172  1D70  0008               	return
 16173  1D71                     __end_of_setDimmerIntr_Dimming_Sw:	
 16174                           
 16175                           	psect	text109
 16176  1A14                     __ptext109:	
 16177 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16178 ;; Defined at:
 16179 ;;		line 127 in file "../src/Dimmer_B1.c"
 16180 ;; Parameters:    Size  Location     Type
 16181 ;;  lights          1    wreg     unsigned char 
 16182 ;; Auto vars:     Size  Location     Type
 16183 ;;  lights          1    4[COMMON] unsigned char 
 16184 ;;  value           1    3[COMMON] unsigned char 
 16185 ;; Return value:  Size  Location     Type
 16186 ;;                  1    wreg      unsigned char 
 16187 ;; Registers used:
 16188 ;;		wreg, status,2
 16189 ;; Tracked objects:
 16190 ;;		On entry : 0/0
 16191 ;;		On exit  : 0/0
 16192 ;;		Unchanged: 0/0
 16193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16196 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16197 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16198 ;;Total ram usage:        3 bytes
 16199 ;; Hardware stack levels used:    1
 16200 ;; Hardware stack levels required when called:    3
 16201 ;; This function calls:
 16202 ;;		Nothing
 16203 ;; This function is called by:
 16204 ;;		_setDimmerLights_Dimming
 16205 ;; This function uses a non-reentrant model
 16206 ;;
 16207                           
 16208                           
 16209                           ;psect for function _getDimmerIntr_DimmingValue
 16210  1A14                     _getDimmerIntr_DimmingValue:	
 16211                           
 16212                           ;incstack = 0
 16213                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16214                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16215  1A14  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 16216                           
 16217                           ;Dimmer_B1.c: 128: char value = 0;
 16218  1A15  01F3               	clrf	getDimmerIntr_DimmingValue@value
 16219                           
 16220                           ;Dimmer_B1.c: 130: if (lights == 1) {
 16221  1A16  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16222  1A17  3A01               	xorlw	1
 16223  1A18  1D03               	skipz
 16224  1A19  2A1D               	goto	l7487
 16225                           
 16226                           ;Dimmer_B1.c: 131: value = DimmerIntr1.DimmingValue;
 16227  1A1A  0021               	movlb	1	; select bank1
 16228  1A1B  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 16229  1A1C  2A23               	goto	L11
 16230  1A1D                     l7487:	
 16231                           ;Dimmer_B1.c: 132: }
 16232                           
 16233                           
 16234                           ;Dimmer_B1.c: 135: else if (lights == 2) {
 16235  1A1D  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16236  1A1E  3A02               	xorlw	2
 16237  1A1F  1D03               	skipz
 16238  1A20  2A26               	goto	l781
 16239                           
 16240                           ;Dimmer_B1.c: 136: value = DimmerIntr2.DimmingValue;
 16241  1A21  0021               	movlb	1	; select bank1
 16242  1A22  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 16243  1A23                     L11:	
 16244  1A23  00F2               	movwf	??_getDimmerIntr_DimmingValue
 16245  1A24  0872               	movf	??_getDimmerIntr_DimmingValue,w
 16246  1A25  00F3               	movwf	getDimmerIntr_DimmingValue@value
 16247  1A26                     l781:	
 16248                           
 16249                           ;Dimmer_B1.c: 137: }
 16250                           ;Dimmer_B1.c: 144: return value;
 16251  1A26  0873               	movf	getDimmerIntr_DimmingValue@value,w
 16252  1A27  0008               	return
 16253  1A28                     __end_of_getDimmerIntr_DimmingValue:	
 16254                           
 16255                           	psect	text110
 16256  1FC9                     __ptext110:	
 16257 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16258 ;; Defined at:
 16259 ;;		line 1117 in file "../src/Dimmer_B1.c"
 16260 ;; Parameters:    Size  Location     Type
 16261 ;;  lights          1    wreg     unsigned char 
 16262 ;; Auto vars:     Size  Location     Type
 16263 ;;  lights          1    7[COMMON] unsigned char 
 16264 ;;  allow           1    8[COMMON] unsigned char 
 16265 ;; Return value:  Size  Location     Type
 16266 ;;                  1    wreg      unsigned char 
 16267 ;; Registers used:
 16268 ;;		wreg, status,2, status,0, pclath, cstack
 16269 ;; Tracked objects:
 16270 ;;		On entry : 0/0
 16271 ;;		On exit  : 0/0
 16272 ;;		Unchanged: 0/0
 16273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16275 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16276 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;Total ram usage:        6 bytes
 16279 ;; Hardware stack levels used:    1
 16280 ;; Hardware stack levels required when called:    4
 16281 ;; This function calls:
 16282 ;;		_getLoad_OK
 16283 ;; This function is called by:
 16284 ;;		_setDimmerLights_Main
 16285 ;; This function uses a non-reentrant model
 16286 ;;
 16287                           
 16288                           
 16289                           ;psect for function _getDimmerLights_Allow_Condition
 16290  1FC9                     _getDimmerLights_Allow_Condition:	
 16291                           
 16292                           ;incstack = 0
 16293                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16294                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16295  1FC9  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 16296                           
 16297                           ;Dimmer_B1.c: 1118: char allow = 0;
 16298  1FCA  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 16299                           
 16300                           ;Dimmer_B1.c: 1124: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16301  1FCB  01F4               	clrf	_getDimmerLights_Allow_Condition$2729
 16302  1FCC  0AF4               	incf	_getDimmerLights_Allow_Condition$2729,f
 16303  1FCD  31A7  27F9  319F   	fcall	_getLoad_OK
 16304  1FD0  3800               	iorlw	0
 16305  1FD1  1D03               	skipz
 16306  1FD2  2FD7               	goto	l7809
 16307  1FD3  0022               	movlb	2	; select bank2
 16308  1FD4  18A0               	btfsc	_Dimmer^(0+256),1
 16309  1FD5  2FD7               	goto	l7809
 16310  1FD6  01F4               	clrf	_getDimmerLights_Allow_Condition$2729
 16311  1FD7                     l7809:	
 16312  1FD7  0874               	movf	_getDimmerLights_Allow_Condition$2729,w
 16313  1FD8  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16314  1FD9  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16315  1FDA  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16316                           
 16317                           ;Dimmer_B1.c: 1128: if (allow == 0) {
 16318  1FDB  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 16319  1FDC  1D03               	skipz
 16320  1FDD  2FFE               	goto	l7833
 16321                           
 16322                           ;Dimmer_B1.c: 1129: if (lights == 1) {
 16323  1FDE  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16324  1FDF  3A01               	xorlw	1
 16325  1FE0  1D03               	skipz
 16326  1FE1  2FED               	goto	l7823
 16327                           
 16328                           ;Dimmer_B1.c: 1130: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16329  1FE2  01F5               	clrf	_getDimmerLights_Allow_Condition$2730
 16330  1FE3  0AF5               	incf	_getDimmerLights_Allow_Condition$2730,f
 16331  1FE4  0023               	movlb	3	; select bank3
 16332  1FE5  1A47               	btfsc	_DimmerLights2^(0+384),4
 16333  1FE6  2FEB               	goto	l7821
 16334  1FE7  0021               	movlb	1	; select bank1
 16335  1FE8  1A30               	btfsc	_DimmerIntr2^(0+128),4
 16336  1FE9  2FEB               	goto	l7821
 16337  1FEA  01F5               	clrf	_getDimmerLights_Allow_Condition$2730
 16338  1FEB                     l7821:	
 16339  1FEB  0875               	movf	_getDimmerLights_Allow_Condition$2730,w
 16340  1FEC  2FFB               	goto	L12
 16341  1FED                     l7823:	
 16342                           ;Dimmer_B1.c: 1131: } else if (lights == 2) {
 16343                           
 16344  1FED  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16345  1FEE  3A02               	xorlw	2
 16346  1FEF  1D03               	skipz
 16347  1FF0  2FFE               	goto	l7833
 16348                           
 16349                           ;Dimmer_B1.c: 1132: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16350  1FF1  01F6               	clrf	_getDimmerLights_Allow_Condition$2731
 16351  1FF2  0AF6               	incf	_getDimmerLights_Allow_Condition$2731,f
 16352  1FF3  0023               	movlb	3	; select bank3
 16353  1FF4  1A3E               	btfsc	_DimmerLights1^(0+384),4
 16354  1FF5  2FFA               	goto	l7831
 16355  1FF6  0021               	movlb	1	; select bank1
 16356  1FF7  1A20               	btfsc	_DimmerIntr1^(0+128),4
 16357  1FF8  2FFA               	goto	l7831
 16358  1FF9  01F6               	clrf	_getDimmerLights_Allow_Condition$2731
 16359  1FFA                     l7831:	
 16360  1FFA  0876               	movf	_getDimmerLights_Allow_Condition$2731,w
 16361  1FFB                     L12:	
 16362  1FFB  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16363  1FFC  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16364  1FFD  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16365  1FFE                     l7833:	
 16366                           
 16367                           ;Dimmer_B1.c: 1133: }
 16368                           ;Dimmer_B1.c: 1134: }
 16369                           ;Dimmer_B1.c: 1151: return allow;
 16370  1FFE  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 16371  1FFF  0008               	return
 16372  2000                     __end_of_getDimmerLights_Allow_Condition:	
 16373                           
 16374                           	psect	text111
 16375  27F9                     __ptext111:	
 16376 ;; *************** function _getLoad_OK *****************
 16377 ;; Defined at:
 16378 ;;		line 274 in file "../src/OverLoad_B1.c"
 16379 ;; Parameters:    Size  Location     Type
 16380 ;;		None
 16381 ;; Auto vars:     Size  Location     Type
 16382 ;;  ok              1    2[COMMON] unsigned char 
 16383 ;; Return value:  Size  Location     Type
 16384 ;;                  1    wreg      unsigned char 
 16385 ;; Registers used:
 16386 ;;		wreg, status,2
 16387 ;; Tracked objects:
 16388 ;;		On entry : 0/0
 16389 ;;		On exit  : 0/0
 16390 ;;		Unchanged: 0/0
 16391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16396 ;;Total ram usage:        1 bytes
 16397 ;; Hardware stack levels used:    1
 16398 ;; Hardware stack levels required when called:    3
 16399 ;; This function calls:
 16400 ;;		Nothing
 16401 ;; This function is called by:
 16402 ;;		_DimmerLights_Main
 16403 ;;		_getDimmerLights_Allow_Condition
 16404 ;; This function uses a non-reentrant model
 16405 ;;
 16406                           
 16407                           
 16408                           ;psect for function _getLoad_OK
 16409  27F9                     _getLoad_OK:	
 16410                           
 16411                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16412                           
 16413                           ;incstack = 0
 16414                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16415  27F9  3000               	movlw	0
 16416  27FA  0022               	movlb	2	; select bank2
 16417  27FB  1BB2               	btfsc	_Load^(0+256),7
 16418  27FC  3001               	movlw	1
 16419  27FD  00F2               	movwf	getLoad_OK@ok
 16420                           
 16421                           ;OverLoad_B1.c: 276: return ok;
 16422  27FE  0872               	movf	getLoad_OK@ok,w
 16423  27FF  0008               	return
 16424  2800                     __end_of_getLoad_OK:	
 16425                           
 16426                           	psect	text112
 16427  1E3C                     __ptext112:	
 16428 ;; *************** function _getMain_All_Error_Status *****************
 16429 ;; Defined at:
 16430 ;;		line 424 in file "../src/Main_B1.c"
 16431 ;; Parameters:    Size  Location     Type
 16432 ;;  command         1    wreg     unsigned char 
 16433 ;; Auto vars:     Size  Location     Type
 16434 ;;  command         1    7[COMMON] unsigned char 
 16435 ;;  status          1    8[COMMON] unsigned char 
 16436 ;; Return value:  Size  Location     Type
 16437 ;;                  1    wreg      unsigned char 
 16438 ;; Registers used:
 16439 ;;		wreg, status,2, status,0
 16440 ;; Tracked objects:
 16441 ;;		On entry : 0/0
 16442 ;;		On exit  : 0/0
 16443 ;;		Unchanged: 0/0
 16444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16446 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16447 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16448 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16449 ;;Total ram usage:        7 bytes
 16450 ;; Hardware stack levels used:    1
 16451 ;; Hardware stack levels required when called:    3
 16452 ;; This function calls:
 16453 ;;		Nothing
 16454 ;; This function is called by:
 16455 ;;		_DimmerLights_Main
 16456 ;;		_Exception_Main
 16457 ;;		_Load_Main
 16458 ;;		_setTemp_Main
 16459 ;;		_getRxData
 16460 ;;		_setSw_Main
 16461 ;; This function uses a non-reentrant model
 16462 ;;
 16463                           
 16464                           
 16465                           ;psect for function _getMain_All_Error_Status
 16466  1E3C                     _getMain_All_Error_Status:	
 16467                           
 16468                           ;incstack = 0
 16469                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16470                           ;getMain_All_Error_Status@command stored from wreg
 16471  1E3C  00F7               	movwf	getMain_All_Error_Status@command
 16472                           
 16473                           ;Main_B1.c: 425: char status = 0;
 16474  1E3D  01F8               	clrf	getMain_All_Error_Status@status
 16475                           
 16476                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16477  1E3E  08F8               	movf	getMain_All_Error_Status@status,f
 16478  1E3F  1D03               	skipz
 16479  1E40  2E53               	goto	l7511
 16480  1E41  0877               	movf	getMain_All_Error_Status@command,w
 16481  1E42  3A02               	xorlw	2
 16482  1E43  1903               	skipnz
 16483  1E44  2E53               	goto	l7511
 16484                           
 16485                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16486  1E45  0022               	movlb	2	; select bank2
 16487  1E46  18DA               	btfsc	_Temp^(0+256),1
 16488  1E47  2E4B               	goto	l7509
 16489  1E48  01F3               	clrf	_getMain_All_Error_Status$4214
 16490  1E49  01F4               	clrf	_getMain_All_Error_Status$4214+1
 16491  1E4A  2E4F               	goto	l1740
 16492  1E4B                     l7509:	
 16493  1E4B  3002               	movlw	2
 16494  1E4C  00F3               	movwf	_getMain_All_Error_Status$4214
 16495  1E4D  3000               	movlw	0
 16496  1E4E  00F4               	movwf	_getMain_All_Error_Status$4214+1
 16497  1E4F                     l1740:	
 16498  1E4F  0873               	movf	_getMain_All_Error_Status$4214,w
 16499  1E50  00F2               	movwf	??_getMain_All_Error_Status
 16500  1E51  0872               	movf	??_getMain_All_Error_Status,w
 16501  1E52  00F8               	movwf	getMain_All_Error_Status@status
 16502  1E53                     l7511:	
 16503                           
 16504                           ;Main_B1.c: 438: }
 16505                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16506  1E53  08F8               	movf	getMain_All_Error_Status@status,f
 16507  1E54  1D03               	skipz
 16508  1E55  2E68               	goto	l1741
 16509  1E56  0877               	movf	getMain_All_Error_Status@command,w
 16510  1E57  3A03               	xorlw	3
 16511  1E58  1903               	skipnz
 16512  1E59  2E68               	goto	l1741
 16513                           
 16514                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16515  1E5A  0022               	movlb	2	; select bank2
 16516  1E5B  1AB2               	btfsc	_Load^(0+256),5
 16517  1E5C  2E60               	goto	l7519
 16518  1E5D  01F5               	clrf	_getMain_All_Error_Status$4215
 16519  1E5E  01F6               	clrf	_getMain_All_Error_Status$4215+1
 16520  1E5F  2E64               	goto	l1745
 16521  1E60                     l7519:	
 16522  1E60  3003               	movlw	3
 16523  1E61  00F5               	movwf	_getMain_All_Error_Status$4215
 16524  1E62  3000               	movlw	0
 16525  1E63  00F6               	movwf	_getMain_All_Error_Status$4215+1
 16526  1E64                     l1745:	
 16527  1E64  0875               	movf	_getMain_All_Error_Status$4215,w
 16528  1E65  00F2               	movwf	??_getMain_All_Error_Status
 16529  1E66  0872               	movf	??_getMain_All_Error_Status,w
 16530  1E67  00F8               	movwf	getMain_All_Error_Status@status
 16531  1E68                     l1741:	
 16532                           
 16533                           ;Main_B1.c: 445: }
 16534                           ;Main_B1.c: 455: return status;
 16535  1E68  0878               	movf	getMain_All_Error_Status@status,w
 16536  1E69  0008               	return
 16537  1E6A                     __end_of_getMain_All_Error_Status:	
 16538                           
 16539                           	psect	text113
 16540  1393                     __ptext113:	
 16541 ;; *************** function _DimmerLights_TwoPhase_Main *****************
 16542 ;; Defined at:
 16543 ;;		line 919 in file "../src/Dimmer_B1.c"
 16544 ;; Parameters:    Size  Location     Type
 16545 ;;  lights          1    wreg     unsigned char 
 16546 ;; Auto vars:     Size  Location     Type
 16547 ;;  lights          1   65[BANK0 ] unsigned char 
 16548 ;; Return value:  Size  Location     Type
 16549 ;;		None               void
 16550 ;; Registers used:
 16551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16552 ;; Tracked objects:
 16553 ;;		On entry : 0/0
 16554 ;;		On exit  : 0/0
 16555 ;;		Unchanged: 0/0
 16556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16560 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16561 ;;Total ram usage:        1 bytes
 16562 ;; Hardware stack levels used:    1
 16563 ;; Hardware stack levels required when called:    7
 16564 ;; This function calls:
 16565 ;;		_DimmerLights_AssignationDimming
 16566 ;;		_DimmerLights_SelectPointer
 16567 ;; This function is called by:
 16568 ;;		_DimmerLights_Main
 16569 ;; This function uses a non-reentrant model
 16570 ;;
 16571                           
 16572                           
 16573                           ;psect for function _DimmerLights_TwoPhase_Main
 16574  1393                     _DimmerLights_TwoPhase_Main:	
 16575                           
 16576                           ;incstack = 0
 16577                           ; Regs used in _DimmerLights_TwoPhase_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16578                           ;DimmerLights_TwoPhase_Main@lights stored from wreg
 16579  1393  0020               	movlb	0	; select bank0
 16580  1394  00E1               	movwf	DimmerLights_TwoPhase_Main@lights
 16581                           
 16582                           ;Dimmer_B1.c: 921: DimmerLights_SelectPointer(lights);
 16583  1395  0861               	movf	DimmerLights_TwoPhase_Main@lights,w
 16584  1396  319A  223D  3193   	fcall	_DimmerLights_SelectPointer
 16585                           
 16586                           ;Dimmer_B1.c: 922: if (DimmerLights->Phase == 1) {
 16587  1399  0020               	movlb	0	; select bank0
 16588  139A  086C               	movf	_DimmerLights,w
 16589  139B  3E02               	addlw	2
 16590  139C  0086               	movwf	6
 16591  139D  3001               	movlw	1	; select bank2/3
 16592  139E  0087               	movwf	7
 16593  139F  1C01               	btfss	1,0
 16594  13A0  0008               	return
 16595                           
 16596                           ;Dimmer_B1.c: 923: if (DimmerLights->PhaseFirst == 0) {
 16597  13A1  086C               	movf	_DimmerLights,w
 16598  13A2  3E02               	addlw	2
 16599  13A3  0086               	movwf	6
 16600  13A4  3001               	movlw	1	; select bank2/3
 16601  13A5  0087               	movwf	7
 16602  13A6  1881               	btfsc	1,1
 16603  13A7  2BD1               	goto	l10629
 16604                           
 16605                           ;Dimmer_B1.c: 925: if (DimmerLights->PhaseSwitch == 1) {
 16606  13A8  086C               	movf	_DimmerLights,w
 16607  13A9  3E02               	addlw	2
 16608  13AA  0086               	movwf	6
 16609  13AB  3001               	movlw	1	; select bank2/3
 16610  13AC  0087               	movwf	7
 16611  13AD  1D01               	btfss	1,2
 16612  13AE  2BC0               	goto	l10627
 16613                           
 16614                           ;Dimmer_B1.c: 926: DimmerLights->PhaseFirst = 1;
 16615  13AF  086C               	movf	_DimmerLights,w
 16616  13B0  3E02               	addlw	2
 16617  13B1  0086               	movwf	6
 16618  13B2  3001               	movlw	1	; select bank2/3
 16619  13B3  0087               	movwf	7
 16620  13B4  1481               	bsf	1,1
 16621                           
 16622                           ;Dimmer_B1.c: 927: DimmerLights->Trigger = 1;
 16623  13B5  086C               	movf	_DimmerLights,w
 16624  13B6  0086               	movwf	6
 16625  13B7  3001               	movlw	1	; select bank2/3
 16626  13B8  0087               	movwf	7
 16627  13B9  1481               	bsf	1,1
 16628                           
 16629                           ;Dimmer_B1.c: 928: DimmerLights->Switch = 1;
 16630  13BA  086C               	movf	_DimmerLights,w
 16631  13BB  0086               	movwf	6
 16632  13BC  3001               	movlw	1	; select bank2/3
 16633  13BD  0087               	movwf	7
 16634  13BE  1501               	bsf	1,2
 16635                           
 16636                           ;Dimmer_B1.c: 929: } else {
 16637  13BF  0008               	return
 16638  13C0                     l10627:	
 16639                           
 16640                           ;Dimmer_B1.c: 930: DimmerLights->Phase = 0;
 16641  13C0  086C               	movf	_DimmerLights,w
 16642  13C1  3E02               	addlw	2
 16643  13C2  0086               	movwf	6
 16644  13C3  3001               	movlw	1	; select bank2/3
 16645  13C4  0087               	movwf	7
 16646  13C5  1001               	bcf	1,0
 16647                           
 16648                           ;Dimmer_B1.c: 931: DimmerLights->Trigger = 1;
 16649  13C6  086C               	movf	_DimmerLights,w
 16650  13C7  0086               	movwf	6
 16651  13C8  3001               	movlw	1	; select bank2/3
 16652  13C9  0087               	movwf	7
 16653  13CA  1481               	bsf	1,1
 16654                           
 16655                           ;Dimmer_B1.c: 932: DimmerLights->Switch = 0;
 16656  13CB  086C               	movf	_DimmerLights,w
 16657  13CC  0086               	movwf	6
 16658  13CD  3001               	movlw	1	; select bank2/3
 16659  13CE  0087               	movwf	7
 16660  13CF  1101               	bcf	1,2
 16661                           
 16662                           ;Dimmer_B1.c: 933: }
 16663                           ;Dimmer_B1.c: 934: } else {
 16664  13D0  0008               	return
 16665  13D1                     l10629:	
 16666                           
 16667                           ;Dimmer_B1.c: 935: if (DimmerLights->Trigger == 0) {
 16668  13D1  086C               	movf	_DimmerLights,w
 16669  13D2  0086               	movwf	6
 16670  13D3  3001               	movlw	1	; select bank2/3
 16671  13D4  0087               	movwf	7
 16672  13D5  1881               	btfsc	1,1
 16673  13D6  0008               	return
 16674                           
 16675                           ;Dimmer_B1.c: 936: DimmerLights->PhaseFirst = 0;
 16676  13D7  086C               	movf	_DimmerLights,w
 16677  13D8  3E02               	addlw	2
 16678  13D9  0086               	movwf	6
 16679  13DA  3001               	movlw	1	; select bank2/3
 16680  13DB  0087               	movwf	7
 16681  13DC  1081               	bcf	1,1
 16682                           
 16683                           ;Dimmer_B1.c: 937: DimmerLights->Phase = 0;
 16684  13DD  086C               	movf	_DimmerLights,w
 16685  13DE  3E02               	addlw	2
 16686  13DF  0086               	movwf	6
 16687  13E0  3001               	movlw	1	; select bank2/3
 16688  13E1  0087               	movwf	7
 16689  13E2  1001               	bcf	1,0
 16690                           
 16691                           ;Dimmer_B1.c: 938: DimmerLights_AssignationDimming(lights);
 16692  13E3  0861               	movf	DimmerLights_TwoPhase_Main@lights,w
 16693  13E4  319E  266A         	fcall	_DimmerLights_AssignationDimming
 16694  13E6  0008               	return
 16695  13E7                     __end_of_DimmerLights_TwoPhase_Main:	
 16696                           
 16697                           	psect	text114
 16698  1E6A                     __ptext114:	
 16699 ;; *************** function _DimmerLights_AssignationDimming *****************
 16700 ;; Defined at:
 16701 ;;		line 945 in file "../src/Dimmer_B1.c"
 16702 ;; Parameters:    Size  Location     Type
 16703 ;;  sw              1    wreg     unsigned char 
 16704 ;; Auto vars:     Size  Location     Type
 16705 ;;  sw              1   64[BANK0 ] unsigned char 
 16706 ;;  status          1   63[BANK0 ] unsigned char 
 16707 ;; Return value:  Size  Location     Type
 16708 ;;		None               void
 16709 ;; Registers used:
 16710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16711 ;; Tracked objects:
 16712 ;;		On entry : 0/0
 16713 ;;		On exit  : 0/0
 16714 ;;		Unchanged: 0/0
 16715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16717 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16718 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16719 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16720 ;;Total ram usage:        4 bytes
 16721 ;; Hardware stack levels used:    1
 16722 ;; Hardware stack levels required when called:    6
 16723 ;; This function calls:
 16724 ;;		_getDimmerLights_PercentToValue
 16725 ;;		_getDimmerLights_Status
 16726 ;;		_setDimmerIntr_Dimming_RF
 16727 ;;		_setDimmerIntr_MaxmumValue
 16728 ;;		_setMemory_Modify
 16729 ;; This function is called by:
 16730 ;;		_DimmerLights_TwoPhase_Main
 16731 ;; This function uses a non-reentrant model
 16732 ;;
 16733                           
 16734                           
 16735                           ;psect for function _DimmerLights_AssignationDimming
 16736  1E6A                     _DimmerLights_AssignationDimming:	
 16737                           
 16738                           ;incstack = 0
 16739                           ; Regs used in _DimmerLights_AssignationDimming: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 16740                           ;DimmerLights_AssignationDimming@sw stored from wreg
 16741  1E6A  0020               	movlb	0	; select bank0
 16742  1E6B  00E0               	movwf	DimmerLights_AssignationDimming@sw
 16743                           
 16744                           ;Dimmer_B1.c: 946: char status = 0;
 16745  1E6C  01DF               	clrf	DimmerLights_AssignationDimming@status
 16746                           
 16747                           ;Dimmer_B1.c: 948: status = getDimmerLights_Status(sw);
 16748  1E6D  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16749  1E6E  3199  2114  319E   	fcall	_getDimmerLights_Status
 16750  1E71  0020               	movlb	0	; select bank0
 16751  1E72  00DD               	movwf	??_DimmerLights_AssignationDimming
 16752  1E73  085D               	movf	??_DimmerLights_AssignationDimming,w
 16753  1E74  00DF               	movwf	DimmerLights_AssignationDimming@status
 16754                           
 16755                           ;Dimmer_B1.c: 952: setMemory_Modify(1);
 16756  1E75  3001               	movlw	1
 16757  1E76  3199  215F  319E   	fcall	_setMemory_Modify
 16758                           
 16759                           ;Dimmer_B1.c: 956: if (status == 1) {
 16760  1E79  0020               	movlb	0	; select bank0
 16761  1E7A  085F               	movf	DimmerLights_AssignationDimming@status,w
 16762  1E7B  3A01               	xorlw	1
 16763  1E7C  1D03               	skipz
 16764  1E7D  0008               	return
 16765                           
 16766                           ;Dimmer_B1.c: 957: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(product-
      +                          >Data[20 + sw]));
 16767  1E7E  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16768  1E7F  3E14               	addlw	20
 16769  1E80  077B               	addwf	_product,w
 16770  1E81  00DD               	movwf	??_DimmerLights_AssignationDimming
 16771  1E82  085D               	movf	??_DimmerLights_AssignationDimming,w
 16772  1E83  0086               	movwf	6
 16773  1E84  3002               	movlw	2	; select bank4/5
 16774  1E85  0087               	movwf	7
 16775  1E86  0801               	movf	1,w
 16776  1E87  3196  26D1  319E   	fcall	_getDimmerLights_PercentToValue
 16777  1E8A  0020               	movlb	0	; select bank0
 16778  1E8B  00DE               	movwf	??_DimmerLights_AssignationDimming+1
 16779  1E8C  085E               	movf	??_DimmerLights_AssignationDimming+1,w
 16780  1E8D  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 16781  1E8E  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16782  1E8F  319A  22FB  319E   	fcall	_setDimmerIntr_MaxmumValue
 16783                           
 16784                           ;Dimmer_B1.c: 958: setDimmerIntr_Dimming_RF(sw, 1);
 16785  1E92  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 16786  1E93  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 16787  1E94  0020               	movlb	0	; select bank0
 16788  1E95  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16789  1E96  319D  2596         	fcall	_setDimmerIntr_Dimming_RF
 16790  1E98  0008               	return
 16791  1E99                     __end_of_DimmerLights_AssignationDimming:	
 16792                           
 16793                           	psect	text115
 16794  1AFB                     __ptext115:	
 16795 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16796 ;; Defined at:
 16797 ;;		line 147 in file "../src/Dimmer_B1.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;  lights          1    wreg     unsigned char 
 16800 ;;  value           1   58[BANK0 ] unsigned char 
 16801 ;; Auto vars:     Size  Location     Type
 16802 ;;  lights          1   60[BANK0 ] unsigned char 
 16803 ;; Return value:  Size  Location     Type
 16804 ;;		None               void
 16805 ;; Registers used:
 16806 ;;		wreg
 16807 ;; Tracked objects:
 16808 ;;		On entry : 0/0
 16809 ;;		On exit  : 0/0
 16810 ;;		Unchanged: 0/0
 16811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16812 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16816 ;;Total ram usage:        3 bytes
 16817 ;; Hardware stack levels used:    1
 16818 ;; Hardware stack levels required when called:    3
 16819 ;; This function calls:
 16820 ;;		Nothing
 16821 ;; This function is called by:
 16822 ;;		_DimmerLights_AssignationDimming
 16823 ;;		_setDimmerLights_OnOff
 16824 ;;		_setDimmerLights_Dimming
 16825 ;;		_setRFSW_AdjControl
 16826 ;; This function uses a non-reentrant model
 16827 ;;
 16828                           
 16829                           
 16830                           ;psect for function _setDimmerIntr_MaxmumValue
 16831  1AFB                     _setDimmerIntr_MaxmumValue:	
 16832                           
 16833                           ;incstack = 0
 16834                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16835                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16836  1AFB  0020               	movlb	0	; select bank0
 16837  1AFC  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 16838                           
 16839                           ;Dimmer_B1.c: 149: if (lights == 1) {
 16840  1AFD  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16841  1AFE  3A01               	xorlw	1
 16842  1AFF  1D03               	skipz
 16843  1B00  2B07               	goto	l7113
 16844                           
 16845                           ;Dimmer_B1.c: 150: DimmerIntr1.MaxmumValue = value;
 16846  1B01  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16847  1B02  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16848  1B03  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16849  1B04  0021               	movlb	1	; select bank1
 16850  1B05  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 16851                           
 16852                           ;Dimmer_B1.c: 151: }
 16853  1B06  0008               	return
 16854  1B07                     l7113:	
 16855                           
 16856                           ;Dimmer_B1.c: 154: else if (lights == 2) {
 16857  1B07  0020               	movlb	0	; select bank0
 16858  1B08  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16859  1B09  3A02               	xorlw	2
 16860  1B0A  1D03               	skipz
 16861  1B0B  0008               	return
 16862                           
 16863                           ;Dimmer_B1.c: 155: DimmerIntr2.MaxmumValue = value;
 16864  1B0C  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16865  1B0D  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16866  1B0E  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16867  1B0F  0021               	movlb	1	; select bank1
 16868  1B10  00B6               	movwf	(_DimmerIntr2^(0+128)+6)
 16869  1B11  0008               	return
 16870  1B12                     __end_of_setDimmerIntr_MaxmumValue:	
 16871                           
 16872                           	psect	text116
 16873  1D96                     __ptext116:	
 16874 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 16875 ;; Defined at:
 16876 ;;		line 262 in file "../src/Dimmer_B1.c"
 16877 ;; Parameters:    Size  Location     Type
 16878 ;;  lights          1    wreg     unsigned char 
 16879 ;;  command         1    2[COMMON] unsigned char 
 16880 ;; Auto vars:     Size  Location     Type
 16881 ;;  lights          1    4[COMMON] unsigned char 
 16882 ;; Return value:  Size  Location     Type
 16883 ;;		None               void
 16884 ;; Registers used:
 16885 ;;		wreg, status,2, status,0
 16886 ;; Tracked objects:
 16887 ;;		On entry : 0/0
 16888 ;;		On exit  : 0/0
 16889 ;;		Unchanged: 0/0
 16890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16891 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16893 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16894 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16895 ;;Total ram usage:        3 bytes
 16896 ;; Hardware stack levels used:    1
 16897 ;; Hardware stack levels required when called:    3
 16898 ;; This function calls:
 16899 ;;		Nothing
 16900 ;; This function is called by:
 16901 ;;		_DimmerLights_AssignationDimming
 16902 ;;		_setDimmerLights_OnOff
 16903 ;;		_setRFSW_AdjControl
 16904 ;; This function uses a non-reentrant model
 16905 ;;
 16906                           
 16907                           
 16908                           ;psect for function _setDimmerIntr_Dimming_RF
 16909  1D96                     _setDimmerIntr_Dimming_RF:	
 16910                           
 16911                           ;incstack = 0
 16912                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 16913                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 16914  1D96  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 16915                           
 16916                           ;Dimmer_B1.c: 264: if (lights == 1) {
 16917  1D97  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 16918  1D98  3A01               	xorlw	1
 16919  1D99  1D03               	skipz
 16920  1D9A  2DAB               	goto	l7121
 16921                           
 16922                           ;Dimmer_B1.c: 265: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 16923  1D9B  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 16924  1D9C  3A01               	xorlw	1
 16925  1D9D  3000               	movlw	0
 16926  1D9E  1903               	skipnz
 16927  1D9F  3001               	movlw	1
 16928  1DA0  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 16929  1DA1  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 16930  1DA2  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16931  1DA3  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16932  1DA4  0021               	movlb	1	; select bank1
 16933  1DA5  0820               	movf	_DimmerIntr1^(0+128),w
 16934  1DA6  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16935  1DA7  39BF               	andlw	-65
 16936  1DA8  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16937  1DA9  00A0               	movwf	_DimmerIntr1^(0+128)
 16938                           
 16939                           ;Dimmer_B1.c: 266: }
 16940  1DAA  0008               	return
 16941  1DAB                     l7121:	
 16942                           
 16943                           ;Dimmer_B1.c: 269: else if (lights == 2) {
 16944  1DAB  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 16945  1DAC  3A02               	xorlw	2
 16946  1DAD  1D03               	skipz
 16947  1DAE  0008               	return
 16948                           
 16949                           ;Dimmer_B1.c: 270: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 16950  1DAF  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 16951  1DB0  3A01               	xorlw	1
 16952  1DB1  3000               	movlw	0
 16953  1DB2  1903               	skipnz
 16954  1DB3  3001               	movlw	1
 16955  1DB4  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 16956  1DB5  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 16957  1DB6  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16958  1DB7  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16959  1DB8  0021               	movlb	1	; select bank1
 16960  1DB9  0830               	movf	_DimmerIntr2^(0+128),w
 16961  1DBA  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16962  1DBB  39BF               	andlw	-65
 16963  1DBC  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16964  1DBD  00B0               	movwf	_DimmerIntr2^(0+128)
 16965  1DBE  0008               	return
 16966  1DBF                     __end_of_setDimmerIntr_Dimming_RF:	
 16967                           
 16968                           	psect	text117
 16969  0C8D                     __ptext117:	
 16970 ;; *************** function _DimmerLights_DimmingFunction *****************
 16971 ;; Defined at:
 16972 ;;		line 1883 in file "../src/Dimmer_B1.c"
 16973 ;; Parameters:    Size  Location     Type
 16974 ;;  lights          1    wreg     unsigned char 
 16975 ;; Auto vars:     Size  Location     Type
 16976 ;;  lights          1    6[BANK0 ] unsigned char 
 16977 ;; Return value:  Size  Location     Type
 16978 ;;		None               void
 16979 ;; Registers used:
 16980 ;;		wreg, status,2, status,0, pclath, cstack
 16981 ;; Tracked objects:
 16982 ;;		On entry : 0/0
 16983 ;;		On exit  : 0/0
 16984 ;;		Unchanged: 0/0
 16985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16989 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16990 ;;Total ram usage:        2 bytes
 16991 ;; Hardware stack levels used:    1
 16992 ;; Hardware stack levels required when called:    6
 16993 ;; This function calls:
 16994 ;;		_DimmerIntr_ValueCalculate
 16995 ;; This function is called by:
 16996 ;;		_DimmerLights_Main
 16997 ;; This function uses a non-reentrant model
 16998 ;;
 16999                           
 17000                           
 17001                           ;psect for function _DimmerLights_DimmingFunction
 17002  0C8D                     _DimmerLights_DimmingFunction:	
 17003                           
 17004                           ;incstack = 0
 17005                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0+pclath+cstack]
 17006                           ;DimmerLights_DimmingFunction@lights stored from wreg
 17007  0C8D  0020               	movlb	0	; select bank0
 17008  0C8E  00A6               	movwf	DimmerLights_DimmingFunction@lights
 17009                           
 17010                           ;Dimmer_B1.c: 1885: if (lights == 1) {
 17011  0C8F  0826               	movf	DimmerLights_DimmingFunction@lights,w
 17012  0C90  3A01               	xorlw	1
 17013  0C91  1D03               	skipz
 17014  0C92  2CE3               	goto	l10575
 17015                           
 17016                           ;Dimmer_B1.c: 1886: if (DimmerIntr1.Tune == 1) {
 17017  0C93  0021               	movlb	1	; select bank1
 17018  0C94  1CA0               	btfss	_DimmerIntr1^(0+128),1
 17019  0C95  2CE3               	goto	l10575
 17020                           
 17021                           ;Dimmer_B1.c: 1887: DimmerIntr1.Tune = 0;
 17022  0C96  10A0               	bcf	_DimmerIntr1^(0+128),1
 17023                           
 17024                           ;Dimmer_B1.c: 1888: DimmerIntr1.TuneTime++;
 17025  0C97  3001               	movlw	1
 17026  0C98  0020               	movlb	0	; select bank0
 17027  0C99  00A5               	movwf	??_DimmerLights_DimmingFunction
 17028  0C9A  0825               	movf	??_DimmerLights_DimmingFunction,w
 17029  0C9B  0021               	movlb	1	; select bank1
 17030  0C9C  07A3               	addwf	(_DimmerIntr1^(0+128)+3),f
 17031                           
 17032                           ;Dimmer_B1.c: 1889: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 17033  0C9D  0824               	movf	(_DimmerIntr1^(0+128)+4),w
 17034  0C9E  0223               	subwf	(_DimmerIntr1^(0+128)+3),w
 17035  0C9F  1C03               	skipc
 17036  0CA0  2CE3               	goto	l10575
 17037                           
 17038                           ;Dimmer_B1.c: 1890: DimmerIntr1.TuneTime = 0;
 17039  0CA1  01A3               	clrf	(_DimmerIntr1^(0+128)+3)
 17040                           
 17041                           ;Dimmer_B1.c: 1891: DimmerIntr1.TuneGO = 1;
 17042  0CA2  1721               	bsf	(_DimmerIntr1^(0+128)+1),6
 17043                           
 17044                           ;Dimmer_B1.c: 1892: if (DimmerIntr1.Dimming_Sw == 1) {
 17045  0CA3  1E20               	btfss	_DimmerIntr1^(0+128),4
 17046  0CA4  2CC5               	goto	l1059
 17047                           
 17048                           ;Dimmer_B1.c: 1893: if (DimmerIntr1.Dimming_Status == 0) {
 17049  0CA5  1AA0               	btfsc	_DimmerIntr1^(0+128),5
 17050  0CA6  2CB8               	goto	l10557
 17051                           
 17052                           ;Dimmer_B1.c: 1894: if (DimmerIntr1.DimmingValue < ((char)(77*0.55))) {
 17053  0CA7  302A               	movlw	42
 17054  0CA8  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 17055  0CA9  1803               	skipnc
 17056  0CAA  2CB6               	goto	l1061
 17057                           
 17058                           ;Dimmer_B1.c: 1895: DimmerIntr1.DimmingValue++;
 17059  0CAB  3001               	movlw	1
 17060  0CAC  0020               	movlb	0	; select bank0
 17061  0CAD  00A5               	movwf	??_DimmerLights_DimmingFunction
 17062  0CAE  0825               	movf	??_DimmerLights_DimmingFunction,w
 17063  0CAF  0021               	movlb	1	; select bank1
 17064  0CB0  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 17065                           
 17066                           ;Dimmer_B1.c: 1896: DimmerIntr_ValueCalculate(1);
 17067  0CB1  3001               	movlw	1
 17068  0CB2  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17069                           
 17070                           ;Dimmer_B1.c: 1897: } else {
 17071  0CB5  2CE3               	goto	l10575
 17072  0CB6                     l1061:	
 17073                           
 17074                           ;Dimmer_B1.c: 1898: DimmerIntr1.Dimming_Status = 1;
 17075  0CB6  16A0               	bsf	_DimmerIntr1^(0+128),5
 17076                           
 17077                           ;Dimmer_B1.c: 1899: }
 17078                           ;Dimmer_B1.c: 1900: } else {
 17079  0CB7  2CE3               	goto	l10575
 17080  0CB8                     l10557:	
 17081                           
 17082                           ;Dimmer_B1.c: 1901: if (DimmerIntr1.DimmingValue > ((char)(5*0.55))) {
 17083  0CB8  3003               	movlw	3
 17084  0CB9  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 17085  0CBA  1C03               	skipc
 17086  0CBB  2CC3               	goto	l1064
 17087                           
 17088                           ;Dimmer_B1.c: 1902: DimmerIntr1.DimmingValue--;
 17089  0CBC  3001               	movlw	1
 17090  0CBD  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 17091                           
 17092                           ;Dimmer_B1.c: 1903: DimmerIntr_ValueCalculate(1);
 17093  0CBE  3001               	movlw	1
 17094  0CBF  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17095                           
 17096                           ;Dimmer_B1.c: 1904: } else {
 17097  0CC2  2CE3               	goto	l10575
 17098  0CC3                     l1064:	
 17099                           
 17100                           ;Dimmer_B1.c: 1905: DimmerIntr1.Dimming_Status = 0;
 17101  0CC3  12A0               	bcf	_DimmerIntr1^(0+128),5
 17102                           
 17103                           ;Dimmer_B1.c: 1906: }
 17104                           ;Dimmer_B1.c: 1907: }
 17105                           ;Dimmer_B1.c: 1908: } else if (DimmerIntr1.Dimming_RF == 1) {
 17106  0CC4  2CE3               	goto	l10575
 17107  0CC5                     l1059:	
 17108  0CC5  1F20               	btfss	_DimmerIntr1^(0+128),6
 17109  0CC6  2CE3               	goto	l10575
 17110                           
 17111                           ;Dimmer_B1.c: 1909: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 17112  0CC7  0826               	movf	(_DimmerIntr1^(0+128)+6),w
 17113  0CC8  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 17114  0CC9  1803               	skipnc
 17115  0CCA  2CD6               	goto	l10569
 17116                           
 17117                           ;Dimmer_B1.c: 1910: DimmerIntr1.DimmingValue++;
 17118  0CCB  3001               	movlw	1
 17119  0CCC  0020               	movlb	0	; select bank0
 17120  0CCD  00A5               	movwf	??_DimmerLights_DimmingFunction
 17121  0CCE  0825               	movf	??_DimmerLights_DimmingFunction,w
 17122  0CCF  0021               	movlb	1	; select bank1
 17123  0CD0  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 17124                           
 17125                           ;Dimmer_B1.c: 1911: DimmerIntr_ValueCalculate(1);
 17126  0CD1  3001               	movlw	1
 17127  0CD2  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17128                           
 17129                           ;Dimmer_B1.c: 1912: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 17130  0CD5  2CE3               	goto	l10575
 17131  0CD6                     l10569:	
 17132  0CD6  0021               	movlb	1	; select bank1
 17133  0CD7  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 17134  0CD8  0226               	subwf	(_DimmerIntr1^(0+128)+6),w
 17135  0CD9  1803               	skipnc
 17136  0CDA  2CE2               	goto	l1070
 17137                           
 17138                           ;Dimmer_B1.c: 1913: DimmerIntr1.DimmingValue--;
 17139  0CDB  3001               	movlw	1
 17140  0CDC  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 17141                           
 17142                           ;Dimmer_B1.c: 1914: DimmerIntr_ValueCalculate(1);
 17143  0CDD  3001               	movlw	1
 17144  0CDE  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17145                           
 17146                           ;Dimmer_B1.c: 1915: } else {
 17147  0CE1  2CE3               	goto	l10575
 17148  0CE2                     l1070:	
 17149                           
 17150                           ;Dimmer_B1.c: 1916: DimmerIntr1.Dimming_RF = 0;
 17151  0CE2  1320               	bcf	_DimmerIntr1^(0+128),6
 17152  0CE3                     l10575:	
 17153                           
 17154                           ;Dimmer_B1.c: 1917: }
 17155                           ;Dimmer_B1.c: 1918: }
 17156                           ;Dimmer_B1.c: 1919: }
 17157                           ;Dimmer_B1.c: 1920: }
 17158                           ;Dimmer_B1.c: 1921: }
 17159                           ;Dimmer_B1.c: 1925: if (lights == 2) {
 17160  0CE3  0020               	movlb	0	; select bank0
 17161  0CE4  0826               	movf	DimmerLights_DimmingFunction@lights,w
 17162  0CE5  3A02               	xorlw	2
 17163  0CE6  1D03               	skipz
 17164  0CE7  0008               	return
 17165                           
 17166                           ;Dimmer_B1.c: 1926: if (DimmerIntr2.Tune == 1) {
 17167  0CE8  0021               	movlb	1	; select bank1
 17168  0CE9  1CB0               	btfss	_DimmerIntr2^(0+128),1
 17169  0CEA  0008               	return
 17170                           
 17171                           ;Dimmer_B1.c: 1927: DimmerIntr2.Tune = 0;
 17172  0CEB  10B0               	bcf	_DimmerIntr2^(0+128),1
 17173                           
 17174                           ;Dimmer_B1.c: 1928: DimmerIntr2.TuneTime++;
 17175  0CEC  3001               	movlw	1
 17176  0CED  0020               	movlb	0	; select bank0
 17177  0CEE  00A5               	movwf	??_DimmerLights_DimmingFunction
 17178  0CEF  0825               	movf	??_DimmerLights_DimmingFunction,w
 17179  0CF0  0021               	movlb	1	; select bank1
 17180  0CF1  07B3               	addwf	(_DimmerIntr2^(0+128)+3),f
 17181                           
 17182                           ;Dimmer_B1.c: 1929: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 17183  0CF2  0834               	movf	(_DimmerIntr2^(0+128)+4),w
 17184  0CF3  0233               	subwf	(_DimmerIntr2^(0+128)+3),w
 17185  0CF4  1C03               	skipc
 17186  0CF5  0008               	return
 17187                           
 17188                           ;Dimmer_B1.c: 1930: DimmerIntr2.TuneTime = 0;
 17189  0CF6  01B3               	clrf	(_DimmerIntr2^(0+128)+3)
 17190                           
 17191                           ;Dimmer_B1.c: 1931: DimmerIntr2.TuneGO = 1;
 17192  0CF7  1731               	bsf	(_DimmerIntr2^(0+128)+1),6
 17193                           
 17194                           ;Dimmer_B1.c: 1932: if (DimmerIntr2.Dimming_Sw == 1) {
 17195  0CF8  1E30               	btfss	_DimmerIntr2^(0+128),4
 17196  0CF9  2D18               	goto	l1075
 17197                           
 17198                           ;Dimmer_B1.c: 1933: if (DimmerIntr2.Dimming_Status == 0) {
 17199  0CFA  1AB0               	btfsc	_DimmerIntr2^(0+128),5
 17200  0CFB  2D0C               	goto	l10599
 17201                           
 17202                           ;Dimmer_B1.c: 1934: if (DimmerIntr2.DimmingValue < ((char)(77*0.55))) {
 17203  0CFC  302A               	movlw	42
 17204  0CFD  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17205  0CFE  1803               	skipnc
 17206  0CFF  2D0A               	goto	l1077
 17207                           
 17208                           ;Dimmer_B1.c: 1935: DimmerIntr2.DimmingValue++;
 17209  0D00  3001               	movlw	1
 17210  0D01  0020               	movlb	0	; select bank0
 17211  0D02  00A5               	movwf	??_DimmerLights_DimmingFunction
 17212  0D03  0825               	movf	??_DimmerLights_DimmingFunction,w
 17213  0D04  0021               	movlb	1	; select bank1
 17214  0D05  07B5               	addwf	(_DimmerIntr2^(0+128)+5),f
 17215                           
 17216                           ;Dimmer_B1.c: 1936: DimmerIntr_ValueCalculate(2);
 17217  0D06  3002               	movlw	2
 17218  0D07  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17219                           
 17220                           ;Dimmer_B1.c: 1937: } else {
 17221  0D09  0008               	return
 17222  0D0A                     l1077:	
 17223                           
 17224                           ;Dimmer_B1.c: 1938: DimmerIntr2.Dimming_Status = 1;
 17225  0D0A  16B0               	bsf	_DimmerIntr2^(0+128),5
 17226                           
 17227                           ;Dimmer_B1.c: 1939: }
 17228                           ;Dimmer_B1.c: 1940: } else {
 17229  0D0B  0008               	return
 17230  0D0C                     l10599:	
 17231                           
 17232                           ;Dimmer_B1.c: 1941: if (DimmerIntr2.DimmingValue > ((char)(5*0.55))) {
 17233  0D0C  3003               	movlw	3
 17234  0D0D  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17235  0D0E  1C03               	skipc
 17236  0D0F  2D16               	goto	l1080
 17237                           
 17238                           ;Dimmer_B1.c: 1942: DimmerIntr2.DimmingValue--;
 17239  0D10  3001               	movlw	1
 17240  0D11  02B5               	subwf	(_DimmerIntr2^(0+128)+5),f
 17241                           
 17242                           ;Dimmer_B1.c: 1943: DimmerIntr_ValueCalculate(2);
 17243  0D12  3002               	movlw	2
 17244  0D13  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17245                           
 17246                           ;Dimmer_B1.c: 1944: } else {
 17247  0D15  0008               	return
 17248  0D16                     l1080:	
 17249                           
 17250                           ;Dimmer_B1.c: 1945: DimmerIntr2.Dimming_Status = 0;
 17251  0D16  12B0               	bcf	_DimmerIntr2^(0+128),5
 17252                           
 17253                           ;Dimmer_B1.c: 1946: }
 17254                           ;Dimmer_B1.c: 1947: }
 17255                           ;Dimmer_B1.c: 1948: } else if (DimmerIntr2.Dimming_RF == 1) {
 17256  0D17  0008               	return
 17257  0D18                     l1075:	
 17258  0D18  1F30               	btfss	_DimmerIntr2^(0+128),6
 17259  0D19  0008               	return
 17260                           
 17261                           ;Dimmer_B1.c: 1949: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 17262  0D1A  0836               	movf	(_DimmerIntr2^(0+128)+6),w
 17263  0D1B  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17264  0D1C  1803               	skipnc
 17265  0D1D  2D28               	goto	l10611
 17266                           
 17267                           ;Dimmer_B1.c: 1950: DimmerIntr2.DimmingValue++;
 17268  0D1E  3001               	movlw	1
 17269  0D1F  0020               	movlb	0	; select bank0
 17270  0D20  00A5               	movwf	??_DimmerLights_DimmingFunction
 17271  0D21  0825               	movf	??_DimmerLights_DimmingFunction,w
 17272  0D22  0021               	movlb	1	; select bank1
 17273  0D23  07B5               	addwf	(_DimmerIntr2^(0+128)+5),f
 17274                           
 17275                           ;Dimmer_B1.c: 1951: DimmerIntr_ValueCalculate(2);
 17276  0D24  3002               	movlw	2
 17277  0D25  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17278                           
 17279                           ;Dimmer_B1.c: 1952: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 17280  0D27  0008               	return
 17281  0D28                     l10611:	
 17282  0D28  0021               	movlb	1	; select bank1
 17283  0D29  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 17284  0D2A  0236               	subwf	(_DimmerIntr2^(0+128)+6),w
 17285  0D2B  1803               	skipnc
 17286  0D2C  2D33               	goto	l1086
 17287                           
 17288                           ;Dimmer_B1.c: 1953: DimmerIntr2.DimmingValue--;
 17289  0D2D  3001               	movlw	1
 17290  0D2E  02B5               	subwf	(_DimmerIntr2^(0+128)+5),f
 17291                           
 17292                           ;Dimmer_B1.c: 1954: DimmerIntr_ValueCalculate(2);
 17293  0D2F  3002               	movlw	2
 17294  0D30  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17295                           
 17296                           ;Dimmer_B1.c: 1955: } else {
 17297  0D32  0008               	return
 17298  0D33                     l1086:	
 17299                           
 17300                           ;Dimmer_B1.c: 1956: DimmerIntr2.Dimming_RF = 0;
 17301  0D33  1330               	bcf	_DimmerIntr2^(0+128),6
 17302  0D34  0008               	return
 17303  0D35                     __end_of_DimmerLights_DimmingFunction:	
 17304                           
 17305                           	psect	text118
 17306  143B                     __ptext118:	
 17307 ;; *************** function _DimmerIntr_ValueCalculate *****************
 17308 ;; Defined at:
 17309 ;;		line 1851 in file "../src/Dimmer_B1.c"
 17310 ;; Parameters:    Size  Location     Type
 17311 ;;  lights          1    wreg     unsigned char 
 17312 ;; Auto vars:     Size  Location     Type
 17313 ;;  lights          1    4[BANK0 ] unsigned char 
 17314 ;; Return value:  Size  Location     Type
 17315 ;;		None               void
 17316 ;; Registers used:
 17317 ;;		wreg, status,2, status,0, pclath, cstack
 17318 ;; Tracked objects:
 17319 ;;		On entry : 0/0
 17320 ;;		On exit  : 0/0
 17321 ;;		Unchanged: 0/0
 17322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17326 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17327 ;;Total ram usage:        3 bytes
 17328 ;; Hardware stack levels used:    1
 17329 ;; Hardware stack levels required when called:    5
 17330 ;; This function calls:
 17331 ;;		_Division
 17332 ;; This function is called by:
 17333 ;;		_setDimmerLights_OnOff
 17334 ;;		_DimmerLights_DimmingFunction
 17335 ;; This function uses a non-reentrant model
 17336 ;;
 17337                           
 17338                           
 17339                           ;psect for function _DimmerIntr_ValueCalculate
 17340  143B                     _DimmerIntr_ValueCalculate:	
 17341                           
 17342                           ;incstack = 0
 17343                           ; Regs used in _DimmerIntr_ValueCalculate: [wreg+status,2+status,0+pclath+cstack]
 17344                           ;DimmerIntr_ValueCalculate@lights stored from wreg
 17345  143B  0020               	movlb	0	; select bank0
 17346  143C  00A4               	movwf	DimmerIntr_ValueCalculate@lights
 17347                           
 17348                           ;Dimmer_B1.c: 1853: if (lights == 1) {
 17349  143D  0824               	movf	DimmerIntr_ValueCalculate@lights,w
 17350  143E  3A01               	xorlw	1
 17351  143F  1D03               	skipz
 17352  1440  2C67               	goto	l10063
 17353                           
 17354                           ;Dimmer_B1.c: 1858: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 17355  1441  3002               	movlw	2
 17356  1442  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17357  1443  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17358  1444  00F7               	movwf	Division@num
 17359  1445  0021               	movlb	1	; select bank1
 17360  1446  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 17361  1447  3199  2123  3194   	fcall	_Division
 17362  144A  0020               	movlb	0	; select bank0
 17363  144B  00A3               	movwf	??_DimmerIntr_ValueCalculate+1
 17364  144C  0823               	movf	??_DimmerIntr_ValueCalculate+1,w
 17365  144D  0021               	movlb	1	; select bank1
 17366  144E  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 17367                           
 17368                           ;Dimmer_B1.c: 1859: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - DimmerIntr1.
      +                          DimmingValue);
 17369  144F  0325               	decf	(_DimmerIntr1^(0+128)+5),w
 17370  1450  3AFF               	xorlw	255
 17371  1451  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17372  1452  3E37               	addlw	55
 17373  1453  0020               	movlb	0	; select bank0
 17374  1454  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17375  1455  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17376  1456  0021               	movlb	1	; select bank1
 17377  1457  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 17378                           
 17379                           ;Dimmer_B1.c: 1860: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 17380  1458  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 17381  1459  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17382  145A  0020               	movlb	0	; select bank0
 17383  145B  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17384  145C  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17385  145D  0021               	movlb	1	; select bank1
 17386  145E  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 17387                           
 17388                           ;Dimmer_B1.c: 1861: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 5;
 17389  145F  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 17390  1460  3E05               	addlw	5
 17391  1461  0020               	movlb	0	; select bank0
 17392  1462  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17393  1463  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17394  1464  0021               	movlb	1	; select bank1
 17395  1465  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 17396                           
 17397                           ;Dimmer_B1.c: 1863: DimmerIntr1.Calculate = 1;
 17398  1466  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 17399  1467                     l10063:	
 17400                           
 17401                           ;Dimmer_B1.c: 1864: }
 17402                           ;Dimmer_B1.c: 1868: if (lights == 2) {
 17403  1467  0020               	movlb	0	; select bank0
 17404  1468  0824               	movf	DimmerIntr_ValueCalculate@lights,w
 17405  1469  3A02               	xorlw	2
 17406  146A  1D03               	skipz
 17407  146B  0008               	return
 17408                           
 17409                           ;Dimmer_B1.c: 1873: DimmerIntr2.TuneValue2 = Division(DimmerIntr2.DimmingValue, 2);
 17410  146C  3002               	movlw	2
 17411  146D  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17412  146E  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17413  146F  00F7               	movwf	Division@num
 17414  1470  0021               	movlb	1	; select bank1
 17415  1471  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 17416  1472  3199  2123         	fcall	_Division
 17417  1474  0020               	movlb	0	; select bank0
 17418  1475  00A3               	movwf	??_DimmerIntr_ValueCalculate+1
 17419  1476  0823               	movf	??_DimmerIntr_ValueCalculate+1,w
 17420  1477  0021               	movlb	1	; select bank1
 17421  1478  00B8               	movwf	(_DimmerIntr2^(0+128)+8)
 17422                           
 17423                           ;Dimmer_B1.c: 1874: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - DimmerIntr2.
      +                          DimmingValue);
 17424  1479  0335               	decf	(_DimmerIntr2^(0+128)+5),w
 17425  147A  3AFF               	xorlw	255
 17426  147B  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17427  147C  3E37               	addlw	55
 17428  147D  0020               	movlb	0	; select bank0
 17429  147E  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17430  147F  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17431  1480  0021               	movlb	1	; select bank1
 17432  1481  00B9               	movwf	(_DimmerIntr2^(0+128)+9)
 17433                           
 17434                           ;Dimmer_B1.c: 1875: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneVa
      +                          lue2;
 17435  1482  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 17436  1483  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17437  1484  0020               	movlb	0	; select bank0
 17438  1485  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17439  1486  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17440  1487  0021               	movlb	1	; select bank1
 17441  1488  00BA               	movwf	(_DimmerIntr2^(0+128)+10)
 17442                           
 17443                           ;Dimmer_B1.c: 1876: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 5;
 17444  1489  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 17445  148A  3E05               	addlw	5
 17446  148B  0020               	movlb	0	; select bank0
 17447  148C  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17448  148D  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17449  148E  0021               	movlb	1	; select bank1
 17450  148F  00BB               	movwf	(_DimmerIntr2^(0+128)+11)
 17451                           
 17452                           ;Dimmer_B1.c: 1878: DimmerIntr2.Calculate = 1;
 17453  1490  17B1               	bsf	(_DimmerIntr2^(0+128)+1),7
 17454  1491  0008               	return
 17455  1492                     __end_of_DimmerIntr_ValueCalculate:	
 17456                           
 17457                           	psect	text119
 17458  186B                     __ptext119:	
 17459 ;; *************** function _DimmerLights_Initialization *****************
 17460 ;; Defined at:
 17461 ;;		line 675 in file "../src/Dimmer_B1.c"
 17462 ;; Parameters:    Size  Location     Type
 17463 ;;		None
 17464 ;; Auto vars:     Size  Location     Type
 17465 ;;		None
 17466 ;; Return value:  Size  Location     Type
 17467 ;;		None               void
 17468 ;; Registers used:
 17469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17470 ;; Tracked objects:
 17471 ;;		On entry : 0/0
 17472 ;;		On exit  : 0/0
 17473 ;;		Unchanged: 0/0
 17474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17479 ;;Total ram usage:        0 bytes
 17480 ;; Hardware stack levels used:    1
 17481 ;; Hardware stack levels required when called:    7
 17482 ;; This function calls:
 17483 ;;		_DimmerIntr_Initialization
 17484 ;;		_setDimmerLights_Initialization
 17485 ;; This function is called by:
 17486 ;;		_main
 17487 ;; This function uses a non-reentrant model
 17488 ;;
 17489                           
 17490                           
 17491                           ;psect for function _DimmerLights_Initialization
 17492  186B                     _DimmerLights_Initialization:	
 17493                           
 17494                           ;Dimmer_B1.c: 677: setDimmerLights_Initialization(1);
 17495                           
 17496                           ;incstack = 0
 17497                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 17498  186B  3001               	movlw	1
 17499  186C  31A7  27BC  3198   	fcall	_setDimmerLights_Initialization
 17500                           
 17501                           ;Dimmer_B1.c: 681: setDimmerLights_Initialization(2);
 17502  186F  3002               	movlw	2
 17503  1870  31A7  27BC  3198   	fcall	_setDimmerLights_Initialization
 17504                           
 17505                           ;Dimmer_B1.c: 687: DimmerIntr_Initialization();
 17506  1873  318D  25DE         	fcall	_DimmerIntr_Initialization
 17507  1875  0008               	return
 17508  1876                     __end_of_DimmerLights_Initialization:	
 17509                           
 17510                           	psect	text120
 17511  27BC                     __ptext120:	
 17512 ;; *************** function _setDimmerLights_Initialization *****************
 17513 ;; Defined at:
 17514 ;;		line 691 in file "../src/Dimmer_B1.c"
 17515 ;; Parameters:    Size  Location     Type
 17516 ;;  lights          1    wreg     unsigned char 
 17517 ;; Auto vars:     Size  Location     Type
 17518 ;;  lights          1    0[COMMON] unsigned char 
 17519 ;; Return value:  Size  Location     Type
 17520 ;;		None               void
 17521 ;; Registers used:
 17522 ;;		wreg
 17523 ;; Tracked objects:
 17524 ;;		On entry : 0/0
 17525 ;;		On exit  : 0/0
 17526 ;;		Unchanged: 0/0
 17527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17532 ;;Total ram usage:        0 bytes
 17533 ;; Hardware stack levels used:    1
 17534 ;; Hardware stack levels required when called:    3
 17535 ;; This function calls:
 17536 ;;		Nothing
 17537 ;; This function is called by:
 17538 ;;		_DimmerLights_Initialization
 17539 ;; This function uses a non-reentrant model
 17540 ;;
 17541                           
 17542                           
 17543                           ;psect for function _setDimmerLights_Initialization
 17544  27BC                     _setDimmerLights_Initialization:	
 17545                           
 17546                           ;incstack = 0
 17547                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17548  27BC  0008               	return
 17549  27BD                     __end_of_setDimmerLights_Initialization:	
 17550                           
 17551                           	psect	text121
 17552  0DDE                     __ptext121:	
 17553 ;; *************** function _DimmerIntr_Initialization *****************
 17554 ;; Defined at:
 17555 ;;		line 7 in file "../src/Dimmer_B1.c"
 17556 ;; Parameters:    Size  Location     Type
 17557 ;;		None
 17558 ;; Auto vars:     Size  Location     Type
 17559 ;;		None
 17560 ;; Return value:  Size  Location     Type
 17561 ;;		None               void
 17562 ;; Registers used:
 17563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17564 ;; Tracked objects:
 17565 ;;		On entry : 0/0
 17566 ;;		On exit  : 0/0
 17567 ;;		Unchanged: 0/0
 17568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17572 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17573 ;;Total ram usage:        2 bytes
 17574 ;; Hardware stack levels used:    1
 17575 ;; Hardware stack levels required when called:    6
 17576 ;; This function calls:
 17577 ;;		_Division
 17578 ;;		_getDimmerLights_PercentToValue
 17579 ;;		_getDimmerLights_ValueToPercent
 17580 ;;		_setMemory_Modify
 17581 ;; This function is called by:
 17582 ;;		_DimmerLights_Initialization
 17583 ;; This function uses a non-reentrant model
 17584 ;;
 17585                           
 17586                           
 17587                           ;psect for function _DimmerIntr_Initialization
 17588  0DDE                     _DimmerIntr_Initialization:	
 17589                           
 17590                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 17591                           
 17592                           ;incstack = 0
 17593                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 17594  0DDE  3003               	movlw	3
 17595  0DDF  0020               	movlb	0	; select bank0
 17596  0DE0  00DA               	movwf	??_DimmerIntr_Initialization
 17597  0DE1  085A               	movf	??_DimmerIntr_Initialization,w
 17598  0DE2  0021               	movlb	1	; select bank1
 17599  0DE3  00A4               	movwf	(_DimmerIntr1^(0+128)+4)
 17600                           
 17601                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(77*0.55));
 17602  0DE4  302A               	movlw	42
 17603  0DE5  0020               	movlb	0	; select bank0
 17604  0DE6  00DA               	movwf	??_DimmerIntr_Initialization
 17605  0DE7  085A               	movf	??_DimmerIntr_Initialization,w
 17606  0DE8  0021               	movlb	1	; select bank1
 17607  0DE9  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 17608                           
 17609                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.55));
 17610  0DEA  3002               	movlw	2
 17611  0DEB  0020               	movlb	0	; select bank0
 17612  0DEC  00DA               	movwf	??_DimmerIntr_Initialization
 17613  0DED  085A               	movf	??_DimmerIntr_Initialization,w
 17614  0DEE  0021               	movlb	1	; select bank1
 17615  0DEF  00A7               	movwf	(_DimmerIntr1^(0+128)+7)
 17616                           
 17617                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 17618  0DF0  10A0               	bcf	_DimmerIntr1^(0+128),1
 17619                           
 17620                           ;Dimmer_B1.c: 17: if (myMain.InitDimmer == 1) {
 17621  0DF1  1E59               	btfss	(_myMain^(0+128)+10),4
 17622  0DF2  2E00               	goto	l762
 17623                           
 17624                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17625  0DF3  302A               	movlw	42
 17626  0DF4  3197  2736  318D   	fcall	_getDimmerLights_ValueToPercent
 17627  0DF7  0020               	movlb	0	; select bank0
 17628  0DF8  00DA               	movwf	??_DimmerIntr_Initialization
 17629  0DF9  087B               	movf	_product,w
 17630  0DFA  3E15               	addlw	21
 17631  0DFB  0086               	movwf	6
 17632  0DFC  3002               	movlw	2	; select bank4/5
 17633  0DFD  0087               	movwf	7
 17634  0DFE  085A               	movf	??_DimmerIntr_Initialization,w
 17635  0DFF  0081               	movwf	1
 17636  0E00                     l762:	
 17637                           
 17638                           ;Dimmer_B1.c: 19: }
 17639                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 17640  0E00  087B               	movf	_product,w
 17641  0E01  3E15               	addlw	21
 17642  0E02  0086               	movwf	6
 17643  0E03  3002               	movlw	2	; select bank4/5
 17644  0E04  0087               	movwf	7
 17645  0E05  0801               	movf	1,w
 17646  0E06  3196  26D1  318D   	fcall	_getDimmerLights_PercentToValue
 17647  0E09  0020               	movlb	0	; select bank0
 17648  0E0A  00DA               	movwf	??_DimmerIntr_Initialization
 17649  0E0B  085A               	movf	??_DimmerIntr_Initialization,w
 17650  0E0C  0021               	movlb	1	; select bank1
 17651  0E0D  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 17652                           
 17653                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue2 = Division(((char)(77*0.55)), 2);
 17654  0E0E  3002               	movlw	2
 17655  0E0F  0020               	movlb	0	; select bank0
 17656  0E10  00DA               	movwf	??_DimmerIntr_Initialization
 17657  0E11  085A               	movf	??_DimmerIntr_Initialization,w
 17658  0E12  00F7               	movwf	Division@num
 17659  0E13  302A               	movlw	42
 17660  0E14  3199  2123  318D   	fcall	_Division
 17661  0E17  0020               	movlb	0	; select bank0
 17662  0E18  00DB               	movwf	??_DimmerIntr_Initialization+1
 17663  0E19  085B               	movf	??_DimmerIntr_Initialization+1,w
 17664  0E1A  0021               	movlb	1	; select bank1
 17665  0E1B  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 17666                           
 17667                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17668  0E1C  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 17669  0E1D  3E0D               	addlw	13
 17670  0E1E  0020               	movlb	0	; select bank0
 17671  0E1F  00DA               	movwf	??_DimmerIntr_Initialization
 17672  0E20  085A               	movf	??_DimmerIntr_Initialization,w
 17673  0E21  0021               	movlb	1	; select bank1
 17674  0E22  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 17675                           
 17676                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 17677  0E23  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 17678  0E24  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17679  0E25  0020               	movlb	0	; select bank0
 17680  0E26  00DA               	movwf	??_DimmerIntr_Initialization
 17681  0E27  085A               	movf	??_DimmerIntr_Initialization,w
 17682  0E28  0021               	movlb	1	; select bank1
 17683  0E29  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 17684                           
 17685                           ;Dimmer_B1.c: 32: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 17686  0E2A  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 17687  0E2B  3E01               	addlw	1
 17688  0E2C  0020               	movlb	0	; select bank0
 17689  0E2D  00DA               	movwf	??_DimmerIntr_Initialization
 17690  0E2E  085A               	movf	??_DimmerIntr_Initialization,w
 17691  0E2F  0021               	movlb	1	; select bank1
 17692  0E30  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 17693                           
 17694                           ;Dimmer_B1.c: 33: DimmerIntr1.Calculate = 1;
 17695  0E31  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 17696                           
 17697                           ;Dimmer_B1.c: 39: DimmerIntr2.TuneTimeValue = 3;
 17698  0E32  3003               	movlw	3
 17699  0E33  0020               	movlb	0	; select bank0
 17700  0E34  00DA               	movwf	??_DimmerIntr_Initialization
 17701  0E35  085A               	movf	??_DimmerIntr_Initialization,w
 17702  0E36  0021               	movlb	1	; select bank1
 17703  0E37  00B4               	movwf	(_DimmerIntr2^(0+128)+4)
 17704                           
 17705                           ;Dimmer_B1.c: 40: DimmerIntr2.MaxmumValue = ((char)(77*0.55));
 17706  0E38  302A               	movlw	42
 17707  0E39  0020               	movlb	0	; select bank0
 17708  0E3A  00DA               	movwf	??_DimmerIntr_Initialization
 17709  0E3B  085A               	movf	??_DimmerIntr_Initialization,w
 17710  0E3C  0021               	movlb	1	; select bank1
 17711  0E3D  00B6               	movwf	(_DimmerIntr2^(0+128)+6)
 17712                           
 17713                           ;Dimmer_B1.c: 41: DimmerIntr2.MinimumValue = ((char)(5*0.55));
 17714  0E3E  3002               	movlw	2
 17715  0E3F  0020               	movlb	0	; select bank0
 17716  0E40  00DA               	movwf	??_DimmerIntr_Initialization
 17717  0E41  085A               	movf	??_DimmerIntr_Initialization,w
 17718  0E42  0021               	movlb	1	; select bank1
 17719  0E43  00B7               	movwf	(_DimmerIntr2^(0+128)+7)
 17720                           
 17721                           ;Dimmer_B1.c: 42: DimmerIntr2.Tune = 0;
 17722  0E44  10B0               	bcf	_DimmerIntr2^(0+128),1
 17723                           
 17724                           ;Dimmer_B1.c: 46: if (myMain.InitDimmer == 1) {
 17725  0E45  1E59               	btfss	(_myMain^(0+128)+10),4
 17726  0E46  2E54               	goto	l763
 17727                           
 17728                           ;Dimmer_B1.c: 47: product->Data[22] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17729  0E47  302A               	movlw	42
 17730  0E48  3197  2736  318D   	fcall	_getDimmerLights_ValueToPercent
 17731  0E4B  0020               	movlb	0	; select bank0
 17732  0E4C  00DA               	movwf	??_DimmerIntr_Initialization
 17733  0E4D  087B               	movf	_product,w
 17734  0E4E  3E16               	addlw	22
 17735  0E4F  0086               	movwf	6
 17736  0E50  3002               	movlw	2	; select bank4/5
 17737  0E51  0087               	movwf	7
 17738  0E52  085A               	movf	??_DimmerIntr_Initialization,w
 17739  0E53  0081               	movwf	1
 17740  0E54                     l763:	
 17741                           
 17742                           ;Dimmer_B1.c: 48: }
 17743                           ;Dimmer_B1.c: 50: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 17744  0E54  087B               	movf	_product,w
 17745  0E55  3E16               	addlw	22
 17746  0E56  0086               	movwf	6
 17747  0E57  3002               	movlw	2	; select bank4/5
 17748  0E58  0087               	movwf	7
 17749  0E59  0801               	movf	1,w
 17750  0E5A  3196  26D1  318D   	fcall	_getDimmerLights_PercentToValue
 17751  0E5D  0020               	movlb	0	; select bank0
 17752  0E5E  00DA               	movwf	??_DimmerIntr_Initialization
 17753  0E5F  085A               	movf	??_DimmerIntr_Initialization,w
 17754  0E60  0021               	movlb	1	; select bank1
 17755  0E61  00B5               	movwf	(_DimmerIntr2^(0+128)+5)
 17756                           
 17757                           ;Dimmer_B1.c: 57: DimmerIntr2.TuneValue2 = Division(((char)(77*0.55)), 2);
 17758  0E62  3002               	movlw	2
 17759  0E63  0020               	movlb	0	; select bank0
 17760  0E64  00DA               	movwf	??_DimmerIntr_Initialization
 17761  0E65  085A               	movf	??_DimmerIntr_Initialization,w
 17762  0E66  00F7               	movwf	Division@num
 17763  0E67  302A               	movlw	42
 17764  0E68  3199  2123  318D   	fcall	_Division
 17765  0E6B  0020               	movlb	0	; select bank0
 17766  0E6C  00DB               	movwf	??_DimmerIntr_Initialization+1
 17767  0E6D  085B               	movf	??_DimmerIntr_Initialization+1,w
 17768  0E6E  0021               	movlb	1	; select bank1
 17769  0E6F  00B8               	movwf	(_DimmerIntr2^(0+128)+8)
 17770                           
 17771                           ;Dimmer_B1.c: 58: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17772  0E70  0838               	movf	(_DimmerIntr2^(0+128)+8),w
 17773  0E71  3E0D               	addlw	13
 17774  0E72  0020               	movlb	0	; select bank0
 17775  0E73  00DA               	movwf	??_DimmerIntr_Initialization
 17776  0E74  085A               	movf	??_DimmerIntr_Initialization,w
 17777  0E75  0021               	movlb	1	; select bank1
 17778  0E76  00B9               	movwf	(_DimmerIntr2^(0+128)+9)
 17779                           
 17780                           ;Dimmer_B1.c: 59: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneValu
      +                          e2;
 17781  0E77  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 17782  0E78  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17783  0E79  0020               	movlb	0	; select bank0
 17784  0E7A  00DA               	movwf	??_DimmerIntr_Initialization
 17785  0E7B  085A               	movf	??_DimmerIntr_Initialization,w
 17786  0E7C  0021               	movlb	1	; select bank1
 17787  0E7D  00BA               	movwf	(_DimmerIntr2^(0+128)+10)
 17788                           
 17789                           ;Dimmer_B1.c: 60: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 1;
 17790  0E7E  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 17791  0E7F  3E01               	addlw	1
 17792  0E80  0020               	movlb	0	; select bank0
 17793  0E81  00DA               	movwf	??_DimmerIntr_Initialization
 17794  0E82  085A               	movf	??_DimmerIntr_Initialization,w
 17795  0E83  0021               	movlb	1	; select bank1
 17796  0E84  00BB               	movwf	(_DimmerIntr2^(0+128)+11)
 17797                           
 17798                           ;Dimmer_B1.c: 61: DimmerIntr2.Calculate = 1;
 17799  0E85  17B1               	bsf	(_DimmerIntr2^(0+128)+1),7
 17800                           
 17801                           ;Dimmer_B1.c: 83: if (myMain.InitDimmer == 1) {
 17802  0E86  1E59               	btfss	(_myMain^(0+128)+10),4
 17803  0E87  0008               	return
 17804                           
 17805                           ;Dimmer_B1.c: 84: myMain.InitDimmer = 0;
 17806  0E88  1259               	bcf	(_myMain^(0+128)+10),4
 17807                           
 17808                           ;Dimmer_B1.c: 85: myMain.SaveDimmer = 1;
 17809  0E89  16D9               	bsf	(_myMain^(0+128)+10),5
 17810                           
 17811                           ;Dimmer_B1.c: 86: setMemory_Modify(1);
 17812  0E8A  3001               	movlw	1
 17813  0E8B  3199  215F         	fcall	_setMemory_Modify
 17814  0E8D  0008               	return
 17815  0E8E                     __end_of_DimmerIntr_Initialization:	
 17816                           
 17817                           	psect	text122
 17818  195F                     __ptext122:	
 17819 ;; *************** function _setMemory_Modify *****************
 17820 ;; Defined at:
 17821 ;;		line 1086 in file "../src/MCU_B1.c"
 17822 ;; Parameters:    Size  Location     Type
 17823 ;;  command         1    wreg     unsigned char 
 17824 ;; Auto vars:     Size  Location     Type
 17825 ;;  command         1    3[COMMON] unsigned char 
 17826 ;; Return value:  Size  Location     Type
 17827 ;;		None               void
 17828 ;; Registers used:
 17829 ;;		wreg, status,2, status,0
 17830 ;; Tracked objects:
 17831 ;;		On entry : 0/0
 17832 ;;		On exit  : 0/0
 17833 ;;		Unchanged: 0/0
 17834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17836 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17837 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17838 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17839 ;;Total ram usage:        2 bytes
 17840 ;; Hardware stack levels used:    1
 17841 ;; Hardware stack levels required when called:    3
 17842 ;; This function calls:
 17843 ;;		Nothing
 17844 ;; This function is called by:
 17845 ;;		_DimmerIntr_Initialization
 17846 ;;		_DimmerLights_AssignationDimming
 17847 ;;		_setDimmerLights_Dimming
 17848 ;;		_setLog_Code
 17849 ;;		_setRFSW_AdjControl
 17850 ;; This function uses a non-reentrant model
 17851 ;;
 17852                           
 17853                           
 17854                           ;psect for function _setMemory_Modify
 17855  195F                     _setMemory_Modify:	
 17856                           
 17857                           ;incstack = 0
 17858                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 17859                           ;setMemory_Modify@command stored from wreg
 17860  195F  00F3               	movwf	setMemory_Modify@command
 17861                           
 17862                           ;MCU_B1.c: 1087: Memory.Modify = command == 1 ? 1 : 0;
 17863  1960  0873               	movf	setMemory_Modify@command,w
 17864  1961  3A01               	xorlw	1
 17865  1962  3000               	movlw	0
 17866  1963  1903               	skipnz
 17867  1964  3001               	movlw	1
 17868  1965  00F2               	movwf	??_setMemory_Modify
 17869  1966  0024               	movlb	4	; select bank4
 17870  1967  0854               	movf	(_Memory^(0+512)+36),w
 17871  1968  0672               	xorwf	??_setMemory_Modify,w
 17872  1969  39FE               	andlw	-2
 17873  196A  0672               	xorwf	??_setMemory_Modify,w
 17874  196B  00D4               	movwf	(_Memory^(0+512)+36)
 17875                           
 17876                           ;MCU_B1.c: 1088: Memory.Time = 0;
 17877  196C  01D2               	clrf	(_Memory^(0+512)+34)
 17878  196D  01D3               	clrf	((_Memory+1)^(0+512)+34)
 17879  196E  0008               	return
 17880  196F                     __end_of_setMemory_Modify:	
 17881                           
 17882                           	psect	text123
 17883  1736                     __ptext123:	
 17884 ;; *************** function _getDimmerLights_ValueToPercent *****************
 17885 ;; Defined at:
 17886 ;;		line 1256 in file "../src/Dimmer_B1.c"
 17887 ;; Parameters:    Size  Location     Type
 17888 ;;  value           1    wreg     unsigned char 
 17889 ;; Auto vars:     Size  Location     Type
 17890 ;;  value           1   54[BANK0 ] unsigned char 
 17891 ;;  i               3   55[BANK0 ] float 
 17892 ;; Return value:  Size  Location     Type
 17893 ;;                  1    wreg      unsigned char 
 17894 ;; Registers used:
 17895 ;;		wreg, status,2, status,0, pclath, cstack
 17896 ;; Tracked objects:
 17897 ;;		On entry : 0/0
 17898 ;;		On exit  : 0/0
 17899 ;;		Unchanged: 0/0
 17900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17902 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17903 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17904 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17905 ;;Total ram usage:        6 bytes
 17906 ;; Hardware stack levels used:    1
 17907 ;; Hardware stack levels required when called:    5
 17908 ;; This function calls:
 17909 ;;		___awtoft
 17910 ;;		___ftadd
 17911 ;;		___ftdiv
 17912 ;;		___ftneg
 17913 ;;		___fttol
 17914 ;; This function is called by:
 17915 ;;		_DimmerIntr_Initialization
 17916 ;;		_setDimmerLights_Dimming
 17917 ;; This function uses a non-reentrant model
 17918 ;;
 17919                           
 17920                           
 17921                           ;psect for function _getDimmerLights_ValueToPercent
 17922  1736                     _getDimmerLights_ValueToPercent:	
 17923                           
 17924                           ;incstack = 0
 17925                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 17926                           ;getDimmerLights_ValueToPercent@value stored from wreg
 17927  1736  0020               	movlb	0	; select bank0
 17928  1737  00D6               	movwf	getDimmerLights_ValueToPercent@value
 17929                           
 17930                           ;Dimmer_B1.c: 1264: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 17931  1738  3000               	movlw	0
 17932  1739  00D7               	movwf	getDimmerLights_ValueToPercent@i
 17933  173A  3020               	movlw	32
 17934  173B  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 17935  173C  3042               	movlw	66
 17936  173D  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 17937                           
 17938                           ;Dimmer_B1.c: 1265: i /= 100;
 17939  173E  3000               	movlw	0
 17940  173F  00A6               	movwf	___ftdiv@f2
 17941  1740  30C8               	movlw	200
 17942  1741  00A7               	movwf	___ftdiv@f2+1
 17943  1742  3042               	movlw	66
 17944  1743  00A8               	movwf	___ftdiv@f2+2
 17945  1744  0857               	movf	getDimmerLights_ValueToPercent@i,w
 17946  1745  00A9               	movwf	___ftdiv@f1
 17947  1746  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 17948  1747  00AA               	movwf	___ftdiv@f1+1
 17949  1748  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 17950  1749  00AB               	movwf	___ftdiv@f1+2
 17951  174A  318D  2535  3197   	fcall	___ftdiv
 17952  174D  0020               	movlb	0	; select bank0
 17953  174E  0826               	movf	?___ftdiv,w
 17954  174F  00D7               	movwf	getDimmerLights_ValueToPercent@i
 17955  1750  0827               	movf	?___ftdiv+1,w
 17956  1751  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 17957  1752  0828               	movf	?___ftdiv+2,w
 17958  1753  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 17959                           
 17960                           ;Dimmer_B1.c: 1267: return (char) (100 - ((((char)(77*0.55)) - value) / i));
 17961  1754  0856               	movf	getDimmerLights_ValueToPercent@value,w
 17962  1755  00D4               	movwf	??_getDimmerLights_ValueToPercent
 17963  1756  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 17964  1757  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 17965  1758  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 17966  1759  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 17967  175A  1903               	skipnz
 17968  175B  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 17969  175C  0854               	movf	??_getDimmerLights_ValueToPercent,w
 17970  175D  3E2A               	addlw	42
 17971  175E  00A0               	movwf	___awtoft@c
 17972  175F  3000               	movlw	0
 17973  1760  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 17974  1761  00A1               	movwf	___awtoft@c+1
 17975  1762  319C  24E5  3197   	fcall	___awtoft
 17976  1765  0020               	movlb	0	; select bank0
 17977  1766  0820               	movf	?___awtoft,w
 17978  1767  00A9               	movwf	___ftdiv@f1
 17979  1768  0821               	movf	?___awtoft+1,w
 17980  1769  00AA               	movwf	___ftdiv@f1+1
 17981  176A  0822               	movf	?___awtoft+2,w
 17982  176B  00AB               	movwf	___ftdiv@f1+2
 17983  176C  0857               	movf	getDimmerLights_ValueToPercent@i,w
 17984  176D  00A6               	movwf	___ftdiv@f2
 17985  176E  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 17986  176F  00A7               	movwf	___ftdiv@f2+1
 17987  1770  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 17988  1771  00A8               	movwf	___ftdiv@f2+2
 17989  1772  318D  2535  3197   	fcall	___ftdiv
 17990  1775  0020               	movlb	0	; select bank0
 17991  1776  0826               	movf	?___ftdiv,w
 17992  1777  00B6               	movwf	___ftneg@f1
 17993  1778  0827               	movf	?___ftdiv+1,w
 17994  1779  00B7               	movwf	___ftneg@f1+1
 17995  177A  0828               	movf	?___ftdiv+2,w
 17996  177B  00B8               	movwf	___ftneg@f1+2
 17997  177C  3198  2044  3197   	fcall	___ftneg
 17998  177F  0020               	movlb	0	; select bank0
 17999  1780  0836               	movf	?___ftneg,w
 18000  1781  00BC               	movwf	___ftadd@f2
 18001  1782  0837               	movf	?___ftneg+1,w
 18002  1783  00BD               	movwf	___ftadd@f2+1
 18003  1784  0838               	movf	?___ftneg+2,w
 18004  1785  00BE               	movwf	___ftadd@f2+2
 18005  1786  3000               	movlw	0
 18006  1787  00B9               	movwf	___ftadd@f1
 18007  1788  30C8               	movlw	200
 18008  1789  00BA               	movwf	___ftadd@f1+1
 18009  178A  3042               	movlw	66
 18010  178B  00BB               	movwf	___ftadd@f1+2
 18011  178C  3183  2364  3197   	fcall	___ftadd
 18012  178F  0020               	movlb	0	; select bank0
 18013  1790  0839               	movf	?___ftadd,w
 18014  1791  00C6               	movwf	___fttol@f1
 18015  1792  083A               	movf	?___ftadd+1,w
 18016  1793  00C7               	movwf	___fttol@f1+1
 18017  1794  083B               	movf	?___ftadd+2,w
 18018  1795  00C8               	movwf	___fttol@f1+2
 18019  1796  318A  2258         	fcall	___fttol
 18020  1798  0020               	movlb	0	; select bank0
 18021  1799  0846               	movf	?___fttol,w
 18022  179A  0008               	return
 18023  179B                     __end_of_getDimmerLights_ValueToPercent:	
 18024                           
 18025                           	psect	text124
 18026  16D1                     __ptext124:	
 18027 ;; *************** function _getDimmerLights_PercentToValue *****************
 18028 ;; Defined at:
 18029 ;;		line 1240 in file "../src/Dimmer_B1.c"
 18030 ;; Parameters:    Size  Location     Type
 18031 ;;  value           1    wreg     unsigned char 
 18032 ;; Auto vars:     Size  Location     Type
 18033 ;;  value           1   54[BANK0 ] unsigned char 
 18034 ;;  i               3   55[BANK0 ] float 
 18035 ;; Return value:  Size  Location     Type
 18036 ;;                  1    wreg      unsigned char 
 18037 ;; Registers used:
 18038 ;;		wreg, status,2, status,0, pclath, cstack
 18039 ;; Tracked objects:
 18040 ;;		On entry : 0/0
 18041 ;;		On exit  : 0/0
 18042 ;;		Unchanged: 0/0
 18043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18045 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18046 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18047 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18048 ;;Total ram usage:        6 bytes
 18049 ;; Hardware stack levels used:    1
 18050 ;; Hardware stack levels required when called:    5
 18051 ;; This function calls:
 18052 ;;		___awtoft
 18053 ;;		___ftadd
 18054 ;;		___ftdiv
 18055 ;;		___ftmul
 18056 ;;		___ftneg
 18057 ;;		___fttol
 18058 ;; This function is called by:
 18059 ;;		_DimmerIntr_Initialization
 18060 ;;		_DimmerLights_AssignationDimming
 18061 ;;		_setDimmerLights_OnOff
 18062 ;;		_setRFSW_AdjControl
 18063 ;; This function uses a non-reentrant model
 18064 ;;
 18065                           
 18066                           
 18067                           ;psect for function _getDimmerLights_PercentToValue
 18068  16D1                     _getDimmerLights_PercentToValue:	
 18069                           
 18070                           ;incstack = 0
 18071                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 18072                           ;getDimmerLights_PercentToValue@value stored from wreg
 18073  16D1  0020               	movlb	0	; select bank0
 18074  16D2  00D6               	movwf	getDimmerLights_PercentToValue@value
 18075                           
 18076                           ;Dimmer_B1.c: 1248: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 18077  16D3  3000               	movlw	0
 18078  16D4  00D7               	movwf	getDimmerLights_PercentToValue@i
 18079  16D5  3020               	movlw	32
 18080  16D6  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 18081  16D7  3042               	movlw	66
 18082  16D8  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 18083                           
 18084                           ;Dimmer_B1.c: 1249: i /= 100;
 18085  16D9  3000               	movlw	0
 18086  16DA  00A6               	movwf	___ftdiv@f2
 18087  16DB  30C8               	movlw	200
 18088  16DC  00A7               	movwf	___ftdiv@f2+1
 18089  16DD  3042               	movlw	66
 18090  16DE  00A8               	movwf	___ftdiv@f2+2
 18091  16DF  0857               	movf	getDimmerLights_PercentToValue@i,w
 18092  16E0  00A9               	movwf	___ftdiv@f1
 18093  16E1  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 18094  16E2  00AA               	movwf	___ftdiv@f1+1
 18095  16E3  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 18096  16E4  00AB               	movwf	___ftdiv@f1+2
 18097  16E5  318D  2535  3196   	fcall	___ftdiv
 18098  16E8  0020               	movlb	0	; select bank0
 18099  16E9  0826               	movf	?___ftdiv,w
 18100  16EA  00D7               	movwf	getDimmerLights_PercentToValue@i
 18101  16EB  0827               	movf	?___ftdiv+1,w
 18102  16EC  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 18103  16ED  0828               	movf	?___ftdiv+2,w
 18104  16EE  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 18105                           
 18106                           ;Dimmer_B1.c: 1251: return (char) (((char)(77*0.55)) - ((100 - value) * i));
 18107  16EF  0856               	movf	getDimmerLights_PercentToValue@value,w
 18108  16F0  00D4               	movwf	??_getDimmerLights_PercentToValue
 18109  16F1  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 18110  16F2  09D4               	comf	??_getDimmerLights_PercentToValue,f
 18111  16F3  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 18112  16F4  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 18113  16F5  1903               	skipnz
 18114  16F6  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 18115  16F7  0854               	movf	??_getDimmerLights_PercentToValue,w
 18116  16F8  3E64               	addlw	100
 18117  16F9  00A0               	movwf	___awtoft@c
 18118  16FA  3000               	movlw	0
 18119  16FB  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 18120  16FC  00A1               	movwf	___awtoft@c+1
 18121  16FD  319C  24E5  3196   	fcall	___awtoft
 18122  1700  0020               	movlb	0	; select bank0
 18123  1701  0820               	movf	?___awtoft,w
 18124  1702  00A9               	movwf	___ftmul@f2
 18125  1703  0821               	movf	?___awtoft+1,w
 18126  1704  00AA               	movwf	___ftmul@f2+1
 18127  1705  0822               	movf	?___awtoft+2,w
 18128  1706  00AB               	movwf	___ftmul@f2+2
 18129  1707  0857               	movf	getDimmerLights_PercentToValue@i,w
 18130  1708  00A6               	movwf	___ftmul@f1
 18131  1709  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 18132  170A  00A7               	movwf	___ftmul@f1+1
 18133  170B  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 18134  170C  00A8               	movwf	___ftmul@f1+2
 18135  170D  318E  268E  3196   	fcall	___ftmul
 18136  1710  0020               	movlb	0	; select bank0
 18137  1711  0826               	movf	?___ftmul,w
 18138  1712  00B6               	movwf	___ftneg@f1
 18139  1713  0827               	movf	?___ftmul+1,w
 18140  1714  00B7               	movwf	___ftneg@f1+1
 18141  1715  0828               	movf	?___ftmul+2,w
 18142  1716  00B8               	movwf	___ftneg@f1+2
 18143  1717  3198  2044  3196   	fcall	___ftneg
 18144  171A  0020               	movlb	0	; select bank0
 18145  171B  0836               	movf	?___ftneg,w
 18146  171C  00BC               	movwf	___ftadd@f2
 18147  171D  0837               	movf	?___ftneg+1,w
 18148  171E  00BD               	movwf	___ftadd@f2+1
 18149  171F  0838               	movf	?___ftneg+2,w
 18150  1720  00BE               	movwf	___ftadd@f2+2
 18151  1721  3000               	movlw	0
 18152  1722  00B9               	movwf	___ftadd@f1
 18153  1723  3028               	movlw	40
 18154  1724  00BA               	movwf	___ftadd@f1+1
 18155  1725  3042               	movlw	66
 18156  1726  00BB               	movwf	___ftadd@f1+2
 18157  1727  3183  2364  3196   	fcall	___ftadd
 18158  172A  0020               	movlb	0	; select bank0
 18159  172B  0839               	movf	?___ftadd,w
 18160  172C  00C6               	movwf	___fttol@f1
 18161  172D  083A               	movf	?___ftadd+1,w
 18162  172E  00C7               	movwf	___fttol@f1+1
 18163  172F  083B               	movf	?___ftadd+2,w
 18164  1730  00C8               	movwf	___fttol@f1+2
 18165  1731  318A  2258         	fcall	___fttol
 18166  1733  0020               	movlb	0	; select bank0
 18167  1734  0846               	movf	?___fttol,w
 18168  1735  0008               	return
 18169  1736                     __end_of_getDimmerLights_PercentToValue:	
 18170                           
 18171                           	psect	text125
 18172  0A58                     __ptext125:	
 18173 ;; *************** function ___fttol *****************
 18174 ;; Defined at:
 18175 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 18176 ;; Parameters:    Size  Location     Type
 18177 ;;  f1              3   38[BANK0 ] float 
 18178 ;; Auto vars:     Size  Location     Type
 18179 ;;  lval            4   47[BANK0 ] unsigned long 
 18180 ;;  exp1            1   51[BANK0 ] unsigned char 
 18181 ;;  sign1           1   46[BANK0 ] unsigned char 
 18182 ;; Return value:  Size  Location     Type
 18183 ;;                  4   38[BANK0 ] long 
 18184 ;; Registers used:
 18185 ;;		wreg, status,2, status,0
 18186 ;; Tracked objects:
 18187 ;;		On entry : 0/0
 18188 ;;		On exit  : 0/0
 18189 ;;		Unchanged: 0/0
 18190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18191 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18192 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18193 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18194 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18195 ;;Total ram usage:       14 bytes
 18196 ;; Hardware stack levels used:    1
 18197 ;; Hardware stack levels required when called:    3
 18198 ;; This function calls:
 18199 ;;		Nothing
 18200 ;; This function is called by:
 18201 ;;		_getDimmerLights_PercentToValue
 18202 ;;		_getDimmerLights_ValueToPercent
 18203 ;; This function uses a non-reentrant model
 18204 ;;
 18205                           
 18206                           
 18207                           ;psect for function ___fttol
 18208  0A58                     ___fttol:	
 18209                           
 18210                           ;incstack = 0
 18211                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 18212  0A58  0020               	movlb	0	; select bank0
 18213  0A59  0846               	movf	___fttol@f1,w
 18214  0A5A  00CA               	movwf	??___fttol
 18215  0A5B  0847               	movf	___fttol@f1+1,w
 18216  0A5C  00CB               	movwf	??___fttol+1
 18217  0A5D  0848               	movf	___fttol@f1+2,w
 18218  0A5E  00CC               	movwf	??___fttol+2
 18219  0A5F  1003               	clrc
 18220  0A60  0D4B               	rlf	??___fttol+1,w
 18221  0A61  0D4C               	rlf	??___fttol+2,w
 18222  0A62  00CD               	movwf	??___fttol+3
 18223  0A63  084D               	movf	??___fttol+3,w
 18224  0A64  00D3               	movwf	___fttol@exp1
 18225  0A65  08D3               	movf	___fttol@exp1,f
 18226  0A66  1D03               	skipz
 18227  0A67  2A71               	goto	l6933
 18228  0A68  3000               	movlw	0
 18229  0A69  00C9               	movwf	?___fttol+3
 18230  0A6A  3000               	movlw	0
 18231  0A6B  00C8               	movwf	?___fttol+2
 18232  0A6C  3000               	movlw	0
 18233  0A6D  00C7               	movwf	?___fttol+1
 18234  0A6E  3000               	movlw	0
 18235  0A6F  00C6               	movwf	?___fttol
 18236  0A70  0008               	return
 18237  0A71                     l6933:	
 18238  0A71  0846               	movf	___fttol@f1,w
 18239  0A72  00CA               	movwf	??___fttol
 18240  0A73  0847               	movf	___fttol@f1+1,w
 18241  0A74  00CB               	movwf	??___fttol+1
 18242  0A75  0848               	movf	___fttol@f1+2,w
 18243  0A76  00CC               	movwf	??___fttol+2
 18244  0A77  3017               	movlw	23
 18245  0A78                     u6015:	
 18246  0A78  36CC               	lsrf	??___fttol+2,f
 18247  0A79  0CCB               	rrf	??___fttol+1,f
 18248  0A7A  0CCA               	rrf	??___fttol,f
 18249  0A7B  0B89               	decfsz	9,f
 18250  0A7C  2A78               	goto	u6015
 18251  0A7D  084A               	movf	??___fttol,w
 18252  0A7E  00CD               	movwf	??___fttol+3
 18253  0A7F  084D               	movf	??___fttol+3,w
 18254  0A80  00CE               	movwf	___fttol@sign1
 18255  0A81  17C7               	bsf	___fttol@f1+1,7
 18256  0A82  30FF               	movlw	255
 18257  0A83  05C6               	andwf	___fttol@f1,f
 18258  0A84  30FF               	movlw	255
 18259  0A85  05C7               	andwf	___fttol@f1+1,f
 18260  0A86  3000               	movlw	0
 18261  0A87  05C8               	andwf	___fttol@f1+2,f
 18262  0A88  0846               	movf	___fttol@f1,w
 18263  0A89  00CF               	movwf	___fttol@lval
 18264  0A8A  0847               	movf	___fttol@f1+1,w
 18265  0A8B  00D0               	movwf	___fttol@lval+1
 18266  0A8C  0848               	movf	___fttol@f1+2,w
 18267  0A8D  00D1               	movwf	___fttol@lval+2
 18268  0A8E  01D2               	clrf	___fttol@lval+3
 18269  0A8F  308E               	movlw	142
 18270  0A90  02D3               	subwf	___fttol@exp1,f
 18271  0A91  1FD3               	btfss	___fttol@exp1,7
 18272  0A92  2AAF               	goto	l6953
 18273  0A93  0853               	movf	___fttol@exp1,w
 18274  0A94  3A80               	xorlw	128
 18275  0A95  3E8F               	addlw	143
 18276  0A96  1803               	skipnc
 18277  0A97  2AA1               	goto	l6951
 18278  0A98  3000               	movlw	0
 18279  0A99  00C9               	movwf	?___fttol+3
 18280  0A9A  3000               	movlw	0
 18281  0A9B  00C8               	movwf	?___fttol+2
 18282  0A9C  3000               	movlw	0
 18283  0A9D  00C7               	movwf	?___fttol+1
 18284  0A9E  3000               	movlw	0
 18285  0A9F  00C6               	movwf	?___fttol
 18286  0AA0  0008               	return
 18287  0AA1                     l6951:	
 18288  0AA1  3001               	movlw	1
 18289  0AA2                     u6045:	
 18290  0AA2  36D2               	lsrf	___fttol@lval+3,f
 18291  0AA3  0CD1               	rrf	___fttol@lval+2,f
 18292  0AA4  0CD0               	rrf	___fttol@lval+1,f
 18293  0AA5  0CCF               	rrf	___fttol@lval,f
 18294  0AA6  0B89               	decfsz	9,f
 18295  0AA7  2AA2               	goto	u6045
 18296  0AA8  3001               	movlw	1
 18297  0AA9  00CA               	movwf	??___fttol
 18298  0AAA  084A               	movf	??___fttol,w
 18299  0AAB  07D3               	addwf	___fttol@exp1,f
 18300  0AAC  1903               	btfsc	3,2
 18301  0AAD  2AC8               	goto	l6963
 18302  0AAE  2AA1               	goto	l6951
 18303  0AAF                     l6953:	
 18304  0AAF  3018               	movlw	24
 18305  0AB0  0253               	subwf	___fttol@exp1,w
 18306  0AB1  1C03               	skipc
 18307  0AB2  2AC5               	goto	l6961
 18308  0AB3  3000               	movlw	0
 18309  0AB4  00C9               	movwf	?___fttol+3
 18310  0AB5  3000               	movlw	0
 18311  0AB6  00C8               	movwf	?___fttol+2
 18312  0AB7  3000               	movlw	0
 18313  0AB8  00C7               	movwf	?___fttol+1
 18314  0AB9  3000               	movlw	0
 18315  0ABA  00C6               	movwf	?___fttol
 18316  0ABB  0008               	return
 18317  0ABC                     l6959:	
 18318  0ABC  3001               	movlw	1
 18319  0ABD                     u6075:	
 18320  0ABD  35CF               	lslf	___fttol@lval,f
 18321  0ABE  0DD0               	rlf	___fttol@lval+1,f
 18322  0ABF  0DD1               	rlf	___fttol@lval+2,f
 18323  0AC0  0DD2               	rlf	___fttol@lval+3,f
 18324  0AC1  0B89               	decfsz	9,f
 18325  0AC2  2ABD               	goto	u6075
 18326  0AC3  3001               	movlw	1
 18327  0AC4  02D3               	subwf	___fttol@exp1,f
 18328  0AC5                     l6961:	
 18329  0AC5  08D3               	movf	___fttol@exp1,f
 18330  0AC6  1D03               	skipz
 18331  0AC7  2ABC               	goto	l6959
 18332  0AC8                     l6963:	
 18333  0AC8  084E               	movf	___fttol@sign1,w
 18334  0AC9  1903               	btfsc	3,2
 18335  0ACA  2AD6               	goto	l6967
 18336  0ACB  09CF               	comf	___fttol@lval,f
 18337  0ACC  09D0               	comf	___fttol@lval+1,f
 18338  0ACD  09D1               	comf	___fttol@lval+2,f
 18339  0ACE  09D2               	comf	___fttol@lval+3,f
 18340  0ACF  0ACF               	incf	___fttol@lval,f
 18341  0AD0  1903               	skipnz
 18342  0AD1  0AD0               	incf	___fttol@lval+1,f
 18343  0AD2  1903               	skipnz
 18344  0AD3  0AD1               	incf	___fttol@lval+2,f
 18345  0AD4  1903               	skipnz
 18346  0AD5  0AD2               	incf	___fttol@lval+3,f
 18347  0AD6                     l6967:	
 18348  0AD6  0852               	movf	___fttol@lval+3,w
 18349  0AD7  00C9               	movwf	?___fttol+3
 18350  0AD8  0851               	movf	___fttol@lval+2,w
 18351  0AD9  00C8               	movwf	?___fttol+2
 18352  0ADA  0850               	movf	___fttol@lval+1,w
 18353  0ADB  00C7               	movwf	?___fttol+1
 18354  0ADC  084F               	movf	___fttol@lval,w
 18355  0ADD  00C6               	movwf	?___fttol
 18356  0ADE  0008               	return
 18357  0ADF                     __end_of___fttol:	
 18358                           
 18359                           	psect	text126
 18360  1844                     __ptext126:	
 18361 ;; *************** function ___ftneg *****************
 18362 ;; Defined at:
 18363 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 18364 ;; Parameters:    Size  Location     Type
 18365 ;;  f1              3   22[BANK0 ] float 
 18366 ;; Auto vars:     Size  Location     Type
 18367 ;;		None
 18368 ;; Return value:  Size  Location     Type
 18369 ;;                  3   22[BANK0 ] float 
 18370 ;; Registers used:
 18371 ;;		wreg
 18372 ;; Tracked objects:
 18373 ;;		On entry : 0/0
 18374 ;;		On exit  : 0/0
 18375 ;;		Unchanged: 0/0
 18376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18377 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18380 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18381 ;;Total ram usage:        3 bytes
 18382 ;; Hardware stack levels used:    1
 18383 ;; Hardware stack levels required when called:    3
 18384 ;; This function calls:
 18385 ;;		Nothing
 18386 ;; This function is called by:
 18387 ;;		_getDimmerLights_PercentToValue
 18388 ;;		_getDimmerLights_ValueToPercent
 18389 ;; This function uses a non-reentrant model
 18390 ;;
 18391                           
 18392                           
 18393                           ;psect for function ___ftneg
 18394  1844                     ___ftneg:	
 18395                           
 18396                           ;incstack = 0
 18397                           ; Regs used in ___ftneg: [wreg]
 18398  1844  0020               	movlb	0	; select bank0
 18399  1845  0838               	movf	___ftneg@f1+2,w
 18400  1846  0437               	iorwf	___ftneg@f1+1,w
 18401  1847  0436               	iorwf	___ftneg@f1,w
 18402  1848  1903               	skipnz
 18403  1849  0008               	return
 18404  184A  3080               	movlw	128
 18405  184B  06B8               	xorwf	___ftneg@f1+2,f
 18406  184C  0008               	return
 18407  184D                     __end_of___ftneg:	
 18408                           
 18409                           	psect	text127
 18410  0E8E                     __ptext127:	
 18411 ;; *************** function ___ftmul *****************
 18412 ;; Defined at:
 18413 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 18414 ;; Parameters:    Size  Location     Type
 18415 ;;  f1              3    6[BANK0 ] float 
 18416 ;;  f2              3    9[BANK0 ] float 
 18417 ;; Auto vars:     Size  Location     Type
 18418 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 18419 ;;  sign            1   21[BANK0 ] unsigned char 
 18420 ;;  cntr            1   20[BANK0 ] unsigned char 
 18421 ;;  exp             1   16[BANK0 ] unsigned char 
 18422 ;; Return value:  Size  Location     Type
 18423 ;;                  3    6[BANK0 ] float 
 18424 ;; Registers used:
 18425 ;;		wreg, status,2, status,0, pclath, cstack
 18426 ;; Tracked objects:
 18427 ;;		On entry : 0/0
 18428 ;;		On exit  : 0/0
 18429 ;;		Unchanged: 0/0
 18430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18431 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18432 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18433 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18434 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18435 ;;Total ram usage:       16 bytes
 18436 ;; Hardware stack levels used:    1
 18437 ;; Hardware stack levels required when called:    4
 18438 ;; This function calls:
 18439 ;;		___ftpack
 18440 ;; This function is called by:
 18441 ;;		_getDimmerLights_PercentToValue
 18442 ;; This function uses a non-reentrant model
 18443 ;;
 18444                           
 18445                           
 18446                           ;psect for function ___ftmul
 18447  0E8E                     ___ftmul:	
 18448                           
 18449                           ;incstack = 0
 18450                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 18451  0E8E  0020               	movlb	0	; select bank0
 18452  0E8F  0826               	movf	___ftmul@f1,w
 18453  0E90  00AC               	movwf	??___ftmul
 18454  0E91  0827               	movf	___ftmul@f1+1,w
 18455  0E92  00AD               	movwf	??___ftmul+1
 18456  0E93  0828               	movf	___ftmul@f1+2,w
 18457  0E94  00AE               	movwf	??___ftmul+2
 18458  0E95  1003               	clrc
 18459  0E96  0D2D               	rlf	??___ftmul+1,w
 18460  0E97  0D2E               	rlf	??___ftmul+2,w
 18461  0E98  00AF               	movwf	??___ftmul+3
 18462  0E99  082F               	movf	??___ftmul+3,w
 18463  0E9A  00B0               	movwf	___ftmul@exp
 18464  0E9B  08B0               	movf	___ftmul@exp,f
 18465  0E9C  1D03               	skipz
 18466  0E9D  2EA5               	goto	l6875
 18467  0E9E  3000               	movlw	0
 18468  0E9F  00A6               	movwf	?___ftmul
 18469  0EA0  3000               	movlw	0
 18470  0EA1  00A7               	movwf	?___ftmul+1
 18471  0EA2  3000               	movlw	0
 18472  0EA3  00A8               	movwf	?___ftmul+2
 18473  0EA4  0008               	return
 18474  0EA5                     l6875:	
 18475  0EA5  0829               	movf	___ftmul@f2,w
 18476  0EA6  00AC               	movwf	??___ftmul
 18477  0EA7  082A               	movf	___ftmul@f2+1,w
 18478  0EA8  00AD               	movwf	??___ftmul+1
 18479  0EA9  082B               	movf	___ftmul@f2+2,w
 18480  0EAA  00AE               	movwf	??___ftmul+2
 18481  0EAB  1003               	clrc
 18482  0EAC  0D2D               	rlf	??___ftmul+1,w
 18483  0EAD  0D2E               	rlf	??___ftmul+2,w
 18484  0EAE  00AF               	movwf	??___ftmul+3
 18485  0EAF  082F               	movf	??___ftmul+3,w
 18486  0EB0  00B5               	movwf	___ftmul@sign
 18487  0EB1  08B5               	movf	___ftmul@sign,f
 18488  0EB2  1D03               	skipz
 18489  0EB3  2EBB               	goto	l6881
 18490  0EB4  3000               	movlw	0
 18491  0EB5  00A6               	movwf	?___ftmul
 18492  0EB6  3000               	movlw	0
 18493  0EB7  00A7               	movwf	?___ftmul+1
 18494  0EB8  3000               	movlw	0
 18495  0EB9  00A8               	movwf	?___ftmul+2
 18496  0EBA  0008               	return
 18497  0EBB                     l6881:	
 18498  0EBB  0835               	movf	___ftmul@sign,w
 18499  0EBC  3E7B               	addlw	123
 18500  0EBD  00AC               	movwf	??___ftmul
 18501  0EBE  082C               	movf	??___ftmul,w
 18502  0EBF  07B0               	addwf	___ftmul@exp,f
 18503  0EC0  0826               	movf	___ftmul@f1,w
 18504  0EC1  00AC               	movwf	??___ftmul
 18505  0EC2  0827               	movf	___ftmul@f1+1,w
 18506  0EC3  00AD               	movwf	??___ftmul+1
 18507  0EC4  0828               	movf	___ftmul@f1+2,w
 18508  0EC5  00AE               	movwf	??___ftmul+2
 18509  0EC6  3010               	movlw	16
 18510  0EC7                     u5895:	
 18511  0EC7  36AE               	lsrf	??___ftmul+2,f
 18512  0EC8  0CAD               	rrf	??___ftmul+1,f
 18513  0EC9  0CAC               	rrf	??___ftmul,f
 18514  0ECA  0B89               	decfsz	9,f
 18515  0ECB  2EC7               	goto	u5895
 18516  0ECC  082C               	movf	??___ftmul,w
 18517  0ECD  00AF               	movwf	??___ftmul+3
 18518  0ECE  082F               	movf	??___ftmul+3,w
 18519  0ECF  00B5               	movwf	___ftmul@sign
 18520  0ED0  0829               	movf	___ftmul@f2,w
 18521  0ED1  00AC               	movwf	??___ftmul
 18522  0ED2  082A               	movf	___ftmul@f2+1,w
 18523  0ED3  00AD               	movwf	??___ftmul+1
 18524  0ED4  082B               	movf	___ftmul@f2+2,w
 18525  0ED5  00AE               	movwf	??___ftmul+2
 18526  0ED6  3010               	movlw	16
 18527  0ED7                     u5905:	
 18528  0ED7  36AE               	lsrf	??___ftmul+2,f
 18529  0ED8  0CAD               	rrf	??___ftmul+1,f
 18530  0ED9  0CAC               	rrf	??___ftmul,f
 18531  0EDA  0B89               	decfsz	9,f
 18532  0EDB  2ED7               	goto	u5905
 18533  0EDC  082C               	movf	??___ftmul,w
 18534  0EDD  00AF               	movwf	??___ftmul+3
 18535  0EDE  082F               	movf	??___ftmul+3,w
 18536  0EDF  06B5               	xorwf	___ftmul@sign,f
 18537  0EE0  3080               	movlw	128
 18538  0EE1  00AC               	movwf	??___ftmul
 18539  0EE2  082C               	movf	??___ftmul,w
 18540  0EE3  05B5               	andwf	___ftmul@sign,f
 18541  0EE4  17A7               	bsf	___ftmul@f1+1,7
 18542  0EE5  17AA               	bsf	___ftmul@f2+1,7
 18543  0EE6  30FF               	movlw	255
 18544  0EE7  05A9               	andwf	___ftmul@f2,f
 18545  0EE8  30FF               	movlw	255
 18546  0EE9  05AA               	andwf	___ftmul@f2+1,f
 18547  0EEA  3000               	movlw	0
 18548  0EEB  05AB               	andwf	___ftmul@f2+2,f
 18549  0EEC  3000               	movlw	0
 18550  0EED  00B1               	movwf	___ftmul@f3_as_product
 18551  0EEE  3000               	movlw	0
 18552  0EEF  00B2               	movwf	___ftmul@f3_as_product+1
 18553  0EF0  3000               	movlw	0
 18554  0EF1  00B3               	movwf	___ftmul@f3_as_product+2
 18555  0EF2  3007               	movlw	7
 18556  0EF3  00AC               	movwf	??___ftmul
 18557  0EF4  082C               	movf	??___ftmul,w
 18558  0EF5  00B4               	movwf	___ftmul@cntr
 18559  0EF6                     l6893:	
 18560  0EF6  1C26               	btfss	___ftmul@f1,0
 18561  0EF7  2EFE               	goto	l6897
 18562  0EF8  0829               	movf	___ftmul@f2,w
 18563  0EF9  07B1               	addwf	___ftmul@f3_as_product,f
 18564  0EFA  082A               	movf	___ftmul@f2+1,w
 18565  0EFB  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 18566  0EFC  082B               	movf	___ftmul@f2+2,w
 18567  0EFD  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 18568  0EFE                     l6897:	
 18569  0EFE  3001               	movlw	1
 18570  0EFF                     u5925:	
 18571  0EFF  36A8               	lsrf	___ftmul@f1+2,f
 18572  0F00  0CA7               	rrf	___ftmul@f1+1,f
 18573  0F01  0CA6               	rrf	___ftmul@f1,f
 18574  0F02  0B89               	decfsz	9,f
 18575  0F03  2EFF               	goto	u5925
 18576  0F04  3001               	movlw	1
 18577  0F05                     u5935:	
 18578  0F05  35A9               	lslf	___ftmul@f2,f
 18579  0F06  0DAA               	rlf	___ftmul@f2+1,f
 18580  0F07  0DAB               	rlf	___ftmul@f2+2,f
 18581  0F08  0B89               	decfsz	9,f
 18582  0F09  2F05               	goto	u5935
 18583  0F0A  3001               	movlw	1
 18584  0F0B  02B4               	subwf	___ftmul@cntr,f
 18585  0F0C  1D03               	btfss	3,2
 18586  0F0D  2EF6               	goto	l6893
 18587  0F0E  3009               	movlw	9
 18588  0F0F  00AC               	movwf	??___ftmul
 18589  0F10  082C               	movf	??___ftmul,w
 18590  0F11  00B4               	movwf	___ftmul@cntr
 18591  0F12                     l6905:	
 18592  0F12  1C26               	btfss	___ftmul@f1,0
 18593  0F13  2F1A               	goto	l6909
 18594  0F14  0829               	movf	___ftmul@f2,w
 18595  0F15  07B1               	addwf	___ftmul@f3_as_product,f
 18596  0F16  082A               	movf	___ftmul@f2+1,w
 18597  0F17  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 18598  0F18  082B               	movf	___ftmul@f2+2,w
 18599  0F19  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 18600  0F1A                     l6909:	
 18601  0F1A  3001               	movlw	1
 18602  0F1B                     u5965:	
 18603  0F1B  36A8               	lsrf	___ftmul@f1+2,f
 18604  0F1C  0CA7               	rrf	___ftmul@f1+1,f
 18605  0F1D  0CA6               	rrf	___ftmul@f1,f
 18606  0F1E  0B89               	decfsz	9,f
 18607  0F1F  2F1B               	goto	u5965
 18608  0F20  3001               	movlw	1
 18609  0F21                     u5975:	
 18610  0F21  36B3               	lsrf	___ftmul@f3_as_product+2,f
 18611  0F22  0CB2               	rrf	___ftmul@f3_as_product+1,f
 18612  0F23  0CB1               	rrf	___ftmul@f3_as_product,f
 18613  0F24  0B89               	decfsz	9,f
 18614  0F25  2F21               	goto	u5975
 18615  0F26  3001               	movlw	1
 18616  0F27  02B4               	subwf	___ftmul@cntr,f
 18617  0F28  1D03               	btfss	3,2
 18618  0F29  2F12               	goto	l6905
 18619  0F2A  0831               	movf	___ftmul@f3_as_product,w
 18620  0F2B  00F2               	movwf	___ftpack@arg
 18621  0F2C  0832               	movf	___ftmul@f3_as_product+1,w
 18622  0F2D  00F3               	movwf	___ftpack@arg+1
 18623  0F2E  0833               	movf	___ftmul@f3_as_product+2,w
 18624  0F2F  00F4               	movwf	___ftpack@arg+2
 18625  0F30  0830               	movf	___ftmul@exp,w
 18626  0F31  00AC               	movwf	??___ftmul
 18627  0F32  082C               	movf	??___ftmul,w
 18628  0F33  00F5               	movwf	___ftpack@exp
 18629  0F34  0835               	movf	___ftmul@sign,w
 18630  0F35  00AD               	movwf	??___ftmul+1
 18631  0F36  082D               	movf	??___ftmul+1,w
 18632  0F37  00F6               	movwf	___ftpack@sign
 18633  0F38  3195  25AB         	fcall	___ftpack
 18634  0F3A  0872               	movf	?___ftpack,w
 18635  0F3B  0020               	movlb	0	; select bank0
 18636  0F3C  00A6               	movwf	?___ftmul
 18637  0F3D  0873               	movf	?___ftpack+1,w
 18638  0F3E  00A7               	movwf	?___ftmul+1
 18639  0F3F  0874               	movf	?___ftpack+2,w
 18640  0F40  00A8               	movwf	?___ftmul+2
 18641  0F41  0008               	return
 18642  0F42                     __end_of___ftmul:	
 18643                           
 18644                           	psect	text128
 18645  0D35                     __ptext128:	
 18646 ;; *************** function ___ftdiv *****************
 18647 ;; Defined at:
 18648 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 18649 ;; Parameters:    Size  Location     Type
 18650 ;;  f2              3    6[BANK0 ] float 
 18651 ;;  f1              3    9[BANK0 ] float 
 18652 ;; Auto vars:     Size  Location     Type
 18653 ;;  f3              3   17[BANK0 ] float 
 18654 ;;  sign            1   21[BANK0 ] unsigned char 
 18655 ;;  exp             1   20[BANK0 ] unsigned char 
 18656 ;;  cntr            1   16[BANK0 ] unsigned char 
 18657 ;; Return value:  Size  Location     Type
 18658 ;;                  3    6[BANK0 ] float 
 18659 ;; Registers used:
 18660 ;;		wreg, status,2, status,0, pclath, cstack
 18661 ;; Tracked objects:
 18662 ;;		On entry : 0/0
 18663 ;;		On exit  : 0/0
 18664 ;;		Unchanged: 0/0
 18665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18666 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18667 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18668 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18669 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18670 ;;Total ram usage:       16 bytes
 18671 ;; Hardware stack levels used:    1
 18672 ;; Hardware stack levels required when called:    4
 18673 ;; This function calls:
 18674 ;;		___ftpack
 18675 ;; This function is called by:
 18676 ;;		_getDimmerLights_PercentToValue
 18677 ;;		_getDimmerLights_ValueToPercent
 18678 ;; This function uses a non-reentrant model
 18679 ;;
 18680                           
 18681                           
 18682                           ;psect for function ___ftdiv
 18683  0D35                     ___ftdiv:	
 18684                           
 18685                           ;incstack = 0
 18686                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18687  0D35  0020               	movlb	0	; select bank0
 18688  0D36  0829               	movf	___ftdiv@f1,w
 18689  0D37  00AC               	movwf	??___ftdiv
 18690  0D38  082A               	movf	___ftdiv@f1+1,w
 18691  0D39  00AD               	movwf	??___ftdiv+1
 18692  0D3A  082B               	movf	___ftdiv@f1+2,w
 18693  0D3B  00AE               	movwf	??___ftdiv+2
 18694  0D3C  1003               	clrc
 18695  0D3D  0D2D               	rlf	??___ftdiv+1,w
 18696  0D3E  0D2E               	rlf	??___ftdiv+2,w
 18697  0D3F  00AF               	movwf	??___ftdiv+3
 18698  0D40  082F               	movf	??___ftdiv+3,w
 18699  0D41  00B4               	movwf	___ftdiv@exp
 18700  0D42  08B4               	movf	___ftdiv@exp,f
 18701  0D43  1D03               	skipz
 18702  0D44  2D4C               	goto	l6833
 18703  0D45  3000               	movlw	0
 18704  0D46  00A6               	movwf	?___ftdiv
 18705  0D47  3000               	movlw	0
 18706  0D48  00A7               	movwf	?___ftdiv+1
 18707  0D49  3000               	movlw	0
 18708  0D4A  00A8               	movwf	?___ftdiv+2
 18709  0D4B  0008               	return
 18710  0D4C                     l6833:	
 18711  0D4C  0826               	movf	___ftdiv@f2,w
 18712  0D4D  00AC               	movwf	??___ftdiv
 18713  0D4E  0827               	movf	___ftdiv@f2+1,w
 18714  0D4F  00AD               	movwf	??___ftdiv+1
 18715  0D50  0828               	movf	___ftdiv@f2+2,w
 18716  0D51  00AE               	movwf	??___ftdiv+2
 18717  0D52  1003               	clrc
 18718  0D53  0D2D               	rlf	??___ftdiv+1,w
 18719  0D54  0D2E               	rlf	??___ftdiv+2,w
 18720  0D55  00AF               	movwf	??___ftdiv+3
 18721  0D56  082F               	movf	??___ftdiv+3,w
 18722  0D57  00B5               	movwf	___ftdiv@sign
 18723  0D58  08B5               	movf	___ftdiv@sign,f
 18724  0D59  1D03               	skipz
 18725  0D5A  2D62               	goto	l6839
 18726  0D5B  3000               	movlw	0
 18727  0D5C  00A6               	movwf	?___ftdiv
 18728  0D5D  3000               	movlw	0
 18729  0D5E  00A7               	movwf	?___ftdiv+1
 18730  0D5F  3000               	movlw	0
 18731  0D60  00A8               	movwf	?___ftdiv+2
 18732  0D61  0008               	return
 18733  0D62                     l6839:	
 18734  0D62  3000               	movlw	0
 18735  0D63  00B1               	movwf	___ftdiv@f3
 18736  0D64  3000               	movlw	0
 18737  0D65  00B2               	movwf	___ftdiv@f3+1
 18738  0D66  3000               	movlw	0
 18739  0D67  00B3               	movwf	___ftdiv@f3+2
 18740  0D68  3089               	movlw	137
 18741  0D69  0735               	addwf	___ftdiv@sign,w
 18742  0D6A  00AC               	movwf	??___ftdiv
 18743  0D6B  082C               	movf	??___ftdiv,w
 18744  0D6C  02B4               	subwf	___ftdiv@exp,f
 18745  0D6D  0829               	movf	___ftdiv@f1,w
 18746  0D6E  00AC               	movwf	??___ftdiv
 18747  0D6F  082A               	movf	___ftdiv@f1+1,w
 18748  0D70  00AD               	movwf	??___ftdiv+1
 18749  0D71  082B               	movf	___ftdiv@f1+2,w
 18750  0D72  00AE               	movwf	??___ftdiv+2
 18751  0D73  3010               	movlw	16
 18752  0D74                     u5815:	
 18753  0D74  36AE               	lsrf	??___ftdiv+2,f
 18754  0D75  0CAD               	rrf	??___ftdiv+1,f
 18755  0D76  0CAC               	rrf	??___ftdiv,f
 18756  0D77  0B89               	decfsz	9,f
 18757  0D78  2D74               	goto	u5815
 18758  0D79  082C               	movf	??___ftdiv,w
 18759  0D7A  00AF               	movwf	??___ftdiv+3
 18760  0D7B  082F               	movf	??___ftdiv+3,w
 18761  0D7C  00B5               	movwf	___ftdiv@sign
 18762  0D7D  0826               	movf	___ftdiv@f2,w
 18763  0D7E  00AC               	movwf	??___ftdiv
 18764  0D7F  0827               	movf	___ftdiv@f2+1,w
 18765  0D80  00AD               	movwf	??___ftdiv+1
 18766  0D81  0828               	movf	___ftdiv@f2+2,w
 18767  0D82  00AE               	movwf	??___ftdiv+2
 18768  0D83  3010               	movlw	16
 18769  0D84                     u5825:	
 18770  0D84  36AE               	lsrf	??___ftdiv+2,f
 18771  0D85  0CAD               	rrf	??___ftdiv+1,f
 18772  0D86  0CAC               	rrf	??___ftdiv,f
 18773  0D87  0B89               	decfsz	9,f
 18774  0D88  2D84               	goto	u5825
 18775  0D89  082C               	movf	??___ftdiv,w
 18776  0D8A  00AF               	movwf	??___ftdiv+3
 18777  0D8B  082F               	movf	??___ftdiv+3,w
 18778  0D8C  06B5               	xorwf	___ftdiv@sign,f
 18779  0D8D  3080               	movlw	128
 18780  0D8E  00AC               	movwf	??___ftdiv
 18781  0D8F  082C               	movf	??___ftdiv,w
 18782  0D90  05B5               	andwf	___ftdiv@sign,f
 18783  0D91  17AA               	bsf	___ftdiv@f1+1,7
 18784  0D92  30FF               	movlw	255
 18785  0D93  05A9               	andwf	___ftdiv@f1,f
 18786  0D94  30FF               	movlw	255
 18787  0D95  05AA               	andwf	___ftdiv@f1+1,f
 18788  0D96  3000               	movlw	0
 18789  0D97  05AB               	andwf	___ftdiv@f1+2,f
 18790  0D98  17A7               	bsf	___ftdiv@f2+1,7
 18791  0D99  30FF               	movlw	255
 18792  0D9A  05A6               	andwf	___ftdiv@f2,f
 18793  0D9B  30FF               	movlw	255
 18794  0D9C  05A7               	andwf	___ftdiv@f2+1,f
 18795  0D9D  3000               	movlw	0
 18796  0D9E  05A8               	andwf	___ftdiv@f2+2,f
 18797  0D9F  3018               	movlw	24
 18798  0DA0  00AC               	movwf	??___ftdiv
 18799  0DA1  082C               	movf	??___ftdiv,w
 18800  0DA2  00B0               	movwf	___ftdiv@cntr
 18801  0DA3                     l6853:	
 18802  0DA3  3001               	movlw	1
 18803  0DA4                     u5835:	
 18804  0DA4  35B1               	lslf	___ftdiv@f3,f
 18805  0DA5  0DB2               	rlf	___ftdiv@f3+1,f
 18806  0DA6  0DB3               	rlf	___ftdiv@f3+2,f
 18807  0DA7  0B89               	decfsz	9,f
 18808  0DA8  2DA4               	goto	u5835
 18809  0DA9  0828               	movf	___ftdiv@f2+2,w
 18810  0DAA  022B               	subwf	___ftdiv@f1+2,w
 18811  0DAB  1D03               	skipz
 18812  0DAC  2DB3               	goto	u5845
 18813  0DAD  0827               	movf	___ftdiv@f2+1,w
 18814  0DAE  022A               	subwf	___ftdiv@f1+1,w
 18815  0DAF  1D03               	skipz
 18816  0DB0  2DB3               	goto	u5845
 18817  0DB1  0826               	movf	___ftdiv@f2,w
 18818  0DB2  0229               	subwf	___ftdiv@f1,w
 18819  0DB3                     u5845:	
 18820  0DB3  1C03               	skipc
 18821  0DB4  2DBC               	goto	l6861
 18822  0DB5  0826               	movf	___ftdiv@f2,w
 18823  0DB6  02A9               	subwf	___ftdiv@f1,f
 18824  0DB7  0827               	movf	___ftdiv@f2+1,w
 18825  0DB8  3BAA               	subwfb	___ftdiv@f1+1,f
 18826  0DB9  0828               	movf	___ftdiv@f2+2,w
 18827  0DBA  3BAB               	subwfb	___ftdiv@f1+2,f
 18828  0DBB  1431               	bsf	___ftdiv@f3,0
 18829  0DBC                     l6861:	
 18830  0DBC  3001               	movlw	1
 18831  0DBD                     u5855:	
 18832  0DBD  35A9               	lslf	___ftdiv@f1,f
 18833  0DBE  0DAA               	rlf	___ftdiv@f1+1,f
 18834  0DBF  0DAB               	rlf	___ftdiv@f1+2,f
 18835  0DC0  0B89               	decfsz	9,f
 18836  0DC1  2DBD               	goto	u5855
 18837  0DC2  3001               	movlw	1
 18838  0DC3  02B0               	subwf	___ftdiv@cntr,f
 18839  0DC4  1D03               	btfss	3,2
 18840  0DC5  2DA3               	goto	l6853
 18841  0DC6  0831               	movf	___ftdiv@f3,w
 18842  0DC7  00F2               	movwf	___ftpack@arg
 18843  0DC8  0832               	movf	___ftdiv@f3+1,w
 18844  0DC9  00F3               	movwf	___ftpack@arg+1
 18845  0DCA  0833               	movf	___ftdiv@f3+2,w
 18846  0DCB  00F4               	movwf	___ftpack@arg+2
 18847  0DCC  0834               	movf	___ftdiv@exp,w
 18848  0DCD  00AC               	movwf	??___ftdiv
 18849  0DCE  082C               	movf	??___ftdiv,w
 18850  0DCF  00F5               	movwf	___ftpack@exp
 18851  0DD0  0835               	movf	___ftdiv@sign,w
 18852  0DD1  00AD               	movwf	??___ftdiv+1
 18853  0DD2  082D               	movf	??___ftdiv+1,w
 18854  0DD3  00F6               	movwf	___ftpack@sign
 18855  0DD4  3195  25AB         	fcall	___ftpack
 18856  0DD6  0872               	movf	?___ftpack,w
 18857  0DD7  0020               	movlb	0	; select bank0
 18858  0DD8  00A6               	movwf	?___ftdiv
 18859  0DD9  0873               	movf	?___ftpack+1,w
 18860  0DDA  00A7               	movwf	?___ftdiv+1
 18861  0DDB  0874               	movf	?___ftpack+2,w
 18862  0DDC  00A8               	movwf	?___ftdiv+2
 18863  0DDD  0008               	return
 18864  0DDE                     __end_of___ftdiv:	
 18865                           
 18866                           	psect	text129
 18867  0364                     __ptext129:	
 18868 ;; *************** function ___ftadd *****************
 18869 ;; Defined at:
 18870 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 18871 ;; Parameters:    Size  Location     Type
 18872 ;;  f1              3   25[BANK0 ] float 
 18873 ;;  f2              3   28[BANK0 ] float 
 18874 ;; Auto vars:     Size  Location     Type
 18875 ;;  exp1            1   37[BANK0 ] unsigned char 
 18876 ;;  exp2            1   36[BANK0 ] unsigned char 
 18877 ;;  sign            1   35[BANK0 ] unsigned char 
 18878 ;; Return value:  Size  Location     Type
 18879 ;;                  3   25[BANK0 ] float 
 18880 ;; Registers used:
 18881 ;;		wreg, status,2, status,0, pclath, cstack
 18882 ;; Tracked objects:
 18883 ;;		On entry : 0/0
 18884 ;;		On exit  : 0/0
 18885 ;;		Unchanged: 0/0
 18886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18887 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18888 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18889 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18890 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18891 ;;Total ram usage:       13 bytes
 18892 ;; Hardware stack levels used:    1
 18893 ;; Hardware stack levels required when called:    4
 18894 ;; This function calls:
 18895 ;;		___ftpack
 18896 ;; This function is called by:
 18897 ;;		_getDimmerLights_PercentToValue
 18898 ;;		_getDimmerLights_ValueToPercent
 18899 ;; This function uses a non-reentrant model
 18900 ;;
 18901                           
 18902                           
 18903                           ;psect for function ___ftadd
 18904  0364                     ___ftadd:	
 18905                           
 18906                           ;incstack = 0
 18907                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 18908  0364  0020               	movlb	0	; select bank0
 18909  0365  0839               	movf	___ftadd@f1,w
 18910  0366  00BF               	movwf	??___ftadd
 18911  0367  083A               	movf	___ftadd@f1+1,w
 18912  0368  00C0               	movwf	??___ftadd+1
 18913  0369  083B               	movf	___ftadd@f1+2,w
 18914  036A  00C1               	movwf	??___ftadd+2
 18915  036B  1003               	clrc
 18916  036C  0D40               	rlf	??___ftadd+1,w
 18917  036D  0D41               	rlf	??___ftadd+2,w
 18918  036E  00C2               	movwf	??___ftadd+3
 18919  036F  0842               	movf	??___ftadd+3,w
 18920  0370  00C5               	movwf	___ftadd@exp1
 18921  0371  083C               	movf	___ftadd@f2,w
 18922  0372  00BF               	movwf	??___ftadd
 18923  0373  083D               	movf	___ftadd@f2+1,w
 18924  0374  00C0               	movwf	??___ftadd+1
 18925  0375  083E               	movf	___ftadd@f2+2,w
 18926  0376  00C1               	movwf	??___ftadd+2
 18927  0377  1003               	clrc
 18928  0378  0D40               	rlf	??___ftadd+1,w
 18929  0379  0D41               	rlf	??___ftadd+2,w
 18930  037A  00C2               	movwf	??___ftadd+3
 18931  037B  0842               	movf	??___ftadd+3,w
 18932  037C  00C4               	movwf	___ftadd@exp2
 18933  037D  0845               	movf	___ftadd@exp1,w
 18934  037E  1903               	btfsc	3,2
 18935  037F  2B8C               	goto	l6763
 18936  0380  0844               	movf	___ftadd@exp2,w
 18937  0381  0245               	subwf	___ftadd@exp1,w
 18938  0382  1803               	skipnc
 18939  0383  2B93               	goto	l6767
 18940  0384  0345               	decf	___ftadd@exp1,w
 18941  0385  3AFF               	xorlw	255
 18942  0386  0744               	addwf	___ftadd@exp2,w
 18943  0387  00BF               	movwf	??___ftadd
 18944  0388  3019               	movlw	25
 18945  0389  023F               	subwf	??___ftadd,w
 18946  038A  1C03               	skipc
 18947  038B  2B93               	goto	l6767
 18948  038C                     l6763:	
 18949  038C  083C               	movf	___ftadd@f2,w
 18950  038D  00B9               	movwf	?___ftadd
 18951  038E  083D               	movf	___ftadd@f2+1,w
 18952  038F  00BA               	movwf	?___ftadd+1
 18953  0390  083E               	movf	___ftadd@f2+2,w
 18954  0391  00BB               	movwf	?___ftadd+2
 18955  0392  0008               	return
 18956  0393                     l6767:	
 18957  0393  0844               	movf	___ftadd@exp2,w
 18958  0394  1903               	btfsc	3,2
 18959  0395  0008               	return
 18960  0396  0845               	movf	___ftadd@exp1,w
 18961  0397  0244               	subwf	___ftadd@exp2,w
 18962  0398  1803               	skipnc
 18963  0399  2BA2               	goto	l6773
 18964  039A  0344               	decf	___ftadd@exp2,w
 18965  039B  3AFF               	xorlw	255
 18966  039C  0745               	addwf	___ftadd@exp1,w
 18967  039D  00BF               	movwf	??___ftadd
 18968  039E  3019               	movlw	25
 18969  039F  023F               	subwf	??___ftadd,w
 18970  03A0  1803               	btfsc	3,0
 18971  03A1  0008               	return
 18972  03A2                     l6773:	
 18973  03A2  3006               	movlw	6
 18974  03A3  00BF               	movwf	??___ftadd
 18975  03A4  083F               	movf	??___ftadd,w
 18976  03A5  00C3               	movwf	___ftadd@sign
 18977  03A6  1BBB               	btfsc	___ftadd@f1+2,7
 18978  03A7  17C3               	bsf	___ftadd@sign,7
 18979  03A8  1BBE               	btfsc	___ftadd@f2+2,7
 18980  03A9  1743               	bsf	___ftadd@sign,6
 18981  03AA  17BA               	bsf	___ftadd@f1+1,7
 18982  03AB  30FF               	movlw	255
 18983  03AC  05B9               	andwf	___ftadd@f1,f
 18984  03AD  30FF               	movlw	255
 18985  03AE  05BA               	andwf	___ftadd@f1+1,f
 18986  03AF  3000               	movlw	0
 18987  03B0  05BB               	andwf	___ftadd@f1+2,f
 18988  03B1  17BD               	bsf	___ftadd@f2+1,7
 18989  03B2  30FF               	movlw	255
 18990  03B3  05BC               	andwf	___ftadd@f2,f
 18991  03B4  30FF               	movlw	255
 18992  03B5  05BD               	andwf	___ftadd@f2+1,f
 18993  03B6  3000               	movlw	0
 18994  03B7  05BE               	andwf	___ftadd@f2+2,f
 18995  03B8  0844               	movf	___ftadd@exp2,w
 18996  03B9  0245               	subwf	___ftadd@exp1,w
 18997  03BA  1803               	skipnc
 18998  03BB  2BDE               	goto	l6795
 18999  03BC                     l6785:	
 19000  03BC  3001               	movlw	1
 19001  03BD                     u5655:	
 19002  03BD  35BC               	lslf	___ftadd@f2,f
 19003  03BE  0DBD               	rlf	___ftadd@f2+1,f
 19004  03BF  0DBE               	rlf	___ftadd@f2+2,f
 19005  03C0  0B89               	decfsz	9,f
 19006  03C1  2BBD               	goto	u5655
 19007  03C2  3001               	movlw	1
 19008  03C3  02C4               	subwf	___ftadd@exp2,f
 19009  03C4  0844               	movf	___ftadd@exp2,w
 19010  03C5  0645               	xorwf	___ftadd@exp1,w
 19011  03C6  1903               	skipnz
 19012  03C7  2BD9               	goto	l6793
 19013  03C8  3001               	movlw	1
 19014  03C9  02C3               	subwf	___ftadd@sign,f
 19015  03CA  0843               	movf	___ftadd@sign,w
 19016  03CB  3907               	andlw	7
 19017  03CC  1903               	btfsc	3,2
 19018  03CD  2BD9               	goto	l6793
 19019  03CE  2BBC               	goto	l6785
 19020  03CF                     l6791:	
 19021  03CF  3001               	movlw	1
 19022  03D0                     u5685:	
 19023  03D0  36BB               	lsrf	___ftadd@f1+2,f
 19024  03D1  0CBA               	rrf	___ftadd@f1+1,f
 19025  03D2  0CB9               	rrf	___ftadd@f1,f
 19026  03D3  0B89               	decfsz	9,f
 19027  03D4  2BD0               	goto	u5685
 19028  03D5  3001               	movlw	1
 19029  03D6  00BF               	movwf	??___ftadd
 19030  03D7  083F               	movf	??___ftadd,w
 19031  03D8  07C5               	addwf	___ftadd@exp1,f
 19032  03D9                     l6793:	
 19033  03D9  0845               	movf	___ftadd@exp1,w
 19034  03DA  0644               	xorwf	___ftadd@exp2,w
 19035  03DB  1903               	btfsc	3,2
 19036  03DC  2C03               	goto	l3320
 19037  03DD  2BCF               	goto	l6791
 19038  03DE                     l6795:	
 19039  03DE  0845               	movf	___ftadd@exp1,w
 19040  03DF  0244               	subwf	___ftadd@exp2,w
 19041  03E0  1803               	skipnc
 19042  03E1  2C03               	goto	l3320
 19043  03E2                     l6797:	
 19044  03E2  3001               	movlw	1
 19045  03E3                     u5715:	
 19046  03E3  35B9               	lslf	___ftadd@f1,f
 19047  03E4  0DBA               	rlf	___ftadd@f1+1,f
 19048  03E5  0DBB               	rlf	___ftadd@f1+2,f
 19049  03E6  0B89               	decfsz	9,f
 19050  03E7  2BE3               	goto	u5715
 19051  03E8  3001               	movlw	1
 19052  03E9  02C5               	subwf	___ftadd@exp1,f
 19053  03EA  0844               	movf	___ftadd@exp2,w
 19054  03EB  0645               	xorwf	___ftadd@exp1,w
 19055  03EC  1903               	skipnz
 19056  03ED  2BFF               	goto	l6805
 19057  03EE  3001               	movlw	1
 19058  03EF  02C3               	subwf	___ftadd@sign,f
 19059  03F0  0843               	movf	___ftadd@sign,w
 19060  03F1  3907               	andlw	7
 19061  03F2  1903               	btfsc	3,2
 19062  03F3  2BFF               	goto	l6805
 19063  03F4  2BE2               	goto	l6797
 19064  03F5                     l6803:	
 19065  03F5  3001               	movlw	1
 19066  03F6                     u5745:	
 19067  03F6  36BE               	lsrf	___ftadd@f2+2,f
 19068  03F7  0CBD               	rrf	___ftadd@f2+1,f
 19069  03F8  0CBC               	rrf	___ftadd@f2,f
 19070  03F9  0B89               	decfsz	9,f
 19071  03FA  2BF6               	goto	u5745
 19072  03FB  3001               	movlw	1
 19073  03FC  00BF               	movwf	??___ftadd
 19074  03FD  083F               	movf	??___ftadd,w
 19075  03FE  07C4               	addwf	___ftadd@exp2,f
 19076  03FF                     l6805:	
 19077  03FF  0845               	movf	___ftadd@exp1,w
 19078  0400  0644               	xorwf	___ftadd@exp2,w
 19079  0401  1D03               	skipz
 19080  0402  2BF5               	goto	l6803
 19081  0403                     l3320:	
 19082  0403  1FC3               	btfss	___ftadd@sign,7
 19083  0404  2C15               	goto	l6809
 19084  0405  30FF               	movlw	255
 19085  0406  06B9               	xorwf	___ftadd@f1,f
 19086  0407  30FF               	movlw	255
 19087  0408  06BA               	xorwf	___ftadd@f1+1,f
 19088  0409  30FF               	movlw	255
 19089  040A  06BB               	xorwf	___ftadd@f1+2,f
 19090  040B  3001               	movlw	1
 19091  040C  07B9               	addwf	___ftadd@f1,f
 19092  040D  3000               	movlw	0
 19093  040E  1803               	skipnc
 19094  040F  3001               	movlw	1
 19095  0410  07BA               	addwf	___ftadd@f1+1,f
 19096  0411  3000               	movlw	0
 19097  0412  1803               	skipnc
 19098  0413  3001               	movlw	1
 19099  0414  07BB               	addwf	___ftadd@f1+2,f
 19100  0415                     l6809:	
 19101  0415  1F43               	btfss	___ftadd@sign,6
 19102  0416  2C27               	goto	l6813
 19103  0417  30FF               	movlw	255
 19104  0418  06BC               	xorwf	___ftadd@f2,f
 19105  0419  30FF               	movlw	255
 19106  041A  06BD               	xorwf	___ftadd@f2+1,f
 19107  041B  30FF               	movlw	255
 19108  041C  06BE               	xorwf	___ftadd@f2+2,f
 19109  041D  3001               	movlw	1
 19110  041E  07BC               	addwf	___ftadd@f2,f
 19111  041F  3000               	movlw	0
 19112  0420  1803               	skipnc
 19113  0421  3001               	movlw	1
 19114  0422  07BD               	addwf	___ftadd@f2+1,f
 19115  0423  3000               	movlw	0
 19116  0424  1803               	skipnc
 19117  0425  3001               	movlw	1
 19118  0426  07BE               	addwf	___ftadd@f2+2,f
 19119  0427                     l6813:	
 19120  0427  01C3               	clrf	___ftadd@sign
 19121  0428  0839               	movf	___ftadd@f1,w
 19122  0429  07BC               	addwf	___ftadd@f2,f
 19123  042A  083A               	movf	___ftadd@f1+1,w
 19124  042B  3DBD               	addwfc	___ftadd@f2+1,f
 19125  042C  083B               	movf	___ftadd@f1+2,w
 19126  042D  3DBE               	addwfc	___ftadd@f2+2,f
 19127  042E  1FBE               	btfss	___ftadd@f2+2,7
 19128  042F  2C42               	goto	l6823
 19129  0430  30FF               	movlw	255
 19130  0431  06BC               	xorwf	___ftadd@f2,f
 19131  0432  30FF               	movlw	255
 19132  0433  06BD               	xorwf	___ftadd@f2+1,f
 19133  0434  30FF               	movlw	255
 19134  0435  06BE               	xorwf	___ftadd@f2+2,f
 19135  0436  3001               	movlw	1
 19136  0437  07BC               	addwf	___ftadd@f2,f
 19137  0438  3000               	movlw	0
 19138  0439  1803               	skipnc
 19139  043A  3001               	movlw	1
 19140  043B  07BD               	addwf	___ftadd@f2+1,f
 19141  043C  3000               	movlw	0
 19142  043D  1803               	skipnc
 19143  043E  3001               	movlw	1
 19144  043F  07BE               	addwf	___ftadd@f2+2,f
 19145  0440  01C3               	clrf	___ftadd@sign
 19146  0441  0AC3               	incf	___ftadd@sign,f
 19147  0442                     l6823:	
 19148  0442  083C               	movf	___ftadd@f2,w
 19149  0443  00F2               	movwf	___ftpack@arg
 19150  0444  083D               	movf	___ftadd@f2+1,w
 19151  0445  00F3               	movwf	___ftpack@arg+1
 19152  0446  083E               	movf	___ftadd@f2+2,w
 19153  0447  00F4               	movwf	___ftpack@arg+2
 19154  0448  0845               	movf	___ftadd@exp1,w
 19155  0449  00BF               	movwf	??___ftadd
 19156  044A  083F               	movf	??___ftadd,w
 19157  044B  00F5               	movwf	___ftpack@exp
 19158  044C  0843               	movf	___ftadd@sign,w
 19159  044D  00C0               	movwf	??___ftadd+1
 19160  044E  0840               	movf	??___ftadd+1,w
 19161  044F  00F6               	movwf	___ftpack@sign
 19162  0450  3195  25AB         	fcall	___ftpack
 19163  0452  0872               	movf	?___ftpack,w
 19164  0453  0020               	movlb	0	; select bank0
 19165  0454  00B9               	movwf	?___ftadd
 19166  0455  0873               	movf	?___ftpack+1,w
 19167  0456  00BA               	movwf	?___ftadd+1
 19168  0457  0874               	movf	?___ftpack+2,w
 19169  0458  00BB               	movwf	?___ftadd+2
 19170  0459  0008               	return
 19171  045A                     __end_of___ftadd:	
 19172                           
 19173                           	psect	text130
 19174  1CE5                     __ptext130:	
 19175 ;; *************** function ___awtoft *****************
 19176 ;; Defined at:
 19177 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 19178 ;; Parameters:    Size  Location     Type
 19179 ;;  c               2    0[BANK0 ] int 
 19180 ;; Auto vars:     Size  Location     Type
 19181 ;;  sign            1    5[BANK0 ] unsigned char 
 19182 ;; Return value:  Size  Location     Type
 19183 ;;                  3    0[BANK0 ] float 
 19184 ;; Registers used:
 19185 ;;		wreg, status,2, status,0, pclath, cstack
 19186 ;; Tracked objects:
 19187 ;;		On entry : 0/0
 19188 ;;		On exit  : 0/0
 19189 ;;		Unchanged: 0/0
 19190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19191 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19193 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19194 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19195 ;;Total ram usage:        6 bytes
 19196 ;; Hardware stack levels used:    1
 19197 ;; Hardware stack levels required when called:    4
 19198 ;; This function calls:
 19199 ;;		___ftpack
 19200 ;; This function is called by:
 19201 ;;		_getDimmerLights_PercentToValue
 19202 ;;		_getDimmerLights_ValueToPercent
 19203 ;; This function uses a non-reentrant model
 19204 ;;
 19205                           
 19206                           
 19207                           ;psect for function ___awtoft
 19208  1CE5                     ___awtoft:	
 19209                           
 19210                           ;incstack = 0
 19211                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 19212  1CE5  0020               	movlb	0	; select bank0
 19213  1CE6  01A5               	clrf	___awtoft@sign
 19214  1CE7  1FA1               	btfss	___awtoft@c+1,7
 19215  1CE8  2CF0               	goto	l9747
 19216  1CE9  09A0               	comf	___awtoft@c,f
 19217  1CEA  09A1               	comf	___awtoft@c+1,f
 19218  1CEB  0AA0               	incf	___awtoft@c,f
 19219  1CEC  1903               	skipnz
 19220  1CED  0AA1               	incf	___awtoft@c+1,f
 19221  1CEE  01A5               	clrf	___awtoft@sign
 19222  1CEF  0AA5               	incf	___awtoft@sign,f
 19223  1CF0                     l9747:	
 19224  1CF0  0820               	movf	___awtoft@c,w
 19225  1CF1  00F2               	movwf	___ftpack@arg
 19226  1CF2  0821               	movf	___awtoft@c+1,w
 19227  1CF3  00F3               	movwf	___ftpack@arg+1
 19228  1CF4  01F4               	clrf	___ftpack@arg+2
 19229  1CF5  308E               	movlw	142
 19230  1CF6  00A3               	movwf	??___awtoft
 19231  1CF7  0823               	movf	??___awtoft,w
 19232  1CF8  00F5               	movwf	___ftpack@exp
 19233  1CF9  0825               	movf	___awtoft@sign,w
 19234  1CFA  00A4               	movwf	??___awtoft+1
 19235  1CFB  0824               	movf	??___awtoft+1,w
 19236  1CFC  00F6               	movwf	___ftpack@sign
 19237  1CFD  3195  25AB         	fcall	___ftpack
 19238  1CFF  0872               	movf	?___ftpack,w
 19239  1D00  0020               	movlb	0	; select bank0
 19240  1D01  00A0               	movwf	?___awtoft
 19241  1D02  0873               	movf	?___ftpack+1,w
 19242  1D03  00A1               	movwf	?___awtoft+1
 19243  1D04  0874               	movf	?___ftpack+2,w
 19244  1D05  00A2               	movwf	?___awtoft+2
 19245  1D06  0008               	return
 19246  1D07                     __end_of___awtoft:	
 19247                           
 19248                           	psect	text131
 19249  15AB                     __ptext131:	
 19250 ;; *************** function ___ftpack *****************
 19251 ;; Defined at:
 19252 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 19253 ;; Parameters:    Size  Location     Type
 19254 ;;  arg             3    2[COMMON] unsigned um
 19255 ;;  exp             1    5[COMMON] unsigned char 
 19256 ;;  sign            1    6[COMMON] unsigned char 
 19257 ;; Auto vars:     Size  Location     Type
 19258 ;;		None
 19259 ;; Return value:  Size  Location     Type
 19260 ;;                  3    2[COMMON] float 
 19261 ;; Registers used:
 19262 ;;		wreg, status,2, status,0
 19263 ;; Tracked objects:
 19264 ;;		On entry : 0/0
 19265 ;;		On exit  : 0/0
 19266 ;;		Unchanged: 0/0
 19267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19268 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19270 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19271 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19272 ;;Total ram usage:        8 bytes
 19273 ;; Hardware stack levels used:    1
 19274 ;; Hardware stack levels required when called:    3
 19275 ;; This function calls:
 19276 ;;		Nothing
 19277 ;; This function is called by:
 19278 ;;		___awtoft
 19279 ;;		___ftadd
 19280 ;;		___ftdiv
 19281 ;;		___ftmul
 19282 ;; This function uses a non-reentrant model
 19283 ;;
 19284                           
 19285                           
 19286                           ;psect for function ___ftpack
 19287  15AB                     ___ftpack:	
 19288                           
 19289                           ;incstack = 0
 19290                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 19291  15AB  0875               	movf	___ftpack@exp,w
 19292  15AC  1903               	btfsc	3,2
 19293  15AD  2DB3               	goto	l6597
 19294  15AE  0874               	movf	___ftpack@arg+2,w
 19295  15AF  0473               	iorwf	___ftpack@arg+1,w
 19296  15B0  0472               	iorwf	___ftpack@arg,w
 19297  15B1  1D03               	skipz
 19298  15B2  2DC4               	goto	l6603
 19299  15B3                     l6597:	
 19300  15B3  3000               	movlw	0
 19301  15B4  00F2               	movwf	?___ftpack
 19302  15B5  3000               	movlw	0
 19303  15B6  00F3               	movwf	?___ftpack+1
 19304  15B7  3000               	movlw	0
 19305  15B8  00F4               	movwf	?___ftpack+2
 19306  15B9  0008               	return
 19307  15BA                     l6601:	
 19308  15BA  3001               	movlw	1
 19309  15BB  00F7               	movwf	??___ftpack
 19310  15BC  0877               	movf	??___ftpack,w
 19311  15BD  07F5               	addwf	___ftpack@exp,f
 19312  15BE  3001               	movlw	1
 19313  15BF                     u5245:	
 19314  15BF  36F4               	lsrf	___ftpack@arg+2,f
 19315  15C0  0CF3               	rrf	___ftpack@arg+1,f
 19316  15C1  0CF2               	rrf	___ftpack@arg,f
 19317  15C2  0B89               	decfsz	9,f
 19318  15C3  2DBF               	goto	u5245
 19319  15C4                     l6603:	
 19320  15C4  30FE               	movlw	254
 19321  15C5  0574               	andwf	___ftpack@arg+2,w
 19322  15C6  1903               	btfsc	3,2
 19323  15C7  2DDD               	goto	l3291
 19324  15C8  2DBA               	goto	l6601
 19325  15C9                     l6605:	
 19326  15C9  3001               	movlw	1
 19327  15CA  00F7               	movwf	??___ftpack
 19328  15CB  0877               	movf	??___ftpack,w
 19329  15CC  07F5               	addwf	___ftpack@exp,f
 19330  15CD  3001               	movlw	1
 19331  15CE  07F2               	addwf	___ftpack@arg,f
 19332  15CF  3000               	movlw	0
 19333  15D0  1803               	skipnc
 19334  15D1  3001               	movlw	1
 19335  15D2  07F3               	addwf	___ftpack@arg+1,f
 19336  15D3  3000               	movlw	0
 19337  15D4  1803               	skipnc
 19338  15D5  3001               	movlw	1
 19339  15D6  07F4               	addwf	___ftpack@arg+2,f
 19340  15D7  3001               	movlw	1
 19341  15D8                     u5265:	
 19342  15D8  36F4               	lsrf	___ftpack@arg+2,f
 19343  15D9  0CF3               	rrf	___ftpack@arg+1,f
 19344  15DA  0CF2               	rrf	___ftpack@arg,f
 19345  15DB  0B89               	decfsz	9,f
 19346  15DC  2DD8               	goto	u5265
 19347  15DD                     l3291:	
 19348  15DD  30FF               	movlw	255
 19349  15DE  0574               	andwf	___ftpack@arg+2,w
 19350  15DF  1903               	btfsc	3,2
 19351  15E0  2DEA               	goto	l6613
 19352  15E1  2DC9               	goto	l6605
 19353  15E2                     l6611:	
 19354  15E2  3001               	movlw	1
 19355  15E3  02F5               	subwf	___ftpack@exp,f
 19356  15E4  3001               	movlw	1
 19357  15E5                     u5285:	
 19358  15E5  35F2               	lslf	___ftpack@arg,f
 19359  15E6  0DF3               	rlf	___ftpack@arg+1,f
 19360  15E7  0DF4               	rlf	___ftpack@arg+2,f
 19361  15E8  0B89               	decfsz	9,f
 19362  15E9  2DE5               	goto	u5285
 19363  15EA                     l6613:	
 19364  15EA  1FF3               	btfss	___ftpack@arg+1,7
 19365  15EB  2DE2               	goto	l6611
 19366  15EC  1875               	btfsc	___ftpack@exp,0
 19367  15ED  2DF4               	goto	l3297
 19368  15EE  30FF               	movlw	255
 19369  15EF  05F2               	andwf	___ftpack@arg,f
 19370  15F0  307F               	movlw	127
 19371  15F1  05F3               	andwf	___ftpack@arg+1,f
 19372  15F2  30FF               	movlw	255
 19373  15F3  05F4               	andwf	___ftpack@arg+2,f
 19374  15F4                     l3297:	
 19375  15F4  1003               	clrc
 19376  15F5  0CF5               	rrf	___ftpack@exp,f
 19377  15F6  0875               	movf	___ftpack@exp,w
 19378  15F7  00F7               	movwf	??___ftpack
 19379  15F8  01F8               	clrf	??___ftpack+1
 19380  15F9  01F9               	clrf	??___ftpack+2
 19381  15FA  3010               	movlw	16
 19382  15FB                     u5315:	
 19383  15FB  35F7               	lslf	??___ftpack,f
 19384  15FC  0DF8               	rlf	??___ftpack+1,f
 19385  15FD  0DF9               	rlf	??___ftpack+2,f
 19386  15FE  0B89               	decfsz	9,f
 19387  15FF  2DFB               	goto	u5315
 19388  1600  0877               	movf	??___ftpack,w
 19389  1601  04F2               	iorwf	___ftpack@arg,f
 19390  1602  0878               	movf	??___ftpack+1,w
 19391  1603  04F3               	iorwf	___ftpack@arg+1,f
 19392  1604  0879               	movf	??___ftpack+2,w
 19393  1605  04F4               	iorwf	___ftpack@arg+2,f
 19394  1606  0876               	movf	___ftpack@sign,w
 19395  1607  1903               	btfsc	3,2
 19396  1608  0008               	return
 19397  1609  17F4               	bsf	___ftpack@arg+2,7
 19398  160A  0008               	return
 19399  160B                     __end_of___ftpack:	
 19400                           
 19401                           	psect	text132
 19402  1923                     __ptext132:	
 19403 ;; *************** function _Division *****************
 19404 ;; Defined at:
 19405 ;;		line 1509 in file "../src/Dimmer_B1.c"
 19406 ;; Parameters:    Size  Location     Type
 19407 ;;  value           1    wreg     unsigned char 
 19408 ;;  num             1    7[COMMON] unsigned char 
 19409 ;; Auto vars:     Size  Location     Type
 19410 ;;  value           1    0[BANK0 ] unsigned char 
 19411 ;;  result          1    1[BANK0 ] unsigned char 
 19412 ;; Return value:  Size  Location     Type
 19413 ;;                  1    wreg      unsigned char 
 19414 ;; Registers used:
 19415 ;;		wreg, status,2, status,0, pclath, cstack
 19416 ;; Tracked objects:
 19417 ;;		On entry : 0/0
 19418 ;;		On exit  : 0/0
 19419 ;;		Unchanged: 0/0
 19420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19421 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19422 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19423 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19424 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19425 ;;Total ram usage:        5 bytes
 19426 ;; Hardware stack levels used:    1
 19427 ;; Hardware stack levels required when called:    4
 19428 ;; This function calls:
 19429 ;;		___lbdiv
 19430 ;; This function is called by:
 19431 ;;		_DimmerIntr_Initialization
 19432 ;;		_DimmerIntr_ValueCalculate
 19433 ;; This function uses a non-reentrant model
 19434 ;;
 19435                           
 19436                           
 19437                           ;psect for function _Division
 19438  1923                     _Division:	
 19439                           
 19440                           ;incstack = 0
 19441                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19442                           ;Division@value stored from wreg
 19443  1923  0020               	movlb	0	; select bank0
 19444  1924  00A0               	movwf	Division@value
 19445                           
 19446                           ;Dimmer_B1.c: 1510: char result = (char) (value / num);
 19447  1925  0877               	movf	Division@num,w
 19448  1926  00F8               	movwf	??_Division
 19449  1927  0878               	movf	??_Division,w
 19450  1928  00F2               	movwf	___lbdiv@divisor
 19451  1929  0820               	movf	Division@value,w
 19452  192A  319C  24A2         	fcall	___lbdiv
 19453  192C  00F9               	movwf	??_Division+1
 19454  192D  0879               	movf	??_Division+1,w
 19455  192E  0020               	movlb	0	; select bank0
 19456  192F  00A1               	movwf	Division@result
 19457                           
 19458                           ;Dimmer_B1.c: 1511: return result;
 19459  1930  0821               	movf	Division@result,w
 19460  1931  0008               	return
 19461  1932                     __end_of_Division:	
 19462                           
 19463                           	psect	text133
 19464  1CA2                     __ptext133:	
 19465 ;; *************** function ___lbdiv *****************
 19466 ;; Defined at:
 19467 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19468 ;; Parameters:    Size  Location     Type
 19469 ;;  dividend        1    wreg     unsigned char 
 19470 ;;  divisor         1    2[COMMON] unsigned char 
 19471 ;; Auto vars:     Size  Location     Type
 19472 ;;  dividend        1    4[COMMON] unsigned char 
 19473 ;;  quotient        1    6[COMMON] unsigned char 
 19474 ;;  counter         1    5[COMMON] unsigned char 
 19475 ;; Return value:  Size  Location     Type
 19476 ;;                  1    wreg      unsigned char 
 19477 ;; Registers used:
 19478 ;;		wreg, status,2, status,0
 19479 ;; Tracked objects:
 19480 ;;		On entry : 0/0
 19481 ;;		On exit  : 0/0
 19482 ;;		Unchanged: 0/0
 19483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19484 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19485 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19486 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19487 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19488 ;;Total ram usage:        5 bytes
 19489 ;; Hardware stack levels used:    1
 19490 ;; Hardware stack levels required when called:    3
 19491 ;; This function calls:
 19492 ;;		Nothing
 19493 ;; This function is called by:
 19494 ;;		_Division
 19495 ;; This function uses a non-reentrant model
 19496 ;;
 19497                           
 19498                           
 19499                           ;psect for function ___lbdiv
 19500  1CA2                     ___lbdiv:	
 19501                           
 19502                           ;incstack = 0
 19503                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19504                           ;___lbdiv@dividend stored from wreg
 19505  1CA2  00F4               	movwf	___lbdiv@dividend
 19506  1CA3  01F6               	clrf	___lbdiv@quotient
 19507  1CA4  0872               	movf	___lbdiv@divisor,w
 19508  1CA5  1903               	btfsc	3,2
 19509  1CA6  2CC1               	goto	l9849
 19510  1CA7  01F5               	clrf	___lbdiv@counter
 19511  1CA8  0AF5               	incf	___lbdiv@counter,f
 19512  1CA9                     l9837:	
 19513  1CA9  1BF2               	btfsc	___lbdiv@divisor,7
 19514  1CAA  2CB2               	goto	l9839
 19515  1CAB  1003               	clrc
 19516  1CAC  0DF2               	rlf	___lbdiv@divisor,f
 19517  1CAD  3001               	movlw	1
 19518  1CAE  00F3               	movwf	??___lbdiv
 19519  1CAF  0873               	movf	??___lbdiv,w
 19520  1CB0  07F5               	addwf	___lbdiv@counter,f
 19521  1CB1  2CA9               	goto	l9837
 19522  1CB2                     l9839:	
 19523  1CB2  1003               	clrc
 19524  1CB3  0DF6               	rlf	___lbdiv@quotient,f
 19525  1CB4  0872               	movf	___lbdiv@divisor,w
 19526  1CB5  0274               	subwf	___lbdiv@dividend,w
 19527  1CB6  1C03               	skipc
 19528  1CB7  2CBC               	goto	L13
 19529  1CB8  0872               	movf	___lbdiv@divisor,w
 19530  1CB9  02F4               	subwf	___lbdiv@dividend,f
 19531  1CBA  1476               	bsf	___lbdiv@quotient,0
 19532  1CBB  1003               	clrc
 19533  1CBC                     L13:	
 19534  1CBC  0CF2               	rrf	___lbdiv@divisor,f
 19535  1CBD  3001               	movlw	1
 19536  1CBE  02F5               	subwf	___lbdiv@counter,f
 19537  1CBF  1D03               	btfss	3,2
 19538  1CC0  2CB2               	goto	l9839
 19539  1CC1                     l9849:	
 19540  1CC1  0876               	movf	___lbdiv@quotient,w
 19541  1CC2  0008               	return
 19542  1CC3                     __end_of___lbdiv:	
 19543                           
 19544                           	psect	text134
 19545  182C                     __ptext134:	
 19546 ;; *************** function _DelayOff_Main *****************
 19547 ;; Defined at:
 19548 ;;		line 41 in file "../src/DelayOff_B1.c"
 19549 ;; Parameters:    Size  Location     Type
 19550 ;;		None
 19551 ;; Auto vars:     Size  Location     Type
 19552 ;;		None
 19553 ;; Return value:  Size  Location     Type
 19554 ;;		None               void
 19555 ;; Registers used:
 19556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19557 ;; Tracked objects:
 19558 ;;		On entry : 0/0
 19559 ;;		On exit  : 0/0
 19560 ;;		Unchanged: 0/0
 19561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19566 ;;Total ram usage:        0 bytes
 19567 ;; Hardware stack levels used:    1
 19568 ;; Hardware stack levels required when called:    7
 19569 ;; This function calls:
 19570 ;;		_DlyOff_Main
 19571 ;; This function is called by:
 19572 ;;		_main
 19573 ;; This function uses a non-reentrant model
 19574 ;;
 19575                           
 19576                           
 19577                           ;psect for function _DelayOff_Main
 19578  182C                     _DelayOff_Main:	
 19579                           
 19580                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 19581                           
 19582                           ;incstack = 0
 19583                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19584  182C  3001               	movlw	1
 19585  182D  3188  20F5  3198   	fcall	_DlyOff_Main
 19586                           
 19587                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 19588  1830  3002               	movlw	2
 19589  1831  3188  20F5         	fcall	_DlyOff_Main
 19590  1833  0008               	return
 19591  1834                     __end_of_DelayOff_Main:	
 19592                           
 19593                           	psect	text135
 19594  08F5                     __ptext135:	
 19595 ;; *************** function _DlyOff_Main *****************
 19596 ;; Defined at:
 19597 ;;		line 61 in file "../src/DelayOff_B1.c"
 19598 ;; Parameters:    Size  Location     Type
 19599 ;;  sw              1    wreg     unsigned char 
 19600 ;; Auto vars:     Size  Location     Type
 19601 ;;  sw              1   63[BANK0 ] unsigned char 
 19602 ;; Return value:  Size  Location     Type
 19603 ;;		None               void
 19604 ;; Registers used:
 19605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19606 ;; Tracked objects:
 19607 ;;		On entry : 0/0
 19608 ;;		On exit  : 0/0
 19609 ;;		Unchanged: 0/0
 19610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19613 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19614 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19615 ;;Total ram usage:        3 bytes
 19616 ;; Hardware stack levels used:    1
 19617 ;; Hardware stack levels required when called:    6
 19618 ;; This function calls:
 19619 ;;		_DelayOffPointSelect
 19620 ;;		_getDimmerLights_Status
 19621 ;;		_setDimmerLights_SwOff
 19622 ;;		_setDimmerLights_SwOn
 19623 ;;		_setProductData
 19624 ;; This function is called by:
 19625 ;;		_DelayOff_Main
 19626 ;; This function uses a non-reentrant model
 19627 ;;
 19628                           
 19629                           
 19630                           ;psect for function _DlyOff_Main
 19631  08F5                     _DlyOff_Main:	
 19632                           
 19633                           ;incstack = 0
 19634                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19635                           ;DlyOff_Main@sw stored from wreg
 19636  08F5  0020               	movlb	0	; select bank0
 19637  08F6  00DF               	movwf	DlyOff_Main@sw
 19638                           
 19639                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 19640  08F7  085F               	movf	DlyOff_Main@sw,w
 19641  08F8  319A  2228  3188   	fcall	_DelayOffPointSelect
 19642                           
 19643                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 19644  08FB  0021               	movlb	1	; select bank1
 19645  08FC  086A               	movf	_DelayOff^(0+128),w
 19646  08FD  0086               	movwf	6
 19647  08FE  3001               	movlw	1	; select bank2/3
 19648  08FF  0087               	movwf	7
 19649  0900  1C81               	btfss	1,1
 19650  0901  0008               	return
 19651                           
 19652                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 19653  0902  086A               	movf	_DelayOff^(0+128),w
 19654  0903  3E02               	addlw	2
 19655  0904  0086               	movwf	6
 19656  0905  3001               	movlw	1	; select bank2/3
 19657  0906  0087               	movwf	7
 19658  0907  3001               	movlw	1
 19659  0908  0781               	addwf	1,f
 19660  0909  3141               	addfsr 1,1
 19661  090A  1803               	skipnc
 19662  090B  0A81               	incf	1,f
 19663                           
 19664                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= (60000-10000)/20) {
 19665  090C  086A               	movf	_DelayOff^(0+128),w
 19666  090D  3E02               	addlw	2
 19667  090E  0086               	movwf	6
 19668  090F  3001               	movlw	1	; select bank2/3
 19669  0910  0087               	movwf	7
 19670  0911  3F40               	moviw [0]fsr1
 19671  0912  0020               	movlb	0	; select bank0
 19672  0913  00DD               	movwf	??_DlyOff_Main
 19673  0914  3F41               	moviw [1]fsr1
 19674  0915  00DE               	movwf	??_DlyOff_Main+1
 19675  0916  3009               	movlw	9
 19676  0917  025E               	subwf	??_DlyOff_Main+1,w
 19677  0918  30C4               	movlw	196
 19678  0919  1903               	skipnz
 19679  091A  025D               	subwf	??_DlyOff_Main,w
 19680  091B  1C03               	skipc
 19681  091C  0008               	return
 19682                           
 19683                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 19684  091D  0021               	movlb	1	; select bank1
 19685  091E  086A               	movf	_DelayOff^(0+128),w
 19686  091F  3E02               	addlw	2
 19687  0920  0086               	movwf	6
 19688  0921  3001               	movlw	1	; select bank2/3
 19689  0922  0087               	movwf	7
 19690  0923  3000               	movlw	0
 19691  0924  3FC0               	movwi [0]fsr1
 19692  0925  3FC1               	movwi [1]fsr1
 19693                           
 19694                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 19695  0926  3001               	movlw	1
 19696  0927  0020               	movlb	0	; select bank0
 19697  0928  00DD               	movwf	??_DlyOff_Main
 19698  0929  0021               	movlb	1	; select bank1
 19699  092A  086A               	movf	_DelayOff^(0+128),w
 19700  092B  3E04               	addlw	4
 19701  092C  0086               	movwf	6
 19702  092D  3001               	movlw	1	; select bank2/3
 19703  092E  0087               	movwf	7
 19704  092F  0020               	movlb	0	; select bank0
 19705  0930  085D               	movf	??_DlyOff_Main,w
 19706  0931  0781               	addwf	1,f
 19707                           
 19708                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 19709  0932  0021               	movlb	1	; select bank1
 19710  0933  086A               	movf	_DelayOff^(0+128),w
 19711  0934  3E04               	addlw	4
 19712  0935  0086               	movwf	6
 19713  0936  3001               	movlw	1	; select bank2/3
 19714  0937  0087               	movwf	7
 19715  0938  0A6A               	incf	_DelayOff^(0+128),w
 19716  0939  0084               	movwf	4
 19717  093A  3001               	movlw	1	; select bank2/3
 19718  093B  0085               	movwf	5
 19719  093C  0800               	movf	0,w
 19720  093D  0201               	subwf	1,w
 19721  093E  1C03               	skipc
 19722  093F  0008               	return
 19723                           
 19724                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 19725  0940  086A               	movf	_DelayOff^(0+128),w
 19726  0941  3E04               	addlw	4
 19727  0942  0086               	movwf	6
 19728  0943  3001               	movlw	1	; select bank2/3
 19729  0944  0087               	movwf	7
 19730  0945  0181               	clrf	1
 19731                           
 19732                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 19733  0946  086A               	movf	_DelayOff^(0+128),w
 19734  0947  0086               	movwf	6
 19735  0948  3001               	movlw	1	; select bank2/3
 19736  0949  0087               	movwf	7
 19737  094A  1081               	bcf	1,1
 19738                           
 19739                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 19740  094B  0020               	movlb	0	; select bank0
 19741  094C  085F               	movf	DlyOff_Main@sw,w
 19742  094D  3199  2114  3188   	fcall	_getDimmerLights_Status
 19743  0950  3A01               	xorlw	1
 19744  0951  1D03               	skipz
 19745  0952  295D               	goto	l589
 19746                           
 19747                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 19748  0953  0020               	movlb	0	; select bank0
 19749  0954  085F               	movf	DlyOff_Main@sw,w
 19750  0955  3187  2784  3188   	fcall	_setDimmerLights_SwOn
 19751                           
 19752                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 19753  0958  0020               	movlb	0	; select bank0
 19754  0959  085F               	movf	DlyOff_Main@sw,w
 19755  095A  3191  2122  3188   	fcall	_setDimmerLights_SwOff
 19756  095D                     l589:	
 19757                           
 19758                           ;DelayOff_B1.c: 78: }
 19759                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 19760  095D  0020               	movlb	0	; select bank0
 19761  095E  01DA               	clrf	setProductData@value
 19762  095F  085F               	movf	DlyOff_Main@sw,w
 19763  0960  3E1A               	addlw	26
 19764  0961  3198  20AE         	fcall	_setProductData
 19765  0963  0008               	return
 19766  0964                     __end_of_DlyOff_Main:	
 19767                           
 19768                           	psect	text136
 19769  18AE                     __ptext136:	
 19770 ;; *************** function _setProductData *****************
 19771 ;; Defined at:
 19772 ;;		line 645 in file "../src/Main_B1.c"
 19773 ;; Parameters:    Size  Location     Type
 19774 ;;  address         1    wreg     unsigned char 
 19775 ;;  value           1   58[BANK0 ] unsigned char 
 19776 ;; Auto vars:     Size  Location     Type
 19777 ;;  address         1   60[BANK0 ] unsigned char 
 19778 ;; Return value:  Size  Location     Type
 19779 ;;		None               void
 19780 ;; Registers used:
 19781 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19782 ;; Tracked objects:
 19783 ;;		On entry : 0/0
 19784 ;;		On exit  : 0/0
 19785 ;;		Unchanged: 0/0
 19786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19787 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19790 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19791 ;;Total ram usage:        3 bytes
 19792 ;; Hardware stack levels used:    1
 19793 ;; Hardware stack levels required when called:    3
 19794 ;; This function calls:
 19795 ;;		Nothing
 19796 ;; This function is called by:
 19797 ;;		_DlyOff_Main
 19798 ;;		_setDelayOff_GO
 19799 ;;		_setDimmerLights_OnOff
 19800 ;;		_setDimmerLights_Dimming
 19801 ;;		_setTemp_Main
 19802 ;;		_setLog_Code
 19803 ;;		_setControl_Lights_Table
 19804 ;;		_setRFSW_AdjControl
 19805 ;;		_setRF_DimmerLights
 19806 ;; This function uses a non-reentrant model
 19807 ;;
 19808                           
 19809                           
 19810                           ;psect for function _setProductData
 19811  18AE                     _setProductData:	
 19812                           
 19813                           ;incstack = 0
 19814                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 19815                           ;setProductData@address stored from wreg
 19816  18AE  0020               	movlb	0	; select bank0
 19817  18AF  00DC               	movwf	setProductData@address
 19818                           
 19819                           ;Main_B1.c: 646: _product.Data[address] = value;
 19820  18B0  085A               	movf	setProductData@value,w
 19821  18B1  00DB               	movwf	??_setProductData
 19822  18B2  085C               	movf	setProductData@address,w
 19823  18B3  3EA0               	addlw	__product& (0+255)
 19824  18B4  0086               	movwf	6
 19825  18B5  3002               	movlw	2	; select bank5/6
 19826  18B6  0087               	movwf	7
 19827  18B7  085B               	movf	??_setProductData,w
 19828  18B8  0081               	movwf	1
 19829  18B9  0008               	return
 19830  18BA                     __end_of_setProductData:	
 19831                           
 19832                           	psect	text137
 19833  0784                     __ptext137:	
 19834 ;; *************** function _setDimmerLights_SwOn *****************
 19835 ;; Defined at:
 19836 ;;		line 731 in file "../src/Dimmer_B1.c"
 19837 ;; Parameters:    Size  Location     Type
 19838 ;;  sw              1    wreg     unsigned char 
 19839 ;; Auto vars:     Size  Location     Type
 19840 ;;  sw              1   10[BANK0 ] unsigned char 
 19841 ;;  idle            1    9[BANK0 ] unsigned char 
 19842 ;;  dimmingStatu    1    6[BANK0 ] unsigned char 
 19843 ;; Return value:  Size  Location     Type
 19844 ;;		None               void
 19845 ;; Registers used:
 19846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19847 ;; Tracked objects:
 19848 ;;		On entry : 0/0
 19849 ;;		On exit  : 0/0
 19850 ;;		Unchanged: 0/0
 19851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19853 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19855 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19856 ;;Total ram usage:        6 bytes
 19857 ;; Hardware stack levels used:    1
 19858 ;; Hardware stack levels required when called:    5
 19859 ;; This function calls:
 19860 ;;		_DimmerLights_SelectPointer
 19861 ;;		_getDimmerIntr_Dimming_Sw
 19862 ;;		_setBuz
 19863 ;; This function is called by:
 19864 ;;		_DlyOff_Main
 19865 ;;		_setControl_Lights_Table
 19866 ;;		_setRFSW_Control
 19867 ;;		_setRFSW_AdjControl
 19868 ;;		_setSw_Main
 19869 ;; This function uses a non-reentrant model
 19870 ;;
 19871                           
 19872                           
 19873                           ;psect for function _setDimmerLights_SwOn
 19874  0784                     _setDimmerLights_SwOn:	
 19875                           
 19876                           ;incstack = 0
 19877                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19878                           ;setDimmerLights_SwOn@sw stored from wreg
 19879  0784  0020               	movlb	0	; select bank0
 19880  0785  00AA               	movwf	setDimmerLights_SwOn@sw
 19881                           
 19882                           ;Dimmer_B1.c: 732: char idle = 0;
 19883  0786  01A9               	clrf	setDimmerLights_SwOn@idle
 19884                           
 19885                           ;Dimmer_B1.c: 734: char dimmingStatus = 0;
 19886  0787  01A6               	clrf	setDimmerLights_SwOn@dimmingStatus
 19887                           
 19888                           ;Dimmer_B1.c: 735: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 19889  0788  082A               	movf	setDimmerLights_SwOn@sw,w
 19890  0789  319A  22E5  3187   	fcall	_getDimmerIntr_Dimming_Sw
 19891  078C  00F9               	movwf	??_setDimmerLights_SwOn
 19892  078D  0879               	movf	??_setDimmerLights_SwOn,w
 19893  078E  0020               	movlb	0	; select bank0
 19894  078F  00A6               	movwf	setDimmerLights_SwOn@dimmingStatus
 19895                           
 19896                           ;Dimmer_B1.c: 739: if (idle == 0) {
 19897  0790  08A9               	movf	setDimmerLights_SwOn@idle,f
 19898  0791  1D03               	skipz
 19899  0792  2FB7               	goto	l9803
 19900                           
 19901                           ;Dimmer_B1.c: 740: if (sw == 1) {
 19902  0793  082A               	movf	setDimmerLights_SwOn@sw,w
 19903  0794  3A01               	xorlw	1
 19904  0795  1D03               	skipz
 19905  0796  2FA4               	goto	l9793
 19906                           
 19907                           ;Dimmer_B1.c: 741: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 19908  0797  01A7               	clrf	_setDimmerLights_SwOn$2659
 19909  0798  0AA7               	incf	_setDimmerLights_SwOn$2659,f
 19910  0799  0023               	movlb	3	; select bank3
 19911  079A  1A47               	btfsc	_DimmerLights2^(0+384),4
 19912  079B  2FA1               	goto	l9791
 19913  079C  0021               	movlb	1	; select bank1
 19914  079D  1A30               	btfsc	_DimmerIntr2^(0+128),4
 19915  079E  2FA1               	goto	l9791
 19916  079F  0020               	movlb	0	; select bank0
 19917  07A0  01A7               	clrf	_setDimmerLights_SwOn$2659
 19918  07A1                     l9791:	
 19919  07A1  0020               	movlb	0	; select bank0
 19920  07A2  0827               	movf	_setDimmerLights_SwOn$2659,w
 19921  07A3  2FB4               	goto	L14
 19922  07A4                     l9793:	
 19923                           ;Dimmer_B1.c: 742: } else if (sw == 2) {
 19924                           
 19925  07A4  082A               	movf	setDimmerLights_SwOn@sw,w
 19926  07A5  3A02               	xorlw	2
 19927  07A6  1D03               	skipz
 19928  07A7  2FB7               	goto	l9803
 19929                           
 19930                           ;Dimmer_B1.c: 743: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 19931  07A8  01A8               	clrf	_setDimmerLights_SwOn$2668
 19932  07A9  0AA8               	incf	_setDimmerLights_SwOn$2668,f
 19933  07AA  0023               	movlb	3	; select bank3
 19934  07AB  1A3E               	btfsc	_DimmerLights1^(0+384),4
 19935  07AC  2FB2               	goto	l9801
 19936  07AD  0021               	movlb	1	; select bank1
 19937  07AE  1A20               	btfsc	_DimmerIntr1^(0+128),4
 19938  07AF  2FB2               	goto	l9801
 19939  07B0  0020               	movlb	0	; select bank0
 19940  07B1  01A8               	clrf	_setDimmerLights_SwOn$2668
 19941  07B2                     l9801:	
 19942  07B2  0020               	movlb	0	; select bank0
 19943  07B3  0828               	movf	_setDimmerLights_SwOn$2668,w
 19944  07B4                     L14:	
 19945  07B4  00F9               	movwf	??_setDimmerLights_SwOn
 19946  07B5  0879               	movf	??_setDimmerLights_SwOn,w
 19947  07B6  00A9               	movwf	setDimmerLights_SwOn@idle
 19948  07B7                     l9803:	
 19949                           
 19950                           ;Dimmer_B1.c: 744: }
 19951                           ;Dimmer_B1.c: 745: }
 19952                           ;Dimmer_B1.c: 762: DimmerLights_SelectPointer(sw);
 19953  07B7  082A               	movf	setDimmerLights_SwOn@sw,w
 19954  07B8  319A  223D  3187   	fcall	_DimmerLights_SelectPointer
 19955                           
 19956                           ;Dimmer_B1.c: 763: if (idle == 0) {
 19957  07BB  0020               	movlb	0	; select bank0
 19958  07BC  08A9               	movf	setDimmerLights_SwOn@idle,f
 19959  07BD  1D03               	skipz
 19960  07BE  0008               	return
 19961                           
 19962                           ;Dimmer_B1.c: 765: if (dimmingStatus == 0) {
 19963  07BF  08A6               	movf	setDimmerLights_SwOn@dimmingStatus,f
 19964  07C0  1D03               	skipz
 19965  07C1  2FE5               	goto	l9815
 19966                           
 19967                           ;Dimmer_B1.c: 766: DimmerLights->SwFlag = 1;
 19968  07C2  086C               	movf	_DimmerLights,w
 19969  07C3  0086               	movwf	6
 19970  07C4  3001               	movlw	1	; select bank2/3
 19971  07C5  0087               	movwf	7
 19972  07C6  1401               	bsf	1,0
 19973                           
 19974                           ;Dimmer_B1.c: 767: if (DimmerLights->Status == 0) {
 19975  07C7  0A6C               	incf	_DimmerLights,w
 19976  07C8  0086               	movwf	6
 19977  07C9  3001               	movlw	1	; select bank2/3
 19978  07CA  0087               	movwf	7
 19979  07CB  1801               	btfsc	1,0
 19980  07CC  2FDF               	goto	l9813
 19981                           
 19982                           ;Dimmer_B1.c: 768: DimmerLights->Status = 1;
 19983  07CD  0A6C               	incf	_DimmerLights,w
 19984  07CE  0086               	movwf	6
 19985  07CF  3001               	movlw	1	; select bank2/3
 19986  07D0  0087               	movwf	7
 19987  07D1  1401               	bsf	1,0
 19988                           
 19989                           ;Dimmer_B1.c: 774: DimmerLights->Phase = 1;
 19990  07D2  086C               	movf	_DimmerLights,w
 19991  07D3  3E02               	addlw	2
 19992  07D4  0086               	movwf	6
 19993  07D5  3001               	movlw	1	; select bank2/3
 19994  07D6  0087               	movwf	7
 19995  07D7  1401               	bsf	1,0
 19996                           
 19997                           ;Dimmer_B1.c: 775: DimmerLights->PhaseSwitch = 1;
 19998  07D8  086C               	movf	_DimmerLights,w
 19999  07D9  3E02               	addlw	2
 20000  07DA  0086               	movwf	6
 20001  07DB  3001               	movlw	1	; select bank2/3
 20002  07DC  0087               	movwf	7
 20003  07DD  1501               	bsf	1,2
 20004                           
 20005                           ;Dimmer_B1.c: 779: } else {
 20006  07DE  2FEF               	goto	l9817
 20007  07DF                     l9813:	
 20008                           
 20009                           ;Dimmer_B1.c: 780: DimmerLights->Status = 0;
 20010  07DF  0A6C               	incf	_DimmerLights,w
 20011  07E0  0086               	movwf	6
 20012  07E1  3001               	movlw	1	; select bank2/3
 20013  07E2  0087               	movwf	7
 20014  07E3  1001               	bcf	1,0
 20015                           
 20016                           ;Dimmer_B1.c: 781: }
 20017                           ;Dimmer_B1.c: 782: } else {
 20018  07E4  2FEF               	goto	l9817
 20019  07E5                     l9815:	
 20020                           
 20021                           ;Dimmer_B1.c: 783: DimmerLights->DimmingTrigger = 1;
 20022  07E5  086C               	movf	_DimmerLights,w
 20023  07E6  0086               	movwf	6
 20024  07E7  3001               	movlw	1	; select bank2/3
 20025  07E8  0087               	movwf	7
 20026  07E9  1601               	bsf	1,4
 20027                           
 20028                           ;Dimmer_B1.c: 784: DimmerLights->DimmingSwitch = 0;
 20029  07EA  086C               	movf	_DimmerLights,w
 20030  07EB  0086               	movwf	6
 20031  07EC  3001               	movlw	1	; select bank2/3
 20032  07ED  0087               	movwf	7
 20033  07EE  1281               	bcf	1,5
 20034  07EF                     l9817:	
 20035                           
 20036                           ;Dimmer_B1.c: 785: }
 20037                           ;Dimmer_B1.c: 786: setBuz(1, 100);
 20038  07EF  3064               	movlw	100
 20039  07F0  00A4               	movwf	setBuz@time
 20040  07F1  3000               	movlw	0
 20041  07F2  00A5               	movwf	setBuz@time+1
 20042  07F3  3001               	movlw	1
 20043  07F4  3192  22EC         	fcall	_setBuz
 20044  07F6  0008               	return
 20045  07F7                     __end_of_setDimmerLights_SwOn:	
 20046                           
 20047                           	psect	text138
 20048  12EC                     __ptext138:	
 20049 ;; *************** function _setBuz *****************
 20050 ;; Defined at:
 20051 ;;		line 22 in file "../src/Buzzer_B1.c"
 20052 ;; Parameters:    Size  Location     Type
 20053 ;;  count           1    wreg     unsigned char 
 20054 ;;  time            2    4[BANK0 ] int 
 20055 ;; Auto vars:     Size  Location     Type
 20056 ;;  count           1    8[COMMON] unsigned char 
 20057 ;; Return value:  Size  Location     Type
 20058 ;;		None               void
 20059 ;; Registers used:
 20060 ;;		wreg, status,2, status,0, pclath, cstack
 20061 ;; Tracked objects:
 20062 ;;		On entry : 0/0
 20063 ;;		On exit  : 0/0
 20064 ;;		Unchanged: 0/0
 20065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20066 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20068 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20069 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20070 ;;Total ram usage:        4 bytes
 20071 ;; Hardware stack levels used:    1
 20072 ;; Hardware stack levels required when called:    4
 20073 ;; This function calls:
 20074 ;;		___awdiv
 20075 ;; This function is called by:
 20076 ;;		_setDimmerLights_SwOn
 20077 ;;		_setDimmerLights_Dimming
 20078 ;;		_my_MainTimer
 20079 ;;		_Exception_Main
 20080 ;;		_setTemp_Main
 20081 ;;		_setLog_Code
 20082 ;;		_setRFSW_Control
 20083 ;;		_setRFSW_AdjControl
 20084 ;;		_setSw_Main
 20085 ;; This function uses a non-reentrant model
 20086 ;;
 20087                           
 20088                           
 20089                           ;psect for function _setBuz
 20090  12EC                     _setBuz:	
 20091                           
 20092                           ;incstack = 0
 20093                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 20094                           ;setBuz@count stored from wreg
 20095  12EC  00F8               	movwf	setBuz@count
 20096                           
 20097                           ;Buzzer_B1.c: 23: time /= 20;
 20098  12ED  3014               	movlw	20
 20099  12EE  00F2               	movwf	___awdiv@divisor
 20100  12EF  3000               	movlw	0
 20101  12F0  00F3               	movwf	___awdiv@divisor+1
 20102  12F1  0020               	movlb	0	; select bank0
 20103  12F2  0825               	movf	setBuz@time+1,w
 20104  12F3  01F5               	clrf	___awdiv@dividend+1
 20105  12F4  07F5               	addwf	___awdiv@dividend+1,f
 20106  12F5  0824               	movf	setBuz@time,w
 20107  12F6  01F4               	clrf	___awdiv@dividend
 20108  12F7  07F4               	addwf	___awdiv@dividend,f
 20109  12F8  3193  233F  3192   	fcall	___awdiv
 20110  12FB  0873               	movf	?___awdiv+1,w
 20111  12FC  0020               	movlb	0	; select bank0
 20112  12FD  01A5               	clrf	setBuz@time+1
 20113  12FE  07A5               	addwf	setBuz@time+1,f
 20114  12FF  0872               	movf	?___awdiv,w
 20115  1300  01A4               	clrf	setBuz@time
 20116  1301  07A4               	addwf	setBuz@time,f
 20117                           
 20118                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 20119  1302  0021               	movlb	1	; select bank1
 20120  1303  1C5C               	btfss	_Buz1^(0+128),0
 20121  1304  0008               	return
 20122                           
 20123                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 20124  1305  18DC               	btfsc	_Buz1^(0+128),1
 20125  1306  2B1B               	goto	l100
 20126                           
 20127                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 20128  1307  14DC               	bsf	_Buz1^(0+128),1
 20129                           
 20130                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 20131  1308  01DD               	clrf	(_Buz1^(0+128)+1)
 20132  1309  01DE               	clrf	((_Buz1+1)^(0+128)+1)
 20133                           
 20134                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 20135  130A  0878               	movf	setBuz@count,w
 20136  130B  00F7               	movwf	??_setBuz
 20137  130C  0877               	movf	??_setBuz,w
 20138  130D  00DF               	movwf	(_Buz1^(0+128)+3)
 20139                           
 20140                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 20141  130E  0020               	movlb	0	; select bank0
 20142  130F  0825               	movf	setBuz@time+1,w
 20143  1310  0021               	movlb	1	; select bank1
 20144  1311  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 20145  1312  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 20146  1313  0020               	movlb	0	; select bank0
 20147  1314  0824               	movf	setBuz@time,w
 20148  1315  0021               	movlb	1	; select bank1
 20149  1316  01E2               	clrf	(_Buz1^(0+128)+6)
 20150  1317  07E2               	addwf	(_Buz1^(0+128)+6),f
 20151                           
 20152                           ;Buzzer_B1.c: 30: RB3 = 1;
 20153  1318  0020               	movlb	0	; select bank0
 20154  1319  158D               	bsf	13,3	;volatile
 20155                           
 20156                           ;Buzzer_B1.c: 31: } else {
 20157  131A  0008               	return
 20158  131B                     l100:	
 20159                           
 20160                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 20161  131B  19DC               	btfsc	_Buz1^(0+128),3
 20162  131C  2B2D               	goto	l102
 20163                           
 20164                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 20165  131D  15DC               	bsf	_Buz1^(0+128),3
 20166                           
 20167                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 20168  131E  0878               	movf	setBuz@count,w
 20169  131F  00F7               	movwf	??_setBuz
 20170  1320  0877               	movf	??_setBuz,w
 20171  1321  00E0               	movwf	(_Buz1^(0+128)+4)
 20172                           
 20173                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 20174  1322  0020               	movlb	0	; select bank0
 20175  1323  0825               	movf	setBuz@time+1,w
 20176  1324  0021               	movlb	1	; select bank1
 20177  1325  01E5               	clrf	((_Buz1+1)^(0+128)+8)
 20178  1326  07E5               	addwf	((_Buz1+1)^(0+128)+8),f
 20179  1327  0020               	movlb	0	; select bank0
 20180  1328  0824               	movf	setBuz@time,w
 20181  1329  0021               	movlb	1	; select bank1
 20182  132A  01E4               	clrf	(_Buz1^(0+128)+8)
 20183  132B  07E4               	addwf	(_Buz1^(0+128)+8),f
 20184                           
 20185                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 20186  132C  0008               	return
 20187  132D                     l102:	
 20188  132D  1A5C               	btfsc	_Buz1^(0+128),4
 20189  132E  0008               	return
 20190                           
 20191                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 20192  132F  165C               	bsf	_Buz1^(0+128),4
 20193                           
 20194                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 20195  1330  0878               	movf	setBuz@count,w
 20196  1331  00F7               	movwf	??_setBuz
 20197  1332  0877               	movf	??_setBuz,w
 20198  1333  00E1               	movwf	(_Buz1^(0+128)+5)
 20199                           
 20200                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 20201  1334  0020               	movlb	0	; select bank0
 20202  1335  0825               	movf	setBuz@time+1,w
 20203  1336  0021               	movlb	1	; select bank1
 20204  1337  01E7               	clrf	((_Buz1+1)^(0+128)+10)
 20205  1338  07E7               	addwf	((_Buz1+1)^(0+128)+10),f
 20206  1339  0020               	movlb	0	; select bank0
 20207  133A  0824               	movf	setBuz@time,w
 20208  133B  0021               	movlb	1	; select bank1
 20209  133C  01E6               	clrf	(_Buz1^(0+128)+10)
 20210  133D  07E6               	addwf	(_Buz1^(0+128)+10),f
 20211  133E  0008               	return
 20212  133F                     __end_of_setBuz:	
 20213                           
 20214                           	psect	text139
 20215  133F                     __ptext139:	
 20216 ;; *************** function ___awdiv *****************
 20217 ;; Defined at:
 20218 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 20219 ;; Parameters:    Size  Location     Type
 20220 ;;  divisor         2    2[COMMON] int 
 20221 ;;  dividend        2    4[COMMON] int 
 20222 ;; Auto vars:     Size  Location     Type
 20223 ;;  quotient        2    2[BANK0 ] int 
 20224 ;;  sign            1    1[BANK0 ] unsigned char 
 20225 ;;  counter         1    0[BANK0 ] unsigned char 
 20226 ;; Return value:  Size  Location     Type
 20227 ;;                  2    2[COMMON] int 
 20228 ;; Registers used:
 20229 ;;		wreg, status,2, status,0
 20230 ;; Tracked objects:
 20231 ;;		On entry : 0/0
 20232 ;;		On exit  : 0/0
 20233 ;;		Unchanged: 0/0
 20234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20235 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20236 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20237 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20238 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20239 ;;Total ram usage:        9 bytes
 20240 ;; Hardware stack levels used:    1
 20241 ;; Hardware stack levels required when called:    3
 20242 ;; This function calls:
 20243 ;;		Nothing
 20244 ;; This function is called by:
 20245 ;;		_setBuz
 20246 ;; This function uses a non-reentrant model
 20247 ;;
 20248                           
 20249                           
 20250                           ;psect for function ___awdiv
 20251  133F                     ___awdiv:	
 20252                           
 20253                           ;incstack = 0
 20254                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20255  133F  0020               	movlb	0	; select bank0
 20256  1340  01A1               	clrf	___awdiv@sign
 20257  1341  1FF3               	btfss	___awdiv@divisor+1,7
 20258  1342  2B4A               	goto	l9675
 20259  1343  09F2               	comf	___awdiv@divisor,f
 20260  1344  09F3               	comf	___awdiv@divisor+1,f
 20261  1345  0AF2               	incf	___awdiv@divisor,f
 20262  1346  1903               	skipnz
 20263  1347  0AF3               	incf	___awdiv@divisor+1,f
 20264  1348  01A1               	clrf	___awdiv@sign
 20265  1349  0AA1               	incf	___awdiv@sign,f
 20266  134A                     l9675:	
 20267  134A  1FF5               	btfss	___awdiv@dividend+1,7
 20268  134B  2B55               	goto	l9681
 20269  134C  09F4               	comf	___awdiv@dividend,f
 20270  134D  09F5               	comf	___awdiv@dividend+1,f
 20271  134E  0AF4               	incf	___awdiv@dividend,f
 20272  134F  1903               	skipnz
 20273  1350  0AF5               	incf	___awdiv@dividend+1,f
 20274  1351  3001               	movlw	1
 20275  1352  00F6               	movwf	??___awdiv
 20276  1353  0876               	movf	??___awdiv,w
 20277  1354  06A1               	xorwf	___awdiv@sign,f
 20278  1355                     l9681:	
 20279  1355  01A2               	clrf	___awdiv@quotient
 20280  1356  01A3               	clrf	___awdiv@quotient+1
 20281  1357  0873               	movf	___awdiv@divisor+1,w
 20282  1358  0472               	iorwf	___awdiv@divisor,w
 20283  1359  1903               	skipnz
 20284  135A  2B84               	goto	l9703
 20285  135B  01A0               	clrf	___awdiv@counter
 20286  135C  0AA0               	incf	___awdiv@counter,f
 20287  135D                     l9691:	
 20288  135D  1BF3               	btfsc	___awdiv@divisor+1,7
 20289  135E  2B69               	goto	l9693
 20290  135F  3001               	movlw	1
 20291  1360                     u10465:	
 20292  1360  35F2               	lslf	___awdiv@divisor,f
 20293  1361  0DF3               	rlf	___awdiv@divisor+1,f
 20294  1362  0B89               	decfsz	9,f
 20295  1363  2B60               	goto	u10465
 20296  1364  3001               	movlw	1
 20297  1365  00F6               	movwf	??___awdiv
 20298  1366  0876               	movf	??___awdiv,w
 20299  1367  07A0               	addwf	___awdiv@counter,f
 20300  1368  2B5D               	goto	l9691
 20301  1369                     l9693:	
 20302  1369  3001               	movlw	1
 20303  136A                     u10485:	
 20304  136A  35A2               	lslf	___awdiv@quotient,f
 20305  136B  0DA3               	rlf	___awdiv@quotient+1,f
 20306  136C  0B89               	decfsz	9,f
 20307  136D  2B6A               	goto	u10485
 20308  136E  0873               	movf	___awdiv@divisor+1,w
 20309  136F  0275               	subwf	___awdiv@dividend+1,w
 20310  1370  1D03               	skipz
 20311  1371  2B74               	goto	u10495
 20312  1372  0872               	movf	___awdiv@divisor,w
 20313  1373  0274               	subwf	___awdiv@dividend,w
 20314  1374                     u10495:	
 20315  1374  1C03               	skipc
 20316  1375  2B7B               	goto	l9699
 20317  1376  0872               	movf	___awdiv@divisor,w
 20318  1377  02F4               	subwf	___awdiv@dividend,f
 20319  1378  0873               	movf	___awdiv@divisor+1,w
 20320  1379  3BF5               	subwfb	___awdiv@dividend+1,f
 20321  137A  1422               	bsf	___awdiv@quotient,0
 20322  137B                     l9699:	
 20323  137B  3001               	movlw	1
 20324  137C                     u10505:	
 20325  137C  36F3               	lsrf	___awdiv@divisor+1,f
 20326  137D  0CF2               	rrf	___awdiv@divisor,f
 20327  137E  0B89               	decfsz	9,f
 20328  137F  2B7C               	goto	u10505
 20329  1380  3001               	movlw	1
 20330  1381  02A0               	subwf	___awdiv@counter,f
 20331  1382  1D03               	btfss	3,2
 20332  1383  2B69               	goto	l9693
 20333  1384                     l9703:	
 20334  1384  0821               	movf	___awdiv@sign,w
 20335  1385  1903               	btfsc	3,2
 20336  1386  2B8C               	goto	l9707
 20337  1387  09A2               	comf	___awdiv@quotient,f
 20338  1388  09A3               	comf	___awdiv@quotient+1,f
 20339  1389  0AA2               	incf	___awdiv@quotient,f
 20340  138A  1903               	skipnz
 20341  138B  0AA3               	incf	___awdiv@quotient+1,f
 20342  138C                     l9707:	
 20343  138C  0823               	movf	___awdiv@quotient+1,w
 20344  138D  01F3               	clrf	?___awdiv+1
 20345  138E  07F3               	addwf	?___awdiv+1,f
 20346  138F  0822               	movf	___awdiv@quotient,w
 20347  1390  01F2               	clrf	?___awdiv
 20348  1391  07F2               	addwf	?___awdiv,f
 20349  1392  0008               	return
 20350  1393                     __end_of___awdiv:	
 20351                           
 20352                           	psect	text140
 20353  1AE5                     __ptext140:	
 20354 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 20355 ;; Defined at:
 20356 ;;		line 241 in file "../src/Dimmer_B1.c"
 20357 ;; Parameters:    Size  Location     Type
 20358 ;;  lights          1    wreg     unsigned char 
 20359 ;; Auto vars:     Size  Location     Type
 20360 ;;  lights          1    3[COMMON] unsigned char 
 20361 ;;  status          1    2[COMMON] unsigned char 
 20362 ;; Return value:  Size  Location     Type
 20363 ;;                  1    wreg      unsigned char 
 20364 ;; Registers used:
 20365 ;;		wreg, status,2
 20366 ;; Tracked objects:
 20367 ;;		On entry : 0/0
 20368 ;;		On exit  : 0/0
 20369 ;;		Unchanged: 0/0
 20370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20372 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20374 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20375 ;;Total ram usage:        2 bytes
 20376 ;; Hardware stack levels used:    1
 20377 ;; Hardware stack levels required when called:    3
 20378 ;; This function calls:
 20379 ;;		Nothing
 20380 ;; This function is called by:
 20381 ;;		_setDimmerLights_SwOn
 20382 ;;		_setRF_AdjControl
 20383 ;; This function uses a non-reentrant model
 20384 ;;
 20385                           
 20386                           
 20387                           ;psect for function _getDimmerIntr_Dimming_Sw
 20388  1AE5                     _getDimmerIntr_Dimming_Sw:	
 20389                           
 20390                           ;incstack = 0
 20391                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 20392                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 20393  1AE5  00F3               	movwf	getDimmerIntr_Dimming_Sw@lights
 20394                           
 20395                           ;Dimmer_B1.c: 242: char status = 0;
 20396  1AE6  01F2               	clrf	getDimmerIntr_Dimming_Sw@status
 20397                           
 20398                           ;Dimmer_B1.c: 244: if (lights == 1) {
 20399  1AE7  0873               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20400  1AE8  3A01               	xorlw	1
 20401  1AE9  1D03               	skipz
 20402  1AEA  2AF0               	goto	l6711
 20403                           
 20404                           ;Dimmer_B1.c: 245: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 20405  1AEB  3000               	movlw	0
 20406  1AEC  0021               	movlb	1	; select bank1
 20407  1AED  1A20               	btfsc	_DimmerIntr1^(0+128),4
 20408  1AEE  3001               	movlw	1
 20409  1AEF  00F2               	movwf	getDimmerIntr_Dimming_Sw@status
 20410  1AF0                     l6711:	
 20411                           
 20412                           ;Dimmer_B1.c: 246: }
 20413                           ;Dimmer_B1.c: 249: if (lights == 2) {
 20414  1AF0  0873               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20415  1AF1  3A02               	xorlw	2
 20416  1AF2  1D03               	skipz
 20417  1AF3  2AF9               	goto	l6715
 20418                           
 20419                           ;Dimmer_B1.c: 250: status = DimmerIntr2.Dimming_Sw == 1 ? 1 : 0;
 20420  1AF4  3000               	movlw	0
 20421  1AF5  0021               	movlb	1	; select bank1
 20422  1AF6  1A30               	btfsc	_DimmerIntr2^(0+128),4
 20423  1AF7  3001               	movlw	1
 20424  1AF8  00F2               	movwf	getDimmerIntr_Dimming_Sw@status
 20425  1AF9                     l6715:	
 20426                           
 20427                           ;Dimmer_B1.c: 251: }
 20428                           ;Dimmer_B1.c: 259: return status;
 20429  1AF9  0872               	movf	getDimmerIntr_Dimming_Sw@status,w
 20430  1AFA  0008               	return
 20431  1AFB                     __end_of_getDimmerIntr_Dimming_Sw:	
 20432                           
 20433                           	psect	text141
 20434  1122                     __ptext141:	
 20435 ;; *************** function _setDimmerLights_SwOff *****************
 20436 ;; Defined at:
 20437 ;;		line 791 in file "../src/Dimmer_B1.c"
 20438 ;; Parameters:    Size  Location     Type
 20439 ;;  sw              1    wreg     unsigned char 
 20440 ;; Auto vars:     Size  Location     Type
 20441 ;;  sw              1    4[COMMON] unsigned char 
 20442 ;; Return value:  Size  Location     Type
 20443 ;;		None               void
 20444 ;; Registers used:
 20445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20446 ;; Tracked objects:
 20447 ;;		On entry : 0/0
 20448 ;;		On exit  : 0/0
 20449 ;;		Unchanged: 0/0
 20450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20452 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20454 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20455 ;;Total ram usage:        1 bytes
 20456 ;; Hardware stack levels used:    1
 20457 ;; Hardware stack levels required when called:    4
 20458 ;; This function calls:
 20459 ;;		_DimmerLights_SelectPointer
 20460 ;; This function is called by:
 20461 ;;		_DlyOff_Main
 20462 ;;		_Exception_Main
 20463 ;;		_setControl_Lights_Table
 20464 ;;		_setRFSW_Control
 20465 ;;		_setRFSW_AdjControl
 20466 ;;		_setSw_Main
 20467 ;; This function uses a non-reentrant model
 20468 ;;
 20469                           
 20470                           
 20471                           ;psect for function _setDimmerLights_SwOff
 20472  1122                     _setDimmerLights_SwOff:	
 20473                           
 20474                           ;incstack = 0
 20475                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 20476                           ;setDimmerLights_SwOff@sw stored from wreg
 20477  1122  00F4               	movwf	setDimmerLights_SwOff@sw
 20478                           
 20479                           ;Dimmer_B1.c: 793: DimmerLights_SelectPointer(sw);
 20480  1123  0874               	movf	setDimmerLights_SwOff@sw,w
 20481  1124  319A  223D  3191   	fcall	_DimmerLights_SelectPointer
 20482                           
 20483                           ;Dimmer_B1.c: 795: if (DimmerLights->SwFlag == 1) {
 20484  1127  0020               	movlb	0	; select bank0
 20485  1128  086C               	movf	_DimmerLights,w
 20486  1129  0086               	movwf	6
 20487  112A  3001               	movlw	1	; select bank2/3
 20488  112B  0087               	movwf	7
 20489  112C  1C01               	btfss	1,0
 20490  112D  0008               	return
 20491                           
 20492                           ;Dimmer_B1.c: 796: DimmerLights->SwFlag = 0;
 20493  112E  086C               	movf	_DimmerLights,w
 20494  112F  0086               	movwf	6
 20495  1130  3001               	movlw	1	; select bank2/3
 20496  1131  0087               	movwf	7
 20497  1132  1001               	bcf	1,0
 20498                           
 20499                           ;Dimmer_B1.c: 797: if (DimmerLights->Status == 1) {
 20500  1133  0A6C               	incf	_DimmerLights,w
 20501  1134  0086               	movwf	6
 20502  1135  3001               	movlw	1	; select bank2/3
 20503  1136  0087               	movwf	7
 20504  1137  1C01               	btfss	1,0
 20505  1138  294F               	goto	l7057
 20506                           
 20507                           ;Dimmer_B1.c: 798: if (DimmerLights->DimmingSwFlag == 1) {
 20508  1139  086C               	movf	_DimmerLights,w
 20509  113A  0086               	movwf	6
 20510  113B  3001               	movlw	1	; select bank2/3
 20511  113C  0087               	movwf	7
 20512  113D  1D81               	btfss	1,3
 20513  113E  0008               	return
 20514                           
 20515                           ;Dimmer_B1.c: 799: DimmerLights->DimmingSwFlag = 0;
 20516  113F  086C               	movf	_DimmerLights,w
 20517  1140  0086               	movwf	6
 20518  1141  3001               	movlw	1	; select bank2/3
 20519  1142  0087               	movwf	7
 20520  1143  1181               	bcf	1,3
 20521                           
 20522                           ;Dimmer_B1.c: 801: DimmerLights->DimmingTrigger = 1;
 20523  1144  086C               	movf	_DimmerLights,w
 20524  1145  0086               	movwf	6
 20525  1146  3001               	movlw	1	; select bank2/3
 20526  1147  0087               	movwf	7
 20527  1148  1601               	bsf	1,4
 20528                           
 20529                           ;Dimmer_B1.c: 802: DimmerLights->DimmingSwitch = 0;
 20530  1149  086C               	movf	_DimmerLights,w
 20531  114A  0086               	movwf	6
 20532  114B  3001               	movlw	1	; select bank2/3
 20533  114C  0087               	movwf	7
 20534  114D  1281               	bcf	1,5
 20535                           
 20536                           ;Dimmer_B1.c: 803: }
 20537                           ;Dimmer_B1.c: 804: } else {
 20538  114E  0008               	return
 20539  114F                     l7057:	
 20540                           
 20541                           ;Dimmer_B1.c: 810: DimmerLights->Phase = 1;
 20542  114F  086C               	movf	_DimmerLights,w
 20543  1150  3E02               	addlw	2
 20544  1151  0086               	movwf	6
 20545  1152  3001               	movlw	1	; select bank2/3
 20546  1153  0087               	movwf	7
 20547  1154  1401               	bsf	1,0
 20548                           
 20549                           ;Dimmer_B1.c: 811: DimmerLights->PhaseSwitch = 0;
 20550  1155  086C               	movf	_DimmerLights,w
 20551  1156  3E02               	addlw	2
 20552  1157  0086               	movwf	6
 20553  1158  3001               	movlw	1	; select bank2/3
 20554  1159  0087               	movwf	7
 20555  115A  1101               	bcf	1,2
 20556  115B  0008               	return
 20557  115C                     __end_of_setDimmerLights_SwOff:	
 20558                           
 20559                           	psect	text142
 20560  1914                     __ptext142:	
 20561 ;; *************** function _getDimmerLights_Status *****************
 20562 ;; Defined at:
 20563 ;;		line 1207 in file "../src/Dimmer_B1.c"
 20564 ;; Parameters:    Size  Location     Type
 20565 ;;  lights          1    wreg     unsigned char 
 20566 ;; Auto vars:     Size  Location     Type
 20567 ;;  lights          1    4[COMMON] unsigned char 
 20568 ;;  status          1    5[COMMON] unsigned char 
 20569 ;; Return value:  Size  Location     Type
 20570 ;;                  1    wreg      unsigned char 
 20571 ;; Registers used:
 20572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20573 ;; Tracked objects:
 20574 ;;		On entry : 0/0
 20575 ;;		On exit  : 0/0
 20576 ;;		Unchanged: 0/0
 20577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20581 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20582 ;;Total ram usage:        2 bytes
 20583 ;; Hardware stack levels used:    1
 20584 ;; Hardware stack levels required when called:    4
 20585 ;; This function calls:
 20586 ;;		_DimmerLights_SelectPointer
 20587 ;; This function is called by:
 20588 ;;		_DlyOff_Main
 20589 ;;		_DimmerLights_AssignationDimming
 20590 ;;		_Exception_Main
 20591 ;;		_setControl_Lights_Table
 20592 ;;		_setRFSW_Control
 20593 ;;		_setRFSW_AdjControl
 20594 ;;		_setRF_AdjControl
 20595 ;; This function uses a non-reentrant model
 20596 ;;
 20597                           
 20598                           
 20599                           ;psect for function _getDimmerLights_Status
 20600  1914                     _getDimmerLights_Status:	
 20601                           
 20602                           ;incstack = 0
 20603                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 20604                           ;getDimmerLights_Status@lights stored from wreg
 20605  1914  00F4               	movwf	getDimmerLights_Status@lights
 20606                           
 20607                           ;Dimmer_B1.c: 1208: DimmerLights_SelectPointer(lights);
 20608  1915  0874               	movf	getDimmerLights_Status@lights,w
 20609  1916  319A  223D         	fcall	_DimmerLights_SelectPointer
 20610                           
 20611                           ;Dimmer_B1.c: 1209: char status = DimmerLights->Status == 1 ? 1 : 0;
 20612  1918  0020               	movlb	0	; select bank0
 20613  1919  0A6C               	incf	_DimmerLights,w
 20614  191A  0086               	movwf	6
 20615  191B  3001               	movlw	1	; select bank2/3
 20616  191C  0087               	movwf	7
 20617  191D  3000               	movlw	0
 20618  191E  1801               	btfsc	1,0
 20619  191F  3001               	movlw	1
 20620  1920  00F5               	movwf	getDimmerLights_Status@status
 20621                           
 20622                           ;Dimmer_B1.c: 1210: return status;
 20623  1921  0875               	movf	getDimmerLights_Status@status,w
 20624  1922  0008               	return
 20625  1923                     __end_of_getDimmerLights_Status:	
 20626                           
 20627                           	psect	text143
 20628  1A3D                     __ptext143:	
 20629 ;; *************** function _DimmerLights_SelectPointer *****************
 20630 ;; Defined at:
 20631 ;;		line 654 in file "../src/Dimmer_B1.c"
 20632 ;; Parameters:    Size  Location     Type
 20633 ;;  lights          1    wreg     unsigned char 
 20634 ;; Auto vars:     Size  Location     Type
 20635 ;;  lights          1    3[COMMON] unsigned char 
 20636 ;; Return value:  Size  Location     Type
 20637 ;;		None               void
 20638 ;; Registers used:
 20639 ;;		wreg
 20640 ;; Tracked objects:
 20641 ;;		On entry : 0/0
 20642 ;;		On exit  : 0/0
 20643 ;;		Unchanged: 0/0
 20644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20649 ;;Total ram usage:        2 bytes
 20650 ;; Hardware stack levels used:    1
 20651 ;; Hardware stack levels required when called:    3
 20652 ;; This function calls:
 20653 ;;		Nothing
 20654 ;; This function is called by:
 20655 ;;		_setDimmerLights_SwOn
 20656 ;;		_setDimmerLights_SwOff
 20657 ;;		_setDimmerLights_DimmingOn
 20658 ;;		_setDimmerLights_Main
 20659 ;;		_DimmerLights_TwoPhase_Main
 20660 ;;		_getDimmerLights_Status
 20661 ;;		_setDimmerLights_DimmingRun
 20662 ;;		_setRF_AdjControl
 20663 ;;		_setDimmerLights_Status
 20664 ;; This function uses a non-reentrant model
 20665 ;;
 20666                           
 20667                           
 20668                           ;psect for function _DimmerLights_SelectPointer
 20669  1A3D                     _DimmerLights_SelectPointer:	
 20670                           
 20671                           ;incstack = 0
 20672                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 20673                           ;DimmerLights_SelectPointer@lights stored from wreg
 20674  1A3D  00F3               	movwf	DimmerLights_SelectPointer@lights
 20675                           
 20676                           ;Dimmer_B1.c: 656: if (lights == 1) {
 20677  1A3E  0873               	movf	DimmerLights_SelectPointer@lights,w
 20678  1A3F  3A01               	xorlw	1
 20679  1A40  1D03               	skipz
 20680  1A41  2A48               	goto	l6723
 20681                           
 20682                           ;Dimmer_B1.c: 657: DimmerLights = &DimmerLights1;
 20683  1A42  30BE               	movlw	_DimmerLights1& (0+255)
 20684  1A43  00F2               	movwf	??_DimmerLights_SelectPointer
 20685  1A44  0872               	movf	??_DimmerLights_SelectPointer,w
 20686  1A45  0020               	movlb	0	; select bank0
 20687  1A46  00EC               	movwf	_DimmerLights
 20688                           
 20689                           ;Dimmer_B1.c: 658: }
 20690  1A47  0008               	return
 20691  1A48                     l6723:	
 20692                           
 20693                           ;Dimmer_B1.c: 661: else if (lights == 2) {
 20694  1A48  0873               	movf	DimmerLights_SelectPointer@lights,w
 20695  1A49  3A02               	xorlw	2
 20696  1A4A  1D03               	skipz
 20697  1A4B  0008               	return
 20698                           
 20699                           ;Dimmer_B1.c: 662: DimmerLights = &DimmerLights2;
 20700  1A4C  30C7               	movlw	_DimmerLights2& (0+255)
 20701  1A4D  00F2               	movwf	??_DimmerLights_SelectPointer
 20702  1A4E  0872               	movf	??_DimmerLights_SelectPointer,w
 20703  1A4F  0020               	movlb	0	; select bank0
 20704  1A50  00EC               	movwf	_DimmerLights
 20705  1A51  0008               	return
 20706  1A52                     __end_of_DimmerLights_SelectPointer:	
 20707                           
 20708                           	psect	text144
 20709  1824                     __ptext144:	
 20710 ;; *************** function _DelayOff_Initialization *****************
 20711 ;; Defined at:
 20712 ;;		line 26 in file "../src/DelayOff_B1.c"
 20713 ;; Parameters:    Size  Location     Type
 20714 ;;		None
 20715 ;; Auto vars:     Size  Location     Type
 20716 ;;		None
 20717 ;; Return value:  Size  Location     Type
 20718 ;;		None               void
 20719 ;; Registers used:
 20720 ;;		wreg, status,2, status,0, pclath, cstack
 20721 ;; Tracked objects:
 20722 ;;		On entry : 0/0
 20723 ;;		On exit  : 0/0
 20724 ;;		Unchanged: 0/0
 20725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20730 ;;Total ram usage:        0 bytes
 20731 ;; Hardware stack levels used:    1
 20732 ;; Hardware stack levels required when called:    5
 20733 ;; This function calls:
 20734 ;;		_DlyOff_Initialization
 20735 ;; This function is called by:
 20736 ;;		_main
 20737 ;; This function uses a non-reentrant model
 20738 ;;
 20739                           
 20740                           
 20741                           ;psect for function _DelayOff_Initialization
 20742  1824                     _DelayOff_Initialization:	
 20743                           
 20744                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 20745                           
 20746                           ;incstack = 0
 20747                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20748  1824  3001               	movlw	1
 20749  1825  31A7  27E3  3198   	fcall	_DlyOff_Initialization
 20750                           
 20751                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 20752  1828  3002               	movlw	2
 20753  1829  31A7  27E3         	fcall	_DlyOff_Initialization
 20754  182B  0008               	return
 20755  182C                     __end_of_DelayOff_Initialization:	
 20756                           
 20757                           	psect	text145
 20758  27E3                     __ptext145:	
 20759 ;; *************** function _DlyOff_Initialization *****************
 20760 ;; Defined at:
 20761 ;;		line 56 in file "../src/DelayOff_B1.c"
 20762 ;; Parameters:    Size  Location     Type
 20763 ;;  sw              1    wreg     unsigned char 
 20764 ;; Auto vars:     Size  Location     Type
 20765 ;;  sw              1    4[COMMON] unsigned char 
 20766 ;; Return value:  Size  Location     Type
 20767 ;;		None               void
 20768 ;; Registers used:
 20769 ;;		wreg, status,2, status,0, pclath, cstack
 20770 ;; Tracked objects:
 20771 ;;		On entry : 0/0
 20772 ;;		On exit  : 0/0
 20773 ;;		Unchanged: 0/0
 20774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20778 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20779 ;;Total ram usage:        1 bytes
 20780 ;; Hardware stack levels used:    1
 20781 ;; Hardware stack levels required when called:    4
 20782 ;; This function calls:
 20783 ;;		_DelayOffPointSelect
 20784 ;; This function is called by:
 20785 ;;		_DelayOff_Initialization
 20786 ;; This function uses a non-reentrant model
 20787 ;;
 20788                           
 20789                           
 20790                           ;psect for function _DlyOff_Initialization
 20791  27E3                     _DlyOff_Initialization:	
 20792                           
 20793                           ;incstack = 0
 20794                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20795                           ;DlyOff_Initialization@sw stored from wreg
 20796  27E3  00F4               	movwf	DlyOff_Initialization@sw
 20797                           
 20798                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 20799  27E4  0874               	movf	DlyOff_Initialization@sw,w
 20800  27E5  319A  2228         	fcall	_DelayOffPointSelect
 20801  27E7  0008               	return
 20802  27E8                     __end_of_DlyOff_Initialization:	
 20803                           
 20804                           	psect	text146
 20805  1A28                     __ptext146:	
 20806 ;; *************** function _DelayOffPointSelect *****************
 20807 ;; Defined at:
 20808 ;;		line 7 in file "../src/DelayOff_B1.c"
 20809 ;; Parameters:    Size  Location     Type
 20810 ;;  sw              1    wreg     unsigned char 
 20811 ;; Auto vars:     Size  Location     Type
 20812 ;;  sw              1    3[COMMON] unsigned char 
 20813 ;; Return value:  Size  Location     Type
 20814 ;;		None               void
 20815 ;; Registers used:
 20816 ;;		wreg
 20817 ;; Tracked objects:
 20818 ;;		On entry : 0/0
 20819 ;;		On exit  : 0/0
 20820 ;;		Unchanged: 0/0
 20821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20824 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20825 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20826 ;;Total ram usage:        2 bytes
 20827 ;; Hardware stack levels used:    1
 20828 ;; Hardware stack levels required when called:    3
 20829 ;; This function calls:
 20830 ;;		Nothing
 20831 ;; This function is called by:
 20832 ;;		_DlyOff_Initialization
 20833 ;;		_DlyOff_Main
 20834 ;;		_setDelayOff_GO
 20835 ;;		_getDelayOff_GO
 20836 ;; This function uses a non-reentrant model
 20837 ;;
 20838                           
 20839                           
 20840                           ;psect for function _DelayOffPointSelect
 20841  1A28                     _DelayOffPointSelect:	
 20842                           
 20843                           ;incstack = 0
 20844                           ; Regs used in _DelayOffPointSelect: [wreg]
 20845                           ;DelayOffPointSelect@sw stored from wreg
 20846  1A28  00F3               	movwf	DelayOffPointSelect@sw
 20847                           
 20848                           ;DelayOff_B1.c: 9: if (sw == 1) {
 20849  1A29  0873               	movf	DelayOffPointSelect@sw,w
 20850  1A2A  3A01               	xorlw	1
 20851  1A2B  1D03               	skipz
 20852  1A2C  2A33               	goto	l6699
 20853                           
 20854                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 20855  1A2D  30E2               	movlw	_DlySw1& (0+255)
 20856  1A2E  00F2               	movwf	??_DelayOffPointSelect
 20857  1A2F  0872               	movf	??_DelayOffPointSelect,w
 20858  1A30  0021               	movlb	1	; select bank1
 20859  1A31  00EA               	movwf	_DelayOff^(0+128)
 20860                           
 20861                           ;DelayOff_B1.c: 11: }
 20862  1A32  0008               	return
 20863  1A33                     l6699:	
 20864                           
 20865                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 20866  1A33  0873               	movf	DelayOffPointSelect@sw,w
 20867  1A34  3A02               	xorlw	2
 20868  1A35  1D03               	skipz
 20869  1A36  0008               	return
 20870                           
 20871                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 20872  1A37  30E7               	movlw	_DlySw2& (0+255)
 20873  1A38  00F2               	movwf	??_DelayOffPointSelect
 20874  1A39  0872               	movf	??_DelayOffPointSelect,w
 20875  1A3A  0021               	movlb	1	; select bank1
 20876  1A3B  00EA               	movwf	_DelayOff^(0+128)
 20877  1A3C  0008               	return
 20878  1A3D                     __end_of_DelayOffPointSelect:	
 20879                           
 20880                           	psect	text147
 20881  12A6                     __ptext147:	
 20882 ;; *************** function _Buzzer_Main *****************
 20883 ;; Defined at:
 20884 ;;		line 46 in file "../src/Buzzer_B1.c"
 20885 ;; Parameters:    Size  Location     Type
 20886 ;;		None
 20887 ;; Auto vars:     Size  Location     Type
 20888 ;;		None
 20889 ;; Return value:  Size  Location     Type
 20890 ;;		None               void
 20891 ;; Registers used:
 20892 ;;		wreg, status,2, status,0
 20893 ;; Tracked objects:
 20894 ;;		On entry : 0/0
 20895 ;;		On exit  : 0/0
 20896 ;;		Unchanged: 0/0
 20897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20900 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20901 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20902 ;;Total ram usage:        1 bytes
 20903 ;; Hardware stack levels used:    1
 20904 ;; Hardware stack levels required when called:    3
 20905 ;; This function calls:
 20906 ;;		Nothing
 20907 ;; This function is called by:
 20908 ;;		_main
 20909 ;; This function uses a non-reentrant model
 20910 ;;
 20911                           
 20912                           
 20913                           ;psect for function _Buzzer_Main
 20914  12A6                     _Buzzer_Main:	
 20915                           
 20916                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 20917                           
 20918                           ;incstack = 0
 20919                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 20920  12A6  0021               	movlb	1	; select bank1
 20921  12A7  1CDC               	btfss	_Buz1^(0+128),1
 20922  12A8  0008               	return
 20923                           
 20924                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 20925  12A9  3001               	movlw	1
 20926  12AA  07DD               	addwf	(_Buz1^(0+128)+1),f
 20927  12AB  3000               	movlw	0
 20928  12AC  3DDE               	addwfc	((_Buz1+1)^(0+128)+1),f
 20929                           
 20930                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 20931  12AD  0863               	movf	((_Buz1+1)^(0+128)+6),w
 20932  12AE  025E               	subwf	((_Buz1+1)^(0+128)+1),w
 20933  12AF  1D03               	skipz
 20934  12B0  2AB3               	goto	u9325
 20935  12B1  0862               	movf	(_Buz1^(0+128)+6),w
 20936  12B2  025D               	subwf	(_Buz1^(0+128)+1),w
 20937  12B3                     u9325:	
 20938  12B3  1C03               	skipc
 20939  12B4  0008               	return
 20940                           
 20941                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 20942  12B5  01DD               	clrf	(_Buz1^(0+128)+1)
 20943  12B6  01DE               	clrf	((_Buz1+1)^(0+128)+1)
 20944                           
 20945                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 20946  12B7  12DC               	bcf	_Buz1^(0+128),5
 20947  12B8  0020               	movlb	0	; select bank0
 20948  12B9  1D8D               	btfss	13,3	;volatile
 20949  12BA  2ABD               	goto	l8981
 20950  12BB  0021               	movlb	1	; select bank1
 20951  12BC  16DC               	bsf	_Buz1^(0+128),5
 20952  12BD                     l8981:	
 20953                           
 20954                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 20955  12BD  0021               	movlb	1	; select bank1
 20956  12BE  1ADC               	btfsc	_Buz1^(0+128),5
 20957  12BF  2AE5               	goto	l110
 20958                           
 20959                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 20960  12C0  08DF               	movf	(_Buz1^(0+128)+3),f
 20961  12C1  1D03               	skipz
 20962  12C2  2AE1               	goto	l111
 20963                           
 20964                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 20965  12C3  1DDC               	btfss	_Buz1^(0+128),3
 20966  12C4  2AD1               	goto	l112
 20967                           
 20968                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 20969  12C5  11DC               	bcf	_Buz1^(0+128),3
 20970                           
 20971                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 20972  12C6  0860               	movf	(_Buz1^(0+128)+4),w
 20973  12C7  00F2               	movwf	??_Buzzer_Main
 20974  12C8  0872               	movf	??_Buzzer_Main,w
 20975  12C9  00DF               	movwf	(_Buz1^(0+128)+3)
 20976                           
 20977                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 20978  12CA  0865               	movf	((_Buz1+1)^(0+128)+8),w
 20979  12CB  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 20980  12CC  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 20981  12CD  0864               	movf	(_Buz1^(0+128)+8),w
 20982  12CE  01E2               	clrf	(_Buz1^(0+128)+6)
 20983  12CF  07E2               	addwf	(_Buz1^(0+128)+6),f
 20984                           
 20985                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 20986  12D0  0008               	return
 20987  12D1                     l112:	
 20988  12D1  1E5C               	btfss	_Buz1^(0+128),4
 20989  12D2  2ADF               	goto	l114
 20990                           
 20991                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 20992  12D3  125C               	bcf	_Buz1^(0+128),4
 20993                           
 20994                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 20995  12D4  0861               	movf	(_Buz1^(0+128)+5),w
 20996  12D5  00F2               	movwf	??_Buzzer_Main
 20997  12D6  0872               	movf	??_Buzzer_Main,w
 20998  12D7  00DF               	movwf	(_Buz1^(0+128)+3)
 20999                           
 21000                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 21001  12D8  0867               	movf	((_Buz1+1)^(0+128)+10),w
 21002  12D9  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 21003  12DA  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 21004  12DB  0866               	movf	(_Buz1^(0+128)+10),w
 21005  12DC  01E2               	clrf	(_Buz1^(0+128)+6)
 21006  12DD  07E2               	addwf	(_Buz1^(0+128)+6),f
 21007                           
 21008                           ;Buzzer_B1.c: 62: } else {
 21009  12DE  0008               	return
 21010  12DF                     l114:	
 21011                           
 21012                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 21013  12DF  10DC               	bcf	_Buz1^(0+128),1
 21014                           
 21015                           ;Buzzer_B1.c: 64: }
 21016                           ;Buzzer_B1.c: 65: } else {
 21017  12E0  0008               	return
 21018  12E1                     l111:	
 21019                           
 21020                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 21021  12E1  16DC               	bsf	_Buz1^(0+128),5
 21022                           
 21023                           ;Buzzer_B1.c: 68: RB3 = 1;
 21024  12E2  0020               	movlb	0	; select bank0
 21025  12E3  158D               	bsf	13,3	;volatile
 21026                           
 21027                           ;Buzzer_B1.c: 69: }
 21028                           ;Buzzer_B1.c: 70: } else {
 21029  12E4  0008               	return
 21030  12E5                     l110:	
 21031                           
 21032                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 21033  12E5  12DC               	bcf	_Buz1^(0+128),5
 21034                           
 21035                           ;Buzzer_B1.c: 73: RB3 = 0;
 21036  12E6  0020               	movlb	0	; select bank0
 21037  12E7  118D               	bcf	13,3	;volatile
 21038                           
 21039                           ;Buzzer_B1.c: 75: Buz1.Count--;
 21040  12E8  3001               	movlw	1
 21041  12E9  0021               	movlb	1	; select bank1
 21042  12EA  02DF               	subwf	(_Buz1^(0+128)+3),f
 21043  12EB  0008               	return
 21044  12EC                     __end_of_Buzzer_Main:	
 21045                           
 21046                           	psect	text148
 21047  27BD                     __ptext148:	
 21048 ;; *************** function _Buzzer_Initialization *****************
 21049 ;; Defined at:
 21050 ;;		line 11 in file "../src/Buzzer_B1.c"
 21051 ;; Parameters:    Size  Location     Type
 21052 ;;		None
 21053 ;; Auto vars:     Size  Location     Type
 21054 ;;		None
 21055 ;; Return value:  Size  Location     Type
 21056 ;;		None               void
 21057 ;; Registers used:
 21058 ;;		None
 21059 ;; Tracked objects:
 21060 ;;		On entry : 0/0
 21061 ;;		On exit  : 0/0
 21062 ;;		Unchanged: 0/0
 21063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21068 ;;Total ram usage:        0 bytes
 21069 ;; Hardware stack levels used:    1
 21070 ;; Hardware stack levels required when called:    3
 21071 ;; This function calls:
 21072 ;;		Nothing
 21073 ;; This function is called by:
 21074 ;;		_main
 21075 ;; This function uses a non-reentrant model
 21076 ;;
 21077                           
 21078                           
 21079                           ;psect for function _Buzzer_Initialization
 21080  27BD                     _Buzzer_Initialization:	
 21081                           
 21082                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 21083                           
 21084                           ;incstack = 0
 21085                           ; Regs used in _Buzzer_Initialization: []
 21086  27BD  0021               	movlb	1	; select bank1
 21087  27BE  145C               	bsf	_Buz1^(0+128),0
 21088  27BF  0008               	return
 21089  27C0                     __end_of_Buzzer_Initialization:	
 21090                           
 21091                           	psect	intentry
 21092  0004                     __pintentry:	
 21093 ;; *************** function _ISR *****************
 21094 ;; Defined at:
 21095 ;;		line 116 in file "../src/MCU_B1.c"
 21096 ;; Parameters:    Size  Location     Type
 21097 ;;		None
 21098 ;; Auto vars:     Size  Location     Type
 21099 ;;		None
 21100 ;; Return value:  Size  Location     Type
 21101 ;;		None               void
 21102 ;; Registers used:
 21103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21104 ;; Tracked objects:
 21105 ;;		On entry : 0/0
 21106 ;;		On exit  : 0/0
 21107 ;;		Unchanged: 0/0
 21108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21111 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21112 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21113 ;;Total ram usage:        1 bytes
 21114 ;; Hardware stack levels used:    1
 21115 ;; Hardware stack levels required when called:    2
 21116 ;; This function calls:
 21117 ;;		_IOC_ISR
 21118 ;;		_TMR1_ISR
 21119 ;; This function is called by:
 21120 ;;		Interrupt level 1
 21121 ;; This function uses a non-reentrant model
 21122 ;;
 21123                           
 21124  0004                     _ISR:	
 21125                           
 21126                           ;incstack = 0
 21127                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21128  0004  147E               	bsf	126,0	;set compiler interrupt flag
 21129  0005  3180               	pagesel	$
 21130  0006  0020               	movlb	0	; select bank0
 21131  0007  087F               	movf	127,w
 21132  0008  00F1               	movwf	??_ISR
 21133                           
 21134                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 21135  0009  0021               	movlb	1	; select bank1
 21136  000A  1C11               	btfss	17,0	;volatile
 21137  000B  2812               	goto	i1l9589
 21138  000C  0020               	movlb	0	; select bank0
 21139  000D  1C11               	btfss	17,0	;volatile
 21140  000E  2812               	goto	i1l9589
 21141                           
 21142                           ;MCU_B1.c: 126: TMR1_ISR();
 21143  000F  319C  24C3  3180   	fcall	_TMR1_ISR
 21144  0012                     i1l9589:	
 21145                           
 21146                           ;MCU_B1.c: 127: }
 21147                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 21148  0012  198B               	btfsc	11,3	;volatile
 21149  0013  1C0B               	btfss	11,0	;volatile
 21150  0014  281A               	goto	i1l1464
 21151  0015  0027               	movlb	7	; select bank7
 21152  0016  1D16               	btfss	22,2	;volatile
 21153  0017  281A               	goto	i1l1464
 21154                           
 21155                           ;MCU_B1.c: 139: IOC_ISR();
 21156  0018  3198  20A2         	fcall	_IOC_ISR
 21157  001A                     i1l1464:	
 21158                           ;MCU_B1.c: 140: }
 21159                           ;MCU_B1.c: 148: return;
 21160                           
 21161  001A  0871               	movf	??_ISR,w
 21162  001B  0020               	movlb	0	; select bank0
 21163  001C  00FF               	movwf	127
 21164  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 21165  001E  0009               	retfie
 21166  001F                     __end_of_ISR:	
 21167                           
 21168                           	psect	text150
 21169  1CC3                     __ptext150:	
 21170 ;; *************** function _TMR1_ISR *****************
 21171 ;; Defined at:
 21172 ;;		line 236 in file "../src/MCU_B1.c"
 21173 ;; Parameters:    Size  Location     Type
 21174 ;;		None
 21175 ;; Auto vars:     Size  Location     Type
 21176 ;;		None
 21177 ;; Return value:  Size  Location     Type
 21178 ;;		None               void
 21179 ;; Registers used:
 21180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21181 ;; Tracked objects:
 21182 ;;		On entry : 0/0
 21183 ;;		On exit  : 0/0
 21184 ;;		Unchanged: 0/0
 21185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21190 ;;Total ram usage:        0 bytes
 21191 ;; Hardware stack levels used:    1
 21192 ;; Hardware stack levels required when called:    1
 21193 ;; This function calls:
 21194 ;;		_DimmerLights_TMR_1
 21195 ;;		_DimmerLights_TMR_2
 21196 ;; This function is called by:
 21197 ;;		_ISR
 21198 ;; This function uses a non-reentrant model
 21199 ;;
 21200                           
 21201                           
 21202                           ;psect for function _TMR1_ISR
 21203  1CC3                     _TMR1_ISR:	
 21204                           
 21205                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 21206                           
 21207                           ;incstack = 0
 21208                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21209  1CC3  3190  207A  319C   	fcall	_DimmerLights_TMR_1
 21210                           
 21211                           ;MCU_B1.c: 259: DimmerLights_TMR_2();
 21212  1CC6  3190  20B2  319C   	fcall	_DimmerLights_TMR_2
 21213                           
 21214                           ;MCU_B1.c: 268: Timer1.Count++;
 21215  1CC9  3001               	movlw	1
 21216  1CCA  0022               	movlb	2	; select bank2
 21217  1CCB  07A6               	addwf	(_Timer1^(0+256)+1),f
 21218  1CCC  3000               	movlw	0
 21219  1CCD  3DA7               	addwfc	((_Timer1+1)^(0+256)+1),f
 21220                           
 21221                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 21222  1CCE  3001               	movlw	1
 21223  1CCF  3E25               	addlw	_Timer1& (0+255)
 21224  1CD0  0086               	movwf	6
 21225  1CD1  3001               	movlw	1	; select bank2/3
 21226  1CD2  0087               	movwf	7
 21227  1CD3  3F40               	moviw [0]fsr1
 21228  1CD4  3AC8               	xorlw	200
 21229  1CD5  1D03               	skipz
 21230  1CD6  2CD9               	goto	u942_25
 21231  1CD7  3F41               	moviw [1]fsr1
 21232  1CD8  3A00               	xorlw	0
 21233  1CD9                     u942_25:	
 21234  1CD9  1D03               	skipz
 21235  1CDA  2CDE               	goto	i1l9043
 21236                           
 21237                           ;MCU_B1.c: 270: Timer1.Count = 0;
 21238  1CDB  01A6               	clrf	(_Timer1^(0+256)+1)
 21239  1CDC  01A7               	clrf	((_Timer1+1)^(0+256)+1)
 21240                           
 21241                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 21242  1CDD  1425               	bsf	_Timer1^(0+256),0
 21243  1CDE                     i1l9043:	
 21244                           
 21245                           ;MCU_B1.c: 272: }
 21246                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 21247  1CDE  30FA               	movlw	250
 21248  1CDF  0020               	movlb	0	; select bank0
 21249  1CE0  0097               	movwf	23	;volatile
 21250                           
 21251                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 21252  1CE1  3038               	movlw	56
 21253  1CE2  0096               	movwf	22	;volatile
 21254                           
 21255                           ;MCU_B1.c: 276: TMR1IF = 0;
 21256  1CE3  1011               	bcf	17,0	;volatile
 21257  1CE4  0008               	return
 21258  1CE5                     __end_of_TMR1_ISR:	
 21259                           
 21260                           	psect	text151
 21261  10B2                     __ptext151:	
 21262 ;; *************** function _DimmerLights_TMR_2 *****************
 21263 ;; Defined at:
 21264 ;;		line 1685 in file "../src/Dimmer_B1.c"
 21265 ;; Parameters:    Size  Location     Type
 21266 ;;		None
 21267 ;; Auto vars:     Size  Location     Type
 21268 ;;		None
 21269 ;; Return value:  Size  Location     Type
 21270 ;;		None               void
 21271 ;; Registers used:
 21272 ;;		wreg, status,2, status,0
 21273 ;; Tracked objects:
 21274 ;;		On entry : 0/0
 21275 ;;		On exit  : 0/0
 21276 ;;		Unchanged: 0/0
 21277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21280 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21281 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21282 ;;Total ram usage:        1 bytes
 21283 ;; Hardware stack levels used:    1
 21284 ;; This function calls:
 21285 ;;		Nothing
 21286 ;; This function is called by:
 21287 ;;		_TMR1_ISR
 21288 ;; This function uses a non-reentrant model
 21289 ;;
 21290                           
 21291                           
 21292                           ;psect for function _DimmerLights_TMR_2
 21293  10B2                     _DimmerLights_TMR_2:	
 21294                           
 21295                           ;Dimmer_B1.c: 1687: if (DimmerIntr2.Start == 1) {
 21296                           
 21297                           ;incstack = 0
 21298                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 21299  10B2  0021               	movlb	1	; select bank1
 21300  10B3  1D30               	btfss	_DimmerIntr2^(0+128),2
 21301  10B4  28D8               	goto	i1l1024
 21302                           
 21303                           ;Dimmer_B1.c: 1688: DimmerIntr2.Count++;
 21304  10B5  3001               	movlw	1
 21305  10B6  00F0               	movwf	??_DimmerLights_TMR_2
 21306  10B7  0870               	movf	??_DimmerLights_TMR_2,w
 21307  10B8  07B2               	addwf	(_DimmerIntr2^(0+128)+2),f
 21308                           
 21309                           ;Dimmer_B1.c: 1690: if (DimmerIntr2.Count == DimmerIntr2.TuneEnd_Value) {
 21310  10B9  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21311  10BA  063F               	xorwf	(_DimmerIntr2^(0+128)+15),w
 21312  10BB  1D03               	skipz
 21313  10BC  28BF               	goto	i1l8491
 21314                           
 21315                           ;Dimmer_B1.c: 1691: DimmerIntr2.Count = 0;
 21316  10BD  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21317                           
 21318                           ;Dimmer_B1.c: 1692: DimmerIntr2.Start = 0;
 21319  10BE  1130               	bcf	_DimmerIntr2^(0+128),2
 21320  10BF                     i1l8491:	
 21321                           
 21322                           ;Dimmer_B1.c: 1693: }
 21323                           ;Dimmer_B1.c: 1697: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2_Value) {
 21324  10BF  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21325  10C0  063C               	xorwf	(_DimmerIntr2^(0+128)+12),w
 21326  10C1  1903               	btfsc	3,2
 21327                           
 21328                           ;Dimmer_B1.c: 1698: if (DimmerIntr2.ControlStatus == 1) {
 21329  10C2  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21330  10C3  28C6               	goto	i1l8497
 21331                           
 21332                           ;Dimmer_B1.c: 1699: RA7 = 0;
 21333  10C4  0020               	movlb	0	; select bank0
 21334  10C5  138C               	bcf	12,7	;volatile
 21335  10C6                     i1l8497:	
 21336                           
 21337                           ;Dimmer_B1.c: 1700: }
 21338                           ;Dimmer_B1.c: 1701: }
 21339                           ;Dimmer_B1.c: 1704: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3_Value) {
 21340  10C6  0021               	movlb	1	; select bank1
 21341  10C7  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21342  10C8  063D               	xorwf	(_DimmerIntr2^(0+128)+13),w
 21343  10C9  1903               	btfsc	3,2
 21344                           
 21345                           ;Dimmer_B1.c: 1705: if (DimmerIntr2.ControlStatus == 1) {
 21346  10CA  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21347  10CB  28CE               	goto	i1l8503
 21348                           
 21349                           ;Dimmer_B1.c: 1706: RA7 = 1;
 21350  10CC  0020               	movlb	0	; select bank0
 21351  10CD  178C               	bsf	12,7	;volatile
 21352  10CE                     i1l8503:	
 21353                           
 21354                           ;Dimmer_B1.c: 1707: }
 21355                           ;Dimmer_B1.c: 1708: }
 21356                           ;Dimmer_B1.c: 1711: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4_Value) {
 21357  10CE  0021               	movlb	1	; select bank1
 21358  10CF  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21359  10D0  063E               	xorwf	(_DimmerIntr2^(0+128)+14),w
 21360  10D1  1D03               	skipz
 21361  10D2  0008               	return
 21362                           
 21363                           ;Dimmer_B1.c: 1712: if (DimmerIntr2.ControlStatus == 1) {
 21364  10D3  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21365  10D4  0008               	return
 21366                           
 21367                           ;Dimmer_B1.c: 1713: RA7 = 0;
 21368  10D5  0020               	movlb	0	; select bank0
 21369  10D6  138C               	bcf	12,7	;volatile
 21370                           
 21371                           ;Dimmer_B1.c: 1714: }
 21372                           ;Dimmer_B1.c: 1717: }
 21373                           ;Dimmer_B1.c: 1719: } else {
 21374  10D7  0008               	return
 21375  10D8                     i1l1024:	
 21376                           
 21377                           ;Dimmer_B1.c: 1720: if (DimmerIntr2.GO == 1) {
 21378  10D8  1C30               	btfss	_DimmerIntr2^(0+128),0
 21379  10D9  0008               	return
 21380                           
 21381                           ;Dimmer_B1.c: 1721: DimmerIntr2.Count++;
 21382  10DA  3001               	movlw	1
 21383  10DB  00F0               	movwf	??_DimmerLights_TMR_2
 21384  10DC  0870               	movf	??_DimmerLights_TMR_2,w
 21385  10DD  07B2               	addwf	(_DimmerIntr2^(0+128)+2),f
 21386                           
 21387                           ;Dimmer_B1.c: 1722: if (DimmerIntr2.Count == 4) {
 21388  10DE  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21389  10DF  3A04               	xorlw	4
 21390  10E0  1D03               	skipz
 21391  10E1  0008               	return
 21392                           
 21393                           ;Dimmer_B1.c: 1723: DimmerIntr2.Count = 0;
 21394  10E2  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21395                           
 21396                           ;Dimmer_B1.c: 1724: DimmerIntr2.GO = 0;
 21397  10E3  1030               	bcf	_DimmerIntr2^(0+128),0
 21398                           
 21399                           ;Dimmer_B1.c: 1725: DimmerIntr2.Start = 1;
 21400  10E4  1530               	bsf	_DimmerIntr2^(0+128),2
 21401                           
 21402                           ;Dimmer_B1.c: 1727: if (DimmerIntr2.ControlStatus == 1) {
 21403  10E5  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21404  10E6  0008               	return
 21405                           
 21406                           ;Dimmer_B1.c: 1728: RA7 = 1;
 21407  10E7  0020               	movlb	0	; select bank0
 21408  10E8  178C               	bsf	12,7	;volatile
 21409  10E9  0008               	return
 21410  10EA                     __end_of_DimmerLights_TMR_2:	
 21411                           
 21412                           	psect	text152
 21413  107A                     __ptext152:	
 21414 ;; *************** function _DimmerLights_TMR_1 *****************
 21415 ;; Defined at:
 21416 ;;		line 1514 in file "../src/Dimmer_B1.c"
 21417 ;; Parameters:    Size  Location     Type
 21418 ;;		None
 21419 ;; Auto vars:     Size  Location     Type
 21420 ;;		None
 21421 ;; Return value:  Size  Location     Type
 21422 ;;		None               void
 21423 ;; Registers used:
 21424 ;;		wreg, status,2, status,0
 21425 ;; Tracked objects:
 21426 ;;		On entry : 0/0
 21427 ;;		On exit  : 0/0
 21428 ;;		Unchanged: 0/0
 21429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21432 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21433 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21434 ;;Total ram usage:        1 bytes
 21435 ;; Hardware stack levels used:    1
 21436 ;; This function calls:
 21437 ;;		Nothing
 21438 ;; This function is called by:
 21439 ;;		_TMR1_ISR
 21440 ;; This function uses a non-reentrant model
 21441 ;;
 21442                           
 21443                           
 21444                           ;psect for function _DimmerLights_TMR_1
 21445  107A                     _DimmerLights_TMR_1:	
 21446                           
 21447                           ;Dimmer_B1.c: 1517: if (DimmerIntr1.Start == 1) {
 21448                           
 21449                           ;incstack = 0
 21450                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 21451  107A  0021               	movlb	1	; select bank1
 21452  107B  1D20               	btfss	_DimmerIntr1^(0+128),2
 21453  107C  28A0               	goto	i1l1000
 21454                           
 21455                           ;Dimmer_B1.c: 1518: DimmerIntr1.Count++;
 21456  107D  3001               	movlw	1
 21457  107E  00F0               	movwf	??_DimmerLights_TMR_1
 21458  107F  0870               	movf	??_DimmerLights_TMR_1,w
 21459  1080  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 21460                           
 21461                           ;Dimmer_B1.c: 1520: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd_Value) {
 21462  1081  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21463  1082  062F               	xorwf	(_DimmerIntr1^(0+128)+15),w
 21464  1083  1D03               	skipz
 21465  1084  2887               	goto	i1l8429
 21466                           
 21467                           ;Dimmer_B1.c: 1521: DimmerIntr1.Count = 0;
 21468  1085  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21469                           
 21470                           ;Dimmer_B1.c: 1522: DimmerIntr1.Start = 0;
 21471  1086  1120               	bcf	_DimmerIntr1^(0+128),2
 21472  1087                     i1l8429:	
 21473                           
 21474                           ;Dimmer_B1.c: 1523: }
 21475                           ;Dimmer_B1.c: 1537: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2_Value) {
 21476  1087  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21477  1088  062C               	xorwf	(_DimmerIntr1^(0+128)+12),w
 21478  1089  1903               	btfsc	3,2
 21479                           
 21480                           ;Dimmer_B1.c: 1538: if (DimmerIntr1.ControlStatus == 1) {
 21481  108A  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21482  108B  288E               	goto	i1l8435
 21483                           
 21484                           ;Dimmer_B1.c: 1539: RB4 = 0;
 21485  108C  0020               	movlb	0	; select bank0
 21486  108D  120D               	bcf	13,4	;volatile
 21487  108E                     i1l8435:	
 21488                           
 21489                           ;Dimmer_B1.c: 1540: }
 21490                           ;Dimmer_B1.c: 1541: }
 21491                           ;Dimmer_B1.c: 1544: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3_Value) {
 21492  108E  0021               	movlb	1	; select bank1
 21493  108F  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21494  1090  062D               	xorwf	(_DimmerIntr1^(0+128)+13),w
 21495  1091  1903               	btfsc	3,2
 21496                           
 21497                           ;Dimmer_B1.c: 1545: if (DimmerIntr1.ControlStatus == 1) {
 21498  1092  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21499  1093  2896               	goto	i1l8441
 21500                           
 21501                           ;Dimmer_B1.c: 1546: RB4 = 1;
 21502  1094  0020               	movlb	0	; select bank0
 21503  1095  160D               	bsf	13,4	;volatile
 21504  1096                     i1l8441:	
 21505                           
 21506                           ;Dimmer_B1.c: 1547: }
 21507                           ;Dimmer_B1.c: 1548: }
 21508                           ;Dimmer_B1.c: 1551: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4_Value) {
 21509  1096  0021               	movlb	1	; select bank1
 21510  1097  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21511  1098  062E               	xorwf	(_DimmerIntr1^(0+128)+14),w
 21512  1099  1D03               	skipz
 21513  109A  0008               	return
 21514                           
 21515                           ;Dimmer_B1.c: 1552: if (DimmerIntr1.ControlStatus == 1) {
 21516  109B  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21517  109C  0008               	return
 21518                           
 21519                           ;Dimmer_B1.c: 1553: RB4 = 0;
 21520  109D  0020               	movlb	0	; select bank0
 21521  109E  120D               	bcf	13,4	;volatile
 21522                           
 21523                           ;Dimmer_B1.c: 1554: }
 21524                           ;Dimmer_B1.c: 1557: }
 21525                           ;Dimmer_B1.c: 1559: } else {
 21526  109F  0008               	return
 21527  10A0                     i1l1000:	
 21528                           
 21529                           ;Dimmer_B1.c: 1560: if (DimmerIntr1.GO == 1) {
 21530  10A0  1C20               	btfss	_DimmerIntr1^(0+128),0
 21531  10A1  0008               	return
 21532                           
 21533                           ;Dimmer_B1.c: 1561: DimmerIntr1.Count++;
 21534  10A2  3001               	movlw	1
 21535  10A3  00F0               	movwf	??_DimmerLights_TMR_1
 21536  10A4  0870               	movf	??_DimmerLights_TMR_1,w
 21537  10A5  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 21538                           
 21539                           ;Dimmer_B1.c: 1562: if (DimmerIntr1.Count == 4) {
 21540  10A6  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21541  10A7  3A04               	xorlw	4
 21542  10A8  1D03               	skipz
 21543  10A9  0008               	return
 21544                           
 21545                           ;Dimmer_B1.c: 1563: DimmerIntr1.Count = 0;
 21546  10AA  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21547                           
 21548                           ;Dimmer_B1.c: 1564: DimmerIntr1.GO = 0;
 21549  10AB  1020               	bcf	_DimmerIntr1^(0+128),0
 21550                           
 21551                           ;Dimmer_B1.c: 1565: DimmerIntr1.Start = 1;
 21552  10AC  1520               	bsf	_DimmerIntr1^(0+128),2
 21553                           
 21554                           ;Dimmer_B1.c: 1567: if (DimmerIntr1.ControlStatus == 1) {
 21555  10AD  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21556  10AE  0008               	return
 21557                           
 21558                           ;Dimmer_B1.c: 1568: RB4 = 1;
 21559  10AF  0020               	movlb	0	; select bank0
 21560  10B0  160D               	bsf	13,4	;volatile
 21561  10B1  0008               	return
 21562  10B2                     __end_of_DimmerLights_TMR_1:	
 21563                           
 21564                           	psect	text153
 21565  18A2                     __ptext153:	
 21566 ;; *************** function _IOC_ISR *****************
 21567 ;; Defined at:
 21568 ;;		line 395 in file "../src/MCU_B1.c"
 21569 ;; Parameters:    Size  Location     Type
 21570 ;;		None
 21571 ;; Auto vars:     Size  Location     Type
 21572 ;;		None
 21573 ;; Return value:  Size  Location     Type
 21574 ;;		None               void
 21575 ;; Registers used:
 21576 ;;		wreg, status,2, status,0, pclath, cstack
 21577 ;; Tracked objects:
 21578 ;;		On entry : 0/0
 21579 ;;		On exit  : 0/0
 21580 ;;		Unchanged: 0/0
 21581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21586 ;;Total ram usage:        0 bytes
 21587 ;; Hardware stack levels used:    1
 21588 ;; Hardware stack levels required when called:    1
 21589 ;; This function calls:
 21590 ;;		_DimmerLights_IOC_1
 21591 ;;		_DimmerLights_IOC_2
 21592 ;; This function is called by:
 21593 ;;		_ISR
 21594 ;; This function uses a non-reentrant model
 21595 ;;
 21596                           
 21597                           
 21598                           ;psect for function _IOC_ISR
 21599  18A2                     _IOC_ISR:	
 21600                           
 21601                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 21602                           
 21603                           ;incstack = 0
 21604                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 21605  18A2  0021               	movlb	1	; select bank1
 21606  18A3  1C4F               	btfss	_myMain^(0+128),0
 21607  18A4  28AA               	goto	i1l9053
 21608                           
 21609                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 21610  18A5  319E  2699  3198   	fcall	_DimmerLights_IOC_1
 21611                           
 21612                           ;MCU_B1.c: 408: DimmerLights_IOC_2();
 21613  18A8  319E  26C9         	fcall	_DimmerLights_IOC_2
 21614  18AA                     i1l9053:	
 21615                           
 21616                           ;MCU_B1.c: 416: }
 21617                           ;MCU_B1.c: 418: IOCBF2 = 0;
 21618  18AA  0027               	movlb	7	; select bank7
 21619  18AB  1116               	bcf	22,2	;volatile
 21620                           
 21621                           ;MCU_B1.c: 419: IOCIF = 0;
 21622  18AC  100B               	bcf	11,0	;volatile
 21623  18AD  0008               	return
 21624  18AE                     __end_of_IOC_ISR:	
 21625                           
 21626                           	psect	text154
 21627  1EC9                     __ptext154:	
 21628 ;; *************** function _DimmerLights_IOC_2 *****************
 21629 ;; Defined at:
 21630 ;;		line 1768 in file "../src/Dimmer_B1.c"
 21631 ;; Parameters:    Size  Location     Type
 21632 ;;		None
 21633 ;; Auto vars:     Size  Location     Type
 21634 ;;		None
 21635 ;; Return value:  Size  Location     Type
 21636 ;;		None               void
 21637 ;; Registers used:
 21638 ;;		wreg, status,2, status,0
 21639 ;; Tracked objects:
 21640 ;;		On entry : 0/0
 21641 ;;		On exit  : 0/0
 21642 ;;		Unchanged: 0/0
 21643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21646 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21647 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21648 ;;Total ram usage:        1 bytes
 21649 ;; Hardware stack levels used:    1
 21650 ;; This function calls:
 21651 ;;		Nothing
 21652 ;; This function is called by:
 21653 ;;		_IOC_ISR
 21654 ;; This function uses a non-reentrant model
 21655 ;;
 21656                           
 21657                           
 21658                           ;psect for function _DimmerLights_IOC_2
 21659  1EC9                     _DimmerLights_IOC_2:	
 21660                           
 21661                           ;Dimmer_B1.c: 1783: if (DimmerIntr2.Start == 0 && DimmerIntr2.GO == 0) {
 21662                           
 21663                           ;incstack = 0
 21664                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0]
 21665  1EC9  0021               	movlb	1	; select bank1
 21666  1ECA  1930               	btfsc	_DimmerIntr2^(0+128),2
 21667  1ECB  0008               	return
 21668  1ECC  1830               	btfsc	_DimmerIntr2^(0+128),0
 21669  1ECD  0008               	return
 21670                           
 21671                           ;Dimmer_B1.c: 1785: if (RB2 != DimmerIntr2.Status) {
 21672  1ECE  0E31               	swapf	(_DimmerIntr2^(0+128)+1),w
 21673  1ECF  0C89               	rrf	9,f
 21674  1ED0  3901               	andlw	1
 21675  1ED1  00F0               	movwf	??_DimmerLights_IOC_2
 21676  1ED2  3000               	movlw	0
 21677  1ED3  0020               	movlb	0	; select bank0
 21678  1ED4  190D               	btfsc	13,2	;volatile
 21679  1ED5  3001               	movlw	1
 21680  1ED6  0670               	xorwf	??_DimmerLights_IOC_2,w
 21681  1ED7  1903               	skipnz
 21682  1ED8  0008               	return
 21683                           
 21684                           ;Dimmer_B1.c: 1788: DimmerIntr2.Count = 0;
 21685  1ED9  0021               	movlb	1	; select bank1
 21686  1EDA  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21687                           
 21688                           ;Dimmer_B1.c: 1789: DimmerIntr2.GO = 1;
 21689  1EDB  1430               	bsf	_DimmerIntr2^(0+128),0
 21690                           
 21691                           ;Dimmer_B1.c: 1791: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 21692  1EDC  1E30               	btfss	_DimmerIntr2^(0+128),4
 21693  1EDD  1B30               	btfsc	_DimmerIntr2^(0+128),6
 21694                           
 21695                           ;Dimmer_B1.c: 1792: DimmerIntr2.Tune = 1;
 21696  1EDE  14B0               	bsf	_DimmerIntr2^(0+128),1
 21697                           
 21698                           ;Dimmer_B1.c: 1793: }
 21699                           ;Dimmer_B1.c: 1795: if (DimmerIntr2.Calculate == 1) {
 21700  1EDF  1FB1               	btfss	(_DimmerIntr2^(0+128)+1),7
 21701  1EE0  2EF2               	goto	i1l8541
 21702                           
 21703                           ;Dimmer_B1.c: 1796: DimmerIntr2.Calculate = 0;
 21704  1EE1  13B1               	bcf	(_DimmerIntr2^(0+128)+1),7
 21705                           
 21706                           ;Dimmer_B1.c: 1797: DimmerIntr2.TuneEnd_Value = DimmerIntr2.TuneEnd;
 21707  1EE2  083B               	movf	(_DimmerIntr2^(0+128)+11),w
 21708  1EE3  00F0               	movwf	??_DimmerLights_IOC_2
 21709  1EE4  0870               	movf	??_DimmerLights_IOC_2,w
 21710  1EE5  00BF               	movwf	(_DimmerIntr2^(0+128)+15)
 21711                           
 21712                           ;Dimmer_B1.c: 1798: DimmerIntr2.TuneValue2_Value = DimmerIntr2.TuneValue2;
 21713  1EE6  0838               	movf	(_DimmerIntr2^(0+128)+8),w
 21714  1EE7  00F0               	movwf	??_DimmerLights_IOC_2
 21715  1EE8  0870               	movf	??_DimmerLights_IOC_2,w
 21716  1EE9  00BC               	movwf	(_DimmerIntr2^(0+128)+12)
 21717                           
 21718                           ;Dimmer_B1.c: 1799: DimmerIntr2.TuneValue3_Value = DimmerIntr2.TuneValue3;
 21719  1EEA  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 21720  1EEB  00F0               	movwf	??_DimmerLights_IOC_2
 21721  1EEC  0870               	movf	??_DimmerLights_IOC_2,w
 21722  1EED  00BD               	movwf	(_DimmerIntr2^(0+128)+13)
 21723                           
 21724                           ;Dimmer_B1.c: 1800: DimmerIntr2.TuneValue4_Value = DimmerIntr2.TuneValue4;
 21725  1EEE  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 21726  1EEF  00F0               	movwf	??_DimmerLights_IOC_2
 21727  1EF0  0870               	movf	??_DimmerLights_IOC_2,w
 21728  1EF1  00BE               	movwf	(_DimmerIntr2^(0+128)+14)
 21729  1EF2                     i1l8541:	
 21730                           
 21731                           ;Dimmer_B1.c: 1801: }
 21732                           ;Dimmer_B1.c: 1811: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 21733  1EF2  12B1               	bcf	(_DimmerIntr2^(0+128)+1),5
 21734  1EF3  0020               	movlb	0	; select bank0
 21735  1EF4  1D0D               	btfss	13,2	;volatile
 21736  1EF5  0008               	return
 21737  1EF6  0021               	movlb	1	; select bank1
 21738  1EF7  16B1               	bsf	(_DimmerIntr2^(0+128)+1),5
 21739  1EF8  0008               	return
 21740  1EF9                     __end_of_DimmerLights_IOC_2:	
 21741                           
 21742                           	psect	text155
 21743  1E99                     __ptext155:	
 21744 ;; *************** function _DimmerLights_IOC_1 *****************
 21745 ;; Defined at:
 21746 ;;		line 1610 in file "../src/Dimmer_B1.c"
 21747 ;; Parameters:    Size  Location     Type
 21748 ;;		None
 21749 ;; Auto vars:     Size  Location     Type
 21750 ;;		None
 21751 ;; Return value:  Size  Location     Type
 21752 ;;		None               void
 21753 ;; Registers used:
 21754 ;;		wreg, status,2, status,0
 21755 ;; Tracked objects:
 21756 ;;		On entry : 0/0
 21757 ;;		On exit  : 0/0
 21758 ;;		Unchanged: 0/0
 21759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21763 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21764 ;;Total ram usage:        1 bytes
 21765 ;; Hardware stack levels used:    1
 21766 ;; This function calls:
 21767 ;;		Nothing
 21768 ;; This function is called by:
 21769 ;;		_IOC_ISR
 21770 ;; This function uses a non-reentrant model
 21771 ;;
 21772                           
 21773                           
 21774                           ;psect for function _DimmerLights_IOC_1
 21775  1E99                     _DimmerLights_IOC_1:	
 21776                           
 21777                           ;Dimmer_B1.c: 1624: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 21778                           
 21779                           ;incstack = 0
 21780                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0]
 21781  1E99  0021               	movlb	1	; select bank1
 21782  1E9A  1920               	btfsc	_DimmerIntr1^(0+128),2
 21783  1E9B  0008               	return
 21784  1E9C  1820               	btfsc	_DimmerIntr1^(0+128),0
 21785  1E9D  0008               	return
 21786                           
 21787                           ;Dimmer_B1.c: 1626: if (RB2 != DimmerIntr1.Status) {
 21788  1E9E  0E21               	swapf	(_DimmerIntr1^(0+128)+1),w
 21789  1E9F  0C89               	rrf	9,f
 21790  1EA0  3901               	andlw	1
 21791  1EA1  00F0               	movwf	??_DimmerLights_IOC_1
 21792  1EA2  3000               	movlw	0
 21793  1EA3  0020               	movlb	0	; select bank0
 21794  1EA4  190D               	btfsc	13,2	;volatile
 21795  1EA5  3001               	movlw	1
 21796  1EA6  0670               	xorwf	??_DimmerLights_IOC_1,w
 21797  1EA7  1903               	skipnz
 21798  1EA8  0008               	return
 21799                           
 21800                           ;Dimmer_B1.c: 1629: DimmerIntr1.Count = 0;
 21801  1EA9  0021               	movlb	1	; select bank1
 21802  1EAA  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21803                           
 21804                           ;Dimmer_B1.c: 1630: DimmerIntr1.GO = 1;
 21805  1EAB  1420               	bsf	_DimmerIntr1^(0+128),0
 21806                           
 21807                           ;Dimmer_B1.c: 1632: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 21808  1EAC  1E20               	btfss	_DimmerIntr1^(0+128),4
 21809  1EAD  1B20               	btfsc	_DimmerIntr1^(0+128),6
 21810                           
 21811                           ;Dimmer_B1.c: 1633: DimmerIntr1.Tune = 1;
 21812  1EAE  14A0               	bsf	_DimmerIntr1^(0+128),1
 21813                           
 21814                           ;Dimmer_B1.c: 1634: }
 21815                           ;Dimmer_B1.c: 1636: if (DimmerIntr1.Calculate == 1) {
 21816  1EAF  1FA1               	btfss	(_DimmerIntr1^(0+128)+1),7
 21817  1EB0  2EC2               	goto	i1l8479
 21818                           
 21819                           ;Dimmer_B1.c: 1637: DimmerIntr1.Calculate = 0;
 21820  1EB1  13A1               	bcf	(_DimmerIntr1^(0+128)+1),7
 21821                           
 21822                           ;Dimmer_B1.c: 1638: DimmerIntr1.TuneEnd_Value = DimmerIntr1.TuneEnd;
 21823  1EB2  082B               	movf	(_DimmerIntr1^(0+128)+11),w
 21824  1EB3  00F0               	movwf	??_DimmerLights_IOC_1
 21825  1EB4  0870               	movf	??_DimmerLights_IOC_1,w
 21826  1EB5  00AF               	movwf	(_DimmerIntr1^(0+128)+15)
 21827                           
 21828                           ;Dimmer_B1.c: 1639: DimmerIntr1.TuneValue2_Value = DimmerIntr1.TuneValue2;
 21829  1EB6  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 21830  1EB7  00F0               	movwf	??_DimmerLights_IOC_1
 21831  1EB8  0870               	movf	??_DimmerLights_IOC_1,w
 21832  1EB9  00AC               	movwf	(_DimmerIntr1^(0+128)+12)
 21833                           
 21834                           ;Dimmer_B1.c: 1640: DimmerIntr1.TuneValue3_Value = DimmerIntr1.TuneValue3;
 21835  1EBA  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 21836  1EBB  00F0               	movwf	??_DimmerLights_IOC_1
 21837  1EBC  0870               	movf	??_DimmerLights_IOC_1,w
 21838  1EBD  00AD               	movwf	(_DimmerIntr1^(0+128)+13)
 21839                           
 21840                           ;Dimmer_B1.c: 1641: DimmerIntr1.TuneValue4_Value = DimmerIntr1.TuneValue4;
 21841  1EBE  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 21842  1EBF  00F0               	movwf	??_DimmerLights_IOC_1
 21843  1EC0  0870               	movf	??_DimmerLights_IOC_1,w
 21844  1EC1  00AE               	movwf	(_DimmerIntr1^(0+128)+14)
 21845  1EC2                     i1l8479:	
 21846                           
 21847                           ;Dimmer_B1.c: 1642: }
 21848                           ;Dimmer_B1.c: 1652: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 21849  1EC2  12A1               	bcf	(_DimmerIntr1^(0+128)+1),5
 21850  1EC3  0020               	movlb	0	; select bank0
 21851  1EC4  1D0D               	btfss	13,2	;volatile
 21852  1EC5  0008               	return
 21853  1EC6  0021               	movlb	1	; select bank1
 21854  1EC7  16A1               	bsf	(_DimmerIntr1^(0+128)+1),5
 21855  1EC8  0008               	return
 21856  1EC9                     __end_of_DimmerLights_IOC_1:	
 21857  007E                     btemp	set	126	;btemp
 21858  007E                     pic14e$flags	set	126
 21859  007E                     wtemp	set	126
 21860  007E                     wtemp0	set	126
 21861  0080                     wtemp1	set	128
 21862  0082                     wtemp2	set	130
 21863  0084                     wtemp3	set	132
 21864  0086                     wtemp4	set	134
 21865  0088                     wtemp5	set	136
 21866  007F                     wtemp6	set	127
 21867  007E                     ttemp	set	126
 21868  007E                     ttemp0	set	126
 21869  0081                     ttemp1	set	129
 21870  0084                     ttemp2	set	132
 21871  0087                     ttemp3	set	135
 21872  007F                     ttemp4	set	127
 21873  007E                     ltemp	set	126
 21874  007E                     ltemp0	set	126
 21875  0082                     ltemp1	set	130
 21876  0086                     ltemp2	set	134
 21877  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         295
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     76      78
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      0      80
    BANK4            80      4      57
    BANK5            80      0      32
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights2(BANK3[9]), DimmerLights1(BANK3[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK5[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_getTemp_AD
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setTemp_Main->___lwdiv
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setControl_Lights_Table->_setRF_AdjControl
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerIntr_ValueCalculate->_Division
    _DimmerIntr_Initialization->_Division
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _DimmerLights_TwoPhase_Main->_DimmerLights_AssignationDimming
    _DimmerLights_AssignationDimming->_setDimmerIntr_MaxmumValue
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _DimmerLights_DimmingFunction->_DimmerIntr_ValueCalculate
    _DimmerIntr_ValueCalculate->_Division
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  181915
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1913
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              6 COMMON     4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              6 COMMON     2     2      0
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6429
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    6429
                                             61 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4828
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4828
                                             11 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   50311
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   50311
                                             74 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
                            _setData
 ---------------------------------------------------------------------------------
 (3) _setData                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   45880
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4671
                                             61 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   41014
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     338
                                              6 COMMON     4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11472
                                             69 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   23710
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
                             _setBuz
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2438
                                              0 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      70
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2285
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    2066
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1936
                                              6 COMMON     2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1726
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3694
                                              9 COMMON     1     1      0
                                              6 BANK0      8     8      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   68979
       _DimmerLights_DimmingFunction
         _DimmerLights_TwoPhase_Main
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   51315
                                             73 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   29582
                                             69 BANK0      4     3      1
          _DimmerIntr_ValueCalculate
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     355
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3719
                                             61 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      71
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   21214
                                             66 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3161
                                             61 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     355
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_TwoPhase_Main                           1     1      0   16428
                                             65 BANK0      1     1      0
    _DimmerLights_AssignationDimming
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _DimmerLights_AssignationDimming                      4     4      0   16322
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             58 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     355
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0     981
                                              5 BANK0      2     2      0
          _DimmerIntr_ValueCalculate
 ---------------------------------------------------------------------------------
 (4) _DimmerIntr_ValueCalculate                            3     3      0     919
                                              2 BANK0      3     3      0
                           _Division
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   28004
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   28004
                                             58 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11874
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15251
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3214
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (5) _Division                                             5     4      1     857
                                              7 COMMON     3     2      1
                                              0 BANK0      2     2      0
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (6) ___lbdiv                                              5     4      1     345
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5400
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5400
                                             61 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             58 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 6     6      0    2332
                                              9 COMMON     1     1      0
                                              6 BANK0      5     5      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
       _DimmerIntr_ValueCalculate
         _Division
           ___lbdiv
     _DimmerLights_TwoPhase_Main
       _DimmerLights_AssignationDimming
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_Status
           _DimmerLights_SelectPointer
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setMemory_Modify
       _DimmerLights_SelectPointer
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _DimmerIntr_ValueCalculate
           _Division
             ___lbdiv
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
     _DimmerLights_IOC_2
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      39      13       71.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      20      15       40.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1A3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1A3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Mar 25 17:15:14 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1A67                            ___bmul@product 0074  
               getMain_Lights_Count@count 0075                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1D29                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _u1 0220  
                                      _Sw 006D                            setTemp_Main@AD 0065  
                     ___wmul@multiplicand 0074                      _getDimmerLights_Line 1950  
                  __end_of_setDelayOff_GO 0BF2                              ___ftadd@exp1 0045  
                            ___ftadd@exp2 0044                    setRF_AdjControl@status 0077  
                __size_of_getRF_KeyStatus 000E                      _setDimmerLights_Main 179B  
                    _setDimmerLights_Line 1B12                              ___ftadd@sign 0043  
                                     l100 131B                                       l110 12E5  
                                     l102 132D                                       l111 12E1  
                                     l112 12D1                                       l114 12DF  
                                     l331 1B4B                      _setDimmerLights_SwOn 0784  
                                     l332 1B4D                                       l263 08CC  
                                     l375 1D75                                       l762 0E00  
                                     l763 0E54                                       l589 095D  
                                     l781 1A26                                       l928 0FBE  
                                     l962 1957                                       l963 195D  
                                     l957 1B1F                                       l888 1F0F  
                                     _GIE 005F                                       _CRC 00E8  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000B                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _LED 00EB                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00C0  
                                     _ISR 0004                                       _WDT 012A  
                                     _Cmd 00E9              getDimmerLights_Status@lights 0074  
                                     _Sw1 01D0                                       _Sw2 01D9  
              ??_setDimmerIntr_Dimming_RF 0073                ??_setDimmerIntr_Dimming_Sw 0073  
         setDimmerIntr_Dimming_RF@command 0072                  __end_of_CC2500_WriteByte 1B58  
                   _Buzzer_Initialization 27BD                           __end_of_ADC_Set 181D  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0075       __end_of_setDimmerIntr_ControlStatus 1DE8  
             _setDimmerIntr_ControlStatus 1DBF                         ??_getSw_KeyStatus 0072  
                                    ?_ISR 0070                              ___ftdiv@cntr 0030  
                         __end_of_IOC_ISR 18AE                     _setDimmerLights_OnOff 0F42  
        setDimmerLights_DimmingRun@lights 0076                                Load_Main@i 0028  
                            ___ftdiv@sign 0035                                      l2100 047C  
                                    l1061 0CB6                                      l1070 0CE2  
                                    l1080 0D16                                      l1064 0CC3  
                                    l1225 120F                                      l1226 1216  
                                    l1075 0D18                                      l1059 0CC5  
                                    l1077 0D0A                                      l1501 11D7  
                                    l1086 0D33                                      l1191 1C35  
                                    l1192 1C3E                                      l3130 1C50  
                                    l1515 1E0B                                      l1525 0A50  
                                    l2094 0529                                      l3320 0403  
                                    l2507 1839                                      l1740 1E4F  
                                    l1716 1120                                      l1741 1E68  
                         __end_of_IOC_Set 188C                                      l2525 15A9  
                                    l1910 008B                                      l1911 0087  
                                    l1912 0082                                      l1745 1E64  
                                    l2545 0C08                                      l2481 06E8  
                                    l2538 1F59                                      l2482 072C  
                                    l3291 15DD                                      l1772 0600  
                                    l1908 01ED                                      l2556 0C8C  
                                    l1781 1A66                                      l2477 0780  
                                    l1918 01C9                                      l1919 01C7  
                                    l3297 15F4                            _Load_Main$4636 0023  
                                    l2588 083A                                      l2917 035A  
                                    l2919 0238                                      l7121 1DAB  
                                    l7113 1B07                                      l7141 0878  
                                    l7133 0832                                      l7221 1D86  
                                    l7127 082C                                      l7223 1D91  
                                    l7207 1C1F                                      l2895 1AC2  
                                    l7057 114F                                      l6601 15BA  
                                    l7129 082D                                      l7209 1C24  
                                    l6611 15E2                                      l6603 15C4  
                   _setDimmerLights_SwOff 1122                                      l6613 15EA  
                                    l6605 15C9                                      l7253 1D5F  
                                    l7093 0BE8                                      l8141 1B3E  
                                    l6711 1AF0                                      l7511 1E53  
                                    l7271 1A54                                      l7079 0BA4  
                                    l8039 1900                                      l7351 1FBA  
                                    l8127 1ADB                                      l7089 0BD4  
                                    l8137 1B35                                      l6723 1A48  
                                    l6715 1AF9                                      l6803 03F5  
                                    l7275 1A61                                      l8163 1F83  
                                    l8155 1F65                                      l8251 1BE1  
                                    l9203 16B3                                      l6813 0427  
                                    l6805 03FF                                      l7509 1E4B  
                                    l7621 198D                                      l6733 19D7  
                                    l8157 1F71                                      l8261 1BEE  
                                    l6823 0442                                      l7519 1E60  
                                    l7615 1982                                      l8167 1F8C  
                                    l8263 1BF2                                      l9151 0983  
                                    l9207 16C2                                      l6809 0415  
                                    l6833 0D4C                                      l6905 0F12  
                                    l6729 19D1                                      l7545 14FB  
                                    l7553 1507                                      l6763 038C  
                                    l7619 1988                                      l7563 1517  
                                    l9163 09AA                                      l6597 15B3  
                                    l6773 03A2                                      l6861 0DBC  
                                    l6853 0DA3                                      l6909 0F1A  
                                    l6933 0A71                                      l7821 1FEB  
                                    l7469 1DD4                                      l7477 1A72  
                                    l7549 1501                                      l6791 03CF  
                                    l6767 0393                                      l6839 0D62  
                                    l6951 0AA1                                      l7831 1FFA  
                                    l7823 1FED                                      l7487 1A1D  
                                    l7575 1535                                      l7583 1541  
                                    l7559 1511                                      l7567 151D  
                                    l8623 1BB4                                      l9159 09A2  
                                    l6793 03D9                                      l6785 03BC  
                                    l6881 0EBB                                      l6961 0AC5  
                                    l6953 0AAF                                      l7833 1FFE  
                                    l7809 1FD7                                      l8617 1BAC  
                                    l6699 1A33                                      l6795 03DE  
                                    l6875 0EA5                                      l6963 0AC8  
                                    l7579 153B                                      l8619 1BAF  
                                    l9179 09D1                                      l9195 1695  
                                    l6797 03E2                                      l6893 0EF6  
                   _myMain_Initialization 1906                                      l9703 1384  
                                    l6967 0AD6                                      l6959 0ABC  
                                    l9199 16A4                                      l9801 07B2  
                                    l6897 0EFE                                      l9707 138C  
                                    l9803 07B7                                      l9813 07DF  
                                    l9901 194E                                      l9815 07E5  
                                    l8863 1AC7                                      l9681 1355  
                                    l9817 07EF                                      l8961 1C4A  
                                    _CFGS 0CAE                                      l9691 135D  
                                    l9675 134A                                      l9747 1CF0  
                                    l9931 0AF6                                      l8867 1ACD  
                                    l8981 12BD                                      l9693 1369  
                                    l9837 1CA9                                      l9791 07A1  
                                    l9839 1CB2                                      l9863 1B82  
                                    l9935 0AFB                                      l9919 118F  
                            __CFG_WDTE$ON 0000                                      l9793 07A4  
                                    l9849 1CC1                                      l9857 1B79  
                                    l9873 1D10                                      l9961 1D3C  
                                    l9699 137B                                      l9859 1B7C  
                                    l9875 1D13                                      l9955 1D33  
                                    l9947 0B52                                      l9957 1D36  
                                    l9879 1D19                                      l9983 1243  
                                    l9993 1253                                      l9985 1246  
                                    l9995 1256                                      l9989 124C  
                                    l9999 125C                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u6015 0A78  
                                    u5315 15FB                                      _PEIE 005E  
                                    u5245 15BF                                      u6045 0AA2  
                                    u5265 15D8                                      u6075 0ABD  
                                    u6315 0BB0                                      u5285 15E5  
                                    u6505 1D7B                                      u5715 03E3  
                                    u5655 03BD                                      u5815 0D74  
                                    u5745 03F6                                      u5825 0D84  
                                    u5905 0ED7                                      u7505 1AB5  
                                    u5835 0DA4                                      u5685 03D0  
                                    u5845 0DB3                                      u5925 0EFF  
                                    u5855 0DBD                                      u5935 0F05  
                                    u7535 1B95                                      u9325 12B3  
                                    u5965 0F1B                                      u7805 1F7C  
                                    u5975 0F21                                      u5895 0EC7  
                                    u7815 1F84                                      u9285 1C51  
                                    u7775 1F68                                      u9295 1C56  
                                    u9705 16AA                                      u7795 1F72  
                                    u9635 09C1                                      u9715 16B9  
                                    u9725 16C8                                      u9585 0992  
                                    _LWLO 0CAD                                      u9685 168C  
                                    u9695 169B                                      _RSSI 012E  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1B70                _setDimmerLights_DimmingRun 1B58  
                                    _Buz1 00DC                                      _Load 0132  
                                    _Temp 015A                                      _main 1492  
                            ___ftpack@arg 0072                       __end_of_DlyOff_Main 0964  
                         __end_of_RF_Main 27C9                              ___ftpack@exp 0075  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1861  
                                    ltemp 007E             __size_of_setRF_Initialization 000A  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E         setDimmerLights_SwOn@dimmingStatus 0026  
    __end_of_DimmerLights_DimmingFunction 0D35     __size_of_DimmerLights_DimmingFunction 00A8  
            _DimmerLights_DimmingFunction 0C8D                __end_of_setRFSW_AdjControl 0B66  
                       ___bmul@multiplier 0075                              ___ftmul@cntr 0034  
                            ___ftmul@sign 0035              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2730 0075      _getDimmerLights_Allow_Condition$2731 0076  
    _getDimmerLights_Allow_Condition$2729 0074                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 0071                              ___fttol@exp1 0053  
              ?_DimmerIntr_ValueCalculate 0070                              ___fttol@lval 004F  
       setDimmerLights_DimmingRun@command 0074   __end_of_getDimmerLights_Allow_Condition 2000  
__size_of_getDimmerLights_Allow_Condition 0037         ??_getDimmerLights_Allow_Condition 0073  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1FC9  
                  _getDimmerLights_Status 1914                        ??_getDimmer_LoadGO 0072  
                        __end_of_LED_Main 18DE                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 012C                                     l10103 0C17  
                                   l10121 0C69                                     l10113 0C59  
                                   l10105 0C1D                                     l10123 0C6D  
                                   l10115 0C5D                                     l10213 1636  
                                   l10141 08A6                                     l10117 0C61  
                                   l10109 0C38                                     l11021 1102  
                                   l10063 1467                                     l10303 1403  
                                   l10215 164C                                     l10135 089D  
                                   l10119 0C65                                     l10127 0C71  
                                   l10161 08D6                                     l10137 08A0  
                                   l10251 0F83                                     l10155 08B5  
                                   l10253 0F8C                                     l10261 0FA0  
                                   l11221 055D                                     l11125 0163  
                                   l11133 0189                                     l11053 0069  
                                   l10173 08E9                                     l10165 08DC  
                                   l10421 157B                                     l11215 054E  
                                   l11119 0154                                     l11071 008A  
                                   l10191 161E                                     l10167 08E0  
                                   l10159 08D3                                     l10095 0BF3  
                                   l10257 0F96                                     l11233 0593  
                                   l11225 056C                                     l11129 017D  
                                   l10193 1621                                     l10169 08E3  
                                   l10425 1584                                     l10409 1562  
                                   l11305 14B6                                     l10611 0D28  
                                   l10275 0FCC                                     l10515 17C1  
                                   l11251 05D4                                     l11235 056F  
                                   l11139 0199                                     l10517 17C7  
                                   l11253 05B0                                     l11237 059B  
                                   l10373 1DF6                                     l11149 01AF  
                                   l11093 00E0                                     l10197 1627  
                                   l11309 14C1                                     l10295 0FFD  
                                   l10279 0FD0                                     l10527 17ED  
                                   l11255 05DC                                     l11263 05F6  
                                   l11087 00AE                                     l10529 17F3  
                                   l11257 05E6                                     l11185 01DC  
                                   l10705 048E                                     l10627 13C0  
                                   l10707 0491                                     l10557 0CB8  
                                   l10629 13D1                                     l10645 18F2  
                                   l10813 0765                                     l10575 0CE3  
                                   l10671 0A49                                     l10663 09F0  
                   ?_setDimmerLights_Main 0070                                     l10569 0CD6  
                                   l10657 09DC                                     l10825 0779  
                                   l10737 0500                                     l10843 0222  
                                   l10747 0515                                     l10749 0517  
                                   l10599 0D0C                                     l10935 1F11  
                                   l10785 0727                                     l10883 02D5  
                                   l10859 0265                                     l10699 047F  
                                   l10869 0297                                     l10893 0307  
                                   l10959 067C                                     l10799 073B  
                                   l10985 11B6                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 005D                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 0255                           __end_of___awdiv 1393  
                         __end_of___lbdiv 1CC3                           __end_of___ftadd 045A  
                         __end_of___ftdiv 0DDE                           __end_of___ftneg 184D  
                         __end_of___ftmul 0F42                                     u12015 0507  
                                   u10505 137C                                     u12105 0704  
                         ___awdiv@divisor 0072                                     u12135 0754  
                                   _T1CON 0018                                     u10465 1360  
                                   u10485 136A                           __end_of___fttol 0ADF  
                                   u10495 1374                                     u10585 1A8B  
                                   u12505 1118                                     u12455 11CE  
                                   u12645 00AC                                     u12910 05DA  
                                   u12655 00DE                                     u12745 0190  
                                   u12665 0113                                     u12915 05B9  
                                   _IOCBF 0396                                     u11975 04D2  
                                   u12880 0599                                     u11995 04E9  
                                   u12885 0578                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 1F93  
                         ___awdiv@counter 0020             __size_of_CC2500_FrequencyCabr 000B  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0073                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1ABB                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 179B   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 1736                                     _Light 012D  
                        __end_of_TMR1_ISR 1CE5                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 18EA  
      DimmerLights_DimmingFunction@lights 0026                                     _getAD 1BA4  
                           ___awtoft@sign 0025                             ___ftpack@sign 0076  
                         __end_of_setData 12A6               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0072                          __end_of_WDT_Main 19CF  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0077  
                          __pbitbssCOMMON 03D0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 19F1                        Flash_Memory_Read@i 0073  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0010  
           __end_of_setLED_Initialization 199F                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                       _getAll_Sw_KeyStatus 18EA  
                      _setRF_DimmerLights 0827                           ___lbdiv@divisor 0072  
             __size_of_Flash_Memory_Write 002A                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0075                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 005F               __size_of_setRF_TransceiveGO 0010  
                  ??_Flash_Memory_Erasing 0072               ??_setDimmerLights_DimmingOn 0074  
                      ??_CC2500_SIDLEMode 0076                           __initialization 0021  
                        ?_CC2500_PowerRST 0070             ?_DimmerLights_DimmingFunction 0070  
                       ?_setMemory_Modify 0070                          __end_of_Division 1932  
                 __size_of_getDelayOff_GO 000F                              __end_of_main 14ED  
                     ?_setRF_DimmerLights 005D                          __end_of_Fosc_Set 27D3  
          getMain_All_LightsStatus@status 0072                        ??_setMemory_Modify 0072  
            setDimmerLights_OnOff@command 0065                            _Exception_Main 052F  
                        ?_CC2500_WriteREG 0074         __end_of_DimmerIntr_ValueCalculate 1492  
                               ??_ADC_Set 0072                      _setSw_Initialization 181D  
                                  ??_main 007A                             ___fttol@sign1 004E  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0072              ??_DimmerLights_SelectPointer 0072  
                 _setControl_Lights_Table 0BF2                            _setMemory_Data 1876  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0074  
                              _Receive_OK 03D0        setDimmerIntr_ControlStatus@command 0072  
                 _setDimmerLights_Dimming 13E7                                 ??_IOC_ISR 0071  
                               ??_IOC_Set 0072                               _DimmerIntr1 00A0  
                             _DimmerIntr2 00B0                  _getMain_All_LightsStatus 1941  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1A7C  
                 ??_Switch_Initialization 0077                    ?_setDimmerLights_OnOff 0065  
                    ??_setRF_DimmerLights 005E                                    ?_getAD 0072  
                       ??_getRF_KeyStatus 0072                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 08F5                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
        __end_of_getDimmerIntr_Dimming_Sw 1AFB                                 ??_RF_Main 007A  
             ?_DimmerLights_TwoPhase_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0074  
                   _getDimmer_Load_Status 180F                                 ??_WDT_Set 0072  
                        __end_of___awtoft 1D07                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 160B                  _getMain_All_Error_Status 1E3C  
                                  _IOCBF2 1CB2                                    i1l1000 10A0  
                                  i1l1024 10D8                                    i1l1464 001A  
                                  i1l9043 1CDE                                    i1l9053 18AA  
                                  i1l8503 10CE                                    i1l8441 1096  
                                  i1l8435 108E                                    i1l8541 1EF2  
                                  i1l8429 1087                                    i1l8491 10BF  
                                  i1l8479 1EC2                                    i1l8497 10C6  
                                  i1l9589 0012                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0078                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01A0                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    u942_25 1CD9  
                                  _IO_Set 1BF4                                    _WDTCON 0097  
    __end_of_setDimmerLights_DimmingClose 1857     __size_of_setDimmerLights_DimmingClose 000A  
            _setDimmerLights_DimmingClose 184D                      Exception_Main@i_4227 002B  
                      DelayTime_1us@count 0072                        setRF_AdjControl@sw 0079  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 005B  
           __end_of_CC2500_PowerOnInitial 1AA6                                    _Dimmer 0120  
                                  _DlySw1 01E2                                    _DlySw2 01E7  
                        _setRF_AdjControl 1F93                  ?_setOverTemp_ADV_Restore 0070  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 198F  
              __end_of_Mcu_Initialization 1A14                       __end_of_Buzzer_Main 12EC  
                                  _Memory 0230                                    _Timer1 0125  
                                  ___bmul 19CF                    __end_of_Exception_Main 0601  
                    Exception_Main@lights 002D                                    ___wmul 1C48  
                               ??___awdiv 0076                                 ??___lbdiv 0073  
                               ??___ftadd 003F              __size_of_DelayOffPointSelect 0015  
                               ??___ftdiv 002C                                 ??___ftneg 007A  
                               ??___ftmul 002C                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0072  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 007A  
                  ??_setDimmerLights_Line 0072                                    _r_data 0131  
                    Exception_Main@status 0026   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1BF4  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B         ??_getAll_DimmerIntr_Dimming_Sw_RF 0072  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1BD9  
                                  _s_data 00EF                    ??_setDimmerLights_SwOn 0079  
                                  _setLED 14ED                                    _myMain 00CF  
                    ??_RF_Timeout_Counter 0072                    __end_of_setMemory_Data 1881  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0022  
                                  _setBuz 12EC                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 0027               __end_of_Load_Initialization 27C3  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0072          __end_of_setDimmerIntr_Dimming_RF 1DBF  
        __end_of_setDimmerIntr_Dimming_Sw 1D71                     ___ftmul@f3_as_product 0031  
               _setDimmerLights_DimmingOn 0800                                 ??_setData 0072  
                Flash_Memory_Read@address 0074                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 19BF               getMain_Lights_Count@status1 0073  
             getMain_Lights_Count@status2 0074               __size_of_DimmerLights_IOC_1 0030  
             __size_of_DimmerLights_IOC_2 0030                     __end_of_SwPointSelect 1AE5  
             __size_of_DimmerLights_TMR_1 0038               __size_of_DimmerLights_TMR_2 0038  
            __size_of_Flash_Memory_Modify 0082                   __size_of_LedPointSelect 001D  
         setDimmerIntr_Dimming_Sw@command 0072                        setTemp_Main@TempGO 0060  
                        ___lbdiv@dividend 0074                       Flash_Memory_Write@i 0073  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1ABB  
             __size_of_CC2500_InitPATable 001D                       CC2500_TxData@loop_e 0077  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 004F  
         getDimmerIntr_DimmingValue@value 0073           setDimmerIntr_DimmingValue@value 0072  
                               ?_LED_Main 0070                                ___ftadd@f1 0039  
                              ___ftadd@f2 003C                      _getRF_KeyStatus$6247 0074  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0029  
               _setDimmerLights_SwOn$2659 0027                 _setDimmerLights_SwOn$2668 0028  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0031  
           ?_setDimmerLights_DimmingClose 0070                                ___ftneg@f1 0036  
                              ___awtoft@c 0020                       ___bmul@multiplicand 0072  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 0026  
                              ___ftmul@f2 0029                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 0046                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK5 1C82  
                           __end_of_getAD 1BBE                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0073  
               setMemory_LoopSave@command 0073                        _LED_Initialization 18C6  
                         _getSw_KeyStatus 1B29                 ??_setControl_Lights_Table 007A  
                      getRF_KeyStatus@key 0073     DimmerLights_AssignationDimming@status 005F  
                         ?_setMemory_Data 0072            ??_DimmerLights_DimmingFunction 0025  
        ??_getDimmerLights_PercentToValue 0054           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 0063             ??_Flash_Memory_Initialization 0076  
                        ___lbdiv@quotient 0076                      _getMain_Lights_Count 19E0  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F3  
       setDimmerIntr_ControlStatus@lights 0074                        __size_of_getBuz_GO 0010  
               _setDimmerIntr_MaxmumValue 1AFB                __end_of_set_TimeoutCleared 27ED  
         setDimmerIntr_MaxmumValue@lights 005C                        __size_of_getRxData 005F  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 18AE                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0075  
                     _Temp_Initialization 27C9                        ??_CC2500_WriteByte 0072  
                               ?_Division 0077                                __pbssBANK0 006C  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 12A6  
                       ??_setRFSW_Control 0065               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 27CF                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1824  
                              __pnvCOMMON 007B                             ??_Switch_Main 007A  
                          DelayTime_1us@i 0074                            DelayTime_1us@j 0076  
                    ??_LED_Initialization 0077                              _DimmerLights 006C  
                       LedPointSelect@led 0073     getAll_DimmerIntr_Dimming_Sw_RF@status 0075  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0011  
                             setBuz@count 0078                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1492                            _getDelayOff_GO 1932  
                     _CC2500_WriteCommand 1B70                      ?_Temp_Initialization 0070  
                                 ?___bmul 0072                          ??_setDelayOff_GO 005F  
       __end_of_DimmerIntr_Initialization 0E8E             ??_DimmerLights_Initialization 007A  
                                 ?___wmul 0072                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070         __size_of_getDimmerIntr_Dimming_Sw 0016  
                              _getLoad_AD 0964                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 27F9                 ?_getDimmerIntr_Dimming_Sw 0070  
                      __size_of_setTxData 0007               ??_DimmerIntr_ValueCalculate 0022  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
     __size_of_DimmerLights_TwoPhase_Main 0054                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1816                                   ?_setBuz 0024  
                               ?___awtoft 0020                                 ?___ftpack 0072  
                              _getTemp_AD 166D        __end_of_DimmerLights_SelectPointer 1A52  
              _DimmerLights_SelectPointer 1A3D                                ??_WDT_Main 0072  
            __end_of_setRF_Initialization 186B                        _setRFSW_AdjControl 0ADF  
                  __end_of_setProductData 18BA             setDimmerLights_Dimming@lights 0065  
                                 _IOC_ISR 18A2                                   _IOC_Set 1881  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 0062  
   getDimmerLights_Allow_Condition@lights 0077                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 119C                 __size_of_getDimmer_LoadGO 0007  
                       _Flash_Memory_Read 1066                    __size_of_CC2500_RxData 0062  
                  __size_of_CC2500_TxData 0068                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 27C6  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0078                                   _WDT_Set 1857  
         __end_of_setControl_Lights_Table 0C8D                           setRF_Main@error 006B  
                  __size_of_setCmd_Status 0015                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 143B  
                 ??_setLoad_AH_AL_Restore 0072                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 1897                           __size_of_IO_Set 001B  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 19AF  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1941                                   _VarLED1 016C  
                                 _VarLED2 01EC            __end_of_getDimmerLights_Status 1923  
                       __end_of_getRxData 15AB                   __end_of_getSw_KeyStatus 1B40  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 005D                            ??_setTemp_Main 005D  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 133F            ??_setDimmerLights_DimmingClose 0075  
                                 ___lbdiv 1CA2                                   ___ftadd 0364  
                                 ___ftdiv 0D35                                   ___ftneg 1844  
                         __size_of___wmul 001D                                   ___ftmul 0E8E  
                                 ___fttol 0A58                       __end_of_Switch_Main 18A2  
                                 ___lwdiv 1F5D                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 18F8  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 0060  
         DimmerIntr_ValueCalculate@lights 0024                           __size_of_setBuz 0053  
                                 __ptext1 10EA                                   __ptext2 1906  
                                 __ptext3 166D                                   __ptext4 0964  
                                 __ptext5 1BA4                                   __ptext6 19BF  
                                 __ptext7 0002                                   __ptext8 27CC  
                                 __ptext9 045A                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0072  
                 ??_setDimmerLights_OnOff 0066                           ?_setProductData 005A  
               __end_of_Flash_Memory_Main 11DD                 __end_of_Flash_Memory_Read 107A  
                 ??_setDimmerLights_SwOff 0074                                _setRF_Main 06C5  
                 ??_myMain_Initialization 0072                             _DelayOff_Main 182C  
                __end_of_setRF_AdjControl 1FC9                         _DimmerLights_Main 1EF9  
                                 _setData 1262            __size_of_DlyOff_Initialization 0005  
                   ??_CC2500_WriteCommand 0074                 __size_of_setMemory_Modify 0010  
           __end_of_DlyOff_Initialization 27E8                __end_of_CC2500_ClearRXFIFO 27DB  
                ??_setTemp_Initialization 0072                __end_of_CC2500_ClearTXFIFO 27DF  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 007B                            _LedPointSelect 1C2B  
               getAll_Sw_KeyStatus@status 0073                           getTemp_AD@ADRES 0078  
                     _DelayOffPointSelect 1A28                                   clrloop0 27F4  
          __size_of_Switch_Initialization 0008                 _DimmerIntr_ValueCalculate 143B  
           __end_of_Switch_Initialization 1844                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 1E12  
                           _DelayTime_1us 1D71                         __end_of_setTxData 1808  
              __end_of_Flash_Memory_Write 1E12        __size_of_setDimmerLights_DimmingOn 0027  
                                 init_ram 27ED                __end_of_setRF_TransceiveGO 197F  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 27EE  
                              _setSw_Main 01F3                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 002A                         _CC2500_ReadStatus 1D29  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 198F  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 160B                             _CC2500_TxData 088D  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 09D6  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                           _setCmd_Status 1A52                       _Flash_Memory_Unlock 07F7  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0076                   setTemp_Main@DangerValue 0063  
                  setSw_Initialization@sw 0076                 __end_of_DimmerLights_Main 1F29  
                      _Mcu_Initialization 1A02                  __size_of_CC2500_PowerRST 0044  
        __size_of_setOverTemp_ADV_Restore 001A              __end_of_setRF_TimeoutCleared 27D7  
                    __end_of_my_MainTimer 1122                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1C48  
                __size_of_CC2500_WriteREG 0022                  Load_Main@ErrorCountValue 0025  
        getDimmerIntr_DimmingValue@lights 0074          setDimmerIntr_DimmingValue@lights 0074  
               __end_of_CC2500_InitSetREG 1E3C                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0066  
       DimmerLights_AssignationDimming@sw 0060                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 1D4C                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 0827  
                        ??_Exception_Main 0079                            __end_of_IO_Set 1C0F  
                    _setRF_Initialization 1861                        _setMemory_LoopSave 19AF  
                             _Switch_Main 1897                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1906  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0030  
                   _CC2500_PowerOnInitial 1A91               ??_DimmerIntr_Initialization 005A  
                    ??_Mcu_Initialization 0073               __end_of_getAll_Sw_KeyStatus 18F8  
                   ??_DelayOffPointSelect 0072                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0072                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 19E0       __size_of_getDimmerIntr_DimmingValue 0014  
        DimmerLights_TwoPhase_Main@lights 0061                      setRF_DimmerLights@on 005D  
                          __end_of___wmul 1C65                         getSw_KeyStatus@sw 0073  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0022  
           __size_of_getDimmerLights_Line 000F          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0065  
                          __end_of_setLED 154C             __size_of_setDimmerLights_Line 0017  
           __size_of_setDimmerLights_SwOn 0073                            __end_of_setBuz 133F  
              __end_of_DimmerLights_IOC_1 1EC9                __end_of_DimmerLights_IOC_2 1EF9  
                    _CC2500_FrequencyCabr 188C                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 115C  
                       __size_of_WDT_Main 0010                __end_of_DimmerLights_TMR_1 10B2  
              __end_of_DimmerLights_TMR_2 10EA                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0010  
                        _getDimmer_LoadGO 1808                     ??_Flash_Memory_Modify 0076  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 1C82           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 052F                            ??_RF_RxDisable 0072  
  __end_of_getDimmerLights_PercentToValue 1736   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 16D1                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 0056  
                     __size_of_getLoad_OK 0007             setRF_AdjControl@dimmingStatus 0078  
                      _set_TimeoutCleared 27E8         __end_of_setDimmerIntr_MaxmumValue 1B12  
                                ??_IO_Set 0072                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0168                         __size_of_Division 000F  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0064  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0018  
                               _Temp_Main 27CC                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00EC  
                   setProductData@address 005C                       Exception_Main@count 0027  
                     Exception_Main@error 0028                                  ??___bmul 0073  
                                ??___wmul 0076                    __size_of_SwPointSelect 0015  
        __end_of_getMain_All_LightsStatus 1950                                 _Tx_Length 00EE  
                             __pdataBANK5 02A0                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1E6A  
                        _CC2500_SIDLEMode 27DF                __size_of_DimmerLights_Main 0030  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074            getDimmerIntr_Dimming_Sw@lights 0073  
                           ??_setLED_Main 0074                         __size_of___awtoft 0022  
                       __size_of___ftpack 0060                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 0026  
          getDimmerIntr_Dimming_Sw@status 0072                                 ___latbits 0003  
                        _setMemory_Modify 195F                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                 setRF_TransceiveGO@command 0073  
                           __pcstackBANK4 0255                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 0DDE                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 005F  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                         ??_CC2500_WriteREG 0075  
                           ??_setRF_Learn 0072                             _DimmerLights1 01BE  
                           _DimmerLights2 01C7                     CC2500_WriteREG@w_addr 0076  
                   setDelayOff_GO@command 005D            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 1BD9  
                setRFSW_AdjControl@status 005F                           ??_CC2500_TxData 0076  
                          getRxData@error 0069               __size_of_LED_Initialization 000C  
                    _setRF_TimeoutCleared 27D3                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0029                                ?_Temp_Main 0070  
      __size_of_DimmerIntr_ValueCalculate 0057                       __size_of_setRF_Main 00BF  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                           _getCmd_Status 197F                                setBuz@time 0024  
                         ??_setCmd_Status 0073                       setDelayOff_GO@value 005E  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 1800  
                               _getBuz_GO 199F                  ?_setDimmerLights_Dimming 0062  
     __end_of_Flash_Memory_Initialization 06C5               _Flash_Memory_Initialization 0601  
                                ?___awdiv 0072                                 __ptext100 1941  
                               __ptext101 1932                                  ?___lbdiv 0072  
                               __ptext110 1FC9                                 __ptext102 197F  
                               __ptext111 27F9                                 __ptext103 13E7  
                               __ptext120 27BC                                 __ptext112 1E3C  
                               __ptext104 1801                                 __ptext121 0DDE  
                               __ptext113 1393                                 __ptext105 196F  
                               __ptext130 1CE5                                 __ptext122 195F  
                               __ptext114 1E6A                                 __ptext106 0827  
                               __ptext131 15AB                                 __ptext123 1736  
                               __ptext115 1AFB                                 __ptext107 1B12  
                               __ptext140 1AE5                                 __ptext132 1923  
                               __ptext124 16D1                                 __ptext116 1D96  
                               __ptext108 1D4C                                 __ptext141 1122  
                               __ptext133 1CA2                                 __ptext125 0A58  
                               __ptext117 0C8D                                 __ptext109 1A14  
                                ?___ftadd 0039                                 __ptext150 1CC3  
                               __ptext142 1914                                 __ptext134 182C  
                               __ptext126 1844                                 __ptext118 143B  
                               __ptext151 10B2                                 __ptext143 1A3D  
                               __ptext135 08F5                                 __ptext127 0E8E  
                               __ptext119 186B                                 __ptext152 107A  
                               __ptext144 1824                                 __ptext136 18AE  
                               __ptext128 0D35                                 __ptext153 18A2  
                               __ptext145 27E3                                 __ptext137 0784  
                               __ptext129 0364                                 __ptext154 1EC9  
                               __ptext146 1A28                                 __ptext138 12EC  
                               __ptext155 1E99                                 __ptext147 12A6  
                               __ptext139 133F                                 __ptext148 27BD  
                               _getRxData 154C                                  ?___ftdiv 0026  
                                ?___ftneg 0036                                  ?___ftmul 0026  
                                ?___fttol 0046                     __size_of_my_MainTimer 0038  
                                ?___lwdiv 0072                   __end_of_setRFSW_Control 119C  
                        ??_setProductData 005B                   _setOverTemp_ADV_Restore 1B8A  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 27C0                             ??_setLog_Code 005D  
                getDimmerLights_Line@line 0073                        __end_of_TouchPower 1AD0  
                     __size_of_setSw_Main 0171              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1A28              ??_setDimmerIntr_DimmingValue 0073  
              _getDimmerIntr_DimmingValue 1A14                    CC2500_WriteByte@loop_a 0073  
                                ?_setData 0070            __size_of_setDimmerLights_OnOff 00BE  
                       ?_setRF_AdjControl 0070                                 _r_address 0130  
           __end_of_setDimmerLights_OnOff 1000            __size_of_setDimmerLights_SwOff 003A  
          __size_of_myMain_Initialization 000E             __end_of_setDimmerLights_SwOff 115C  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1914  
                          __size_of_getAD 001A                          ___lwdiv@quotient 0077  
                      ??_setRF_AdjControl 0076                             _SwPointSelect 1AD0  
                     __end_of_setLED_Main 121E              ??_DimmerLights_TwoPhase_Main 007A  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 27CC                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 18D2  
                         SwPointSelect@sw 0073                                 clear_ram0 27F3  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 10EA                                 _setTxData 1801  
     __end_of_DimmerLights_Initialization 1876               _DimmerLights_Initialization 186B  
                      _CC2500_ClearRXFIFO 27D7                    _Flash_Memory_Main$3708 0021  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 27DB  
                _getDimmerIntr_Dimming_Sw 1AE5                  setRF_DimmerLights@lights 0061  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1A02  
                       ??_Timeout_Counter 0072                                ?_getBuz_GO 0072  
                setRF_DimmerLights@status 0060      __size_of_setDimmerIntr_ControlStatus 0029  
             __size_of_setRFSW_AdjControl 0087       __size_of_setDimmerIntr_DimmingValue 0015  
                      _Flash_Memory_Write 1DE8                                ?_getRxData 0070  
                            ??_getLoad_AD 0076                                  _TMR1_ISR 1CC3  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                            ??_getLoad_OK 0072                                  _TMR1_Set 18DE  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 196F                                  _RF_Count 0128  
                    __end_of_RF_RxDisable 183C                              ??_getTemp_AD 0076  
             __end_of_CC2500_WriteCommand 1B8A                    ??_CC2500_FrequencyCabr 0078  
                                _WDT_Main 19BF                   DlyOff_Initialization@sw 0074  
                   getSw_KeyStatus@status 0072                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0072                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00D5                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00EA  
                            setSw_Main@sw 002D                               ??_Load_Main 0020  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0078  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 18C6  
                          ?_SwPointSelect 0070                               getAD@adcon0 0075  
                             getAD@adcon1 0072                            setLED_Main@led 0076  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1F5D  
                   _DlyOff_Initialization 27E3         __size_of_getMain_All_LightsStatus 000F  
                    ??_CC2500_ClearRXFIFO 0076                                  _Division 1923  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0076  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1D96               setDimmerLights_OnOff@lights 0068  
                _setDimmerIntr_Dimming_Sw 1D4C                                  _Fosc_Set 27CF  
                        __size_of_WDT_Set 000A                     setRFSW_Control@status 0066  
                      __end_of_getLoad_AD 09D6                        __end_of_getLoad_OK 2800  
                   _Switch_Initialization 183C         __size_of_getMain_All_Error_Status 002E  
                    ??_Flash_Memory_Write 0072                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 0046                        __end_of_getTemp_AD 16D1  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1B40                         getLoad_AD@channel 0020  
     __size_of_DimmerLights_SelectPointer 0015                      ??_setRF_TransceiveGO 0072  
                                _SwDetect 012F                               ??_Temp_Main 007A  
                        getCmd_Status@cmd 0073                          setCmd_Status@cmd 0072  
                       setRFSW_Control@sw 0067             _getMain_All_Error_Status$4214 0073  
           _getMain_All_Error_Status$4215 0075                  __end_of_getDimmer_LoadGO 180F  
                     _Load_Initialization 27C0          ??_getDimmerLights_ValueToPercent 0054  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0075  
               ??_setOverTemp_ADV_Restore 0072                              _setTemp_Main 045A  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0036                  setDimmerLights_SwOn@idle 0029  
                                ___awtoft 1CE5                          ??_LedPointSelect 0072  
                                ___ftpack 15AB             __size_of_getMain_Lights_Count 0011  
                  getDimmer_LoadGO@loadgo 0072                         getTemp_AD@channel 0077  
                            ??_setRF_Main 006A                      CC2500_WriteREG@value 0074  
                             _setLED_Main 11DD                __end_of_setRF_DimmerLights 088D  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 1816                          setDelayOff_GO@sw 0064  
                         ___lwdiv@divisor 0072                          __size_of_setData 0044  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0079  
                                __ptext10 1B8A                                  __ptext11 27C9  
                                __ptext20 27E8                                  __ptext12 1800  
                                __ptext21 1AA6                                  __ptext13 1897  
                                __ptext30 0BF2                                  __ptext22 183C  
                                __ptext14 01F3                                  __ptext31 1F93  
                                __ptext23 181D                                  __ptext15 19F1  
                                __ptext40 1D29                                  __ptext32 115C  
                                __ptext24 27C6                                  __ptext16 0800  
                                __ptext41 1C0F                                  __ptext33 0ADF  
                                __ptext25 06C5                                  __ptext17 1B29  
                                __ptext50 27DB                                  __ptext42 1A91  
                                __ptext34 1B58                                  __ptext26 1262  
                                __ptext18 1AD0                                  __ptext51 27D7  
                                __ptext43 27DF                                  __ptext35 18F8  
                                __ptext27 154C                                  __ptext19 1ABB  
                                __ptext60 18DE                                  __ptext52 1B70  
                                __ptext44 121E                                  __ptext36 199F  
                                __ptext28 1F29                                  __ptext61 1BF4  
                                __ptext53 27D3                                  __ptext45 1E12  
                                __ptext37 1834                                  __ptext29 19AF  
                                __ptext70 1C48                                  __ptext62 1881  
                                __ptext54 1A7C                                  __ptext46 1C65  
                                __ptext38 088D                                  __ptext71 1F5D  
                                __ptext63 27CF                                  __ptext55 1B40  
                                __ptext47 1D07                                  __ptext39 160B  
                                __ptext80 09D6                                  __ptext72 27C0  
                                __ptext64 1816                                  __ptext56 27C3  
                                __ptext48 188C                                  __ptext81 18BA  
                                __ptext73 1BBE                                  __ptext65 0053  
                                __ptext57 1861                                  __ptext49 1D71  
                                __ptext90 179B                                  __ptext82 0601  
                                __ptext74 18D2                                  __ptext66 19E0  
                                __ptext58 1A02                                  __ptext91 0F42  
                                __ptext83 1876                                  __ptext75 11DD  
                                __ptext67 180F                                  __ptext59 1857  
                                __ptext92 14ED                                  __ptext84 1DE8  
                                __ptext76 18C6                                  __ptext68 1808  
                                __ptext93 1C2B                                  __ptext85 07F7  
                                __ptext77 198F                                  __ptext69 1BD9  
                                __ptext94 184D                                  __ptext86 1066  
                                __ptext78 119C                                  __ptext95 1A67  
                                __ptext87 052F                                  __ptext79 18EA  
                                __ptext96 1DBF                                  __ptext88 1950  
                                __ptext97 0B66                                  __ptext89 1EF9  
                                __ptext98 19CF                                  __ptext99 1A52  
                                __product 02A0                   ??_setLED_Initialization 0076  
                ??_getDimmerLights_Status 0074              __end_of_getDimmerLights_Line 195F  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1B29  
                      _DimmerLights_IOC_1 1E99                        _DimmerLights_IOC_2 1EC9  
            __end_of_setDimmerLights_SwOn 07F7                              ??_setSw_Main 002B  
                  ??_setRF_TimeoutCleared 0072              ??_setDimmerLights_DimmingRun 0075  
                           setLED@command 0074                             __size_of_main 005B  
                             _setRF_Learn 19F1        __size_of_DimmerIntr_Initialization 00B0  
                         ??_getCmd_Status 0072                        _DimmerLights_TMR_1 107A  
                      _DimmerLights_TMR_2 10B2                  __end_of_CC2500_SIDLEMode 27E3  
              setDimmerLights_Main@lights 0069               __end_of_DelayOffPointSelect 1A3D  
                setOverTemp_ADV_Restore@i 0073                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 1C0F                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1C65                  __end_of_setMemory_Modify 196F  
    _getAll_DimmerIntr_Dimming_Sw_RF$2605 0073      _getAll_DimmerIntr_Dimming_Sw_RF$2606 0074  
                     ?_DimmerLights_IOC_1 0070                       ?_DimmerLights_IOC_2 0070  
                      __end_of_setRF_Main 0784                               ??_getBuz_GO 0074  
                     ?_DimmerLights_TMR_1 0070                       ?_DimmerLights_TMR_2 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0068                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1A91               Flash_Memory_Main@key_Status 0020  
                _getAll_Sw_KeyStatus$7441 0074                                  main@argc 0255  
                                main@argv 0257                       ?_CC2500_InitPATable 0070  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 121E  
                __size_of_getSw_KeyStatus 0017              setDimmerLights_Dimming@value 0064  
      __end_of_setDimmerIntr_DimmingValue 1A7C                _setDimmerIntr_DimmingValue 1A67  
             __end_of_Flash_Memory_Modify 0A58              __size_of_getAll_Sw_KeyStatus 000E  
                             _setLog_Code 1F29               __end_of_Flash_Memory_Unlock 0800  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 1D07  
                      __end_of_setSw_Main 0364                     ??_Load_Initialization 0074  
                    ??_DimmerLights_IOC_1 0070                      ??_DimmerLights_IOC_2 0070  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0018  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                      ??_DimmerLights_TMR_2 0070  
                          Division@result 0021           __end_of_setOverTemp_ADV_Restore 1BA4  
      __end_of_DimmerLights_TwoPhase_Main 13E7                _DimmerLights_TwoPhase_Main 1393  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0061                           setDelayOff_GO@j 0062  
                         setDelayOff_GO@k 0063                   ??_CC2500_PowerOnInitial 007A  
                   setTemp_Main@SafeValue 0061    __end_of_setDimmerLights_Initialization 27BD  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 27BC  
              ?_setDimmerIntr_MaxmumValue 005A                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0072                    CC2500_InitPATable@temp 0078  
                         getLoad_AD@ADRES 0023                     __size_of_RF_RxDisable 0008  
                       _RF_Initialization 27C3                               getLoad_AD@i 0025  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
 __end_of_DimmerLights_AssignationDimming 1E99  __size_of_DimmerLights_AssignationDimming 002F  
       ??_DimmerLights_AssignationDimming 005D          ?_DimmerLights_AssignationDimming 0070  
         _DimmerLights_AssignationDimming 1E6A                      _Flash_Memory_Erasing 18BA  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00ED  
                 __size_of_Exception_Main 00D2                             Division@value 0020  
         __end_of_DelayOff_Initialization 182C                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1834                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0B66  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 009B  
        __size_of_setDimmerLights_Dimming 0054               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00C4               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 005D                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 1D96                ??_getDimmerIntr_Dimming_Sw 0072  
                 __end_of_CC2500_ReadByte 1C2B              __end_of_setSw_Initialization 1824  
                         _Timeout_Counter 1AA6           __size_of_getDimmerLights_Status 000F  
         getDimmerLights_ValueToPercent@i 0057                              _RF_RxDisable 1834  
        Flash_Memory_Initialization@value 0077                __end_of_LED_Initialization 18D2  
          __end_of_setTemp_Initialization 1801                               Division@num 0077  
                 setMemory_Modify@command 0073                 __end_of_RF_Initialization 27C6  
               __size_of_setRF_AdjControl 0036                     __end_of_CC2500_RxData 166D  
                   __end_of_CC2500_TxData 08F5                     _setLoad_AH_AL_Restore 1BBE  
                 __end_of_CC2500_PowerRST 1262  
