

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Dec 20 09:54:09 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1067                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1067  3463               	retlw	99
  2163  1068  3402               	retlw	2
  2164  1069  3400               	retlw	0
  2165  106A  3400               	retlw	0
  2166  106B  3400               	retlw	0
  2167  106C  3400               	retlw	0
  2168  106D  3400               	retlw	0
  2169  106E  3400               	retlw	0
  2170  106F  3400               	retlw	0
  2171  1070  3400               	retlw	0
  2172  1071  3400               	retlw	0
  2173  1072  3400               	retlw	0
  2174  1073  34FF               	retlw	255
  2175  1074  34FF               	retlw	255
  2176  1075  34FF               	retlw	255
  2177  1076  3400               	retlw	0
  2178  1077  3400               	retlw	0
  2179  1078  3400               	retlw	0
  2180  1079  3400               	retlw	0
  2181  107A  3400               	retlw	0
  2182  107B  3400               	retlw	0
  2183  107C  3400               	retlw	0
  2184  107D  3400               	retlw	0
  2185  107E  3400               	retlw	0
  2186  107F  3400               	retlw	0
  2187  1080  3400               	retlw	0
  2188  1081  3400               	retlw	0
  2189  1082  3400               	retlw	0
  2190  1083  3400               	retlw	0
  2191  1084  3400               	retlw	0
  2192  1085  3400               	retlw	0
  2193  1086  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0064                     _RA4	set	100
  2322  0066                     _RA6	set	102
  2323  0067                     _RA7	set	103
  2324  0068                     _RB0	set	104
  2325  0069                     _RB1	set	105
  2326  006A                     _RB2	set	106
  2327  006B                     _RB3	set	107
  2328  006D                     _RB5	set	109
  2329  0070                     _RC0	set	112
  2330  0071                     _RC1	set	113
  2331  0073                     _RC3	set	115
  2332  0074                     _RC4	set	116
  2333  0075                     _RC5	set	117
  2334  0088                     _TMR1IF	set	136
  2335  009D                     _ADCON0	set	157
  2336  009E                     _ADCON1	set	158
  2337  009C                     _ADRESH	set	156
  2338  009B                     _ADRESL	set	155
  2339  0099                     _OSCCON	set	153
  2340  008C                     _TRISA	set	140
  2341  008D                     _TRISB	set	141
  2342  008E                     _TRISC	set	142
  2343  0097                     _WDTCON	set	151
  2344  04E9                     _GO_nDONE	set	1257
  2345  0488                     _TMR1IE	set	1160
  2346  0117                     _FVRCON	set	279
  2347  010C                     _LATA	set	268
  2348  010D                     _LATB	set	269
  2349  010E                     _LATC	set	270
  2350  018C                     _ANSELA	set	396
  2351  018D                     _ANSELB	set	397
  2352  018E                     _ANSELC	set	398
  2353  0192                     _PMADRH	set	402
  2354  0191                     _PMADRL	set	401
  2355  0196                     _PMCON2	set	406
  2356  0194                     _PMDATH	set	404
  2357  0193                     _PMDATL	set	403
  2358  0CAE                     _CFGS	set	3246
  2359  0CAC                     _FREE	set	3244
  2360  0CAD                     _LWLO	set	3245
  2361  0CA8                     _RD	set	3240
  2362  0CA9                     _WR	set	3241
  2363  0CAA                     _WREN	set	3242
  2364  1069                     _WPUB1	set	4201
  2365  106A                     _WPUB2	set	4202
  2366  0396                     _IOCBF	set	918
  2367  0395                     _IOCBN	set	917
  2368  0394                     _IOCBP	set	916
  2369  1CB2                     _IOCBF2	set	7346
  2370                           
  2371                           ; #config settings
  2372  0000                     
  2373                           	psect	cinit
  2374  0015                     start_initialization:	
  2375  0015                     __initialization:	
  2376                           
  2377                           ; Clear objects allocated to BITCOMMON
  2378  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2379                           
  2380                           ; Clear objects allocated to COMMON
  2381  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2382  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2383  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK0
  2386  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK1
  2389  001A  30A0               	movlw	low __pbssBANK1
  2390  001B  0084               	movwf	4
  2391  001C  3000               	movlw	high __pbssBANK1
  2392  001D  0085               	movwf	5
  2393  001E  3049               	movlw	73
  2394  001F  319C  245B  3180   	fcall	clear_ram0
  2395                           
  2396                           ; Clear objects allocated to BANK2
  2397  0022  3020               	movlw	low __pbssBANK2
  2398  0023  0084               	movwf	4
  2399  0024  3001               	movlw	high __pbssBANK2
  2400  0025  0085               	movwf	5
  2401  0026  304D               	movlw	77
  2402  0027  319C  245B  3180   	fcall	clear_ram0
  2403                           
  2404                           ; Clear objects allocated to BANK3
  2405  002A  30A0               	movlw	low __pbssBANK3
  2406  002B  0084               	movwf	4
  2407  002C  3001               	movlw	high __pbssBANK3
  2408  002D  0085               	movwf	5
  2409  002E  304C               	movlw	76
  2410  002F  319C  245B  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Initialize objects allocated to BANK4
  2413  0032  3067               	movlw	low __pidataBANK4
  2414  0033  0084               	movwf	4
  2415  0034  3090               	movlw	(high __pidataBANK4)| (0+128)
  2416  0035  0085               	movwf	5
  2417  0036  3020               	movlw	low __pdataBANK4
  2418  0037  0086               	movwf	6
  2419  0038  3002               	movlw	high __pdataBANK4
  2420  0039  0087               	movwf	7
  2421  003A  3020               	movlw	32
  2422  003B  319C  2455         	fcall	init_ram
  2423  003D                     end_of_initialization:	
  2424                           ;End of C runtime variable initialization code
  2425                           
  2426  003D                     __end_of__initialization:	
  2427  003D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2428  003E  0020               	movlb	0
  2429  003F  3188  2895         	ljmp	_main	;jump to C main() function
  2430                           
  2431                           	psect	bitbssCOMMON
  2432  03C0                     __pbitbssCOMMON:	
  2433  03C0                     _Receive_OK:	
  2434  03C0                     	ds	1
  2435  03C1                     _Transceive_OK:	
  2436  03C1                     	ds	1
  2437                           
  2438                           	psect	bssCOMMON
  2439  0075                     __pbssCOMMON:	
  2440  0075                     _DelayOff:	
  2441  0075                     	ds	1
  2442  0076                     _DimmerLightsIntr:	
  2443  0076                     	ds	1
  2444  0077                     _Sw:	
  2445  0077                     	ds	1
  2446                           
  2447                           	psect	bssBANK0
  2448  006F                     __pbssBANK0:	
  2449  006F                     _DimmerLights:	
  2450  006F                     	ds	1
  2451                           
  2452                           	psect	bssBANK1
  2453  00A0                     __pbssBANK1:	
  2454  00A0                     _myMain:	
  2455  00A0                     	ds	14
  2456  00AE                     _Buz1:	
  2457  00AE                     	ds	12
  2458  00BA                     _RF1:	
  2459  00BA                     	ds	12
  2460  00C6                     _Dimmer:	
  2461  00C6                     	ds	3
  2462  00C9                     _WDT:	
  2463  00C9                     	ds	2
  2464  00CB                     _CRC:	
  2465  00CB                     	ds	1
  2466  00CC                     _DimmerLights11:	
  2467  00CC                     	ds	1
  2468  00CD                     _DimmerLightsIntrIOC:	
  2469  00CD                     	ds	1
  2470  00CE                     _LED:	
  2471  00CE                     	ds	1
  2472  00CF                     _RSSI:	
  2473  00CF                     	ds	1
  2474  00D0                     _Rx_Length:	
  2475  00D0                     	ds	1
  2476  00D1                     _SPI0Buffer:	
  2477  00D1                     	ds	1
  2478  00D2                     _SwDetect:	
  2479  00D2                     	ds	1
  2480  00D3                     _Tx_Length:	
  2481  00D3                     	ds	1
  2482  00D4                     _r_address:	
  2483  00D4                     	ds	1
  2484  00D5                     _r_data:	
  2485  00D5                     	ds	1
  2486  00D6                     _s_data:	
  2487  00D6                     	ds	1
  2488  00D7                     _Temp:	
  2489  00D7                     	ds	18
  2490                           
  2491                           	psect	bssBANK2
  2492  0120                     __pbssBANK2:	
  2493  0120                     _Timer1:	
  2494  0120                     	ds	3
  2495  0123                     _RF_Count:	
  2496  0123                     	ds	2
  2497  0125                     _Load:	
  2498  0125                     	ds	46
  2499  0153                     _DimmerLights1:	
  2500  0153                     	ds	17
  2501  0164                     _DlySw1:	
  2502  0164                     	ds	5
  2503  0169                     _VarErrLED:	
  2504  0169                     	ds	4
  2505                           
  2506                           	psect	bssBANK3
  2507  01A0                     __pbssBANK3:	
  2508  01A0                     _RF_Data:	
  2509  01A0                     	ds	30
  2510  01BE                     _Memory:	
  2511  01BE                     	ds	37
  2512  01E3                     _Sw1:	
  2513  01E3                     	ds	9
  2514                           
  2515                           	psect	dataBANK4
  2516  0220                     __pdataBANK4:	
  2517  0220                     __product:	
  2518  0220                     	ds	32
  2519                           
  2520                           	psect	clrtext
  2521  1C5B                     clear_ram0:	
  2522                           ;	Called with FSR0 containing the base address, and
  2523                           ;	WREG with the size to clear
  2524                           
  2525  1C5B  0064               	clrwdt	;clear the watchdog before getting into this loop
  2526  1C5C                     clrloop0:	
  2527  1C5C  0180               	clrf	0	;clear RAM location pointed to by FSR
  2528  1C5D  3101               	addfsr 0,1
  2529  1C5E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2530  1C5F  2C5C               	goto	clrloop0	;have we reached the end yet?
  2531  1C60  3400               	retlw	0	;all done for this memory range, return
  2532                           
  2533                           	psect	inittext
  2534  1C55                     init_ram:	
  2535  1C55  00FE               	movwf	126
  2536  1C56                     initloop:	
  2537  1C56  0012               	moviw fsr0++
  2538  1C57  001E               	movwi fsr1++
  2539  1C58  0BFE               	decfsz	126,f
  2540  1C59  2C56               	goto	initloop
  2541  1C5A  3400               	retlw	0
  2542                           
  2543                           	psect	cstackBANK3
  2544  01EC                     __pcstackBANK3:	
  2545  01EC                     ?_main:	
  2546  01EC                     main@argc:	
  2547                           ; 2 bytes @ 0x0
  2548                           
  2549                           
  2550                           ; 2 bytes @ 0x0
  2551  01EC                     	ds	2
  2552  01EE                     main@argv:	
  2553                           
  2554                           ; 2 bytes @ 0x2
  2555  01EE                     	ds	2
  2556                           
  2557                           	psect	cstackBANK2
  2558  016D                     __pcstackBANK2:	
  2559  016D                     setRF_Main@loop_f:	
  2560                           
  2561                           ; 1 bytes @ 0x0
  2562  016D                     	ds	1
  2563  016E                     setRF_Main@Receive_OK:	
  2564                           
  2565                           ; 1 bytes @ 0x1
  2566  016E                     	ds	1
  2567  016F                     setRF_Main@error:	
  2568                           
  2569                           ; 1 bytes @ 0x2
  2570  016F                     	ds	1
  2571                           
  2572                           	psect	cstackBANK1
  2573  00E9                     __pcstackBANK1:	
  2574  00E9                     setDimmerLights_ErrorClose@count:	
  2575  00E9                     Exception_Main@count:	
  2576                           ; 1 bytes @ 0x0
  2577                           
  2578                           
  2579                           ; 1 bytes @ 0x0
  2580  00E9                     	ds	1
  2581  00EA                     setDimmerLights_ErrorClose@lights:	
  2582  00EA                     Exception_Main@error:	
  2583                           ; 1 bytes @ 0x1
  2584                           
  2585                           
  2586                           ; 1 bytes @ 0x1
  2587  00EA                     	ds	1
  2588  00EB                     setDimmerLights_ErrorClose@i:	
  2589  00EB                     Exception_Main@i:	
  2590                           ; 2 bytes @ 0x2
  2591                           
  2592                           
  2593                           ; 2 bytes @ 0x2
  2594  00EB                     	ds	2
  2595  00ED                     getRxData@error:	
  2596  00ED                     Exception_Main@i_3438:	
  2597                           ; 1 bytes @ 0x4
  2598                           
  2599                           
  2600                           ; 2 bytes @ 0x4
  2601  00ED                     	ds	2
  2602  00EF                     Exception_Main@lights:	
  2603                           
  2604                           ; 1 bytes @ 0x6
  2605  00EF                     	ds	1
  2606                           
  2607                           	psect	cstackCOMMON
  2608  0070                     __pcstackCOMMON:	
  2609  0070                     ?_Timeout_Counter:	
  2610  0070                     ?_set_TimeoutCleared:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_WriteByte:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_CC2500_WriteCommand:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_CC2500_ReadStatus:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_CC2500_ReadByte:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_CC2500_PowerRST:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_CC2500_InitSetREG:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_CC2500_InitPATable:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_CC2500_ClearTXFIFO:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_CC2500_ClearRXFIFO:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_FrequencyCabr:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_CC2500_SIDLEMode:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_DlyOff_Initialization:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_DlyOff_Main:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setDimmerLights_ErrorClose:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setDimmerLights_Initialization:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setDimmerLights_Main:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_setDimmerLights_Line:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setTxData:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setLED_Initialization:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setLED_Main:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_Fosc_Set:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_IO_Set:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_TMR1_Set:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_ADC_Set:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_IOC_Set:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_WDT_Set:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_IOC_ISR:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_TMR1_ISR:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Flash_Memory_Write:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Flash_Memory_Modify:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_WDT_Clearing:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_myMain_Initialization:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_Temp_Initialization:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_Load_Initialization:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_Switch_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_RF_Initialization:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_getLoad_AD:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_getTemp_AD:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_my_MainTimer:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Temp_Main:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_Load_Main:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_Switch_Main:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_RF_Main:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Exception_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_setLoad_AH_AL_Restore:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_setTemp_Initialization:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setTemp_Main:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setRF_Initialization:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_setRF_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_RF_RxDisable:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_getRxData:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_setLog_Code:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_setControl_Lights_Table:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setRFSW_Control:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setRFSW_AdjControl:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setRF_DimmerValue:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setSw_Initialization:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setSw_Main:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_Buzzer_Initialization:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_Buzzer_Main:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_CC2500_TxData:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_CC2500_RxData:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_CC2500_PowerOnInitial:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_DelayOffPointSelect:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_DelayOff_Initialization:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_DelayOff_Main:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_DimmerIntrIOCPointSelect:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ??_DimmerIntrIOCPointSelect:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_DimmerIntrPointSelect:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ??_DimmerIntrPointSelect:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_setDimmerLights_IntrControl:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DimmerLightsPointSelect:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DimmerLights_Initialization:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_setDimmerLights_SwOn:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_setDimmerLights_SwOff:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_setDimmerLights_AdjOn:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_DimmerLights_Main:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_setDimmerLights_AdjRF:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_LedPointSelect:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_LED_Initialization:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_LED_Main:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_Mcu_Initialization:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_ISR:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_setDimmerReClock:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_Flash_Memory_Initialization:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_Flash_Memory_Main:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_Flash_Memory_Unlock:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_Flash_Memory_Erasing:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_setMemory_Modify:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_setMemory_LoopSave:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_WDT_Main:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_setRF_Learn:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_TouchPower:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_SwPointSelect:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_DelayTimejudge:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_getDimmerLights_Allow_Condition:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_getLoad_OK:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_getMain_All_Error_Status:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_getMain_LightsStatus:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_setPercentValue:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_getPercentValue:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_Flash_Memory_Read:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_getRF_KeyStatus:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_getSw_KeyStatus:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDelayOff_GO:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getDimmer_LoadGO:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getDimmerLights_Line:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getDimmerLights_Status:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_getAll_DimmerLights_AdjSw:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getDimmer_Load_Status:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_getMain_Lights_Count:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     getDimmerLights_Allow_Condition@lights:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     getSw_KeyStatus@sw:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955                           
  2956                           ; 1 bytes @ 0x0
  2957  0070                     	ds	1
  2958  0071                     DimmerIntrIOCPointSelect@lights:	
  2959  0071                     DimmerIntrPointSelect@lights:	
  2960                           ; 1 bytes @ 0x1
  2961                           
  2962                           
  2963                           ; 1 bytes @ 0x1
  2964  0071                     	ds	1
  2965  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2966  0072                     ??_setDimmerLights_IntrControl:	
  2967                           ; 0 bytes @ 0x2
  2968                           
  2969  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2970                           ; 0 bytes @ 0x2
  2971                           
  2972                           
  2973                           ; 1 bytes @ 0x2
  2974  0072                     	ds	1
  2975  0073                     ??_IOC_ISR:	
  2976  0073                     ??_setDimmerReClock:	
  2977                           ; 0 bytes @ 0x3
  2978                           
  2979  0073                     setDimmerLights_IntrControl@lights:	
  2980                           ; 0 bytes @ 0x3
  2981                           
  2982                           
  2983                           ; 1 bytes @ 0x3
  2984  0073                     	ds	1
  2985  0074                     ??_TMR1_ISR:	
  2986  0074                     ??_ISR:	
  2987                           ; 0 bytes @ 0x4
  2988                           
  2989                           
  2990                           ; 0 bytes @ 0x4
  2991  0074                     	ds	1
  2992                           
  2993                           	psect	cstackBANK0
  2994  0020                     __pcstackBANK0:	
  2995  0020                     ??_Timeout_Counter:	
  2996  0020                     ??_set_TimeoutCleared:	
  2997                           ; 0 bytes @ 0x0
  2998                           
  2999  0020                     ??_CC2500_WriteByte:	
  3000                           ; 0 bytes @ 0x0
  3001                           
  3002  0020                     ??_CC2500_ReadByte:	
  3003                           ; 0 bytes @ 0x0
  3004                           
  3005  0020                     ?_DelayTime_1us:	
  3006                           ; 0 bytes @ 0x0
  3007                           
  3008  0020                     ??_getLoad_OK:	
  3009                           ; 0 bytes @ 0x0
  3010                           
  3011  0020                     ??_getMain_All_Error_Status:	
  3012                           ; 0 bytes @ 0x0
  3013                           
  3014  0020                     ??_getMain_LightsStatus:	
  3015                           ; 0 bytes @ 0x0
  3016                           
  3017  0020                     ??_setDimmerLights_Line:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ??_setTxData:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_Fosc_Set:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ??_IO_Set:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ??_TMR1_Set:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_ADC_Set:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ??_IOC_Set:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_WDT_Set:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_Flash_Memory_Read:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ?_setMemory_Data:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_Flash_Memory_Write:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_WDT_Clearing:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_myMain_Initialization:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_Temp_Initialization:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_setLoad_AH_AL_Restore:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_setTemp_Initialization:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ??_setRF_Initialization:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_getRF_KeyStatus:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_getSw_KeyStatus:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_Buzzer_Initialization:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_Buzzer_Main:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_DelayOffPointSelect:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_DimmerLightsPointSelect:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ??_getDimmer_LoadGO:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_getDimmerLights_Line:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_getDimmer_Load_Status:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_LedPointSelect:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_Flash_Memory_Unlock:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_Flash_Memory_Erasing:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_setMemory_Modify:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_setMemory_LoopSave:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ??_WDT_Main:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ??_getMain_Lights_Count:	
  3114                           ; 0 bytes @ 0x0
  3115                           
  3116  0020                     ??_setRF_Learn:	
  3117                           ; 0 bytes @ 0x0
  3118                           
  3119  0020                     ??_TouchPower:	
  3120                           ; 0 bytes @ 0x0
  3121                           
  3122  0020                     ??_SwPointSelect:	
  3123                           ; 0 bytes @ 0x0
  3124                           
  3125  0020                     ?___bmul:	
  3126                           ; 0 bytes @ 0x0
  3127                           
  3128  0020                     ?_getBuz_GO:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0020                     ?_getAD:	
  3132                           ; 2 bytes @ 0x0
  3133                           
  3134  0020                     ?___wmul:	
  3135                           ; 2 bytes @ 0x0
  3136                           
  3137  0020                     ?___awdiv:	
  3138                           ; 2 bytes @ 0x0
  3139                           
  3140  0020                     ?___lwdiv:	
  3141                           ; 2 bytes @ 0x0
  3142                           
  3143  0020                     ?___ftpack:	
  3144                           ; 2 bytes @ 0x0
  3145                           
  3146  0020                     getDimmer_LoadGO@loadgo:	
  3147                           ; 3 bytes @ 0x0
  3148                           
  3149  0020                     setDimmerLights_Line@lights:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0020                     getDimmerLights_Line@line:	
  3153                           ; 1 bytes @ 0x0
  3154                           
  3155  0020                     getDimmer_Load_Status@status:	
  3156                           ; 1 bytes @ 0x0
  3157                           
  3158  0020                     getAD@adcon1:	
  3159                           ; 1 bytes @ 0x0
  3160                           
  3161  0020                     setMemory_Data@data:	
  3162                           ; 1 bytes @ 0x0
  3163                           
  3164  0020                     getMain_LightsStatus@status:	
  3165                           ; 1 bytes @ 0x0
  3166                           
  3167  0020                     getMain_Lights_Count@count:	
  3168                           ; 1 bytes @ 0x0
  3169                           
  3170  0020                     getLoad_OK@ok:	
  3171                           ; 1 bytes @ 0x0
  3172                           
  3173  0020                     ___bmul@multiplicand:	
  3174                           ; 1 bytes @ 0x0
  3175                           
  3176  0020                     DelayTime_1us@count:	
  3177                           ; 1 bytes @ 0x0
  3178                           
  3179  0020                     ___wmul@multiplier:	
  3180                           ; 2 bytes @ 0x0
  3181                           
  3182  0020                     ___awdiv@divisor:	
  3183                           ; 2 bytes @ 0x0
  3184                           
  3185  0020                     ___lwdiv@divisor:	
  3186                           ; 2 bytes @ 0x0
  3187                           
  3188  0020                     ___ftpack@arg:	
  3189                           ; 2 bytes @ 0x0
  3190                           
  3191                           
  3192                           ; 3 bytes @ 0x0
  3193  0020                     	ds	1
  3194  0021                     ??_getDimmerLights_Allow_Condition:	
  3195  0021                     ??_setMemory_Data:	
  3196                           ; 0 bytes @ 0x1
  3197                           
  3198  0021                     ??_RF_Initialization:	
  3199                           ; 0 bytes @ 0x1
  3200                           
  3201  0021                     ??_Mcu_Initialization:	
  3202                           ; 0 bytes @ 0x1
  3203                           
  3204  0021                     ??___bmul:	
  3205                           ; 0 bytes @ 0x1
  3206                           
  3207  0021                     CC2500_WriteByte@loop_a:	
  3208                           ; 0 bytes @ 0x1
  3209                           
  3210  0021                     CC2500_ReadByte@loop_b:	
  3211                           ; 1 bytes @ 0x1
  3212                           
  3213  0021                     DelayOffPointSelect@sw:	
  3214                           ; 1 bytes @ 0x1
  3215                           
  3216  0021                     DimmerLightsPointSelect@lights:	
  3217                           ; 1 bytes @ 0x1
  3218                           
  3219  0021                     LedPointSelect@led:	
  3220                           ; 1 bytes @ 0x1
  3221                           
  3222  0021                     Flash_Memory_Read@i:	
  3223                           ; 1 bytes @ 0x1
  3224                           
  3225  0021                     Flash_Memory_Write@i:	
  3226                           ; 1 bytes @ 0x1
  3227                           
  3228  0021                     setMemory_Modify@command:	
  3229                           ; 1 bytes @ 0x1
  3230                           
  3231  0021                     setMemory_LoopSave@command:	
  3232                           ; 1 bytes @ 0x1
  3233                           
  3234  0021                     getMain_Lights_Count@status1:	
  3235                           ; 1 bytes @ 0x1
  3236                           
  3237  0021                     setLoad_AH_AL_Restore@i:	
  3238                           ; 1 bytes @ 0x1
  3239                           
  3240  0021                     setRF_Learn@command:	
  3241                           ; 1 bytes @ 0x1
  3242                           
  3243  0021                     getRF_KeyStatus@key:	
  3244                           ; 1 bytes @ 0x1
  3245                           
  3246  0021                     SwPointSelect@sw:	
  3247                           ; 1 bytes @ 0x1
  3248                           
  3249  0021                     getSw_KeyStatus@status:	
  3250                           ; 1 bytes @ 0x1
  3251                           
  3252  0021                     _getMain_All_Error_Status$3424:	
  3253                           ; 1 bytes @ 0x1
  3254                           
  3255                           
  3256                           ; 2 bytes @ 0x1
  3257  0021                     	ds	1
  3258  0022                     ??_CC2500_WriteCommand:	
  3259  0022                     ??_CC2500_ReadStatus:	
  3260                           ; 0 bytes @ 0x2
  3261                           
  3262  0022                     ??_DelayTime_1us:	
  3263                           ; 0 bytes @ 0x2
  3264                           
  3265  0022                     ?_CC2500_WriteREG:	
  3266                           ; 0 bytes @ 0x2
  3267                           
  3268  0022                     ??_DlyOff_Initialization:	
  3269                           ; 0 bytes @ 0x2
  3270                           
  3271  0022                     ??_setDimmerLights_Initialization:	
  3272                           ; 0 bytes @ 0x2
  3273                           
  3274  0022                     ?_setLED:	
  3275                           ; 0 bytes @ 0x2
  3276                           
  3277  0022                     ??_setLED_Main:	
  3278                           ; 0 bytes @ 0x2
  3279                           
  3280  0022                     ??_Load_Initialization:	
  3281                           ; 0 bytes @ 0x2
  3282                           
  3283  0022                     ??_getBuz_GO:	
  3284                           ; 0 bytes @ 0x2
  3285                           
  3286  0022                     ??_getDelayOff_GO:	
  3287                           ; 0 bytes @ 0x2
  3288                           
  3289  0022                     ??_getDimmerLights_Status:	
  3290                           ; 0 bytes @ 0x2
  3291                           
  3292  0022                     ??_getAll_DimmerLights_AdjSw:	
  3293                           ; 0 bytes @ 0x2
  3294                           
  3295  0022                     CC2500_WriteREG@value:	
  3296                           ; 0 bytes @ 0x2
  3297                           
  3298  0022                     DlyOff_Initialization@sw:	
  3299                           ; 1 bytes @ 0x2
  3300                           
  3301  0022                     getDelayOff_GO@sw:	
  3302                           ; 1 bytes @ 0x2
  3303                           
  3304  0022                     getDimmerLights_Allow_Condition@allow:	
  3305                           ; 1 bytes @ 0x2
  3306                           
  3307  0022                     getDimmerLights_Status@lights:	
  3308                           ; 1 bytes @ 0x2
  3309                           
  3310  0022                     setLED@command:	
  3311                           ; 1 bytes @ 0x2
  3312                           
  3313  0022                     Flash_Memory_Read@address:	
  3314                           ; 1 bytes @ 0x2
  3315                           
  3316  0022                     setMemory_Data@address:	
  3317                           ; 1 bytes @ 0x2
  3318                           
  3319  0022                     _getRF_KeyStatus$5048:	
  3320                           ; 1 bytes @ 0x2
  3321                           
  3322  0022                     _getSw_KeyStatus$6016:	
  3323                           ; 1 bytes @ 0x2
  3324                           
  3325  0022                     ___bmul@product:	
  3326                           ; 1 bytes @ 0x2
  3327                           
  3328  0022                     DelayTime_1us@i:	
  3329                           ; 1 bytes @ 0x2
  3330                           
  3331  0022                     ___wmul@multiplicand:	
  3332                           ; 2 bytes @ 0x2
  3333                           
  3334  0022                     ___awdiv@dividend:	
  3335                           ; 2 bytes @ 0x2
  3336                           
  3337  0022                     ___lwdiv@dividend:	
  3338                           ; 2 bytes @ 0x2
  3339                           
  3340                           
  3341                           ; 2 bytes @ 0x2
  3342  0022                     	ds	1
  3343  0023                     ??_CC2500_WriteREG:	
  3344  0023                     ??_setLED:	
  3345                           ; 0 bytes @ 0x3
  3346                           
  3347  0023                     ??_DelayOff_Initialization:	
  3348                           ; 0 bytes @ 0x3
  3349                           
  3350  0023                     ??_getAD:	
  3351                           ; 0 bytes @ 0x3
  3352                           
  3353  0023                     CC2500_WriteCommand@command:	
  3354                           ; 0 bytes @ 0x3
  3355                           
  3356  0023                     CC2500_ReadStatus@status_addr:	
  3357                           ; 1 bytes @ 0x3
  3358                           
  3359  0023                     getDelayOff_GO@go:	
  3360                           ; 1 bytes @ 0x3
  3361                           
  3362  0023                     setDimmerLights_Initialization@lights:	
  3363                           ; 1 bytes @ 0x3
  3364                           
  3365  0023                     _getDimmerLights_Allow_Condition$2172:	
  3366                           ; 1 bytes @ 0x3
  3367                           
  3368  0023                     getDimmerLights_Status@status:	
  3369                           ; 1 bytes @ 0x3
  3370                           
  3371  0023                     getAll_DimmerLights_AdjSw@count:	
  3372                           ; 1 bytes @ 0x3
  3373                           
  3374  0023                     setLED@led:	
  3375                           ; 1 bytes @ 0x3
  3376                           
  3377  0023                     getAD@adcon0:	
  3378                           ; 1 bytes @ 0x3
  3379                           
  3380  0023                     Flash_Memory_Read@ret:	
  3381                           ; 1 bytes @ 0x3
  3382                           
  3383  0023                     ___bmul@multiplier:	
  3384                           ; 1 bytes @ 0x3
  3385                           
  3386  0023                     ___ftpack@exp:	
  3387                           ; 1 bytes @ 0x3
  3388                           
  3389  0023                     _getMain_All_Error_Status$3425:	
  3390                           ; 1 bytes @ 0x3
  3391                           
  3392                           
  3393                           ; 2 bytes @ 0x3
  3394  0023                     	ds	1
  3395  0024                     ??_CC2500_ClearTXFIFO:	
  3396  0024                     ??_CC2500_ClearRXFIFO:	
  3397                           ; 0 bytes @ 0x4
  3398                           
  3399  0024                     ??_CC2500_SIDLEMode:	
  3400                           ; 0 bytes @ 0x4
  3401                           
  3402  0024                     ??_DelayTimejudge:	
  3403                           ; 0 bytes @ 0x4
  3404                           
  3405  0024                     ??_setLED_Initialization:	
  3406                           ; 0 bytes @ 0x4
  3407                           
  3408  0024                     ??_Flash_Memory_Modify:	
  3409                           ; 0 bytes @ 0x4
  3410                           
  3411  0024                     ??_getLoad_AD:	
  3412                           ; 0 bytes @ 0x4
  3413                           
  3414  0024                     ??_getTemp_AD:	
  3415                           ; 0 bytes @ 0x4
  3416                           
  3417  0024                     ??_RF_RxDisable:	
  3418                           ; 0 bytes @ 0x4
  3419                           
  3420  0024                     ??_setSw_Initialization:	
  3421                           ; 0 bytes @ 0x4
  3422                           
  3423  0024                     ??_CC2500_TxData:	
  3424                           ; 0 bytes @ 0x4
  3425                           
  3426  0024                     ??_CC2500_RxData:	
  3427                           ; 0 bytes @ 0x4
  3428                           
  3429  0024                     ??_DimmerLights_Initialization:	
  3430                           ; 0 bytes @ 0x4
  3431                           
  3432  0024                     ??_setDimmerLights_AdjOn:	
  3433                           ; 0 bytes @ 0x4
  3434                           
  3435  0024                     ??___wmul:	
  3436                           ; 0 bytes @ 0x4
  3437                           
  3438  0024                     ??___awdiv:	
  3439                           ; 0 bytes @ 0x4
  3440                           
  3441  0024                     ??___lwdiv:	
  3442                           ; 0 bytes @ 0x4
  3443                           
  3444  0024                     CC2500_WriteREG@w_addr:	
  3445                           ; 0 bytes @ 0x4
  3446                           
  3447  0024                     setDimmerLights_AdjOn@sw:	
  3448                           ; 1 bytes @ 0x4
  3449                           
  3450  0024                     setLED_Initialization@led:	
  3451                           ; 1 bytes @ 0x4
  3452                           
  3453  0024                     setLED_Main@led:	
  3454                           ; 1 bytes @ 0x4
  3455                           
  3456  0024                     setSw_Initialization@sw:	
  3457                           ; 1 bytes @ 0x4
  3458                           
  3459  0024                     ___ftpack@sign:	
  3460                           ; 1 bytes @ 0x4
  3461                           
  3462  0024                     getBuz_GO@i:	
  3463                           ; 1 bytes @ 0x4
  3464                           
  3465  0024                     DelayTime_1us@j:	
  3466                           ; 2 bytes @ 0x4
  3467                           
  3468  0024                     getAll_DimmerLights_AdjSw@i:	
  3469                           ; 2 bytes @ 0x4
  3470                           
  3471  0024                     ___wmul@product:	
  3472                           ; 2 bytes @ 0x4
  3473                           
  3474                           
  3475                           ; 2 bytes @ 0x4
  3476  0024                     	ds	1
  3477  0025                     ??_CC2500_InitSetREG:	
  3478  0025                     ??_CC2500_InitPATable:	
  3479                           ; 0 bytes @ 0x5
  3480                           
  3481  0025                     ??_Switch_Initialization:	
  3482                           ; 0 bytes @ 0x5
  3483                           
  3484  0025                     ??___ftpack:	
  3485                           ; 0 bytes @ 0x5
  3486                           
  3487  0025                     ??_LED_Initialization:	
  3488                           ; 0 bytes @ 0x5
  3489                           
  3490  0025                     ??_LED_Main:	
  3491                           ; 0 bytes @ 0x5
  3492                           
  3493  0025                     CC2500_TxData@loop_e:	
  3494                           ; 0 bytes @ 0x5
  3495                           
  3496  0025                     CC2500_RxData@loop_f:	
  3497                           ; 1 bytes @ 0x5
  3498                           
  3499  0025                     Flash_Memory_Modify@i:	
  3500                           ; 1 bytes @ 0x5
  3501                           
  3502  0025                     getMain_All_Error_Status@command:	
  3503                           ; 1 bytes @ 0x5
  3504                           
  3505  0025                     getTemp_AD@channel:	
  3506                           ; 1 bytes @ 0x5
  3507                           
  3508  0025                     ___awdiv@counter:	
  3509                           ; 1 bytes @ 0x5
  3510                           
  3511  0025                     ___lwdiv@counter:	
  3512                           ; 1 bytes @ 0x5
  3513                           
  3514                           
  3515                           ; 1 bytes @ 0x5
  3516  0025                     	ds	1
  3517  0026                     ??_CC2500_PowerRST:	
  3518  0026                     ??_CC2500_FrequencyCabr:	
  3519                           ; 0 bytes @ 0x6
  3520                           
  3521  0026                     ??_Flash_Memory_Main:	
  3522                           ; 0 bytes @ 0x6
  3523                           
  3524  0026                     CC2500_InitSetREG@temp1:	
  3525                           ; 0 bytes @ 0x6
  3526                           
  3527  0026                     CC2500_InitPATable@temp:	
  3528                           ; 1 bytes @ 0x6
  3529                           
  3530  0026                     DelayTimejudge@i:	
  3531                           ; 1 bytes @ 0x6
  3532                           
  3533  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3534                           ; 1 bytes @ 0x6
  3535                           
  3536  0026                     getMain_All_Error_Status@status:	
  3537                           ; 1 bytes @ 0x6
  3538                           
  3539  0026                     getLoad_AD@channel:	
  3540                           ; 1 bytes @ 0x6
  3541                           
  3542  0026                     ___awdiv@sign:	
  3543                           ; 1 bytes @ 0x6
  3544                           
  3545  0026                     ___lwdiv@quotient:	
  3546                           ; 1 bytes @ 0x6
  3547                           
  3548                           
  3549                           ; 2 bytes @ 0x6
  3550  0026                     	ds	1
  3551  0027                     CC2500_InitSetREG@temp2:	
  3552  0027                     CC2500_InitPATable@loop_d:	
  3553                           ; 1 bytes @ 0x7
  3554                           
  3555  0027                     DelayTimejudge@j:	
  3556                           ; 1 bytes @ 0x7
  3557                           
  3558  0027                     getLoad_AD@k:	
  3559                           ; 1 bytes @ 0x7
  3560                           
  3561  0027                     ___awdiv@quotient:	
  3562                           ; 1 bytes @ 0x7
  3563                           
  3564                           
  3565                           ; 2 bytes @ 0x7
  3566  0027                     	ds	1
  3567  0028                     ??_Load_Main:	
  3568  0028                     ?___awtoft:	
  3569                           ; 0 bytes @ 0x8
  3570                           
  3571  0028                     CC2500_InitSetREG@loop_c:	
  3572                           ; 3 bytes @ 0x8
  3573                           
  3574  0028                     DelayTimejudge@k:	
  3575                           ; 1 bytes @ 0x8
  3576                           
  3577  0028                     getLoad_AD@j:	
  3578                           ; 1 bytes @ 0x8
  3579                           
  3580  0028                     ___awtoft@c:	
  3581                           ; 1 bytes @ 0x8
  3582                           
  3583                           
  3584                           ; 2 bytes @ 0x8
  3585  0028                     	ds	1
  3586  0029                     ?_setBuz:	
  3587  0029                     ??_CC2500_PowerOnInitial:	
  3588                           ; 0 bytes @ 0x9
  3589                           
  3590  0029                     DelayTimejudge@value:	
  3591                           ; 0 bytes @ 0x9
  3592                           
  3593  0029                     getLoad_AD@i:	
  3594                           ; 1 bytes @ 0x9
  3595                           
  3596  0029                     setBuz@time:	
  3597                           ; 1 bytes @ 0x9
  3598                           
  3599                           
  3600                           ; 2 bytes @ 0x9
  3601  0029                     	ds	1
  3602  002A                     Load_Main@error:	
  3603                           
  3604                           ; 1 bytes @ 0xA
  3605  002A                     	ds	1
  3606  002B                     ??_setBuz:	
  3607  002B                     ??___awtoft:	
  3608                           ; 0 bytes @ 0xB
  3609                           
  3610  002B                     Load_Main@Load_Status:	
  3611                           ; 0 bytes @ 0xB
  3612                           
  3613                           
  3614                           ; 1 bytes @ 0xB
  3615  002B                     	ds	1
  3616  002C                     setBuz@count:	
  3617  002C                     Load_Main@i:	
  3618                           ; 1 bytes @ 0xC
  3619                           
  3620                           
  3621                           ; 2 bytes @ 0xC
  3622  002C                     	ds	1
  3623  002D                     ??_my_MainTimer:	
  3624  002D                     ??_setDimmerLights_SwOn:	
  3625                           ; 0 bytes @ 0xD
  3626                           
  3627  002D                     setDimmerLights_SwOn@sw:	
  3628                           ; 0 bytes @ 0xD
  3629                           
  3630  002D                     ___awtoft@sign:	
  3631                           ; 1 bytes @ 0xD
  3632                           
  3633                           
  3634                           ; 1 bytes @ 0xD
  3635  002D                     	ds	1
  3636  002E                     ?___ftdiv:	
  3637  002E                     ?___ftmul:	
  3638                           ; 3 bytes @ 0xE
  3639                           
  3640  002E                     setDimmerLights_SwOn@idle:	
  3641                           ; 3 bytes @ 0xE
  3642                           
  3643  002E                     ___ftdiv@f2:	
  3644                           ; 1 bytes @ 0xE
  3645                           
  3646  002E                     ___ftmul@f1:	
  3647                           ; 3 bytes @ 0xE
  3648                           
  3649                           
  3650                           ; 3 bytes @ 0xE
  3651  002E                     	ds	3
  3652  0031                     ___ftdiv@f1:	
  3653  0031                     ___ftmul@f2:	
  3654                           ; 3 bytes @ 0x11
  3655                           
  3656                           
  3657                           ; 3 bytes @ 0x11
  3658  0031                     	ds	3
  3659  0034                     ??___ftdiv:	
  3660  0034                     ??___ftmul:	
  3661                           ; 0 bytes @ 0x14
  3662                           
  3663                           
  3664                           ; 0 bytes @ 0x14
  3665  0034                     	ds	4
  3666  0038                     ___ftdiv@cntr:	
  3667  0038                     ___ftmul@exp:	
  3668                           ; 1 bytes @ 0x18
  3669                           
  3670                           
  3671                           ; 1 bytes @ 0x18
  3672  0038                     	ds	1
  3673  0039                     ___ftdiv@f3:	
  3674  0039                     ___ftmul@f3_as_product:	
  3675                           ; 3 bytes @ 0x19
  3676                           
  3677                           
  3678                           ; 3 bytes @ 0x19
  3679  0039                     	ds	3
  3680  003C                     ___ftdiv@exp:	
  3681  003C                     ___ftmul@cntr:	
  3682                           ; 1 bytes @ 0x1C
  3683                           
  3684                           
  3685                           ; 1 bytes @ 0x1C
  3686  003C                     	ds	1
  3687  003D                     ___ftdiv@sign:	
  3688  003D                     ___ftmul@sign:	
  3689                           ; 1 bytes @ 0x1D
  3690                           
  3691                           
  3692                           ; 1 bytes @ 0x1D
  3693  003D                     	ds	1
  3694  003E                     ?___ftneg:	
  3695  003E                     ___ftneg@f1:	
  3696                           ; 3 bytes @ 0x1E
  3697                           
  3698                           
  3699                           ; 3 bytes @ 0x1E
  3700  003E                     	ds	3
  3701  0041                     ??___ftneg:	
  3702  0041                     ?___ftadd:	
  3703                           ; 0 bytes @ 0x21
  3704                           
  3705  0041                     ___ftadd@f1:	
  3706                           ; 3 bytes @ 0x21
  3707                           
  3708                           
  3709                           ; 3 bytes @ 0x21
  3710  0041                     	ds	3
  3711  0044                     ___ftadd@f2:	
  3712                           
  3713                           ; 3 bytes @ 0x24
  3714  0044                     	ds	3
  3715  0047                     ??___ftadd:	
  3716                           
  3717                           ; 0 bytes @ 0x27
  3718  0047                     	ds	4
  3719  004B                     ___ftadd@sign:	
  3720                           
  3721                           ; 1 bytes @ 0x2B
  3722  004B                     	ds	1
  3723  004C                     ___ftadd@exp2:	
  3724                           
  3725                           ; 1 bytes @ 0x2C
  3726  004C                     	ds	1
  3727  004D                     ___ftadd@exp1:	
  3728                           
  3729                           ; 1 bytes @ 0x2D
  3730  004D                     	ds	1
  3731  004E                     ?___fttol:	
  3732  004E                     ___fttol@f1:	
  3733                           ; 4 bytes @ 0x2E
  3734                           
  3735                           
  3736                           ; 3 bytes @ 0x2E
  3737  004E                     	ds	4
  3738  0052                     ??___fttol:	
  3739                           
  3740                           ; 0 bytes @ 0x32
  3741  0052                     	ds	4
  3742  0056                     ___fttol@sign1:	
  3743                           
  3744                           ; 1 bytes @ 0x36
  3745  0056                     	ds	1
  3746  0057                     ___fttol@lval:	
  3747                           
  3748                           ; 4 bytes @ 0x37
  3749  0057                     	ds	4
  3750  005B                     ___fttol@exp1:	
  3751                           
  3752                           ; 1 bytes @ 0x3B
  3753  005B                     	ds	1
  3754  005C                     ??_setPercentValue:	
  3755  005C                     ??_getPercentValue:	
  3756                           ; 0 bytes @ 0x3C
  3757                           
  3758                           
  3759                           ; 0 bytes @ 0x3C
  3760  005C                     	ds	2
  3761  005E                     getPercentValue@value:	
  3762  005E                     setPercentValue@value:	
  3763                           ; 1 bytes @ 0x3E
  3764                           
  3765                           
  3766                           ; 1 bytes @ 0x3E
  3767  005E                     	ds	1
  3768  005F                     getPercentValue@i:	
  3769  005F                     setPercentValue@i:	
  3770                           ; 3 bytes @ 0x3F
  3771                           
  3772                           
  3773                           ; 3 bytes @ 0x3F
  3774  005F                     	ds	3
  3775  0062                     ?_setProductData:	
  3776  0062                     ??_setDimmerLights_AdjRF:	
  3777                           ; 0 bytes @ 0x42
  3778                           
  3779  0062                     ??_Flash_Memory_Initialization:	
  3780                           ; 0 bytes @ 0x42
  3781                           
  3782  0062                     setProductData@value:	
  3783                           ; 0 bytes @ 0x42
  3784                           
  3785                           
  3786                           ; 1 bytes @ 0x42
  3787  0062                     	ds	1
  3788  0063                     ??_setProductData:	
  3789  0063                     setDimmerLights_AdjRF@lights:	
  3790                           ; 0 bytes @ 0x43
  3791                           
  3792  0063                     Flash_Memory_Initialization@i:	
  3793                           ; 1 bytes @ 0x43
  3794                           
  3795                           
  3796                           ; 1 bytes @ 0x43
  3797  0063                     	ds	2
  3798  0065                     setProductData@address:	
  3799                           
  3800                           ; 1 bytes @ 0x45
  3801  0065                     	ds	1
  3802  0066                     ?_setRF_DimmerLights:	
  3803  0066                     ??_setTemp_Main:	
  3804                           ; 0 bytes @ 0x46
  3805                           
  3806  0066                     ??_setLog_Code:	
  3807                           ; 0 bytes @ 0x46
  3808                           
  3809  0066                     ??_setRF_DimmerValue:	
  3810                           ; 0 bytes @ 0x46
  3811                           
  3812  0066                     ?_setDelayOff_GO:	
  3813                           ; 0 bytes @ 0x46
  3814                           
  3815  0066                     setDelayOff_GO@command:	
  3816                           ; 0 bytes @ 0x46
  3817                           
  3818  0066                     setRF_DimmerLights@on:	
  3819                           ; 1 bytes @ 0x46
  3820                           
  3821                           
  3822                           ; 1 bytes @ 0x46
  3823  0066                     	ds	1
  3824  0067                     ??_setRF_DimmerLights:	
  3825  0067                     setDelayOff_GO@value:	
  3826                           ; 0 bytes @ 0x47
  3827                           
  3828  0067                     setRF_DimmerValue@lights:	
  3829                           ; 1 bytes @ 0x47
  3830                           
  3831                           
  3832                           ; 1 bytes @ 0x47
  3833  0067                     	ds	1
  3834  0068                     ??_setRFSW_AdjControl:	
  3835  0068                     ??_setDelayOff_GO:	
  3836                           ; 0 bytes @ 0x48
  3837                           
  3838  0068                     setTemp_Main@error:	
  3839                           ; 0 bytes @ 0x48
  3840                           
  3841                           
  3842                           ; 1 bytes @ 0x48
  3843  0068                     	ds	1
  3844  0069                     ??_Temp_Main:	
  3845  0069                     setDelayOff_GO@sw:	
  3846                           ; 0 bytes @ 0x49
  3847                           
  3848  0069                     setRF_DimmerLights@status:	
  3849                           ; 1 bytes @ 0x49
  3850                           
  3851                           
  3852                           ; 1 bytes @ 0x49
  3853  0069                     	ds	1
  3854  006A                     ??_setDimmerLights_SwOff:	
  3855  006A                     setDimmerLights_SwOff@sw:	
  3856                           ; 0 bytes @ 0x4A
  3857                           
  3858  006A                     setRFSW_AdjControl@status:	
  3859                           ; 1 bytes @ 0x4A
  3860                           
  3861  006A                     setRF_DimmerLights@lights:	
  3862                           ; 1 bytes @ 0x4A
  3863                           
  3864                           
  3865                           ; 1 bytes @ 0x4A
  3866  006A                     	ds	1
  3867  006B                     ??_setDimmerLights_ErrorClose:	
  3868  006B                     ?_setDimmerLights:	
  3869                           ; 0 bytes @ 0x4B
  3870                           
  3871  006B                     ?_setDimmerLights_Adj:	
  3872                           ; 0 bytes @ 0x4B
  3873                           
  3874  006B                     ??_Exception_Main:	
  3875                           ; 0 bytes @ 0x4B
  3876                           
  3877  006B                     ??_setRFSW_Control:	
  3878                           ; 0 bytes @ 0x4B
  3879                           
  3880  006B                     ??_setSw_Main:	
  3881                           ; 0 bytes @ 0x4B
  3882                           
  3883  006B                     setDimmerLights@status:	
  3884                           ; 0 bytes @ 0x4B
  3885                           
  3886  006B                     setDimmerLights_Adj@status:	
  3887                           ; 1 bytes @ 0x4B
  3888                           
  3889  006B                     setRFSW_AdjControl@sw:	
  3890                           ; 1 bytes @ 0x4B
  3891                           
  3892                           
  3893                           ; 1 bytes @ 0x4B
  3894  006B                     	ds	1
  3895  006C                     ??_DlyOff_Main:	
  3896  006C                     ??_setDimmerLights:	
  3897                           ; 0 bytes @ 0x4C
  3898                           
  3899  006C                     ??_setDimmerLights_Adj:	
  3900                           ; 0 bytes @ 0x4C
  3901                           
  3902  006C                     setRFSW_Control@status:	
  3903                           ; 0 bytes @ 0x4C
  3904                           
  3905                           
  3906                           ; 1 bytes @ 0x4C
  3907  006C                     	ds	1
  3908  006D                     setDimmerLights@lights:	
  3909  006D                     setDimmerLights_Adj@lights:	
  3910                           ; 1 bytes @ 0x4D
  3911                           
  3912  006D                     setRFSW_Control@sw:	
  3913                           ; 1 bytes @ 0x4D
  3914                           
  3915  006D                     setSw_Main@sw:	
  3916                           ; 1 bytes @ 0x4D
  3917                           
  3918                           
  3919                           ; 1 bytes @ 0x4D
  3920  006D                     	ds	1
  3921  006E                     ??_setDimmerLights_Main:	
  3922  006E                     ??_Switch_Main:	
  3923                           ; 0 bytes @ 0x4E
  3924                           
  3925  006E                     ??_getRxData:	
  3926                           ; 0 bytes @ 0x4E
  3927                           
  3928  006E                     ??_setControl_Lights_Table:	
  3929                           ; 0 bytes @ 0x4E
  3930                           
  3931  006E                     DlyOff_Main@sw:	
  3932                           ; 0 bytes @ 0x4E
  3933                           
  3934  006E                     setDimmerLights_Main@lights:	
  3935                           ; 1 bytes @ 0x4E
  3936                           
  3937                           
  3938                           ; 1 bytes @ 0x4E
  3939  006E                     	ds	1
  3940  006F                     ??_RF_Main:	
  3941  006F                     ??_setRF_Main:	
  3942                           ; 0 bytes @ 0x4F
  3943                           
  3944  006F                     ??_DelayOff_Main:	
  3945                           ; 0 bytes @ 0x4F
  3946                           
  3947  006F                     ??_DimmerLights_Main:	
  3948                           ; 0 bytes @ 0x4F
  3949                           
  3950  006F                     ??_main:	
  3951                           ; 0 bytes @ 0x4F
  3952                           
  3953                           
  3954                           	psect	maintext
  3955  0895                     __pmaintext:	
  3956                           ; 0 bytes @ 0x4F
  3957 ;;
  3958 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3959 ;;
  3960 ;; *************** function _main *****************
  3961 ;; Defined at:
  3962 ;;		line 7 in file "../src/Main_B1.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  argc            2    0[BANK3 ] int 
  3965 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;		None
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  2    0[BANK3 ] int 
  3970 ;; Registers used:
  3971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3972 ;; Tracked objects:
  3973 ;;		On entry : 17F/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3977 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3980 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3981 ;;Total ram usage:        4 bytes
  3982 ;; Hardware stack levels required when called:   15
  3983 ;; This function calls:
  3984 ;;		_Buzzer_Initialization
  3985 ;;		_Buzzer_Main
  3986 ;;		_CC2500_PowerOnInitial
  3987 ;;		_DelayOff_Initialization
  3988 ;;		_DelayOff_Main
  3989 ;;		_DimmerLights_Initialization
  3990 ;;		_DimmerLights_Main
  3991 ;;		_Exception_Main
  3992 ;;		_Flash_Memory_Initialization
  3993 ;;		_Flash_Memory_Main
  3994 ;;		_LED_Initialization
  3995 ;;		_LED_Main
  3996 ;;		_Load_Initialization
  3997 ;;		_Load_Main
  3998 ;;		_Mcu_Initialization
  3999 ;;		_RF_Initialization
  4000 ;;		_RF_Main
  4001 ;;		_Switch_Initialization
  4002 ;;		_Switch_Main
  4003 ;;		_Temp_Initialization
  4004 ;;		_Temp_Main
  4005 ;;		_WDT_Main
  4006 ;;		_getLoad_AD
  4007 ;;		_getTemp_AD
  4008 ;;		_myMain_Initialization
  4009 ;;		_my_MainTimer
  4010 ;; This function is called by:
  4011 ;;		Startup code after reset
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           
  4016                           ;psect for function _main
  4017  0895                     _main:	
  4018                           
  4019                           ;Main_B1.c: 8: myMain_Initialization();
  4020                           
  4021                           ;incstack = 0
  4022                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4023  0895  319D  258C  3188   	fcall	_myMain_Initialization
  4024                           
  4025                           ;Main_B1.c: 9: Mcu_Initialization();
  4026  0898  319E  2623  3188   	fcall	_Mcu_Initialization
  4027                           
  4028                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4029  089B  3185  2550  3188   	fcall	_Flash_Memory_Initialization
  4030                           
  4031                           ;Main_B1.c: 11: LED_Initialization();
  4032  089E  319C  243E  3188   	fcall	_LED_Initialization
  4033                           
  4034                           ;Main_B1.c: 12: Buzzer_Initialization();
  4035  08A1  319C  2414  3188   	fcall	_Buzzer_Initialization
  4036                           
  4037                           ;Main_B1.c: 14: ;;
  4038                           ;Main_B1.c: 15: Temp_Initialization();
  4039  08A4  319C  2420  3188   	fcall	_Temp_Initialization
  4040                           
  4041                           ;Main_B1.c: 16: Load_Initialization();
  4042  08A7  319C  2417  3188   	fcall	_Load_Initialization
  4043                           
  4044                           ;Main_B1.c: 17: ;;
  4045                           ;Main_B1.c: 18: DelayOff_Initialization();
  4046  08AA  319C  2436  3188   	fcall	_DelayOff_Initialization
  4047                           
  4048                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4049  08AD  319C  24AC  3188   	fcall	_DimmerLights_Initialization
  4050                           
  4051                           ;Main_B1.c: 21: ;;
  4052                           ;Main_B1.c: 22: ;;
  4053                           ;Main_B1.c: 23: ;;
  4054                           ;Main_B1.c: 24: Switch_Initialization();
  4055  08B0  319C  2499  3188   	fcall	_Switch_Initialization
  4056                           
  4057                           ;Main_B1.c: 25: RF_Initialization();
  4058  08B3  319C  241A  3188   	fcall	_RF_Initialization
  4059                           
  4060                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4061  08B6  319E  26A9  3188   	fcall	_CC2500_PowerOnInitial
  4062  08B9                     l10242:	
  4063                           ;Main_B1.c: 27: ;;
  4064                           ;Main_B1.c: 28: ;;
  4065                           ;Main_B1.c: 30: while (1) {
  4066                           
  4067                           
  4068                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4069  08B9  0021               	movlb	1	; select bank1
  4070  08BA  1C20               	btfss	_myMain^(0+128),0
  4071  08BB  28C4               	goto	l10246
  4072                           
  4073                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4074  08BC  3005               	movlw	5
  4075  08BD  318D  2504  3188   	fcall	_getLoad_AD
  4076                           
  4077                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4078  08C0  3009               	movlw	9
  4079  08C1  3194  2492  3188   	fcall	_getTemp_AD
  4080  08C4                     l10246:	
  4081                           
  4082                           ;Main_B1.c: 57: }
  4083                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4084  08C4  0022               	movlb	2	; select bank2
  4085  08C5  1C20               	btfss	_Timer1^(0+256),0
  4086  08C6  28B9               	goto	l10242
  4087                           
  4088                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4089  08C7  1020               	bcf	_Timer1^(0+256),0
  4090                           
  4091                           ;Main_B1.c: 96: my_MainTimer();
  4092  08C8  3188  2000  3188   	fcall	_my_MainTimer
  4093                           
  4094                           ;Main_B1.c: 97: WDT_Main();
  4095  08CB  319E  2635  3188   	fcall	_WDT_Main
  4096                           
  4097                           ;Main_B1.c: 98: ;;
  4098                           ;Main_B1.c: 99: ;;
  4099                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4100  08CE  0021               	movlb	1	; select bank1
  4101  08CF  1C20               	btfss	_myMain^(0+128),0
  4102  08D0  28B9               	goto	l10242
  4103                           
  4104                           ;Main_B1.c: 101: Flash_Memory_Main();
  4105  08D1  3193  2309  3188   	fcall	_Flash_Memory_Main
  4106                           
  4107                           ;Main_B1.c: 103: LED_Main();
  4108  08D4  319C  2442  3188   	fcall	_LED_Main
  4109                           
  4110                           ;Main_B1.c: 104: Buzzer_Main();
  4111  08D7  3194  24D0  3188   	fcall	_Buzzer_Main
  4112                           
  4113                           ;Main_B1.c: 106: ;;
  4114                           ;Main_B1.c: 107: Temp_Main();
  4115  08DA  319C  2423  3188   	fcall	_Temp_Main
  4116                           
  4117                           ;Main_B1.c: 108: Load_Main();
  4118  08DD  3180  2041  3188   	fcall	_Load_Main
  4119                           
  4120                           ;Main_B1.c: 109: ;;
  4121                           ;Main_B1.c: 111: ;;
  4122                           ;Main_B1.c: 112: DimmerLights_Main();
  4123  08E0  319F  274E  3188   	fcall	_DimmerLights_Main
  4124                           
  4125                           ;Main_B1.c: 113: Switch_Main();
  4126  08E3  319C  2468  3188   	fcall	_Switch_Main
  4127                           
  4128                           ;Main_B1.c: 114: ;;
  4129                           ;Main_B1.c: 115: ;;
  4130                           ;Main_B1.c: 117: RF_Main();
  4131  08E6  319C  241D  3188   	fcall	_RF_Main
  4132                           
  4133                           ;Main_B1.c: 118: DelayOff_Main();
  4134  08E9  319C  243A  3188   	fcall	_DelayOff_Main
  4135                           
  4136                           ;Main_B1.c: 119: ;;
  4137                           ;Main_B1.c: 120: ;;
  4138                           ;Main_B1.c: 121: Exception_Main();
  4139  08EC  3186  262C  3188   	fcall	_Exception_Main
  4140  08EF  28B9               	goto	l10242
  4141  08F0                     __end_of_main:	
  4142                           ;Main_B1.c: 128: }
  4143                           ;Main_B1.c: 129: }
  4144                           ;Main_B1.c: 163: }
  4145                           ;Main_B1.c: 164: return (0);
  4146                           ;	Return value of _main is never used
  4147                           
  4148                           
  4149                           	psect	text1
  4150  0800                     __ptext1:	
  4151 ;; *************** function _my_MainTimer *****************
  4152 ;; Defined at:
  4153 ;;		line 185 in file "../src/Main_B1.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;		None               void
  4160 ;; Registers used:
  4161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;Total ram usage:        1 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    7
  4174 ;; This function calls:
  4175 ;;		_setBuz
  4176 ;; This function is called by:
  4177 ;;		_main
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           
  4182                           ;psect for function _my_MainTimer
  4183  0800                     _my_MainTimer:	
  4184                           
  4185                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4186                           
  4187                           ;incstack = 0
  4188                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4189  0800  0021               	movlb	1	; select bank1
  4190  0801  1820               	btfsc	_myMain^(0+128),0
  4191  0802  281A               	goto	l9944
  4192                           
  4193                           ;Main_B1.c: 189: myMain.PowerCount++;
  4194  0803  3001               	movlw	1
  4195  0804  0020               	movlb	0	; select bank0
  4196  0805  00AD               	movwf	??_my_MainTimer
  4197  0806  082D               	movf	??_my_MainTimer,w
  4198  0807  0021               	movlb	1	; select bank1
  4199  0808  07A1               	addwf	(_myMain^(0+128)+1),f
  4200                           
  4201                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4202  0809  0821               	movf	(_myMain^(0+128)+1),w
  4203  080A  3A96               	xorlw	150
  4204  080B  1D03               	skipz
  4205  080C  0008               	return
  4206                           
  4207                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4208  080D  01A1               	clrf	(_myMain^(0+128)+1)
  4209                           
  4210                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4211  080E  1420               	bsf	_myMain^(0+128),0
  4212                           
  4213                           ;Main_B1.c: 197: setBuz(3, 50);
  4214  080F  3032               	movlw	50
  4215  0810  0020               	movlb	0	; select bank0
  4216  0811  00A9               	movwf	setBuz@time
  4217  0812  3000               	movlw	0
  4218  0813  00AA               	movwf	setBuz@time+1
  4219  0814  3003               	movlw	3
  4220  0815  3197  27A7         	fcall	_setBuz
  4221                           
  4222                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4223  0817  0021               	movlb	1	; select bank1
  4224  0818  1620               	bsf	_myMain^(0+128),4
  4225                           
  4226                           ;Main_B1.c: 207: }
  4227                           ;Main_B1.c: 208: } else {
  4228  0819  0008               	return
  4229  081A                     l9944:	
  4230                           
  4231                           ;Main_B1.c: 209: myMain.PowerCount++;
  4232  081A  3001               	movlw	1
  4233  081B  0020               	movlb	0	; select bank0
  4234  081C  00AD               	movwf	??_my_MainTimer
  4235  081D  082D               	movf	??_my_MainTimer,w
  4236  081E  0021               	movlb	1	; select bank1
  4237  081F  07A1               	addwf	(_myMain^(0+128)+1),f
  4238                           
  4239                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4240  0820  0821               	movf	(_myMain^(0+128)+1),w
  4241  0821  3A64               	xorlw	100
  4242  0822  1903               	btfsc	3,2
  4243                           
  4244                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4245  0823  01A1               	clrf	(_myMain^(0+128)+1)
  4246                           
  4247                           ;Main_B1.c: 226: }
  4248                           ;Main_B1.c: 228: myMain.Count1++;
  4249  0824  3001               	movlw	1
  4250  0825  07A4               	addwf	(_myMain^(0+128)+4),f
  4251  0826  3000               	movlw	0
  4252  0827  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4253                           
  4254                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4255  0828  3004               	movlw	4
  4256  0829  3EA0               	addlw	_myMain& (0+255)
  4257  082A  0086               	movwf	6
  4258  082B  0187               	clrf	7
  4259  082C  3F40               	moviw [0]fsr1
  4260  082D  3A64               	xorlw	100
  4261  082E  1D03               	skipz
  4262  082F  2832               	goto	u11285
  4263  0830  3F41               	moviw [1]fsr1
  4264  0831  3A00               	xorlw	0
  4265  0832                     u11285:	
  4266  0832  1D03               	skipz
  4267  0833  0008               	return
  4268                           
  4269                           ;Main_B1.c: 230: {
  4270                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4271  0834  01A4               	clrf	(_myMain^(0+128)+4)
  4272  0835  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4273                           
  4274                           ;Main_B1.c: 243: if (myMain.Flag) {
  4275  0836  1CA0               	btfss	_myMain^(0+128),1
  4276  0837  283A               	goto	l1395
  4277                           
  4278                           ;Main_B1.c: 244: myMain.Flag = 0;
  4279  0838  10A0               	bcf	_myMain^(0+128),1
  4280                           
  4281                           ;Main_B1.c: 253: } else {
  4282  0839  0008               	return
  4283  083A                     l1395:	
  4284                           
  4285                           ;Main_B1.c: 254: myMain.Flag = 1;
  4286  083A  14A0               	bsf	_myMain^(0+128),1
  4287  083B  0008               	return
  4288  083C                     __end_of_my_MainTimer:	
  4289                           
  4290                           	psect	text2
  4291  1D8C                     __ptext2:	
  4292 ;; *************** function _myMain_Initialization *****************
  4293 ;; Defined at:
  4294 ;;		line 170 in file "../src/Main_B1.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;		None
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;		None
  4299 ;; Return value:  Size  Location     Type
  4300 ;;		None               void
  4301 ;; Registers used:
  4302 ;;		wreg, fsr1l, fsr1h
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;Total ram usage:        1 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; Hardware stack levels required when called:    5
  4315 ;; This function calls:
  4316 ;;		Nothing
  4317 ;; This function is called by:
  4318 ;;		_main
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           
  4323                           ;psect for function _myMain_Initialization
  4324  1D8C                     _myMain_Initialization:	
  4325                           
  4326                           ;Main_B1.c: 173: product = &_product;
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4330  1D8C  3020               	movlw	__product& (0+255)
  4331  1D8D  0020               	movlb	0	; select bank0
  4332  1D8E  00A0               	movwf	??_myMain_Initialization
  4333  1D8F  0820               	movf	??_myMain_Initialization,w
  4334  1D90  00F9               	movwf	_product
  4335                           
  4336                           ;Main_B1.c: 174: product->Data[20] = 209;
  4337  1D91  30D1               	movlw	209
  4338  1D92  00A0               	movwf	??_myMain_Initialization
  4339  1D93  0879               	movf	_product,w
  4340  1D94  3E14               	addlw	20
  4341  1D95  0086               	movwf	6
  4342  1D96  3002               	movlw	2	; select bank4/5
  4343  1D97  0087               	movwf	7
  4344  1D98  0820               	movf	??_myMain_Initialization,w
  4345  1D99  0081               	movwf	1
  4346  1D9A  0008               	return
  4347  1D9B                     __end_of_myMain_Initialization:	
  4348                           
  4349                           	psect	text3
  4350  1492                     __ptext3:	
  4351 ;; *************** function _getTemp_AD *****************
  4352 ;; Defined at:
  4353 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  channel         1    wreg     unsigned char 
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  channel         1    5[BANK0 ] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;		None               void
  4360 ;; Registers used:
  4361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;Total ram usage:        2 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    7
  4374 ;; This function calls:
  4375 ;;		_getAD
  4376 ;; This function is called by:
  4377 ;;		_main
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           
  4382                           ;psect for function _getTemp_AD
  4383  1492                     _getTemp_AD:	
  4384                           
  4385                           ;incstack = 0
  4386                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4387                           ;getTemp_AD@channel stored from wreg
  4388  1492  0020               	movlb	0	; select bank0
  4389  1493  00A5               	movwf	getTemp_AD@channel
  4390                           
  4391                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4392  1494  0021               	movlb	1	; select bank1
  4393  1495  1D57               	btfss	_Temp^(0+128),2
  4394  1496  0008               	return
  4395                           
  4396                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4397  1497  30F0               	movlw	240
  4398  1498  0020               	movlb	0	; select bank0
  4399  1499  00A4               	movwf	??_getTemp_AD
  4400  149A  0824               	movf	??_getTemp_AD,w
  4401  149B  00A0               	movwf	getAD@adcon1
  4402  149C  0825               	movf	getTemp_AD@channel,w
  4403  149D  319F  27E0  3194   	fcall	_getAD
  4404  14A0  0020               	movlb	0	; select bank0
  4405  14A1  0821               	movf	?_getAD+1,w
  4406  14A2  0021               	movlb	1	; select bank1
  4407  14A3  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4408  14A4  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4409  14A5  0020               	movlb	0	; select bank0
  4410  14A6  0820               	movf	?_getAD,w
  4411  14A7  0021               	movlb	1	; select bank1
  4412  14A8  01E3               	clrf	(_Temp^(0+128)+12)
  4413  14A9  07E3               	addwf	(_Temp^(0+128)+12),f
  4414                           
  4415                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4416  14AA  300C               	movlw	12
  4417  14AB  3ED7               	addlw	_Temp& (0+255)
  4418  14AC  0086               	movwf	6
  4419  14AD  0187               	clrf	7
  4420  14AE  0016               	moviw fsr1++
  4421  14AF  0401               	iorwf	1,w
  4422  14B0  1903               	skipnz
  4423  14B1  0008               	return
  4424                           
  4425                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4426  14B2  0864               	movf	((_Temp+1)^(0+128)+12),w
  4427  14B3  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4428  14B4  1D03               	skipz
  4429  14B5  2CB8               	goto	u11235
  4430  14B6  0863               	movf	(_Temp^(0+128)+12),w
  4431  14B7  025F               	subwf	(_Temp^(0+128)+8),w
  4432  14B8                     u11235:	
  4433  14B8  1803               	skipnc
  4434  14B9  2CC1               	goto	l9926
  4435                           
  4436                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4437  14BA  0864               	movf	((_Temp+1)^(0+128)+12),w
  4438  14BB  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4439  14BC  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4440  14BD  0863               	movf	(_Temp^(0+128)+12),w
  4441  14BE  01DF               	clrf	(_Temp^(0+128)+8)
  4442  14BF  07DF               	addwf	(_Temp^(0+128)+8),f
  4443                           
  4444                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4445  14C0  0008               	return
  4446  14C1                     l9926:	
  4447  14C1  0864               	movf	((_Temp+1)^(0+128)+12),w
  4448  14C2  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4449  14C3  1D03               	skipz
  4450  14C4  2CC7               	goto	u11245
  4451  14C5  0863               	movf	(_Temp^(0+128)+12),w
  4452  14C6  0261               	subwf	(_Temp^(0+128)+10),w
  4453  14C7                     u11245:	
  4454  14C7  1803               	skipnc
  4455  14C8  0008               	return
  4456                           
  4457                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4458  14C9  0864               	movf	((_Temp+1)^(0+128)+12),w
  4459  14CA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4460  14CB  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4461  14CC  0863               	movf	(_Temp^(0+128)+12),w
  4462  14CD  01E1               	clrf	(_Temp^(0+128)+10)
  4463  14CE  07E1               	addwf	(_Temp^(0+128)+10),f
  4464  14CF  0008               	return
  4465  14D0                     __end_of_getTemp_AD:	
  4466                           
  4467                           	psect	text4
  4468  0D04                     __ptext4:	
  4469 ;; *************** function _getLoad_AD *****************
  4470 ;; Defined at:
  4471 ;;		line 15 in file "../src/OverLoad_B1.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;  channel         1    wreg     unsigned char 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  channel         1    6[BANK0 ] unsigned char 
  4476 ;;  i               1    9[BANK0 ] unsigned char 
  4477 ;;  j               1    8[BANK0 ] unsigned char 
  4478 ;;  k               1    7[BANK0 ] unsigned char 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;		None               void
  4481 ;; Registers used:
  4482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4489 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;Total ram usage:        6 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    7
  4495 ;; This function calls:
  4496 ;;		_getAD
  4497 ;; This function is called by:
  4498 ;;		_main
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           
  4503                           ;psect for function _getLoad_AD
  4504  0D04                     _getLoad_AD:	
  4505                           
  4506                           ;incstack = 0
  4507                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4508                           ;getLoad_AD@channel stored from wreg
  4509  0D04  0020               	movlb	0	; select bank0
  4510  0D05  00A6               	movwf	getLoad_AD@channel
  4511                           
  4512                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4513  0D06  01A9               	clrf	getLoad_AD@i
  4514  0D07  01A8               	clrf	getLoad_AD@j
  4515  0D08  01A7               	clrf	getLoad_AD@k
  4516                           
  4517                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4518  0D09  0022               	movlb	2	; select bank2
  4519  0D0A  1E25               	btfss	_Load^(0+256),4
  4520  0D0B  0008               	return
  4521                           
  4522                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4523  0D0C  30F3               	movlw	243
  4524  0D0D  0020               	movlb	0	; select bank0
  4525  0D0E  00A4               	movwf	??_getLoad_AD
  4526  0D0F  0824               	movf	??_getLoad_AD,w
  4527  0D10  00A0               	movwf	getAD@adcon1
  4528  0D11  0826               	movf	getLoad_AD@channel,w
  4529  0D12  319F  27E0  318D   	fcall	_getAD
  4530  0D15  0020               	movlb	0	; select bank0
  4531  0D16  0821               	movf	?_getAD+1,w
  4532  0D17  0022               	movlb	2	; select bank2
  4533  0D18  01C7               	clrf	((_Load+1)^(0+256)+33)
  4534  0D19  07C7               	addwf	((_Load+1)^(0+256)+33),f
  4535  0D1A  0020               	movlb	0	; select bank0
  4536  0D1B  0820               	movf	?_getAD,w
  4537  0D1C  0022               	movlb	2	; select bank2
  4538  0D1D  01C6               	clrf	(_Load^(0+256)+33)
  4539  0D1E  07C6               	addwf	(_Load^(0+256)+33),f
  4540                           
  4541                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4542  0D1F  0020               	movlb	0	; select bank0
  4543  0D20  01A9               	clrf	getLoad_AD@i
  4544  0D21  3004               	movlw	4
  4545  0D22  0229               	subwf	getLoad_AD@i,w
  4546  0D23  1803               	btfsc	3,0
  4547  0D24  2D52               	goto	l9896
  4548  0D25                     l9884:	
  4549                           
  4550                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4551  0D25  3529               	lslf	getLoad_AD@i,w
  4552  0D26  3E30               	addlw	(_Load+11)& (0+255)
  4553  0D27  0086               	movwf	6
  4554  0D28  3001               	movlw	1	; select bank2/3
  4555  0D29  0087               	movwf	7
  4556  0D2A  3F40               	moviw [0]fsr1
  4557  0D2B  00A4               	movwf	??_getLoad_AD
  4558  0D2C  3F41               	moviw [1]fsr1
  4559  0D2D  00A5               	movwf	??_getLoad_AD+1
  4560  0D2E  0022               	movlb	2	; select bank2
  4561  0D2F  0847               	movf	((_Load+1)^(0+256)+33),w
  4562  0D30  0020               	movlb	0	; select bank0
  4563  0D31  0225               	subwf	??_getLoad_AD+1,w
  4564  0D32  1D03               	skipz
  4565  0D33  2D38               	goto	u11135
  4566  0D34  0022               	movlb	2	; select bank2
  4567  0D35  0846               	movf	(_Load^(0+256)+33),w
  4568  0D36  0020               	movlb	0	; select bank0
  4569  0D37  0224               	subwf	??_getLoad_AD,w
  4570  0D38                     u11135:	
  4571  0D38  1803               	skipnc
  4572  0D39  2D4A               	goto	l9892
  4573  0D3A  08A8               	movf	getLoad_AD@j,f
  4574  0D3B  1D03               	skipz
  4575  0D3C  2D4A               	goto	l9892
  4576                           
  4577                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4578  0D3D  3529               	lslf	getLoad_AD@i,w
  4579  0D3E  3E30               	addlw	(_Load+11)& (0+255)
  4580  0D3F  0086               	movwf	6
  4581  0D40  3001               	movlw	1	; select bank2/3
  4582  0D41  0087               	movwf	7
  4583  0D42  0022               	movlb	2	; select bank2
  4584  0D43  0846               	movf	(_Load^(0+256)+33),w
  4585  0D44  3FC0               	movwi [0]fsr1
  4586  0D45  0847               	movf	((_Load+1)^(0+256)+33),w
  4587  0D46  3FC1               	movwi [1]fsr1
  4588                           
  4589                           ;OverLoad_B1.c: 24: j = 1;
  4590  0D47  0020               	movlb	0	; select bank0
  4591  0D48  01A8               	clrf	getLoad_AD@j
  4592  0D49  0AA8               	incf	getLoad_AD@j,f
  4593  0D4A                     l9892:	
  4594  0D4A  3001               	movlw	1
  4595  0D4B  00A4               	movwf	??_getLoad_AD
  4596  0D4C  0824               	movf	??_getLoad_AD,w
  4597  0D4D  07A9               	addwf	getLoad_AD@i,f
  4598  0D4E  3004               	movlw	4
  4599  0D4F  0229               	subwf	getLoad_AD@i,w
  4600  0D50  1C03               	skipc
  4601  0D51  2D25               	goto	l9884
  4602  0D52                     l9896:	
  4603                           
  4604                           ;OverLoad_B1.c: 25: }
  4605                           ;OverLoad_B1.c: 26: }
  4606                           ;OverLoad_B1.c: 27: if (j == 0) {
  4607  0D52  08A8               	movf	getLoad_AD@j,f
  4608  0D53  1D03               	skipz
  4609  0D54  0008               	return
  4610                           
  4611                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4612  0D55  01A9               	clrf	getLoad_AD@i
  4613  0D56                     L1:	
  4614  0D56  3004               	movlw	4
  4615  0D57  0229               	subwf	getLoad_AD@i,w
  4616  0D58  1803               	btfsc	3,0
  4617  0D59  0008               	return
  4618                           
  4619                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4620  0D5A  3529               	lslf	getLoad_AD@i,w
  4621  0D5B  3E3A               	addlw	(_Load+21)& (0+255)
  4622  0D5C  0086               	movwf	6
  4623  0D5D  3001               	movlw	1	; select bank2/3
  4624  0D5E  0087               	movwf	7
  4625  0D5F  3F40               	moviw [0]fsr1
  4626  0D60  00A4               	movwf	??_getLoad_AD
  4627  0D61  3F41               	moviw [1]fsr1
  4628  0D62  00A5               	movwf	??_getLoad_AD+1
  4629  0D63  0825               	movf	??_getLoad_AD+1,w
  4630  0D64  0022               	movlb	2	; select bank2
  4631  0D65  0247               	subwf	((_Load+1)^(0+256)+33),w
  4632  0D66  1D03               	skipz
  4633  0D67  2D6C               	goto	u11185
  4634  0D68  0020               	movlb	0	; select bank0
  4635  0D69  0824               	movf	??_getLoad_AD,w
  4636  0D6A  0022               	movlb	2	; select bank2
  4637  0D6B  0246               	subwf	(_Load^(0+256)+33),w
  4638  0D6C                     u11185:	
  4639  0D6C  1803               	skipnc
  4640  0D6D  2D7F               	goto	l9912
  4641  0D6E  0020               	movlb	0	; select bank0
  4642  0D6F  08A7               	movf	getLoad_AD@k,f
  4643  0D70  1D03               	skipz
  4644  0D71  2D7F               	goto	l9912
  4645                           
  4646                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4647  0D72  3529               	lslf	getLoad_AD@i,w
  4648  0D73  3E3A               	addlw	(_Load+21)& (0+255)
  4649  0D74  0086               	movwf	6
  4650  0D75  3001               	movlw	1	; select bank2/3
  4651  0D76  0087               	movwf	7
  4652  0D77  0022               	movlb	2	; select bank2
  4653  0D78  0846               	movf	(_Load^(0+256)+33),w
  4654  0D79  3FC0               	movwi [0]fsr1
  4655  0D7A  0847               	movf	((_Load+1)^(0+256)+33),w
  4656  0D7B  3FC1               	movwi [1]fsr1
  4657                           
  4658                           ;OverLoad_B1.c: 31: k = 1;
  4659  0D7C  0020               	movlb	0	; select bank0
  4660  0D7D  01A7               	clrf	getLoad_AD@k
  4661  0D7E  0AA7               	incf	getLoad_AD@k,f
  4662  0D7F                     l9912:	
  4663  0D7F  3001               	movlw	1
  4664  0D80  0020               	movlb	0	; select bank0
  4665  0D81  00A4               	movwf	??_getLoad_AD
  4666  0D82  0824               	movf	??_getLoad_AD,w
  4667  0D83  07A9               	addwf	getLoad_AD@i,f
  4668  0D84  2D56               	goto	L1
  4669  0D85                     __end_of_getLoad_AD:	
  4670                           
  4671                           	psect	text5
  4672  1FE0                     __ptext5:	
  4673 ;; *************** function _getAD *****************
  4674 ;; Defined at:
  4675 ;;		line 453 in file "../src/MCU_B1.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  adcon0          1    wreg     unsigned char 
  4678 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  2    0[BANK0 ] int 
  4683 ;; Registers used:
  4684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4690 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4691 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;Total ram usage:        4 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    6
  4697 ;; This function calls:
  4698 ;;		_Timeout_Counter
  4699 ;;		_set_TimeoutCleared
  4700 ;; This function is called by:
  4701 ;;		_getLoad_AD
  4702 ;;		_getTemp_AD
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           
  4707                           ;psect for function _getAD
  4708  1FE0                     _getAD:	
  4709                           
  4710                           ;incstack = 0
  4711                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4712                           ;getAD@adcon0 stored from wreg
  4713  1FE0  0020               	movlb	0	; select bank0
  4714  1FE1  00A3               	movwf	getAD@adcon0
  4715                           
  4716                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4717  1FE2  0823               	movf	getAD@adcon0,w
  4718  1FE3  0021               	movlb	1	; select bank1
  4719  1FE4  009D               	movwf	29	;volatile
  4720                           
  4721                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4722  1FE5  0020               	movlb	0	; select bank0
  4723  1FE6  0820               	movf	getAD@adcon1,w
  4724  1FE7  0021               	movlb	1	; select bank1
  4725  1FE8  009E               	movwf	30	;volatile
  4726                           
  4727                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4728  1FE9  149D               	bsf	29,1	;volatile
  4729                           
  4730                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4731  1FEA  2FEE               	goto	l9384
  4732  1FEB                     l9382:	
  4733                           
  4734                           ;MCU_B1.c: 458: Timeout_Counter();
  4735  1FEB  319E  2694  319F   	fcall	_Timeout_Counter
  4736  1FEE                     l9384:	
  4737  1FEE  0021               	movlb	1	; select bank1
  4738  1FEF  1C9D               	btfss	29,1	;volatile
  4739  1FF0  2FF3               	goto	l9388
  4740  1FF1  1D2B               	btfss	(_myMain^(0+128)+11),2
  4741  1FF2  2FEB               	goto	l9382
  4742  1FF3                     l9388:	
  4743                           
  4744                           ;MCU_B1.c: 459: };
  4745                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4746  1FF3  319C  244A         	fcall	_set_TimeoutCleared
  4747                           
  4748                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4749  1FF5  0021               	movlb	1	; select bank1
  4750  1FF6  081C               	movf	28,w	;volatile
  4751  1FF7  0020               	movlb	0	; select bank0
  4752  1FF8  01A1               	clrf	?_getAD+1
  4753  1FF9  07A1               	addwf	?_getAD+1,f
  4754  1FFA  0021               	movlb	1	; select bank1
  4755  1FFB  081B               	movf	27,w	;volatile
  4756  1FFC  0020               	movlb	0	; select bank0
  4757  1FFD  01A0               	clrf	?_getAD
  4758  1FFE  07A0               	addwf	?_getAD,f
  4759  1FFF  0008               	return
  4760  2000                     __end_of_getAD:	
  4761                           
  4762                           	psect	text6
  4763  1E35                     __ptext6:	
  4764 ;; *************** function _WDT_Main *****************
  4765 ;; Defined at:
  4766 ;;		line 1097 in file "../src/MCU_B1.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;		None
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;		None               void
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0, pclath, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;Total ram usage:        1 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    6
  4787 ;; This function calls:
  4788 ;;		_WDT_Clearing
  4789 ;; This function is called by:
  4790 ;;		_main
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           
  4795                           ;psect for function _WDT_Main
  4796  1E35                     _WDT_Main:	
  4797                           
  4798                           ;MCU_B1.c: 1098: if (WDT.Enable == 1) {
  4799                           
  4800                           ;incstack = 0
  4801                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4802  1E35  0021               	movlb	1	; select bank1
  4803  1E36  1C49               	btfss	_WDT^(0+128),0
  4804  1E37  0008               	return
  4805                           
  4806                           ;MCU_B1.c: 1099: if (WDT.Timer-- > 0) {
  4807  1E38  3001               	movlw	1
  4808  1E39  02CA               	subwf	(_WDT^(0+128)+1),f
  4809  1E3A  084A               	movf	(_WDT^(0+128)+1),w
  4810  1E3B  3AFF               	xorlw	255
  4811  1E3C  1903               	skipnz
  4812  1E3D  0008               	return
  4813                           
  4814                           ;MCU_B1.c: 1100: WDT.Timer = 100;
  4815  1E3E  3064               	movlw	100
  4816  1E3F  0020               	movlb	0	; select bank0
  4817  1E40  00A0               	movwf	??_WDT_Main
  4818  1E41  0820               	movf	??_WDT_Main,w
  4819  1E42  0021               	movlb	1	; select bank1
  4820  1E43  00CA               	movwf	(_WDT^(0+128)+1)
  4821                           
  4822                           ;MCU_B1.c: 1101: WDT_Clearing();
  4823  1E44  3180  2002         	fcall	_WDT_Clearing
  4824  1E46  0008               	return
  4825  1E47                     __end_of_WDT_Main:	
  4826                           
  4827                           	psect	text7
  4828  0002                     __ptext7:	
  4829 ;; *************** function _WDT_Clearing *****************
  4830 ;; Defined at:
  4831 ;;		line 1107 in file "../src/MCU_B1.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;		None
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;		None
  4836 ;; Return value:  Size  Location     Type
  4837 ;;		None               void
  4838 ;; Registers used:
  4839 ;;		None
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;Total ram usage:        0 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; Hardware stack levels required when called:    5
  4852 ;; This function calls:
  4853 ;;		Nothing
  4854 ;; This function is called by:
  4855 ;;		_WDT_Main
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           
  4860                           ;psect for function _WDT_Clearing
  4861  0002                     _WDT_Clearing:	
  4862                           
  4863                           ;incstack = 0
  4864                           ; Regs used in _WDT_Clearing: []
  4865  0002  0064               	clrwdt	;# 
  4866  0003  0008               	return
  4867  0004                     __end_of_WDT_Clearing:	
  4868                           
  4869                           	psect	text8
  4870  1C23                     __ptext8:	
  4871 ;; *************** function _Temp_Main *****************
  4872 ;; Defined at:
  4873 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;		None
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;		None
  4878 ;; Return value:  Size  Location     Type
  4879 ;;		None               void
  4880 ;; Registers used:
  4881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;Total ram usage:        0 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    8
  4894 ;; This function calls:
  4895 ;;		_setTemp_Main
  4896 ;; This function is called by:
  4897 ;;		_main
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           
  4902                           ;psect for function _Temp_Main
  4903  1C23                     _Temp_Main:	
  4904                           
  4905                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4909  1C23  318F  2750         	fcall	_setTemp_Main
  4910  1C25  0008               	return
  4911  1C26                     __end_of_Temp_Main:	
  4912                           
  4913                           	psect	text9
  4914  0F50                     __ptext9:	
  4915 ;; *************** function _setTemp_Main *****************
  4916 ;; Defined at:
  4917 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;		None
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  error           1   72[BANK0 ] unsigned char 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;		None               void
  4924 ;; Registers used:
  4925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;Total ram usage:        3 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    7
  4938 ;; This function calls:
  4939 ;;		_getMain_All_Error_Status
  4940 ;;		_setBuz
  4941 ;;		_setProductData
  4942 ;; This function is called by:
  4943 ;;		_Temp_Main
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           
  4948                           ;psect for function _setTemp_Main
  4949  0F50                     _setTemp_Main:	
  4950                           
  4951                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4955  0F50  3000               	movlw	0
  4956  0F51  3192  226E  318F   	fcall	_getMain_All_Error_Status
  4957  0F54  0020               	movlb	0	; select bank0
  4958  0F55  00E6               	movwf	??_setTemp_Main
  4959  0F56  0866               	movf	??_setTemp_Main,w
  4960  0F57  00E8               	movwf	setTemp_Main@error
  4961                           
  4962                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4963  0F58  0021               	movlb	1	; select bank1
  4964  0F59  1C57               	btfss	_Temp^(0+128),0
  4965  0F5A  2FFC               	goto	l1720
  4966                           
  4967                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4968  0F5B  1957               	btfsc	_Temp^(0+128),2
  4969  0F5C  2F6C               	goto	l9450
  4970                           
  4971                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4972  0F5D  3001               	movlw	1
  4973  0F5E  07D8               	addwf	(_Temp^(0+128)+1),f
  4974  0F5F  3000               	movlw	0
  4975  0F60  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4976                           
  4977                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4978  0F61  3001               	movlw	1
  4979  0F62  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4980  0F63  30F4               	movlw	244
  4981  0F64  1903               	skipnz
  4982  0F65  0258               	subwf	(_Temp^(0+128)+1),w
  4983  0F66  1C03               	skipc
  4984  0F67  0008               	return
  4985                           
  4986                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4987  0F68  01D8               	clrf	(_Temp^(0+128)+1)
  4988  0F69  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4989                           
  4990                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4991  0F6A  1557               	bsf	_Temp^(0+128),2
  4992                           
  4993                           ;OverTemperature_B1.c: 70: }
  4994                           ;OverTemperature_B1.c: 71: } else {
  4995  0F6B  0008               	return
  4996  0F6C                     l9450:	
  4997                           
  4998                           ;OverTemperature_B1.c: 72: Temp.Time++;
  4999  0F6C  3001               	movlw	1
  5000  0F6D  07D8               	addwf	(_Temp^(0+128)+1),f
  5001  0F6E  3000               	movlw	0
  5002  0F6F  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5003                           
  5004                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5005  0F70  3000               	movlw	0
  5006  0F71  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5007  0F72  3005               	movlw	5
  5008  0F73  1903               	skipnz
  5009  0F74  0258               	subwf	(_Temp^(0+128)+1),w
  5010  0F75  1C03               	skipc
  5011  0F76  0008               	return
  5012                           
  5013                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5014  0F77  01D8               	clrf	(_Temp^(0+128)+1)
  5015  0F78  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5016                           
  5017                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5018  0F79  3008               	movlw	8
  5019  0F7A  3ED7               	addlw	_Temp& (0+255)
  5020  0F7B  0086               	movwf	6
  5021  0F7C  0187               	clrf	7
  5022  0F7D  0016               	moviw fsr1++
  5023  0F7E  0401               	iorwf	1,w
  5024  0F7F  1903               	skipnz
  5025  0F80  2FF6               	goto	l1725
  5026  0F81  300A               	movlw	10
  5027  0F82  3ED7               	addlw	_Temp& (0+255)
  5028  0F83  0086               	movwf	6
  5029  0F84  0187               	clrf	7
  5030  0F85  0016               	moviw fsr1++
  5031  0F86  0401               	iorwf	1,w
  5032  0F87  1903               	skipnz
  5033  0F88  2FF6               	goto	l1725
  5034                           
  5035                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5036  0F89  1157               	bcf	_Temp^(0+128),2
  5037                           
  5038                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5039  0F8A  300A               	movlw	10
  5040  0F8B  3ED7               	addlw	_Temp& (0+255)
  5041  0F8C  0086               	movwf	6
  5042  0F8D  0187               	clrf	7
  5043  0F8E  3008               	movlw	8
  5044  0F8F  3ED7               	addlw	_Temp& (0+255)
  5045  0F90  0084               	movwf	4
  5046  0F91  0185               	clrf	5
  5047  0F92  3F40               	moviw [0]fsr1
  5048  0F93  0700               	addwf	0,w
  5049  0F94  0020               	movlb	0	; select bank0
  5050  0F95  00E6               	movwf	??_setTemp_Main
  5051  0F96  3101               	addfsr 0,1
  5052  0F97  3F41               	moviw [1]fsr1
  5053  0F98  3D00               	addwfc	0,w
  5054  0F99  00E7               	movwf	??_setTemp_Main+1
  5055  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5056  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5057  0F9C  0866               	movf	??_setTemp_Main,w
  5058  0F9D  0021               	movlb	1	; select bank1
  5059  0F9E  00DD               	movwf	(_Temp^(0+128)+6)
  5060  0F9F  0020               	movlb	0	; select bank0
  5061  0FA0  0867               	movf	??_setTemp_Main+1,w
  5062  0FA1  0021               	movlb	1	; select bank1
  5063  0FA2  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5064                           
  5065                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 400;
  5066  0FA3  3090               	movlw	144
  5067  0FA4  00E5               	movwf	(_Temp^(0+128)+14)
  5068  0FA5  3001               	movlw	1
  5069  0FA6  00E6               	movwf	(_Temp^(0+128)+15)
  5070                           
  5071                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 345;
  5072  0FA7  3059               	movlw	89
  5073  0FA8  00E7               	movwf	(_Temp^(0+128)+16)
  5074  0FA9  3001               	movlw	1
  5075  0FAA  00E8               	movwf	(_Temp^(0+128)+17)
  5076                           
  5077                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5078  0FAB  1CD7               	btfss	_Temp^(0+128),1
  5079  0FAC  2FCD               	goto	l9482
  5080                           
  5081                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5082  0FAD  0866               	movf	((_Temp+1)^(0+128)+14),w
  5083  0FAE  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5084  0FAF  1D03               	skipz
  5085  0FB0  2FB3               	goto	u10365
  5086  0FB1  0865               	movf	(_Temp^(0+128)+14),w
  5087  0FB2  025D               	subwf	(_Temp^(0+128)+6),w
  5088  0FB3                     u10365:	
  5089  0FB3  1C03               	skipc
  5090  0FB4  2FCB               	goto	l9480
  5091                           
  5092                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5093  0FB5  3001               	movlw	1
  5094  0FB6  0020               	movlb	0	; select bank0
  5095  0FB7  00E6               	movwf	??_setTemp_Main
  5096  0FB8  0866               	movf	??_setTemp_Main,w
  5097  0FB9  0021               	movlb	1	; select bank1
  5098  0FBA  07DA               	addwf	(_Temp^(0+128)+3),f
  5099                           
  5100                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5101  0FBB  3003               	movlw	3
  5102  0FBC  025A               	subwf	(_Temp^(0+128)+3),w
  5103  0FBD  1C03               	skipc
  5104  0FBE  2FE3               	goto	l9494
  5105                           
  5106                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5107  0FBF  01DA               	clrf	(_Temp^(0+128)+3)
  5108                           
  5109                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5110  0FC0  10D7               	bcf	_Temp^(0+128),1
  5111                           
  5112                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5113  0FC1  3064               	movlw	100
  5114  0FC2  0020               	movlb	0	; select bank0
  5115  0FC3  00A9               	movwf	setBuz@time
  5116  0FC4  3000               	movlw	0
  5117  0FC5  00AA               	movwf	setBuz@time+1
  5118  0FC6  3002               	movlw	2
  5119  0FC7  3197  27A7  318F   	fcall	_setBuz
  5120                           
  5121                           ;OverTemperature_B1.c: 103: }
  5122                           ;OverTemperature_B1.c: 104: } else {
  5123  0FCA  2FE3               	goto	l9494
  5124  0FCB                     l9480:	
  5125                           
  5126                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5127  0FCB  0021               	movlb	1	; select bank1
  5128  0FCC  2FE2               	goto	l9492
  5129  0FCD                     l9482:	
  5130                           ;OverTemperature_B1.c: 106: }
  5131                           ;OverTemperature_B1.c: 107: } else {
  5132                           
  5133                           
  5134                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5135  0FCD  085E               	movf	((_Temp+1)^(0+128)+6),w
  5136  0FCE  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5137  0FCF  1D03               	skipz
  5138  0FD0  2FD3               	goto	u10385
  5139  0FD1  085D               	movf	(_Temp^(0+128)+6),w
  5140  0FD2  0267               	subwf	(_Temp^(0+128)+16),w
  5141  0FD3                     u10385:	
  5142  0FD3  1C03               	skipc
  5143  0FD4  2FE2               	goto	l9492
  5144                           
  5145                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5146  0FD5  3001               	movlw	1
  5147  0FD6  0020               	movlb	0	; select bank0
  5148  0FD7  00E6               	movwf	??_setTemp_Main
  5149  0FD8  0866               	movf	??_setTemp_Main,w
  5150  0FD9  0021               	movlb	1	; select bank1
  5151  0FDA  07DA               	addwf	(_Temp^(0+128)+3),f
  5152                           
  5153                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5154  0FDB  3003               	movlw	3
  5155  0FDC  025A               	subwf	(_Temp^(0+128)+3),w
  5156  0FDD  1C03               	skipc
  5157  0FDE  2FE3               	goto	l9494
  5158                           
  5159                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5160  0FDF  01DA               	clrf	(_Temp^(0+128)+3)
  5161                           
  5162                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5163  0FE0  14D7               	bsf	_Temp^(0+128),1
  5164                           
  5165                           ;OverTemperature_B1.c: 113: }
  5166                           ;OverTemperature_B1.c: 114: } else {
  5167  0FE1  2FE3               	goto	l9494
  5168  0FE2                     l9492:	
  5169                           
  5170                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5171  0FE2  01DA               	clrf	(_Temp^(0+128)+3)
  5172  0FE3                     l9494:	
  5173                           
  5174                           ;OverTemperature_B1.c: 116: }
  5175                           ;OverTemperature_B1.c: 117: }
  5176                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5177  0FE3  0021               	movlb	1	; select bank1
  5178  0FE4  085E               	movf	((_Temp+1)^(0+128)+6),w
  5179  0FE5  0020               	movlb	0	; select bank0
  5180  0FE6  00E6               	movwf	??_setTemp_Main
  5181  0FE7  0866               	movf	??_setTemp_Main,w
  5182  0FE8  00E2               	movwf	setProductData@value
  5183  0FE9  3018               	movlw	24
  5184  0FEA  319D  2561  318F   	fcall	_setProductData
  5185                           
  5186                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5187  0FED  0021               	movlb	1	; select bank1
  5188  0FEE  085D               	movf	(_Temp^(0+128)+6),w
  5189  0FEF  0020               	movlb	0	; select bank0
  5190  0FF0  00E6               	movwf	??_setTemp_Main
  5191  0FF1  0866               	movf	??_setTemp_Main,w
  5192  0FF2  00E2               	movwf	setProductData@value
  5193  0FF3  3019               	movlw	25
  5194  0FF4  319D  2561         	fcall	_setProductData
  5195  0FF6                     l1725:	
  5196                           
  5197                           ;OverTemperature_B1.c: 135: }
  5198                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5199  0FF6  0021               	movlb	1	; select bank1
  5200  0FF7  01DF               	clrf	(_Temp^(0+128)+8)
  5201  0FF8  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5202                           
  5203                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5204  0FF9  01E1               	clrf	(_Temp^(0+128)+10)
  5205  0FFA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5206                           
  5207                           ;OverTemperature_B1.c: 138: }
  5208                           ;OverTemperature_B1.c: 139: }
  5209                           ;OverTemperature_B1.c: 141: } else {
  5210  0FFB  0008               	return
  5211  0FFC                     l1720:	
  5212                           
  5213                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5214  0FFC  1C20               	btfss	_myMain^(0+128),0
  5215  0FFD  0008               	return
  5216                           
  5217                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5218  0FFE  1457               	bsf	_Temp^(0+128),0
  5219  0FFF  0008               	return
  5220  1000                     __end_of_setTemp_Main:	
  5221                           
  5222                           	psect	text10
  5223  1C20                     __ptext10:	
  5224 ;; *************** function _Temp_Initialization *****************
  5225 ;; Defined at:
  5226 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;		None
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;		None
  5231 ;; Return value:  Size  Location     Type
  5232 ;;		None               void
  5233 ;; Registers used:
  5234 ;;		status,2, status,0, pclath, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;Total ram usage:        0 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    6
  5247 ;; This function calls:
  5248 ;;		_setTemp_Initialization
  5249 ;; This function is called by:
  5250 ;;		_main
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           
  5255                           ;psect for function _Temp_Initialization
  5256  1C20                     _Temp_Initialization:	
  5257                           
  5258                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5259                           
  5260                           ;incstack = 0
  5261                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5262  1C20  3190  2066         	fcall	_setTemp_Initialization
  5263  1C22  0008               	return
  5264  1C23                     __end_of_Temp_Initialization:	
  5265                           
  5266                           	psect	text11
  5267  1066                     __ptext11:	
  5268 ;; *************** function _setTemp_Initialization *****************
  5269 ;; Defined at:
  5270 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;		None               void
  5277 ;; Registers used:
  5278 ;;		None
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;Total ram usage:        0 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    5
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_Temp_Initialization
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function _setTemp_Initialization
  5300  1066                     _setTemp_Initialization:	
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _setTemp_Initialization: []
  5304  1066  0008               	return
  5305  1067                     __end_of_setTemp_Initialization:	
  5306                           
  5307                           	psect	text12
  5308  1C68                     __ptext12:	
  5309 ;; *************** function _Switch_Main *****************
  5310 ;; Defined at:
  5311 ;;		line 72 in file "../src/Switch_B1.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;		None               void
  5318 ;; Registers used:
  5319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;Total ram usage:        0 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:   10
  5332 ;; This function calls:
  5333 ;;		_TouchPower
  5334 ;;		_setSw_Main
  5335 ;; This function is called by:
  5336 ;;		_main
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _Switch_Main
  5342  1C68                     _Switch_Main:	
  5343                           
  5344                           ;Switch_B1.c: 75: setSw_Main(1);
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5348  1C68  3001               	movlw	1
  5349  1C69  3181  21ED  319C   	fcall	_setSw_Main
  5350                           
  5351                           ;Switch_B1.c: 87: TouchPower();
  5352  1C6C  319E  26BE         	fcall	_TouchPower
  5353  1C6E  0008               	return
  5354  1C6F                     __end_of_Switch_Main:	
  5355                           
  5356                           	psect	text13
  5357  01ED                     __ptext13:	
  5358 ;; *************** function _setSw_Main *****************
  5359 ;; Defined at:
  5360 ;;		line 121 in file "../src/Switch_B1.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;  sw              1    wreg     unsigned char 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;  sw              1   77[BANK0 ] unsigned char 
  5365 ;; Return value:  Size  Location     Type
  5366 ;;		None               void
  5367 ;; Registers used:
  5368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;Total ram usage:        3 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    9
  5381 ;; This function calls:
  5382 ;;		_SwPointSelect
  5383 ;;		_getMain_All_Error_Status
  5384 ;;		_getSw_KeyStatus
  5385 ;;		_setBuz
  5386 ;;		_setDimmerLights_AdjOn
  5387 ;;		_setDimmerLights_SwOff
  5388 ;;		_setDimmerLights_SwOn
  5389 ;;		_setRF_Learn
  5390 ;; This function is called by:
  5391 ;;		_Switch_Main
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           
  5396                           ;psect for function _setSw_Main
  5397  01ED                     _setSw_Main:	
  5398                           
  5399                           ;incstack = 0
  5400                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5401                           ;setSw_Main@sw stored from wreg
  5402  01ED  0020               	movlb	0	; select bank0
  5403  01EE  00ED               	movwf	setSw_Main@sw
  5404                           
  5405                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5406  01EF  086D               	movf	setSw_Main@sw,w
  5407  01F0  319D  2502  3181   	fcall	_SwPointSelect
  5408                           
  5409                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5410  01F3  0877               	movf	_Sw,w
  5411  01F4  0086               	movwf	6
  5412  01F5  3001               	movlw	1	; select bank2/3
  5413  01F6  0087               	movwf	7
  5414  01F7  1C01               	btfss	1,0
  5415  01F8  2B57               	goto	l2413
  5416                           
  5417                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5418  01F9  3000               	movlw	0
  5419  01FA  3192  226E  3181   	fcall	_getMain_All_Error_Status
  5420  01FD  3800               	iorlw	0
  5421  01FE  1D03               	skipz
  5422  01FF  2A1B               	goto	l9594
  5423                           
  5424                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5425  0200  0A77               	incf	_Sw,w
  5426  0201  0086               	movwf	6
  5427  0202  3001               	movlw	1	; select bank2/3
  5428  0203  0087               	movwf	7
  5429  0204  1081               	bcf	1,1
  5430                           
  5431                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5432  0205  0020               	movlb	0	; select bank0
  5433  0206  086D               	movf	setSw_Main@sw,w
  5434  0207  319D  25EE  3181   	fcall	_getSw_KeyStatus
  5435  020A  3A01               	xorlw	1
  5436  020B  3000               	movlw	0
  5437  020C  1903               	skipnz
  5438  020D  3001               	movlw	1
  5439  020E  0020               	movlb	0	; select bank0
  5440  020F  00EB               	movwf	??_setSw_Main
  5441  0210  0877               	movf	_Sw,w
  5442  0211  0086               	movwf	6
  5443  0212  3001               	movlw	1	; select bank2/3
  5444  0213  0087               	movwf	7
  5445  0214  0DEB               	rlf	??_setSw_Main,f
  5446  0215  0801               	movf	1,w
  5447  0216  066B               	xorwf	??_setSw_Main,w
  5448  0217  39FD               	andlw	-3
  5449  0218  066B               	xorwf	??_setSw_Main,w
  5450  0219  0081               	movwf	1
  5451                           
  5452                           ;Switch_B1.c: 128: } else {
  5453  021A  2A30               	goto	l2415
  5454  021B                     l9594:	
  5455                           
  5456                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5457  021B  0A77               	incf	_Sw,w
  5458  021C  0086               	movwf	6
  5459  021D  3001               	movlw	1	; select bank2/3
  5460  021E  0087               	movwf	7
  5461  021F  1881               	btfsc	1,1
  5462  0220  2A30               	goto	l2415
  5463                           
  5464                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5465  0221  0A77               	incf	_Sw,w
  5466  0222  0086               	movwf	6
  5467  0223  3001               	movlw	1	; select bank2/3
  5468  0224  0087               	movwf	7
  5469  0225  1481               	bsf	1,1
  5470                           
  5471                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5472  0226  0877               	movf	_Sw,w
  5473  0227  0086               	movwf	6
  5474  0228  3001               	movlw	1	; select bank2/3
  5475  0229  0087               	movwf	7
  5476  022A  1081               	bcf	1,1
  5477                           
  5478                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5479  022B  0877               	movf	_Sw,w
  5480  022C  0086               	movwf	6
  5481  022D  3001               	movlw	1	; select bank2/3
  5482  022E  0087               	movwf	7
  5483  022F  1501               	bsf	1,2
  5484  0230                     l2415:	
  5485                           
  5486                           ;Switch_B1.c: 133: }
  5487                           ;Switch_B1.c: 134: }
  5488                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5489  0230  0877               	movf	_Sw,w
  5490  0231  0086               	movwf	6
  5491  0232  3001               	movlw	1	; select bank2/3
  5492  0233  0087               	movwf	7
  5493  0234  1C81               	btfss	1,1
  5494  0235  2B00               	goto	l9644
  5495                           
  5496                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5497  0236  0877               	movf	_Sw,w
  5498  0237  0086               	movwf	6
  5499  0238  3001               	movlw	1	; select bank2/3
  5500  0239  0087               	movwf	7
  5501  023A  1901               	btfsc	1,2
  5502  023B  2A5E               	goto	l9610
  5503                           
  5504                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5505  023C  3001               	movlw	1
  5506  023D  0020               	movlb	0	; select bank0
  5507  023E  00EB               	movwf	??_setSw_Main
  5508  023F  0877               	movf	_Sw,w
  5509  0240  3E02               	addlw	2
  5510  0241  0086               	movwf	6
  5511  0242  3001               	movlw	1	; select bank2/3
  5512  0243  0087               	movwf	7
  5513  0244  086B               	movf	??_setSw_Main,w
  5514  0245  0781               	addwf	1,f
  5515                           
  5516                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5517  0246  0877               	movf	_Sw,w
  5518  0247  3E02               	addlw	2
  5519  0248  0086               	movwf	6
  5520  0249  3001               	movlw	1	; select bank2/3
  5521  024A  0087               	movwf	7
  5522  024B  3005               	movlw	5
  5523  024C  0201               	subwf	1,w
  5524  024D  1C03               	skipc
  5525  024E  0008               	return
  5526                           
  5527                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5528  024F  0877               	movf	_Sw,w
  5529  0250  3E02               	addlw	2
  5530  0251  0086               	movwf	6
  5531  0252  3001               	movlw	1	; select bank2/3
  5532  0253  0087               	movwf	7
  5533  0254  0181               	clrf	1
  5534                           
  5535                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5536  0255  0877               	movf	_Sw,w
  5537  0256  0086               	movwf	6
  5538  0257  3001               	movlw	1	; select bank2/3
  5539  0258  0087               	movwf	7
  5540  0259  1501               	bsf	1,2
  5541                           
  5542                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5543  025A  086D               	movf	setSw_Main@sw,w
  5544  025B  3194  241B         	fcall	_setDimmerLights_SwOn
  5545                           
  5546                           ;Switch_B1.c: 147: }
  5547                           ;Switch_B1.c: 148: } else {
  5548  025D  0008               	return
  5549  025E                     l9610:	
  5550                           
  5551                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5552  025E  0877               	movf	_Sw,w
  5553  025F  0086               	movwf	6
  5554  0260  3001               	movlw	1	; select bank2/3
  5555  0261  0087               	movwf	7
  5556  0262  1981               	btfsc	1,3
  5557  0263  2A90               	goto	l9620
  5558                           
  5559                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5560  0264  0877               	movf	_Sw,w
  5561  0265  3E03               	addlw	3
  5562  0266  0086               	movwf	6
  5563  0267  3001               	movlw	1	; select bank2/3
  5564  0268  0087               	movwf	7
  5565  0269  3001               	movlw	1
  5566  026A  0781               	addwf	1,f
  5567  026B  3141               	addfsr 1,1
  5568  026C  1803               	skipnc
  5569  026D  0A81               	incf	1,f
  5570                           
  5571                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5572  026E  0877               	movf	_Sw,w
  5573  026F  3E03               	addlw	3
  5574  0270  0086               	movwf	6
  5575  0271  3001               	movlw	1	; select bank2/3
  5576  0272  0087               	movwf	7
  5577  0273  3F40               	moviw [0]fsr1
  5578  0274  0020               	movlb	0	; select bank0
  5579  0275  00EB               	movwf	??_setSw_Main
  5580  0276  3F41               	moviw [1]fsr1
  5581  0277  00EC               	movwf	??_setSw_Main+1
  5582  0278  3000               	movlw	0
  5583  0279  026C               	subwf	??_setSw_Main+1,w
  5584  027A  3096               	movlw	150
  5585  027B  1903               	skipnz
  5586  027C  026B               	subwf	??_setSw_Main,w
  5587  027D  1C03               	skipc
  5588  027E  0008               	return
  5589                           
  5590                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5591  027F  0877               	movf	_Sw,w
  5592  0280  3E03               	addlw	3
  5593  0281  0086               	movwf	6
  5594  0282  3001               	movlw	1	; select bank2/3
  5595  0283  0087               	movwf	7
  5596  0284  3000               	movlw	0
  5597  0285  3FC0               	movwi [0]fsr1
  5598  0286  3FC1               	movwi [1]fsr1
  5599                           
  5600                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5601  0287  0877               	movf	_Sw,w
  5602  0288  0086               	movwf	6
  5603  0289  3001               	movlw	1	; select bank2/3
  5604  028A  0087               	movwf	7
  5605  028B  1581               	bsf	1,3
  5606                           
  5607                           ;Switch_B1.c: 156: setDimmerLights_AdjOn(sw);
  5608  028C  086D               	movf	setSw_Main@sw,w
  5609  028D  3193  2375         	fcall	_setDimmerLights_AdjOn
  5610                           
  5611                           ;Switch_B1.c: 159: }
  5612                           ;Switch_B1.c: 160: } else {
  5613  028F  0008               	return
  5614  0290                     l9620:	
  5615                           
  5616                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5617  0290  0877               	movf	_Sw,w
  5618  0291  0086               	movwf	6
  5619  0292  3001               	movlw	1	; select bank2/3
  5620  0293  0087               	movwf	7
  5621  0294  1A01               	btfsc	1,4
  5622  0295  2ACE               	goto	l9634
  5623                           
  5624                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5625  0296  0877               	movf	_Sw,w
  5626  0297  3E05               	addlw	5
  5627  0298  0086               	movwf	6
  5628  0299  3001               	movlw	1	; select bank2/3
  5629  029A  0087               	movwf	7
  5630  029B  3001               	movlw	1
  5631  029C  0781               	addwf	1,f
  5632  029D  3141               	addfsr 1,1
  5633  029E  1803               	skipnc
  5634  029F  0A81               	incf	1,f
  5635                           
  5636                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5637  02A0  0877               	movf	_Sw,w
  5638  02A1  3E05               	addlw	5
  5639  02A2  0086               	movwf	6
  5640  02A3  3001               	movlw	1	; select bank2/3
  5641  02A4  0087               	movwf	7
  5642  02A5  3F40               	moviw [0]fsr1
  5643  02A6  0020               	movlb	0	; select bank0
  5644  02A7  00EB               	movwf	??_setSw_Main
  5645  02A8  3F41               	moviw [1]fsr1
  5646  02A9  00EC               	movwf	??_setSw_Main+1
  5647  02AA  3000               	movlw	0
  5648  02AB  026C               	subwf	??_setSw_Main+1,w
  5649  02AC  3096               	movlw	150
  5650  02AD  1903               	skipnz
  5651  02AE  026B               	subwf	??_setSw_Main,w
  5652  02AF  1C03               	skipc
  5653  02B0  0008               	return
  5654                           
  5655                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5656  02B1  0877               	movf	_Sw,w
  5657  02B2  3E05               	addlw	5
  5658  02B3  0086               	movwf	6
  5659  02B4  3001               	movlw	1	; select bank2/3
  5660  02B5  0087               	movwf	7
  5661  02B6  3000               	movlw	0
  5662  02B7  3FC0               	movwi [0]fsr1
  5663  02B8  3FC1               	movwi [1]fsr1
  5664                           
  5665                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5666  02B9  0877               	movf	_Sw,w
  5667  02BA  0086               	movwf	6
  5668  02BB  3001               	movlw	1	; select bank2/3
  5669  02BC  0087               	movwf	7
  5670  02BD  1601               	bsf	1,4
  5671                           
  5672                           ;Switch_B1.c: 168: setRF_Learn(1);
  5673  02BE  3001               	movlw	1
  5674  02BF  319E  2680  3181   	fcall	_setRF_Learn
  5675                           
  5676                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5677  02C2  0021               	movlb	1	; select bank1
  5678  02C3  1EA0               	btfss	_myMain^(0+128),5
  5679  02C4  0008               	return
  5680                           
  5681                           ;Switch_B1.c: 171: setBuz(2, 100);
  5682  02C5  3064               	movlw	100
  5683  02C6  0020               	movlb	0	; select bank0
  5684  02C7  00A9               	movwf	setBuz@time
  5685  02C8  3000               	movlw	0
  5686  02C9  00AA               	movwf	setBuz@time+1
  5687  02CA  3002               	movlw	2
  5688  02CB  3197  27A7         	fcall	_setBuz
  5689                           
  5690                           ;Switch_B1.c: 172: }
  5691                           ;Switch_B1.c: 174: }
  5692                           ;Switch_B1.c: 175: } else {
  5693  02CD  0008               	return
  5694  02CE                     l9634:	
  5695                           
  5696                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5697  02CE  0877               	movf	_Sw,w
  5698  02CF  0086               	movwf	6
  5699  02D0  3001               	movlw	1	; select bank2/3
  5700  02D1  0087               	movwf	7
  5701  02D2  1A81               	btfsc	1,5
  5702  02D3  0008               	return
  5703                           
  5704                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5705  02D4  0877               	movf	_Sw,w
  5706  02D5  3E07               	addlw	7
  5707  02D6  0086               	movwf	6
  5708  02D7  3001               	movlw	1	; select bank2/3
  5709  02D8  0087               	movwf	7
  5710  02D9  3001               	movlw	1
  5711  02DA  0781               	addwf	1,f
  5712  02DB  3141               	addfsr 1,1
  5713  02DC  1803               	skipnc
  5714  02DD  0A81               	incf	1,f
  5715                           
  5716                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5717  02DE  0877               	movf	_Sw,w
  5718  02DF  3E07               	addlw	7
  5719  02E0  0086               	movwf	6
  5720  02E1  3001               	movlw	1	; select bank2/3
  5721  02E2  0087               	movwf	7
  5722  02E3  3F40               	moviw [0]fsr1
  5723  02E4  0020               	movlb	0	; select bank0
  5724  02E5  00EB               	movwf	??_setSw_Main
  5725  02E6  3F41               	moviw [1]fsr1
  5726  02E7  00EC               	movwf	??_setSw_Main+1
  5727  02E8  3001               	movlw	1
  5728  02E9  026C               	subwf	??_setSw_Main+1,w
  5729  02EA  302C               	movlw	44
  5730  02EB  1903               	skipnz
  5731  02EC  026B               	subwf	??_setSw_Main,w
  5732  02ED  1C03               	skipc
  5733  02EE  0008               	return
  5734                           
  5735                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5736  02EF  0877               	movf	_Sw,w
  5737  02F0  3E07               	addlw	7
  5738  02F1  0086               	movwf	6
  5739  02F2  3001               	movlw	1	; select bank2/3
  5740  02F3  0087               	movwf	7
  5741  02F4  3000               	movlw	0
  5742  02F5  3FC0               	movwi [0]fsr1
  5743  02F6  3FC1               	movwi [1]fsr1
  5744                           
  5745                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5746  02F7  0877               	movf	_Sw,w
  5747  02F8  0086               	movwf	6
  5748  02F9  3001               	movlw	1	; select bank2/3
  5749  02FA  0087               	movwf	7
  5750  02FB  1681               	bsf	1,5
  5751                           
  5752                           ;Switch_B1.c: 183: setRF_Learn(0);
  5753  02FC  3000               	movlw	0
  5754  02FD  319E  2680         	fcall	_setRF_Learn
  5755                           
  5756                           ;Switch_B1.c: 186: }
  5757                           ;Switch_B1.c: 187: }
  5758                           ;Switch_B1.c: 188: }
  5759                           ;Switch_B1.c: 189: }
  5760                           ;Switch_B1.c: 190: }
  5761                           ;Switch_B1.c: 191: } else {
  5762  02FF  0008               	return
  5763  0300                     l9644:	
  5764                           
  5765                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5766  0300  0877               	movf	_Sw,w
  5767  0301  0086               	movwf	6
  5768  0302  3001               	movlw	1	; select bank2/3
  5769  0303  0087               	movwf	7
  5770  0304  1D01               	btfss	1,2
  5771  0305  0008               	return
  5772                           
  5773                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5774  0306  3001               	movlw	1
  5775  0307  0020               	movlb	0	; select bank0
  5776  0308  00EB               	movwf	??_setSw_Main
  5777  0309  0877               	movf	_Sw,w
  5778  030A  3E02               	addlw	2
  5779  030B  0086               	movwf	6
  5780  030C  3001               	movlw	1	; select bank2/3
  5781  030D  0087               	movwf	7
  5782  030E  086B               	movf	??_setSw_Main,w
  5783  030F  0781               	addwf	1,f
  5784                           
  5785                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5786  0310  0877               	movf	_Sw,w
  5787  0311  3E02               	addlw	2
  5788  0312  0086               	movwf	6
  5789  0313  3001               	movlw	1	; select bank2/3
  5790  0314  0087               	movwf	7
  5791  0315  3005               	movlw	5
  5792  0316  0201               	subwf	1,w
  5793  0317  1C03               	skipc
  5794  0318  0008               	return
  5795                           
  5796                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5797  0319  0877               	movf	_Sw,w
  5798  031A  3E02               	addlw	2
  5799  031B  0086               	movwf	6
  5800  031C  3001               	movlw	1	; select bank2/3
  5801  031D  0087               	movwf	7
  5802  031E  0181               	clrf	1
  5803                           
  5804                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5805  031F  0877               	movf	_Sw,w
  5806  0320  0086               	movwf	6
  5807  0321  3001               	movlw	1	; select bank2/3
  5808  0322  0087               	movwf	7
  5809  0323  1101               	bcf	1,2
  5810                           
  5811                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5812  0324  0877               	movf	_Sw,w
  5813  0325  3E03               	addlw	3
  5814  0326  0086               	movwf	6
  5815  0327  3001               	movlw	1	; select bank2/3
  5816  0328  0087               	movwf	7
  5817  0329  3000               	movlw	0
  5818  032A  3FC0               	movwi [0]fsr1
  5819  032B  3FC1               	movwi [1]fsr1
  5820                           
  5821                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5822  032C  0877               	movf	_Sw,w
  5823  032D  0086               	movwf	6
  5824  032E  3001               	movlw	1	; select bank2/3
  5825  032F  0087               	movwf	7
  5826  0330  1181               	bcf	1,3
  5827                           
  5828                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5829  0331  0877               	movf	_Sw,w
  5830  0332  3E05               	addlw	5
  5831  0333  0086               	movwf	6
  5832  0334  3001               	movlw	1	; select bank2/3
  5833  0335  0087               	movwf	7
  5834  0336  3000               	movlw	0
  5835  0337  3FC0               	movwi [0]fsr1
  5836  0338  3FC1               	movwi [1]fsr1
  5837                           
  5838                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5839  0339  0877               	movf	_Sw,w
  5840  033A  0086               	movwf	6
  5841  033B  3001               	movlw	1	; select bank2/3
  5842  033C  0087               	movwf	7
  5843  033D  1201               	bcf	1,4
  5844                           
  5845                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5846  033E  0877               	movf	_Sw,w
  5847  033F  3E07               	addlw	7
  5848  0340  0086               	movwf	6
  5849  0341  3001               	movlw	1	; select bank2/3
  5850  0342  0087               	movwf	7
  5851  0343  3000               	movlw	0
  5852  0344  3FC0               	movwi [0]fsr1
  5853  0345  3FC1               	movwi [1]fsr1
  5854                           
  5855                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5856  0346  0877               	movf	_Sw,w
  5857  0347  0086               	movwf	6
  5858  0348  3001               	movlw	1	; select bank2/3
  5859  0349  0087               	movwf	7
  5860  034A  1281               	bcf	1,5
  5861                           
  5862                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5863  034B  0021               	movlb	1	; select bank1
  5864  034C  1852               	btfsc	_SwDetect^(0+128),0
  5865  034D  2B53               	goto	l9670
  5866                           
  5867                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5868  034E  0020               	movlb	0	; select bank0
  5869  034F  086D               	movf	setSw_Main@sw,w
  5870  0350  3195  2568  3181   	fcall	_setDimmerLights_SwOff
  5871  0353                     l9670:	
  5872                           
  5873                           ;Switch_B1.c: 206: }
  5874                           ;Switch_B1.c: 209: setRF_Learn(0);
  5875  0353  3000               	movlw	0
  5876  0354  319E  2680         	fcall	_setRF_Learn
  5877                           
  5878                           ;Switch_B1.c: 211: }
  5879                           ;Switch_B1.c: 212: }
  5880                           ;Switch_B1.c: 213: }
  5881                           ;Switch_B1.c: 214: } else {
  5882  0356  0008               	return
  5883  0357                     l2413:	
  5884                           
  5885                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5886  0357  0021               	movlb	1	; select bank1
  5887  0358  1C20               	btfss	_myMain^(0+128),0
  5888  0359  0008               	return
  5889                           
  5890                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5891  035A  0877               	movf	_Sw,w
  5892  035B  0086               	movwf	6
  5893  035C  3001               	movlw	1	; select bank2/3
  5894  035D  0087               	movwf	7
  5895  035E  1401               	bsf	1,0
  5896  035F  0008               	return
  5897  0360                     __end_of_setSw_Main:	
  5898                           
  5899                           	psect	text14
  5900  1E80                     __ptext14:	
  5901 ;; *************** function _setRF_Learn *****************
  5902 ;; Defined at:
  5903 ;;		line 23 in file "../src/RF_Control_B1.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;  command         1    wreg     unsigned char 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  command         1    1[BANK0 ] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;		None               void
  5910 ;; Registers used:
  5911 ;;		wreg, status,2, status,0
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5918 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;Total ram usage:        2 bytes
  5922 ;; Hardware stack levels used:    1
  5923 ;; Hardware stack levels required when called:    5
  5924 ;; This function calls:
  5925 ;;		Nothing
  5926 ;; This function is called by:
  5927 ;;		_setSw_Main
  5928 ;; This function uses a non-reentrant model
  5929 ;;
  5930                           
  5931                           
  5932                           ;psect for function _setRF_Learn
  5933  1E80                     _setRF_Learn:	
  5934                           
  5935                           ;incstack = 0
  5936                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5937                           ;setRF_Learn@command stored from wreg
  5938  1E80  0020               	movlb	0	; select bank0
  5939  1E81  00A1               	movwf	setRF_Learn@command
  5940                           
  5941                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5942  1E82  0821               	movf	setRF_Learn@command,w
  5943  1E83  3A01               	xorlw	1
  5944  1E84  3000               	movlw	0
  5945  1E85  1903               	skipnz
  5946  1E86  3001               	movlw	1
  5947  1E87  00A0               	movwf	??_setRF_Learn
  5948  1E88  0EA0               	swapf	??_setRF_Learn,f
  5949  1E89  0DA0               	rlf	??_setRF_Learn,f
  5950  1E8A  0DA0               	rlf	??_setRF_Learn,f
  5951  1E8B  0021               	movlb	1	; select bank1
  5952  1E8C  083A               	movf	_RF1^(0+128),w
  5953  1E8D  0020               	movlb	0	; select bank0
  5954  1E8E  0620               	xorwf	??_setRF_Learn,w
  5955  1E8F  39BF               	andlw	-65
  5956  1E90  0620               	xorwf	??_setRF_Learn,w
  5957  1E91  0021               	movlb	1	; select bank1
  5958  1E92  00BA               	movwf	_RF1^(0+128)
  5959  1E93  0008               	return
  5960  1E94                     __end_of_setRF_Learn:	
  5961                           
  5962                           	psect	text15
  5963  1375                     __ptext15:	
  5964 ;; *************** function _setDimmerLights_AdjOn *****************
  5965 ;; Defined at:
  5966 ;;		line 477 in file "../src/Dimmer_B1.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  sw              1    wreg     unsigned char 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  sw              1    4[BANK0 ] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;		None               void
  5973 ;; Registers used:
  5974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5983 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;Total ram usage:        1 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    7
  5987 ;; This function calls:
  5988 ;;		_DimmerLightsPointSelect
  5989 ;;		_getDimmerLights_Allow_Condition
  5990 ;; This function is called by:
  5991 ;;		_setSw_Main
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           
  5996                           ;psect for function _setDimmerLights_AdjOn
  5997  1375                     _setDimmerLights_AdjOn:	
  5998                           
  5999                           ;incstack = 0
  6000                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6001                           ;setDimmerLights_AdjOn@sw stored from wreg
  6002  1375  0020               	movlb	0	; select bank0
  6003  1376  00A4               	movwf	setDimmerLights_AdjOn@sw
  6004                           
  6005                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  6006  1377  0824               	movf	setDimmerLights_AdjOn@sw,w
  6007  1378  319C  24D6  3193   	fcall	_DimmerLightsPointSelect
  6008                           
  6009                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  6010  137B  0020               	movlb	0	; select bank0
  6011  137C  086F               	movf	_DimmerLights,w
  6012  137D  3E0A               	addlw	10
  6013  137E  0086               	movwf	6
  6014  137F  3001               	movlw	1	; select bank2/3
  6015  1380  0087               	movwf	7
  6016  1381  1881               	btfsc	1,1
  6017  1382  0008               	return
  6018  1383  0824               	movf	setDimmerLights_AdjOn@sw,w
  6019  1384  319E  26D3  3193   	fcall	_getDimmerLights_Allow_Condition
  6020  1387  3800               	iorlw	0
  6021  1388  1D03               	skipz
  6022  1389  0008               	return
  6023                           
  6024                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6025  138A  0020               	movlb	0	; select bank0
  6026  138B  086F               	movf	_DimmerLights,w
  6027  138C  3E0B               	addlw	11
  6028  138D  0086               	movwf	6
  6029  138E  3001               	movlw	1	; select bank2/3
  6030  138F  0087               	movwf	7
  6031  1390  1C81               	btfss	1,1
  6032  1391  0008               	return
  6033                           
  6034                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6035  1392  086F               	movf	_DimmerLights,w
  6036  1393  3E0B               	addlw	11
  6037  1394  0086               	movwf	6
  6038  1395  3001               	movlw	1	; select bank2/3
  6039  1396  0087               	movwf	7
  6040  1397  1501               	bsf	1,2
  6041                           
  6042                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6043  1398  086F               	movf	_DimmerLights,w
  6044  1399  3E02               	addlw	2
  6045  139A  0086               	movwf	6
  6046  139B  3001               	movlw	1	; select bank2/3
  6047  139C  0087               	movwf	7
  6048  139D  1481               	bsf	1,1
  6049                           
  6050                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6051  139E  086F               	movf	_DimmerLights,w
  6052  139F  3E0A               	addlw	10
  6053  13A0  0086               	movwf	6
  6054  13A1  3001               	movlw	1	; select bank2/3
  6055  13A2  0087               	movwf	7
  6056  13A3  1581               	bsf	1,3
  6057                           
  6058                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6059  13A4  086F               	movf	_DimmerLights,w
  6060  13A5  3E0A               	addlw	10
  6061  13A6  0086               	movwf	6
  6062  13A7  3001               	movlw	1	; select bank2/3
  6063  13A8  0087               	movwf	7
  6064  13A9  1501               	bsf	1,2
  6065  13AA  0008               	return
  6066  13AB                     __end_of_setDimmerLights_AdjOn:	
  6067                           
  6068                           	psect	text16
  6069  1DEE                     __ptext16:	
  6070 ;; *************** function _getSw_KeyStatus *****************
  6071 ;; Defined at:
  6072 ;;		line 222 in file "../src/Switch_B1.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;  sw              1    wreg     unsigned char 
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;  sw              1    0[COMMON] unsigned char 
  6077 ;;  status          1    1[BANK0 ] unsigned char 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  1    wreg      unsigned char 
  6080 ;; Registers used:
  6081 ;;		wreg, status,2
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;Total ram usage:        3 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    5
  6094 ;; This function calls:
  6095 ;;		Nothing
  6096 ;; This function is called by:
  6097 ;;		_setSw_Main
  6098 ;; This function uses a non-reentrant model
  6099 ;;
  6100                           
  6101                           
  6102                           ;psect for function _getSw_KeyStatus
  6103  1DEE                     _getSw_KeyStatus:	
  6104                           
  6105                           ;Switch_B1.c: 223: char status = 0;
  6106                           
  6107                           ;incstack = 0
  6108                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6109  1DEE  0020               	movlb	0	; select bank0
  6110  1DEF  01A1               	clrf	getSw_KeyStatus@status
  6111                           
  6112                           ;Switch_B1.c: 243: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6113  1DF0  01A2               	clrf	_getSw_KeyStatus$6016
  6114  1DF1  0AA2               	incf	_getSw_KeyStatus$6016,f
  6115  1DF2  1F0C               	btfss	12,6	;volatile
  6116  1DF3  1A0C               	btfsc	12,4	;volatile
  6117  1DF4  2DF9               	goto	l9132
  6118  1DF5  1C0C               	btfss	12,0	;volatile
  6119  1DF6  1B8C               	btfsc	12,7	;volatile
  6120  1DF7  2DF9               	goto	l9132
  6121  1DF8  01A2               	clrf	_getSw_KeyStatus$6016
  6122  1DF9                     l9132:	
  6123  1DF9  0822               	movf	_getSw_KeyStatus$6016,w
  6124  1DFA  00A0               	movwf	??_getSw_KeyStatus
  6125  1DFB  0820               	movf	??_getSw_KeyStatus,w
  6126  1DFC  00A1               	movwf	getSw_KeyStatus@status
  6127                           
  6128                           ;Switch_B1.c: 246: return status;
  6129  1DFD  0821               	movf	getSw_KeyStatus@status,w
  6130  1DFE  0008               	return
  6131  1DFF                     __end_of_getSw_KeyStatus:	
  6132                           
  6133                           	psect	text17
  6134  1D02                     __ptext17:	
  6135 ;; *************** function _SwPointSelect *****************
  6136 ;; Defined at:
  6137 ;;		line 25 in file "../src/Switch_B1.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;  sw              1    wreg     unsigned char 
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;  sw              1    1[BANK0 ] unsigned char 
  6142 ;; Return value:  Size  Location     Type
  6143 ;;		None               void
  6144 ;; Registers used:
  6145 ;;		wreg
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;Total ram usage:        2 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:    5
  6158 ;; This function calls:
  6159 ;;		Nothing
  6160 ;; This function is called by:
  6161 ;;		_setSw_Main
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           
  6166                           ;psect for function _SwPointSelect
  6167  1D02                     _SwPointSelect:	
  6168                           
  6169                           ;incstack = 0
  6170                           ; Regs used in _SwPointSelect: [wreg]
  6171                           ;SwPointSelect@sw stored from wreg
  6172  1D02  0020               	movlb	0	; select bank0
  6173  1D03  00A1               	movwf	SwPointSelect@sw
  6174                           
  6175                           ;Switch_B1.c: 28: if (sw == 1) {
  6176  1D04  0821               	movf	SwPointSelect@sw,w
  6177  1D05  3A01               	xorlw	1
  6178  1D06  1D03               	skipz
  6179  1D07  0008               	return
  6180                           
  6181                           ;Switch_B1.c: 29: Sw = &Sw1;
  6182  1D08  30E3               	movlw	_Sw1& (0+255)
  6183  1D09  00A0               	movwf	??_SwPointSelect
  6184  1D0A  0820               	movf	??_SwPointSelect,w
  6185  1D0B  00F7               	movwf	_Sw
  6186  1D0C  0008               	return
  6187  1D0D                     __end_of_SwPointSelect:	
  6188                           
  6189                           	psect	text18
  6190  1C99                     __ptext18:	
  6191 ;; *************** function _Switch_Initialization *****************
  6192 ;; Defined at:
  6193 ;;		line 46 in file "../src/Switch_B1.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;		None
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;		None
  6198 ;; Return value:  Size  Location     Type
  6199 ;;		None               void
  6200 ;; Registers used:
  6201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;Total ram usage:        0 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    8
  6214 ;; This function calls:
  6215 ;;		_TouchPower
  6216 ;;		_setSw_Initialization
  6217 ;; This function is called by:
  6218 ;;		_main
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           
  6223                           ;psect for function _Switch_Initialization
  6224  1C99                     _Switch_Initialization:	
  6225                           
  6226                           ;Switch_B1.c: 47: TouchPower();
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6230  1C99  319E  26BE  319C   	fcall	_TouchPower
  6231                           
  6232                           ;Switch_B1.c: 49: WPUB1 = 0;
  6233  1C9C  0024               	movlb	4	; select bank4
  6234  1C9D  108D               	bcf	13,1	;volatile
  6235                           
  6236                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6237  1C9E  3001               	movlw	1
  6238  1C9F  319D  25AB         	fcall	_setSw_Initialization
  6239  1CA1  0008               	return
  6240  1CA2                     __end_of_Switch_Initialization:	
  6241                           
  6242                           	psect	text19
  6243  1DAB                     __ptext19:	
  6244 ;; *************** function _setSw_Initialization *****************
  6245 ;; Defined at:
  6246 ;;		line 93 in file "../src/Switch_B1.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;  sw              1    wreg     unsigned char 
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;  sw              1    4[BANK0 ] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;		None               void
  6253 ;; Registers used:
  6254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;Total ram usage:        1 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    7
  6267 ;; This function calls:
  6268 ;;		_setLED
  6269 ;; This function is called by:
  6270 ;;		_Switch_Initialization
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           
  6275                           ;psect for function _setSw_Initialization
  6276  1DAB                     _setSw_Initialization:	
  6277                           
  6278                           ;incstack = 0
  6279                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6280                           ;setSw_Initialization@sw stored from wreg
  6281  1DAB  0020               	movlb	0	; select bank0
  6282  1DAC  00A4               	movwf	setSw_Initialization@sw
  6283                           
  6284                           ;Switch_B1.c: 94: setLED(sw, 1);
  6285  1DAD  01A2               	clrf	setLED@command
  6286  1DAE  0AA2               	incf	setLED@command,f
  6287  1DAF  0824               	movf	setSw_Initialization@sw,w
  6288  1DB0  3193  23E2  319D   	fcall	_setLED
  6289                           
  6290                           ;Switch_B1.c: 96: setLED(sw + 1, 1);
  6291  1DB3  0020               	movlb	0	; select bank0
  6292  1DB4  01A2               	clrf	setLED@command
  6293  1DB5  0AA2               	incf	setLED@command,f
  6294  1DB6  0824               	movf	setSw_Initialization@sw,w
  6295  1DB7  3E01               	addlw	1
  6296  1DB8  3193  23E2         	fcall	_setLED
  6297  1DBA  0008               	return
  6298  1DBB                     __end_of_setSw_Initialization:	
  6299                           
  6300                           	psect	text20
  6301  1EBE                     __ptext20:	
  6302 ;; *************** function _TouchPower *****************
  6303 ;; Defined at:
  6304 ;;		line 10 in file "../src/Switch_B1.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;		None
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;		None
  6309 ;; Return value:  Size  Location     Type
  6310 ;;		None               void
  6311 ;; Registers used:
  6312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6322 ;;Total ram usage:        0 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    6
  6325 ;; This function calls:
  6326 ;;		_Timeout_Counter
  6327 ;;		_set_TimeoutCleared
  6328 ;; This function is called by:
  6329 ;;		_Switch_Initialization
  6330 ;;		_Switch_Main
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           
  6335                           ;psect for function _TouchPower
  6336  1EBE                     _TouchPower:	
  6337                           
  6338                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6339                           
  6340                           ;incstack = 0
  6341                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6342  1EBE  0021               	movlb	1	; select bank1
  6343  1EBF  1C20               	btfss	_myMain^(0+128),0
  6344  1EC0  0008               	return
  6345                           
  6346                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6347  1EC1  0020               	movlb	0	; select bank0
  6348  1EC2  180D               	btfsc	13,0	;volatile
  6349  1EC3  0008               	return
  6350  1EC4  2ECA               	goto	l9576
  6351  1EC5                     l2393:	
  6352                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6353                           
  6354                           
  6355                           ;Switch_B1.c: 14: RB0 = 1;
  6356  1EC5  0020               	movlb	0	; select bank0
  6357  1EC6  140D               	bsf	13,0	;volatile
  6358                           
  6359                           ;Switch_B1.c: 15: Timeout_Counter();
  6360  1EC7  319E  2694  319E   	fcall	_Timeout_Counter
  6361  1ECA                     l9576:	
  6362  1ECA  0020               	movlb	0	; select bank0
  6363  1ECB  180D               	btfsc	13,0	;volatile
  6364  1ECC  2ED0               	goto	l9580
  6365  1ECD  0021               	movlb	1	; select bank1
  6366  1ECE  1D2B               	btfss	(_myMain^(0+128)+11),2
  6367  1ECF  2EC5               	goto	l2393
  6368  1ED0                     l9580:	
  6369                           
  6370                           ;Switch_B1.c: 16: }
  6371                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6372  1ED0  319C  244A         	fcall	_set_TimeoutCleared
  6373  1ED2  0008               	return
  6374  1ED3                     __end_of_TouchPower:	
  6375                           
  6376                           	psect	text21
  6377  1C1D                     __ptext21:	
  6378 ;; *************** function _RF_Main *****************
  6379 ;; Defined at:
  6380 ;;		line 16 in file "../src/RF_Control_B1.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;		None
  6385 ;; Return value:  Size  Location     Type
  6386 ;;		None               void
  6387 ;; Registers used:
  6388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;Total ram usage:        0 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:   14
  6401 ;; This function calls:
  6402 ;;		_setRF_Main
  6403 ;; This function is called by:
  6404 ;;		_main
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           
  6409                           ;psect for function _RF_Main
  6410  1C1D                     _RF_Main:	
  6411                           
  6412                           ;RF_Control_B1.c: 18: setRF_Main();
  6413                           
  6414                           ;incstack = 0
  6415                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6416  1C1D  318C  2408         	fcall	_setRF_Main
  6417  1C1F  0008               	return
  6418  1C20                     __end_of_RF_Main:	
  6419                           
  6420                           	psect	text22
  6421  0C08                     __ptext22:	
  6422 ;; *************** function _setRF_Main *****************
  6423 ;; Defined at:
  6424 ;;		line 52 in file "../src/RF_Control_B1.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;		None
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  error           1    2[BANK2 ] unsigned char 
  6429 ;;  Receive_OK      1    1[BANK2 ] unsigned char 
  6430 ;;  loop_f          1    0[BANK2 ] unsigned char 
  6431 ;; Return value:  Size  Location     Type
  6432 ;;		None               void
  6433 ;; Registers used:
  6434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;Total ram usage:        3 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:   13
  6447 ;; This function calls:
  6448 ;;		_CC2500_RxData
  6449 ;;		_CC2500_TxData
  6450 ;;		_CC2500_WriteCommand
  6451 ;;		_RF_RxDisable
  6452 ;;		_getBuz_GO
  6453 ;;		_getMain_All_Error_Status
  6454 ;;		_getRF_KeyStatus
  6455 ;;		_getRxData
  6456 ;; This function is called by:
  6457 ;;		_RF_Main
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           
  6462                           ;psect for function _setRF_Main
  6463  0C08                     _setRF_Main:	
  6464                           
  6465                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6469  0C08  0022               	movlb	2	; select bank2
  6470  0C09  01ED               	clrf	setRF_Main@loop_f^(0+256)
  6471  0C0A  01EE               	clrf	setRF_Main@Receive_OK^(0+256)
  6472  0C0B  01EF               	clrf	setRF_Main@error^(0+256)
  6473                           
  6474                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6475  0C0C  0021               	movlb	1	; select bank1
  6476  0C0D  1C3A               	btfss	_RF1^(0+128),0
  6477  0C0E  2C81               	goto	l2038
  6478                           
  6479                           ;RF_Control_B1.c: 67: if (getBuz_GO() == 0) {
  6480  0C0F  319D  25CC  318C   	fcall	_getBuz_GO
  6481  0C12  0020               	movlb	0	; select bank0
  6482  0C13  0821               	movf	?_getBuz_GO+1,w
  6483  0C14  0420               	iorwf	?_getBuz_GO,w
  6484  0C15  1D03               	skipz
  6485  0C16  0008               	return
  6486                           
  6487                           ;RF_Control_B1.c: 68: if (getMain_All_Error_Status(0) == 0) {
  6488  0C17  3000               	movlw	0
  6489  0C18  3192  226E  318C   	fcall	_getMain_All_Error_Status
  6490  0C1B  3800               	iorlw	0
  6491  0C1C  1D03               	skipz
  6492  0C1D  2C2E               	goto	l9520
  6493                           
  6494                           ;RF_Control_B1.c: 70: if (getRF_KeyStatus() == 1 && RF1.Learn == 0) {
  6495  0C1E  319D  25DD  318C   	fcall	_getRF_KeyStatus
  6496  0C21  3A01               	xorlw	1
  6497  0C22  1D03               	skipz
  6498  0C23  2C2E               	goto	l9520
  6499  0C24  0021               	movlb	1	; select bank1
  6500  0C25  1B3A               	btfsc	_RF1^(0+128),6
  6501  0C26  2C2E               	goto	l9520
  6502                           
  6503                           ;RF_Control_B1.c: 71: RF1.Count = 0;
  6504  0C27  01BC               	clrf	(_RF1^(0+128)+2)
  6505  0C28  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6506                           
  6507                           ;RF_Control_B1.c: 72: RF1.Run = 1;
  6508  0C29  14BB               	bsf	(_RF1^(0+128)+1),1
  6509                           
  6510                           ;RF_Control_B1.c: 73: RF1.RunTime = 5;
  6511  0C2A  3005               	movlw	5
  6512  0C2B  00C1               	movwf	(_RF1^(0+128)+7)
  6513  0C2C  3000               	movlw	0
  6514  0C2D  00C2               	movwf	(_RF1^(0+128)+8)
  6515  0C2E                     l9520:	
  6516                           
  6517                           ;RF_Control_B1.c: 74: }
  6518                           ;RF_Control_B1.c: 84: }
  6519                           ;RF_Control_B1.c: 86: if (RF1.Learn == 0) {
  6520  0C2E  0021               	movlb	1	; select bank1
  6521  0C2F  1B3A               	btfsc	_RF1^(0+128),6
  6522  0C30  2C47               	goto	l2042
  6523                           
  6524                           ;RF_Control_B1.c: 87: if (RF1.Run == 1) {
  6525  0C31  1CBB               	btfss	(_RF1^(0+128)+1),1
  6526  0C32  2C4D               	goto	l9536
  6527                           
  6528                           ;RF_Control_B1.c: 88: RF1.Count++;
  6529  0C33  3001               	movlw	1
  6530  0C34  07BC               	addwf	(_RF1^(0+128)+2),f
  6531  0C35  3000               	movlw	0
  6532  0C36  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6533                           
  6534                           ;RF_Control_B1.c: 89: if (RF1.Count == RF1.RunTime) {
  6535  0C37  3002               	movlw	2
  6536  0C38  3EBA               	addlw	_RF1& (0+255)
  6537  0C39  0086               	movwf	6
  6538  0C3A  0187               	clrf	7
  6539  0C3B  3F40               	moviw [0]fsr1
  6540  0C3C  0641               	xorwf	(_RF1^(0+128)+7),w
  6541  0C3D  1D03               	skipz
  6542  0C3E  2C41               	goto	u10485
  6543  0C3F  3F41               	moviw [1]fsr1
  6544  0C40  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6545  0C41                     u10485:	
  6546  0C41  1D03               	skipz
  6547  0C42  2C4D               	goto	l9536
  6548                           
  6549                           ;RF_Control_B1.c: 90: RF1.Count = 0;
  6550  0C43  01BC               	clrf	(_RF1^(0+128)+2)
  6551  0C44  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6552                           
  6553                           ;RF_Control_B1.c: 91: RF1.Run = 0;
  6554  0C45  10BB               	bcf	(_RF1^(0+128)+1),1
  6555                           
  6556                           ;RF_Control_B1.c: 92: }
  6557                           ;RF_Control_B1.c: 93: }
  6558                           ;RF_Control_B1.c: 94: } else {
  6559  0C46  2C4D               	goto	l9536
  6560  0C47                     l2042:	
  6561                           
  6562                           ;RF_Control_B1.c: 95: RF1.TransceiveGO = 0;
  6563  0C47  113A               	bcf	_RF1^(0+128),2
  6564                           
  6565                           ;RF_Control_B1.c: 96: if (RF1.Run == 1) {
  6566  0C48  1CBB               	btfss	(_RF1^(0+128)+1),1
  6567  0C49  2C4D               	goto	l9536
  6568                           
  6569                           ;RF_Control_B1.c: 97: RF1.Run = 0;
  6570  0C4A  10BB               	bcf	(_RF1^(0+128)+1),1
  6571                           
  6572                           ;RF_Control_B1.c: 98: RF1.Count = 0;
  6573  0C4B  01BC               	clrf	(_RF1^(0+128)+2)
  6574  0C4C  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6575  0C4D                     l9536:	
  6576                           
  6577                           ;RF_Control_B1.c: 99: }
  6578                           ;RF_Control_B1.c: 100: }
  6579                           ;RF_Control_B1.c: 102: if (RF1.Run == 0) {
  6580  0C4D  18BB               	btfsc	(_RF1^(0+128)+1),1
  6581  0C4E  0008               	return
  6582                           
  6583                           ;RF_Control_B1.c: 103: if (RF1.TransceiveGO == 1) {
  6584  0C4F  1D3A               	btfss	_RF1^(0+128),2
  6585  0C50  2C5D               	goto	l2048
  6586                           
  6587                           ;RF_Control_B1.c: 104: RF1.TransceiveGO = 0;
  6588  0C51  113A               	bcf	_RF1^(0+128),2
  6589                           
  6590                           ;RF_Control_B1.c: 105: RF1.Run = 1;
  6591  0C52  14BB               	bsf	(_RF1^(0+128)+1),1
  6592                           
  6593                           ;RF_Control_B1.c: 106: RF1.RunTime = 5;
  6594  0C53  3005               	movlw	5
  6595  0C54  00C1               	movwf	(_RF1^(0+128)+7)
  6596  0C55  3000               	movlw	0
  6597  0C56  00C2               	movwf	(_RF1^(0+128)+8)
  6598                           
  6599                           ;RF_Control_B1.c: 107: RF_RxDisable();
  6600  0C57  319E  2647  318C   	fcall	_RF_RxDisable
  6601                           
  6602                           ;RF_Control_B1.c: 108: CC2500_TxData();
  6603  0C5A  318A  226B         	fcall	_CC2500_TxData
  6604                           
  6605                           ;RF_Control_B1.c: 110: } else {
  6606  0C5C  0008               	return
  6607  0C5D                     l2048:	
  6608                           
  6609                           ;RF_Control_B1.c: 111: if (RF1.RxStatus == 1) {
  6610  0C5D  1DBA               	btfss	_RF1^(0+128),3
  6611  0C5E  2C72               	goto	l2050
  6612                           
  6613                           ;RF_Control_B1.c: 112: if (RF1.Key == 0 || RF1.Learn == 1) {
  6614  0C5F  1FBA               	btfss	_RF1^(0+128),7
  6615  0C60  2C63               	goto	l9552
  6616  0C61  1F3A               	btfss	_RF1^(0+128),6
  6617  0C62  0008               	return
  6618  0C63                     l9552:	
  6619                           
  6620                           ;RF_Control_B1.c: 114: CC2500_RxData();
  6621  0C63  318B  2399  318C   	fcall	_CC2500_RxData
  6622                           
  6623                           ;RF_Control_B1.c: 116: if (RF1.ReceiveGO == 1) {
  6624  0C66  0021               	movlb	1	; select bank1
  6625  0C67  1CBA               	btfss	_RF1^(0+128),1
  6626  0C68  0008               	return
  6627                           
  6628                           ;RF_Control_B1.c: 117: RF1.ReceiveGO = 0;
  6629  0C69  10BA               	bcf	_RF1^(0+128),1
  6630                           
  6631                           ;RF_Control_B1.c: 118: RF1.Run = 1;
  6632  0C6A  14BB               	bsf	(_RF1^(0+128)+1),1
  6633                           
  6634                           ;RF_Control_B1.c: 119: RF1.RunTime = 5;
  6635  0C6B  3005               	movlw	5
  6636  0C6C  00C1               	movwf	(_RF1^(0+128)+7)
  6637  0C6D  3000               	movlw	0
  6638  0C6E  00C2               	movwf	(_RF1^(0+128)+8)
  6639                           
  6640                           ;RF_Control_B1.c: 127: getRxData();
  6641  0C6F  318C  2485         	fcall	_getRxData
  6642                           
  6643                           ;RF_Control_B1.c: 129: }
  6644                           ;RF_Control_B1.c: 130: }
  6645                           ;RF_Control_B1.c: 131: } else {
  6646  0C71  0008               	return
  6647  0C72                     l2050:	
  6648                           
  6649                           ;RF_Control_B1.c: 133: if (RF1.ReceiveGO == 0) {
  6650  0C72  18BA               	btfsc	_RF1^(0+128),1
  6651  0C73  0008               	return
  6652                           
  6653                           ;RF_Control_B1.c: 134: RF1.RxStatus = 1;
  6654  0C74  15BA               	bsf	_RF1^(0+128),3
  6655                           
  6656                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x36);
  6657  0C75  3036               	movlw	54
  6658  0C76  319F  271A  318C   	fcall	_CC2500_WriteCommand
  6659                           
  6660                           ;RF_Control_B1.c: 138: CC2500_WriteCommand(0x3A);
  6661  0C79  303A               	movlw	58
  6662  0C7A  319F  271A  318C   	fcall	_CC2500_WriteCommand
  6663                           
  6664                           ;RF_Control_B1.c: 139: CC2500_WriteCommand(0x34);
  6665  0C7D  3034               	movlw	52
  6666  0C7E  319F  271A         	fcall	_CC2500_WriteCommand
  6667                           
  6668                           ;RF_Control_B1.c: 140: }
  6669                           ;RF_Control_B1.c: 142: }
  6670                           ;RF_Control_B1.c: 143: }
  6671                           ;RF_Control_B1.c: 144: }
  6672                           ;RF_Control_B1.c: 145: }
  6673                           ;RF_Control_B1.c: 146: } else {
  6674  0C80  0008               	return
  6675  0C81                     l2038:	
  6676                           
  6677                           ;RF_Control_B1.c: 147: if (myMain.PowerON == 1) {
  6678  0C81  1C20               	btfss	_myMain^(0+128),0
  6679  0C82  0008               	return
  6680                           
  6681                           ;RF_Control_B1.c: 148: RF1.Enable = 1;
  6682  0C83  143A               	bsf	_RF1^(0+128),0
  6683  0C84  0008               	return
  6684  0C85                     __end_of_setRF_Main:	
  6685                           
  6686                           	psect	text23
  6687  0C85                     __ptext23:	
  6688 ;; *************** function _getRxData *****************
  6689 ;; Defined at:
  6690 ;;		line 243 in file "../src/RF_Control_B1.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;		None
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;  error           1    4[BANK1 ] unsigned char 
  6695 ;; Return value:  Size  Location     Type
  6696 ;;		None               void
  6697 ;; Registers used:
  6698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6699 ;; Tracked objects:
  6700 ;;		On entry : 0/0
  6701 ;;		On exit  : 0/0
  6702 ;;		Unchanged: 0/0
  6703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;Total ram usage:        2 bytes
  6709 ;; Hardware stack levels used:    1
  6710 ;; Hardware stack levels required when called:   12
  6711 ;; This function calls:
  6712 ;;		_getMain_All_Error_Status
  6713 ;;		_setControl_Lights_Table
  6714 ;;		_setLog_Code
  6715 ;;		_setTxData
  6716 ;; This function is called by:
  6717 ;;		_setRF_Main
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           
  6722                           ;psect for function _getRxData
  6723  0C85                     _getRxData:	
  6724                           
  6725                           ;RF_Control_B1.c: 244: char error = getMain_All_Error_Status(0);
  6726                           
  6727                           ;incstack = 0
  6728                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6729  0C85  3000               	movlw	0
  6730  0C86  3192  226E  318C   	fcall	_getMain_All_Error_Status
  6731  0C89  0020               	movlb	0	; select bank0
  6732  0C8A  00EE               	movwf	??_getRxData
  6733  0C8B  086E               	movf	??_getRxData,w
  6734  0C8C  0021               	movlb	1	; select bank1
  6735  0C8D  00ED               	movwf	getRxData@error^(0+128)
  6736                           
  6737                           ;RF_Control_B1.c: 245: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6738  0C8E  0023               	movlb	3	; select bank3
  6739  0C8F  0820               	movf	_RF_Data^(0+384),w
  6740  0C90  3AAA               	xorlw	170
  6741  0C91  1D03               	skipz
  6742  0C92  2CA9               	goto	l9072
  6743  0C93  0821               	movf	(_RF_Data^(0+384)+1),w
  6744  0C94  3A01               	xorlw	1
  6745  0C95  1D03               	skipz
  6746  0C96  2CA9               	goto	l9072
  6747                           
  6748                           ;RF_Control_B1.c: 247: product->Data[2] = 0x55;
  6749  0C97  3055               	movlw	85
  6750  0C98  0020               	movlb	0	; select bank0
  6751  0C99  00EE               	movwf	??_getRxData
  6752  0C9A  0879               	movf	_product,w
  6753  0C9B  3E02               	addlw	2
  6754  0C9C  0086               	movwf	6
  6755  0C9D  3002               	movlw	2	; select bank4/5
  6756  0C9E  0087               	movwf	7
  6757  0C9F  086E               	movf	??_getRxData,w
  6758  0CA0  0081               	movwf	1
  6759                           
  6760                           ;RF_Control_B1.c: 248: setTxData();
  6761  0CA1  318E  260C         	fcall	_setTxData
  6762                           
  6763                           ;RF_Control_B1.c: 249: RF1.RunTime = 10;
  6764  0CA3  300A               	movlw	10
  6765  0CA4  0021               	movlb	1	; select bank1
  6766  0CA5  00C1               	movwf	(_RF1^(0+128)+7)
  6767  0CA6  3000               	movlw	0
  6768  0CA7  00C2               	movwf	(_RF1^(0+128)+8)
  6769                           
  6770                           ;RF_Control_B1.c: 255: } else {
  6771  0CA8  0008               	return
  6772  0CA9                     l9072:	
  6773                           
  6774                           ;RF_Control_B1.c: 257: if (error == 0) {
  6775  0CA9  0021               	movlb	1	; select bank1
  6776  0CAA  08ED               	movf	getRxData@error^(0+128),f
  6777  0CAB  1D03               	skipz
  6778  0CAC  0008               	return
  6779                           
  6780                           ;RF_Control_B1.c: 258: if (RF1.Learn == 1) {
  6781  0CAD  1F3A               	btfss	_RF1^(0+128),6
  6782  0CAE  2CBA               	goto	l9082
  6783                           
  6784                           ;RF_Control_B1.c: 259: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6785  0CAF  0023               	movlb	3	; select bank3
  6786  0CB0  08A0               	movf	_RF_Data^(0+384),f
  6787  0CB1  1D03               	skipz
  6788  0CB2  0008               	return
  6789  0CB3  0821               	movf	(_RF_Data^(0+384)+1),w
  6790  0CB4  3A64               	xorlw	100
  6791  0CB5  1D03               	skipz
  6792  0CB6  0008               	return
  6793                           
  6794                           ;RF_Control_B1.c: 260: setLog_Code();
  6795  0CB7  3192  22D5         	fcall	_setLog_Code
  6796                           
  6797                           ;RF_Control_B1.c: 261: }
  6798                           ;RF_Control_B1.c: 262: } else {
  6799  0CB9  0008               	return
  6800  0CBA                     l9082:	
  6801                           
  6802                           ;RF_Control_B1.c: 263: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6803  0CBA  0023               	movlb	3	; select bank3
  6804  0CBB  08A0               	movf	_RF_Data^(0+384),f
  6805  0CBC  1D03               	skipz
  6806  0CBD  2CEF               	goto	l9102
  6807  0CBE  0821               	movf	(_RF_Data^(0+384)+1),w
  6808  0CBF  3A02               	xorlw	2
  6809  0CC0  1D03               	skipz
  6810  0CC1  2CEF               	goto	l9102
  6811                           
  6812                           ;RF_Control_B1.c: 265: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6813  0CC2  082C               	movf	(_RF_Data^(0+384)+12),w
  6814  0CC3  3AFF               	xorlw	255
  6815  0CC4  1D03               	skipz
  6816  0CC5  2CD0               	goto	l9094
  6817  0CC6  082D               	movf	(_RF_Data^(0+384)+13),w
  6818  0CC7  3AFF               	xorlw	255
  6819  0CC8  1D03               	skipz
  6820  0CC9  2CD0               	goto	l9094
  6821  0CCA  082E               	movf	(_RF_Data^(0+384)+14),w
  6822  0CCB  3AFF               	xorlw	255
  6823  0CCC  1D03               	skipz
  6824  0CCD  2CD0               	goto	l9094
  6825                           
  6826                           ;RF_Control_B1.c: 266: __nop();
  6827  0CCE  0000               	nop
  6828                           
  6829                           ;RF_Control_B1.c: 267: } else {
  6830  0CCF  0008               	return
  6831  0CD0                     l9094:	
  6832                           
  6833                           ;RF_Control_B1.c: 268: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6834  0CD0  0879               	movf	_product,w
  6835  0CD1  3E0C               	addlw	12
  6836  0CD2  0086               	movwf	6
  6837  0CD3  3002               	movlw	2	; select bank4/5
  6838  0CD4  0087               	movwf	7
  6839  0CD5  0023               	movlb	3	; select bank3
  6840  0CD6  082C               	movf	(_RF_Data^(0+384)+12),w
  6841  0CD7  0601               	xorwf	1,w
  6842  0CD8  1D03               	skipz
  6843  0CD9  0008               	return
  6844  0CDA  0879               	movf	_product,w
  6845  0CDB  3E0D               	addlw	13
  6846  0CDC  0086               	movwf	6
  6847  0CDD  3002               	movlw	2	; select bank4/5
  6848  0CDE  0087               	movwf	7
  6849  0CDF  082D               	movf	(_RF_Data^(0+384)+13),w
  6850  0CE0  0601               	xorwf	1,w
  6851  0CE1  1D03               	skipz
  6852  0CE2  0008               	return
  6853  0CE3  0879               	movf	_product,w
  6854  0CE4  3E0E               	addlw	14
  6855  0CE5  0086               	movwf	6
  6856  0CE6  3002               	movlw	2	; select bank4/5
  6857  0CE7  0087               	movwf	7
  6858  0CE8  082E               	movf	(_RF_Data^(0+384)+14),w
  6859  0CE9  0601               	xorwf	1,w
  6860  0CEA  1D03               	skipz
  6861  0CEB  0008               	return
  6862                           
  6863                           ;RF_Control_B1.c: 269: setControl_Lights_Table();
  6864  0CEC  3189  21AB         	fcall	_setControl_Lights_Table
  6865                           
  6866                           ;RF_Control_B1.c: 270: }
  6867                           ;RF_Control_B1.c: 271: }
  6868                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6869  0CEE  0008               	return
  6870  0CEF                     l9102:	
  6871  0CEF  0023               	movlb	3	; select bank3
  6872  0CF0  0820               	movf	_RF_Data^(0+384),w
  6873  0CF1  3AFF               	xorlw	255
  6874  0CF2  1D03               	skipz
  6875  0CF3  2CFA               	goto	l9108
  6876  0CF4  0821               	movf	(_RF_Data^(0+384)+1),w
  6877  0CF5  3A02               	xorlw	2
  6878  0CF6  1D03               	skipz
  6879  0CF7  2CFA               	goto	l9108
  6880                           
  6881                           ;RF_Control_B1.c: 273: __nop();
  6882  0CF8  0000               	nop
  6883                           
  6884                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6885  0CF9  0008               	return
  6886  0CFA                     l9108:	
  6887  0CFA  0023               	movlb	3	; select bank3
  6888  0CFB  08A0               	movf	_RF_Data^(0+384),f
  6889  0CFC  1D03               	skipz
  6890  0CFD  0008               	return
  6891  0CFE  0821               	movf	(_RF_Data^(0+384)+1),w
  6892  0CFF  3A65               	xorlw	101
  6893  0D00  1D03               	skipz
  6894  0D01  0008               	return
  6895                           
  6896                           ;RF_Control_B1.c: 275: __nop();
  6897  0D02  0000               	nop
  6898                           
  6899                           ;RF_Control_B1.c: 283: ;
  6900                           
  6901                           ;RF_Control_B1.c: 276: }
  6902                           ;RF_Control_B1.c: 281: }
  6903                           ;RF_Control_B1.c: 282: } else {
  6904  0D03  0008               	return
  6905  0D04                     __end_of_getRxData:	
  6906                           
  6907                           	psect	text24
  6908  12D5                     __ptext24:	
  6909 ;; *************** function _setLog_Code *****************
  6910 ;; Defined at:
  6911 ;;		line 289 in file "../src/RF_Control_B1.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;		None
  6914 ;; Auto vars:     Size  Location     Type
  6915 ;;		None
  6916 ;; Return value:  Size  Location     Type
  6917 ;;		None               void
  6918 ;; Registers used:
  6919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6920 ;; Tracked objects:
  6921 ;;		On entry : 0/0
  6922 ;;		On exit  : 0/0
  6923 ;;		Unchanged: 0/0
  6924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;Total ram usage:        1 bytes
  6930 ;; Hardware stack levels used:    1
  6931 ;; Hardware stack levels required when called:    7
  6932 ;; This function calls:
  6933 ;;		_setBuz
  6934 ;;		_setMemory_LoopSave
  6935 ;;		_setMemory_Modify
  6936 ;;		_setProductData
  6937 ;; This function is called by:
  6938 ;;		_getRxData
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function _setLog_Code
  6944  12D5                     _setLog_Code:	
  6945                           
  6946                           ;RF_Control_B1.c: 290: RF1.Learn = 0;
  6947                           
  6948                           ;incstack = 0
  6949                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6950  12D5  0021               	movlb	1	; select bank1
  6951  12D6  133A               	bcf	_RF1^(0+128),6
  6952                           
  6953                           ;RF_Control_B1.c: 291: setProductData(12, RF_Data[12]);
  6954  12D7  0023               	movlb	3	; select bank3
  6955  12D8  082C               	movf	(_RF_Data^(0+384)+12),w
  6956  12D9  0020               	movlb	0	; select bank0
  6957  12DA  00E6               	movwf	??_setLog_Code
  6958  12DB  0866               	movf	??_setLog_Code,w
  6959  12DC  00E2               	movwf	setProductData@value
  6960  12DD  300C               	movlw	12
  6961  12DE  319D  2561  3192   	fcall	_setProductData
  6962                           
  6963                           ;RF_Control_B1.c: 292: setProductData(13, RF_Data[13]);
  6964  12E1  0023               	movlb	3	; select bank3
  6965  12E2  082D               	movf	(_RF_Data^(0+384)+13),w
  6966  12E3  0020               	movlb	0	; select bank0
  6967  12E4  00E6               	movwf	??_setLog_Code
  6968  12E5  0866               	movf	??_setLog_Code,w
  6969  12E6  00E2               	movwf	setProductData@value
  6970  12E7  300D               	movlw	13
  6971  12E8  319D  2561  3192   	fcall	_setProductData
  6972                           
  6973                           ;RF_Control_B1.c: 293: setProductData(14, RF_Data[14]);
  6974  12EB  0023               	movlb	3	; select bank3
  6975  12EC  082E               	movf	(_RF_Data^(0+384)+14),w
  6976  12ED  0020               	movlb	0	; select bank0
  6977  12EE  00E6               	movwf	??_setLog_Code
  6978  12EF  0866               	movf	??_setLog_Code,w
  6979  12F0  00E2               	movwf	setProductData@value
  6980  12F1  300E               	movlw	14
  6981  12F2  319D  2561  3192   	fcall	_setProductData
  6982                           
  6983                           ;RF_Control_B1.c: 294: setBuz(1, 100);
  6984  12F5  3064               	movlw	100
  6985  12F6  0020               	movlb	0	; select bank0
  6986  12F7  00A9               	movwf	setBuz@time
  6987  12F8  3000               	movlw	0
  6988  12F9  00AA               	movwf	setBuz@time+1
  6989  12FA  3001               	movlw	1
  6990  12FB  3197  27A7  3192   	fcall	_setBuz
  6991                           
  6992                           ;RF_Control_B1.c: 295: if (myMain.First == 1) {
  6993  12FE  0021               	movlb	1	; select bank1
  6994  12FF  1EA0               	btfss	_myMain^(0+128),5
  6995  1300  2B05               	goto	l2099
  6996                           
  6997                           ;RF_Control_B1.c: 296: setMemory_LoopSave(1);
  6998  1301  3001               	movlw	1
  6999  1302  319E  266D  3192   	fcall	_setMemory_LoopSave
  7000  1305                     l2099:	
  7001                           
  7002                           ;RF_Control_B1.c: 297: }
  7003                           ;RF_Control_B1.c: 298: setMemory_Modify(1);
  7004  1305  3001               	movlw	1
  7005  1306  319E  265A         	fcall	_setMemory_Modify
  7006  1308  0008               	return
  7007  1309                     __end_of_setLog_Code:	
  7008                           
  7009                           	psect	text25
  7010  1E6D                     __ptext25:	
  7011 ;; *************** function _setMemory_LoopSave *****************
  7012 ;; Defined at:
  7013 ;;		line 1070 in file "../src/MCU_B1.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;  command         1    wreg     unsigned char 
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;  command         1    1[BANK0 ] unsigned char 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;		None               void
  7020 ;; Registers used:
  7021 ;;		wreg, status,2, status,0
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;Total ram usage:        2 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    5
  7034 ;; This function calls:
  7035 ;;		Nothing
  7036 ;; This function is called by:
  7037 ;;		_setLog_Code
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           
  7042                           ;psect for function _setMemory_LoopSave
  7043  1E6D                     _setMemory_LoopSave:	
  7044                           
  7045                           ;incstack = 0
  7046                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7047                           ;setMemory_LoopSave@command stored from wreg
  7048  1E6D  0020               	movlb	0	; select bank0
  7049  1E6E  00A1               	movwf	setMemory_LoopSave@command
  7050                           
  7051                           ;MCU_B1.c: 1071: Memory.LoopSave = command == 1 ? 1 : 0;
  7052  1E6F  0821               	movf	setMemory_LoopSave@command,w
  7053  1E70  3A01               	xorlw	1
  7054  1E71  3000               	movlw	0
  7055  1E72  1903               	skipnz
  7056  1E73  3001               	movlw	1
  7057  1E74  00A0               	movwf	??_setMemory_LoopSave
  7058  1E75  0DA0               	rlf	??_setMemory_LoopSave,f
  7059  1E76  0DA0               	rlf	??_setMemory_LoopSave,f
  7060  1E77  0023               	movlb	3	; select bank3
  7061  1E78  0862               	movf	(_Memory^(0+384)+36),w
  7062  1E79  0020               	movlb	0	; select bank0
  7063  1E7A  0620               	xorwf	??_setMemory_LoopSave,w
  7064  1E7B  39FB               	andlw	-5
  7065  1E7C  0620               	xorwf	??_setMemory_LoopSave,w
  7066  1E7D  0023               	movlb	3	; select bank3
  7067  1E7E  00E2               	movwf	(_Memory^(0+384)+36)
  7068  1E7F  0008               	return
  7069  1E80                     __end_of_setMemory_LoopSave:	
  7070                           
  7071                           	psect	text26
  7072  09AB                     __ptext26:	
  7073 ;; *************** function _setControl_Lights_Table *****************
  7074 ;; Defined at:
  7075 ;;		line 302 in file "../src/RF_Control_B1.c"
  7076 ;; Parameters:    Size  Location     Type
  7077 ;;		None
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;		None
  7080 ;; Return value:  Size  Location     Type
  7081 ;;		None               void
  7082 ;; Registers used:
  7083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;Total ram usage:        0 bytes
  7094 ;; Hardware stack levels used:    1
  7095 ;; Hardware stack levels required when called:   11
  7096 ;; This function calls:
  7097 ;;		_setBuz
  7098 ;;		_setDimmerLights_ErrorClose
  7099 ;;		_setProductData
  7100 ;;		_setRFSW_AdjControl
  7101 ;;		_setRFSW_Control
  7102 ;;		_setTxData
  7103 ;; This function is called by:
  7104 ;;		_getRxData
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           
  7109                           ;psect for function _setControl_Lights_Table
  7110  09AB                     _setControl_Lights_Table:	
  7111                           
  7112                           ;RF_Control_B1.c: 303: switch (RF_Data[15]) {
  7113                           
  7114                           ;incstack = 0
  7115                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7116  09AB  29EE               	goto	l8760
  7117  09AC                     l8748:	
  7118                           ;RF_Control_B1.c: 304: case 0x00:
  7119                           
  7120                           
  7121                           ;RF_Control_B1.c: 306: setDimmerLights_ErrorClose(255);
  7122  09AC  30FF               	movlw	255
  7123  09AD  3189  214D  3189   	fcall	_setDimmerLights_ErrorClose
  7124                           
  7125                           ;RF_Control_B1.c: 308: setProductData(9, 0);
  7126  09B0  0020               	movlb	0	; select bank0
  7127  09B1  01E2               	clrf	setProductData@value
  7128  09B2  3009               	movlw	9
  7129  09B3  319D  2561  3189   	fcall	_setProductData
  7130                           
  7131                           ;RF_Control_B1.c: 309: setProductData(11, 0);
  7132  09B6  0020               	movlb	0	; select bank0
  7133  09B7  01E2               	clrf	setProductData@value
  7134  09B8  300B               	movlw	11
  7135  09B9  319D  2561  3189   	fcall	_setProductData
  7136                           
  7137                           ;RF_Control_B1.c: 310: setProductData(15, 0);
  7138  09BC  0020               	movlb	0	; select bank0
  7139  09BD  01E2               	clrf	setProductData@value
  7140  09BE  300F               	movlw	15
  7141  09BF  319D  2561  3189   	fcall	_setProductData
  7142                           
  7143                           ;RF_Control_B1.c: 311: setProductData(17, 0);
  7144  09C2  0020               	movlb	0	; select bank0
  7145  09C3  01E2               	clrf	setProductData@value
  7146  09C4  3011               	movlw	17
  7147  09C5  319D  2561  3189   	fcall	_setProductData
  7148                           
  7149                           ;RF_Control_B1.c: 312: setBuz(1, 100);
  7150  09C8  3064               	movlw	100
  7151  09C9  0020               	movlb	0	; select bank0
  7152  09CA  00A9               	movwf	setBuz@time
  7153  09CB  3000               	movlw	0
  7154  09CC  00AA               	movwf	setBuz@time+1
  7155  09CD  3001               	movlw	1
  7156  09CE  3197  27A7         	fcall	_setBuz
  7157                           
  7158                           ;RF_Control_B1.c: 314: break;
  7159  09D0  0008               	return
  7160  09D1                     l8752:	
  7161                           ;RF_Control_B1.c: 315: case 0x20:
  7162                           
  7163                           
  7164                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7165  09D1  0020               	movlb	0	; select bank0
  7166  09D2  01E2               	clrf	setProductData@value
  7167  09D3  3009               	movlw	9
  7168  09D4  319D  2561  3189   	fcall	_setProductData
  7169                           
  7170                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7171  09D7  0020               	movlb	0	; select bank0
  7172  09D8  01E2               	clrf	setProductData@value
  7173  09D9  300B               	movlw	11
  7174  09DA  319D  2561  3189   	fcall	_setProductData
  7175                           
  7176                           ;RF_Control_B1.c: 318: setProductData(17, 0);
  7177  09DD  0020               	movlb	0	; select bank0
  7178  09DE  01E2               	clrf	setProductData@value
  7179  09DF  3011               	movlw	17
  7180  09E0  319D  2561  3189   	fcall	_setProductData
  7181                           
  7182                           ;RF_Control_B1.c: 319: setTxData();
  7183  09E3  318E  260C         	fcall	_setTxData
  7184                           
  7185                           ;RF_Control_B1.c: 320: break;
  7186  09E5  0008               	return
  7187  09E6                     l8754:	
  7188                           ;RF_Control_B1.c: 321: case 0x01:
  7189                           
  7190                           
  7191                           ;RF_Control_B1.c: 323: setRFSW_Control(1);
  7192  09E6  3001               	movlw	1
  7193  09E7  3195  25B7         	fcall	_setRFSW_Control
  7194                           
  7195                           ;RF_Control_B1.c: 335: break;
  7196                           
  7197                           ;RF_Control_B1.c: 331: case 0x03:
  7198                           
  7199                           ;RF_Control_B1.c: 330: break;
  7200                           
  7201                           ;RF_Control_B1.c: 326: case 0x02:
  7202                           
  7203                           ;RF_Control_B1.c: 325: break;
  7204  09E9  0008               	return
  7205  09EA                     l8756:	
  7206                           ;RF_Control_B1.c: 336: case 0x11:
  7207                           
  7208                           
  7209                           ;RF_Control_B1.c: 339: setRFSW_AdjControl(1);
  7210  09EA  3001               	movlw	1
  7211  09EB  3194  2454         	fcall	_setRFSW_AdjControl
  7212                           
  7213                           ;RF_Control_B1.c: 357: }
  7214                           
  7215                           ;RF_Control_B1.c: 356: break;
  7216                           
  7217                           ;RF_Control_B1.c: 350: case 0x31:
  7218                           
  7219                           ;RF_Control_B1.c: 349: break;
  7220                           
  7221                           ;RF_Control_B1.c: 343: case 0x21:
  7222                           
  7223                           ;RF_Control_B1.c: 342: break;
  7224  09ED  0008               	return
  7225  09EE                     l8760:	
  7226  09EE  0023               	movlb	3	; select bank3
  7227  09EF  082F               	movf	(_RF_Data^(0+384)+15),w
  7228                           
  7229                           ; Switch size 1, requested type "space"
  7230                           ; Number of cases is 8, Range of values is 0 to 49
  7231                           ; switch strategies available:
  7232                           ; Name         Instructions Cycles
  7233                           ; simple_byte           25    13 (average)
  7234                           ; direct_byte          106     6 (fixed)
  7235                           ; jumptable            260     6 (fixed)
  7236                           ;	Chosen strategy is simple_byte
  7237  09F0  3A00               	xorlw	0	; case 0
  7238  09F1  1903               	skipnz
  7239  09F2  29AC               	goto	l8748
  7240  09F3  3A01               	xorlw	1	; case 1
  7241  09F4  1903               	skipnz
  7242  09F5  29E6               	goto	l8754
  7243  09F6  3A03               	xorlw	3	; case 2
  7244  09F7  1903               	skipnz
  7245  09F8  2A09               	goto	l2113
  7246  09F9  3A01               	xorlw	1	; case 3
  7247  09FA  1903               	skipnz
  7248  09FB  2A09               	goto	l2113
  7249  09FC  3A12               	xorlw	18	; case 17
  7250  09FD  1903               	skipnz
  7251  09FE  29EA               	goto	l8756
  7252  09FF  3A31               	xorlw	49	; case 32
  7253  0A00  1903               	skipnz
  7254  0A01  29D1               	goto	l8752
  7255  0A02  3A01               	xorlw	1	; case 33
  7256  0A03  1903               	skipnz
  7257  0A04  2A09               	goto	l2113
  7258  0A05  3A10               	xorlw	16	; case 49
  7259  0A06  1903               	skipnz
  7260  0A07  2A09               	goto	l2113
  7261  0A08  2A09               	goto	l2113
  7262  0A09                     l2113:	
  7263  0A09  0008               	return
  7264  0A0A                     __end_of_setControl_Lights_Table:	
  7265                           
  7266                           	psect	text27
  7267  15B7                     __ptext27:	
  7268 ;; *************** function _setRFSW_Control *****************
  7269 ;; Defined at:
  7270 ;;		line 384 in file "../src/RF_Control_B1.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;  sw              1    wreg     unsigned char 
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;  sw              1   77[BANK0 ] unsigned char 
  7275 ;;  status          1   76[BANK0 ] unsigned char 
  7276 ;; Return value:  Size  Location     Type
  7277 ;;		None               void
  7278 ;; Registers used:
  7279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7280 ;; Tracked objects:
  7281 ;;		On entry : 0/0
  7282 ;;		On exit  : 0/0
  7283 ;;		Unchanged: 0/0
  7284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7288 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;Total ram usage:        3 bytes
  7290 ;; Hardware stack levels used:    1
  7291 ;; Hardware stack levels required when called:    9
  7292 ;; This function calls:
  7293 ;;		_getDelayOff_GO
  7294 ;;		_getDimmerLights_Status
  7295 ;;		_setBuz
  7296 ;;		_setDelayOff_GO
  7297 ;;		_setDimmerLights_SwOff
  7298 ;;		_setDimmerLights_SwOn
  7299 ;;		_setRF_DimmerLights
  7300 ;;		_setTxData
  7301 ;; This function is called by:
  7302 ;;		_setControl_Lights_Table
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           
  7307                           ;psect for function _setRFSW_Control
  7308  15B7                     _setRFSW_Control:	
  7309                           
  7310                           ;incstack = 0
  7311                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7312                           ;setRFSW_Control@sw stored from wreg
  7313  15B7  0020               	movlb	0	; select bank0
  7314  15B8  00ED               	movwf	setRFSW_Control@sw
  7315                           
  7316                           ;RF_Control_B1.c: 385: char status = 0;
  7317  15B9  01EC               	clrf	setRFSW_Control@status
  7318                           
  7319                           ;RF_Control_B1.c: 388: if (RF_Data[16] == 0x80) {
  7320  15BA  0023               	movlb	3	; select bank3
  7321  15BB  0830               	movf	(_RF_Data^(0+384)+16),w
  7322  15BC  3A80               	xorlw	128
  7323  15BD  1D03               	skipz
  7324  15BE  2DEA               	goto	l8592
  7325                           
  7326                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw, 1, RF_Data[17]);
  7327  15BF  0020               	movlb	0	; select bank0
  7328  15C0  01E6               	clrf	setDelayOff_GO@command
  7329  15C1  0AE6               	incf	setDelayOff_GO@command,f
  7330  15C2  0023               	movlb	3	; select bank3
  7331  15C3  0831               	movf	(_RF_Data^(0+384)+17),w
  7332  15C4  0020               	movlb	0	; select bank0
  7333  15C5  00EB               	movwf	??_setRFSW_Control
  7334  15C6  086B               	movf	??_setRFSW_Control,w
  7335  15C7  00E7               	movwf	setDelayOff_GO@value
  7336  15C8  086D               	movf	setRFSW_Control@sw,w
  7337  15C9  3196  26A8  3195   	fcall	_setDelayOff_GO
  7338                           
  7339                           ;RF_Control_B1.c: 390: if (getDimmerLights_Status(sw) == 1) {
  7340  15CC  0020               	movlb	0	; select bank0
  7341  15CD  086D               	movf	setRFSW_Control@sw,w
  7342  15CE  319D  25BB  3195   	fcall	_getDimmerLights_Status
  7343  15D1  3A01               	xorlw	1
  7344  15D2  1D03               	skipz
  7345  15D3  2DF9               	goto	l8596
  7346                           
  7347                           ;RF_Control_B1.c: 391: setBuz(1, 100);
  7348  15D4  3064               	movlw	100
  7349  15D5  0020               	movlb	0	; select bank0
  7350  15D6  00A9               	movwf	setBuz@time
  7351  15D7  3000               	movlw	0
  7352  15D8  00AA               	movwf	setBuz@time+1
  7353  15D9  3001               	movlw	1
  7354  15DA  3197  27A7  3195   	fcall	_setBuz
  7355                           
  7356                           ;RF_Control_B1.c: 392: status = 1;
  7357  15DD  0020               	movlb	0	; select bank0
  7358  15DE  01EC               	clrf	setRFSW_Control@status
  7359  15DF  0AEC               	incf	setRFSW_Control@status,f
  7360                           
  7361                           ;RF_Control_B1.c: 393: setRF_DimmerLights(sw, 1);
  7362  15E0  01E6               	clrf	setRF_DimmerLights@on
  7363  15E1  0AE6               	incf	setRF_DimmerLights@on,f
  7364  15E2  086D               	movf	setRFSW_Control@sw,w
  7365  15E3  3188  203C  3195   	fcall	_setRF_DimmerLights
  7366                           
  7367                           ;RF_Control_B1.c: 394: setTxData();
  7368  15E6  318E  260C  3195   	fcall	_setTxData
  7369                           
  7370                           ;RF_Control_B1.c: 396: }
  7371                           ;RF_Control_B1.c: 397: } else {
  7372  15E9  2DF9               	goto	l8596
  7373  15EA                     l8592:	
  7374                           
  7375                           ;RF_Control_B1.c: 399: if (getDelayOff_GO(sw) == 1) {
  7376  15EA  0020               	movlb	0	; select bank0
  7377  15EB  086D               	movf	setRFSW_Control@sw,w
  7378  15EC  319D  259B  3195   	fcall	_getDelayOff_GO
  7379  15EF  3A01               	xorlw	1
  7380  15F0  1D03               	skipz
  7381  15F1  2DF9               	goto	l8596
  7382                           
  7383                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw, 0, 0);
  7384  15F2  0020               	movlb	0	; select bank0
  7385  15F3  01E6               	clrf	setDelayOff_GO@command
  7386  15F4  01E7               	clrf	setDelayOff_GO@value
  7387  15F5  086D               	movf	setRFSW_Control@sw,w
  7388  15F6  3196  26A8  3195   	fcall	_setDelayOff_GO
  7389  15F9                     l8596:	
  7390                           
  7391                           ;RF_Control_B1.c: 401: }
  7392                           ;RF_Control_B1.c: 403: }
  7393                           ;RF_Control_B1.c: 404: if (status == 0) {
  7394  15F9  0020               	movlb	0	; select bank0
  7395  15FA  08EC               	movf	setRFSW_Control@status,f
  7396  15FB  1D03               	skipz
  7397  15FC  0008               	return
  7398                           
  7399                           ;RF_Control_B1.c: 406: setDimmerLights_SwOn(sw);
  7400  15FD  086D               	movf	setRFSW_Control@sw,w
  7401  15FE  3194  241B  3195   	fcall	_setDimmerLights_SwOn
  7402                           
  7403                           ;RF_Control_B1.c: 407: setDimmerLights_SwOff(sw);
  7404  1601  0020               	movlb	0	; select bank0
  7405  1602  086D               	movf	setRFSW_Control@sw,w
  7406  1603  3195  2568         	fcall	_setDimmerLights_SwOff
  7407  1605  0008               	return
  7408  1606                     __end_of_setRFSW_Control:	
  7409                           
  7410                           	psect	text28
  7411  141B                     __ptext28:	
  7412 ;; *************** function _setDimmerLights_SwOn *****************
  7413 ;; Defined at:
  7414 ;;		line 405 in file "../src/Dimmer_B1.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;  sw              1    wreg     unsigned char 
  7417 ;; Auto vars:     Size  Location     Type
  7418 ;;  sw              1   13[BANK0 ] unsigned char 
  7419 ;;  idle            1   14[BANK0 ] unsigned char 
  7420 ;; Return value:  Size  Location     Type
  7421 ;;		None               void
  7422 ;; Registers used:
  7423 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7430 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7432 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7433 ;;Total ram usage:        2 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:    7
  7436 ;; This function calls:
  7437 ;;		_DimmerLightsPointSelect
  7438 ;;		_setBuz
  7439 ;; This function is called by:
  7440 ;;		_setRFSW_Control
  7441 ;;		_setSw_Main
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           
  7446                           ;psect for function _setDimmerLights_SwOn
  7447  141B                     _setDimmerLights_SwOn:	
  7448                           
  7449                           ;incstack = 0
  7450                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7451                           ;setDimmerLights_SwOn@sw stored from wreg
  7452  141B  0020               	movlb	0	; select bank0
  7453  141C  00AD               	movwf	setDimmerLights_SwOn@sw
  7454                           
  7455                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7456  141D  082D               	movf	setDimmerLights_SwOn@sw,w
  7457  141E  319C  24D6  3194   	fcall	_DimmerLightsPointSelect
  7458                           
  7459                           ;Dimmer_B1.c: 407: char idle = 0;
  7460  1421  0020               	movlb	0	; select bank0
  7461  1422  01AE               	clrf	setDimmerLights_SwOn@idle
  7462                           
  7463                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7464  1423  08AE               	movf	setDimmerLights_SwOn@idle,f
  7465  1424  1D03               	skipz
  7466  1425  0008               	return
  7467                           
  7468                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7469  1426  086F               	movf	_DimmerLights,w
  7470  1427  3E0B               	addlw	11
  7471  1428  0086               	movwf	6
  7472  1429  3001               	movlw	1	; select bank2/3
  7473  142A  0087               	movwf	7
  7474  142B  1481               	bsf	1,1
  7475                           
  7476                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7477  142C  086F               	movf	_DimmerLights,w
  7478  142D  3E02               	addlw	2
  7479  142E  0086               	movwf	6
  7480  142F  3001               	movlw	1	; select bank2/3
  7481  1430  0087               	movwf	7
  7482  1431  1881               	btfsc	1,1
  7483  1432  2C46               	goto	l8390
  7484                           
  7485                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7486  1433  086F               	movf	_DimmerLights,w
  7487  1434  3E02               	addlw	2
  7488  1435  0086               	movwf	6
  7489  1436  3001               	movlw	1	; select bank2/3
  7490  1437  0087               	movwf	7
  7491  1438  1481               	bsf	1,1
  7492                           
  7493                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7494  1439  086F               	movf	_DimmerLights,w
  7495  143A  3E0A               	addlw	10
  7496  143B  0086               	movwf	6
  7497  143C  3001               	movlw	1	; select bank2/3
  7498  143D  0087               	movwf	7
  7499  143E  1481               	bsf	1,1
  7500                           
  7501                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7502  143F  086F               	movf	_DimmerLights,w
  7503  1440  3E0A               	addlw	10
  7504  1441  0086               	movwf	6
  7505  1442  3001               	movlw	1	; select bank2/3
  7506  1443  0087               	movwf	7
  7507  1444  1401               	bsf	1,0
  7508                           
  7509                           ;Dimmer_B1.c: 442: } else {
  7510  1445  2C4C               	goto	l8392
  7511  1446                     l8390:	
  7512                           
  7513                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7514  1446  086F               	movf	_DimmerLights,w
  7515  1447  3E02               	addlw	2
  7516  1448  0086               	movwf	6
  7517  1449  3001               	movlw	1	; select bank2/3
  7518  144A  0087               	movwf	7
  7519  144B  1081               	bcf	1,1
  7520  144C                     l8392:	
  7521                           
  7522                           ;Dimmer_B1.c: 444: }
  7523                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7524  144C  3064               	movlw	100
  7525  144D  00A9               	movwf	setBuz@time
  7526  144E  3000               	movlw	0
  7527  144F  00AA               	movwf	setBuz@time+1
  7528  1450  3001               	movlw	1
  7529  1451  3197  27A7         	fcall	_setBuz
  7530  1453  0008               	return
  7531  1454                     __end_of_setDimmerLights_SwOn:	
  7532                           
  7533                           	psect	text29
  7534  1454                     __ptext29:	
  7535 ;; *************** function _setRFSW_AdjControl *****************
  7536 ;; Defined at:
  7537 ;;		line 413 in file "../src/RF_Control_B1.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;  sw              1    wreg     unsigned char 
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;  sw              1   75[BANK0 ] unsigned char 
  7542 ;;  status          1   74[BANK0 ] unsigned char 
  7543 ;; Return value:  Size  Location     Type
  7544 ;;		None               void
  7545 ;; Registers used:
  7546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7554 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7556 ;;Total ram usage:        4 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:   10
  7559 ;; This function calls:
  7560 ;;		_getDimmerLights_Status
  7561 ;;		_setMemory_Modify
  7562 ;;		_setProductData
  7563 ;;		_setRF_DimmerValue
  7564 ;;		_setTxData
  7565 ;; This function is called by:
  7566 ;;		_setControl_Lights_Table
  7567 ;; This function uses a non-reentrant model
  7568 ;;
  7569                           
  7570                           
  7571                           ;psect for function _setRFSW_AdjControl
  7572  1454                     _setRFSW_AdjControl:	
  7573                           
  7574                           ;incstack = 0
  7575                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7576                           ;setRFSW_AdjControl@sw stored from wreg
  7577  1454  0020               	movlb	0	; select bank0
  7578  1455  00EB               	movwf	setRFSW_AdjControl@sw
  7579                           
  7580                           ;RF_Control_B1.c: 414: char status = 0;
  7581  1456  01EA               	clrf	setRFSW_AdjControl@status
  7582                           
  7583                           ;RF_Control_B1.c: 416: status = getDimmerLights_Status(sw);
  7584  1457  086B               	movf	setRFSW_AdjControl@sw,w
  7585  1458  319D  25BB  3194   	fcall	_getDimmerLights_Status
  7586  145B  0020               	movlb	0	; select bank0
  7587  145C  00E8               	movwf	??_setRFSW_AdjControl
  7588  145D  0868               	movf	??_setRFSW_AdjControl,w
  7589  145E  00EA               	movwf	setRFSW_AdjControl@status
  7590                           
  7591                           ;RF_Control_B1.c: 419: if (status == 1) {
  7592  145F  086A               	movf	setRFSW_AdjControl@status,w
  7593  1460  3A01               	xorlw	1
  7594  1461  1D03               	skipz
  7595  1462  2C6D               	goto	l8610
  7596                           
  7597                           ;RF_Control_B1.c: 420: setMemory_Modify(1);
  7598  1463  3001               	movlw	1
  7599  1464  319E  265A  3194   	fcall	_setMemory_Modify
  7600                           
  7601                           ;RF_Control_B1.c: 421: setRF_DimmerValue(sw);
  7602  1467  0020               	movlb	0	; select bank0
  7603  1468  086B               	movf	setRFSW_AdjControl@sw,w
  7604  1469  3192  220E  3194   	fcall	_setRF_DimmerValue
  7605                           
  7606                           ;RF_Control_B1.c: 422: } else {
  7607  146C  2C7E               	goto	l2125
  7608  146D                     l8610:	
  7609                           
  7610                           ;RF_Control_B1.c: 423: setProductData(9, product->Data[20 + sw]);
  7611  146D  0020               	movlb	0	; select bank0
  7612  146E  086B               	movf	setRFSW_AdjControl@sw,w
  7613  146F  3E14               	addlw	20
  7614  1470  0779               	addwf	_product,w
  7615  1471  00E8               	movwf	??_setRFSW_AdjControl
  7616  1472  0868               	movf	??_setRFSW_AdjControl,w
  7617  1473  0086               	movwf	6
  7618  1474  3002               	movlw	2	; select bank4/5
  7619  1475  0087               	movwf	7
  7620  1476  0801               	movf	1,w
  7621  1477  00E9               	movwf	??_setRFSW_AdjControl+1
  7622  1478  0869               	movf	??_setRFSW_AdjControl+1,w
  7623  1479  00E2               	movwf	setProductData@value
  7624  147A  3009               	movlw	9
  7625  147B  319D  2561  3194   	fcall	_setProductData
  7626  147E                     l2125:	
  7627                           
  7628                           ;RF_Control_B1.c: 424: }
  7629                           ;RF_Control_B1.c: 425: setProductData(17, product->Data[26 + sw]);
  7630  147E  0020               	movlb	0	; select bank0
  7631  147F  086B               	movf	setRFSW_AdjControl@sw,w
  7632  1480  3E1A               	addlw	26
  7633  1481  0779               	addwf	_product,w
  7634  1482  00E8               	movwf	??_setRFSW_AdjControl
  7635  1483  0868               	movf	??_setRFSW_AdjControl,w
  7636  1484  0086               	movwf	6
  7637  1485  3002               	movlw	2	; select bank4/5
  7638  1486  0087               	movwf	7
  7639  1487  0801               	movf	1,w
  7640  1488  00E9               	movwf	??_setRFSW_AdjControl+1
  7641  1489  0869               	movf	??_setRFSW_AdjControl+1,w
  7642  148A  00E2               	movwf	setProductData@value
  7643  148B  3011               	movlw	17
  7644  148C  319D  2561  3194   	fcall	_setProductData
  7645                           
  7646                           ;RF_Control_B1.c: 426: setTxData();
  7647  148F  318E  260C         	fcall	_setTxData
  7648  1491  0008               	return
  7649  1492                     __end_of_setRFSW_AdjControl:	
  7650                           
  7651                           	psect	text30
  7652  120E                     __ptext30:	
  7653 ;; *************** function _setRF_DimmerValue *****************
  7654 ;; Defined at:
  7655 ;;		line 431 in file "../src/RF_Control_B1.c"
  7656 ;; Parameters:    Size  Location     Type
  7657 ;;  lights          1    wreg     unsigned char 
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;  lights          1   71[BANK0 ] unsigned char 
  7660 ;; Return value:  Size  Location     Type
  7661 ;;		None               void
  7662 ;; Registers used:
  7663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7664 ;; Tracked objects:
  7665 ;;		On entry : 0/0
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7673 ;;Total ram usage:        2 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    9
  7676 ;; This function calls:
  7677 ;;		_setDimmerLights_AdjRF
  7678 ;;		_setProductData
  7679 ;; This function is called by:
  7680 ;;		_setRFSW_AdjControl
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           
  7685                           ;psect for function _setRF_DimmerValue
  7686  120E                     _setRF_DimmerValue:	
  7687                           
  7688                           ;incstack = 0
  7689                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7690                           ;setRF_DimmerValue@lights stored from wreg
  7691  120E  0020               	movlb	0	; select bank0
  7692  120F  00E7               	movwf	setRF_DimmerValue@lights
  7693                           
  7694                           ;RF_Control_B1.c: 432: if (RF_Data[9] > 0x64) {
  7695  1210  3065               	movlw	101
  7696  1211  0023               	movlb	3	; select bank3
  7697  1212  0229               	subwf	(_RF_Data^(0+384)+9),w
  7698  1213  1C03               	skipc
  7699  1214  2A1B               	goto	l8486
  7700                           
  7701                           ;RF_Control_B1.c: 433: RF_Data[9] = 0x64;
  7702  1215  3064               	movlw	100
  7703  1216  0020               	movlb	0	; select bank0
  7704  1217  00E6               	movwf	??_setRF_DimmerValue
  7705  1218  0866               	movf	??_setRF_DimmerValue,w
  7706  1219  0023               	movlb	3	; select bank3
  7707  121A  00A9               	movwf	(_RF_Data^(0+384)+9)
  7708  121B                     l8486:	
  7709                           
  7710                           ;RF_Control_B1.c: 434: }
  7711                           ;RF_Control_B1.c: 435: setProductData(9, RF_Data[9]);
  7712  121B  0829               	movf	(_RF_Data^(0+384)+9),w
  7713  121C  0020               	movlb	0	; select bank0
  7714  121D  00E6               	movwf	??_setRF_DimmerValue
  7715  121E  0866               	movf	??_setRF_DimmerValue,w
  7716  121F  00E2               	movwf	setProductData@value
  7717  1220  3009               	movlw	9
  7718  1221  319D  2561  3192   	fcall	_setProductData
  7719                           
  7720                           ;RF_Control_B1.c: 436: setProductData(11, lights);
  7721  1224  0020               	movlb	0	; select bank0
  7722  1225  0867               	movf	setRF_DimmerValue@lights,w
  7723  1226  00E6               	movwf	??_setRF_DimmerValue
  7724  1227  0866               	movf	??_setRF_DimmerValue,w
  7725  1228  00E2               	movwf	setProductData@value
  7726  1229  300B               	movlw	11
  7727  122A  319D  2561  3192   	fcall	_setProductData
  7728                           
  7729                           ;RF_Control_B1.c: 437: setProductData((20 + lights), RF_Data[9]);
  7730  122D  0023               	movlb	3	; select bank3
  7731  122E  0829               	movf	(_RF_Data^(0+384)+9),w
  7732  122F  0020               	movlb	0	; select bank0
  7733  1230  00E6               	movwf	??_setRF_DimmerValue
  7734  1231  0866               	movf	??_setRF_DimmerValue,w
  7735  1232  00E2               	movwf	setProductData@value
  7736  1233  0867               	movf	setRF_DimmerValue@lights,w
  7737  1234  3E14               	addlw	20
  7738  1235  319D  2561  3192   	fcall	_setProductData
  7739                           
  7740                           ;RF_Control_B1.c: 438: setDimmerLights_AdjRF(lights);
  7741  1238  0020               	movlb	0	; select bank0
  7742  1239  0867               	movf	setRF_DimmerValue@lights,w
  7743  123A  3190  20CC         	fcall	_setDimmerLights_AdjRF
  7744  123C  0008               	return
  7745  123D                     __end_of_setRF_DimmerValue:	
  7746                           
  7747                           	psect	text31
  7748  10CC                     __ptext31:	
  7749 ;; *************** function _setDimmerLights_AdjRF *****************
  7750 ;; Defined at:
  7751 ;;		line 903 in file "../src/Dimmer_B1.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  lights          1    wreg     unsigned char 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  lights          1   67[BANK0 ] unsigned char 
  7756 ;; Return value:  Size  Location     Type
  7757 ;;		None               void
  7758 ;; Registers used:
  7759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;Total ram usage:        2 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; Hardware stack levels required when called:    8
  7772 ;; This function calls:
  7773 ;;		_DimmerLightsPointSelect
  7774 ;;		_getPercentValue
  7775 ;; This function is called by:
  7776 ;;		_setRF_DimmerValue
  7777 ;; This function uses a non-reentrant model
  7778 ;;
  7779                           
  7780                           
  7781                           ;psect for function _setDimmerLights_AdjRF
  7782  10CC                     _setDimmerLights_AdjRF:	
  7783                           
  7784                           ;incstack = 0
  7785                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7786                           ;setDimmerLights_AdjRF@lights stored from wreg
  7787  10CC  0020               	movlb	0	; select bank0
  7788  10CD  00E3               	movwf	setDimmerLights_AdjRF@lights
  7789                           
  7790                           ;Dimmer_B1.c: 905: DimmerLightsPointSelect(lights);
  7791  10CE  0863               	movf	setDimmerLights_AdjRF@lights,w
  7792  10CF  319C  24D6  3190   	fcall	_DimmerLightsPointSelect
  7793                           
  7794                           ;Dimmer_B1.c: 906: DimmerLights->AdjRF = 1;
  7795  10D2  0020               	movlb	0	; select bank0
  7796  10D3  086F               	movf	_DimmerLights,w
  7797  10D4  3E02               	addlw	2
  7798  10D5  0086               	movwf	6
  7799  10D6  3001               	movlw	1	; select bank2/3
  7800  10D7  0087               	movwf	7
  7801  10D8  1401               	bsf	1,0
  7802                           
  7803                           ;Dimmer_B1.c: 907: DimmerLights->Signal = 1;
  7804  10D9  0A6F               	incf	_DimmerLights,w
  7805  10DA  0086               	movwf	6
  7806  10DB  3001               	movlw	1	; select bank2/3
  7807  10DC  0087               	movwf	7
  7808  10DD  1681               	bsf	1,5
  7809                           
  7810                           ;Dimmer_B1.c: 908: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7811  10DE  0879               	movf	_product,w
  7812  10DF  3E09               	addlw	9
  7813  10E0  0086               	movwf	6
  7814  10E1  3002               	movlw	2	; select bank4/5
  7815  10E2  0087               	movwf	7
  7816  10E3  0801               	movf	1,w
  7817  10E4  318B  2334         	fcall	_getPercentValue
  7818  10E6  0020               	movlb	0	; select bank0
  7819  10E7  00E2               	movwf	??_setDimmerLights_AdjRF
  7820  10E8  086F               	movf	_DimmerLights,w
  7821  10E9  3E06               	addlw	6
  7822  10EA  0086               	movwf	6
  7823  10EB  3001               	movlw	1	; select bank2/3
  7824  10EC  0087               	movwf	7
  7825  10ED  0862               	movf	??_setDimmerLights_AdjRF,w
  7826  10EE  0081               	movwf	1
  7827  10EF  0008               	return
  7828  10F0                     __end_of_setDimmerLights_AdjRF:	
  7829                           
  7830                           	psect	text32
  7831  0B34                     __ptext32:	
  7832 ;; *************** function _getPercentValue *****************
  7833 ;; Defined at:
  7834 ;;		line 1018 in file "../src/Dimmer_B1.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  value           1    wreg     unsigned char 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  value           1   62[BANK0 ] unsigned char 
  7839 ;;  i               3   63[BANK0 ] float 
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  1    wreg      unsigned char 
  7842 ;; Registers used:
  7843 ;;		wreg, status,2, status,0, pclath, cstack
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7850 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7851 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7852 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;Total ram usage:        6 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    7
  7856 ;; This function calls:
  7857 ;;		___awtoft
  7858 ;;		___ftadd
  7859 ;;		___ftdiv
  7860 ;;		___ftmul
  7861 ;;		___ftneg
  7862 ;;		___fttol
  7863 ;; This function is called by:
  7864 ;;		_setDimmerLights_AdjRF
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           
  7869                           ;psect for function _getPercentValue
  7870  0B34                     _getPercentValue:	
  7871                           
  7872                           ;incstack = 0
  7873                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7874                           ;getPercentValue@value stored from wreg
  7875  0B34  0020               	movlb	0	; select bank0
  7876  0B35  00DE               	movwf	getPercentValue@value
  7877                           
  7878                           ;Dimmer_B1.c: 1026: float i = ((char)(70*0.8)) - ((char)(15*0.8));
  7879  0B36  3000               	movlw	0
  7880  0B37  00DF               	movwf	getPercentValue@i
  7881  0B38  3030               	movlw	48
  7882  0B39  00E0               	movwf	getPercentValue@i+1
  7883  0B3A  3042               	movlw	66
  7884  0B3B  00E1               	movwf	getPercentValue@i+2
  7885                           
  7886                           ;Dimmer_B1.c: 1027: i /= 100;
  7887  0B3C  3000               	movlw	0
  7888  0B3D  00AE               	movwf	___ftdiv@f2
  7889  0B3E  30C8               	movlw	200
  7890  0B3F  00AF               	movwf	___ftdiv@f2+1
  7891  0B40  3042               	movlw	66
  7892  0B41  00B0               	movwf	___ftdiv@f2+2
  7893  0B42  085F               	movf	getPercentValue@i,w
  7894  0B43  00B1               	movwf	___ftdiv@f1
  7895  0B44  0860               	movf	getPercentValue@i+1,w
  7896  0B45  00B2               	movwf	___ftdiv@f1+1
  7897  0B46  0861               	movf	getPercentValue@i+2,w
  7898  0B47  00B3               	movwf	___ftdiv@f1+2
  7899  0B48  318E  26A7  318B   	fcall	___ftdiv
  7900  0B4B  0020               	movlb	0	; select bank0
  7901  0B4C  082E               	movf	?___ftdiv,w
  7902  0B4D  00DF               	movwf	getPercentValue@i
  7903  0B4E  082F               	movf	?___ftdiv+1,w
  7904  0B4F  00E0               	movwf	getPercentValue@i+1
  7905  0B50  0830               	movf	?___ftdiv+2,w
  7906  0B51  00E1               	movwf	getPercentValue@i+2
  7907                           
  7908                           ;Dimmer_B1.c: 1029: return (char) (((char)(70*0.8)) - ((100 - value) * i));
  7909  0B52  085E               	movf	getPercentValue@value,w
  7910  0B53  00DC               	movwf	??_getPercentValue
  7911  0B54  01DD               	clrf	??_getPercentValue+1
  7912  0B55  09DC               	comf	??_getPercentValue,f
  7913  0B56  09DD               	comf	??_getPercentValue+1,f
  7914  0B57  0ADC               	incf	??_getPercentValue,f
  7915  0B58  1903               	skipnz
  7916  0B59  0ADD               	incf	??_getPercentValue+1,f
  7917  0B5A  085C               	movf	??_getPercentValue,w
  7918  0B5B  3E64               	addlw	100
  7919  0B5C  00A8               	movwf	___awtoft@c
  7920  0B5D  3000               	movlw	0
  7921  0B5E  3D5D               	addwfc	??_getPercentValue+1,w
  7922  0B5F  00A9               	movwf	___awtoft@c+1
  7923  0B60  3190  2087  318B   	fcall	___awtoft
  7924  0B63  0020               	movlb	0	; select bank0
  7925  0B64  0828               	movf	?___awtoft,w
  7926  0B65  00B1               	movwf	___ftmul@f2
  7927  0B66  0829               	movf	?___awtoft+1,w
  7928  0B67  00B2               	movwf	___ftmul@f2+1
  7929  0B68  082A               	movf	?___awtoft+2,w
  7930  0B69  00B3               	movwf	___ftmul@f2+2
  7931  0B6A  085F               	movf	getPercentValue@i,w
  7932  0B6B  00AE               	movwf	___ftmul@f1
  7933  0B6C  0860               	movf	getPercentValue@i+1,w
  7934  0B6D  00AF               	movwf	___ftmul@f1+1
  7935  0B6E  0861               	movf	getPercentValue@i+2,w
  7936  0B6F  00B0               	movwf	___ftmul@f1+2
  7937  0B70  3187  2708  318B   	fcall	___ftmul
  7938  0B73  0020               	movlb	0	; select bank0
  7939  0B74  082E               	movf	?___ftmul,w
  7940  0B75  00BE               	movwf	___ftneg@f1
  7941  0B76  082F               	movf	?___ftmul+1,w
  7942  0B77  00BF               	movwf	___ftneg@f1+1
  7943  0B78  0830               	movf	?___ftmul+2,w
  7944  0B79  00C0               	movwf	___ftneg@f1+2
  7945  0B7A  319C  2487  318B   	fcall	___ftneg
  7946  0B7D  0020               	movlb	0	; select bank0
  7947  0B7E  083E               	movf	?___ftneg,w
  7948  0B7F  00C4               	movwf	___ftadd@f2
  7949  0B80  083F               	movf	?___ftneg+1,w
  7950  0B81  00C5               	movwf	___ftadd@f2+1
  7951  0B82  0840               	movf	?___ftneg+2,w
  7952  0B83  00C6               	movwf	___ftadd@f2+2
  7953  0B84  3000               	movlw	0
  7954  0B85  00C1               	movwf	___ftadd@f1
  7955  0B86  3060               	movlw	96
  7956  0B87  00C2               	movwf	___ftadd@f1+1
  7957  0B88  3042               	movlw	66
  7958  0B89  00C3               	movwf	___ftadd@f1+2
  7959  0B8A  3184  245A  318B   	fcall	___ftadd
  7960  0B8D  0020               	movlb	0	; select bank0
  7961  0B8E  0841               	movf	?___ftadd,w
  7962  0B8F  00CE               	movwf	___fttol@f1
  7963  0B90  0842               	movf	?___ftadd+1,w
  7964  0B91  00CF               	movwf	___fttol@f1+1
  7965  0B92  0843               	movf	?___ftadd+2,w
  7966  0B93  00D0               	movwf	___fttol@f1+2
  7967  0B94  318D  2585         	fcall	___fttol
  7968  0B96  0020               	movlb	0	; select bank0
  7969  0B97  084E               	movf	?___fttol,w
  7970  0B98  0008               	return
  7971  0B99                     __end_of_getPercentValue:	
  7972                           
  7973                           	psect	text33
  7974  0708                     __ptext33:	
  7975 ;; *************** function ___ftmul *****************
  7976 ;; Defined at:
  7977 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  f1              3   14[BANK0 ] float 
  7980 ;;  f2              3   17[BANK0 ] float 
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7983 ;;  sign            1   29[BANK0 ] unsigned char 
  7984 ;;  cntr            1   28[BANK0 ] unsigned char 
  7985 ;;  exp             1   24[BANK0 ] unsigned char 
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  3   14[BANK0 ] float 
  7988 ;; Registers used:
  7989 ;;		wreg, status,2, status,0, pclath, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7995 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;Total ram usage:       16 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    6
  8002 ;; This function calls:
  8003 ;;		___ftpack
  8004 ;; This function is called by:
  8005 ;;		_getPercentValue
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           
  8010                           ;psect for function ___ftmul
  8011  0708                     ___ftmul:	
  8012                           
  8013                           ;incstack = 0
  8014                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8015  0708  0020               	movlb	0	; select bank0
  8016  0709  082E               	movf	___ftmul@f1,w
  8017  070A  00B4               	movwf	??___ftmul
  8018  070B  082F               	movf	___ftmul@f1+1,w
  8019  070C  00B5               	movwf	??___ftmul+1
  8020  070D  0830               	movf	___ftmul@f1+2,w
  8021  070E  00B6               	movwf	??___ftmul+2
  8022  070F  1003               	clrc
  8023  0710  0D35               	rlf	??___ftmul+1,w
  8024  0711  0D36               	rlf	??___ftmul+2,w
  8025  0712  00B7               	movwf	??___ftmul+3
  8026  0713  0837               	movf	??___ftmul+3,w
  8027  0714  00B8               	movwf	___ftmul@exp
  8028  0715  08B8               	movf	___ftmul@exp,f
  8029  0716  1D03               	skipz
  8030  0717  2F1F               	goto	l8138
  8031  0718  3000               	movlw	0
  8032  0719  00AE               	movwf	?___ftmul
  8033  071A  3000               	movlw	0
  8034  071B  00AF               	movwf	?___ftmul+1
  8035  071C  3000               	movlw	0
  8036  071D  00B0               	movwf	?___ftmul+2
  8037  071E  0008               	return
  8038  071F                     l8138:	
  8039  071F  0831               	movf	___ftmul@f2,w
  8040  0720  00B4               	movwf	??___ftmul
  8041  0721  0832               	movf	___ftmul@f2+1,w
  8042  0722  00B5               	movwf	??___ftmul+1
  8043  0723  0833               	movf	___ftmul@f2+2,w
  8044  0724  00B6               	movwf	??___ftmul+2
  8045  0725  1003               	clrc
  8046  0726  0D35               	rlf	??___ftmul+1,w
  8047  0727  0D36               	rlf	??___ftmul+2,w
  8048  0728  00B7               	movwf	??___ftmul+3
  8049  0729  0837               	movf	??___ftmul+3,w
  8050  072A  00BD               	movwf	___ftmul@sign
  8051  072B  08BD               	movf	___ftmul@sign,f
  8052  072C  1D03               	skipz
  8053  072D  2F35               	goto	l8144
  8054  072E  3000               	movlw	0
  8055  072F  00AE               	movwf	?___ftmul
  8056  0730  3000               	movlw	0
  8057  0731  00AF               	movwf	?___ftmul+1
  8058  0732  3000               	movlw	0
  8059  0733  00B0               	movwf	?___ftmul+2
  8060  0734  0008               	return
  8061  0735                     l8144:	
  8062  0735  083D               	movf	___ftmul@sign,w
  8063  0736  3E7B               	addlw	123
  8064  0737  00B4               	movwf	??___ftmul
  8065  0738  0834               	movf	??___ftmul,w
  8066  0739  07B8               	addwf	___ftmul@exp,f
  8067  073A  082E               	movf	___ftmul@f1,w
  8068  073B  00B4               	movwf	??___ftmul
  8069  073C  082F               	movf	___ftmul@f1+1,w
  8070  073D  00B5               	movwf	??___ftmul+1
  8071  073E  0830               	movf	___ftmul@f1+2,w
  8072  073F  00B6               	movwf	??___ftmul+2
  8073  0740  3010               	movlw	16
  8074  0741                     u8505:	
  8075  0741  36B6               	lsrf	??___ftmul+2,f
  8076  0742  0CB5               	rrf	??___ftmul+1,f
  8077  0743  0CB4               	rrf	??___ftmul,f
  8078  0744  0B89               	decfsz	9,f
  8079  0745  2F41               	goto	u8505
  8080  0746  0834               	movf	??___ftmul,w
  8081  0747  00B7               	movwf	??___ftmul+3
  8082  0748  0837               	movf	??___ftmul+3,w
  8083  0749  00BD               	movwf	___ftmul@sign
  8084  074A  0831               	movf	___ftmul@f2,w
  8085  074B  00B4               	movwf	??___ftmul
  8086  074C  0832               	movf	___ftmul@f2+1,w
  8087  074D  00B5               	movwf	??___ftmul+1
  8088  074E  0833               	movf	___ftmul@f2+2,w
  8089  074F  00B6               	movwf	??___ftmul+2
  8090  0750  3010               	movlw	16
  8091  0751                     u8515:	
  8092  0751  36B6               	lsrf	??___ftmul+2,f
  8093  0752  0CB5               	rrf	??___ftmul+1,f
  8094  0753  0CB4               	rrf	??___ftmul,f
  8095  0754  0B89               	decfsz	9,f
  8096  0755  2F51               	goto	u8515
  8097  0756  0834               	movf	??___ftmul,w
  8098  0757  00B7               	movwf	??___ftmul+3
  8099  0758  0837               	movf	??___ftmul+3,w
  8100  0759  06BD               	xorwf	___ftmul@sign,f
  8101  075A  3080               	movlw	128
  8102  075B  00B4               	movwf	??___ftmul
  8103  075C  0834               	movf	??___ftmul,w
  8104  075D  05BD               	andwf	___ftmul@sign,f
  8105  075E  17AF               	bsf	___ftmul@f1+1,7
  8106  075F  17B2               	bsf	___ftmul@f2+1,7
  8107  0760  30FF               	movlw	255
  8108  0761  05B1               	andwf	___ftmul@f2,f
  8109  0762  30FF               	movlw	255
  8110  0763  05B2               	andwf	___ftmul@f2+1,f
  8111  0764  3000               	movlw	0
  8112  0765  05B3               	andwf	___ftmul@f2+2,f
  8113  0766  3000               	movlw	0
  8114  0767  00B9               	movwf	___ftmul@f3_as_product
  8115  0768  3000               	movlw	0
  8116  0769  00BA               	movwf	___ftmul@f3_as_product+1
  8117  076A  3000               	movlw	0
  8118  076B  00BB               	movwf	___ftmul@f3_as_product+2
  8119  076C  3007               	movlw	7
  8120  076D  00B4               	movwf	??___ftmul
  8121  076E  0834               	movf	??___ftmul,w
  8122  076F  00BC               	movwf	___ftmul@cntr
  8123  0770                     l8156:	
  8124  0770  1C2E               	btfss	___ftmul@f1,0
  8125  0771  2F78               	goto	l8160
  8126  0772  0831               	movf	___ftmul@f2,w
  8127  0773  07B9               	addwf	___ftmul@f3_as_product,f
  8128  0774  0832               	movf	___ftmul@f2+1,w
  8129  0775  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8130  0776  0833               	movf	___ftmul@f2+2,w
  8131  0777  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8132  0778                     l8160:	
  8133  0778  3001               	movlw	1
  8134  0779                     u8535:	
  8135  0779  36B0               	lsrf	___ftmul@f1+2,f
  8136  077A  0CAF               	rrf	___ftmul@f1+1,f
  8137  077B  0CAE               	rrf	___ftmul@f1,f
  8138  077C  0B89               	decfsz	9,f
  8139  077D  2F79               	goto	u8535
  8140  077E  3001               	movlw	1
  8141  077F                     u8545:	
  8142  077F  35B1               	lslf	___ftmul@f2,f
  8143  0780  0DB2               	rlf	___ftmul@f2+1,f
  8144  0781  0DB3               	rlf	___ftmul@f2+2,f
  8145  0782  0B89               	decfsz	9,f
  8146  0783  2F7F               	goto	u8545
  8147  0784  3001               	movlw	1
  8148  0785  02BC               	subwf	___ftmul@cntr,f
  8149  0786  1D03               	btfss	3,2
  8150  0787  2F70               	goto	l8156
  8151  0788  3009               	movlw	9
  8152  0789  00B4               	movwf	??___ftmul
  8153  078A  0834               	movf	??___ftmul,w
  8154  078B  00BC               	movwf	___ftmul@cntr
  8155  078C                     l8168:	
  8156  078C  1C2E               	btfss	___ftmul@f1,0
  8157  078D  2F94               	goto	l8172
  8158  078E  0831               	movf	___ftmul@f2,w
  8159  078F  07B9               	addwf	___ftmul@f3_as_product,f
  8160  0790  0832               	movf	___ftmul@f2+1,w
  8161  0791  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8162  0792  0833               	movf	___ftmul@f2+2,w
  8163  0793  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8164  0794                     l8172:	
  8165  0794  3001               	movlw	1
  8166  0795                     u8575:	
  8167  0795  36B0               	lsrf	___ftmul@f1+2,f
  8168  0796  0CAF               	rrf	___ftmul@f1+1,f
  8169  0797  0CAE               	rrf	___ftmul@f1,f
  8170  0798  0B89               	decfsz	9,f
  8171  0799  2F95               	goto	u8575
  8172  079A  3001               	movlw	1
  8173  079B                     u8585:	
  8174  079B  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8175  079C  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8176  079D  0CB9               	rrf	___ftmul@f3_as_product,f
  8177  079E  0B89               	decfsz	9,f
  8178  079F  2F9B               	goto	u8585
  8179  07A0  3001               	movlw	1
  8180  07A1  02BC               	subwf	___ftmul@cntr,f
  8181  07A2  1D03               	btfss	3,2
  8182  07A3  2F8C               	goto	l8168
  8183  07A4  0839               	movf	___ftmul@f3_as_product,w
  8184  07A5  00A0               	movwf	___ftpack@arg
  8185  07A6  083A               	movf	___ftmul@f3_as_product+1,w
  8186  07A7  00A1               	movwf	___ftpack@arg+1
  8187  07A8  083B               	movf	___ftmul@f3_as_product+2,w
  8188  07A9  00A2               	movwf	___ftpack@arg+2
  8189  07AA  0838               	movf	___ftmul@exp,w
  8190  07AB  00B4               	movwf	??___ftmul
  8191  07AC  0834               	movf	??___ftmul,w
  8192  07AD  00A3               	movwf	___ftpack@exp
  8193  07AE  083D               	movf	___ftmul@sign,w
  8194  07AF  00B5               	movwf	??___ftmul+1
  8195  07B0  0835               	movf	??___ftmul+1,w
  8196  07B1  00A4               	movwf	___ftpack@sign
  8197  07B2  318A  220A         	fcall	___ftpack
  8198  07B4  0020               	movlb	0	; select bank0
  8199  07B5  0820               	movf	?___ftpack,w
  8200  07B6  00AE               	movwf	?___ftmul
  8201  07B7  0821               	movf	?___ftpack+1,w
  8202  07B8  00AF               	movwf	?___ftmul+1
  8203  07B9  0822               	movf	?___ftpack+2,w
  8204  07BA  00B0               	movwf	?___ftmul+2
  8205  07BB  0008               	return
  8206  07BC                     __end_of___ftmul:	
  8207                           
  8208                           	psect	text34
  8209  1E5A                     __ptext34:	
  8210 ;; *************** function _setMemory_Modify *****************
  8211 ;; Defined at:
  8212 ;;		line 1064 in file "../src/MCU_B1.c"
  8213 ;; Parameters:    Size  Location     Type
  8214 ;;  command         1    wreg     unsigned char 
  8215 ;; Auto vars:     Size  Location     Type
  8216 ;;  command         1    1[BANK0 ] unsigned char 
  8217 ;; Return value:  Size  Location     Type
  8218 ;;		None               void
  8219 ;; Registers used:
  8220 ;;		wreg, status,2, status,0
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;Total ram usage:        2 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    5
  8233 ;; This function calls:
  8234 ;;		Nothing
  8235 ;; This function is called by:
  8236 ;;		_setLog_Code
  8237 ;;		_setRFSW_AdjControl
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           
  8242                           ;psect for function _setMemory_Modify
  8243  1E5A                     _setMemory_Modify:	
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8247                           ;setMemory_Modify@command stored from wreg
  8248  1E5A  0020               	movlb	0	; select bank0
  8249  1E5B  00A1               	movwf	setMemory_Modify@command
  8250                           
  8251                           ;MCU_B1.c: 1065: Memory.Modify = command == 1 ? 1 : 0;
  8252  1E5C  0821               	movf	setMemory_Modify@command,w
  8253  1E5D  3A01               	xorlw	1
  8254  1E5E  3000               	movlw	0
  8255  1E5F  1903               	skipnz
  8256  1E60  3001               	movlw	1
  8257  1E61  00A0               	movwf	??_setMemory_Modify
  8258  1E62  0023               	movlb	3	; select bank3
  8259  1E63  0862               	movf	(_Memory^(0+384)+36),w
  8260  1E64  0020               	movlb	0	; select bank0
  8261  1E65  0620               	xorwf	??_setMemory_Modify,w
  8262  1E66  39FE               	andlw	-2
  8263  1E67  0620               	xorwf	??_setMemory_Modify,w
  8264  1E68  0023               	movlb	3	; select bank3
  8265  1E69  00E2               	movwf	(_Memory^(0+384)+36)
  8266                           
  8267                           ;MCU_B1.c: 1066: Memory.Time = 0;
  8268  1E6A  01E0               	clrf	(_Memory^(0+384)+34)
  8269  1E6B  01E1               	clrf	((_Memory+1)^(0+384)+34)
  8270  1E6C  0008               	return
  8271  1E6D                     __end_of_setMemory_Modify:	
  8272                           
  8273                           	psect	text35
  8274  1DDD                     __ptext35:	
  8275 ;; *************** function _getRF_KeyStatus *****************
  8276 ;; Defined at:
  8277 ;;		line 154 in file "../src/RF_Control_B1.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;		None
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;  key             1    1[BANK0 ] unsigned char 
  8282 ;; Return value:  Size  Location     Type
  8283 ;;                  1    wreg      unsigned char 
  8284 ;; Registers used:
  8285 ;;		wreg, status,2
  8286 ;; Tracked objects:
  8287 ;;		On entry : 0/0
  8288 ;;		On exit  : 0/0
  8289 ;;		Unchanged: 0/0
  8290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;Total ram usage:        3 bytes
  8296 ;; Hardware stack levels used:    1
  8297 ;; Hardware stack levels required when called:    5
  8298 ;; This function calls:
  8299 ;;		Nothing
  8300 ;; This function is called by:
  8301 ;;		_setRF_Main
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           
  8306                           ;psect for function _getRF_KeyStatus
  8307  1DDD                     _getRF_KeyStatus:	
  8308                           
  8309                           ;RF_Control_B1.c: 155: char key = 0;
  8310                           
  8311                           ;incstack = 0
  8312                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8313  1DDD  0020               	movlb	0	; select bank0
  8314  1DDE  01A1               	clrf	getRF_KeyStatus@key
  8315                           
  8316                           ;RF_Control_B1.c: 165: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8317  1DDF  01A2               	clrf	_getRF_KeyStatus$5048
  8318  1DE0  0AA2               	incf	_getRF_KeyStatus$5048,f
  8319  1DE1  1F0C               	btfss	12,6	;volatile
  8320  1DE2  1A0C               	btfsc	12,4	;volatile
  8321  1DE3  2DE8               	goto	l9048
  8322  1DE4  1C0C               	btfss	12,0	;volatile
  8323  1DE5  1B8C               	btfsc	12,7	;volatile
  8324  1DE6  2DE8               	goto	l9048
  8325  1DE7  01A2               	clrf	_getRF_KeyStatus$5048
  8326  1DE8                     l9048:	
  8327  1DE8  0822               	movf	_getRF_KeyStatus$5048,w
  8328  1DE9  00A0               	movwf	??_getRF_KeyStatus
  8329  1DEA  0820               	movf	??_getRF_KeyStatus,w
  8330  1DEB  00A1               	movwf	getRF_KeyStatus@key
  8331                           
  8332                           ;RF_Control_B1.c: 167: return key;
  8333  1DEC  0821               	movf	getRF_KeyStatus@key,w
  8334  1DED  0008               	return
  8335  1DEE                     __end_of_getRF_KeyStatus:	
  8336                           
  8337                           	psect	text36
  8338  1DCC                     __ptext36:	
  8339 ;; *************** function _getBuz_GO *****************
  8340 ;; Defined at:
  8341 ;;		line 82 in file "../src/Buzzer_B1.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;		None
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  i               2    4[BANK0 ] int 
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  2    0[BANK0 ] int 
  8348 ;; Registers used:
  8349 ;;		wreg, status,2, status,0
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8355 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8359 ;;Total ram usage:        6 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    5
  8362 ;; This function calls:
  8363 ;;		Nothing
  8364 ;; This function is called by:
  8365 ;;		_setRF_Main
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           
  8370                           ;psect for function _getBuz_GO
  8371  1DCC                     _getBuz_GO:	
  8372                           
  8373                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8374                           
  8375                           ;incstack = 0
  8376                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8377  1DCC  0021               	movlb	1	; select bank1
  8378  1DCD  0C2E               	rrf	_Buz1^(0+128),w
  8379  1DCE  3901               	andlw	1
  8380  1DCF  0020               	movlb	0	; select bank0
  8381  1DD0  00A2               	movwf	??_getBuz_GO
  8382  1DD1  01A3               	clrf	??_getBuz_GO+1
  8383  1DD2  0822               	movf	??_getBuz_GO,w
  8384  1DD3  00A4               	movwf	getBuz_GO@i
  8385  1DD4  0823               	movf	??_getBuz_GO+1,w
  8386  1DD5  00A5               	movwf	getBuz_GO@i+1
  8387                           
  8388                           ;Buzzer_B1.c: 84: return i;
  8389  1DD6  0825               	movf	getBuz_GO@i+1,w
  8390  1DD7  01A1               	clrf	?_getBuz_GO+1
  8391  1DD8  07A1               	addwf	?_getBuz_GO+1,f
  8392  1DD9  0824               	movf	getBuz_GO@i,w
  8393  1DDA  01A0               	clrf	?_getBuz_GO
  8394  1DDB  07A0               	addwf	?_getBuz_GO,f
  8395  1DDC  0008               	return
  8396  1DDD                     __end_of_getBuz_GO:	
  8397                           
  8398                           	psect	text37
  8399  1E47                     __ptext37:	
  8400 ;; *************** function _RF_RxDisable *****************
  8401 ;; Defined at:
  8402 ;;		line 230 in file "../src/RF_Control_B1.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;		None
  8407 ;; Return value:  Size  Location     Type
  8408 ;;		None               void
  8409 ;; Registers used:
  8410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;Total ram usage:        0 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    7
  8423 ;; This function calls:
  8424 ;;		_CC2500_WriteCommand
  8425 ;; This function is called by:
  8426 ;;		_setRF_Main
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           
  8431                           ;psect for function _RF_RxDisable
  8432  1E47                     _RF_RxDisable:	
  8433                           
  8434                           ;RF_Control_B1.c: 231: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8435                           
  8436                           ;incstack = 0
  8437                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8438  1E47  0021               	movlb	1	; select bank1
  8439  1E48  18BA               	btfsc	_RF1^(0+128),1
  8440  1E49  2E4C               	goto	l2077
  8441  1E4A  1DBA               	btfss	_RF1^(0+128),3
  8442  1E4B  0008               	return
  8443  1E4C                     l2077:	
  8444                           
  8445                           ;RF_Control_B1.c: 232: RF1.RxStatus = 0;
  8446  1E4C  11BA               	bcf	_RF1^(0+128),3
  8447                           
  8448                           ;RF_Control_B1.c: 233: RF1.ReceiveGO = 0;
  8449  1E4D  10BA               	bcf	_RF1^(0+128),1
  8450                           
  8451                           ;RF_Control_B1.c: 234: CC2500_WriteCommand(0x36);
  8452  1E4E  3036               	movlw	54
  8453  1E4F  319F  271A  319E   	fcall	_CC2500_WriteCommand
  8454                           
  8455                           ;RF_Control_B1.c: 236: CC2500_WriteCommand(0x3A);
  8456  1E52  303A               	movlw	58
  8457  1E53  319F  271A  319E   	fcall	_CC2500_WriteCommand
  8458                           
  8459                           ;RF_Control_B1.c: 237: CC2500_WriteCommand(0x3B);
  8460  1E56  303B               	movlw	59
  8461  1E57  319F  271A         	fcall	_CC2500_WriteCommand
  8462  1E59  0008               	return
  8463  1E5A                     __end_of_RF_RxDisable:	
  8464                           
  8465                           	psect	text38
  8466  0A6B                     __ptext38:	
  8467 ;; *************** function _CC2500_TxData *****************
  8468 ;; Defined at:
  8469 ;;		line 32 in file "../src/CC2500_B1.c"
  8470 ;; Parameters:    Size  Location     Type
  8471 ;;		None
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8474 ;; Return value:  Size  Location     Type
  8475 ;;		None               void
  8476 ;; Registers used:
  8477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8478 ;; Tracked objects:
  8479 ;;		On entry : 0/0
  8480 ;;		On exit  : 0/0
  8481 ;;		Unchanged: 0/0
  8482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;Total ram usage:        2 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; Hardware stack levels required when called:    7
  8490 ;; This function calls:
  8491 ;;		_CC2500_WriteByte
  8492 ;;		_CC2500_WriteCommand
  8493 ;;		_Timeout_Counter
  8494 ;;		_set_TimeoutCleared
  8495 ;; This function is called by:
  8496 ;;		_setRF_Main
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           
  8501                           ;psect for function _CC2500_TxData
  8502  0A6B                     _CC2500_TxData:	
  8503                           
  8504                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8505                           ;CC2500_B1.c: 35: RC0 = 0;
  8506                           
  8507                           ;incstack = 0
  8508                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8509  0A6B  0020               	movlb	0	; select bank0
  8510  0A6C  100E               	bcf	14,0	;volatile
  8511                           
  8512                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8513  0A6D  307F               	movlw	127
  8514  0A6E  00A4               	movwf	??_CC2500_TxData
  8515  0A6F  0824               	movf	??_CC2500_TxData,w
  8516  0A70  0021               	movlb	1	; select bank1
  8517  0A71  00D1               	movwf	_SPI0Buffer^(0+128)
  8518                           
  8519                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  8520  0A72  2A76               	goto	l8772
  8521  0A73                     l8770:	
  8522                           
  8523                           ;CC2500_B1.c: 38: Timeout_Counter();
  8524  0A73  319E  2694  318A   	fcall	_Timeout_Counter
  8525  0A76                     l8772:	
  8526  0A76  0020               	movlb	0	; select bank0
  8527  0A77  1E8E               	btfss	14,5	;volatile
  8528  0A78  2A7C               	goto	l8776
  8529  0A79  0021               	movlb	1	; select bank1
  8530  0A7A  1D2B               	btfss	(_myMain^(0+128)+11),2
  8531  0A7B  2A73               	goto	l8770
  8532  0A7C                     l8776:	
  8533                           
  8534                           ;CC2500_B1.c: 39: };
  8535                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8536  0A7C  319C  244A  318A   	fcall	_set_TimeoutCleared
  8537                           
  8538                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8539  0A7F  319F  2701  318A   	fcall	_CC2500_WriteByte
  8540                           
  8541                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8542  0A82  0021               	movlb	1	; select bank1
  8543  0A83  0853               	movf	_Tx_Length^(0+128),w
  8544  0A84  0020               	movlb	0	; select bank0
  8545  0A85  00A4               	movwf	??_CC2500_TxData
  8546  0A86  0824               	movf	??_CC2500_TxData,w
  8547  0A87  0021               	movlb	1	; select bank1
  8548  0A88  00D1               	movwf	_SPI0Buffer^(0+128)
  8549                           
  8550                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8551  0A89  319F  2701  318A   	fcall	_CC2500_WriteByte
  8552                           
  8553                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8554  0A8C  0020               	movlb	0	; select bank0
  8555  0A8D  01A5               	clrf	CC2500_TxData@loop_e
  8556  0A8E                     l8790:	
  8557  0A8E  0021               	movlb	1	; select bank1
  8558  0A8F  0853               	movf	_Tx_Length^(0+128),w
  8559  0A90  0020               	movlb	0	; select bank0
  8560  0A91  0225               	subwf	CC2500_TxData@loop_e,w
  8561  0A92  1803               	btfsc	3,0
  8562  0A93  2AA7               	goto	l231
  8563                           
  8564                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8565  0A94  0825               	movf	CC2500_TxData@loop_e,w
  8566  0A95  3EA0               	addlw	_RF_Data& (0+255)
  8567  0A96  0086               	movwf	6
  8568  0A97  3001               	movlw	1	; select bank3/4
  8569  0A98  0087               	movwf	7
  8570  0A99  0801               	movf	1,w
  8571  0A9A  00A4               	movwf	??_CC2500_TxData
  8572  0A9B  0824               	movf	??_CC2500_TxData,w
  8573  0A9C  0021               	movlb	1	; select bank1
  8574  0A9D  00D1               	movwf	_SPI0Buffer^(0+128)
  8575                           
  8576                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8577  0A9E  319F  2701  318A   	fcall	_CC2500_WriteByte
  8578  0AA1  3001               	movlw	1
  8579  0AA2  0020               	movlb	0	; select bank0
  8580  0AA3  00A4               	movwf	??_CC2500_TxData
  8581  0AA4  0824               	movf	??_CC2500_TxData,w
  8582  0AA5  07A5               	addwf	CC2500_TxData@loop_e,f
  8583  0AA6  2A8E               	goto	l8790
  8584  0AA7                     l231:	
  8585                           
  8586                           ;CC2500_B1.c: 48: }
  8587                           ;CC2500_B1.c: 49: RC0 = 1;
  8588  0AA7  140E               	bsf	14,0	;volatile
  8589                           
  8590                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8591  0AA8  3035               	movlw	53
  8592  0AA9  319F  271A  318A   	fcall	_CC2500_WriteCommand
  8593                           
  8594                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  8595  0AAC  2AB0               	goto	l8796
  8596  0AAD                     l8794:	
  8597                           
  8598                           ;CC2500_B1.c: 52: Timeout_Counter();
  8599  0AAD  319E  2694  318A   	fcall	_Timeout_Counter
  8600  0AB0                     l8796:	
  8601  0AB0  0020               	movlb	0	; select bank0
  8602  0AB1  188E               	btfsc	14,1	;volatile
  8603  0AB2  2AB6               	goto	l8800
  8604  0AB3  0021               	movlb	1	; select bank1
  8605  0AB4  1D2B               	btfss	(_myMain^(0+128)+11),2
  8606  0AB5  2AAD               	goto	l8794
  8607  0AB6                     l8800:	
  8608                           
  8609                           ;CC2500_B1.c: 53: };
  8610                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8611  0AB6  319C  244A  318A   	fcall	_set_TimeoutCleared
  8612                           
  8613                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  8614  0AB9  2ABD               	goto	l8804
  8615  0ABA                     l8802:	
  8616                           
  8617                           ;CC2500_B1.c: 57: Timeout_Counter();
  8618  0ABA  319E  2694  318A   	fcall	_Timeout_Counter
  8619  0ABD                     l8804:	
  8620  0ABD  0020               	movlb	0	; select bank0
  8621  0ABE  1C8E               	btfss	14,1	;volatile
  8622  0ABF  2AC3               	goto	l8808
  8623  0AC0  0021               	movlb	1	; select bank1
  8624  0AC1  1D2B               	btfss	(_myMain^(0+128)+11),2
  8625  0AC2  2ABA               	goto	l8802
  8626  0AC3                     l8808:	
  8627                           
  8628                           ;CC2500_B1.c: 58: };
  8629                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8630  0AC3  319C  244A  318A   	fcall	_set_TimeoutCleared
  8631                           
  8632                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8633  0AC6  3036               	movlw	54
  8634  0AC7  319F  271A  318A   	fcall	_CC2500_WriteCommand
  8635                           
  8636                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8637  0ACA  303B               	movlw	59
  8638  0ACB  319F  271A         	fcall	_CC2500_WriteCommand
  8639                           
  8640                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8641  0ACD  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8642  0ACE  0008               	return
  8643  0ACF                     __end_of_CC2500_TxData:	
  8644                           
  8645                           	psect	text39
  8646  0B99                     __ptext39:	
  8647 ;; *************** function _CC2500_RxData *****************
  8648 ;; Defined at:
  8649 ;;		line 70 in file "../src/CC2500_B1.c"
  8650 ;; Parameters:    Size  Location     Type
  8651 ;;		None
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8654 ;; Return value:  Size  Location     Type
  8655 ;;		None               void
  8656 ;; Registers used:
  8657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;Total ram usage:        2 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; Hardware stack levels required when called:    7
  8670 ;; This function calls:
  8671 ;;		_CC2500_ReadByte
  8672 ;;		_CC2500_ReadStatus
  8673 ;;		_CC2500_WriteByte
  8674 ;;		_Timeout_Counter
  8675 ;;		_set_TimeoutCleared
  8676 ;; This function is called by:
  8677 ;;		_setRF_Main
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           
  8682                           ;psect for function _CC2500_RxData
  8683  0B99                     _CC2500_RxData:	
  8684                           
  8685                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8686                           ;CC2500_B1.c: 75: if (RC1 == 1)
  8687                           
  8688                           ;incstack = 0
  8689                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8690  0B99  0020               	movlb	0	; select bank0
  8691  0B9A  188E               	btfsc	14,1	;volatile
  8692  0B9B  2BA0               	goto	l8822
  8693  0B9C  2BA9               	goto	l8828
  8694  0B9D                     l8820:	
  8695                           ;CC2500_B1.c: 76: {
  8696                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  8697                           
  8698                           
  8699                           ;CC2500_B1.c: 78: Timeout_Counter();
  8700  0B9D  319E  2694  318B   	fcall	_Timeout_Counter
  8701  0BA0                     l8822:	
  8702  0BA0  0020               	movlb	0	; select bank0
  8703  0BA1  1C8E               	btfss	14,1	;volatile
  8704  0BA2  2BA6               	goto	l8826
  8705  0BA3  0021               	movlb	1	; select bank1
  8706  0BA4  1D2B               	btfss	(_myMain^(0+128)+11),2
  8707  0BA5  2B9D               	goto	l8820
  8708  0BA6                     l8826:	
  8709                           
  8710                           ;CC2500_B1.c: 79: };
  8711                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8712  0BA6  319C  244A  318B   	fcall	_set_TimeoutCleared
  8713  0BA9                     l8828:	
  8714                           
  8715                           ;CC2500_B1.c: 81: }
  8716                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8717  0BA9  303B               	movlw	59
  8718  0BAA  3191  2115  318B   	fcall	_CC2500_ReadStatus
  8719                           
  8720                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8721  0BAD  0021               	movlb	1	; select bank1
  8722  0BAE  0856               	movf	_s_data^(0+128),w
  8723  0BAF  1903               	btfsc	3,2
  8724  0BB0  0008               	return
  8725                           
  8726                           ;CC2500_B1.c: 86: RC0 = 0;
  8727  0BB1  0020               	movlb	0	; select bank0
  8728  0BB2  100E               	bcf	14,0	;volatile
  8729                           
  8730                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8731  0BB3  30FF               	movlw	255
  8732  0BB4  00A4               	movwf	??_CC2500_RxData
  8733  0BB5  0824               	movf	??_CC2500_RxData,w
  8734  0BB6  0021               	movlb	1	; select bank1
  8735  0BB7  00D1               	movwf	_SPI0Buffer^(0+128)
  8736                           
  8737                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  8738  0BB8  2BBC               	goto	l8838
  8739  0BB9                     l8836:	
  8740                           
  8741                           ;CC2500_B1.c: 89: Timeout_Counter();
  8742  0BB9  319E  2694  318B   	fcall	_Timeout_Counter
  8743  0BBC                     l8838:	
  8744  0BBC  0020               	movlb	0	; select bank0
  8745  0BBD  1E8E               	btfss	14,5	;volatile
  8746  0BBE  2BC2               	goto	l8842
  8747  0BBF  0021               	movlb	1	; select bank1
  8748  0BC0  1D2B               	btfss	(_myMain^(0+128)+11),2
  8749  0BC1  2BB9               	goto	l8836
  8750  0BC2                     l8842:	
  8751                           
  8752                           ;CC2500_B1.c: 90: };
  8753                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8754  0BC2  319C  244A  318B   	fcall	_set_TimeoutCleared
  8755                           
  8756                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8757  0BC5  319F  2701  318B   	fcall	_CC2500_WriteByte
  8758                           
  8759                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8760  0BC8  319F  2786  318B   	fcall	_CC2500_ReadByte
  8761                           
  8762                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8763  0BCB  0021               	movlb	1	; select bank1
  8764  0BCC  0851               	movf	_SPI0Buffer^(0+128),w
  8765  0BCD  0020               	movlb	0	; select bank0
  8766  0BCE  00A4               	movwf	??_CC2500_RxData
  8767  0BCF  0824               	movf	??_CC2500_RxData,w
  8768  0BD0  0021               	movlb	1	; select bank1
  8769  0BD1  00D0               	movwf	_Rx_Length^(0+128)
  8770                           
  8771                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8772  0BD2  0020               	movlb	0	; select bank0
  8773  0BD3  01A5               	clrf	CC2500_RxData@loop_f
  8774  0BD4                     l8858:	
  8775  0BD4  0021               	movlb	1	; select bank1
  8776  0BD5  0850               	movf	_Rx_Length^(0+128),w
  8777  0BD6  0020               	movlb	0	; select bank0
  8778  0BD7  0225               	subwf	CC2500_RxData@loop_f,w
  8779  0BD8  1803               	btfsc	3,0
  8780  0BD9  2BED               	goto	l8860
  8781                           
  8782                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8783  0BDA  319F  2786  318B   	fcall	_CC2500_ReadByte
  8784                           
  8785                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8786  0BDD  0021               	movlb	1	; select bank1
  8787  0BDE  0851               	movf	_SPI0Buffer^(0+128),w
  8788  0BDF  0020               	movlb	0	; select bank0
  8789  0BE0  00A4               	movwf	??_CC2500_RxData
  8790  0BE1  0825               	movf	CC2500_RxData@loop_f,w
  8791  0BE2  3EA0               	addlw	_RF_Data& (0+255)
  8792  0BE3  0086               	movwf	6
  8793  0BE4  3001               	movlw	1	; select bank3/4
  8794  0BE5  0087               	movwf	7
  8795  0BE6  0824               	movf	??_CC2500_RxData,w
  8796  0BE7  0081               	movwf	1
  8797  0BE8  3001               	movlw	1
  8798  0BE9  00A4               	movwf	??_CC2500_RxData
  8799  0BEA  0824               	movf	??_CC2500_RxData,w
  8800  0BEB  07A5               	addwf	CC2500_RxData@loop_f,f
  8801  0BEC  2BD4               	goto	l8858
  8802  0BED                     l8860:	
  8803                           
  8804                           ;CC2500_B1.c: 99: }
  8805                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8806  0BED  319F  2786  318B   	fcall	_CC2500_ReadByte
  8807                           
  8808                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8809  0BF0  0021               	movlb	1	; select bank1
  8810  0BF1  0851               	movf	_SPI0Buffer^(0+128),w
  8811  0BF2  0020               	movlb	0	; select bank0
  8812  0BF3  00A4               	movwf	??_CC2500_RxData
  8813  0BF4  0824               	movf	??_CC2500_RxData,w
  8814  0BF5  0021               	movlb	1	; select bank1
  8815  0BF6  00CF               	movwf	_RSSI^(0+128)
  8816                           
  8817                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8818  0BF7  319F  2786         	fcall	_CC2500_ReadByte
  8819                           
  8820                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8821  0BF9  0021               	movlb	1	; select bank1
  8822  0BFA  0851               	movf	_SPI0Buffer^(0+128),w
  8823  0BFB  0020               	movlb	0	; select bank0
  8824  0BFC  00A4               	movwf	??_CC2500_RxData
  8825  0BFD  0824               	movf	??_CC2500_RxData,w
  8826  0BFE  0021               	movlb	1	; select bank1
  8827  0BFF  00CB               	movwf	_CRC^(0+128)
  8828                           
  8829                           ;CC2500_B1.c: 104: RC0 = 1;
  8830  0C00  0020               	movlb	0	; select bank0
  8831  0C01  140E               	bsf	14,0	;volatile
  8832                           
  8833                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8834  0C02  0021               	movlb	1	; select bank1
  8835  0C03  1BCB               	btfsc	_CRC^(0+128),7
  8836                           
  8837                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8838  0C04  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8839                           
  8840                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8841  0C05  11BA               	bcf	_RF1^(0+128),3
  8842                           
  8843                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8844  0C06  14BA               	bsf	_RF1^(0+128),1
  8845  0C07  0008               	return
  8846  0C08                     __end_of_CC2500_RxData:	
  8847                           
  8848                           	psect	text40
  8849  1115                     __ptext40:	
  8850 ;; *************** function _CC2500_ReadStatus *****************
  8851 ;; Defined at:
  8852 ;;		line 301 in file "../src/CC2500_B1.c"
  8853 ;; Parameters:    Size  Location     Type
  8854 ;;  status_addr     1    wreg     unsigned char 
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8857 ;; Return value:  Size  Location     Type
  8858 ;;		None               void
  8859 ;; Registers used:
  8860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;Total ram usage:        2 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; Hardware stack levels required when called:    6
  8873 ;; This function calls:
  8874 ;;		_CC2500_ReadByte
  8875 ;;		_CC2500_WriteByte
  8876 ;;		_Timeout_Counter
  8877 ;;		_set_TimeoutCleared
  8878 ;; This function is called by:
  8879 ;;		_CC2500_RxData
  8880 ;; This function uses a non-reentrant model
  8881 ;;
  8882                           
  8883                           
  8884                           ;psect for function _CC2500_ReadStatus
  8885  1115                     _CC2500_ReadStatus:	
  8886                           
  8887                           ;incstack = 0
  8888                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8889                           ;CC2500_ReadStatus@status_addr stored from wreg
  8890  1115  0020               	movlb	0	; select bank0
  8891  1116  00A3               	movwf	CC2500_ReadStatus@status_addr
  8892                           
  8893                           ;CC2500_B1.c: 302: RC0 = 0;
  8894  1117  100E               	bcf	14,0	;volatile
  8895                           
  8896                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  8897  1118  0823               	movf	CC2500_ReadStatus@status_addr,w
  8898  1119  3EC0               	addlw	192
  8899  111A  00A2               	movwf	??_CC2500_ReadStatus
  8900  111B  0822               	movf	??_CC2500_ReadStatus,w
  8901  111C  0021               	movlb	1	; select bank1
  8902  111D  00D1               	movwf	_SPI0Buffer^(0+128)
  8903                           
  8904                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  8905  111E  2922               	goto	l8634
  8906  111F                     l8632:	
  8907                           
  8908                           ;CC2500_B1.c: 306: Timeout_Counter();
  8909  111F  319E  2694  3191   	fcall	_Timeout_Counter
  8910  1122                     l8634:	
  8911  1122  0020               	movlb	0	; select bank0
  8912  1123  1E8E               	btfss	14,5	;volatile
  8913  1124  2928               	goto	l8638
  8914  1125  0021               	movlb	1	; select bank1
  8915  1126  1D2B               	btfss	(_myMain^(0+128)+11),2
  8916  1127  291F               	goto	l8632
  8917  1128                     l8638:	
  8918                           
  8919                           ;CC2500_B1.c: 307: };
  8920                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  8921  1128  319C  244A  3191   	fcall	_set_TimeoutCleared
  8922                           
  8923                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  8924  112B  319F  2701  3191   	fcall	_CC2500_WriteByte
  8925                           
  8926                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  8927  112E  319F  2786         	fcall	_CC2500_ReadByte
  8928                           
  8929                           ;CC2500_B1.c: 312: RC0 = 1;
  8930  1130  0020               	movlb	0	; select bank0
  8931  1131  140E               	bsf	14,0	;volatile
  8932                           
  8933                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  8934  1132  0021               	movlb	1	; select bank1
  8935  1133  0851               	movf	_SPI0Buffer^(0+128),w
  8936  1134  0020               	movlb	0	; select bank0
  8937  1135  00A2               	movwf	??_CC2500_ReadStatus
  8938  1136  0822               	movf	??_CC2500_ReadStatus,w
  8939  1137  0021               	movlb	1	; select bank1
  8940  1138  00D6               	movwf	_s_data^(0+128)
  8941  1139  0008               	return
  8942  113A                     __end_of_CC2500_ReadStatus:	
  8943                           
  8944                           	psect	text41
  8945  1F86                     __ptext41:	
  8946 ;; *************** function _CC2500_ReadByte *****************
  8947 ;; Defined at:
  8948 ;;		line 235 in file "../src/CC2500_B1.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;		None
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8953 ;; Return value:  Size  Location     Type
  8954 ;;		None               void
  8955 ;; Registers used:
  8956 ;;		wreg, status,2, status,0
  8957 ;; Tracked objects:
  8958 ;;		On entry : 0/0
  8959 ;;		On exit  : 0/0
  8960 ;;		Unchanged: 0/0
  8961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;Total ram usage:        2 bytes
  8967 ;; Hardware stack levels used:    1
  8968 ;; Hardware stack levels required when called:    5
  8969 ;; This function calls:
  8970 ;;		Nothing
  8971 ;; This function is called by:
  8972 ;;		_CC2500_RxData
  8973 ;;		_CC2500_ReadStatus
  8974 ;;		_CC2500_ReadREG
  8975 ;; This function uses a non-reentrant model
  8976 ;;
  8977                           
  8978                           
  8979                           ;psect for function _CC2500_ReadByte
  8980  1F86                     _CC2500_ReadByte:	
  8981                           
  8982                           ;CC2500_B1.c: 236: unsigned char loop_b;
  8983                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  8984                           
  8985                           ;incstack = 0
  8986                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8987  1F86  0020               	movlb	0	; select bank0
  8988  1F87  01A1               	clrf	CC2500_ReadByte@loop_b
  8989  1F88                     L2:	
  8990  1F88  3008               	movlw	8
  8991  1F89  0221               	subwf	CC2500_ReadByte@loop_b,w
  8992  1F8A  1803               	btfsc	3,0
  8993  1F8B  0008               	return
  8994                           
  8995                           ;CC2500_B1.c: 238: RC3 = 1;
  8996  1F8C  158E               	bsf	14,3	;volatile
  8997                           
  8998                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  8999  1F8D  1003               	clrc
  9000  1F8E  0021               	movlb	1	; select bank1
  9001  1F8F  0DD1               	rlf	_SPI0Buffer^(0+128),f
  9002                           
  9003                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9004  1F90  0020               	movlb	0	; select bank0
  9005  1F91  1E8E               	btfss	14,5	;volatile
  9006  1F92  2F96               	goto	l8534
  9007                           
  9008                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9009  1F93  0021               	movlb	1	; select bank1
  9010  1F94  1451               	bsf	_SPI0Buffer^(0+128),0
  9011  1F95  2F9C               	goto	l8536
  9012  1F96                     l8534:	
  9013                           
  9014                           ;CC2500_B1.c: 242: else
  9015                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9016  1F96  30FE               	movlw	254
  9017  1F97  0020               	movlb	0	; select bank0
  9018  1F98  00A0               	movwf	??_CC2500_ReadByte
  9019  1F99  0820               	movf	??_CC2500_ReadByte,w
  9020  1F9A  0021               	movlb	1	; select bank1
  9021  1F9B  05D1               	andwf	_SPI0Buffer^(0+128),f
  9022  1F9C                     l8536:	
  9023                           
  9024                           ;CC2500_B1.c: 244: RC3 = 0;
  9025  1F9C  0020               	movlb	0	; select bank0
  9026  1F9D  118E               	bcf	14,3	;volatile
  9027  1F9E  3001               	movlw	1
  9028  1F9F  00A0               	movwf	??_CC2500_ReadByte
  9029  1FA0  0820               	movf	??_CC2500_ReadByte,w
  9030  1FA1  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9031  1FA2  2F88               	goto	L2
  9032  1FA3                     __end_of_CC2500_ReadByte:	
  9033                           
  9034                           	psect	text42
  9035  1C1A                     __ptext42:	
  9036 ;; *************** function _RF_Initialization *****************
  9037 ;; Defined at:
  9038 ;;		line 9 in file "../src/RF_Control_B1.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;		None
  9041 ;; Auto vars:     Size  Location     Type
  9042 ;;		None
  9043 ;; Return value:  Size  Location     Type
  9044 ;;		None               void
  9045 ;; Registers used:
  9046 ;;		wreg, status,2, status,0, pclath, cstack
  9047 ;; Tracked objects:
  9048 ;;		On entry : 0/0
  9049 ;;		On exit  : 0/0
  9050 ;;		Unchanged: 0/0
  9051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;Total ram usage:        0 bytes
  9057 ;; Hardware stack levels used:    1
  9058 ;; Hardware stack levels required when called:    6
  9059 ;; This function calls:
  9060 ;;		_setRF_Initialization
  9061 ;; This function is called by:
  9062 ;;		_main
  9063 ;; This function uses a non-reentrant model
  9064 ;;
  9065                           
  9066                           
  9067                           ;psect for function _RF_Initialization
  9068  1C1A                     _RF_Initialization:	
  9069                           
  9070                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9071                           
  9072                           ;incstack = 0
  9073                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9074  1C1A  319C  24F7         	fcall	_setRF_Initialization
  9075  1C1C  0008               	return
  9076  1C1D                     __end_of_RF_Initialization:	
  9077                           
  9078                           	psect	text43
  9079  1CF7                     __ptext43:	
  9080 ;; *************** function _setRF_Initialization *****************
  9081 ;; Defined at:
  9082 ;;		line 43 in file "../src/RF_Control_B1.c"
  9083 ;; Parameters:    Size  Location     Type
  9084 ;;		None
  9085 ;; Auto vars:     Size  Location     Type
  9086 ;;		None
  9087 ;; Return value:  Size  Location     Type
  9088 ;;		None               void
  9089 ;; Registers used:
  9090 ;;		wreg
  9091 ;; Tracked objects:
  9092 ;;		On entry : 0/0
  9093 ;;		On exit  : 0/0
  9094 ;;		Unchanged: 0/0
  9095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9100 ;;Total ram usage:        1 bytes
  9101 ;; Hardware stack levels used:    1
  9102 ;; Hardware stack levels required when called:    5
  9103 ;; This function calls:
  9104 ;;		Nothing
  9105 ;; This function is called by:
  9106 ;;		_RF_Initialization
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110                           
  9111                           ;psect for function _setRF_Initialization
  9112  1CF7                     _setRF_Initialization:	
  9113                           
  9114                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9115                           
  9116                           ;incstack = 0
  9117                           ; Regs used in _setRF_Initialization: [wreg]
  9118  1CF7  3015               	movlw	21
  9119  1CF8  0020               	movlb	0	; select bank0
  9120  1CF9  00A0               	movwf	??_setRF_Initialization
  9121  1CFA  0820               	movf	??_setRF_Initialization,w
  9122  1CFB  0021               	movlb	1	; select bank1
  9123  1CFC  00D3               	movwf	_Tx_Length^(0+128)
  9124                           
  9125                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9126  1CFD  3005               	movlw	5
  9127  1CFE  00C1               	movwf	(_RF1^(0+128)+7)
  9128  1CFF  3000               	movlw	0
  9129  1D00  00C2               	movwf	(_RF1^(0+128)+8)
  9130  1D01  0008               	return
  9131  1D02                     __end_of_setRF_Initialization:	
  9132                           
  9133                           	psect	text44
  9134  1E23                     __ptext44:	
  9135 ;; *************** function _Mcu_Initialization *****************
  9136 ;; Defined at:
  9137 ;;		line 30 in file "../src/MCU_B1.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;		None
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;		None
  9142 ;; Return value:  Size  Location     Type
  9143 ;;		None               void
  9144 ;; Registers used:
  9145 ;;		wreg, status,2, status,0, pclath, cstack
  9146 ;; Tracked objects:
  9147 ;;		On entry : 0/0
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;Total ram usage:        0 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; Hardware stack levels required when called:    6
  9158 ;; This function calls:
  9159 ;;		_ADC_Set
  9160 ;;		_Fosc_Set
  9161 ;;		_IOC_Set
  9162 ;;		_IO_Set
  9163 ;;		_TMR1_Set
  9164 ;;		_WDT_Set
  9165 ;; This function is called by:
  9166 ;;		_main
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           
  9171                           ;psect for function _Mcu_Initialization
  9172  1E23                     _Mcu_Initialization:	
  9173                           
  9174                           ;MCU_B1.c: 32: Fosc_Set();
  9175                           
  9176                           ;incstack = 0
  9177                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9178  1E23  319C  2446  319E   	fcall	_Fosc_Set
  9179                           
  9180                           ;MCU_B1.c: 34: IO_Set();
  9181  1E26  319E  26E9  319E   	fcall	_IO_Set
  9182                           
  9183                           ;MCU_B1.c: 36: ;;
  9184                           ;MCU_B1.c: 38: TMR1_Set();
  9185  1E29  319D  2555  319E   	fcall	_TMR1_Set
  9186                           
  9187                           ;MCU_B1.c: 40: ADC_Set();
  9188  1E2C  319C  2461  319E   	fcall	_ADC_Set
  9189                           
  9190                           ;MCU_B1.c: 42: ;;
  9191                           ;MCU_B1.c: 44: ;;
  9192                           ;MCU_B1.c: 46: IOC_Set();
  9193  1E2F  319D  2549  319E   	fcall	_IOC_Set
  9194                           
  9195                           ;MCU_B1.c: 48: ;;
  9196                           ;MCU_B1.c: 50: ;;
  9197                           ;MCU_B1.c: 52: WDT_Set();
  9198  1E32  319C  24EC         	fcall	_WDT_Set
  9199  1E34  0008               	return
  9200  1E35                     __end_of_Mcu_Initialization:	
  9201                           
  9202                           	psect	text45
  9203  1CEC                     __ptext45:	
  9204 ;; *************** function _WDT_Set *****************
  9205 ;; Defined at:
  9206 ;;		line 1083 in file "../src/MCU_B1.c"
  9207 ;; Parameters:    Size  Location     Type
  9208 ;;		None
  9209 ;; Auto vars:     Size  Location     Type
  9210 ;;		None
  9211 ;; Return value:  Size  Location     Type
  9212 ;;		None               void
  9213 ;; Registers used:
  9214 ;;		wreg
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9224 ;;Total ram usage:        1 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; Hardware stack levels required when called:    5
  9227 ;; This function calls:
  9228 ;;		Nothing
  9229 ;; This function is called by:
  9230 ;;		_Mcu_Initialization
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           
  9235                           ;psect for function _WDT_Set
  9236  1CEC                     _WDT_Set:	
  9237                           
  9238                           ;MCU_B1.c: 1090: WDTCON = 0b00010111;;
  9239                           
  9240                           ;incstack = 0
  9241                           ; Regs used in _WDT_Set: [wreg]
  9242  1CEC  3017               	movlw	23
  9243  1CED  0021               	movlb	1	; select bank1
  9244  1CEE  0097               	movwf	23	;volatile
  9245                           
  9246                           ;MCU_B1.c: 1092: WDT.Enable = 1;
  9247  1CEF  1449               	bsf	_WDT^(0+128),0
  9248                           
  9249                           ;MCU_B1.c: 1093: WDT.Timer = 10;
  9250  1CF0  300A               	movlw	10
  9251  1CF1  0020               	movlb	0	; select bank0
  9252  1CF2  00A0               	movwf	??_WDT_Set
  9253  1CF3  0820               	movf	??_WDT_Set,w
  9254  1CF4  0021               	movlb	1	; select bank1
  9255  1CF5  00CA               	movwf	(_WDT^(0+128)+1)
  9256  1CF6  0008               	return
  9257  1CF7                     __end_of_WDT_Set:	
  9258                           
  9259                           	psect	text46
  9260  1D55                     __ptext46:	
  9261 ;; *************** function _TMR1_Set *****************
  9262 ;; Defined at:
  9263 ;;		line 199 in file "../src/MCU_B1.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;		None
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;		None
  9268 ;; Return value:  Size  Location     Type
  9269 ;;		None               void
  9270 ;; Registers used:
  9271 ;;		wreg
  9272 ;; Tracked objects:
  9273 ;;		On entry : 0/0
  9274 ;;		On exit  : 0/0
  9275 ;;		Unchanged: 0/0
  9276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;Total ram usage:        0 bytes
  9282 ;; Hardware stack levels used:    1
  9283 ;; Hardware stack levels required when called:    5
  9284 ;; This function calls:
  9285 ;;		Nothing
  9286 ;; This function is called by:
  9287 ;;		_Mcu_Initialization
  9288 ;; This function uses a non-reentrant model
  9289 ;;
  9290                           
  9291                           
  9292                           ;psect for function _TMR1_Set
  9293  1D55                     _TMR1_Set:	
  9294                           
  9295                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9296                           
  9297                           ;incstack = 0
  9298                           ; Regs used in _TMR1_Set: [wreg]
  9299  1D55  3041               	movlw	65
  9300  1D56  0020               	movlb	0	; select bank0
  9301  1D57  0098               	movwf	24	;volatile
  9302                           
  9303                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9304  1D58  30FA               	movlw	250
  9305  1D59  0097               	movwf	23	;volatile
  9306                           
  9307                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9308  1D5A  3038               	movlw	56
  9309  1D5B  0096               	movwf	22	;volatile
  9310                           
  9311                           ;MCU_B1.c: 203: TMR1IE = 1;
  9312  1D5C  0021               	movlb	1	; select bank1
  9313  1D5D  1411               	bsf	17,0	;volatile
  9314                           
  9315                           ;MCU_B1.c: 204: PEIE = 1;
  9316  1D5E  170B               	bsf	11,6	;volatile
  9317                           
  9318                           ;MCU_B1.c: 205: GIE = 1;
  9319  1D5F  178B               	bsf	11,7	;volatile
  9320  1D60  0008               	return
  9321  1D61                     __end_of_TMR1_Set:	
  9322                           
  9323                           	psect	text47
  9324  1EE9                     __ptext47:	
  9325 ;; *************** function _IO_Set *****************
  9326 ;; Defined at:
  9327 ;;		line 60 in file "../src/MCU_B1.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;		None
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;		None
  9332 ;; Return value:  Size  Location     Type
  9333 ;;		None               void
  9334 ;; Registers used:
  9335 ;;		wreg, status,2
  9336 ;; Tracked objects:
  9337 ;;		On entry : 0/0
  9338 ;;		On exit  : 0/0
  9339 ;;		Unchanged: 0/0
  9340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;Total ram usage:        0 bytes
  9346 ;; Hardware stack levels used:    1
  9347 ;; Hardware stack levels required when called:    5
  9348 ;; This function calls:
  9349 ;;		Nothing
  9350 ;; This function is called by:
  9351 ;;		_Mcu_Initialization
  9352 ;; This function uses a non-reentrant model
  9353 ;;
  9354                           
  9355                           
  9356                           ;psect for function _IO_Set
  9357  1EE9                     _IO_Set:	
  9358                           
  9359                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9360                           
  9361                           ;incstack = 0
  9362                           ; Regs used in _IO_Set: [wreg+status,2]
  9363  1EE9  30F7               	movlw	247
  9364  1EEA  0021               	movlb	1	; select bank1
  9365  1EEB  008C               	movwf	12	;volatile
  9366                           
  9367                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9368  1EEC  3004               	movlw	4
  9369  1EED  008D               	movwf	13	;volatile
  9370                           
  9371                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9372  1EEE  3026               	movlw	38
  9373  1EEF  008E               	movwf	14	;volatile
  9374                           
  9375                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9376  1EF0  0022               	movlb	2	; select bank2
  9377  1EF1  018C               	clrf	12	;volatile
  9378                           
  9379                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9380  1EF2  018D               	clrf	13	;volatile
  9381                           
  9382                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9383  1EF3  018E               	clrf	14	;volatile
  9384                           
  9385                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9386  1EF4  300E               	movlw	14
  9387  1EF5  0023               	movlb	3	; select bank3
  9388  1EF6  008C               	movwf	12	;volatile
  9389                           
  9390                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9391  1EF7  018D               	clrf	13	;volatile
  9392                           
  9393                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9394  1EF8  018E               	clrf	14	;volatile
  9395                           
  9396                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9397  1EF9  30F7               	movlw	247
  9398  1EFA  0020               	movlb	0	; select bank0
  9399  1EFB  008C               	movwf	12	;volatile
  9400                           
  9401                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9402  1EFC  3004               	movlw	4
  9403  1EFD  008D               	movwf	13	;volatile
  9404                           
  9405                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9406  1EFE  3026               	movlw	38
  9407  1EFF  008E               	movwf	14	;volatile
  9408  1F00  0008               	return
  9409  1F01                     __end_of_IO_Set:	
  9410                           
  9411                           	psect	text48
  9412  1D49                     __ptext48:	
  9413 ;; *************** function _IOC_Set *****************
  9414 ;; Defined at:
  9415 ;;		line 365 in file "../src/MCU_B1.c"
  9416 ;; Parameters:    Size  Location     Type
  9417 ;;		None
  9418 ;; Auto vars:     Size  Location     Type
  9419 ;;		None
  9420 ;; Return value:  Size  Location     Type
  9421 ;;		None               void
  9422 ;; Registers used:
  9423 ;;		wreg, status,2
  9424 ;; Tracked objects:
  9425 ;;		On entry : 0/0
  9426 ;;		On exit  : 0/0
  9427 ;;		Unchanged: 0/0
  9428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;Total ram usage:        0 bytes
  9434 ;; Hardware stack levels used:    1
  9435 ;; Hardware stack levels required when called:    5
  9436 ;; This function calls:
  9437 ;;		Nothing
  9438 ;; This function is called by:
  9439 ;;		_Mcu_Initialization
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           
  9444                           ;psect for function _IOC_Set
  9445  1D49                     _IOC_Set:	
  9446                           
  9447                           ;MCU_B1.c: 366: WPUB2 = 0;
  9448                           
  9449                           ;incstack = 0
  9450                           ; Regs used in _IOC_Set: [wreg+status,2]
  9451  1D49  0024               	movlb	4	; select bank4
  9452  1D4A  110D               	bcf	13,2	;volatile
  9453                           
  9454                           ;MCU_B1.c: 386: IOCBP = 0b00000100;
  9455  1D4B  3004               	movlw	4
  9456  1D4C  0027               	movlb	7	; select bank7
  9457  1D4D  0094               	movwf	20	;volatile
  9458                           
  9459                           ;MCU_B1.c: 387: IOCBN = 0b00000000;
  9460  1D4E  0195               	clrf	21	;volatile
  9461                           
  9462                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9463  1D4F  0196               	clrf	22	;volatile
  9464                           
  9465                           ;MCU_B1.c: 393: IOCIE = 1;
  9466  1D50  158B               	bsf	11,3	;volatile
  9467                           
  9468                           ;MCU_B1.c: 394: IOCIF = 0;
  9469  1D51  100B               	bcf	11,0	;volatile
  9470                           
  9471                           ;MCU_B1.c: 395: PEIE = 1;
  9472  1D52  170B               	bsf	11,6	;volatile
  9473                           
  9474                           ;MCU_B1.c: 396: GIE = 1;
  9475  1D53  178B               	bsf	11,7	;volatile
  9476  1D54  0008               	return
  9477  1D55                     __end_of_IOC_Set:	
  9478                           
  9479                           	psect	text49
  9480  1C46                     __ptext49:	
  9481 ;; *************** function _Fosc_Set *****************
  9482 ;; Defined at:
  9483 ;;		line 56 in file "../src/MCU_B1.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;		None
  9486 ;; Auto vars:     Size  Location     Type
  9487 ;;		None
  9488 ;; Return value:  Size  Location     Type
  9489 ;;		None               void
  9490 ;; Registers used:
  9491 ;;		wreg
  9492 ;; Tracked objects:
  9493 ;;		On entry : 0/0
  9494 ;;		On exit  : 0/0
  9495 ;;		Unchanged: 0/0
  9496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9501 ;;Total ram usage:        0 bytes
  9502 ;; Hardware stack levels used:    1
  9503 ;; Hardware stack levels required when called:    5
  9504 ;; This function calls:
  9505 ;;		Nothing
  9506 ;; This function is called by:
  9507 ;;		_Mcu_Initialization
  9508 ;; This function uses a non-reentrant model
  9509 ;;
  9510                           
  9511                           
  9512                           ;psect for function _Fosc_Set
  9513  1C46                     _Fosc_Set:	
  9514                           
  9515                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9516                           
  9517                           ;incstack = 0
  9518                           ; Regs used in _Fosc_Set: [wreg]
  9519  1C46  3078               	movlw	120
  9520  1C47  0021               	movlb	1	; select bank1
  9521  1C48  0099               	movwf	25	;volatile
  9522  1C49  0008               	return
  9523  1C4A                     __end_of_Fosc_Set:	
  9524                           
  9525                           	psect	text50
  9526  1C61                     __ptext50:	
  9527 ;; *************** function _ADC_Set *****************
  9528 ;; Defined at:
  9529 ;;		line 419 in file "../src/MCU_B1.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;		None
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;		None
  9534 ;; Return value:  Size  Location     Type
  9535 ;;		None               void
  9536 ;; Registers used:
  9537 ;;		wreg
  9538 ;; Tracked objects:
  9539 ;;		On entry : 0/0
  9540 ;;		On exit  : 0/0
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;Total ram usage:        0 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    5
  9550 ;; This function calls:
  9551 ;;		Nothing
  9552 ;; This function is called by:
  9553 ;;		_Mcu_Initialization
  9554 ;; This function uses a non-reentrant model
  9555 ;;
  9556                           
  9557                           
  9558                           ;psect for function _ADC_Set
  9559  1C61                     _ADC_Set:	
  9560                           
  9561                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9562                           
  9563                           ;incstack = 0
  9564                           ; Regs used in _ADC_Set: [wreg]
  9565  1C61  30F3               	movlw	243
  9566  1C62  0021               	movlb	1	; select bank1
  9567  1C63  009E               	movwf	30	;volatile
  9568                           
  9569                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  9570  1C64  30C1               	movlw	193
  9571  1C65  0022               	movlb	2	; select bank2
  9572  1C66  0097               	movwf	23	;volatile
  9573  1C67  0008               	return
  9574  1C68                     __end_of_ADC_Set:	
  9575                           
  9576                           	psect	text51
  9577  0041                     __ptext51:	
  9578 ;; *************** function _Load_Main *****************
  9579 ;; Defined at:
  9580 ;;		line 39 in file "../src/OverLoad_B1.c"
  9581 ;; Parameters:    Size  Location     Type
  9582 ;;		None
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;  i               2   12[BANK0 ] int 
  9585 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  9586 ;;  error           1   10[BANK0 ] unsigned char 
  9587 ;; Return value:  Size  Location     Type
  9588 ;;		None               void
  9589 ;; Registers used:
  9590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9591 ;; Tracked objects:
  9592 ;;		On entry : 0/0
  9593 ;;		On exit  : 0/0
  9594 ;;		Unchanged: 0/0
  9595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;Total ram usage:        6 bytes
  9601 ;; Hardware stack levels used:    1
  9602 ;; Hardware stack levels required when called:    7
  9603 ;; This function calls:
  9604 ;;		___lwdiv
  9605 ;;		___wmul
  9606 ;;		_getAll_DimmerLights_AdjSw
  9607 ;;		_getDimmer_LoadGO
  9608 ;;		_getDimmer_Load_Status
  9609 ;;		_getMain_All_Error_Status
  9610 ;;		_getMain_LightsStatus
  9611 ;;		_getMain_Lights_Count
  9612 ;;		_setLoad_AH_AL_Restore
  9613 ;; This function is called by:
  9614 ;;		_main
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           
  9619                           ;psect for function _Load_Main
  9620  0041                     _Load_Main:	
  9621                           
  9622                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9623                           
  9624                           ;incstack = 0
  9625                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9626  0041  3000               	movlw	0
  9627  0042  3192  226E  3180   	fcall	_getMain_All_Error_Status
  9628  0045  0020               	movlb	0	; select bank0
  9629  0046  00A8               	movwf	??_Load_Main
  9630  0047  0828               	movf	??_Load_Main,w
  9631  0048  00AA               	movwf	Load_Main@error
  9632                           
  9633                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9634  0049  01AB               	clrf	Load_Main@Load_Status
  9635                           
  9636                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9637  004A  0022               	movlb	2	; select bank2
  9638  004B  1C25               	btfss	_Load^(0+256),0
  9639  004C  29E7               	goto	l1564
  9640                           
  9641                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9642  004D  319C  24B6  3180   	fcall	_getMain_LightsStatus
  9643  0050  3800               	iorlw	0
  9644  0051  1D03               	skipz
  9645  0052  2855               	goto	l9972
  9646                           
  9647                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9648  0053  0022               	movlb	2	; select bank2
  9649  0054  2876               	goto	l9990
  9650  0055                     l9972:	
  9651                           ;OverLoad_B1.c: 66: } else {
  9652                           
  9653                           
  9654                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9655  0055  0020               	movlb	0	; select bank0
  9656  0056  08AA               	movf	Load_Main@error,f
  9657  0057  1D03               	skipz
  9658  0058  2873               	goto	l1567
  9659  0059  3191  21B4  3180   	fcall	_getAll_DimmerLights_AdjSw
  9660  005C  3800               	iorlw	0
  9661  005D  1D03               	skipz
  9662  005E  2873               	goto	l1567
  9663                           
  9664                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9665  005F  0022               	movlb	2	; select bank2
  9666  0060  14A5               	bsf	_Load^(0+256),1
  9667                           
  9668                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  9669  0061  319C  2477  3180   	fcall	_getDimmer_LoadGO
  9670  0064  3A01               	xorlw	1
  9671  0065  1D03               	skipz
  9672  0066  286E               	goto	l1568
  9673                           
  9674                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  9675  0067  0022               	movlb	2	; select bank2
  9676  0068  1DA5               	btfss	_Load^(0+256),3
  9677  0069  1BA5               	btfsc	_Load^(0+256),7
  9678  006A  2877               	goto	l1566
  9679                           
  9680                           ;OverLoad_B1.c: 74: Load.Run = 1;
  9681  006B  15A5               	bsf	_Load^(0+256),3
  9682                           
  9683                           ;OverLoad_B1.c: 75: Load.Count = 0;
  9684  006C  01CE               	clrf	(_Load^(0+256)+41)
  9685                           
  9686                           ;OverLoad_B1.c: 76: }
  9687                           ;OverLoad_B1.c: 77: } else {
  9688  006D  2877               	goto	l1566
  9689  006E                     l1568:	
  9690                           
  9691                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  9692  006E  0022               	movlb	2	; select bank2
  9693  006F  1FA5               	btfss	_Load^(0+256),7
  9694  0070  2877               	goto	l1566
  9695                           
  9696                           ;OverLoad_B1.c: 79: Load.OK = 0;
  9697  0071  13A5               	bcf	_Load^(0+256),7
  9698                           
  9699                           ;OverLoad_B1.c: 80: }
  9700                           ;OverLoad_B1.c: 81: }
  9701                           ;OverLoad_B1.c: 82: } else {
  9702  0072  2877               	goto	l1566
  9703  0073                     l1567:	
  9704                           
  9705                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  9706  0073  0022               	movlb	2	; select bank2
  9707  0074  1CA5               	btfss	_Load^(0+256),1
  9708  0075  2877               	goto	l1566
  9709  0076                     l9990:	
  9710                           
  9711                           ;OverLoad_B1.c: 84: Load.GO = 0;
  9712  0076  10A5               	bcf	_Load^(0+256),1
  9713  0077                     l1566:	
  9714                           
  9715                           ;OverLoad_B1.c: 85: }
  9716                           ;OverLoad_B1.c: 86: }
  9717                           ;OverLoad_B1.c: 88: }
  9718                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  9719  0077  1CA5               	btfss	_Load^(0+256),1
  9720  0078  29C3               	goto	l1574
  9721                           
  9722                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  9723  0079  1525               	bsf	_Load^(0+256),2
  9724                           
  9725                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  9726  007A  1E25               	btfss	_Load^(0+256),4
  9727  007B  29C1               	goto	l1575
  9728                           
  9729                           ;OverLoad_B1.c: 95: Load.Time++;
  9730  007C  3001               	movlw	1
  9731  007D  07A6               	addwf	(_Load^(0+256)+1),f
  9732  007E  3000               	movlw	0
  9733  007F  3DA7               	addwfc	((_Load+1)^(0+256)+1),f
  9734                           
  9735                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  9736  0080  3000               	movlw	0
  9737  0081  0227               	subwf	((_Load+1)^(0+256)+1),w
  9738  0082  3005               	movlw	5
  9739  0083  1903               	skipnz
  9740  0084  0226               	subwf	(_Load^(0+256)+1),w
  9741  0085  1C03               	skipc
  9742  0086  0008               	return
  9743                           
  9744                           ;OverLoad_B1.c: 97: Load.Time = 0;
  9745  0087  01A6               	clrf	(_Load^(0+256)+1)
  9746  0088  01A7               	clrf	((_Load+1)^(0+256)+1)
  9747                           
  9748                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  9749  0089  1225               	bcf	_Load^(0+256),4
  9750                           
  9751                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  9752  008A  3001               	movlw	1
  9753  008B  0020               	movlb	0	; select bank0
  9754  008C  00AC               	movwf	Load_Main@i
  9755  008D  3000               	movlw	0
  9756  008E  00AD               	movwf	Load_Main@i+1
  9757  008F  082D               	movf	Load_Main@i+1,w
  9758  0090  3A80               	xorlw	128
  9759  0091  00A8               	movwf	??_Load_Main
  9760  0092  3080               	movlw	128
  9761  0093  0228               	subwf	??_Load_Main,w
  9762  0094  1D03               	skipz
  9763  0095  2898               	goto	u11425
  9764  0096  3004               	movlw	4
  9765  0097  022C               	subwf	Load_Main@i,w
  9766  0098                     u11425:	
  9767  0098  1803               	btfsc	3,0
  9768  0099  28CC               	goto	l10012
  9769  009A                     l10006:	
  9770                           
  9771                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  9772  009A  0020               	movlb	0	; select bank0
  9773  009B  352C               	lslf	Load_Main@i,w
  9774  009C  3E30               	addlw	(_Load+11)& (0+255)
  9775  009D  0086               	movwf	6
  9776  009E  3001               	movlw	1	; select bank2/3
  9777  009F  0087               	movwf	7
  9778  00A0  3F40               	moviw [0]fsr1
  9779  00A1  00A8               	movwf	??_Load_Main
  9780  00A2  3F41               	moviw [1]fsr1
  9781  00A3  00A9               	movwf	??_Load_Main+1
  9782  00A4  0828               	movf	??_Load_Main,w
  9783  00A5  0022               	movlb	2	; select bank2
  9784  00A6  07AA               	addwf	(_Load^(0+256)+5),f
  9785  00A7  0020               	movlb	0	; select bank0
  9786  00A8  0829               	movf	??_Load_Main+1,w
  9787  00A9  0022               	movlb	2	; select bank2
  9788  00AA  3DAB               	addwfc	((_Load+1)^(0+256)+5),f
  9789                           
  9790                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  9791  00AB  0020               	movlb	0	; select bank0
  9792  00AC  352C               	lslf	Load_Main@i,w
  9793  00AD  3E3A               	addlw	(_Load+21)& (0+255)
  9794  00AE  0086               	movwf	6
  9795  00AF  3001               	movlw	1	; select bank2/3
  9796  00B0  0087               	movwf	7
  9797  00B1  3F40               	moviw [0]fsr1
  9798  00B2  00A8               	movwf	??_Load_Main
  9799  00B3  3F41               	moviw [1]fsr1
  9800  00B4  00A9               	movwf	??_Load_Main+1
  9801  00B5  0828               	movf	??_Load_Main,w
  9802  00B6  0022               	movlb	2	; select bank2
  9803  00B7  07AC               	addwf	(_Load^(0+256)+7),f
  9804  00B8  0020               	movlb	0	; select bank0
  9805  00B9  0829               	movf	??_Load_Main+1,w
  9806  00BA  0022               	movlb	2	; select bank2
  9807  00BB  3DAD               	addwfc	((_Load+1)^(0+256)+7),f
  9808  00BC  3001               	movlw	1
  9809  00BD  0020               	movlb	0	; select bank0
  9810  00BE  07AC               	addwf	Load_Main@i,f
  9811  00BF  3000               	movlw	0
  9812  00C0  3DAD               	addwfc	Load_Main@i+1,f
  9813  00C1  082D               	movf	Load_Main@i+1,w
  9814  00C2  3A80               	xorlw	128
  9815  00C3  00A8               	movwf	??_Load_Main
  9816  00C4  3080               	movlw	128
  9817  00C5  0228               	subwf	??_Load_Main,w
  9818  00C6  1D03               	skipz
  9819  00C7  28CA               	goto	u11435
  9820  00C8  3004               	movlw	4
  9821  00C9  022C               	subwf	Load_Main@i,w
  9822  00CA                     u11435:	
  9823  00CA  1C03               	skipc
  9824  00CB  289A               	goto	l10006
  9825  00CC                     l10012:	
  9826                           
  9827                           ;OverLoad_B1.c: 103: }
  9828                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  9829  00CC  3003               	movlw	3
  9830  00CD  0020               	movlb	0	; select bank0
  9831  00CE  00A0               	movwf	___lwdiv@divisor
  9832  00CF  3000               	movlw	0
  9833  00D0  00A1               	movwf	___lwdiv@divisor+1
  9834  00D1  0022               	movlb	2	; select bank2
  9835  00D2  082B               	movf	((_Load+1)^(0+256)+5),w
  9836  00D3  0020               	movlb	0	; select bank0
  9837  00D4  01A3               	clrf	___lwdiv@dividend+1
  9838  00D5  07A3               	addwf	___lwdiv@dividend+1,f
  9839  00D6  0022               	movlb	2	; select bank2
  9840  00D7  082A               	movf	(_Load^(0+256)+5),w
  9841  00D8  0020               	movlb	0	; select bank0
  9842  00D9  01A2               	clrf	___lwdiv@dividend
  9843  00DA  07A2               	addwf	___lwdiv@dividend,f
  9844  00DB  3193  23AB  3180   	fcall	___lwdiv
  9845  00DE  0020               	movlb	0	; select bank0
  9846  00DF  0821               	movf	?___lwdiv+1,w
  9847  00E0  0022               	movlb	2	; select bank2
  9848  00E1  01AB               	clrf	((_Load+1)^(0+256)+5)
  9849  00E2  07AB               	addwf	((_Load+1)^(0+256)+5),f
  9850  00E3  0020               	movlb	0	; select bank0
  9851  00E4  0820               	movf	?___lwdiv,w
  9852  00E5  0022               	movlb	2	; select bank2
  9853  00E6  01AA               	clrf	(_Load^(0+256)+5)
  9854  00E7  07AA               	addwf	(_Load^(0+256)+5),f
  9855                           
  9856                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  9857  00E8  3003               	movlw	3
  9858  00E9  0020               	movlb	0	; select bank0
  9859  00EA  00A0               	movwf	___lwdiv@divisor
  9860  00EB  3000               	movlw	0
  9861  00EC  00A1               	movwf	___lwdiv@divisor+1
  9862  00ED  0022               	movlb	2	; select bank2
  9863  00EE  082D               	movf	((_Load+1)^(0+256)+7),w
  9864  00EF  0020               	movlb	0	; select bank0
  9865  00F0  01A3               	clrf	___lwdiv@dividend+1
  9866  00F1  07A3               	addwf	___lwdiv@dividend+1,f
  9867  00F2  0022               	movlb	2	; select bank2
  9868  00F3  082C               	movf	(_Load^(0+256)+7),w
  9869  00F4  0020               	movlb	0	; select bank0
  9870  00F5  01A2               	clrf	___lwdiv@dividend
  9871  00F6  07A2               	addwf	___lwdiv@dividend,f
  9872  00F7  3193  23AB  3180   	fcall	___lwdiv
  9873  00FA  0020               	movlb	0	; select bank0
  9874  00FB  0821               	movf	?___lwdiv+1,w
  9875  00FC  0022               	movlb	2	; select bank2
  9876  00FD  01AD               	clrf	((_Load+1)^(0+256)+7)
  9877  00FE  07AD               	addwf	((_Load+1)^(0+256)+7),f
  9878  00FF  0020               	movlb	0	; select bank0
  9879  0100  0820               	movf	?___lwdiv,w
  9880  0101  0022               	movlb	2	; select bank2
  9881  0102  01AC               	clrf	(_Load^(0+256)+7)
  9882  0103  07AC               	addwf	(_Load^(0+256)+7),f
  9883                           
  9884                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  9885  0104  319F  276A  3180   	fcall	_setLoad_AH_AL_Restore
  9886                           
  9887                           ;OverLoad_B1.c: 108: if (Load.ADH > Load.ADL) {
  9888  0107  0022               	movlb	2	; select bank2
  9889  0108  082B               	movf	((_Load+1)^(0+256)+5),w
  9890  0109  022D               	subwf	((_Load+1)^(0+256)+7),w
  9891  010A  1D03               	skipz
  9892  010B  290E               	goto	u11445
  9893  010C  082A               	movf	(_Load^(0+256)+5),w
  9894  010D  022C               	subwf	(_Load^(0+256)+7),w
  9895  010E                     u11445:	
  9896  010E  1803               	skipnc
  9897  010F  0008               	return
  9898                           
  9899                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  9900  0110  3005               	movlw	5
  9901  0111  3E25               	addlw	_Load& (0+255)
  9902  0112  0086               	movwf	6
  9903  0113  3001               	movlw	1	; select bank2/3
  9904  0114  0087               	movwf	7
  9905  0115  092C               	comf	(_Load^(0+256)+7),w
  9906  0116  0020               	movlb	0	; select bank0
  9907  0117  00A8               	movwf	??_Load_Main
  9908  0118  0022               	movlb	2	; select bank2
  9909  0119  092D               	comf	((_Load+1)^(0+256)+7),w
  9910  011A  0020               	movlb	0	; select bank0
  9911  011B  00A9               	movwf	??_Load_Main+1
  9912  011C  0AA8               	incf	??_Load_Main,f
  9913  011D  1903               	skipnz
  9914  011E  0AA9               	incf	??_Load_Main+1,f
  9915  011F  3F40               	moviw [0]fsr1
  9916  0120  0728               	addwf	??_Load_Main,w
  9917  0121  0022               	movlb	2	; select bank2
  9918  0122  00C4               	movwf	(_Load^(0+256)+31)
  9919  0123  3F41               	moviw [1]fsr1
  9920  0124  0020               	movlb	0	; select bank0
  9921  0125  3D29               	addwfc	??_Load_Main+1,w
  9922  0126  0022               	movlb	2	; select bank2
  9923  0127  00C5               	movwf	(_Load^(0+256)+32)
  9924                           
  9925                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  9926  0128  01AA               	clrf	(_Load^(0+256)+5)
  9927  0129  01AB               	clrf	((_Load+1)^(0+256)+5)
  9928                           
  9929                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  9930  012A  01AC               	clrf	(_Load^(0+256)+7)
  9931  012B  01AD               	clrf	((_Load+1)^(0+256)+7)
  9932                           
  9933                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  9934  012C  1DA5               	btfss	_Load^(0+256),3
  9935  012D  298D               	goto	l10052
  9936                           
  9937                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  9938  012E  3002               	movlw	2
  9939  012F  024E               	subwf	(_Load^(0+256)+41),w
  9940  0130  1803               	skipnc
  9941  0131  298D               	goto	l10052
  9942                           
  9943                           ;OverLoad_B1.c: 115: Load.Count++;
  9944  0132  3001               	movlw	1
  9945  0133  0020               	movlb	0	; select bank0
  9946  0134  00A8               	movwf	??_Load_Main
  9947  0135  0828               	movf	??_Load_Main,w
  9948  0136  0022               	movlb	2	; select bank2
  9949  0137  07CE               	addwf	(_Load^(0+256)+41),f
  9950                           
  9951                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
  9952  0138  319C  247F  3180   	fcall	_getDimmer_Load_Status
  9953  013B  0020               	movlb	0	; select bank0
  9954  013C  00A8               	movwf	??_Load_Main
  9955  013D  0828               	movf	??_Load_Main,w
  9956  013E  00AB               	movwf	Load_Main@Load_Status
  9957                           
  9958                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
  9959  013F  319D  253D  3180   	fcall	_getMain_Lights_Count
  9960  0142  0020               	movlb	0	; select bank0
  9961  0143  00A8               	movwf	??_Load_Main
  9962  0144  0828               	movf	??_Load_Main,w
  9963  0145  0022               	movlb	2	; select bank2
  9964  0146  00D1               	movwf	(_Load^(0+256)+44)
  9965                           
  9966                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
  9967  0147  084E               	movf	(_Load^(0+256)+41),w
  9968  0148  3A01               	xorlw	1
  9969  0149  1D03               	skipz
  9970  014A  2955               	goto	l10038
  9971                           
  9972                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
  9973  014B  3002               	movlw	2
  9974  014C  0020               	movlb	0	; select bank0
  9975  014D  00A8               	movwf	??_Load_Main
  9976  014E  0828               	movf	??_Load_Main,w
  9977  014F  0022               	movlb	2	; select bank2
  9978  0150  00D0               	movwf	(_Load^(0+256)+43)
  9979                           
  9980                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*57);
  9981  0151  3074               	movlw	116
  9982  0152  00CA               	movwf	(_Load^(0+256)+37)
  9983  0153  3004               	movlw	4
  9984  0154  2960               	goto	L3
  9985  0155                     l10038:	
  9986                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
  9987                           
  9988  0155  084E               	movf	(_Load^(0+256)+41),w
  9989  0156  3A02               	xorlw	2
  9990  0157  1D03               	skipz
  9991  0158  298D               	goto	l10052
  9992                           
  9993                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
  9994  0159  0851               	movf	(_Load^(0+256)+44),w
  9995  015A  3A01               	xorlw	1
  9996  015B  1D03               	skipz
  9997  015C  2962               	goto	l10044
  9998                           
  9999                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.6*57);
 10000  015D  305B               	movlw	91
 10001  015E  00CA               	movwf	(_Load^(0+256)+37)
 10002  015F  3000               	movlw	0
 10003  0160                     L3:	
 10004  0160  00CB               	movwf	(_Load^(0+256)+38)
 10005                           
 10006                           ;OverLoad_B1.c: 124: } else {
 10007  0161  298D               	goto	l10052
 10008  0162                     l10044:	
 10009                           
 10010                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 10011  0162  0020               	movlb	0	; select bank0
 10012  0163  08AB               	movf	Load_Main@Load_Status,f
 10013  0164  1D03               	skipz
 10014  0165  2981               	goto	l10048
 10015                           
 10016                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.6*57) * Load.LightsCount;
 10017  0166  0022               	movlb	2	; select bank2
 10018  0167  0851               	movf	(_Load^(0+256)+44),w
 10019  0168  0020               	movlb	0	; select bank0
 10020  0169  00A8               	movwf	??_Load_Main
 10021  016A  01A9               	clrf	??_Load_Main+1
 10022  016B  0828               	movf	??_Load_Main,w
 10023  016C  00A0               	movwf	___wmul@multiplier
 10024  016D  0829               	movf	??_Load_Main+1,w
 10025  016E  00A1               	movwf	___wmul@multiplier+1
 10026  016F  305B               	movlw	91
 10027  0170  00A2               	movwf	___wmul@multiplicand
 10028  0171  3000               	movlw	0
 10029  0172  00A3               	movwf	___wmul@multiplicand+1
 10030  0173  319F  27A3  3180   	fcall	___wmul
 10031  0176  0020               	movlb	0	; select bank0
 10032  0177  0821               	movf	?___wmul+1,w
 10033  0178  0022               	movlb	2	; select bank2
 10034  0179  01CB               	clrf	((_Load+1)^(0+256)+37)
 10035  017A  07CB               	addwf	((_Load+1)^(0+256)+37),f
 10036  017B  0020               	movlb	0	; select bank0
 10037  017C  0820               	movf	?___wmul,w
 10038  017D  0022               	movlb	2	; select bank2
 10039  017E  01CA               	clrf	(_Load^(0+256)+37)
 10040  017F  07CA               	addwf	(_Load^(0+256)+37),f
 10041                           
 10042                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10043  0180  298D               	goto	l10052
 10044  0181                     l10048:	
 10045  0181  0020               	movlb	0	; select bank0
 10046  0182  082B               	movf	Load_Main@Load_Status,w
 10047  0183  3A01               	xorlw	1
 10048  0184  1D03               	skipz
 10049  0185  298D               	goto	l10052
 10050                           
 10051                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.6*57) + Load.TotalLoad;
 10052  0186  0022               	movlb	2	; select bank2
 10053  0187  082E               	movf	(_Load^(0+256)+9),w
 10054  0188  3E5B               	addlw	91
 10055  0189  00CA               	movwf	(_Load^(0+256)+37)
 10056  018A  3000               	movlw	0
 10057  018B  3D2F               	addwfc	((_Load+1)^(0+256)+9),w
 10058  018C  00CB               	movwf	((_Load+1)^(0+256)+37)
 10059  018D                     l10052:	
 10060                           
 10061                           ;OverLoad_B1.c: 129: }
 10062                           ;OverLoad_B1.c: 130: }
 10063                           ;OverLoad_B1.c: 131: }
 10064                           ;OverLoad_B1.c: 132: }
 10065                           ;OverLoad_B1.c: 133: }
 10066                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10067  018D  0022               	movlb	2	; select bank2
 10068  018E  084B               	movf	((_Load+1)^(0+256)+37),w
 10069  018F  0245               	subwf	((_Load+1)^(0+256)+31),w
 10070  0190  1D03               	skipz
 10071  0191  2994               	goto	u11525
 10072  0192  084A               	movf	(_Load^(0+256)+37),w
 10073  0193  0244               	subwf	(_Load^(0+256)+31),w
 10074  0194                     u11525:	
 10075  0194  1C03               	skipc
 10076  0195  29A3               	goto	l10062
 10077                           
 10078                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10079  0196  3001               	movlw	1
 10080  0197  0020               	movlb	0	; select bank0
 10081  0198  00A8               	movwf	??_Load_Main
 10082  0199  0828               	movf	??_Load_Main,w
 10083  019A  0022               	movlb	2	; select bank2
 10084  019B  07CF               	addwf	(_Load^(0+256)+42),f
 10085                           
 10086                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10087  019C  084F               	movf	(_Load^(0+256)+42),w
 10088  019D  0250               	subwf	(_Load^(0+256)+43),w
 10089  019E  1803               	skipnc
 10090  019F  0008               	return
 10091                           
 10092                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10093  01A0  01CF               	clrf	(_Load^(0+256)+42)
 10094                           
 10095                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10096  01A1  16A5               	bsf	_Load^(0+256),5
 10097                           
 10098                           ;OverLoad_B1.c: 161: }
 10099                           ;OverLoad_B1.c: 162: } else {
 10100  01A2  0008               	return
 10101  01A3                     l10062:	
 10102                           
 10103                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 10104  01A3  01CF               	clrf	(_Load^(0+256)+42)
 10105                           
 10106                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 10107  01A4  1DA5               	btfss	_Load^(0+256),3
 10108  01A5  0008               	return
 10109                           
 10110                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10111  01A6  3001               	movlw	1
 10112  01A7  0020               	movlb	0	; select bank0
 10113  01A8  00A8               	movwf	??_Load_Main
 10114  01A9  0828               	movf	??_Load_Main,w
 10115  01AA  0022               	movlb	2	; select bank2
 10116  01AB  07D2               	addwf	(_Load^(0+256)+45),f
 10117                           
 10118                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10119  01AC  3003               	movlw	3
 10120  01AD  0252               	subwf	(_Load^(0+256)+45),w
 10121  01AE  1C03               	skipc
 10122  01AF  0008               	return
 10123                           
 10124                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10125  01B0  01D2               	clrf	(_Load^(0+256)+45)
 10126                           
 10127                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10128  01B1  17A5               	bsf	_Load^(0+256),7
 10129                           
 10130                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10131  01B2  11A5               	bcf	_Load^(0+256),3
 10132                           
 10133                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10134  01B3  01CE               	clrf	(_Load^(0+256)+41)
 10135                           
 10136                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 10137  01B4  0845               	movf	((_Load+1)^(0+256)+31),w
 10138  01B5  01AF               	clrf	((_Load+1)^(0+256)+9)
 10139  01B6  07AF               	addwf	((_Load+1)^(0+256)+9),f
 10140  01B7  0844               	movf	(_Load^(0+256)+31),w
 10141  01B8  01AE               	clrf	(_Load^(0+256)+9)
 10142  01B9  07AE               	addwf	(_Load^(0+256)+9),f
 10143                           
 10144                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 10145  01BA  3003               	movlw	3
 10146  01BB  0020               	movlb	0	; select bank0
 10147  01BC  00A8               	movwf	??_Load_Main
 10148  01BD  0828               	movf	??_Load_Main,w
 10149  01BE  0022               	movlb	2	; select bank2
 10150  01BF  00D0               	movwf	(_Load^(0+256)+43)
 10151                           
 10152                           ;OverLoad_B1.c: 176: }
 10153                           ;OverLoad_B1.c: 177: }
 10154                           ;OverLoad_B1.c: 200: }
 10155                           ;OverLoad_B1.c: 201: }
 10156                           ;OverLoad_B1.c: 202: }
 10157                           ;OverLoad_B1.c: 203: } else {
 10158  01C0  0008               	return
 10159  01C1                     l1575:	
 10160                           
 10161                           ;OverLoad_B1.c: 204: Load.ADtoGO = 1;
 10162  01C1  1625               	bsf	_Load^(0+256),4
 10163                           
 10164                           ;OverLoad_B1.c: 205: }
 10165                           ;OverLoad_B1.c: 206: } else {
 10166  01C2  0008               	return
 10167  01C3                     l1574:	
 10168                           
 10169                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 10170  01C3  1D25               	btfss	_Load^(0+256),2
 10171  01C4  29D6               	goto	l10100
 10172                           
 10173                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 10174  01C5  1125               	bcf	_Load^(0+256),2
 10175                           
 10176                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 10177  01C6  1225               	bcf	_Load^(0+256),4
 10178                           
 10179                           ;OverLoad_B1.c: 211: Load.Time = 0;
 10180  01C7  01A6               	clrf	(_Load^(0+256)+1)
 10181  01C8  01A7               	clrf	((_Load+1)^(0+256)+1)
 10182                           
 10183                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 10184  01C9  319F  276A  3180   	fcall	_setLoad_AH_AL_Restore
 10185                           
 10186                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 10187  01CC  0022               	movlb	2	; select bank2
 10188  01CD  01CF               	clrf	(_Load^(0+256)+42)
 10189                           
 10190                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 10191  01CE  01D2               	clrf	(_Load^(0+256)+45)
 10192                           
 10193                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 10194  01CF  01AA               	clrf	(_Load^(0+256)+5)
 10195  01D0  01AB               	clrf	((_Load+1)^(0+256)+5)
 10196                           
 10197                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 10198  01D1  01AC               	clrf	(_Load^(0+256)+7)
 10199  01D2  01AD               	clrf	((_Load+1)^(0+256)+7)
 10200                           
 10201                           ;OverLoad_B1.c: 224: Load.Run = 0;
 10202  01D3  11A5               	bcf	_Load^(0+256),3
 10203                           
 10204                           ;OverLoad_B1.c: 225: Load.Count = 0;
 10205  01D4  01CE               	clrf	(_Load^(0+256)+41)
 10206                           
 10207                           ;OverLoad_B1.c: 226: Load.OK = 0;
 10208  01D5  13A5               	bcf	_Load^(0+256),7
 10209  01D6                     l10100:	
 10210                           
 10211                           ;OverLoad_B1.c: 248: }
 10212                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 10213  01D6  1EA5               	btfss	_Load^(0+256),5
 10214  01D7  0008               	return
 10215                           
 10216                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 10217  01D8  3001               	movlw	1
 10218  01D9  07A8               	addwf	(_Load^(0+256)+3),f
 10219  01DA  3000               	movlw	0
 10220  01DB  3DA9               	addwfc	((_Load+1)^(0+256)+3),f
 10221                           
 10222                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
 10223  01DC  3003               	movlw	3
 10224  01DD  0229               	subwf	((_Load+1)^(0+256)+3),w
 10225  01DE  30E8               	movlw	232
 10226  01DF  1903               	skipnz
 10227  01E0  0228               	subwf	(_Load^(0+256)+3),w
 10228  01E1  1C03               	skipc
 10229  01E2  0008               	return
 10230                           
 10231                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 10232  01E3  01A8               	clrf	(_Load^(0+256)+3)
 10233  01E4  01A9               	clrf	((_Load+1)^(0+256)+3)
 10234                           
 10235                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 10236  01E5  12A5               	bcf	_Load^(0+256),5
 10237                           
 10238                           ;OverLoad_B1.c: 254: }
 10239                           ;OverLoad_B1.c: 255: }
 10240                           ;OverLoad_B1.c: 256: }
 10241                           ;OverLoad_B1.c: 257: } else {
 10242  01E6  0008               	return
 10243  01E7                     l1564:	
 10244                           
 10245                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 10246  01E7  0021               	movlb	1	; select bank1
 10247  01E8  1C20               	btfss	_myMain^(0+128),0
 10248  01E9  0008               	return
 10249                           
 10250                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 10251  01EA  0022               	movlb	2	; select bank2
 10252  01EB  1425               	bsf	_Load^(0+256),0
 10253  01EC  0008               	return
 10254  01ED                     __end_of_Load_Main:	
 10255                           
 10256                           	psect	text52
 10257  1D3D                     __ptext52:	
 10258 ;; *************** function _getMain_Lights_Count *****************
 10259 ;; Defined at:
 10260 ;;		line 467 in file "../src/Main_B1.c"
 10261 ;; Parameters:    Size  Location     Type
 10262 ;;		None
 10263 ;; Auto vars:     Size  Location     Type
 10264 ;;  status1         1    1[BANK0 ] unsigned char 
 10265 ;;  count           1    0[BANK0 ] unsigned char 
 10266 ;; Return value:  Size  Location     Type
 10267 ;;                  1    wreg      unsigned char 
 10268 ;; Registers used:
 10269 ;;		wreg, status,2
 10270 ;; Tracked objects:
 10271 ;;		On entry : 0/0
 10272 ;;		On exit  : 0/0
 10273 ;;		Unchanged: 0/0
 10274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;Total ram usage:        2 bytes
 10280 ;; Hardware stack levels used:    1
 10281 ;; Hardware stack levels required when called:    5
 10282 ;; This function calls:
 10283 ;;		Nothing
 10284 ;; This function is called by:
 10285 ;;		_Load_Main
 10286 ;; This function uses a non-reentrant model
 10287 ;;
 10288                           
 10289                           
 10290                           ;psect for function _getMain_Lights_Count
 10291  1D3D                     _getMain_Lights_Count:	
 10292                           
 10293                           ;Main_B1.c: 468: char count = 0;
 10294                           
 10295                           ;incstack = 0
 10296                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 10297  1D3D  0020               	movlb	0	; select bank0
 10298  1D3E  01A0               	clrf	getMain_Lights_Count@count
 10299                           
 10300                           ;Main_B1.c: 472: char status1 = 0;
 10301  1D3F  01A1               	clrf	getMain_Lights_Count@status1
 10302                           
 10303                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10304  1D40  3000               	movlw	0
 10305  1D41  0022               	movlb	2	; select bank2
 10306  1D42  1954               	btfsc	(_DimmerLights1^(0+256)+1),2	;volatile
 10307  1D43  3001               	movlw	1
 10308  1D44  0020               	movlb	0	; select bank0
 10309  1D45  00A1               	movwf	getMain_Lights_Count@status1
 10310                           
 10311                           ;Main_B1.c: 498: return count = status1;
 10312  1D46  0821               	movf	getMain_Lights_Count@status1,w
 10313  1D47  00A0               	movwf	getMain_Lights_Count@count
 10314  1D48  0008               	return
 10315  1D49                     __end_of_getMain_Lights_Count:	
 10316                           
 10317                           	psect	text53
 10318  1C7F                     __ptext53:	
 10319 ;; *************** function _getDimmer_Load_Status *****************
 10320 ;; Defined at:
 10321 ;;		line 888 in file "../src/Dimmer_B1.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;		None
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;  status          1    0[BANK0 ] unsigned char 
 10326 ;; Return value:  Size  Location     Type
 10327 ;;                  1    wreg      unsigned char 
 10328 ;; Registers used:
 10329 ;;		wreg, status,2
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/0
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;Total ram usage:        1 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; Hardware stack levels required when called:    5
 10342 ;; This function calls:
 10343 ;;		Nothing
 10344 ;; This function is called by:
 10345 ;;		_Load_Main
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           
 10350                           ;psect for function _getDimmer_Load_Status
 10351  1C7F                     _getDimmer_Load_Status:	
 10352                           
 10353                           ;Dimmer_B1.c: 889: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10354                           
 10355                           ;incstack = 0
 10356                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10357  1C7F  3000               	movlw	0
 10358  1C80  0021               	movlb	1	; select bank1
 10359  1C81  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10360  1C82  3001               	movlw	1
 10361  1C83  0020               	movlb	0	; select bank0
 10362  1C84  00A0               	movwf	getDimmer_Load_Status@status
 10363                           
 10364                           ;Dimmer_B1.c: 890: return status;
 10365  1C85  0820               	movf	getDimmer_Load_Status@status,w
 10366  1C86  0008               	return
 10367  1C87                     __end_of_getDimmer_Load_Status:	
 10368                           
 10369                           	psect	text54
 10370  1C77                     __ptext54:	
 10371 ;; *************** function _getDimmer_LoadGO *****************
 10372 ;; Defined at:
 10373 ;;		line 623 in file "../src/Dimmer_B1.c"
 10374 ;; Parameters:    Size  Location     Type
 10375 ;;		None
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10378 ;; Return value:  Size  Location     Type
 10379 ;;                  1    wreg      unsigned char 
 10380 ;; Registers used:
 10381 ;;		wreg, status,2
 10382 ;; Tracked objects:
 10383 ;;		On entry : 0/0
 10384 ;;		On exit  : 0/0
 10385 ;;		Unchanged: 0/0
 10386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;Total ram usage:        1 bytes
 10392 ;; Hardware stack levels used:    1
 10393 ;; Hardware stack levels required when called:    5
 10394 ;; This function calls:
 10395 ;;		Nothing
 10396 ;; This function is called by:
 10397 ;;		_Load_Main
 10398 ;; This function uses a non-reentrant model
 10399 ;;
 10400                           
 10401                           
 10402                           ;psect for function _getDimmer_LoadGO
 10403  1C77                     _getDimmer_LoadGO:	
 10404                           
 10405                           ;Dimmer_B1.c: 624: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10406                           
 10407                           ;incstack = 0
 10408                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10409  1C77  3000               	movlw	0
 10410  1C78  0021               	movlb	1	; select bank1
 10411  1C79  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10412  1C7A  3001               	movlw	1
 10413  1C7B  0020               	movlb	0	; select bank0
 10414  1C7C  00A0               	movwf	getDimmer_LoadGO@loadgo
 10415                           
 10416                           ;Dimmer_B1.c: 625: return loadgo;
 10417  1C7D  0820               	movf	getDimmer_LoadGO@loadgo,w
 10418  1C7E  0008               	return
 10419  1C7F                     __end_of_getDimmer_LoadGO:	
 10420                           
 10421                           	psect	text55
 10422  11B4                     __ptext55:	
 10423 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10424 ;; Defined at:
 10425 ;;		line 832 in file "../src/Dimmer_B1.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;		None
 10428 ;; Auto vars:     Size  Location     Type
 10429 ;;  i               2    4[BANK0 ] int 
 10430 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10431 ;;  count           1    3[BANK0 ] unsigned char 
 10432 ;; Return value:  Size  Location     Type
 10433 ;;                  1    wreg      unsigned char 
 10434 ;; Registers used:
 10435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10436 ;; Tracked objects:
 10437 ;;		On entry : 0/0
 10438 ;;		On exit  : 0/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;Total ram usage:        5 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; Hardware stack levels required when called:    6
 10448 ;; This function calls:
 10449 ;;		_DimmerLightsPointSelect
 10450 ;; This function is called by:
 10451 ;;		_Load_Main
 10452 ;; This function uses a non-reentrant model
 10453 ;;
 10454                           
 10455                           
 10456                           ;psect for function _getAll_DimmerLights_AdjSw
 10457  11B4                     _getAll_DimmerLights_AdjSw:	
 10458                           
 10459                           ;Dimmer_B1.c: 833: char count = 1;
 10460                           
 10461                           ;incstack = 0
 10462                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10463  11B4  0020               	movlb	0	; select bank0
 10464  11B5  01A3               	clrf	getAll_DimmerLights_AdjSw@count
 10465  11B6  0AA3               	incf	getAll_DimmerLights_AdjSw@count,f
 10466                           
 10467                           ;Dimmer_B1.c: 834: char adjsw = 0;
 10468  11B7  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10469                           
 10470                           ;Dimmer_B1.c: 836: for (int i = 0; i < count; i++) {
 10471  11B8  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10472  11B9  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10473  11BA                     l9298:	
 10474  11BA  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10475  11BB  3A80               	xorlw	128
 10476  11BC  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10477  11BD  3080               	movlw	128
 10478  11BE  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10479  11BF  1D03               	skipz
 10480  11C0  29C3               	goto	u10185
 10481  11C1  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10482  11C2  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10483  11C3                     u10185:	
 10484  11C3  1803               	btfsc	3,0
 10485  11C4  29DC               	goto	l9300
 10486                           
 10487                           ;Dimmer_B1.c: 837: DimmerLightsPointSelect(i + 1);
 10488  11C5  0020               	movlb	0	; select bank0
 10489  11C6  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10490  11C7  3E01               	addlw	1
 10491  11C8  319C  24D6  3191   	fcall	_DimmerLightsPointSelect
 10492                           
 10493                           ;Dimmer_B1.c: 838: if (adjsw == 0) {
 10494  11CB  0020               	movlb	0	; select bank0
 10495  11CC  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10496  11CD  1D03               	skipz
 10497  11CE  29D7               	goto	l9296
 10498                           
 10499                           ;Dimmer_B1.c: 839: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10500  11CF  0A6F               	incf	_DimmerLights,w
 10501  11D0  0086               	movwf	6
 10502  11D1  3001               	movlw	1	; select bank2/3
 10503  11D2  0087               	movwf	7
 10504  11D3  3000               	movlw	0
 10505  11D4  1B01               	btfsc	1,6
 10506  11D5  3001               	movlw	1
 10507  11D6  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10508  11D7                     l9296:	
 10509  11D7  3001               	movlw	1
 10510  11D8  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10511  11D9  3000               	movlw	0
 10512  11DA  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10513  11DB  29BA               	goto	l9298
 10514  11DC                     l9300:	
 10515                           
 10516                           ;Dimmer_B1.c: 840: }
 10517                           ;Dimmer_B1.c: 841: }
 10518                           ;Dimmer_B1.c: 842: return adjsw;
 10519  11DC  0020               	movlb	0	; select bank0
 10520  11DD  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10521  11DE  0008               	return
 10522  11DF                     __end_of_getAll_DimmerLights_AdjSw:	
 10523                           
 10524                           	psect	text56
 10525  1FA3                     __ptext56:	
 10526 ;; *************** function ___wmul *****************
 10527 ;; Defined at:
 10528 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10529 ;; Parameters:    Size  Location     Type
 10530 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10531 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10532 ;; Auto vars:     Size  Location     Type
 10533 ;;  product         2    4[BANK0 ] unsigned int 
 10534 ;; Return value:  Size  Location     Type
 10535 ;;                  2    0[BANK0 ] unsigned int 
 10536 ;; Registers used:
 10537 ;;		wreg, status,2, status,0
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10543 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;Total ram usage:        6 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; Hardware stack levels required when called:    5
 10550 ;; This function calls:
 10551 ;;		Nothing
 10552 ;; This function is called by:
 10553 ;;		_Load_Main
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           
 10558                           ;psect for function ___wmul
 10559  1FA3                     ___wmul:	
 10560                           
 10561                           ;incstack = 0
 10562                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10563  1FA3  0020               	movlb	0	; select bank0
 10564  1FA4  01A4               	clrf	___wmul@product
 10565  1FA5  01A5               	clrf	___wmul@product+1
 10566  1FA6                     l9676:	
 10567  1FA6  1C20               	btfss	___wmul@multiplier,0
 10568  1FA7  2FAC               	goto	l2589
 10569  1FA8  0822               	movf	___wmul@multiplicand,w
 10570  1FA9  07A4               	addwf	___wmul@product,f
 10571  1FAA  0823               	movf	___wmul@multiplicand+1,w
 10572  1FAB  3DA5               	addwfc	___wmul@product+1,f
 10573  1FAC                     l2589:	
 10574  1FAC  3001               	movlw	1
 10575  1FAD                     u10805:	
 10576  1FAD  35A2               	lslf	___wmul@multiplicand,f
 10577  1FAE  0DA3               	rlf	___wmul@multiplicand+1,f
 10578  1FAF  0B89               	decfsz	9,f
 10579  1FB0  2FAD               	goto	u10805
 10580  1FB1  3001               	movlw	1
 10581  1FB2                     u10815:	
 10582  1FB2  36A1               	lsrf	___wmul@multiplier+1,f
 10583  1FB3  0CA0               	rrf	___wmul@multiplier,f
 10584  1FB4  0B89               	decfsz	9,f
 10585  1FB5  2FB2               	goto	u10815
 10586  1FB6  0821               	movf	___wmul@multiplier+1,w
 10587  1FB7  0420               	iorwf	___wmul@multiplier,w
 10588  1FB8  1D03               	skipz
 10589  1FB9  2FA6               	goto	l9676
 10590  1FBA  0825               	movf	___wmul@product+1,w
 10591  1FBB  01A1               	clrf	?___wmul+1
 10592  1FBC  07A1               	addwf	?___wmul+1,f
 10593  1FBD  0824               	movf	___wmul@product,w
 10594  1FBE  01A0               	clrf	?___wmul
 10595  1FBF  07A0               	addwf	?___wmul,f
 10596  1FC0  0008               	return
 10597  1FC1                     __end_of___wmul:	
 10598                           
 10599                           	psect	text57
 10600  13AB                     __ptext57:	
 10601 ;; *************** function ___lwdiv *****************
 10602 ;; Defined at:
 10603 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10604 ;; Parameters:    Size  Location     Type
 10605 ;;  divisor         2    0[BANK0 ] unsigned int 
 10606 ;;  dividend        2    2[BANK0 ] unsigned int 
 10607 ;; Auto vars:     Size  Location     Type
 10608 ;;  quotient        2    6[BANK0 ] unsigned int 
 10609 ;;  counter         1    5[BANK0 ] unsigned char 
 10610 ;; Return value:  Size  Location     Type
 10611 ;;                  2    0[BANK0 ] unsigned int 
 10612 ;; Registers used:
 10613 ;;		wreg, status,2, status,0
 10614 ;; Tracked objects:
 10615 ;;		On entry : 0/0
 10616 ;;		On exit  : 0/0
 10617 ;;		Unchanged: 0/0
 10618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10619 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10620 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10621 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10622 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10623 ;;Total ram usage:        8 bytes
 10624 ;; Hardware stack levels used:    1
 10625 ;; Hardware stack levels required when called:    5
 10626 ;; This function calls:
 10627 ;;		Nothing
 10628 ;; This function is called by:
 10629 ;;		_Load_Main
 10630 ;; This function uses a non-reentrant model
 10631 ;;
 10632                           
 10633                           
 10634                           ;psect for function ___lwdiv
 10635  13AB                     ___lwdiv:	
 10636                           
 10637                           ;incstack = 0
 10638                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10639  13AB  0020               	movlb	0	; select bank0
 10640  13AC  01A6               	clrf	___lwdiv@quotient
 10641  13AD  01A7               	clrf	___lwdiv@quotient+1
 10642  13AE  0821               	movf	___lwdiv@divisor+1,w
 10643  13AF  0420               	iorwf	___lwdiv@divisor,w
 10644  13B0  1903               	skipnz
 10645  13B1  2BDB               	goto	l9708
 10646  13B2  01A5               	clrf	___lwdiv@counter
 10647  13B3  0AA5               	incf	___lwdiv@counter,f
 10648  13B4                     l9696:	
 10649  13B4  1BA1               	btfsc	___lwdiv@divisor+1,7
 10650  13B5  2BC0               	goto	l9698
 10651  13B6  3001               	movlw	1
 10652  13B7                     u10845:	
 10653  13B7  35A0               	lslf	___lwdiv@divisor,f
 10654  13B8  0DA1               	rlf	___lwdiv@divisor+1,f
 10655  13B9  0B89               	decfsz	9,f
 10656  13BA  2BB7               	goto	u10845
 10657  13BB  3001               	movlw	1
 10658  13BC  00A4               	movwf	??___lwdiv
 10659  13BD  0824               	movf	??___lwdiv,w
 10660  13BE  07A5               	addwf	___lwdiv@counter,f
 10661  13BF  2BB4               	goto	l9696
 10662  13C0                     l9698:	
 10663  13C0  3001               	movlw	1
 10664  13C1                     u10865:	
 10665  13C1  35A6               	lslf	___lwdiv@quotient,f
 10666  13C2  0DA7               	rlf	___lwdiv@quotient+1,f
 10667  13C3  0B89               	decfsz	9,f
 10668  13C4  2BC1               	goto	u10865
 10669  13C5  0821               	movf	___lwdiv@divisor+1,w
 10670  13C6  0223               	subwf	___lwdiv@dividend+1,w
 10671  13C7  1D03               	skipz
 10672  13C8  2BCB               	goto	u10875
 10673  13C9  0820               	movf	___lwdiv@divisor,w
 10674  13CA  0222               	subwf	___lwdiv@dividend,w
 10675  13CB                     u10875:	
 10676  13CB  1C03               	skipc
 10677  13CC  2BD2               	goto	l9704
 10678  13CD  0820               	movf	___lwdiv@divisor,w
 10679  13CE  02A2               	subwf	___lwdiv@dividend,f
 10680  13CF  0821               	movf	___lwdiv@divisor+1,w
 10681  13D0  3BA3               	subwfb	___lwdiv@dividend+1,f
 10682  13D1  1426               	bsf	___lwdiv@quotient,0
 10683  13D2                     l9704:	
 10684  13D2  3001               	movlw	1
 10685  13D3                     u10885:	
 10686  13D3  36A1               	lsrf	___lwdiv@divisor+1,f
 10687  13D4  0CA0               	rrf	___lwdiv@divisor,f
 10688  13D5  0B89               	decfsz	9,f
 10689  13D6  2BD3               	goto	u10885
 10690  13D7  3001               	movlw	1
 10691  13D8  02A5               	subwf	___lwdiv@counter,f
 10692  13D9  1D03               	btfss	3,2
 10693  13DA  2BC0               	goto	l9698
 10694  13DB                     l9708:	
 10695  13DB  0827               	movf	___lwdiv@quotient+1,w
 10696  13DC  01A1               	clrf	?___lwdiv+1
 10697  13DD  07A1               	addwf	?___lwdiv+1,f
 10698  13DE  0826               	movf	___lwdiv@quotient,w
 10699  13DF  01A0               	clrf	?___lwdiv
 10700  13E0  07A0               	addwf	?___lwdiv,f
 10701  13E1  0008               	return
 10702  13E2                     __end_of___lwdiv:	
 10703                           
 10704                           	psect	text58
 10705  1C17                     __ptext58:	
 10706 ;; *************** function _Load_Initialization *****************
 10707 ;; Defined at:
 10708 ;;		line 9 in file "../src/OverLoad_B1.c"
 10709 ;; Parameters:    Size  Location     Type
 10710 ;;		None
 10711 ;; Auto vars:     Size  Location     Type
 10712 ;;		None
 10713 ;; Return value:  Size  Location     Type
 10714 ;;		None               void
 10715 ;; Registers used:
 10716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10717 ;; Tracked objects:
 10718 ;;		On entry : 0/0
 10719 ;;		On exit  : 0/0
 10720 ;;		Unchanged: 0/0
 10721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;Total ram usage:        0 bytes
 10727 ;; Hardware stack levels used:    1
 10728 ;; Hardware stack levels required when called:    6
 10729 ;; This function calls:
 10730 ;;		_setLoad_AH_AL_Restore
 10731 ;; This function is called by:
 10732 ;;		_main
 10733 ;; This function uses a non-reentrant model
 10734 ;;
 10735                           
 10736                           
 10737                           ;psect for function _Load_Initialization
 10738  1C17                     _Load_Initialization:	
 10739                           
 10740                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10741                           
 10742                           ;incstack = 0
 10743                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10744  1C17  319F  276A         	fcall	_setLoad_AH_AL_Restore
 10745  1C19  0008               	return
 10746  1C1A                     __end_of_Load_Initialization:	
 10747                           
 10748                           	psect	text59
 10749  1F6A                     __ptext59:	
 10750 ;; *************** function _setLoad_AH_AL_Restore *****************
 10751 ;; Defined at:
 10752 ;;		line 285 in file "../src/OverLoad_B1.c"
 10753 ;; Parameters:    Size  Location     Type
 10754 ;;		None
 10755 ;; Auto vars:     Size  Location     Type
 10756 ;;  i               1    1[BANK0 ] unsigned char 
 10757 ;; Return value:  Size  Location     Type
 10758 ;;		None               void
 10759 ;; Registers used:
 10760 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10761 ;; Tracked objects:
 10762 ;;		On entry : 0/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10770 ;;Total ram usage:        2 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:    5
 10773 ;; This function calls:
 10774 ;;		Nothing
 10775 ;; This function is called by:
 10776 ;;		_Load_Initialization
 10777 ;;		_Load_Main
 10778 ;; This function uses a non-reentrant model
 10779 ;;
 10780                           
 10781                           
 10782                           ;psect for function _setLoad_AH_AL_Restore
 10783  1F6A                     _setLoad_AH_AL_Restore:	
 10784                           
 10785                           ;OverLoad_B1.c: 286: char i;
 10786                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 10787                           
 10788                           ;incstack = 0
 10789                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10790  1F6A  0020               	movlb	0	; select bank0
 10791  1F6B  01A1               	clrf	setLoad_AH_AL_Restore@i
 10792  1F6C                     L4:	
 10793  1F6C  3005               	movlw	5
 10794  1F6D  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10795  1F6E  1803               	btfsc	3,0
 10796  1F6F  0008               	return
 10797                           
 10798                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 10799  1F70  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10800  1F71  3E30               	addlw	(_Load+11)& (0+255)
 10801  1F72  0086               	movwf	6
 10802  1F73  3001               	movlw	1	; select bank2/3
 10803  1F74  0087               	movwf	7
 10804  1F75  3000               	movlw	0
 10805  1F76  3FC0               	movwi [0]fsr1
 10806  1F77  3FC1               	movwi [1]fsr1
 10807                           
 10808                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 10809  1F78  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10810  1F79  3E3A               	addlw	(_Load+21)& (0+255)
 10811  1F7A  0086               	movwf	6
 10812  1F7B  3001               	movlw	1	; select bank2/3
 10813  1F7C  0087               	movwf	7
 10814  1F7D  30FF               	movlw	255
 10815  1F7E  3FC0               	movwi [0]fsr1
 10816  1F7F  30FF               	movlw	255
 10817  1F80  3FC1               	movwi [1]fsr1
 10818  1F81  3001               	movlw	1
 10819  1F82  00A0               	movwf	??_setLoad_AH_AL_Restore
 10820  1F83  0820               	movf	??_setLoad_AH_AL_Restore,w
 10821  1F84  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10822  1F85  2F6C               	goto	L4
 10823  1F86                     __end_of_setLoad_AH_AL_Restore:	
 10824                           
 10825                           	psect	text60
 10826  1C42                     __ptext60:	
 10827 ;; *************** function _LED_Main *****************
 10828 ;; Defined at:
 10829 ;;		line 47 in file "../src/LED_B1.c"
 10830 ;; Parameters:    Size  Location     Type
 10831 ;;		None
 10832 ;; Auto vars:     Size  Location     Type
 10833 ;;		None
 10834 ;; Return value:  Size  Location     Type
 10835 ;;		None               void
 10836 ;; Registers used:
 10837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10838 ;; Tracked objects:
 10839 ;;		On entry : 0/0
 10840 ;;		On exit  : 0/0
 10841 ;;		Unchanged: 0/0
 10842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;Total ram usage:        0 bytes
 10848 ;; Hardware stack levels used:    1
 10849 ;; Hardware stack levels required when called:    7
 10850 ;; This function calls:
 10851 ;;		_setLED_Main
 10852 ;; This function is called by:
 10853 ;;		_main
 10854 ;; This function uses a non-reentrant model
 10855 ;;
 10856                           
 10857                           
 10858                           ;psect for function _LED_Main
 10859  1C42                     _LED_Main:	
 10860                           
 10861                           ;LED_B1.c: 62: setLED_Main(99);
 10862                           
 10863                           ;incstack = 0
 10864                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10865  1C42  3063               	movlw	99
 10866  1C43  3193  233F         	fcall	_setLED_Main
 10867  1C45  0008               	return
 10868  1C46                     __end_of_LED_Main:	
 10869                           
 10870                           	psect	text61
 10871  133F                     __ptext61:	
 10872 ;; *************** function _setLED_Main *****************
 10873 ;; Defined at:
 10874 ;;		line 221 in file "../src/LED_B1.c"
 10875 ;; Parameters:    Size  Location     Type
 10876 ;;  led             1    wreg     unsigned char 
 10877 ;; Auto vars:     Size  Location     Type
 10878 ;;  led             1    4[BANK0 ] unsigned char 
 10879 ;; Return value:  Size  Location     Type
 10880 ;;		None               void
 10881 ;; Registers used:
 10882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10883 ;; Tracked objects:
 10884 ;;		On entry : 0/0
 10885 ;;		On exit  : 0/0
 10886 ;;		Unchanged: 0/0
 10887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10890 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10891 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;Total ram usage:        3 bytes
 10893 ;; Hardware stack levels used:    1
 10894 ;; Hardware stack levels required when called:    6
 10895 ;; This function calls:
 10896 ;;		_LedPointSelect
 10897 ;; This function is called by:
 10898 ;;		_LED_Main
 10899 ;; This function uses a non-reentrant model
 10900 ;;
 10901                           
 10902                           
 10903                           ;psect for function _setLED_Main
 10904  133F                     _setLED_Main:	
 10905                           
 10906                           ;incstack = 0
 10907                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10908                           ;setLED_Main@led stored from wreg
 10909  133F  0020               	movlb	0	; select bank0
 10910  1340  00A4               	movwf	setLED_Main@led
 10911                           
 10912                           ;LED_B1.c: 222: LedPointSelect(led);
 10913  1341  0824               	movf	setLED_Main@led,w
 10914  1342  319D  2519  3193   	fcall	_LedPointSelect
 10915                           
 10916                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10917  1345  0021               	movlb	1	; select bank1
 10918  1346  084E               	movf	_LED^(0+128),w
 10919  1347  0086               	movwf	6
 10920  1348  3001               	movlw	1	; select bank2/3
 10921  1349  0087               	movwf	7
 10922  134A  1C81               	btfss	1,1
 10923  134B  0008               	return
 10924                           
 10925                           ;LED_B1.c: 224: LED->Time++;
 10926  134C  0A4E               	incf	_LED^(0+128),w
 10927  134D  0086               	movwf	6
 10928  134E  3001               	movlw	1	; select bank2/3
 10929  134F  0087               	movwf	7
 10930  1350  3001               	movlw	1
 10931  1351  0781               	addwf	1,f
 10932  1352  3141               	addfsr 1,1
 10933  1353  1803               	skipnc
 10934  1354  0A81               	incf	1,f
 10935                           
 10936                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10937  1355  0A4E               	incf	_LED^(0+128),w
 10938  1356  0086               	movwf	6
 10939  1357  3001               	movlw	1	; select bank2/3
 10940  1358  0087               	movwf	7
 10941  1359  3F40               	moviw [0]fsr1
 10942  135A  0020               	movlb	0	; select bank0
 10943  135B  00A2               	movwf	??_setLED_Main
 10944  135C  3F41               	moviw [1]fsr1
 10945  135D  00A3               	movwf	??_setLED_Main+1
 10946  135E  3000               	movlw	0
 10947  135F  0223               	subwf	??_setLED_Main+1,w
 10948  1360  3032               	movlw	50
 10949  1361  1903               	skipnz
 10950  1362  0222               	subwf	??_setLED_Main,w
 10951  1363  1C03               	skipc
 10952  1364  0008               	return
 10953                           
 10954                           ;LED_B1.c: 226: LED->Time = 0;
 10955  1365  0021               	movlb	1	; select bank1
 10956  1366  0A4E               	incf	_LED^(0+128),w
 10957  1367  0086               	movwf	6
 10958  1368  3001               	movlw	1	; select bank2/3
 10959  1369  0087               	movwf	7
 10960  136A  3000               	movlw	0
 10961  136B  3FC0               	movwi [0]fsr1
 10962  136C  3FC1               	movwi [1]fsr1
 10963                           
 10964                           ;LED_B1.c: 243: if (led == 99) {
 10965  136D  0020               	movlb	0	; select bank0
 10966  136E  0824               	movf	setLED_Main@led,w
 10967  136F  3A63               	xorlw	99
 10968  1370  1D03               	skipz
 10969  1371  0008               	return
 10970                           
 10971                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 10972  1372  3020               	movlw	32
 10973  1373  068D               	xorwf	13,f
 10974  1374  0008               	return
 10975  1375                     __end_of_setLED_Main:	
 10976                           
 10977                           	psect	text62
 10978  1C3E                     __ptext62:	
 10979 ;; *************** function _LED_Initialization *****************
 10980 ;; Defined at:
 10981 ;;		line 31 in file "../src/LED_B1.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;		None
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;		None
 10986 ;; Return value:  Size  Location     Type
 10987 ;;		None               void
 10988 ;; Registers used:
 10989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;Total ram usage:        0 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    8
 11002 ;; This function calls:
 11003 ;;		_setLED_Initialization
 11004 ;; This function is called by:
 11005 ;;		_main
 11006 ;; This function uses a non-reentrant model
 11007 ;;
 11008                           
 11009                           
 11010                           ;psect for function _LED_Initialization
 11011  1C3E                     _LED_Initialization:	
 11012                           
 11013                           ;LED_B1.c: 42: setLED_Initialization(99);
 11014                           
 11015                           ;incstack = 0
 11016                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11017  1C3E  3063               	movlw	99
 11018  1C3F  319E  2611         	fcall	_setLED_Initialization
 11019  1C41  0008               	return
 11020  1C42                     __end_of_LED_Initialization:	
 11021                           
 11022                           	psect	text63
 11023  1E11                     __ptext63:	
 11024 ;; *************** function _setLED_Initialization *****************
 11025 ;; Defined at:
 11026 ;;		line 69 in file "../src/LED_B1.c"
 11027 ;; Parameters:    Size  Location     Type
 11028 ;;  led             1    wreg     unsigned char 
 11029 ;; Auto vars:     Size  Location     Type
 11030 ;;  led             1    4[BANK0 ] unsigned char 
 11031 ;; Return value:  Size  Location     Type
 11032 ;;		None               void
 11033 ;; Registers used:
 11034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11035 ;; Tracked objects:
 11036 ;;		On entry : 0/0
 11037 ;;		On exit  : 0/0
 11038 ;;		Unchanged: 0/0
 11039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;Total ram usage:        1 bytes
 11045 ;; Hardware stack levels used:    1
 11046 ;; Hardware stack levels required when called:    7
 11047 ;; This function calls:
 11048 ;;		_LedPointSelect
 11049 ;;		_setLED
 11050 ;; This function is called by:
 11051 ;;		_LED_Initialization
 11052 ;; This function uses a non-reentrant model
 11053 ;;
 11054                           
 11055                           
 11056                           ;psect for function _setLED_Initialization
 11057  1E11                     _setLED_Initialization:	
 11058                           
 11059                           ;incstack = 0
 11060                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11061                           ;setLED_Initialization@led stored from wreg
 11062  1E11  0020               	movlb	0	; select bank0
 11063  1E12  00A4               	movwf	setLED_Initialization@led
 11064                           
 11065                           ;LED_B1.c: 70: LedPointSelect(led);
 11066  1E13  0824               	movf	setLED_Initialization@led,w
 11067  1E14  319D  2519  319E   	fcall	_LedPointSelect
 11068                           
 11069                           ;LED_B1.c: 71: LED->Enable = 1;
 11070  1E17  0021               	movlb	1	; select bank1
 11071  1E18  084E               	movf	_LED^(0+128),w
 11072  1E19  0086               	movwf	6
 11073  1E1A  3001               	movlw	1	; select bank2/3
 11074  1E1B  0087               	movwf	7
 11075  1E1C  1401               	bsf	1,0
 11076                           
 11077                           ;LED_B1.c: 72: setLED(led, 0);
 11078  1E1D  0020               	movlb	0	; select bank0
 11079  1E1E  01A2               	clrf	setLED@command
 11080  1E1F  0824               	movf	setLED_Initialization@led,w
 11081  1E20  3193  23E2         	fcall	_setLED
 11082  1E22  0008               	return
 11083  1E23                     __end_of_setLED_Initialization:	
 11084                           
 11085                           	psect	text64
 11086  1309                     __ptext64:	
 11087 ;; *************** function _Flash_Memory_Main *****************
 11088 ;; Defined at:
 11089 ;;		line 965 in file "../src/MCU_B1.c"
 11090 ;; Parameters:    Size  Location     Type
 11091 ;;		None
 11092 ;; Auto vars:     Size  Location     Type
 11093 ;;		None
 11094 ;; Return value:  Size  Location     Type
 11095 ;;		None               void
 11096 ;; Registers used:
 11097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11098 ;; Tracked objects:
 11099 ;;		On entry : 0/0
 11100 ;;		On exit  : 0/0
 11101 ;;		Unchanged: 0/0
 11102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11106 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11107 ;;Total ram usage:        1 bytes
 11108 ;; Hardware stack levels used:    1
 11109 ;; Hardware stack levels required when called:    8
 11110 ;; This function calls:
 11111 ;;		_Flash_Memory_Modify
 11112 ;;		_getMain_LightsStatus
 11113 ;; This function is called by:
 11114 ;;		_main
 11115 ;; This function uses a non-reentrant model
 11116 ;;
 11117                           
 11118                           
 11119                           ;psect for function _Flash_Memory_Main
 11120  1309                     _Flash_Memory_Main:	
 11121                           
 11122                           ;MCU_B1.c: 966: if (Memory.Modify == 1) {
 11123                           
 11124                           ;incstack = 0
 11125                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11126  1309  0023               	movlb	3	; select bank3
 11127  130A  1C62               	btfss	(_Memory^(0+384)+36),0
 11128  130B  0008               	return
 11129                           
 11130                           ;MCU_B1.c: 967: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11131  130C  319C  24B6  3193   	fcall	_getMain_LightsStatus
 11132  130F  3A00               	xorlw	0
 11133  1310  3000               	movlw	0
 11134  1311  1903               	skipnz
 11135  1312  3001               	movlw	1
 11136  1313  0020               	movlb	0	; select bank0
 11137  1314  00A6               	movwf	??_Flash_Memory_Main
 11138  1315  0DA6               	rlf	??_Flash_Memory_Main,f
 11139  1316  0023               	movlb	3	; select bank3
 11140  1317  0862               	movf	(_Memory^(0+384)+36),w
 11141  1318  0020               	movlb	0	; select bank0
 11142  1319  0626               	xorwf	??_Flash_Memory_Main,w
 11143  131A  39FD               	andlw	-3
 11144  131B  0626               	xorwf	??_Flash_Memory_Main,w
 11145  131C  0023               	movlb	3	; select bank3
 11146  131D  00E2               	movwf	(_Memory^(0+384)+36)
 11147                           
 11148                           ;MCU_B1.c: 968: if (Memory.GO == 1) {
 11149  131E  1CE2               	btfss	(_Memory^(0+384)+36),1
 11150  131F  2B39               	goto	l1195
 11151                           
 11152                           ;MCU_B1.c: 969: Memory.Runtime = 1;
 11153  1320  15E2               	bsf	(_Memory^(0+384)+36),3
 11154                           
 11155                           ;MCU_B1.c: 970: Memory.Time++;
 11156  1321  3001               	movlw	1
 11157  1322  07E0               	addwf	(_Memory^(0+384)+34),f
 11158  1323  3000               	movlw	0
 11159  1324  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11160                           
 11161                           ;MCU_B1.c: 971: if (Memory.Time == 25) {
 11162  1325  3022               	movlw	34
 11163  1326  3EBE               	addlw	_Memory& (0+255)
 11164  1327  0086               	movwf	6
 11165  1328  3001               	movlw	1	; select bank3/4
 11166  1329  0087               	movwf	7
 11167  132A  3F40               	moviw [0]fsr1
 11168  132B  3A19               	xorlw	25
 11169  132C  1D03               	skipz
 11170  132D  2B30               	goto	u11075
 11171  132E  3F41               	moviw [1]fsr1
 11172  132F  3A00               	xorlw	0
 11173  1330                     u11075:	
 11174  1330  1D03               	skipz
 11175  1331  0008               	return
 11176                           
 11177                           ;MCU_B1.c: 972: Memory.Time = 0;
 11178  1332  01E0               	clrf	(_Memory^(0+384)+34)
 11179  1333  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11180                           
 11181                           ;MCU_B1.c: 973: Memory.Modify = 0;
 11182  1334  1062               	bcf	(_Memory^(0+384)+36),0
 11183                           
 11184                           ;MCU_B1.c: 974: Memory.GO = 0;
 11185  1335  10E2               	bcf	(_Memory^(0+384)+36),1
 11186                           
 11187                           ;MCU_B1.c: 975: Flash_Memory_Modify();
 11188  1336  3195  251A         	fcall	_Flash_Memory_Modify
 11189                           
 11190                           ;MCU_B1.c: 976: }
 11191                           ;MCU_B1.c: 977: } else {
 11192  1338  0008               	return
 11193  1339                     l1195:	
 11194                           
 11195                           ;MCU_B1.c: 978: if (Memory.Runtime == 1) {
 11196  1339  1DE2               	btfss	(_Memory^(0+384)+36),3
 11197  133A  0008               	return
 11198                           
 11199                           ;MCU_B1.c: 979: Memory.Runtime = 0;
 11200  133B  11E2               	bcf	(_Memory^(0+384)+36),3
 11201                           
 11202                           ;MCU_B1.c: 980: Memory.Time = 0;
 11203  133C  01E0               	clrf	(_Memory^(0+384)+34)
 11204  133D  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11205  133E  0008               	return
 11206  133F                     __end_of_Flash_Memory_Main:	
 11207                           
 11208                           	psect	text65
 11209  151A                     __ptext65:	
 11210 ;; *************** function _Flash_Memory_Modify *****************
 11211 ;; Defined at:
 11212 ;;		line 1038 in file "../src/MCU_B1.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;		None
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;  i               1    5[BANK0 ] unsigned char 
 11217 ;; Return value:  Size  Location     Type
 11218 ;;		None               void
 11219 ;; Registers used:
 11220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11221 ;; Tracked objects:
 11222 ;;		On entry : 0/0
 11223 ;;		On exit  : 0/0
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;Total ram usage:        2 bytes
 11231 ;; Hardware stack levels used:    1
 11232 ;; Hardware stack levels required when called:    7
 11233 ;; This function calls:
 11234 ;;		_Flash_Memory_Erasing
 11235 ;;		_Flash_Memory_Read
 11236 ;;		_Flash_Memory_Write
 11237 ;;		_setMemory_Data
 11238 ;; This function is called by:
 11239 ;;		_Flash_Memory_Main
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           
 11244                           ;psect for function _Flash_Memory_Modify
 11245  151A                     _Flash_Memory_Modify:	
 11246                           
 11247                           ;MCU_B1.c: 1039: char i = 0;
 11248                           
 11249                           ;incstack = 0
 11250                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11251  151A  0020               	movlb	0	; select bank0
 11252  151B  01A5               	clrf	Flash_Memory_Modify@i
 11253                           
 11254                           ;MCU_B1.c: 1040: for (i = 0; i < 32; i++) {
 11255  151C  01A5               	clrf	Flash_Memory_Modify@i
 11256  151D  3020               	movlw	32
 11257  151E  0225               	subwf	Flash_Memory_Modify@i,w
 11258  151F  1803               	btfsc	3,0
 11259  1520  2D36               	goto	l9406
 11260  1521                     l9400:	
 11261                           
 11262                           ;MCU_B1.c: 1041: Memory.Data[i] = Flash_Memory_Read(i);
 11263  1521  0825               	movf	Flash_Memory_Modify@i,w
 11264  1522  319F  2734  3195   	fcall	_Flash_Memory_Read
 11265  1525  0020               	movlb	0	; select bank0
 11266  1526  00A4               	movwf	??_Flash_Memory_Modify
 11267  1527  0825               	movf	Flash_Memory_Modify@i,w
 11268  1528  3EBE               	addlw	_Memory& (0+255)
 11269  1529  0086               	movwf	6
 11270  152A  3001               	movlw	1	; select bank3/4
 11271  152B  0087               	movwf	7
 11272  152C  0824               	movf	??_Flash_Memory_Modify,w
 11273  152D  0081               	movwf	1
 11274  152E  3001               	movlw	1
 11275  152F  00A4               	movwf	??_Flash_Memory_Modify
 11276  1530  0824               	movf	??_Flash_Memory_Modify,w
 11277  1531  07A5               	addwf	Flash_Memory_Modify@i,f
 11278  1532  3020               	movlw	32
 11279  1533  0225               	subwf	Flash_Memory_Modify@i,w
 11280  1534  1C03               	skipc
 11281  1535  2D21               	goto	l9400
 11282  1536                     l9406:	
 11283                           
 11284                           ;MCU_B1.c: 1042: }
 11285                           ;MCU_B1.c: 1043: setMemory_Data(0, product->Data[12]);
 11286  1536  0879               	movf	_product,w
 11287  1537  0086               	movwf	6
 11288  1538  3002               	movlw	2	; select bank4/5
 11289  1539  0087               	movwf	7
 11290  153A  3002               	movlw	2	; select bank4/5
 11291  153B  3F4C               	moviw [12]fsr1
 11292  153C  00A0               	movwf	setMemory_Data@data
 11293  153D  3000               	movlw	0
 11294  153E  319D  2525  3195   	fcall	_setMemory_Data
 11295                           
 11296                           ;MCU_B1.c: 1044: setMemory_Data(1, product->Data[13]);
 11297  1541  0879               	movf	_product,w
 11298  1542  0086               	movwf	6
 11299  1543  3002               	movlw	2	; select bank4/5
 11300  1544  0087               	movwf	7
 11301  1545  3002               	movlw	2	; select bank4/5
 11302  1546  3F4D               	moviw [13]fsr1
 11303  1547  0020               	movlb	0	; select bank0
 11304  1548  00A0               	movwf	setMemory_Data@data
 11305  1549  3001               	movlw	1
 11306  154A  319D  2525  3195   	fcall	_setMemory_Data
 11307                           
 11308                           ;MCU_B1.c: 1045: setMemory_Data(2, product->Data[14]);
 11309  154D  0879               	movf	_product,w
 11310  154E  0086               	movwf	6
 11311  154F  3002               	movlw	2	; select bank4/5
 11312  1550  0087               	movwf	7
 11313  1551  3002               	movlw	2	; select bank4/5
 11314  1552  3F4E               	moviw [14]fsr1
 11315  1553  0020               	movlb	0	; select bank0
 11316  1554  00A0               	movwf	setMemory_Data@data
 11317  1555  3002               	movlw	2
 11318  1556  319D  2525  3195   	fcall	_setMemory_Data
 11319                           
 11320                           ;MCU_B1.c: 1051: if (Memory.LoopSave == 1) {
 11321  1559  0023               	movlb	3	; select bank3
 11322  155A  1D62               	btfss	(_Memory^(0+384)+36),2
 11323  155B  2D60               	goto	l1218
 11324                           
 11325                           ;MCU_B1.c: 1052: Memory.LoopSave = 0;
 11326  155C  1162               	bcf	(_Memory^(0+384)+36),2
 11327                           
 11328                           ;MCU_B1.c: 1053: myMain.FirstOpen = 0;
 11329  155D  0021               	movlb	1	; select bank1
 11330  155E  11A0               	bcf	_myMain^(0+128),3
 11331                           
 11332                           ;MCU_B1.c: 1054: myMain.First = 0;
 11333  155F  12A0               	bcf	_myMain^(0+128),5
 11334  1560                     l1218:	
 11335                           
 11336                           ;MCU_B1.c: 1056: }
 11337                           ;MCU_B1.c: 1057: GIE = 0;
 11338  1560  138B               	bcf	11,7	;volatile
 11339                           
 11340                           ;MCU_B1.c: 1058: Flash_Memory_Erasing();
 11341  1561  319D  2531  3195   	fcall	_Flash_Memory_Erasing
 11342                           
 11343                           ;MCU_B1.c: 1059: Flash_Memory_Write();
 11344  1564  3191  21DF         	fcall	_Flash_Memory_Write
 11345                           
 11346                           ;MCU_B1.c: 1060: GIE = 1;
 11347  1566  178B               	bsf	11,7	;volatile
 11348  1567  0008               	return
 11349  1568                     __end_of_Flash_Memory_Modify:	
 11350                           
 11351                           	psect	text66
 11352  1D31                     __ptext66:	
 11353 ;; *************** function _Flash_Memory_Erasing *****************
 11354 ;; Defined at:
 11355 ;;		line 1027 in file "../src/MCU_B1.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;		None
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;		None
 11360 ;; Return value:  Size  Location     Type
 11361 ;;		None               void
 11362 ;; Registers used:
 11363 ;;		wreg, status,2, status,0, pclath, cstack
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;Total ram usage:        0 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    6
 11376 ;; This function calls:
 11377 ;;		_Flash_Memory_Unlock
 11378 ;; This function is called by:
 11379 ;;		_Flash_Memory_Modify
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           
 11384                           ;psect for function _Flash_Memory_Erasing
 11385  1D31                     _Flash_Memory_Erasing:	
 11386                           
 11387                           ;MCU_B1.c: 1028: CFGS = 0;
 11388                           
 11389                           ;incstack = 0
 11390                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11391  1D31  0023               	movlb	3	; select bank3
 11392  1D32  1315               	bcf	21,6	;volatile
 11393                           
 11394                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 11395  1D33  3030               	movlw	48
 11396  1D34  0092               	movwf	18	;volatile
 11397                           
 11398                           ;MCU_B1.c: 1030: PMADRL = 0x00;
 11399  1D35  0191               	clrf	17	;volatile
 11400                           
 11401                           ;MCU_B1.c: 1031: FREE = 1;
 11402  1D36  1615               	bsf	21,4	;volatile
 11403                           
 11404                           ;MCU_B1.c: 1032: WREN = 1;
 11405  1D37  1515               	bsf	21,2	;volatile
 11406                           
 11407                           ;MCU_B1.c: 1033: Flash_Memory_Unlock();
 11408  1D38  319C  2490         	fcall	_Flash_Memory_Unlock
 11409                           
 11410                           ;MCU_B1.c: 1034: WREN = 0;
 11411  1D3A  0023               	movlb	3	; select bank3
 11412  1D3B  1115               	bcf	21,2	;volatile
 11413  1D3C  0008               	return
 11414  1D3D                     __end_of_Flash_Memory_Erasing:	
 11415                           
 11416                           	psect	text67
 11417  0550                     __ptext67:	
 11418 ;; *************** function _Flash_Memory_Initialization *****************
 11419 ;; Defined at:
 11420 ;;		line 924 in file "../src/MCU_B1.c"
 11421 ;; Parameters:    Size  Location     Type
 11422 ;;		None
 11423 ;; Auto vars:     Size  Location     Type
 11424 ;;  i               1   67[BANK0 ] unsigned char 
 11425 ;; Return value:  Size  Location     Type
 11426 ;;		None               void
 11427 ;; Registers used:
 11428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11429 ;; Tracked objects:
 11430 ;;		On entry : 0/0
 11431 ;;		On exit  : 0/0
 11432 ;;		Unchanged: 0/0
 11433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11438 ;;Total ram usage:        2 bytes
 11439 ;; Hardware stack levels used:    1
 11440 ;; Hardware stack levels required when called:    8
 11441 ;; This function calls:
 11442 ;;		_Flash_Memory_Read
 11443 ;;		_Flash_Memory_Write
 11444 ;;		_setMemory_Data
 11445 ;;		_setPercentValue
 11446 ;; This function is called by:
 11447 ;;		_main
 11448 ;; This function uses a non-reentrant model
 11449 ;;
 11450                           
 11451                           
 11452                           ;psect for function _Flash_Memory_Initialization
 11453  0550                     _Flash_Memory_Initialization:	
 11454                           
 11455                           ;MCU_B1.c: 925: char i = 0;
 11456                           
 11457                           ;incstack = 0
 11458                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11459  0550  0020               	movlb	0	; select bank0
 11460  0551  01E3               	clrf	Flash_Memory_Initialization@i
 11461                           
 11462                           ;MCU_B1.c: 926: if (Flash_Memory_Read(31) == 0xaa) {
 11463  0552  301F               	movlw	31
 11464  0553  319F  2734  3185   	fcall	_Flash_Memory_Read
 11465  0556  3AAA               	xorlw	170
 11466  0557  1D03               	skipz
 11467  0558  2DC2               	goto	l9794
 11468                           
 11469                           ;MCU_B1.c: 927: product->Data[12] = Flash_Memory_Read(0);
 11470  0559  3000               	movlw	0
 11471  055A  319F  2734  3185   	fcall	_Flash_Memory_Read
 11472  055D  0020               	movlb	0	; select bank0
 11473  055E  00E2               	movwf	??_Flash_Memory_Initialization
 11474  055F  0879               	movf	_product,w
 11475  0560  3E0C               	addlw	12
 11476  0561  0086               	movwf	6
 11477  0562  3002               	movlw	2	; select bank4/5
 11478  0563  0087               	movwf	7
 11479  0564  0862               	movf	??_Flash_Memory_Initialization,w
 11480  0565  0081               	movwf	1
 11481                           
 11482                           ;MCU_B1.c: 928: product->Data[13] = Flash_Memory_Read(1);
 11483  0566  3001               	movlw	1
 11484  0567  319F  2734  3185   	fcall	_Flash_Memory_Read
 11485  056A  0020               	movlb	0	; select bank0
 11486  056B  00E2               	movwf	??_Flash_Memory_Initialization
 11487  056C  0879               	movf	_product,w
 11488  056D  3E0D               	addlw	13
 11489  056E  0086               	movwf	6
 11490  056F  3002               	movlw	2	; select bank4/5
 11491  0570  0087               	movwf	7
 11492  0571  0862               	movf	??_Flash_Memory_Initialization,w
 11493  0572  0081               	movwf	1
 11494                           
 11495                           ;MCU_B1.c: 929: product->Data[14] = Flash_Memory_Read(2);
 11496  0573  3002               	movlw	2
 11497  0574  319F  2734  3185   	fcall	_Flash_Memory_Read
 11498  0577  0020               	movlb	0	; select bank0
 11499  0578  00E2               	movwf	??_Flash_Memory_Initialization
 11500  0579  0879               	movf	_product,w
 11501  057A  3E0E               	addlw	14
 11502  057B  0086               	movwf	6
 11503  057C  3002               	movlw	2	; select bank4/5
 11504  057D  0087               	movwf	7
 11505  057E  0862               	movf	??_Flash_Memory_Initialization,w
 11506  057F  0081               	movwf	1
 11507                           
 11508                           ;MCU_B1.c: 935: i = setPercentValue(((char)(70*0.8)));
 11509  0580  3038               	movlw	56
 11510  0581  318A  22CF  3185   	fcall	_setPercentValue
 11511  0584  0020               	movlb	0	; select bank0
 11512  0585  00E2               	movwf	??_Flash_Memory_Initialization
 11513  0586  0862               	movf	??_Flash_Memory_Initialization,w
 11514  0587  00E3               	movwf	Flash_Memory_Initialization@i
 11515                           
 11516                           ;MCU_B1.c: 936: product->Data[21] = i;
 11517  0588  0863               	movf	Flash_Memory_Initialization@i,w
 11518  0589  00E2               	movwf	??_Flash_Memory_Initialization
 11519  058A  0879               	movf	_product,w
 11520  058B  3E15               	addlw	21
 11521  058C  0086               	movwf	6
 11522  058D  3002               	movlw	2	; select bank4/5
 11523  058E  0087               	movwf	7
 11524  058F  0862               	movf	??_Flash_Memory_Initialization,w
 11525  0590  0081               	movwf	1
 11526                           
 11527                           ;MCU_B1.c: 937: product->Data[22] = i;
 11528  0591  0863               	movf	Flash_Memory_Initialization@i,w
 11529  0592  00E2               	movwf	??_Flash_Memory_Initialization
 11530  0593  0879               	movf	_product,w
 11531  0594  3E16               	addlw	22
 11532  0595  0086               	movwf	6
 11533  0596  3002               	movlw	2	; select bank4/5
 11534  0597  0087               	movwf	7
 11535  0598  0862               	movf	??_Flash_Memory_Initialization,w
 11536  0599  0081               	movwf	1
 11537                           
 11538                           ;MCU_B1.c: 938: product->Data[23] = i;
 11539  059A  0863               	movf	Flash_Memory_Initialization@i,w
 11540  059B  00E2               	movwf	??_Flash_Memory_Initialization
 11541  059C  0879               	movf	_product,w
 11542  059D  3E17               	addlw	23
 11543  059E  0086               	movwf	6
 11544  059F  3002               	movlw	2	; select bank4/5
 11545  05A0  0087               	movwf	7
 11546  05A1  0862               	movf	??_Flash_Memory_Initialization,w
 11547  05A2  0081               	movwf	1
 11548                           
 11549                           ;MCU_B1.c: 940: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11550  05A3  0879               	movf	_product,w
 11551  05A4  3E0C               	addlw	12
 11552  05A5  0086               	movwf	6
 11553  05A6  3002               	movlw	2	; select bank4/5
 11554  05A7  0087               	movwf	7
 11555  05A8  0801               	movf	1,w
 11556  05A9  3AFF               	xorlw	255
 11557  05AA  1D03               	skipz
 11558  05AB  0008               	return
 11559  05AC  0879               	movf	_product,w
 11560  05AD  3E0D               	addlw	13
 11561  05AE  0086               	movwf	6
 11562  05AF  3002               	movlw	2	; select bank4/5
 11563  05B0  0087               	movwf	7
 11564  05B1  0801               	movf	1,w
 11565  05B2  3AFF               	xorlw	255
 11566  05B3  1D03               	skipz
 11567  05B4  0008               	return
 11568  05B5  0879               	movf	_product,w
 11569  05B6  3E0E               	addlw	14
 11570  05B7  0086               	movwf	6
 11571  05B8  3002               	movlw	2	; select bank4/5
 11572  05B9  0087               	movwf	7
 11573  05BA  0801               	movf	1,w
 11574  05BB  3AFF               	xorlw	255
 11575  05BC  1D03               	skipz
 11576  05BD  0008               	return
 11577                           
 11578                           ;MCU_B1.c: 941: myMain.FirstOpen = 1;
 11579  05BE  0021               	movlb	1	; select bank1
 11580  05BF  15A0               	bsf	_myMain^(0+128),3
 11581                           
 11582                           ;MCU_B1.c: 942: myMain.First = 1;
 11583  05C0  16A0               	bsf	_myMain^(0+128),5
 11584                           
 11585                           ;MCU_B1.c: 943: }
 11586                           ;MCU_B1.c: 944: } else {
 11587  05C1  0008               	return
 11588  05C2                     l9794:	
 11589                           
 11590                           ;MCU_B1.c: 945: i = setPercentValue(((char)(70*0.8)));
 11591  05C2  3038               	movlw	56
 11592  05C3  318A  22CF  3185   	fcall	_setPercentValue
 11593  05C6  0020               	movlb	0	; select bank0
 11594  05C7  00E2               	movwf	??_Flash_Memory_Initialization
 11595  05C8  0862               	movf	??_Flash_Memory_Initialization,w
 11596  05C9  00E3               	movwf	Flash_Memory_Initialization@i
 11597                           
 11598                           ;MCU_B1.c: 946: setMemory_Data(0, 0xff);
 11599  05CA  30FF               	movlw	255
 11600  05CB  00E2               	movwf	??_Flash_Memory_Initialization
 11601  05CC  0862               	movf	??_Flash_Memory_Initialization,w
 11602  05CD  00A0               	movwf	setMemory_Data@data
 11603  05CE  3000               	movlw	0
 11604  05CF  319D  2525  3185   	fcall	_setMemory_Data
 11605                           
 11606                           ;MCU_B1.c: 947: setMemory_Data(1, 0xff);
 11607  05D2  30FF               	movlw	255
 11608  05D3  0020               	movlb	0	; select bank0
 11609  05D4  00E2               	movwf	??_Flash_Memory_Initialization
 11610  05D5  0862               	movf	??_Flash_Memory_Initialization,w
 11611  05D6  00A0               	movwf	setMemory_Data@data
 11612  05D7  3001               	movlw	1
 11613  05D8  319D  2525  3185   	fcall	_setMemory_Data
 11614                           
 11615                           ;MCU_B1.c: 948: setMemory_Data(2, 0xff);
 11616  05DB  30FF               	movlw	255
 11617  05DC  0020               	movlb	0	; select bank0
 11618  05DD  00E2               	movwf	??_Flash_Memory_Initialization
 11619  05DE  0862               	movf	??_Flash_Memory_Initialization,w
 11620  05DF  00A0               	movwf	setMemory_Data@data
 11621  05E0  3002               	movlw	2
 11622  05E1  319D  2525  3185   	fcall	_setMemory_Data
 11623                           
 11624                           ;MCU_B1.c: 949: setMemory_Data(3, 0xff);
 11625  05E4  30FF               	movlw	255
 11626  05E5  0020               	movlb	0	; select bank0
 11627  05E6  00E2               	movwf	??_Flash_Memory_Initialization
 11628  05E7  0862               	movf	??_Flash_Memory_Initialization,w
 11629  05E8  00A0               	movwf	setMemory_Data@data
 11630  05E9  3003               	movlw	3
 11631  05EA  319D  2525  3185   	fcall	_setMemory_Data
 11632                           
 11633                           ;MCU_B1.c: 950: setMemory_Data(4, 0xff);
 11634  05ED  30FF               	movlw	255
 11635  05EE  0020               	movlb	0	; select bank0
 11636  05EF  00E2               	movwf	??_Flash_Memory_Initialization
 11637  05F0  0862               	movf	??_Flash_Memory_Initialization,w
 11638  05F1  00A0               	movwf	setMemory_Data@data
 11639  05F2  3004               	movlw	4
 11640  05F3  319D  2525  3185   	fcall	_setMemory_Data
 11641                           
 11642                           ;MCU_B1.c: 951: setMemory_Data(5, 0xff);
 11643  05F6  30FF               	movlw	255
 11644  05F7  0020               	movlb	0	; select bank0
 11645  05F8  00E2               	movwf	??_Flash_Memory_Initialization
 11646  05F9  0862               	movf	??_Flash_Memory_Initialization,w
 11647  05FA  00A0               	movwf	setMemory_Data@data
 11648  05FB  3005               	movlw	5
 11649  05FC  319D  2525  3185   	fcall	_setMemory_Data
 11650                           
 11651                           ;MCU_B1.c: 952: setMemory_Data(31, 0xaa);
 11652  05FF  30AA               	movlw	170
 11653  0600  0020               	movlb	0	; select bank0
 11654  0601  00E2               	movwf	??_Flash_Memory_Initialization
 11655  0602  0862               	movf	??_Flash_Memory_Initialization,w
 11656  0603  00A0               	movwf	setMemory_Data@data
 11657  0604  301F               	movlw	31
 11658  0605  319D  2525  3185   	fcall	_setMemory_Data
 11659                           
 11660                           ;MCU_B1.c: 953: product->Data[21] = i;
 11661  0608  0020               	movlb	0	; select bank0
 11662  0609  0863               	movf	Flash_Memory_Initialization@i,w
 11663  060A  00E2               	movwf	??_Flash_Memory_Initialization
 11664  060B  0879               	movf	_product,w
 11665  060C  3E15               	addlw	21
 11666  060D  0086               	movwf	6
 11667  060E  3002               	movlw	2	; select bank4/5
 11668  060F  0087               	movwf	7
 11669  0610  0862               	movf	??_Flash_Memory_Initialization,w
 11670  0611  0081               	movwf	1
 11671                           
 11672                           ;MCU_B1.c: 954: product->Data[22] = i;
 11673  0612  0863               	movf	Flash_Memory_Initialization@i,w
 11674  0613  00E2               	movwf	??_Flash_Memory_Initialization
 11675  0614  0879               	movf	_product,w
 11676  0615  3E16               	addlw	22
 11677  0616  0086               	movwf	6
 11678  0617  3002               	movlw	2	; select bank4/5
 11679  0618  0087               	movwf	7
 11680  0619  0862               	movf	??_Flash_Memory_Initialization,w
 11681  061A  0081               	movwf	1
 11682                           
 11683                           ;MCU_B1.c: 955: product->Data[23] = i;
 11684  061B  0863               	movf	Flash_Memory_Initialization@i,w
 11685  061C  00E2               	movwf	??_Flash_Memory_Initialization
 11686  061D  0879               	movf	_product,w
 11687  061E  3E17               	addlw	23
 11688  061F  0086               	movwf	6
 11689  0620  3002               	movlw	2	; select bank4/5
 11690  0621  0087               	movwf	7
 11691  0622  0862               	movf	??_Flash_Memory_Initialization,w
 11692  0623  0081               	movwf	1
 11693                           
 11694                           ;MCU_B1.c: 956: GIE = 0;
 11695  0624  138B               	bcf	11,7	;volatile
 11696                           
 11697                           ;MCU_B1.c: 957: Flash_Memory_Write();
 11698  0625  3191  21DF         	fcall	_Flash_Memory_Write
 11699                           
 11700                           ;MCU_B1.c: 958: GIE = 1;
 11701  0627  178B               	bsf	11,7	;volatile
 11702                           
 11703                           ;MCU_B1.c: 959: myMain.FirstOpen = 1;
 11704  0628  0021               	movlb	1	; select bank1
 11705  0629  15A0               	bsf	_myMain^(0+128),3
 11706                           
 11707                           ;MCU_B1.c: 960: myMain.First = 1;
 11708  062A  16A0               	bsf	_myMain^(0+128),5
 11709  062B  0008               	return
 11710  062C                     __end_of_Flash_Memory_Initialization:	
 11711                           
 11712                           	psect	text68
 11713  1D25                     __ptext68:	
 11714 ;; *************** function _setMemory_Data *****************
 11715 ;; Defined at:
 11716 ;;		line 1075 in file "../src/MCU_B1.c"
 11717 ;; Parameters:    Size  Location     Type
 11718 ;;  address         1    wreg     unsigned char 
 11719 ;;  data            1    0[BANK0 ] unsigned char 
 11720 ;; Auto vars:     Size  Location     Type
 11721 ;;  address         1    2[BANK0 ] unsigned char 
 11722 ;; Return value:  Size  Location     Type
 11723 ;;		None               void
 11724 ;; Registers used:
 11725 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11726 ;; Tracked objects:
 11727 ;;		On entry : 0/0
 11728 ;;		On exit  : 0/0
 11729 ;;		Unchanged: 0/0
 11730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11731 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11734 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11735 ;;Total ram usage:        3 bytes
 11736 ;; Hardware stack levels used:    1
 11737 ;; Hardware stack levels required when called:    5
 11738 ;; This function calls:
 11739 ;;		Nothing
 11740 ;; This function is called by:
 11741 ;;		_Flash_Memory_Initialization
 11742 ;;		_Flash_Memory_Modify
 11743 ;; This function uses a non-reentrant model
 11744 ;;
 11745                           
 11746                           
 11747                           ;psect for function _setMemory_Data
 11748  1D25                     _setMemory_Data:	
 11749                           
 11750                           ;incstack = 0
 11751                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11752                           ;setMemory_Data@address stored from wreg
 11753  1D25  0020               	movlb	0	; select bank0
 11754  1D26  00A2               	movwf	setMemory_Data@address
 11755                           
 11756                           ;MCU_B1.c: 1076: Memory.Data[address] = data;
 11757  1D27  0820               	movf	setMemory_Data@data,w
 11758  1D28  00A1               	movwf	??_setMemory_Data
 11759  1D29  0822               	movf	setMemory_Data@address,w
 11760  1D2A  3EBE               	addlw	_Memory& (0+255)
 11761  1D2B  0086               	movwf	6
 11762  1D2C  3001               	movlw	1	; select bank3/4
 11763  1D2D  0087               	movwf	7
 11764  1D2E  0821               	movf	??_setMemory_Data,w
 11765  1D2F  0081               	movwf	1
 11766  1D30  0008               	return
 11767  1D31                     __end_of_setMemory_Data:	
 11768                           
 11769                           	psect	text69
 11770  11DF                     __ptext69:	
 11771 ;; *************** function _Flash_Memory_Write *****************
 11772 ;; Defined at:
 11773 ;;		line 1008 in file "../src/MCU_B1.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;  i               1    1[BANK0 ] unsigned char 
 11778 ;; Return value:  Size  Location     Type
 11779 ;;		None               void
 11780 ;; Registers used:
 11781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;Total ram usage:        2 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:    6
 11794 ;; This function calls:
 11795 ;;		_Flash_Memory_Unlock
 11796 ;; This function is called by:
 11797 ;;		_Flash_Memory_Initialization
 11798 ;;		_Flash_Memory_Modify
 11799 ;; This function uses a non-reentrant model
 11800 ;;
 11801                           
 11802                           
 11803                           ;psect for function _Flash_Memory_Write
 11804  11DF                     _Flash_Memory_Write:	
 11805                           
 11806                           ;MCU_B1.c: 1009: char i = 0;
 11807                           
 11808                           ;incstack = 0
 11809                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11810  11DF  0020               	movlb	0	; select bank0
 11811  11E0  01A1               	clrf	Flash_Memory_Write@i
 11812                           
 11813                           ;MCU_B1.c: 1010: CFGS = 0;
 11814  11E1  0023               	movlb	3	; select bank3
 11815  11E2  1315               	bcf	21,6	;volatile
 11816                           
 11817                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 11818  11E3  3030               	movlw	48
 11819  11E4  0092               	movwf	18	;volatile
 11820                           
 11821                           ;MCU_B1.c: 1012: PMDATH = 0;
 11822  11E5  0194               	clrf	20	;volatile
 11823                           
 11824                           ;MCU_B1.c: 1013: FREE = 0;
 11825  11E6  1215               	bcf	21,4	;volatile
 11826                           
 11827                           ;MCU_B1.c: 1014: LWLO = 1;
 11828  11E7  1695               	bsf	21,5	;volatile
 11829                           
 11830                           ;MCU_B1.c: 1015: WREN = 1;
 11831  11E8  1515               	bsf	21,2	;volatile
 11832                           
 11833                           ;MCU_B1.c: 1016: for (i = 0; i < 32; i++) {
 11834  11E9  0020               	movlb	0	; select bank0
 11835  11EA  01A1               	clrf	Flash_Memory_Write@i
 11836  11EB  3020               	movlw	32
 11837  11EC  0221               	subwf	Flash_Memory_Write@i,w
 11838  11ED  1803               	btfsc	3,0
 11839  11EE  2A07               	goto	l1209
 11840  11EF                     l9004:	
 11841                           
 11842                           ;MCU_B1.c: 1017: PMADRL = i;
 11843  11EF  0821               	movf	Flash_Memory_Write@i,w
 11844  11F0  0023               	movlb	3	; select bank3
 11845  11F1  0091               	movwf	17	;volatile
 11846                           
 11847                           ;MCU_B1.c: 1018: PMDATL = Memory.Data[i];
 11848  11F2  0020               	movlb	0	; select bank0
 11849  11F3  0821               	movf	Flash_Memory_Write@i,w
 11850  11F4  3EBE               	addlw	_Memory& (0+255)
 11851  11F5  0086               	movwf	6
 11852  11F6  3001               	movlw	1	; select bank3/4
 11853  11F7  0087               	movwf	7
 11854  11F8  0801               	movf	1,w
 11855  11F9  0023               	movlb	3	; select bank3
 11856  11FA  0093               	movwf	19	;volatile
 11857                           
 11858                           ;MCU_B1.c: 1019: Flash_Memory_Unlock();
 11859  11FB  319C  2490  3191   	fcall	_Flash_Memory_Unlock
 11860  11FE  3001               	movlw	1
 11861  11FF  0020               	movlb	0	; select bank0
 11862  1200  00A0               	movwf	??_Flash_Memory_Write
 11863  1201  0820               	movf	??_Flash_Memory_Write,w
 11864  1202  07A1               	addwf	Flash_Memory_Write@i,f
 11865  1203  3020               	movlw	32
 11866  1204  0221               	subwf	Flash_Memory_Write@i,w
 11867  1205  1C03               	skipc
 11868  1206  29EF               	goto	l9004
 11869  1207                     l1209:	
 11870                           
 11871                           ;MCU_B1.c: 1020: }
 11872                           ;MCU_B1.c: 1021: LWLO = 0;
 11873  1207  0023               	movlb	3	; select bank3
 11874  1208  1295               	bcf	21,5	;volatile
 11875                           
 11876                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 11877  1209  319C  2490         	fcall	_Flash_Memory_Unlock
 11878                           
 11879                           ;MCU_B1.c: 1023: WREN = 0;
 11880  120B  0023               	movlb	3	; select bank3
 11881  120C  1115               	bcf	21,2	;volatile
 11882  120D  0008               	return
 11883  120E                     __end_of_Flash_Memory_Write:	
 11884                           
 11885                           	psect	text70
 11886  1C90                     __ptext70:	
 11887 ;; *************** function _Flash_Memory_Unlock *****************
 11888 ;; Defined at:
 11889 ;;		line 987 in file "../src/MCU_B1.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;		None
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;		None
 11894 ;; Return value:  Size  Location     Type
 11895 ;;		None               void
 11896 ;; Registers used:
 11897 ;;		wreg
 11898 ;; Tracked objects:
 11899 ;;		On entry : 0/0
 11900 ;;		On exit  : 0/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;Total ram usage:        0 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; Hardware stack levels required when called:    5
 11910 ;; This function calls:
 11911 ;;		Nothing
 11912 ;; This function is called by:
 11913 ;;		_Flash_Memory_Write
 11914 ;;		_Flash_Memory_Erasing
 11915 ;; This function uses a non-reentrant model
 11916 ;;
 11917                           
 11918                           
 11919                           ;psect for function _Flash_Memory_Unlock
 11920  1C90                     _Flash_Memory_Unlock:	
 11921                           
 11922                           ;MCU_B1.c: 988: PMCON2 = 0x55;
 11923                           
 11924                           ;incstack = 0
 11925                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11926  1C90  3055               	movlw	85
 11927  1C91  0023               	movlb	3	; select bank3
 11928  1C92  0096               	movwf	22	;volatile
 11929                           
 11930                           ;MCU_B1.c: 989: PMCON2 = 0xaa;
 11931  1C93  30AA               	movlw	170
 11932  1C94  0096               	movwf	22	;volatile
 11933                           
 11934                           ;MCU_B1.c: 990: WR = 1;
 11935  1C95  1495               	bsf	21,1	;volatile
 11936                           
 11937                           ;MCU_B1.c: 991: __nop();
 11938  1C96  0000               	nop
 11939                           
 11940                           ;MCU_B1.c: 992: __nop();
 11941  1C97  0000               	nop
 11942  1C98  0008               	return
 11943  1C99                     __end_of_Flash_Memory_Unlock:	
 11944                           
 11945                           	psect	text71
 11946  1F34                     __ptext71:	
 11947 ;; *************** function _Flash_Memory_Read *****************
 11948 ;; Defined at:
 11949 ;;		line 996 in file "../src/MCU_B1.c"
 11950 ;; Parameters:    Size  Location     Type
 11951 ;;  address         1    wreg     unsigned char 
 11952 ;; Auto vars:     Size  Location     Type
 11953 ;;  address         1    2[BANK0 ] unsigned char 
 11954 ;;  ret             1    3[BANK0 ] unsigned char 
 11955 ;;  i               1    1[BANK0 ] unsigned char 
 11956 ;; Return value:  Size  Location     Type
 11957 ;;                  1    wreg      unsigned char 
 11958 ;; Registers used:
 11959 ;;		wreg, status,2
 11960 ;; Tracked objects:
 11961 ;;		On entry : 0/0
 11962 ;;		On exit  : 0/0
 11963 ;;		Unchanged: 0/0
 11964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11968 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11969 ;;Total ram usage:        4 bytes
 11970 ;; Hardware stack levels used:    1
 11971 ;; Hardware stack levels required when called:    5
 11972 ;; This function calls:
 11973 ;;		Nothing
 11974 ;; This function is called by:
 11975 ;;		_Flash_Memory_Initialization
 11976 ;;		_Flash_Memory_Modify
 11977 ;; This function uses a non-reentrant model
 11978 ;;
 11979                           
 11980                           
 11981                           ;psect for function _Flash_Memory_Read
 11982  1F34                     _Flash_Memory_Read:	
 11983                           
 11984                           ;incstack = 0
 11985                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11986                           ;Flash_Memory_Read@address stored from wreg
 11987  1F34  0020               	movlb	0	; select bank0
 11988  1F35  00A2               	movwf	Flash_Memory_Read@address
 11989                           
 11990                           ;MCU_B1.c: 997: char i = 0, ret = 0;
 11991  1F36  01A1               	clrf	Flash_Memory_Read@i
 11992  1F37  01A3               	clrf	Flash_Memory_Read@ret
 11993                           
 11994                           ;MCU_B1.c: 998: PMADRH = 0x30;
 11995  1F38  3030               	movlw	48
 11996  1F39  0023               	movlb	3	; select bank3
 11997  1F3A  0092               	movwf	18	;volatile
 11998                           
 11999                           ;MCU_B1.c: 999: PMADRL = address;
 12000  1F3B  0020               	movlb	0	; select bank0
 12001  1F3C  0822               	movf	Flash_Memory_Read@address,w
 12002  1F3D  0023               	movlb	3	; select bank3
 12003  1F3E  0091               	movwf	17	;volatile
 12004                           
 12005                           ;MCU_B1.c: 1000: CFGS = 0;
 12006  1F3F  1315               	bcf	21,6	;volatile
 12007                           
 12008                           ;MCU_B1.c: 1001: RD = 1;
 12009  1F40  1415               	bsf	21,0	;volatile
 12010                           
 12011                           ;MCU_B1.c: 1002: i = PMDATH;
 12012  1F41  0814               	movf	20,w	;volatile
 12013  1F42  0020               	movlb	0	; select bank0
 12014  1F43  00A0               	movwf	??_Flash_Memory_Read
 12015  1F44  0820               	movf	??_Flash_Memory_Read,w
 12016  1F45  00A1               	movwf	Flash_Memory_Read@i
 12017                           
 12018                           ;MCU_B1.c: 1003: ret = PMDATL;
 12019  1F46  0023               	movlb	3	; select bank3
 12020  1F47  0813               	movf	19,w	;volatile
 12021  1F48  0020               	movlb	0	; select bank0
 12022  1F49  00A0               	movwf	??_Flash_Memory_Read
 12023  1F4A  0820               	movf	??_Flash_Memory_Read,w
 12024  1F4B  00A3               	movwf	Flash_Memory_Read@ret
 12025                           
 12026                           ;MCU_B1.c: 1004: return ret;
 12027  1F4C  0823               	movf	Flash_Memory_Read@ret,w
 12028  1F4D  0008               	return
 12029  1F4E                     __end_of_Flash_Memory_Read:	
 12030                           
 12031                           	psect	text72
 12032  062C                     __ptext72:	
 12033 ;; *************** function _Exception_Main *****************
 12034 ;; Defined at:
 12035 ;;		line 523 in file "../src/Main_B1.c"
 12036 ;; Parameters:    Size  Location     Type
 12037 ;;		None
 12038 ;; Auto vars:     Size  Location     Type
 12039 ;;  i               2    4[BANK1 ] int 
 12040 ;;  i               2    2[BANK1 ] int 
 12041 ;;  lights          1    6[BANK1 ] unsigned char 
 12042 ;;  error           1    1[BANK1 ] unsigned char 
 12043 ;;  count           1    0[BANK1 ] unsigned char 
 12044 ;; Return value:  Size  Location     Type
 12045 ;;		None               void
 12046 ;; Registers used:
 12047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12048 ;; Tracked objects:
 12049 ;;		On entry : 0/0
 12050 ;;		On exit  : 0/0
 12051 ;;		Unchanged: 0/0
 12052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;Total ram usage:        8 bytes
 12058 ;; Hardware stack levels used:    1
 12059 ;; Hardware stack levels required when called:    9
 12060 ;; This function calls:
 12061 ;;		_getDimmerLights_Line
 12062 ;;		_getDimmerLights_Status
 12063 ;;		_getMain_All_Error_Status
 12064 ;;		_getMain_LightsStatus
 12065 ;;		_setBuz
 12066 ;;		_setDimmerLights_SwOff
 12067 ;;		_setLED
 12068 ;; This function is called by:
 12069 ;;		_main
 12070 ;; This function uses a non-reentrant model
 12071 ;;
 12072                           
 12073                           
 12074                           ;psect for function _Exception_Main
 12075  062C                     _Exception_Main:	
 12076                           
 12077                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 12078                           
 12079                           ;incstack = 0
 12080                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12081  062C  3000               	movlw	0
 12082  062D  3192  226E  3186   	fcall	_getMain_All_Error_Status
 12083  0630  0020               	movlb	0	; select bank0
 12084  0631  00EB               	movwf	??_Exception_Main
 12085  0632  086B               	movf	??_Exception_Main,w
 12086  0633  0021               	movlb	1	; select bank1
 12087  0634  00EA               	movwf	Exception_Main@error^(0+128)
 12088                           
 12089                           ;Main_B1.c: 525: char lights = 0, count = 1;
 12090  0635  01EF               	clrf	Exception_Main@lights^(0+128)
 12091  0636  01E9               	clrf	Exception_Main@count^(0+128)
 12092  0637  0AE9               	incf	Exception_Main@count^(0+128),f
 12093                           
 12094                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 12095  0638  1DAB               	btfss	(_myMain^(0+128)+11),3
 12096  0639  2E47               	goto	l10128
 12097                           
 12098                           ;Main_B1.c: 527: if (error == 0) {
 12099  063A  08EA               	movf	Exception_Main@error^(0+128),f
 12100  063B  1D03               	skipz
 12101  063C  0008               	return
 12102                           
 12103                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 12104  063D  11AB               	bcf	(_myMain^(0+128)+11),3
 12105                           
 12106                           ;Main_B1.c: 533: setLED(99, 10);
 12107  063E  300A               	movlw	10
 12108  063F  0020               	movlb	0	; select bank0
 12109  0640  00EB               	movwf	??_Exception_Main
 12110  0641  086B               	movf	??_Exception_Main,w
 12111  0642  00A2               	movwf	setLED@command
 12112  0643  3063               	movlw	99
 12113  0644  3193  23E2         	fcall	_setLED
 12114                           
 12115                           ;Main_B1.c: 535: }
 12116                           ;Main_B1.c: 536: } else {
 12117  0646  0008               	return
 12118  0647                     l10128:	
 12119                           
 12120                           ;Main_B1.c: 537: if (error != 0) {
 12121  0647  0021               	movlb	1	; select bank1
 12122  0648  086A               	movf	Exception_Main@error^(0+128),w
 12123  0649  1903               	btfsc	3,2
 12124  064A  0008               	return
 12125                           
 12126                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 12127  064B  15AB               	bsf	(_myMain^(0+128)+11),3
 12128                           
 12129                           ;Main_B1.c: 541: setLED(99, 11);
 12130  064C  300B               	movlw	11
 12131  064D  0020               	movlb	0	; select bank0
 12132  064E  00EB               	movwf	??_Exception_Main
 12133  064F  086B               	movf	??_Exception_Main,w
 12134  0650  00A2               	movwf	setLED@command
 12135  0651  3063               	movlw	99
 12136  0652  3193  23E2  3186   	fcall	_setLED
 12137                           
 12138                           ;Main_B1.c: 543: switch (error) {
 12139  0655  2EFD               	goto	l10176
 12140  0656                     l10134:	
 12141                           ;Main_B1.c: 544: case 2:
 12142                           
 12143                           
 12144                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12145  0656  319C  24B6  3186   	fcall	_getMain_LightsStatus
 12146  0659  3A01               	xorlw	1
 12147  065A  1D03               	skipz
 12148  065B  2E65               	goto	l10138
 12149                           
 12150                           ;Main_B1.c: 546: setBuz(10, 300);
 12151  065C  302C               	movlw	44
 12152  065D  0020               	movlb	0	; select bank0
 12153  065E  00A9               	movwf	setBuz@time
 12154  065F  3001               	movlw	1
 12155  0660  00AA               	movwf	setBuz@time+1
 12156  0661  300A               	movlw	10
 12157  0662  3197  27A7  3186   	fcall	_setBuz
 12158  0665                     l10138:	
 12159                           
 12160                           ;Main_B1.c: 547: }
 12161                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12162  0665  0021               	movlb	1	; select bank1
 12163  0666  01EB               	clrf	Exception_Main@i^(0+128)
 12164  0667  01EC               	clrf	(Exception_Main@i+1)^(0+128)
 12165  0668                     l10148:	
 12166  0668  086C               	movf	(Exception_Main@i+1)^(0+128),w
 12167  0669  3A80               	xorlw	128
 12168  066A  0020               	movlb	0	; select bank0
 12169  066B  00EB               	movwf	??_Exception_Main
 12170  066C  3080               	movlw	128
 12171  066D  026B               	subwf	??_Exception_Main,w
 12172  066E  1D03               	skipz
 12173  066F  2E73               	goto	u11655
 12174  0670  0021               	movlb	1	; select bank1
 12175  0671  0869               	movf	Exception_Main@count^(0+128),w
 12176  0672  026B               	subwf	Exception_Main@i^(0+128),w
 12177  0673                     u11655:	
 12178  0673  1803               	btfsc	3,0
 12179  0674  2E97               	goto	u11650
 12180                           
 12181                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12182  0675  0021               	movlb	1	; select bank1
 12183  0676  086B               	movf	Exception_Main@i^(0+128),w
 12184  0677  3E01               	addlw	1
 12185  0678  319D  25BB  3186   	fcall	_getDimmerLights_Status
 12186  067B  3A01               	xorlw	1
 12187  067C  1D03               	skipz
 12188  067D  2E91               	goto	l10146
 12189                           
 12190                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12191  067E  0020               	movlb	0	; select bank0
 12192  067F  086F               	movf	_DimmerLights,w
 12193  0680  3E0B               	addlw	11
 12194  0681  0086               	movwf	6
 12195  0682  3001               	movlw	1	; select bank2/3
 12196  0683  0087               	movwf	7
 12197  0684  1481               	bsf	1,1
 12198                           
 12199                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12200  0685  086F               	movf	_DimmerLights,w
 12201  0686  3E02               	addlw	2
 12202  0687  0086               	movwf	6
 12203  0688  3001               	movlw	1	; select bank2/3
 12204  0689  0087               	movwf	7
 12205  068A  1081               	bcf	1,1
 12206                           
 12207                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12208  068B  0021               	movlb	1	; select bank1
 12209  068C  086B               	movf	Exception_Main@i^(0+128),w
 12210  068D  3E01               	addlw	1
 12211  068E  3195  2568  3186   	fcall	_setDimmerLights_SwOff
 12212  0691                     l10146:	
 12213  0691  3001               	movlw	1
 12214  0692  0021               	movlb	1	; select bank1
 12215  0693  07EB               	addwf	Exception_Main@i^(0+128),f
 12216  0694  3000               	movlw	0
 12217  0695  3DEC               	addwfc	(Exception_Main@i+1)^(0+128),f
 12218  0696  2E68               	goto	l10148
 12219  0697                     u11650:	
 12220  0697  0021               	movlb	1	; select bank1
 12221  0698  0008               	return
 12222  0699                     l10150:	
 12223                           ;Main_B1.c: 558: case 3:
 12224                           
 12225                           ;Main_B1.c: 555: }
 12226                           ;Main_B1.c: 556: }
 12227                           ;Main_B1.c: 557: break;
 12228                           
 12229                           
 12230                           ;Main_B1.c: 560: setBuz(5, 300);
 12231  0699  302C               	movlw	44
 12232  069A  0020               	movlb	0	; select bank0
 12233  069B  00A9               	movwf	setBuz@time
 12234  069C  3001               	movlw	1
 12235  069D  00AA               	movwf	setBuz@time+1
 12236  069E  3005               	movlw	5
 12237  069F  3197  27A7  3186   	fcall	_setBuz
 12238                           
 12239                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12240  06A2  319C  24E1  3186   	fcall	_getDimmerLights_Line
 12241  06A5  0020               	movlb	0	; select bank0
 12242  06A6  00EB               	movwf	??_Exception_Main
 12243  06A7  086B               	movf	??_Exception_Main,w
 12244  06A8  0021               	movlb	1	; select bank1
 12245  06A9  00EF               	movwf	Exception_Main@lights^(0+128)
 12246                           
 12247                           ;Main_B1.c: 562: if (lights == 0) {
 12248  06AA  08EF               	movf	Exception_Main@lights^(0+128),f
 12249  06AB  1D03               	skipz
 12250  06AC  2EE0               	goto	l10168
 12251                           
 12252                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12253  06AD  01ED               	clrf	Exception_Main@i_3438^(0+128)
 12254  06AE  01EE               	clrf	(Exception_Main@i_3438+1)^(0+128)
 12255  06AF                     l10166:	
 12256  06AF  086E               	movf	(Exception_Main@i_3438+1)^(0+128),w
 12257  06B0  3A80               	xorlw	128
 12258  06B1  0020               	movlb	0	; select bank0
 12259  06B2  00EB               	movwf	??_Exception_Main
 12260  06B3  3080               	movlw	128
 12261  06B4  026B               	subwf	??_Exception_Main,w
 12262  06B5  1D03               	skipz
 12263  06B6  2EBA               	goto	u11685
 12264  06B7  0021               	movlb	1	; select bank1
 12265  06B8  0869               	movf	Exception_Main@count^(0+128),w
 12266  06B9  026D               	subwf	Exception_Main@i_3438^(0+128),w
 12267  06BA                     u11685:	
 12268  06BA  1803               	btfsc	3,0
 12269  06BB  2EDE               	goto	u11680
 12270                           
 12271                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12272  06BC  0021               	movlb	1	; select bank1
 12273  06BD  086D               	movf	Exception_Main@i_3438^(0+128),w
 12274  06BE  3E01               	addlw	1
 12275  06BF  319D  25BB  3186   	fcall	_getDimmerLights_Status
 12276  06C2  3A01               	xorlw	1
 12277  06C3  1D03               	skipz
 12278  06C4  2ED8               	goto	l10164
 12279                           
 12280                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12281  06C5  0020               	movlb	0	; select bank0
 12282  06C6  086F               	movf	_DimmerLights,w
 12283  06C7  3E0B               	addlw	11
 12284  06C8  0086               	movwf	6
 12285  06C9  3001               	movlw	1	; select bank2/3
 12286  06CA  0087               	movwf	7
 12287  06CB  1481               	bsf	1,1
 12288                           
 12289                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12290  06CC  086F               	movf	_DimmerLights,w
 12291  06CD  3E02               	addlw	2
 12292  06CE  0086               	movwf	6
 12293  06CF  3001               	movlw	1	; select bank2/3
 12294  06D0  0087               	movwf	7
 12295  06D1  1081               	bcf	1,1
 12296                           
 12297                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12298  06D2  0021               	movlb	1	; select bank1
 12299  06D3  086D               	movf	Exception_Main@i_3438^(0+128),w
 12300  06D4  3E01               	addlw	1
 12301  06D5  3195  2568  3186   	fcall	_setDimmerLights_SwOff
 12302  06D8                     l10164:	
 12303  06D8  3001               	movlw	1
 12304  06D9  0021               	movlb	1	; select bank1
 12305  06DA  07ED               	addwf	Exception_Main@i_3438^(0+128),f
 12306  06DB  3000               	movlw	0
 12307  06DC  3DEE               	addwfc	(Exception_Main@i_3438+1)^(0+128),f
 12308  06DD  2EAF               	goto	l10166
 12309  06DE                     u11680:	
 12310  06DE  0021               	movlb	1	; select bank1
 12311  06DF  0008               	return
 12312  06E0                     l10168:	
 12313                           ;Main_B1.c: 570: }
 12314                           ;Main_B1.c: 571: }
 12315                           ;Main_B1.c: 572: } else {
 12316                           
 12317                           
 12318                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12319  06E0  0021               	movlb	1	; select bank1
 12320  06E1  086F               	movf	Exception_Main@lights^(0+128),w
 12321  06E2  319D  25BB  3186   	fcall	_getDimmerLights_Status
 12322  06E5  3A01               	xorlw	1
 12323  06E6  1903               	btfsc	3,2
 12324  06E7  2EEA               	goto	l10170
 12325  06E8  0021               	movlb	1	; select bank1
 12326  06E9  0008               	return
 12327  06EA                     l10170:	
 12328                           
 12329                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12330  06EA  0020               	movlb	0	; select bank0
 12331  06EB  086F               	movf	_DimmerLights,w
 12332  06EC  3E0B               	addlw	11
 12333  06ED  0086               	movwf	6
 12334  06EE  3001               	movlw	1	; select bank2/3
 12335  06EF  0087               	movwf	7
 12336  06F0  1481               	bsf	1,1
 12337                           
 12338                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12339  06F1  086F               	movf	_DimmerLights,w
 12340  06F2  3E02               	addlw	2
 12341  06F3  0086               	movwf	6
 12342  06F4  3001               	movlw	1	; select bank2/3
 12343  06F5  0087               	movwf	7
 12344  06F6  1081               	bcf	1,1
 12345                           
 12346                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12347  06F7  0021               	movlb	1	; select bank1
 12348  06F8  086F               	movf	Exception_Main@lights^(0+128),w
 12349  06F9  3195  2568         	fcall	_setDimmerLights_SwOff
 12350  06FB  0021               	movlb	1	; select bank1
 12351  06FC  0008               	return
 12352  06FD                     l10176:	
 12353                           ;Main_B1.c: 582: }
 12354                           
 12355                           ;Main_B1.c: 579: }
 12356                           ;Main_B1.c: 580: }
 12357                           ;Main_B1.c: 581: break;
 12358                           
 12359  06FD  0021               	movlb	1	; select bank1
 12360  06FE  086A               	movf	Exception_Main@error^(0+128),w
 12361                           
 12362                           ; Switch size 1, requested type "space"
 12363                           ; Number of cases is 2, Range of values is 2 to 3
 12364                           ; switch strategies available:
 12365                           ; Name         Instructions Cycles
 12366                           ; simple_byte            7     4 (average)
 12367                           ; direct_byte           13     9 (fixed)
 12368                           ; jumptable            263     9 (fixed)
 12369                           ;	Chosen strategy is simple_byte
 12370  06FF  3A02               	xorlw	2	; case 2
 12371  0700  1903               	skipnz
 12372  0701  2E56               	goto	l10134
 12373  0702  3A01               	xorlw	1	; case 3
 12374  0703  1903               	skipnz
 12375  0704  2E99               	goto	l10150
 12376  0705  2F07               	goto	l1456
 12377  0706  0008               	return
 12378  0707                     l1456:	
 12379  0707  0008               	return
 12380  0708                     __end_of_Exception_Main:	
 12381                           
 12382                           	psect	text73
 12383  1CE1                     __ptext73:	
 12384 ;; *************** function _getDimmerLights_Line *****************
 12385 ;; Defined at:
 12386 ;;		line 736 in file "../src/Dimmer_B1.c"
 12387 ;; Parameters:    Size  Location     Type
 12388 ;;		None
 12389 ;; Auto vars:     Size  Location     Type
 12390 ;;  line            1    0[BANK0 ] unsigned char 
 12391 ;; Return value:  Size  Location     Type
 12392 ;;                  1    wreg      unsigned char 
 12393 ;; Registers used:
 12394 ;;		wreg, status,2
 12395 ;; Tracked objects:
 12396 ;;		On entry : 0/0
 12397 ;;		On exit  : 0/0
 12398 ;;		Unchanged: 0/0
 12399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12403 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;Total ram usage:        1 bytes
 12405 ;; Hardware stack levels used:    1
 12406 ;; Hardware stack levels required when called:    5
 12407 ;; This function calls:
 12408 ;;		Nothing
 12409 ;; This function is called by:
 12410 ;;		_Exception_Main
 12411 ;; This function uses a non-reentrant model
 12412 ;;
 12413                           
 12414                           
 12415                           ;psect for function _getDimmerLights_Line
 12416  1CE1                     _getDimmerLights_Line:	
 12417                           
 12418                           ;Dimmer_B1.c: 737: char line = 0;
 12419                           
 12420                           ;incstack = 0
 12421                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12422  1CE1  0020               	movlb	0	; select bank0
 12423  1CE2  01A0               	clrf	getDimmerLights_Line@line
 12424                           
 12425                           ;Dimmer_B1.c: 739: if (DimmerLights1.Line == 1) {
 12426  1CE3  0022               	movlb	2	; select bank2
 12427  1CE4  1F5D               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12428  1CE5  2CE9               	goto	l9282
 12429                           
 12430                           ;Dimmer_B1.c: 740: line = 1;
 12431  1CE6  0020               	movlb	0	; select bank0
 12432  1CE7  01A0               	clrf	getDimmerLights_Line@line
 12433  1CE8  0AA0               	incf	getDimmerLights_Line@line,f
 12434  1CE9                     l9282:	
 12435                           
 12436                           ;Dimmer_B1.c: 741: }
 12437                           ;Dimmer_B1.c: 753: return line;
 12438  1CE9  0020               	movlb	0	; select bank0
 12439  1CEA  0820               	movf	getDimmerLights_Line@line,w
 12440  1CEB  0008               	return
 12441  1CEC                     __end_of_getDimmerLights_Line:	
 12442                           
 12443                           	psect	text74
 12444  1F4E                     __ptext74:	
 12445 ;; *************** function _DimmerLights_Main *****************
 12446 ;; Defined at:
 12447 ;;		line 502 in file "../src/Dimmer_B1.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;		None
 12450 ;; Auto vars:     Size  Location     Type
 12451 ;;		None
 12452 ;; Return value:  Size  Location     Type
 12453 ;;		None               void
 12454 ;; Registers used:
 12455 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12456 ;; Tracked objects:
 12457 ;;		On entry : 0/0
 12458 ;;		On exit  : 0/0
 12459 ;;		Unchanged: 0/0
 12460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;Total ram usage:        0 bytes
 12466 ;; Hardware stack levels used:    1
 12467 ;; Hardware stack levels required when called:   10
 12468 ;; This function calls:
 12469 ;;		_getLoad_OK
 12470 ;;		_getMain_All_Error_Status
 12471 ;;		_getMain_LightsStatus
 12472 ;;		_setDimmerLights_Main
 12473 ;; This function is called by:
 12474 ;;		_main
 12475 ;; This function uses a non-reentrant model
 12476 ;;
 12477                           
 12478                           
 12479                           ;psect for function _DimmerLights_Main
 12480  1F4E                     _DimmerLights_Main:	
 12481                           
 12482                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
 12483                           
 12484                           ;incstack = 0
 12485                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12486  1F4E  0021               	movlb	1	; select bank1
 12487  1F4F  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 12488  1F50  2F66               	goto	l9764
 12489                           
 12490                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 12491  1F51  319C  246F  319F   	fcall	_getLoad_OK
 12492  1F54  3A01               	xorlw	1
 12493  1F55  1903               	skipnz
 12494  1F56  2F64               	goto	l730
 12495  1F57  3000               	movlw	0
 12496  1F58  3192  226E  319F   	fcall	_getMain_All_Error_Status
 12497  1F5B  3800               	iorlw	0
 12498  1F5C  1D03               	skipz
 12499  1F5D  2F64               	goto	l730
 12500  1F5E  319C  24B6  319F   	fcall	_getMain_LightsStatus
 12501  1F61  3800               	iorlw	0
 12502  1F62  1D03               	skipz
 12503  1F63  2F66               	goto	l9764
 12504  1F64                     l730:	
 12505                           
 12506                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
 12507  1F64  0021               	movlb	1	; select bank1
 12508  1F65  1146               	bcf	_Dimmer^(0+128),2	;volatile
 12509  1F66                     l9764:	
 12510                           
 12511                           ;Dimmer_B1.c: 517: }
 12512                           ;Dimmer_B1.c: 518: }
 12513                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
 12514  1F66  3001               	movlw	1
 12515  1F67  3196  2606         	fcall	_setDimmerLights_Main
 12516  1F69  0008               	return
 12517  1F6A                     __end_of_DimmerLights_Main:	
 12518                           
 12519                           	psect	text75
 12520  1606                     __ptext75:	
 12521 ;; *************** function _setDimmerLights_Main *****************
 12522 ;; Defined at:
 12523 ;;		line 536 in file "../src/Dimmer_B1.c"
 12524 ;; Parameters:    Size  Location     Type
 12525 ;;  lights          1    wreg     unsigned char 
 12526 ;; Auto vars:     Size  Location     Type
 12527 ;;  lights          1   78[BANK0 ] unsigned char 
 12528 ;; Return value:  Size  Location     Type
 12529 ;;		None               void
 12530 ;; Registers used:
 12531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12532 ;; Tracked objects:
 12533 ;;		On entry : 0/0
 12534 ;;		On exit  : 0/0
 12535 ;;		Unchanged: 0/0
 12536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;Total ram usage:        1 bytes
 12542 ;; Hardware stack levels used:    1
 12543 ;; Hardware stack levels required when called:    9
 12544 ;; This function calls:
 12545 ;;		_DimmerLightsPointSelect
 12546 ;;		_getDimmerLights_Allow_Condition
 12547 ;;		_setDimmerLights
 12548 ;;		_setDimmerLights_Adj
 12549 ;; This function is called by:
 12550 ;;		_DimmerLights_Main
 12551 ;; This function uses a non-reentrant model
 12552 ;;
 12553                           
 12554                           
 12555                           ;psect for function _setDimmerLights_Main
 12556  1606                     _setDimmerLights_Main:	
 12557                           
 12558                           ;incstack = 0
 12559                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12560                           ;setDimmerLights_Main@lights stored from wreg
 12561  1606  0020               	movlb	0	; select bank0
 12562  1607  00EE               	movwf	setDimmerLights_Main@lights
 12563                           
 12564                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
 12565  1608  086E               	movf	setDimmerLights_Main@lights,w
 12566  1609  319C  24D6  3196   	fcall	_DimmerLightsPointSelect
 12567                           
 12568                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
 12569  160C  0020               	movlb	0	; select bank0
 12570  160D  086F               	movf	_DimmerLights,w
 12571  160E  3E0A               	addlw	10
 12572  160F  0086               	movwf	6
 12573  1610  3001               	movlw	1	; select bank2/3
 12574  1611  0087               	movwf	7
 12575  1612  1C81               	btfss	1,1
 12576  1613  2E35               	goto	l9262
 12577                           
 12578                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12579  1614  086E               	movf	setDimmerLights_Main@lights,w
 12580  1615  319E  26D3  3196   	fcall	_getDimmerLights_Allow_Condition
 12581  1618  3800               	iorlw	0
 12582  1619  1D03               	skipz
 12583  161A  0008               	return
 12584                           
 12585                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
 12586  161B  0020               	movlb	0	; select bank0
 12587  161C  086F               	movf	_DimmerLights,w
 12588  161D  3E0A               	addlw	10
 12589  161E  0086               	movwf	6
 12590  161F  3001               	movlw	1	; select bank2/3
 12591  1620  0087               	movwf	7
 12592  1621  1081               	bcf	1,1
 12593                           
 12594                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
 12595  1622  086F               	movf	_DimmerLights,w
 12596  1623  3E0A               	addlw	10
 12597  1624  0086               	movwf	6
 12598  1625  3001               	movlw	1	; select bank2/3
 12599  1626  0087               	movwf	7
 12600  1627  1C01               	btfss	1,0
 12601  1628  2E2F               	goto	l9260
 12602                           
 12603                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
 12604  1629  01EB               	clrf	setDimmerLights@status
 12605  162A  0AEB               	incf	setDimmerLights@status,f
 12606  162B  086E               	movf	setDimmerLights_Main@lights,w
 12607  162C  3196  2656         	fcall	_setDimmerLights
 12608                           
 12609                           ;Dimmer_B1.c: 544: } else {
 12610  162E  0008               	return
 12611  162F                     l9260:	
 12612                           
 12613                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
 12614  162F  0020               	movlb	0	; select bank0
 12615  1630  01EB               	clrf	setDimmerLights@status
 12616  1631  086E               	movf	setDimmerLights_Main@lights,w
 12617  1632  3196  2656         	fcall	_setDimmerLights
 12618                           
 12619                           ;Dimmer_B1.c: 546: }
 12620                           ;Dimmer_B1.c: 547: }
 12621                           ;Dimmer_B1.c: 548: } else {
 12622  1634  0008               	return
 12623  1635                     l9262:	
 12624                           
 12625                           ;Dimmer_B1.c: 549: if (DimmerLights->TriggerAdj == 1) {
 12626  1635  0020               	movlb	0	; select bank0
 12627  1636  086F               	movf	_DimmerLights,w
 12628  1637  3E0A               	addlw	10
 12629  1638  0086               	movwf	6
 12630  1639  3001               	movlw	1	; select bank2/3
 12631  163A  0087               	movwf	7
 12632  163B  1D81               	btfss	1,3
 12633  163C  0008               	return
 12634                           
 12635                           ;Dimmer_B1.c: 550: DimmerLights->TriggerAdj = 0;
 12636  163D  086F               	movf	_DimmerLights,w
 12637  163E  3E0A               	addlw	10
 12638  163F  0086               	movwf	6
 12639  1640  3001               	movlw	1	; select bank2/3
 12640  1641  0087               	movwf	7
 12641  1642  1181               	bcf	1,3
 12642                           
 12643                           ;Dimmer_B1.c: 551: if (DimmerLights->SwitchAdj == 1) {
 12644  1643  086F               	movf	_DimmerLights,w
 12645  1644  3E0A               	addlw	10
 12646  1645  0086               	movwf	6
 12647  1646  3001               	movlw	1	; select bank2/3
 12648  1647  0087               	movwf	7
 12649  1648  1D01               	btfss	1,2
 12650  1649  2E50               	goto	l9268
 12651                           
 12652                           ;Dimmer_B1.c: 552: setDimmerLights_Adj(lights, 1);
 12653  164A  01EB               	clrf	setDimmerLights_Adj@status
 12654  164B  0AEB               	incf	setDimmerLights_Adj@status,f
 12655  164C  086E               	movf	setDimmerLights_Main@lights,w
 12656  164D  3197  274F         	fcall	_setDimmerLights_Adj
 12657                           
 12658                           ;Dimmer_B1.c: 553: } else {
 12659  164F  0008               	return
 12660  1650                     l9268:	
 12661                           
 12662                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 0);
 12663  1650  0020               	movlb	0	; select bank0
 12664  1651  01EB               	clrf	setDimmerLights_Adj@status
 12665  1652  086E               	movf	setDimmerLights_Main@lights,w
 12666  1653  3197  274F         	fcall	_setDimmerLights_Adj
 12667  1655  0008               	return
 12668  1656                     __end_of_setDimmerLights_Main:	
 12669                           
 12670                           	psect	text76
 12671  174F                     __ptext76:	
 12672 ;; *************** function _setDimmerLights_Adj *****************
 12673 ;; Defined at:
 12674 ;;		line 672 in file "../src/Dimmer_B1.c"
 12675 ;; Parameters:    Size  Location     Type
 12676 ;;  lights          1    wreg     unsigned char 
 12677 ;;  status          1   75[BANK0 ] unsigned char 
 12678 ;; Auto vars:     Size  Location     Type
 12679 ;;  lights          1   77[BANK0 ] unsigned char 
 12680 ;; Return value:  Size  Location     Type
 12681 ;;		None               void
 12682 ;; Registers used:
 12683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12684 ;; Tracked objects:
 12685 ;;		On entry : 0/0
 12686 ;;		On exit  : 0/0
 12687 ;;		Unchanged: 0/0
 12688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12689 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12693 ;;Total ram usage:        3 bytes
 12694 ;; Hardware stack levels used:    1
 12695 ;; Hardware stack levels required when called:    8
 12696 ;; This function calls:
 12697 ;;		_setBuz
 12698 ;;		_setDimmerLights_Line
 12699 ;;		_setPercentValue
 12700 ;;		_setProductData
 12701 ;;		_setRF_DimmerLights
 12702 ;;		_setTxData
 12703 ;; This function is called by:
 12704 ;;		_setDimmerLights_Main
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           
 12709                           ;psect for function _setDimmerLights_Adj
 12710  174F                     _setDimmerLights_Adj:	
 12711                           
 12712                           ;incstack = 0
 12713                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12714                           ;setDimmerLights_Adj@lights stored from wreg
 12715  174F  0020               	movlb	0	; select bank0
 12716  1750  00ED               	movwf	setDimmerLights_Adj@lights
 12717                           
 12718                           ;Dimmer_B1.c: 674: if (status == 1) {
 12719  1751  086B               	movf	setDimmerLights_Adj@status,w
 12720  1752  3A01               	xorlw	1
 12721  1753  1D03               	skipz
 12722  1754  2F67               	goto	l8946
 12723                           
 12724                           ;Dimmer_B1.c: 675: DimmerLights->AdjSw = 1;
 12725  1755  0A6F               	incf	_DimmerLights,w
 12726  1756  0086               	movwf	6
 12727  1757  3001               	movlw	1	; select bank2/3
 12728  1758  0087               	movwf	7
 12729  1759  1701               	bsf	1,6
 12730                           
 12731                           ;Dimmer_B1.c: 676: DimmerLights->Signal = 1;
 12732  175A  0A6F               	incf	_DimmerLights,w
 12733  175B  0086               	movwf	6
 12734  175C  3001               	movlw	1	; select bank2/3
 12735  175D  0087               	movwf	7
 12736  175E  1681               	bsf	1,5
 12737                           
 12738                           ;Dimmer_B1.c: 677: setBuz(1, 100);
 12739  175F  3064               	movlw	100
 12740  1760  00A9               	movwf	setBuz@time
 12741  1761  3000               	movlw	0
 12742  1762  00AA               	movwf	setBuz@time+1
 12743  1763  3001               	movlw	1
 12744  1764  3197  27A7         	fcall	_setBuz
 12745                           
 12746                           ;Dimmer_B1.c: 678: } else if (status == 0) {
 12747  1766  0008               	return
 12748  1767                     l8946:	
 12749  1767  0020               	movlb	0	; select bank0
 12750  1768  08EB               	movf	setDimmerLights_Adj@status,f
 12751  1769  1D03               	skipz
 12752  176A  0008               	return
 12753                           
 12754                           ;Dimmer_B1.c: 679: Dimmer.Load_Status = 0;
 12755  176B  0021               	movlb	1	; select bank1
 12756  176C  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12757                           
 12758                           ;Dimmer_B1.c: 680: setDimmerLights_Line(lights);
 12759  176D  0020               	movlb	0	; select bank0
 12760  176E  086D               	movf	setDimmerLights_Adj@lights,w
 12761  176F  319D  256F  3197   	fcall	_setDimmerLights_Line
 12762                           
 12763                           ;Dimmer_B1.c: 681: DimmerLights->AdjSw = 0;
 12764  1772  0020               	movlb	0	; select bank0
 12765  1773  0A6F               	incf	_DimmerLights,w
 12766  1774  0086               	movwf	6
 12767  1775  3001               	movlw	1	; select bank2/3
 12768  1776  0087               	movwf	7
 12769  1777  1301               	bcf	1,6
 12770                           
 12771                           ;Dimmer_B1.c: 682: DimmerLights->Signal = 0;
 12772  1778  0A6F               	incf	_DimmerLights,w
 12773  1779  0086               	movwf	6
 12774  177A  3001               	movlw	1	; select bank2/3
 12775  177B  0087               	movwf	7
 12776  177C  1281               	bcf	1,5
 12777                           
 12778                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12779  177D  086F               	movf	_DimmerLights,w
 12780  177E  3E04               	addlw	4
 12781  177F  0086               	movwf	6
 12782  1780  3001               	movlw	1	; select bank2/3
 12783  1781  0087               	movwf	7
 12784  1782  0801               	movf	1,w
 12785  1783  00EC               	movwf	??_setDimmerLights_Adj
 12786  1784  086F               	movf	_DimmerLights,w
 12787  1785  3E06               	addlw	6
 12788  1786  0086               	movwf	6
 12789  1787  3001               	movlw	1	; select bank2/3
 12790  1788  0087               	movwf	7
 12791  1789  086C               	movf	??_setDimmerLights_Adj,w
 12792  178A  0081               	movwf	1
 12793                           
 12794                           ;Dimmer_B1.c: 685: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 12795  178B  086F               	movf	_DimmerLights,w
 12796  178C  3E04               	addlw	4
 12797  178D  0086               	movwf	6
 12798  178E  3001               	movlw	1	; select bank2/3
 12799  178F  0087               	movwf	7
 12800  1790  0801               	movf	1,w
 12801  1791  318A  22CF  3197   	fcall	_setPercentValue
 12802  1794  0020               	movlb	0	; select bank0
 12803  1795  00EC               	movwf	??_setDimmerLights_Adj
 12804  1796  086C               	movf	??_setDimmerLights_Adj,w
 12805  1797  00E2               	movwf	setProductData@value
 12806  1798  086D               	movf	setDimmerLights_Adj@lights,w
 12807  1799  3E14               	addlw	20
 12808  179A  319D  2561  3197   	fcall	_setProductData
 12809                           
 12810                           ;Dimmer_B1.c: 700: setRF_DimmerLights(lights, 1);
 12811  179D  0020               	movlb	0	; select bank0
 12812  179E  01E6               	clrf	setRF_DimmerLights@on
 12813  179F  0AE6               	incf	setRF_DimmerLights@on,f
 12814  17A0  086D               	movf	setDimmerLights_Adj@lights,w
 12815  17A1  3188  203C  3197   	fcall	_setRF_DimmerLights
 12816                           
 12817                           ;Dimmer_B1.c: 701: setTxData();
 12818  17A4  318E  260C         	fcall	_setTxData
 12819  17A6  0008               	return
 12820  17A7                     __end_of_setDimmerLights_Adj:	
 12821                           
 12822                           	psect	text77
 12823  1656                     __ptext77:	
 12824 ;; *************** function _setDimmerLights *****************
 12825 ;; Defined at:
 12826 ;;		line 630 in file "../src/Dimmer_B1.c"
 12827 ;; Parameters:    Size  Location     Type
 12828 ;;  lights          1    wreg     unsigned char 
 12829 ;;  status          1   75[BANK0 ] unsigned char 
 12830 ;; Auto vars:     Size  Location     Type
 12831 ;;  lights          1   77[BANK0 ] unsigned char 
 12832 ;; Return value:  Size  Location     Type
 12833 ;;		None               void
 12834 ;; Registers used:
 12835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12836 ;; Tracked objects:
 12837 ;;		On entry : 0/0
 12838 ;;		On exit  : 0/0
 12839 ;;		Unchanged: 0/0
 12840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12841 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12844 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12845 ;;Total ram usage:        3 bytes
 12846 ;; Hardware stack levels used:    1
 12847 ;; Hardware stack levels required when called:    8
 12848 ;; This function calls:
 12849 ;;		_setDimmerLights_Line
 12850 ;;		_setLED
 12851 ;;		_setPercentValue
 12852 ;;		_setProductData
 12853 ;;		_setRF_DimmerLights
 12854 ;;		_setTxData
 12855 ;; This function is called by:
 12856 ;;		_setDimmerLights_Main
 12857 ;; This function uses a non-reentrant model
 12858 ;;
 12859                           
 12860                           
 12861                           ;psect for function _setDimmerLights
 12862  1656                     _setDimmerLights:	
 12863                           
 12864                           ;incstack = 0
 12865                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12866                           ;setDimmerLights@lights stored from wreg
 12867  1656  0020               	movlb	0	; select bank0
 12868  1657  00ED               	movwf	setDimmerLights@lights
 12869                           
 12870                           ;Dimmer_B1.c: 638: if (status == 1) {
 12871  1658  086B               	movf	setDimmerLights@status,w
 12872  1659  3A01               	xorlw	1
 12873  165A  1D03               	skipz
 12874  165B  2E86               	goto	l8926
 12875                           
 12876                           ;Dimmer_B1.c: 639: DimmerLights->StatusFlag = 1;
 12877  165C  0A6F               	incf	_DimmerLights,w
 12878  165D  0086               	movwf	6
 12879  165E  3001               	movlw	1	; select bank2/3
 12880  165F  0087               	movwf	7
 12881  1660  1501               	bsf	1,2
 12882                           
 12883                           ;Dimmer_B1.c: 642: Dimmer.Load_Status = 1;
 12884  1661  0021               	movlb	1	; select bank1
 12885  1662  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 12886                           
 12887                           ;Dimmer_B1.c: 643: setDimmerLights_Line(lights);
 12888  1663  0020               	movlb	0	; select bank0
 12889  1664  086D               	movf	setDimmerLights@lights,w
 12890  1665  319D  256F  3196   	fcall	_setDimmerLights_Line
 12891                           
 12892                           ;Dimmer_B1.c: 645: setLED(lights, 0);
 12893  1668  0020               	movlb	0	; select bank0
 12894  1669  01A2               	clrf	setLED@command
 12895  166A  086D               	movf	setDimmerLights@lights,w
 12896  166B  3193  23E2  3196   	fcall	_setLED
 12897                           
 12898                           ;Dimmer_B1.c: 646: ;;
 12899                           ;Dimmer_B1.c: 650: DimmerLights->DimmingValue = ((char)(70*0.8));
 12900  166E  3038               	movlw	56
 12901  166F  0020               	movlb	0	; select bank0
 12902  1670  00EC               	movwf	??_setDimmerLights
 12903  1671  086F               	movf	_DimmerLights,w
 12904  1672  3E04               	addlw	4
 12905  1673  0086               	movwf	6
 12906  1674  3001               	movlw	1	; select bank2/3
 12907  1675  0087               	movwf	7
 12908  1676  086C               	movf	??_setDimmerLights,w
 12909  1677  0081               	movwf	1
 12910                           
 12911                           ;Dimmer_B1.c: 652: setProductData((20 + lights), setPercentValue(((char)(70*0.8))));
 12912  1678  3038               	movlw	56
 12913  1679  318A  22CF  3196   	fcall	_setPercentValue
 12914  167C  0020               	movlb	0	; select bank0
 12915  167D  00EC               	movwf	??_setDimmerLights
 12916  167E  086C               	movf	??_setDimmerLights,w
 12917  167F  00E2               	movwf	setProductData@value
 12918  1680  086D               	movf	setDimmerLights@lights,w
 12919  1681  3E14               	addlw	20
 12920  1682  319D  2561  3196   	fcall	_setProductData
 12921                           
 12922                           ;Dimmer_B1.c: 654: } else if (status == 0) {
 12923  1685  2E9C               	goto	l8936
 12924  1686                     l8926:	
 12925  1686  0020               	movlb	0	; select bank0
 12926  1687  08EB               	movf	setDimmerLights@status,f
 12927  1688  1D03               	skipz
 12928  1689  2E9C               	goto	l8936
 12929                           
 12930                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 12931  168A  0A6F               	incf	_DimmerLights,w
 12932  168B  0086               	movwf	6
 12933  168C  3001               	movlw	1	; select bank2/3
 12934  168D  0087               	movwf	7
 12935  168E  1101               	bcf	1,2
 12936                           
 12937                           ;Dimmer_B1.c: 658: Dimmer.Load_Status = 0;
 12938  168F  0021               	movlb	1	; select bank1
 12939  1690  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12940                           
 12941                           ;Dimmer_B1.c: 659: setDimmerLights_Line(0);
 12942  1691  3000               	movlw	0
 12943  1692  319D  256F  3196   	fcall	_setDimmerLights_Line
 12944                           
 12945                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 12946  1695  0020               	movlb	0	; select bank0
 12947  1696  01A2               	clrf	setLED@command
 12948  1697  0AA2               	incf	setLED@command,f
 12949  1698  086D               	movf	setDimmerLights@lights,w
 12950  1699  3193  23E2  3196   	fcall	_setLED
 12951  169C                     l8936:	
 12952                           ;Dimmer_B1.c: 662: ;;
 12953                           
 12954                           
 12955                           ;Dimmer_B1.c: 663: }
 12956                           ;Dimmer_B1.c: 666: setRF_DimmerLights(lights, status);
 12957  169C  0020               	movlb	0	; select bank0
 12958  169D  086B               	movf	setDimmerLights@status,w
 12959  169E  00EC               	movwf	??_setDimmerLights
 12960  169F  086C               	movf	??_setDimmerLights,w
 12961  16A0  00E6               	movwf	setRF_DimmerLights@on
 12962  16A1  086D               	movf	setDimmerLights@lights,w
 12963  16A2  3188  203C  3196   	fcall	_setRF_DimmerLights
 12964                           
 12965                           ;Dimmer_B1.c: 667: setTxData();
 12966  16A5  318E  260C         	fcall	_setTxData
 12967  16A7  0008               	return
 12968  16A8                     __end_of_setDimmerLights:	
 12969                           
 12970                           	psect	text78
 12971  0E0C                     __ptext78:	
 12972 ;; *************** function _setTxData *****************
 12973 ;; Defined at:
 12974 ;;		line 171 in file "../src/RF_Control_B1.c"
 12975 ;; Parameters:    Size  Location     Type
 12976 ;;		None
 12977 ;; Auto vars:     Size  Location     Type
 12978 ;;  i               1    0        unsigned char 
 12979 ;; Return value:  Size  Location     Type
 12980 ;;		None               void
 12981 ;; Registers used:
 12982 ;;		wreg, fsr1l, fsr1h
 12983 ;; Tracked objects:
 12984 ;;		On entry : 0/0
 12985 ;;		On exit  : 0/0
 12986 ;;		Unchanged: 0/0
 12987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;Total ram usage:        1 bytes
 12993 ;; Hardware stack levels used:    1
 12994 ;; Hardware stack levels required when called:    5
 12995 ;; This function calls:
 12996 ;;		Nothing
 12997 ;; This function is called by:
 12998 ;;		_setDimmerLights
 12999 ;;		_setDimmerLights_Adj
 13000 ;;		_getRxData
 13001 ;;		_setControl_Lights_Table
 13002 ;;		_setRFSW_Control
 13003 ;;		_setRFSW_AdjControl
 13004 ;; This function uses a non-reentrant model
 13005 ;;
 13006                           
 13007                           
 13008                           ;psect for function _setTxData
 13009  0E0C                     _setTxData:	
 13010                           
 13011                           ;RF_Control_B1.c: 172: char i;
 13012                           ;RF_Control_B1.c: 173: if (RF1.Enable == 1) {
 13013                           
 13014                           ;incstack = 0
 13015                           ; Regs used in _setTxData: [wregfsr1]
 13016  0E0C  0021               	movlb	1	; select bank1
 13017  0E0D  1C3A               	btfss	_RF1^(0+128),0
 13018  0E0E  0008               	return
 13019                           
 13020                           ;RF_Control_B1.c: 175: if (RF1.TransceiveGO == 0) {
 13021  0E0F  193A               	btfsc	_RF1^(0+128),2
 13022  0E10  0008               	return
 13023                           
 13024                           ;RF_Control_B1.c: 176: RF1.TransceiveGO = 1;
 13025  0E11  153A               	bsf	_RF1^(0+128),2
 13026                           
 13027                           ;RF_Control_B1.c: 177: RF1.RunTime = 20;
 13028  0E12  3014               	movlw	20
 13029  0E13  00C1               	movwf	(_RF1^(0+128)+7)
 13030  0E14  3000               	movlw	0
 13031  0E15  00C2               	movwf	(_RF1^(0+128)+8)
 13032                           
 13033                           ;RF_Control_B1.c: 189: RF_Data[0] = 0x63;
 13034  0E16  3063               	movlw	99
 13035  0E17  0020               	movlb	0	; select bank0
 13036  0E18  00A0               	movwf	??_setTxData
 13037  0E19  0820               	movf	??_setTxData,w
 13038  0E1A  0023               	movlb	3	; select bank3
 13039  0E1B  00A0               	movwf	_RF_Data^(0+384)
 13040                           
 13041                           ;RF_Control_B1.c: 190: RF_Data[1] = 0x02;
 13042  0E1C  3002               	movlw	2
 13043  0E1D  0020               	movlb	0	; select bank0
 13044  0E1E  00A0               	movwf	??_setTxData
 13045  0E1F  0820               	movf	??_setTxData,w
 13046  0E20  0023               	movlb	3	; select bank3
 13047  0E21  00A1               	movwf	(_RF_Data^(0+384)+1)
 13048                           
 13049                           ;RF_Control_B1.c: 192: RF_Data[2] = product->Data[2];
 13050  0E22  0879               	movf	_product,w
 13051  0E23  0086               	movwf	6
 13052  0E24  3002               	movlw	2	; select bank4/5
 13053  0E25  0087               	movwf	7
 13054  0E26  3002               	movlw	2	; select bank4/5
 13055  0E27  3F42               	moviw [2]fsr1
 13056  0E28  00A2               	movwf	(_RF_Data^(0+384)+2)
 13057                           
 13058                           ;RF_Control_B1.c: 193: RF_Data[3] = product->Data[3];
 13059  0E29  0879               	movf	_product,w
 13060  0E2A  0086               	movwf	6
 13061  0E2B  3002               	movlw	2	; select bank4/5
 13062  0E2C  0087               	movwf	7
 13063  0E2D  3002               	movlw	2	; select bank4/5
 13064  0E2E  3F43               	moviw [3]fsr1
 13065  0E2F  00A3               	movwf	(_RF_Data^(0+384)+3)
 13066                           
 13067                           ;RF_Control_B1.c: 194: RF_Data[4] = product->Data[4];
 13068  0E30  0879               	movf	_product,w
 13069  0E31  0086               	movwf	6
 13070  0E32  3002               	movlw	2	; select bank4/5
 13071  0E33  0087               	movwf	7
 13072  0E34  3002               	movlw	2	; select bank4/5
 13073  0E35  3F44               	moviw [4]fsr1
 13074  0E36  00A4               	movwf	(_RF_Data^(0+384)+4)
 13075                           
 13076                           ;RF_Control_B1.c: 195: RF_Data[5] = product->Data[5];
 13077  0E37  0879               	movf	_product,w
 13078  0E38  0086               	movwf	6
 13079  0E39  3002               	movlw	2	; select bank4/5
 13080  0E3A  0087               	movwf	7
 13081  0E3B  3002               	movlw	2	; select bank4/5
 13082  0E3C  3F45               	moviw [5]fsr1
 13083  0E3D  00A5               	movwf	(_RF_Data^(0+384)+5)
 13084                           
 13085                           ;RF_Control_B1.c: 196: RF_Data[6] = product->Data[6];
 13086  0E3E  0879               	movf	_product,w
 13087  0E3F  0086               	movwf	6
 13088  0E40  3002               	movlw	2	; select bank4/5
 13089  0E41  0087               	movwf	7
 13090  0E42  3002               	movlw	2	; select bank4/5
 13091  0E43  3F46               	moviw [6]fsr1
 13092  0E44  00A6               	movwf	(_RF_Data^(0+384)+6)
 13093                           
 13094                           ;RF_Control_B1.c: 197: RF_Data[7] = product->Data[7];
 13095  0E45  0879               	movf	_product,w
 13096  0E46  0086               	movwf	6
 13097  0E47  3002               	movlw	2	; select bank4/5
 13098  0E48  0087               	movwf	7
 13099  0E49  3002               	movlw	2	; select bank4/5
 13100  0E4A  3F47               	moviw [7]fsr1
 13101  0E4B  00A7               	movwf	(_RF_Data^(0+384)+7)
 13102                           
 13103                           ;RF_Control_B1.c: 198: RF_Data[8] = product->Data[8];
 13104  0E4C  0879               	movf	_product,w
 13105  0E4D  0086               	movwf	6
 13106  0E4E  3002               	movlw	2	; select bank4/5
 13107  0E4F  0087               	movwf	7
 13108  0E50  3002               	movlw	2	; select bank4/5
 13109  0E51  3F48               	moviw [8]fsr1
 13110  0E52  00A8               	movwf	(_RF_Data^(0+384)+8)
 13111                           
 13112                           ;RF_Control_B1.c: 199: RF_Data[9] = product->Data[9];
 13113  0E53  0879               	movf	_product,w
 13114  0E54  0086               	movwf	6
 13115  0E55  3002               	movlw	2	; select bank4/5
 13116  0E56  0087               	movwf	7
 13117  0E57  3002               	movlw	2	; select bank4/5
 13118  0E58  3F49               	moviw [9]fsr1
 13119  0E59  00A9               	movwf	(_RF_Data^(0+384)+9)
 13120                           
 13121                           ;RF_Control_B1.c: 200: RF_Data[10] = product->Data[10];
 13122  0E5A  0879               	movf	_product,w
 13123  0E5B  0086               	movwf	6
 13124  0E5C  3002               	movlw	2	; select bank4/5
 13125  0E5D  0087               	movwf	7
 13126  0E5E  3002               	movlw	2	; select bank4/5
 13127  0E5F  3F4A               	moviw [10]fsr1
 13128  0E60  00AA               	movwf	(_RF_Data^(0+384)+10)
 13129                           
 13130                           ;RF_Control_B1.c: 201: RF_Data[11] = product->Data[11];
 13131  0E61  0879               	movf	_product,w
 13132  0E62  0086               	movwf	6
 13133  0E63  3002               	movlw	2	; select bank4/5
 13134  0E64  0087               	movwf	7
 13135  0E65  3002               	movlw	2	; select bank4/5
 13136  0E66  3F4B               	moviw [11]fsr1
 13137  0E67  00AB               	movwf	(_RF_Data^(0+384)+11)
 13138                           
 13139                           ;RF_Control_B1.c: 202: RF_Data[12] = product->Data[12];
 13140  0E68  0879               	movf	_product,w
 13141  0E69  0086               	movwf	6
 13142  0E6A  3002               	movlw	2	; select bank4/5
 13143  0E6B  0087               	movwf	7
 13144  0E6C  3002               	movlw	2	; select bank4/5
 13145  0E6D  3F4C               	moviw [12]fsr1
 13146  0E6E  00AC               	movwf	(_RF_Data^(0+384)+12)
 13147                           
 13148                           ;RF_Control_B1.c: 203: RF_Data[13] = product->Data[13];
 13149  0E6F  0879               	movf	_product,w
 13150  0E70  0086               	movwf	6
 13151  0E71  3002               	movlw	2	; select bank4/5
 13152  0E72  0087               	movwf	7
 13153  0E73  3002               	movlw	2	; select bank4/5
 13154  0E74  3F4D               	moviw [13]fsr1
 13155  0E75  00AD               	movwf	(_RF_Data^(0+384)+13)
 13156                           
 13157                           ;RF_Control_B1.c: 204: RF_Data[14] = product->Data[14];
 13158  0E76  0879               	movf	_product,w
 13159  0E77  0086               	movwf	6
 13160  0E78  3002               	movlw	2	; select bank4/5
 13161  0E79  0087               	movwf	7
 13162  0E7A  3002               	movlw	2	; select bank4/5
 13163  0E7B  3F4E               	moviw [14]fsr1
 13164  0E7C  00AE               	movwf	(_RF_Data^(0+384)+14)
 13165                           
 13166                           ;RF_Control_B1.c: 205: RF_Data[15] = product->Data[15];
 13167  0E7D  0879               	movf	_product,w
 13168  0E7E  0086               	movwf	6
 13169  0E7F  3002               	movlw	2	; select bank4/5
 13170  0E80  0087               	movwf	7
 13171  0E81  3002               	movlw	2	; select bank4/5
 13172  0E82  3F4F               	moviw [15]fsr1
 13173  0E83  00AF               	movwf	(_RF_Data^(0+384)+15)
 13174                           
 13175                           ;RF_Control_B1.c: 206: RF_Data[16] = product->Data[16];
 13176  0E84  0879               	movf	_product,w
 13177  0E85  0086               	movwf	6
 13178  0E86  3002               	movlw	2	; select bank4/5
 13179  0E87  0087               	movwf	7
 13180  0E88  3002               	movlw	2	; select bank4/5
 13181  0E89  3F50               	moviw [16]fsr1
 13182  0E8A  00B0               	movwf	(_RF_Data^(0+384)+16)
 13183                           
 13184                           ;RF_Control_B1.c: 207: RF_Data[17] = product->Data[17];
 13185  0E8B  0879               	movf	_product,w
 13186  0E8C  0086               	movwf	6
 13187  0E8D  3002               	movlw	2	; select bank4/5
 13188  0E8E  0087               	movwf	7
 13189  0E8F  3002               	movlw	2	; select bank4/5
 13190  0E90  3F51               	moviw [17]fsr1
 13191  0E91  00B1               	movwf	(_RF_Data^(0+384)+17)
 13192                           
 13193                           ;RF_Control_B1.c: 208: RF_Data[18] = product->Data[18];
 13194  0E92  0879               	movf	_product,w
 13195  0E93  0086               	movwf	6
 13196  0E94  3002               	movlw	2	; select bank4/5
 13197  0E95  0087               	movwf	7
 13198  0E96  3002               	movlw	2	; select bank4/5
 13199  0E97  3F52               	moviw [18]fsr1
 13200  0E98  00B2               	movwf	(_RF_Data^(0+384)+18)
 13201                           
 13202                           ;RF_Control_B1.c: 209: RF_Data[19] = product->Data[19];
 13203  0E99  0879               	movf	_product,w
 13204  0E9A  0086               	movwf	6
 13205  0E9B  3002               	movlw	2	; select bank4/5
 13206  0E9C  0087               	movwf	7
 13207  0E9D  3002               	movlw	2	; select bank4/5
 13208  0E9E  3F53               	moviw [19]fsr1
 13209  0E9F  00B3               	movwf	(_RF_Data^(0+384)+19)
 13210                           
 13211                           ;RF_Control_B1.c: 210: RF_Data[20] = 209;
 13212  0EA0  30D1               	movlw	209
 13213  0EA1  0020               	movlb	0	; select bank0
 13214  0EA2  00A0               	movwf	??_setTxData
 13215  0EA3  0820               	movf	??_setTxData,w
 13216  0EA4  0023               	movlb	3	; select bank3
 13217  0EA5  00B4               	movwf	(_RF_Data^(0+384)+20)
 13218  0EA6  0008               	return
 13219  0EA7                     __end_of_setTxData:	
 13220                           
 13221                           	psect	text79
 13222  083C                     __ptext79:	
 13223 ;; *************** function _setRF_DimmerLights *****************
 13224 ;; Defined at:
 13225 ;;		line 442 in file "../src/RF_Control_B1.c"
 13226 ;; Parameters:    Size  Location     Type
 13227 ;;  lights          1    wreg     unsigned char 
 13228 ;;  on              1   70[BANK0 ] unsigned char 
 13229 ;; Auto vars:     Size  Location     Type
 13230 ;;  lights          1   74[BANK0 ] unsigned char 
 13231 ;;  status          1   73[BANK0 ] unsigned char 
 13232 ;; Return value:  Size  Location     Type
 13233 ;;		None               void
 13234 ;; Registers used:
 13235 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13236 ;; Tracked objects:
 13237 ;;		On entry : 0/0
 13238 ;;		On exit  : 0/0
 13239 ;;		Unchanged: 0/0
 13240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13241 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13243 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13244 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;Total ram usage:        5 bytes
 13246 ;; Hardware stack levels used:    1
 13247 ;; Hardware stack levels required when called:    6
 13248 ;; This function calls:
 13249 ;;		_setProductData
 13250 ;; This function is called by:
 13251 ;;		_setDimmerLights
 13252 ;;		_setDimmerLights_Adj
 13253 ;;		_setRFSW_Control
 13254 ;; This function uses a non-reentrant model
 13255 ;;
 13256                           
 13257                           
 13258                           ;psect for function _setRF_DimmerLights
 13259  083C                     _setRF_DimmerLights:	
 13260                           
 13261                           ;incstack = 0
 13262                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13263                           ;setRF_DimmerLights@lights stored from wreg
 13264  083C  0020               	movlb	0	; select bank0
 13265  083D  00EA               	movwf	setRF_DimmerLights@lights
 13266                           
 13267                           ;RF_Control_B1.c: 443: char status = 1;
 13268  083E  01E9               	clrf	setRF_DimmerLights@status
 13269  083F  0AE9               	incf	setRF_DimmerLights@status,f
 13270                           
 13271                           ;RF_Control_B1.c: 444: status <<= (lights - 1);
 13272  0840  086A               	movf	setRF_DimmerLights@lights,w
 13273  0841  3EFF               	addlw	-1
 13274  0842  0A89               	incf	9,f
 13275  0843  2846               	goto	u8990
 13276  0844                     u8995:	
 13277  0844  1003               	clrc
 13278  0845  0DE9               	rlf	setRF_DimmerLights@status,f
 13279  0846                     u8990:	
 13280  0846  3EFF               	addlw	-1
 13281  0847  1D03               	skipz
 13282  0848  2844               	goto	u8995
 13283                           
 13284                           ;RF_Control_B1.c: 445: setProductData(11, lights);
 13285  0849  086A               	movf	setRF_DimmerLights@lights,w
 13286  084A  00E7               	movwf	??_setRF_DimmerLights
 13287  084B  0867               	movf	??_setRF_DimmerLights,w
 13288  084C  00E2               	movwf	setProductData@value
 13289  084D  300B               	movlw	11
 13290  084E  319D  2561  3188   	fcall	_setProductData
 13291                           
 13292                           ;RF_Control_B1.c: 453: setProductData(9, product->Data[20 + lights]);
 13293  0851  0020               	movlb	0	; select bank0
 13294  0852  086A               	movf	setRF_DimmerLights@lights,w
 13295  0853  3E14               	addlw	20
 13296  0854  0779               	addwf	_product,w
 13297  0855  00E7               	movwf	??_setRF_DimmerLights
 13298  0856  0867               	movf	??_setRF_DimmerLights,w
 13299  0857  0086               	movwf	6
 13300  0858  3002               	movlw	2	; select bank4/5
 13301  0859  0087               	movwf	7
 13302  085A  0801               	movf	1,w
 13303  085B  00E8               	movwf	??_setRF_DimmerLights+1
 13304  085C  0868               	movf	??_setRF_DimmerLights+1,w
 13305  085D  00E2               	movwf	setProductData@value
 13306  085E  3009               	movlw	9
 13307  085F  319D  2561  3188   	fcall	_setProductData
 13308                           
 13309                           ;RF_Control_B1.c: 454: setProductData(17, product->Data[26 + lights]);
 13310  0862  0020               	movlb	0	; select bank0
 13311  0863  086A               	movf	setRF_DimmerLights@lights,w
 13312  0864  3E1A               	addlw	26
 13313  0865  0779               	addwf	_product,w
 13314  0866  00E7               	movwf	??_setRF_DimmerLights
 13315  0867  0867               	movf	??_setRF_DimmerLights,w
 13316  0868  0086               	movwf	6
 13317  0869  3002               	movlw	2	; select bank4/5
 13318  086A  0087               	movwf	7
 13319  086B  0801               	movf	1,w
 13320  086C  00E8               	movwf	??_setRF_DimmerLights+1
 13321  086D  0868               	movf	??_setRF_DimmerLights+1,w
 13322  086E  00E2               	movwf	setProductData@value
 13323  086F  3011               	movlw	17
 13324  0870  319D  2561  3188   	fcall	_setProductData
 13325                           
 13326                           ;RF_Control_B1.c: 455: if (on == 1) {
 13327  0873  0020               	movlb	0	; select bank0
 13328  0874  0866               	movf	setRF_DimmerLights@on,w
 13329  0875  3A01               	xorlw	1
 13330  0876  1D03               	skipz
 13331  0877  2886               	goto	l8424
 13332                           
 13333                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15] | status));
 13334  0878  0879               	movf	_product,w
 13335  0879  3E0F               	addlw	15
 13336  087A  0086               	movwf	6
 13337  087B  3002               	movlw	2	; select bank4/5
 13338  087C  0087               	movwf	7
 13339  087D  0801               	movf	1,w
 13340  087E  0469               	iorwf	setRF_DimmerLights@status,w
 13341  087F  00E7               	movwf	??_setRF_DimmerLights
 13342  0880  0867               	movf	??_setRF_DimmerLights,w
 13343  0881  00E2               	movwf	setProductData@value
 13344  0882  300F               	movlw	15
 13345  0883  319D  2561         	fcall	_setProductData
 13346                           
 13347                           ;RF_Control_B1.c: 457: } else {
 13348  0885  0008               	return
 13349  0886                     l8424:	
 13350                           
 13351                           ;RF_Control_B1.c: 458: setProductData(15, (product->Data[15]&(~status)));
 13352  0886  0879               	movf	_product,w
 13353  0887  3E0F               	addlw	15
 13354  0888  0086               	movwf	6
 13355  0889  3002               	movlw	2	; select bank4/5
 13356  088A  0087               	movwf	7
 13357  088B  0020               	movlb	0	; select bank0
 13358  088C  0969               	comf	setRF_DimmerLights@status,w
 13359  088D  0501               	andwf	1,w
 13360  088E  00E7               	movwf	??_setRF_DimmerLights
 13361  088F  0867               	movf	??_setRF_DimmerLights,w
 13362  0890  00E2               	movwf	setProductData@value
 13363  0891  300F               	movlw	15
 13364  0892  319D  2561         	fcall	_setProductData
 13365  0894  0008               	return
 13366  0895                     __end_of_setRF_DimmerLights:	
 13367                           
 13368                           	psect	text80
 13369  0ACF                     __ptext80:	
 13370 ;; *************** function _setPercentValue *****************
 13371 ;; Defined at:
 13372 ;;		line 1034 in file "../src/Dimmer_B1.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;  value           1    wreg     unsigned char 
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;  value           1   62[BANK0 ] unsigned char 
 13377 ;;  i               3   63[BANK0 ] float 
 13378 ;; Return value:  Size  Location     Type
 13379 ;;                  1    wreg      unsigned char 
 13380 ;; Registers used:
 13381 ;;		wreg, status,2, status,0, pclath, cstack
 13382 ;; Tracked objects:
 13383 ;;		On entry : 0/0
 13384 ;;		On exit  : 0/0
 13385 ;;		Unchanged: 0/0
 13386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;Total ram usage:        6 bytes
 13392 ;; Hardware stack levels used:    1
 13393 ;; Hardware stack levels required when called:    7
 13394 ;; This function calls:
 13395 ;;		___awtoft
 13396 ;;		___ftadd
 13397 ;;		___ftdiv
 13398 ;;		___ftneg
 13399 ;;		___fttol
 13400 ;; This function is called by:
 13401 ;;		_setDimmerLights
 13402 ;;		_setDimmerLights_Adj
 13403 ;;		_Flash_Memory_Initialization
 13404 ;; This function uses a non-reentrant model
 13405 ;;
 13406                           
 13407                           
 13408                           ;psect for function _setPercentValue
 13409  0ACF                     _setPercentValue:	
 13410                           
 13411                           ;incstack = 0
 13412                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13413                           ;setPercentValue@value stored from wreg
 13414  0ACF  0020               	movlb	0	; select bank0
 13415  0AD0  00DE               	movwf	setPercentValue@value
 13416                           
 13417                           ;Dimmer_B1.c: 1042: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 13418  0AD1  3000               	movlw	0
 13419  0AD2  00DF               	movwf	setPercentValue@i
 13420  0AD3  3030               	movlw	48
 13421  0AD4  00E0               	movwf	setPercentValue@i+1
 13422  0AD5  3042               	movlw	66
 13423  0AD6  00E1               	movwf	setPercentValue@i+2
 13424                           
 13425                           ;Dimmer_B1.c: 1043: i /= 100;
 13426  0AD7  3000               	movlw	0
 13427  0AD8  00AE               	movwf	___ftdiv@f2
 13428  0AD9  30C8               	movlw	200
 13429  0ADA  00AF               	movwf	___ftdiv@f2+1
 13430  0ADB  3042               	movlw	66
 13431  0ADC  00B0               	movwf	___ftdiv@f2+2
 13432  0ADD  085F               	movf	setPercentValue@i,w
 13433  0ADE  00B1               	movwf	___ftdiv@f1
 13434  0ADF  0860               	movf	setPercentValue@i+1,w
 13435  0AE0  00B2               	movwf	___ftdiv@f1+1
 13436  0AE1  0861               	movf	setPercentValue@i+2,w
 13437  0AE2  00B3               	movwf	___ftdiv@f1+2
 13438  0AE3  318E  26A7  318A   	fcall	___ftdiv
 13439  0AE6  0020               	movlb	0	; select bank0
 13440  0AE7  082E               	movf	?___ftdiv,w
 13441  0AE8  00DF               	movwf	setPercentValue@i
 13442  0AE9  082F               	movf	?___ftdiv+1,w
 13443  0AEA  00E0               	movwf	setPercentValue@i+1
 13444  0AEB  0830               	movf	?___ftdiv+2,w
 13445  0AEC  00E1               	movwf	setPercentValue@i+2
 13446                           
 13447                           ;Dimmer_B1.c: 1045: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 13448  0AED  085E               	movf	setPercentValue@value,w
 13449  0AEE  00DC               	movwf	??_setPercentValue
 13450  0AEF  01DD               	clrf	??_setPercentValue+1
 13451  0AF0  09DC               	comf	??_setPercentValue,f
 13452  0AF1  09DD               	comf	??_setPercentValue+1,f
 13453  0AF2  0ADC               	incf	??_setPercentValue,f
 13454  0AF3  1903               	skipnz
 13455  0AF4  0ADD               	incf	??_setPercentValue+1,f
 13456  0AF5  085C               	movf	??_setPercentValue,w
 13457  0AF6  3E38               	addlw	56
 13458  0AF7  00A8               	movwf	___awtoft@c
 13459  0AF8  3000               	movlw	0
 13460  0AF9  3D5D               	addwfc	??_setPercentValue+1,w
 13461  0AFA  00A9               	movwf	___awtoft@c+1
 13462  0AFB  3190  2087  318A   	fcall	___awtoft
 13463  0AFE  0020               	movlb	0	; select bank0
 13464  0AFF  0828               	movf	?___awtoft,w
 13465  0B00  00B1               	movwf	___ftdiv@f1
 13466  0B01  0829               	movf	?___awtoft+1,w
 13467  0B02  00B2               	movwf	___ftdiv@f1+1
 13468  0B03  082A               	movf	?___awtoft+2,w
 13469  0B04  00B3               	movwf	___ftdiv@f1+2
 13470  0B05  085F               	movf	setPercentValue@i,w
 13471  0B06  00AE               	movwf	___ftdiv@f2
 13472  0B07  0860               	movf	setPercentValue@i+1,w
 13473  0B08  00AF               	movwf	___ftdiv@f2+1
 13474  0B09  0861               	movf	setPercentValue@i+2,w
 13475  0B0A  00B0               	movwf	___ftdiv@f2+2
 13476  0B0B  318E  26A7  318A   	fcall	___ftdiv
 13477  0B0E  0020               	movlb	0	; select bank0
 13478  0B0F  082E               	movf	?___ftdiv,w
 13479  0B10  00BE               	movwf	___ftneg@f1
 13480  0B11  082F               	movf	?___ftdiv+1,w
 13481  0B12  00BF               	movwf	___ftneg@f1+1
 13482  0B13  0830               	movf	?___ftdiv+2,w
 13483  0B14  00C0               	movwf	___ftneg@f1+2
 13484  0B15  319C  2487  318A   	fcall	___ftneg
 13485  0B18  0020               	movlb	0	; select bank0
 13486  0B19  083E               	movf	?___ftneg,w
 13487  0B1A  00C4               	movwf	___ftadd@f2
 13488  0B1B  083F               	movf	?___ftneg+1,w
 13489  0B1C  00C5               	movwf	___ftadd@f2+1
 13490  0B1D  0840               	movf	?___ftneg+2,w
 13491  0B1E  00C6               	movwf	___ftadd@f2+2
 13492  0B1F  3000               	movlw	0
 13493  0B20  00C1               	movwf	___ftadd@f1
 13494  0B21  30C8               	movlw	200
 13495  0B22  00C2               	movwf	___ftadd@f1+1
 13496  0B23  3042               	movlw	66
 13497  0B24  00C3               	movwf	___ftadd@f1+2
 13498  0B25  3184  245A  318A   	fcall	___ftadd
 13499  0B28  0020               	movlb	0	; select bank0
 13500  0B29  0841               	movf	?___ftadd,w
 13501  0B2A  00CE               	movwf	___fttol@f1
 13502  0B2B  0842               	movf	?___ftadd+1,w
 13503  0B2C  00CF               	movwf	___fttol@f1+1
 13504  0B2D  0843               	movf	?___ftadd+2,w
 13505  0B2E  00D0               	movwf	___fttol@f1+2
 13506  0B2F  318D  2585         	fcall	___fttol
 13507  0B31  0020               	movlb	0	; select bank0
 13508  0B32  084E               	movf	?___fttol,w
 13509  0B33  0008               	return
 13510  0B34                     __end_of_setPercentValue:	
 13511                           
 13512                           	psect	text81
 13513  0D85                     __ptext81:	
 13514 ;; *************** function ___fttol *****************
 13515 ;; Defined at:
 13516 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13517 ;; Parameters:    Size  Location     Type
 13518 ;;  f1              3   46[BANK0 ] float 
 13519 ;; Auto vars:     Size  Location     Type
 13520 ;;  lval            4   55[BANK0 ] unsigned long 
 13521 ;;  exp1            1   59[BANK0 ] unsigned char 
 13522 ;;  sign1           1   54[BANK0 ] unsigned char 
 13523 ;; Return value:  Size  Location     Type
 13524 ;;                  4   46[BANK0 ] long 
 13525 ;; Registers used:
 13526 ;;		wreg, status,2, status,0
 13527 ;; Tracked objects:
 13528 ;;		On entry : 0/0
 13529 ;;		On exit  : 0/0
 13530 ;;		Unchanged: 0/0
 13531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13532 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;Total ram usage:       14 bytes
 13537 ;; Hardware stack levels used:    1
 13538 ;; Hardware stack levels required when called:    5
 13539 ;; This function calls:
 13540 ;;		Nothing
 13541 ;; This function is called by:
 13542 ;;		_getPercentValue
 13543 ;;		_setPercentValue
 13544 ;; This function uses a non-reentrant model
 13545 ;;
 13546                           
 13547                           
 13548                           ;psect for function ___fttol
 13549  0D85                     ___fttol:	
 13550                           
 13551                           ;incstack = 0
 13552                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13553  0D85  0020               	movlb	0	; select bank0
 13554  0D86  084E               	movf	___fttol@f1,w
 13555  0D87  00D2               	movwf	??___fttol
 13556  0D88  084F               	movf	___fttol@f1+1,w
 13557  0D89  00D3               	movwf	??___fttol+1
 13558  0D8A  0850               	movf	___fttol@f1+2,w
 13559  0D8B  00D4               	movwf	??___fttol+2
 13560  0D8C  1003               	clrc
 13561  0D8D  0D53               	rlf	??___fttol+1,w
 13562  0D8E  0D54               	rlf	??___fttol+2,w
 13563  0D8F  00D5               	movwf	??___fttol+3
 13564  0D90  0855               	movf	??___fttol+3,w
 13565  0D91  00DB               	movwf	___fttol@exp1
 13566  0D92  08DB               	movf	___fttol@exp1,f
 13567  0D93  1D03               	skipz
 13568  0D94  2D9E               	goto	l8196
 13569  0D95  3000               	movlw	0
 13570  0D96  00D1               	movwf	?___fttol+3
 13571  0D97  3000               	movlw	0
 13572  0D98  00D0               	movwf	?___fttol+2
 13573  0D99  3000               	movlw	0
 13574  0D9A  00CF               	movwf	?___fttol+1
 13575  0D9B  3000               	movlw	0
 13576  0D9C  00CE               	movwf	?___fttol
 13577  0D9D  0008               	return
 13578  0D9E                     l8196:	
 13579  0D9E  084E               	movf	___fttol@f1,w
 13580  0D9F  00D2               	movwf	??___fttol
 13581  0DA0  084F               	movf	___fttol@f1+1,w
 13582  0DA1  00D3               	movwf	??___fttol+1
 13583  0DA2  0850               	movf	___fttol@f1+2,w
 13584  0DA3  00D4               	movwf	??___fttol+2
 13585  0DA4  3017               	movlw	23
 13586  0DA5                     u8625:	
 13587  0DA5  36D4               	lsrf	??___fttol+2,f
 13588  0DA6  0CD3               	rrf	??___fttol+1,f
 13589  0DA7  0CD2               	rrf	??___fttol,f
 13590  0DA8  0B89               	decfsz	9,f
 13591  0DA9  2DA5               	goto	u8625
 13592  0DAA  0852               	movf	??___fttol,w
 13593  0DAB  00D5               	movwf	??___fttol+3
 13594  0DAC  0855               	movf	??___fttol+3,w
 13595  0DAD  00D6               	movwf	___fttol@sign1
 13596  0DAE  17CF               	bsf	___fttol@f1+1,7
 13597  0DAF  30FF               	movlw	255
 13598  0DB0  05CE               	andwf	___fttol@f1,f
 13599  0DB1  30FF               	movlw	255
 13600  0DB2  05CF               	andwf	___fttol@f1+1,f
 13601  0DB3  3000               	movlw	0
 13602  0DB4  05D0               	andwf	___fttol@f1+2,f
 13603  0DB5  084E               	movf	___fttol@f1,w
 13604  0DB6  00D7               	movwf	___fttol@lval
 13605  0DB7  084F               	movf	___fttol@f1+1,w
 13606  0DB8  00D8               	movwf	___fttol@lval+1
 13607  0DB9  0850               	movf	___fttol@f1+2,w
 13608  0DBA  00D9               	movwf	___fttol@lval+2
 13609  0DBB  01DA               	clrf	___fttol@lval+3
 13610  0DBC  308E               	movlw	142
 13611  0DBD  02DB               	subwf	___fttol@exp1,f
 13612  0DBE  1FDB               	btfss	___fttol@exp1,7
 13613  0DBF  2DDC               	goto	l8216
 13614  0DC0  085B               	movf	___fttol@exp1,w
 13615  0DC1  3A80               	xorlw	128
 13616  0DC2  3E8F               	addlw	143
 13617  0DC3  1803               	skipnc
 13618  0DC4  2DCE               	goto	l8214
 13619  0DC5  3000               	movlw	0
 13620  0DC6  00D1               	movwf	?___fttol+3
 13621  0DC7  3000               	movlw	0
 13622  0DC8  00D0               	movwf	?___fttol+2
 13623  0DC9  3000               	movlw	0
 13624  0DCA  00CF               	movwf	?___fttol+1
 13625  0DCB  3000               	movlw	0
 13626  0DCC  00CE               	movwf	?___fttol
 13627  0DCD  0008               	return
 13628  0DCE                     l8214:	
 13629  0DCE  3001               	movlw	1
 13630  0DCF                     u8655:	
 13631  0DCF  36DA               	lsrf	___fttol@lval+3,f
 13632  0DD0  0CD9               	rrf	___fttol@lval+2,f
 13633  0DD1  0CD8               	rrf	___fttol@lval+1,f
 13634  0DD2  0CD7               	rrf	___fttol@lval,f
 13635  0DD3  0B89               	decfsz	9,f
 13636  0DD4  2DCF               	goto	u8655
 13637  0DD5  3001               	movlw	1
 13638  0DD6  00D2               	movwf	??___fttol
 13639  0DD7  0852               	movf	??___fttol,w
 13640  0DD8  07DB               	addwf	___fttol@exp1,f
 13641  0DD9  1903               	btfsc	3,2
 13642  0DDA  2DF5               	goto	l8226
 13643  0DDB  2DCE               	goto	l8214
 13644  0DDC                     l8216:	
 13645  0DDC  3018               	movlw	24
 13646  0DDD  025B               	subwf	___fttol@exp1,w
 13647  0DDE  1C03               	skipc
 13648  0DDF  2DF2               	goto	l8224
 13649  0DE0  3000               	movlw	0
 13650  0DE1  00D1               	movwf	?___fttol+3
 13651  0DE2  3000               	movlw	0
 13652  0DE3  00D0               	movwf	?___fttol+2
 13653  0DE4  3000               	movlw	0
 13654  0DE5  00CF               	movwf	?___fttol+1
 13655  0DE6  3000               	movlw	0
 13656  0DE7  00CE               	movwf	?___fttol
 13657  0DE8  0008               	return
 13658  0DE9                     l8222:	
 13659  0DE9  3001               	movlw	1
 13660  0DEA                     u8685:	
 13661  0DEA  35D7               	lslf	___fttol@lval,f
 13662  0DEB  0DD8               	rlf	___fttol@lval+1,f
 13663  0DEC  0DD9               	rlf	___fttol@lval+2,f
 13664  0DED  0DDA               	rlf	___fttol@lval+3,f
 13665  0DEE  0B89               	decfsz	9,f
 13666  0DEF  2DEA               	goto	u8685
 13667  0DF0  3001               	movlw	1
 13668  0DF1  02DB               	subwf	___fttol@exp1,f
 13669  0DF2                     l8224:	
 13670  0DF2  08DB               	movf	___fttol@exp1,f
 13671  0DF3  1D03               	skipz
 13672  0DF4  2DE9               	goto	l8222
 13673  0DF5                     l8226:	
 13674  0DF5  0856               	movf	___fttol@sign1,w
 13675  0DF6  1903               	btfsc	3,2
 13676  0DF7  2E03               	goto	l8230
 13677  0DF8  09D7               	comf	___fttol@lval,f
 13678  0DF9  09D8               	comf	___fttol@lval+1,f
 13679  0DFA  09D9               	comf	___fttol@lval+2,f
 13680  0DFB  09DA               	comf	___fttol@lval+3,f
 13681  0DFC  0AD7               	incf	___fttol@lval,f
 13682  0DFD  1903               	skipnz
 13683  0DFE  0AD8               	incf	___fttol@lval+1,f
 13684  0DFF  1903               	skipnz
 13685  0E00  0AD9               	incf	___fttol@lval+2,f
 13686  0E01  1903               	skipnz
 13687  0E02  0ADA               	incf	___fttol@lval+3,f
 13688  0E03                     l8230:	
 13689  0E03  085A               	movf	___fttol@lval+3,w
 13690  0E04  00D1               	movwf	?___fttol+3
 13691  0E05  0859               	movf	___fttol@lval+2,w
 13692  0E06  00D0               	movwf	?___fttol+2
 13693  0E07  0858               	movf	___fttol@lval+1,w
 13694  0E08  00CF               	movwf	?___fttol+1
 13695  0E09  0857               	movf	___fttol@lval,w
 13696  0E0A  00CE               	movwf	?___fttol
 13697  0E0B  0008               	return
 13698  0E0C                     __end_of___fttol:	
 13699                           
 13700                           	psect	text82
 13701  1C87                     __ptext82:	
 13702 ;; *************** function ___ftneg *****************
 13703 ;; Defined at:
 13704 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13705 ;; Parameters:    Size  Location     Type
 13706 ;;  f1              3   30[BANK0 ] float 
 13707 ;; Auto vars:     Size  Location     Type
 13708 ;;		None
 13709 ;; Return value:  Size  Location     Type
 13710 ;;                  3   30[BANK0 ] float 
 13711 ;; Registers used:
 13712 ;;		wreg
 13713 ;; Tracked objects:
 13714 ;;		On entry : 0/0
 13715 ;;		On exit  : 0/0
 13716 ;;		Unchanged: 0/0
 13717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13718 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;Total ram usage:        3 bytes
 13723 ;; Hardware stack levels used:    1
 13724 ;; Hardware stack levels required when called:    5
 13725 ;; This function calls:
 13726 ;;		Nothing
 13727 ;; This function is called by:
 13728 ;;		_getPercentValue
 13729 ;;		_setPercentValue
 13730 ;; This function uses a non-reentrant model
 13731 ;;
 13732                           
 13733                           
 13734                           ;psect for function ___ftneg
 13735  1C87                     ___ftneg:	
 13736                           
 13737                           ;incstack = 0
 13738                           ; Regs used in ___ftneg: [wreg]
 13739  1C87  0020               	movlb	0	; select bank0
 13740  1C88  0840               	movf	___ftneg@f1+2,w
 13741  1C89  043F               	iorwf	___ftneg@f1+1,w
 13742  1C8A  043E               	iorwf	___ftneg@f1,w
 13743  1C8B  1903               	skipnz
 13744  1C8C  0008               	return
 13745  1C8D  3080               	movlw	128
 13746  1C8E  06C0               	xorwf	___ftneg@f1+2,f
 13747  1C8F  0008               	return
 13748  1C90                     __end_of___ftneg:	
 13749                           
 13750                           	psect	text83
 13751  0EA7                     __ptext83:	
 13752 ;; *************** function ___ftdiv *****************
 13753 ;; Defined at:
 13754 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13755 ;; Parameters:    Size  Location     Type
 13756 ;;  f2              3   14[BANK0 ] float 
 13757 ;;  f1              3   17[BANK0 ] float 
 13758 ;; Auto vars:     Size  Location     Type
 13759 ;;  f3              3   25[BANK0 ] float 
 13760 ;;  sign            1   29[BANK0 ] unsigned char 
 13761 ;;  exp             1   28[BANK0 ] unsigned char 
 13762 ;;  cntr            1   24[BANK0 ] unsigned char 
 13763 ;; Return value:  Size  Location     Type
 13764 ;;                  3   14[BANK0 ] float 
 13765 ;; Registers used:
 13766 ;;		wreg, status,2, status,0, pclath, cstack
 13767 ;; Tracked objects:
 13768 ;;		On entry : 0/0
 13769 ;;		On exit  : 0/0
 13770 ;;		Unchanged: 0/0
 13771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13772 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13773 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13774 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13775 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13776 ;;Total ram usage:       16 bytes
 13777 ;; Hardware stack levels used:    1
 13778 ;; Hardware stack levels required when called:    6
 13779 ;; This function calls:
 13780 ;;		___ftpack
 13781 ;; This function is called by:
 13782 ;;		_getPercentValue
 13783 ;;		_setPercentValue
 13784 ;; This function uses a non-reentrant model
 13785 ;;
 13786                           
 13787                           
 13788                           ;psect for function ___ftdiv
 13789  0EA7                     ___ftdiv:	
 13790                           
 13791                           ;incstack = 0
 13792                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13793  0EA7  0020               	movlb	0	; select bank0
 13794  0EA8  0831               	movf	___ftdiv@f1,w
 13795  0EA9  00B4               	movwf	??___ftdiv
 13796  0EAA  0832               	movf	___ftdiv@f1+1,w
 13797  0EAB  00B5               	movwf	??___ftdiv+1
 13798  0EAC  0833               	movf	___ftdiv@f1+2,w
 13799  0EAD  00B6               	movwf	??___ftdiv+2
 13800  0EAE  1003               	clrc
 13801  0EAF  0D35               	rlf	??___ftdiv+1,w
 13802  0EB0  0D36               	rlf	??___ftdiv+2,w
 13803  0EB1  00B7               	movwf	??___ftdiv+3
 13804  0EB2  0837               	movf	??___ftdiv+3,w
 13805  0EB3  00BC               	movwf	___ftdiv@exp
 13806  0EB4  08BC               	movf	___ftdiv@exp,f
 13807  0EB5  1D03               	skipz
 13808  0EB6  2EBE               	goto	l8096
 13809  0EB7  3000               	movlw	0
 13810  0EB8  00AE               	movwf	?___ftdiv
 13811  0EB9  3000               	movlw	0
 13812  0EBA  00AF               	movwf	?___ftdiv+1
 13813  0EBB  3000               	movlw	0
 13814  0EBC  00B0               	movwf	?___ftdiv+2
 13815  0EBD  0008               	return
 13816  0EBE                     l8096:	
 13817  0EBE  082E               	movf	___ftdiv@f2,w
 13818  0EBF  00B4               	movwf	??___ftdiv
 13819  0EC0  082F               	movf	___ftdiv@f2+1,w
 13820  0EC1  00B5               	movwf	??___ftdiv+1
 13821  0EC2  0830               	movf	___ftdiv@f2+2,w
 13822  0EC3  00B6               	movwf	??___ftdiv+2
 13823  0EC4  1003               	clrc
 13824  0EC5  0D35               	rlf	??___ftdiv+1,w
 13825  0EC6  0D36               	rlf	??___ftdiv+2,w
 13826  0EC7  00B7               	movwf	??___ftdiv+3
 13827  0EC8  0837               	movf	??___ftdiv+3,w
 13828  0EC9  00BD               	movwf	___ftdiv@sign
 13829  0ECA  08BD               	movf	___ftdiv@sign,f
 13830  0ECB  1D03               	skipz
 13831  0ECC  2ED4               	goto	l8102
 13832  0ECD  3000               	movlw	0
 13833  0ECE  00AE               	movwf	?___ftdiv
 13834  0ECF  3000               	movlw	0
 13835  0ED0  00AF               	movwf	?___ftdiv+1
 13836  0ED1  3000               	movlw	0
 13837  0ED2  00B0               	movwf	?___ftdiv+2
 13838  0ED3  0008               	return
 13839  0ED4                     l8102:	
 13840  0ED4  3000               	movlw	0
 13841  0ED5  00B9               	movwf	___ftdiv@f3
 13842  0ED6  3000               	movlw	0
 13843  0ED7  00BA               	movwf	___ftdiv@f3+1
 13844  0ED8  3000               	movlw	0
 13845  0ED9  00BB               	movwf	___ftdiv@f3+2
 13846  0EDA  3089               	movlw	137
 13847  0EDB  073D               	addwf	___ftdiv@sign,w
 13848  0EDC  00B4               	movwf	??___ftdiv
 13849  0EDD  0834               	movf	??___ftdiv,w
 13850  0EDE  02BC               	subwf	___ftdiv@exp,f
 13851  0EDF  0831               	movf	___ftdiv@f1,w
 13852  0EE0  00B4               	movwf	??___ftdiv
 13853  0EE1  0832               	movf	___ftdiv@f1+1,w
 13854  0EE2  00B5               	movwf	??___ftdiv+1
 13855  0EE3  0833               	movf	___ftdiv@f1+2,w
 13856  0EE4  00B6               	movwf	??___ftdiv+2
 13857  0EE5  3010               	movlw	16
 13858  0EE6                     u8425:	
 13859  0EE6  36B6               	lsrf	??___ftdiv+2,f
 13860  0EE7  0CB5               	rrf	??___ftdiv+1,f
 13861  0EE8  0CB4               	rrf	??___ftdiv,f
 13862  0EE9  0B89               	decfsz	9,f
 13863  0EEA  2EE6               	goto	u8425
 13864  0EEB  0834               	movf	??___ftdiv,w
 13865  0EEC  00B7               	movwf	??___ftdiv+3
 13866  0EED  0837               	movf	??___ftdiv+3,w
 13867  0EEE  00BD               	movwf	___ftdiv@sign
 13868  0EEF  082E               	movf	___ftdiv@f2,w
 13869  0EF0  00B4               	movwf	??___ftdiv
 13870  0EF1  082F               	movf	___ftdiv@f2+1,w
 13871  0EF2  00B5               	movwf	??___ftdiv+1
 13872  0EF3  0830               	movf	___ftdiv@f2+2,w
 13873  0EF4  00B6               	movwf	??___ftdiv+2
 13874  0EF5  3010               	movlw	16
 13875  0EF6                     u8435:	
 13876  0EF6  36B6               	lsrf	??___ftdiv+2,f
 13877  0EF7  0CB5               	rrf	??___ftdiv+1,f
 13878  0EF8  0CB4               	rrf	??___ftdiv,f
 13879  0EF9  0B89               	decfsz	9,f
 13880  0EFA  2EF6               	goto	u8435
 13881  0EFB  0834               	movf	??___ftdiv,w
 13882  0EFC  00B7               	movwf	??___ftdiv+3
 13883  0EFD  0837               	movf	??___ftdiv+3,w
 13884  0EFE  06BD               	xorwf	___ftdiv@sign,f
 13885  0EFF  3080               	movlw	128
 13886  0F00  00B4               	movwf	??___ftdiv
 13887  0F01  0834               	movf	??___ftdiv,w
 13888  0F02  05BD               	andwf	___ftdiv@sign,f
 13889  0F03  17B2               	bsf	___ftdiv@f1+1,7
 13890  0F04  30FF               	movlw	255
 13891  0F05  05B1               	andwf	___ftdiv@f1,f
 13892  0F06  30FF               	movlw	255
 13893  0F07  05B2               	andwf	___ftdiv@f1+1,f
 13894  0F08  3000               	movlw	0
 13895  0F09  05B3               	andwf	___ftdiv@f1+2,f
 13896  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 13897  0F0B  30FF               	movlw	255
 13898  0F0C  05AE               	andwf	___ftdiv@f2,f
 13899  0F0D  30FF               	movlw	255
 13900  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 13901  0F0F  3000               	movlw	0
 13902  0F10  05B0               	andwf	___ftdiv@f2+2,f
 13903  0F11  3018               	movlw	24
 13904  0F12  00B4               	movwf	??___ftdiv
 13905  0F13  0834               	movf	??___ftdiv,w
 13906  0F14  00B8               	movwf	___ftdiv@cntr
 13907  0F15                     l8116:	
 13908  0F15  3001               	movlw	1
 13909  0F16                     u8445:	
 13910  0F16  35B9               	lslf	___ftdiv@f3,f
 13911  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 13912  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 13913  0F19  0B89               	decfsz	9,f
 13914  0F1A  2F16               	goto	u8445
 13915  0F1B  0830               	movf	___ftdiv@f2+2,w
 13916  0F1C  0233               	subwf	___ftdiv@f1+2,w
 13917  0F1D  1D03               	skipz
 13918  0F1E  2F25               	goto	u8455
 13919  0F1F  082F               	movf	___ftdiv@f2+1,w
 13920  0F20  0232               	subwf	___ftdiv@f1+1,w
 13921  0F21  1D03               	skipz
 13922  0F22  2F25               	goto	u8455
 13923  0F23  082E               	movf	___ftdiv@f2,w
 13924  0F24  0231               	subwf	___ftdiv@f1,w
 13925  0F25                     u8455:	
 13926  0F25  1C03               	skipc
 13927  0F26  2F2E               	goto	l8124
 13928  0F27  082E               	movf	___ftdiv@f2,w
 13929  0F28  02B1               	subwf	___ftdiv@f1,f
 13930  0F29  082F               	movf	___ftdiv@f2+1,w
 13931  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 13932  0F2B  0830               	movf	___ftdiv@f2+2,w
 13933  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 13934  0F2D  1439               	bsf	___ftdiv@f3,0
 13935  0F2E                     l8124:	
 13936  0F2E  3001               	movlw	1
 13937  0F2F                     u8465:	
 13938  0F2F  35B1               	lslf	___ftdiv@f1,f
 13939  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 13940  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 13941  0F32  0B89               	decfsz	9,f
 13942  0F33  2F2F               	goto	u8465
 13943  0F34  3001               	movlw	1
 13944  0F35  02B8               	subwf	___ftdiv@cntr,f
 13945  0F36  1D03               	btfss	3,2
 13946  0F37  2F15               	goto	l8116
 13947  0F38  0839               	movf	___ftdiv@f3,w
 13948  0F39  00A0               	movwf	___ftpack@arg
 13949  0F3A  083A               	movf	___ftdiv@f3+1,w
 13950  0F3B  00A1               	movwf	___ftpack@arg+1
 13951  0F3C  083B               	movf	___ftdiv@f3+2,w
 13952  0F3D  00A2               	movwf	___ftpack@arg+2
 13953  0F3E  083C               	movf	___ftdiv@exp,w
 13954  0F3F  00B4               	movwf	??___ftdiv
 13955  0F40  0834               	movf	??___ftdiv,w
 13956  0F41  00A3               	movwf	___ftpack@exp
 13957  0F42  083D               	movf	___ftdiv@sign,w
 13958  0F43  00B5               	movwf	??___ftdiv+1
 13959  0F44  0835               	movf	??___ftdiv+1,w
 13960  0F45  00A4               	movwf	___ftpack@sign
 13961  0F46  318A  220A         	fcall	___ftpack
 13962  0F48  0020               	movlb	0	; select bank0
 13963  0F49  0820               	movf	?___ftpack,w
 13964  0F4A  00AE               	movwf	?___ftdiv
 13965  0F4B  0821               	movf	?___ftpack+1,w
 13966  0F4C  00AF               	movwf	?___ftdiv+1
 13967  0F4D  0822               	movf	?___ftpack+2,w
 13968  0F4E  00B0               	movwf	?___ftdiv+2
 13969  0F4F  0008               	return
 13970  0F50                     __end_of___ftdiv:	
 13971                           
 13972                           	psect	text84
 13973  045A                     __ptext84:	
 13974 ;; *************** function ___ftadd *****************
 13975 ;; Defined at:
 13976 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13977 ;; Parameters:    Size  Location     Type
 13978 ;;  f1              3   33[BANK0 ] float 
 13979 ;;  f2              3   36[BANK0 ] float 
 13980 ;; Auto vars:     Size  Location     Type
 13981 ;;  exp1            1   45[BANK0 ] unsigned char 
 13982 ;;  exp2            1   44[BANK0 ] unsigned char 
 13983 ;;  sign            1   43[BANK0 ] unsigned char 
 13984 ;; Return value:  Size  Location     Type
 13985 ;;                  3   33[BANK0 ] float 
 13986 ;; Registers used:
 13987 ;;		wreg, status,2, status,0, pclath, cstack
 13988 ;; Tracked objects:
 13989 ;;		On entry : 0/0
 13990 ;;		On exit  : 0/0
 13991 ;;		Unchanged: 0/0
 13992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13993 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13994 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13995 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13996 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13997 ;;Total ram usage:       13 bytes
 13998 ;; Hardware stack levels used:    1
 13999 ;; Hardware stack levels required when called:    6
 14000 ;; This function calls:
 14001 ;;		___ftpack
 14002 ;; This function is called by:
 14003 ;;		_getPercentValue
 14004 ;;		_setPercentValue
 14005 ;; This function uses a non-reentrant model
 14006 ;;
 14007                           
 14008                           
 14009                           ;psect for function ___ftadd
 14010  045A                     ___ftadd:	
 14011                           
 14012                           ;incstack = 0
 14013                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14014  045A  0020               	movlb	0	; select bank0
 14015  045B  0841               	movf	___ftadd@f1,w
 14016  045C  00C7               	movwf	??___ftadd
 14017  045D  0842               	movf	___ftadd@f1+1,w
 14018  045E  00C8               	movwf	??___ftadd+1
 14019  045F  0843               	movf	___ftadd@f1+2,w
 14020  0460  00C9               	movwf	??___ftadd+2
 14021  0461  1003               	clrc
 14022  0462  0D48               	rlf	??___ftadd+1,w
 14023  0463  0D49               	rlf	??___ftadd+2,w
 14024  0464  00CA               	movwf	??___ftadd+3
 14025  0465  084A               	movf	??___ftadd+3,w
 14026  0466  00CD               	movwf	___ftadd@exp1
 14027  0467  0844               	movf	___ftadd@f2,w
 14028  0468  00C7               	movwf	??___ftadd
 14029  0469  0845               	movf	___ftadd@f2+1,w
 14030  046A  00C8               	movwf	??___ftadd+1
 14031  046B  0846               	movf	___ftadd@f2+2,w
 14032  046C  00C9               	movwf	??___ftadd+2
 14033  046D  1003               	clrc
 14034  046E  0D48               	rlf	??___ftadd+1,w
 14035  046F  0D49               	rlf	??___ftadd+2,w
 14036  0470  00CA               	movwf	??___ftadd+3
 14037  0471  084A               	movf	??___ftadd+3,w
 14038  0472  00CC               	movwf	___ftadd@exp2
 14039  0473  084D               	movf	___ftadd@exp1,w
 14040  0474  1903               	btfsc	3,2
 14041  0475  2C82               	goto	l8026
 14042  0476  084C               	movf	___ftadd@exp2,w
 14043  0477  024D               	subwf	___ftadd@exp1,w
 14044  0478  1803               	skipnc
 14045  0479  2C89               	goto	l8030
 14046  047A  034D               	decf	___ftadd@exp1,w
 14047  047B  3AFF               	xorlw	255
 14048  047C  074C               	addwf	___ftadd@exp2,w
 14049  047D  00C7               	movwf	??___ftadd
 14050  047E  3019               	movlw	25
 14051  047F  0247               	subwf	??___ftadd,w
 14052  0480  1C03               	skipc
 14053  0481  2C89               	goto	l8030
 14054  0482                     l8026:	
 14055  0482  0844               	movf	___ftadd@f2,w
 14056  0483  00C1               	movwf	?___ftadd
 14057  0484  0845               	movf	___ftadd@f2+1,w
 14058  0485  00C2               	movwf	?___ftadd+1
 14059  0486  0846               	movf	___ftadd@f2+2,w
 14060  0487  00C3               	movwf	?___ftadd+2
 14061  0488  0008               	return
 14062  0489                     l8030:	
 14063  0489  084C               	movf	___ftadd@exp2,w
 14064  048A  1903               	btfsc	3,2
 14065  048B  0008               	return
 14066  048C  084D               	movf	___ftadd@exp1,w
 14067  048D  024C               	subwf	___ftadd@exp2,w
 14068  048E  1803               	skipnc
 14069  048F  2C98               	goto	l8036
 14070  0490  034C               	decf	___ftadd@exp2,w
 14071  0491  3AFF               	xorlw	255
 14072  0492  074D               	addwf	___ftadd@exp1,w
 14073  0493  00C7               	movwf	??___ftadd
 14074  0494  3019               	movlw	25
 14075  0495  0247               	subwf	??___ftadd,w
 14076  0496  1803               	btfsc	3,0
 14077  0497  0008               	return
 14078  0498                     l8036:	
 14079  0498  3006               	movlw	6
 14080  0499  00C7               	movwf	??___ftadd
 14081  049A  0847               	movf	??___ftadd,w
 14082  049B  00CB               	movwf	___ftadd@sign
 14083  049C  1BC3               	btfsc	___ftadd@f1+2,7
 14084  049D  17CB               	bsf	___ftadd@sign,7
 14085  049E  1BC6               	btfsc	___ftadd@f2+2,7
 14086  049F  174B               	bsf	___ftadd@sign,6
 14087  04A0  17C2               	bsf	___ftadd@f1+1,7
 14088  04A1  30FF               	movlw	255
 14089  04A2  05C1               	andwf	___ftadd@f1,f
 14090  04A3  30FF               	movlw	255
 14091  04A4  05C2               	andwf	___ftadd@f1+1,f
 14092  04A5  3000               	movlw	0
 14093  04A6  05C3               	andwf	___ftadd@f1+2,f
 14094  04A7  17C5               	bsf	___ftadd@f2+1,7
 14095  04A8  30FF               	movlw	255
 14096  04A9  05C4               	andwf	___ftadd@f2,f
 14097  04AA  30FF               	movlw	255
 14098  04AB  05C5               	andwf	___ftadd@f2+1,f
 14099  04AC  3000               	movlw	0
 14100  04AD  05C6               	andwf	___ftadd@f2+2,f
 14101  04AE  084C               	movf	___ftadd@exp2,w
 14102  04AF  024D               	subwf	___ftadd@exp1,w
 14103  04B0  1803               	skipnc
 14104  04B1  2CD4               	goto	l8058
 14105  04B2                     l8048:	
 14106  04B2  3001               	movlw	1
 14107  04B3                     u8265:	
 14108  04B3  35C4               	lslf	___ftadd@f2,f
 14109  04B4  0DC5               	rlf	___ftadd@f2+1,f
 14110  04B5  0DC6               	rlf	___ftadd@f2+2,f
 14111  04B6  0B89               	decfsz	9,f
 14112  04B7  2CB3               	goto	u8265
 14113  04B8  3001               	movlw	1
 14114  04B9  02CC               	subwf	___ftadd@exp2,f
 14115  04BA  084C               	movf	___ftadd@exp2,w
 14116  04BB  064D               	xorwf	___ftadd@exp1,w
 14117  04BC  1903               	skipnz
 14118  04BD  2CCF               	goto	l8056
 14119  04BE  3001               	movlw	1
 14120  04BF  02CB               	subwf	___ftadd@sign,f
 14121  04C0  084B               	movf	___ftadd@sign,w
 14122  04C1  3907               	andlw	7
 14123  04C2  1903               	btfsc	3,2
 14124  04C3  2CCF               	goto	l8056
 14125  04C4  2CB2               	goto	l8048
 14126  04C5                     l8054:	
 14127  04C5  3001               	movlw	1
 14128  04C6                     u8295:	
 14129  04C6  36C3               	lsrf	___ftadd@f1+2,f
 14130  04C7  0CC2               	rrf	___ftadd@f1+1,f
 14131  04C8  0CC1               	rrf	___ftadd@f1,f
 14132  04C9  0B89               	decfsz	9,f
 14133  04CA  2CC6               	goto	u8295
 14134  04CB  3001               	movlw	1
 14135  04CC  00C7               	movwf	??___ftadd
 14136  04CD  0847               	movf	??___ftadd,w
 14137  04CE  07CD               	addwf	___ftadd@exp1,f
 14138  04CF                     l8056:	
 14139  04CF  084D               	movf	___ftadd@exp1,w
 14140  04D0  064C               	xorwf	___ftadd@exp2,w
 14141  04D1  1903               	btfsc	3,2
 14142  04D2  2CF9               	goto	l2779
 14143  04D3  2CC5               	goto	l8054
 14144  04D4                     l8058:	
 14145  04D4  084D               	movf	___ftadd@exp1,w
 14146  04D5  024C               	subwf	___ftadd@exp2,w
 14147  04D6  1803               	skipnc
 14148  04D7  2CF9               	goto	l2779
 14149  04D8                     l8060:	
 14150  04D8  3001               	movlw	1
 14151  04D9                     u8325:	
 14152  04D9  35C1               	lslf	___ftadd@f1,f
 14153  04DA  0DC2               	rlf	___ftadd@f1+1,f
 14154  04DB  0DC3               	rlf	___ftadd@f1+2,f
 14155  04DC  0B89               	decfsz	9,f
 14156  04DD  2CD9               	goto	u8325
 14157  04DE  3001               	movlw	1
 14158  04DF  02CD               	subwf	___ftadd@exp1,f
 14159  04E0  084C               	movf	___ftadd@exp2,w
 14160  04E1  064D               	xorwf	___ftadd@exp1,w
 14161  04E2  1903               	skipnz
 14162  04E3  2CF5               	goto	l8068
 14163  04E4  3001               	movlw	1
 14164  04E5  02CB               	subwf	___ftadd@sign,f
 14165  04E6  084B               	movf	___ftadd@sign,w
 14166  04E7  3907               	andlw	7
 14167  04E8  1903               	btfsc	3,2
 14168  04E9  2CF5               	goto	l8068
 14169  04EA  2CD8               	goto	l8060
 14170  04EB                     l8066:	
 14171  04EB  3001               	movlw	1
 14172  04EC                     u8355:	
 14173  04EC  36C6               	lsrf	___ftadd@f2+2,f
 14174  04ED  0CC5               	rrf	___ftadd@f2+1,f
 14175  04EE  0CC4               	rrf	___ftadd@f2,f
 14176  04EF  0B89               	decfsz	9,f
 14177  04F0  2CEC               	goto	u8355
 14178  04F1  3001               	movlw	1
 14179  04F2  00C7               	movwf	??___ftadd
 14180  04F3  0847               	movf	??___ftadd,w
 14181  04F4  07CC               	addwf	___ftadd@exp2,f
 14182  04F5                     l8068:	
 14183  04F5  084D               	movf	___ftadd@exp1,w
 14184  04F6  064C               	xorwf	___ftadd@exp2,w
 14185  04F7  1D03               	skipz
 14186  04F8  2CEB               	goto	l8066
 14187  04F9                     l2779:	
 14188  04F9  1FCB               	btfss	___ftadd@sign,7
 14189  04FA  2D0B               	goto	l8072
 14190  04FB  30FF               	movlw	255
 14191  04FC  06C1               	xorwf	___ftadd@f1,f
 14192  04FD  30FF               	movlw	255
 14193  04FE  06C2               	xorwf	___ftadd@f1+1,f
 14194  04FF  30FF               	movlw	255
 14195  0500  06C3               	xorwf	___ftadd@f1+2,f
 14196  0501  3001               	movlw	1
 14197  0502  07C1               	addwf	___ftadd@f1,f
 14198  0503  3000               	movlw	0
 14199  0504  1803               	skipnc
 14200  0505  3001               	movlw	1
 14201  0506  07C2               	addwf	___ftadd@f1+1,f
 14202  0507  3000               	movlw	0
 14203  0508  1803               	skipnc
 14204  0509  3001               	movlw	1
 14205  050A  07C3               	addwf	___ftadd@f1+2,f
 14206  050B                     l8072:	
 14207  050B  1F4B               	btfss	___ftadd@sign,6
 14208  050C  2D1D               	goto	l8076
 14209  050D  30FF               	movlw	255
 14210  050E  06C4               	xorwf	___ftadd@f2,f
 14211  050F  30FF               	movlw	255
 14212  0510  06C5               	xorwf	___ftadd@f2+1,f
 14213  0511  30FF               	movlw	255
 14214  0512  06C6               	xorwf	___ftadd@f2+2,f
 14215  0513  3001               	movlw	1
 14216  0514  07C4               	addwf	___ftadd@f2,f
 14217  0515  3000               	movlw	0
 14218  0516  1803               	skipnc
 14219  0517  3001               	movlw	1
 14220  0518  07C5               	addwf	___ftadd@f2+1,f
 14221  0519  3000               	movlw	0
 14222  051A  1803               	skipnc
 14223  051B  3001               	movlw	1
 14224  051C  07C6               	addwf	___ftadd@f2+2,f
 14225  051D                     l8076:	
 14226  051D  01CB               	clrf	___ftadd@sign
 14227  051E  0841               	movf	___ftadd@f1,w
 14228  051F  07C4               	addwf	___ftadd@f2,f
 14229  0520  0842               	movf	___ftadd@f1+1,w
 14230  0521  3DC5               	addwfc	___ftadd@f2+1,f
 14231  0522  0843               	movf	___ftadd@f1+2,w
 14232  0523  3DC6               	addwfc	___ftadd@f2+2,f
 14233  0524  1FC6               	btfss	___ftadd@f2+2,7
 14234  0525  2D38               	goto	l8086
 14235  0526  30FF               	movlw	255
 14236  0527  06C4               	xorwf	___ftadd@f2,f
 14237  0528  30FF               	movlw	255
 14238  0529  06C5               	xorwf	___ftadd@f2+1,f
 14239  052A  30FF               	movlw	255
 14240  052B  06C6               	xorwf	___ftadd@f2+2,f
 14241  052C  3001               	movlw	1
 14242  052D  07C4               	addwf	___ftadd@f2,f
 14243  052E  3000               	movlw	0
 14244  052F  1803               	skipnc
 14245  0530  3001               	movlw	1
 14246  0531  07C5               	addwf	___ftadd@f2+1,f
 14247  0532  3000               	movlw	0
 14248  0533  1803               	skipnc
 14249  0534  3001               	movlw	1
 14250  0535  07C6               	addwf	___ftadd@f2+2,f
 14251  0536  01CB               	clrf	___ftadd@sign
 14252  0537  0ACB               	incf	___ftadd@sign,f
 14253  0538                     l8086:	
 14254  0538  0844               	movf	___ftadd@f2,w
 14255  0539  00A0               	movwf	___ftpack@arg
 14256  053A  0845               	movf	___ftadd@f2+1,w
 14257  053B  00A1               	movwf	___ftpack@arg+1
 14258  053C  0846               	movf	___ftadd@f2+2,w
 14259  053D  00A2               	movwf	___ftpack@arg+2
 14260  053E  084D               	movf	___ftadd@exp1,w
 14261  053F  00C7               	movwf	??___ftadd
 14262  0540  0847               	movf	??___ftadd,w
 14263  0541  00A3               	movwf	___ftpack@exp
 14264  0542  084B               	movf	___ftadd@sign,w
 14265  0543  00C8               	movwf	??___ftadd+1
 14266  0544  0848               	movf	??___ftadd+1,w
 14267  0545  00A4               	movwf	___ftpack@sign
 14268  0546  318A  220A         	fcall	___ftpack
 14269  0548  0020               	movlb	0	; select bank0
 14270  0549  0820               	movf	?___ftpack,w
 14271  054A  00C1               	movwf	?___ftadd
 14272  054B  0821               	movf	?___ftpack+1,w
 14273  054C  00C2               	movwf	?___ftadd+1
 14274  054D  0822               	movf	?___ftpack+2,w
 14275  054E  00C3               	movwf	?___ftadd+2
 14276  054F  0008               	return
 14277  0550                     __end_of___ftadd:	
 14278                           
 14279                           	psect	text85
 14280  1087                     __ptext85:	
 14281 ;; *************** function ___awtoft *****************
 14282 ;; Defined at:
 14283 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14284 ;; Parameters:    Size  Location     Type
 14285 ;;  c               2    8[BANK0 ] int 
 14286 ;; Auto vars:     Size  Location     Type
 14287 ;;  sign            1   13[BANK0 ] unsigned char 
 14288 ;; Return value:  Size  Location     Type
 14289 ;;                  3    8[BANK0 ] float 
 14290 ;; Registers used:
 14291 ;;		wreg, status,2, status,0, pclath, cstack
 14292 ;; Tracked objects:
 14293 ;;		On entry : 0/0
 14294 ;;		On exit  : 0/0
 14295 ;;		Unchanged: 0/0
 14296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14297 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14300 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14301 ;;Total ram usage:        6 bytes
 14302 ;; Hardware stack levels used:    1
 14303 ;; Hardware stack levels required when called:    6
 14304 ;; This function calls:
 14305 ;;		___ftpack
 14306 ;; This function is called by:
 14307 ;;		_getPercentValue
 14308 ;;		_setPercentValue
 14309 ;; This function uses a non-reentrant model
 14310 ;;
 14311                           
 14312                           
 14313                           ;psect for function ___awtoft
 14314  1087                     ___awtoft:	
 14315                           
 14316                           ;incstack = 0
 14317                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14318  1087  0020               	movlb	0	; select bank0
 14319  1088  01AD               	clrf	___awtoft@sign
 14320  1089  1FA9               	btfss	___awtoft@c+1,7
 14321  108A  2892               	goto	l8014
 14322  108B  09A8               	comf	___awtoft@c,f
 14323  108C  09A9               	comf	___awtoft@c+1,f
 14324  108D  0AA8               	incf	___awtoft@c,f
 14325  108E  1903               	skipnz
 14326  108F  0AA9               	incf	___awtoft@c+1,f
 14327  1090  01AD               	clrf	___awtoft@sign
 14328  1091  0AAD               	incf	___awtoft@sign,f
 14329  1092                     l8014:	
 14330  1092  0828               	movf	___awtoft@c,w
 14331  1093  00A0               	movwf	___ftpack@arg
 14332  1094  0829               	movf	___awtoft@c+1,w
 14333  1095  00A1               	movwf	___ftpack@arg+1
 14334  1096  01A2               	clrf	___ftpack@arg+2
 14335  1097  308E               	movlw	142
 14336  1098  00AB               	movwf	??___awtoft
 14337  1099  082B               	movf	??___awtoft,w
 14338  109A  00A3               	movwf	___ftpack@exp
 14339  109B  082D               	movf	___awtoft@sign,w
 14340  109C  00AC               	movwf	??___awtoft+1
 14341  109D  082C               	movf	??___awtoft+1,w
 14342  109E  00A4               	movwf	___ftpack@sign
 14343  109F  318A  220A         	fcall	___ftpack
 14344  10A1  0020               	movlb	0	; select bank0
 14345  10A2  0820               	movf	?___ftpack,w
 14346  10A3  00A8               	movwf	?___awtoft
 14347  10A4  0821               	movf	?___ftpack+1,w
 14348  10A5  00A9               	movwf	?___awtoft+1
 14349  10A6  0822               	movf	?___ftpack+2,w
 14350  10A7  00AA               	movwf	?___awtoft+2
 14351  10A8  0008               	return
 14352  10A9                     __end_of___awtoft:	
 14353                           
 14354                           	psect	text86
 14355  0A0A                     __ptext86:	
 14356 ;; *************** function ___ftpack *****************
 14357 ;; Defined at:
 14358 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14359 ;; Parameters:    Size  Location     Type
 14360 ;;  arg             3    0[BANK0 ] unsigned um
 14361 ;;  exp             1    3[BANK0 ] unsigned char 
 14362 ;;  sign            1    4[BANK0 ] unsigned char 
 14363 ;; Auto vars:     Size  Location     Type
 14364 ;;		None
 14365 ;; Return value:  Size  Location     Type
 14366 ;;                  3    0[BANK0 ] float 
 14367 ;; Registers used:
 14368 ;;		wreg, status,2, status,0
 14369 ;; Tracked objects:
 14370 ;;		On entry : 0/0
 14371 ;;		On exit  : 0/0
 14372 ;;		Unchanged: 0/0
 14373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14374 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14376 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14378 ;;Total ram usage:        8 bytes
 14379 ;; Hardware stack levels used:    1
 14380 ;; Hardware stack levels required when called:    5
 14381 ;; This function calls:
 14382 ;;		Nothing
 14383 ;; This function is called by:
 14384 ;;		___awtoft
 14385 ;;		___ftadd
 14386 ;;		___ftdiv
 14387 ;;		___ftmul
 14388 ;; This function uses a non-reentrant model
 14389 ;;
 14390                           
 14391                           
 14392                           ;psect for function ___ftpack
 14393  0A0A                     ___ftpack:	
 14394                           
 14395                           ;incstack = 0
 14396                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14397  0A0A  0020               	movlb	0	; select bank0
 14398  0A0B  0823               	movf	___ftpack@exp,w
 14399  0A0C  1903               	btfsc	3,2
 14400  0A0D  2A13               	goto	l7964
 14401  0A0E  0822               	movf	___ftpack@arg+2,w
 14402  0A0F  0421               	iorwf	___ftpack@arg+1,w
 14403  0A10  0420               	iorwf	___ftpack@arg,w
 14404  0A11  1D03               	skipz
 14405  0A12  2A24               	goto	l7970
 14406  0A13                     l7964:	
 14407  0A13  3000               	movlw	0
 14408  0A14  00A0               	movwf	?___ftpack
 14409  0A15  3000               	movlw	0
 14410  0A16  00A1               	movwf	?___ftpack+1
 14411  0A17  3000               	movlw	0
 14412  0A18  00A2               	movwf	?___ftpack+2
 14413  0A19  0008               	return
 14414  0A1A                     l7968:	
 14415  0A1A  3001               	movlw	1
 14416  0A1B  00A5               	movwf	??___ftpack
 14417  0A1C  0825               	movf	??___ftpack,w
 14418  0A1D  07A3               	addwf	___ftpack@exp,f
 14419  0A1E  3001               	movlw	1
 14420  0A1F                     u8055:	
 14421  0A1F  36A2               	lsrf	___ftpack@arg+2,f
 14422  0A20  0CA1               	rrf	___ftpack@arg+1,f
 14423  0A21  0CA0               	rrf	___ftpack@arg,f
 14424  0A22  0B89               	decfsz	9,f
 14425  0A23  2A1F               	goto	u8055
 14426  0A24                     l7970:	
 14427  0A24  30FE               	movlw	254
 14428  0A25  0522               	andwf	___ftpack@arg+2,w
 14429  0A26  1903               	btfsc	3,2
 14430  0A27  2A3D               	goto	l2750
 14431  0A28  2A1A               	goto	l7968
 14432  0A29                     l7972:	
 14433  0A29  3001               	movlw	1
 14434  0A2A  00A5               	movwf	??___ftpack
 14435  0A2B  0825               	movf	??___ftpack,w
 14436  0A2C  07A3               	addwf	___ftpack@exp,f
 14437  0A2D  3001               	movlw	1
 14438  0A2E  07A0               	addwf	___ftpack@arg,f
 14439  0A2F  3000               	movlw	0
 14440  0A30  1803               	skipnc
 14441  0A31  3001               	movlw	1
 14442  0A32  07A1               	addwf	___ftpack@arg+1,f
 14443  0A33  3000               	movlw	0
 14444  0A34  1803               	skipnc
 14445  0A35  3001               	movlw	1
 14446  0A36  07A2               	addwf	___ftpack@arg+2,f
 14447  0A37  3001               	movlw	1
 14448  0A38                     u8075:	
 14449  0A38  36A2               	lsrf	___ftpack@arg+2,f
 14450  0A39  0CA1               	rrf	___ftpack@arg+1,f
 14451  0A3A  0CA0               	rrf	___ftpack@arg,f
 14452  0A3B  0B89               	decfsz	9,f
 14453  0A3C  2A38               	goto	u8075
 14454  0A3D                     l2750:	
 14455  0A3D  30FF               	movlw	255
 14456  0A3E  0522               	andwf	___ftpack@arg+2,w
 14457  0A3F  1903               	btfsc	3,2
 14458  0A40  2A4A               	goto	l7980
 14459  0A41  2A29               	goto	l7972
 14460  0A42                     l7978:	
 14461  0A42  3001               	movlw	1
 14462  0A43  02A3               	subwf	___ftpack@exp,f
 14463  0A44  3001               	movlw	1
 14464  0A45                     u8095:	
 14465  0A45  35A0               	lslf	___ftpack@arg,f
 14466  0A46  0DA1               	rlf	___ftpack@arg+1,f
 14467  0A47  0DA2               	rlf	___ftpack@arg+2,f
 14468  0A48  0B89               	decfsz	9,f
 14469  0A49  2A45               	goto	u8095
 14470  0A4A                     l7980:	
 14471  0A4A  1FA1               	btfss	___ftpack@arg+1,7
 14472  0A4B  2A42               	goto	l7978
 14473  0A4C  1823               	btfsc	___ftpack@exp,0
 14474  0A4D  2A54               	goto	l2756
 14475  0A4E  30FF               	movlw	255
 14476  0A4F  05A0               	andwf	___ftpack@arg,f
 14477  0A50  307F               	movlw	127
 14478  0A51  05A1               	andwf	___ftpack@arg+1,f
 14479  0A52  30FF               	movlw	255
 14480  0A53  05A2               	andwf	___ftpack@arg+2,f
 14481  0A54                     l2756:	
 14482  0A54  1003               	clrc
 14483  0A55  0CA3               	rrf	___ftpack@exp,f
 14484  0A56  0823               	movf	___ftpack@exp,w
 14485  0A57  00A5               	movwf	??___ftpack
 14486  0A58  01A6               	clrf	??___ftpack+1
 14487  0A59  01A7               	clrf	??___ftpack+2
 14488  0A5A  3010               	movlw	16
 14489  0A5B                     u8125:	
 14490  0A5B  35A5               	lslf	??___ftpack,f
 14491  0A5C  0DA6               	rlf	??___ftpack+1,f
 14492  0A5D  0DA7               	rlf	??___ftpack+2,f
 14493  0A5E  0B89               	decfsz	9,f
 14494  0A5F  2A5B               	goto	u8125
 14495  0A60  0825               	movf	??___ftpack,w
 14496  0A61  04A0               	iorwf	___ftpack@arg,f
 14497  0A62  0826               	movf	??___ftpack+1,w
 14498  0A63  04A1               	iorwf	___ftpack@arg+1,f
 14499  0A64  0827               	movf	??___ftpack+2,w
 14500  0A65  04A2               	iorwf	___ftpack@arg+2,f
 14501  0A66  0824               	movf	___ftpack@sign,w
 14502  0A67  1903               	btfsc	3,2
 14503  0A68  0008               	return
 14504  0A69  17A2               	bsf	___ftpack@arg+2,7
 14505  0A6A  0008               	return
 14506  0A6B                     __end_of___ftpack:	
 14507                           
 14508                           	psect	text87
 14509  13E2                     __ptext87:	
 14510 ;; *************** function _setLED *****************
 14511 ;; Defined at:
 14512 ;;		line 76 in file "../src/LED_B1.c"
 14513 ;; Parameters:    Size  Location     Type
 14514 ;;  led             1    wreg     unsigned char 
 14515 ;;  command         1    2[BANK0 ] unsigned char 
 14516 ;; Auto vars:     Size  Location     Type
 14517 ;;  led             1    3[BANK0 ] unsigned char 
 14518 ;; Return value:  Size  Location     Type
 14519 ;;		None               void
 14520 ;; Registers used:
 14521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14522 ;; Tracked objects:
 14523 ;;		On entry : 0/0
 14524 ;;		On exit  : 0/0
 14525 ;;		Unchanged: 0/0
 14526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14527 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14530 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14531 ;;Total ram usage:        2 bytes
 14532 ;; Hardware stack levels used:    1
 14533 ;; Hardware stack levels required when called:    6
 14534 ;; This function calls:
 14535 ;;		_LedPointSelect
 14536 ;; This function is called by:
 14537 ;;		_setDimmerLights
 14538 ;;		_setLED_Initialization
 14539 ;;		_Exception_Main
 14540 ;;		_setSw_Initialization
 14541 ;; This function uses a non-reentrant model
 14542 ;;
 14543                           
 14544                           
 14545                           ;psect for function _setLED
 14546  13E2                     _setLED:	
 14547                           
 14548                           ;incstack = 0
 14549                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14550                           ;setLED@led stored from wreg
 14551  13E2  0020               	movlb	0	; select bank0
 14552  13E3  00A3               	movwf	setLED@led
 14553                           
 14554                           ;LED_B1.c: 77: LedPointSelect(led);
 14555  13E4  0823               	movf	setLED@led,w
 14556  13E5  319D  2519  3193   	fcall	_LedPointSelect
 14557                           
 14558                           ;LED_B1.c: 78: if (command == 0) {
 14559  13E8  0020               	movlb	0	; select bank0
 14560  13E9  08A2               	movf	setLED@command,f
 14561  13EA  1D03               	skipz
 14562  13EB  2BF1               	goto	l8702
 14563                           
 14564                           ;LED_B1.c: 107: if (led == 99) {
 14565  13EC  0823               	movf	setLED@led,w
 14566  13ED  3A63               	xorlw	99
 14567  13EE  1D03               	skipz
 14568  13EF  2BF1               	goto	l8702
 14569                           
 14570                           ;LED_B1.c: 111: RB5 = 1;
 14571  13F0  168D               	bsf	13,5	;volatile
 14572  13F1                     l8702:	
 14573                           
 14574                           ;LED_B1.c: 113: }
 14575                           ;LED_B1.c: 115: }
 14576                           ;LED_B1.c: 116: if (command == 1) {
 14577  13F1  0822               	movf	setLED@command,w
 14578  13F2  3A01               	xorlw	1
 14579  13F3  1D03               	skipz
 14580  13F4  2BFA               	goto	l8708
 14581                           
 14582                           ;LED_B1.c: 145: if (led == 99) {
 14583  13F5  0823               	movf	setLED@led,w
 14584  13F6  3A63               	xorlw	99
 14585  13F7  1D03               	skipz
 14586  13F8  2BFA               	goto	l8708
 14587                           
 14588                           ;LED_B1.c: 149: RB5 = 0;
 14589  13F9  128D               	bcf	13,5	;volatile
 14590  13FA                     l8708:	
 14591                           
 14592                           ;LED_B1.c: 151: }
 14593                           ;LED_B1.c: 153: }
 14594                           ;LED_B1.c: 154: if (command == 10) {
 14595  13FA  0822               	movf	setLED@command,w
 14596  13FB  3A0A               	xorlw	10
 14597  13FC  1D03               	skipz
 14598  13FD  2C10               	goto	l8716
 14599                           
 14600                           ;LED_B1.c: 155: LED->GO = 0;
 14601  13FE  0021               	movlb	1	; select bank1
 14602  13FF  084E               	movf	_LED^(0+128),w
 14603  1400  0086               	movwf	6
 14604  1401  3001               	movlw	1	; select bank2/3
 14605  1402  0087               	movwf	7
 14606  1403  1081               	bcf	1,1
 14607                           
 14608                           ;LED_B1.c: 156: LED->Time = 0;
 14609  1404  0A4E               	incf	_LED^(0+128),w
 14610  1405  0086               	movwf	6
 14611  1406  3001               	movlw	1	; select bank2/3
 14612  1407  0087               	movwf	7
 14613  1408  3000               	movlw	0
 14614  1409  3FC0               	movwi [0]fsr1
 14615  140A  3FC1               	movwi [1]fsr1
 14616                           
 14617                           ;LED_B1.c: 185: if (led == 99) {
 14618  140B  0020               	movlb	0	; select bank0
 14619  140C  0823               	movf	setLED@led,w
 14620  140D  3A63               	xorlw	99
 14621  140E  1903               	btfsc	3,2
 14622                           
 14623                           ;LED_B1.c: 189: RB5 = 1;
 14624  140F  168D               	bsf	13,5	;volatile
 14625  1410                     l8716:	
 14626                           
 14627                           ;LED_B1.c: 191: }
 14628                           ;LED_B1.c: 193: }
 14629                           ;LED_B1.c: 194: if (command == 11) {
 14630  1410  0822               	movf	setLED@command,w
 14631  1411  3A0B               	xorlw	11
 14632  1412  1D03               	skipz
 14633  1413  0008               	return
 14634                           
 14635                           ;LED_B1.c: 195: LED->GO = 1;
 14636  1414  0021               	movlb	1	; select bank1
 14637  1415  084E               	movf	_LED^(0+128),w
 14638  1416  0086               	movwf	6
 14639  1417  3001               	movlw	1	; select bank2/3
 14640  1418  0087               	movwf	7
 14641  1419  1481               	bsf	1,1
 14642  141A  0008               	return
 14643  141B                     __end_of_setLED:	
 14644                           
 14645                           	psect	text88
 14646  1D19                     __ptext88:	
 14647 ;; *************** function _LedPointSelect *****************
 14648 ;; Defined at:
 14649 ;;		line 7 in file "../src/LED_B1.c"
 14650 ;; Parameters:    Size  Location     Type
 14651 ;;  led             1    wreg     unsigned char 
 14652 ;; Auto vars:     Size  Location     Type
 14653 ;;  led             1    1[BANK0 ] unsigned char 
 14654 ;; Return value:  Size  Location     Type
 14655 ;;		None               void
 14656 ;; Registers used:
 14657 ;;		wreg
 14658 ;; Tracked objects:
 14659 ;;		On entry : 0/0
 14660 ;;		On exit  : 0/0
 14661 ;;		Unchanged: 0/0
 14662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14667 ;;Total ram usage:        2 bytes
 14668 ;; Hardware stack levels used:    1
 14669 ;; Hardware stack levels required when called:    5
 14670 ;; This function calls:
 14671 ;;		Nothing
 14672 ;; This function is called by:
 14673 ;;		_setLED_Initialization
 14674 ;;		_setLED
 14675 ;;		_setLED_Main
 14676 ;; This function uses a non-reentrant model
 14677 ;;
 14678                           
 14679                           
 14680                           ;psect for function _LedPointSelect
 14681  1D19                     _LedPointSelect:	
 14682                           
 14683                           ;incstack = 0
 14684                           ; Regs used in _LedPointSelect: [wreg]
 14685                           ;LedPointSelect@led stored from wreg
 14686  1D19  0020               	movlb	0	; select bank0
 14687  1D1A  00A1               	movwf	LedPointSelect@led
 14688                           
 14689                           ;LED_B1.c: 24: if (led == 99) {
 14690  1D1B  0821               	movf	LedPointSelect@led,w
 14691  1D1C  3A63               	xorlw	99
 14692  1D1D  1D03               	skipz
 14693  1D1E  0008               	return
 14694                           
 14695                           ;LED_B1.c: 25: LED = &VarErrLED;
 14696  1D1F  3069               	movlw	_VarErrLED& (0+255)
 14697  1D20  00A0               	movwf	??_LedPointSelect
 14698  1D21  0820               	movf	??_LedPointSelect,w
 14699  1D22  0021               	movlb	1	; select bank1
 14700  1D23  00CE               	movwf	_LED^(0+128)
 14701  1D24  0008               	return
 14702  1D25                     __end_of_LedPointSelect:	
 14703                           
 14704                           	psect	text89
 14705  1D6F                     __ptext89:	
 14706 ;; *************** function _setDimmerLights_Line *****************
 14707 ;; Defined at:
 14708 ;;		line 706 in file "../src/Dimmer_B1.c"
 14709 ;; Parameters:    Size  Location     Type
 14710 ;;  lights          1    wreg     unsigned char 
 14711 ;; Auto vars:     Size  Location     Type
 14712 ;;  lights          1    0[BANK0 ] unsigned char 
 14713 ;; Return value:  Size  Location     Type
 14714 ;;		None               void
 14715 ;; Registers used:
 14716 ;;		wreg
 14717 ;; Tracked objects:
 14718 ;;		On entry : 0/0
 14719 ;;		On exit  : 0/0
 14720 ;;		Unchanged: 0/0
 14721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14723 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14725 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14726 ;;Total ram usage:        1 bytes
 14727 ;; Hardware stack levels used:    1
 14728 ;; Hardware stack levels required when called:    5
 14729 ;; This function calls:
 14730 ;;		Nothing
 14731 ;; This function is called by:
 14732 ;;		_setDimmerLights
 14733 ;;		_setDimmerLights_Adj
 14734 ;; This function uses a non-reentrant model
 14735 ;;
 14736                           
 14737                           
 14738                           ;psect for function _setDimmerLights_Line
 14739  1D6F                     _setDimmerLights_Line:	
 14740                           
 14741                           ;incstack = 0
 14742                           ; Regs used in _setDimmerLights_Line: [wreg]
 14743                           ;setDimmerLights_Line@lights stored from wreg
 14744  1D6F  0020               	movlb	0	; select bank0
 14745  1D70  00A0               	movwf	setDimmerLights_Line@lights
 14746                           
 14747                           ;Dimmer_B1.c: 707: Dimmer.LoadGO = 1;
 14748  1D71  0021               	movlb	1	; select bank1
 14749  1D72  1546               	bsf	_Dimmer^(0+128),2	;volatile
 14750                           
 14751                           ;Dimmer_B1.c: 709: DimmerLights1.Line = 0;
 14752  1D73  0022               	movlb	2	; select bank2
 14753  1D74  135D               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 14754                           
 14755                           ;Dimmer_B1.c: 718: if (lights == 1) {
 14756  1D75  0020               	movlb	0	; select bank0
 14757  1D76  0820               	movf	setDimmerLights_Line@lights,w
 14758  1D77  3A01               	xorlw	1
 14759  1D78  1D03               	skipz
 14760  1D79  0008               	return
 14761                           
 14762                           ;Dimmer_B1.c: 719: DimmerLights1.Line = 1;
 14763  1D7A  0022               	movlb	2	; select bank2
 14764  1D7B  175D               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 14765  1D7C  0008               	return
 14766  1D7D                     __end_of_setDimmerLights_Line:	
 14767                           
 14768                           	psect	text90
 14769  1ED3                     __ptext90:	
 14770 ;; *************** function _getDimmerLights_Allow_Condition *****************
 14771 ;; Defined at:
 14772 ;;		line 586 in file "../src/Dimmer_B1.c"
 14773 ;; Parameters:    Size  Location     Type
 14774 ;;  lights          1    wreg     unsigned char 
 14775 ;; Auto vars:     Size  Location     Type
 14776 ;;  lights          1    0[COMMON] unsigned char 
 14777 ;;  allow           1    2[BANK0 ] unsigned char 
 14778 ;; Return value:  Size  Location     Type
 14779 ;;                  1    wreg      unsigned char 
 14780 ;; Registers used:
 14781 ;;		wreg, status,2, pclath, cstack
 14782 ;; Tracked objects:
 14783 ;;		On entry : 0/0
 14784 ;;		On exit  : 0/0
 14785 ;;		Unchanged: 0/0
 14786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14788 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14790 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14791 ;;Total ram usage:        3 bytes
 14792 ;; Hardware stack levels used:    1
 14793 ;; Hardware stack levels required when called:    6
 14794 ;; This function calls:
 14795 ;;		_getLoad_OK
 14796 ;; This function is called by:
 14797 ;;		_setDimmerLights_AdjOn
 14798 ;;		_setDimmerLights_Main
 14799 ;; This function uses a non-reentrant model
 14800 ;;
 14801                           
 14802                           
 14803                           ;psect for function _getDimmerLights_Allow_Condition
 14804  1ED3                     _getDimmerLights_Allow_Condition:	
 14805                           
 14806                           ;Dimmer_B1.c: 587: char allow = 0;
 14807                           
 14808                           ;incstack = 0
 14809                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 14810  1ED3  0020               	movlb	0	; select bank0
 14811  1ED4  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 14812                           
 14813                           ;Dimmer_B1.c: 594: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 14814  1ED5  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14815  1ED6  0AA3               	incf	_getDimmerLights_Allow_Condition$2172,f
 14816  1ED7  319C  246F  319E   	fcall	_getLoad_OK
 14817  1EDA  3800               	iorlw	0
 14818  1EDB  1D03               	skipz
 14819  1EDC  2EE2               	goto	l8658
 14820  1EDD  0021               	movlb	1	; select bank1
 14821  1EDE  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 14822  1EDF  2EE2               	goto	l8658
 14823  1EE0  0020               	movlb	0	; select bank0
 14824  1EE1  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14825  1EE2                     l8658:	
 14826  1EE2  0020               	movlb	0	; select bank0
 14827  1EE3  0823               	movf	_getDimmerLights_Allow_Condition$2172,w
 14828  1EE4  00A1               	movwf	??_getDimmerLights_Allow_Condition
 14829  1EE5  0821               	movf	??_getDimmerLights_Allow_Condition,w
 14830  1EE6  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 14831                           
 14832                           ;Dimmer_B1.c: 619: return allow;
 14833  1EE7  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 14834  1EE8  0008               	return
 14835  1EE9                     __end_of_getDimmerLights_Allow_Condition:	
 14836                           
 14837                           	psect	text91
 14838  1C6F                     __ptext91:	
 14839 ;; *************** function _getLoad_OK *****************
 14840 ;; Defined at:
 14841 ;;		line 265 in file "../src/OverLoad_B1.c"
 14842 ;; Parameters:    Size  Location     Type
 14843 ;;		None
 14844 ;; Auto vars:     Size  Location     Type
 14845 ;;  ok              1    0[BANK0 ] unsigned char 
 14846 ;; Return value:  Size  Location     Type
 14847 ;;                  1    wreg      unsigned char 
 14848 ;; Registers used:
 14849 ;;		wreg, status,2
 14850 ;; Tracked objects:
 14851 ;;		On entry : 0/0
 14852 ;;		On exit  : 0/0
 14853 ;;		Unchanged: 0/0
 14854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14858 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14859 ;;Total ram usage:        1 bytes
 14860 ;; Hardware stack levels used:    1
 14861 ;; Hardware stack levels required when called:    5
 14862 ;; This function calls:
 14863 ;;		Nothing
 14864 ;; This function is called by:
 14865 ;;		_DimmerLights_Main
 14866 ;;		_getDimmerLights_Allow_Condition
 14867 ;; This function uses a non-reentrant model
 14868 ;;
 14869                           
 14870                           
 14871                           ;psect for function _getLoad_OK
 14872  1C6F                     _getLoad_OK:	
 14873                           
 14874                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 14875                           
 14876                           ;incstack = 0
 14877                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14878  1C6F  3000               	movlw	0
 14879  1C70  0022               	movlb	2	; select bank2
 14880  1C71  1BA5               	btfsc	_Load^(0+256),7
 14881  1C72  3001               	movlw	1
 14882  1C73  0020               	movlb	0	; select bank0
 14883  1C74  00A0               	movwf	getLoad_OK@ok
 14884                           
 14885                           ;OverLoad_B1.c: 267: return ok;
 14886  1C75  0820               	movf	getLoad_OK@ok,w
 14887  1C76  0008               	return
 14888  1C77                     __end_of_getLoad_OK:	
 14889                           
 14890                           	psect	text92
 14891  1CB6                     __ptext92:	
 14892 ;; *************** function _getMain_LightsStatus *****************
 14893 ;; Defined at:
 14894 ;;		line 375 in file "../src/Main_B1.c"
 14895 ;; Parameters:    Size  Location     Type
 14896 ;;		None
 14897 ;; Auto vars:     Size  Location     Type
 14898 ;;  status          1    0[BANK0 ] unsigned char 
 14899 ;; Return value:  Size  Location     Type
 14900 ;;                  1    wreg      unsigned char 
 14901 ;; Registers used:
 14902 ;;		wreg, status,2
 14903 ;; Tracked objects:
 14904 ;;		On entry : 0/0
 14905 ;;		On exit  : 0/0
 14906 ;;		Unchanged: 0/0
 14907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14911 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14912 ;;Total ram usage:        1 bytes
 14913 ;; Hardware stack levels used:    1
 14914 ;; Hardware stack levels required when called:    5
 14915 ;; This function calls:
 14916 ;;		Nothing
 14917 ;; This function is called by:
 14918 ;;		_DimmerLights_Main
 14919 ;;		_Flash_Memory_Main
 14920 ;;		_Exception_Main
 14921 ;;		_Load_Main
 14922 ;; This function uses a non-reentrant model
 14923 ;;
 14924                           
 14925                           
 14926                           ;psect for function _getMain_LightsStatus
 14927  1CB6                     _getMain_LightsStatus:	
 14928                           
 14929                           ;Main_B1.c: 376: char status = 0;
 14930                           
 14931                           ;incstack = 0
 14932                           ; Regs used in _getMain_LightsStatus: [wreg+status,2]
 14933  1CB6  0020               	movlb	0	; select bank0
 14934  1CB7  01A0               	clrf	getMain_LightsStatus@status
 14935                           
 14936                           ;Main_B1.c: 383: status = DimmerLights1.Status == 1 ? 1 : 0;
 14937  1CB8  3000               	movlw	0
 14938  1CB9  0022               	movlb	2	; select bank2
 14939  1CBA  18D5               	btfsc	(_DimmerLights1^(0+256)+2),1	;volatile
 14940  1CBB  3001               	movlw	1
 14941  1CBC  0020               	movlb	0	; select bank0
 14942  1CBD  00A0               	movwf	getMain_LightsStatus@status
 14943                           
 14944                           ;Main_B1.c: 422: return status;
 14945  1CBE  0820               	movf	getMain_LightsStatus@status,w
 14946  1CBF  0008               	return
 14947  1CC0                     __end_of_getMain_LightsStatus:	
 14948                           
 14949                           	psect	text93
 14950  126E                     __ptext93:	
 14951 ;; *************** function _getMain_All_Error_Status *****************
 14952 ;; Defined at:
 14953 ;;		line 426 in file "../src/Main_B1.c"
 14954 ;; Parameters:    Size  Location     Type
 14955 ;;  command         1    wreg     unsigned char 
 14956 ;; Auto vars:     Size  Location     Type
 14957 ;;  command         1    5[BANK0 ] unsigned char 
 14958 ;;  status          1    6[BANK0 ] unsigned char 
 14959 ;; Return value:  Size  Location     Type
 14960 ;;                  1    wreg      unsigned char 
 14961 ;; Registers used:
 14962 ;;		wreg, status,2, status,0
 14963 ;; Tracked objects:
 14964 ;;		On entry : 0/0
 14965 ;;		On exit  : 0/0
 14966 ;;		Unchanged: 0/0
 14967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14969 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14970 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14971 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14972 ;;Total ram usage:        7 bytes
 14973 ;; Hardware stack levels used:    1
 14974 ;; Hardware stack levels required when called:    5
 14975 ;; This function calls:
 14976 ;;		Nothing
 14977 ;; This function is called by:
 14978 ;;		_DimmerLights_Main
 14979 ;;		_Exception_Main
 14980 ;;		_Load_Main
 14981 ;;		_setTemp_Main
 14982 ;;		_setRF_Main
 14983 ;;		_getRxData
 14984 ;;		_setSw_Main
 14985 ;; This function uses a non-reentrant model
 14986 ;;
 14987                           
 14988                           
 14989                           ;psect for function _getMain_All_Error_Status
 14990  126E                     _getMain_All_Error_Status:	
 14991                           
 14992                           ;incstack = 0
 14993                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14994                           ;getMain_All_Error_Status@command stored from wreg
 14995  126E  0020               	movlb	0	; select bank0
 14996  126F  00A5               	movwf	getMain_All_Error_Status@command
 14997                           
 14998                           ;Main_B1.c: 427: char status = 0;
 14999  1270  01A6               	clrf	getMain_All_Error_Status@status
 15000                           
 15001                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 15002  1271  08A6               	movf	getMain_All_Error_Status@status,f
 15003  1272  1D03               	skipz
 15004  1273  2A88               	goto	l8676
 15005  1274  0825               	movf	getMain_All_Error_Status@command,w
 15006  1275  3A02               	xorlw	2
 15007  1276  1903               	skipnz
 15008  1277  2A88               	goto	l8676
 15009                           
 15010                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 15011  1278  0021               	movlb	1	; select bank1
 15012  1279  18D7               	btfsc	_Temp^(0+128),1
 15013  127A  2A7F               	goto	l8674
 15014  127B  0020               	movlb	0	; select bank0
 15015  127C  01A1               	clrf	_getMain_All_Error_Status$3424
 15016  127D  01A2               	clrf	_getMain_All_Error_Status$3424+1
 15017  127E  2A84               	goto	l1421
 15018  127F                     l8674:	
 15019  127F  3002               	movlw	2
 15020  1280  0020               	movlb	0	; select bank0
 15021  1281  00A1               	movwf	_getMain_All_Error_Status$3424
 15022  1282  3000               	movlw	0
 15023  1283  00A2               	movwf	_getMain_All_Error_Status$3424+1
 15024  1284                     l1421:	
 15025  1284  0821               	movf	_getMain_All_Error_Status$3424,w
 15026  1285  00A0               	movwf	??_getMain_All_Error_Status
 15027  1286  0820               	movf	??_getMain_All_Error_Status,w
 15028  1287  00A6               	movwf	getMain_All_Error_Status@status
 15029  1288                     l8676:	
 15030                           
 15031                           ;Main_B1.c: 440: }
 15032                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15033  1288  08A6               	movf	getMain_All_Error_Status@status,f
 15034  1289  1D03               	skipz
 15035  128A  2A9F               	goto	l1422
 15036  128B  0825               	movf	getMain_All_Error_Status@command,w
 15037  128C  3A03               	xorlw	3
 15038  128D  1903               	skipnz
 15039  128E  2A9F               	goto	l1422
 15040                           
 15041                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15042  128F  0022               	movlb	2	; select bank2
 15043  1290  1AA5               	btfsc	_Load^(0+256),5
 15044  1291  2A96               	goto	l8684
 15045  1292  0020               	movlb	0	; select bank0
 15046  1293  01A3               	clrf	_getMain_All_Error_Status$3425
 15047  1294  01A4               	clrf	_getMain_All_Error_Status$3425+1
 15048  1295  2A9B               	goto	l1426
 15049  1296                     l8684:	
 15050  1296  3003               	movlw	3
 15051  1297  0020               	movlb	0	; select bank0
 15052  1298  00A3               	movwf	_getMain_All_Error_Status$3425
 15053  1299  3000               	movlw	0
 15054  129A  00A4               	movwf	_getMain_All_Error_Status$3425+1
 15055  129B                     l1426:	
 15056  129B  0823               	movf	_getMain_All_Error_Status$3425,w
 15057  129C  00A0               	movwf	??_getMain_All_Error_Status
 15058  129D  0820               	movf	??_getMain_All_Error_Status,w
 15059  129E  00A6               	movwf	getMain_All_Error_Status@status
 15060  129F                     l1422:	
 15061                           
 15062                           ;Main_B1.c: 447: }
 15063                           ;Main_B1.c: 463: return status;
 15064  129F  0826               	movf	getMain_All_Error_Status@status,w
 15065  12A0  0008               	return
 15066  12A1                     __end_of_getMain_All_Error_Status:	
 15067                           
 15068                           	psect	text94
 15069  1CAC                     __ptext94:	
 15070 ;; *************** function _DimmerLights_Initialization *****************
 15071 ;; Defined at:
 15072 ;;		line 341 in file "../src/Dimmer_B1.c"
 15073 ;; Parameters:    Size  Location     Type
 15074 ;;		None
 15075 ;; Auto vars:     Size  Location     Type
 15076 ;;		None
 15077 ;; Return value:  Size  Location     Type
 15078 ;;		None               void
 15079 ;; Registers used:
 15080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15081 ;; Tracked objects:
 15082 ;;		On entry : 0/0
 15083 ;;		On exit  : 0/0
 15084 ;;		Unchanged: 0/0
 15085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15090 ;;Total ram usage:        1 bytes
 15091 ;; Hardware stack levels used:    1
 15092 ;; Hardware stack levels required when called:    7
 15093 ;; This function calls:
 15094 ;;		_setDimmerLights_Initialization
 15095 ;; This function is called by:
 15096 ;;		_main
 15097 ;; This function uses a non-reentrant model
 15098 ;;
 15099                           
 15100                           
 15101                           ;psect for function _DimmerLights_Initialization
 15102  1CAC                     _DimmerLights_Initialization:	
 15103                           
 15104                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15105                           
 15106                           ;incstack = 0
 15107                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15108  1CAC  3053               	movlw	_DimmerLights1& (0+255)
 15109  1CAD  0020               	movlb	0	; select bank0
 15110  1CAE  00A4               	movwf	??_DimmerLights_Initialization
 15111  1CAF  0824               	movf	??_DimmerLights_Initialization,w
 15112  1CB0  0021               	movlb	1	; select bank1
 15113  1CB1  00CC               	movwf	_DimmerLights11^(0+128)
 15114                           
 15115                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15116  1CB2  3001               	movlw	1
 15117  1CB3  3192  223D         	fcall	_setDimmerLights_Initialization
 15118  1CB5  0008               	return
 15119  1CB6                     __end_of_DimmerLights_Initialization:	
 15120                           
 15121                           	psect	text95
 15122  123D                     __ptext95:	
 15123 ;; *************** function _setDimmerLights_Initialization *****************
 15124 ;; Defined at:
 15125 ;;		line 365 in file "../src/Dimmer_B1.c"
 15126 ;; Parameters:    Size  Location     Type
 15127 ;;  lights          1    wreg     unsigned char 
 15128 ;; Auto vars:     Size  Location     Type
 15129 ;;  lights          1    3[BANK0 ] unsigned char 
 15130 ;; Return value:  Size  Location     Type
 15131 ;;		None               void
 15132 ;; Registers used:
 15133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15134 ;; Tracked objects:
 15135 ;;		On entry : 0/0
 15136 ;;		On exit  : 0/0
 15137 ;;		Unchanged: 0/0
 15138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15143 ;;Total ram usage:        2 bytes
 15144 ;; Hardware stack levels used:    1
 15145 ;; Hardware stack levels required when called:    6
 15146 ;; This function calls:
 15147 ;;		_DimmerLightsPointSelect
 15148 ;; This function is called by:
 15149 ;;		_DimmerLights_Initialization
 15150 ;; This function uses a non-reentrant model
 15151 ;;
 15152                           
 15153                           
 15154                           ;psect for function _setDimmerLights_Initialization
 15155  123D                     _setDimmerLights_Initialization:	
 15156                           
 15157                           ;incstack = 0
 15158                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15159                           ;setDimmerLights_Initialization@lights stored from wreg
 15160  123D  0020               	movlb	0	; select bank0
 15161  123E  00A3               	movwf	setDimmerLights_Initialization@lights
 15162                           
 15163                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15164  123F  0823               	movf	setDimmerLights_Initialization@lights,w
 15165  1240  319C  24D6  3192   	fcall	_DimmerLightsPointSelect
 15166                           
 15167                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15168  1243  3007               	movlw	7
 15169  1244  0020               	movlb	0	; select bank0
 15170  1245  00A2               	movwf	??_setDimmerLights_Initialization
 15171  1246  086F               	movf	_DimmerLights,w
 15172  1247  3E08               	addlw	8
 15173  1248  0086               	movwf	6
 15174  1249  3001               	movlw	1	; select bank2/3
 15175  124A  0087               	movwf	7
 15176  124B  0822               	movf	??_setDimmerLights_Initialization,w
 15177  124C  0081               	movwf	1
 15178                           
 15179                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(70*0.8));
 15180  124D  3038               	movlw	56
 15181  124E  00A2               	movwf	??_setDimmerLights_Initialization
 15182  124F  086F               	movf	_DimmerLights,w
 15183  1250  3E06               	addlw	6
 15184  1251  0086               	movwf	6
 15185  1252  3001               	movlw	1	; select bank2/3
 15186  1253  0087               	movwf	7
 15187  1254  0822               	movf	??_setDimmerLights_Initialization,w
 15188  1255  0081               	movwf	1
 15189                           
 15190                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15191  1256  300C               	movlw	12
 15192  1257  00A2               	movwf	??_setDimmerLights_Initialization
 15193  1258  086F               	movf	_DimmerLights,w
 15194  1259  3E09               	addlw	9
 15195  125A  0086               	movwf	6
 15196  125B  3001               	movlw	1	; select bank2/3
 15197  125C  0087               	movwf	7
 15198  125D  0822               	movf	??_setDimmerLights_Initialization,w
 15199  125E  0081               	movwf	1
 15200                           
 15201                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15202  125F  086F               	movf	_DimmerLights,w
 15203  1260  3E06               	addlw	6
 15204  1261  0086               	movwf	6
 15205  1262  3001               	movlw	1	; select bank2/3
 15206  1263  0087               	movwf	7
 15207  1264  0801               	movf	1,w
 15208  1265  00A2               	movwf	??_setDimmerLights_Initialization
 15209  1266  086F               	movf	_DimmerLights,w
 15210  1267  3E04               	addlw	4
 15211  1268  0086               	movwf	6
 15212  1269  3001               	movlw	1	; select bank2/3
 15213  126A  0087               	movwf	7
 15214  126B  0822               	movf	??_setDimmerLights_Initialization,w
 15215  126C  0081               	movwf	1
 15216  126D  0008               	return
 15217  126E                     __end_of_setDimmerLights_Initialization:	
 15218                           
 15219                           	psect	text96
 15220  1C3A                     __ptext96:	
 15221 ;; *************** function _DelayOff_Main *****************
 15222 ;; Defined at:
 15223 ;;		line 41 in file "../src/DelayOff_B1.c"
 15224 ;; Parameters:    Size  Location     Type
 15225 ;;		None
 15226 ;; Auto vars:     Size  Location     Type
 15227 ;;		None
 15228 ;; Return value:  Size  Location     Type
 15229 ;;		None               void
 15230 ;; Registers used:
 15231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15232 ;; Tracked objects:
 15233 ;;		On entry : 0/0
 15234 ;;		On exit  : 0/0
 15235 ;;		Unchanged: 0/0
 15236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;Total ram usage:        0 bytes
 15242 ;; Hardware stack levels used:    1
 15243 ;; Hardware stack levels required when called:   11
 15244 ;; This function calls:
 15245 ;;		_DlyOff_Main
 15246 ;; This function is called by:
 15247 ;;		_main
 15248 ;; This function uses a non-reentrant model
 15249 ;;
 15250                           
 15251                           
 15252                           ;psect for function _DelayOff_Main
 15253  1C3A                     _DelayOff_Main:	
 15254                           
 15255                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15256                           
 15257                           ;incstack = 0
 15258                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15259  1C3A  3001               	movlw	1
 15260  1C3B  3188  20F0         	fcall	_DlyOff_Main
 15261  1C3D  0008               	return
 15262  1C3E                     __end_of_DelayOff_Main:	
 15263                           
 15264                           	psect	text97
 15265  08F0                     __ptext97:	
 15266 ;; *************** function _DlyOff_Main *****************
 15267 ;; Defined at:
 15268 ;;		line 61 in file "../src/DelayOff_B1.c"
 15269 ;; Parameters:    Size  Location     Type
 15270 ;;  sw              1    wreg     unsigned char 
 15271 ;; Auto vars:     Size  Location     Type
 15272 ;;  sw              1   78[BANK0 ] unsigned char 
 15273 ;; Return value:  Size  Location     Type
 15274 ;;		None               void
 15275 ;; Registers used:
 15276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15277 ;; Tracked objects:
 15278 ;;		On entry : 0/0
 15279 ;;		On exit  : 0/0
 15280 ;;		Unchanged: 0/0
 15281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15284 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15285 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15286 ;;Total ram usage:        3 bytes
 15287 ;; Hardware stack levels used:    1
 15288 ;; Hardware stack levels required when called:   10
 15289 ;; This function calls:
 15290 ;;		_DelayOffPointSelect
 15291 ;;		_setBuz
 15292 ;;		_setDimmerLights_ErrorClose
 15293 ;; This function is called by:
 15294 ;;		_DelayOff_Main
 15295 ;; This function uses a non-reentrant model
 15296 ;;
 15297                           
 15298                           
 15299                           ;psect for function _DlyOff_Main
 15300  08F0                     _DlyOff_Main:	
 15301                           
 15302                           ;incstack = 0
 15303                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15304                           ;DlyOff_Main@sw stored from wreg
 15305  08F0  0020               	movlb	0	; select bank0
 15306  08F1  00EE               	movwf	DlyOff_Main@sw
 15307                           
 15308                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15309  08F2  086E               	movf	DlyOff_Main@sw,w
 15310  08F3  319C  24CB  3188   	fcall	_DelayOffPointSelect
 15311                           
 15312                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15313  08F6  0875               	movf	_DelayOff,w
 15314  08F7  0086               	movwf	6
 15315  08F8  3001               	movlw	1	; select bank2/3
 15316  08F9  0087               	movwf	7
 15317  08FA  1C81               	btfss	1,1
 15318  08FB  0008               	return
 15319                           
 15320                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15321  08FC  0875               	movf	_DelayOff,w
 15322  08FD  3E02               	addlw	2
 15323  08FE  0086               	movwf	6
 15324  08FF  3001               	movlw	1	; select bank2/3
 15325  0900  0087               	movwf	7
 15326  0901  3001               	movlw	1
 15327  0902  0781               	addwf	1,f
 15328  0903  3141               	addfsr 1,1
 15329  0904  1803               	skipnc
 15330  0905  0A81               	incf	1,f
 15331                           
 15332                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15333  0906  0875               	movf	_DelayOff,w
 15334  0907  3E02               	addlw	2
 15335  0908  0086               	movwf	6
 15336  0909  3001               	movlw	1	; select bank2/3
 15337  090A  0087               	movwf	7
 15338  090B  3F40               	moviw [0]fsr1
 15339  090C  0020               	movlb	0	; select bank0
 15340  090D  00EC               	movwf	??_DlyOff_Main
 15341  090E  3F41               	moviw [1]fsr1
 15342  090F  00ED               	movwf	??_DlyOff_Main+1
 15343  0910  3017               	movlw	23
 15344  0911  026D               	subwf	??_DlyOff_Main+1,w
 15345  0912  3070               	movlw	112
 15346  0913  1903               	skipnz
 15347  0914  026C               	subwf	??_DlyOff_Main,w
 15348  0915  1C03               	skipc
 15349  0916  0008               	return
 15350                           
 15351                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15352  0917  0875               	movf	_DelayOff,w
 15353  0918  3E02               	addlw	2
 15354  0919  0086               	movwf	6
 15355  091A  3001               	movlw	1	; select bank2/3
 15356  091B  0087               	movwf	7
 15357  091C  3000               	movlw	0
 15358  091D  3FC0               	movwi [0]fsr1
 15359  091E  3FC1               	movwi [1]fsr1
 15360                           
 15361                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15362  091F  3001               	movlw	1
 15363  0920  00EC               	movwf	??_DlyOff_Main
 15364  0921  0875               	movf	_DelayOff,w
 15365  0922  3E04               	addlw	4
 15366  0923  0086               	movwf	6
 15367  0924  3001               	movlw	1	; select bank2/3
 15368  0925  0087               	movwf	7
 15369  0926  086C               	movf	??_DlyOff_Main,w
 15370  0927  0781               	addwf	1,f
 15371                           
 15372                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15373  0928  0875               	movf	_DelayOff,w
 15374  0929  3E04               	addlw	4
 15375  092A  0086               	movwf	6
 15376  092B  3001               	movlw	1	; select bank2/3
 15377  092C  0087               	movwf	7
 15378  092D  0A75               	incf	_DelayOff,w
 15379  092E  0084               	movwf	4
 15380  092F  3001               	movlw	1	; select bank2/3
 15381  0930  0085               	movwf	5
 15382  0931  0800               	movf	0,w
 15383  0932  0201               	subwf	1,w
 15384  0933  1C03               	skipc
 15385  0934  0008               	return
 15386                           
 15387                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15388  0935  0875               	movf	_DelayOff,w
 15389  0936  3E04               	addlw	4
 15390  0937  0086               	movwf	6
 15391  0938  3001               	movlw	1	; select bank2/3
 15392  0939  0087               	movwf	7
 15393  093A  0181               	clrf	1
 15394                           
 15395                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15396  093B  0875               	movf	_DelayOff,w
 15397  093C  0086               	movwf	6
 15398  093D  3001               	movlw	1	; select bank2/3
 15399  093E  0087               	movwf	7
 15400  093F  1081               	bcf	1,1
 15401                           
 15402                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15403  0940  3064               	movlw	100
 15404  0941  00A9               	movwf	setBuz@time
 15405  0942  3000               	movlw	0
 15406  0943  00AA               	movwf	setBuz@time+1
 15407  0944  3001               	movlw	1
 15408  0945  3197  27A7  3188   	fcall	_setBuz
 15409                           
 15410                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15411  0948  0020               	movlb	0	; select bank0
 15412  0949  086E               	movf	DlyOff_Main@sw,w
 15413  094A  3189  214D         	fcall	_setDimmerLights_ErrorClose
 15414  094C  0008               	return
 15415  094D                     __end_of_DlyOff_Main:	
 15416                           
 15417                           	psect	text98
 15418  094D                     __ptext98:	
 15419 ;; *************** function _setDimmerLights_ErrorClose *****************
 15420 ;; Defined at:
 15421 ;;		line 846 in file "../src/Dimmer_B1.c"
 15422 ;; Parameters:    Size  Location     Type
 15423 ;;  lights          1    wreg     unsigned char 
 15424 ;; Auto vars:     Size  Location     Type
 15425 ;;  lights          1    1[BANK1 ] unsigned char 
 15426 ;;  i               2    2[BANK1 ] int 
 15427 ;;  count           1    0[BANK1 ] unsigned char 
 15428 ;; Return value:  Size  Location     Type
 15429 ;;		None               void
 15430 ;; Registers used:
 15431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15432 ;; Tracked objects:
 15433 ;;		On entry : 0/0
 15434 ;;		On exit  : 0/0
 15435 ;;		Unchanged: 0/0
 15436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15438 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15440 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15441 ;;Total ram usage:        5 bytes
 15442 ;; Hardware stack levels used:    1
 15443 ;; Hardware stack levels required when called:    9
 15444 ;; This function calls:
 15445 ;;		_DimmerLightsPointSelect
 15446 ;;		_getDimmerLights_Status
 15447 ;;		_setDimmerLights_SwOff
 15448 ;; This function is called by:
 15449 ;;		_DlyOff_Main
 15450 ;;		_setControl_Lights_Table
 15451 ;; This function uses a non-reentrant model
 15452 ;;
 15453                           
 15454                           
 15455                           ;psect for function _setDimmerLights_ErrorClose
 15456  094D                     _setDimmerLights_ErrorClose:	
 15457                           
 15458                           ;incstack = 0
 15459                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15460                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15461  094D  0021               	movlb	1	; select bank1
 15462  094E  00EA               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15463                           
 15464                           ;Dimmer_B1.c: 847: if (lights == 255) {
 15465  094F  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15466  0950  3AFF               	xorlw	255
 15467  0951  1D03               	skipz
 15468  0952  298C               	goto	l8558
 15469                           
 15470                           ;Dimmer_B1.c: 849: char count = 1;
 15471  0953  01E9               	clrf	setDimmerLights_ErrorClose@count^(0+128)
 15472  0954  0AE9               	incf	setDimmerLights_ErrorClose@count^(0+128),f
 15473                           
 15474                           ;Dimmer_B1.c: 857: for (int i = 0; i < count; i++) {
 15475  0955  01EB               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15476  0956  01EC               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15477  0957                     l8556:	
 15478  0957  086C               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15479  0958  3A80               	xorlw	128
 15480  0959  0020               	movlb	0	; select bank0
 15481  095A  00EB               	movwf	??_setDimmerLights_ErrorClose
 15482  095B  3080               	movlw	128
 15483  095C  026B               	subwf	??_setDimmerLights_ErrorClose,w
 15484  095D  1D03               	skipz
 15485  095E  2962               	goto	u9135
 15486  095F  0021               	movlb	1	; select bank1
 15487  0960  0869               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15488  0961  026B               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15489  0962                     u9135:	
 15490  0962  1803               	btfsc	3,0
 15491  0963  0008               	return
 15492                           
 15493                           ;Dimmer_B1.c: 858: DimmerLightsPointSelect(i + 1);
 15494  0964  0021               	movlb	1	; select bank1
 15495  0965  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15496  0966  3E01               	addlw	1
 15497  0967  319C  24D6  3189   	fcall	_DimmerLightsPointSelect
 15498                           
 15499                           ;Dimmer_B1.c: 859: if (getDimmerLights_Status(i + 1) == 1) {
 15500  096A  0021               	movlb	1	; select bank1
 15501  096B  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15502  096C  3E01               	addlw	1
 15503  096D  319D  25BB  3189   	fcall	_getDimmerLights_Status
 15504  0970  3A01               	xorlw	1
 15505  0971  1D03               	skipz
 15506  0972  2986               	goto	l8554
 15507                           
 15508                           ;Dimmer_B1.c: 860: DimmerLights->SwFlag = 1;
 15509  0973  0020               	movlb	0	; select bank0
 15510  0974  086F               	movf	_DimmerLights,w
 15511  0975  3E0B               	addlw	11
 15512  0976  0086               	movwf	6
 15513  0977  3001               	movlw	1	; select bank2/3
 15514  0978  0087               	movwf	7
 15515  0979  1481               	bsf	1,1
 15516                           
 15517                           ;Dimmer_B1.c: 861: DimmerLights->Status = 0;
 15518  097A  086F               	movf	_DimmerLights,w
 15519  097B  3E02               	addlw	2
 15520  097C  0086               	movwf	6
 15521  097D  3001               	movlw	1	; select bank2/3
 15522  097E  0087               	movwf	7
 15523  097F  1081               	bcf	1,1
 15524                           
 15525                           ;Dimmer_B1.c: 862: setDimmerLights_SwOff(i + 1);
 15526  0980  0021               	movlb	1	; select bank1
 15527  0981  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15528  0982  3E01               	addlw	1
 15529  0983  3195  2568  3189   	fcall	_setDimmerLights_SwOff
 15530  0986                     l8554:	
 15531  0986  3001               	movlw	1
 15532  0987  0021               	movlb	1	; select bank1
 15533  0988  07EB               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 15534  0989  3000               	movlw	0
 15535  098A  3DEC               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 15536  098B  2957               	goto	l8556
 15537  098C                     l8558:	
 15538                           ;Dimmer_B1.c: 863: }
 15539                           ;Dimmer_B1.c: 864: }
 15540                           ;Dimmer_B1.c: 865: } else {
 15541                           
 15542                           
 15543                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(lights);
 15544  098C  0021               	movlb	1	; select bank1
 15545  098D  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15546  098E  319C  24D6  3189   	fcall	_DimmerLightsPointSelect
 15547                           
 15548                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(lights) == 1) {
 15549  0991  0021               	movlb	1	; select bank1
 15550  0992  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15551  0993  319D  25BB  3189   	fcall	_getDimmerLights_Status
 15552  0996  3A01               	xorlw	1
 15553  0997  1D03               	skipz
 15554  0998  0008               	return
 15555                           
 15556                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 15557  0999  0020               	movlb	0	; select bank0
 15558  099A  086F               	movf	_DimmerLights,w
 15559  099B  3E0B               	addlw	11
 15560  099C  0086               	movwf	6
 15561  099D  3001               	movlw	1	; select bank2/3
 15562  099E  0087               	movwf	7
 15563  099F  1481               	bsf	1,1
 15564                           
 15565                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 15566  09A0  086F               	movf	_DimmerLights,w
 15567  09A1  3E02               	addlw	2
 15568  09A2  0086               	movwf	6
 15569  09A3  3001               	movlw	1	; select bank2/3
 15570  09A4  0087               	movwf	7
 15571  09A5  1081               	bcf	1,1
 15572                           
 15573                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(lights);
 15574  09A6  0021               	movlb	1	; select bank1
 15575  09A7  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15576  09A8  3195  2568         	fcall	_setDimmerLights_SwOff
 15577  09AA  0008               	return
 15578  09AB                     __end_of_setDimmerLights_ErrorClose:	
 15579                           
 15580                           	psect	text99
 15581  1568                     __ptext99:	
 15582 ;; *************** function _setDimmerLights_SwOff *****************
 15583 ;; Defined at:
 15584 ;;		line 450 in file "../src/Dimmer_B1.c"
 15585 ;; Parameters:    Size  Location     Type
 15586 ;;  sw              1    wreg     unsigned char 
 15587 ;; Auto vars:     Size  Location     Type
 15588 ;;  sw              1   74[BANK0 ] unsigned char 
 15589 ;; Return value:  Size  Location     Type
 15590 ;;		None               void
 15591 ;; Registers used:
 15592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15593 ;; Tracked objects:
 15594 ;;		On entry : 0/0
 15595 ;;		On exit  : 0/0
 15596 ;;		Unchanged: 0/0
 15597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;Total ram usage:        1 bytes
 15603 ;; Hardware stack levels used:    1
 15604 ;; Hardware stack levels required when called:    8
 15605 ;; This function calls:
 15606 ;;		_DimmerLightsPointSelect
 15607 ;;		_getDelayOff_GO
 15608 ;;		_setDelayOff_GO
 15609 ;; This function is called by:
 15610 ;;		_setDimmerLights_ErrorClose
 15611 ;;		_Exception_Main
 15612 ;;		_setRFSW_Control
 15613 ;;		_setSw_Main
 15614 ;; This function uses a non-reentrant model
 15615 ;;
 15616                           
 15617                           
 15618                           ;psect for function _setDimmerLights_SwOff
 15619  1568                     _setDimmerLights_SwOff:	
 15620                           
 15621                           ;incstack = 0
 15622                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15623                           ;setDimmerLights_SwOff@sw stored from wreg
 15624  1568  0020               	movlb	0	; select bank0
 15625  1569  00EA               	movwf	setDimmerLights_SwOff@sw
 15626                           
 15627                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 15628  156A  086A               	movf	setDimmerLights_SwOff@sw,w
 15629  156B  319C  24D6  3195   	fcall	_DimmerLightsPointSelect
 15630                           
 15631                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 15632  156E  0020               	movlb	0	; select bank0
 15633  156F  086F               	movf	_DimmerLights,w
 15634  1570  3E0B               	addlw	11
 15635  1571  0086               	movwf	6
 15636  1572  3001               	movlw	1	; select bank2/3
 15637  1573  0087               	movwf	7
 15638  1574  1C81               	btfss	1,1
 15639  1575  0008               	return
 15640                           
 15641                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 15642  1576  086F               	movf	_DimmerLights,w
 15643  1577  3E0B               	addlw	11
 15644  1578  0086               	movwf	6
 15645  1579  3001               	movlw	1	; select bank2/3
 15646  157A  0087               	movwf	7
 15647  157B  1081               	bcf	1,1
 15648                           
 15649                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 15650  157C  086F               	movf	_DimmerLights,w
 15651  157D  3E02               	addlw	2
 15652  157E  0086               	movwf	6
 15653  157F  3001               	movlw	1	; select bank2/3
 15654  1580  0087               	movwf	7
 15655  1581  1C81               	btfss	1,1
 15656  1582  2D9D               	goto	l8404
 15657                           
 15658                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 15659  1583  086F               	movf	_DimmerLights,w
 15660  1584  3E0B               	addlw	11
 15661  1585  0086               	movwf	6
 15662  1586  3001               	movlw	1	; select bank2/3
 15663  1587  0087               	movwf	7
 15664  1588  1D01               	btfss	1,2
 15665  1589  0008               	return
 15666                           
 15667                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 15668  158A  086F               	movf	_DimmerLights,w
 15669  158B  3E0B               	addlw	11
 15670  158C  0086               	movwf	6
 15671  158D  3001               	movlw	1	; select bank2/3
 15672  158E  0087               	movwf	7
 15673  158F  1101               	bcf	1,2
 15674                           
 15675                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 15676  1590  086F               	movf	_DimmerLights,w
 15677  1591  3E0A               	addlw	10
 15678  1592  0086               	movwf	6
 15679  1593  3001               	movlw	1	; select bank2/3
 15680  1594  0087               	movwf	7
 15681  1595  1581               	bsf	1,3
 15682                           
 15683                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 15684  1596  086F               	movf	_DimmerLights,w
 15685  1597  3E0A               	addlw	10
 15686  1598  0086               	movwf	6
 15687  1599  3001               	movlw	1	; select bank2/3
 15688  159A  0087               	movwf	7
 15689  159B  1101               	bcf	1,2
 15690                           
 15691                           ;Dimmer_B1.c: 462: }
 15692                           ;Dimmer_B1.c: 463: } else {
 15693  159C  0008               	return
 15694  159D                     l8404:	
 15695                           
 15696                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 15697  159D  086F               	movf	_DimmerLights,w
 15698  159E  3E0A               	addlw	10
 15699  159F  0086               	movwf	6
 15700  15A0  3001               	movlw	1	; select bank2/3
 15701  15A1  0087               	movwf	7
 15702  15A2  1481               	bsf	1,1
 15703                           
 15704                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 15705  15A3  086F               	movf	_DimmerLights,w
 15706  15A4  3E0A               	addlw	10
 15707  15A5  0086               	movwf	6
 15708  15A6  3001               	movlw	1	; select bank2/3
 15709  15A7  0087               	movwf	7
 15710  15A8  1001               	bcf	1,0
 15711                           
 15712                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 15713  15A9  086A               	movf	setDimmerLights_SwOff@sw,w
 15714  15AA  319D  259B  3195   	fcall	_getDelayOff_GO
 15715  15AD  3A01               	xorlw	1
 15716  15AE  1D03               	skipz
 15717  15AF  0008               	return
 15718                           
 15719                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 15720  15B0  0020               	movlb	0	; select bank0
 15721  15B1  01E6               	clrf	setDelayOff_GO@command
 15722  15B2  01E7               	clrf	setDelayOff_GO@value
 15723  15B3  086A               	movf	setDimmerLights_SwOff@sw,w
 15724  15B4  3196  26A8         	fcall	_setDelayOff_GO
 15725  15B6  0008               	return
 15726  15B7                     __end_of_setDimmerLights_SwOff:	
 15727                           
 15728                           	psect	text100
 15729  16A8                     __ptext100:	
 15730 ;; *************** function _setDelayOff_GO *****************
 15731 ;; Defined at:
 15732 ;;		line 83 in file "../src/DelayOff_B1.c"
 15733 ;; Parameters:    Size  Location     Type
 15734 ;;  sw              1    wreg     unsigned char 
 15735 ;;  command         1   70[BANK0 ] unsigned char 
 15736 ;;  value           1   71[BANK0 ] unsigned char 
 15737 ;; Auto vars:     Size  Location     Type
 15738 ;;  sw              1   73[BANK0 ] unsigned char 
 15739 ;; Return value:  Size  Location     Type
 15740 ;;		None               void
 15741 ;; Registers used:
 15742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15743 ;; Tracked objects:
 15744 ;;		On entry : 0/0
 15745 ;;		On exit  : 0/0
 15746 ;;		Unchanged: 0/0
 15747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15748 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15749 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15751 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15752 ;;Total ram usage:        4 bytes
 15753 ;; Hardware stack levels used:    1
 15754 ;; Hardware stack levels required when called:    7
 15755 ;; This function calls:
 15756 ;;		_DelayOffPointSelect
 15757 ;;		_DelayTimejudge
 15758 ;;		_setProductData
 15759 ;; This function is called by:
 15760 ;;		_setDimmerLights_SwOff
 15761 ;;		_setRFSW_Control
 15762 ;; This function uses a non-reentrant model
 15763 ;;
 15764                           
 15765                           
 15766                           ;psect for function _setDelayOff_GO
 15767  16A8                     _setDelayOff_GO:	
 15768                           
 15769                           ;incstack = 0
 15770                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15771                           ;setDelayOff_GO@sw stored from wreg
 15772  16A8  0020               	movlb	0	; select bank0
 15773  16A9  00E9               	movwf	setDelayOff_GO@sw
 15774                           
 15775                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15776  16AA  0869               	movf	setDelayOff_GO@sw,w
 15777  16AB  319C  24CB  3196   	fcall	_DelayOffPointSelect
 15778                           
 15779                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15780  16AE  0020               	movlb	0	; select bank0
 15781  16AF  0866               	movf	setDelayOff_GO@command,w
 15782  16B0  3A01               	xorlw	1
 15783  16B1  3000               	movlw	0
 15784  16B2  1903               	skipnz
 15785  16B3  3001               	movlw	1
 15786  16B4  00E8               	movwf	??_setDelayOff_GO
 15787  16B5  0875               	movf	_DelayOff,w
 15788  16B6  0086               	movwf	6
 15789  16B7  3001               	movlw	1	; select bank2/3
 15790  16B8  0087               	movwf	7
 15791  16B9  0DE8               	rlf	??_setDelayOff_GO,f
 15792  16BA  0801               	movf	1,w
 15793  16BB  0668               	xorwf	??_setDelayOff_GO,w
 15794  16BC  39FD               	andlw	-3
 15795  16BD  0668               	xorwf	??_setDelayOff_GO,w
 15796  16BE  0081               	movwf	1
 15797                           
 15798                           ;DelayOff_B1.c: 89: if (command == 1) {
 15799  16BF  0866               	movf	setDelayOff_GO@command,w
 15800  16C0  3A01               	xorlw	1
 15801  16C1  1D03               	skipz
 15802  16C2  2EE6               	goto	l8358
 15803                           
 15804                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15805  16C3  0867               	movf	setDelayOff_GO@value,w
 15806  16C4  3191  218A  3196   	fcall	_DelayTimejudge
 15807  16C7  0020               	movlb	0	; select bank0
 15808  16C8  00E8               	movwf	??_setDelayOff_GO
 15809  16C9  0A75               	incf	_DelayOff,w
 15810  16CA  0086               	movwf	6
 15811  16CB  3001               	movlw	1	; select bank2/3
 15812  16CC  0087               	movwf	7
 15813  16CD  0868               	movf	??_setDelayOff_GO,w
 15814  16CE  0081               	movwf	1
 15815                           
 15816                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15817  16CF  300F               	movlw	15
 15818  16D0  0567               	andwf	setDelayOff_GO@value,w
 15819  16D1  00E8               	movwf	??_setDelayOff_GO
 15820  16D2  0868               	movf	??_setDelayOff_GO,w
 15821  16D3  3A05               	xorlw	5
 15822  16D4  1903               	skipnz
 15823  16D5  2EDA               	goto	l8352
 15824  16D6  0867               	movf	setDelayOff_GO@value,w
 15825  16D7  390F               	andlw	15
 15826  16D8  1D03               	btfss	3,2
 15827  16D9  2EE0               	goto	l8356
 15828  16DA                     l8352:	
 15829  16DA  3026               	movlw	38
 15830  16DB  0267               	subwf	setDelayOff_GO@value,w
 15831  16DC  1803               	skipnc
 15832  16DD  2EE0               	goto	l8356
 15833                           
 15834                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 15835  16DE  0867               	movf	setDelayOff_GO@value,w
 15836  16DF  2EE2               	goto	L6
 15837  16E0                     l8356:	
 15838                           ;DelayOff_B1.c: 93: } else {
 15839                           
 15840                           
 15841                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 15842  16E0  3005               	movlw	5
 15843  16E1  0020               	movlb	0	; select bank0
 15844  16E2                     L6:	
 15845  16E2  00E8               	movwf	??_setDelayOff_GO
 15846  16E3  0868               	movf	??_setDelayOff_GO,w
 15847  16E4  00E2               	movwf	setProductData@value
 15848  16E5  2EE8               	goto	L5
 15849  16E6                     l8358:	
 15850                           ;DelayOff_B1.c: 95: }
 15851                           ;DelayOff_B1.c: 96: } else {
 15852                           
 15853                           
 15854                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 15855  16E6  0020               	movlb	0	; select bank0
 15856  16E7  01E2               	clrf	setProductData@value
 15857  16E8                     L5:	
 15858  16E8  0869               	movf	setDelayOff_GO@sw,w
 15859  16E9  3E1A               	addlw	26
 15860  16EA  319D  2561         	fcall	_setProductData
 15861                           
 15862                           ;DelayOff_B1.c: 98: }
 15863                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15864  16EC  0875               	movf	_DelayOff,w
 15865  16ED  3E02               	addlw	2
 15866  16EE  0086               	movwf	6
 15867  16EF  3001               	movlw	1	; select bank2/3
 15868  16F0  0087               	movwf	7
 15869  16F1  3000               	movlw	0
 15870  16F2  3FC0               	movwi [0]fsr1
 15871  16F3  3FC1               	movwi [1]fsr1
 15872                           
 15873                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15874  16F4  0875               	movf	_DelayOff,w
 15875  16F5  3E04               	addlw	4
 15876  16F6  0086               	movwf	6
 15877  16F7  3001               	movlw	1	; select bank2/3
 15878  16F8  0087               	movwf	7
 15879  16F9  0181               	clrf	1
 15880  16FA  0008               	return
 15881  16FB                     __end_of_setDelayOff_GO:	
 15882                           
 15883                           	psect	text101
 15884  1D61                     __ptext101:	
 15885 ;; *************** function _setProductData *****************
 15886 ;; Defined at:
 15887 ;;		line 605 in file "../src/Main_B1.c"
 15888 ;; Parameters:    Size  Location     Type
 15889 ;;  address         1    wreg     unsigned char 
 15890 ;;  value           1   66[BANK0 ] unsigned char 
 15891 ;; Auto vars:     Size  Location     Type
 15892 ;;  address         1   69[BANK0 ] unsigned char 
 15893 ;; Return value:  Size  Location     Type
 15894 ;;		None               void
 15895 ;; Registers used:
 15896 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15897 ;; Tracked objects:
 15898 ;;		On entry : 0/0
 15899 ;;		On exit  : 0/0
 15900 ;;		Unchanged: 0/0
 15901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15902 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15904 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15905 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15906 ;;Total ram usage:        4 bytes
 15907 ;; Hardware stack levels used:    1
 15908 ;; Hardware stack levels required when called:    5
 15909 ;; This function calls:
 15910 ;;		Nothing
 15911 ;; This function is called by:
 15912 ;;		_setDelayOff_GO
 15913 ;;		_setDimmerLights
 15914 ;;		_setDimmerLights_Adj
 15915 ;;		_setTemp_Main
 15916 ;;		_setLog_Code
 15917 ;;		_setControl_Lights_Table
 15918 ;;		_setRFSW_AdjControl
 15919 ;;		_setRF_DimmerValue
 15920 ;;		_setRF_DimmerLights
 15921 ;; This function uses a non-reentrant model
 15922 ;;
 15923                           
 15924                           
 15925                           ;psect for function _setProductData
 15926  1D61                     _setProductData:	
 15927                           
 15928                           ;incstack = 0
 15929                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 15930                           ;setProductData@address stored from wreg
 15931  1D61  0020               	movlb	0	; select bank0
 15932  1D62  00E5               	movwf	setProductData@address
 15933                           
 15934                           ;Main_B1.c: 606: product->Data[address] = value;
 15935  1D63  0862               	movf	setProductData@value,w
 15936  1D64  00E3               	movwf	??_setProductData
 15937  1D65  0865               	movf	setProductData@address,w
 15938  1D66  0779               	addwf	_product,w
 15939  1D67  00E4               	movwf	??_setProductData+1
 15940  1D68  0864               	movf	??_setProductData+1,w
 15941  1D69  0086               	movwf	6
 15942  1D6A  3002               	movlw	2	; select bank4/5
 15943  1D6B  0087               	movwf	7
 15944  1D6C  0863               	movf	??_setProductData,w
 15945  1D6D  0081               	movwf	1
 15946  1D6E  0008               	return
 15947  1D6F                     __end_of_setProductData:	
 15948                           
 15949                           	psect	text102
 15950  118A                     __ptext102:	
 15951 ;; *************** function _DelayTimejudge *****************
 15952 ;; Defined at:
 15953 ;;		line 112 in file "../src/DelayOff_B1.c"
 15954 ;; Parameters:    Size  Location     Type
 15955 ;;  value           1    wreg     unsigned char 
 15956 ;; Auto vars:     Size  Location     Type
 15957 ;;  value           1    9[BANK0 ] unsigned char 
 15958 ;;  k               1    8[BANK0 ] unsigned char 
 15959 ;;  j               1    7[BANK0 ] unsigned char 
 15960 ;;  i               1    6[BANK0 ] unsigned char 
 15961 ;; Return value:  Size  Location     Type
 15962 ;;                  1    wreg      unsigned char 
 15963 ;; Registers used:
 15964 ;;		wreg, status,2, status,0, pclath, cstack
 15965 ;; Tracked objects:
 15966 ;;		On entry : 0/0
 15967 ;;		On exit  : 0/0
 15968 ;;		Unchanged: 0/0
 15969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15971 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15972 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15973 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15974 ;;Total ram usage:        6 bytes
 15975 ;; Hardware stack levels used:    1
 15976 ;; Hardware stack levels required when called:    6
 15977 ;; This function calls:
 15978 ;;		___bmul
 15979 ;; This function is called by:
 15980 ;;		_setDelayOff_GO
 15981 ;; This function uses a non-reentrant model
 15982 ;;
 15983                           
 15984                           
 15985                           ;psect for function _DelayTimejudge
 15986  118A                     _DelayTimejudge:	
 15987                           
 15988                           ;incstack = 0
 15989                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 15990                           ;DelayTimejudge@value stored from wreg
 15991  118A  0020               	movlb	0	; select bank0
 15992  118B  00A9               	movwf	DelayTimejudge@value
 15993                           
 15994                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 15995  118C  3005               	movlw	5
 15996  118D  00A4               	movwf	??_DelayTimejudge
 15997  118E  0824               	movf	??_DelayTimejudge,w
 15998  118F  00A6               	movwf	DelayTimejudge@i
 15999  1190  01A7               	clrf	DelayTimejudge@j
 16000  1191  01A8               	clrf	DelayTimejudge@k
 16001                           
 16002                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16003  1192  3031               	movlw	49
 16004  1193  0229               	subwf	DelayTimejudge@value,w
 16005  1194  1803               	skipnc
 16006  1195  29B2               	goto	l8250
 16007                           
 16008                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16009  1196  0829               	movf	DelayTimejudge@value,w
 16010  1197  390F               	andlw	15
 16011  1198  00A4               	movwf	??_DelayTimejudge
 16012  1199  0824               	movf	??_DelayTimejudge,w
 16013  119A  00A7               	movwf	DelayTimejudge@j
 16014                           
 16015                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16016  119B  0829               	movf	DelayTimejudge@value,w
 16017  119C  00A4               	movwf	??_DelayTimejudge
 16018  119D  3004               	movlw	4
 16019  119E                     u8735:	
 16020  119E  36A4               	lsrf	??_DelayTimejudge,f
 16021  119F  0B89               	decfsz	9,f
 16022  11A0  299E               	goto	u8735
 16023  11A1  0824               	movf	??_DelayTimejudge,w
 16024  11A2  390F               	andlw	15
 16025  11A3  00A5               	movwf	??_DelayTimejudge+1
 16026  11A4  0825               	movf	??_DelayTimejudge+1,w
 16027  11A5  00A8               	movwf	DelayTimejudge@k
 16028                           
 16029                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16030  11A6  300A               	movlw	10
 16031  11A7  00A4               	movwf	??_DelayTimejudge
 16032  11A8  0824               	movf	??_DelayTimejudge,w
 16033  11A9  00A0               	movwf	___bmul@multiplicand
 16034  11AA  0828               	movf	DelayTimejudge@k,w
 16035  11AB  319D  25FF         	fcall	___bmul
 16036  11AD  0020               	movlb	0	; select bank0
 16037  11AE  0727               	addwf	DelayTimejudge@j,w
 16038  11AF  00A5               	movwf	??_DelayTimejudge+1
 16039  11B0  0825               	movf	??_DelayTimejudge+1,w
 16040  11B1  00A6               	movwf	DelayTimejudge@i
 16041  11B2                     l8250:	
 16042                           
 16043                           ;DelayOff_B1.c: 118: }
 16044                           ;DelayOff_B1.c: 139: return i;
 16045  11B2  0826               	movf	DelayTimejudge@i,w
 16046  11B3  0008               	return
 16047  11B4                     __end_of_DelayTimejudge:	
 16048                           
 16049                           	psect	text103
 16050  1DFF                     __ptext103:	
 16051 ;; *************** function ___bmul *****************
 16052 ;; Defined at:
 16053 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16054 ;; Parameters:    Size  Location     Type
 16055 ;;  multiplier      1    wreg     unsigned char 
 16056 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16057 ;; Auto vars:     Size  Location     Type
 16058 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16059 ;;  product         1    2[BANK0 ] unsigned char 
 16060 ;; Return value:  Size  Location     Type
 16061 ;;                  1    wreg      unsigned char 
 16062 ;; Registers used:
 16063 ;;		wreg, status,2, status,0
 16064 ;; Tracked objects:
 16065 ;;		On entry : 0/0
 16066 ;;		On exit  : 0/0
 16067 ;;		Unchanged: 0/0
 16068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16069 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16072 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16073 ;;Total ram usage:        4 bytes
 16074 ;; Hardware stack levels used:    1
 16075 ;; Hardware stack levels required when called:    5
 16076 ;; This function calls:
 16077 ;;		Nothing
 16078 ;; This function is called by:
 16079 ;;		_DelayTimejudge
 16080 ;; This function uses a non-reentrant model
 16081 ;;
 16082                           
 16083                           
 16084                           ;psect for function ___bmul
 16085  1DFF                     ___bmul:	
 16086                           
 16087                           ;incstack = 0
 16088                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16089                           ;___bmul@multiplier stored from wreg
 16090  1DFF  0020               	movlb	0	; select bank0
 16091  1E00  00A3               	movwf	___bmul@multiplier
 16092  1E01  01A2               	clrf	___bmul@product
 16093  1E02                     l7992:	
 16094  1E02  1C23               	btfss	___bmul@multiplier,0
 16095  1E03  2E08               	goto	l7996
 16096  1E04  0820               	movf	___bmul@multiplicand,w
 16097  1E05  00A1               	movwf	??___bmul
 16098  1E06  0821               	movf	??___bmul,w
 16099  1E07  07A2               	addwf	___bmul@product,f
 16100  1E08                     l7996:	
 16101  1E08  1003               	clrc
 16102  1E09  0DA0               	rlf	___bmul@multiplicand,f
 16103  1E0A  1003               	clrc
 16104  1E0B  0CA3               	rrf	___bmul@multiplier,f
 16105  1E0C  08A3               	movf	___bmul@multiplier,f
 16106  1E0D  1D03               	skipz
 16107  1E0E  2E02               	goto	l7992
 16108  1E0F  0822               	movf	___bmul@product,w
 16109  1E10  0008               	return
 16110  1E11                     __end_of___bmul:	
 16111                           
 16112                           	psect	text104
 16113  1D9B                     __ptext104:	
 16114 ;; *************** function _getDelayOff_GO *****************
 16115 ;; Defined at:
 16116 ;;		line 105 in file "../src/DelayOff_B1.c"
 16117 ;; Parameters:    Size  Location     Type
 16118 ;;  sw              1    wreg     unsigned char 
 16119 ;; Auto vars:     Size  Location     Type
 16120 ;;  sw              1    2[BANK0 ] unsigned char 
 16121 ;;  go              1    3[BANK0 ] unsigned char 
 16122 ;; Return value:  Size  Location     Type
 16123 ;;                  1    wreg      unsigned char 
 16124 ;; Registers used:
 16125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16126 ;; Tracked objects:
 16127 ;;		On entry : 0/0
 16128 ;;		On exit  : 0/0
 16129 ;;		Unchanged: 0/0
 16130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16132 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16135 ;;Total ram usage:        2 bytes
 16136 ;; Hardware stack levels used:    1
 16137 ;; Hardware stack levels required when called:    6
 16138 ;; This function calls:
 16139 ;;		_DelayOffPointSelect
 16140 ;; This function is called by:
 16141 ;;		_setDimmerLights_SwOff
 16142 ;;		_setRFSW_Control
 16143 ;; This function uses a non-reentrant model
 16144 ;;
 16145                           
 16146                           
 16147                           ;psect for function _getDelayOff_GO
 16148  1D9B                     _getDelayOff_GO:	
 16149                           
 16150                           ;incstack = 0
 16151                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16152                           ;getDelayOff_GO@sw stored from wreg
 16153  1D9B  0020               	movlb	0	; select bank0
 16154  1D9C  00A2               	movwf	getDelayOff_GO@sw
 16155                           
 16156                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16157  1D9D  0822               	movf	getDelayOff_GO@sw,w
 16158  1D9E  319C  24CB         	fcall	_DelayOffPointSelect
 16159                           
 16160                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16161  1DA0  0875               	movf	_DelayOff,w
 16162  1DA1  0086               	movwf	6
 16163  1DA2  3001               	movlw	1	; select bank2/3
 16164  1DA3  0087               	movwf	7
 16165  1DA4  3000               	movlw	0
 16166  1DA5  1881               	btfsc	1,1
 16167  1DA6  3001               	movlw	1
 16168  1DA7  0020               	movlb	0	; select bank0
 16169  1DA8  00A3               	movwf	getDelayOff_GO@go
 16170                           
 16171                           ;DelayOff_B1.c: 108: return go;
 16172  1DA9  0823               	movf	getDelayOff_GO@go,w
 16173  1DAA  0008               	return
 16174  1DAB                     __end_of_getDelayOff_GO:	
 16175                           
 16176                           	psect	text105
 16177  1DBB                     __ptext105:	
 16178 ;; *************** function _getDimmerLights_Status *****************
 16179 ;; Defined at:
 16180 ;;		line 757 in file "../src/Dimmer_B1.c"
 16181 ;; Parameters:    Size  Location     Type
 16182 ;;  lights          1    wreg     unsigned char 
 16183 ;; Auto vars:     Size  Location     Type
 16184 ;;  lights          1    2[BANK0 ] unsigned char 
 16185 ;;  status          1    3[BANK0 ] unsigned char 
 16186 ;; Return value:  Size  Location     Type
 16187 ;;                  1    wreg      unsigned char 
 16188 ;; Registers used:
 16189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16190 ;; Tracked objects:
 16191 ;;		On entry : 0/0
 16192 ;;		On exit  : 0/0
 16193 ;;		Unchanged: 0/0
 16194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16196 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16198 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16199 ;;Total ram usage:        2 bytes
 16200 ;; Hardware stack levels used:    1
 16201 ;; Hardware stack levels required when called:    6
 16202 ;; This function calls:
 16203 ;;		_DimmerLightsPointSelect
 16204 ;; This function is called by:
 16205 ;;		_setDimmerLights_ErrorClose
 16206 ;;		_Exception_Main
 16207 ;;		_setRFSW_Control
 16208 ;;		_setRFSW_AdjControl
 16209 ;; This function uses a non-reentrant model
 16210 ;;
 16211                           
 16212                           
 16213                           ;psect for function _getDimmerLights_Status
 16214  1DBB                     _getDimmerLights_Status:	
 16215                           
 16216                           ;incstack = 0
 16217                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16218                           ;getDimmerLights_Status@lights stored from wreg
 16219  1DBB  0020               	movlb	0	; select bank0
 16220  1DBC  00A2               	movwf	getDimmerLights_Status@lights
 16221                           
 16222                           ;Dimmer_B1.c: 758: DimmerLightsPointSelect(lights);
 16223  1DBD  0822               	movf	getDimmerLights_Status@lights,w
 16224  1DBE  319C  24D6         	fcall	_DimmerLightsPointSelect
 16225                           
 16226                           ;Dimmer_B1.c: 759: char status = DimmerLights->Status == 1 ? 1 : 0;
 16227  1DC0  0020               	movlb	0	; select bank0
 16228  1DC1  086F               	movf	_DimmerLights,w
 16229  1DC2  3E02               	addlw	2
 16230  1DC3  0086               	movwf	6
 16231  1DC4  3001               	movlw	1	; select bank2/3
 16232  1DC5  0087               	movwf	7
 16233  1DC6  3000               	movlw	0
 16234  1DC7  1881               	btfsc	1,1
 16235  1DC8  3001               	movlw	1
 16236  1DC9  00A3               	movwf	getDimmerLights_Status@status
 16237                           
 16238                           ;Dimmer_B1.c: 760: return status;
 16239  1DCA  0823               	movf	getDimmerLights_Status@status,w
 16240  1DCB  0008               	return
 16241  1DCC                     __end_of_getDimmerLights_Status:	
 16242                           
 16243                           	psect	text106
 16244  1CD6                     __ptext106:	
 16245 ;; *************** function _DimmerLightsPointSelect *****************
 16246 ;; Defined at:
 16247 ;;		line 321 in file "../src/Dimmer_B1.c"
 16248 ;; Parameters:    Size  Location     Type
 16249 ;;  lights          1    wreg     unsigned char 
 16250 ;; Auto vars:     Size  Location     Type
 16251 ;;  lights          1    1[BANK0 ] unsigned char 
 16252 ;; Return value:  Size  Location     Type
 16253 ;;		None               void
 16254 ;; Registers used:
 16255 ;;		wreg
 16256 ;; Tracked objects:
 16257 ;;		On entry : 0/0
 16258 ;;		On exit  : 0/0
 16259 ;;		Unchanged: 0/0
 16260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16263 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16264 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16265 ;;Total ram usage:        2 bytes
 16266 ;; Hardware stack levels used:    1
 16267 ;; Hardware stack levels required when called:    5
 16268 ;; This function calls:
 16269 ;;		Nothing
 16270 ;; This function is called by:
 16271 ;;		_setDimmerLights_Initialization
 16272 ;;		_setDimmerLights_SwOn
 16273 ;;		_setDimmerLights_SwOff
 16274 ;;		_setDimmerLights_AdjOn
 16275 ;;		_setDimmerLights_Main
 16276 ;;		_getDimmerLights_Status
 16277 ;;		_getAll_DimmerLights_AdjSw
 16278 ;;		_setDimmerLights_ErrorClose
 16279 ;;		_setDimmerLights_AdjRF
 16280 ;;		_setDimmerLights_Status
 16281 ;;		_setDimmerLights_GO
 16282 ;;		_setDimmerLights_MaxmumValue
 16283 ;;		_setDimmerLights_Trigger
 16284 ;;		_setDimmerLights_TriggerAdj
 16285 ;; This function uses a non-reentrant model
 16286 ;;
 16287                           
 16288                           
 16289                           ;psect for function _DimmerLightsPointSelect
 16290  1CD6                     _DimmerLightsPointSelect:	
 16291                           
 16292                           ;incstack = 0
 16293                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16294                           ;DimmerLightsPointSelect@lights stored from wreg
 16295  1CD6  0020               	movlb	0	; select bank0
 16296  1CD7  00A1               	movwf	DimmerLightsPointSelect@lights
 16297                           
 16298                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16299  1CD8  0821               	movf	DimmerLightsPointSelect@lights,w
 16300  1CD9  3A01               	xorlw	1
 16301  1CDA  1D03               	skipz
 16302  1CDB  0008               	return
 16303                           
 16304                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16305  1CDC  3053               	movlw	_DimmerLights1& (0+255)
 16306  1CDD  00A0               	movwf	??_DimmerLightsPointSelect
 16307  1CDE  0820               	movf	??_DimmerLightsPointSelect,w
 16308  1CDF  00EF               	movwf	_DimmerLights
 16309  1CE0  0008               	return
 16310  1CE1                     __end_of_DimmerLightsPointSelect:	
 16311                           
 16312                           	psect	text107
 16313  17A7                     __ptext107:	
 16314 ;; *************** function _setBuz *****************
 16315 ;; Defined at:
 16316 ;;		line 22 in file "../src/Buzzer_B1.c"
 16317 ;; Parameters:    Size  Location     Type
 16318 ;;  count           1    wreg     unsigned char 
 16319 ;;  time            2    9[BANK0 ] int 
 16320 ;; Auto vars:     Size  Location     Type
 16321 ;;  count           1   12[BANK0 ] unsigned char 
 16322 ;; Return value:  Size  Location     Type
 16323 ;;		None               void
 16324 ;; Registers used:
 16325 ;;		wreg, status,2, status,0, pclath, cstack
 16326 ;; Tracked objects:
 16327 ;;		On entry : 0/0
 16328 ;;		On exit  : 0/0
 16329 ;;		Unchanged: 0/0
 16330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16331 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16334 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16335 ;;Total ram usage:        4 bytes
 16336 ;; Hardware stack levels used:    1
 16337 ;; Hardware stack levels required when called:    6
 16338 ;; This function calls:
 16339 ;;		___awdiv
 16340 ;; This function is called by:
 16341 ;;		_DlyOff_Main
 16342 ;;		_setDimmerLights_SwOn
 16343 ;;		_setDimmerLights_Adj
 16344 ;;		_my_MainTimer
 16345 ;;		_Exception_Main
 16346 ;;		_setTemp_Main
 16347 ;;		_setLog_Code
 16348 ;;		_setControl_Lights_Table
 16349 ;;		_setRFSW_Control
 16350 ;;		_setSw_Main
 16351 ;; This function uses a non-reentrant model
 16352 ;;
 16353                           
 16354                           
 16355                           ;psect for function _setBuz
 16356  17A7                     _setBuz:	
 16357                           
 16358                           ;incstack = 0
 16359                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16360                           ;setBuz@count stored from wreg
 16361  17A7  0020               	movlb	0	; select bank0
 16362  17A8  00AC               	movwf	setBuz@count
 16363                           
 16364                           ;Buzzer_B1.c: 23: time /= 10;
 16365  17A9  300A               	movlw	10
 16366  17AA  00A0               	movwf	___awdiv@divisor
 16367  17AB  3000               	movlw	0
 16368  17AC  00A1               	movwf	___awdiv@divisor+1
 16369  17AD  082A               	movf	setBuz@time+1,w
 16370  17AE  01A3               	clrf	___awdiv@dividend+1
 16371  17AF  07A3               	addwf	___awdiv@dividend+1,f
 16372  17B0  0829               	movf	setBuz@time,w
 16373  17B1  01A2               	clrf	___awdiv@dividend
 16374  17B2  07A2               	addwf	___awdiv@dividend,f
 16375  17B3  3196  26FB  3197   	fcall	___awdiv
 16376  17B6  0020               	movlb	0	; select bank0
 16377  17B7  0821               	movf	?___awdiv+1,w
 16378  17B8  01AA               	clrf	setBuz@time+1
 16379  17B9  07AA               	addwf	setBuz@time+1,f
 16380  17BA  0820               	movf	?___awdiv,w
 16381  17BB  01A9               	clrf	setBuz@time
 16382  17BC  07A9               	addwf	setBuz@time,f
 16383                           
 16384                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16385  17BD  0021               	movlb	1	; select bank1
 16386  17BE  1C2E               	btfss	_Buz1^(0+128),0
 16387  17BF  0008               	return
 16388                           
 16389                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16390  17C0  18AE               	btfsc	_Buz1^(0+128),1
 16391  17C1  2FD8               	goto	l84
 16392                           
 16393                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16394  17C2  14AE               	bsf	_Buz1^(0+128),1
 16395                           
 16396                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16397  17C3  01AF               	clrf	(_Buz1^(0+128)+1)
 16398  17C4  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16399                           
 16400                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16401  17C5  0020               	movlb	0	; select bank0
 16402  17C6  082C               	movf	setBuz@count,w
 16403  17C7  00AB               	movwf	??_setBuz
 16404  17C8  082B               	movf	??_setBuz,w
 16405  17C9  0021               	movlb	1	; select bank1
 16406  17CA  00B1               	movwf	(_Buz1^(0+128)+3)
 16407                           
 16408                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16409  17CB  0020               	movlb	0	; select bank0
 16410  17CC  082A               	movf	setBuz@time+1,w
 16411  17CD  0021               	movlb	1	; select bank1
 16412  17CE  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16413  17CF  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16414  17D0  0020               	movlb	0	; select bank0
 16415  17D1  0829               	movf	setBuz@time,w
 16416  17D2  0021               	movlb	1	; select bank1
 16417  17D3  01B4               	clrf	(_Buz1^(0+128)+6)
 16418  17D4  07B4               	addwf	(_Buz1^(0+128)+6),f
 16419                           
 16420                           ;Buzzer_B1.c: 30: RB3 = 1;
 16421  17D5  0020               	movlb	0	; select bank0
 16422  17D6  158D               	bsf	13,3	;volatile
 16423                           
 16424                           ;Buzzer_B1.c: 31: } else {
 16425  17D7  0008               	return
 16426  17D8                     l84:	
 16427                           
 16428                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16429  17D8  19AE               	btfsc	_Buz1^(0+128),3
 16430  17D9  2FEC               	goto	l86
 16431                           
 16432                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16433  17DA  15AE               	bsf	_Buz1^(0+128),3
 16434                           
 16435                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16436  17DB  0020               	movlb	0	; select bank0
 16437  17DC  082C               	movf	setBuz@count,w
 16438  17DD  00AB               	movwf	??_setBuz
 16439  17DE  082B               	movf	??_setBuz,w
 16440  17DF  0021               	movlb	1	; select bank1
 16441  17E0  00B2               	movwf	(_Buz1^(0+128)+4)
 16442                           
 16443                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16444  17E1  0020               	movlb	0	; select bank0
 16445  17E2  082A               	movf	setBuz@time+1,w
 16446  17E3  0021               	movlb	1	; select bank1
 16447  17E4  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16448  17E5  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16449  17E6  0020               	movlb	0	; select bank0
 16450  17E7  0829               	movf	setBuz@time,w
 16451  17E8  0021               	movlb	1	; select bank1
 16452  17E9  01B6               	clrf	(_Buz1^(0+128)+8)
 16453  17EA  07B6               	addwf	(_Buz1^(0+128)+8),f
 16454                           
 16455                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16456  17EB  0008               	return
 16457  17EC                     l86:	
 16458  17EC  1A2E               	btfsc	_Buz1^(0+128),4
 16459  17ED  0008               	return
 16460                           
 16461                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16462  17EE  162E               	bsf	_Buz1^(0+128),4
 16463                           
 16464                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16465  17EF  0020               	movlb	0	; select bank0
 16466  17F0  082C               	movf	setBuz@count,w
 16467  17F1  00AB               	movwf	??_setBuz
 16468  17F2  082B               	movf	??_setBuz,w
 16469  17F3  0021               	movlb	1	; select bank1
 16470  17F4  00B3               	movwf	(_Buz1^(0+128)+5)
 16471                           
 16472                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16473  17F5  0020               	movlb	0	; select bank0
 16474  17F6  082A               	movf	setBuz@time+1,w
 16475  17F7  0021               	movlb	1	; select bank1
 16476  17F8  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16477  17F9  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16478  17FA  0020               	movlb	0	; select bank0
 16479  17FB  0829               	movf	setBuz@time,w
 16480  17FC  0021               	movlb	1	; select bank1
 16481  17FD  01B8               	clrf	(_Buz1^(0+128)+10)
 16482  17FE  07B8               	addwf	(_Buz1^(0+128)+10),f
 16483  17FF  0008               	return
 16484  1800                     __end_of_setBuz:	
 16485                           
 16486                           	psect	text108
 16487  16FB                     __ptext108:	
 16488 ;; *************** function ___awdiv *****************
 16489 ;; Defined at:
 16490 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16491 ;; Parameters:    Size  Location     Type
 16492 ;;  divisor         2    0[BANK0 ] int 
 16493 ;;  dividend        2    2[BANK0 ] int 
 16494 ;; Auto vars:     Size  Location     Type
 16495 ;;  quotient        2    7[BANK0 ] int 
 16496 ;;  sign            1    6[BANK0 ] unsigned char 
 16497 ;;  counter         1    5[BANK0 ] unsigned char 
 16498 ;; Return value:  Size  Location     Type
 16499 ;;                  2    0[BANK0 ] int 
 16500 ;; Registers used:
 16501 ;;		wreg, status,2, status,0
 16502 ;; Tracked objects:
 16503 ;;		On entry : 0/0
 16504 ;;		On exit  : 0/0
 16505 ;;		Unchanged: 0/0
 16506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16507 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16508 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16510 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16511 ;;Total ram usage:        9 bytes
 16512 ;; Hardware stack levels used:    1
 16513 ;; Hardware stack levels required when called:    5
 16514 ;; This function calls:
 16515 ;;		Nothing
 16516 ;; This function is called by:
 16517 ;;		_setBuz
 16518 ;; This function uses a non-reentrant model
 16519 ;;
 16520                           
 16521                           
 16522                           ;psect for function ___awdiv
 16523  16FB                     ___awdiv:	
 16524                           
 16525                           ;incstack = 0
 16526                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16527  16FB  0020               	movlb	0	; select bank0
 16528  16FC  01A6               	clrf	___awdiv@sign
 16529  16FD  1FA1               	btfss	___awdiv@divisor+1,7
 16530  16FE  2F06               	goto	l8276
 16531  16FF  09A0               	comf	___awdiv@divisor,f
 16532  1700  09A1               	comf	___awdiv@divisor+1,f
 16533  1701  0AA0               	incf	___awdiv@divisor,f
 16534  1702  1903               	skipnz
 16535  1703  0AA1               	incf	___awdiv@divisor+1,f
 16536  1704  01A6               	clrf	___awdiv@sign
 16537  1705  0AA6               	incf	___awdiv@sign,f
 16538  1706                     l8276:	
 16539  1706  1FA3               	btfss	___awdiv@dividend+1,7
 16540  1707  2F11               	goto	l8282
 16541  1708  09A2               	comf	___awdiv@dividend,f
 16542  1709  09A3               	comf	___awdiv@dividend+1,f
 16543  170A  0AA2               	incf	___awdiv@dividend,f
 16544  170B  1903               	skipnz
 16545  170C  0AA3               	incf	___awdiv@dividend+1,f
 16546  170D  3001               	movlw	1
 16547  170E  00A4               	movwf	??___awdiv
 16548  170F  0824               	movf	??___awdiv,w
 16549  1710  06A6               	xorwf	___awdiv@sign,f
 16550  1711                     l8282:	
 16551  1711  01A7               	clrf	___awdiv@quotient
 16552  1712  01A8               	clrf	___awdiv@quotient+1
 16553  1713  0821               	movf	___awdiv@divisor+1,w
 16554  1714  0420               	iorwf	___awdiv@divisor,w
 16555  1715  1903               	skipnz
 16556  1716  2F40               	goto	l8304
 16557  1717  01A5               	clrf	___awdiv@counter
 16558  1718  0AA5               	incf	___awdiv@counter,f
 16559  1719                     l8292:	
 16560  1719  1BA1               	btfsc	___awdiv@divisor+1,7
 16561  171A  2F25               	goto	l8294
 16562  171B  3001               	movlw	1
 16563  171C                     u8785:	
 16564  171C  35A0               	lslf	___awdiv@divisor,f
 16565  171D  0DA1               	rlf	___awdiv@divisor+1,f
 16566  171E  0B89               	decfsz	9,f
 16567  171F  2F1C               	goto	u8785
 16568  1720  3001               	movlw	1
 16569  1721  00A4               	movwf	??___awdiv
 16570  1722  0824               	movf	??___awdiv,w
 16571  1723  07A5               	addwf	___awdiv@counter,f
 16572  1724  2F19               	goto	l8292
 16573  1725                     l8294:	
 16574  1725  3001               	movlw	1
 16575  1726                     u8805:	
 16576  1726  35A7               	lslf	___awdiv@quotient,f
 16577  1727  0DA8               	rlf	___awdiv@quotient+1,f
 16578  1728  0B89               	decfsz	9,f
 16579  1729  2F26               	goto	u8805
 16580  172A  0821               	movf	___awdiv@divisor+1,w
 16581  172B  0223               	subwf	___awdiv@dividend+1,w
 16582  172C  1D03               	skipz
 16583  172D  2F30               	goto	u8815
 16584  172E  0820               	movf	___awdiv@divisor,w
 16585  172F  0222               	subwf	___awdiv@dividend,w
 16586  1730                     u8815:	
 16587  1730  1C03               	skipc
 16588  1731  2F37               	goto	l8300
 16589  1732  0820               	movf	___awdiv@divisor,w
 16590  1733  02A2               	subwf	___awdiv@dividend,f
 16591  1734  0821               	movf	___awdiv@divisor+1,w
 16592  1735  3BA3               	subwfb	___awdiv@dividend+1,f
 16593  1736  1427               	bsf	___awdiv@quotient,0
 16594  1737                     l8300:	
 16595  1737  3001               	movlw	1
 16596  1738                     u8825:	
 16597  1738  36A1               	lsrf	___awdiv@divisor+1,f
 16598  1739  0CA0               	rrf	___awdiv@divisor,f
 16599  173A  0B89               	decfsz	9,f
 16600  173B  2F38               	goto	u8825
 16601  173C  3001               	movlw	1
 16602  173D  02A5               	subwf	___awdiv@counter,f
 16603  173E  1D03               	btfss	3,2
 16604  173F  2F25               	goto	l8294
 16605  1740                     l8304:	
 16606  1740  0826               	movf	___awdiv@sign,w
 16607  1741  1903               	btfsc	3,2
 16608  1742  2F48               	goto	l8308
 16609  1743  09A7               	comf	___awdiv@quotient,f
 16610  1744  09A8               	comf	___awdiv@quotient+1,f
 16611  1745  0AA7               	incf	___awdiv@quotient,f
 16612  1746  1903               	skipnz
 16613  1747  0AA8               	incf	___awdiv@quotient+1,f
 16614  1748                     l8308:	
 16615  1748  0828               	movf	___awdiv@quotient+1,w
 16616  1749  01A1               	clrf	?___awdiv+1
 16617  174A  07A1               	addwf	?___awdiv+1,f
 16618  174B  0827               	movf	___awdiv@quotient,w
 16619  174C  01A0               	clrf	?___awdiv
 16620  174D  07A0               	addwf	?___awdiv,f
 16621  174E  0008               	return
 16622  174F                     __end_of___awdiv:	
 16623                           
 16624                           	psect	text109
 16625  1C36                     __ptext109:	
 16626 ;; *************** function _DelayOff_Initialization *****************
 16627 ;; Defined at:
 16628 ;;		line 26 in file "../src/DelayOff_B1.c"
 16629 ;; Parameters:    Size  Location     Type
 16630 ;;		None
 16631 ;; Auto vars:     Size  Location     Type
 16632 ;;		None
 16633 ;; Return value:  Size  Location     Type
 16634 ;;		None               void
 16635 ;; Registers used:
 16636 ;;		wreg, status,2, status,0, pclath, cstack
 16637 ;; Tracked objects:
 16638 ;;		On entry : 0/0
 16639 ;;		On exit  : 0/0
 16640 ;;		Unchanged: 0/0
 16641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16646 ;;Total ram usage:        0 bytes
 16647 ;; Hardware stack levels used:    1
 16648 ;; Hardware stack levels required when called:    7
 16649 ;; This function calls:
 16650 ;;		_DlyOff_Initialization
 16651 ;; This function is called by:
 16652 ;;		_main
 16653 ;; This function uses a non-reentrant model
 16654 ;;
 16655                           
 16656                           
 16657                           ;psect for function _DelayOff_Initialization
 16658  1C36                     _DelayOff_Initialization:	
 16659                           
 16660                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16661                           
 16662                           ;incstack = 0
 16663                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16664  1C36  3001               	movlw	1
 16665  1C37  319C  244F         	fcall	_DlyOff_Initialization
 16666  1C39  0008               	return
 16667  1C3A                     __end_of_DelayOff_Initialization:	
 16668                           
 16669                           	psect	text110
 16670  1C4F                     __ptext110:	
 16671 ;; *************** function _DlyOff_Initialization *****************
 16672 ;; Defined at:
 16673 ;;		line 56 in file "../src/DelayOff_B1.c"
 16674 ;; Parameters:    Size  Location     Type
 16675 ;;  sw              1    wreg     unsigned char 
 16676 ;; Auto vars:     Size  Location     Type
 16677 ;;  sw              1    2[BANK0 ] unsigned char 
 16678 ;; Return value:  Size  Location     Type
 16679 ;;		None               void
 16680 ;; Registers used:
 16681 ;;		wreg, status,2, status,0, pclath, cstack
 16682 ;; Tracked objects:
 16683 ;;		On entry : 0/0
 16684 ;;		On exit  : 0/0
 16685 ;;		Unchanged: 0/0
 16686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16690 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16691 ;;Total ram usage:        1 bytes
 16692 ;; Hardware stack levels used:    1
 16693 ;; Hardware stack levels required when called:    6
 16694 ;; This function calls:
 16695 ;;		_DelayOffPointSelect
 16696 ;; This function is called by:
 16697 ;;		_DelayOff_Initialization
 16698 ;; This function uses a non-reentrant model
 16699 ;;
 16700                           
 16701                           
 16702                           ;psect for function _DlyOff_Initialization
 16703  1C4F                     _DlyOff_Initialization:	
 16704                           
 16705                           ;incstack = 0
 16706                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16707                           ;DlyOff_Initialization@sw stored from wreg
 16708  1C4F  0020               	movlb	0	; select bank0
 16709  1C50  00A2               	movwf	DlyOff_Initialization@sw
 16710                           
 16711                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16712  1C51  0822               	movf	DlyOff_Initialization@sw,w
 16713  1C52  319C  24CB         	fcall	_DelayOffPointSelect
 16714  1C54  0008               	return
 16715  1C55                     __end_of_DlyOff_Initialization:	
 16716                           
 16717                           	psect	text111
 16718  1CCB                     __ptext111:	
 16719 ;; *************** function _DelayOffPointSelect *****************
 16720 ;; Defined at:
 16721 ;;		line 7 in file "../src/DelayOff_B1.c"
 16722 ;; Parameters:    Size  Location     Type
 16723 ;;  sw              1    wreg     unsigned char 
 16724 ;; Auto vars:     Size  Location     Type
 16725 ;;  sw              1    1[BANK0 ] unsigned char 
 16726 ;; Return value:  Size  Location     Type
 16727 ;;		None               void
 16728 ;; Registers used:
 16729 ;;		wreg
 16730 ;; Tracked objects:
 16731 ;;		On entry : 0/0
 16732 ;;		On exit  : 0/0
 16733 ;;		Unchanged: 0/0
 16734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16737 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16738 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16739 ;;Total ram usage:        2 bytes
 16740 ;; Hardware stack levels used:    1
 16741 ;; Hardware stack levels required when called:    5
 16742 ;; This function calls:
 16743 ;;		Nothing
 16744 ;; This function is called by:
 16745 ;;		_DlyOff_Initialization
 16746 ;;		_DlyOff_Main
 16747 ;;		_setDelayOff_GO
 16748 ;;		_getDelayOff_GO
 16749 ;; This function uses a non-reentrant model
 16750 ;;
 16751                           
 16752                           
 16753                           ;psect for function _DelayOffPointSelect
 16754  1CCB                     _DelayOffPointSelect:	
 16755                           
 16756                           ;incstack = 0
 16757                           ; Regs used in _DelayOffPointSelect: [wreg]
 16758                           ;DelayOffPointSelect@sw stored from wreg
 16759  1CCB  0020               	movlb	0	; select bank0
 16760  1CCC  00A1               	movwf	DelayOffPointSelect@sw
 16761                           
 16762                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16763  1CCD  0821               	movf	DelayOffPointSelect@sw,w
 16764  1CCE  3A01               	xorlw	1
 16765  1CCF  1D03               	skipz
 16766  1CD0  0008               	return
 16767                           
 16768                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16769  1CD1  3064               	movlw	_DlySw1& (0+255)
 16770  1CD2  00A0               	movwf	??_DelayOffPointSelect
 16771  1CD3  0820               	movf	??_DelayOffPointSelect,w
 16772  1CD4  00F5               	movwf	_DelayOff
 16773  1CD5  0008               	return
 16774  1CD6                     __end_of_DelayOffPointSelect:	
 16775                           
 16776                           	psect	text112
 16777  1EA9                     __ptext112:	
 16778 ;; *************** function _CC2500_PowerOnInitial *****************
 16779 ;; Defined at:
 16780 ;;		line 119 in file "../src/CC2500_B1.c"
 16781 ;; Parameters:    Size  Location     Type
 16782 ;;		None
 16783 ;; Auto vars:     Size  Location     Type
 16784 ;;		None
 16785 ;; Return value:  Size  Location     Type
 16786 ;;		None               void
 16787 ;; Registers used:
 16788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16789 ;; Tracked objects:
 16790 ;;		On entry : 0/0
 16791 ;;		On exit  : 0/0
 16792 ;;		Unchanged: 0/0
 16793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16798 ;;Total ram usage:        0 bytes
 16799 ;; Hardware stack levels used:    1
 16800 ;; Hardware stack levels required when called:    8
 16801 ;; This function calls:
 16802 ;;		_CC2500_ClearRXFIFO
 16803 ;;		_CC2500_ClearTXFIFO
 16804 ;;		_CC2500_FrequencyCabr
 16805 ;;		_CC2500_InitPATable
 16806 ;;		_CC2500_InitSetREG
 16807 ;;		_CC2500_PowerRST
 16808 ;;		_CC2500_SIDLEMode
 16809 ;; This function is called by:
 16810 ;;		_main
 16811 ;; This function uses a non-reentrant model
 16812 ;;
 16813                           
 16814                           
 16815                           ;psect for function _CC2500_PowerOnInitial
 16816  1EA9                     _CC2500_PowerOnInitial:	
 16817                           
 16818                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16819                           
 16820                           ;incstack = 0
 16821                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16822  1EA9  3187  27BC  319E   	fcall	_CC2500_PowerRST
 16823                           
 16824                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16825  1EAC  3191  2160  319E   	fcall	_CC2500_InitSetREG
 16826                           
 16827                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16828  1EAF  319F  27C1  319E   	fcall	_CC2500_InitPATable
 16829                           
 16830                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16831  1EB2  319C  242E  319E   	fcall	_CC2500_ClearTXFIFO
 16832                           
 16833                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16834  1EB5  319C  242A  319E   	fcall	_CC2500_ClearRXFIFO
 16835                           
 16836                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16837  1EB8  319D  250D  319E   	fcall	_CC2500_FrequencyCabr
 16838                           
 16839                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16840  1EBB  319C  2432         	fcall	_CC2500_SIDLEMode
 16841  1EBD  0008               	return
 16842  1EBE                     __end_of_CC2500_PowerOnInitial:	
 16843                           
 16844                           	psect	text113
 16845  1C32                     __ptext113:	
 16846 ;; *************** function _CC2500_SIDLEMode *****************
 16847 ;; Defined at:
 16848 ;;		line 209 in file "../src/CC2500_B1.c"
 16849 ;; Parameters:    Size  Location     Type
 16850 ;;		None
 16851 ;; Auto vars:     Size  Location     Type
 16852 ;;		None
 16853 ;; Return value:  Size  Location     Type
 16854 ;;		None               void
 16855 ;; Registers used:
 16856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16857 ;; Tracked objects:
 16858 ;;		On entry : 0/0
 16859 ;;		On exit  : 0/0
 16860 ;;		Unchanged: 0/0
 16861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16866 ;;Total ram usage:        0 bytes
 16867 ;; Hardware stack levels used:    1
 16868 ;; Hardware stack levels required when called:    7
 16869 ;; This function calls:
 16870 ;;		_CC2500_WriteCommand
 16871 ;; This function is called by:
 16872 ;;		_CC2500_PowerOnInitial
 16873 ;; This function uses a non-reentrant model
 16874 ;;
 16875                           
 16876                           
 16877                           ;psect for function _CC2500_SIDLEMode
 16878  1C32                     _CC2500_SIDLEMode:	
 16879                           
 16880                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16881                           
 16882                           ;incstack = 0
 16883                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16884  1C32  3036               	movlw	54
 16885  1C33  319F  271A         	fcall	_CC2500_WriteCommand
 16886  1C35  0008               	return
 16887  1C36                     __end_of_CC2500_SIDLEMode:	
 16888                           
 16889                           	psect	text114
 16890  07BC                     __ptext114:	
 16891 ;; *************** function _CC2500_PowerRST *****************
 16892 ;; Defined at:
 16893 ;;		line 132 in file "../src/CC2500_B1.c"
 16894 ;; Parameters:    Size  Location     Type
 16895 ;;		None
 16896 ;; Auto vars:     Size  Location     Type
 16897 ;;		None
 16898 ;; Return value:  Size  Location     Type
 16899 ;;		None               void
 16900 ;; Registers used:
 16901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16902 ;; Tracked objects:
 16903 ;;		On entry : 0/0
 16904 ;;		On exit  : 0/0
 16905 ;;		Unchanged: 0/0
 16906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16910 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16911 ;;Total ram usage:        1 bytes
 16912 ;; Hardware stack levels used:    1
 16913 ;; Hardware stack levels required when called:    6
 16914 ;; This function calls:
 16915 ;;		_CC2500_WriteByte
 16916 ;;		_DelayTime_1us
 16917 ;;		_Timeout_Counter
 16918 ;;		_set_TimeoutCleared
 16919 ;; This function is called by:
 16920 ;;		_CC2500_PowerOnInitial
 16921 ;; This function uses a non-reentrant model
 16922 ;;
 16923                           
 16924                           
 16925                           ;psect for function _CC2500_PowerRST
 16926  07BC                     _CC2500_PowerRST:	
 16927                           
 16928                           ;CC2500_B1.c: 133: RC3 = 0;
 16929                           
 16930                           ;incstack = 0
 16931                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16932  07BC  0020               	movlb	0	; select bank0
 16933  07BD  118E               	bcf	14,3	;volatile
 16934                           
 16935                           ;CC2500_B1.c: 134: RC4 = 0;
 16936  07BE  120E               	bcf	14,4	;volatile
 16937                           
 16938                           ;CC2500_B1.c: 135: RC0 = 1;
 16939  07BF  140E               	bsf	14,0	;volatile
 16940                           
 16941                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16942  07C0  300A               	movlw	10
 16943  07C1  00A0               	movwf	DelayTime_1us@count
 16944  07C2  3000               	movlw	0
 16945  07C3  00A1               	movwf	DelayTime_1us@count+1
 16946  07C4  3191  213A  3187   	fcall	_DelayTime_1us
 16947                           
 16948                           ;CC2500_B1.c: 137: RC0 = 0;
 16949  07C7  0020               	movlb	0	; select bank0
 16950  07C8  100E               	bcf	14,0	;volatile
 16951                           
 16952                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 16953  07C9  300A               	movlw	10
 16954  07CA  00A0               	movwf	DelayTime_1us@count
 16955  07CB  3000               	movlw	0
 16956  07CC  00A1               	movwf	DelayTime_1us@count+1
 16957  07CD  3191  213A  3187   	fcall	_DelayTime_1us
 16958                           
 16959                           ;CC2500_B1.c: 139: RC0 = 1;
 16960  07D0  0020               	movlb	0	; select bank0
 16961  07D1  140E               	bsf	14,0	;volatile
 16962                           
 16963                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 16964  07D2  3028               	movlw	40
 16965  07D3  00A0               	movwf	DelayTime_1us@count
 16966  07D4  3000               	movlw	0
 16967  07D5  00A1               	movwf	DelayTime_1us@count+1
 16968  07D6  3191  213A  3187   	fcall	_DelayTime_1us
 16969                           
 16970                           ;CC2500_B1.c: 141: RC0 = 0;
 16971  07D9  0020               	movlb	0	; select bank0
 16972  07DA  100E               	bcf	14,0	;volatile
 16973                           
 16974                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 16975  07DB  3030               	movlw	48
 16976  07DC  00A6               	movwf	??_CC2500_PowerRST
 16977  07DD  0826               	movf	??_CC2500_PowerRST,w
 16978  07DE  0021               	movlb	1	; select bank1
 16979  07DF  00D1               	movwf	_SPI0Buffer^(0+128)
 16980                           
 16981                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 16982  07E0  2FE4               	goto	l9152
 16983  07E1                     l9150:	
 16984                           
 16985                           ;CC2500_B1.c: 144: Timeout_Counter();
 16986  07E1  319E  2694  3187   	fcall	_Timeout_Counter
 16987  07E4                     l9152:	
 16988  07E4  0020               	movlb	0	; select bank0
 16989  07E5  1E8E               	btfss	14,5	;volatile
 16990  07E6  2FEA               	goto	l9156
 16991  07E7  0021               	movlb	1	; select bank1
 16992  07E8  1D2B               	btfss	(_myMain^(0+128)+11),2
 16993  07E9  2FE1               	goto	l9150
 16994  07EA                     l9156:	
 16995                           
 16996                           ;CC2500_B1.c: 145: };
 16997                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 16998  07EA  319C  244A  3187   	fcall	_set_TimeoutCleared
 16999                           
 17000                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17001  07ED  319F  2701  3187   	fcall	_CC2500_WriteByte
 17002                           
 17003                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17004  07F0  2FF4               	goto	l9162
 17005  07F1                     l9160:	
 17006                           
 17007                           ;CC2500_B1.c: 149: Timeout_Counter();
 17008  07F1  319E  2694  3187   	fcall	_Timeout_Counter
 17009  07F4                     l9162:	
 17010  07F4  0020               	movlb	0	; select bank0
 17011  07F5  1E8E               	btfss	14,5	;volatile
 17012  07F6  2FFA               	goto	l9166
 17013  07F7  0021               	movlb	1	; select bank1
 17014  07F8  1D2B               	btfss	(_myMain^(0+128)+11),2
 17015  07F9  2FF1               	goto	l9160
 17016  07FA                     l9166:	
 17017                           
 17018                           ;CC2500_B1.c: 150: };
 17019                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17020  07FA  319C  244A         	fcall	_set_TimeoutCleared
 17021                           
 17022                           ;CC2500_B1.c: 152: RC4 = 0;
 17023  07FC  0020               	movlb	0	; select bank0
 17024  07FD  120E               	bcf	14,4	;volatile
 17025                           
 17026                           ;CC2500_B1.c: 153: RC0 = 1;
 17027  07FE  140E               	bsf	14,0	;volatile
 17028  07FF  0008               	return
 17029  0800                     __end_of_CC2500_PowerRST:	
 17030                           
 17031                           	psect	text115
 17032  1160                     __ptext115:	
 17033 ;; *************** function _CC2500_InitSetREG *****************
 17034 ;; Defined at:
 17035 ;;		line 159 in file "../src/CC2500_B1.c"
 17036 ;; Parameters:    Size  Location     Type
 17037 ;;		None
 17038 ;; Auto vars:     Size  Location     Type
 17039 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17040 ;;  temp2           1    7[BANK0 ] unsigned char 
 17041 ;;  temp1           1    6[BANK0 ] unsigned char 
 17042 ;; Return value:  Size  Location     Type
 17043 ;;		None               void
 17044 ;; Registers used:
 17045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17046 ;; Tracked objects:
 17047 ;;		On entry : 0/0
 17048 ;;		On exit  : 0/0
 17049 ;;		Unchanged: 0/0
 17050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17052 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17053 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17054 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17055 ;;Total ram usage:        4 bytes
 17056 ;; Hardware stack levels used:    1
 17057 ;; Hardware stack levels required when called:    7
 17058 ;; This function calls:
 17059 ;;		_CC2500_WriteREG
 17060 ;; This function is called by:
 17061 ;;		_CC2500_PowerOnInitial
 17062 ;; This function uses a non-reentrant model
 17063 ;;
 17064                           
 17065                           
 17066                           ;psect for function _CC2500_InitSetREG
 17067  1160                     _CC2500_InitSetREG:	
 17068                           
 17069                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17070                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17071                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17072                           
 17073                           ;incstack = 0
 17074                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17075  1160  0020               	movlb	0	; select bank0
 17076  1161  01A8               	clrf	CC2500_InitSetREG@loop_c
 17077  1162                     L7:	
 17078  1162  302F               	movlw	47
 17079  1163  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17080  1164  1803               	btfsc	3,0
 17081  1165  0008               	return
 17082                           
 17083                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17084  1166  0828               	movf	CC2500_InitSetREG@loop_c,w
 17085  1167  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17086  1168  0084               	movwf	4
 17087  1169  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17088  116A  1803               	skipnc
 17089  116B  3E01               	addlw	1
 17090  116C  0085               	movwf	5
 17091  116D  0800               	movf	0,w	;code access
 17092  116E  00A5               	movwf	??_CC2500_InitSetREG
 17093  116F  0825               	movf	??_CC2500_InitSetREG,w
 17094  1170  00A6               	movwf	CC2500_InitSetREG@temp1
 17095                           
 17096                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17097  1171  0828               	movf	CC2500_InitSetREG@loop_c,w
 17098  1172  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17099  1173  0084               	movwf	4
 17100  1174  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17101  1175  1803               	skipnc
 17102  1176  3E01               	addlw	1
 17103  1177  0085               	movwf	5
 17104  1178  0800               	movf	0,w	;code access
 17105  1179  00A5               	movwf	??_CC2500_InitSetREG
 17106  117A  0825               	movf	??_CC2500_InitSetREG,w
 17107  117B  00A7               	movwf	CC2500_InitSetREG@temp2
 17108                           
 17109                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17110  117C  0827               	movf	CC2500_InitSetREG@temp2,w
 17111  117D  00A5               	movwf	??_CC2500_InitSetREG
 17112  117E  0825               	movf	??_CC2500_InitSetREG,w
 17113  117F  00A2               	movwf	CC2500_WriteREG@value
 17114  1180  0826               	movf	CC2500_InitSetREG@temp1,w
 17115  1181  3190  20A9  3191   	fcall	_CC2500_WriteREG
 17116  1184  3001               	movlw	1
 17117  1185  0020               	movlb	0	; select bank0
 17118  1186  00A5               	movwf	??_CC2500_InitSetREG
 17119  1187  0825               	movf	??_CC2500_InitSetREG,w
 17120  1188  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17121  1189  2962               	goto	L7
 17122  118A                     __end_of_CC2500_InitSetREG:	
 17123                           
 17124                           	psect	text116
 17125  1FC1                     __ptext116:	
 17126 ;; *************** function _CC2500_InitPATable *****************
 17127 ;; Defined at:
 17128 ;;		line 174 in file "../src/CC2500_B1.c"
 17129 ;; Parameters:    Size  Location     Type
 17130 ;;		None
 17131 ;; Auto vars:     Size  Location     Type
 17132 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17133 ;;  temp            1    6[BANK0 ] unsigned char 
 17134 ;; Return value:  Size  Location     Type
 17135 ;;		None               void
 17136 ;; Registers used:
 17137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17138 ;; Tracked objects:
 17139 ;;		On entry : 0/0
 17140 ;;		On exit  : 0/0
 17141 ;;		Unchanged: 0/0
 17142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17144 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17146 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17147 ;;Total ram usage:        3 bytes
 17148 ;; Hardware stack levels used:    1
 17149 ;; Hardware stack levels required when called:    7
 17150 ;; This function calls:
 17151 ;;		_CC2500_WriteREG
 17152 ;; This function is called by:
 17153 ;;		_CC2500_PowerOnInitial
 17154 ;; This function uses a non-reentrant model
 17155 ;;
 17156                           
 17157                           
 17158                           ;psect for function _CC2500_InitPATable
 17159  1FC1                     _CC2500_InitPATable:	
 17160                           
 17161                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17162                           ;CC2500_B1.c: 176: unsigned char temp;
 17163                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17164                           
 17165                           ;incstack = 0
 17166                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17167  1FC1  0020               	movlb	0	; select bank0
 17168  1FC2  01A7               	clrf	CC2500_InitPATable@loop_d
 17169  1FC3                     L8:	
 17170  1FC3  3008               	movlw	8
 17171  1FC4  0227               	subwf	CC2500_InitPATable@loop_d,w
 17172  1FC5  1803               	btfsc	3,0
 17173  1FC6  0008               	return
 17174                           
 17175                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17176  1FC7  0827               	movf	CC2500_InitPATable@loop_d,w
 17177  1FC8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17178  1FC9  0084               	movwf	4
 17179  1FCA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17180  1FCB  1803               	skipnc
 17181  1FCC  3E01               	addlw	1
 17182  1FCD  0085               	movwf	5
 17183  1FCE  0800               	movf	0,w	;code access
 17184  1FCF  00A5               	movwf	??_CC2500_InitPATable
 17185  1FD0  0825               	movf	??_CC2500_InitPATable,w
 17186  1FD1  00A6               	movwf	CC2500_InitPATable@temp
 17187                           
 17188                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17189  1FD2  0826               	movf	CC2500_InitPATable@temp,w
 17190  1FD3  00A5               	movwf	??_CC2500_InitPATable
 17191  1FD4  0825               	movf	??_CC2500_InitPATable,w
 17192  1FD5  00A2               	movwf	CC2500_WriteREG@value
 17193  1FD6  303E               	movlw	62
 17194  1FD7  3190  20A9  319F   	fcall	_CC2500_WriteREG
 17195  1FDA  3001               	movlw	1
 17196  1FDB  0020               	movlb	0	; select bank0
 17197  1FDC  00A5               	movwf	??_CC2500_InitPATable
 17198  1FDD  0825               	movf	??_CC2500_InitPATable,w
 17199  1FDE  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17200  1FDF  2FC3               	goto	L8
 17201  1FE0                     __end_of_CC2500_InitPATable:	
 17202                           
 17203                           	psect	text117
 17204  10A9                     __ptext117:	
 17205 ;; *************** function _CC2500_WriteREG *****************
 17206 ;; Defined at:
 17207 ;;		line 251 in file "../src/CC2500_B1.c"
 17208 ;; Parameters:    Size  Location     Type
 17209 ;;  w_addr          1    wreg     unsigned char 
 17210 ;;  value           1    2[BANK0 ] unsigned char 
 17211 ;; Auto vars:     Size  Location     Type
 17212 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17213 ;; Return value:  Size  Location     Type
 17214 ;;		None               void
 17215 ;; Registers used:
 17216 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17217 ;; Tracked objects:
 17218 ;;		On entry : 0/0
 17219 ;;		On exit  : 0/0
 17220 ;;		Unchanged: 0/0
 17221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17222 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17224 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17225 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17226 ;;Total ram usage:        3 bytes
 17227 ;; Hardware stack levels used:    1
 17228 ;; Hardware stack levels required when called:    6
 17229 ;; This function calls:
 17230 ;;		_CC2500_WriteByte
 17231 ;;		_Timeout_Counter
 17232 ;;		_set_TimeoutCleared
 17233 ;; This function is called by:
 17234 ;;		_CC2500_InitSetREG
 17235 ;;		_CC2500_InitPATable
 17236 ;; This function uses a non-reentrant model
 17237 ;;
 17238                           
 17239                           
 17240                           ;psect for function _CC2500_WriteREG
 17241  10A9                     _CC2500_WriteREG:	
 17242                           
 17243                           ;incstack = 0
 17244                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17245                           ;CC2500_WriteREG@w_addr stored from wreg
 17246  10A9  0020               	movlb	0	; select bank0
 17247  10AA  00A4               	movwf	CC2500_WriteREG@w_addr
 17248                           
 17249                           ;CC2500_B1.c: 252: RC0 = 0;
 17250  10AB  100E               	bcf	14,0	;volatile
 17251                           
 17252                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17253  10AC  0824               	movf	CC2500_WriteREG@w_addr,w
 17254  10AD  00A3               	movwf	??_CC2500_WriteREG
 17255  10AE  0823               	movf	??_CC2500_WriteREG,w
 17256  10AF  0021               	movlb	1	; select bank1
 17257  10B0  00D1               	movwf	_SPI0Buffer^(0+128)
 17258                           
 17259                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17260  10B1  28B5               	goto	l8890
 17261  10B2                     l8888:	
 17262                           
 17263                           ;CC2500_B1.c: 255: Timeout_Counter();
 17264  10B2  319E  2694  3190   	fcall	_Timeout_Counter
 17265  10B5                     l8890:	
 17266  10B5  0020               	movlb	0	; select bank0
 17267  10B6  1E8E               	btfss	14,5	;volatile
 17268  10B7  28BB               	goto	l8894
 17269  10B8  0021               	movlb	1	; select bank1
 17270  10B9  1D2B               	btfss	(_myMain^(0+128)+11),2
 17271  10BA  28B2               	goto	l8888
 17272  10BB                     l8894:	
 17273                           
 17274                           ;CC2500_B1.c: 256: };
 17275                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17276  10BB  319C  244A  3190   	fcall	_set_TimeoutCleared
 17277                           
 17278                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17279  10BE  319F  2701  3190   	fcall	_CC2500_WriteByte
 17280                           
 17281                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17282  10C1  0020               	movlb	0	; select bank0
 17283  10C2  0822               	movf	CC2500_WriteREG@value,w
 17284  10C3  00A3               	movwf	??_CC2500_WriteREG
 17285  10C4  0823               	movf	??_CC2500_WriteREG,w
 17286  10C5  0021               	movlb	1	; select bank1
 17287  10C6  00D1               	movwf	_SPI0Buffer^(0+128)
 17288                           
 17289                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17290  10C7  319F  2701         	fcall	_CC2500_WriteByte
 17291                           
 17292                           ;CC2500_B1.c: 262: RC0 = 1;
 17293  10C9  0020               	movlb	0	; select bank0
 17294  10CA  140E               	bsf	14,0	;volatile
 17295  10CB  0008               	return
 17296  10CC                     __end_of_CC2500_WriteREG:	
 17297                           
 17298                           	psect	text118
 17299  1D0D                     __ptext118:	
 17300 ;; *************** function _CC2500_FrequencyCabr *****************
 17301 ;; Defined at:
 17302 ;;		line 201 in file "../src/CC2500_B1.c"
 17303 ;; Parameters:    Size  Location     Type
 17304 ;;		None
 17305 ;; Auto vars:     Size  Location     Type
 17306 ;;		None
 17307 ;; Return value:  Size  Location     Type
 17308 ;;		None               void
 17309 ;; Registers used:
 17310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17311 ;; Tracked objects:
 17312 ;;		On entry : 0/0
 17313 ;;		On exit  : 0/0
 17314 ;;		Unchanged: 0/0
 17315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;Total ram usage:        0 bytes
 17321 ;; Hardware stack levels used:    1
 17322 ;; Hardware stack levels required when called:    7
 17323 ;; This function calls:
 17324 ;;		_CC2500_WriteCommand
 17325 ;;		_DelayTime_1us
 17326 ;; This function is called by:
 17327 ;;		_CC2500_PowerOnInitial
 17328 ;; This function uses a non-reentrant model
 17329 ;;
 17330                           
 17331                           
 17332                           ;psect for function _CC2500_FrequencyCabr
 17333  1D0D                     _CC2500_FrequencyCabr:	
 17334                           
 17335                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17336                           
 17337                           ;incstack = 0
 17338                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17339  1D0D  3033               	movlw	51
 17340  1D0E  319F  271A  319D   	fcall	_CC2500_WriteCommand
 17341                           
 17342                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17343  1D11  30E8               	movlw	232
 17344  1D12  0020               	movlb	0	; select bank0
 17345  1D13  00A0               	movwf	DelayTime_1us@count
 17346  1D14  3003               	movlw	3
 17347  1D15  00A1               	movwf	DelayTime_1us@count+1
 17348  1D16  3191  213A         	fcall	_DelayTime_1us
 17349  1D18  0008               	return
 17350  1D19                     __end_of_CC2500_FrequencyCabr:	
 17351                           
 17352                           	psect	text119
 17353  113A                     __ptext119:	
 17354 ;; *************** function _DelayTime_1us *****************
 17355 ;; Defined at:
 17356 ;;		line 320 in file "../src/CC2500_B1.c"
 17357 ;; Parameters:    Size  Location     Type
 17358 ;;  count           2    0[BANK0 ] int 
 17359 ;; Auto vars:     Size  Location     Type
 17360 ;;  j               2    4[BANK0 ] unsigned int 
 17361 ;;  i               2    2[BANK0 ] unsigned int 
 17362 ;; Return value:  Size  Location     Type
 17363 ;;		None               void
 17364 ;; Registers used:
 17365 ;;		wreg, status,2
 17366 ;; Tracked objects:
 17367 ;;		On entry : 0/0
 17368 ;;		On exit  : 0/0
 17369 ;;		Unchanged: 0/0
 17370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17371 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17372 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17374 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17375 ;;Total ram usage:        6 bytes
 17376 ;; Hardware stack levels used:    1
 17377 ;; Hardware stack levels required when called:    5
 17378 ;; This function calls:
 17379 ;;		Nothing
 17380 ;; This function is called by:
 17381 ;;		_CC2500_PowerRST
 17382 ;;		_CC2500_FrequencyCabr
 17383 ;; This function uses a non-reentrant model
 17384 ;;
 17385                           
 17386                           
 17387                           ;psect for function _DelayTime_1us
 17388  113A                     _DelayTime_1us:	
 17389                           
 17390                           ;CC2500_B1.c: 321: unsigned int i, j;
 17391                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17392                           
 17393                           ;incstack = 0
 17394                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17395  113A  3001               	movlw	1
 17396  113B  0020               	movlb	0	; select bank0
 17397  113C  00A2               	movwf	DelayTime_1us@i
 17398  113D  3000               	movlw	0
 17399  113E  00A3               	movwf	DelayTime_1us@i+1
 17400  113F                     l348:	
 17401  113F  0821               	movf	DelayTime_1us@count+1,w
 17402  1140  0223               	subwf	DelayTime_1us@i+1,w
 17403  1141  1D03               	skipz
 17404  1142  2945               	goto	u9595
 17405  1143  0820               	movf	DelayTime_1us@count,w
 17406  1144  0222               	subwf	DelayTime_1us@i,w
 17407  1145                     u9595:	
 17408  1145  1803               	btfsc	3,0
 17409  1146  0008               	return
 17410                           
 17411                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17412  1147  01A4               	clrf	DelayTime_1us@j
 17413  1148  01A5               	clrf	DelayTime_1us@j+1
 17414  1149  3000               	movlw	0
 17415  114A  0225               	subwf	DelayTime_1us@j+1,w
 17416  114B  3002               	movlw	2
 17417  114C  1903               	skipnz
 17418  114D  0224               	subwf	DelayTime_1us@j,w
 17419  114E  1803               	btfsc	3,0
 17420  114F  295B               	goto	l8882
 17421  1150                     l8880:	
 17422  1150  3001               	movlw	1
 17423  1151  07A4               	addwf	DelayTime_1us@j,f
 17424  1152  3000               	movlw	0
 17425  1153  3DA5               	addwfc	DelayTime_1us@j+1,f
 17426  1154  3000               	movlw	0
 17427  1155  0225               	subwf	DelayTime_1us@j+1,w
 17428  1156  3002               	movlw	2
 17429  1157  1903               	skipnz
 17430  1158  0224               	subwf	DelayTime_1us@j,w
 17431  1159  1C03               	skipc
 17432  115A  2950               	goto	l8880
 17433  115B                     l8882:	
 17434  115B  3001               	movlw	1
 17435  115C  07A2               	addwf	DelayTime_1us@i,f
 17436  115D  3000               	movlw	0
 17437  115E  3DA3               	addwfc	DelayTime_1us@i+1,f
 17438  115F  293F               	goto	l348
 17439  1160                     __end_of_DelayTime_1us:	
 17440                           
 17441                           	psect	text120
 17442  1C2E                     __ptext120:	
 17443 ;; *************** function _CC2500_ClearTXFIFO *****************
 17444 ;; Defined at:
 17445 ;;		line 187 in file "../src/CC2500_B1.c"
 17446 ;; Parameters:    Size  Location     Type
 17447 ;;		None
 17448 ;; Auto vars:     Size  Location     Type
 17449 ;;		None
 17450 ;; Return value:  Size  Location     Type
 17451 ;;		None               void
 17452 ;; Registers used:
 17453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17454 ;; Tracked objects:
 17455 ;;		On entry : 0/0
 17456 ;;		On exit  : 0/0
 17457 ;;		Unchanged: 0/0
 17458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17463 ;;Total ram usage:        0 bytes
 17464 ;; Hardware stack levels used:    1
 17465 ;; Hardware stack levels required when called:    7
 17466 ;; This function calls:
 17467 ;;		_CC2500_WriteCommand
 17468 ;; This function is called by:
 17469 ;;		_CC2500_PowerOnInitial
 17470 ;; This function uses a non-reentrant model
 17471 ;;
 17472                           
 17473                           
 17474                           ;psect for function _CC2500_ClearTXFIFO
 17475  1C2E                     _CC2500_ClearTXFIFO:	
 17476                           
 17477                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17478                           
 17479                           ;incstack = 0
 17480                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17481  1C2E  303B               	movlw	59
 17482  1C2F  319F  271A         	fcall	_CC2500_WriteCommand
 17483  1C31  0008               	return
 17484  1C32                     __end_of_CC2500_ClearTXFIFO:	
 17485                           
 17486                           	psect	text121
 17487  1C2A                     __ptext121:	
 17488 ;; *************** function _CC2500_ClearRXFIFO *****************
 17489 ;; Defined at:
 17490 ;;		line 194 in file "../src/CC2500_B1.c"
 17491 ;; Parameters:    Size  Location     Type
 17492 ;;		None
 17493 ;; Auto vars:     Size  Location     Type
 17494 ;;		None
 17495 ;; Return value:  Size  Location     Type
 17496 ;;		None               void
 17497 ;; Registers used:
 17498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17499 ;; Tracked objects:
 17500 ;;		On entry : 0/0
 17501 ;;		On exit  : 0/0
 17502 ;;		Unchanged: 0/0
 17503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17508 ;;Total ram usage:        0 bytes
 17509 ;; Hardware stack levels used:    1
 17510 ;; Hardware stack levels required when called:    7
 17511 ;; This function calls:
 17512 ;;		_CC2500_WriteCommand
 17513 ;; This function is called by:
 17514 ;;		_CC2500_PowerOnInitial
 17515 ;; This function uses a non-reentrant model
 17516 ;;
 17517                           
 17518                           
 17519                           ;psect for function _CC2500_ClearRXFIFO
 17520  1C2A                     _CC2500_ClearRXFIFO:	
 17521                           
 17522                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17523                           
 17524                           ;incstack = 0
 17525                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17526  1C2A  303A               	movlw	58
 17527  1C2B  319F  271A         	fcall	_CC2500_WriteCommand
 17528  1C2D  0008               	return
 17529  1C2E                     __end_of_CC2500_ClearRXFIFO:	
 17530                           
 17531                           	psect	text122
 17532  1F1A                     __ptext122:	
 17533 ;; *************** function _CC2500_WriteCommand *****************
 17534 ;; Defined at:
 17535 ;;		line 285 in file "../src/CC2500_B1.c"
 17536 ;; Parameters:    Size  Location     Type
 17537 ;;  command         1    wreg     unsigned char 
 17538 ;; Auto vars:     Size  Location     Type
 17539 ;;  command         1    3[BANK0 ] unsigned char 
 17540 ;; Return value:  Size  Location     Type
 17541 ;;		None               void
 17542 ;; Registers used:
 17543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17544 ;; Tracked objects:
 17545 ;;		On entry : 0/0
 17546 ;;		On exit  : 0/0
 17547 ;;		Unchanged: 0/0
 17548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17553 ;;Total ram usage:        2 bytes
 17554 ;; Hardware stack levels used:    1
 17555 ;; Hardware stack levels required when called:    6
 17556 ;; This function calls:
 17557 ;;		_CC2500_WriteByte
 17558 ;;		_Timeout_Counter
 17559 ;;		_set_TimeoutCleared
 17560 ;; This function is called by:
 17561 ;;		_CC2500_TxData
 17562 ;;		_CC2500_ClearTXFIFO
 17563 ;;		_CC2500_ClearRXFIFO
 17564 ;;		_CC2500_FrequencyCabr
 17565 ;;		_CC2500_SIDLEMode
 17566 ;;		_setRF_Main
 17567 ;;		_RF_RxDisable
 17568 ;; This function uses a non-reentrant model
 17569 ;;
 17570                           
 17571                           
 17572                           ;psect for function _CC2500_WriteCommand
 17573  1F1A                     _CC2500_WriteCommand:	
 17574                           
 17575                           ;incstack = 0
 17576                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17577                           ;CC2500_WriteCommand@command stored from wreg
 17578  1F1A  0020               	movlb	0	; select bank0
 17579  1F1B  00A3               	movwf	CC2500_WriteCommand@command
 17580                           
 17581                           ;CC2500_B1.c: 286: RC0 = 0;
 17582  1F1C  100E               	bcf	14,0	;volatile
 17583                           
 17584                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17585  1F1D  0823               	movf	CC2500_WriteCommand@command,w
 17586  1F1E  00A2               	movwf	??_CC2500_WriteCommand
 17587  1F1F  0822               	movf	??_CC2500_WriteCommand,w
 17588  1F20  0021               	movlb	1	; select bank1
 17589  1F21  00D1               	movwf	_SPI0Buffer^(0+128)
 17590                           
 17591                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17592  1F22  2F26               	goto	l8618
 17593  1F23                     l8616:	
 17594                           
 17595                           ;CC2500_B1.c: 290: Timeout_Counter();
 17596  1F23  319E  2694  319F   	fcall	_Timeout_Counter
 17597  1F26                     l8618:	
 17598  1F26  0020               	movlb	0	; select bank0
 17599  1F27  1E8E               	btfss	14,5	;volatile
 17600  1F28  2F2C               	goto	l8622
 17601  1F29  0021               	movlb	1	; select bank1
 17602  1F2A  1D2B               	btfss	(_myMain^(0+128)+11),2
 17603  1F2B  2F23               	goto	l8616
 17604  1F2C                     l8622:	
 17605                           
 17606                           ;CC2500_B1.c: 291: };
 17607                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17608  1F2C  319C  244A  319F   	fcall	_set_TimeoutCleared
 17609                           
 17610                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17611  1F2F  319F  2701         	fcall	_CC2500_WriteByte
 17612                           
 17613                           ;CC2500_B1.c: 295: RC0 = 1;
 17614  1F31  0020               	movlb	0	; select bank0
 17615  1F32  140E               	bsf	14,0	;volatile
 17616  1F33  0008               	return
 17617  1F34                     __end_of_CC2500_WriteCommand:	
 17618                           
 17619                           	psect	text123
 17620  1C4A                     __ptext123:	
 17621 ;; *************** function _set_TimeoutCleared *****************
 17622 ;; Defined at:
 17623 ;;		line 283 in file "../src/Main_B1.c"
 17624 ;; Parameters:    Size  Location     Type
 17625 ;;		None
 17626 ;; Auto vars:     Size  Location     Type
 17627 ;;		None
 17628 ;; Return value:  Size  Location     Type
 17629 ;;		None               void
 17630 ;; Registers used:
 17631 ;;		status,2
 17632 ;; Tracked objects:
 17633 ;;		On entry : 0/0
 17634 ;;		On exit  : 0/0
 17635 ;;		Unchanged: 0/0
 17636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17641 ;;Total ram usage:        0 bytes
 17642 ;; Hardware stack levels used:    1
 17643 ;; Hardware stack levels required when called:    5
 17644 ;; This function calls:
 17645 ;;		Nothing
 17646 ;; This function is called by:
 17647 ;;		_CC2500_TxData
 17648 ;;		_CC2500_RxData
 17649 ;;		_CC2500_PowerRST
 17650 ;;		_CC2500_WriteREG
 17651 ;;		_CC2500_WriteCommand
 17652 ;;		_CC2500_ReadStatus
 17653 ;;		_getAD
 17654 ;;		_TouchPower
 17655 ;;		_CC2500_ReadREG
 17656 ;; This function uses a non-reentrant model
 17657 ;;
 17658                           
 17659                           
 17660                           ;psect for function _set_TimeoutCleared
 17661  1C4A                     _set_TimeoutCleared:	
 17662                           
 17663                           ;Main_B1.c: 284: myMain.Timeout = 0;
 17664                           
 17665                           ;incstack = 0
 17666                           ; Regs used in _set_TimeoutCleared: [status,2]
 17667  1C4A  0021               	movlb	1	; select bank1
 17668  1C4B  112B               	bcf	(_myMain^(0+128)+11),2
 17669                           
 17670                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 17671  1C4C  01AC               	clrf	(_myMain^(0+128)+12)
 17672  1C4D  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17673  1C4E  0008               	return
 17674  1C4F                     __end_of_set_TimeoutCleared:	
 17675                           
 17676                           	psect	text124
 17677  1E94                     __ptext124:	
 17678 ;; *************** function _Timeout_Counter *****************
 17679 ;; Defined at:
 17680 ;;		line 274 in file "../src/Main_B1.c"
 17681 ;; Parameters:    Size  Location     Type
 17682 ;;		None
 17683 ;; Auto vars:     Size  Location     Type
 17684 ;;		None
 17685 ;; Return value:  Size  Location     Type
 17686 ;;		None               void
 17687 ;; Registers used:
 17688 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17689 ;; Tracked objects:
 17690 ;;		On entry : 0/0
 17691 ;;		On exit  : 0/0
 17692 ;;		Unchanged: 0/0
 17693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17698 ;;Total ram usage:        0 bytes
 17699 ;; Hardware stack levels used:    1
 17700 ;; Hardware stack levels required when called:    5
 17701 ;; This function calls:
 17702 ;;		Nothing
 17703 ;; This function is called by:
 17704 ;;		_CC2500_TxData
 17705 ;;		_CC2500_RxData
 17706 ;;		_CC2500_PowerRST
 17707 ;;		_CC2500_WriteREG
 17708 ;;		_CC2500_WriteCommand
 17709 ;;		_CC2500_ReadStatus
 17710 ;;		_getAD
 17711 ;;		_TouchPower
 17712 ;;		_CC2500_ReadREG
 17713 ;; This function uses a non-reentrant model
 17714 ;;
 17715                           
 17716                           
 17717                           ;psect for function _Timeout_Counter
 17718  1E94                     _Timeout_Counter:	
 17719                           
 17720                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 17721                           
 17722                           ;incstack = 0
 17723                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17724  1E94  3001               	movlw	1
 17725  1E95  0021               	movlb	1	; select bank1
 17726  1E96  07AC               	addwf	(_myMain^(0+128)+12),f
 17727  1E97  3000               	movlw	0
 17728  1E98  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 17729                           
 17730                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 17731  1E99  300C               	movlw	12
 17732  1E9A  3EA0               	addlw	_myMain& (0+255)
 17733  1E9B  0086               	movwf	6
 17734  1E9C  0187               	clrf	7
 17735  1E9D  3F40               	moviw [0]fsr1
 17736  1E9E  3A10               	xorlw	16
 17737  1E9F  1D03               	skipz
 17738  1EA0  2EA3               	goto	u9045
 17739  1EA1  3F41               	moviw [1]fsr1
 17740  1EA2  3A27               	xorlw	39
 17741  1EA3                     u9045:	
 17742  1EA3  1D03               	skipz
 17743  1EA4  0008               	return
 17744                           
 17745                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 17746  1EA5  01AC               	clrf	(_myMain^(0+128)+12)
 17747  1EA6  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17748                           
 17749                           ;Main_B1.c: 278: myMain.Timeout = 1;
 17750  1EA7  152B               	bsf	(_myMain^(0+128)+11),2
 17751  1EA8  0008               	return
 17752  1EA9                     __end_of_Timeout_Counter:	
 17753                           
 17754                           	psect	text125
 17755  1F01                     __ptext125:	
 17756 ;; *************** function _CC2500_WriteByte *****************
 17757 ;; Defined at:
 17758 ;;		line 219 in file "../src/CC2500_B1.c"
 17759 ;; Parameters:    Size  Location     Type
 17760 ;;		None
 17761 ;; Auto vars:     Size  Location     Type
 17762 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17763 ;; Return value:  Size  Location     Type
 17764 ;;		None               void
 17765 ;; Registers used:
 17766 ;;		wreg, status,2, status,0
 17767 ;; Tracked objects:
 17768 ;;		On entry : 0/0
 17769 ;;		On exit  : 0/0
 17770 ;;		Unchanged: 0/0
 17771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17773 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;Total ram usage:        2 bytes
 17777 ;; Hardware stack levels used:    1
 17778 ;; Hardware stack levels required when called:    5
 17779 ;; This function calls:
 17780 ;;		Nothing
 17781 ;; This function is called by:
 17782 ;;		_CC2500_TxData
 17783 ;;		_CC2500_RxData
 17784 ;;		_CC2500_PowerRST
 17785 ;;		_CC2500_WriteREG
 17786 ;;		_CC2500_WriteCommand
 17787 ;;		_CC2500_ReadStatus
 17788 ;;		_CC2500_ReadREG
 17789 ;; This function uses a non-reentrant model
 17790 ;;
 17791                           
 17792                           
 17793                           ;psect for function _CC2500_WriteByte
 17794  1F01                     _CC2500_WriteByte:	
 17795                           
 17796                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17797                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17798                           
 17799                           ;incstack = 0
 17800                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17801  1F01  0020               	movlb	0	; select bank0
 17802  1F02  01A1               	clrf	CC2500_WriteByte@loop_a
 17803  1F03                     L9:	
 17804  1F03  3008               	movlw	8
 17805  1F04  0221               	subwf	CC2500_WriteByte@loop_a,w
 17806  1F05  1803               	btfsc	3,0
 17807  1F06  0008               	return
 17808                           
 17809                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17810  1F07  0021               	movlb	1	; select bank1
 17811  1F08  1FD1               	btfss	_SPI0Buffer^(0+128),7
 17812  1F09  2F0D               	goto	l304
 17813                           
 17814                           ;CC2500_B1.c: 223: RC4 = 1;
 17815  1F0A  0020               	movlb	0	; select bank0
 17816  1F0B  160E               	bsf	14,4	;volatile
 17817  1F0C  2F0F               	goto	l305
 17818  1F0D                     l304:	
 17819                           
 17820                           ;CC2500_B1.c: 224: else
 17821                           ;CC2500_B1.c: 225: RC4 = 0;
 17822  1F0D  0020               	movlb	0	; select bank0
 17823  1F0E  120E               	bcf	14,4	;volatile
 17824  1F0F                     l305:	
 17825                           
 17826                           ;CC2500_B1.c: 226: RC3 = 1;
 17827  1F0F  158E               	bsf	14,3	;volatile
 17828                           
 17829                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17830  1F10  1003               	clrc
 17831  1F11  0021               	movlb	1	; select bank1
 17832  1F12  0DD1               	rlf	_SPI0Buffer^(0+128),f
 17833                           
 17834                           ;CC2500_B1.c: 228: RC3 = 0;
 17835  1F13  0020               	movlb	0	; select bank0
 17836  1F14  118E               	bcf	14,3	;volatile
 17837  1F15  3001               	movlw	1
 17838  1F16  00A0               	movwf	??_CC2500_WriteByte
 17839  1F17  0820               	movf	??_CC2500_WriteByte,w
 17840  1F18  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17841  1F19  2F03               	goto	L9
 17842  1F1A                     __end_of_CC2500_WriteByte:	
 17843                           
 17844                           	psect	text126
 17845  14D0                     __ptext126:	
 17846 ;; *************** function _Buzzer_Main *****************
 17847 ;; Defined at:
 17848 ;;		line 46 in file "../src/Buzzer_B1.c"
 17849 ;; Parameters:    Size  Location     Type
 17850 ;;		None
 17851 ;; Auto vars:     Size  Location     Type
 17852 ;;		None
 17853 ;; Return value:  Size  Location     Type
 17854 ;;		None               void
 17855 ;; Registers used:
 17856 ;;		wreg, status,2, status,0
 17857 ;; Tracked objects:
 17858 ;;		On entry : 0/0
 17859 ;;		On exit  : 0/0
 17860 ;;		Unchanged: 0/0
 17861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17864 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17865 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17866 ;;Total ram usage:        1 bytes
 17867 ;; Hardware stack levels used:    1
 17868 ;; Hardware stack levels required when called:    5
 17869 ;; This function calls:
 17870 ;;		Nothing
 17871 ;; This function is called by:
 17872 ;;		_main
 17873 ;; This function uses a non-reentrant model
 17874 ;;
 17875                           
 17876                           
 17877                           ;psect for function _Buzzer_Main
 17878  14D0                     _Buzzer_Main:	
 17879                           
 17880                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17881                           
 17882                           ;incstack = 0
 17883                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17884  14D0  0021               	movlb	1	; select bank1
 17885  14D1  1CAE               	btfss	_Buz1^(0+128),1
 17886  14D2  0008               	return
 17887                           
 17888                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17889  14D3  3001               	movlw	1
 17890  14D4  07AF               	addwf	(_Buz1^(0+128)+1),f
 17891  14D5  3000               	movlw	0
 17892  14D6  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 17893                           
 17894                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17895  14D7  0835               	movf	((_Buz1+1)^(0+128)+6),w
 17896  14D8  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 17897  14D9  1D03               	skipz
 17898  14DA  2CDD               	goto	u10915
 17899  14DB  0834               	movf	(_Buz1^(0+128)+6),w
 17900  14DC  022F               	subwf	(_Buz1^(0+128)+1),w
 17901  14DD                     u10915:	
 17902  14DD  1C03               	skipc
 17903  14DE  0008               	return
 17904                           
 17905                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17906  14DF  01AF               	clrf	(_Buz1^(0+128)+1)
 17907  14E0  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17908                           
 17909                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17910  14E1  12AE               	bcf	_Buz1^(0+128),5
 17911  14E2  0020               	movlb	0	; select bank0
 17912  14E3  1D8D               	btfss	13,3	;volatile
 17913  14E4  2CE7               	goto	l9722
 17914  14E5  0021               	movlb	1	; select bank1
 17915  14E6  16AE               	bsf	_Buz1^(0+128),5
 17916  14E7                     l9722:	
 17917                           
 17918                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17919  14E7  0021               	movlb	1	; select bank1
 17920  14E8  1AAE               	btfsc	_Buz1^(0+128),5
 17921  14E9  2D13               	goto	l94
 17922                           
 17923                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17924  14EA  08B1               	movf	(_Buz1^(0+128)+3),f
 17925  14EB  1D03               	skipz
 17926  14EC  2D0F               	goto	l95
 17927                           
 17928                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17929  14ED  1DAE               	btfss	_Buz1^(0+128),3
 17930  14EE  2CFD               	goto	l96
 17931                           
 17932                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17933  14EF  11AE               	bcf	_Buz1^(0+128),3
 17934                           
 17935                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17936  14F0  0832               	movf	(_Buz1^(0+128)+4),w
 17937  14F1  0020               	movlb	0	; select bank0
 17938  14F2  00A0               	movwf	??_Buzzer_Main
 17939  14F3  0820               	movf	??_Buzzer_Main,w
 17940  14F4  0021               	movlb	1	; select bank1
 17941  14F5  00B1               	movwf	(_Buz1^(0+128)+3)
 17942                           
 17943                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17944  14F6  0837               	movf	((_Buz1+1)^(0+128)+8),w
 17945  14F7  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17946  14F8  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17947  14F9  0836               	movf	(_Buz1^(0+128)+8),w
 17948  14FA  01B4               	clrf	(_Buz1^(0+128)+6)
 17949  14FB  07B4               	addwf	(_Buz1^(0+128)+6),f
 17950                           
 17951                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17952  14FC  0008               	return
 17953  14FD                     l96:	
 17954  14FD  1E2E               	btfss	_Buz1^(0+128),4
 17955  14FE  2D0D               	goto	l98
 17956                           
 17957                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17958  14FF  122E               	bcf	_Buz1^(0+128),4
 17959                           
 17960                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17961  1500  0833               	movf	(_Buz1^(0+128)+5),w
 17962  1501  0020               	movlb	0	; select bank0
 17963  1502  00A0               	movwf	??_Buzzer_Main
 17964  1503  0820               	movf	??_Buzzer_Main,w
 17965  1504  0021               	movlb	1	; select bank1
 17966  1505  00B1               	movwf	(_Buz1^(0+128)+3)
 17967                           
 17968                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17969  1506  0839               	movf	((_Buz1+1)^(0+128)+10),w
 17970  1507  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17971  1508  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17972  1509  0838               	movf	(_Buz1^(0+128)+10),w
 17973  150A  01B4               	clrf	(_Buz1^(0+128)+6)
 17974  150B  07B4               	addwf	(_Buz1^(0+128)+6),f
 17975                           
 17976                           ;Buzzer_B1.c: 62: } else {
 17977  150C  0008               	return
 17978  150D                     l98:	
 17979                           
 17980                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17981  150D  10AE               	bcf	_Buz1^(0+128),1
 17982                           
 17983                           ;Buzzer_B1.c: 64: }
 17984                           ;Buzzer_B1.c: 65: } else {
 17985  150E  0008               	return
 17986  150F                     l95:	
 17987                           
 17988                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17989  150F  16AE               	bsf	_Buz1^(0+128),5
 17990                           
 17991                           ;Buzzer_B1.c: 68: RB3 = 1;
 17992  1510  0020               	movlb	0	; select bank0
 17993  1511  158D               	bsf	13,3	;volatile
 17994                           
 17995                           ;Buzzer_B1.c: 69: }
 17996                           ;Buzzer_B1.c: 70: } else {
 17997  1512  0008               	return
 17998  1513                     l94:	
 17999                           
 18000                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18001  1513  12AE               	bcf	_Buz1^(0+128),5
 18002                           
 18003                           ;Buzzer_B1.c: 73: RB3 = 0;
 18004  1514  0020               	movlb	0	; select bank0
 18005  1515  118D               	bcf	13,3	;volatile
 18006                           
 18007                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18008  1516  3001               	movlw	1
 18009  1517  0021               	movlb	1	; select bank1
 18010  1518  02B1               	subwf	(_Buz1^(0+128)+3),f
 18011  1519  0008               	return
 18012  151A                     __end_of_Buzzer_Main:	
 18013                           
 18014                           	psect	text127
 18015  1C14                     __ptext127:	
 18016 ;; *************** function _Buzzer_Initialization *****************
 18017 ;; Defined at:
 18018 ;;		line 11 in file "../src/Buzzer_B1.c"
 18019 ;; Parameters:    Size  Location     Type
 18020 ;;		None
 18021 ;; Auto vars:     Size  Location     Type
 18022 ;;		None
 18023 ;; Return value:  Size  Location     Type
 18024 ;;		None               void
 18025 ;; Registers used:
 18026 ;;		None
 18027 ;; Tracked objects:
 18028 ;;		On entry : 0/0
 18029 ;;		On exit  : 0/0
 18030 ;;		Unchanged: 0/0
 18031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18036 ;;Total ram usage:        0 bytes
 18037 ;; Hardware stack levels used:    1
 18038 ;; Hardware stack levels required when called:    5
 18039 ;; This function calls:
 18040 ;;		Nothing
 18041 ;; This function is called by:
 18042 ;;		_main
 18043 ;; This function uses a non-reentrant model
 18044 ;;
 18045                           
 18046                           
 18047                           ;psect for function _Buzzer_Initialization
 18048  1C14                     _Buzzer_Initialization:	
 18049                           
 18050                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18051                           
 18052                           ;incstack = 0
 18053                           ; Regs used in _Buzzer_Initialization: []
 18054  1C14  0021               	movlb	1	; select bank1
 18055  1C15  142E               	bsf	_Buz1^(0+128),0
 18056  1C16  0008               	return
 18057  1C17                     __end_of_Buzzer_Initialization:	
 18058                           
 18059                           	psect	intentry
 18060  0004                     __pintentry:	
 18061 ;; *************** function _ISR *****************
 18062 ;; Defined at:
 18063 ;;		line 107 in file "../src/MCU_B1.c"
 18064 ;; Parameters:    Size  Location     Type
 18065 ;;		None
 18066 ;; Auto vars:     Size  Location     Type
 18067 ;;		None
 18068 ;; Return value:  Size  Location     Type
 18069 ;;		None               void
 18070 ;; Registers used:
 18071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18072 ;; Tracked objects:
 18073 ;;		On entry : 0/0
 18074 ;;		On exit  : 0/0
 18075 ;;		Unchanged: 0/0
 18076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18081 ;;Total ram usage:        1 bytes
 18082 ;; Hardware stack levels used:    1
 18083 ;; Hardware stack levels required when called:    4
 18084 ;; This function calls:
 18085 ;;		_IOC_ISR
 18086 ;;		_TMR1_ISR
 18087 ;; This function is called by:
 18088 ;;		Interrupt level 1
 18089 ;; This function uses a non-reentrant model
 18090 ;;
 18091                           
 18092  0004                     _ISR:	
 18093                           
 18094                           ;incstack = 0
 18095                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18096  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18097  0005  3180               	pagesel	$
 18098  0006  0020               	movlb	0	; select bank0
 18099  0007  087F               	movf	127,w
 18100  0008  00F4               	movwf	??_ISR
 18101                           
 18102                           ;MCU_B1.c: 109: IOC_ISR();
 18103  0009  319D  257D  3180   	fcall	_IOC_ISR
 18104                           
 18105                           ;MCU_B1.c: 111: ;;
 18106                           ;MCU_B1.c: 113: TMR1_ISR();
 18107  000C  3190  20F0         	fcall	_TMR1_ISR
 18108  000E  0874               	movf	??_ISR,w
 18109  000F  0020               	movlb	0	; select bank0
 18110  0010  00FF               	movwf	127
 18111  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18112  0012  0009               	retfie
 18113  0013                     __end_of_ISR:	
 18114                           
 18115                           	psect	text129
 18116  10F0                     __ptext129:	
 18117 ;; *************** function _TMR1_ISR *****************
 18118 ;; Defined at:
 18119 ;;		line 209 in file "../src/MCU_B1.c"
 18120 ;; Parameters:    Size  Location     Type
 18121 ;;		None
 18122 ;; Auto vars:     Size  Location     Type
 18123 ;;		None
 18124 ;; Return value:  Size  Location     Type
 18125 ;;		None               void
 18126 ;; Registers used:
 18127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18128 ;; Tracked objects:
 18129 ;;		On entry : 0/0
 18130 ;;		On exit  : 0/0
 18131 ;;		Unchanged: 0/0
 18132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18137 ;;Total ram usage:        0 bytes
 18138 ;; Hardware stack levels used:    1
 18139 ;; Hardware stack levels required when called:    2
 18140 ;; This function calls:
 18141 ;;		_setDimmerLights_IntrControl
 18142 ;; This function is called by:
 18143 ;;		_ISR
 18144 ;; This function uses a non-reentrant model
 18145 ;;
 18146                           
 18147                           
 18148                           ;psect for function _TMR1_ISR
 18149  10F0                     _TMR1_ISR:	
 18150                           
 18151                           ;MCU_B1.c: 211: if (TMR1IE == 1 && TMR1IF == 1) {
 18152                           
 18153                           ;incstack = 0
 18154                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18155  10F0  0021               	movlb	1	; select bank1
 18156  10F1  1C11               	btfss	17,0	;volatile
 18157  10F2  0008               	return
 18158  10F3  0020               	movlb	0	; select bank0
 18159  10F4  1C11               	btfss	17,0	;volatile
 18160  10F5  0008               	return
 18161                           
 18162                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18163  10F6  30FA               	movlw	250
 18164  10F7  0097               	movwf	23	;volatile
 18165                           
 18166                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18167  10F8  3038               	movlw	56
 18168  10F9  0096               	movwf	22	;volatile
 18169                           
 18170                           ;MCU_B1.c: 214: TMR1IF = 0;
 18171  10FA  1011               	bcf	17,0	;volatile
 18172                           
 18173                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18174  10FB  3001               	movlw	1
 18175  10FC  3183  2360  3190   	fcall	_setDimmerLights_IntrControl
 18176                           
 18177                           ;MCU_B1.c: 235: Timer1.Count++;
 18178  10FF  3001               	movlw	1
 18179  1100  0022               	movlb	2	; select bank2
 18180  1101  07A1               	addwf	(_Timer1^(0+256)+1),f
 18181  1102  3000               	movlw	0
 18182  1103  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18183                           
 18184                           ;MCU_B1.c: 236: if (Timer1.Count == 100) {
 18185  1104  3001               	movlw	1
 18186  1105  3E20               	addlw	_Timer1& (0+255)
 18187  1106  0086               	movwf	6
 18188  1107  3001               	movlw	1	; select bank2/3
 18189  1108  0087               	movwf	7
 18190  1109  3F40               	moviw [0]fsr1
 18191  110A  3A64               	xorlw	100
 18192  110B  1D03               	skipz
 18193  110C  290F               	goto	u727_25
 18194  110D  3F41               	moviw [1]fsr1
 18195  110E  3A00               	xorlw	0
 18196  110F                     u727_25:	
 18197  110F  1D03               	skipz
 18198  1110  0008               	return
 18199                           
 18200                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18201  1111  01A1               	clrf	(_Timer1^(0+256)+1)
 18202  1112  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18203                           
 18204                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18205  1113  1420               	bsf	_Timer1^(0+256),0
 18206  1114  0008               	return
 18207  1115                     __end_of_TMR1_ISR:	
 18208                           
 18209                           	psect	text130
 18210  0360                     __ptext130:	
 18211 ;; *************** function _setDimmerLights_IntrControl *****************
 18212 ;; Defined at:
 18213 ;;		line 96 in file "../src/Dimmer_B1.c"
 18214 ;; Parameters:    Size  Location     Type
 18215 ;;  lights          1    wreg     unsigned char 
 18216 ;; Auto vars:     Size  Location     Type
 18217 ;;  lights          1    3[COMMON] unsigned char 
 18218 ;; Return value:  Size  Location     Type
 18219 ;;		None               void
 18220 ;; Registers used:
 18221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18222 ;; Tracked objects:
 18223 ;;		On entry : 0/0
 18224 ;;		On exit  : 0/0
 18225 ;;		Unchanged: 0/0
 18226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18230 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18231 ;;Total ram usage:        2 bytes
 18232 ;; Hardware stack levels used:    1
 18233 ;; Hardware stack levels required when called:    1
 18234 ;; This function calls:
 18235 ;;		_DimmerIntrPointSelect
 18236 ;; This function is called by:
 18237 ;;		_TMR1_ISR
 18238 ;; This function uses a non-reentrant model
 18239 ;;
 18240                           
 18241                           
 18242                           ;psect for function _setDimmerLights_IntrControl
 18243  0360                     _setDimmerLights_IntrControl:	
 18244                           
 18245                           ;incstack = 0
 18246                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18247                           ;setDimmerLights_IntrControl@lights stored from wreg
 18248  0360  00F3               	movwf	setDimmerLights_IntrControl@lights
 18249                           
 18250                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18251  0361  0873               	movf	setDimmerLights_IntrControl@lights,w
 18252  0362  319C  24A2  3183   	fcall	_DimmerIntrPointSelect
 18253                           
 18254                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18255  0365  0876               	movf	_DimmerLightsIntr,w
 18256  0366  3E02               	addlw	2
 18257  0367  0086               	movwf	6
 18258  0368  3001               	movlw	1	; select bank2/3
 18259  0369  0087               	movwf	7
 18260  036A  1D01               	btfss	1,2
 18261  036B  2B8A               	goto	i1l6780
 18262                           
 18263                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18264  036C  3001               	movlw	1
 18265  036D  00F2               	movwf	??_setDimmerLights_IntrControl
 18266  036E  0876               	movf	_DimmerLightsIntr,w
 18267  036F  3E03               	addlw	3
 18268  0370  0086               	movwf	6
 18269  0371  3001               	movlw	1	; select bank2/3
 18270  0372  0087               	movwf	7
 18271  0373  0872               	movf	??_setDimmerLights_IntrControl,w
 18272  0374  0781               	addwf	1,f
 18273                           
 18274                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(70*0.8)) + 1) {
 18275  0375  0876               	movf	_DimmerLightsIntr,w
 18276  0376  3E03               	addlw	3
 18277  0377  0086               	movwf	6
 18278  0378  3001               	movlw	1	; select bank2/3
 18279  0379  0087               	movwf	7
 18280  037A  3039               	movlw	57
 18281  037B  0201               	subwf	1,w
 18282  037C  1C03               	skipc
 18283  037D  2B8A               	goto	i1l6780
 18284                           
 18285                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18286  037E  0876               	movf	_DimmerLightsIntr,w
 18287  037F  3E03               	addlw	3
 18288  0380  0086               	movwf	6
 18289  0381  3001               	movlw	1	; select bank2/3
 18290  0382  0087               	movwf	7
 18291  0383  0181               	clrf	1
 18292                           
 18293                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18294  0384  0876               	movf	_DimmerLightsIntr,w
 18295  0385  3E02               	addlw	2
 18296  0386  0086               	movwf	6
 18297  0387  3001               	movlw	1	; select bank2/3
 18298  0388  0087               	movwf	7
 18299  0389  1101               	bcf	1,2
 18300  038A                     i1l6780:	
 18301                           
 18302                           ;Dimmer_B1.c: 241: }
 18303                           ;Dimmer_B1.c: 242: }
 18304                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18305  038A  0A76               	incf	_DimmerLightsIntr,w
 18306  038B  0086               	movwf	6
 18307  038C  3001               	movlw	1	; select bank2/3
 18308  038D  0087               	movwf	7
 18309  038E  1C01               	btfss	1,0
 18310  038F  2BBA               	goto	i1l6792
 18311                           
 18312                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18313  0390  0876               	movf	_DimmerLightsIntr,w
 18314  0391  3E03               	addlw	3
 18315  0392  0086               	movwf	6
 18316  0393  3001               	movlw	1	; select bank2/3
 18317  0394  0087               	movwf	7
 18318  0395  0876               	movf	_DimmerLightsIntr,w
 18319  0396  3E04               	addlw	4
 18320  0397  0084               	movwf	4
 18321  0398  3001               	movlw	1	; select bank2/3
 18322  0399  0085               	movwf	5
 18323  039A  0800               	movf	0,w
 18324  039B  0201               	subwf	1,w
 18325  039C  1C03               	skipc
 18326  039D  0008               	return
 18327                           
 18328                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18329  039E  0A76               	incf	_DimmerLightsIntr,w
 18330  039F  0086               	movwf	6
 18331  03A0  3001               	movlw	1	; select bank2/3
 18332  03A1  0087               	movwf	7
 18333  03A2  1001               	bcf	1,0
 18334                           
 18335                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18336  03A3  0A76               	incf	_DimmerLightsIntr,w
 18337  03A4  0086               	movwf	6
 18338  03A5  3001               	movlw	1	; select bank2/3
 18339  03A6  0087               	movwf	7
 18340  03A7  1581               	bsf	1,3
 18341                           
 18342                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18343  03A8  0876               	movf	_DimmerLightsIntr,w
 18344  03A9  0086               	movwf	6
 18345  03AA  3001               	movlw	1	; select bank2/3
 18346  03AB  0087               	movwf	7
 18347  03AC  1C01               	btfss	1,0
 18348  03AD  0008               	return
 18349                           
 18350                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18351  03AE  0876               	movf	_DimmerLightsIntr,w
 18352  03AF  0086               	movwf	6
 18353  03B0  3001               	movlw	1	; select bank2/3
 18354  03B1  0087               	movwf	7
 18355  03B2  1001               	bcf	1,0
 18356                           
 18357                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18358  03B3  0873               	movf	setDimmerLights_IntrControl@lights,w
 18359  03B4  3A01               	xorlw	1
 18360  03B5  1D03               	skipz
 18361  03B6  0008               	return
 18362                           
 18363                           ;Dimmer_B1.c: 253: RB1 = 0;
 18364  03B7  0020               	movlb	0	; select bank0
 18365  03B8  108D               	bcf	13,1	;volatile
 18366                           
 18367                           ;Dimmer_B1.c: 255: }
 18368                           ;Dimmer_B1.c: 262: }
 18369                           ;Dimmer_B1.c: 263: }
 18370                           ;Dimmer_B1.c: 264: } else {
 18371  03B9  0008               	return
 18372  03BA                     i1l6792:	
 18373                           
 18374                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18375  03BA  0A76               	incf	_DimmerLightsIntr,w
 18376  03BB  0086               	movwf	6
 18377  03BC  3001               	movlw	1	; select bank2/3
 18378  03BD  0087               	movwf	7
 18379  03BE  1D81               	btfss	1,3
 18380  03BF  0008               	return
 18381                           
 18382                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18383  03C0  0A76               	incf	_DimmerLightsIntr,w
 18384  03C1  0086               	movwf	6
 18385  03C2  3001               	movlw	1	; select bank2/3
 18386  03C3  0087               	movwf	7
 18387  03C4  1181               	bcf	1,3
 18388                           
 18389                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18390  03C5  3001               	movlw	1
 18391  03C6  00F2               	movwf	??_setDimmerLights_IntrControl
 18392  03C7  0876               	movf	_DimmerLightsIntr,w
 18393  03C8  3E05               	addlw	5
 18394  03C9  0086               	movwf	6
 18395  03CA  3001               	movlw	1	; select bank2/3
 18396  03CB  0087               	movwf	7
 18397  03CC  0872               	movf	??_setDimmerLights_IntrControl,w
 18398  03CD  0781               	addwf	1,f
 18399                           
 18400                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18401  03CE  0876               	movf	_DimmerLightsIntr,w
 18402  03CF  3E05               	addlw	5
 18403  03D0  0086               	movwf	6
 18404  03D1  3001               	movlw	1	; select bank2/3
 18405  03D2  0087               	movwf	7
 18406  03D3  0876               	movf	_DimmerLightsIntr,w
 18407  03D4  3E08               	addlw	8
 18408  03D5  0084               	movwf	4
 18409  03D6  3001               	movlw	1	; select bank2/3
 18410  03D7  0085               	movwf	5
 18411  03D8  0800               	movf	0,w
 18412  03D9  0201               	subwf	1,w
 18413  03DA  1C03               	skipc
 18414  03DB  2C1E               	goto	i1l6818
 18415                           
 18416                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18417  03DC  0876               	movf	_DimmerLightsIntr,w
 18418  03DD  3E05               	addlw	5
 18419  03DE  0086               	movwf	6
 18420  03DF  3001               	movlw	1	; select bank2/3
 18421  03E0  0087               	movwf	7
 18422  03E1  0181               	clrf	1
 18423                           
 18424                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18425  03E2  0A76               	incf	_DimmerLightsIntr,w
 18426  03E3  0086               	movwf	6
 18427  03E4  3001               	movlw	1	; select bank2/3
 18428  03E5  0087               	movwf	7
 18429  03E6  1F01               	btfss	1,6
 18430  03E7  0008               	return
 18431                           
 18432                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18433  03E8  0A76               	incf	_DimmerLightsIntr,w
 18434  03E9  0086               	movwf	6
 18435  03EA  3001               	movlw	1	; select bank2/3
 18436  03EB  0087               	movwf	7
 18437  03EC  1B81               	btfsc	1,7
 18438  03ED  2C07               	goto	i1l6812
 18439                           
 18440                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(70*0.8))) {
 18441  03EE  0876               	movf	_DimmerLightsIntr,w
 18442  03EF  3E04               	addlw	4
 18443  03F0  0086               	movwf	6
 18444  03F1  3001               	movlw	1	; select bank2/3
 18445  03F2  0087               	movwf	7
 18446  03F3  3038               	movlw	56
 18447  03F4  0201               	subwf	1,w
 18448  03F5  1803               	skipnc
 18449  03F6  2C01               	goto	i1l6810
 18450                           
 18451                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18452  03F7  3001               	movlw	1
 18453  03F8  00F2               	movwf	??_setDimmerLights_IntrControl
 18454  03F9  0876               	movf	_DimmerLightsIntr,w
 18455  03FA  3E04               	addlw	4
 18456  03FB  0086               	movwf	6
 18457  03FC  3001               	movlw	1	; select bank2/3
 18458  03FD  0087               	movwf	7
 18459  03FE  0872               	movf	??_setDimmerLights_IntrControl,w
 18460  03FF  0781               	addwf	1,f
 18461                           
 18462                           ;Dimmer_B1.c: 274: } else {
 18463  0400  0008               	return
 18464  0401                     i1l6810:	
 18465                           
 18466                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 18467  0401  0A76               	incf	_DimmerLightsIntr,w
 18468  0402  0086               	movwf	6
 18469  0403  3001               	movlw	1	; select bank2/3
 18470  0404  0087               	movwf	7
 18471  0405  1781               	bsf	1,7
 18472                           
 18473                           ;Dimmer_B1.c: 276: }
 18474                           ;Dimmer_B1.c: 277: } else {
 18475  0406  0008               	return
 18476  0407                     i1l6812:	
 18477                           
 18478                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18479  0407  0876               	movf	_DimmerLightsIntr,w
 18480  0408  3E04               	addlw	4
 18481  0409  0086               	movwf	6
 18482  040A  3001               	movlw	1	; select bank2/3
 18483  040B  0087               	movwf	7
 18484  040C  300D               	movlw	13
 18485  040D  0201               	subwf	1,w
 18486  040E  1C03               	skipc
 18487  040F  2C18               	goto	i1l6816
 18488                           
 18489                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 18490  0410  0876               	movf	_DimmerLightsIntr,w
 18491  0411  3E04               	addlw	4
 18492  0412  0086               	movwf	6
 18493  0413  3001               	movlw	1	; select bank2/3
 18494  0414  0087               	movwf	7
 18495  0415  3001               	movlw	1
 18496  0416  0281               	subwf	1,f
 18497                           
 18498                           ;Dimmer_B1.c: 280: } else
 18499  0417  0008               	return
 18500  0418                     i1l6816:	
 18501                           
 18502                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 18503  0418  0A76               	incf	_DimmerLightsIntr,w
 18504  0419  0086               	movwf	6
 18505  041A  3001               	movlw	1	; select bank2/3
 18506  041B  0087               	movwf	7
 18507  041C  1381               	bcf	1,7
 18508                           
 18509                           ;Dimmer_B1.c: 282: }
 18510                           ;Dimmer_B1.c: 283: }
 18511                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 18512  041D  0008               	return
 18513  041E                     i1l6818:	
 18514  041E  0876               	movf	_DimmerLightsIntr,w
 18515  041F  3E02               	addlw	2
 18516  0420  0086               	movwf	6
 18517  0421  3001               	movlw	1	; select bank2/3
 18518  0422  0087               	movwf	7
 18519  0423  1C01               	btfss	1,0
 18520  0424  0008               	return
 18521                           
 18522                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18523  0425  0876               	movf	_DimmerLightsIntr,w
 18524  0426  3E04               	addlw	4
 18525  0427  0086               	movwf	6
 18526  0428  3001               	movlw	1	; select bank2/3
 18527  0429  0087               	movwf	7
 18528  042A  0876               	movf	_DimmerLightsIntr,w
 18529  042B  3E06               	addlw	6
 18530  042C  0084               	movwf	4
 18531  042D  3001               	movlw	1	; select bank2/3
 18532  042E  0085               	movwf	5
 18533  042F  0800               	movf	0,w
 18534  0430  0201               	subwf	1,w
 18535  0431  1803               	skipnc
 18536  0432  2C3D               	goto	i1l6824
 18537                           
 18538                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 18539  0433  3001               	movlw	1
 18540  0434  00F2               	movwf	??_setDimmerLights_IntrControl
 18541  0435  0876               	movf	_DimmerLightsIntr,w
 18542  0436  3E04               	addlw	4
 18543  0437  0086               	movwf	6
 18544  0438  3001               	movlw	1	; select bank2/3
 18545  0439  0087               	movwf	7
 18546  043A  0872               	movf	??_setDimmerLights_IntrControl,w
 18547  043B  0781               	addwf	1,f
 18548                           
 18549                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18550  043C  0008               	return
 18551  043D                     i1l6824:	
 18552  043D  0876               	movf	_DimmerLightsIntr,w
 18553  043E  3E06               	addlw	6
 18554  043F  0086               	movwf	6
 18555  0440  3001               	movlw	1	; select bank2/3
 18556  0441  0087               	movwf	7
 18557  0442  0876               	movf	_DimmerLightsIntr,w
 18558  0443  3E04               	addlw	4
 18559  0444  0084               	movwf	4
 18560  0445  3001               	movlw	1	; select bank2/3
 18561  0446  0085               	movwf	5
 18562  0447  0800               	movf	0,w
 18563  0448  0201               	subwf	1,w
 18564  0449  1803               	skipnc
 18565  044A  2C53               	goto	i1l6828
 18566                           
 18567                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 18568  044B  0876               	movf	_DimmerLightsIntr,w
 18569  044C  3E04               	addlw	4
 18570  044D  0086               	movwf	6
 18571  044E  3001               	movlw	1	; select bank2/3
 18572  044F  0087               	movwf	7
 18573  0450  3001               	movlw	1
 18574  0451  0281               	subwf	1,f
 18575                           
 18576                           ;Dimmer_B1.c: 289: } else {
 18577  0452  0008               	return
 18578  0453                     i1l6828:	
 18579                           
 18580                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 18581  0453  0876               	movf	_DimmerLightsIntr,w
 18582  0454  3E02               	addlw	2
 18583  0455  0086               	movwf	6
 18584  0456  3001               	movlw	1	; select bank2/3
 18585  0457  0087               	movwf	7
 18586  0458  1001               	bcf	1,0
 18587  0459  0008               	return
 18588  045A                     __end_of_setDimmerLights_IntrControl:	
 18589                           
 18590                           	psect	text131
 18591  1CA2                     __ptext131:	
 18592 ;; *************** function _DimmerIntrPointSelect *****************
 18593 ;; Defined at:
 18594 ;;		line 74 in file "../src/Dimmer_B1.c"
 18595 ;; Parameters:    Size  Location     Type
 18596 ;;  lights          1    wreg     unsigned char 
 18597 ;; Auto vars:     Size  Location     Type
 18598 ;;  lights          1    1[COMMON] unsigned char 
 18599 ;; Return value:  Size  Location     Type
 18600 ;;		None               void
 18601 ;; Registers used:
 18602 ;;		wreg
 18603 ;; Tracked objects:
 18604 ;;		On entry : 0/0
 18605 ;;		On exit  : 0/0
 18606 ;;		Unchanged: 0/0
 18607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18609 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18610 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18611 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18612 ;;Total ram usage:        2 bytes
 18613 ;; Hardware stack levels used:    1
 18614 ;; This function calls:
 18615 ;;		Nothing
 18616 ;; This function is called by:
 18617 ;;		_setDimmerLights_IntrControl
 18618 ;; This function uses a non-reentrant model
 18619 ;;
 18620                           
 18621                           
 18622                           ;psect for function _DimmerIntrPointSelect
 18623  1CA2                     _DimmerIntrPointSelect:	
 18624                           
 18625                           ;incstack = 0
 18626                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18627                           ;DimmerIntrPointSelect@lights stored from wreg
 18628  1CA2  00F1               	movwf	DimmerIntrPointSelect@lights
 18629                           
 18630                           ;Dimmer_B1.c: 76: if (lights == 1) {
 18631  1CA3  0871               	movf	DimmerIntrPointSelect@lights,w
 18632  1CA4  3A01               	xorlw	1
 18633  1CA5  1D03               	skipz
 18634  1CA6  0008               	return
 18635                           
 18636                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 18637  1CA7  3053               	movlw	_DimmerLights1& (0+255)
 18638  1CA8  00F0               	movwf	??_DimmerIntrPointSelect
 18639  1CA9  0870               	movf	??_DimmerIntrPointSelect,w
 18640  1CAA  00F6               	movwf	_DimmerLightsIntr
 18641  1CAB  0008               	return
 18642  1CAC                     __end_of_DimmerIntrPointSelect:	
 18643                           
 18644                           	psect	text132
 18645  1D7D                     __ptext132:	
 18646 ;; *************** function _IOC_ISR *****************
 18647 ;; Defined at:
 18648 ;;		line 400 in file "../src/MCU_B1.c"
 18649 ;; Parameters:    Size  Location     Type
 18650 ;;		None
 18651 ;; Auto vars:     Size  Location     Type
 18652 ;;		None
 18653 ;; Return value:  Size  Location     Type
 18654 ;;		None               void
 18655 ;; Registers used:
 18656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18657 ;; Tracked objects:
 18658 ;;		On entry : 0/0
 18659 ;;		On exit  : 0/0
 18660 ;;		Unchanged: 0/0
 18661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18666 ;;Total ram usage:        0 bytes
 18667 ;; Hardware stack levels used:    1
 18668 ;; Hardware stack levels required when called:    3
 18669 ;; This function calls:
 18670 ;;		_setDimmerReClock
 18671 ;; This function is called by:
 18672 ;;		_ISR
 18673 ;; This function uses a non-reentrant model
 18674 ;;
 18675                           
 18676                           
 18677                           ;psect for function _IOC_ISR
 18678  1D7D                     _IOC_ISR:	
 18679                           
 18680                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18681                           
 18682                           ;incstack = 0
 18683                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18684  1D7D  1D8B               	btfss	11,3	;volatile
 18685  1D7E  0008               	return
 18686  1D7F  1C0B               	btfss	11,0	;volatile
 18687  1D80  0008               	return
 18688  1D81  0027               	movlb	7	; select bank7
 18689  1D82  1D16               	btfss	22,2	;volatile
 18690  1D83  0008               	return
 18691                           
 18692                           ;MCU_B1.c: 402: IOCBF2 = 0;
 18693  1D84  1116               	bcf	22,2	;volatile
 18694                           
 18695                           ;MCU_B1.c: 403: IOCIF = 0;
 18696  1D85  100B               	bcf	11,0	;volatile
 18697                           
 18698                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 18699  1D86  0021               	movlb	1	; select bank1
 18700  1D87  1C20               	btfss	_myMain^(0+128),0
 18701  1D88  0008               	return
 18702                           
 18703                           ;MCU_B1.c: 407: setDimmerReClock();
 18704  1D89  319C  2426         	fcall	_setDimmerReClock
 18705  1D8B  0008               	return
 18706  1D8C                     __end_of_IOC_ISR:	
 18707                           
 18708                           	psect	text133
 18709  1C26                     __ptext133:	
 18710 ;; *************** function _setDimmerReClock *****************
 18711 ;; Defined at:
 18712 ;;		line 243 in file "../src/MCU_B1.c"
 18713 ;; Parameters:    Size  Location     Type
 18714 ;;		None
 18715 ;; Auto vars:     Size  Location     Type
 18716 ;;		None
 18717 ;; Return value:  Size  Location     Type
 18718 ;;		None               void
 18719 ;; Registers used:
 18720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18721 ;; Tracked objects:
 18722 ;;		On entry : 0/0
 18723 ;;		On exit  : 0/0
 18724 ;;		Unchanged: 0/0
 18725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18730 ;;Total ram usage:        0 bytes
 18731 ;; Hardware stack levels used:    1
 18732 ;; Hardware stack levels required when called:    2
 18733 ;; This function calls:
 18734 ;;		_setDimmerLights_IntrIOC_GO
 18735 ;; This function is called by:
 18736 ;;		_IOC_ISR
 18737 ;; This function uses a non-reentrant model
 18738 ;;
 18739                           
 18740                           
 18741                           ;psect for function _setDimmerReClock
 18742  1C26                     _setDimmerReClock:	
 18743                           
 18744                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 18745                           
 18746                           ;incstack = 0
 18747                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18748  1C26  3001               	movlw	1
 18749  1C27  3192  22A1         	fcall	_setDimmerLights_IntrIOC_GO
 18750  1C29  0008               	return
 18751  1C2A                     __end_of_setDimmerReClock:	
 18752                           
 18753                           	psect	text134
 18754  12A1                     __ptext134:	
 18755 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18756 ;; Defined at:
 18757 ;;		line 28 in file "../src/Dimmer_B1.c"
 18758 ;; Parameters:    Size  Location     Type
 18759 ;;  lights          1    wreg     unsigned char 
 18760 ;; Auto vars:     Size  Location     Type
 18761 ;;  lights          1    2[COMMON] unsigned char 
 18762 ;; Return value:  Size  Location     Type
 18763 ;;		None               void
 18764 ;; Registers used:
 18765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18766 ;; Tracked objects:
 18767 ;;		On entry : 0/0
 18768 ;;		On exit  : 0/0
 18769 ;;		Unchanged: 0/0
 18770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18772 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18774 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18775 ;;Total ram usage:        1 bytes
 18776 ;; Hardware stack levels used:    1
 18777 ;; Hardware stack levels required when called:    1
 18778 ;; This function calls:
 18779 ;;		_DimmerIntrIOCPointSelect
 18780 ;; This function is called by:
 18781 ;;		_setDimmerReClock
 18782 ;; This function uses a non-reentrant model
 18783 ;;
 18784                           
 18785                           
 18786                           ;psect for function _setDimmerLights_IntrIOC_GO
 18787  12A1                     _setDimmerLights_IntrIOC_GO:	
 18788                           
 18789                           ;incstack = 0
 18790                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18791                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18792  12A1  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18793                           
 18794                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18795  12A2  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18796  12A3  319C  24C0  3192   	fcall	_DimmerIntrIOCPointSelect
 18797                           
 18798                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 18799  12A6  0021               	movlb	1	; select bank1
 18800  12A7  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18801  12A8  3E02               	addlw	2
 18802  12A9  0086               	movwf	6
 18803  12AA  3001               	movlw	1	; select bank2/3
 18804  12AB  0087               	movwf	7
 18805  12AC  1901               	btfsc	1,2
 18806  12AD  0008               	return
 18807  12AE  0020               	movlb	0	; select bank0
 18808  12AF  1D0D               	btfss	13,2	;volatile
 18809  12B0  0008               	return
 18810                           
 18811                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 18812  12B1  0021               	movlb	1	; select bank1
 18813  12B2  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18814  12B3  3E02               	addlw	2
 18815  12B4  0086               	movwf	6
 18816  12B5  3001               	movlw	1	; select bank2/3
 18817  12B6  0087               	movwf	7
 18818  12B7  1501               	bsf	1,2
 18819                           
 18820                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 18821  12B8  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18822  12B9  0086               	movwf	6
 18823  12BA  3001               	movlw	1	; select bank2/3
 18824  12BB  0087               	movwf	7
 18825  12BC  1401               	bsf	1,0
 18826                           
 18827                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 18828  12BD  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18829  12BE  0086               	movwf	6
 18830  12BF  3001               	movlw	1	; select bank2/3
 18831  12C0  0087               	movwf	7
 18832  12C1  1481               	bsf	1,1
 18833                           
 18834                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 18835  12C2  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 18836                           
 18837                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18838  12C3  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18839  12C4  0086               	movwf	6
 18840  12C5  3001               	movlw	1	; select bank2/3
 18841  12C6  0087               	movwf	7
 18842  12C7  1D01               	btfss	1,2
 18843  12C8  0008               	return
 18844                           
 18845                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 18846  12C9  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18847  12CA  0086               	movwf	6
 18848  12CB  3001               	movlw	1	; select bank2/3
 18849  12CC  0087               	movwf	7
 18850  12CD  1401               	bsf	1,0
 18851                           
 18852                           ;Dimmer_B1.c: 55: if (lights == 1) {
 18853  12CE  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18854  12CF  3A01               	xorlw	1
 18855  12D0  1D03               	skipz
 18856  12D1  0008               	return
 18857                           
 18858                           ;Dimmer_B1.c: 56: RB1 = 1;
 18859  12D2  0020               	movlb	0	; select bank0
 18860  12D3  148D               	bsf	13,1	;volatile
 18861  12D4  0008               	return
 18862  12D5                     __end_of_setDimmerLights_IntrIOC_GO:	
 18863                           
 18864                           	psect	text135
 18865  1CC0                     __ptext135:	
 18866 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18867 ;; Defined at:
 18868 ;;		line 8 in file "../src/Dimmer_B1.c"
 18869 ;; Parameters:    Size  Location     Type
 18870 ;;  lights          1    wreg     unsigned char 
 18871 ;; Auto vars:     Size  Location     Type
 18872 ;;  lights          1    1[COMMON] unsigned char 
 18873 ;; Return value:  Size  Location     Type
 18874 ;;		None               void
 18875 ;; Registers used:
 18876 ;;		wreg
 18877 ;; Tracked objects:
 18878 ;;		On entry : 0/0
 18879 ;;		On exit  : 0/0
 18880 ;;		Unchanged: 0/0
 18881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18883 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18885 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18886 ;;Total ram usage:        2 bytes
 18887 ;; Hardware stack levels used:    1
 18888 ;; This function calls:
 18889 ;;		Nothing
 18890 ;; This function is called by:
 18891 ;;		_setDimmerLights_IntrIOC_GO
 18892 ;; This function uses a non-reentrant model
 18893 ;;
 18894                           
 18895                           
 18896                           ;psect for function _DimmerIntrIOCPointSelect
 18897  1CC0                     _DimmerIntrIOCPointSelect:	
 18898                           
 18899                           ;incstack = 0
 18900                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18901                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18902  1CC0  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18903                           
 18904                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18905  1CC1  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18906  1CC2  3A01               	xorlw	1
 18907  1CC3  1D03               	skipz
 18908  1CC4  0008               	return
 18909                           
 18910                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18911  1CC5  3053               	movlw	_DimmerLights1& (0+255)
 18912  1CC6  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18913  1CC7  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18914  1CC8  0021               	movlb	1	; select bank1
 18915  1CC9  00CD               	movwf	_DimmerLightsIntrIOC^(0+128)
 18916  1CCA  0008               	return
 18917  1CCB                     __end_of_DimmerIntrIOCPointSelect:	
 18918  007E                     btemp	set	126	;btemp
 18919  007E                     pic14e$flags	set	126
 18920  007E                     wtemp	set	126
 18921  007E                     wtemp0	set	126
 18922  0080                     wtemp1	set	128
 18923  0082                     wtemp2	set	130
 18924  0084                     wtemp3	set	132
 18925  0086                     wtemp4	set	134
 18926  0088                     wtemp5	set	136
 18927  007F                     wtemp6	set	127
 18928  007E                     ttemp	set	126
 18929  007E                     ttemp0	set	126
 18930  0081                     ttemp1	set	129
 18931  0084                     ttemp2	set	132
 18932  0087                     ttemp3	set	135
 18933  007F                     ttemp4	set	127
 18934  007E                     ltemp	set	126
 18935  007E                     ltemp0	set	126
 18936  0082                     ltemp1	set	130
 18937  0086                     ltemp2	set	134
 18938  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         230
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      7      80
    BANK2            80      3      80
    BANK3            80      4      80
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_getDimmerLights_Allow_Condition
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Exception_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  127316
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    7770
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    7770
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     201
                                              4 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     880
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     880
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45365
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   45365
                                              0 BANK2      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44206
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40065
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13473
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1762
                                             13 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18758
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16329
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14095
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1788
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      43
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     201
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     911
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     911
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1209
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    6962
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35279
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   34970
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17700
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   16945
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     818
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (5) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5786
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5786
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4027
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3612
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3392
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0      66
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
           _getLoad_OK
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      3      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Dec 20 09:54:09 2014

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l84 17D8  
                                      l94 1513                                        l86 17EC  
                                      l95 150F                                        l96 14FD  
                                      l98 150D                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10CC                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1CE1  
                  __end_of_setDelayOff_GO 16FB                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1606  
                    _setDimmerLights_Line 1D6F                              ___ftadd@sign 004B  
                                     l231 0AA7                                       l304 1F0D  
                                     l305 1F0F                      _setDimmerLights_SwOn 141B  
                                     l348 113F                                       l730 1F64  
                                     _GIE 005F                                       _CRC 00CB  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000A                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CE  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01E3                 setDimmerLights_Adj@status 006B  
                __end_of_CC2500_WriteByte 1F1A                     _Buzzer_Initialization 1C14  
                         __end_of_ADC_Set 1C68                           ?_DelayTimejudge 0070  
                                     wreg 0009      setDimmerLights_Initialization@lights 0023  
            getDimmerLights_Status@status 0023                           _setDimmerLights 1656  
                       ??_getSw_KeyStatus 0020                     _setDimmerLights_AdjRF 10CC  
                   _setDimmerLights_AdjOn 1375                                      ?_ISR 0070  
         setDimmerLights_ErrorClose@count 00E9                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1D8C                                Load_Main@i 002C  
                            ___ftdiv@sign 003D                                      l1209 1207  
                                    l2113 0A09                                      l1218 1560  
                                    l2050 0C72                                      l2042 0C47  
                                    l1421 1284                                      l2125 147E  
                                    l1422 129F                                      l2038 0C81  
                                    l2048 0C5D                                      l1426 129B  
                ?_DimmerLightsPointSelect 0070                                      l1195 1339  
                                    l2077 1E4C                                      l2413 0357  
                                    l2415 0230                                      l1456 0707  
                                    l1720 0FFC                                      l2099 1305  
                                    l1395 083A                                      l1564 01E7  
                         __end_of_IOC_Set 1D55                                      l1725 0FF6  
                                    l1574 01C3                                      l1566 0077  
                                    l1575 01C1                                      l1567 0073  
                                    l1568 006E                                      l2393 1EC5  
                                    l2750 0A3D                                      l2756 0A54  
                                    l2589 1FAC                                      l2779 04F9  
                                    l8014 1092                                      l8030 0489  
                                    l8102 0ED4                                      l8026 0482  
                                    l8300 1737                                      l8060 04D8  
                                    l8036 0498                                      l8124 0F2E  
                                    l8116 0F15                                      l9004 11EF  
                   _setDimmerLights_SwOff 1568                                      l8054 04C5  
                                    l8230 0E03                                      l8222 0DE9  
                                    l8214 0DCE                                      l9102 0CEF  
                                    l8304 1740                                      l8072 050B  
                                    l8056 04CF                                      l8048 04B2  
                                    l8224 0DF2                                      l8216 0DDC  
                                    l8160 0778                                      l8144 0735  
                                    l8250 11B2                                      l8066 04EB  
                                    l8058 04D4                                      l8226 0DF5  
                                    l8138 071F                                      l8308 1748  
                                    l8404 159D                                      l8076 051D  
                                    l8068 04F5                                      l9300 11DC  
                                    l8172 0794                                      l8156 0770  
                                    l9108 0CFA                                      l9132 1DF9  
                                    l9150 07E1                                      l8086 0538  
                                    l9160 07F1                                      l9152 07E4  
                                    l8352 16DA                                      l8096 0EBE  
                                    l8424 0886                                      l9400 1521  
                                    l9048 1DE8                                      l8168 078C  
                                    l9072 0CA9                                      l9162 07F4  
                                    l8282 1711                                      l8610 146D  
                                    l9082 0CBA                                      l9156 07EA  
                                    l8292 1719                                      l8276 1706  
                                    l8356 16E0                                      l8196 0D9E  
                                    l9260 162F                                      l8622 1F2C  
                                    l9166 07FA                                      l8294 1725  
                                    l8358 16E6                                      l8702 13F1  
                                    l9262 1635                                      l9406 1536  
                                    l8534 1F96                                      l8390 1446  
                                    l9094 0CD0                                      l8616 1F23  
                                    l8536 1F9C                                      l8632 111F  
                                    l8800 0AB6                                      l8392 144C  
                                    l9520 0C2E                                      l8618 1F26  
                                    l8554 0986                                      l9282 1CE9  
                                    l8634 1122                                      l8802 0ABA  
                                    l9610 025E                                      l9450 0F6C  
                                    l8556 0957                                      l8716 1410  
                                    l8708 13FA                                      l9268 1650  
                                    l8820 0B9D                                      l8804 0ABD  
                                    l9620 0290                     _myMain_Initialization 1D8C  
                                    l8558 098C                                      l8638 1128  
                                    l8822 0BA0                                      l8486 121B  
                                    l9382 1FEB                                      l9704 13D2  
                                    l9296 11D7                                      l8808 0AC3  
                                    l8592 15EA                                      l8752 09D1  
                                    l8760 09EE                                      l9552 0C63  
                                    l9536 0C4D                                      l9480 0FCB  
                                    l9384 1FEE                                      l9722 14E7  
                                    l8674 127F                                      l8658 1EE2  
                                    l7970 0A24                                      l9298 11BA  
                                    l8842 0BC2                                      l8826 0BA6  
                                    l8770 0A73                                      l8754 09E6  
                                    l9634 02CE                                      l9482 0FCD  
                                    l8684 1296                                      l8676 1288  
                                    l7980 0A4A                                      l7972 0A29  
                                    l7964 0A13                                      l9708 13DB  
                                    l8860 0BED                                      l8836 0BB9  
                                    l8828 0BA9                                      l8772 0A76  
                                    l8596 15F9                                      l8756 09EA  
                                    l8748 09AC                                      l9580 1ED0  
                                    l9644 0300                                      l9492 0FE2  
                                    l9388 1FF3                                      l8926 1686  
                                    l8838 0BBC                                      l8790 0A8E  
                                    l9670 0353                                      l9494 0FE3  
                                    l8880 1150                                      l7992 1E02  
                                    l7968 0A1A                                      l8936 169C  
                                    l8776 0A7C                                      l9576 1ECA  
                                    l9912 0D7F                                      _CFGS 0CAE  
                                    l8882 115B                                      l8890 10B5  
                                    l7978 0A42                                      l8946 1767  
                                    l8858 0BD4                                      l8794 0AAD  
                                    l9594 021B                                      l7996 1E08  
                                    l9764 1F66                                      l9676 1FA6  
                                    l8796 0AB0                                      l8894 10BB  
                                    l9926 14C1                                      l8888 10B2  
                                    l9696 13B4                                      l9944 081A  
                            __CFG_WDTE$ON 0000                                      l9794 05C2  
                                    l9698 13C0                                      l9972 0055  
                                    l9892 0D4A                                      l9884 0D25  
                                    l9990 0076                                      l9896 0D52  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u8125 0A5B  
                                    u8055 0A1F                                      u8075 0A38  
                                    u9045 1EA3                                      u8325 04D9  
                                    u9135 0962                                      u8095 0A45  
                                    u8265 04B3                                      u8425 0EE6  
                                    u8505 0741                                      u8355 04EC  
                                    u8435 0EF6                                      u8515 0751  
                                    u8445 0F16                                      u8295 04C6  
                                    u8455 0F25                                      u8535 0779  
                                    u8465 0F2F                                      u8625 0DA5  
                                    u8545 077F                                      u8805 1726  
                                    u8815 1730                                      u8735 119E  
                                    u8655 0DCF                                      u8575 0795  
                                    u8825 1738                                      u8585 079B  
                                    u8685 0DEA                                      u8785 171C  
                                    u9595 1145                                      _LWLO 0CAD  
                                    u8990 0846                                      u8995 0844  
                                    _RSSI 00CF                                      _WREN 0CAA  
                                    _Buz1 00AE                                      _Load 0125  
                                    _Temp 00D7                                      _main 0895  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 094D  
                         __end_of_RF_Main 1C20                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1CF7  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                        _setDimmerReClock 1C26                                      start 0013  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 1492  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2172 0023  
                       ?_getDimmer_LoadGO 0070            getAll_DimmerLights_AdjSw@count 0023  
                                   ??_ISR 0074                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 1EE9  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1ED3  
                  _getDimmerLights_Status 1DBB                        ??_getDimmer_LoadGO 0020  
          __size_of_DimmerIntrPointSelect 000A                          __end_of_LED_Main 1C46  
        setDimmerLights_ErrorClose@lights 00EA             __end_of_DimmerIntrPointSelect 1CAC  
                   ?_getDimmerLights_Line 0070                                     l10100 01D6  
                                   l10012 00CC                                     l10006 009A  
                                   l10044 0162                                     l10052 018D  
                                   l10150 0699                                     l10134 0656  
                                   l10062 01A3                                     l10038 0155  
                                   l10128 0647                                     l10048 0181  
                                   l10170 06EA                                     l10146 0691  
                                   l10138 0665                                     l10242 08B9  
                                   l10164 06D8                                     l10148 0668  
                                   l10166 06AF                                     l10246 08C4  
                                   l10168 06E0                                     l10176 06FD  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 01EC                           __end_of___awdiv 174F  
                         __end_of___ftadd 0550                           __end_of___ftdiv 0F50  
                         __end_of___ftneg 1C90                           __end_of___ftmul 07BC  
                                   u11135 0D38                                     u10185 11C3  
                                   u11075 1330                                     u11235 14B8  
                         ___awdiv@divisor 0020                                     u10365 0FB3  
                                   u11245 14C7                                     _T1CON 0018  
                                   u11425 0098                                     u10385 0FD3  
                                   u11185 0D6C                                     u11435 00CA  
                         __end_of___fttol 0E0C                                     u10805 1FAD  
                                   u11525 0194                                     u11445 010E  
                                   u10485 0C41                                     u11285 0832  
                                   u10815 1FB2                                     u11650 0697  
                                   u10915 14DD                                     u10845 13B7  
                                   u11655 0673                                     u11680 06DE  
                                   u10865 13C1                                     u10875 13CB  
                                   u11685 06BA                                     u10885 13D3  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 13E2  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 1EA9                             __CFG_WRT$HALF 0000  
      __end_of_setDimmerLights_IntrIOC_GO 12D5                _setDimmerLights_IntrIOC_GO 12A1  
                        __end_of_TMR1_ISR 1115                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A        __end_of_setDimmerLights_ErrorClose 09AB  
              _setDimmerLights_ErrorClose 094D                          __end_of_TMR1_Set 1D61  
                                   _getAD 1FE0                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0071                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1E47               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03C0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1D49  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012              __end_of_getMain_LightsStatus 1CC0  
           __end_of_setLED_Initialization 1E23                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 083C  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0068  
                  ??_Flash_Memory_Erasing 0020                           _getPercentValue 0B34  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0015  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0010                         ??_setPercentValue 005C  
                            __end_of_main 08F0                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1C4A                        ??_setMemory_Modify 0020  
                          _Exception_Main 062C                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 16A8  
                    _setSw_Initialization 1DAB                                    ??_main 006F  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
                 _setControl_Lights_Table 09AB                            _setMemory_Data 1D25  
                  ?_Buzzer_Initialization 0070         __size_of_DimmerIntrIOCPointSelect 000B  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 03C0  
               ?_DimmerIntrIOCPointSelect 0070                                 ??_IOC_ISR 0073  
                               ??_IOC_Set 0020           __end_of_DimmerLightsPointSelect 1CE1  
                  ?_setDimmerLights_AdjRF 0070                    ?_setDimmerLights_AdjOn 0070  
                __size_of_setRFSW_Control 004F                   ??_Switch_Initialization 0025  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 08F0                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 006F                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1C7F                                 ??_WDT_Set 0020  
                        __end_of___awtoft 10A9                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0A6B                  _getMain_All_Error_Status 126E  
                                  _IOCBF2 1CB2                                    i1l6810 0401  
                                  i1l6812 0407                                    i1l6824 043D  
                                  i1l6816 0418                                    i1l6818 041E  
                                  i1l6828 0453                                    i1l6780 038A  
                                  i1l6792 03BA                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01AC  
                                  u727_25 110F                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1EE9  
                                  _WDTCON 0097                      Exception_Main@i_3438 00ED  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1EBE                                    _Dimmer 00C6  
                                  _DlySw1 0164                __end_of_Mcu_Initialization 1E35  
                     __end_of_Buzzer_Main 151A                                    _Memory 01BE  
                                  _Timer1 0120                                    ___bmul 1DFF  
                  __end_of_Exception_Main 0708                      Load_Main@Load_Status 002B  
                    Exception_Main@lights 00EF                                    ___wmul 1FA3  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000B                                 ??___ftdiv 0034  
                               ??___ftneg 0041                     setDimmerLights@lights 006D  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024               setDimmerLights_AdjRF@lights 0063  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D5                                    _s_data 00D6  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 13E2  
                                  _myMain 00A0                    __end_of_setMemory_Data 1D31  
                        _DimmerLightsIntr 0076                     ?_setSw_Initialization 0070  
                   setDimmerLights@status 006B                          ___awdiv@quotient 0027  
                                  _setBuz 17A7                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1C1A          ??_setDimmerLights_Initialization 0022  
         ?_setDimmerLights_Initialization 0070                     ___ftmul@f3_as_product 0039  
     __end_of_setDimmerLights_IntrControl 045A               _setDimmerLights_IntrControl 0360  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1E80               getMain_Lights_Count@status1 0021  
                   __end_of_SwPointSelect 1D0D              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 000C  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1EBE  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0B99  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 003D  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5048 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1067                             __end_of_getAD 2000  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1C3E  
                         _getSw_KeyStatus 1DEE                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1D3D  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01ED  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1CB6  
              __end_of_set_TimeoutCleared 1C4F                  __end_of_setDimmerReClock 1C2A  
                      __size_of_getRxData 007F                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1D61  
                          _DimmerLights11 00CC                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1C20                        ??_CC2500_WriteByte 0020  
                              __pbssBANK0 006F                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 14D0  
                       ??_setRFSW_Control 006B                         __end_of_Temp_Main 1C26  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1C36                                __pnvCOMMON 0079  
                           ??_Switch_Main 006E                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 006F                         LedPointSelect@led 0021  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 0895                            _getDelayOff_GO 1D9B  
                     _CC2500_WriteCommand 1F1A                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 000B  
                        ??_setDelayOff_GO 0068             ??_DimmerLights_Initialization 0024  
                                 ?___wmul 0020                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0D04  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1C6F  
                      __size_of_setTxData 009B                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1C61                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 1492                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1D02  
                      _setRFSW_AdjControl 1454                    __end_of_setProductData 1D6F  
                                 _IOC_ISR 1D7D                                   _IOC_Set 1D49  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 1309  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1F34  
              getAll_DimmerLights_AdjSw@i 0024               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 006F                    __size_of_CC2500_TxData 0064  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1C1D  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1CEC           __end_of_setControl_Lights_Table 0A0A  
                         setRF_Main@error 016F                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 0ACF  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1D19                           __size_of_IO_Set 0018  
                       __end_of_getBuz_GO 1DDD                       ??_Flash_Memory_Main 0026  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1DAB  
          __end_of_getDimmerLights_Status 1DCC                         __end_of_getRxData 0D04  
                 __end_of_getSw_KeyStatus 1DFF                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1CCB                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 16FB                                   ___ftadd 045A  
                                 ___ftdiv 0EA7                                   ___ftneg 1C87  
                         __size_of___wmul 001E                                   ___ftmul 0708  
                                 ___fttol 0D85                       __end_of_Switch_Main 1C6F  
                                 ___lwdiv 13AB                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1DDD                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 0800                                   __ptext2 1D8C  
                                 __ptext3 1492                                   __ptext4 0D04  
                                 __ptext5 1FE0                                   __ptext6 1E35  
                                 __ptext7 0002                                   __ptext8 1C23  
                                 __ptext9 0F50                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 0024                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1CA2                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 133F                 __end_of_Flash_Memory_Read 1F4E  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0C08  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1C3A  
                       _DimmerLights_Main 1F4E            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1C55                __end_of_CC2500_ClearRXFIFO 1C2E  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1C32  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 0079  
                          _LedPointSelect 1D19                       _DelayOffPointSelect 1CCB  
                                 clrloop0 1C5C            __size_of_Switch_Initialization 0009  
           __end_of_Switch_Initialization 1CA2                      end_of_initialization 003D  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1160  
                           _DelayTime_1us 113A                         __end_of_setTxData 0EA7  
              __end_of_Flash_Memory_Write 120E                                   init_ram 1C55  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1C56  
                              _setSw_Main 01ED                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 1115  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1E11  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0B99                             _CC2500_TxData 0A6B  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 151A  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1C90                       ??_CC2500_ReadStatus 0022  
                  ??_getMain_LightsStatus 0020                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F6A                        _Mcu_Initialization 1E23  
                __size_of_CC2500_PowerRST 0044                      __end_of_my_MainTimer 083C  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1D25                   __end_of_setPercentValue 0B34  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 118A  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 174F                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 113A                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006B  
                          __end_of_IO_Set 1F01                      _setRF_Initialization 1CF7  
                      _setMemory_LoopSave 1E6D                               _Switch_Main 1C68  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1CD6                   __end_of_getRF_KeyStatus 1DEE  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1EA9                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1E11                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1CC0                            __end_of___wmul 1FC1  
                       getSw_KeyStatus@sw 0070                         __size_of_TMR1_ISR 0025  
           __size_of_getDimmerLights_Line 000B                    ?_DimmerIntrPointSelect 0070  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0050  
                          __end_of_setLED 141B             __size_of_setDimmerLights_Line 000E  
           __size_of_setDimmerLights_SwOn 0039                            __end_of_setBuz 1800  
                    _CC2500_FrequencyCabr 1D0D                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 15B7  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 120E  
                         ?_LedPointSelect 0070                                 _Load_Main 0041  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1C77  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                      ??_setDimmerReClock 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1FE0           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 1000                            ??_RF_RxDisable 0024  
                     __size_of_getLoad_AD 0081                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1C4A  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0169                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1C23                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D0  
                   setProductData@address 0065                       Exception_Main@count 00E9  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00EA  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                                ??___wmul 0024                    __size_of_SwPointSelect 000B  
                               _Tx_Length 00D3                               __pdataBANK4 0220  
                                ??_setLED 0023                 _getAll_DimmerLights_AdjSw 11B4  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 006F                         ??_CC2500_ReadByte 0020  
        __end_of_getMain_All_Error_Status 12A1                          _CC2500_SIDLEMode 1C32  
              __size_of_DimmerLights_Main 001C                 __end_of_setRF_DimmerValue 123D  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 0075                                  ?_IOC_Set 0070  
                               ___latbits 0003                          _setMemory_Modify 1E5A  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E9                             __pcstackBANK2 016D  
                           __pcstackBANK3 01EC                      ??_set_TimeoutCleared 0020  
                        ?_setPercentValue 0070                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                  __size_of_setDimmerLights 0052  
                           DlyOff_Main@sw 006E                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 005D  
              __size_of_CC2500_ReadStatus 0025                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0153  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1F86  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00ED               __size_of_LED_Initialization 0004  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 00EB  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 007D  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002A                    _setTemp_Initialization 1066  
                               _getBuz_GO 1DCC       __end_of_Flash_Memory_Initialization 062C  
             _Flash_Memory_Initialization 0550                                  ?___awdiv 0020  
                               __ptext100 16A8                                 __ptext101 1D61  
                               __ptext110 1C4F                                 __ptext102 118A  
                               __ptext111 1CCB                                 __ptext103 1DFF  
                               __ptext120 1C2E                                 __ptext112 1EA9  
                               __ptext104 1D9B                                 __ptext121 1C2A  
                               __ptext113 1C32                                 __ptext105 1DBB  
                               __ptext130 0360                                 __ptext122 1F1A  
                               __ptext114 07BC                                 __ptext106 1CD6  
                               __ptext131 1CA2                                 __ptext123 1C4A  
                               __ptext115 1160                                 __ptext107 17A7  
                               __ptext132 1D7D                                 __ptext124 1E94  
                               __ptext116 1FC1                                 __ptext108 16FB  
                               __ptext133 1C26                                 __ptext125 1F01  
                               __ptext117 10A9                                 __ptext109 1C36  
                                ?___ftadd 0041                                 __ptext134 12A1  
                               __ptext126 14D0                                 __ptext118 1D0D  
                               __ptext135 1CC0                                 __ptext127 1C14  
                               __ptext119 113A                                 __ptext129 10F0  
                               _getRxData 0C85                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 1606  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1C17  
                        getPercentValue@i 005F                          setPercentValue@i 005F  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1ED3                           DelayTimejudge@i 0026  
                         DelayTimejudge@j 0027                           DelayTimejudge@k 0028  
                     __size_of_setSw_Main 0173              CC2500_ReadStatus@status_addr 0023  
          __size_of_setDimmerLights_AdjRF 0024            __size_of_setDimmerLights_AdjOn 0036  
           __end_of_setDimmerLights_AdjRF 10F0             __end_of_setDimmerLights_AdjOn 13AB  
                  CC2500_WriteByte@loop_a 0021                                 _r_address 00D4  
          __size_of_setDimmerLights_SwOff 004F            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 15B7              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1D9B                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0026                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1D02                       __end_of_setLED_Main 1375  
                        ??_getDelayOff_GO 0022                       _DimmerLightsIntrIOC 00CD  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1C23  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1C42                           SwPointSelect@sw 0021  
                               clear_ram0 1C5B                  CC2500_InitPATable@loop_d 0027  
                            _my_MainTimer 0800                                 _setTxData 0E0C  
     __end_of_DimmerLights_Initialization 1CB6               _DimmerLights_Initialization 1CAC  
                      _CC2500_ClearRXFIFO 1C2A                        _CC2500_ClearTXFIFO 1C2E  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1E94                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 11DF                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 10F0  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1D55  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 0123                      __end_of_RF_RxDisable 1E5A  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1F34  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1E35  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0021  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 016D                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0075  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1D3D  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1309  
                   _DlyOff_Initialization 1C4F                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1C46  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0D85                        __end_of_getLoad_OK 1C77  
                   _Switch_Initialization 1C99         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 14D0                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1F01                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D2  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3424 0021             _getMain_All_Error_Status$3425 0023  
                __end_of_getDimmer_LoadGO 1C7F                       _Load_Initialization 1C17  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F50                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 1087                          ??_LedPointSelect 0020  
                                ___ftpack 0A0A             __size_of_getMain_Lights_Count 000C  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 000A  
                       getTemp_AD@channel 0025                              ??_setRF_Main 006F  
                    CC2500_WriteREG@value 0022                               _setLED_Main 133F  
              __end_of_setRF_DimmerLights 0895            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1C87  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002B  
                         ___lwdiv@counter 0025                                  __ptext10 1C20  
                                __ptext11 1066                                  __ptext20 1EBE  
                                __ptext12 1C68                                  __ptext21 1C1D  
                                __ptext13 01ED                                  __ptext30 120E  
                                __ptext22 0C08                                  __ptext14 1E80  
                                __ptext31 10CC                                  __ptext23 0C85  
                                __ptext15 1375                                  __ptext40 1115  
                                __ptext32 0B34                                  __ptext24 12D5  
                                __ptext16 1DEE                                  __ptext41 1F86  
                                __ptext33 0708                                  __ptext25 1E6D  
                                __ptext17 1D02                                  __ptext50 1C61  
                                __ptext42 1C1A                                  __ptext34 1E5A  
                                __ptext26 09AB                                  __ptext18 1C99  
                                __ptext51 0041                                  __ptext43 1CF7  
                                __ptext35 1DDD                                  __ptext27 15B7  
                                __ptext19 1DAB                                  __ptext60 1C42  
                                __ptext52 1D3D                                  __ptext44 1E23  
                                __ptext36 1DCC                                  __ptext28 141B  
                                __ptext61 133F                                  __ptext53 1C7F  
                                __ptext45 1CEC                                  __ptext37 1E47  
                                __ptext29 1454                                  __ptext70 1C90  
                                __ptext62 1C3E                                  __ptext54 1C77  
                                __ptext46 1D55                                  __ptext38 0A6B  
                                __ptext71 1F34                                  __ptext63 1E11  
                                __ptext55 11B4                                  __ptext47 1EE9  
                                __ptext39 0B99                                  __ptext80 0ACF  
                                __ptext72 062C                                  __ptext64 1309  
                                __ptext56 1FA3                                  __ptext48 1D49  
                                __ptext81 0D85                                  __ptext73 1CE1  
                                __ptext65 151A                                  __ptext57 13AB  
                                __ptext49 1C46                                  __ptext90 1ED3  
                                __ptext82 1C87                                  __ptext74 1F4E  
                                __ptext66 1D31                                  __ptext58 1C17  
                                __ptext91 1C6F                                  __ptext83 0EA7  
                                __ptext75 1606                                  __ptext67 0550  
                                __ptext59 1F6A                                  __ptext92 1CB6  
                                __ptext84 045A                                  __ptext76 174F  
                                __ptext68 1D25                                  __ptext93 126E  
                                __ptext85 1087                                  __ptext77 1656  
                                __ptext69 11DF                                  __ptext94 1CAC  
                                __ptext86 0A0A                                  __ptext78 0E0C  
                                __ptext95 123D                                  __ptext87 13E2  
                                __ptext79 083C                                  __ptext96 1C3A  
                                __ptext88 1D19                                  __ptext97 08F0  
                                __ptext89 1D6F                                  __ptext98 094D  
                                __ptext99 1568                                  __product 0220  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1CEC  
            __end_of_setDimmerLights_Main 1656              __end_of_setDimmerLights_Line 1D7D  
            __end_of_setDimmerLights_SwOn 1454                              ??_setSw_Main 006B  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1E80                  __end_of_CC2500_SIDLEMode 1C36  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 1CD6  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 016E  
               __size_of_setDimmerReClock 0004                   setDimmerLights_AdjOn@sw 0024  
                         _CC2500_ReadByte 1F86                        _CC2500_InitPATable 1FC1  
                __end_of_setMemory_Modify 1E6D                        __end_of_setRF_Main 0C85  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EB                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006E                              getLoad_OK@ok 0020  
                                main@argc 01EC                                  main@argv 01EE  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6016 0022  
                         _CC2500_PowerRST 07BC                  __size_of_getSw_KeyStatus 0011  
             __end_of_Flash_Memory_Modify 1568                         ??_getPercentValue 005C  
                             _setLog_Code 12D5               __end_of_Flash_Memory_Unlock 1C99  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 10A9  
                      __end_of_setSw_Main 0360                     ??_Load_Initialization 0022  
                           _Transceive_OK 03C1                    ?_DlyOff_Initialization 0070  
                          _DelayTimejudge 118A                               pic14e$flags 007E  
            ??_setDimmerLights_IntrIOC_GO 0072                setDimmerLights_Line@lights 0020  
            ??_setDimmerLights_ErrorClose 006B                   setDimmerLights_SwOff@sw 006A  
             __size_of_setMemory_LoopSave 0013         __end_of_getAll_DimmerLights_AdjSw 11DF  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                   ??_CC2500_PowerOnInitial 0029  
  __end_of_setDimmerLights_Initialization 126E   __size_of_setDimmerLights_Initialization 0031  
          _setDimmerLights_Initialization 123D               __end_of_setDimmerLights_Adj 17A7  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                     __size_of_RF_RxDisable 0013  
                       _RF_Initialization 1C1A      __size_of_setDimmerLights_IntrControl 00FA  
                             getLoad_AD@i 0029                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1D31  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D1  
                 __size_of_Exception_Main 00DC           __end_of_DelayOff_Initialization 1C3A  
     __size_of_setDimmerLights_IntrIOC_GO 0034       __size_of_setDimmerLights_ErrorClose 005E  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1C3E  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 16A8          __size_of_setControl_Lights_Table 005F  
                  __end_of_DelayTimejudge 11B4               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 006C                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1160                   __end_of_CC2500_ReadByte 1FA3  
            __end_of_setSw_Initialization 1DBB                           _Timeout_Counter 1E94  
         __size_of_getDimmerLights_Status 0011                      getPercentValue@value 005E  
                            _RF_RxDisable 1E47                __end_of_LED_Initialization 1C42  
          __end_of_setTemp_Initialization 1067                  __size_of_setPercentValue 0065  
                 setMemory_Modify@command 0021                      setPercentValue@value 005E  
               __end_of_RF_Initialization 1C1D                     __end_of_CC2500_RxData 0C08  
                   __end_of_CC2500_TxData 0ACF                     _setLoad_AH_AL_Restore 1F6A  
                 __end_of_CC2500_PowerRST 0800  
