

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Feb 09 11:36:36 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2
    75                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text63,local,class=CODE,merge=1,delta=2
    82                           	psect	text64,local,class=CODE,merge=1,delta=2
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	psect	text66,local,class=CODE,merge=1,delta=2
    85                           	psect	text67,local,class=CODE,merge=1,delta=2
    86                           	psect	text68,local,class=CODE,merge=1,delta=2
    87                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text70,local,class=CODE,merge=1,delta=2
    89                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text72,local,class=CODE,merge=1,delta=2
    91                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text74,local,class=CODE,merge=1,delta=2
    93                           	psect	text75,local,class=CODE,merge=1,delta=2
    94                           	psect	text76,local,class=CODE,merge=1,delta=2
    95                           	psect	text77,local,class=CODE,merge=1,delta=2
    96                           	psect	text78,local,class=CODE,merge=1,delta=2
    97                           	psect	text79,local,class=CODE,merge=1,delta=2
    98                           	psect	text80,local,class=CODE,merge=1,delta=2
    99                           	psect	text81,local,class=CODE,merge=1,delta=2
   100                           	psect	text82,local,class=CODE,merge=1,delta=2
   101                           	psect	text83,local,class=CODE,merge=1,delta=2
   102                           	psect	text84,local,class=CODE,merge=1,delta=2
   103                           	psect	text85,local,class=CODE,merge=1,delta=2
   104                           	psect	text86,local,class=CODE,merge=1,delta=2
   105                           	psect	text87,local,class=CODE,merge=1,delta=2
   106                           	psect	text88,local,class=CODE,merge=1,delta=2
   107                           	psect	text89,local,class=CODE,merge=1,delta=2
   108                           	psect	text90,local,class=CODE,merge=1,delta=2
   109                           	psect	text91,local,class=CODE,merge=1,delta=2
   110                           	psect	text92,local,class=CODE,merge=1,delta=2
   111                           	psect	text93,local,class=CODE,merge=1,delta=2
   112                           	psect	text94,local,class=CODE,merge=1,delta=2
   113                           	psect	text95,local,class=CODE,merge=1,delta=2
   114                           	psect	text96,local,class=CODE,merge=1,delta=2
   115                           	psect	text97,local,class=CODE,merge=1,delta=2
   116                           	psect	text98,local,class=CODE,merge=1,delta=2
   117                           	psect	text99,local,class=CODE,merge=1,delta=2
   118                           	psect	text100,local,class=CODE,merge=1,delta=2
   119                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text104,local,class=CODE,merge=1,delta=2
   123                           	psect	text105,local,class=CODE,merge=1,delta=2
   124                           	psect	text106,local,class=CODE,merge=1,delta=2
   125                           	psect	text107,local,class=CODE,merge=1,delta=2
   126                           	psect	text108,local,class=CODE,merge=1,delta=2
   127                           	psect	text109,local,class=CODE,merge=1,delta=2
   128                           	psect	text110,local,class=CODE,merge=1,delta=2
   129                           	psect	text111,local,class=CODE,merge=1,delta=2
   130                           	psect	text112,local,class=CODE,merge=1,delta=2
   131                           	psect	text113,local,class=CODE,merge=1,delta=2
   132                           	psect	text114,local,class=CODE,merge=1,delta=2
   133                           	psect	text115,local,class=CODE,merge=1,delta=2
   134                           	psect	text116,local,class=CODE,merge=1,delta=2
   135                           	psect	text117,local,class=CODE,merge=1,delta=2
   136                           	psect	text118,local,class=CODE,merge=1,delta=2
   137                           	psect	text119,local,class=CODE,merge=1,delta=2
   138                           	psect	text120,local,class=CODE,merge=1,delta=2
   139                           	psect	text121,local,class=CODE,merge=1,delta=2
   140                           	psect	text122,local,class=CODE,merge=1,delta=2
   141                           	psect	text123,local,class=CODE,merge=1,delta=2
   142                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text125,local,class=CODE,merge=1,delta=2
   144                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text127,local,class=CODE,merge=1,delta=2
   146                           	psect	text128,local,class=CODE,merge=1,delta=2
   147                           	psect	text129,local,class=CODE,merge=1,delta=2
   148                           	psect	text130,local,class=CODE,merge=1,delta=2
   149                           	psect	text131,local,class=CODE,merge=1,delta=2
   150                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text134,local,class=CODE,merge=1,delta=2
   153                           	psect	text135,local,class=CODE,merge=1,delta=2
   154                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	intentry,global,class=CODE,delta=2
   157                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text144,local,class=CODE,merge=1,delta=2
   163                           	dabs	1,0x7E,2
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  011D                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  018E                     	;# 
   216  0191                     	;# 
   217  0191                     	;# 
   218  0192                     	;# 
   219  0193                     	;# 
   220  0193                     	;# 
   221  0194                     	;# 
   222  0195                     	;# 
   223  0196                     	;# 
   224  0197                     	;# 
   225  0199                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  019C                     	;# 
   233  019D                     	;# 
   234  019E                     	;# 
   235  019F                     	;# 
   236  020D                     	;# 
   237  0210                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0216                     	;# 
   250  0216                     	;# 
   251  0217                     	;# 
   252  0217                     	;# 
   253  0291                     	;# 
   254  0291                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0298                     	;# 
   258  0298                     	;# 
   259  0299                     	;# 
   260  029A                     	;# 
   261  0394                     	;# 
   262  0395                     	;# 
   263  0396                     	;# 
   264  0FE4                     	;# 
   265  0FE5                     	;# 
   266  0FE6                     	;# 
   267  0FE7                     	;# 
   268  0FE8                     	;# 
   269  0FE9                     	;# 
   270  0FEA                     	;# 
   271  0FEB                     	;# 
   272  0FED                     	;# 
   273  0FEE                     	;# 
   274  0FEF                     	;# 
   275  0000                     	;# 
   276  0001                     	;# 
   277  0002                     	;# 
   278  0003                     	;# 
   279  0004                     	;# 
   280  0005                     	;# 
   281  0006                     	;# 
   282  0007                     	;# 
   283  0008                     	;# 
   284  0009                     	;# 
   285  000A                     	;# 
   286  000B                     	;# 
   287  000C                     	;# 
   288  000D                     	;# 
   289  000E                     	;# 
   290  0010                     	;# 
   291  0011                     	;# 
   292  0012                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0016                     	;# 
   296  0017                     	;# 
   297  0018                     	;# 
   298  0019                     	;# 
   299  001A                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  008C                     	;# 
   303  008D                     	;# 
   304  008E                     	;# 
   305  0090                     	;# 
   306  0091                     	;# 
   307  0092                     	;# 
   308  0095                     	;# 
   309  0096                     	;# 
   310  0097                     	;# 
   311  0099                     	;# 
   312  009A                     	;# 
   313  009B                     	;# 
   314  009B                     	;# 
   315  009C                     	;# 
   316  009D                     	;# 
   317  009E                     	;# 
   318  010C                     	;# 
   319  010D                     	;# 
   320  010E                     	;# 
   321  0116                     	;# 
   322  0117                     	;# 
   323  011D                     	;# 
   324  018C                     	;# 
   325  018D                     	;# 
   326  018E                     	;# 
   327  0191                     	;# 
   328  0191                     	;# 
   329  0192                     	;# 
   330  0193                     	;# 
   331  0193                     	;# 
   332  0194                     	;# 
   333  0195                     	;# 
   334  0196                     	;# 
   335  0197                     	;# 
   336  0199                     	;# 
   337  019A                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019C                     	;# 
   343  019C                     	;# 
   344  019D                     	;# 
   345  019E                     	;# 
   346  019F                     	;# 
   347  020D                     	;# 
   348  0210                     	;# 
   349  0211                     	;# 
   350  0211                     	;# 
   351  0212                     	;# 
   352  0212                     	;# 
   353  0213                     	;# 
   354  0213                     	;# 
   355  0214                     	;# 
   356  0214                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0216                     	;# 
   361  0216                     	;# 
   362  0217                     	;# 
   363  0217                     	;# 
   364  0291                     	;# 
   365  0291                     	;# 
   366  0292                     	;# 
   367  0293                     	;# 
   368  0298                     	;# 
   369  0298                     	;# 
   370  0299                     	;# 
   371  029A                     	;# 
   372  0394                     	;# 
   373  0395                     	;# 
   374  0396                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  0010                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  0090                     	;# 
   417  0091                     	;# 
   418  0092                     	;# 
   419  0095                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009B                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  011D                     	;# 
   435  018C                     	;# 
   436  018D                     	;# 
   437  018E                     	;# 
   438  0191                     	;# 
   439  0191                     	;# 
   440  0192                     	;# 
   441  0193                     	;# 
   442  0193                     	;# 
   443  0194                     	;# 
   444  0195                     	;# 
   445  0196                     	;# 
   446  0197                     	;# 
   447  0199                     	;# 
   448  019A                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019C                     	;# 
   454  019C                     	;# 
   455  019D                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  020D                     	;# 
   459  0210                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0216                     	;# 
   472  0216                     	;# 
   473  0217                     	;# 
   474  0217                     	;# 
   475  0291                     	;# 
   476  0291                     	;# 
   477  0292                     	;# 
   478  0293                     	;# 
   479  0298                     	;# 
   480  0298                     	;# 
   481  0299                     	;# 
   482  029A                     	;# 
   483  0394                     	;# 
   484  0395                     	;# 
   485  0396                     	;# 
   486  0FE4                     	;# 
   487  0FE5                     	;# 
   488  0FE6                     	;# 
   489  0FE7                     	;# 
   490  0FE8                     	;# 
   491  0FE9                     	;# 
   492  0FEA                     	;# 
   493  0FEB                     	;# 
   494  0FED                     	;# 
   495  0FEE                     	;# 
   496  0FEF                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000D                     	;# 
   511  000E                     	;# 
   512  0010                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  008C                     	;# 
   525  008D                     	;# 
   526  008E                     	;# 
   527  0090                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0095                     	;# 
   531  0096                     	;# 
   532  0097                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010E                     	;# 
   543  0116                     	;# 
   544  0117                     	;# 
   545  011D                     	;# 
   546  018C                     	;# 
   547  018D                     	;# 
   548  018E                     	;# 
   549  0191                     	;# 
   550  0191                     	;# 
   551  0192                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0197                     	;# 
   558  0199                     	;# 
   559  019A                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019C                     	;# 
   565  019C                     	;# 
   566  019D                     	;# 
   567  019E                     	;# 
   568  019F                     	;# 
   569  020D                     	;# 
   570  0210                     	;# 
   571  0211                     	;# 
   572  0211                     	;# 
   573  0212                     	;# 
   574  0212                     	;# 
   575  0213                     	;# 
   576  0213                     	;# 
   577  0214                     	;# 
   578  0214                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0216                     	;# 
   583  0216                     	;# 
   584  0217                     	;# 
   585  0217                     	;# 
   586  0291                     	;# 
   587  0291                     	;# 
   588  0292                     	;# 
   589  0293                     	;# 
   590  0298                     	;# 
   591  0298                     	;# 
   592  0299                     	;# 
   593  029A                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  0FE4                     	;# 
   598  0FE5                     	;# 
   599  0FE6                     	;# 
   600  0FE7                     	;# 
   601  0FE8                     	;# 
   602  0FE9                     	;# 
   603  0FEA                     	;# 
   604  0FEB                     	;# 
   605  0FED                     	;# 
   606  0FEE                     	;# 
   607  0FEF                     	;# 
   608  0000                     	;# 
   609  0001                     	;# 
   610  0002                     	;# 
   611  0003                     	;# 
   612  0004                     	;# 
   613  0005                     	;# 
   614  0006                     	;# 
   615  0007                     	;# 
   616  0008                     	;# 
   617  0009                     	;# 
   618  000A                     	;# 
   619  000B                     	;# 
   620  000C                     	;# 
   621  000D                     	;# 
   622  000E                     	;# 
   623  0010                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0015                     	;# 
   627  0016                     	;# 
   628  0016                     	;# 
   629  0017                     	;# 
   630  0018                     	;# 
   631  0019                     	;# 
   632  001A                     	;# 
   633  001B                     	;# 
   634  001C                     	;# 
   635  008C                     	;# 
   636  008D                     	;# 
   637  008E                     	;# 
   638  0090                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0095                     	;# 
   642  0096                     	;# 
   643  0097                     	;# 
   644  0099                     	;# 
   645  009A                     	;# 
   646  009B                     	;# 
   647  009B                     	;# 
   648  009C                     	;# 
   649  009D                     	;# 
   650  009E                     	;# 
   651  010C                     	;# 
   652  010D                     	;# 
   653  010E                     	;# 
   654  0116                     	;# 
   655  0117                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018D                     	;# 
   659  018E                     	;# 
   660  0191                     	;# 
   661  0191                     	;# 
   662  0192                     	;# 
   663  0193                     	;# 
   664  0193                     	;# 
   665  0194                     	;# 
   666  0195                     	;# 
   667  0196                     	;# 
   668  0197                     	;# 
   669  0199                     	;# 
   670  019A                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019C                     	;# 
   676  019C                     	;# 
   677  019D                     	;# 
   678  019E                     	;# 
   679  019F                     	;# 
   680  020D                     	;# 
   681  0210                     	;# 
   682  0211                     	;# 
   683  0211                     	;# 
   684  0212                     	;# 
   685  0212                     	;# 
   686  0213                     	;# 
   687  0213                     	;# 
   688  0214                     	;# 
   689  0214                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0216                     	;# 
   694  0216                     	;# 
   695  0217                     	;# 
   696  0217                     	;# 
   697  0291                     	;# 
   698  0291                     	;# 
   699  0292                     	;# 
   700  0293                     	;# 
   701  0298                     	;# 
   702  0298                     	;# 
   703  0299                     	;# 
   704  029A                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  0FE4                     	;# 
   709  0FE5                     	;# 
   710  0FE6                     	;# 
   711  0FE7                     	;# 
   712  0FE8                     	;# 
   713  0FE9                     	;# 
   714  0FEA                     	;# 
   715  0FEB                     	;# 
   716  0FED                     	;# 
   717  0FEE                     	;# 
   718  0FEF                     	;# 
   719  0000                     	;# 
   720  0001                     	;# 
   721  0002                     	;# 
   722  0003                     	;# 
   723  0004                     	;# 
   724  0005                     	;# 
   725  0006                     	;# 
   726  0007                     	;# 
   727  0008                     	;# 
   728  0009                     	;# 
   729  000A                     	;# 
   730  000B                     	;# 
   731  000C                     	;# 
   732  000D                     	;# 
   733  000E                     	;# 
   734  0010                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0015                     	;# 
   738  0016                     	;# 
   739  0016                     	;# 
   740  0017                     	;# 
   741  0018                     	;# 
   742  0019                     	;# 
   743  001A                     	;# 
   744  001B                     	;# 
   745  001C                     	;# 
   746  008C                     	;# 
   747  008D                     	;# 
   748  008E                     	;# 
   749  0090                     	;# 
   750  0091                     	;# 
   751  0092                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0097                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  0116                     	;# 
   766  0117                     	;# 
   767  011D                     	;# 
   768  018C                     	;# 
   769  018D                     	;# 
   770  018E                     	;# 
   771  0191                     	;# 
   772  0191                     	;# 
   773  0192                     	;# 
   774  0193                     	;# 
   775  0193                     	;# 
   776  0194                     	;# 
   777  0195                     	;# 
   778  0196                     	;# 
   779  0197                     	;# 
   780  0199                     	;# 
   781  019A                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019C                     	;# 
   787  019C                     	;# 
   788  019D                     	;# 
   789  019E                     	;# 
   790  019F                     	;# 
   791  020D                     	;# 
   792  0210                     	;# 
   793  0211                     	;# 
   794  0211                     	;# 
   795  0212                     	;# 
   796  0212                     	;# 
   797  0213                     	;# 
   798  0213                     	;# 
   799  0214                     	;# 
   800  0214                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0216                     	;# 
   805  0216                     	;# 
   806  0217                     	;# 
   807  0217                     	;# 
   808  0291                     	;# 
   809  0291                     	;# 
   810  0292                     	;# 
   811  0293                     	;# 
   812  0298                     	;# 
   813  0298                     	;# 
   814  0299                     	;# 
   815  029A                     	;# 
   816  0394                     	;# 
   817  0395                     	;# 
   818  0396                     	;# 
   819  0FE4                     	;# 
   820  0FE5                     	;# 
   821  0FE6                     	;# 
   822  0FE7                     	;# 
   823  0FE8                     	;# 
   824  0FE9                     	;# 
   825  0FEA                     	;# 
   826  0FEB                     	;# 
   827  0FED                     	;# 
   828  0FEE                     	;# 
   829  0FEF                     	;# 
   830  0000                     	;# 
   831  0001                     	;# 
   832  0002                     	;# 
   833  0003                     	;# 
   834  0004                     	;# 
   835  0005                     	;# 
   836  0006                     	;# 
   837  0007                     	;# 
   838  0008                     	;# 
   839  0009                     	;# 
   840  000A                     	;# 
   841  000B                     	;# 
   842  000C                     	;# 
   843  000D                     	;# 
   844  000E                     	;# 
   845  0010                     	;# 
   846  0011                     	;# 
   847  0012                     	;# 
   848  0015                     	;# 
   849  0016                     	;# 
   850  0016                     	;# 
   851  0017                     	;# 
   852  0018                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  008C                     	;# 
   858  008D                     	;# 
   859  008E                     	;# 
   860  0090                     	;# 
   861  0091                     	;# 
   862  0092                     	;# 
   863  0095                     	;# 
   864  0096                     	;# 
   865  0097                     	;# 
   866  0099                     	;# 
   867  009A                     	;# 
   868  009B                     	;# 
   869  009B                     	;# 
   870  009C                     	;# 
   871  009D                     	;# 
   872  009E                     	;# 
   873  010C                     	;# 
   874  010D                     	;# 
   875  010E                     	;# 
   876  0116                     	;# 
   877  0117                     	;# 
   878  011D                     	;# 
   879  018C                     	;# 
   880  018D                     	;# 
   881  018E                     	;# 
   882  0191                     	;# 
   883  0191                     	;# 
   884  0192                     	;# 
   885  0193                     	;# 
   886  0193                     	;# 
   887  0194                     	;# 
   888  0195                     	;# 
   889  0196                     	;# 
   890  0197                     	;# 
   891  0199                     	;# 
   892  019A                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019C                     	;# 
   898  019C                     	;# 
   899  019D                     	;# 
   900  019E                     	;# 
   901  019F                     	;# 
   902  020D                     	;# 
   903  0210                     	;# 
   904  0211                     	;# 
   905  0211                     	;# 
   906  0212                     	;# 
   907  0212                     	;# 
   908  0213                     	;# 
   909  0213                     	;# 
   910  0214                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0216                     	;# 
   916  0216                     	;# 
   917  0217                     	;# 
   918  0217                     	;# 
   919  0291                     	;# 
   920  0291                     	;# 
   921  0292                     	;# 
   922  0293                     	;# 
   923  0298                     	;# 
   924  0298                     	;# 
   925  0299                     	;# 
   926  029A                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0FE4                     	;# 
   931  0FE5                     	;# 
   932  0FE6                     	;# 
   933  0FE7                     	;# 
   934  0FE8                     	;# 
   935  0FE9                     	;# 
   936  0FEA                     	;# 
   937  0FEB                     	;# 
   938  0FED                     	;# 
   939  0FEE                     	;# 
   940  0FEF                     	;# 
   941  0000                     	;# 
   942  0001                     	;# 
   943  0002                     	;# 
   944  0003                     	;# 
   945  0004                     	;# 
   946  0005                     	;# 
   947  0006                     	;# 
   948  0007                     	;# 
   949  0008                     	;# 
   950  0009                     	;# 
   951  000A                     	;# 
   952  000B                     	;# 
   953  000C                     	;# 
   954  000D                     	;# 
   955  000E                     	;# 
   956  0010                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  008C                     	;# 
   969  008D                     	;# 
   970  008E                     	;# 
   971  0090                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0099                     	;# 
   978  009A                     	;# 
   979  009B                     	;# 
   980  009B                     	;# 
   981  009C                     	;# 
   982  009D                     	;# 
   983  009E                     	;# 
   984  010C                     	;# 
   985  010D                     	;# 
   986  010E                     	;# 
   987  0116                     	;# 
   988  0117                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018D                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0197                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019C                     	;# 
  1010  019D                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  020D                     	;# 
  1014  0210                     	;# 
  1015  0211                     	;# 
  1016  0211                     	;# 
  1017  0212                     	;# 
  1018  0212                     	;# 
  1019  0213                     	;# 
  1020  0213                     	;# 
  1021  0214                     	;# 
  1022  0214                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0216                     	;# 
  1027  0216                     	;# 
  1028  0217                     	;# 
  1029  0217                     	;# 
  1030  0291                     	;# 
  1031  0291                     	;# 
  1032  0292                     	;# 
  1033  0293                     	;# 
  1034  0298                     	;# 
  1035  0298                     	;# 
  1036  0299                     	;# 
  1037  029A                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000D                     	;# 
  1066  000E                     	;# 
  1067  0010                     	;# 
  1068  0011                     	;# 
  1069  0012                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  008C                     	;# 
  1080  008D                     	;# 
  1081  008E                     	;# 
  1082  0090                     	;# 
  1083  0091                     	;# 
  1084  0092                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  010E                     	;# 
  1098  0116                     	;# 
  1099  0117                     	;# 
  1100  011D                     	;# 
  1101  018C                     	;# 
  1102  018D                     	;# 
  1103  018E                     	;# 
  1104  0191                     	;# 
  1105  0191                     	;# 
  1106  0192                     	;# 
  1107  0193                     	;# 
  1108  0193                     	;# 
  1109  0194                     	;# 
  1110  0195                     	;# 
  1111  0196                     	;# 
  1112  0197                     	;# 
  1113  0199                     	;# 
  1114  019A                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019C                     	;# 
  1120  019C                     	;# 
  1121  019D                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  020D                     	;# 
  1125  0210                     	;# 
  1126  0211                     	;# 
  1127  0211                     	;# 
  1128  0212                     	;# 
  1129  0212                     	;# 
  1130  0213                     	;# 
  1131  0213                     	;# 
  1132  0214                     	;# 
  1133  0214                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0216                     	;# 
  1138  0216                     	;# 
  1139  0217                     	;# 
  1140  0217                     	;# 
  1141  0291                     	;# 
  1142  0291                     	;# 
  1143  0292                     	;# 
  1144  0293                     	;# 
  1145  0298                     	;# 
  1146  0298                     	;# 
  1147  0299                     	;# 
  1148  029A                     	;# 
  1149  0394                     	;# 
  1150  0395                     	;# 
  1151  0396                     	;# 
  1152  0FE4                     	;# 
  1153  0FE5                     	;# 
  1154  0FE6                     	;# 
  1155  0FE7                     	;# 
  1156  0FE8                     	;# 
  1157  0FE9                     	;# 
  1158  0FEA                     	;# 
  1159  0FEB                     	;# 
  1160  0FED                     	;# 
  1161  0FEE                     	;# 
  1162  0FEF                     	;# 
  1163  0000                     	;# 
  1164  0001                     	;# 
  1165  0002                     	;# 
  1166  0003                     	;# 
  1167  0004                     	;# 
  1168  0005                     	;# 
  1169  0006                     	;# 
  1170  0007                     	;# 
  1171  0008                     	;# 
  1172  0009                     	;# 
  1173  000A                     	;# 
  1174  000B                     	;# 
  1175  000C                     	;# 
  1176  000D                     	;# 
  1177  000E                     	;# 
  1178  0010                     	;# 
  1179  0011                     	;# 
  1180  0012                     	;# 
  1181  0015                     	;# 
  1182  0016                     	;# 
  1183  0016                     	;# 
  1184  0017                     	;# 
  1185  0018                     	;# 
  1186  0019                     	;# 
  1187  001A                     	;# 
  1188  001B                     	;# 
  1189  001C                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  0090                     	;# 
  1194  0091                     	;# 
  1195  0092                     	;# 
  1196  0095                     	;# 
  1197  0096                     	;# 
  1198  0097                     	;# 
  1199  0099                     	;# 
  1200  009A                     	;# 
  1201  009B                     	;# 
  1202  009B                     	;# 
  1203  009C                     	;# 
  1204  009D                     	;# 
  1205  009E                     	;# 
  1206  010C                     	;# 
  1207  010D                     	;# 
  1208  010E                     	;# 
  1209  0116                     	;# 
  1210  0117                     	;# 
  1211  011D                     	;# 
  1212  018C                     	;# 
  1213  018D                     	;# 
  1214  018E                     	;# 
  1215  0191                     	;# 
  1216  0191                     	;# 
  1217  0192                     	;# 
  1218  0193                     	;# 
  1219  0193                     	;# 
  1220  0194                     	;# 
  1221  0195                     	;# 
  1222  0196                     	;# 
  1223  0197                     	;# 
  1224  0199                     	;# 
  1225  019A                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019C                     	;# 
  1231  019C                     	;# 
  1232  019D                     	;# 
  1233  019E                     	;# 
  1234  019F                     	;# 
  1235  020D                     	;# 
  1236  0210                     	;# 
  1237  0211                     	;# 
  1238  0211                     	;# 
  1239  0212                     	;# 
  1240  0212                     	;# 
  1241  0213                     	;# 
  1242  0213                     	;# 
  1243  0214                     	;# 
  1244  0214                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0216                     	;# 
  1249  0216                     	;# 
  1250  0217                     	;# 
  1251  0217                     	;# 
  1252  0291                     	;# 
  1253  0291                     	;# 
  1254  0292                     	;# 
  1255  0293                     	;# 
  1256  0298                     	;# 
  1257  0298                     	;# 
  1258  0299                     	;# 
  1259  029A                     	;# 
  1260  0394                     	;# 
  1261  0395                     	;# 
  1262  0396                     	;# 
  1263  0FE4                     	;# 
  1264  0FE5                     	;# 
  1265  0FE6                     	;# 
  1266  0FE7                     	;# 
  1267  0FE8                     	;# 
  1268  0FE9                     	;# 
  1269  0FEA                     	;# 
  1270  0FEB                     	;# 
  1271  0FED                     	;# 
  1272  0FEE                     	;# 
  1273  0FEF                     	;# 
  1274  0000                     	;# 
  1275  0001                     	;# 
  1276  0002                     	;# 
  1277  0003                     	;# 
  1278  0004                     	;# 
  1279  0005                     	;# 
  1280  0006                     	;# 
  1281  0007                     	;# 
  1282  0008                     	;# 
  1283  0009                     	;# 
  1284  000A                     	;# 
  1285  000B                     	;# 
  1286  000C                     	;# 
  1287  000D                     	;# 
  1288  000E                     	;# 
  1289  0010                     	;# 
  1290  0011                     	;# 
  1291  0012                     	;# 
  1292  0015                     	;# 
  1293  0016                     	;# 
  1294  0016                     	;# 
  1295  0017                     	;# 
  1296  0018                     	;# 
  1297  0019                     	;# 
  1298  001A                     	;# 
  1299  001B                     	;# 
  1300  001C                     	;# 
  1301  008C                     	;# 
  1302  008D                     	;# 
  1303  008E                     	;# 
  1304  0090                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0095                     	;# 
  1308  0096                     	;# 
  1309  0097                     	;# 
  1310  0099                     	;# 
  1311  009A                     	;# 
  1312  009B                     	;# 
  1313  009B                     	;# 
  1314  009C                     	;# 
  1315  009D                     	;# 
  1316  009E                     	;# 
  1317  010C                     	;# 
  1318  010D                     	;# 
  1319  010E                     	;# 
  1320  0116                     	;# 
  1321  0117                     	;# 
  1322  011D                     	;# 
  1323  018C                     	;# 
  1324  018D                     	;# 
  1325  018E                     	;# 
  1326  0191                     	;# 
  1327  0191                     	;# 
  1328  0192                     	;# 
  1329  0193                     	;# 
  1330  0193                     	;# 
  1331  0194                     	;# 
  1332  0195                     	;# 
  1333  0196                     	;# 
  1334  0197                     	;# 
  1335  0199                     	;# 
  1336  019A                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019C                     	;# 
  1342  019C                     	;# 
  1343  019D                     	;# 
  1344  019E                     	;# 
  1345  019F                     	;# 
  1346  020D                     	;# 
  1347  0210                     	;# 
  1348  0211                     	;# 
  1349  0211                     	;# 
  1350  0212                     	;# 
  1351  0212                     	;# 
  1352  0213                     	;# 
  1353  0213                     	;# 
  1354  0214                     	;# 
  1355  0214                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0216                     	;# 
  1360  0216                     	;# 
  1361  0217                     	;# 
  1362  0217                     	;# 
  1363  0291                     	;# 
  1364  0291                     	;# 
  1365  0292                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  0394                     	;# 
  1372  0395                     	;# 
  1373  0396                     	;# 
  1374  0FE4                     	;# 
  1375  0FE5                     	;# 
  1376  0FE6                     	;# 
  1377  0FE7                     	;# 
  1378  0FE8                     	;# 
  1379  0FE9                     	;# 
  1380  0FEA                     	;# 
  1381  0FEB                     	;# 
  1382  0FED                     	;# 
  1383  0FEE                     	;# 
  1384  0FEF                     	;# 
  1385  0000                     	;# 
  1386  0001                     	;# 
  1387  0002                     	;# 
  1388  0003                     	;# 
  1389  0004                     	;# 
  1390  0005                     	;# 
  1391  0006                     	;# 
  1392  0007                     	;# 
  1393  0008                     	;# 
  1394  0009                     	;# 
  1395  000A                     	;# 
  1396  000B                     	;# 
  1397  000C                     	;# 
  1398  000D                     	;# 
  1399  000E                     	;# 
  1400  0010                     	;# 
  1401  0011                     	;# 
  1402  0012                     	;# 
  1403  0015                     	;# 
  1404  0016                     	;# 
  1405  0016                     	;# 
  1406  0017                     	;# 
  1407  0018                     	;# 
  1408  0019                     	;# 
  1409  001A                     	;# 
  1410  001B                     	;# 
  1411  001C                     	;# 
  1412  008C                     	;# 
  1413  008D                     	;# 
  1414  008E                     	;# 
  1415  0090                     	;# 
  1416  0091                     	;# 
  1417  0092                     	;# 
  1418  0095                     	;# 
  1419  0096                     	;# 
  1420  0097                     	;# 
  1421  0099                     	;# 
  1422  009A                     	;# 
  1423  009B                     	;# 
  1424  009B                     	;# 
  1425  009C                     	;# 
  1426  009D                     	;# 
  1427  009E                     	;# 
  1428  010C                     	;# 
  1429  010D                     	;# 
  1430  010E                     	;# 
  1431  0116                     	;# 
  1432  0117                     	;# 
  1433  011D                     	;# 
  1434  018C                     	;# 
  1435  018D                     	;# 
  1436  018E                     	;# 
  1437  0191                     	;# 
  1438  0191                     	;# 
  1439  0192                     	;# 
  1440  0193                     	;# 
  1441  0193                     	;# 
  1442  0194                     	;# 
  1443  0195                     	;# 
  1444  0196                     	;# 
  1445  0197                     	;# 
  1446  0199                     	;# 
  1447  019A                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019C                     	;# 
  1453  019C                     	;# 
  1454  019D                     	;# 
  1455  019E                     	;# 
  1456  019F                     	;# 
  1457  020D                     	;# 
  1458  0210                     	;# 
  1459  0211                     	;# 
  1460  0211                     	;# 
  1461  0212                     	;# 
  1462  0212                     	;# 
  1463  0213                     	;# 
  1464  0213                     	;# 
  1465  0214                     	;# 
  1466  0214                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0216                     	;# 
  1471  0216                     	;# 
  1472  0217                     	;# 
  1473  0217                     	;# 
  1474  0291                     	;# 
  1475  0291                     	;# 
  1476  0292                     	;# 
  1477  0293                     	;# 
  1478  0298                     	;# 
  1479  0298                     	;# 
  1480  0299                     	;# 
  1481  029A                     	;# 
  1482  0394                     	;# 
  1483  0395                     	;# 
  1484  0396                     	;# 
  1485  0FE4                     	;# 
  1486  0FE5                     	;# 
  1487  0FE6                     	;# 
  1488  0FE7                     	;# 
  1489  0FE8                     	;# 
  1490  0FE9                     	;# 
  1491  0FEA                     	;# 
  1492  0FEB                     	;# 
  1493  0FED                     	;# 
  1494  0FEE                     	;# 
  1495  0FEF                     	;# 
  1496  0000                     	;# 
  1497  0001                     	;# 
  1498  0002                     	;# 
  1499  0003                     	;# 
  1500  0004                     	;# 
  1501  0005                     	;# 
  1502  0006                     	;# 
  1503  0007                     	;# 
  1504  0008                     	;# 
  1505  0009                     	;# 
  1506  000A                     	;# 
  1507  000B                     	;# 
  1508  000C                     	;# 
  1509  000D                     	;# 
  1510  000E                     	;# 
  1511  0010                     	;# 
  1512  0011                     	;# 
  1513  0012                     	;# 
  1514  0015                     	;# 
  1515  0016                     	;# 
  1516  0016                     	;# 
  1517  0017                     	;# 
  1518  0018                     	;# 
  1519  0019                     	;# 
  1520  001A                     	;# 
  1521  001B                     	;# 
  1522  001C                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0095                     	;# 
  1530  0096                     	;# 
  1531  0097                     	;# 
  1532  0099                     	;# 
  1533  009A                     	;# 
  1534  009B                     	;# 
  1535  009B                     	;# 
  1536  009C                     	;# 
  1537  009D                     	;# 
  1538  009E                     	;# 
  1539  010C                     	;# 
  1540  010D                     	;# 
  1541  010E                     	;# 
  1542  0116                     	;# 
  1543  0117                     	;# 
  1544  011D                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018E                     	;# 
  1548  0191                     	;# 
  1549  0191                     	;# 
  1550  0192                     	;# 
  1551  0193                     	;# 
  1552  0193                     	;# 
  1553  0194                     	;# 
  1554  0195                     	;# 
  1555  0196                     	;# 
  1556  0197                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  020D                     	;# 
  1569  0210                     	;# 
  1570  0211                     	;# 
  1571  0211                     	;# 
  1572  0212                     	;# 
  1573  0212                     	;# 
  1574  0213                     	;# 
  1575  0213                     	;# 
  1576  0214                     	;# 
  1577  0214                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0216                     	;# 
  1582  0216                     	;# 
  1583  0217                     	;# 
  1584  0217                     	;# 
  1585  0291                     	;# 
  1586  0291                     	;# 
  1587  0292                     	;# 
  1588  0293                     	;# 
  1589  0298                     	;# 
  1590  0298                     	;# 
  1591  0299                     	;# 
  1592  029A                     	;# 
  1593  0394                     	;# 
  1594  0395                     	;# 
  1595  0396                     	;# 
  1596  0FE4                     	;# 
  1597  0FE5                     	;# 
  1598  0FE6                     	;# 
  1599  0FE7                     	;# 
  1600  0FE8                     	;# 
  1601  0FE9                     	;# 
  1602  0FEA                     	;# 
  1603  0FEB                     	;# 
  1604  0FED                     	;# 
  1605  0FEE                     	;# 
  1606  0FEF                     	;# 
  1607  0000                     	;# 
  1608  0001                     	;# 
  1609  0002                     	;# 
  1610  0003                     	;# 
  1611  0004                     	;# 
  1612  0005                     	;# 
  1613  0006                     	;# 
  1614  0007                     	;# 
  1615  0008                     	;# 
  1616  0009                     	;# 
  1617  000A                     	;# 
  1618  000B                     	;# 
  1619  000C                     	;# 
  1620  000D                     	;# 
  1621  000E                     	;# 
  1622  0010                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0015                     	;# 
  1626  0016                     	;# 
  1627  0016                     	;# 
  1628  0017                     	;# 
  1629  0018                     	;# 
  1630  0019                     	;# 
  1631  001A                     	;# 
  1632  001B                     	;# 
  1633  001C                     	;# 
  1634  008C                     	;# 
  1635  008D                     	;# 
  1636  008E                     	;# 
  1637  0090                     	;# 
  1638  0091                     	;# 
  1639  0092                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0099                     	;# 
  1644  009A                     	;# 
  1645  009B                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0116                     	;# 
  1654  0117                     	;# 
  1655  011D                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018E                     	;# 
  1659  0191                     	;# 
  1660  0191                     	;# 
  1661  0192                     	;# 
  1662  0193                     	;# 
  1663  0193                     	;# 
  1664  0194                     	;# 
  1665  0195                     	;# 
  1666  0196                     	;# 
  1667  0197                     	;# 
  1668  0199                     	;# 
  1669  019A                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019C                     	;# 
  1675  019C                     	;# 
  1676  019D                     	;# 
  1677  019E                     	;# 
  1678  019F                     	;# 
  1679  020D                     	;# 
  1680  0210                     	;# 
  1681  0211                     	;# 
  1682  0211                     	;# 
  1683  0212                     	;# 
  1684  0212                     	;# 
  1685  0213                     	;# 
  1686  0213                     	;# 
  1687  0214                     	;# 
  1688  0214                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0216                     	;# 
  1693  0216                     	;# 
  1694  0217                     	;# 
  1695  0217                     	;# 
  1696  0291                     	;# 
  1697  0291                     	;# 
  1698  0292                     	;# 
  1699  0293                     	;# 
  1700  0298                     	;# 
  1701  0298                     	;# 
  1702  0299                     	;# 
  1703  029A                     	;# 
  1704  0394                     	;# 
  1705  0395                     	;# 
  1706  0396                     	;# 
  1707  0FE4                     	;# 
  1708  0FE5                     	;# 
  1709  0FE6                     	;# 
  1710  0FE7                     	;# 
  1711  0FE8                     	;# 
  1712  0FE9                     	;# 
  1713  0FEA                     	;# 
  1714  0FEB                     	;# 
  1715  0FED                     	;# 
  1716  0FEE                     	;# 
  1717  0FEF                     	;# 
  1718  0000                     	;# 
  1719  0001                     	;# 
  1720  0002                     	;# 
  1721  0003                     	;# 
  1722  0004                     	;# 
  1723  0005                     	;# 
  1724  0006                     	;# 
  1725  0007                     	;# 
  1726  0008                     	;# 
  1727  0009                     	;# 
  1728  000A                     	;# 
  1729  000B                     	;# 
  1730  000C                     	;# 
  1731  000D                     	;# 
  1732  000E                     	;# 
  1733  0010                     	;# 
  1734  0011                     	;# 
  1735  0012                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008D                     	;# 
  1747  008E                     	;# 
  1748  0090                     	;# 
  1749  0091                     	;# 
  1750  0092                     	;# 
  1751  0095                     	;# 
  1752  0096                     	;# 
  1753  0097                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  010C                     	;# 
  1762  010D                     	;# 
  1763  010E                     	;# 
  1764  0116                     	;# 
  1765  0117                     	;# 
  1766  011D                     	;# 
  1767  018C                     	;# 
  1768  018D                     	;# 
  1769  018E                     	;# 
  1770  0191                     	;# 
  1771  0191                     	;# 
  1772  0192                     	;# 
  1773  0193                     	;# 
  1774  0193                     	;# 
  1775  0194                     	;# 
  1776  0195                     	;# 
  1777  0196                     	;# 
  1778  0197                     	;# 
  1779  0199                     	;# 
  1780  019A                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019C                     	;# 
  1786  019C                     	;# 
  1787  019D                     	;# 
  1788  019E                     	;# 
  1789  019F                     	;# 
  1790  020D                     	;# 
  1791  0210                     	;# 
  1792  0211                     	;# 
  1793  0211                     	;# 
  1794  0212                     	;# 
  1795  0212                     	;# 
  1796  0213                     	;# 
  1797  0213                     	;# 
  1798  0214                     	;# 
  1799  0214                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0216                     	;# 
  1804  0216                     	;# 
  1805  0217                     	;# 
  1806  0217                     	;# 
  1807  0291                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0293                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  0FE4                     	;# 
  1819  0FE5                     	;# 
  1820  0FE6                     	;# 
  1821  0FE7                     	;# 
  1822  0FE8                     	;# 
  1823  0FE9                     	;# 
  1824  0FEA                     	;# 
  1825  0FEB                     	;# 
  1826  0FED                     	;# 
  1827  0FEE                     	;# 
  1828  0FEF                     	;# 
  1829  0000                     	;# 
  1830  0001                     	;# 
  1831  0002                     	;# 
  1832  0003                     	;# 
  1833  0004                     	;# 
  1834  0005                     	;# 
  1835  0006                     	;# 
  1836  0007                     	;# 
  1837  0008                     	;# 
  1838  0009                     	;# 
  1839  000A                     	;# 
  1840  000B                     	;# 
  1841  000C                     	;# 
  1842  000D                     	;# 
  1843  000E                     	;# 
  1844  0010                     	;# 
  1845  0011                     	;# 
  1846  0012                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  008C                     	;# 
  1857  008D                     	;# 
  1858  008E                     	;# 
  1859  0090                     	;# 
  1860  0091                     	;# 
  1861  0092                     	;# 
  1862  0095                     	;# 
  1863  0096                     	;# 
  1864  0097                     	;# 
  1865  0099                     	;# 
  1866  009A                     	;# 
  1867  009B                     	;# 
  1868  009B                     	;# 
  1869  009C                     	;# 
  1870  009D                     	;# 
  1871  009E                     	;# 
  1872  010C                     	;# 
  1873  010D                     	;# 
  1874  010E                     	;# 
  1875  0116                     	;# 
  1876  0117                     	;# 
  1877  011D                     	;# 
  1878  018C                     	;# 
  1879  018D                     	;# 
  1880  018E                     	;# 
  1881  0191                     	;# 
  1882  0191                     	;# 
  1883  0192                     	;# 
  1884  0193                     	;# 
  1885  0193                     	;# 
  1886  0194                     	;# 
  1887  0195                     	;# 
  1888  0196                     	;# 
  1889  0197                     	;# 
  1890  0199                     	;# 
  1891  019A                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019C                     	;# 
  1897  019C                     	;# 
  1898  019D                     	;# 
  1899  019E                     	;# 
  1900  019F                     	;# 
  1901  020D                     	;# 
  1902  0210                     	;# 
  1903  0211                     	;# 
  1904  0211                     	;# 
  1905  0212                     	;# 
  1906  0212                     	;# 
  1907  0213                     	;# 
  1908  0213                     	;# 
  1909  0214                     	;# 
  1910  0214                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0216                     	;# 
  1915  0216                     	;# 
  1916  0217                     	;# 
  1917  0217                     	;# 
  1918  0291                     	;# 
  1919  0291                     	;# 
  1920  0292                     	;# 
  1921  0293                     	;# 
  1922  0298                     	;# 
  1923  0298                     	;# 
  1924  0299                     	;# 
  1925  029A                     	;# 
  1926  0394                     	;# 
  1927  0395                     	;# 
  1928  0396                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0015                     	;# 
  1959  0016                     	;# 
  1960  0016                     	;# 
  1961  0017                     	;# 
  1962  0018                     	;# 
  1963  0019                     	;# 
  1964  001A                     	;# 
  1965  001B                     	;# 
  1966  001C                     	;# 
  1967  008C                     	;# 
  1968  008D                     	;# 
  1969  008E                     	;# 
  1970  0090                     	;# 
  1971  0091                     	;# 
  1972  0092                     	;# 
  1973  0095                     	;# 
  1974  0096                     	;# 
  1975  0097                     	;# 
  1976  0099                     	;# 
  1977  009A                     	;# 
  1978  009B                     	;# 
  1979  009B                     	;# 
  1980  009C                     	;# 
  1981  009D                     	;# 
  1982  009E                     	;# 
  1983  010C                     	;# 
  1984  010D                     	;# 
  1985  010E                     	;# 
  1986  0116                     	;# 
  1987  0117                     	;# 
  1988  011D                     	;# 
  1989  018C                     	;# 
  1990  018D                     	;# 
  1991  018E                     	;# 
  1992  0191                     	;# 
  1993  0191                     	;# 
  1994  0192                     	;# 
  1995  0193                     	;# 
  1996  0193                     	;# 
  1997  0194                     	;# 
  1998  0195                     	;# 
  1999  0196                     	;# 
  2000  0197                     	;# 
  2001  0199                     	;# 
  2002  019A                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019C                     	;# 
  2008  019C                     	;# 
  2009  019D                     	;# 
  2010  019E                     	;# 
  2011  019F                     	;# 
  2012  020D                     	;# 
  2013  0210                     	;# 
  2014  0211                     	;# 
  2015  0211                     	;# 
  2016  0212                     	;# 
  2017  0212                     	;# 
  2018  0213                     	;# 
  2019  0213                     	;# 
  2020  0214                     	;# 
  2021  0214                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0216                     	;# 
  2026  0216                     	;# 
  2027  0217                     	;# 
  2028  0217                     	;# 
  2029  0291                     	;# 
  2030  0291                     	;# 
  2031  0292                     	;# 
  2032  0293                     	;# 
  2033  0298                     	;# 
  2034  0298                     	;# 
  2035  0299                     	;# 
  2036  029A                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  0FE4                     	;# 
  2041  0FE5                     	;# 
  2042  0FE6                     	;# 
  2043  0FE7                     	;# 
  2044  0FE8                     	;# 
  2045  0FE9                     	;# 
  2046  0FEA                     	;# 
  2047  0FEB                     	;# 
  2048  0FED                     	;# 
  2049  0FEE                     	;# 
  2050  0FEF                     	;# 
  2051  0000                     	;# 
  2052  0001                     	;# 
  2053  0002                     	;# 
  2054  0003                     	;# 
  2055  0004                     	;# 
  2056  0005                     	;# 
  2057  0006                     	;# 
  2058  0007                     	;# 
  2059  0008                     	;# 
  2060  0009                     	;# 
  2061  000A                     	;# 
  2062  000B                     	;# 
  2063  000C                     	;# 
  2064  000D                     	;# 
  2065  000E                     	;# 
  2066  0010                     	;# 
  2067  0011                     	;# 
  2068  0012                     	;# 
  2069  0015                     	;# 
  2070  0016                     	;# 
  2071  0016                     	;# 
  2072  0017                     	;# 
  2073  0018                     	;# 
  2074  0019                     	;# 
  2075  001A                     	;# 
  2076  001B                     	;# 
  2077  001C                     	;# 
  2078  008C                     	;# 
  2079  008D                     	;# 
  2080  008E                     	;# 
  2081  0090                     	;# 
  2082  0091                     	;# 
  2083  0092                     	;# 
  2084  0095                     	;# 
  2085  0096                     	;# 
  2086  0097                     	;# 
  2087  0099                     	;# 
  2088  009A                     	;# 
  2089  009B                     	;# 
  2090  009B                     	;# 
  2091  009C                     	;# 
  2092  009D                     	;# 
  2093  009E                     	;# 
  2094  010C                     	;# 
  2095  010D                     	;# 
  2096  010E                     	;# 
  2097  0116                     	;# 
  2098  0117                     	;# 
  2099  011D                     	;# 
  2100  018C                     	;# 
  2101  018D                     	;# 
  2102  018E                     	;# 
  2103  0191                     	;# 
  2104  0191                     	;# 
  2105  0192                     	;# 
  2106  0193                     	;# 
  2107  0193                     	;# 
  2108  0194                     	;# 
  2109  0195                     	;# 
  2110  0196                     	;# 
  2111  0197                     	;# 
  2112  0199                     	;# 
  2113  019A                     	;# 
  2114  019B                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019C                     	;# 
  2119  019C                     	;# 
  2120  019D                     	;# 
  2121  019E                     	;# 
  2122  019F                     	;# 
  2123  020D                     	;# 
  2124  0210                     	;# 
  2125  0211                     	;# 
  2126  0211                     	;# 
  2127  0212                     	;# 
  2128  0212                     	;# 
  2129  0213                     	;# 
  2130  0213                     	;# 
  2131  0214                     	;# 
  2132  0214                     	;# 
  2133  0215                     	;# 
  2134  0215                     	;# 
  2135  0215                     	;# 
  2136  0216                     	;# 
  2137  0216                     	;# 
  2138  0217                     	;# 
  2139  0217                     	;# 
  2140  0291                     	;# 
  2141  0291                     	;# 
  2142  0292                     	;# 
  2143  0293                     	;# 
  2144  0298                     	;# 
  2145  0298                     	;# 
  2146  0299                     	;# 
  2147  029A                     	;# 
  2148  0394                     	;# 
  2149  0395                     	;# 
  2150  0396                     	;# 
  2151  0FE4                     	;# 
  2152  0FE5                     	;# 
  2153  0FE6                     	;# 
  2154  0FE7                     	;# 
  2155  0FE8                     	;# 
  2156  0FE9                     	;# 
  2157  0FEA                     	;# 
  2158  0FEB                     	;# 
  2159  0FED                     	;# 
  2160  0FEE                     	;# 
  2161  0FEF                     	;# 
  2162                           
  2163                           	psect	idataBANK4
  2164  102C                     __pidataBANK4:	
  2165                           
  2166                           ;initializer for __product
  2167  102C  3463               	retlw	99
  2168  102D  3402               	retlw	2
  2169  102E  3400               	retlw	0
  2170  102F  3400               	retlw	0
  2171  1030  3400               	retlw	0
  2172  1031  3400               	retlw	0
  2173  1032  3400               	retlw	0
  2174  1033  3400               	retlw	0
  2175  1034  3400               	retlw	0
  2176  1035  3400               	retlw	0
  2177  1036  3400               	retlw	0
  2178  1037  3400               	retlw	0
  2179  1038  34FF               	retlw	255
  2180  1039  34FF               	retlw	255
  2181  103A  34FF               	retlw	255
  2182  103B  3400               	retlw	0
  2183  103C  3400               	retlw	0
  2184  103D  3400               	retlw	0
  2185  103E  3400               	retlw	0
  2186  103F  3400               	retlw	0
  2187  1040  3400               	retlw	0
  2188  1041  3400               	retlw	0
  2189  1042  3400               	retlw	0
  2190  1043  3400               	retlw	0
  2191  1044  3400               	retlw	0
  2192  1045  3400               	retlw	0
  2193  1046  3400               	retlw	0
  2194  1047  3400               	retlw	0
  2195  1048  3400               	retlw	0
  2196  1049  3400               	retlw	0
  2197  104A  3400               	retlw	0
  2198  104B  3400               	retlw	0
  2199                           
  2200                           	psect	stringtext
  2201  1800                     __pstringtext:	
  2202  1800                     _CC2500_registers_address:	
  2203  1800  3403               	retlw	3
  2204  1801  3416               	retlw	22
  2205  1802  3417               	retlw	23
  2206  1803  341E               	retlw	30
  2207  1804  341F               	retlw	31
  2208  1805  3420               	retlw	32
  2209  1806  342A               	retlw	42
  2210  1807  342B               	retlw	43
  2211  1808  340B               	retlw	11
  2212  1809  340C               	retlw	12
  2213  180A  340D               	retlw	13
  2214  180B  340E               	retlw	14
  2215  180C  340F               	retlw	15
  2216  180D  3410               	retlw	16
  2217  180E  3411               	retlw	17
  2218  180F  3412               	retlw	18
  2219  1810  3413               	retlw	19
  2220  1811  3414               	retlw	20
  2221  1812  340A               	retlw	10
  2222  1813  3415               	retlw	21
  2223  1814  3421               	retlw	33
  2224  1815  3422               	retlw	34
  2225  1816  3418               	retlw	24
  2226  1817  3419               	retlw	25
  2227  1818  341A               	retlw	26
  2228  1819  341B               	retlw	27
  2229  181A  341C               	retlw	28
  2230  181B  341D               	retlw	29
  2231  181C  3423               	retlw	35
  2232  181D  3424               	retlw	36
  2233  181E  3425               	retlw	37
  2234  181F  3426               	retlw	38
  2235  1820  3429               	retlw	41
  2236  1821  342C               	retlw	44
  2237  1822  342D               	retlw	45
  2238  1823  342E               	retlw	46
  2239  1824  3400               	retlw	0
  2240  1825  3401               	retlw	1
  2241  1826  3402               	retlw	2
  2242  1827  3407               	retlw	7
  2243  1828  3408               	retlw	8
  2244  1829  3409               	retlw	9
  2245  182A  3406               	retlw	6
  2246  182B  3404               	retlw	4
  2247  182C  3405               	retlw	5
  2248  182D  3427               	retlw	39
  2249  182E  3428               	retlw	40
  2250  182F                     __end_of_CC2500_registers_address:	
  2251  182F                     _CC2500_rfSettings:	
  2252  182F  3407               	retlw	7
  2253  1830  3407               	retlw	7
  2254  1831  3430               	retlw	48
  2255  1832  3487               	retlw	135
  2256  1833  346B               	retlw	107
  2257  1834  34F8               	retlw	248
  2258  1835  347F               	retlw	127
  2259  1836  343F               	retlw	63
  2260  1837  3409               	retlw	9
  2261  1838  3400               	retlw	0
  2262  1839  345C               	retlw	92
  2263  183A  34A7               	retlw	167
  2264  183B  3462               	retlw	98
  2265  183C  3486               	retlw	134
  2266  183D  3483               	retlw	131
  2267  183E  3403               	retlw	3
  2268  183F  3422               	retlw	34
  2269  1840  34F8               	retlw	248
  2270  1841  3400               	retlw	0
  2271  1842  3444               	retlw	68
  2272  1843  34B6               	retlw	182
  2273  1844  3410               	retlw	16
  2274  1845  3418               	retlw	24
  2275  1846  341D               	retlw	29
  2276  1847  341C               	retlw	28
  2277  1848  34C7               	retlw	199
  2278  1849  3400               	retlw	0
  2279  184A  34B2               	retlw	178
  2280  184B  34EA               	retlw	234
  2281  184C  340A               	retlw	10
  2282  184D  3400               	retlw	0
  2283  184E  3411               	retlw	17
  2284  184F  3459               	retlw	89
  2285  1850  3488               	retlw	136
  2286  1851  3431               	retlw	49
  2287  1852  340B               	retlw	11
  2288  1853  342F               	retlw	47
  2289  1854  342E               	retlw	46
  2290  1855  3406               	retlw	6
  2291  1856  3404               	retlw	4
  2292  1857  3405               	retlw	5
  2293  1858  3400               	retlw	0
  2294  1859  3430               	retlw	48
  2295  185A  34D3               	retlw	211
  2296  185B  3491               	retlw	145
  2297  185C  3441               	retlw	65
  2298  185D  3400               	retlw	0
  2299  185E                     __end_of_CC2500_rfSettings:	
  2300  185E                     _CC2500_patable_vaule:	
  2301  185E  34FE               	retlw	254
  2302  185F  34FE               	retlw	254
  2303  1860  34FE               	retlw	254
  2304  1861  34FE               	retlw	254
  2305  1862  34FE               	retlw	254
  2306  1863  34FE               	retlw	254
  2307  1864  34FE               	retlw	254
  2308  1865  34FE               	retlw	254
  2309  1866                     __end_of_CC2500_patable_vaule:	
  2310                           
  2311                           	psect	nvBANK1
  2312  00EF                     __pnvBANK1:	
  2313  00EF                     _product:	
  2314  00EF                     	ds	1
  2315  000C                     _PORTA	set	12
  2316  000D                     _PORTB	set	13
  2317  000E                     _PORTC	set	14
  2318  0018                     _T1CON	set	24
  2319  0017                     _TMR1H	set	23
  2320  0016                     _TMR1L	set	22
  2321  005F                     _GIE	set	95
  2322  005B                     _IOCIE	set	91
  2323  0058                     _IOCIF	set	88
  2324  005E                     _PEIE	set	94
  2325  0060                     _RA0	set	96
  2326  0064                     _RA4	set	100
  2327  0066                     _RA6	set	102
  2328  0067                     _RA7	set	103
  2329  0068                     _RB0	set	104
  2330  0069                     _RB1	set	105
  2331  006A                     _RB2	set	106
  2332  006B                     _RB3	set	107
  2333  006D                     _RB5	set	109
  2334  0070                     _RC0	set	112
  2335  0071                     _RC1	set	113
  2336  0073                     _RC3	set	115
  2337  0074                     _RC4	set	116
  2338  0075                     _RC5	set	117
  2339  0088                     _TMR1IF	set	136
  2340  009D                     _ADCON0	set	157
  2341  009E                     _ADCON1	set	158
  2342  009C                     _ADRESH	set	156
  2343  009B                     _ADRESL	set	155
  2344  0099                     _OSCCON	set	153
  2345  008C                     _TRISA	set	140
  2346  008D                     _TRISB	set	141
  2347  008E                     _TRISC	set	142
  2348  0097                     _WDTCON	set	151
  2349  04E9                     _GO_nDONE	set	1257
  2350  0488                     _TMR1IE	set	1160
  2351  0117                     _FVRCON	set	279
  2352  010C                     _LATA	set	268
  2353  010D                     _LATB	set	269
  2354  010E                     _LATC	set	270
  2355  018C                     _ANSELA	set	396
  2356  018D                     _ANSELB	set	397
  2357  018E                     _ANSELC	set	398
  2358  0192                     _PMADRH	set	402
  2359  0191                     _PMADRL	set	401
  2360  0196                     _PMCON2	set	406
  2361  0194                     _PMDATH	set	404
  2362  0193                     _PMDATL	set	403
  2363  0CAE                     _CFGS	set	3246
  2364  0CAC                     _FREE	set	3244
  2365  0CAD                     _LWLO	set	3245
  2366  0CA8                     _RD	set	3240
  2367  0CA9                     _WR	set	3241
  2368  0CAA                     _WREN	set	3242
  2369  020D                     _WPUB	set	525
  2370  0396                     _IOCBF	set	918
  2371  0395                     _IOCBN	set	917
  2372  0394                     _IOCBP	set	916
  2373  1CB2                     _IOCBF2	set	7346
  2374                           
  2375                           ; #config settings
  2376  0000                     
  2377                           	psect	cinit
  2378  0022                     start_initialization:	
  2379  0022                     __initialization:	
  2380                           
  2381                           ; Clear objects allocated to BITBANK1
  2382  0022  0021               	movlb	1	; select bank1
  2383  0023  01EE               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK1
  2386  0024  30A0               	movlw	low __pbssBANK1
  2387  0025  0084               	movwf	4
  2388  0026  3000               	movlw	high __pbssBANK1
  2389  0027  0085               	movwf	5
  2390  0028  3046               	movlw	70
  2391  0029  319B  2398  3180   	fcall	clear_ram0
  2392                           
  2393                           ; Clear objects allocated to BANK2
  2394  002C  3020               	movlw	low __pbssBANK2
  2395  002D  0084               	movwf	4
  2396  002E  3001               	movlw	high __pbssBANK2
  2397  002F  0085               	movwf	5
  2398  0030  304B               	movlw	75
  2399  0031  319B  2398  3180   	fcall	clear_ram0
  2400                           
  2401                           ; Clear objects allocated to BANK3
  2402  0034  30A0               	movlw	low __pbssBANK3
  2403  0035  0084               	movwf	4
  2404  0036  3001               	movlw	high __pbssBANK3
  2405  0037  0085               	movwf	5
  2406  0038  304C               	movlw	76
  2407  0039  319B  2398  3180   	fcall	clear_ram0
  2408                           
  2409                           ; Initialize objects allocated to BANK4
  2410  003C  302C               	movlw	low __pidataBANK4
  2411  003D  0084               	movwf	4
  2412  003E  3090               	movlw	(high __pidataBANK4)| (0+128)
  2413  003F  0085               	movwf	5
  2414  0040  3020               	movlw	low __pdataBANK4
  2415  0041  0086               	movwf	6
  2416  0042  3002               	movlw	high __pdataBANK4
  2417  0043  0087               	movwf	7
  2418  0044  3020               	movlw	32
  2419  0045  319B  2392         	fcall	init_ram
  2420  0047                     end_of_initialization:	
  2421                           ;End of C runtime variable initialization code
  2422                           
  2423  0047                     __end_of__initialization:	
  2424  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2425  0048  0020               	movlb	0
  2426  0049  3195  2DAA         	ljmp	_main	;jump to C main() function
  2427                           
  2428                           	psect	bitbssBANK1
  2429  0770                     __pbitbssBANK1:	
  2430  0770                     _Receive_OK:	
  2431  0770                     	ds	1
  2432  0771                     _Transceive_OK:	
  2433  0771                     	ds	1
  2434                           
  2435                           	psect	bssBANK1
  2436  00A0                     __pbssBANK1:	
  2437  00A0                     _RF1:	
  2438  00A0                     	ds	14
  2439  00AE                     _myMain:	
  2440  00AE                     	ds	13
  2441  00BB                     _Buz1:	
  2442  00BB                     	ds	12
  2443  00C7                     _DimmerIntr1:	
  2444  00C7                     	ds	11
  2445  00D2                     _CRC:	
  2446  00D2                     	ds	1
  2447  00D3                     _Cmd:	
  2448  00D3                     	ds	1
  2449  00D4                     _DelayOff:	
  2450  00D4                     	ds	1
  2451  00D5                     _DimmerLights:	
  2452  00D5                     	ds	1
  2453  00D6                     _LED:	
  2454  00D6                     	ds	1
  2455  00D7                     _Rx_Length:	
  2456  00D7                     	ds	1
  2457  00D8                     _SPI0Buffer:	
  2458  00D8                     	ds	1
  2459  00D9                     _Sw:	
  2460  00D9                     	ds	1
  2461  00DA                     _Tx_Length:	
  2462  00DA                     	ds	1
  2463  00DB                     _s_data:	
  2464  00DB                     	ds	1
  2465  00DC                     _Temp:	
  2466  00DC                     	ds	10
  2467                           
  2468                           	psect	bssBANK2
  2469  0120                     __pbssBANK2:	
  2470  0120                     _Dimmer:	
  2471  0120                     	ds	5
  2472  0125                     _Timer1:	
  2473  0125                     	ds	3
  2474  0128                     _RF_Count:	
  2475  0128                     	ds	2
  2476  012A                     _WDT:	
  2477  012A                     	ds	2
  2478  012C                     _DimmerIntr:	
  2479  012C                     	ds	1
  2480  012D                     _Light:	
  2481  012D                     	ds	1
  2482  012E                     _RSSI:	
  2483  012E                     	ds	1
  2484  012F                     _SwDetect:	
  2485  012F                     	ds	1
  2486  0130                     _r_address:	
  2487  0130                     	ds	1
  2488  0131                     _r_data:	
  2489  0131                     	ds	1
  2490  0132                     _Load:	
  2491  0132                     	ds	40
  2492  015A                     _DimmerLights1:	
  2493  015A                     	ds	8
  2494  0162                     _DlySw1:	
  2495  0162                     	ds	5
  2496  0167                     _VarErrLED:	
  2497  0167                     	ds	4
  2498                           
  2499                           	psect	bssBANK3
  2500  01A0                     __pbssBANK3:	
  2501  01A0                     _RF_Data:	
  2502  01A0                     	ds	30
  2503  01BE                     _Memory:	
  2504  01BE                     	ds	37
  2505  01E3                     _Sw1:	
  2506  01E3                     	ds	9
  2507                           
  2508                           	psect	dataBANK4
  2509  0220                     __pdataBANK4:	
  2510  0220                     __product:	
  2511  0220                     	ds	32
  2512                           
  2513                           	psect	clrtext
  2514  1B98                     clear_ram0:	
  2515                           ;	Called with FSR0 containing the base address, and
  2516                           ;	WREG with the size to clear
  2517                           
  2518  1B98  0064               	clrwdt	;clear the watchdog before getting into this loop
  2519  1B99                     clrloop0:	
  2520  1B99  0180               	clrf	0	;clear RAM location pointed to by FSR
  2521  1B9A  3101               	addfsr 0,1
  2522  1B9B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2523  1B9C  2B99               	goto	clrloop0	;have we reached the end yet?
  2524  1B9D  3400               	retlw	0	;all done for this memory range, return
  2525                           
  2526                           	psect	inittext
  2527  1B92                     init_ram:	
  2528  1B92  00FE               	movwf	126
  2529  1B93                     initloop:	
  2530  1B93  0012               	moviw fsr0++
  2531  1B94  001E               	movwi fsr1++
  2532  1B95  0BFE               	decfsz	126,f
  2533  1B96  2B93               	goto	initloop
  2534  1B97  3400               	retlw	0
  2535                           
  2536                           	psect	cstackBANK1
  2537  00E6                     __pcstackBANK1:	
  2538  00E6                     ??_getRxData:	
  2539  00E6                     setDimmerLights_OnOff@lights:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542                           
  2543                           ; 1 bytes @ 0x0
  2544  00E6                     	ds	1
  2545  00E7                     setDimmerLights_Main@lights:	
  2546  00E7                     getRxData@error:	
  2547                           ; 1 bytes @ 0x1
  2548                           
  2549                           
  2550                           ; 1 bytes @ 0x1
  2551  00E7                     	ds	1
  2552  00E8                     ??_setRF_Main:	
  2553                           
  2554                           ; 0 bytes @ 0x2
  2555  00E8                     	ds	1
  2556  00E9                     setRF_Main@error:	
  2557                           
  2558                           ; 1 bytes @ 0x3
  2559  00E9                     	ds	1
  2560  00EA                     ?_main:	
  2561  00EA                     main@argc:	
  2562                           ; 2 bytes @ 0x4
  2563                           
  2564                           
  2565                           ; 2 bytes @ 0x4
  2566  00EA                     	ds	2
  2567  00EC                     main@argv:	
  2568                           
  2569                           ; 2 bytes @ 0x6
  2570  00EC                     	ds	2
  2571                           
  2572                           	psect	cstackCOMMON
  2573  0070                     __pcstackCOMMON:	
  2574  0070                     ?_CC2500_WriteCommand:	
  2575  0070                     ?_RF_Timeout_Counter:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_setRF_TimeoutCleared:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_CC2500_WriteByte:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_CC2500_ReadStatus:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_CC2500_ReadByte:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_CC2500_PowerRST:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_CC2500_InitSetREG:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_CC2500_InitPATable:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_ClearTXFIFO:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_ClearRXFIFO:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_FrequencyCabr:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_SIDLEMode:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_DlyOff_Initialization:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_DlyOff_Main:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setDimmerLights_SwOn:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setDimmerLights_SwOff:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setMemory_Modify:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setDimmerLights_Initialization:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setDimmerLights_Main:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setDimmerLights_Line:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setTxData:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setRF_TransceiveGO:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setLED_Initialization:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setLED_Main:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_Fosc_Set:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_IO_Set:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_TMR1_Set:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_ADC_Set:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_IOC_Set:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_WDT_Set:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_TMR1_ISR:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_IOC_ISR:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_Timeout_Counter:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_set_TimeoutCleared:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_Flash_Memory_Write:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_Flash_Memory_Modify:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_WDT_Clearing:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_myMain_Initialization:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_Temp_Initialization:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Load_Initialization:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_Switch_Initialization:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_RF_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_getLoad_AD:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_getTemp_AD:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_my_MainTimer:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_Temp_Main:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Load_Main:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Switch_Main:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_RF_Main:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Exception_Main:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setLoad_AH_AL_Restore:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setTemp_Initialization:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setTemp_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setRF_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setRF_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_RF_RxDisable:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_getRxData:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setLog_Code:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setControl_Lights_Table:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setRFSW_Control:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setRFSW_AdjControl:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setSw_Initialization:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setSw_Main:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_Buzzer_Initialization:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Buzzer_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_CC2500_TxData:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_CC2500_RxData:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_CC2500_PowerOnInitial:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_DelayOffPointSelect:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_DelayOff_Initialization:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_DelayOff_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_DimmerIntr_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DimmerLights_SelectPointer:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DimmerLights_Initialization:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setDimmerLights_DimmingOn:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_DimmerLights_Main:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_DimmerLights_TMR_1:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ??_DimmerLights_TMR_1:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DimmerLights_IOC_1:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_LedPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_LED_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_LED_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_Mcu_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_ISR:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_Flash_Memory_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_Flash_Memory_Main:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_Flash_Memory_Unlock:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_Flash_Memory_Erasing:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setMemory_LoopSave:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_WDT_Main:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_setRF_Learn:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_TouchPower:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_SwPointSelect:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_getDimmerLights_Status:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_getDimmerLights_ValueToPercent:	
  2858                           ; 1 bytes @ 0x0
  2859                           
  2860  0070                     ?_getDimmerLights_PercentToValue:	
  2861                           ; 1 bytes @ 0x0
  2862                           
  2863  0070                     ?_getLoad_OK:	
  2864                           ; 1 bytes @ 0x0
  2865                           
  2866  0070                     ?_getMain_All_Error_Status:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0070                     ?_getMain_All_LightsStatus:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0070                     ?_getDimmerLights_Allow_Condition:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0070                     ?_getCmd_Status:	
  2876                           ; 1 bytes @ 0x0
  2877                           
  2878  0070                     ?_Flash_Memory_Read:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0070                     ?_getAll_Sw_KeyStatus:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ?_getRF_KeyStatus:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_getSw_KeyStatus:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getDelayOff_GO:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmerIntr_DimmingValue:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmerLights_Line:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmer_LoadGO:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getDimmer_Load_Status:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_Lights_Count:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?___lbdiv:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     setDimmerLights_Initialization@lights:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     getDimmerLights_Allow_Condition@lights:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     getSw_KeyStatus@sw:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ___lbdiv@divisor:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926                           
  2927                           ; 1 bytes @ 0x0
  2928  0070                     	ds	1
  2929  0071                     ??_TMR1_ISR:	
  2930  0071                     ??___lbdiv:	
  2931                           ; 0 bytes @ 0x1
  2932                           
  2933                           
  2934                           ; 0 bytes @ 0x1
  2935  0071                     	ds	1
  2936  0072                     ___lbdiv@dividend:	
  2937                           
  2938                           ; 1 bytes @ 0x2
  2939  0072                     	ds	1
  2940  0073                     ___lbdiv@counter:	
  2941                           
  2942                           ; 1 bytes @ 0x3
  2943  0073                     	ds	1
  2944  0074                     ___lbdiv@quotient:	
  2945                           
  2946                           ; 1 bytes @ 0x4
  2947  0074                     	ds	1
  2948  0075                     ?_Division:	
  2949  0075                     Division@num:	
  2950                           ; 1 bytes @ 0x5
  2951                           
  2952                           
  2953                           ; 1 bytes @ 0x5
  2954  0075                     	ds	1
  2955  0076                     ??_Division:	
  2956                           
  2957                           ; 0 bytes @ 0x6
  2958  0076                     	ds	2
  2959  0078                     Division@value:	
  2960                           
  2961                           ; 1 bytes @ 0x8
  2962  0078                     	ds	1
  2963  0079                     Division@result:	
  2964                           
  2965                           ; 1 bytes @ 0x9
  2966  0079                     	ds	1
  2967  007A                     ??_DimmerLights_IOC_1:	
  2968                           
  2969                           ; 0 bytes @ 0xA
  2970  007A                     	ds	2
  2971  007C                     DimmerLights_IOC_1@dimming:	
  2972                           
  2973                           ; 1 bytes @ 0xC
  2974  007C                     	ds	1
  2975  007D                     ??_IOC_ISR:	
  2976  007D                     ??_ISR:	
  2977                           ; 0 bytes @ 0xD
  2978                           
  2979                           
  2980                           ; 0 bytes @ 0xD
  2981  007D                     	ds	1
  2982                           
  2983                           	psect	cstackBANK0
  2984  0020                     __pcstackBANK0:	
  2985  0020                     ??_RF_Timeout_Counter:	
  2986  0020                     ??_setRF_TimeoutCleared:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ??_CC2500_WriteByte:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_CC2500_ReadByte:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ?_DelayTime_1us:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_setMemory_Modify:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_setDimmerLights_Initialization:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ??_getLoad_OK:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_getMain_All_Error_Status:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_getMain_All_LightsStatus:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_setDimmerLights_Line:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_getCmd_Status:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ?_setCmd_Status:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_setTxData:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_setRF_TransceiveGO:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_Fosc_Set:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_IO_Set:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_TMR1_Set:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_ADC_Set:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_IOC_Set:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_WDT_Set:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_Timeout_Counter:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_set_TimeoutCleared:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_Flash_Memory_Read:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ?_setMemory_Data:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_Flash_Memory_Write:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_getAll_Sw_KeyStatus:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_WDT_Clearing:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_myMain_Initialization:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_Temp_Initialization:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_setLoad_AH_AL_Restore:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_setTemp_Initialization:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_setRF_Initialization:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_getRF_KeyStatus:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_getSw_KeyStatus:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_Buzzer_Initialization:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_Buzzer_Main:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_DelayOffPointSelect:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ?_setDimmerIntr_ControlStatus:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_getDimmerIntr_DimmingValue:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ?_setDimmerIntr_Dimming_RF:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ??_DimmerLights_SelectPointer:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ??_getDimmerLights_Line:	
  3116                           ; 0 bytes @ 0x0
  3117                           
  3118  0020                     ??_getDimmer_LoadGO:	
  3119                           ; 0 bytes @ 0x0
  3120                           
  3121  0020                     ??_getDimmer_Load_Status:	
  3122                           ; 0 bytes @ 0x0
  3123                           
  3124  0020                     ??_LedPointSelect:	
  3125                           ; 0 bytes @ 0x0
  3126                           
  3127  0020                     ??_Flash_Memory_Unlock:	
  3128                           ; 0 bytes @ 0x0
  3129                           
  3130  0020                     ??_Flash_Memory_Erasing:	
  3131                           ; 0 bytes @ 0x0
  3132                           
  3133  0020                     ??_setMemory_LoopSave:	
  3134                           ; 0 bytes @ 0x0
  3135                           
  3136  0020                     ??_WDT_Main:	
  3137                           ; 0 bytes @ 0x0
  3138                           
  3139  0020                     ??_getMain_Lights_Count:	
  3140                           ; 0 bytes @ 0x0
  3141                           
  3142  0020                     ??_setRF_Learn:	
  3143                           ; 0 bytes @ 0x0
  3144                           
  3145  0020                     ??_TouchPower:	
  3146                           ; 0 bytes @ 0x0
  3147                           
  3148  0020                     ??_SwPointSelect:	
  3149                           ; 0 bytes @ 0x0
  3150                           
  3151  0020                     ?___bmul:	
  3152                           ; 0 bytes @ 0x0
  3153                           
  3154  0020                     ?_getBuz_GO:	
  3155                           ; 1 bytes @ 0x0
  3156                           
  3157  0020                     ?_getAD:	
  3158                           ; 2 bytes @ 0x0
  3159                           
  3160  0020                     ?___wmul:	
  3161                           ; 2 bytes @ 0x0
  3162                           
  3163  0020                     ?___awdiv:	
  3164                           ; 2 bytes @ 0x0
  3165                           
  3166  0020                     ?___lwdiv:	
  3167                           ; 2 bytes @ 0x0
  3168                           
  3169  0020                     ?___ftpack:	
  3170                           ; 2 bytes @ 0x0
  3171                           
  3172  0020                     setDimmerIntr_ControlStatus@command:	
  3173                           ; 3 bytes @ 0x0
  3174                           
  3175  0020                     setDimmerIntr_Dimming_Sw@command:	
  3176                           ; 1 bytes @ 0x0
  3177                           
  3178  0020                     setDimmerIntr_Dimming_RF@command:	
  3179                           ; 1 bytes @ 0x0
  3180                           
  3181  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184  0020                     setDimmerLights_Line@lights:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187  0020                     getDimmerLights_Line@line:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0020                     getDimmer_LoadGO@loadgo:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0020                     getDimmer_Load_Status@status:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0020                     getAD@adcon1:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0020                     setMemory_Data@data:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0020                     getMain_All_LightsStatus@status:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0020                     getMain_Lights_Count@count:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0020                     setCmd_Status@cmd:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0020                     getCmd_Status@number:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0020                     getLoad_OK@ok:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0020                     ___bmul@multiplicand:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0020                     DelayTime_1us@count:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0020                     ___wmul@multiplier:	
  3224                           ; 2 bytes @ 0x0
  3225                           
  3226  0020                     ___awdiv@divisor:	
  3227                           ; 2 bytes @ 0x0
  3228                           
  3229  0020                     ___lwdiv@divisor:	
  3230                           ; 2 bytes @ 0x0
  3231                           
  3232  0020                     ___ftpack@arg:	
  3233                           ; 2 bytes @ 0x0
  3234                           
  3235                           
  3236                           ; 3 bytes @ 0x0
  3237  0020                     	ds	1
  3238  0021                     ??_getDimmerLights_Allow_Condition:	
  3239  0021                     ??_setCmd_Status:	
  3240                           ; 0 bytes @ 0x1
  3241                           
  3242  0021                     ??_setMemory_Data:	
  3243                           ; 0 bytes @ 0x1
  3244                           
  3245  0021                     ??_RF_Initialization:	
  3246                           ; 0 bytes @ 0x1
  3247                           
  3248  0021                     ??_setDimmerIntr_ControlStatus:	
  3249                           ; 0 bytes @ 0x1
  3250                           
  3251  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3252                           ; 0 bytes @ 0x1
  3253                           
  3254  0021                     ??_setDimmerIntr_Dimming_RF:	
  3255                           ; 0 bytes @ 0x1
  3256                           
  3257  0021                     ??_Mcu_Initialization:	
  3258                           ; 0 bytes @ 0x1
  3259                           
  3260  0021                     ??___bmul:	
  3261                           ; 0 bytes @ 0x1
  3262                           
  3263  0021                     CC2500_WriteByte@loop_a:	
  3264                           ; 0 bytes @ 0x1
  3265                           
  3266  0021                     CC2500_ReadByte@loop_b:	
  3267                           ; 1 bytes @ 0x1
  3268                           
  3269  0021                     DelayOffPointSelect@sw:	
  3270                           ; 1 bytes @ 0x1
  3271                           
  3272  0021                     getDimmerIntr_DimmingValue@lights:	
  3273                           ; 1 bytes @ 0x1
  3274                           
  3275  0021                     DimmerLights_SelectPointer@lights:	
  3276                           ; 1 bytes @ 0x1
  3277                           
  3278  0021                     LedPointSelect@led:	
  3279                           ; 1 bytes @ 0x1
  3280                           
  3281  0021                     Flash_Memory_Read@i:	
  3282                           ; 1 bytes @ 0x1
  3283                           
  3284  0021                     Flash_Memory_Write@i:	
  3285                           ; 1 bytes @ 0x1
  3286                           
  3287  0021                     setMemory_Modify@command:	
  3288                           ; 1 bytes @ 0x1
  3289                           
  3290  0021                     setMemory_LoopSave@command:	
  3291                           ; 1 bytes @ 0x1
  3292                           
  3293  0021                     getMain_Lights_Count@status1:	
  3294                           ; 1 bytes @ 0x1
  3295                           
  3296  0021                     getCmd_Status@cmd:	
  3297                           ; 1 bytes @ 0x1
  3298                           
  3299  0021                     setLoad_AH_AL_Restore@i:	
  3300                           ; 1 bytes @ 0x1
  3301                           
  3302  0021                     setRF_Learn@command:	
  3303                           ; 1 bytes @ 0x1
  3304                           
  3305  0021                     getRF_KeyStatus@key:	
  3306                           ; 1 bytes @ 0x1
  3307                           
  3308  0021                     setRF_TransceiveGO@command:	
  3309                           ; 1 bytes @ 0x1
  3310                           
  3311  0021                     SwPointSelect@sw:	
  3312                           ; 1 bytes @ 0x1
  3313                           
  3314  0021                     getSw_KeyStatus@status:	
  3315                           ; 1 bytes @ 0x1
  3316                           
  3317  0021                     getAll_Sw_KeyStatus@status:	
  3318                           ; 1 bytes @ 0x1
  3319                           
  3320  0021                     _getMain_All_Error_Status$3568:	
  3321                           ; 1 bytes @ 0x1
  3322                           
  3323                           
  3324                           ; 2 bytes @ 0x1
  3325  0021                     	ds	1
  3326  0022                     ??_CC2500_WriteCommand:	
  3327  0022                     ??_CC2500_ReadStatus:	
  3328                           ; 0 bytes @ 0x2
  3329                           
  3330  0022                     ??_DelayTime_1us:	
  3331                           ; 0 bytes @ 0x2
  3332                           
  3333  0022                     ?_CC2500_WriteREG:	
  3334                           ; 0 bytes @ 0x2
  3335                           
  3336  0022                     ??_DlyOff_Initialization:	
  3337                           ; 0 bytes @ 0x2
  3338                           
  3339  0022                     ??_getDimmerLights_Status:	
  3340                           ; 0 bytes @ 0x2
  3341                           
  3342  0022                     ??_setDimmerLights_SwOff:	
  3343                           ; 0 bytes @ 0x2
  3344                           
  3345  0022                     ?_setLED:	
  3346                           ; 0 bytes @ 0x2
  3347                           
  3348  0022                     ??_setLED_Main:	
  3349                           ; 0 bytes @ 0x2
  3350                           
  3351  0022                     ??_Load_Initialization:	
  3352                           ; 0 bytes @ 0x2
  3353                           
  3354  0022                     ??_getBuz_GO:	
  3355                           ; 0 bytes @ 0x2
  3356                           
  3357  0022                     ??_getDelayOff_GO:	
  3358                           ; 0 bytes @ 0x2
  3359                           
  3360  0022                     ??_setDimmerLights_DimmingOn:	
  3361                           ; 0 bytes @ 0x2
  3362                           
  3363  0022                     ?_setDimmerLights_DimmingRun:	
  3364                           ; 0 bytes @ 0x2
  3365                           
  3366  0022                     CC2500_WriteREG@value:	
  3367                           ; 0 bytes @ 0x2
  3368                           
  3369  0022                     DlyOff_Initialization@sw:	
  3370                           ; 1 bytes @ 0x2
  3371                           
  3372  0022                     getDelayOff_GO@sw:	
  3373                           ; 1 bytes @ 0x2
  3374                           
  3375  0022                     setDimmerIntr_ControlStatus@lights:	
  3376                           ; 1 bytes @ 0x2
  3377                           
  3378  0022                     getDimmerIntr_DimmingValue@value:	
  3379                           ; 1 bytes @ 0x2
  3380                           
  3381  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3382                           ; 1 bytes @ 0x2
  3383                           
  3384  0022                     setDimmerIntr_Dimming_RF@lights:	
  3385                           ; 1 bytes @ 0x2
  3386                           
  3387  0022                     setDimmerLights_SwOff@sw:	
  3388                           ; 1 bytes @ 0x2
  3389                           
  3390  0022                     setDimmerLights_DimmingOn@sw:	
  3391                           ; 1 bytes @ 0x2
  3392                           
  3393  0022                     getDimmerLights_Allow_Condition@allow:	
  3394                           ; 1 bytes @ 0x2
  3395                           
  3396  0022                     getDimmerLights_Status@lights:	
  3397                           ; 1 bytes @ 0x2
  3398                           
  3399  0022                     setDimmerLights_DimmingRun@command:	
  3400                           ; 1 bytes @ 0x2
  3401                           
  3402  0022                     setLED@command:	
  3403                           ; 1 bytes @ 0x2
  3404                           
  3405  0022                     Flash_Memory_Read@address:	
  3406                           ; 1 bytes @ 0x2
  3407                           
  3408  0022                     setMemory_Data@address:	
  3409                           ; 1 bytes @ 0x2
  3410                           
  3411  0022                     setCmd_Status@number:	
  3412                           ; 1 bytes @ 0x2
  3413                           
  3414  0022                     _getRF_KeyStatus$5333:	
  3415                           ; 1 bytes @ 0x2
  3416                           
  3417  0022                     _getSw_KeyStatus$6368:	
  3418                           ; 1 bytes @ 0x2
  3419                           
  3420  0022                     _getAll_Sw_KeyStatus$6371:	
  3421                           ; 1 bytes @ 0x2
  3422                           
  3423  0022                     ___bmul@product:	
  3424                           ; 1 bytes @ 0x2
  3425                           
  3426  0022                     DelayTime_1us@i:	
  3427                           ; 1 bytes @ 0x2
  3428                           
  3429  0022                     ___wmul@multiplicand:	
  3430                           ; 2 bytes @ 0x2
  3431                           
  3432  0022                     ___awdiv@dividend:	
  3433                           ; 2 bytes @ 0x2
  3434                           
  3435  0022                     ___lwdiv@dividend:	
  3436                           ; 2 bytes @ 0x2
  3437                           
  3438                           
  3439                           ; 2 bytes @ 0x2
  3440  0022                     	ds	1
  3441  0023                     ??_CC2500_WriteREG:	
  3442  0023                     ??_setLED:	
  3443                           ; 0 bytes @ 0x3
  3444                           
  3445  0023                     ??_DelayOff_Initialization:	
  3446                           ; 0 bytes @ 0x3
  3447                           
  3448  0023                     ??_setDimmerLights_DimmingRun:	
  3449                           ; 0 bytes @ 0x3
  3450                           
  3451  0023                     ??_getAD:	
  3452                           ; 0 bytes @ 0x3
  3453                           
  3454  0023                     CC2500_WriteCommand@command:	
  3455                           ; 0 bytes @ 0x3
  3456                           
  3457  0023                     CC2500_ReadStatus@status_addr:	
  3458                           ; 1 bytes @ 0x3
  3459                           
  3460  0023                     getDelayOff_GO@go:	
  3461                           ; 1 bytes @ 0x3
  3462                           
  3463  0023                     _getDimmerLights_Allow_Condition$2249:	
  3464                           ; 1 bytes @ 0x3
  3465                           
  3466  0023                     getDimmerLights_Status@status:	
  3467                           ; 1 bytes @ 0x3
  3468                           
  3469  0023                     setLED@led:	
  3470                           ; 1 bytes @ 0x3
  3471                           
  3472  0023                     getAD@adcon0:	
  3473                           ; 1 bytes @ 0x3
  3474                           
  3475  0023                     Flash_Memory_Read@ret:	
  3476                           ; 1 bytes @ 0x3
  3477                           
  3478  0023                     ___bmul@multiplier:	
  3479                           ; 1 bytes @ 0x3
  3480                           
  3481  0023                     ___ftpack@exp:	
  3482                           ; 1 bytes @ 0x3
  3483                           
  3484  0023                     _getMain_All_Error_Status$3569:	
  3485                           ; 1 bytes @ 0x3
  3486                           
  3487                           
  3488                           ; 2 bytes @ 0x3
  3489  0023                     	ds	1
  3490  0024                     ??_CC2500_ClearTXFIFO:	
  3491  0024                     ??_CC2500_ClearRXFIFO:	
  3492                           ; 0 bytes @ 0x4
  3493                           
  3494  0024                     ??_CC2500_SIDLEMode:	
  3495                           ; 0 bytes @ 0x4
  3496                           
  3497  0024                     ??_setLED_Initialization:	
  3498                           ; 0 bytes @ 0x4
  3499                           
  3500  0024                     ??_Flash_Memory_Modify:	
  3501                           ; 0 bytes @ 0x4
  3502                           
  3503  0024                     ??_getLoad_AD:	
  3504                           ; 0 bytes @ 0x4
  3505                           
  3506  0024                     ??_getTemp_AD:	
  3507                           ; 0 bytes @ 0x4
  3508                           
  3509  0024                     ??_RF_RxDisable:	
  3510                           ; 0 bytes @ 0x4
  3511                           
  3512  0024                     ??_setSw_Initialization:	
  3513                           ; 0 bytes @ 0x4
  3514                           
  3515  0024                     ??_CC2500_TxData:	
  3516                           ; 0 bytes @ 0x4
  3517                           
  3518  0024                     ??_CC2500_RxData:	
  3519                           ; 0 bytes @ 0x4
  3520                           
  3521  0024                     ??_Flash_Memory_Initialization:	
  3522                           ; 0 bytes @ 0x4
  3523                           
  3524  0024                     ??___wmul:	
  3525                           ; 0 bytes @ 0x4
  3526                           
  3527  0024                     ??___awdiv:	
  3528                           ; 0 bytes @ 0x4
  3529                           
  3530  0024                     ??___lwdiv:	
  3531                           ; 0 bytes @ 0x4
  3532                           
  3533  0024                     CC2500_WriteREG@w_addr:	
  3534                           ; 0 bytes @ 0x4
  3535                           
  3536  0024                     setDimmerLights_DimmingRun@lights:	
  3537                           ; 1 bytes @ 0x4
  3538                           
  3539  0024                     setLED_Initialization@led:	
  3540                           ; 1 bytes @ 0x4
  3541                           
  3542  0024                     setLED_Main@led:	
  3543                           ; 1 bytes @ 0x4
  3544                           
  3545  0024                     setSw_Initialization@sw:	
  3546                           ; 1 bytes @ 0x4
  3547                           
  3548  0024                     ___ftpack@sign:	
  3549                           ; 1 bytes @ 0x4
  3550                           
  3551  0024                     getBuz_GO@i:	
  3552                           ; 1 bytes @ 0x4
  3553                           
  3554  0024                     DelayTime_1us@j:	
  3555                           ; 2 bytes @ 0x4
  3556                           
  3557  0024                     ___wmul@product:	
  3558                           ; 2 bytes @ 0x4
  3559                           
  3560                           
  3561                           ; 2 bytes @ 0x4
  3562  0024                     	ds	1
  3563  0025                     ??_CC2500_InitSetREG:	
  3564  0025                     ??_CC2500_InitPATable:	
  3565                           ; 0 bytes @ 0x5
  3566                           
  3567  0025                     ??_Switch_Initialization:	
  3568                           ; 0 bytes @ 0x5
  3569                           
  3570  0025                     ??___ftpack:	
  3571                           ; 0 bytes @ 0x5
  3572                           
  3573  0025                     ??_LED_Initialization:	
  3574                           ; 0 bytes @ 0x5
  3575                           
  3576  0025                     ??_LED_Main:	
  3577                           ; 0 bytes @ 0x5
  3578                           
  3579  0025                     CC2500_TxData@loop_e:	
  3580                           ; 0 bytes @ 0x5
  3581                           
  3582  0025                     CC2500_RxData@loop_f:	
  3583                           ; 1 bytes @ 0x5
  3584                           
  3585  0025                     Flash_Memory_Initialization@value:	
  3586                           ; 1 bytes @ 0x5
  3587                           
  3588  0025                     Flash_Memory_Modify@i:	
  3589                           ; 1 bytes @ 0x5
  3590                           
  3591  0025                     getMain_All_Error_Status@command:	
  3592                           ; 1 bytes @ 0x5
  3593                           
  3594  0025                     getTemp_AD@channel:	
  3595                           ; 1 bytes @ 0x5
  3596                           
  3597  0025                     ___awdiv@counter:	
  3598                           ; 1 bytes @ 0x5
  3599                           
  3600  0025                     ___lwdiv@quotient:	
  3601                           ; 1 bytes @ 0x5
  3602                           
  3603                           
  3604                           ; 2 bytes @ 0x5
  3605  0025                     	ds	1
  3606  0026                     ??_CC2500_PowerRST:	
  3607  0026                     ??_CC2500_FrequencyCabr:	
  3608                           ; 0 bytes @ 0x6
  3609                           
  3610  0026                     ??_Flash_Memory_Main:	
  3611                           ; 0 bytes @ 0x6
  3612                           
  3613  0026                     CC2500_InitSetREG@temp1:	
  3614                           ; 0 bytes @ 0x6
  3615                           
  3616  0026                     CC2500_InitPATable@temp:	
  3617                           ; 1 bytes @ 0x6
  3618                           
  3619  0026                     getMain_All_Error_Status@status:	
  3620                           ; 1 bytes @ 0x6
  3621                           
  3622  0026                     getLoad_AD@channel:	
  3623                           ; 1 bytes @ 0x6
  3624                           
  3625  0026                     ___awdiv@sign:	
  3626                           ; 1 bytes @ 0x6
  3627                           
  3628  0026                     getTemp_AD@ADRES:	
  3629                           ; 1 bytes @ 0x6
  3630                           
  3631                           
  3632                           ; 2 bytes @ 0x6
  3633  0026                     	ds	1
  3634  0027                     CC2500_InitSetREG@temp2:	
  3635  0027                     CC2500_InitPATable@loop_d:	
  3636                           ; 1 bytes @ 0x7
  3637                           
  3638  0027                     Flash_Memory_Main@key_Status:	
  3639                           ; 1 bytes @ 0x7
  3640                           
  3641  0027                     getLoad_AD@k:	
  3642                           ; 1 bytes @ 0x7
  3643                           
  3644  0027                     ___lwdiv@counter:	
  3645                           ; 1 bytes @ 0x7
  3646                           
  3647  0027                     ___awdiv@quotient:	
  3648                           ; 1 bytes @ 0x7
  3649                           
  3650                           
  3651                           ; 2 bytes @ 0x7
  3652  0027                     	ds	1
  3653  0028                     ??_Load_Main:	
  3654  0028                     ?___awtoft:	
  3655                           ; 0 bytes @ 0x8
  3656                           
  3657  0028                     CC2500_InitSetREG@loop_c:	
  3658                           ; 3 bytes @ 0x8
  3659                           
  3660  0028                     _Flash_Memory_Main$3112:	
  3661                           ; 1 bytes @ 0x8
  3662                           
  3663  0028                     getLoad_AD@j:	
  3664                           ; 1 bytes @ 0x8
  3665                           
  3666  0028                     ___awtoft@c:	
  3667                           ; 1 bytes @ 0x8
  3668                           
  3669                           
  3670                           ; 2 bytes @ 0x8
  3671  0028                     	ds	1
  3672  0029                     ?_setBuz:	
  3673  0029                     ??_CC2500_PowerOnInitial:	
  3674                           ; 0 bytes @ 0x9
  3675                           
  3676  0029                     setBuz@time:	
  3677                           ; 0 bytes @ 0x9
  3678                           
  3679  0029                     getLoad_AD@ADRES:	
  3680                           ; 2 bytes @ 0x9
  3681                           
  3682                           
  3683                           ; 2 bytes @ 0x9
  3684  0029                     	ds	1
  3685  002A                     _Load_Main$3939:	
  3686                           
  3687                           ; 2 bytes @ 0xA
  3688  002A                     	ds	1
  3689  002B                     ??_setBuz:	
  3690  002B                     ??___awtoft:	
  3691                           ; 0 bytes @ 0xB
  3692                           
  3693  002B                     getLoad_AD@i:	
  3694                           ; 0 bytes @ 0xB
  3695                           
  3696                           
  3697                           ; 1 bytes @ 0xB
  3698  002B                     	ds	1
  3699  002C                     setBuz@count:	
  3700  002C                     Load_Main@error:	
  3701                           ; 1 bytes @ 0xC
  3702                           
  3703                           
  3704                           ; 1 bytes @ 0xC
  3705  002C                     	ds	1
  3706  002D                     ??_setDimmerLights_SwOn:	
  3707  002D                     ??_my_MainTimer:	
  3708                           ; 0 bytes @ 0xD
  3709                           
  3710  002D                     ??_Exception_Main:	
  3711                           ; 0 bytes @ 0xD
  3712                           
  3713  002D                     setDimmerLights_SwOn@sw:	
  3714                           ; 0 bytes @ 0xD
  3715                           
  3716  002D                     Load_Main@ErrorCountValue:	
  3717                           ; 1 bytes @ 0xD
  3718                           
  3719  002D                     ___awtoft@sign:	
  3720                           ; 1 bytes @ 0xD
  3721                           
  3722                           
  3723                           ; 1 bytes @ 0xD
  3724  002D                     	ds	1
  3725  002E                     ?___ftdiv:	
  3726  002E                     ?___ftmul:	
  3727                           ; 3 bytes @ 0xE
  3728                           
  3729  002E                     setDimmerLights_SwOn@idle:	
  3730                           ; 3 bytes @ 0xE
  3731                           
  3732  002E                     Exception_Main@status:	
  3733                           ; 1 bytes @ 0xE
  3734                           
  3735  002E                     Load_Main@Load_RunStatus:	
  3736                           ; 1 bytes @ 0xE
  3737                           
  3738  002E                     ___ftdiv@f2:	
  3739                           ; 1 bytes @ 0xE
  3740                           
  3741  002E                     ___ftmul@f1:	
  3742                           ; 3 bytes @ 0xE
  3743                           
  3744                           
  3745                           ; 3 bytes @ 0xE
  3746  002E                     	ds	1
  3747  002F                     ??_setSw_Main:	
  3748  002F                     Exception_Main@count:	
  3749                           ; 0 bytes @ 0xF
  3750                           
  3751  002F                     Load_Main@LightsCount:	
  3752                           ; 1 bytes @ 0xF
  3753                           
  3754                           
  3755                           ; 1 bytes @ 0xF
  3756  002F                     	ds	1
  3757  0030                     Exception_Main@i:	
  3758  0030                     Load_Main@i:	
  3759                           ; 2 bytes @ 0x10
  3760                           
  3761                           
  3762                           ; 2 bytes @ 0x10
  3763  0030                     	ds	1
  3764  0031                     setSw_Main@sw:	
  3765  0031                     ___ftdiv@f1:	
  3766                           ; 1 bytes @ 0x11
  3767                           
  3768  0031                     ___ftmul@f2:	
  3769                           ; 3 bytes @ 0x11
  3770                           
  3771                           
  3772                           ; 3 bytes @ 0x11
  3773  0031                     	ds	1
  3774  0032                     ??_Switch_Main:	
  3775  0032                     Exception_Main@i_3580:	
  3776                           ; 0 bytes @ 0x12
  3777                           
  3778                           
  3779                           ; 2 bytes @ 0x12
  3780  0032                     	ds	2
  3781  0034                     ??___ftdiv:	
  3782  0034                     ??___ftmul:	
  3783                           ; 0 bytes @ 0x14
  3784                           
  3785  0034                     Exception_Main@error:	
  3786                           ; 0 bytes @ 0x14
  3787                           
  3788                           
  3789                           ; 1 bytes @ 0x14
  3790  0034                     	ds	1
  3791  0035                     Exception_Main@lights:	
  3792                           
  3793                           ; 1 bytes @ 0x15
  3794  0035                     	ds	3
  3795  0038                     ___ftdiv@cntr:	
  3796  0038                     ___ftmul@exp:	
  3797                           ; 1 bytes @ 0x18
  3798                           
  3799                           
  3800                           ; 1 bytes @ 0x18
  3801  0038                     	ds	1
  3802  0039                     ___ftdiv@f3:	
  3803  0039                     ___ftmul@f3_as_product:	
  3804                           ; 3 bytes @ 0x19
  3805                           
  3806                           
  3807                           ; 3 bytes @ 0x19
  3808  0039                     	ds	3
  3809  003C                     ___ftdiv@exp:	
  3810  003C                     ___ftmul@cntr:	
  3811                           ; 1 bytes @ 0x1C
  3812                           
  3813                           
  3814                           ; 1 bytes @ 0x1C
  3815  003C                     	ds	1
  3816  003D                     ___ftdiv@sign:	
  3817  003D                     ___ftmul@sign:	
  3818                           ; 1 bytes @ 0x1D
  3819                           
  3820                           
  3821                           ; 1 bytes @ 0x1D
  3822  003D                     	ds	1
  3823  003E                     ?___ftneg:	
  3824  003E                     ___ftneg@f1:	
  3825                           ; 3 bytes @ 0x1E
  3826                           
  3827                           
  3828                           ; 3 bytes @ 0x1E
  3829  003E                     	ds	3
  3830  0041                     ??___ftneg:	
  3831  0041                     ?___ftadd:	
  3832                           ; 0 bytes @ 0x21
  3833                           
  3834  0041                     ___ftadd@f1:	
  3835                           ; 3 bytes @ 0x21
  3836                           
  3837                           
  3838                           ; 3 bytes @ 0x21
  3839  0041                     	ds	3
  3840  0044                     ___ftadd@f2:	
  3841                           
  3842                           ; 3 bytes @ 0x24
  3843  0044                     	ds	3
  3844  0047                     ??___ftadd:	
  3845                           
  3846                           ; 0 bytes @ 0x27
  3847  0047                     	ds	4
  3848  004B                     ___ftadd@sign:	
  3849                           
  3850                           ; 1 bytes @ 0x2B
  3851  004B                     	ds	1
  3852  004C                     ___ftadd@exp2:	
  3853                           
  3854                           ; 1 bytes @ 0x2C
  3855  004C                     	ds	1
  3856  004D                     ___ftadd@exp1:	
  3857                           
  3858                           ; 1 bytes @ 0x2D
  3859  004D                     	ds	1
  3860  004E                     ?___fttol:	
  3861  004E                     ___fttol@f1:	
  3862                           ; 4 bytes @ 0x2E
  3863                           
  3864                           
  3865                           ; 3 bytes @ 0x2E
  3866  004E                     	ds	4
  3867  0052                     ??___fttol:	
  3868                           
  3869                           ; 0 bytes @ 0x32
  3870  0052                     	ds	4
  3871  0056                     ___fttol@sign1:	
  3872                           
  3873                           ; 1 bytes @ 0x36
  3874  0056                     	ds	1
  3875  0057                     ___fttol@lval:	
  3876                           
  3877                           ; 4 bytes @ 0x37
  3878  0057                     	ds	4
  3879  005B                     ___fttol@exp1:	
  3880                           
  3881                           ; 1 bytes @ 0x3B
  3882  005B                     	ds	1
  3883  005C                     ??_getDimmerLights_ValueToPercent:	
  3884  005C                     ??_getDimmerLights_PercentToValue:	
  3885                           ; 0 bytes @ 0x3C
  3886                           
  3887                           
  3888                           ; 0 bytes @ 0x3C
  3889  005C                     	ds	2
  3890  005E                     getDimmerLights_PercentToValue@value:	
  3891  005E                     getDimmerLights_ValueToPercent@value:	
  3892                           ; 1 bytes @ 0x3E
  3893                           
  3894                           
  3895                           ; 1 bytes @ 0x3E
  3896  005E                     	ds	1
  3897  005F                     getDimmerLights_PercentToValue@i:	
  3898  005F                     getDimmerLights_ValueToPercent@i:	
  3899                           ; 3 bytes @ 0x3F
  3900                           
  3901                           
  3902                           ; 3 bytes @ 0x3F
  3903  005F                     	ds	3
  3904  0062                     ?_setProductData:	
  3905  0062                     ??_DimmerIntr_Initialization:	
  3906                           ; 0 bytes @ 0x42
  3907                           
  3908  0062                     ?_setDimmerIntr_DimmingValue:	
  3909                           ; 0 bytes @ 0x42
  3910                           
  3911  0062                     ?_setDimmerIntr_MaxmumValue:	
  3912                           ; 0 bytes @ 0x42
  3913                           
  3914  0062                     setDimmerIntr_DimmingValue@value:	
  3915                           ; 0 bytes @ 0x42
  3916                           
  3917  0062                     setDimmerIntr_MaxmumValue@value:	
  3918                           ; 1 bytes @ 0x42
  3919                           
  3920  0062                     setProductData@value:	
  3921                           ; 1 bytes @ 0x42
  3922                           
  3923                           
  3924                           ; 1 bytes @ 0x42
  3925  0062                     	ds	1
  3926  0063                     ??_setProductData:	
  3927  0063                     ??_setDimmerIntr_DimmingValue:	
  3928                           ; 0 bytes @ 0x43
  3929                           
  3930  0063                     ??_setDimmerIntr_MaxmumValue:	
  3931                           ; 0 bytes @ 0x43
  3932                           
  3933  0063                     ??_DimmerLights_Initialization:	
  3934                           ; 0 bytes @ 0x43
  3935                           
  3936                           
  3937                           ; 0 bytes @ 0x43
  3938  0063                     	ds	1
  3939  0064                     setDimmerIntr_DimmingValue@lights:	
  3940  0064                     setDimmerIntr_MaxmumValue@lights:	
  3941                           ; 1 bytes @ 0x44
  3942                           
  3943  0064                     setProductData@address:	
  3944                           ; 1 bytes @ 0x44
  3945                           
  3946                           
  3947                           ; 1 bytes @ 0x44
  3948  0064                     	ds	1
  3949  0065                     ??_DlyOff_Main:	
  3950  0065                     ?_setRF_DimmerLights:	
  3951                           ; 0 bytes @ 0x45
  3952                           
  3953  0065                     ??_setTemp_Main:	
  3954                           ; 0 bytes @ 0x45
  3955                           
  3956  0065                     ??_setLog_Code:	
  3957                           ; 0 bytes @ 0x45
  3958                           
  3959  0065                     ??_setRFSW_AdjControl:	
  3960                           ; 0 bytes @ 0x45
  3961                           
  3962  0065                     ?_setDelayOff_GO:	
  3963                           ; 0 bytes @ 0x45
  3964                           
  3965  0065                     setDelayOff_GO@command:	
  3966                           ; 0 bytes @ 0x45
  3967                           
  3968  0065                     setRF_DimmerLights@on:	
  3969                           ; 1 bytes @ 0x45
  3970                           
  3971                           
  3972                           ; 1 bytes @ 0x45
  3973  0065                     	ds	1
  3974  0066                     ??_setRF_DimmerLights:	
  3975  0066                     setDelayOff_GO@value:	
  3976                           ; 0 bytes @ 0x46
  3977                           
  3978  0066                     setTemp_Main@error:	
  3979                           ; 1 bytes @ 0x46
  3980                           
  3981                           
  3982                           ; 1 bytes @ 0x46
  3983  0066                     	ds	1
  3984  0067                     ??_setDelayOff_GO:	
  3985  0067                     DlyOff_Main@sw:	
  3986                           ; 0 bytes @ 0x47
  3987                           
  3988  0067                     setRFSW_AdjControl@status:	
  3989                           ; 1 bytes @ 0x47
  3990                           
  3991  0067                     setTemp_Main@SafeValue:	
  3992                           ; 1 bytes @ 0x47
  3993                           
  3994                           
  3995                           ; 2 bytes @ 0x47
  3996  0067                     	ds	1
  3997  0068                     ??_DelayOff_Main:	
  3998  0068                     setRFSW_AdjControl@sw:	
  3999                           ; 0 bytes @ 0x48
  4000                           
  4001  0068                     setRF_DimmerLights@status:	
  4002                           ; 1 bytes @ 0x48
  4003                           
  4004                           
  4005                           ; 1 bytes @ 0x48
  4006  0068                     	ds	1
  4007  0069                     setDelayOff_GO@i:	
  4008  0069                     setRF_DimmerLights@lights:	
  4009                           ; 1 bytes @ 0x49
  4010                           
  4011  0069                     setTemp_Main@DangerValue:	
  4012                           ; 1 bytes @ 0x49
  4013                           
  4014                           
  4015                           ; 2 bytes @ 0x49
  4016  0069                     	ds	1
  4017  006A                     ?_setDimmerLights_Dimming:	
  4018  006A                     setDelayOff_GO@j:	
  4019                           ; 0 bytes @ 0x4A
  4020                           
  4021  006A                     setDimmerLights_Dimming@status:	
  4022                           ; 1 bytes @ 0x4A
  4023                           
  4024                           
  4025                           ; 1 bytes @ 0x4A
  4026  006A                     	ds	1
  4027  006B                     ??_setDimmerLights_Dimming:	
  4028  006B                     setDelayOff_GO@k:	
  4029                           ; 0 bytes @ 0x4B
  4030                           
  4031  006B                     setTemp_Main@TempGO:	
  4032                           ; 1 bytes @ 0x4B
  4033                           
  4034                           
  4035                           ; 1 bytes @ 0x4B
  4036  006B                     	ds	1
  4037  006C                     setDelayOff_GO@sw:	
  4038  006C                     setDimmerLights_Dimming@value:	
  4039                           ; 1 bytes @ 0x4C
  4040                           
  4041  006C                     setTemp_Main@AD:	
  4042                           ; 1 bytes @ 0x4C
  4043                           
  4044                           
  4045                           ; 2 bytes @ 0x4C
  4046  006C                     	ds	1
  4047  006D                     ?_setDimmerLights_OnOff:	
  4048  006D                     ??_setRFSW_Control:	
  4049                           ; 0 bytes @ 0x4D
  4050                           
  4051  006D                     setDimmerLights_OnOff@command:	
  4052                           ; 0 bytes @ 0x4D
  4053                           
  4054  006D                     setDimmerLights_Dimming@lights:	
  4055                           ; 1 bytes @ 0x4D
  4056                           
  4057                           
  4058                           ; 1 bytes @ 0x4D
  4059  006D                     	ds	1
  4060  006E                     ??_setDimmerLights_OnOff:	
  4061  006E                     ??_Temp_Main:	
  4062                           ; 0 bytes @ 0x4E
  4063                           
  4064  006E                     setRFSW_Control@status:	
  4065                           ; 0 bytes @ 0x4E
  4066                           
  4067                           
  4068                           ; 1 bytes @ 0x4E
  4069  006E                     	ds	1
  4070  006F                     setRFSW_Control@sw:	
  4071                           
  4072                           ; 1 bytes @ 0x4F
  4073  006F                     	ds	1
  4074  0070                     ??_setDimmerLights_Main:	
  4075  0070                     ??_RF_Main:	
  4076                           ; 0 bytes @ 0x50
  4077                           
  4078  0070                     ??_setControl_Lights_Table:	
  4079                           ; 0 bytes @ 0x50
  4080                           
  4081  0070                     ??_DimmerLights_Main:	
  4082                           ; 0 bytes @ 0x50
  4083                           
  4084  0070                     ??_main:	
  4085                           ; 0 bytes @ 0x50
  4086                           
  4087                           
  4088                           	psect	maintext
  4089  15AA                     __pmaintext:	
  4090                           ; 0 bytes @ 0x50
  4091 ;;
  4092 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4093 ;;
  4094 ;; *************** function _main *****************
  4095 ;; Defined at:
  4096 ;;		line 7 in file "../src/Main_B1.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;  argc            2    4[BANK1 ] int 
  4099 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;		None
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  2    4[BANK1 ] int 
  4104 ;; Registers used:
  4105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4106 ;; Tracked objects:
  4107 ;;		On entry : 17F/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4111 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4114 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4115 ;;Total ram usage:        4 bytes
  4116 ;; Hardware stack levels required when called:   13
  4117 ;; This function calls:
  4118 ;;		_Buzzer_Initialization
  4119 ;;		_Buzzer_Main
  4120 ;;		_CC2500_PowerOnInitial
  4121 ;;		_DelayOff_Initialization
  4122 ;;		_DelayOff_Main
  4123 ;;		_DimmerLights_Initialization
  4124 ;;		_DimmerLights_Main
  4125 ;;		_Exception_Main
  4126 ;;		_Flash_Memory_Initialization
  4127 ;;		_Flash_Memory_Main
  4128 ;;		_LED_Initialization
  4129 ;;		_LED_Main
  4130 ;;		_Load_Initialization
  4131 ;;		_Load_Main
  4132 ;;		_Mcu_Initialization
  4133 ;;		_RF_Initialization
  4134 ;;		_RF_Main
  4135 ;;		_Switch_Initialization
  4136 ;;		_Switch_Main
  4137 ;;		_Temp_Initialization
  4138 ;;		_Temp_Main
  4139 ;;		_WDT_Main
  4140 ;;		_getLoad_AD
  4141 ;;		_getTemp_AD
  4142 ;;		_myMain_Initialization
  4143 ;;		_my_MainTimer
  4144 ;; This function is called by:
  4145 ;;		Startup code after reset
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           
  4150                           ;psect for function _main
  4151  15AA                     _main:	
  4152                           
  4153                           ;Main_B1.c: 8: myMain_Initialization();
  4154                           
  4155                           ;incstack = 0
  4156                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4157  15AA  3188  2000  3195   	fcall	_myMain_Initialization
  4158                           
  4159                           ;Main_B1.c: 9: Mcu_Initialization();
  4160  15AD  319D  2580  3195   	fcall	_Mcu_Initialization
  4161                           
  4162                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4163  15B0  3186  2621  3195   	fcall	_Flash_Memory_Initialization
  4164                           
  4165                           ;Main_B1.c: 11: LED_Initialization();
  4166  15B3  319B  2367  3195   	fcall	_LED_Initialization
  4167                           
  4168                           ;Main_B1.c: 12: Buzzer_Initialization();
  4169  15B6  319B  234D  3195   	fcall	_Buzzer_Initialization
  4170                           
  4171                           ;Main_B1.c: 14: ;;
  4172                           ;Main_B1.c: 15: Temp_Initialization();
  4173  15B9  319B  2359  3195   	fcall	_Temp_Initialization
  4174                           
  4175                           ;Main_B1.c: 16: Load_Initialization();
  4176  15BC  319B  2350  3195   	fcall	_Load_Initialization
  4177                           
  4178                           ;Main_B1.c: 17: ;;
  4179                           ;Main_B1.c: 18: DelayOff_Initialization();
  4180  15BF  319B  235F  3195   	fcall	_DelayOff_Initialization
  4181                           
  4182                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4183  15C2  319B  239E  3195   	fcall	_DimmerLights_Initialization
  4184                           
  4185                           ;Main_B1.c: 21: ;;
  4186                           ;Main_B1.c: 22: ;;
  4187                           ;Main_B1.c: 23: ;;
  4188                           ;Main_B1.c: 24: Switch_Initialization();
  4189  15C5  319B  2383  3195   	fcall	_Switch_Initialization
  4190                           
  4191                           ;Main_B1.c: 25: RF_Initialization();
  4192  15C8  319B  2353  3195   	fcall	_RF_Initialization
  4193                           
  4194                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4195  15CB  319E  2619  3195   	fcall	_CC2500_PowerOnInitial
  4196  15CE                     l8211:	
  4197                           ;Main_B1.c: 27: ;;
  4198                           ;Main_B1.c: 28: ;;
  4199                           ;Main_B1.c: 30: while (1) {
  4200                           
  4201                           
  4202                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4203  15CE  0021               	movlb	1	; select bank1
  4204  15CF  1C2E               	btfss	_myMain^(0+128),0
  4205  15D0  2DD9               	goto	l8215
  4206                           
  4207                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4208  15D1  3005               	movlw	5
  4209  15D2  318A  22AC  3195   	fcall	_getLoad_AD
  4210                           
  4211                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4212  15D5  3009               	movlw	9
  4213  15D6  3193  23E2  3195   	fcall	_getTemp_AD
  4214  15D9                     l8215:	
  4215                           
  4216                           ;Main_B1.c: 57: }
  4217                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4218  15D9  0022               	movlb	2	; select bank2
  4219  15DA  1C25               	btfss	_Timer1^(0+256),0
  4220  15DB  2DCE               	goto	l8211
  4221                           
  4222                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4223  15DC  1025               	bcf	_Timer1^(0+256),0
  4224                           
  4225                           ;Main_B1.c: 96: my_MainTimer();
  4226  15DD  3193  2366  3195   	fcall	_my_MainTimer
  4227                           
  4228                           ;Main_B1.c: 97: WDT_Main();
  4229  15E0  319D  2592  3195   	fcall	_WDT_Main
  4230                           
  4231                           ;Main_B1.c: 98: ;;
  4232                           ;Main_B1.c: 99: ;;
  4233                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4234  15E3  0021               	movlb	1	; select bank1
  4235  15E4  1C2E               	btfss	_myMain^(0+128),0
  4236  15E5  2DCE               	goto	l8211
  4237                           
  4238                           ;Main_B1.c: 101: Flash_Memory_Main();
  4239  15E6  3194  2422  3195   	fcall	_Flash_Memory_Main
  4240                           
  4241                           ;Main_B1.c: 103: LED_Main();
  4242  15E9  319B  236B  3195   	fcall	_LED_Main
  4243                           
  4244                           ;Main_B1.c: 104: Buzzer_Main();
  4245  15EC  3187  27AE  3195   	fcall	_Buzzer_Main
  4246                           
  4247                           ;Main_B1.c: 106: ;;
  4248                           ;Main_B1.c: 107: Temp_Main();
  4249  15EF  319B  235C  3195   	fcall	_Temp_Main
  4250                           
  4251                           ;Main_B1.c: 108: Load_Main();
  4252  15F2  3180  204B  3195   	fcall	_Load_Main
  4253                           
  4254                           ;Main_B1.c: 109: ;;
  4255                           ;Main_B1.c: 111: ;;
  4256                           ;Main_B1.c: 112: DimmerLights_Main();
  4257  15F5  319F  274F  3195   	fcall	_DimmerLights_Main
  4258                           
  4259                           ;Main_B1.c: 113: Switch_Main();
  4260  15F8  319B  23AC  3195   	fcall	_Switch_Main
  4261                           
  4262                           ;Main_B1.c: 114: ;;
  4263                           ;Main_B1.c: 115: ;;
  4264                           ;Main_B1.c: 117: RF_Main();
  4265  15FB  319B  2356  3195   	fcall	_RF_Main
  4266                           
  4267                           ;Main_B1.c: 118: DelayOff_Main();
  4268  15FE  319B  2363  3195   	fcall	_DelayOff_Main
  4269                           
  4270                           ;Main_B1.c: 119: ;;
  4271                           ;Main_B1.c: 120: ;;
  4272                           ;Main_B1.c: 121: Exception_Main();
  4273  1601  3185  254C  3195   	fcall	_Exception_Main
  4274  1604  2DCE               	goto	l8211
  4275  1605                     __end_of_main:	
  4276                           ;Main_B1.c: 128: }
  4277                           ;Main_B1.c: 129: }
  4278                           ;Main_B1.c: 163: }
  4279                           ;Main_B1.c: 164: return (0);
  4280                           ;	Return value of _main is never used
  4281                           
  4282                           
  4283                           	psect	text1
  4284  1366                     __ptext1:	
  4285 ;; *************** function _my_MainTimer *****************
  4286 ;; Defined at:
  4287 ;;		line 185 in file "../src/Main_B1.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;		None
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;		None
  4292 ;; Return value:  Size  Location     Type
  4293 ;;		None               void
  4294 ;; Registers used:
  4295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4303 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4304 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4305 ;;Total ram usage:        1 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; Hardware stack levels required when called:    7
  4308 ;; This function calls:
  4309 ;;		_setBuz
  4310 ;; This function is called by:
  4311 ;;		_main
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           
  4316                           ;psect for function _my_MainTimer
  4317  1366                     _my_MainTimer:	
  4318                           
  4319                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4320                           
  4321                           ;incstack = 0
  4322                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4323  1366  0021               	movlb	1	; select bank1
  4324  1367  182E               	btfsc	_myMain^(0+128),0
  4325  1368  2B80               	goto	l7855
  4326                           
  4327                           ;Main_B1.c: 188: myMain.PowerCount++;
  4328  1369  3001               	movlw	1
  4329  136A  0020               	movlb	0	; select bank0
  4330  136B  00AD               	movwf	??_my_MainTimer
  4331  136C  082D               	movf	??_my_MainTimer,w
  4332  136D  0021               	movlb	1	; select bank1
  4333  136E  07AF               	addwf	(_myMain^(0+128)+1),f
  4334                           
  4335                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4336  136F  082F               	movf	(_myMain^(0+128)+1),w
  4337  1370  3A4B               	xorlw	75
  4338  1371  1D03               	skipz
  4339  1372  0008               	return
  4340                           
  4341                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4342  1373  01AF               	clrf	(_myMain^(0+128)+1)
  4343                           
  4344                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4345  1374  142E               	bsf	_myMain^(0+128),0
  4346                           
  4347                           ;Main_B1.c: 196: setBuz(3, 50);
  4348  1375  3032               	movlw	50
  4349  1376  0020               	movlb	0	; select bank0
  4350  1377  00A9               	movwf	setBuz@time
  4351  1378  3000               	movlw	0
  4352  1379  00AA               	movwf	setBuz@time+1
  4353  137A  3003               	movlw	3
  4354  137B  3195  2551         	fcall	_setBuz
  4355                           
  4356                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4357  137D  0021               	movlb	1	; select bank1
  4358  137E  162E               	bsf	_myMain^(0+128),4
  4359                           
  4360                           ;Main_B1.c: 206: }
  4361                           ;Main_B1.c: 207: } else {
  4362  137F  0008               	return
  4363  1380                     l7855:	
  4364                           
  4365                           ;Main_B1.c: 208: myMain.PowerCount++;
  4366  1380  3001               	movlw	1
  4367  1381  0020               	movlb	0	; select bank0
  4368  1382  00AD               	movwf	??_my_MainTimer
  4369  1383  082D               	movf	??_my_MainTimer,w
  4370  1384  0021               	movlb	1	; select bank1
  4371  1385  07AF               	addwf	(_myMain^(0+128)+1),f
  4372                           
  4373                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4374  1386  082F               	movf	(_myMain^(0+128)+1),w
  4375  1387  3A32               	xorlw	50
  4376  1388  1903               	btfsc	3,2
  4377                           
  4378                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4379  1389  01AF               	clrf	(_myMain^(0+128)+1)
  4380                           
  4381                           ;Main_B1.c: 226: }
  4382                           ;Main_B1.c: 228: myMain.Count1++;
  4383  138A  3001               	movlw	1
  4384  138B  07B2               	addwf	(_myMain^(0+128)+4),f
  4385  138C  3000               	movlw	0
  4386  138D  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4387                           
  4388                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4389  138E  3004               	movlw	4
  4390  138F  3EAE               	addlw	_myMain& (0+255)
  4391  1390  0086               	movwf	6
  4392  1391  0187               	clrf	7
  4393  1392  3F40               	moviw [0]fsr1
  4394  1393  3A32               	xorlw	50
  4395  1394  1D03               	skipz
  4396  1395  2B98               	goto	u7955
  4397  1396  3F41               	moviw [1]fsr1
  4398  1397  3A00               	xorlw	0
  4399  1398                     u7955:	
  4400  1398  1D03               	skipz
  4401  1399  0008               	return
  4402                           
  4403                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4404  139A  01B2               	clrf	(_myMain^(0+128)+4)
  4405  139B  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4406                           
  4407                           ;Main_B1.c: 242: if (myMain.Flag) {
  4408  139C  1CAE               	btfss	_myMain^(0+128),1
  4409  139D  2BA0               	goto	l1443
  4410                           
  4411                           ;Main_B1.c: 243: myMain.Flag = 0;
  4412  139E  10AE               	bcf	_myMain^(0+128),1
  4413                           
  4414                           ;Main_B1.c: 252: } else {
  4415  139F  0008               	return
  4416  13A0                     l1443:	
  4417                           
  4418                           ;Main_B1.c: 253: myMain.Flag = 1;
  4419  13A0  14AE               	bsf	_myMain^(0+128),1
  4420  13A1  0008               	return
  4421  13A2                     __end_of_my_MainTimer:	
  4422                           
  4423                           	psect	text2
  4424  0800                     __ptext2:	
  4425 ;; *************** function _myMain_Initialization *****************
  4426 ;; Defined at:
  4427 ;;		line 170 in file "../src/Main_B1.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;		None
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;		None
  4432 ;; Return value:  Size  Location     Type
  4433 ;;		None               void
  4434 ;; Registers used:
  4435 ;;		wreg, fsr1l, fsr1h
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4444 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4445 ;;Total ram usage:        1 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    5
  4448 ;; This function calls:
  4449 ;;		Nothing
  4450 ;; This function is called by:
  4451 ;;		_main
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           
  4456                           ;psect for function _myMain_Initialization
  4457  0800                     _myMain_Initialization:	
  4458                           
  4459                           ;Main_B1.c: 173: product = &_product;
  4460                           
  4461                           ;incstack = 0
  4462                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4463  0800  3020               	movlw	__product& (0+255)
  4464  0801  0020               	movlb	0	; select bank0
  4465  0802  00A0               	movwf	??_myMain_Initialization
  4466  0803  0820               	movf	??_myMain_Initialization,w
  4467  0804  0021               	movlb	1	; select bank1
  4468  0805  00EF               	movwf	_product^(0+128)
  4469                           
  4470                           ;Main_B1.c: 174: product->Data[20] = 209;
  4471  0806  30D1               	movlw	209
  4472  0807  0020               	movlb	0	; select bank0
  4473  0808  00A0               	movwf	??_myMain_Initialization
  4474  0809  0021               	movlb	1	; select bank1
  4475  080A  086F               	movf	_product^(0+128),w
  4476  080B  3E14               	addlw	20
  4477  080C  0086               	movwf	6
  4478  080D  3002               	movlw	2	; select bank4/5
  4479  080E  0087               	movwf	7
  4480  080F  0020               	movlb	0	; select bank0
  4481  0810  0820               	movf	??_myMain_Initialization,w
  4482  0811  0081               	movwf	1
  4483  0812  0008               	return
  4484  0813                     __end_of_myMain_Initialization:	
  4485                           
  4486                           	psect	text3
  4487  13E2                     __ptext3:	
  4488 ;; *************** function _getTemp_AD *****************
  4489 ;; Defined at:
  4490 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  channel         1    wreg     unsigned char 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  channel         1    5[BANK0 ] unsigned char 
  4495 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4496 ;; Return value:  Size  Location     Type
  4497 ;;		None               void
  4498 ;; Registers used:
  4499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;Total ram usage:        4 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    7
  4512 ;; This function calls:
  4513 ;;		_getAD
  4514 ;; This function is called by:
  4515 ;;		_main
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           
  4520                           ;psect for function _getTemp_AD
  4521  13E2                     _getTemp_AD:	
  4522                           
  4523                           ;incstack = 0
  4524                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4525                           ;getTemp_AD@channel stored from wreg
  4526  13E2  0020               	movlb	0	; select bank0
  4527  13E3  00A5               	movwf	getTemp_AD@channel
  4528                           
  4529                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4530  13E4  01A6               	clrf	getTemp_AD@ADRES
  4531  13E5  01A7               	clrf	getTemp_AD@ADRES+1
  4532                           
  4533                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4534  13E6  0021               	movlb	1	; select bank1
  4535  13E7  1D5C               	btfss	_Temp^(0+128),2
  4536  13E8  2C12               	goto	l7839
  4537                           
  4538                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4539  13E9  30F0               	movlw	240
  4540  13EA  0020               	movlb	0	; select bank0
  4541  13EB  00A4               	movwf	??_getTemp_AD
  4542  13EC  0824               	movf	??_getTemp_AD,w
  4543  13ED  00A0               	movwf	getAD@adcon1
  4544  13EE  0825               	movf	getTemp_AD@channel,w
  4545  13EF  3190  200C  3193   	fcall	_getAD
  4546  13F2  0020               	movlb	0	; select bank0
  4547  13F3  0821               	movf	?_getAD+1,w
  4548  13F4  01A7               	clrf	getTemp_AD@ADRES+1
  4549  13F5  07A7               	addwf	getTemp_AD@ADRES+1,f
  4550  13F6  0820               	movf	?_getAD,w
  4551  13F7  01A6               	clrf	getTemp_AD@ADRES
  4552  13F8  07A6               	addwf	getTemp_AD@ADRES,f
  4553                           
  4554                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4555  13F9  0827               	movf	getTemp_AD@ADRES+1,w
  4556  13FA  0426               	iorwf	getTemp_AD@ADRES,w
  4557  13FB  1903               	skipnz
  4558  13FC  2C12               	goto	l7839
  4559                           
  4560                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4561  13FD  0827               	movf	getTemp_AD@ADRES+1,w
  4562  13FE  0021               	movlb	1	; select bank1
  4563  13FF  0265               	subwf	((_Temp+1)^(0+128)+8),w
  4564  1400  1D03               	skipz
  4565  1401  2C06               	goto	u7915
  4566  1402  0020               	movlb	0	; select bank0
  4567  1403  0826               	movf	getTemp_AD@ADRES,w
  4568  1404  0021               	movlb	1	; select bank1
  4569  1405  0264               	subwf	(_Temp^(0+128)+8),w
  4570  1406                     u7915:	
  4571  1406  1803               	skipnc
  4572  1407  2C12               	goto	l7839
  4573                           
  4574                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4575  1408  0020               	movlb	0	; select bank0
  4576  1409  0827               	movf	getTemp_AD@ADRES+1,w
  4577  140A  0021               	movlb	1	; select bank1
  4578  140B  01E5               	clrf	((_Temp+1)^(0+128)+8)
  4579  140C  07E5               	addwf	((_Temp+1)^(0+128)+8),f
  4580  140D  0020               	movlb	0	; select bank0
  4581  140E  0826               	movf	getTemp_AD@ADRES,w
  4582  140F  0021               	movlb	1	; select bank1
  4583  1410  01E4               	clrf	(_Temp^(0+128)+8)
  4584  1411  07E4               	addwf	(_Temp^(0+128)+8),f
  4585  1412                     l7839:	
  4586                           
  4587                           ;OverTemperature_B1.c: 32: }
  4588                           ;OverTemperature_B1.c: 33: }
  4589                           ;OverTemperature_B1.c: 34: }
  4590                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4591  1412  30F0               	movlw	240
  4592  1413  0020               	movlb	0	; select bank0
  4593  1414  00A4               	movwf	??_getTemp_AD
  4594  1415  0824               	movf	??_getTemp_AD,w
  4595  1416  00A0               	movwf	getAD@adcon1
  4596  1417  0825               	movf	getTemp_AD@channel,w
  4597  1418  3190  200C         	fcall	_getAD
  4598  141A  0020               	movlb	0	; select bank0
  4599  141B  0821               	movf	?_getAD+1,w
  4600  141C  01A7               	clrf	getTemp_AD@ADRES+1
  4601  141D  07A7               	addwf	getTemp_AD@ADRES+1,f
  4602  141E  0820               	movf	?_getAD,w
  4603  141F  01A6               	clrf	getTemp_AD@ADRES
  4604  1420  07A6               	addwf	getTemp_AD@ADRES,f
  4605  1421  0008               	return
  4606  1422                     __end_of_getTemp_AD:	
  4607                           
  4608                           	psect	text4
  4609  0AAC                     __ptext4:	
  4610 ;; *************** function _getLoad_AD *****************
  4611 ;; Defined at:
  4612 ;;		line 15 in file "../src/OverLoad_B1.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;  channel         1    wreg     unsigned char 
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;  channel         1    6[BANK0 ] unsigned char 
  4617 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4618 ;;  i               1   11[BANK0 ] unsigned char 
  4619 ;;  j               1    8[BANK0 ] unsigned char 
  4620 ;;  k               1    7[BANK0 ] unsigned char 
  4621 ;; Return value:  Size  Location     Type
  4622 ;;		None               void
  4623 ;; Registers used:
  4624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4631 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4632 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4633 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4634 ;;Total ram usage:        8 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    7
  4637 ;; This function calls:
  4638 ;;		_getAD
  4639 ;; This function is called by:
  4640 ;;		_main
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           
  4645                           ;psect for function _getLoad_AD
  4646  0AAC                     _getLoad_AD:	
  4647                           
  4648                           ;incstack = 0
  4649                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4650                           ;getLoad_AD@channel stored from wreg
  4651  0AAC  0020               	movlb	0	; select bank0
  4652  0AAD  00A6               	movwf	getLoad_AD@channel
  4653                           
  4654                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4655  0AAE  01AB               	clrf	getLoad_AD@i
  4656  0AAF  01A8               	clrf	getLoad_AD@j
  4657  0AB0  01A7               	clrf	getLoad_AD@k
  4658                           
  4659                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4660  0AB1  01A9               	clrf	getLoad_AD@ADRES
  4661  0AB2  01AA               	clrf	getLoad_AD@ADRES+1
  4662                           
  4663                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4664  0AB3  0022               	movlb	2	; select bank2
  4665  0AB4  1E32               	btfss	_Load^(0+256),4
  4666  0AB5  0008               	return
  4667                           
  4668                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4669  0AB6  30F3               	movlw	243
  4670  0AB7  0020               	movlb	0	; select bank0
  4671  0AB8  00A4               	movwf	??_getLoad_AD
  4672  0AB9  0824               	movf	??_getLoad_AD,w
  4673  0ABA  00A0               	movwf	getAD@adcon1
  4674  0ABB  0826               	movf	getLoad_AD@channel,w
  4675  0ABC  3190  200C  318A   	fcall	_getAD
  4676  0ABF  0020               	movlb	0	; select bank0
  4677  0AC0  0821               	movf	?_getAD+1,w
  4678  0AC1  01AA               	clrf	getLoad_AD@ADRES+1
  4679  0AC2  07AA               	addwf	getLoad_AD@ADRES+1,f
  4680  0AC3  0820               	movf	?_getAD,w
  4681  0AC4  01A9               	clrf	getLoad_AD@ADRES
  4682  0AC5  07A9               	addwf	getLoad_AD@ADRES,f
  4683                           
  4684                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4685  0AC6  01AB               	clrf	getLoad_AD@i
  4686  0AC7  3004               	movlw	4
  4687  0AC8  022B               	subwf	getLoad_AD@i,w
  4688  0AC9  1803               	btfsc	3,0
  4689  0ACA  2AF2               	goto	l7807
  4690  0ACB                     l7795:	
  4691                           
  4692                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4693  0ACB  352B               	lslf	getLoad_AD@i,w
  4694  0ACC  3E3D               	addlw	(_Load+11)& (0+255)
  4695  0ACD  0086               	movwf	6
  4696  0ACE  3001               	movlw	1	; select bank2/3
  4697  0ACF  0087               	movwf	7
  4698  0AD0  3F40               	moviw [0]fsr1
  4699  0AD1  00A4               	movwf	??_getLoad_AD
  4700  0AD2  3F41               	moviw [1]fsr1
  4701  0AD3  00A5               	movwf	??_getLoad_AD+1
  4702  0AD4  082A               	movf	getLoad_AD@ADRES+1,w
  4703  0AD5  0225               	subwf	??_getLoad_AD+1,w
  4704  0AD6  1D03               	skipz
  4705  0AD7  2ADA               	goto	u7815
  4706  0AD8  0829               	movf	getLoad_AD@ADRES,w
  4707  0AD9  0224               	subwf	??_getLoad_AD,w
  4708  0ADA                     u7815:	
  4709  0ADA  1803               	skipnc
  4710  0ADB  2AEA               	goto	l7803
  4711  0ADC  08A8               	movf	getLoad_AD@j,f
  4712  0ADD  1D03               	skipz
  4713  0ADE  2AEA               	goto	l7803
  4714                           
  4715                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4716  0ADF  352B               	lslf	getLoad_AD@i,w
  4717  0AE0  3E3D               	addlw	(_Load+11)& (0+255)
  4718  0AE1  0086               	movwf	6
  4719  0AE2  3001               	movlw	1	; select bank2/3
  4720  0AE3  0087               	movwf	7
  4721  0AE4  0829               	movf	getLoad_AD@ADRES,w
  4722  0AE5  3FC0               	movwi [0]fsr1
  4723  0AE6  082A               	movf	getLoad_AD@ADRES+1,w
  4724  0AE7  3FC1               	movwi [1]fsr1
  4725                           
  4726                           ;OverLoad_B1.c: 24: j = 1;
  4727  0AE8  01A8               	clrf	getLoad_AD@j
  4728  0AE9  0AA8               	incf	getLoad_AD@j,f
  4729  0AEA                     l7803:	
  4730  0AEA  3001               	movlw	1
  4731  0AEB  00A4               	movwf	??_getLoad_AD
  4732  0AEC  0824               	movf	??_getLoad_AD,w
  4733  0AED  07AB               	addwf	getLoad_AD@i,f
  4734  0AEE  3004               	movlw	4
  4735  0AEF  022B               	subwf	getLoad_AD@i,w
  4736  0AF0  1C03               	skipc
  4737  0AF1  2ACB               	goto	l7795
  4738  0AF2                     l7807:	
  4739                           
  4740                           ;OverLoad_B1.c: 25: }
  4741                           ;OverLoad_B1.c: 26: }
  4742                           ;OverLoad_B1.c: 27: if (j == 0) {
  4743  0AF2  08A8               	movf	getLoad_AD@j,f
  4744  0AF3  1D03               	skipz
  4745  0AF4  0008               	return
  4746                           
  4747                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4748  0AF5  01AB               	clrf	getLoad_AD@i
  4749  0AF6                     L1:	
  4750  0AF6  3004               	movlw	4
  4751  0AF7  022B               	subwf	getLoad_AD@i,w
  4752  0AF8  1803               	btfsc	3,0
  4753  0AF9  0008               	return
  4754                           
  4755                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4756  0AFA  352B               	lslf	getLoad_AD@i,w
  4757  0AFB  3E47               	addlw	(_Load+21)& (0+255)
  4758  0AFC  0086               	movwf	6
  4759  0AFD  3001               	movlw	1	; select bank2/3
  4760  0AFE  0087               	movwf	7
  4761  0AFF  3F40               	moviw [0]fsr1
  4762  0B00  00A4               	movwf	??_getLoad_AD
  4763  0B01  3F41               	moviw [1]fsr1
  4764  0B02  00A5               	movwf	??_getLoad_AD+1
  4765  0B03  0825               	movf	??_getLoad_AD+1,w
  4766  0B04  022A               	subwf	getLoad_AD@ADRES+1,w
  4767  0B05  1D03               	skipz
  4768  0B06  2B09               	goto	u7865
  4769  0B07  0824               	movf	??_getLoad_AD,w
  4770  0B08  0229               	subwf	getLoad_AD@ADRES,w
  4771  0B09                     u7865:	
  4772  0B09  1803               	skipnc
  4773  0B0A  2B19               	goto	l7823
  4774  0B0B  08A7               	movf	getLoad_AD@k,f
  4775  0B0C  1D03               	skipz
  4776  0B0D  2B19               	goto	l7823
  4777                           
  4778                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4779  0B0E  352B               	lslf	getLoad_AD@i,w
  4780  0B0F  3E47               	addlw	(_Load+21)& (0+255)
  4781  0B10  0086               	movwf	6
  4782  0B11  3001               	movlw	1	; select bank2/3
  4783  0B12  0087               	movwf	7
  4784  0B13  0829               	movf	getLoad_AD@ADRES,w
  4785  0B14  3FC0               	movwi [0]fsr1
  4786  0B15  082A               	movf	getLoad_AD@ADRES+1,w
  4787  0B16  3FC1               	movwi [1]fsr1
  4788                           
  4789                           ;OverLoad_B1.c: 31: k = 1;
  4790  0B17  01A7               	clrf	getLoad_AD@k
  4791  0B18  0AA7               	incf	getLoad_AD@k,f
  4792  0B19                     l7823:	
  4793  0B19  3001               	movlw	1
  4794  0B1A  00A4               	movwf	??_getLoad_AD
  4795  0B1B  0824               	movf	??_getLoad_AD,w
  4796  0B1C  07AB               	addwf	getLoad_AD@i,f
  4797  0B1D  2AF6               	goto	L1
  4798  0B1E                     __end_of_getLoad_AD:	
  4799                           
  4800                           	psect	text5
  4801  100C                     __ptext5:	
  4802 ;; *************** function _getAD *****************
  4803 ;; Defined at:
  4804 ;;		line 459 in file "../src/MCU_B1.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;  adcon0          1    wreg     unsigned char 
  4807 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  2    0[BANK0 ] int 
  4812 ;; Registers used:
  4813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4819 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4822 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;Total ram usage:        4 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    6
  4826 ;; This function calls:
  4827 ;;		_Timeout_Counter
  4828 ;;		_set_TimeoutCleared
  4829 ;; This function is called by:
  4830 ;;		_getLoad_AD
  4831 ;;		_getTemp_AD
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           
  4836                           ;psect for function _getAD
  4837  100C                     _getAD:	
  4838                           
  4839                           ;incstack = 0
  4840                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4841                           ;getAD@adcon0 stored from wreg
  4842  100C  0020               	movlb	0	; select bank0
  4843  100D  00A3               	movwf	getAD@adcon0
  4844                           
  4845                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4846  100E  0823               	movf	getAD@adcon0,w
  4847  100F  0021               	movlb	1	; select bank1
  4848  1010  009D               	movwf	29	;volatile
  4849                           
  4850                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4851  1011  0020               	movlb	0	; select bank0
  4852  1012  0820               	movf	getAD@adcon1,w
  4853  1013  0021               	movlb	1	; select bank1
  4854  1014  009E               	movwf	30	;volatile
  4855                           
  4856                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4857  1015  149D               	bsf	29,1	;volatile
  4858                           
  4859                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4860  1016  281A               	goto	l7281
  4861  1017                     l7279:	
  4862                           
  4863                           ;MCU_B1.c: 464: Timeout_Counter();
  4864  1017  319E  262E  3190   	fcall	_Timeout_Counter
  4865  101A                     l7281:	
  4866  101A  0021               	movlb	1	; select bank1
  4867  101B  1C9D               	btfss	29,1	;volatile
  4868  101C  281F               	goto	l7285
  4869  101D  1D38               	btfss	(_myMain^(0+128)+10),2
  4870  101E  2817               	goto	l7279
  4871  101F                     l7285:	
  4872                           
  4873                           ;MCU_B1.c: 465: };
  4874                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4875  101F  319B  2387         	fcall	_set_TimeoutCleared
  4876                           
  4877                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4878  1021  0021               	movlb	1	; select bank1
  4879  1022  081C               	movf	28,w	;volatile
  4880  1023  0020               	movlb	0	; select bank0
  4881  1024  01A1               	clrf	?_getAD+1
  4882  1025  07A1               	addwf	?_getAD+1,f
  4883  1026  0021               	movlb	1	; select bank1
  4884  1027  081B               	movf	27,w	;volatile
  4885  1028  0020               	movlb	0	; select bank0
  4886  1029  01A0               	clrf	?_getAD
  4887  102A  07A0               	addwf	?_getAD,f
  4888  102B  0008               	return
  4889  102C                     __end_of_getAD:	
  4890                           
  4891                           	psect	text6
  4892  1D92                     __ptext6:	
  4893 ;; *************** function _WDT_Main *****************
  4894 ;; Defined at:
  4895 ;;		line 1114 in file "../src/MCU_B1.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;		None
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;		None
  4900 ;; Return value:  Size  Location     Type
  4901 ;;		None               void
  4902 ;; Registers used:
  4903 ;;		wreg, status,2, status,0, pclath, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;Total ram usage:        1 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    6
  4916 ;; This function calls:
  4917 ;;		_WDT_Clearing
  4918 ;; This function is called by:
  4919 ;;		_main
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           
  4924                           ;psect for function _WDT_Main
  4925  1D92                     _WDT_Main:	
  4926                           
  4927                           ;MCU_B1.c: 1115: if (WDT.Enable == 1) {
  4928                           
  4929                           ;incstack = 0
  4930                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4931  1D92  0022               	movlb	2	; select bank2
  4932  1D93  1C2A               	btfss	_WDT^(0+256),0
  4933  1D94  0008               	return
  4934                           
  4935                           ;MCU_B1.c: 1116: if (WDT.Timer-- > 0) {
  4936  1D95  3001               	movlw	1
  4937  1D96  02AB               	subwf	(_WDT^(0+256)+1),f
  4938  1D97  082B               	movf	(_WDT^(0+256)+1),w
  4939  1D98  3AFF               	xorlw	255
  4940  1D99  1903               	skipnz
  4941  1D9A  0008               	return
  4942                           
  4943                           ;MCU_B1.c: 1117: WDT.Timer = 100;
  4944  1D9B  3064               	movlw	100
  4945  1D9C  0020               	movlb	0	; select bank0
  4946  1D9D  00A0               	movwf	??_WDT_Main
  4947  1D9E  0820               	movf	??_WDT_Main,w
  4948  1D9F  0022               	movlb	2	; select bank2
  4949  1DA0  00AB               	movwf	(_WDT^(0+256)+1)
  4950                           
  4951                           ;MCU_B1.c: 1118: WDT_Clearing();
  4952  1DA1  3180  2002         	fcall	_WDT_Clearing
  4953  1DA3  0008               	return
  4954  1DA4                     __end_of_WDT_Main:	
  4955                           
  4956                           	psect	text7
  4957  0002                     __ptext7:	
  4958 ;; *************** function _WDT_Clearing *****************
  4959 ;; Defined at:
  4960 ;;		line 1124 in file "../src/MCU_B1.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;		None
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;		None
  4965 ;; Return value:  Size  Location     Type
  4966 ;;		None               void
  4967 ;; Registers used:
  4968 ;;		None
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;Total ram usage:        0 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; Hardware stack levels required when called:    5
  4981 ;; This function calls:
  4982 ;;		Nothing
  4983 ;; This function is called by:
  4984 ;;		_WDT_Main
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           
  4989                           ;psect for function _WDT_Clearing
  4990  0002                     _WDT_Clearing:	
  4991                           
  4992                           ;incstack = 0
  4993                           ; Regs used in _WDT_Clearing: []
  4994  0002  0064               	clrwdt	;# 
  4995  0003  0008               	return
  4996  0004                     __end_of_WDT_Clearing:	
  4997                           
  4998                           	psect	text8
  4999  1B5C                     __ptext8:	
  5000 ;; *************** function _Temp_Main *****************
  5001 ;; Defined at:
  5002 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;		None
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;		None
  5007 ;; Return value:  Size  Location     Type
  5008 ;;		None               void
  5009 ;; Registers used:
  5010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5020 ;;Total ram usage:        0 bytes
  5021 ;; Hardware stack levels used:    1
  5022 ;; Hardware stack levels required when called:    8
  5023 ;; This function calls:
  5024 ;;		_setTemp_Main
  5025 ;; This function is called by:
  5026 ;;		_main
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           
  5031                           ;psect for function _Temp_Main
  5032  1B5C                     _Temp_Main:	
  5033                           
  5034                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5038  1B5C  318D  25E0         	fcall	_setTemp_Main
  5039  1B5E  0008               	return
  5040  1B5F                     __end_of_Temp_Main:	
  5041                           
  5042                           	psect	text9
  5043  0DE0                     __ptext9:	
  5044 ;; *************** function _setTemp_Main *****************
  5045 ;; Defined at:
  5046 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;		None
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  AD              2   76[BANK0 ] unsigned int 
  5051 ;;  DangerValue     2   73[BANK0 ] unsigned int 
  5052 ;;  SafeValue       2   71[BANK0 ] unsigned int 
  5053 ;;  TempGO          1   75[BANK0 ] unsigned char 
  5054 ;;  error           1   70[BANK0 ] unsigned char 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;		None               void
  5057 ;; Registers used:
  5058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;Total ram usage:        9 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:    7
  5071 ;; This function calls:
  5072 ;;		_getMain_All_Error_Status
  5073 ;;		_getMain_All_LightsStatus
  5074 ;;		_setBuz
  5075 ;;		_setProductData
  5076 ;; This function is called by:
  5077 ;;		_Temp_Main
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           
  5082                           ;psect for function _setTemp_Main
  5083  0DE0                     _setTemp_Main:	
  5084                           
  5085                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5086                           
  5087                           ;incstack = 0
  5088                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5089  0DE0  3000               	movlw	0
  5090  0DE1  3191  21AF  318D   	fcall	_getMain_All_Error_Status
  5091  0DE4  0020               	movlb	0	; select bank0
  5092  0DE5  00E5               	movwf	??_setTemp_Main
  5093  0DE6  0865               	movf	??_setTemp_Main,w
  5094  0DE7  00E6               	movwf	setTemp_Main@error
  5095                           
  5096                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5097  0DE8  01E7               	clrf	setTemp_Main@SafeValue
  5098  0DE9  01E8               	clrf	setTemp_Main@SafeValue+1
  5099  0DEA  01E9               	clrf	setTemp_Main@DangerValue
  5100  0DEB  01EA               	clrf	setTemp_Main@DangerValue+1
  5101                           
  5102                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5103  0DEC  319B  23DE  318D   	fcall	_getMain_All_LightsStatus
  5104  0DEF  0020               	movlb	0	; select bank0
  5105  0DF0  00E5               	movwf	??_setTemp_Main
  5106  0DF1  0865               	movf	??_setTemp_Main,w
  5107  0DF2  00EB               	movwf	setTemp_Main@TempGO
  5108                           
  5109                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5110  0DF3  0021               	movlb	1	; select bank1
  5111  0DF4  1C5C               	btfss	_Temp^(0+128),0
  5112  0DF5  2E8D               	goto	l1782
  5113                           
  5114                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5115  0DF6  195C               	btfsc	_Temp^(0+128),2
  5116  0DF7  2E15               	goto	l7385
  5117                           
  5118                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5119  0DF8  0020               	movlb	0	; select bank0
  5120  0DF9  086B               	movf	setTemp_Main@TempGO,w
  5121  0DFA  3A01               	xorlw	1
  5122  0DFB  1D03               	skipz
  5123  0DFC  2E00               	goto	l1788
  5124  0DFD  0021               	movlb	1	; select bank1
  5125  0DFE  1CDC               	btfss	_Temp^(0+128),1
  5126  0DFF  2E03               	goto	l7377
  5127  0E00                     l1788:	
  5128  0E00  0021               	movlb	1	; select bank1
  5129  0E01  1CDC               	btfss	_Temp^(0+128),1
  5130  0E02  2E12               	goto	l7383
  5131  0E03                     l7377:	
  5132                           
  5133                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5134  0E03  3001               	movlw	1
  5135  0E04  07DD               	addwf	(_Temp^(0+128)+1),f
  5136  0E05  3000               	movlw	0
  5137  0E06  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5138                           
  5139                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5140  0E07  3000               	movlw	0
  5141  0E08  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5142  0E09  30FA               	movlw	250
  5143  0E0A  1903               	skipnz
  5144  0E0B  025D               	subwf	(_Temp^(0+128)+1),w
  5145  0E0C  1C03               	skipc
  5146  0E0D  0008               	return
  5147                           
  5148                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5149  0E0E  01DD               	clrf	(_Temp^(0+128)+1)
  5150  0E0F  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5151                           
  5152                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5153  0E10  155C               	bsf	_Temp^(0+128),2
  5154                           
  5155                           ;OverTemperature_B1.c: 83: }
  5156                           ;OverTemperature_B1.c: 84: } else {
  5157  0E11  0008               	return
  5158  0E12                     l7383:	
  5159                           
  5160                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5161  0E12  01DD               	clrf	(_Temp^(0+128)+1)
  5162  0E13  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5163                           
  5164                           ;OverTemperature_B1.c: 86: }
  5165                           ;OverTemperature_B1.c: 87: } else {
  5166  0E14  0008               	return
  5167  0E15                     l7385:	
  5168                           
  5169                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5170  0E15  3001               	movlw	1
  5171  0E16  07DD               	addwf	(_Temp^(0+128)+1),f
  5172  0E17  3000               	movlw	0
  5173  0E18  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5174                           
  5175                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5176  0E19  3000               	movlw	0
  5177  0E1A  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5178  0E1B  3005               	movlw	5
  5179  0E1C  1903               	skipnz
  5180  0E1D  025D               	subwf	(_Temp^(0+128)+1),w
  5181  0E1E  1C03               	skipc
  5182  0E1F  0008               	return
  5183                           
  5184                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5185  0E20  01DD               	clrf	(_Temp^(0+128)+1)
  5186  0E21  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5187                           
  5188                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5189  0E22  3008               	movlw	8
  5190  0E23  3EDC               	addlw	_Temp& (0+255)
  5191  0E24  0086               	movwf	6
  5192  0E25  0187               	clrf	7
  5193  0E26  0016               	moviw fsr1++
  5194  0E27  0401               	iorwf	1,w
  5195  0E28  1903               	skipnz
  5196  0E29  2E85               	goto	l1793
  5197                           
  5198                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5199  0E2A  115C               	bcf	_Temp^(0+128),2
  5200                           
  5201                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5202  0E2B  0865               	movf	((_Temp+1)^(0+128)+8),w
  5203  0E2C  0020               	movlb	0	; select bank0
  5204  0E2D  01ED               	clrf	setTemp_Main@AD+1
  5205  0E2E  07ED               	addwf	setTemp_Main@AD+1,f
  5206  0E2F  0021               	movlb	1	; select bank1
  5207  0E30  0864               	movf	(_Temp^(0+128)+8),w
  5208  0E31  0020               	movlb	0	; select bank0
  5209  0E32  01EC               	clrf	setTemp_Main@AD
  5210  0E33  07EC               	addwf	setTemp_Main@AD,f
  5211                           
  5212                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5213  0E34  3090               	movlw	144
  5214  0E35  00E7               	movwf	setTemp_Main@SafeValue
  5215  0E36  3001               	movlw	1
  5216  0E37  00E8               	movwf	setTemp_Main@SafeValue+1
  5217                           
  5218                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5219  0E38  3059               	movlw	89
  5220  0E39  00E9               	movwf	setTemp_Main@DangerValue
  5221  0E3A  3001               	movlw	1
  5222  0E3B  00EA               	movwf	setTemp_Main@DangerValue+1
  5223                           
  5224                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5225  0E3C  0021               	movlb	1	; select bank1
  5226  0E3D  1CDC               	btfss	_Temp^(0+128),1
  5227  0E3E  2E5D               	goto	l7415
  5228                           
  5229                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5230  0E3F  0020               	movlb	0	; select bank0
  5231  0E40  0868               	movf	setTemp_Main@SafeValue+1,w
  5232  0E41  026D               	subwf	setTemp_Main@AD+1,w
  5233  0E42  1D03               	skipz
  5234  0E43  2E46               	goto	u7125
  5235  0E44  0867               	movf	setTemp_Main@SafeValue,w
  5236  0E45  026C               	subwf	setTemp_Main@AD,w
  5237  0E46                     u7125:	
  5238  0E46  1C03               	skipc
  5239  0E47  2E72               	goto	l7425
  5240                           
  5241                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5242  0E48  3001               	movlw	1
  5243  0E49  00E5               	movwf	??_setTemp_Main
  5244  0E4A  0865               	movf	??_setTemp_Main,w
  5245  0E4B  0021               	movlb	1	; select bank1
  5246  0E4C  07DF               	addwf	(_Temp^(0+128)+3),f
  5247                           
  5248                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5249  0E4D  3003               	movlw	3
  5250  0E4E  025F               	subwf	(_Temp^(0+128)+3),w
  5251  0E4F  1C03               	skipc
  5252  0E50  2E74               	goto	l7427
  5253                           
  5254                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5255  0E51  01DF               	clrf	(_Temp^(0+128)+3)
  5256                           
  5257                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5258  0E52  10DC               	bcf	_Temp^(0+128),1
  5259                           
  5260                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5261  0E53  3064               	movlw	100
  5262  0E54  0020               	movlb	0	; select bank0
  5263  0E55  00A9               	movwf	setBuz@time
  5264  0E56  3000               	movlw	0
  5265  0E57  00AA               	movwf	setBuz@time+1
  5266  0E58  3002               	movlw	2
  5267  0E59  3195  2551  318D   	fcall	_setBuz
  5268                           
  5269                           ;OverTemperature_B1.c: 126: }
  5270                           ;OverTemperature_B1.c: 127: } else {
  5271  0E5C  2E74               	goto	l7427
  5272  0E5D                     l7415:	
  5273                           ;OverTemperature_B1.c: 129: }
  5274                           ;OverTemperature_B1.c: 130: } else {
  5275                           
  5276                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5277                           
  5278                           
  5279                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5280  0E5D  0020               	movlb	0	; select bank0
  5281  0E5E  086D               	movf	setTemp_Main@AD+1,w
  5282  0E5F  026A               	subwf	setTemp_Main@DangerValue+1,w
  5283  0E60  1D03               	skipz
  5284  0E61  2E64               	goto	u7145
  5285  0E62  086C               	movf	setTemp_Main@AD,w
  5286  0E63  0269               	subwf	setTemp_Main@DangerValue,w
  5287  0E64                     u7145:	
  5288  0E64  1C03               	skipc
  5289  0E65  2E72               	goto	l7425
  5290                           
  5291                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5292  0E66  3001               	movlw	1
  5293  0E67  00E5               	movwf	??_setTemp_Main
  5294  0E68  0865               	movf	??_setTemp_Main,w
  5295  0E69  0021               	movlb	1	; select bank1
  5296  0E6A  07DF               	addwf	(_Temp^(0+128)+3),f
  5297                           
  5298                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5299  0E6B  3003               	movlw	3
  5300  0E6C  025F               	subwf	(_Temp^(0+128)+3),w
  5301  0E6D  1C03               	skipc
  5302  0E6E  2E74               	goto	l7427
  5303                           
  5304                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5305  0E6F  01DF               	clrf	(_Temp^(0+128)+3)
  5306                           
  5307                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5308  0E70  14DC               	bsf	_Temp^(0+128),1
  5309                           
  5310                           ;OverTemperature_B1.c: 136: }
  5311                           ;OverTemperature_B1.c: 137: } else {
  5312  0E71  2E74               	goto	l7427
  5313  0E72                     l7425:	
  5314                           
  5315                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5316  0E72  0021               	movlb	1	; select bank1
  5317  0E73  01DF               	clrf	(_Temp^(0+128)+3)
  5318  0E74                     l7427:	
  5319                           
  5320                           ;OverTemperature_B1.c: 139: }
  5321                           ;OverTemperature_B1.c: 140: }
  5322                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5323  0E74  0020               	movlb	0	; select bank0
  5324  0E75  086D               	movf	setTemp_Main@AD+1,w
  5325  0E76  00E5               	movwf	??_setTemp_Main
  5326  0E77  0865               	movf	??_setTemp_Main,w
  5327  0E78  00E2               	movwf	setProductData@value
  5328  0E79  3018               	movlw	24
  5329  0E7A  319C  242C  318D   	fcall	_setProductData
  5330                           
  5331                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5332  0E7D  0020               	movlb	0	; select bank0
  5333  0E7E  086C               	movf	setTemp_Main@AD,w
  5334  0E7F  00E5               	movwf	??_setTemp_Main
  5335  0E80  0865               	movf	??_setTemp_Main,w
  5336  0E81  00E2               	movwf	setProductData@value
  5337  0E82  3019               	movlw	25
  5338  0E83  319C  242C         	fcall	_setProductData
  5339  0E85                     l1793:	
  5340                           
  5341                           ;OverTemperature_B1.c: 158: }
  5342                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5343  0E85  0021               	movlb	1	; select bank1
  5344  0E86  01E0               	clrf	(_Temp^(0+128)+4)
  5345  0E87  01E1               	clrf	((_Temp+1)^(0+128)+4)
  5346                           
  5347                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5348  0E88  01E2               	clrf	(_Temp^(0+128)+6)
  5349  0E89  01E3               	clrf	((_Temp+1)^(0+128)+6)
  5350                           
  5351                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5352  0E8A  01E4               	clrf	(_Temp^(0+128)+8)
  5353  0E8B  01E5               	clrf	((_Temp+1)^(0+128)+8)
  5354                           
  5355                           ;OverTemperature_B1.c: 162: }
  5356                           ;OverTemperature_B1.c: 163: }
  5357                           ;OverTemperature_B1.c: 166: } else {
  5358  0E8C  0008               	return
  5359  0E8D                     l1782:	
  5360                           
  5361                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5362  0E8D  1C2E               	btfss	_myMain^(0+128),0
  5363  0E8E  0008               	return
  5364                           
  5365                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5366  0E8F  145C               	bsf	_Temp^(0+128),0
  5367  0E90  0008               	return
  5368  0E91                     __end_of_setTemp_Main:	
  5369                           
  5370                           	psect	text10
  5371  1B59                     __ptext10:	
  5372 ;; *************** function _Temp_Initialization *****************
  5373 ;; Defined at:
  5374 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;		None
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;		None
  5379 ;; Return value:  Size  Location     Type
  5380 ;;		None               void
  5381 ;; Registers used:
  5382 ;;		status,2, status,0, pclath, cstack
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5392 ;;Total ram usage:        0 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    6
  5395 ;; This function calls:
  5396 ;;		_setTemp_Initialization
  5397 ;; This function is called by:
  5398 ;;		_main
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           
  5403                           ;psect for function _Temp_Initialization
  5404  1B59                     _Temp_Initialization:	
  5405                           
  5406                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5407                           
  5408                           ;incstack = 0
  5409                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5410  1B59  319B  234C         	fcall	_setTemp_Initialization
  5411  1B5B  0008               	return
  5412  1B5C                     __end_of_Temp_Initialization:	
  5413                           
  5414                           	psect	text11
  5415  1B4C                     __ptext11:	
  5416 ;; *************** function _setTemp_Initialization *****************
  5417 ;; Defined at:
  5418 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;		None
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;		None
  5423 ;; Return value:  Size  Location     Type
  5424 ;;		None               void
  5425 ;; Registers used:
  5426 ;;		None
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;Total ram usage:        0 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; Hardware stack levels required when called:    5
  5439 ;; This function calls:
  5440 ;;		Nothing
  5441 ;; This function is called by:
  5442 ;;		_Temp_Initialization
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           
  5447                           ;psect for function _setTemp_Initialization
  5448  1B4C                     _setTemp_Initialization:	
  5449                           
  5450                           ;incstack = 0
  5451                           ; Regs used in _setTemp_Initialization: []
  5452  1B4C  0008               	return
  5453  1B4D                     __end_of_setTemp_Initialization:	
  5454                           
  5455                           	psect	text12
  5456  1BAC                     __ptext12:	
  5457 ;; *************** function _Switch_Main *****************
  5458 ;; Defined at:
  5459 ;;		line 76 in file "../src/Switch_B1.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;		None
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;		None
  5464 ;; Return value:  Size  Location     Type
  5465 ;;		None               void
  5466 ;; Registers used:
  5467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5477 ;;Total ram usage:        0 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    9
  5480 ;; This function calls:
  5481 ;;		_TouchPower
  5482 ;;		_setSw_Main
  5483 ;; This function is called by:
  5484 ;;		_main
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           
  5489                           ;psect for function _Switch_Main
  5490  1BAC                     _Switch_Main:	
  5491                           
  5492                           ;Switch_B1.c: 79: setSw_Main(1);
  5493                           
  5494                           ;incstack = 0
  5495                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5496  1BAC  3001               	movlw	1
  5497  1BAD  3181  21FD  319B   	fcall	_setSw_Main
  5498                           
  5499                           ;Switch_B1.c: 91: TouchPower();
  5500  1BB0  319E  2643         	fcall	_TouchPower
  5501  1BB2  0008               	return
  5502  1BB3                     __end_of_Switch_Main:	
  5503                           
  5504                           	psect	text13
  5505  01FD                     __ptext13:	
  5506 ;; *************** function _setSw_Main *****************
  5507 ;; Defined at:
  5508 ;;		line 117 in file "../src/Switch_B1.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;  sw              1    wreg     unsigned char 
  5511 ;; Auto vars:     Size  Location     Type
  5512 ;;  sw              1   17[BANK0 ] unsigned char 
  5513 ;; Return value:  Size  Location     Type
  5514 ;;		None               void
  5515 ;; Registers used:
  5516 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5517 ;; Tracked objects:
  5518 ;;		On entry : 0/0
  5519 ;;		On exit  : 0/0
  5520 ;;		Unchanged: 0/0
  5521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5524 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5525 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5526 ;;Total ram usage:        3 bytes
  5527 ;; Hardware stack levels used:    1
  5528 ;; Hardware stack levels required when called:    8
  5529 ;; This function calls:
  5530 ;;		_SwPointSelect
  5531 ;;		_getMain_All_Error_Status
  5532 ;;		_getSw_KeyStatus
  5533 ;;		_setBuz
  5534 ;;		_setDimmerLights_DimmingOn
  5535 ;;		_setDimmerLights_SwOff
  5536 ;;		_setDimmerLights_SwOn
  5537 ;;		_setRF_Learn
  5538 ;; This function is called by:
  5539 ;;		_Switch_Main
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           
  5544                           ;psect for function _setSw_Main
  5545  01FD                     _setSw_Main:	
  5546                           
  5547                           ;incstack = 0
  5548                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5549                           ;setSw_Main@sw stored from wreg
  5550  01FD  0020               	movlb	0	; select bank0
  5551  01FE  00B1               	movwf	setSw_Main@sw
  5552                           
  5553                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5554  01FF  0831               	movf	setSw_Main@sw,w
  5555  0200  3190  2000  3181   	fcall	_SwPointSelect
  5556                           
  5557                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5558  0203  0021               	movlb	1	; select bank1
  5559  0204  0859               	movf	_Sw^(0+128),w
  5560  0205  0086               	movwf	6
  5561  0206  3001               	movlw	1	; select bank2/3
  5562  0207  0087               	movwf	7
  5563  0208  1C01               	btfss	1,0
  5564  0209  2B79               	goto	l2492
  5565                           
  5566                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5567  020A  3000               	movlw	0
  5568  020B  3191  21AF  3181   	fcall	_getMain_All_Error_Status
  5569  020E  3800               	iorlw	0
  5570  020F  1D03               	skipz
  5571  0210  2A2F               	goto	l7539
  5572                           
  5573                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5574  0211  0021               	movlb	1	; select bank1
  5575  0212  0A59               	incf	_Sw^(0+128),w
  5576  0213  0086               	movwf	6
  5577  0214  3001               	movlw	1	; select bank2/3
  5578  0215  0087               	movwf	7
  5579  0216  1081               	bcf	1,1
  5580                           
  5581                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5582  0217  0020               	movlb	0	; select bank0
  5583  0218  0831               	movf	setSw_Main@sw,w
  5584  0219  319D  2539  3181   	fcall	_getSw_KeyStatus
  5585  021C  3A01               	xorlw	1
  5586  021D  3000               	movlw	0
  5587  021E  1903               	skipnz
  5588  021F  3001               	movlw	1
  5589  0220  0020               	movlb	0	; select bank0
  5590  0221  00AF               	movwf	??_setSw_Main
  5591  0222  0021               	movlb	1	; select bank1
  5592  0223  0859               	movf	_Sw^(0+128),w
  5593  0224  0086               	movwf	6
  5594  0225  3001               	movlw	1	; select bank2/3
  5595  0226  0087               	movwf	7
  5596  0227  0020               	movlb	0	; select bank0
  5597  0228  0DAF               	rlf	??_setSw_Main,f
  5598  0229  0801               	movf	1,w
  5599  022A  062F               	xorwf	??_setSw_Main,w
  5600  022B  39FD               	andlw	-3
  5601  022C  062F               	xorwf	??_setSw_Main,w
  5602  022D  0081               	movwf	1
  5603                           
  5604                           ;Switch_B1.c: 124: } else {
  5605  022E  2A45               	goto	l2494
  5606  022F                     l7539:	
  5607                           
  5608                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5609  022F  0021               	movlb	1	; select bank1
  5610  0230  0A59               	incf	_Sw^(0+128),w
  5611  0231  0086               	movwf	6
  5612  0232  3001               	movlw	1	; select bank2/3
  5613  0233  0087               	movwf	7
  5614  0234  1881               	btfsc	1,1
  5615  0235  2A45               	goto	l2494
  5616                           
  5617                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5618  0236  0A59               	incf	_Sw^(0+128),w
  5619  0237  0086               	movwf	6
  5620  0238  3001               	movlw	1	; select bank2/3
  5621  0239  0087               	movwf	7
  5622  023A  1481               	bsf	1,1
  5623                           
  5624                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5625  023B  0859               	movf	_Sw^(0+128),w
  5626  023C  0086               	movwf	6
  5627  023D  3001               	movlw	1	; select bank2/3
  5628  023E  0087               	movwf	7
  5629  023F  1081               	bcf	1,1
  5630                           
  5631                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5632  0240  0859               	movf	_Sw^(0+128),w
  5633  0241  0086               	movwf	6
  5634  0242  3001               	movlw	1	; select bank2/3
  5635  0243  0087               	movwf	7
  5636  0244  1501               	bsf	1,2
  5637  0245                     l2494:	
  5638                           
  5639                           ;Switch_B1.c: 130: }
  5640                           ;Switch_B1.c: 131: }
  5641                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5642  0245  0021               	movlb	1	; select bank1
  5643  0246  0859               	movf	_Sw^(0+128),w
  5644  0247  0086               	movwf	6
  5645  0248  3001               	movlw	1	; select bank2/3
  5646  0249  0087               	movwf	7
  5647  024A  1C81               	btfss	1,1
  5648  024B  2B21               	goto	l7589
  5649                           
  5650                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5651  024C  0859               	movf	_Sw^(0+128),w
  5652  024D  0086               	movwf	6
  5653  024E  3001               	movlw	1	; select bank2/3
  5654  024F  0087               	movwf	7
  5655  0250  1901               	btfsc	1,2
  5656  0251  2A78               	goto	l7555
  5657                           
  5658                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5659  0252  3001               	movlw	1
  5660  0253  0020               	movlb	0	; select bank0
  5661  0254  00AF               	movwf	??_setSw_Main
  5662  0255  0021               	movlb	1	; select bank1
  5663  0256  0859               	movf	_Sw^(0+128),w
  5664  0257  3E02               	addlw	2
  5665  0258  0086               	movwf	6
  5666  0259  3001               	movlw	1	; select bank2/3
  5667  025A  0087               	movwf	7
  5668  025B  0020               	movlb	0	; select bank0
  5669  025C  082F               	movf	??_setSw_Main,w
  5670  025D  0781               	addwf	1,f
  5671                           
  5672                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5673  025E  0021               	movlb	1	; select bank1
  5674  025F  0859               	movf	_Sw^(0+128),w
  5675  0260  3E02               	addlw	2
  5676  0261  0086               	movwf	6
  5677  0262  3001               	movlw	1	; select bank2/3
  5678  0263  0087               	movwf	7
  5679  0264  3003               	movlw	3
  5680  0265  0201               	subwf	1,w
  5681  0266  1C03               	skipc
  5682  0267  0008               	return
  5683                           
  5684                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5685  0268  0859               	movf	_Sw^(0+128),w
  5686  0269  3E02               	addlw	2
  5687  026A  0086               	movwf	6
  5688  026B  3001               	movlw	1	; select bank2/3
  5689  026C  0087               	movwf	7
  5690  026D  0181               	clrf	1
  5691                           
  5692                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5693  026E  0859               	movf	_Sw^(0+128),w
  5694  026F  0086               	movwf	6
  5695  0270  3001               	movlw	1	; select bank2/3
  5696  0271  0087               	movwf	7
  5697  0272  1501               	bsf	1,2
  5698                           
  5699                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5700  0273  0020               	movlb	0	; select bank0
  5701  0274  0831               	movf	setSw_Main@sw,w
  5702  0275  3192  2216         	fcall	_setDimmerLights_SwOn
  5703                           
  5704                           ;Switch_B1.c: 146: }
  5705                           ;Switch_B1.c: 147: } else {
  5706  0277  0008               	return
  5707  0278                     l7555:	
  5708                           
  5709                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5710  0278  0021               	movlb	1	; select bank1
  5711  0279  0859               	movf	_Sw^(0+128),w
  5712  027A  0086               	movwf	6
  5713  027B  3001               	movlw	1	; select bank2/3
  5714  027C  0087               	movwf	7
  5715  027D  1981               	btfsc	1,3
  5716  027E  2AAD               	goto	l7565
  5717                           
  5718                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5719  027F  0859               	movf	_Sw^(0+128),w
  5720  0280  3E03               	addlw	3
  5721  0281  0086               	movwf	6
  5722  0282  3001               	movlw	1	; select bank2/3
  5723  0283  0087               	movwf	7
  5724  0284  3001               	movlw	1
  5725  0285  0781               	addwf	1,f
  5726  0286  3141               	addfsr 1,1
  5727  0287  1803               	skipnc
  5728  0288  0A81               	incf	1,f
  5729                           
  5730                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5731  0289  0859               	movf	_Sw^(0+128),w
  5732  028A  3E03               	addlw	3
  5733  028B  0086               	movwf	6
  5734  028C  3001               	movlw	1	; select bank2/3
  5735  028D  0087               	movwf	7
  5736  028E  3F40               	moviw [0]fsr1
  5737  028F  0020               	movlb	0	; select bank0
  5738  0290  00AF               	movwf	??_setSw_Main
  5739  0291  3F41               	moviw [1]fsr1
  5740  0292  00B0               	movwf	??_setSw_Main+1
  5741  0293  3000               	movlw	0
  5742  0294  0230               	subwf	??_setSw_Main+1,w
  5743  0295  304B               	movlw	75
  5744  0296  1903               	skipnz
  5745  0297  022F               	subwf	??_setSw_Main,w
  5746  0298  1C03               	skipc
  5747  0299  0008               	return
  5748                           
  5749                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5750  029A  0021               	movlb	1	; select bank1
  5751  029B  0859               	movf	_Sw^(0+128),w
  5752  029C  3E03               	addlw	3
  5753  029D  0086               	movwf	6
  5754  029E  3001               	movlw	1	; select bank2/3
  5755  029F  0087               	movwf	7
  5756  02A0  3000               	movlw	0
  5757  02A1  3FC0               	movwi [0]fsr1
  5758  02A2  3FC1               	movwi [1]fsr1
  5759                           
  5760                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5761  02A3  0859               	movf	_Sw^(0+128),w
  5762  02A4  0086               	movwf	6
  5763  02A5  3001               	movlw	1	; select bank2/3
  5764  02A6  0087               	movwf	7
  5765  02A7  1581               	bsf	1,3
  5766                           
  5767                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5768  02A8  0020               	movlb	0	; select bank0
  5769  02A9  0831               	movf	setSw_Main@sw,w
  5770  02AA  3190  20FD         	fcall	_setDimmerLights_DimmingOn
  5771                           
  5772                           ;Switch_B1.c: 161: }
  5773                           ;Switch_B1.c: 162: } else {
  5774  02AC  0008               	return
  5775  02AD                     l7565:	
  5776                           
  5777                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5778  02AD  0021               	movlb	1	; select bank1
  5779  02AE  0859               	movf	_Sw^(0+128),w
  5780  02AF  0086               	movwf	6
  5781  02B0  3001               	movlw	1	; select bank2/3
  5782  02B1  0087               	movwf	7
  5783  02B2  1A01               	btfsc	1,4
  5784  02B3  2AED               	goto	l7579
  5785                           
  5786                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5787  02B4  0859               	movf	_Sw^(0+128),w
  5788  02B5  3E05               	addlw	5
  5789  02B6  0086               	movwf	6
  5790  02B7  3001               	movlw	1	; select bank2/3
  5791  02B8  0087               	movwf	7
  5792  02B9  3001               	movlw	1
  5793  02BA  0781               	addwf	1,f
  5794  02BB  3141               	addfsr 1,1
  5795  02BC  1803               	skipnc
  5796  02BD  0A81               	incf	1,f
  5797                           
  5798                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5799  02BE  0859               	movf	_Sw^(0+128),w
  5800  02BF  3E05               	addlw	5
  5801  02C0  0086               	movwf	6
  5802  02C1  3001               	movlw	1	; select bank2/3
  5803  02C2  0087               	movwf	7
  5804  02C3  3F40               	moviw [0]fsr1
  5805  02C4  0020               	movlb	0	; select bank0
  5806  02C5  00AF               	movwf	??_setSw_Main
  5807  02C6  3F41               	moviw [1]fsr1
  5808  02C7  00B0               	movwf	??_setSw_Main+1
  5809  02C8  3000               	movlw	0
  5810  02C9  0230               	subwf	??_setSw_Main+1,w
  5811  02CA  304B               	movlw	75
  5812  02CB  1903               	skipnz
  5813  02CC  022F               	subwf	??_setSw_Main,w
  5814  02CD  1C03               	skipc
  5815  02CE  0008               	return
  5816                           
  5817                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5818  02CF  0021               	movlb	1	; select bank1
  5819  02D0  0859               	movf	_Sw^(0+128),w
  5820  02D1  3E05               	addlw	5
  5821  02D2  0086               	movwf	6
  5822  02D3  3001               	movlw	1	; select bank2/3
  5823  02D4  0087               	movwf	7
  5824  02D5  3000               	movlw	0
  5825  02D6  3FC0               	movwi [0]fsr1
  5826  02D7  3FC1               	movwi [1]fsr1
  5827                           
  5828                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5829  02D8  0859               	movf	_Sw^(0+128),w
  5830  02D9  0086               	movwf	6
  5831  02DA  3001               	movlw	1	; select bank2/3
  5832  02DB  0087               	movwf	7
  5833  02DC  1601               	bsf	1,4
  5834                           
  5835                           ;Switch_B1.c: 171: setRF_Learn(1);
  5836  02DD  3001               	movlw	1
  5837  02DE  319D  25F0  3181   	fcall	_setRF_Learn
  5838                           
  5839                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5840  02E1  0021               	movlb	1	; select bank1
  5841  02E2  1EAE               	btfss	_myMain^(0+128),5
  5842  02E3  0008               	return
  5843                           
  5844                           ;Switch_B1.c: 173: setBuz(2, 100);
  5845  02E4  3064               	movlw	100
  5846  02E5  0020               	movlb	0	; select bank0
  5847  02E6  00A9               	movwf	setBuz@time
  5848  02E7  3000               	movlw	0
  5849  02E8  00AA               	movwf	setBuz@time+1
  5850  02E9  3002               	movlw	2
  5851  02EA  3195  2551         	fcall	_setBuz
  5852                           
  5853                           ;Switch_B1.c: 174: }
  5854                           ;Switch_B1.c: 178: }
  5855                           ;Switch_B1.c: 179: } else {
  5856  02EC  0008               	return
  5857  02ED                     l7579:	
  5858                           
  5859                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5860  02ED  0021               	movlb	1	; select bank1
  5861  02EE  0859               	movf	_Sw^(0+128),w
  5862  02EF  0086               	movwf	6
  5863  02F0  3001               	movlw	1	; select bank2/3
  5864  02F1  0087               	movwf	7
  5865  02F2  1A81               	btfsc	1,5
  5866  02F3  0008               	return
  5867                           
  5868                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5869  02F4  0859               	movf	_Sw^(0+128),w
  5870  02F5  3E07               	addlw	7
  5871  02F6  0086               	movwf	6
  5872  02F7  3001               	movlw	1	; select bank2/3
  5873  02F8  0087               	movwf	7
  5874  02F9  3001               	movlw	1
  5875  02FA  0781               	addwf	1,f
  5876  02FB  3141               	addfsr 1,1
  5877  02FC  1803               	skipnc
  5878  02FD  0A81               	incf	1,f
  5879                           
  5880                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5881  02FE  0859               	movf	_Sw^(0+128),w
  5882  02FF  3E07               	addlw	7
  5883  0300  0086               	movwf	6
  5884  0301  3001               	movlw	1	; select bank2/3
  5885  0302  0087               	movwf	7
  5886  0303  3F40               	moviw [0]fsr1
  5887  0304  0020               	movlb	0	; select bank0
  5888  0305  00AF               	movwf	??_setSw_Main
  5889  0306  3F41               	moviw [1]fsr1
  5890  0307  00B0               	movwf	??_setSw_Main+1
  5891  0308  3000               	movlw	0
  5892  0309  0230               	subwf	??_setSw_Main+1,w
  5893  030A  3096               	movlw	150
  5894  030B  1903               	skipnz
  5895  030C  022F               	subwf	??_setSw_Main,w
  5896  030D  1C03               	skipc
  5897  030E  0008               	return
  5898                           
  5899                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5900  030F  0021               	movlb	1	; select bank1
  5901  0310  0859               	movf	_Sw^(0+128),w
  5902  0311  3E07               	addlw	7
  5903  0312  0086               	movwf	6
  5904  0313  3001               	movlw	1	; select bank2/3
  5905  0314  0087               	movwf	7
  5906  0315  3000               	movlw	0
  5907  0316  3FC0               	movwi [0]fsr1
  5908  0317  3FC1               	movwi [1]fsr1
  5909                           
  5910                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5911  0318  0859               	movf	_Sw^(0+128),w
  5912  0319  0086               	movwf	6
  5913  031A  3001               	movlw	1	; select bank2/3
  5914  031B  0087               	movwf	7
  5915  031C  1681               	bsf	1,5
  5916                           
  5917                           ;Switch_B1.c: 187: setRF_Learn(0);
  5918  031D  3000               	movlw	0
  5919  031E  319D  25F0         	fcall	_setRF_Learn
  5920                           
  5921                           ;Switch_B1.c: 190: }
  5922                           ;Switch_B1.c: 191: }
  5923                           ;Switch_B1.c: 192: }
  5924                           ;Switch_B1.c: 194: }
  5925                           ;Switch_B1.c: 195: }
  5926                           ;Switch_B1.c: 196: } else {
  5927  0320  0008               	return
  5928  0321                     l7589:	
  5929                           
  5930                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5931  0321  0021               	movlb	1	; select bank1
  5932  0322  0859               	movf	_Sw^(0+128),w
  5933  0323  0086               	movwf	6
  5934  0324  3001               	movlw	1	; select bank2/3
  5935  0325  0087               	movwf	7
  5936  0326  1D01               	btfss	1,2
  5937  0327  0008               	return
  5938                           
  5939                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5940  0328  3001               	movlw	1
  5941  0329  0020               	movlb	0	; select bank0
  5942  032A  00AF               	movwf	??_setSw_Main
  5943  032B  0021               	movlb	1	; select bank1
  5944  032C  0859               	movf	_Sw^(0+128),w
  5945  032D  3E02               	addlw	2
  5946  032E  0086               	movwf	6
  5947  032F  3001               	movlw	1	; select bank2/3
  5948  0330  0087               	movwf	7
  5949  0331  0020               	movlb	0	; select bank0
  5950  0332  082F               	movf	??_setSw_Main,w
  5951  0333  0781               	addwf	1,f
  5952                           
  5953                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5954  0334  0021               	movlb	1	; select bank1
  5955  0335  0859               	movf	_Sw^(0+128),w
  5956  0336  3E02               	addlw	2
  5957  0337  0086               	movwf	6
  5958  0338  3001               	movlw	1	; select bank2/3
  5959  0339  0087               	movwf	7
  5960  033A  3003               	movlw	3
  5961  033B  0201               	subwf	1,w
  5962  033C  1C03               	skipc
  5963  033D  0008               	return
  5964                           
  5965                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5966  033E  0859               	movf	_Sw^(0+128),w
  5967  033F  3E02               	addlw	2
  5968  0340  0086               	movwf	6
  5969  0341  3001               	movlw	1	; select bank2/3
  5970  0342  0087               	movwf	7
  5971  0343  0181               	clrf	1
  5972                           
  5973                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5974  0344  0859               	movf	_Sw^(0+128),w
  5975  0345  0086               	movwf	6
  5976  0346  3001               	movlw	1	; select bank2/3
  5977  0347  0087               	movwf	7
  5978  0348  1101               	bcf	1,2
  5979                           
  5980                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5981  0349  0859               	movf	_Sw^(0+128),w
  5982  034A  3E03               	addlw	3
  5983  034B  0086               	movwf	6
  5984  034C  3001               	movlw	1	; select bank2/3
  5985  034D  0087               	movwf	7
  5986  034E  3000               	movlw	0
  5987  034F  3FC0               	movwi [0]fsr1
  5988  0350  3FC1               	movwi [1]fsr1
  5989                           
  5990                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  5991  0351  0859               	movf	_Sw^(0+128),w
  5992  0352  0086               	movwf	6
  5993  0353  3001               	movlw	1	; select bank2/3
  5994  0354  0087               	movwf	7
  5995  0355  1181               	bcf	1,3
  5996                           
  5997                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  5998  0356  0859               	movf	_Sw^(0+128),w
  5999  0357  0086               	movwf	6
  6000  0358  3001               	movlw	1	; select bank2/3
  6001  0359  0087               	movwf	7
  6002  035A  1201               	bcf	1,4
  6003                           
  6004                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6005  035B  0859               	movf	_Sw^(0+128),w
  6006  035C  0086               	movwf	6
  6007  035D  3001               	movlw	1	; select bank2/3
  6008  035E  0087               	movwf	7
  6009  035F  1281               	bcf	1,5
  6010                           
  6011                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6012  0360  0859               	movf	_Sw^(0+128),w
  6013  0361  3E05               	addlw	5
  6014  0362  0086               	movwf	6
  6015  0363  3001               	movlw	1	; select bank2/3
  6016  0364  0087               	movwf	7
  6017  0365  3000               	movlw	0
  6018  0366  3FC0               	movwi [0]fsr1
  6019  0367  3FC1               	movwi [1]fsr1
  6020                           
  6021                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6022  0368  0859               	movf	_Sw^(0+128),w
  6023  0369  3E07               	addlw	7
  6024  036A  0086               	movwf	6
  6025  036B  3001               	movlw	1	; select bank2/3
  6026  036C  0087               	movwf	7
  6027  036D  3000               	movlw	0
  6028  036E  3FC0               	movwi [0]fsr1
  6029  036F  3FC1               	movwi [1]fsr1
  6030                           
  6031                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6032  0370  0020               	movlb	0	; select bank0
  6033  0371  0831               	movf	setSw_Main@sw,w
  6034  0372  3192  22B8  3181   	fcall	_setDimmerLights_SwOff
  6035                           
  6036                           ;Switch_B1.c: 219: setRF_Learn(0);
  6037  0375  3000               	movlw	0
  6038  0376  319D  25F0         	fcall	_setRF_Learn
  6039                           
  6040                           ;Switch_B1.c: 221: }
  6041                           ;Switch_B1.c: 222: }
  6042                           ;Switch_B1.c: 223: }
  6043                           ;Switch_B1.c: 224: } else {
  6044  0378  0008               	return
  6045  0379                     l2492:	
  6046                           
  6047                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6048  0379  1C2E               	btfss	_myMain^(0+128),0
  6049  037A  0008               	return
  6050                           
  6051                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6052  037B  0859               	movf	_Sw^(0+128),w
  6053  037C  0086               	movwf	6
  6054  037D  3001               	movlw	1	; select bank2/3
  6055  037E  0087               	movwf	7
  6056  037F  1401               	bsf	1,0
  6057  0380  0008               	return
  6058  0381                     __end_of_setSw_Main:	
  6059                           
  6060                           	psect	text14
  6061  1DF0                     __ptext14:	
  6062 ;; *************** function _setRF_Learn *****************
  6063 ;; Defined at:
  6064 ;;		line 33 in file "../src/RF_Control_B1.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  command         1    wreg     unsigned char 
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;  command         1    1[BANK0 ] unsigned char 
  6069 ;; Return value:  Size  Location     Type
  6070 ;;		None               void
  6071 ;; Registers used:
  6072 ;;		wreg, status,2, status,0
  6073 ;; Tracked objects:
  6074 ;;		On entry : 0/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;Total ram usage:        2 bytes
  6083 ;; Hardware stack levels used:    1
  6084 ;; Hardware stack levels required when called:    5
  6085 ;; This function calls:
  6086 ;;		Nothing
  6087 ;; This function is called by:
  6088 ;;		_setSw_Main
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           
  6093                           ;psect for function _setRF_Learn
  6094  1DF0                     _setRF_Learn:	
  6095                           
  6096                           ;incstack = 0
  6097                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6098                           ;setRF_Learn@command stored from wreg
  6099  1DF0  0020               	movlb	0	; select bank0
  6100  1DF1  00A1               	movwf	setRF_Learn@command
  6101                           
  6102                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6103  1DF2  0821               	movf	setRF_Learn@command,w
  6104  1DF3  3A01               	xorlw	1
  6105  1DF4  3000               	movlw	0
  6106  1DF5  1903               	skipnz
  6107  1DF6  3001               	movlw	1
  6108  1DF7  00A0               	movwf	??_setRF_Learn
  6109  1DF8  0EA0               	swapf	??_setRF_Learn,f
  6110  1DF9  0DA0               	rlf	??_setRF_Learn,f
  6111  1DFA  0DA0               	rlf	??_setRF_Learn,f
  6112  1DFB  0021               	movlb	1	; select bank1
  6113  1DFC  0820               	movf	_RF1^(0+128),w
  6114  1DFD  0020               	movlb	0	; select bank0
  6115  1DFE  0620               	xorwf	??_setRF_Learn,w
  6116  1DFF  39BF               	andlw	-65
  6117  1E00  0620               	xorwf	??_setRF_Learn,w
  6118  1E01  0021               	movlb	1	; select bank1
  6119  1E02  00A0               	movwf	_RF1^(0+128)
  6120  1E03  0008               	return
  6121  1E04                     __end_of_setRF_Learn:	
  6122                           
  6123                           	psect	text15
  6124  10FD                     __ptext15:	
  6125 ;; *************** function _setDimmerLights_DimmingOn *****************
  6126 ;; Defined at:
  6127 ;;		line 750 in file "../src/Dimmer_B1.c"
  6128 ;; Parameters:    Size  Location     Type
  6129 ;;  sw              1    wreg     unsigned char 
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;  sw              1    2[BANK0 ] unsigned char 
  6132 ;; Return value:  Size  Location     Type
  6133 ;;		None               void
  6134 ;; Registers used:
  6135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;Total ram usage:        1 bytes
  6146 ;; Hardware stack levels used:    1
  6147 ;; Hardware stack levels required when called:    6
  6148 ;; This function calls:
  6149 ;;		_DimmerLights_SelectPointer
  6150 ;; This function is called by:
  6151 ;;		_setSw_Main
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           
  6156                           ;psect for function _setDimmerLights_DimmingOn
  6157  10FD                     _setDimmerLights_DimmingOn:	
  6158                           
  6159                           ;incstack = 0
  6160                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6161                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6162  10FD  0020               	movlb	0	; select bank0
  6163  10FE  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6164                           
  6165                           ;Dimmer_B1.c: 756: DimmerLights_SelectPointer(sw);
  6166  10FF  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6167  1100  319C  2420  3190   	fcall	_DimmerLights_SelectPointer
  6168                           
  6169                           ;Dimmer_B1.c: 757: if (DimmerLights->Trigger == 0) {
  6170  1103  0021               	movlb	1	; select bank1
  6171  1104  0855               	movf	_DimmerLights^(0+128),w
  6172  1105  0086               	movwf	6
  6173  1106  3001               	movlw	1	; select bank2/3
  6174  1107  0087               	movwf	7
  6175  1108  1881               	btfsc	1,1
  6176  1109  0008               	return
  6177                           
  6178                           ;Dimmer_B1.c: 758: if (DimmerLights->SwFlag == 1) {
  6179  110A  0855               	movf	_DimmerLights^(0+128),w
  6180  110B  0086               	movwf	6
  6181  110C  3001               	movlw	1	; select bank2/3
  6182  110D  0087               	movwf	7
  6183  110E  1C01               	btfss	1,0
  6184  110F  0008               	return
  6185                           
  6186                           ;Dimmer_B1.c: 759: DimmerLights->Status = 1;
  6187  1110  0A55               	incf	_DimmerLights^(0+128),w
  6188  1111  0086               	movwf	6
  6189  1112  3001               	movlw	1	; select bank2/3
  6190  1113  0087               	movwf	7
  6191  1114  1401               	bsf	1,0
  6192                           
  6193                           ;Dimmer_B1.c: 761: DimmerLights->DimmingSwFlag = 1;
  6194  1115  0855               	movf	_DimmerLights^(0+128),w
  6195  1116  0086               	movwf	6
  6196  1117  3001               	movlw	1	; select bank2/3
  6197  1118  0087               	movwf	7
  6198  1119  1581               	bsf	1,3
  6199                           
  6200                           ;Dimmer_B1.c: 762: DimmerLights->DimmingTrigger = 1;
  6201  111A  0855               	movf	_DimmerLights^(0+128),w
  6202  111B  0086               	movwf	6
  6203  111C  3001               	movlw	1	; select bank2/3
  6204  111D  0087               	movwf	7
  6205  111E  1601               	bsf	1,4
  6206                           
  6207                           ;Dimmer_B1.c: 763: DimmerLights->DimmingSwitch = 1;
  6208  111F  0855               	movf	_DimmerLights^(0+128),w
  6209  1120  0086               	movwf	6
  6210  1121  3001               	movlw	1	; select bank2/3
  6211  1122  0087               	movwf	7
  6212  1123  1681               	bsf	1,5
  6213  1124  0008               	return
  6214  1125                     __end_of_setDimmerLights_DimmingOn:	
  6215                           
  6216                           	psect	text16
  6217  1D39                     __ptext16:	
  6218 ;; *************** function _getSw_KeyStatus *****************
  6219 ;; Defined at:
  6220 ;;		line 237 in file "../src/Switch_B1.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;  sw              1    wreg     unsigned char 
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;  sw              1    0[COMMON] unsigned char 
  6225 ;;  status          1    1[BANK0 ] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      unsigned char 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6238 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6239 ;;Total ram usage:        3 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:    5
  6242 ;; This function calls:
  6243 ;;		Nothing
  6244 ;; This function is called by:
  6245 ;;		_setSw_Main
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           
  6250                           ;psect for function _getSw_KeyStatus
  6251  1D39                     _getSw_KeyStatus:	
  6252                           
  6253                           ;Switch_B1.c: 238: char status = 0;
  6254                           
  6255                           ;incstack = 0
  6256                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6257  1D39  0020               	movlb	0	; select bank0
  6258  1D3A  01A1               	clrf	getSw_KeyStatus@status
  6259                           
  6260                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6261  1D3B  01A2               	clrf	_getSw_KeyStatus$6368
  6262  1D3C  0AA2               	incf	_getSw_KeyStatus$6368,f
  6263  1D3D  1F0C               	btfss	12,6	;volatile
  6264  1D3E  1A0C               	btfsc	12,4	;volatile
  6265  1D3F  2D44               	goto	l6985
  6266  1D40  1C0C               	btfss	12,0	;volatile
  6267  1D41  1B8C               	btfsc	12,7	;volatile
  6268  1D42  2D44               	goto	l6985
  6269  1D43  01A2               	clrf	_getSw_KeyStatus$6368
  6270  1D44                     l6985:	
  6271  1D44  0822               	movf	_getSw_KeyStatus$6368,w
  6272  1D45  00A0               	movwf	??_getSw_KeyStatus
  6273  1D46  0820               	movf	??_getSw_KeyStatus,w
  6274  1D47  00A1               	movwf	getSw_KeyStatus@status
  6275                           
  6276                           ;Switch_B1.c: 275: return status;
  6277  1D48  0821               	movf	getSw_KeyStatus@status,w
  6278  1D49  0008               	return
  6279  1D4A                     __end_of_getSw_KeyStatus:	
  6280                           
  6281                           	psect	text17
  6282  1000                     __ptext17:	
  6283 ;; *************** function _SwPointSelect *****************
  6284 ;; Defined at:
  6285 ;;		line 25 in file "../src/Switch_B1.c"
  6286 ;; Parameters:    Size  Location     Type
  6287 ;;  sw              1    wreg     unsigned char 
  6288 ;; Auto vars:     Size  Location     Type
  6289 ;;  sw              1    1[BANK0 ] unsigned char 
  6290 ;; Return value:  Size  Location     Type
  6291 ;;		None               void
  6292 ;; Registers used:
  6293 ;;		wreg
  6294 ;; Tracked objects:
  6295 ;;		On entry : 0/0
  6296 ;;		On exit  : 0/0
  6297 ;;		Unchanged: 0/0
  6298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;Total ram usage:        2 bytes
  6304 ;; Hardware stack levels used:    1
  6305 ;; Hardware stack levels required when called:    5
  6306 ;; This function calls:
  6307 ;;		Nothing
  6308 ;; This function is called by:
  6309 ;;		_setSw_Main
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           
  6314                           ;psect for function _SwPointSelect
  6315  1000                     _SwPointSelect:	
  6316                           
  6317                           ;incstack = 0
  6318                           ; Regs used in _SwPointSelect: [wreg]
  6319                           ;SwPointSelect@sw stored from wreg
  6320  1000  0020               	movlb	0	; select bank0
  6321  1001  00A1               	movwf	SwPointSelect@sw
  6322                           
  6323                           ;Switch_B1.c: 28: if (sw == 1) {
  6324  1002  0821               	movf	SwPointSelect@sw,w
  6325  1003  3A01               	xorlw	1
  6326  1004  1D03               	skipz
  6327  1005  0008               	return
  6328                           
  6329                           ;Switch_B1.c: 29: Sw = &Sw1;
  6330  1006  30E3               	movlw	_Sw1& (0+255)
  6331  1007  00A0               	movwf	??_SwPointSelect
  6332  1008  0820               	movf	??_SwPointSelect,w
  6333  1009  0021               	movlb	1	; select bank1
  6334  100A  00D9               	movwf	_Sw^(0+128)
  6335  100B  0008               	return
  6336  100C                     __end_of_SwPointSelect:	
  6337                           
  6338                           	psect	text18
  6339  1E43                     __ptext18:	
  6340 ;; *************** function _TouchPower *****************
  6341 ;; Defined at:
  6342 ;;		line 10 in file "../src/Switch_B1.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;		None
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;		None
  6347 ;; Return value:  Size  Location     Type
  6348 ;;		None               void
  6349 ;; Registers used:
  6350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;Total ram usage:        0 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    6
  6363 ;; This function calls:
  6364 ;;		_Timeout_Counter
  6365 ;;		_set_TimeoutCleared
  6366 ;; This function is called by:
  6367 ;;		_Switch_Main
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           
  6372                           ;psect for function _TouchPower
  6373  1E43                     _TouchPower:	
  6374                           
  6375                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6376                           
  6377                           ;incstack = 0
  6378                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6379  1E43  0021               	movlb	1	; select bank1
  6380  1E44  1C2E               	btfss	_myMain^(0+128),0
  6381  1E45  0008               	return
  6382                           
  6383                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6384  1E46  0020               	movlb	0	; select bank0
  6385  1E47  180D               	btfsc	13,0	;volatile
  6386  1E48  0008               	return
  6387  1E49  2E4F               	goto	l7521
  6388  1E4A                     l2472:	
  6389                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6390                           
  6391                           
  6392                           ;Switch_B1.c: 14: RB0 = 1;
  6393  1E4A  0020               	movlb	0	; select bank0
  6394  1E4B  140D               	bsf	13,0	;volatile
  6395                           
  6396                           ;Switch_B1.c: 15: Timeout_Counter();
  6397  1E4C  319E  262E  319E   	fcall	_Timeout_Counter
  6398  1E4F                     l7521:	
  6399  1E4F  0020               	movlb	0	; select bank0
  6400  1E50  180D               	btfsc	13,0	;volatile
  6401  1E51  2E55               	goto	l7525
  6402  1E52  0021               	movlb	1	; select bank1
  6403  1E53  1D38               	btfss	(_myMain^(0+128)+10),2
  6404  1E54  2E4A               	goto	l2472
  6405  1E55                     l7525:	
  6406                           
  6407                           ;Switch_B1.c: 16: }
  6408                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6409  1E55  319B  2387         	fcall	_set_TimeoutCleared
  6410  1E57  0008               	return
  6411  1E58                     __end_of_TouchPower:	
  6412                           
  6413                           	psect	text19
  6414  1B87                     __ptext19:	
  6415 ;; *************** function _set_TimeoutCleared *****************
  6416 ;; Defined at:
  6417 ;;		line 281 in file "../src/Main_B1.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;		None
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;		None               void
  6424 ;; Registers used:
  6425 ;;		status,2
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;Total ram usage:        0 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    5
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_getAD
  6442 ;;		_TouchPower
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           
  6447                           ;psect for function _set_TimeoutCleared
  6448  1B87                     _set_TimeoutCleared:	
  6449                           
  6450                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6451                           
  6452                           ;incstack = 0
  6453                           ; Regs used in _set_TimeoutCleared: [status,2]
  6454  1B87  0021               	movlb	1	; select bank1
  6455  1B88  1138               	bcf	(_myMain^(0+128)+10),2
  6456                           
  6457                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6458  1B89  01B9               	clrf	(_myMain^(0+128)+11)
  6459  1B8A  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6460  1B8B  0008               	return
  6461  1B8C                     __end_of_set_TimeoutCleared:	
  6462                           
  6463                           	psect	text20
  6464  1E2E                     __ptext20:	
  6465 ;; *************** function _Timeout_Counter *****************
  6466 ;; Defined at:
  6467 ;;		line 272 in file "../src/Main_B1.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;		None
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;		None
  6472 ;; Return value:  Size  Location     Type
  6473 ;;		None               void
  6474 ;; Registers used:
  6475 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;Total ram usage:        0 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; Hardware stack levels required when called:    5
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_getAD
  6492 ;;		_TouchPower
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           
  6497                           ;psect for function _Timeout_Counter
  6498  1E2E                     _Timeout_Counter:	
  6499                           
  6500                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6501                           
  6502                           ;incstack = 0
  6503                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6504  1E2E  3001               	movlw	1
  6505  1E2F  0021               	movlb	1	; select bank1
  6506  1E30  07B9               	addwf	(_myMain^(0+128)+11),f
  6507  1E31  3000               	movlw	0
  6508  1E32  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6509                           
  6510                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6511  1E33  300B               	movlw	11
  6512  1E34  3EAE               	addlw	_myMain& (0+255)
  6513  1E35  0086               	movwf	6
  6514  1E36  0187               	clrf	7
  6515  1E37  3F40               	moviw [0]fsr1
  6516  1E38  3AA8               	xorlw	168
  6517  1E39  1D03               	skipz
  6518  1E3A  2E3D               	goto	u6125
  6519  1E3B  3F41               	moviw [1]fsr1
  6520  1E3C  3A61               	xorlw	97
  6521  1E3D                     u6125:	
  6522  1E3D  1D03               	skipz
  6523  1E3E  0008               	return
  6524                           
  6525                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6526  1E3F  01B9               	clrf	(_myMain^(0+128)+11)
  6527  1E40  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6528                           
  6529                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6530  1E41  1538               	bsf	(_myMain^(0+128)+10),2
  6531  1E42  0008               	return
  6532  1E43                     __end_of_Timeout_Counter:	
  6533                           
  6534                           	psect	text21
  6535  1B83                     __ptext21:	
  6536 ;; *************** function _Switch_Initialization *****************
  6537 ;; Defined at:
  6538 ;;		line 46 in file "../src/Switch_B1.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;		None
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;		None
  6543 ;; Return value:  Size  Location     Type
  6544 ;;		None               void
  6545 ;; Registers used:
  6546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;Total ram usage:        0 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    8
  6559 ;; This function calls:
  6560 ;;		_setSw_Initialization
  6561 ;; This function is called by:
  6562 ;;		_main
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           
  6567                           ;psect for function _Switch_Initialization
  6568  1B83                     _Switch_Initialization:	
  6569                           
  6570                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6571                           
  6572                           ;incstack = 0
  6573                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6574  1B83  3001               	movlw	1
  6575  1B84  319C  24C3         	fcall	_setSw_Initialization
  6576  1B86  0008               	return
  6577  1B87                     __end_of_Switch_Initialization:	
  6578                           
  6579                           	psect	text22
  6580  1CC3                     __ptext22:	
  6581 ;; *************** function _setSw_Initialization *****************
  6582 ;; Defined at:
  6583 ;;		line 66 in file "../src/Switch_B1.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;  sw              1    wreg     unsigned char 
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;  sw              1    4[BANK0 ] unsigned char 
  6588 ;; Return value:  Size  Location     Type
  6589 ;;		None               void
  6590 ;; Registers used:
  6591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;Total ram usage:        1 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    7
  6604 ;; This function calls:
  6605 ;;		_setLED
  6606 ;; This function is called by:
  6607 ;;		_Switch_Initialization
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           
  6612                           ;psect for function _setSw_Initialization
  6613  1CC3                     _setSw_Initialization:	
  6614                           
  6615                           ;incstack = 0
  6616                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6617                           ;setSw_Initialization@sw stored from wreg
  6618  1CC3  0020               	movlb	0	; select bank0
  6619  1CC4  00A4               	movwf	setSw_Initialization@sw
  6620                           
  6621                           ;Switch_B1.c: 68: setLED(sw, 1);
  6622  1CC5  01A2               	clrf	setLED@command
  6623  1CC6  0AA2               	incf	setLED@command,f
  6624  1CC7  0824               	movf	setSw_Initialization@sw,w
  6625  1CC8  3192  22F1  319C   	fcall	_setLED
  6626                           
  6627                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6628  1CCB  0020               	movlb	0	; select bank0
  6629  1CCC  01A2               	clrf	setLED@command
  6630  1CCD  0AA2               	incf	setLED@command,f
  6631  1CCE  0824               	movf	setSw_Initialization@sw,w
  6632  1CCF  3E01               	addlw	1
  6633  1CD0  3192  22F1         	fcall	_setLED
  6634  1CD2  0008               	return
  6635  1CD3                     __end_of_setSw_Initialization:	
  6636                           
  6637                           	psect	text23
  6638  1B56                     __ptext23:	
  6639 ;; *************** function _RF_Main *****************
  6640 ;; Defined at:
  6641 ;;		line 26 in file "../src/RF_Control_B1.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;		None
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;		None
  6646 ;; Return value:  Size  Location     Type
  6647 ;;		None               void
  6648 ;; Registers used:
  6649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6650 ;; Tracked objects:
  6651 ;;		On entry : 0/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;Total ram usage:        0 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; Hardware stack levels required when called:   12
  6662 ;; This function calls:
  6663 ;;		_setRF_Main
  6664 ;; This function is called by:
  6665 ;;		_main
  6666 ;; This function uses a non-reentrant model
  6667 ;;
  6668                           
  6669                           
  6670                           ;psect for function _RF_Main
  6671  1B56                     _RF_Main:	
  6672                           
  6673                           ;RF_Control_B1.c: 28: setRF_Main();
  6674                           
  6675                           ;incstack = 0
  6676                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6677  1B56  3184  2477         	fcall	_setRF_Main
  6678  1B58  0008               	return
  6679  1B59                     __end_of_RF_Main:	
  6680                           
  6681                           	psect	text24
  6682  0477                     __ptext24:	
  6683 ;; *************** function _setRF_Main *****************
  6684 ;; Defined at:
  6685 ;;		line 53 in file "../src/RF_Control_B1.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;		None
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;  error           1    3[BANK1 ] unsigned char 
  6690 ;; Return value:  Size  Location     Type
  6691 ;;		None               void
  6692 ;; Registers used:
  6693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;Total ram usage:        2 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; Hardware stack levels required when called:   11
  6706 ;; This function calls:
  6707 ;;		_CC2500_PowerOnInitial
  6708 ;;		_CC2500_RxData
  6709 ;;		_CC2500_TxData
  6710 ;;		_CC2500_WriteCommand
  6711 ;;		_RF_RxDisable
  6712 ;;		___lwdiv
  6713 ;;		_getBuz_GO
  6714 ;;		_getRF_KeyStatus
  6715 ;;		_getRxData
  6716 ;; This function is called by:
  6717 ;;		_RF_Main
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           
  6722                           ;psect for function _setRF_Main
  6723  0477                     _setRF_Main:	
  6724                           
  6725                           ;RF_Control_B1.c: 54: char error = 0;
  6726                           
  6727                           ;incstack = 0
  6728                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6729  0477  0021               	movlb	1	; select bank1
  6730  0478  01E9               	clrf	setRF_Main@error^(0+128)
  6731                           
  6732                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6733  0479  1C20               	btfss	_RF1^(0+128),0
  6734  047A  2D48               	goto	l2114
  6735                           
  6736                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6737  047B  319D  2517  3184   	fcall	_getBuz_GO
  6738  047E  0020               	movlb	0	; select bank0
  6739  047F  0821               	movf	?_getBuz_GO+1,w
  6740  0480  0420               	iorwf	?_getBuz_GO,w
  6741  0481  1D03               	skipz
  6742  0482  2D29               	goto	l7491
  6743                           
  6744                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6745  0483  319D  2528  3184   	fcall	_getRF_KeyStatus
  6746  0486  3A01               	xorlw	1
  6747  0487  3000               	movlw	0
  6748  0488  1903               	skipnz
  6749  0489  3001               	movlw	1
  6750  048A  0021               	movlb	1	; select bank1
  6751  048B  00E8               	movwf	??_setRF_Main^(0+128)
  6752  048C  0CE8               	rrf	??_setRF_Main^(0+128),f
  6753  048D  0CE8               	rrf	??_setRF_Main^(0+128),f
  6754  048E  0820               	movf	_RF1^(0+128),w
  6755  048F  0668               	xorwf	??_setRF_Main^(0+128),w
  6756  0490  397F               	andlw	-129
  6757  0491  0668               	xorwf	??_setRF_Main^(0+128),w
  6758  0492  00A0               	movwf	_RF1^(0+128)
  6759                           
  6760                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6761  0493  1FA0               	btfss	_RF1^(0+128),7
  6762  0494  2C97               	goto	l2118
  6763  0495  1F20               	btfss	_RF1^(0+128),6
  6764  0496  2D29               	goto	l7491
  6765  0497                     l2118:	
  6766                           
  6767                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6768  0497  1D20               	btfss	_RF1^(0+128),2
  6769  0498  2CE8               	goto	l2119
  6770                           
  6771                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6772  0499  1B20               	btfsc	_RF1^(0+128),6
  6773  049A  2CE3               	goto	l7463
  6774                           
  6775                           ;RF_Control_B1.c: 68: RF1.Count++;
  6776  049B  3001               	movlw	1
  6777  049C  07A2               	addwf	(_RF1^(0+128)+2),f
  6778  049D  3000               	movlw	0
  6779  049E  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6780                           
  6781                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6782  049F  3014               	movlw	20
  6783  04A0  0020               	movlb	0	; select bank0
  6784  04A1  00A0               	movwf	___lwdiv@divisor
  6785  04A2  3000               	movlw	0
  6786  04A3  00A1               	movwf	___lwdiv@divisor+1
  6787  04A4  0021               	movlb	1	; select bank1
  6788  04A5  0828               	movf	((_RF1+1)^(0+128)+7),w
  6789  04A6  0020               	movlb	0	; select bank0
  6790  04A7  01A3               	clrf	___lwdiv@dividend+1
  6791  04A8  07A3               	addwf	___lwdiv@dividend+1,f
  6792  04A9  0021               	movlb	1	; select bank1
  6793  04AA  0827               	movf	(_RF1^(0+128)+7),w
  6794  04AB  0020               	movlb	0	; select bank0
  6795  04AC  01A2               	clrf	___lwdiv@dividend
  6796  04AD  07A2               	addwf	___lwdiv@dividend,f
  6797  04AE  3192  2281  3184   	fcall	___lwdiv
  6798  04B1  0020               	movlb	0	; select bank0
  6799  04B2  0821               	movf	?___lwdiv+1,w
  6800  04B3  0021               	movlb	1	; select bank1
  6801  04B4  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6802  04B5  1D03               	skipz
  6803  04B6  2CBB               	goto	u7235
  6804  04B7  0020               	movlb	0	; select bank0
  6805  04B8  0820               	movf	?___lwdiv,w
  6806  04B9  0021               	movlb	1	; select bank1
  6807  04BA  0222               	subwf	(_RF1^(0+128)+2),w
  6808  04BB                     u7235:	
  6809  04BB  1C03               	skipc
  6810  04BC  2D29               	goto	l7491
  6811                           
  6812                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6813  04BD  3014               	movlw	20
  6814  04BE  0020               	movlb	0	; select bank0
  6815  04BF  00A0               	movwf	___lwdiv@divisor
  6816  04C0  3000               	movlw	0
  6817  04C1  00A1               	movwf	___lwdiv@divisor+1
  6818  04C2  0021               	movlb	1	; select bank1
  6819  04C3  0828               	movf	((_RF1+1)^(0+128)+7),w
  6820  04C4  0020               	movlb	0	; select bank0
  6821  04C5  01A3               	clrf	___lwdiv@dividend+1
  6822  04C6  07A3               	addwf	___lwdiv@dividend+1,f
  6823  04C7  0021               	movlb	1	; select bank1
  6824  04C8  0827               	movf	(_RF1^(0+128)+7),w
  6825  04C9  0020               	movlb	0	; select bank0
  6826  04CA  01A2               	clrf	___lwdiv@dividend
  6827  04CB  07A2               	addwf	___lwdiv@dividend,f
  6828  04CC  3192  2281  3184   	fcall	___lwdiv
  6829  04CF  0020               	movlb	0	; select bank0
  6830  04D0  0821               	movf	?___lwdiv+1,w
  6831  04D1  0021               	movlb	1	; select bank1
  6832  04D2  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6833  04D3  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6834  04D4  0020               	movlb	0	; select bank0
  6835  04D5  0820               	movf	?___lwdiv,w
  6836  04D6  0021               	movlb	1	; select bank1
  6837  04D7  01A2               	clrf	(_RF1^(0+128)+2)
  6838  04D8  07A2               	addwf	(_RF1^(0+128)+2),f
  6839                           
  6840                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6841  04D9  1120               	bcf	_RF1^(0+128),2
  6842                           
  6843                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6844  04DA  01AA               	clrf	(_RF1^(0+128)+10)
  6845  04DB  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6846                           
  6847                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6848  04DC  319C  24B4  3184   	fcall	_RF_RxDisable
  6849                           
  6850                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6851  04DF  3188  207E  3184   	fcall	_CC2500_TxData
  6852                           
  6853                           ;RF_Control_B1.c: 77: }
  6854                           ;RF_Control_B1.c: 78: } else {
  6855  04E2  2D29               	goto	l7491
  6856  04E3                     l7463:	
  6857                           
  6858                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6859  04E3  0021               	movlb	1	; select bank1
  6860  04E4  01A2               	clrf	(_RF1^(0+128)+2)
  6861  04E5  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6862                           
  6863                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6864  04E6  1120               	bcf	_RF1^(0+128),2
  6865                           
  6866                           ;RF_Control_B1.c: 81: }
  6867                           ;RF_Control_B1.c: 82: } else {
  6868  04E7  2D29               	goto	l7491
  6869  04E8                     l2119:	
  6870                           
  6871                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6872  04E8  1DA0               	btfss	_RF1^(0+128),3
  6873  04E9  2CF7               	goto	l7477
  6874                           
  6875                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6876  04EA  3188  2013  3184   	fcall	_CC2500_RxData
  6877                           
  6878                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6879  04ED  0021               	movlb	1	; select bank1
  6880  04EE  1CA0               	btfss	_RF1^(0+128),1
  6881  04EF  2D29               	goto	l7491
  6882                           
  6883                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6884  04F0  10A0               	bcf	_RF1^(0+128),1
  6885                           
  6886                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6887  04F1  01AA               	clrf	(_RF1^(0+128)+10)
  6888  04F2  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6889                           
  6890                           ;RF_Control_B1.c: 97: getRxData();
  6891  04F3  318A  223A  3184   	fcall	_getRxData
  6892                           
  6893                           ;RF_Control_B1.c: 100: }
  6894                           ;RF_Control_B1.c: 101: } else {
  6895  04F6  2D29               	goto	l7491
  6896  04F7                     l7477:	
  6897                           
  6898                           ;RF_Control_B1.c: 102: RF1.Count++;
  6899  04F7  3001               	movlw	1
  6900  04F8  0021               	movlb	1	; select bank1
  6901  04F9  07A2               	addwf	(_RF1^(0+128)+2),f
  6902  04FA  3000               	movlw	0
  6903  04FB  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6904                           
  6905                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6906  04FC  3014               	movlw	20
  6907  04FD  0020               	movlb	0	; select bank0
  6908  04FE  00A0               	movwf	___lwdiv@divisor
  6909  04FF  3000               	movlw	0
  6910  0500  00A1               	movwf	___lwdiv@divisor+1
  6911  0501  0021               	movlb	1	; select bank1
  6912  0502  0828               	movf	((_RF1+1)^(0+128)+7),w
  6913  0503  0020               	movlb	0	; select bank0
  6914  0504  01A3               	clrf	___lwdiv@dividend+1
  6915  0505  07A3               	addwf	___lwdiv@dividend+1,f
  6916  0506  0021               	movlb	1	; select bank1
  6917  0507  0827               	movf	(_RF1^(0+128)+7),w
  6918  0508  0020               	movlb	0	; select bank0
  6919  0509  01A2               	clrf	___lwdiv@dividend
  6920  050A  07A2               	addwf	___lwdiv@dividend,f
  6921  050B  3192  2281  3184   	fcall	___lwdiv
  6922  050E  0020               	movlb	0	; select bank0
  6923  050F  0821               	movf	?___lwdiv+1,w
  6924  0510  0021               	movlb	1	; select bank1
  6925  0511  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6926  0512  1D03               	skipz
  6927  0513  2D18               	goto	u7265
  6928  0514  0020               	movlb	0	; select bank0
  6929  0515  0820               	movf	?___lwdiv,w
  6930  0516  0021               	movlb	1	; select bank1
  6931  0517  0222               	subwf	(_RF1^(0+128)+2),w
  6932  0518                     u7265:	
  6933  0518  1C03               	skipc
  6934  0519  2D29               	goto	l7491
  6935                           
  6936                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6937  051A  01A2               	clrf	(_RF1^(0+128)+2)
  6938  051B  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6939                           
  6940                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6941  051C  15A0               	bsf	_RF1^(0+128),3
  6942                           
  6943                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6944  051D  3036               	movlw	54
  6945  051E  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6946                           
  6947                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6948  0521  303A               	movlw	58
  6949  0522  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6950                           
  6951                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6952  0525  3034               	movlw	52
  6953  0526  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6954  0529                     l7491:	
  6955                           
  6956                           ;RF_Control_B1.c: 111: }
  6957                           ;RF_Control_B1.c: 112: }
  6958                           ;RF_Control_B1.c: 113: }
  6959                           ;RF_Control_B1.c: 114: }
  6960                           ;RF_Control_B1.c: 115: }
  6961                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6962  0529  3001               	movlw	1
  6963  052A  0021               	movlb	1	; select bank1
  6964  052B  07AA               	addwf	(_RF1^(0+128)+10),f
  6965  052C  3000               	movlw	0
  6966  052D  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6967                           
  6968                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6969  052E  300B               	movlw	11
  6970  052F  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6971  0530  30B9               	movlw	185
  6972  0531  1903               	skipnz
  6973  0532  022A               	subwf	(_RF1^(0+128)+10),w
  6974  0533  1C03               	skipc
  6975  0534  2D41               	goto	l7505
  6976                           
  6977                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6978  0535  01AA               	clrf	(_RF1^(0+128)+10)
  6979  0536  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6980                           
  6981                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6982  0537  11A0               	bcf	_RF1^(0+128),3
  6983                           
  6984                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6985  0538  10A0               	bcf	_RF1^(0+128),1
  6986                           
  6987                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6988  0539  3036               	movlw	54
  6989  053A  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6990                           
  6991                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6992  053D  303A               	movlw	58
  6993  053E  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6994  0541                     l7505:	
  6995                           
  6996                           ;RF_Control_B1.c: 125: }
  6997                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6998  0541  0021               	movlb	1	; select bank1
  6999  0542  1F21               	btfss	(_RF1^(0+128)+1),6
  7000  0543  0008               	return
  7001                           
  7002                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7003  0544  1321               	bcf	(_RF1^(0+128)+1),6
  7004                           
  7005                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7006  0545  319E  2619         	fcall	_CC2500_PowerOnInitial
  7007                           
  7008                           ;RF_Control_B1.c: 130: }
  7009                           ;RF_Control_B1.c: 132: } else {
  7010  0547  0008               	return
  7011  0548                     l2114:	
  7012                           
  7013                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7014  0548  1C2E               	btfss	_myMain^(0+128),0
  7015  0549  0008               	return
  7016                           
  7017                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7018  054A  1420               	bsf	_RF1^(0+128),0
  7019  054B  0008               	return
  7020  054C                     __end_of_setRF_Main:	
  7021                           
  7022                           	psect	text25
  7023  0A3A                     __ptext25:	
  7024 ;; *************** function _getRxData *****************
  7025 ;; Defined at:
  7026 ;;		line 227 in file "../src/RF_Control_B1.c"
  7027 ;; Parameters:    Size  Location     Type
  7028 ;;		None
  7029 ;; Auto vars:     Size  Location     Type
  7030 ;;  error           1    1[BANK1 ] unsigned char 
  7031 ;; Return value:  Size  Location     Type
  7032 ;;		None               void
  7033 ;; Registers used:
  7034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7035 ;; Tracked objects:
  7036 ;;		On entry : 0/0
  7037 ;;		On exit  : 0/0
  7038 ;;		Unchanged: 0/0
  7039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7042 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7044 ;;Total ram usage:        2 bytes
  7045 ;; Hardware stack levels used:    1
  7046 ;; Hardware stack levels required when called:   10
  7047 ;; This function calls:
  7048 ;;		_getMain_All_Error_Status
  7049 ;;		_setControl_Lights_Table
  7050 ;;		_setLog_Code
  7051 ;;		_setTxData
  7052 ;; This function is called by:
  7053 ;;		_setRF_Main
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           
  7058                           ;psect for function _getRxData
  7059  0A3A                     _getRxData:	
  7060                           
  7061                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7062                           
  7063                           ;incstack = 0
  7064                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7065  0A3A  0023               	movlb	3	; select bank3
  7066  0A3B  0820               	movf	_RF_Data^(0+384),w
  7067  0A3C  3AAA               	xorlw	170
  7068  0A3D  1D03               	skipz
  7069  0A3E  2A50               	goto	l6931
  7070  0A3F  0821               	movf	(_RF_Data^(0+384)+1),w
  7071  0A40  3A01               	xorlw	1
  7072  0A41  1D03               	skipz
  7073  0A42  2A50               	goto	l6931
  7074                           
  7075                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7076  0A43  3055               	movlw	85
  7077  0A44  0021               	movlb	1	; select bank1
  7078  0A45  00E6               	movwf	??_getRxData^(0+128)
  7079  0A46  086F               	movf	_product^(0+128),w
  7080  0A47  3E02               	addlw	2
  7081  0A48  0086               	movwf	6
  7082  0A49  3002               	movlw	2	; select bank4/5
  7083  0A4A  0087               	movwf	7
  7084  0A4B  0866               	movf	??_getRxData^(0+128),w
  7085  0A4C  0081               	movwf	1
  7086                           
  7087                           ;RF_Control_B1.c: 231: setTxData();
  7088  0A4D  318F  2745         	fcall	_setTxData
  7089                           
  7090                           ;RF_Control_B1.c: 235: } else {
  7091  0A4F  0008               	return
  7092  0A50                     l6931:	
  7093                           
  7094                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7095  0A50  3000               	movlw	0
  7096  0A51  3191  21AF  318A   	fcall	_getMain_All_Error_Status
  7097  0A54  0021               	movlb	1	; select bank1
  7098  0A55  00E6               	movwf	??_getRxData^(0+128)
  7099  0A56  0866               	movf	??_getRxData^(0+128),w
  7100  0A57  00E7               	movwf	getRxData@error^(0+128)
  7101                           
  7102                           ;RF_Control_B1.c: 237: if (error == 0) {
  7103  0A58  08E7               	movf	getRxData@error^(0+128),f
  7104  0A59  1D03               	skipz
  7105  0A5A  2AAA               	goto	l2159
  7106                           
  7107                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7108  0A5B  1F20               	btfss	_RF1^(0+128),6
  7109  0A5C  2A68               	goto	l6943
  7110                           
  7111                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7112  0A5D  0023               	movlb	3	; select bank3
  7113  0A5E  08A0               	movf	_RF_Data^(0+384),f
  7114  0A5F  1D03               	skipz
  7115  0A60  0008               	return
  7116  0A61  0821               	movf	(_RF_Data^(0+384)+1),w
  7117  0A62  3A64               	xorlw	100
  7118  0A63  1D03               	skipz
  7119  0A64  0008               	return
  7120                           
  7121                           ;RF_Control_B1.c: 241: setLog_Code();
  7122  0A65  3191  21E2         	fcall	_setLog_Code
  7123                           
  7124                           ;RF_Control_B1.c: 242: }
  7125                           ;RF_Control_B1.c: 243: } else {
  7126  0A67  0008               	return
  7127  0A68                     l6943:	
  7128                           
  7129                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7130  0A68  0023               	movlb	3	; select bank3
  7131  0A69  0834               	movf	(_RF_Data^(0+384)+20),w
  7132  0A6A  3AD1               	xorlw	209
  7133  0A6B  1903               	skipnz
  7134  0A6C  2A71               	goto	l6947
  7135  0A6D  0834               	movf	(_RF_Data^(0+384)+20),w
  7136  0A6E  3A0A               	xorlw	10
  7137  0A6F  1D03               	skipz
  7138  0A70  0008               	return
  7139  0A71                     l6947:	
  7140                           
  7141                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7142  0A71  08A0               	movf	_RF_Data^(0+384),f
  7143  0A72  1D03               	skipz
  7144  0A73  0008               	return
  7145  0A74  0821               	movf	(_RF_Data^(0+384)+1),w
  7146  0A75  3A02               	xorlw	2
  7147  0A76  1D03               	skipz
  7148  0A77  0008               	return
  7149                           
  7150                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7151  0A78  082C               	movf	(_RF_Data^(0+384)+12),w
  7152  0A79  3AFF               	xorlw	255
  7153  0A7A  1D03               	skipz
  7154  0A7B  2A86               	goto	l6959
  7155  0A7C  082D               	movf	(_RF_Data^(0+384)+13),w
  7156  0A7D  3AFF               	xorlw	255
  7157  0A7E  1D03               	skipz
  7158  0A7F  2A86               	goto	l6959
  7159  0A80  082E               	movf	(_RF_Data^(0+384)+14),w
  7160  0A81  3AFF               	xorlw	255
  7161  0A82  1D03               	skipz
  7162  0A83  2A86               	goto	l6959
  7163                           
  7164                           ;RF_Control_B1.c: 249: __nop();
  7165  0A84  0000               	nop
  7166                           
  7167                           ;RF_Control_B1.c: 250: } else {
  7168  0A85  0008               	return
  7169  0A86                     l6959:	
  7170                           
  7171                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7172  0A86  0021               	movlb	1	; select bank1
  7173  0A87  086F               	movf	_product^(0+128),w
  7174  0A88  3E0C               	addlw	12
  7175  0A89  0086               	movwf	6
  7176  0A8A  3002               	movlw	2	; select bank4/5
  7177  0A8B  0087               	movwf	7
  7178  0A8C  0023               	movlb	3	; select bank3
  7179  0A8D  082C               	movf	(_RF_Data^(0+384)+12),w
  7180  0A8E  0601               	xorwf	1,w
  7181  0A8F  1D03               	skipz
  7182  0A90  0008               	return
  7183  0A91  0021               	movlb	1	; select bank1
  7184  0A92  086F               	movf	_product^(0+128),w
  7185  0A93  3E0D               	addlw	13
  7186  0A94  0086               	movwf	6
  7187  0A95  3002               	movlw	2	; select bank4/5
  7188  0A96  0087               	movwf	7
  7189  0A97  0023               	movlb	3	; select bank3
  7190  0A98  082D               	movf	(_RF_Data^(0+384)+13),w
  7191  0A99  0601               	xorwf	1,w
  7192  0A9A  1D03               	skipz
  7193  0A9B  0008               	return
  7194  0A9C  0021               	movlb	1	; select bank1
  7195  0A9D  086F               	movf	_product^(0+128),w
  7196  0A9E  3E0E               	addlw	14
  7197  0A9F  0086               	movwf	6
  7198  0AA0  3002               	movlw	2	; select bank4/5
  7199  0AA1  0087               	movwf	7
  7200  0AA2  0023               	movlb	3	; select bank3
  7201  0AA3  082E               	movf	(_RF_Data^(0+384)+14),w
  7202  0AA4  0601               	xorwf	1,w
  7203  0AA5  1D03               	skipz
  7204  0AA6  0008               	return
  7205                           
  7206                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7207  0AA7  3189  21C8         	fcall	_setControl_Lights_Table
  7208                           
  7209                           ;RF_Control_B1.c: 253: }
  7210                           ;RF_Control_B1.c: 254: }
  7211                           ;RF_Control_B1.c: 256: }
  7212                           ;RF_Control_B1.c: 267: }
  7213                           ;RF_Control_B1.c: 268: }
  7214                           ;RF_Control_B1.c: 269: } else {
  7215  0AA9  0008               	return
  7216  0AAA                     l2159:	
  7217                           
  7218                           ;RF_Control_B1.c: 270: __nop();
  7219  0AAA  0000               	nop
  7220  0AAB  0008               	return
  7221  0AAC                     __end_of_getRxData:	
  7222                           
  7223                           	psect	text26
  7224  11E2                     __ptext26:	
  7225 ;; *************** function _setLog_Code *****************
  7226 ;; Defined at:
  7227 ;;		line 276 in file "../src/RF_Control_B1.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;		None
  7232 ;; Return value:  Size  Location     Type
  7233 ;;		None               void
  7234 ;; Registers used:
  7235 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;Total ram usage:        1 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    7
  7248 ;; This function calls:
  7249 ;;		_setBuz
  7250 ;;		_setMemory_LoopSave
  7251 ;;		_setMemory_Modify
  7252 ;;		_setProductData
  7253 ;; This function is called by:
  7254 ;;		_getRxData
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           
  7259                           ;psect for function _setLog_Code
  7260  11E2                     _setLog_Code:	
  7261                           
  7262                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7263                           
  7264                           ;incstack = 0
  7265                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7266  11E2  0021               	movlb	1	; select bank1
  7267  11E3  1320               	bcf	_RF1^(0+128),6
  7268                           
  7269                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7270  11E4  0023               	movlb	3	; select bank3
  7271  11E5  082C               	movf	(_RF_Data^(0+384)+12),w
  7272  11E6  0020               	movlb	0	; select bank0
  7273  11E7  00E5               	movwf	??_setLog_Code
  7274  11E8  0865               	movf	??_setLog_Code,w
  7275  11E9  00E2               	movwf	setProductData@value
  7276  11EA  300C               	movlw	12
  7277  11EB  319C  242C  3191   	fcall	_setProductData
  7278                           
  7279                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7280  11EE  0023               	movlb	3	; select bank3
  7281  11EF  082D               	movf	(_RF_Data^(0+384)+13),w
  7282  11F0  0020               	movlb	0	; select bank0
  7283  11F1  00E5               	movwf	??_setLog_Code
  7284  11F2  0865               	movf	??_setLog_Code,w
  7285  11F3  00E2               	movwf	setProductData@value
  7286  11F4  300D               	movlw	13
  7287  11F5  319C  242C  3191   	fcall	_setProductData
  7288                           
  7289                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7290  11F8  0023               	movlb	3	; select bank3
  7291  11F9  082E               	movf	(_RF_Data^(0+384)+14),w
  7292  11FA  0020               	movlb	0	; select bank0
  7293  11FB  00E5               	movwf	??_setLog_Code
  7294  11FC  0865               	movf	??_setLog_Code,w
  7295  11FD  00E2               	movwf	setProductData@value
  7296  11FE  300E               	movlw	14
  7297  11FF  319C  242C  3191   	fcall	_setProductData
  7298                           
  7299                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7300  1202  3064               	movlw	100
  7301  1203  0020               	movlb	0	; select bank0
  7302  1204  00A9               	movwf	setBuz@time
  7303  1205  3000               	movlw	0
  7304  1206  00AA               	movwf	setBuz@time+1
  7305  1207  3001               	movlw	1
  7306  1208  3195  2551  3191   	fcall	_setBuz
  7307                           
  7308                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7309  120B  0021               	movlb	1	; select bank1
  7310  120C  1EAE               	btfss	_myMain^(0+128),5
  7311  120D  2A12               	goto	l2174
  7312                           
  7313                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7314  120E  3001               	movlw	1
  7315  120F  319D  25DD  3191   	fcall	_setMemory_LoopSave
  7316  1212                     l2174:	
  7317                           
  7318                           ;RF_Control_B1.c: 284: }
  7319                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7320  1212  3001               	movlw	1
  7321  1213  319D  25A4         	fcall	_setMemory_Modify
  7322  1215  0008               	return
  7323  1216                     __end_of_setLog_Code:	
  7324                           
  7325                           	psect	text27
  7326  1DDD                     __ptext27:	
  7327 ;; *************** function _setMemory_LoopSave *****************
  7328 ;; Defined at:
  7329 ;;		line 1087 in file "../src/MCU_B1.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;  command         1    wreg     unsigned char 
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;  command         1    1[BANK0 ] unsigned char 
  7334 ;; Return value:  Size  Location     Type
  7335 ;;		None               void
  7336 ;; Registers used:
  7337 ;;		wreg, status,2, status,0
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;Total ram usage:        2 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    5
  7350 ;; This function calls:
  7351 ;;		Nothing
  7352 ;; This function is called by:
  7353 ;;		_setLog_Code
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           
  7358                           ;psect for function _setMemory_LoopSave
  7359  1DDD                     _setMemory_LoopSave:	
  7360                           
  7361                           ;incstack = 0
  7362                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7363                           ;setMemory_LoopSave@command stored from wreg
  7364  1DDD  0020               	movlb	0	; select bank0
  7365  1DDE  00A1               	movwf	setMemory_LoopSave@command
  7366                           
  7367                           ;MCU_B1.c: 1088: Memory.LoopSave = command == 1 ? 1 : 0;
  7368  1DDF  0821               	movf	setMemory_LoopSave@command,w
  7369  1DE0  3A01               	xorlw	1
  7370  1DE1  3000               	movlw	0
  7371  1DE2  1903               	skipnz
  7372  1DE3  3001               	movlw	1
  7373  1DE4  00A0               	movwf	??_setMemory_LoopSave
  7374  1DE5  0DA0               	rlf	??_setMemory_LoopSave,f
  7375  1DE6  0DA0               	rlf	??_setMemory_LoopSave,f
  7376  1DE7  0023               	movlb	3	; select bank3
  7377  1DE8  0862               	movf	(_Memory^(0+384)+36),w
  7378  1DE9  0020               	movlb	0	; select bank0
  7379  1DEA  0620               	xorwf	??_setMemory_LoopSave,w
  7380  1DEB  39FB               	andlw	-5
  7381  1DEC  0620               	xorwf	??_setMemory_LoopSave,w
  7382  1DED  0023               	movlb	3	; select bank3
  7383  1DEE  00E2               	movwf	(_Memory^(0+384)+36)
  7384  1DEF  0008               	return
  7385  1DF0                     __end_of_setMemory_LoopSave:	
  7386                           
  7387                           	psect	text28
  7388  09C8                     __ptext28:	
  7389 ;; *************** function _setControl_Lights_Table *****************
  7390 ;; Defined at:
  7391 ;;		line 289 in file "../src/RF_Control_B1.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;		None
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;		None
  7396 ;; Return value:  Size  Location     Type
  7397 ;;		None               void
  7398 ;; Registers used:
  7399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7400 ;; Tracked objects:
  7401 ;;		On entry : 0/0
  7402 ;;		On exit  : 0/0
  7403 ;;		Unchanged: 0/0
  7404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;Total ram usage:        0 bytes
  7410 ;; Hardware stack levels used:    1
  7411 ;; Hardware stack levels required when called:    9
  7412 ;; This function calls:
  7413 ;;		_getDimmerLights_Status
  7414 ;;		_getMain_All_LightsStatus
  7415 ;;		_setCmd_Status
  7416 ;;		_setDimmerLights_SwOff
  7417 ;;		_setDimmerLights_SwOn
  7418 ;;		_setProductData
  7419 ;;		_setRFSW_AdjControl
  7420 ;;		_setRFSW_Control
  7421 ;;		_setTxData
  7422 ;; This function is called by:
  7423 ;;		_getRxData
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           
  7428                           ;psect for function _setControl_Lights_Table
  7429  09C8                     _setControl_Lights_Table:	
  7430                           
  7431                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7432                           
  7433                           ;incstack = 0
  7434                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7435  09C8  2A2A               	goto	l6571
  7436  09C9                     l6553:	
  7437                           ;RF_Control_B1.c: 292: case 0x00:
  7438                           
  7439                           
  7440                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7441  09C9  319B  23DE  3189   	fcall	_getMain_All_LightsStatus
  7442  09CC  3A01               	xorlw	1
  7443  09CD  1D03               	skipz
  7444  09CE  29E5               	goto	l6561
  7445                           
  7446                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7447  09CF  3001               	movlw	1
  7448  09D0  319C  24D3  3189   	fcall	_getDimmerLights_Status
  7449  09D3  3A01               	xorlw	1
  7450  09D4  1D03               	skipz
  7451  09D5  29DE               	goto	l6559
  7452                           
  7453                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7454  09D6  3001               	movlw	1
  7455  09D7  3192  2216  3189   	fcall	_setDimmerLights_SwOn
  7456                           
  7457                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7458  09DA  3001               	movlw	1
  7459  09DB  3192  22B8  3189   	fcall	_setDimmerLights_SwOff
  7460  09DE                     l6559:	
  7461                           
  7462                           ;RF_Control_B1.c: 299: }
  7463                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7464  09DE  0020               	movlb	0	; select bank0
  7465  09DF  01A0               	clrf	setCmd_Status@cmd
  7466  09E0  0AA0               	incf	setCmd_Status@cmd,f
  7467  09E1  3001               	movlw	1
  7468  09E2  319E  26B4         	fcall	_setCmd_Status
  7469                           
  7470                           ;RF_Control_B1.c: 315: } else {
  7471  09E4  0008               	return
  7472  09E5                     l6561:	
  7473                           
  7474                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7475  09E5  0020               	movlb	0	; select bank0
  7476  09E6  01E2               	clrf	setProductData@value
  7477  09E7  3009               	movlw	9
  7478  09E8  319C  242C  3189   	fcall	_setProductData
  7479                           
  7480                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7481  09EB  0020               	movlb	0	; select bank0
  7482  09EC  01E2               	clrf	setProductData@value
  7483  09ED  300B               	movlw	11
  7484  09EE  319C  242C  3189   	fcall	_setProductData
  7485                           
  7486                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7487  09F1  0020               	movlb	0	; select bank0
  7488  09F2  01E2               	clrf	setProductData@value
  7489  09F3  300F               	movlw	15
  7490  09F4  319C  242C  3189   	fcall	_setProductData
  7491                           
  7492                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7493  09F7  0020               	movlb	0	; select bank0
  7494  09F8  01E2               	clrf	setProductData@value
  7495  09F9  3011               	movlw	17
  7496  09FA  319C  242C  3189   	fcall	_setProductData
  7497                           
  7498                           ;RF_Control_B1.c: 320: setTxData();
  7499  09FD  318F  2745         	fcall	_setTxData
  7500                           
  7501                           ;RF_Control_B1.c: 321: }
  7502                           ;RF_Control_B1.c: 322: break;
  7503  09FF  0008               	return
  7504  0A00                     l6563:	
  7505                           ;RF_Control_B1.c: 324: case 0x20:
  7506                           
  7507                           
  7508                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7509  0A00  0020               	movlb	0	; select bank0
  7510  0A01  01E2               	clrf	setProductData@value
  7511  0A02  3009               	movlw	9
  7512  0A03  319C  242C  3189   	fcall	_setProductData
  7513                           
  7514                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7515  0A06  0020               	movlb	0	; select bank0
  7516  0A07  01E2               	clrf	setProductData@value
  7517  0A08  300B               	movlw	11
  7518  0A09  319C  242C  3189   	fcall	_setProductData
  7519                           
  7520                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7521  0A0C  0021               	movlb	1	; select bank1
  7522  0A0D  086F               	movf	_product^(0+128),w
  7523  0A0E  0086               	movwf	6
  7524  0A0F  3002               	movlw	2	; select bank4/5
  7525  0A10  0087               	movwf	7
  7526  0A11  3002               	movlw	2	; select bank4/5
  7527  0A12  3F4F               	moviw [15]fsr1
  7528  0A13  0020               	movlb	0	; select bank0
  7529  0A14  00E2               	movwf	setProductData@value
  7530  0A15  300F               	movlw	15
  7531  0A16  319C  242C  3189   	fcall	_setProductData
  7532                           
  7533                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7534  0A19  0020               	movlb	0	; select bank0
  7535  0A1A  01E2               	clrf	setProductData@value
  7536  0A1B  3011               	movlw	17
  7537  0A1C  319C  242C  3189   	fcall	_setProductData
  7538                           
  7539                           ;RF_Control_B1.c: 329: setTxData();
  7540  0A1F  318F  2745         	fcall	_setTxData
  7541                           
  7542                           ;RF_Control_B1.c: 330: break;
  7543  0A21  0008               	return
  7544  0A22                     l6565:	
  7545                           ;RF_Control_B1.c: 333: case 0x01:
  7546                           
  7547                           
  7548                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7549  0A22  3001               	movlw	1
  7550  0A23  3193  23A2         	fcall	_setRFSW_Control
  7551                           
  7552                           ;RF_Control_B1.c: 335: break;
  7553  0A25  0008               	return
  7554  0A26                     l6567:	
  7555                           ;RF_Control_B1.c: 339: case 0x11:
  7556                           
  7557                           
  7558                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7559  0A26  3001               	movlw	1
  7560  0A27  318B  231E         	fcall	_setRFSW_AdjControl
  7561                           
  7562                           ;RF_Control_B1.c: 370: }
  7563                           
  7564                           ;RF_Control_B1.c: 341: break;
  7565  0A29  0008               	return
  7566  0A2A                     l6571:	
  7567  0A2A  0023               	movlb	3	; select bank3
  7568  0A2B  082F               	movf	(_RF_Data^(0+384)+15),w
  7569                           
  7570                           ; Switch size 1, requested type "space"
  7571                           ; Number of cases is 4, Range of values is 0 to 32
  7572                           ; switch strategies available:
  7573                           ; Name         Instructions Cycles
  7574                           ; simple_byte           13     7 (average)
  7575                           ; direct_byte           72     6 (fixed)
  7576                           ; jumptable            260     6 (fixed)
  7577                           ;	Chosen strategy is simple_byte
  7578  0A2C  3A00               	xorlw	0	; case 0
  7579  0A2D  1903               	skipnz
  7580  0A2E  29C9               	goto	l6553
  7581  0A2F  3A01               	xorlw	1	; case 1
  7582  0A30  1903               	skipnz
  7583  0A31  2A22               	goto	l6565
  7584  0A32  3A10               	xorlw	16	; case 17
  7585  0A33  1903               	skipnz
  7586  0A34  2A26               	goto	l6567
  7587  0A35  3A31               	xorlw	49	; case 32
  7588  0A36  1903               	skipnz
  7589  0A37  2A00               	goto	l6563
  7590  0A38  2A39               	goto	l2187
  7591  0A39                     l2187:	
  7592  0A39  0008               	return
  7593  0A3A                     __end_of_setControl_Lights_Table:	
  7594                           
  7595                           	psect	text29
  7596  13A2                     __ptext29:	
  7597 ;; *************** function _setRFSW_Control *****************
  7598 ;; Defined at:
  7599 ;;		line 378 in file "../src/RF_Control_B1.c"
  7600 ;; Parameters:    Size  Location     Type
  7601 ;;  sw              1    wreg     unsigned char 
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;  sw              1   79[BANK0 ] unsigned char 
  7604 ;;  status          1   78[BANK0 ] unsigned char 
  7605 ;; Return value:  Size  Location     Type
  7606 ;;		None               void
  7607 ;; Registers used:
  7608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7615 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7616 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7618 ;;Total ram usage:        3 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; Hardware stack levels required when called:    8
  7621 ;; This function calls:
  7622 ;;		_getDimmerLights_Status
  7623 ;;		_setBuz
  7624 ;;		_setDelayOff_GO
  7625 ;;		_setDimmerLights_SwOff
  7626 ;;		_setDimmerLights_SwOn
  7627 ;;		_setRF_DimmerLights
  7628 ;;		_setTxData
  7629 ;; This function is called by:
  7630 ;;		_setControl_Lights_Table
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           
  7635                           ;psect for function _setRFSW_Control
  7636  13A2                     _setRFSW_Control:	
  7637                           
  7638                           ;incstack = 0
  7639                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7640                           ;setRFSW_Control@sw stored from wreg
  7641  13A2  0020               	movlb	0	; select bank0
  7642  13A3  00EF               	movwf	setRFSW_Control@sw
  7643                           
  7644                           ;RF_Control_B1.c: 379: char status = 0;
  7645  13A4  01EE               	clrf	setRFSW_Control@status
  7646                           
  7647                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7648  13A5  0023               	movlb	3	; select bank3
  7649  13A6  0830               	movf	(_RF_Data^(0+384)+16),w
  7650  13A7  3A80               	xorlw	128
  7651  13A8  1D03               	skipz
  7652  13A9  2BD5               	goto	l6297
  7653                           
  7654                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7655  13AA  0020               	movlb	0	; select bank0
  7656  13AB  01E5               	clrf	setDelayOff_GO@command
  7657  13AC  0AE5               	incf	setDelayOff_GO@command,f
  7658  13AD  0023               	movlb	3	; select bank3
  7659  13AE  0831               	movf	(_RF_Data^(0+384)+17),w
  7660  13AF  0020               	movlb	0	; select bank0
  7661  13B0  00ED               	movwf	??_setRFSW_Control
  7662  13B1  086D               	movf	??_setRFSW_Control,w
  7663  13B2  00E6               	movwf	setDelayOff_GO@value
  7664  13B3  086F               	movf	setRFSW_Control@sw,w
  7665  13B4  318C  24AB  3193   	fcall	_setDelayOff_GO
  7666                           
  7667                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7668  13B7  0020               	movlb	0	; select bank0
  7669  13B8  086F               	movf	setRFSW_Control@sw,w
  7670  13B9  319C  24D3  3193   	fcall	_getDimmerLights_Status
  7671  13BC  3A01               	xorlw	1
  7672  13BD  1D03               	skipz
  7673  13BE  2BD5               	goto	l6297
  7674                           
  7675                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7676  13BF  3064               	movlw	100
  7677  13C0  0020               	movlb	0	; select bank0
  7678  13C1  00A9               	movwf	setBuz@time
  7679  13C2  3000               	movlw	0
  7680  13C3  00AA               	movwf	setBuz@time+1
  7681  13C4  3001               	movlw	1
  7682  13C5  3195  2551  3193   	fcall	_setBuz
  7683                           
  7684                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7685  13C8  0020               	movlb	0	; select bank0
  7686  13C9  01E5               	clrf	setRF_DimmerLights@on
  7687  13CA  0AE5               	incf	setRF_DimmerLights@on,f
  7688  13CB  086F               	movf	setRFSW_Control@sw,w
  7689  13CC  3197  2730  3193   	fcall	_setRF_DimmerLights
  7690                           
  7691                           ;RF_Control_B1.c: 386: setTxData();
  7692  13CF  318F  2745  3193   	fcall	_setTxData
  7693                           
  7694                           ;RF_Control_B1.c: 387: status = 1;
  7695  13D2  0020               	movlb	0	; select bank0
  7696  13D3  01EE               	clrf	setRFSW_Control@status
  7697  13D4  0AEE               	incf	setRFSW_Control@status,f
  7698  13D5                     l6297:	
  7699                           
  7700                           ;RF_Control_B1.c: 388: }
  7701                           ;RF_Control_B1.c: 389: }
  7702                           ;RF_Control_B1.c: 391: if (status == 0) {
  7703  13D5  0020               	movlb	0	; select bank0
  7704  13D6  08EE               	movf	setRFSW_Control@status,f
  7705  13D7  1D03               	skipz
  7706  13D8  0008               	return
  7707                           
  7708                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7709  13D9  086F               	movf	setRFSW_Control@sw,w
  7710  13DA  3192  2216  3193   	fcall	_setDimmerLights_SwOn
  7711                           
  7712                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7713  13DD  0020               	movlb	0	; select bank0
  7714  13DE  086F               	movf	setRFSW_Control@sw,w
  7715  13DF  3192  22B8         	fcall	_setDimmerLights_SwOff
  7716  13E1  0008               	return
  7717  13E2                     __end_of_setRFSW_Control:	
  7718                           
  7719                           	psect	text30
  7720  0B1E                     __ptext30:	
  7721 ;; *************** function _setRFSW_AdjControl *****************
  7722 ;; Defined at:
  7723 ;;		line 400 in file "../src/RF_Control_B1.c"
  7724 ;; Parameters:    Size  Location     Type
  7725 ;;  sw              1    wreg     unsigned char 
  7726 ;; Auto vars:     Size  Location     Type
  7727 ;;  sw              1   72[BANK0 ] unsigned char 
  7728 ;;  status          1   71[BANK0 ] unsigned char 
  7729 ;; Return value:  Size  Location     Type
  7730 ;;		None               void
  7731 ;; Registers used:
  7732 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7733 ;; Tracked objects:
  7734 ;;		On entry : 0/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7739 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7740 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;Total ram usage:        4 bytes
  7743 ;; Hardware stack levels used:    1
  7744 ;; Hardware stack levels required when called:    8
  7745 ;; This function calls:
  7746 ;;		_getDimmerLights_PercentToValue
  7747 ;;		_getDimmerLights_Status
  7748 ;;		_setDimmerIntr_Dimming_RF
  7749 ;;		_setDimmerIntr_MaxmumValue
  7750 ;;		_setDimmerLights_DimmingRun
  7751 ;;		_setDimmerLights_SwOff
  7752 ;;		_setDimmerLights_SwOn
  7753 ;;		_setMemory_Modify
  7754 ;;		_setProductData
  7755 ;;		_setTxData
  7756 ;; This function is called by:
  7757 ;;		_setControl_Lights_Table
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           
  7762                           ;psect for function _setRFSW_AdjControl
  7763  0B1E                     _setRFSW_AdjControl:	
  7764                           
  7765                           ;incstack = 0
  7766                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7767                           ;setRFSW_AdjControl@sw stored from wreg
  7768  0B1E  0020               	movlb	0	; select bank0
  7769  0B1F  00E8               	movwf	setRFSW_AdjControl@sw
  7770                           
  7771                           ;RF_Control_B1.c: 401: char status = 0;
  7772  0B20  01E7               	clrf	setRFSW_AdjControl@status
  7773                           
  7774                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7775  0B21  0868               	movf	setRFSW_AdjControl@sw,w
  7776  0B22  319C  24D3  318B   	fcall	_getDimmerLights_Status
  7777  0B25  0020               	movlb	0	; select bank0
  7778  0B26  00E5               	movwf	??_setRFSW_AdjControl
  7779  0B27  0865               	movf	??_setRFSW_AdjControl,w
  7780  0B28  00E7               	movwf	setRFSW_AdjControl@status
  7781                           
  7782                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7783  0B29  3065               	movlw	101
  7784  0B2A  0023               	movlb	3	; select bank3
  7785  0B2B  0229               	subwf	(_RF_Data^(0+384)+9),w
  7786  0B2C  1C03               	skipc
  7787  0B2D  2B35               	goto	l6309
  7788                           
  7789                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7790  0B2E  3064               	movlw	100
  7791  0B2F  0020               	movlb	0	; select bank0
  7792  0B30  00E5               	movwf	??_setRFSW_AdjControl
  7793  0B31  0865               	movf	??_setRFSW_AdjControl,w
  7794  0B32  0023               	movlb	3	; select bank3
  7795  0B33  00A9               	movwf	(_RF_Data^(0+384)+9)
  7796                           
  7797                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7798  0B34  2B3A               	goto	l6313
  7799  0B35                     l6309:	
  7800  0B35  08A9               	movf	(_RF_Data^(0+384)+9),f
  7801  0B36  1D03               	skipz
  7802  0B37  2B3A               	goto	l6313
  7803                           
  7804                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7805  0B38  01A9               	clrf	(_RF_Data^(0+384)+9)
  7806  0B39  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7807  0B3A                     l6313:	
  7808                           
  7809                           ;RF_Control_B1.c: 409: }
  7810                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7811  0B3A  0829               	movf	(_RF_Data^(0+384)+9),w
  7812  0B3B  0020               	movlb	0	; select bank0
  7813  0B3C  00E5               	movwf	??_setRFSW_AdjControl
  7814  0B3D  0865               	movf	??_setRFSW_AdjControl,w
  7815  0B3E  00E2               	movwf	setProductData@value
  7816  0B3F  3009               	movlw	9
  7817  0B40  319C  242C  318B   	fcall	_setProductData
  7818                           
  7819                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7820  0B43  0020               	movlb	0	; select bank0
  7821  0B44  0868               	movf	setRFSW_AdjControl@sw,w
  7822  0B45  00E5               	movwf	??_setRFSW_AdjControl
  7823  0B46  0865               	movf	??_setRFSW_AdjControl,w
  7824  0B47  00E2               	movwf	setProductData@value
  7825  0B48  300B               	movlw	11
  7826  0B49  319C  242C  318B   	fcall	_setProductData
  7827                           
  7828                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7829  0B4C  0020               	movlb	0	; select bank0
  7830  0B4D  0868               	movf	setRFSW_AdjControl@sw,w
  7831  0B4E  3E1A               	addlw	26
  7832  0B4F  0021               	movlb	1	; select bank1
  7833  0B50  076F               	addwf	_product^(0+128),w
  7834  0B51  0020               	movlb	0	; select bank0
  7835  0B52  00E5               	movwf	??_setRFSW_AdjControl
  7836  0B53  0865               	movf	??_setRFSW_AdjControl,w
  7837  0B54  0086               	movwf	6
  7838  0B55  3002               	movlw	2	; select bank4/5
  7839  0B56  0087               	movwf	7
  7840  0B57  0801               	movf	1,w
  7841  0B58  00E6               	movwf	??_setRFSW_AdjControl+1
  7842  0B59  0866               	movf	??_setRFSW_AdjControl+1,w
  7843  0B5A  00E2               	movwf	setProductData@value
  7844  0B5B  3011               	movlw	17
  7845  0B5C  319C  242C  318B   	fcall	_setProductData
  7846                           
  7847                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7848  0B5F  0023               	movlb	3	; select bank3
  7849  0B60  0829               	movf	(_RF_Data^(0+384)+9),w
  7850  0B61  0020               	movlb	0	; select bank0
  7851  0B62  00E5               	movwf	??_setRFSW_AdjControl
  7852  0B63  0865               	movf	??_setRFSW_AdjControl,w
  7853  0B64  00E2               	movwf	setProductData@value
  7854  0B65  0868               	movf	setRFSW_AdjControl@sw,w
  7855  0B66  3E14               	addlw	20
  7856  0B67  319C  242C  318B   	fcall	_setProductData
  7857                           
  7858                           ;RF_Control_B1.c: 421: setMemory_Modify(1);
  7859  0B6A  3001               	movlw	1
  7860  0B6B  319D  25A4  318B   	fcall	_setMemory_Modify
  7861                           
  7862                           ;RF_Control_B1.c: 425: if (status == 1) {
  7863  0B6E  0020               	movlb	0	; select bank0
  7864  0B6F  0867               	movf	setRFSW_AdjControl@status,w
  7865  0B70  3A01               	xorlw	1
  7866  0B71  1D03               	skipz
  7867  0B72  2B8A               	goto	l6323
  7868                           
  7869                           ;RF_Control_B1.c: 426: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7870  0B73  0023               	movlb	3	; select bank3
  7871  0B74  0829               	movf	(_RF_Data^(0+384)+9),w
  7872  0B75  3196  2666  318B   	fcall	_getDimmerLights_PercentToValue
  7873  0B78  0020               	movlb	0	; select bank0
  7874  0B79  00E5               	movwf	??_setRFSW_AdjControl
  7875  0B7A  0865               	movf	??_setRFSW_AdjControl,w
  7876  0B7B  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  7877  0B7C  0868               	movf	setRFSW_AdjControl@sw,w
  7878  0B7D  319C  2438  318B   	fcall	_setDimmerIntr_MaxmumValue
  7879                           
  7880                           ;RF_Control_B1.c: 427: setDimmerIntr_Dimming_RF(sw, 1);
  7881  0B80  0020               	movlb	0	; select bank0
  7882  0B81  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  7883  0B82  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  7884  0B83  0868               	movf	setRFSW_AdjControl@sw,w
  7885  0B84  319E  269C  318B   	fcall	_setDimmerIntr_Dimming_RF
  7886                           
  7887                           ;RF_Control_B1.c: 428: setTxData();
  7888  0B87  318F  2745         	fcall	_setTxData
  7889                           
  7890                           ;RF_Control_B1.c: 430: } else if (status == 0) {
  7891  0B89  0008               	return
  7892  0B8A                     l6323:	
  7893  0B8A  0020               	movlb	0	; select bank0
  7894  0B8B  08E7               	movf	setRFSW_AdjControl@status,f
  7895  0B8C  1D03               	skipz
  7896  0B8D  0008               	return
  7897                           
  7898                           ;RF_Control_B1.c: 434: setDimmerLights_DimmingRun(sw, 1);
  7899  0B8E  01A2               	clrf	setDimmerLights_DimmingRun@command
  7900  0B8F  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  7901  0B90  0868               	movf	setRFSW_AdjControl@sw,w
  7902  0B91  319F  2734  318B   	fcall	_setDimmerLights_DimmingRun
  7903                           
  7904                           ;RF_Control_B1.c: 435: setDimmerLights_SwOn(sw);
  7905  0B94  0020               	movlb	0	; select bank0
  7906  0B95  0868               	movf	setRFSW_AdjControl@sw,w
  7907  0B96  3192  2216  318B   	fcall	_setDimmerLights_SwOn
  7908                           
  7909                           ;RF_Control_B1.c: 436: setDimmerLights_SwOff(sw);
  7910  0B99  0020               	movlb	0	; select bank0
  7911  0B9A  0868               	movf	setRFSW_AdjControl@sw,w
  7912  0B9B  3192  22B8         	fcall	_setDimmerLights_SwOff
  7913  0B9D  0008               	return
  7914  0B9E                     __end_of_setRFSW_AdjControl:	
  7915                           
  7916                           	psect	text31
  7917  1F34                     __ptext31:	
  7918 ;; *************** function _setDimmerLights_DimmingRun *****************
  7919 ;; Defined at:
  7920 ;;		line 1076 in file "../src/Dimmer_B1.c"
  7921 ;; Parameters:    Size  Location     Type
  7922 ;;  lights          1    wreg     unsigned char 
  7923 ;;  command         1    2[BANK0 ] unsigned char 
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;  lights          1    4[BANK0 ] unsigned char 
  7926 ;; Return value:  Size  Location     Type
  7927 ;;		None               void
  7928 ;; Registers used:
  7929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7935 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;Total ram usage:        3 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; Hardware stack levels required when called:    6
  7942 ;; This function calls:
  7943 ;;		_DimmerLights_SelectPointer
  7944 ;; This function is called by:
  7945 ;;		_setRFSW_AdjControl
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           
  7950                           ;psect for function _setDimmerLights_DimmingRun
  7951  1F34                     _setDimmerLights_DimmingRun:	
  7952                           
  7953                           ;incstack = 0
  7954                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7955                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7956  1F34  0020               	movlb	0	; select bank0
  7957  1F35  00A4               	movwf	setDimmerLights_DimmingRun@lights
  7958                           
  7959                           ;Dimmer_B1.c: 1077: DimmerLights_SelectPointer(lights);
  7960  1F36  0824               	movf	setDimmerLights_DimmingRun@lights,w
  7961  1F37  319C  2420         	fcall	_DimmerLights_SelectPointer
  7962                           
  7963                           ;Dimmer_B1.c: 1078: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7964  1F39  0020               	movlb	0	; select bank0
  7965  1F3A  0822               	movf	setDimmerLights_DimmingRun@command,w
  7966  1F3B  3A01               	xorlw	1
  7967  1F3C  3000               	movlw	0
  7968  1F3D  1903               	skipnz
  7969  1F3E  3001               	movlw	1
  7970  1F3F  00A3               	movwf	??_setDimmerLights_DimmingRun
  7971  1F40  0021               	movlb	1	; select bank1
  7972  1F41  0A55               	incf	_DimmerLights^(0+128),w
  7973  1F42  0086               	movwf	6
  7974  1F43  3001               	movlw	1	; select bank2/3
  7975  1F44  0087               	movwf	7
  7976  1F45  0020               	movlb	0	; select bank0
  7977  1F46  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  7978  1F47  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  7979  1F48  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  7980  1F49  0801               	movf	1,w
  7981  1F4A  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  7982  1F4B  39BF               	andlw	-65
  7983  1F4C  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  7984  1F4D  0081               	movwf	1
  7985  1F4E  0008               	return
  7986  1F4F                     __end_of_setDimmerLights_DimmingRun:	
  7987                           
  7988                           	psect	text32
  7989  1D28                     __ptext32:	
  7990 ;; *************** function _getRF_KeyStatus *****************
  7991 ;; Defined at:
  7992 ;;		line 166 in file "../src/RF_Control_B1.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;		None
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;  key             1    1[BANK0 ] unsigned char 
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  1    wreg      unsigned char 
  7999 ;; Registers used:
  8000 ;;		wreg, status,2
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;Total ram usage:        3 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    5
  8013 ;; This function calls:
  8014 ;;		Nothing
  8015 ;; This function is called by:
  8016 ;;		_setRF_Main
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           
  8021                           ;psect for function _getRF_KeyStatus
  8022  1D28                     _getRF_KeyStatus:	
  8023                           
  8024                           ;RF_Control_B1.c: 167: char key = 0;
  8025                           
  8026                           ;incstack = 0
  8027                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8028  1D28  0020               	movlb	0	; select bank0
  8029  1D29  01A1               	clrf	getRF_KeyStatus@key
  8030                           
  8031                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8032  1D2A  01A2               	clrf	_getRF_KeyStatus$5333
  8033  1D2B  0AA2               	incf	_getRF_KeyStatus$5333,f
  8034  1D2C  1F0C               	btfss	12,6	;volatile
  8035  1D2D  1A0C               	btfsc	12,4	;volatile
  8036  1D2E  2D33               	goto	l6911
  8037  1D2F  1C0C               	btfss	12,0	;volatile
  8038  1D30  1B8C               	btfsc	12,7	;volatile
  8039  1D31  2D33               	goto	l6911
  8040  1D32  01A2               	clrf	_getRF_KeyStatus$5333
  8041  1D33                     l6911:	
  8042  1D33  0822               	movf	_getRF_KeyStatus$5333,w
  8043  1D34  00A0               	movwf	??_getRF_KeyStatus
  8044  1D35  0820               	movf	??_getRF_KeyStatus,w
  8045  1D36  00A1               	movwf	getRF_KeyStatus@key
  8046                           
  8047                           ;RF_Control_B1.c: 179: return key;
  8048  1D37  0821               	movf	getRF_KeyStatus@key,w
  8049  1D38  0008               	return
  8050  1D39                     __end_of_getRF_KeyStatus:	
  8051                           
  8052                           	psect	text33
  8053  1D17                     __ptext33:	
  8054 ;; *************** function _getBuz_GO *****************
  8055 ;; Defined at:
  8056 ;;		line 82 in file "../src/Buzzer_B1.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;		None
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  i               2    4[BANK0 ] int 
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  2    0[BANK0 ] int 
  8063 ;; Registers used:
  8064 ;;		wreg, status,2, status,0
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8070 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8074 ;;Total ram usage:        6 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:    5
  8077 ;; This function calls:
  8078 ;;		Nothing
  8079 ;; This function is called by:
  8080 ;;		_setRF_Main
  8081 ;; This function uses a non-reentrant model
  8082 ;;
  8083                           
  8084                           
  8085                           ;psect for function _getBuz_GO
  8086  1D17                     _getBuz_GO:	
  8087                           
  8088                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8089                           
  8090                           ;incstack = 0
  8091                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8092  1D17  0021               	movlb	1	; select bank1
  8093  1D18  0C3B               	rrf	_Buz1^(0+128),w
  8094  1D19  3901               	andlw	1
  8095  1D1A  0020               	movlb	0	; select bank0
  8096  1D1B  00A2               	movwf	??_getBuz_GO
  8097  1D1C  01A3               	clrf	??_getBuz_GO+1
  8098  1D1D  0822               	movf	??_getBuz_GO,w
  8099  1D1E  00A4               	movwf	getBuz_GO@i
  8100  1D1F  0823               	movf	??_getBuz_GO+1,w
  8101  1D20  00A5               	movwf	getBuz_GO@i+1
  8102                           
  8103                           ;Buzzer_B1.c: 84: return i;
  8104  1D21  0825               	movf	getBuz_GO@i+1,w
  8105  1D22  01A1               	clrf	?_getBuz_GO+1
  8106  1D23  07A1               	addwf	?_getBuz_GO+1,f
  8107  1D24  0824               	movf	getBuz_GO@i,w
  8108  1D25  01A0               	clrf	?_getBuz_GO
  8109  1D26  07A0               	addwf	?_getBuz_GO,f
  8110  1D27  0008               	return
  8111  1D28                     __end_of_getBuz_GO:	
  8112                           
  8113                           	psect	text34
  8114  1CB4                     __ptext34:	
  8115 ;; *************** function _RF_RxDisable *****************
  8116 ;; Defined at:
  8117 ;;		line 154 in file "../src/RF_Control_B1.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;		None
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;		None
  8122 ;; Return value:  Size  Location     Type
  8123 ;;		None               void
  8124 ;; Registers used:
  8125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;Total ram usage:        0 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    7
  8138 ;; This function calls:
  8139 ;;		_CC2500_WriteCommand
  8140 ;; This function is called by:
  8141 ;;		_setRF_Main
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           
  8146                           ;psect for function _RF_RxDisable
  8147  1CB4                     _RF_RxDisable:	
  8148                           
  8149                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8150                           
  8151                           ;incstack = 0
  8152                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8153  1CB4  0021               	movlb	1	; select bank1
  8154  1CB5  18A0               	btfsc	_RF1^(0+128),1
  8155  1CB6  2CB9               	goto	l2144
  8156  1CB7  1DA0               	btfss	_RF1^(0+128),3
  8157  1CB8  0008               	return
  8158  1CB9                     l2144:	
  8159                           
  8160                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8161  1CB9  11A0               	bcf	_RF1^(0+128),3
  8162                           
  8163                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8164  1CBA  10A0               	bcf	_RF1^(0+128),1
  8165                           
  8166                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8167  1CBB  3036               	movlw	54
  8168  1CBC  319F  271A  319C   	fcall	_CC2500_WriteCommand
  8169                           
  8170                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8171  1CBF  303A               	movlw	58
  8172  1CC0  319F  271A         	fcall	_CC2500_WriteCommand
  8173  1CC2  0008               	return
  8174  1CC3                     __end_of_RF_RxDisable:	
  8175                           
  8176                           	psect	text35
  8177  087E                     __ptext35:	
  8178 ;; *************** function _CC2500_TxData *****************
  8179 ;; Defined at:
  8180 ;;		line 32 in file "../src/CC2500_B1.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;		None
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;		None               void
  8187 ;; Registers used:
  8188 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;Total ram usage:        2 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    7
  8201 ;; This function calls:
  8202 ;;		_CC2500_WriteByte
  8203 ;;		_CC2500_WriteCommand
  8204 ;;		_RF_Timeout_Counter
  8205 ;;		_setRF_TimeoutCleared
  8206 ;; This function is called by:
  8207 ;;		_setRF_Main
  8208 ;; This function uses a non-reentrant model
  8209 ;;
  8210                           
  8211                           
  8212                           ;psect for function _CC2500_TxData
  8213  087E                     _CC2500_TxData:	
  8214                           
  8215                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8216                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8217                           
  8218                           ;incstack = 0
  8219                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8220  087E  3036               	movlw	54
  8221  087F  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8222                           
  8223                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8224  0882  303B               	movlw	59
  8225  0883  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8226                           
  8227                           ;CC2500_B1.c: 38: RC0 = 0;
  8228  0886  0020               	movlb	0	; select bank0
  8229  0887  100E               	bcf	14,0	;volatile
  8230                           
  8231                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8232  0888  307F               	movlw	127
  8233  0889  00A4               	movwf	??_CC2500_TxData
  8234  088A  0824               	movf	??_CC2500_TxData,w
  8235  088B  0021               	movlb	1	; select bank1
  8236  088C  00D8               	movwf	_SPI0Buffer^(0+128)
  8237                           
  8238                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8239  088D  2891               	goto	l6611
  8240  088E                     l6609:	
  8241                           
  8242                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8243  088E  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8244  0891                     l6611:	
  8245  0891  0020               	movlb	0	; select bank0
  8246  0892  1E8E               	btfss	14,5	;volatile
  8247  0893  2897               	goto	l6615
  8248  0894  0021               	movlb	1	; select bank1
  8249  0895  1F21               	btfss	(_RF1^(0+128)+1),6
  8250  0896  288E               	goto	l6609
  8251  0897                     l6615:	
  8252                           
  8253                           ;CC2500_B1.c: 42: };
  8254                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8255  0897  319B  2373  3188   	fcall	_setRF_TimeoutCleared
  8256                           
  8257                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8258  089A  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8259                           
  8260                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8261  089D  0021               	movlb	1	; select bank1
  8262  089E  085A               	movf	_Tx_Length^(0+128),w
  8263  089F  0020               	movlb	0	; select bank0
  8264  08A0  00A4               	movwf	??_CC2500_TxData
  8265  08A1  0824               	movf	??_CC2500_TxData,w
  8266  08A2  0021               	movlb	1	; select bank1
  8267  08A3  00D8               	movwf	_SPI0Buffer^(0+128)
  8268                           
  8269                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8270  08A4  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8271                           
  8272                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8273  08A7  0020               	movlb	0	; select bank0
  8274  08A8  01A5               	clrf	CC2500_TxData@loop_e
  8275  08A9                     l6629:	
  8276  08A9  0021               	movlb	1	; select bank1
  8277  08AA  085A               	movf	_Tx_Length^(0+128),w
  8278  08AB  0020               	movlb	0	; select bank0
  8279  08AC  0225               	subwf	CC2500_TxData@loop_e,w
  8280  08AD  1803               	btfsc	3,0
  8281  08AE  28C2               	goto	l235
  8282                           
  8283                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8284  08AF  0825               	movf	CC2500_TxData@loop_e,w
  8285  08B0  3EA0               	addlw	_RF_Data& (0+255)
  8286  08B1  0086               	movwf	6
  8287  08B2  3001               	movlw	1	; select bank3/4
  8288  08B3  0087               	movwf	7
  8289  08B4  0801               	movf	1,w
  8290  08B5  00A4               	movwf	??_CC2500_TxData
  8291  08B6  0824               	movf	??_CC2500_TxData,w
  8292  08B7  0021               	movlb	1	; select bank1
  8293  08B8  00D8               	movwf	_SPI0Buffer^(0+128)
  8294                           
  8295                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8296  08B9  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8297  08BC  3001               	movlw	1
  8298  08BD  0020               	movlb	0	; select bank0
  8299  08BE  00A4               	movwf	??_CC2500_TxData
  8300  08BF  0824               	movf	??_CC2500_TxData,w
  8301  08C0  07A5               	addwf	CC2500_TxData@loop_e,f
  8302  08C1  28A9               	goto	l6629
  8303  08C2                     l235:	
  8304                           
  8305                           ;CC2500_B1.c: 51: }
  8306                           ;CC2500_B1.c: 52: RC0 = 1;
  8307  08C2  140E               	bsf	14,0	;volatile
  8308                           
  8309                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8310  08C3  3035               	movlw	53
  8311  08C4  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8312                           
  8313                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8314  08C7  28CB               	goto	l6635
  8315  08C8                     l6633:	
  8316                           
  8317                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8318  08C8  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8319  08CB                     l6635:	
  8320  08CB  0020               	movlb	0	; select bank0
  8321  08CC  188E               	btfsc	14,1	;volatile
  8322  08CD  28D1               	goto	l6639
  8323  08CE  0021               	movlb	1	; select bank1
  8324  08CF  1F21               	btfss	(_RF1^(0+128)+1),6
  8325  08D0  28C8               	goto	l6633
  8326  08D1                     l6639:	
  8327                           
  8328                           ;CC2500_B1.c: 56: };
  8329                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8330  08D1  319B  2373  3188   	fcall	_setRF_TimeoutCleared
  8331                           
  8332                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8333  08D4  28D8               	goto	l6643
  8334  08D5                     l6641:	
  8335                           
  8336                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8337  08D5  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8338  08D8                     l6643:	
  8339  08D8  0020               	movlb	0	; select bank0
  8340  08D9  1C8E               	btfss	14,1	;volatile
  8341  08DA  28DE               	goto	l6647
  8342  08DB  0021               	movlb	1	; select bank1
  8343  08DC  1F21               	btfss	(_RF1^(0+128)+1),6
  8344  08DD  28D5               	goto	l6641
  8345  08DE                     l6647:	
  8346                           
  8347                           ;CC2500_B1.c: 61: };
  8348                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8349  08DE  319B  2373  3188   	fcall	_setRF_TimeoutCleared
  8350                           
  8351                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8352  08E1  3036               	movlw	54
  8353  08E2  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8354                           
  8355                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8356  08E5  303B               	movlw	59
  8357  08E6  319F  271A         	fcall	_CC2500_WriteCommand
  8358                           
  8359                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8360  08E8  0021               	movlb	1	; select bank1
  8361  08E9  14EE               	bsf	(_Transceive_OK/(0+8))^(0+128),_Transceive_OK& (0+7)
  8362  08EA  0008               	return
  8363  08EB                     __end_of_CC2500_TxData:	
  8364                           
  8365                           	psect	text36
  8366  0813                     __ptext36:	
  8367 ;; *************** function _CC2500_RxData *****************
  8368 ;; Defined at:
  8369 ;;		line 73 in file "../src/CC2500_B1.c"
  8370 ;; Parameters:    Size  Location     Type
  8371 ;;		None
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8374 ;; Return value:  Size  Location     Type
  8375 ;;		None               void
  8376 ;; Registers used:
  8377 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8378 ;; Tracked objects:
  8379 ;;		On entry : 0/0
  8380 ;;		On exit  : 0/0
  8381 ;;		Unchanged: 0/0
  8382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;Total ram usage:        2 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; Hardware stack levels required when called:    7
  8390 ;; This function calls:
  8391 ;;		_CC2500_ReadByte
  8392 ;;		_CC2500_ReadStatus
  8393 ;;		_CC2500_WriteByte
  8394 ;;		_CC2500_WriteCommand
  8395 ;;		_RF_Timeout_Counter
  8396 ;;		_setRF_TimeoutCleared
  8397 ;; This function is called by:
  8398 ;;		_setRF_Main
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           
  8403                           ;psect for function _CC2500_RxData
  8404  0813                     _CC2500_RxData:	
  8405                           
  8406                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8407                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8408                           
  8409                           ;incstack = 0
  8410                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8411  0813  0020               	movlb	0	; select bank0
  8412  0814  188E               	btfsc	14,1	;volatile
  8413  0815  0008               	return
  8414                           
  8415                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8416  0816  303B               	movlw	59
  8417  0817  3190  20B2  3188   	fcall	_CC2500_ReadStatus
  8418                           
  8419                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8420  081A  0021               	movlb	1	; select bank1
  8421  081B  085B               	movf	_s_data^(0+128),w
  8422  081C  1903               	btfsc	3,2
  8423  081D  0008               	return
  8424                           
  8425                           ;CC2500_B1.c: 90: RC0 = 0;
  8426  081E  0020               	movlb	0	; select bank0
  8427  081F  100E               	bcf	14,0	;volatile
  8428                           
  8429                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8430  0820  30FF               	movlw	255
  8431  0821  00A4               	movwf	??_CC2500_RxData
  8432  0822  0824               	movf	??_CC2500_RxData,w
  8433  0823  0021               	movlb	1	; select bank1
  8434  0824  00D8               	movwf	_SPI0Buffer^(0+128)
  8435                           
  8436                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8437  0825  2829               	goto	l6667
  8438  0826                     l6665:	
  8439                           
  8440                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8441  0826  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8442  0829                     l6667:	
  8443  0829  0020               	movlb	0	; select bank0
  8444  082A  1E8E               	btfss	14,5	;volatile
  8445  082B  282F               	goto	l6671
  8446  082C  0021               	movlb	1	; select bank1
  8447  082D  1F21               	btfss	(_RF1^(0+128)+1),6
  8448  082E  2826               	goto	l6665
  8449  082F                     l6671:	
  8450                           
  8451                           ;CC2500_B1.c: 95: };
  8452                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8453  082F  319B  2373  3188   	fcall	_setRF_TimeoutCleared
  8454                           
  8455                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8456  0832  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8457                           
  8458                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8459  0835  319F  2787  3188   	fcall	_CC2500_ReadByte
  8460                           
  8461                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8462  0838  0021               	movlb	1	; select bank1
  8463  0839  0858               	movf	_SPI0Buffer^(0+128),w
  8464  083A  0020               	movlb	0	; select bank0
  8465  083B  00A4               	movwf	??_CC2500_RxData
  8466  083C  0824               	movf	??_CC2500_RxData,w
  8467  083D  0021               	movlb	1	; select bank1
  8468  083E  00D7               	movwf	_Rx_Length^(0+128)
  8469                           
  8470                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8471  083F  0020               	movlb	0	; select bank0
  8472  0840  01A5               	clrf	CC2500_RxData@loop_f
  8473  0841                     l6687:	
  8474  0841  0021               	movlb	1	; select bank1
  8475  0842  0857               	movf	_Rx_Length^(0+128),w
  8476  0843  0020               	movlb	0	; select bank0
  8477  0844  0225               	subwf	CC2500_RxData@loop_f,w
  8478  0845  1803               	btfsc	3,0
  8479  0846  285A               	goto	l6689
  8480                           
  8481                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8482  0847  319F  2787  3188   	fcall	_CC2500_ReadByte
  8483                           
  8484                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8485  084A  0021               	movlb	1	; select bank1
  8486  084B  0858               	movf	_SPI0Buffer^(0+128),w
  8487  084C  0020               	movlb	0	; select bank0
  8488  084D  00A4               	movwf	??_CC2500_RxData
  8489  084E  0825               	movf	CC2500_RxData@loop_f,w
  8490  084F  3EA0               	addlw	_RF_Data& (0+255)
  8491  0850  0086               	movwf	6
  8492  0851  3001               	movlw	1	; select bank3/4
  8493  0852  0087               	movwf	7
  8494  0853  0824               	movf	??_CC2500_RxData,w
  8495  0854  0081               	movwf	1
  8496  0855  3001               	movlw	1
  8497  0856  00A4               	movwf	??_CC2500_RxData
  8498  0857  0824               	movf	??_CC2500_RxData,w
  8499  0858  07A5               	addwf	CC2500_RxData@loop_f,f
  8500  0859  2841               	goto	l6687
  8501  085A                     l6689:	
  8502                           
  8503                           ;CC2500_B1.c: 104: }
  8504                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8505  085A  319F  2787  3188   	fcall	_CC2500_ReadByte
  8506                           
  8507                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8508  085D  0021               	movlb	1	; select bank1
  8509  085E  0858               	movf	_SPI0Buffer^(0+128),w
  8510  085F  0020               	movlb	0	; select bank0
  8511  0860  00A4               	movwf	??_CC2500_RxData
  8512  0861  0824               	movf	??_CC2500_RxData,w
  8513  0862  0022               	movlb	2	; select bank2
  8514  0863  00AE               	movwf	_RSSI^(0+256)
  8515                           
  8516                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8517  0864  319F  2787  3188   	fcall	_CC2500_ReadByte
  8518                           
  8519                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8520  0867  0021               	movlb	1	; select bank1
  8521  0868  0858               	movf	_SPI0Buffer^(0+128),w
  8522  0869  0020               	movlb	0	; select bank0
  8523  086A  00A4               	movwf	??_CC2500_RxData
  8524  086B  0824               	movf	??_CC2500_RxData,w
  8525  086C  0021               	movlb	1	; select bank1
  8526  086D  00D2               	movwf	_CRC^(0+128)
  8527                           
  8528                           ;CC2500_B1.c: 109: RC0 = 1;
  8529  086E  0020               	movlb	0	; select bank0
  8530  086F  140E               	bsf	14,0	;volatile
  8531                           
  8532                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8533  0870  0021               	movlb	1	; select bank1
  8534  0871  1BD2               	btfsc	_CRC^(0+128),7
  8535                           
  8536                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8537  0872  146E               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8538                           
  8539                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8540  0873  11A0               	bcf	_RF1^(0+128),3
  8541                           
  8542                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8543  0874  14A0               	bsf	_RF1^(0+128),1
  8544                           
  8545                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8546  0875  3036               	movlw	54
  8547  0876  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8548                           
  8549                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8550  0879  303A               	movlw	58
  8551  087A  319F  271A         	fcall	_CC2500_WriteCommand
  8552  087C  0021               	movlb	1	; select bank1
  8553  087D  0008               	return
  8554  087E                     __end_of_CC2500_RxData:	
  8555                           
  8556                           	psect	text37
  8557  10B2                     __ptext37:	
  8558 ;; *************** function _CC2500_ReadStatus *****************
  8559 ;; Defined at:
  8560 ;;		line 308 in file "../src/CC2500_B1.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;  status_addr     1    wreg     unsigned char 
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8565 ;; Return value:  Size  Location     Type
  8566 ;;		None               void
  8567 ;; Registers used:
  8568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8577 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8578 ;;Total ram usage:        2 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    6
  8581 ;; This function calls:
  8582 ;;		_CC2500_ReadByte
  8583 ;;		_CC2500_WriteByte
  8584 ;;		_RF_Timeout_Counter
  8585 ;;		_setRF_TimeoutCleared
  8586 ;; This function is called by:
  8587 ;;		_CC2500_RxData
  8588 ;; This function uses a non-reentrant model
  8589 ;;
  8590                           
  8591                           
  8592                           ;psect for function _CC2500_ReadStatus
  8593  10B2                     _CC2500_ReadStatus:	
  8594                           
  8595                           ;incstack = 0
  8596                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8597                           ;CC2500_ReadStatus@status_addr stored from wreg
  8598  10B2  0020               	movlb	0	; select bank0
  8599  10B3  00A3               	movwf	CC2500_ReadStatus@status_addr
  8600                           
  8601                           ;CC2500_B1.c: 309: RC0 = 0;
  8602  10B4  100E               	bcf	14,0	;volatile
  8603                           
  8604                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8605  10B5  0823               	movf	CC2500_ReadStatus@status_addr,w
  8606  10B6  3EC0               	addlw	192
  8607  10B7  00A2               	movwf	??_CC2500_ReadStatus
  8608  10B8  0822               	movf	??_CC2500_ReadStatus,w
  8609  10B9  0021               	movlb	1	; select bank1
  8610  10BA  00D8               	movwf	_SPI0Buffer^(0+128)
  8611                           
  8612                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8613  10BB  28BF               	goto	l6333
  8614  10BC                     l6331:	
  8615                           
  8616                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8617  10BC  319E  2604  3190   	fcall	_RF_Timeout_Counter
  8618  10BF                     l6333:	
  8619  10BF  0020               	movlb	0	; select bank0
  8620  10C0  1E8E               	btfss	14,5	;volatile
  8621  10C1  28C5               	goto	l6337
  8622  10C2  0021               	movlb	1	; select bank1
  8623  10C3  1F21               	btfss	(_RF1^(0+128)+1),6
  8624  10C4  28BC               	goto	l6331
  8625  10C5                     l6337:	
  8626                           
  8627                           ;CC2500_B1.c: 314: };
  8628                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8629  10C5  319B  2373  3190   	fcall	_setRF_TimeoutCleared
  8630                           
  8631                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8632  10C8  319E  26CD  3190   	fcall	_CC2500_WriteByte
  8633                           
  8634                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8635  10CB  319F  2787         	fcall	_CC2500_ReadByte
  8636                           
  8637                           ;CC2500_B1.c: 319: RC0 = 1;
  8638  10CD  0020               	movlb	0	; select bank0
  8639  10CE  140E               	bsf	14,0	;volatile
  8640                           
  8641                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8642  10CF  0021               	movlb	1	; select bank1
  8643  10D0  0858               	movf	_SPI0Buffer^(0+128),w
  8644  10D1  0020               	movlb	0	; select bank0
  8645  10D2  00A2               	movwf	??_CC2500_ReadStatus
  8646  10D3  0822               	movf	??_CC2500_ReadStatus,w
  8647  10D4  0021               	movlb	1	; select bank1
  8648  10D5  00DB               	movwf	_s_data^(0+128)
  8649  10D6  0008               	return
  8650  10D7                     __end_of_CC2500_ReadStatus:	
  8651                           
  8652                           	psect	text38
  8653  1F87                     __ptext38:	
  8654 ;; *************** function _CC2500_ReadByte *****************
  8655 ;; Defined at:
  8656 ;;		line 242 in file "../src/CC2500_B1.c"
  8657 ;; Parameters:    Size  Location     Type
  8658 ;;		None
  8659 ;; Auto vars:     Size  Location     Type
  8660 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8661 ;; Return value:  Size  Location     Type
  8662 ;;		None               void
  8663 ;; Registers used:
  8664 ;;		wreg, status,2, status,0
  8665 ;; Tracked objects:
  8666 ;;		On entry : 0/0
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;Total ram usage:        2 bytes
  8675 ;; Hardware stack levels used:    1
  8676 ;; Hardware stack levels required when called:    5
  8677 ;; This function calls:
  8678 ;;		Nothing
  8679 ;; This function is called by:
  8680 ;;		_CC2500_RxData
  8681 ;;		_CC2500_ReadStatus
  8682 ;;		_CC2500_ReadREG
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686                           
  8687                           ;psect for function _CC2500_ReadByte
  8688  1F87                     _CC2500_ReadByte:	
  8689                           
  8690                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8691                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8692                           
  8693                           ;incstack = 0
  8694                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8695  1F87  0020               	movlb	0	; select bank0
  8696  1F88  01A1               	clrf	CC2500_ReadByte@loop_b
  8697  1F89                     L2:	
  8698  1F89  3008               	movlw	8
  8699  1F8A  0221               	subwf	CC2500_ReadByte@loop_b,w
  8700  1F8B  1803               	btfsc	3,0
  8701  1F8C  0008               	return
  8702                           
  8703                           ;CC2500_B1.c: 245: RC3 = 1;
  8704  1F8D  158E               	bsf	14,3	;volatile
  8705                           
  8706                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8707  1F8E  1003               	clrc
  8708  1F8F  0021               	movlb	1	; select bank1
  8709  1F90  0DD8               	rlf	_SPI0Buffer^(0+128),f
  8710                           
  8711                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8712  1F91  0020               	movlb	0	; select bank0
  8713  1F92  1E8E               	btfss	14,5	;volatile
  8714  1F93  2F97               	goto	l6227
  8715                           
  8716                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8717  1F94  0021               	movlb	1	; select bank1
  8718  1F95  1458               	bsf	_SPI0Buffer^(0+128),0
  8719  1F96  2F9D               	goto	l6229
  8720  1F97                     l6227:	
  8721                           
  8722                           ;CC2500_B1.c: 249: else
  8723                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8724  1F97  30FE               	movlw	254
  8725  1F98  0020               	movlb	0	; select bank0
  8726  1F99  00A0               	movwf	??_CC2500_ReadByte
  8727  1F9A  0820               	movf	??_CC2500_ReadByte,w
  8728  1F9B  0021               	movlb	1	; select bank1
  8729  1F9C  05D8               	andwf	_SPI0Buffer^(0+128),f
  8730  1F9D                     l6229:	
  8731                           
  8732                           ;CC2500_B1.c: 251: RC3 = 0;
  8733  1F9D  0020               	movlb	0	; select bank0
  8734  1F9E  118E               	bcf	14,3	;volatile
  8735  1F9F  3001               	movlw	1
  8736  1FA0  00A0               	movwf	??_CC2500_ReadByte
  8737  1FA1  0820               	movf	??_CC2500_ReadByte,w
  8738  1FA2  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8739  1FA3  2F89               	goto	L2
  8740  1FA4                     __end_of_CC2500_ReadByte:	
  8741                           
  8742                           	psect	text39
  8743  1E19                     __ptext39:	
  8744 ;; *************** function _CC2500_PowerOnInitial *****************
  8745 ;; Defined at:
  8746 ;;		line 126 in file "../src/CC2500_B1.c"
  8747 ;; Parameters:    Size  Location     Type
  8748 ;;		None
  8749 ;; Auto vars:     Size  Location     Type
  8750 ;;		None
  8751 ;; Return value:  Size  Location     Type
  8752 ;;		None               void
  8753 ;; Registers used:
  8754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8755 ;; Tracked objects:
  8756 ;;		On entry : 0/0
  8757 ;;		On exit  : 0/0
  8758 ;;		Unchanged: 0/0
  8759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8764 ;;Total ram usage:        0 bytes
  8765 ;; Hardware stack levels used:    1
  8766 ;; Hardware stack levels required when called:    8
  8767 ;; This function calls:
  8768 ;;		_CC2500_ClearRXFIFO
  8769 ;;		_CC2500_ClearTXFIFO
  8770 ;;		_CC2500_FrequencyCabr
  8771 ;;		_CC2500_InitPATable
  8772 ;;		_CC2500_InitSetREG
  8773 ;;		_CC2500_PowerRST
  8774 ;;		_CC2500_SIDLEMode
  8775 ;; This function is called by:
  8776 ;;		_main
  8777 ;;		_setRF_Main
  8778 ;; This function uses a non-reentrant model
  8779 ;;
  8780                           
  8781                           
  8782                           ;psect for function _CC2500_PowerOnInitial
  8783  1E19                     _CC2500_PowerOnInitial:	
  8784                           
  8785                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8786                           
  8787                           ;incstack = 0
  8788                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8789  1E19  3194  2463  319E   	fcall	_CC2500_PowerRST
  8790                           
  8791                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8792  1E1C  3191  2125  319E   	fcall	_CC2500_InitSetREG
  8793                           
  8794                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8795  1E1F  319F  27E1  319E   	fcall	_CC2500_InitPATable
  8796                           
  8797                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8798  1E22  319B  237B  319E   	fcall	_CC2500_ClearTXFIFO
  8799                           
  8800                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8801  1E25  319B  2377  319E   	fcall	_CC2500_ClearRXFIFO
  8802                           
  8803                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8804  1E28  319C  248C  319E   	fcall	_CC2500_FrequencyCabr
  8805                           
  8806                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8807  1E2B  319B  237F         	fcall	_CC2500_SIDLEMode
  8808  1E2D  0008               	return
  8809  1E2E                     __end_of_CC2500_PowerOnInitial:	
  8810                           
  8811                           	psect	text40
  8812  1B7F                     __ptext40:	
  8813 ;; *************** function _CC2500_SIDLEMode *****************
  8814 ;; Defined at:
  8815 ;;		line 216 in file "../src/CC2500_B1.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;		None
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;		None
  8820 ;; Return value:  Size  Location     Type
  8821 ;;		None               void
  8822 ;; Registers used:
  8823 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8824 ;; Tracked objects:
  8825 ;;		On entry : 0/0
  8826 ;;		On exit  : 0/0
  8827 ;;		Unchanged: 0/0
  8828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8833 ;;Total ram usage:        0 bytes
  8834 ;; Hardware stack levels used:    1
  8835 ;; Hardware stack levels required when called:    7
  8836 ;; This function calls:
  8837 ;;		_CC2500_WriteCommand
  8838 ;; This function is called by:
  8839 ;;		_CC2500_PowerOnInitial
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           
  8844                           ;psect for function _CC2500_SIDLEMode
  8845  1B7F                     _CC2500_SIDLEMode:	
  8846                           
  8847                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8848                           
  8849                           ;incstack = 0
  8850                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8851  1B7F  3036               	movlw	54
  8852  1B80  319F  271A         	fcall	_CC2500_WriteCommand
  8853  1B82  0008               	return
  8854  1B83                     __end_of_CC2500_SIDLEMode:	
  8855                           
  8856                           	psect	text41
  8857  1463                     __ptext41:	
  8858 ;; *************** function _CC2500_PowerRST *****************
  8859 ;; Defined at:
  8860 ;;		line 139 in file "../src/CC2500_B1.c"
  8861 ;; Parameters:    Size  Location     Type
  8862 ;;		None
  8863 ;; Auto vars:     Size  Location     Type
  8864 ;;		None
  8865 ;; Return value:  Size  Location     Type
  8866 ;;		None               void
  8867 ;; Registers used:
  8868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8877 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;Total ram usage:        1 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; Hardware stack levels required when called:    6
  8881 ;; This function calls:
  8882 ;;		_CC2500_WriteByte
  8883 ;;		_DelayTime_1us
  8884 ;;		_RF_Timeout_Counter
  8885 ;;		_setRF_TimeoutCleared
  8886 ;; This function is called by:
  8887 ;;		_CC2500_PowerOnInitial
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           
  8892                           ;psect for function _CC2500_PowerRST
  8893  1463                     _CC2500_PowerRST:	
  8894                           
  8895                           ;CC2500_B1.c: 140: RC3 = 0;
  8896                           
  8897                           ;incstack = 0
  8898                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8899  1463  0020               	movlb	0	; select bank0
  8900  1464  118E               	bcf	14,3	;volatile
  8901                           
  8902                           ;CC2500_B1.c: 141: RC4 = 0;
  8903  1465  120E               	bcf	14,4	;volatile
  8904                           
  8905                           ;CC2500_B1.c: 142: RC0 = 1;
  8906  1466  140E               	bsf	14,0	;volatile
  8907                           
  8908                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8909  1467  300A               	movlw	10
  8910  1468  00A0               	movwf	DelayTime_1us@count
  8911  1469  3000               	movlw	0
  8912  146A  00A1               	movwf	DelayTime_1us@count+1
  8913  146B  3190  20D7  3194   	fcall	_DelayTime_1us
  8914                           
  8915                           ;CC2500_B1.c: 144: RC0 = 0;
  8916  146E  0020               	movlb	0	; select bank0
  8917  146F  100E               	bcf	14,0	;volatile
  8918                           
  8919                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8920  1470  300A               	movlw	10
  8921  1471  00A0               	movwf	DelayTime_1us@count
  8922  1472  3000               	movlw	0
  8923  1473  00A1               	movwf	DelayTime_1us@count+1
  8924  1474  3190  20D7  3194   	fcall	_DelayTime_1us
  8925                           
  8926                           ;CC2500_B1.c: 146: RC0 = 1;
  8927  1477  0020               	movlb	0	; select bank0
  8928  1478  140E               	bsf	14,0	;volatile
  8929                           
  8930                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8931  1479  3028               	movlw	40
  8932  147A  00A0               	movwf	DelayTime_1us@count
  8933  147B  3000               	movlw	0
  8934  147C  00A1               	movwf	DelayTime_1us@count+1
  8935  147D  3190  20D7  3194   	fcall	_DelayTime_1us
  8936                           
  8937                           ;CC2500_B1.c: 148: RC0 = 0;
  8938  1480  0020               	movlb	0	; select bank0
  8939  1481  100E               	bcf	14,0	;volatile
  8940                           
  8941                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8942  1482  3030               	movlw	48
  8943  1483  00A6               	movwf	??_CC2500_PowerRST
  8944  1484  0826               	movf	??_CC2500_PowerRST,w
  8945  1485  0021               	movlb	1	; select bank1
  8946  1486  00D8               	movwf	_SPI0Buffer^(0+128)
  8947                           
  8948                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  8949  1487  2C8B               	goto	l6361
  8950  1488                     l6359:	
  8951                           
  8952                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8953  1488  319E  2604  3194   	fcall	_RF_Timeout_Counter
  8954  148B                     l6361:	
  8955  148B  0020               	movlb	0	; select bank0
  8956  148C  1E8E               	btfss	14,5	;volatile
  8957  148D  2C91               	goto	l6365
  8958  148E  0021               	movlb	1	; select bank1
  8959  148F  1F21               	btfss	(_RF1^(0+128)+1),6
  8960  1490  2C88               	goto	l6359
  8961  1491                     l6365:	
  8962                           
  8963                           ;CC2500_B1.c: 152: };
  8964                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8965  1491  319B  2373  3194   	fcall	_setRF_TimeoutCleared
  8966                           
  8967                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8968  1494  319E  26CD  3194   	fcall	_CC2500_WriteByte
  8969                           
  8970                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  8971  1497  2C9B               	goto	l6371
  8972  1498                     l6369:	
  8973                           
  8974                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8975  1498  319E  2604  3194   	fcall	_RF_Timeout_Counter
  8976  149B                     l6371:	
  8977  149B  0020               	movlb	0	; select bank0
  8978  149C  1E8E               	btfss	14,5	;volatile
  8979  149D  2CA1               	goto	l6375
  8980  149E  0021               	movlb	1	; select bank1
  8981  149F  1F21               	btfss	(_RF1^(0+128)+1),6
  8982  14A0  2C98               	goto	l6369
  8983  14A1                     l6375:	
  8984                           
  8985                           ;CC2500_B1.c: 157: };
  8986                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  8987  14A1  319B  2373         	fcall	_setRF_TimeoutCleared
  8988                           
  8989                           ;CC2500_B1.c: 159: RC4 = 0;
  8990  14A3  0020               	movlb	0	; select bank0
  8991  14A4  120E               	bcf	14,4	;volatile
  8992                           
  8993                           ;CC2500_B1.c: 160: RC0 = 1;
  8994  14A5  140E               	bsf	14,0	;volatile
  8995  14A6  0008               	return
  8996  14A7                     __end_of_CC2500_PowerRST:	
  8997                           
  8998                           	psect	text42
  8999  1125                     __ptext42:	
  9000 ;; *************** function _CC2500_InitSetREG *****************
  9001 ;; Defined at:
  9002 ;;		line 166 in file "../src/CC2500_B1.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;		None
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9007 ;;  temp2           1    7[BANK0 ] unsigned char 
  9008 ;;  temp1           1    6[BANK0 ] unsigned char 
  9009 ;; Return value:  Size  Location     Type
  9010 ;;		None               void
  9011 ;; Registers used:
  9012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;Total ram usage:        4 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:    7
  9025 ;; This function calls:
  9026 ;;		_CC2500_WriteREG
  9027 ;; This function is called by:
  9028 ;;		_CC2500_PowerOnInitial
  9029 ;; This function uses a non-reentrant model
  9030 ;;
  9031                           
  9032                           
  9033                           ;psect for function _CC2500_InitSetREG
  9034  1125                     _CC2500_InitSetREG:	
  9035                           
  9036                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9037                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9038                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9039                           
  9040                           ;incstack = 0
  9041                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9042  1125  0020               	movlb	0	; select bank0
  9043  1126  01A8               	clrf	CC2500_InitSetREG@loop_c
  9044  1127                     L3:	
  9045  1127  302F               	movlw	47
  9046  1128  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9047  1129  1803               	btfsc	3,0
  9048  112A  0008               	return
  9049                           
  9050                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9051  112B  0828               	movf	CC2500_InitSetREG@loop_c,w
  9052  112C  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9053  112D  0084               	movwf	4
  9054  112E  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9055  112F  1803               	skipnc
  9056  1130  3E01               	addlw	1
  9057  1131  0085               	movwf	5
  9058  1132  0800               	movf	0,w	;code access
  9059  1133  00A5               	movwf	??_CC2500_InitSetREG
  9060  1134  0825               	movf	??_CC2500_InitSetREG,w
  9061  1135  00A6               	movwf	CC2500_InitSetREG@temp1
  9062                           
  9063                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9064  1136  0828               	movf	CC2500_InitSetREG@loop_c,w
  9065  1137  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9066  1138  0084               	movwf	4
  9067  1139  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9068  113A  1803               	skipnc
  9069  113B  3E01               	addlw	1
  9070  113C  0085               	movwf	5
  9071  113D  0800               	movf	0,w	;code access
  9072  113E  00A5               	movwf	??_CC2500_InitSetREG
  9073  113F  0825               	movf	??_CC2500_InitSetREG,w
  9074  1140  00A7               	movwf	CC2500_InitSetREG@temp2
  9075                           
  9076                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9077  1141  0827               	movf	CC2500_InitSetREG@temp2,w
  9078  1142  00A5               	movwf	??_CC2500_InitSetREG
  9079  1143  0825               	movf	??_CC2500_InitSetREG,w
  9080  1144  00A2               	movwf	CC2500_WriteREG@value
  9081  1145  0826               	movf	CC2500_InitSetREG@temp1,w
  9082  1146  3190  208F  3191   	fcall	_CC2500_WriteREG
  9083  1149  3001               	movlw	1
  9084  114A  0020               	movlb	0	; select bank0
  9085  114B  00A5               	movwf	??_CC2500_InitSetREG
  9086  114C  0825               	movf	??_CC2500_InitSetREG,w
  9087  114D  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9088  114E  2927               	goto	L3
  9089  114F                     __end_of_CC2500_InitSetREG:	
  9090                           
  9091                           	psect	text43
  9092  1FE1                     __ptext43:	
  9093 ;; *************** function _CC2500_InitPATable *****************
  9094 ;; Defined at:
  9095 ;;		line 181 in file "../src/CC2500_B1.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;		None
  9098 ;; Auto vars:     Size  Location     Type
  9099 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9100 ;;  temp            1    6[BANK0 ] unsigned char 
  9101 ;; Return value:  Size  Location     Type
  9102 ;;		None               void
  9103 ;; Registers used:
  9104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9105 ;; Tracked objects:
  9106 ;;		On entry : 0/0
  9107 ;;		On exit  : 0/0
  9108 ;;		Unchanged: 0/0
  9109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;Total ram usage:        3 bytes
  9115 ;; Hardware stack levels used:    1
  9116 ;; Hardware stack levels required when called:    7
  9117 ;; This function calls:
  9118 ;;		_CC2500_WriteREG
  9119 ;; This function is called by:
  9120 ;;		_CC2500_PowerOnInitial
  9121 ;; This function uses a non-reentrant model
  9122 ;;
  9123                           
  9124                           
  9125                           ;psect for function _CC2500_InitPATable
  9126  1FE1                     _CC2500_InitPATable:	
  9127                           
  9128                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9129                           ;CC2500_B1.c: 183: unsigned char temp;
  9130                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9131                           
  9132                           ;incstack = 0
  9133                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9134  1FE1  0020               	movlb	0	; select bank0
  9135  1FE2  01A7               	clrf	CC2500_InitPATable@loop_d
  9136  1FE3                     L4:	
  9137  1FE3  3008               	movlw	8
  9138  1FE4  0227               	subwf	CC2500_InitPATable@loop_d,w
  9139  1FE5  1803               	btfsc	3,0
  9140  1FE6  0008               	return
  9141                           
  9142                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9143  1FE7  0827               	movf	CC2500_InitPATable@loop_d,w
  9144  1FE8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9145  1FE9  0084               	movwf	4
  9146  1FEA  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9147  1FEB  1803               	skipnc
  9148  1FEC  3E01               	addlw	1
  9149  1FED  0085               	movwf	5
  9150  1FEE  0800               	movf	0,w	;code access
  9151  1FEF  00A5               	movwf	??_CC2500_InitPATable
  9152  1FF0  0825               	movf	??_CC2500_InitPATable,w
  9153  1FF1  00A6               	movwf	CC2500_InitPATable@temp
  9154                           
  9155                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9156  1FF2  0826               	movf	CC2500_InitPATable@temp,w
  9157  1FF3  00A5               	movwf	??_CC2500_InitPATable
  9158  1FF4  0825               	movf	??_CC2500_InitPATable,w
  9159  1FF5  00A2               	movwf	CC2500_WriteREG@value
  9160  1FF6  303E               	movlw	62
  9161  1FF7  3190  208F  319F   	fcall	_CC2500_WriteREG
  9162  1FFA  3001               	movlw	1
  9163  1FFB  0020               	movlb	0	; select bank0
  9164  1FFC  00A5               	movwf	??_CC2500_InitPATable
  9165  1FFD  0825               	movf	??_CC2500_InitPATable,w
  9166  1FFE  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9167  1FFF  2FE3               	goto	L4
  9168  2000                     __end_of_CC2500_InitPATable:	
  9169                           
  9170                           	psect	text44
  9171  108F                     __ptext44:	
  9172 ;; *************** function _CC2500_WriteREG *****************
  9173 ;; Defined at:
  9174 ;;		line 258 in file "../src/CC2500_B1.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;  w_addr          1    wreg     unsigned char 
  9177 ;;  value           1    2[BANK0 ] unsigned char 
  9178 ;; Auto vars:     Size  Location     Type
  9179 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9180 ;; Return value:  Size  Location     Type
  9181 ;;		None               void
  9182 ;; Registers used:
  9183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9184 ;; Tracked objects:
  9185 ;;		On entry : 0/0
  9186 ;;		On exit  : 0/0
  9187 ;;		Unchanged: 0/0
  9188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9189 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;Total ram usage:        3 bytes
  9194 ;; Hardware stack levels used:    1
  9195 ;; Hardware stack levels required when called:    6
  9196 ;; This function calls:
  9197 ;;		_CC2500_WriteByte
  9198 ;;		_RF_Timeout_Counter
  9199 ;;		_setRF_TimeoutCleared
  9200 ;; This function is called by:
  9201 ;;		_CC2500_InitSetREG
  9202 ;;		_CC2500_InitPATable
  9203 ;; This function uses a non-reentrant model
  9204 ;;
  9205                           
  9206                           
  9207                           ;psect for function _CC2500_WriteREG
  9208  108F                     _CC2500_WriteREG:	
  9209                           
  9210                           ;incstack = 0
  9211                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9212                           ;CC2500_WriteREG@w_addr stored from wreg
  9213  108F  0020               	movlb	0	; select bank0
  9214  1090  00A4               	movwf	CC2500_WriteREG@w_addr
  9215                           
  9216                           ;CC2500_B1.c: 259: RC0 = 0;
  9217  1091  100E               	bcf	14,0	;volatile
  9218                           
  9219                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9220  1092  0824               	movf	CC2500_WriteREG@w_addr,w
  9221  1093  00A3               	movwf	??_CC2500_WriteREG
  9222  1094  0823               	movf	??_CC2500_WriteREG,w
  9223  1095  0021               	movlb	1	; select bank1
  9224  1096  00D8               	movwf	_SPI0Buffer^(0+128)
  9225                           
  9226                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9227  1097  289B               	goto	l6251
  9228  1098                     l6249:	
  9229                           
  9230                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9231  1098  319E  2604  3190   	fcall	_RF_Timeout_Counter
  9232  109B                     l6251:	
  9233  109B  0020               	movlb	0	; select bank0
  9234  109C  1E8E               	btfss	14,5	;volatile
  9235  109D  28A1               	goto	l6255
  9236  109E  0021               	movlb	1	; select bank1
  9237  109F  1F21               	btfss	(_RF1^(0+128)+1),6
  9238  10A0  2898               	goto	l6249
  9239  10A1                     l6255:	
  9240                           
  9241                           ;CC2500_B1.c: 263: };
  9242                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9243  10A1  319B  2373  3190   	fcall	_setRF_TimeoutCleared
  9244                           
  9245                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9246  10A4  319E  26CD  3190   	fcall	_CC2500_WriteByte
  9247                           
  9248                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9249  10A7  0020               	movlb	0	; select bank0
  9250  10A8  0822               	movf	CC2500_WriteREG@value,w
  9251  10A9  00A3               	movwf	??_CC2500_WriteREG
  9252  10AA  0823               	movf	??_CC2500_WriteREG,w
  9253  10AB  0021               	movlb	1	; select bank1
  9254  10AC  00D8               	movwf	_SPI0Buffer^(0+128)
  9255                           
  9256                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9257  10AD  319E  26CD         	fcall	_CC2500_WriteByte
  9258                           
  9259                           ;CC2500_B1.c: 269: RC0 = 1;
  9260  10AF  0020               	movlb	0	; select bank0
  9261  10B0  140E               	bsf	14,0	;volatile
  9262  10B1  0008               	return
  9263  10B2                     __end_of_CC2500_WriteREG:	
  9264                           
  9265                           	psect	text45
  9266  1C8C                     __ptext45:	
  9267 ;; *************** function _CC2500_FrequencyCabr *****************
  9268 ;; Defined at:
  9269 ;;		line 208 in file "../src/CC2500_B1.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;		None
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;		None
  9274 ;; Return value:  Size  Location     Type
  9275 ;;		None               void
  9276 ;; Registers used:
  9277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9278 ;; Tracked objects:
  9279 ;;		On entry : 0/0
  9280 ;;		On exit  : 0/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;Total ram usage:        0 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:    7
  9290 ;; This function calls:
  9291 ;;		_CC2500_WriteCommand
  9292 ;;		_DelayTime_1us
  9293 ;; This function is called by:
  9294 ;;		_CC2500_PowerOnInitial
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           
  9299                           ;psect for function _CC2500_FrequencyCabr
  9300  1C8C                     _CC2500_FrequencyCabr:	
  9301                           
  9302                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9303                           
  9304                           ;incstack = 0
  9305                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9306  1C8C  3033               	movlw	51
  9307  1C8D  319F  271A  319C   	fcall	_CC2500_WriteCommand
  9308                           
  9309                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9310  1C90  30E8               	movlw	232
  9311  1C91  0020               	movlb	0	; select bank0
  9312  1C92  00A0               	movwf	DelayTime_1us@count
  9313  1C93  3003               	movlw	3
  9314  1C94  00A1               	movwf	DelayTime_1us@count+1
  9315  1C95  3190  20D7         	fcall	_DelayTime_1us
  9316  1C97  0008               	return
  9317  1C98                     __end_of_CC2500_FrequencyCabr:	
  9318                           
  9319                           	psect	text46
  9320  10D7                     __ptext46:	
  9321 ;; *************** function _DelayTime_1us *****************
  9322 ;; Defined at:
  9323 ;;		line 327 in file "../src/CC2500_B1.c"
  9324 ;; Parameters:    Size  Location     Type
  9325 ;;  count           2    0[BANK0 ] int 
  9326 ;; Auto vars:     Size  Location     Type
  9327 ;;  j               2    4[BANK0 ] unsigned int 
  9328 ;;  i               2    2[BANK0 ] unsigned int 
  9329 ;; Return value:  Size  Location     Type
  9330 ;;		None               void
  9331 ;; Registers used:
  9332 ;;		wreg, status,2
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9338 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;Total ram usage:        6 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; Hardware stack levels required when called:    5
  9345 ;; This function calls:
  9346 ;;		Nothing
  9347 ;; This function is called by:
  9348 ;;		_CC2500_PowerRST
  9349 ;;		_CC2500_FrequencyCabr
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function _DelayTime_1us
  9355  10D7                     _DelayTime_1us:	
  9356                           
  9357                           ;CC2500_B1.c: 328: unsigned int i, j;
  9358                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9359                           
  9360                           ;incstack = 0
  9361                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9362  10D7  3001               	movlw	1
  9363  10D8  0020               	movlb	0	; select bank0
  9364  10D9  00A2               	movwf	DelayTime_1us@i
  9365  10DA  3000               	movlw	0
  9366  10DB  00A3               	movwf	DelayTime_1us@i+1
  9367  10DC                     l347:	
  9368  10DC  0821               	movf	DelayTime_1us@count+1,w
  9369  10DD  0223               	subwf	DelayTime_1us@i+1,w
  9370  10DE  1D03               	skipz
  9371  10DF  28E2               	goto	u5385
  9372  10E0  0820               	movf	DelayTime_1us@count,w
  9373  10E1  0222               	subwf	DelayTime_1us@i,w
  9374  10E2                     u5385:	
  9375  10E2  1803               	btfsc	3,0
  9376  10E3  0008               	return
  9377                           
  9378                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9379  10E4  01A4               	clrf	DelayTime_1us@j
  9380  10E5  01A5               	clrf	DelayTime_1us@j+1
  9381  10E6  3000               	movlw	0
  9382  10E7  0225               	subwf	DelayTime_1us@j+1,w
  9383  10E8  3002               	movlw	2
  9384  10E9  1903               	skipnz
  9385  10EA  0224               	subwf	DelayTime_1us@j,w
  9386  10EB  1803               	btfsc	3,0
  9387  10EC  28F8               	goto	l6243
  9388  10ED                     l6241:	
  9389  10ED  3001               	movlw	1
  9390  10EE  07A4               	addwf	DelayTime_1us@j,f
  9391  10EF  3000               	movlw	0
  9392  10F0  3DA5               	addwfc	DelayTime_1us@j+1,f
  9393  10F1  3000               	movlw	0
  9394  10F2  0225               	subwf	DelayTime_1us@j+1,w
  9395  10F3  3002               	movlw	2
  9396  10F4  1903               	skipnz
  9397  10F5  0224               	subwf	DelayTime_1us@j,w
  9398  10F6  1C03               	skipc
  9399  10F7  28ED               	goto	l6241
  9400  10F8                     l6243:	
  9401  10F8  3001               	movlw	1
  9402  10F9  07A2               	addwf	DelayTime_1us@i,f
  9403  10FA  3000               	movlw	0
  9404  10FB  3DA3               	addwfc	DelayTime_1us@i+1,f
  9405  10FC  28DC               	goto	l347
  9406  10FD                     __end_of_DelayTime_1us:	
  9407                           
  9408                           	psect	text47
  9409  1B7B                     __ptext47:	
  9410 ;; *************** function _CC2500_ClearTXFIFO *****************
  9411 ;; Defined at:
  9412 ;;		line 194 in file "../src/CC2500_B1.c"
  9413 ;; Parameters:    Size  Location     Type
  9414 ;;		None
  9415 ;; Auto vars:     Size  Location     Type
  9416 ;;		None
  9417 ;; Return value:  Size  Location     Type
  9418 ;;		None               void
  9419 ;; Registers used:
  9420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9421 ;; Tracked objects:
  9422 ;;		On entry : 0/0
  9423 ;;		On exit  : 0/0
  9424 ;;		Unchanged: 0/0
  9425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;Total ram usage:        0 bytes
  9431 ;; Hardware stack levels used:    1
  9432 ;; Hardware stack levels required when called:    7
  9433 ;; This function calls:
  9434 ;;		_CC2500_WriteCommand
  9435 ;; This function is called by:
  9436 ;;		_CC2500_PowerOnInitial
  9437 ;; This function uses a non-reentrant model
  9438 ;;
  9439                           
  9440                           
  9441                           ;psect for function _CC2500_ClearTXFIFO
  9442  1B7B                     _CC2500_ClearTXFIFO:	
  9443                           
  9444                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9445                           
  9446                           ;incstack = 0
  9447                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9448  1B7B  303B               	movlw	59
  9449  1B7C  319F  271A         	fcall	_CC2500_WriteCommand
  9450  1B7E  0008               	return
  9451  1B7F                     __end_of_CC2500_ClearTXFIFO:	
  9452                           
  9453                           	psect	text48
  9454  1B77                     __ptext48:	
  9455 ;; *************** function _CC2500_ClearRXFIFO *****************
  9456 ;; Defined at:
  9457 ;;		line 201 in file "../src/CC2500_B1.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;		None
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;		None
  9462 ;; Return value:  Size  Location     Type
  9463 ;;		None               void
  9464 ;; Registers used:
  9465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9466 ;; Tracked objects:
  9467 ;;		On entry : 0/0
  9468 ;;		On exit  : 0/0
  9469 ;;		Unchanged: 0/0
  9470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;Total ram usage:        0 bytes
  9476 ;; Hardware stack levels used:    1
  9477 ;; Hardware stack levels required when called:    7
  9478 ;; This function calls:
  9479 ;;		_CC2500_WriteCommand
  9480 ;; This function is called by:
  9481 ;;		_CC2500_PowerOnInitial
  9482 ;; This function uses a non-reentrant model
  9483 ;;
  9484                           
  9485                           
  9486                           ;psect for function _CC2500_ClearRXFIFO
  9487  1B77                     _CC2500_ClearRXFIFO:	
  9488                           
  9489                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9490                           
  9491                           ;incstack = 0
  9492                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9493  1B77  303A               	movlw	58
  9494  1B78  319F  271A         	fcall	_CC2500_WriteCommand
  9495  1B7A  0008               	return
  9496  1B7B                     __end_of_CC2500_ClearRXFIFO:	
  9497                           
  9498                           	psect	text49
  9499  1F1A                     __ptext49:	
  9500 ;; *************** function _CC2500_WriteCommand *****************
  9501 ;; Defined at:
  9502 ;;		line 292 in file "../src/CC2500_B1.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;  command         1    wreg     unsigned char 
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;  command         1    3[BANK0 ] unsigned char 
  9507 ;; Return value:  Size  Location     Type
  9508 ;;		None               void
  9509 ;; Registers used:
  9510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;Total ram usage:        2 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    6
  9523 ;; This function calls:
  9524 ;;		_CC2500_WriteByte
  9525 ;;		_RF_Timeout_Counter
  9526 ;;		_setRF_TimeoutCleared
  9527 ;; This function is called by:
  9528 ;;		_CC2500_TxData
  9529 ;;		_CC2500_RxData
  9530 ;;		_CC2500_ClearTXFIFO
  9531 ;;		_CC2500_ClearRXFIFO
  9532 ;;		_CC2500_FrequencyCabr
  9533 ;;		_CC2500_SIDLEMode
  9534 ;;		_setRF_Main
  9535 ;;		_RF_RxDisable
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           
  9540                           ;psect for function _CC2500_WriteCommand
  9541  1F1A                     _CC2500_WriteCommand:	
  9542                           
  9543                           ;incstack = 0
  9544                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9545                           ;CC2500_WriteCommand@command stored from wreg
  9546  1F1A  0020               	movlb	0	; select bank0
  9547  1F1B  00A3               	movwf	CC2500_WriteCommand@command
  9548                           
  9549                           ;CC2500_B1.c: 293: RC0 = 0;
  9550  1F1C  100E               	bcf	14,0	;volatile
  9551                           
  9552                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9553  1F1D  0823               	movf	CC2500_WriteCommand@command,w
  9554  1F1E  00A2               	movwf	??_CC2500_WriteCommand
  9555  1F1F  0822               	movf	??_CC2500_WriteCommand,w
  9556  1F20  0021               	movlb	1	; select bank1
  9557  1F21  00D8               	movwf	_SPI0Buffer^(0+128)
  9558                           
  9559                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9560  1F22  2F26               	goto	l6205
  9561  1F23                     l6203:	
  9562                           
  9563                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9564  1F23  319E  2604  319F   	fcall	_RF_Timeout_Counter
  9565  1F26                     l6205:	
  9566  1F26  0020               	movlb	0	; select bank0
  9567  1F27  1E8E               	btfss	14,5	;volatile
  9568  1F28  2F2C               	goto	l6209
  9569  1F29  0021               	movlb	1	; select bank1
  9570  1F2A  1F21               	btfss	(_RF1^(0+128)+1),6
  9571  1F2B  2F23               	goto	l6203
  9572  1F2C                     l6209:	
  9573                           
  9574                           ;CC2500_B1.c: 298: };
  9575                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9576  1F2C  319B  2373  319F   	fcall	_setRF_TimeoutCleared
  9577                           
  9578                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9579  1F2F  319E  26CD         	fcall	_CC2500_WriteByte
  9580                           
  9581                           ;CC2500_B1.c: 302: RC0 = 1;
  9582  1F31  0020               	movlb	0	; select bank0
  9583  1F32  140E               	bsf	14,0	;volatile
  9584  1F33  0008               	return
  9585  1F34                     __end_of_CC2500_WriteCommand:	
  9586                           
  9587                           	psect	text50
  9588  1B73                     __ptext50:	
  9589 ;; *************** function _setRF_TimeoutCleared *****************
  9590 ;; Defined at:
  9591 ;;		line 149 in file "../src/RF_Control_B1.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;		None
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;		None
  9596 ;; Return value:  Size  Location     Type
  9597 ;;		None               void
  9598 ;; Registers used:
  9599 ;;		status,2
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;Total ram usage:        0 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:    5
  9612 ;; This function calls:
  9613 ;;		Nothing
  9614 ;; This function is called by:
  9615 ;;		_CC2500_TxData
  9616 ;;		_CC2500_RxData
  9617 ;;		_CC2500_PowerRST
  9618 ;;		_CC2500_WriteREG
  9619 ;;		_CC2500_WriteCommand
  9620 ;;		_CC2500_ReadStatus
  9621 ;;		_CC2500_ReadREG
  9622 ;; This function uses a non-reentrant model
  9623 ;;
  9624                           
  9625                           
  9626                           ;psect for function _setRF_TimeoutCleared
  9627  1B73                     _setRF_TimeoutCleared:	
  9628                           
  9629                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9630                           
  9631                           ;incstack = 0
  9632                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9633  1B73  0021               	movlb	1	; select bank1
  9634  1B74  01AC               	clrf	(_RF1^(0+128)+12)
  9635  1B75  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9636  1B76  0008               	return
  9637  1B77                     __end_of_setRF_TimeoutCleared:	
  9638                           
  9639                           	psect	text51
  9640  1E04                     __ptext51:	
  9641 ;; *************** function _RF_Timeout_Counter *****************
  9642 ;; Defined at:
  9643 ;;		line 141 in file "../src/RF_Control_B1.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;		None
  9646 ;; Auto vars:     Size  Location     Type
  9647 ;;		None
  9648 ;; Return value:  Size  Location     Type
  9649 ;;		None               void
  9650 ;; Registers used:
  9651 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9652 ;; Tracked objects:
  9653 ;;		On entry : 0/0
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;Total ram usage:        0 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:    5
  9664 ;; This function calls:
  9665 ;;		Nothing
  9666 ;; This function is called by:
  9667 ;;		_CC2500_TxData
  9668 ;;		_CC2500_RxData
  9669 ;;		_CC2500_PowerRST
  9670 ;;		_CC2500_WriteREG
  9671 ;;		_CC2500_WriteCommand
  9672 ;;		_CC2500_ReadStatus
  9673 ;;		_CC2500_ReadREG
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           
  9678                           ;psect for function _RF_Timeout_Counter
  9679  1E04                     _RF_Timeout_Counter:	
  9680                           
  9681                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9682                           
  9683                           ;incstack = 0
  9684                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9685  1E04  3001               	movlw	1
  9686  1E05  0021               	movlb	1	; select bank1
  9687  1E06  07AC               	addwf	(_RF1^(0+128)+12),f
  9688  1E07  3000               	movlw	0
  9689  1E08  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9690                           
  9691                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9692  1E09  300C               	movlw	12
  9693  1E0A  3EA0               	addlw	_RF1& (0+255)
  9694  1E0B  0086               	movwf	6
  9695  1E0C  0187               	clrf	7
  9696  1E0D  3F40               	moviw [0]fsr1
  9697  1E0E  3AA8               	xorlw	168
  9698  1E0F  1D03               	skipz
  9699  1E10  2E13               	goto	u5115
  9700  1E11  3F41               	moviw [1]fsr1
  9701  1E12  3A61               	xorlw	97
  9702  1E13                     u5115:	
  9703  1E13  1D03               	skipz
  9704  1E14  0008               	return
  9705                           
  9706                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9707  1E15  01AC               	clrf	(_RF1^(0+128)+12)
  9708  1E16  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9709                           
  9710                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9711  1E17  1721               	bsf	(_RF1^(0+128)+1),6
  9712  1E18  0008               	return
  9713  1E19                     __end_of_RF_Timeout_Counter:	
  9714                           
  9715                           	psect	text52
  9716  1ECD                     __ptext52:	
  9717 ;; *************** function _CC2500_WriteByte *****************
  9718 ;; Defined at:
  9719 ;;		line 226 in file "../src/CC2500_B1.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;		None
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9724 ;; Return value:  Size  Location     Type
  9725 ;;		None               void
  9726 ;; Registers used:
  9727 ;;		wreg, status,2, status,0
  9728 ;; Tracked objects:
  9729 ;;		On entry : 0/0
  9730 ;;		On exit  : 0/0
  9731 ;;		Unchanged: 0/0
  9732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;Total ram usage:        2 bytes
  9738 ;; Hardware stack levels used:    1
  9739 ;; Hardware stack levels required when called:    5
  9740 ;; This function calls:
  9741 ;;		Nothing
  9742 ;; This function is called by:
  9743 ;;		_CC2500_TxData
  9744 ;;		_CC2500_RxData
  9745 ;;		_CC2500_PowerRST
  9746 ;;		_CC2500_WriteREG
  9747 ;;		_CC2500_WriteCommand
  9748 ;;		_CC2500_ReadStatus
  9749 ;;		_CC2500_ReadREG
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           
  9754                           ;psect for function _CC2500_WriteByte
  9755  1ECD                     _CC2500_WriteByte:	
  9756                           
  9757                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9758                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9759                           
  9760                           ;incstack = 0
  9761                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9762  1ECD  0020               	movlb	0	; select bank0
  9763  1ECE  01A1               	clrf	CC2500_WriteByte@loop_a
  9764  1ECF                     L5:	
  9765  1ECF  3008               	movlw	8
  9766  1ED0  0221               	subwf	CC2500_WriteByte@loop_a,w
  9767  1ED1  1803               	btfsc	3,0
  9768  1ED2  0008               	return
  9769                           
  9770                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9771  1ED3  0021               	movlb	1	; select bank1
  9772  1ED4  1FD8               	btfss	_SPI0Buffer^(0+128),7
  9773  1ED5  2ED9               	goto	l303
  9774                           
  9775                           ;CC2500_B1.c: 230: RC4 = 1;
  9776  1ED6  0020               	movlb	0	; select bank0
  9777  1ED7  160E               	bsf	14,4	;volatile
  9778  1ED8  2EDB               	goto	l304
  9779  1ED9                     l303:	
  9780                           
  9781                           ;CC2500_B1.c: 231: else
  9782                           ;CC2500_B1.c: 232: RC4 = 0;
  9783  1ED9  0020               	movlb	0	; select bank0
  9784  1EDA  120E               	bcf	14,4	;volatile
  9785  1EDB                     l304:	
  9786                           
  9787                           ;CC2500_B1.c: 233: RC3 = 1;
  9788  1EDB  158E               	bsf	14,3	;volatile
  9789                           
  9790                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9791  1EDC  1003               	clrc
  9792  1EDD  0021               	movlb	1	; select bank1
  9793  1EDE  0DD8               	rlf	_SPI0Buffer^(0+128),f
  9794                           
  9795                           ;CC2500_B1.c: 235: RC3 = 0;
  9796  1EDF  0020               	movlb	0	; select bank0
  9797  1EE0  118E               	bcf	14,3	;volatile
  9798  1EE1  3001               	movlw	1
  9799  1EE2  00A0               	movwf	??_CC2500_WriteByte
  9800  1EE3  0820               	movf	??_CC2500_WriteByte,w
  9801  1EE4  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9802  1EE5  2ECF               	goto	L5
  9803  1EE6                     __end_of_CC2500_WriteByte:	
  9804                           
  9805                           	psect	text53
  9806  1B53                     __ptext53:	
  9807 ;; *************** function _RF_Initialization *****************
  9808 ;; Defined at:
  9809 ;;		line 9 in file "../src/RF_Control_B1.c"
  9810 ;; Parameters:    Size  Location     Type
  9811 ;;		None
  9812 ;; Auto vars:     Size  Location     Type
  9813 ;;		None
  9814 ;; Return value:  Size  Location     Type
  9815 ;;		None               void
  9816 ;; Registers used:
  9817 ;;		wreg, status,2, status,0, pclath, cstack
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 0/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;Total ram usage:        0 bytes
  9828 ;; Hardware stack levels used:    1
  9829 ;; Hardware stack levels required when called:    6
  9830 ;; This function calls:
  9831 ;;		_setRF_Initialization
  9832 ;; This function is called by:
  9833 ;;		_main
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           
  9838                           ;psect for function _RF_Initialization
  9839  1B53                     _RF_Initialization:	
  9840                           
  9841                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9842                           
  9843                           ;incstack = 0
  9844                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9845  1B53  319C  2409         	fcall	_setRF_Initialization
  9846  1B55  0008               	return
  9847  1B56                     __end_of_RF_Initialization:	
  9848                           
  9849                           	psect	text54
  9850  1C09                     __ptext54:	
  9851 ;; *************** function _setRF_Initialization *****************
  9852 ;; Defined at:
  9853 ;;		line 17 in file "../src/RF_Control_B1.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;		None
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;		None
  9858 ;; Return value:  Size  Location     Type
  9859 ;;		None               void
  9860 ;; Registers used:
  9861 ;;		wreg
  9862 ;; Tracked objects:
  9863 ;;		On entry : 0/0
  9864 ;;		On exit  : 0/0
  9865 ;;		Unchanged: 0/0
  9866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9870 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;Total ram usage:        1 bytes
  9872 ;; Hardware stack levels used:    1
  9873 ;; Hardware stack levels required when called:    5
  9874 ;; This function calls:
  9875 ;;		Nothing
  9876 ;; This function is called by:
  9877 ;;		_RF_Initialization
  9878 ;; This function uses a non-reentrant model
  9879 ;;
  9880                           
  9881                           
  9882                           ;psect for function _setRF_Initialization
  9883  1C09                     _setRF_Initialization:	
  9884                           
  9885                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9886                           
  9887                           ;incstack = 0
  9888                           ; Regs used in _setRF_Initialization: [wreg]
  9889  1C09  3015               	movlw	21
  9890  1C0A  0020               	movlb	0	; select bank0
  9891  1C0B  00A0               	movwf	??_setRF_Initialization
  9892  1C0C  0820               	movf	??_setRF_Initialization,w
  9893  1C0D  0021               	movlb	1	; select bank1
  9894  1C0E  00DA               	movwf	_Tx_Length^(0+128)
  9895                           
  9896                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  9897  1C0F  30C8               	movlw	200
  9898  1C10  00A7               	movwf	(_RF1^(0+128)+7)
  9899  1C11  3000               	movlw	0
  9900  1C12  00A8               	movwf	(_RF1^(0+128)+8)
  9901  1C13  0008               	return
  9902  1C14                     __end_of_setRF_Initialization:	
  9903                           
  9904                           	psect	text55
  9905  1D80                     __ptext55:	
  9906 ;; *************** function _Mcu_Initialization *****************
  9907 ;; Defined at:
  9908 ;;		line 30 in file "../src/MCU_B1.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;		None
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;		None
  9913 ;; Return value:  Size  Location     Type
  9914 ;;		None               void
  9915 ;; Registers used:
  9916 ;;		wreg, status,2, status,0, pclath, cstack
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;Total ram usage:        0 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    6
  9929 ;; This function calls:
  9930 ;;		_ADC_Set
  9931 ;;		_Fosc_Set
  9932 ;;		_IOC_Set
  9933 ;;		_IO_Set
  9934 ;;		_TMR1_Set
  9935 ;;		_WDT_Set
  9936 ;; This function is called by:
  9937 ;;		_main
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           
  9942                           ;psect for function _Mcu_Initialization
  9943  1D80                     _Mcu_Initialization:	
  9944                           
  9945                           ;MCU_B1.c: 32: Fosc_Set();
  9946                           
  9947                           ;incstack = 0
  9948                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9949  1D80  319B  236F  319D   	fcall	_Fosc_Set
  9950                           
  9951                           ;MCU_B1.c: 34: IO_Set();
  9952  1D83  319F  2700  319D   	fcall	_IO_Set
  9953                           
  9954                           ;MCU_B1.c: 36: ;;
  9955                           ;MCU_B1.c: 38: TMR1_Set();
  9956  1D86  319C  2474  319D   	fcall	_TMR1_Set
  9957                           
  9958                           ;MCU_B1.c: 40: ADC_Set();
  9959  1D89  319B  23A5  319D   	fcall	_ADC_Set
  9960                           
  9961                           ;MCU_B1.c: 42: ;;
  9962                           ;MCU_B1.c: 44: ;;
  9963                           ;MCU_B1.c: 46: IOC_Set();
  9964  1D8C  319B  23FE  319D   	fcall	_IOC_Set
  9965                           
  9966                           ;MCU_B1.c: 48: ;;
  9967                           ;MCU_B1.c: 50: ;;
  9968                           ;MCU_B1.c: 52: WDT_Set();
  9969  1D8F  319C  2480         	fcall	_WDT_Set
  9970  1D91  0008               	return
  9971  1D92                     __end_of_Mcu_Initialization:	
  9972                           
  9973                           	psect	text56
  9974  1C80                     __ptext56:	
  9975 ;; *************** function _WDT_Set *****************
  9976 ;; Defined at:
  9977 ;;		line 1100 in file "../src/MCU_B1.c"
  9978 ;; Parameters:    Size  Location     Type
  9979 ;;		None
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;		None
  9982 ;; Return value:  Size  Location     Type
  9983 ;;		None               void
  9984 ;; Registers used:
  9985 ;;		wreg
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;Total ram usage:        1 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:    5
  9998 ;; This function calls:
  9999 ;;		Nothing
 10000 ;; This function is called by:
 10001 ;;		_Mcu_Initialization
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           
 10006                           ;psect for function _WDT_Set
 10007  1C80                     _WDT_Set:	
 10008                           
 10009                           ;MCU_B1.c: 1107: WDTCON = 0b00010111;;
 10010                           
 10011                           ;incstack = 0
 10012                           ; Regs used in _WDT_Set: [wreg]
 10013  1C80  3017               	movlw	23
 10014  1C81  0021               	movlb	1	; select bank1
 10015  1C82  0097               	movwf	23	;volatile
 10016                           
 10017                           ;MCU_B1.c: 1109: WDT.Enable = 1;
 10018  1C83  0022               	movlb	2	; select bank2
 10019  1C84  142A               	bsf	_WDT^(0+256),0
 10020                           
 10021                           ;MCU_B1.c: 1110: WDT.Timer = 10;
 10022  1C85  300A               	movlw	10
 10023  1C86  0020               	movlb	0	; select bank0
 10024  1C87  00A0               	movwf	??_WDT_Set
 10025  1C88  0820               	movf	??_WDT_Set,w
 10026  1C89  0022               	movlb	2	; select bank2
 10027  1C8A  00AB               	movwf	(_WDT^(0+256)+1)
 10028  1C8B  0008               	return
 10029  1C8C                     __end_of_WDT_Set:	
 10030                           
 10031                           	psect	text57
 10032  1C74                     __ptext57:	
 10033 ;; *************** function _TMR1_Set *****************
 10034 ;; Defined at:
 10035 ;;		line 226 in file "../src/MCU_B1.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;		None
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;		None
 10040 ;; Return value:  Size  Location     Type
 10041 ;;		None               void
 10042 ;; Registers used:
 10043 ;;		wreg
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;Total ram usage:        0 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; Hardware stack levels required when called:    5
 10056 ;; This function calls:
 10057 ;;		Nothing
 10058 ;; This function is called by:
 10059 ;;		_Mcu_Initialization
 10060 ;; This function uses a non-reentrant model
 10061 ;;
 10062                           
 10063                           
 10064                           ;psect for function _TMR1_Set
 10065  1C74                     _TMR1_Set:	
 10066                           
 10067                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10068                           
 10069                           ;incstack = 0
 10070                           ; Regs used in _TMR1_Set: [wreg]
 10071  1C74  3041               	movlw	65
 10072  1C75  0020               	movlb	0	; select bank0
 10073  1C76  0098               	movwf	24	;volatile
 10074                           
 10075                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10076  1C77  30FA               	movlw	250
 10077  1C78  0097               	movwf	23	;volatile
 10078                           
 10079                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10080  1C79  3038               	movlw	56
 10081  1C7A  0096               	movwf	22	;volatile
 10082                           
 10083                           ;MCU_B1.c: 230: TMR1IE = 1;
 10084  1C7B  0021               	movlb	1	; select bank1
 10085  1C7C  1411               	bsf	17,0	;volatile
 10086                           
 10087                           ;MCU_B1.c: 231: PEIE = 1;
 10088  1C7D  170B               	bsf	11,6	;volatile
 10089                           
 10090                           ;MCU_B1.c: 232: GIE = 1;
 10091  1C7E  178B               	bsf	11,7	;volatile
 10092  1C7F  0008               	return
 10093  1C80                     __end_of_TMR1_Set:	
 10094                           
 10095                           	psect	text58
 10096  1F00                     __ptext58:	
 10097 ;; *************** function _IO_Set *****************
 10098 ;; Defined at:
 10099 ;;		line 60 in file "../src/MCU_B1.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;		None
 10102 ;; Auto vars:     Size  Location     Type
 10103 ;;		None
 10104 ;; Return value:  Size  Location     Type
 10105 ;;		None               void
 10106 ;; Registers used:
 10107 ;;		wreg, status,2
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;Total ram usage:        0 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; Hardware stack levels required when called:    5
 10120 ;; This function calls:
 10121 ;;		Nothing
 10122 ;; This function is called by:
 10123 ;;		_Mcu_Initialization
 10124 ;; This function uses a non-reentrant model
 10125 ;;
 10126                           
 10127                           
 10128                           ;psect for function _IO_Set
 10129  1F00                     _IO_Set:	
 10130                           
 10131                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10132                           
 10133                           ;incstack = 0
 10134                           ; Regs used in _IO_Set: [wreg+status,2]
 10135  1F00  30F7               	movlw	247
 10136  1F01  0021               	movlb	1	; select bank1
 10137  1F02  008C               	movwf	12	;volatile
 10138                           
 10139                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10140  1F03  3004               	movlw	4
 10141  1F04  008D               	movwf	13	;volatile
 10142                           
 10143                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10144  1F05  3026               	movlw	38
 10145  1F06  008E               	movwf	14	;volatile
 10146                           
 10147                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10148  1F07  0022               	movlb	2	; select bank2
 10149  1F08  018C               	clrf	12	;volatile
 10150                           
 10151                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10152  1F09  018D               	clrf	13	;volatile
 10153                           
 10154                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10155  1F0A  018E               	clrf	14	;volatile
 10156                           
 10157                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10158  1F0B  300E               	movlw	14
 10159  1F0C  0023               	movlb	3	; select bank3
 10160  1F0D  008C               	movwf	12	;volatile
 10161                           
 10162                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10163  1F0E  018D               	clrf	13	;volatile
 10164                           
 10165                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10166  1F0F  018E               	clrf	14	;volatile
 10167                           
 10168                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10169  1F10  30F7               	movlw	247
 10170  1F11  0020               	movlb	0	; select bank0
 10171  1F12  008C               	movwf	12	;volatile
 10172                           
 10173                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10174  1F13  3004               	movlw	4
 10175  1F14  008D               	movwf	13	;volatile
 10176                           
 10177                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10178  1F15  3026               	movlw	38
 10179  1F16  008E               	movwf	14	;volatile
 10180                           
 10181                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10182  1F17  0024               	movlb	4	; select bank4
 10183  1F18  018D               	clrf	13	;volatile
 10184  1F19  0008               	return
 10185  1F1A                     __end_of_IO_Set:	
 10186                           
 10187                           	psect	text59
 10188  1BFE                     __ptext59:	
 10189 ;; *************** function _IOC_Set *****************
 10190 ;; Defined at:
 10191 ;;		line 379 in file "../src/MCU_B1.c"
 10192 ;; Parameters:    Size  Location     Type
 10193 ;;		None
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;		None
 10196 ;; Return value:  Size  Location     Type
 10197 ;;		None               void
 10198 ;; Registers used:
 10199 ;;		wreg, status,2
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;Total ram usage:        0 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; Hardware stack levels required when called:    5
 10212 ;; This function calls:
 10213 ;;		Nothing
 10214 ;; This function is called by:
 10215 ;;		_Mcu_Initialization
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219                           
 10220                           ;psect for function _IOC_Set
 10221  1BFE                     _IOC_Set:	
 10222                           
 10223                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10224                           
 10225                           ;incstack = 0
 10226                           ; Regs used in _IOC_Set: [wreg+status,2]
 10227  1BFE  3004               	movlw	4
 10228  1BFF  0027               	movlb	7	; select bank7
 10229  1C00  0094               	movwf	20	;volatile
 10230                           
 10231                           ;MCU_B1.c: 382: IOCBN = 0b00000100;;
 10232  1C01  3004               	movlw	4
 10233  1C02  0095               	movwf	21	;volatile
 10234                           
 10235                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10236  1C03  0196               	clrf	22	;volatile
 10237                           
 10238                           ;MCU_B1.c: 386: IOCIE = 1;
 10239  1C04  158B               	bsf	11,3	;volatile
 10240                           
 10241                           ;MCU_B1.c: 387: IOCIF = 0;
 10242  1C05  100B               	bcf	11,0	;volatile
 10243                           
 10244                           ;MCU_B1.c: 388: PEIE = 1;
 10245  1C06  170B               	bsf	11,6	;volatile
 10246                           
 10247                           ;MCU_B1.c: 389: GIE = 1;
 10248  1C07  178B               	bsf	11,7	;volatile
 10249  1C08  0008               	return
 10250  1C09                     __end_of_IOC_Set:	
 10251                           
 10252                           	psect	text60
 10253  1B6F                     __ptext60:	
 10254 ;; *************** function _Fosc_Set *****************
 10255 ;; Defined at:
 10256 ;;		line 56 in file "../src/MCU_B1.c"
 10257 ;; Parameters:    Size  Location     Type
 10258 ;;		None
 10259 ;; Auto vars:     Size  Location     Type
 10260 ;;		None
 10261 ;; Return value:  Size  Location     Type
 10262 ;;		None               void
 10263 ;; Registers used:
 10264 ;;		wreg
 10265 ;; Tracked objects:
 10266 ;;		On entry : 0/0
 10267 ;;		On exit  : 0/0
 10268 ;;		Unchanged: 0/0
 10269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;Total ram usage:        0 bytes
 10275 ;; Hardware stack levels used:    1
 10276 ;; Hardware stack levels required when called:    5
 10277 ;; This function calls:
 10278 ;;		Nothing
 10279 ;; This function is called by:
 10280 ;;		_Mcu_Initialization
 10281 ;; This function uses a non-reentrant model
 10282 ;;
 10283                           
 10284                           
 10285                           ;psect for function _Fosc_Set
 10286  1B6F                     _Fosc_Set:	
 10287                           
 10288                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10289                           
 10290                           ;incstack = 0
 10291                           ; Regs used in _Fosc_Set: [wreg]
 10292  1B6F  3078               	movlw	120
 10293  1B70  0021               	movlb	1	; select bank1
 10294  1B71  0099               	movwf	25	;volatile
 10295  1B72  0008               	return
 10296  1B73                     __end_of_Fosc_Set:	
 10297                           
 10298                           	psect	text61
 10299  1BA5                     __ptext61:	
 10300 ;; *************** function _ADC_Set *****************
 10301 ;; Defined at:
 10302 ;;		line 425 in file "../src/MCU_B1.c"
 10303 ;; Parameters:    Size  Location     Type
 10304 ;;		None
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;		None
 10307 ;; Return value:  Size  Location     Type
 10308 ;;		None               void
 10309 ;; Registers used:
 10310 ;;		wreg
 10311 ;; Tracked objects:
 10312 ;;		On entry : 0/0
 10313 ;;		On exit  : 0/0
 10314 ;;		Unchanged: 0/0
 10315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;Total ram usage:        0 bytes
 10321 ;; Hardware stack levels used:    1
 10322 ;; Hardware stack levels required when called:    5
 10323 ;; This function calls:
 10324 ;;		Nothing
 10325 ;; This function is called by:
 10326 ;;		_Mcu_Initialization
 10327 ;; This function uses a non-reentrant model
 10328 ;;
 10329                           
 10330                           
 10331                           ;psect for function _ADC_Set
 10332  1BA5                     _ADC_Set:	
 10333                           
 10334                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10335                           
 10336                           ;incstack = 0
 10337                           ; Regs used in _ADC_Set: [wreg]
 10338  1BA5  30F3               	movlw	243
 10339  1BA6  0021               	movlb	1	; select bank1
 10340  1BA7  009E               	movwf	30	;volatile
 10341                           
 10342                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10343  1BA8  30C1               	movlw	193
 10344  1BA9  0022               	movlb	2	; select bank2
 10345  1BAA  0097               	movwf	23	;volatile
 10346  1BAB  0008               	return
 10347  1BAC                     __end_of_ADC_Set:	
 10348                           
 10349                           	psect	text62
 10350  004B                     __ptext62:	
 10351 ;; *************** function _Load_Main *****************
 10352 ;; Defined at:
 10353 ;;		line 39 in file "../src/OverLoad_B1.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;		None
 10356 ;; Auto vars:     Size  Location     Type
 10357 ;;  i               2   16[BANK0 ] int 
 10358 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10359 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10360 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10361 ;;  error           1   12[BANK0 ] unsigned char 
 10362 ;; Return value:  Size  Location     Type
 10363 ;;		None               void
 10364 ;; Registers used:
 10365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10366 ;; Tracked objects:
 10367 ;;		On entry : 0/0
 10368 ;;		On exit  : 0/0
 10369 ;;		Unchanged: 0/0
 10370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10372 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;Total ram usage:       10 bytes
 10376 ;; Hardware stack levels used:    1
 10377 ;; Hardware stack levels required when called:    6
 10378 ;; This function calls:
 10379 ;;		___lwdiv
 10380 ;;		___wmul
 10381 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10382 ;;		_getDimmer_LoadGO
 10383 ;;		_getDimmer_Load_Status
 10384 ;;		_getMain_All_Error_Status
 10385 ;;		_getMain_All_LightsStatus
 10386 ;;		_getMain_Lights_Count
 10387 ;;		_setLoad_AH_AL_Restore
 10388 ;; This function is called by:
 10389 ;;		_main
 10390 ;; This function uses a non-reentrant model
 10391 ;;
 10392                           
 10393                           
 10394                           ;psect for function _Load_Main
 10395  004B                     _Load_Main:	
 10396                           
 10397                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10398                           
 10399                           ;incstack = 0
 10400                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10401  004B  3000               	movlw	0
 10402  004C  3191  21AF  3180   	fcall	_getMain_All_Error_Status
 10403  004F  0020               	movlb	0	; select bank0
 10404  0050  00A8               	movwf	??_Load_Main
 10405  0051  0828               	movf	??_Load_Main,w
 10406  0052  00AC               	movwf	Load_Main@error
 10407                           
 10408                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10409  0053  01AE               	clrf	Load_Main@Load_RunStatus
 10410  0054  01AD               	clrf	Load_Main@ErrorCountValue
 10411  0055  01AF               	clrf	Load_Main@LightsCount
 10412                           
 10413                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10414  0056  0022               	movlb	2	; select bank2
 10415  0057  1C32               	btfss	_Load^(0+256),0
 10416  0058  29F7               	goto	l1620
 10417                           
 10418                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10419  0059  319B  23DE  3180   	fcall	_getMain_All_LightsStatus
 10420  005C  3800               	iorlw	0
 10421  005D  1D03               	skipz
 10422  005E  2861               	goto	l7887
 10423                           
 10424                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10425  005F  0022               	movlb	2	; select bank2
 10426  0060  2882               	goto	l7905
 10427  0061                     l7887:	
 10428                           ;OverLoad_B1.c: 46: } else {
 10429                           
 10430                           
 10431                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10432  0061  0020               	movlb	0	; select bank0
 10433  0062  08AC               	movf	Load_Main@error,f
 10434  0063  1D03               	skipz
 10435  0064  287F               	goto	l1623
 10436  0065  319D  25CA  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10437  0068  3800               	iorlw	0
 10438  0069  1D03               	skipz
 10439  006A  287F               	goto	l1623
 10440                           
 10441                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10442  006B  0022               	movlb	2	; select bank2
 10443  006C  14B2               	bsf	_Load^(0+256),1
 10444                           
 10445                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10446  006D  319B  23BB  3180   	fcall	_getDimmer_LoadGO
 10447  0070  3A01               	xorlw	1
 10448  0071  1D03               	skipz
 10449  0072  287A               	goto	l1624
 10450                           
 10451                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10452  0073  0022               	movlb	2	; select bank2
 10453  0074  1DB2               	btfss	_Load^(0+256),3
 10454  0075  1BB2               	btfsc	_Load^(0+256),7
 10455  0076  2883               	goto	l1622
 10456                           
 10457                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10458  0077  15B2               	bsf	_Load^(0+256),3
 10459                           
 10460                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10461  0078  01D7               	clrf	(_Load^(0+256)+37)
 10462                           
 10463                           ;OverLoad_B1.c: 56: }
 10464                           ;OverLoad_B1.c: 57: } else {
 10465  0079  2883               	goto	l1622
 10466  007A                     l1624:	
 10467                           
 10468                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10469  007A  0022               	movlb	2	; select bank2
 10470  007B  1FB2               	btfss	_Load^(0+256),7
 10471  007C  2883               	goto	l1622
 10472                           
 10473                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10474  007D  13B2               	bcf	_Load^(0+256),7
 10475                           
 10476                           ;OverLoad_B1.c: 60: }
 10477                           ;OverLoad_B1.c: 61: }
 10478                           ;OverLoad_B1.c: 62: } else {
 10479  007E  2883               	goto	l1622
 10480  007F                     l1623:	
 10481                           
 10482                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10483  007F  0022               	movlb	2	; select bank2
 10484  0080  1CB2               	btfss	_Load^(0+256),1
 10485  0081  2883               	goto	l1622
 10486  0082                     l7905:	
 10487                           
 10488                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10489  0082  10B2               	bcf	_Load^(0+256),1
 10490  0083                     l1622:	
 10491                           
 10492                           ;OverLoad_B1.c: 65: }
 10493                           ;OverLoad_B1.c: 66: }
 10494                           ;OverLoad_B1.c: 88: }
 10495                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10496  0083  1CB2               	btfss	_Load^(0+256),1
 10497  0084  29D3               	goto	l1630
 10498                           
 10499                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10500  0085  1532               	bsf	_Load^(0+256),2
 10501                           
 10502                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10503  0086  1E32               	btfss	_Load^(0+256),4
 10504  0087  29D1               	goto	l1631
 10505                           
 10506                           ;OverLoad_B1.c: 95: Load.Time++;
 10507  0088  3001               	movlw	1
 10508  0089  07B3               	addwf	(_Load^(0+256)+1),f
 10509  008A  3000               	movlw	0
 10510  008B  3DB4               	addwfc	((_Load+1)^(0+256)+1),f
 10511                           
 10512                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10513  008C  3000               	movlw	0
 10514  008D  0234               	subwf	((_Load+1)^(0+256)+1),w
 10515  008E  3002               	movlw	2
 10516  008F  1903               	skipnz
 10517  0090  0233               	subwf	(_Load^(0+256)+1),w
 10518  0091  1C03               	skipc
 10519  0092  0008               	return
 10520                           
 10521                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10522  0093  01B3               	clrf	(_Load^(0+256)+1)
 10523  0094  01B4               	clrf	((_Load+1)^(0+256)+1)
 10524                           
 10525                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10526  0095  1232               	bcf	_Load^(0+256),4
 10527                           
 10528                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10529  0096  3001               	movlw	1
 10530  0097  0020               	movlb	0	; select bank0
 10531  0098  00B0               	movwf	Load_Main@i
 10532  0099  3000               	movlw	0
 10533  009A  00B1               	movwf	Load_Main@i+1
 10534  009B  0831               	movf	Load_Main@i+1,w
 10535  009C  3A80               	xorlw	128
 10536  009D  00A8               	movwf	??_Load_Main
 10537  009E  3080               	movlw	128
 10538  009F  0228               	subwf	??_Load_Main,w
 10539  00A0  1D03               	skipz
 10540  00A1  28A4               	goto	u8095
 10541  00A2  3004               	movlw	4
 10542  00A3  0230               	subwf	Load_Main@i,w
 10543  00A4                     u8095:	
 10544  00A4  1803               	btfsc	3,0
 10545  00A5  28D8               	goto	l7927
 10546  00A6                     l7921:	
 10547                           
 10548                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10549  00A6  0020               	movlb	0	; select bank0
 10550  00A7  3530               	lslf	Load_Main@i,w
 10551  00A8  3E3D               	addlw	(_Load+11)& (0+255)
 10552  00A9  0086               	movwf	6
 10553  00AA  3001               	movlw	1	; select bank2/3
 10554  00AB  0087               	movwf	7
 10555  00AC  3F40               	moviw [0]fsr1
 10556  00AD  00A8               	movwf	??_Load_Main
 10557  00AE  3F41               	moviw [1]fsr1
 10558  00AF  00A9               	movwf	??_Load_Main+1
 10559  00B0  0828               	movf	??_Load_Main,w
 10560  00B1  0022               	movlb	2	; select bank2
 10561  00B2  07B7               	addwf	(_Load^(0+256)+5),f
 10562  00B3  0020               	movlb	0	; select bank0
 10563  00B4  0829               	movf	??_Load_Main+1,w
 10564  00B5  0022               	movlb	2	; select bank2
 10565  00B6  3DB8               	addwfc	((_Load+1)^(0+256)+5),f
 10566                           
 10567                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10568  00B7  0020               	movlb	0	; select bank0
 10569  00B8  3530               	lslf	Load_Main@i,w
 10570  00B9  3E47               	addlw	(_Load+21)& (0+255)
 10571  00BA  0086               	movwf	6
 10572  00BB  3001               	movlw	1	; select bank2/3
 10573  00BC  0087               	movwf	7
 10574  00BD  3F40               	moviw [0]fsr1
 10575  00BE  00A8               	movwf	??_Load_Main
 10576  00BF  3F41               	moviw [1]fsr1
 10577  00C0  00A9               	movwf	??_Load_Main+1
 10578  00C1  0828               	movf	??_Load_Main,w
 10579  00C2  0022               	movlb	2	; select bank2
 10580  00C3  07B9               	addwf	(_Load^(0+256)+7),f
 10581  00C4  0020               	movlb	0	; select bank0
 10582  00C5  0829               	movf	??_Load_Main+1,w
 10583  00C6  0022               	movlb	2	; select bank2
 10584  00C7  3DBA               	addwfc	((_Load+1)^(0+256)+7),f
 10585  00C8  3001               	movlw	1
 10586  00C9  0020               	movlb	0	; select bank0
 10587  00CA  07B0               	addwf	Load_Main@i,f
 10588  00CB  3000               	movlw	0
 10589  00CC  3DB1               	addwfc	Load_Main@i+1,f
 10590  00CD  0831               	movf	Load_Main@i+1,w
 10591  00CE  3A80               	xorlw	128
 10592  00CF  00A8               	movwf	??_Load_Main
 10593  00D0  3080               	movlw	128
 10594  00D1  0228               	subwf	??_Load_Main,w
 10595  00D2  1D03               	skipz
 10596  00D3  28D6               	goto	u8105
 10597  00D4  3004               	movlw	4
 10598  00D5  0230               	subwf	Load_Main@i,w
 10599  00D6                     u8105:	
 10600  00D6  1C03               	skipc
 10601  00D7  28A6               	goto	l7921
 10602  00D8                     l7927:	
 10603                           
 10604                           ;OverLoad_B1.c: 103: }
 10605                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10606  00D8  3003               	movlw	3
 10607  00D9  0020               	movlb	0	; select bank0
 10608  00DA  00A0               	movwf	___lwdiv@divisor
 10609  00DB  3000               	movlw	0
 10610  00DC  00A1               	movwf	___lwdiv@divisor+1
 10611  00DD  0022               	movlb	2	; select bank2
 10612  00DE  0838               	movf	((_Load+1)^(0+256)+5),w
 10613  00DF  0020               	movlb	0	; select bank0
 10614  00E0  01A3               	clrf	___lwdiv@dividend+1
 10615  00E1  07A3               	addwf	___lwdiv@dividend+1,f
 10616  00E2  0022               	movlb	2	; select bank2
 10617  00E3  0837               	movf	(_Load^(0+256)+5),w
 10618  00E4  0020               	movlb	0	; select bank0
 10619  00E5  01A2               	clrf	___lwdiv@dividend
 10620  00E6  07A2               	addwf	___lwdiv@dividend,f
 10621  00E7  3192  2281  3180   	fcall	___lwdiv
 10622  00EA  0020               	movlb	0	; select bank0
 10623  00EB  0821               	movf	?___lwdiv+1,w
 10624  00EC  0022               	movlb	2	; select bank2
 10625  00ED  01B8               	clrf	((_Load+1)^(0+256)+5)
 10626  00EE  07B8               	addwf	((_Load+1)^(0+256)+5),f
 10627  00EF  0020               	movlb	0	; select bank0
 10628  00F0  0820               	movf	?___lwdiv,w
 10629  00F1  0022               	movlb	2	; select bank2
 10630  00F2  01B7               	clrf	(_Load^(0+256)+5)
 10631  00F3  07B7               	addwf	(_Load^(0+256)+5),f
 10632                           
 10633                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10634  00F4  3003               	movlw	3
 10635  00F5  0020               	movlb	0	; select bank0
 10636  00F6  00A0               	movwf	___lwdiv@divisor
 10637  00F7  3000               	movlw	0
 10638  00F8  00A1               	movwf	___lwdiv@divisor+1
 10639  00F9  0022               	movlb	2	; select bank2
 10640  00FA  083A               	movf	((_Load+1)^(0+256)+7),w
 10641  00FB  0020               	movlb	0	; select bank0
 10642  00FC  01A3               	clrf	___lwdiv@dividend+1
 10643  00FD  07A3               	addwf	___lwdiv@dividend+1,f
 10644  00FE  0022               	movlb	2	; select bank2
 10645  00FF  0839               	movf	(_Load^(0+256)+7),w
 10646  0100  0020               	movlb	0	; select bank0
 10647  0101  01A2               	clrf	___lwdiv@dividend
 10648  0102  07A2               	addwf	___lwdiv@dividend,f
 10649  0103  3192  2281  3180   	fcall	___lwdiv
 10650  0106  0020               	movlb	0	; select bank0
 10651  0107  0821               	movf	?___lwdiv+1,w
 10652  0108  0022               	movlb	2	; select bank2
 10653  0109  01BA               	clrf	((_Load+1)^(0+256)+7)
 10654  010A  07BA               	addwf	((_Load+1)^(0+256)+7),f
 10655  010B  0020               	movlb	0	; select bank0
 10656  010C  0820               	movf	?___lwdiv,w
 10657  010D  0022               	movlb	2	; select bank2
 10658  010E  01B9               	clrf	(_Load^(0+256)+7)
 10659  010F  07B9               	addwf	(_Load^(0+256)+7),f
 10660                           
 10661                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10662  0110  319F  276B  3180   	fcall	_setLoad_AH_AL_Restore
 10663                           
 10664                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10665  0113  0022               	movlb	2	; select bank2
 10666  0114  083A               	movf	((_Load+1)^(0+256)+7),w
 10667  0115  0238               	subwf	((_Load+1)^(0+256)+5),w
 10668  0116  1D03               	skipz
 10669  0117  291A               	goto	u8115
 10670  0118  0839               	movf	(_Load^(0+256)+7),w
 10671  0119  0237               	subwf	(_Load^(0+256)+5),w
 10672  011A                     u8115:	
 10673  011A  1C03               	skipc
 10674  011B  0008               	return
 10675                           
 10676                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10677  011C  3005               	movlw	5
 10678  011D  3E32               	addlw	_Load& (0+255)
 10679  011E  0086               	movwf	6
 10680  011F  3001               	movlw	1	; select bank2/3
 10681  0120  0087               	movwf	7
 10682  0121  0939               	comf	(_Load^(0+256)+7),w
 10683  0122  0020               	movlb	0	; select bank0
 10684  0123  00A8               	movwf	??_Load_Main
 10685  0124  0022               	movlb	2	; select bank2
 10686  0125  093A               	comf	((_Load+1)^(0+256)+7),w
 10687  0126  0020               	movlb	0	; select bank0
 10688  0127  00A9               	movwf	??_Load_Main+1
 10689  0128  0AA8               	incf	??_Load_Main,f
 10690  0129  1903               	skipnz
 10691  012A  0AA9               	incf	??_Load_Main+1,f
 10692  012B  3F40               	moviw [0]fsr1
 10693  012C  0728               	addwf	??_Load_Main,w
 10694  012D  0022               	movlb	2	; select bank2
 10695  012E  00D1               	movwf	(_Load^(0+256)+31)
 10696  012F  3F41               	moviw [1]fsr1
 10697  0130  0020               	movlb	0	; select bank0
 10698  0131  3D29               	addwfc	??_Load_Main+1,w
 10699  0132  0022               	movlb	2	; select bank2
 10700  0133  00D2               	movwf	(_Load^(0+256)+32)
 10701                           
 10702                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10703  0134  01B7               	clrf	(_Load^(0+256)+5)
 10704  0135  01B8               	clrf	((_Load+1)^(0+256)+5)
 10705                           
 10706                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10707  0136  01B9               	clrf	(_Load^(0+256)+7)
 10708  0137  01BA               	clrf	((_Load+1)^(0+256)+7)
 10709                           
 10710                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10711  0138  1DB2               	btfss	_Load^(0+256),3
 10712  0139  2993               	goto	l7967
 10713                           
 10714                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10715  013A  3002               	movlw	2
 10716  013B  0257               	subwf	(_Load^(0+256)+37),w
 10717  013C  1803               	skipnc
 10718  013D  2993               	goto	l7967
 10719                           
 10720                           ;OverLoad_B1.c: 115: Load.Count++;
 10721  013E  3001               	movlw	1
 10722  013F  0020               	movlb	0	; select bank0
 10723  0140  00A8               	movwf	??_Load_Main
 10724  0141  0828               	movf	??_Load_Main,w
 10725  0142  0022               	movlb	2	; select bank2
 10726  0143  07D7               	addwf	(_Load^(0+256)+37),f
 10727                           
 10728                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10729  0144  3187  27F8  3180   	fcall	_getDimmer_Load_Status
 10730  0147  0020               	movlb	0	; select bank0
 10731  0148  00A8               	movwf	??_Load_Main
 10732  0149  0828               	movf	??_Load_Main,w
 10733  014A  00AE               	movwf	Load_Main@Load_RunStatus
 10734                           
 10735                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10736  014B  319B  23F3  3180   	fcall	_getMain_Lights_Count
 10737  014E  0020               	movlb	0	; select bank0
 10738  014F  00A8               	movwf	??_Load_Main
 10739  0150  0828               	movf	??_Load_Main,w
 10740  0151  00AF               	movwf	Load_Main@LightsCount
 10741                           
 10742                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10743  0152  0022               	movlb	2	; select bank2
 10744  0153  0857               	movf	(_Load^(0+256)+37),w
 10745  0154  3A01               	xorlw	1
 10746  0155  1D03               	skipz
 10747  0156  295B               	goto	l7953
 10748                           
 10749                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10750  0157  3074               	movlw	116
 10751  0158  00D5               	movwf	(_Load^(0+256)+35)
 10752  0159  3004               	movlw	4
 10753  015A  2968               	goto	L6
 10754  015B                     l7953:	
 10755                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10756                           
 10757  015B  0857               	movf	(_Load^(0+256)+37),w
 10758  015C  3A02               	xorlw	2
 10759  015D  1D03               	skipz
 10760  015E  2993               	goto	l7967
 10761                           
 10762                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10763  015F  0020               	movlb	0	; select bank0
 10764  0160  082F               	movf	Load_Main@LightsCount,w
 10765  0161  3A01               	xorlw	1
 10766  0162  1D03               	skipz
 10767  0163  296A               	goto	l7959
 10768                           
 10769                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.6*57);
 10770  0164  305B               	movlw	91
 10771  0165  0022               	movlb	2	; select bank2
 10772  0166  00D5               	movwf	(_Load^(0+256)+35)
 10773  0167  3000               	movlw	0
 10774  0168                     L6:	
 10775  0168  00D6               	movwf	(_Load^(0+256)+36)
 10776                           
 10777                           ;OverLoad_B1.c: 130: } else {
 10778  0169  2993               	goto	l7967
 10779  016A                     l7959:	
 10780                           
 10781                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10782  016A  0020               	movlb	0	; select bank0
 10783  016B  08AE               	movf	Load_Main@Load_RunStatus,f
 10784  016C  1D03               	skipz
 10785  016D  2987               	goto	l7963
 10786                           
 10787                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.6*57) * LightsCount;
 10788  016E  082F               	movf	Load_Main@LightsCount,w
 10789  016F  00A8               	movwf	??_Load_Main
 10790  0170  01A9               	clrf	??_Load_Main+1
 10791  0171  0828               	movf	??_Load_Main,w
 10792  0172  00A0               	movwf	___wmul@multiplier
 10793  0173  0829               	movf	??_Load_Main+1,w
 10794  0174  00A1               	movwf	___wmul@multiplier+1
 10795  0175  305B               	movlw	91
 10796  0176  00A2               	movwf	___wmul@multiplicand
 10797  0177  3000               	movlw	0
 10798  0178  00A3               	movwf	___wmul@multiplicand+1
 10799  0179  319F  27A4  3180   	fcall	___wmul
 10800  017C  0020               	movlb	0	; select bank0
 10801  017D  0821               	movf	?___wmul+1,w
 10802  017E  0022               	movlb	2	; select bank2
 10803  017F  01D6               	clrf	((_Load+1)^(0+256)+35)
 10804  0180  07D6               	addwf	((_Load+1)^(0+256)+35),f
 10805  0181  0020               	movlb	0	; select bank0
 10806  0182  0820               	movf	?___wmul,w
 10807  0183  0022               	movlb	2	; select bank2
 10808  0184  01D5               	clrf	(_Load^(0+256)+35)
 10809  0185  07D5               	addwf	(_Load^(0+256)+35),f
 10810                           
 10811                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10812  0186  2993               	goto	l7967
 10813  0187                     l7963:	
 10814  0187  0020               	movlb	0	; select bank0
 10815  0188  082E               	movf	Load_Main@Load_RunStatus,w
 10816  0189  3A01               	xorlw	1
 10817  018A  1D03               	skipz
 10818  018B  2993               	goto	l7967
 10819                           
 10820                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.6*57) + Load.TotalLoad;
 10821  018C  0022               	movlb	2	; select bank2
 10822  018D  083B               	movf	(_Load^(0+256)+9),w
 10823  018E  3E5B               	addlw	91
 10824  018F  00D5               	movwf	(_Load^(0+256)+35)
 10825  0190  3000               	movlw	0
 10826  0191  3D3C               	addwfc	((_Load+1)^(0+256)+9),w
 10827  0192  00D6               	movwf	((_Load+1)^(0+256)+35)
 10828  0193                     l7967:	
 10829                           
 10830                           ;OverLoad_B1.c: 135: }
 10831                           ;OverLoad_B1.c: 136: }
 10832                           ;OverLoad_B1.c: 137: }
 10833                           ;OverLoad_B1.c: 138: }
 10834                           ;OverLoad_B1.c: 139: }
 10835                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10836  0193  0022               	movlb	2	; select bank2
 10837  0194  0856               	movf	((_Load+1)^(0+256)+35),w
 10838  0195  0252               	subwf	((_Load+1)^(0+256)+31),w
 10839  0196  1D03               	skipz
 10840  0197  299A               	goto	u8195
 10841  0198  0855               	movf	(_Load^(0+256)+35),w
 10842  0199  0251               	subwf	(_Load^(0+256)+31),w
 10843  019A                     u8195:	
 10844  019A  1C03               	skipc
 10845  019B  29B9               	goto	l7983
 10846                           
 10847                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10848  019C  0020               	movlb	0	; select bank0
 10849  019D  082F               	movf	Load_Main@LightsCount,w
 10850  019E  3A01               	xorlw	1
 10851  019F  1903               	skipnz
 10852  01A0  29A3               	goto	l7973
 10853  01A1  3003               	movlw	3
 10854  01A2  29A4               	goto	L7
 10855  01A3                     l7973:	
 10856  01A3  3002               	movlw	2
 10857  01A4                     L7:	
 10858  01A4  00AA               	movwf	_Load_Main$3939
 10859  01A5  3000               	movlw	0
 10860  01A6  00AB               	movwf	_Load_Main$3939+1
 10861  01A7  082A               	movf	_Load_Main$3939,w
 10862  01A8  00A8               	movwf	??_Load_Main
 10863  01A9  0828               	movf	??_Load_Main,w
 10864  01AA  00AD               	movwf	Load_Main@ErrorCountValue
 10865                           
 10866                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10867  01AB  3001               	movlw	1
 10868  01AC  00A8               	movwf	??_Load_Main
 10869  01AD  0828               	movf	??_Load_Main,w
 10870  01AE  0022               	movlb	2	; select bank2
 10871  01AF  07D8               	addwf	(_Load^(0+256)+38),f
 10872                           
 10873                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10874  01B0  0858               	movf	(_Load^(0+256)+38),w
 10875  01B1  0020               	movlb	0	; select bank0
 10876  01B2  022D               	subwf	Load_Main@ErrorCountValue,w
 10877  01B3  1803               	skipnc
 10878  01B4  0008               	return
 10879                           
 10880                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10881  01B5  0022               	movlb	2	; select bank2
 10882  01B6  01D8               	clrf	(_Load^(0+256)+38)
 10883                           
 10884                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10885  01B7  16B2               	bsf	_Load^(0+256),5
 10886                           
 10887                           ;OverLoad_B1.c: 168: }
 10888                           ;OverLoad_B1.c: 169: } else {
 10889  01B8  0008               	return
 10890  01B9                     l7983:	
 10891                           
 10892                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10893  01B9  01D8               	clrf	(_Load^(0+256)+38)
 10894                           
 10895                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10896  01BA  1DB2               	btfss	_Load^(0+256),3
 10897  01BB  0008               	return
 10898                           
 10899                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10900  01BC  3001               	movlw	1
 10901  01BD  0020               	movlb	0	; select bank0
 10902  01BE  00A8               	movwf	??_Load_Main
 10903  01BF  0828               	movf	??_Load_Main,w
 10904  01C0  0022               	movlb	2	; select bank2
 10905  01C1  07D9               	addwf	(_Load^(0+256)+39),f
 10906                           
 10907                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10908  01C2  3003               	movlw	3
 10909  01C3  0259               	subwf	(_Load^(0+256)+39),w
 10910  01C4  1C03               	skipc
 10911  01C5  0008               	return
 10912                           
 10913                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10914  01C6  01D9               	clrf	(_Load^(0+256)+39)
 10915                           
 10916                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10917  01C7  17B2               	bsf	_Load^(0+256),7
 10918                           
 10919                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10920  01C8  11B2               	bcf	_Load^(0+256),3
 10921                           
 10922                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10923  01C9  01D7               	clrf	(_Load^(0+256)+37)
 10924                           
 10925                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10926  01CA  0852               	movf	((_Load+1)^(0+256)+31),w
 10927  01CB  01BC               	clrf	((_Load+1)^(0+256)+9)
 10928  01CC  07BC               	addwf	((_Load+1)^(0+256)+9),f
 10929  01CD  0851               	movf	(_Load^(0+256)+31),w
 10930  01CE  01BB               	clrf	(_Load^(0+256)+9)
 10931  01CF  07BB               	addwf	(_Load^(0+256)+9),f
 10932                           
 10933                           ;OverLoad_B1.c: 182: }
 10934                           ;OverLoad_B1.c: 183: }
 10935                           ;OverLoad_B1.c: 206: }
 10936                           ;OverLoad_B1.c: 207: }
 10937                           ;OverLoad_B1.c: 208: }
 10938                           ;OverLoad_B1.c: 209: } else {
 10939  01D0  0008               	return
 10940  01D1                     l1631:	
 10941                           
 10942                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 10943  01D1  1632               	bsf	_Load^(0+256),4
 10944                           
 10945                           ;OverLoad_B1.c: 211: }
 10946                           ;OverLoad_B1.c: 212: } else {
 10947  01D2  0008               	return
 10948  01D3                     l1630:	
 10949                           
 10950                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 10951  01D3  1D32               	btfss	_Load^(0+256),2
 10952  01D4  29E6               	goto	l8019
 10953                           
 10954                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 10955  01D5  1132               	bcf	_Load^(0+256),2
 10956                           
 10957                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 10958  01D6  1232               	bcf	_Load^(0+256),4
 10959                           
 10960                           ;OverLoad_B1.c: 218: Load.Time = 0;
 10961  01D7  01B3               	clrf	(_Load^(0+256)+1)
 10962  01D8  01B4               	clrf	((_Load+1)^(0+256)+1)
 10963                           
 10964                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 10965  01D9  319F  276B  3180   	fcall	_setLoad_AH_AL_Restore
 10966                           
 10967                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 10968  01DC  0022               	movlb	2	; select bank2
 10969  01DD  01D8               	clrf	(_Load^(0+256)+38)
 10970                           
 10971                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 10972  01DE  01D9               	clrf	(_Load^(0+256)+39)
 10973                           
 10974                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 10975  01DF  01B7               	clrf	(_Load^(0+256)+5)
 10976  01E0  01B8               	clrf	((_Load+1)^(0+256)+5)
 10977                           
 10978                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 10979  01E1  01B9               	clrf	(_Load^(0+256)+7)
 10980  01E2  01BA               	clrf	((_Load+1)^(0+256)+7)
 10981                           
 10982                           ;OverLoad_B1.c: 231: Load.Run = 0;
 10983  01E3  11B2               	bcf	_Load^(0+256),3
 10984                           
 10985                           ;OverLoad_B1.c: 232: Load.Count = 0;
 10986  01E4  01D7               	clrf	(_Load^(0+256)+37)
 10987                           
 10988                           ;OverLoad_B1.c: 233: Load.OK = 0;
 10989  01E5  13B2               	bcf	_Load^(0+256),7
 10990  01E6                     l8019:	
 10991                           
 10992                           ;OverLoad_B1.c: 255: }
 10993                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 10994  01E6  1EB2               	btfss	_Load^(0+256),5
 10995  01E7  0008               	return
 10996                           
 10997                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 10998  01E8  3001               	movlw	1
 10999  01E9  07B5               	addwf	(_Load^(0+256)+3),f
 11000  01EA  3000               	movlw	0
 11001  01EB  3DB6               	addwfc	((_Load+1)^(0+256)+3),f
 11002                           
 11003                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11004  01EC  3001               	movlw	1
 11005  01ED  0236               	subwf	((_Load+1)^(0+256)+3),w
 11006  01EE  30F4               	movlw	244
 11007  01EF  1903               	skipnz
 11008  01F0  0235               	subwf	(_Load^(0+256)+3),w
 11009  01F1  1C03               	skipc
 11010  01F2  0008               	return
 11011                           
 11012                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11013  01F3  01B5               	clrf	(_Load^(0+256)+3)
 11014  01F4  01B6               	clrf	((_Load+1)^(0+256)+3)
 11015                           
 11016                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11017  01F5  12B2               	bcf	_Load^(0+256),5
 11018                           
 11019                           ;OverLoad_B1.c: 261: }
 11020                           ;OverLoad_B1.c: 262: }
 11021                           ;OverLoad_B1.c: 263: }
 11022                           ;OverLoad_B1.c: 264: } else {
 11023  01F6  0008               	return
 11024  01F7                     l1620:	
 11025                           
 11026                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11027  01F7  0021               	movlb	1	; select bank1
 11028  01F8  1C2E               	btfss	_myMain^(0+128),0
 11029  01F9  0008               	return
 11030                           
 11031                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11032  01FA  0022               	movlb	2	; select bank2
 11033  01FB  1432               	bsf	_Load^(0+256),0
 11034  01FC  0008               	return
 11035  01FD                     __end_of_Load_Main:	
 11036                           
 11037                           	psect	text63
 11038  1BF3                     __ptext63:	
 11039 ;; *************** function _getMain_Lights_Count *****************
 11040 ;; Defined at:
 11041 ;;		line 459 in file "../src/Main_B1.c"
 11042 ;; Parameters:    Size  Location     Type
 11043 ;;		None
 11044 ;; Auto vars:     Size  Location     Type
 11045 ;;  status1         1    1[BANK0 ] unsigned char 
 11046 ;;  count           1    0[BANK0 ] unsigned char 
 11047 ;; Return value:  Size  Location     Type
 11048 ;;                  1    wreg      unsigned char 
 11049 ;; Registers used:
 11050 ;;		wreg, status,2
 11051 ;; Tracked objects:
 11052 ;;		On entry : 0/0
 11053 ;;		On exit  : 0/0
 11054 ;;		Unchanged: 0/0
 11055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11059 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11060 ;;Total ram usage:        2 bytes
 11061 ;; Hardware stack levels used:    1
 11062 ;; Hardware stack levels required when called:    5
 11063 ;; This function calls:
 11064 ;;		Nothing
 11065 ;; This function is called by:
 11066 ;;		_Load_Main
 11067 ;; This function uses a non-reentrant model
 11068 ;;
 11069                           
 11070                           
 11071                           ;psect for function _getMain_Lights_Count
 11072  1BF3                     _getMain_Lights_Count:	
 11073                           
 11074                           ;Main_B1.c: 460: char count = 0;
 11075                           
 11076                           ;incstack = 0
 11077                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11078  1BF3  0020               	movlb	0	; select bank0
 11079  1BF4  01A0               	clrf	getMain_Lights_Count@count
 11080                           
 11081                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11082  1BF5  3000               	movlw	0
 11083  1BF6  0021               	movlb	1	; select bank1
 11084  1BF7  19C7               	btfsc	_DimmerIntr1^(0+128),3
 11085  1BF8  3001               	movlw	1
 11086  1BF9  0020               	movlb	0	; select bank0
 11087  1BFA  00A1               	movwf	getMain_Lights_Count@status1
 11088                           
 11089                           ;Main_B1.c: 487: return count = status1;
 11090  1BFB  0821               	movf	getMain_Lights_Count@status1,w
 11091  1BFC  00A0               	movwf	getMain_Lights_Count@count
 11092  1BFD  0008               	return
 11093  1BFE                     __end_of_getMain_Lights_Count:	
 11094                           
 11095                           	psect	text64
 11096  07F8                     __ptext64:	
 11097 ;; *************** function _getDimmer_Load_Status *****************
 11098 ;; Defined at:
 11099 ;;		line 1148 in file "../src/Dimmer_B1.c"
 11100 ;; Parameters:    Size  Location     Type
 11101 ;;		None
 11102 ;; Auto vars:     Size  Location     Type
 11103 ;;  status          1    0[BANK0 ] unsigned char 
 11104 ;; Return value:  Size  Location     Type
 11105 ;;                  1    wreg      unsigned char 
 11106 ;; Registers used:
 11107 ;;		wreg, status,2
 11108 ;; Tracked objects:
 11109 ;;		On entry : 0/0
 11110 ;;		On exit  : 0/0
 11111 ;;		Unchanged: 0/0
 11112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;Total ram usage:        1 bytes
 11118 ;; Hardware stack levels used:    1
 11119 ;; Hardware stack levels required when called:    5
 11120 ;; This function calls:
 11121 ;;		Nothing
 11122 ;; This function is called by:
 11123 ;;		_Load_Main
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127                           
 11128                           ;psect for function _getDimmer_Load_Status
 11129  07F8                     _getDimmer_Load_Status:	
 11130                           
 11131                           ;Dimmer_B1.c: 1149: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11132                           
 11133                           ;incstack = 0
 11134                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11135  07F8  3000               	movlw	0
 11136  07F9  0022               	movlb	2	; select bank2
 11137  07FA  1920               	btfsc	_Dimmer^(0+256),2
 11138  07FB  3001               	movlw	1
 11139  07FC  0020               	movlb	0	; select bank0
 11140  07FD  00A0               	movwf	getDimmer_Load_Status@status
 11141                           
 11142                           ;Dimmer_B1.c: 1150: return status;
 11143  07FE  0820               	movf	getDimmer_Load_Status@status,w
 11144  07FF  0008               	return
 11145  0800                     __end_of_getDimmer_Load_Status:	
 11146                           
 11147                           	psect	text65
 11148  1BBB                     __ptext65:	
 11149 ;; *************** function _getDimmer_LoadGO *****************
 11150 ;; Defined at:
 11151 ;;		line 1142 in file "../src/Dimmer_B1.c"
 11152 ;; Parameters:    Size  Location     Type
 11153 ;;		None
 11154 ;; Auto vars:     Size  Location     Type
 11155 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11156 ;; Return value:  Size  Location     Type
 11157 ;;                  1    wreg      unsigned char 
 11158 ;; Registers used:
 11159 ;;		wreg, status,2
 11160 ;; Tracked objects:
 11161 ;;		On entry : 0/0
 11162 ;;		On exit  : 0/0
 11163 ;;		Unchanged: 0/0
 11164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11169 ;;Total ram usage:        1 bytes
 11170 ;; Hardware stack levels used:    1
 11171 ;; Hardware stack levels required when called:    5
 11172 ;; This function calls:
 11173 ;;		Nothing
 11174 ;; This function is called by:
 11175 ;;		_Load_Main
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           
 11180                           ;psect for function _getDimmer_LoadGO
 11181  1BBB                     _getDimmer_LoadGO:	
 11182                           
 11183                           ;Dimmer_B1.c: 1143: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11184                           
 11185                           ;incstack = 0
 11186                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11187  1BBB  3000               	movlw	0
 11188  1BBC  0022               	movlb	2	; select bank2
 11189  1BBD  18A0               	btfsc	_Dimmer^(0+256),1
 11190  1BBE  3001               	movlw	1
 11191  1BBF  0020               	movlb	0	; select bank0
 11192  1BC0  00A0               	movwf	getDimmer_LoadGO@loadgo
 11193                           
 11194                           ;Dimmer_B1.c: 1144: return loadgo;
 11195  1BC1  0820               	movf	getDimmer_LoadGO@loadgo,w
 11196  1BC2  0008               	return
 11197  1BC3                     __end_of_getDimmer_LoadGO:	
 11198                           
 11199                           	psect	text66
 11200  1DCA                     __ptext66:	
 11201 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11202 ;; Defined at:
 11203 ;;		line 277 in file "../src/Dimmer_B1.c"
 11204 ;; Parameters:    Size  Location     Type
 11205 ;;		None
 11206 ;; Auto vars:     Size  Location     Type
 11207 ;;  status          1    0[BANK0 ] unsigned char 
 11208 ;; Return value:  Size  Location     Type
 11209 ;;                  1    wreg      unsigned char 
 11210 ;; Registers used:
 11211 ;;		wreg, status,2, status,0
 11212 ;; Tracked objects:
 11213 ;;		On entry : 0/0
 11214 ;;		On exit  : 0/0
 11215 ;;		Unchanged: 0/0
 11216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;Total ram usage:        1 bytes
 11222 ;; Hardware stack levels used:    1
 11223 ;; Hardware stack levels required when called:    5
 11224 ;; This function calls:
 11225 ;;		Nothing
 11226 ;; This function is called by:
 11227 ;;		_Load_Main
 11228 ;; This function uses a non-reentrant model
 11229 ;;
 11230                           
 11231                           
 11232                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11233  1DCA                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11234                           
 11235                           ;Dimmer_B1.c: 278: char status = 0;
 11236                           
 11237                           ;incstack = 0
 11238                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11239  1DCA  0020               	movlb	0	; select bank0
 11240  1DCB  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11241                           
 11242                           ;Dimmer_B1.c: 289: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11243  1DCC  3000               	movlw	0
 11244  1DCD  0021               	movlb	1	; select bank1
 11245  1DCE  1A47               	btfsc	_DimmerIntr1^(0+128),4
 11246  1DCF  3001               	movlw	1
 11247  1DD0  0020               	movlb	0	; select bank0
 11248  1DD1  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11249                           
 11250                           ;Dimmer_B1.c: 293: if (status == 0) {
 11251  1DD2  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11252  1DD3  1D03               	skipz
 11253  1DD4  2DDB               	goto	l7063
 11254                           
 11255                           ;Dimmer_B1.c: 303: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11256  1DD5  3000               	movlw	0
 11257  1DD6  0021               	movlb	1	; select bank1
 11258  1DD7  1B47               	btfsc	_DimmerIntr1^(0+128),6
 11259  1DD8  3001               	movlw	1
 11260  1DD9  0020               	movlb	0	; select bank0
 11261  1DDA  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11262  1DDB                     l7063:	
 11263                           
 11264                           ;Dimmer_B1.c: 305: }
 11265                           ;Dimmer_B1.c: 307: return status;
 11266  1DDB  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11267  1DDC  0008               	return
 11268  1DDD                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11269                           
 11270                           	psect	text67
 11271  1FA4                     __ptext67:	
 11272 ;; *************** function ___wmul *****************
 11273 ;; Defined at:
 11274 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11275 ;; Parameters:    Size  Location     Type
 11276 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11277 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11278 ;; Auto vars:     Size  Location     Type
 11279 ;;  product         2    4[BANK0 ] unsigned int 
 11280 ;; Return value:  Size  Location     Type
 11281 ;;                  2    0[BANK0 ] unsigned int 
 11282 ;; Registers used:
 11283 ;;		wreg, status,2, status,0
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11289 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11290 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11292 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;Total ram usage:        6 bytes
 11294 ;; Hardware stack levels used:    1
 11295 ;; Hardware stack levels required when called:    5
 11296 ;; This function calls:
 11297 ;;		Nothing
 11298 ;; This function is called by:
 11299 ;;		_Load_Main
 11300 ;; This function uses a non-reentrant model
 11301 ;;
 11302                           
 11303                           
 11304                           ;psect for function ___wmul
 11305  1FA4                     ___wmul:	
 11306                           
 11307                           ;incstack = 0
 11308                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11309  1FA4  0020               	movlb	0	; select bank0
 11310  1FA5  01A4               	clrf	___wmul@product
 11311  1FA6  01A5               	clrf	___wmul@product+1
 11312  1FA7                     l7619:	
 11313  1FA7  1C20               	btfss	___wmul@multiplier,0
 11314  1FA8  2FAD               	goto	l2676
 11315  1FA9  0822               	movf	___wmul@multiplicand,w
 11316  1FAA  07A4               	addwf	___wmul@product,f
 11317  1FAB  0823               	movf	___wmul@multiplicand+1,w
 11318  1FAC  3DA5               	addwfc	___wmul@product+1,f
 11319  1FAD                     l2676:	
 11320  1FAD  3001               	movlw	1
 11321  1FAE                     u7515:	
 11322  1FAE  35A2               	lslf	___wmul@multiplicand,f
 11323  1FAF  0DA3               	rlf	___wmul@multiplicand+1,f
 11324  1FB0  0B89               	decfsz	9,f
 11325  1FB1  2FAE               	goto	u7515
 11326  1FB2  3001               	movlw	1
 11327  1FB3                     u7525:	
 11328  1FB3  36A1               	lsrf	___wmul@multiplier+1,f
 11329  1FB4  0CA0               	rrf	___wmul@multiplier,f
 11330  1FB5  0B89               	decfsz	9,f
 11331  1FB6  2FB3               	goto	u7525
 11332  1FB7  0821               	movf	___wmul@multiplier+1,w
 11333  1FB8  0420               	iorwf	___wmul@multiplier,w
 11334  1FB9  1D03               	skipz
 11335  1FBA  2FA7               	goto	l7619
 11336  1FBB  0825               	movf	___wmul@product+1,w
 11337  1FBC  01A1               	clrf	?___wmul+1
 11338  1FBD  07A1               	addwf	?___wmul+1,f
 11339  1FBE  0824               	movf	___wmul@product,w
 11340  1FBF  01A0               	clrf	?___wmul
 11341  1FC0  07A0               	addwf	?___wmul,f
 11342  1FC1  0008               	return
 11343  1FC2                     __end_of___wmul:	
 11344                           
 11345                           	psect	text68
 11346  1281                     __ptext68:	
 11347 ;; *************** function ___lwdiv *****************
 11348 ;; Defined at:
 11349 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11350 ;; Parameters:    Size  Location     Type
 11351 ;;  divisor         2    0[BANK0 ] unsigned int 
 11352 ;;  dividend        2    2[BANK0 ] unsigned int 
 11353 ;; Auto vars:     Size  Location     Type
 11354 ;;  quotient        2    5[BANK0 ] unsigned int 
 11355 ;;  counter         1    7[BANK0 ] unsigned char 
 11356 ;; Return value:  Size  Location     Type
 11357 ;;                  2    0[BANK0 ] unsigned int 
 11358 ;; Registers used:
 11359 ;;		wreg, status,2, status,0
 11360 ;; Tracked objects:
 11361 ;;		On entry : 0/0
 11362 ;;		On exit  : 0/0
 11363 ;;		Unchanged: 0/0
 11364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11365 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;Total ram usage:        8 bytes
 11370 ;; Hardware stack levels used:    1
 11371 ;; Hardware stack levels required when called:    5
 11372 ;; This function calls:
 11373 ;;		Nothing
 11374 ;; This function is called by:
 11375 ;;		_Load_Main
 11376 ;;		_setRF_Main
 11377 ;; This function uses a non-reentrant model
 11378 ;;
 11379                           
 11380                           
 11381                           ;psect for function ___lwdiv
 11382  1281                     ___lwdiv:	
 11383                           
 11384                           ;incstack = 0
 11385                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11386  1281  0020               	movlb	0	; select bank0
 11387  1282  01A5               	clrf	___lwdiv@quotient
 11388  1283  01A6               	clrf	___lwdiv@quotient+1
 11389  1284  0821               	movf	___lwdiv@divisor+1,w
 11390  1285  0420               	iorwf	___lwdiv@divisor,w
 11391  1286  1903               	skipnz
 11392  1287  2AB1               	goto	l7013
 11393  1288  01A7               	clrf	___lwdiv@counter
 11394  1289  0AA7               	incf	___lwdiv@counter,f
 11395  128A                     l7001:	
 11396  128A  1BA1               	btfsc	___lwdiv@divisor+1,7
 11397  128B  2A96               	goto	l7003
 11398  128C  3001               	movlw	1
 11399  128D                     u6435:	
 11400  128D  35A0               	lslf	___lwdiv@divisor,f
 11401  128E  0DA1               	rlf	___lwdiv@divisor+1,f
 11402  128F  0B89               	decfsz	9,f
 11403  1290  2A8D               	goto	u6435
 11404  1291  3001               	movlw	1
 11405  1292  00A4               	movwf	??___lwdiv
 11406  1293  0824               	movf	??___lwdiv,w
 11407  1294  07A7               	addwf	___lwdiv@counter,f
 11408  1295  2A8A               	goto	l7001
 11409  1296                     l7003:	
 11410  1296  3001               	movlw	1
 11411  1297                     u6455:	
 11412  1297  35A5               	lslf	___lwdiv@quotient,f
 11413  1298  0DA6               	rlf	___lwdiv@quotient+1,f
 11414  1299  0B89               	decfsz	9,f
 11415  129A  2A97               	goto	u6455
 11416  129B  0821               	movf	___lwdiv@divisor+1,w
 11417  129C  0223               	subwf	___lwdiv@dividend+1,w
 11418  129D  1D03               	skipz
 11419  129E  2AA1               	goto	u6465
 11420  129F  0820               	movf	___lwdiv@divisor,w
 11421  12A0  0222               	subwf	___lwdiv@dividend,w
 11422  12A1                     u6465:	
 11423  12A1  1C03               	skipc
 11424  12A2  2AA8               	goto	l7009
 11425  12A3  0820               	movf	___lwdiv@divisor,w
 11426  12A4  02A2               	subwf	___lwdiv@dividend,f
 11427  12A5  0821               	movf	___lwdiv@divisor+1,w
 11428  12A6  3BA3               	subwfb	___lwdiv@dividend+1,f
 11429  12A7  1425               	bsf	___lwdiv@quotient,0
 11430  12A8                     l7009:	
 11431  12A8  3001               	movlw	1
 11432  12A9                     u6475:	
 11433  12A9  36A1               	lsrf	___lwdiv@divisor+1,f
 11434  12AA  0CA0               	rrf	___lwdiv@divisor,f
 11435  12AB  0B89               	decfsz	9,f
 11436  12AC  2AA9               	goto	u6475
 11437  12AD  3001               	movlw	1
 11438  12AE  02A7               	subwf	___lwdiv@counter,f
 11439  12AF  1D03               	btfss	3,2
 11440  12B0  2A96               	goto	l7003
 11441  12B1                     l7013:	
 11442  12B1  0826               	movf	___lwdiv@quotient+1,w
 11443  12B2  01A1               	clrf	?___lwdiv+1
 11444  12B3  07A1               	addwf	?___lwdiv+1,f
 11445  12B4  0825               	movf	___lwdiv@quotient,w
 11446  12B5  01A0               	clrf	?___lwdiv
 11447  12B6  07A0               	addwf	?___lwdiv,f
 11448  12B7  0008               	return
 11449  12B8                     __end_of___lwdiv:	
 11450                           
 11451                           	psect	text69
 11452  1B50                     __ptext69:	
 11453 ;; *************** function _Load_Initialization *****************
 11454 ;; Defined at:
 11455 ;;		line 9 in file "../src/OverLoad_B1.c"
 11456 ;; Parameters:    Size  Location     Type
 11457 ;;		None
 11458 ;; Auto vars:     Size  Location     Type
 11459 ;;		None
 11460 ;; Return value:  Size  Location     Type
 11461 ;;		None               void
 11462 ;; Registers used:
 11463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11464 ;; Tracked objects:
 11465 ;;		On entry : 0/0
 11466 ;;		On exit  : 0/0
 11467 ;;		Unchanged: 0/0
 11468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;Total ram usage:        0 bytes
 11474 ;; Hardware stack levels used:    1
 11475 ;; Hardware stack levels required when called:    6
 11476 ;; This function calls:
 11477 ;;		_setLoad_AH_AL_Restore
 11478 ;; This function is called by:
 11479 ;;		_main
 11480 ;; This function uses a non-reentrant model
 11481 ;;
 11482                           
 11483                           
 11484                           ;psect for function _Load_Initialization
 11485  1B50                     _Load_Initialization:	
 11486                           
 11487                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11488                           
 11489                           ;incstack = 0
 11490                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11491  1B50  319F  276B         	fcall	_setLoad_AH_AL_Restore
 11492  1B52  0008               	return
 11493  1B53                     __end_of_Load_Initialization:	
 11494                           
 11495                           	psect	text70
 11496  1F6B                     __ptext70:	
 11497 ;; *************** function _setLoad_AH_AL_Restore *****************
 11498 ;; Defined at:
 11499 ;;		line 292 in file "../src/OverLoad_B1.c"
 11500 ;; Parameters:    Size  Location     Type
 11501 ;;		None
 11502 ;; Auto vars:     Size  Location     Type
 11503 ;;  i               1    1[BANK0 ] unsigned char 
 11504 ;; Return value:  Size  Location     Type
 11505 ;;		None               void
 11506 ;; Registers used:
 11507 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11508 ;; Tracked objects:
 11509 ;;		On entry : 0/0
 11510 ;;		On exit  : 0/0
 11511 ;;		Unchanged: 0/0
 11512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11516 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11517 ;;Total ram usage:        2 bytes
 11518 ;; Hardware stack levels used:    1
 11519 ;; Hardware stack levels required when called:    5
 11520 ;; This function calls:
 11521 ;;		Nothing
 11522 ;; This function is called by:
 11523 ;;		_Load_Initialization
 11524 ;;		_Load_Main
 11525 ;; This function uses a non-reentrant model
 11526 ;;
 11527                           
 11528                           
 11529                           ;psect for function _setLoad_AH_AL_Restore
 11530  1F6B                     _setLoad_AH_AL_Restore:	
 11531                           
 11532                           ;OverLoad_B1.c: 293: char i;
 11533                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11534                           
 11535                           ;incstack = 0
 11536                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11537  1F6B  0020               	movlb	0	; select bank0
 11538  1F6C  01A1               	clrf	setLoad_AH_AL_Restore@i
 11539  1F6D                     L8:	
 11540  1F6D  3005               	movlw	5
 11541  1F6E  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11542  1F6F  1803               	btfsc	3,0
 11543  1F70  0008               	return
 11544                           
 11545                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11546  1F71  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11547  1F72  3E3D               	addlw	(_Load+11)& (0+255)
 11548  1F73  0086               	movwf	6
 11549  1F74  3001               	movlw	1	; select bank2/3
 11550  1F75  0087               	movwf	7
 11551  1F76  3000               	movlw	0
 11552  1F77  3FC0               	movwi [0]fsr1
 11553  1F78  3FC1               	movwi [1]fsr1
 11554                           
 11555                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11556  1F79  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11557  1F7A  3E47               	addlw	(_Load+21)& (0+255)
 11558  1F7B  0086               	movwf	6
 11559  1F7C  3001               	movlw	1	; select bank2/3
 11560  1F7D  0087               	movwf	7
 11561  1F7E  30FF               	movlw	255
 11562  1F7F  3FC0               	movwi [0]fsr1
 11563  1F80  30FF               	movlw	255
 11564  1F81  3FC1               	movwi [1]fsr1
 11565  1F82  3001               	movlw	1
 11566  1F83  00A0               	movwf	??_setLoad_AH_AL_Restore
 11567  1F84  0820               	movf	??_setLoad_AH_AL_Restore,w
 11568  1F85  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11569  1F86  2F6D               	goto	L8
 11570  1F87                     __end_of_setLoad_AH_AL_Restore:	
 11571                           
 11572                           	psect	text71
 11573  1B6B                     __ptext71:	
 11574 ;; *************** function _LED_Main *****************
 11575 ;; Defined at:
 11576 ;;		line 47 in file "../src/LED_B1.c"
 11577 ;; Parameters:    Size  Location     Type
 11578 ;;		None
 11579 ;; Auto vars:     Size  Location     Type
 11580 ;;		None
 11581 ;; Return value:  Size  Location     Type
 11582 ;;		None               void
 11583 ;; Registers used:
 11584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11585 ;; Tracked objects:
 11586 ;;		On entry : 0/0
 11587 ;;		On exit  : 0/0
 11588 ;;		Unchanged: 0/0
 11589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;Total ram usage:        0 bytes
 11595 ;; Hardware stack levels used:    1
 11596 ;; Hardware stack levels required when called:    7
 11597 ;; This function calls:
 11598 ;;		_setLED_Main
 11599 ;; This function is called by:
 11600 ;;		_main
 11601 ;; This function uses a non-reentrant model
 11602 ;;
 11603                           
 11604                           
 11605                           ;psect for function _LED_Main
 11606  1B6B                     _LED_Main:	
 11607                           
 11608                           ;LED_B1.c: 67: setLED_Main(99);
 11609                           
 11610                           ;incstack = 0
 11611                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11612  1B6B  3063               	movlw	99
 11613  1B6C  3192  224B         	fcall	_setLED_Main
 11614  1B6E  0008               	return
 11615  1B6F                     __end_of_LED_Main:	
 11616                           
 11617                           	psect	text72
 11618  124B                     __ptext72:	
 11619 ;; *************** function _setLED_Main *****************
 11620 ;; Defined at:
 11621 ;;		line 229 in file "../src/LED_B1.c"
 11622 ;; Parameters:    Size  Location     Type
 11623 ;;  led             1    wreg     unsigned char 
 11624 ;; Auto vars:     Size  Location     Type
 11625 ;;  led             1    4[BANK0 ] unsigned char 
 11626 ;; Return value:  Size  Location     Type
 11627 ;;		None               void
 11628 ;; Registers used:
 11629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11630 ;; Tracked objects:
 11631 ;;		On entry : 0/0
 11632 ;;		On exit  : 0/0
 11633 ;;		Unchanged: 0/0
 11634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11637 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11638 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;Total ram usage:        3 bytes
 11640 ;; Hardware stack levels used:    1
 11641 ;; Hardware stack levels required when called:    6
 11642 ;; This function calls:
 11643 ;;		_LedPointSelect
 11644 ;; This function is called by:
 11645 ;;		_LED_Main
 11646 ;; This function uses a non-reentrant model
 11647 ;;
 11648                           
 11649                           
 11650                           ;psect for function _setLED_Main
 11651  124B                     _setLED_Main:	
 11652                           
 11653                           ;incstack = 0
 11654                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11655                           ;setLED_Main@led stored from wreg
 11656  124B  0020               	movlb	0	; select bank0
 11657  124C  00A4               	movwf	setLED_Main@led
 11658                           
 11659                           ;LED_B1.c: 230: LedPointSelect(led);
 11660  124D  0824               	movf	setLED_Main@led,w
 11661  124E  319C  2450  3192   	fcall	_LedPointSelect
 11662                           
 11663                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11664  1251  0021               	movlb	1	; select bank1
 11665  1252  0856               	movf	_LED^(0+128),w
 11666  1253  0086               	movwf	6
 11667  1254  3001               	movlw	1	; select bank2/3
 11668  1255  0087               	movwf	7
 11669  1256  1C81               	btfss	1,1
 11670  1257  0008               	return
 11671                           
 11672                           ;LED_B1.c: 232: LED->Time++;
 11673  1258  0A56               	incf	_LED^(0+128),w
 11674  1259  0086               	movwf	6
 11675  125A  3001               	movlw	1	; select bank2/3
 11676  125B  0087               	movwf	7
 11677  125C  3001               	movlw	1
 11678  125D  0781               	addwf	1,f
 11679  125E  3141               	addfsr 1,1
 11680  125F  1803               	skipnc
 11681  1260  0A81               	incf	1,f
 11682                           
 11683                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11684  1261  0A56               	incf	_LED^(0+128),w
 11685  1262  0086               	movwf	6
 11686  1263  3001               	movlw	1	; select bank2/3
 11687  1264  0087               	movwf	7
 11688  1265  3F40               	moviw [0]fsr1
 11689  1266  0020               	movlb	0	; select bank0
 11690  1267  00A2               	movwf	??_setLED_Main
 11691  1268  3F41               	moviw [1]fsr1
 11692  1269  00A3               	movwf	??_setLED_Main+1
 11693  126A  3000               	movlw	0
 11694  126B  0223               	subwf	??_setLED_Main+1,w
 11695  126C  3019               	movlw	25
 11696  126D  1903               	skipnz
 11697  126E  0222               	subwf	??_setLED_Main,w
 11698  126F  1C03               	skipc
 11699  1270  0008               	return
 11700                           
 11701                           ;LED_B1.c: 234: LED->Time = 0;
 11702  1271  0021               	movlb	1	; select bank1
 11703  1272  0A56               	incf	_LED^(0+128),w
 11704  1273  0086               	movwf	6
 11705  1274  3001               	movlw	1	; select bank2/3
 11706  1275  0087               	movwf	7
 11707  1276  3000               	movlw	0
 11708  1277  3FC0               	movwi [0]fsr1
 11709  1278  3FC1               	movwi [1]fsr1
 11710                           
 11711                           ;LED_B1.c: 252: if (led == 99) {
 11712  1279  0020               	movlb	0	; select bank0
 11713  127A  0824               	movf	setLED_Main@led,w
 11714  127B  3A63               	xorlw	99
 11715  127C  1D03               	skipz
 11716  127D  0008               	return
 11717                           
 11718                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11719  127E  3020               	movlw	32
 11720  127F  068D               	xorwf	13,f
 11721  1280  0008               	return
 11722  1281                     __end_of_setLED_Main:	
 11723                           
 11724                           	psect	text73
 11725  1B67                     __ptext73:	
 11726 ;; *************** function _LED_Initialization *****************
 11727 ;; Defined at:
 11728 ;;		line 31 in file "../src/LED_B1.c"
 11729 ;; Parameters:    Size  Location     Type
 11730 ;;		None
 11731 ;; Auto vars:     Size  Location     Type
 11732 ;;		None
 11733 ;; Return value:  Size  Location     Type
 11734 ;;		None               void
 11735 ;; Registers used:
 11736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11737 ;; Tracked objects:
 11738 ;;		On entry : 0/0
 11739 ;;		On exit  : 0/0
 11740 ;;		Unchanged: 0/0
 11741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11746 ;;Total ram usage:        0 bytes
 11747 ;; Hardware stack levels used:    1
 11748 ;; Hardware stack levels required when called:    8
 11749 ;; This function calls:
 11750 ;;		_setLED_Initialization
 11751 ;; This function is called by:
 11752 ;;		_main
 11753 ;; This function uses a non-reentrant model
 11754 ;;
 11755                           
 11756                           
 11757                           ;psect for function _LED_Initialization
 11758  1B67                     _LED_Initialization:	
 11759                           
 11760                           ;LED_B1.c: 42: setLED_Initialization(99);
 11761                           
 11762                           ;incstack = 0
 11763                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11764  1B67  3063               	movlw	99
 11765  1B68  319D  256E         	fcall	_setLED_Initialization
 11766  1B6A  0008               	return
 11767  1B6B                     __end_of_LED_Initialization:	
 11768                           
 11769                           	psect	text74
 11770  1D6E                     __ptext74:	
 11771 ;; *************** function _setLED_Initialization *****************
 11772 ;; Defined at:
 11773 ;;		line 74 in file "../src/LED_B1.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;  led             1    wreg     unsigned char 
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;  led             1    4[BANK0 ] unsigned char 
 11778 ;; Return value:  Size  Location     Type
 11779 ;;		None               void
 11780 ;; Registers used:
 11781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;Total ram usage:        1 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:    7
 11794 ;; This function calls:
 11795 ;;		_LedPointSelect
 11796 ;;		_setLED
 11797 ;; This function is called by:
 11798 ;;		_LED_Initialization
 11799 ;; This function uses a non-reentrant model
 11800 ;;
 11801                           
 11802                           
 11803                           ;psect for function _setLED_Initialization
 11804  1D6E                     _setLED_Initialization:	
 11805                           
 11806                           ;incstack = 0
 11807                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11808                           ;setLED_Initialization@led stored from wreg
 11809  1D6E  0020               	movlb	0	; select bank0
 11810  1D6F  00A4               	movwf	setLED_Initialization@led
 11811                           
 11812                           ;LED_B1.c: 75: LedPointSelect(led);
 11813  1D70  0824               	movf	setLED_Initialization@led,w
 11814  1D71  319C  2450  319D   	fcall	_LedPointSelect
 11815                           
 11816                           ;LED_B1.c: 76: LED->Enable = 1;
 11817  1D74  0021               	movlb	1	; select bank1
 11818  1D75  0856               	movf	_LED^(0+128),w
 11819  1D76  0086               	movwf	6
 11820  1D77  3001               	movlw	1	; select bank2/3
 11821  1D78  0087               	movwf	7
 11822  1D79  1401               	bsf	1,0
 11823                           
 11824                           ;LED_B1.c: 77: setLED(led, 0);
 11825  1D7A  0020               	movlb	0	; select bank0
 11826  1D7B  01A2               	clrf	setLED@command
 11827  1D7C  0824               	movf	setLED_Initialization@led,w
 11828  1D7D  3192  22F1         	fcall	_setLED
 11829  1D7F  0008               	return
 11830  1D80                     __end_of_setLED_Initialization:	
 11831                           
 11832                           	psect	text75
 11833  1422                     __ptext75:	
 11834 ;; *************** function _Flash_Memory_Main *****************
 11835 ;; Defined at:
 11836 ;;		line 974 in file "../src/MCU_B1.c"
 11837 ;; Parameters:    Size  Location     Type
 11838 ;;		None
 11839 ;; Auto vars:     Size  Location     Type
 11840 ;;  key_Status      1    7[BANK0 ] unsigned char 
 11841 ;; Return value:  Size  Location     Type
 11842 ;;		None               void
 11843 ;; Registers used:
 11844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11845 ;; Tracked objects:
 11846 ;;		On entry : 0/0
 11847 ;;		On exit  : 0/0
 11848 ;;		Unchanged: 0/0
 11849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11853 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;Total ram usage:        3 bytes
 11855 ;; Hardware stack levels used:    1
 11856 ;; Hardware stack levels required when called:    8
 11857 ;; This function calls:
 11858 ;;		_Flash_Memory_Modify
 11859 ;;		_getAll_Sw_KeyStatus
 11860 ;;		_getMain_All_LightsStatus
 11861 ;; This function is called by:
 11862 ;;		_main
 11863 ;; This function uses a non-reentrant model
 11864 ;;
 11865                           
 11866                           
 11867                           ;psect for function _Flash_Memory_Main
 11868  1422                     _Flash_Memory_Main:	
 11869                           
 11870                           ;MCU_B1.c: 975: char key_Status = 0;
 11871                           
 11872                           ;incstack = 0
 11873                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11874  1422  0020               	movlb	0	; select bank0
 11875  1423  01A7               	clrf	Flash_Memory_Main@key_Status
 11876                           
 11877                           ;MCU_B1.c: 977: key_Status = getAll_Sw_KeyStatus();
 11878  1424  319D  2506  3194   	fcall	_getAll_Sw_KeyStatus
 11879  1427  0020               	movlb	0	; select bank0
 11880  1428  00A6               	movwf	??_Flash_Memory_Main
 11881  1429  0826               	movf	??_Flash_Memory_Main,w
 11882  142A  00A7               	movwf	Flash_Memory_Main@key_Status
 11883                           
 11884                           ;MCU_B1.c: 979: if (Memory.Modify == 1) {
 11885  142B  0023               	movlb	3	; select bank3
 11886  142C  1C62               	btfss	(_Memory^(0+384)+36),0
 11887  142D  0008               	return
 11888                           
 11889                           ;MCU_B1.c: 980: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 11890  142E  0020               	movlb	0	; select bank0
 11891  142F  01A8               	clrf	_Flash_Memory_Main$3112
 11892  1430  319B  23DE  3194   	fcall	_getMain_All_LightsStatus
 11893  1433  3800               	iorlw	0
 11894  1434  1D03               	skipz
 11895  1435  2C3C               	goto	l7741
 11896  1436  0020               	movlb	0	; select bank0
 11897  1437  08A7               	movf	Flash_Memory_Main@key_Status,f
 11898  1438  1D03               	skipz
 11899  1439  2C3C               	goto	l7741
 11900  143A  01A8               	clrf	_Flash_Memory_Main$3112
 11901  143B  0AA8               	incf	_Flash_Memory_Main$3112,f
 11902  143C                     l7741:	
 11903  143C  0020               	movlb	0	; select bank0
 11904  143D  0828               	movf	_Flash_Memory_Main$3112,w
 11905  143E  0023               	movlb	3	; select bank3
 11906  143F  10E2               	bcf	(_Memory^(0+384)+36),1
 11907  1440  1D03               	skipz
 11908  1441  14E2               	bsf	(_Memory^(0+384)+36),1
 11909                           
 11910                           ;MCU_B1.c: 981: if (Memory.GO == 1) {
 11911  1442  1CE2               	btfss	(_Memory^(0+384)+36),1
 11912  1443  2C5D               	goto	l1242
 11913                           
 11914                           ;MCU_B1.c: 982: Memory.Runtime = 1;
 11915  1444  15E2               	bsf	(_Memory^(0+384)+36),3
 11916                           
 11917                           ;MCU_B1.c: 983: Memory.Time++;
 11918  1445  3001               	movlw	1
 11919  1446  07E0               	addwf	(_Memory^(0+384)+34),f
 11920  1447  3000               	movlw	0
 11921  1448  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11922                           
 11923                           ;MCU_B1.c: 984: if (Memory.Time == (200 / 20)) {
 11924  1449  3022               	movlw	34
 11925  144A  3EBE               	addlw	_Memory& (0+255)
 11926  144B  0086               	movwf	6
 11927  144C  3001               	movlw	1	; select bank3/4
 11928  144D  0087               	movwf	7
 11929  144E  3F40               	moviw [0]fsr1
 11930  144F  3A0A               	xorlw	10
 11931  1450  1D03               	skipz
 11932  1451  2C54               	goto	u7755
 11933  1452  3F41               	moviw [1]fsr1
 11934  1453  3A00               	xorlw	0
 11935  1454                     u7755:	
 11936  1454  1D03               	skipz
 11937  1455  0008               	return
 11938                           
 11939                           ;MCU_B1.c: 985: Memory.Time = 0;
 11940  1456  01E0               	clrf	(_Memory^(0+384)+34)
 11941  1457  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11942                           
 11943                           ;MCU_B1.c: 986: Memory.Modify = 0;
 11944  1458  1062               	bcf	(_Memory^(0+384)+36),0
 11945                           
 11946                           ;MCU_B1.c: 987: Memory.GO = 0;
 11947  1459  10E2               	bcf	(_Memory^(0+384)+36),1
 11948                           
 11949                           ;MCU_B1.c: 988: Flash_Memory_Modify();
 11950  145A  318B  239E         	fcall	_Flash_Memory_Modify
 11951                           
 11952                           ;MCU_B1.c: 989: }
 11953                           ;MCU_B1.c: 990: } else {
 11954  145C  0008               	return
 11955  145D                     l1242:	
 11956                           
 11957                           ;MCU_B1.c: 991: if (Memory.Runtime == 1) {
 11958  145D  1DE2               	btfss	(_Memory^(0+384)+36),3
 11959  145E  0008               	return
 11960                           
 11961                           ;MCU_B1.c: 992: Memory.Runtime = 0;
 11962  145F  11E2               	bcf	(_Memory^(0+384)+36),3
 11963                           
 11964                           ;MCU_B1.c: 993: Memory.Time = 0;
 11965  1460  01E0               	clrf	(_Memory^(0+384)+34)
 11966  1461  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11967  1462  0008               	return
 11968  1463                     __end_of_Flash_Memory_Main:	
 11969                           
 11970                           	psect	text76
 11971  1D06                     __ptext76:	
 11972 ;; *************** function _getAll_Sw_KeyStatus *****************
 11973 ;; Defined at:
 11974 ;;		line 278 in file "../src/Switch_B1.c"
 11975 ;; Parameters:    Size  Location     Type
 11976 ;;		None
 11977 ;; Auto vars:     Size  Location     Type
 11978 ;;  status          1    1[BANK0 ] unsigned char 
 11979 ;; Return value:  Size  Location     Type
 11980 ;;                  1    wreg      unsigned char 
 11981 ;; Registers used:
 11982 ;;		wreg, status,2
 11983 ;; Tracked objects:
 11984 ;;		On entry : 0/0
 11985 ;;		On exit  : 0/0
 11986 ;;		Unchanged: 0/0
 11987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11992 ;;Total ram usage:        3 bytes
 11993 ;; Hardware stack levels used:    1
 11994 ;; Hardware stack levels required when called:    5
 11995 ;; This function calls:
 11996 ;;		Nothing
 11997 ;; This function is called by:
 11998 ;;		_Flash_Memory_Main
 11999 ;; This function uses a non-reentrant model
 12000 ;;
 12001                           
 12002                           
 12003                           ;psect for function _getAll_Sw_KeyStatus
 12004  1D06                     _getAll_Sw_KeyStatus:	
 12005                           
 12006                           ;Switch_B1.c: 279: char status = 0;
 12007                           
 12008                           ;incstack = 0
 12009                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12010  1D06  0020               	movlb	0	; select bank0
 12011  1D07  01A1               	clrf	getAll_Sw_KeyStatus@status
 12012                           
 12013                           ;Switch_B1.c: 302: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12014  1D08  01A2               	clrf	_getAll_Sw_KeyStatus$6371
 12015  1D09  0AA2               	incf	_getAll_Sw_KeyStatus$6371,f
 12016  1D0A  1F0C               	btfss	12,6	;volatile
 12017  1D0B  1A0C               	btfsc	12,4	;volatile
 12018  1D0C  2D11               	goto	l7305
 12019  1D0D  1C0C               	btfss	12,0	;volatile
 12020  1D0E  1B8C               	btfsc	12,7	;volatile
 12021  1D0F  2D11               	goto	l7305
 12022  1D10  01A2               	clrf	_getAll_Sw_KeyStatus$6371
 12023  1D11                     l7305:	
 12024  1D11  0822               	movf	_getAll_Sw_KeyStatus$6371,w
 12025  1D12  00A0               	movwf	??_getAll_Sw_KeyStatus
 12026  1D13  0820               	movf	??_getAll_Sw_KeyStatus,w
 12027  1D14  00A1               	movwf	getAll_Sw_KeyStatus@status
 12028                           
 12029                           ;Switch_B1.c: 306: return status;
 12030  1D15  0821               	movf	getAll_Sw_KeyStatus@status,w
 12031  1D16  0008               	return
 12032  1D17                     __end_of_getAll_Sw_KeyStatus:	
 12033                           
 12034                           	psect	text77
 12035  0B9E                     __ptext77:	
 12036 ;; *************** function _Flash_Memory_Modify *****************
 12037 ;; Defined at:
 12038 ;;		line 1051 in file "../src/MCU_B1.c"
 12039 ;; Parameters:    Size  Location     Type
 12040 ;;		None
 12041 ;; Auto vars:     Size  Location     Type
 12042 ;;  i               1    5[BANK0 ] unsigned char 
 12043 ;; Return value:  Size  Location     Type
 12044 ;;		None               void
 12045 ;; Registers used:
 12046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12047 ;; Tracked objects:
 12048 ;;		On entry : 0/0
 12049 ;;		On exit  : 0/0
 12050 ;;		Unchanged: 0/0
 12051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;Total ram usage:        2 bytes
 12057 ;; Hardware stack levels used:    1
 12058 ;; Hardware stack levels required when called:    7
 12059 ;; This function calls:
 12060 ;;		_Flash_Memory_Erasing
 12061 ;;		_Flash_Memory_Read
 12062 ;;		_Flash_Memory_Write
 12063 ;;		_setMemory_Data
 12064 ;; This function is called by:
 12065 ;;		_Flash_Memory_Main
 12066 ;; This function uses a non-reentrant model
 12067 ;;
 12068                           
 12069                           
 12070                           ;psect for function _Flash_Memory_Modify
 12071  0B9E                     _Flash_Memory_Modify:	
 12072                           
 12073                           ;MCU_B1.c: 1052: char i = 0;
 12074                           
 12075                           ;incstack = 0
 12076                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12077  0B9E  0020               	movlb	0	; select bank0
 12078  0B9F  01A5               	clrf	Flash_Memory_Modify@i
 12079                           
 12080                           ;MCU_B1.c: 1053: for (i = 0; i < 32; i++) {
 12081  0BA0  01A5               	clrf	Flash_Memory_Modify@i
 12082  0BA1  3020               	movlw	32
 12083  0BA2  0225               	subwf	Flash_Memory_Modify@i,w
 12084  0BA3  1803               	btfsc	3,0
 12085  0BA4  2BBA               	goto	l7323
 12086  0BA5                     l7317:	
 12087                           
 12088                           ;MCU_B1.c: 1054: Memory.Data[i] = Flash_Memory_Read(i);
 12089  0BA5  0825               	movf	Flash_Memory_Modify@i,w
 12090  0BA6  319E  26E6  318B   	fcall	_Flash_Memory_Read
 12091  0BA9  0020               	movlb	0	; select bank0
 12092  0BAA  00A4               	movwf	??_Flash_Memory_Modify
 12093  0BAB  0825               	movf	Flash_Memory_Modify@i,w
 12094  0BAC  3EBE               	addlw	_Memory& (0+255)
 12095  0BAD  0086               	movwf	6
 12096  0BAE  3001               	movlw	1	; select bank3/4
 12097  0BAF  0087               	movwf	7
 12098  0BB0  0824               	movf	??_Flash_Memory_Modify,w
 12099  0BB1  0081               	movwf	1
 12100  0BB2  3001               	movlw	1
 12101  0BB3  00A4               	movwf	??_Flash_Memory_Modify
 12102  0BB4  0824               	movf	??_Flash_Memory_Modify,w
 12103  0BB5  07A5               	addwf	Flash_Memory_Modify@i,f
 12104  0BB6  3020               	movlw	32
 12105  0BB7  0225               	subwf	Flash_Memory_Modify@i,w
 12106  0BB8  1C03               	skipc
 12107  0BB9  2BA5               	goto	l7317
 12108  0BBA                     l7323:	
 12109                           
 12110                           ;MCU_B1.c: 1055: }
 12111                           ;MCU_B1.c: 1056: setMemory_Data(0, product->Data[12]);
 12112  0BBA  0021               	movlb	1	; select bank1
 12113  0BBB  086F               	movf	_product^(0+128),w
 12114  0BBC  0086               	movwf	6
 12115  0BBD  3002               	movlw	2	; select bank4/5
 12116  0BBE  0087               	movwf	7
 12117  0BBF  3002               	movlw	2	; select bank4/5
 12118  0BC0  3F4C               	moviw [12]fsr1
 12119  0BC1  0020               	movlb	0	; select bank0
 12120  0BC2  00A0               	movwf	setMemory_Data@data
 12121  0BC3  3000               	movlw	0
 12122  0BC4  319C  245C  318B   	fcall	_setMemory_Data
 12123                           
 12124                           ;MCU_B1.c: 1057: setMemory_Data(1, product->Data[13]);
 12125  0BC7  0021               	movlb	1	; select bank1
 12126  0BC8  086F               	movf	_product^(0+128),w
 12127  0BC9  0086               	movwf	6
 12128  0BCA  3002               	movlw	2	; select bank4/5
 12129  0BCB  0087               	movwf	7
 12130  0BCC  3002               	movlw	2	; select bank4/5
 12131  0BCD  3F4D               	moviw [13]fsr1
 12132  0BCE  0020               	movlb	0	; select bank0
 12133  0BCF  00A0               	movwf	setMemory_Data@data
 12134  0BD0  3001               	movlw	1
 12135  0BD1  319C  245C  318B   	fcall	_setMemory_Data
 12136                           
 12137                           ;MCU_B1.c: 1058: setMemory_Data(2, product->Data[14]);
 12138  0BD4  0021               	movlb	1	; select bank1
 12139  0BD5  086F               	movf	_product^(0+128),w
 12140  0BD6  0086               	movwf	6
 12141  0BD7  3002               	movlw	2	; select bank4/5
 12142  0BD8  0087               	movwf	7
 12143  0BD9  3002               	movlw	2	; select bank4/5
 12144  0BDA  3F4E               	moviw [14]fsr1
 12145  0BDB  0020               	movlb	0	; select bank0
 12146  0BDC  00A0               	movwf	setMemory_Data@data
 12147  0BDD  3002               	movlw	2
 12148  0BDE  319C  245C  318B   	fcall	_setMemory_Data
 12149                           
 12150                           ;MCU_B1.c: 1060: setMemory_Data(3, product->Data[21]);
 12151  0BE1  0021               	movlb	1	; select bank1
 12152  0BE2  086F               	movf	_product^(0+128),w
 12153  0BE3  0086               	movwf	6
 12154  0BE4  3002               	movlw	2	; select bank4/5
 12155  0BE5  0087               	movwf	7
 12156  0BE6  3002               	movlw	2	; select bank4/5
 12157  0BE7  3F55               	moviw [21]fsr1
 12158  0BE8  0020               	movlb	0	; select bank0
 12159  0BE9  00A0               	movwf	setMemory_Data@data
 12160  0BEA  3003               	movlw	3
 12161  0BEB  319C  245C  318B   	fcall	_setMemory_Data
 12162                           
 12163                           ;MCU_B1.c: 1061: setMemory_Data(4, product->Data[22]);
 12164  0BEE  0021               	movlb	1	; select bank1
 12165  0BEF  086F               	movf	_product^(0+128),w
 12166  0BF0  0086               	movwf	6
 12167  0BF1  3002               	movlw	2	; select bank4/5
 12168  0BF2  0087               	movwf	7
 12169  0BF3  3002               	movlw	2	; select bank4/5
 12170  0BF4  3F56               	moviw [22]fsr1
 12171  0BF5  0020               	movlb	0	; select bank0
 12172  0BF6  00A0               	movwf	setMemory_Data@data
 12173  0BF7  3004               	movlw	4
 12174  0BF8  319C  245C  318B   	fcall	_setMemory_Data
 12175                           
 12176                           ;MCU_B1.c: 1062: setMemory_Data(5, product->Data[23]);
 12177  0BFB  0021               	movlb	1	; select bank1
 12178  0BFC  086F               	movf	_product^(0+128),w
 12179  0BFD  0086               	movwf	6
 12180  0BFE  3002               	movlw	2	; select bank4/5
 12181  0BFF  0087               	movwf	7
 12182  0C00  3002               	movlw	2	; select bank4/5
 12183  0C01  3F57               	moviw [23]fsr1
 12184  0C02  0020               	movlb	0	; select bank0
 12185  0C03  00A0               	movwf	setMemory_Data@data
 12186  0C04  3005               	movlw	5
 12187  0C05  319C  245C  318B   	fcall	_setMemory_Data
 12188                           
 12189                           ;MCU_B1.c: 1063: if (myMain.SaveDimmer == 1) {
 12190  0C08  0021               	movlb	1	; select bank1
 12191  0C09  1EB8               	btfss	(_myMain^(0+128)+10),5
 12192  0C0A  2C15               	goto	l7331
 12193                           
 12194                           ;MCU_B1.c: 1064: myMain.SaveDimmer = 0;
 12195  0C0B  12B8               	bcf	(_myMain^(0+128)+10),5
 12196                           
 12197                           ;MCU_B1.c: 1065: setMemory_Data(30, 0xaa);
 12198  0C0C  30AA               	movlw	170
 12199  0C0D  0020               	movlb	0	; select bank0
 12200  0C0E  00A4               	movwf	??_Flash_Memory_Modify
 12201  0C0F  0824               	movf	??_Flash_Memory_Modify,w
 12202  0C10  00A0               	movwf	setMemory_Data@data
 12203  0C11  301E               	movlw	30
 12204  0C12  319C  245C  318B   	fcall	_setMemory_Data
 12205  0C15                     l7331:	
 12206                           
 12207                           ;MCU_B1.c: 1066: }
 12208                           ;MCU_B1.c: 1068: if (Memory.LoopSave == 1) {
 12209  0C15  0023               	movlb	3	; select bank3
 12210  0C16  1D62               	btfss	(_Memory^(0+384)+36),2
 12211  0C17  2C1C               	goto	l1266
 12212                           
 12213                           ;MCU_B1.c: 1069: Memory.LoopSave = 0;
 12214  0C18  1162               	bcf	(_Memory^(0+384)+36),2
 12215                           
 12216                           ;MCU_B1.c: 1070: myMain.FirstOpen = 0;
 12217  0C19  0021               	movlb	1	; select bank1
 12218  0C1A  11AE               	bcf	_myMain^(0+128),3
 12219                           
 12220                           ;MCU_B1.c: 1071: myMain.First = 0;
 12221  0C1B  12AE               	bcf	_myMain^(0+128),5
 12222  0C1C                     l1266:	
 12223                           
 12224                           ;MCU_B1.c: 1073: }
 12225                           ;MCU_B1.c: 1074: GIE = 0;
 12226  0C1C  138B               	bcf	11,7	;volatile
 12227                           
 12228                           ;MCU_B1.c: 1075: Flash_Memory_Erasing();
 12229  0C1D  319C  2468  318B   	fcall	_Flash_Memory_Erasing
 12230                           
 12231                           ;MCU_B1.c: 1076: Flash_Memory_Write();
 12232  0C20  3191  214F         	fcall	_Flash_Memory_Write
 12233                           
 12234                           ;MCU_B1.c: 1077: GIE = 1;
 12235  0C22  178B               	bsf	11,7	;volatile
 12236  0C23  0008               	return
 12237  0C24                     __end_of_Flash_Memory_Modify:	
 12238                           
 12239                           	psect	text78
 12240  1C68                     __ptext78:	
 12241 ;; *************** function _Flash_Memory_Erasing *****************
 12242 ;; Defined at:
 12243 ;;		line 1040 in file "../src/MCU_B1.c"
 12244 ;; Parameters:    Size  Location     Type
 12245 ;;		None
 12246 ;; Auto vars:     Size  Location     Type
 12247 ;;		None
 12248 ;; Return value:  Size  Location     Type
 12249 ;;		None               void
 12250 ;; Registers used:
 12251 ;;		wreg, status,2, status,0, pclath, cstack
 12252 ;; Tracked objects:
 12253 ;;		On entry : 0/0
 12254 ;;		On exit  : 0/0
 12255 ;;		Unchanged: 0/0
 12256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12261 ;;Total ram usage:        0 bytes
 12262 ;; Hardware stack levels used:    1
 12263 ;; Hardware stack levels required when called:    6
 12264 ;; This function calls:
 12265 ;;		_Flash_Memory_Unlock
 12266 ;; This function is called by:
 12267 ;;		_Flash_Memory_Modify
 12268 ;; This function uses a non-reentrant model
 12269 ;;
 12270                           
 12271                           
 12272                           ;psect for function _Flash_Memory_Erasing
 12273  1C68                     _Flash_Memory_Erasing:	
 12274                           
 12275                           ;MCU_B1.c: 1041: CFGS = 0;
 12276                           
 12277                           ;incstack = 0
 12278                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12279  1C68  0023               	movlb	3	; select bank3
 12280  1C69  1315               	bcf	21,6	;volatile
 12281                           
 12282                           ;MCU_B1.c: 1042: PMADRH = 0x30;
 12283  1C6A  3030               	movlw	48
 12284  1C6B  0092               	movwf	18	;volatile
 12285                           
 12286                           ;MCU_B1.c: 1043: PMADRL = 0x00;
 12287  1C6C  0191               	clrf	17	;volatile
 12288                           
 12289                           ;MCU_B1.c: 1044: FREE = 1;
 12290  1C6D  1615               	bsf	21,4	;volatile
 12291                           
 12292                           ;MCU_B1.c: 1045: WREN = 1;
 12293  1C6E  1515               	bsf	21,2	;volatile
 12294                           
 12295                           ;MCU_B1.c: 1046: Flash_Memory_Unlock();
 12296  1C6F  319B  23D5         	fcall	_Flash_Memory_Unlock
 12297                           
 12298                           ;MCU_B1.c: 1047: WREN = 0;
 12299  1C71  0023               	movlb	3	; select bank3
 12300  1C72  1115               	bcf	21,2	;volatile
 12301  1C73  0008               	return
 12302  1C74                     __end_of_Flash_Memory_Erasing:	
 12303                           
 12304                           	psect	text79
 12305  0621                     __ptext79:	
 12306 ;; *************** function _Flash_Memory_Initialization *****************
 12307 ;; Defined at:
 12308 ;;		line 930 in file "../src/MCU_B1.c"
 12309 ;; Parameters:    Size  Location     Type
 12310 ;;		None
 12311 ;; Auto vars:     Size  Location     Type
 12312 ;;  value           1    5[BANK0 ] unsigned char 
 12313 ;; Return value:  Size  Location     Type
 12314 ;;		None               void
 12315 ;; Registers used:
 12316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12317 ;; Tracked objects:
 12318 ;;		On entry : 0/0
 12319 ;;		On exit  : 0/0
 12320 ;;		Unchanged: 0/0
 12321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12324 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12325 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12326 ;;Total ram usage:        2 bytes
 12327 ;; Hardware stack levels used:    1
 12328 ;; Hardware stack levels required when called:    7
 12329 ;; This function calls:
 12330 ;;		_Flash_Memory_Read
 12331 ;;		_Flash_Memory_Write
 12332 ;;		_setMemory_Data
 12333 ;; This function is called by:
 12334 ;;		_main
 12335 ;; This function uses a non-reentrant model
 12336 ;;
 12337                           
 12338                           
 12339                           ;psect for function _Flash_Memory_Initialization
 12340  0621                     _Flash_Memory_Initialization:	
 12341                           
 12342                           ;MCU_B1.c: 931: char value = 0;
 12343                           
 12344                           ;incstack = 0
 12345                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12346  0621  0020               	movlb	0	; select bank0
 12347  0622  01A5               	clrf	Flash_Memory_Initialization@value
 12348                           
 12349                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12350  0623  301F               	movlw	31
 12351  0624  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12352  0627  3AAA               	xorlw	170
 12353  0628  1D03               	skipz
 12354  0629  2EA3               	goto	l7715
 12355                           
 12356                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12357  062A  3000               	movlw	0
 12358  062B  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12359  062E  0020               	movlb	0	; select bank0
 12360  062F  00A4               	movwf	??_Flash_Memory_Initialization
 12361  0630  0021               	movlb	1	; select bank1
 12362  0631  086F               	movf	_product^(0+128),w
 12363  0632  3E0C               	addlw	12
 12364  0633  0086               	movwf	6
 12365  0634  3002               	movlw	2	; select bank4/5
 12366  0635  0087               	movwf	7
 12367  0636  0020               	movlb	0	; select bank0
 12368  0637  0824               	movf	??_Flash_Memory_Initialization,w
 12369  0638  0081               	movwf	1
 12370                           
 12371                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12372  0639  3001               	movlw	1
 12373  063A  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12374  063D  0020               	movlb	0	; select bank0
 12375  063E  00A4               	movwf	??_Flash_Memory_Initialization
 12376  063F  0021               	movlb	1	; select bank1
 12377  0640  086F               	movf	_product^(0+128),w
 12378  0641  3E0D               	addlw	13
 12379  0642  0086               	movwf	6
 12380  0643  3002               	movlw	2	; select bank4/5
 12381  0644  0087               	movwf	7
 12382  0645  0020               	movlb	0	; select bank0
 12383  0646  0824               	movf	??_Flash_Memory_Initialization,w
 12384  0647  0081               	movwf	1
 12385                           
 12386                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12387  0648  3002               	movlw	2
 12388  0649  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12389  064C  0020               	movlb	0	; select bank0
 12390  064D  00A4               	movwf	??_Flash_Memory_Initialization
 12391  064E  0021               	movlb	1	; select bank1
 12392  064F  086F               	movf	_product^(0+128),w
 12393  0650  3E0E               	addlw	14
 12394  0651  0086               	movwf	6
 12395  0652  3002               	movlw	2	; select bank4/5
 12396  0653  0087               	movwf	7
 12397  0654  0020               	movlb	0	; select bank0
 12398  0655  0824               	movf	??_Flash_Memory_Initialization,w
 12399  0656  0081               	movwf	1
 12400                           
 12401                           ;MCU_B1.c: 938: product->Data[21] = Flash_Memory_Read(3);
 12402  0657  3003               	movlw	3
 12403  0658  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12404  065B  0020               	movlb	0	; select bank0
 12405  065C  00A4               	movwf	??_Flash_Memory_Initialization
 12406  065D  0021               	movlb	1	; select bank1
 12407  065E  086F               	movf	_product^(0+128),w
 12408  065F  3E15               	addlw	21
 12409  0660  0086               	movwf	6
 12410  0661  3002               	movlw	2	; select bank4/5
 12411  0662  0087               	movwf	7
 12412  0663  0020               	movlb	0	; select bank0
 12413  0664  0824               	movf	??_Flash_Memory_Initialization,w
 12414  0665  0081               	movwf	1
 12415                           
 12416                           ;MCU_B1.c: 939: product->Data[22] = Flash_Memory_Read(4);
 12417  0666  3004               	movlw	4
 12418  0667  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12419  066A  0020               	movlb	0	; select bank0
 12420  066B  00A4               	movwf	??_Flash_Memory_Initialization
 12421  066C  0021               	movlb	1	; select bank1
 12422  066D  086F               	movf	_product^(0+128),w
 12423  066E  3E16               	addlw	22
 12424  066F  0086               	movwf	6
 12425  0670  3002               	movlw	2	; select bank4/5
 12426  0671  0087               	movwf	7
 12427  0672  0020               	movlb	0	; select bank0
 12428  0673  0824               	movf	??_Flash_Memory_Initialization,w
 12429  0674  0081               	movwf	1
 12430                           
 12431                           ;MCU_B1.c: 940: product->Data[23] = Flash_Memory_Read(5);
 12432  0675  3005               	movlw	5
 12433  0676  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12434  0679  0020               	movlb	0	; select bank0
 12435  067A  00A4               	movwf	??_Flash_Memory_Initialization
 12436  067B  0021               	movlb	1	; select bank1
 12437  067C  086F               	movf	_product^(0+128),w
 12438  067D  3E17               	addlw	23
 12439  067E  0086               	movwf	6
 12440  067F  3002               	movlw	2	; select bank4/5
 12441  0680  0087               	movwf	7
 12442  0681  0020               	movlb	0	; select bank0
 12443  0682  0824               	movf	??_Flash_Memory_Initialization,w
 12444  0683  0081               	movwf	1
 12445                           
 12446                           ;MCU_B1.c: 947: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12447  0684  0021               	movlb	1	; select bank1
 12448  0685  086F               	movf	_product^(0+128),w
 12449  0686  3E0C               	addlw	12
 12450  0687  0086               	movwf	6
 12451  0688  3002               	movlw	2	; select bank4/5
 12452  0689  0087               	movwf	7
 12453  068A  0801               	movf	1,w
 12454  068B  3AFF               	xorlw	255
 12455  068C  1D03               	skipz
 12456  068D  0008               	return
 12457  068E  086F               	movf	_product^(0+128),w
 12458  068F  3E0D               	addlw	13
 12459  0690  0086               	movwf	6
 12460  0691  3002               	movlw	2	; select bank4/5
 12461  0692  0087               	movwf	7
 12462  0693  0801               	movf	1,w
 12463  0694  3AFF               	xorlw	255
 12464  0695  1D03               	skipz
 12465  0696  0008               	return
 12466  0697  086F               	movf	_product^(0+128),w
 12467  0698  3E0E               	addlw	14
 12468  0699  0086               	movwf	6
 12469  069A  3002               	movlw	2	; select bank4/5
 12470  069B  0087               	movwf	7
 12471  069C  0801               	movf	1,w
 12472  069D  3AFF               	xorlw	255
 12473  069E  1D03               	skipz
 12474  069F  0008               	return
 12475                           
 12476                           ;MCU_B1.c: 948: myMain.FirstOpen = 1;
 12477  06A0  15AE               	bsf	_myMain^(0+128),3
 12478                           
 12479                           ;MCU_B1.c: 949: myMain.First = 1;
 12480  06A1  16AE               	bsf	_myMain^(0+128),5
 12481                           
 12482                           ;MCU_B1.c: 950: }
 12483                           ;MCU_B1.c: 951: } else {
 12484  06A2  0008               	return
 12485  06A3                     l7715:	
 12486                           
 12487                           ;MCU_B1.c: 953: setMemory_Data(0, 0xff);
 12488  06A3  30FF               	movlw	255
 12489  06A4  0020               	movlb	0	; select bank0
 12490  06A5  00A4               	movwf	??_Flash_Memory_Initialization
 12491  06A6  0824               	movf	??_Flash_Memory_Initialization,w
 12492  06A7  00A0               	movwf	setMemory_Data@data
 12493  06A8  3000               	movlw	0
 12494  06A9  319C  245C  3186   	fcall	_setMemory_Data
 12495                           
 12496                           ;MCU_B1.c: 954: setMemory_Data(1, 0xff);
 12497  06AC  30FF               	movlw	255
 12498  06AD  0020               	movlb	0	; select bank0
 12499  06AE  00A4               	movwf	??_Flash_Memory_Initialization
 12500  06AF  0824               	movf	??_Flash_Memory_Initialization,w
 12501  06B0  00A0               	movwf	setMemory_Data@data
 12502  06B1  3001               	movlw	1
 12503  06B2  319C  245C  3186   	fcall	_setMemory_Data
 12504                           
 12505                           ;MCU_B1.c: 955: setMemory_Data(2, 0xff);
 12506  06B5  30FF               	movlw	255
 12507  06B6  0020               	movlb	0	; select bank0
 12508  06B7  00A4               	movwf	??_Flash_Memory_Initialization
 12509  06B8  0824               	movf	??_Flash_Memory_Initialization,w
 12510  06B9  00A0               	movwf	setMemory_Data@data
 12511  06BA  3002               	movlw	2
 12512  06BB  319C  245C  3186   	fcall	_setMemory_Data
 12513                           
 12514                           ;MCU_B1.c: 956: setMemory_Data(3, 0xff);
 12515  06BE  30FF               	movlw	255
 12516  06BF  0020               	movlb	0	; select bank0
 12517  06C0  00A4               	movwf	??_Flash_Memory_Initialization
 12518  06C1  0824               	movf	??_Flash_Memory_Initialization,w
 12519  06C2  00A0               	movwf	setMemory_Data@data
 12520  06C3  3003               	movlw	3
 12521  06C4  319C  245C  3186   	fcall	_setMemory_Data
 12522                           
 12523                           ;MCU_B1.c: 957: setMemory_Data(4, 0xff);
 12524  06C7  30FF               	movlw	255
 12525  06C8  0020               	movlb	0	; select bank0
 12526  06C9  00A4               	movwf	??_Flash_Memory_Initialization
 12527  06CA  0824               	movf	??_Flash_Memory_Initialization,w
 12528  06CB  00A0               	movwf	setMemory_Data@data
 12529  06CC  3004               	movlw	4
 12530  06CD  319C  245C  3186   	fcall	_setMemory_Data
 12531                           
 12532                           ;MCU_B1.c: 958: setMemory_Data(5, 0xff);
 12533  06D0  30FF               	movlw	255
 12534  06D1  0020               	movlb	0	; select bank0
 12535  06D2  00A4               	movwf	??_Flash_Memory_Initialization
 12536  06D3  0824               	movf	??_Flash_Memory_Initialization,w
 12537  06D4  00A0               	movwf	setMemory_Data@data
 12538  06D5  3005               	movlw	5
 12539  06D6  319C  245C  3186   	fcall	_setMemory_Data
 12540                           
 12541                           ;MCU_B1.c: 959: setMemory_Data(31, 0xaa);
 12542  06D9  30AA               	movlw	170
 12543  06DA  0020               	movlb	0	; select bank0
 12544  06DB  00A4               	movwf	??_Flash_Memory_Initialization
 12545  06DC  0824               	movf	??_Flash_Memory_Initialization,w
 12546  06DD  00A0               	movwf	setMemory_Data@data
 12547  06DE  301F               	movlw	31
 12548  06DF  319C  245C  3186   	fcall	_setMemory_Data
 12549                           
 12550                           ;MCU_B1.c: 964: GIE = 0;
 12551  06E2  138B               	bcf	11,7	;volatile
 12552                           
 12553                           ;MCU_B1.c: 965: Flash_Memory_Write();
 12554  06E3  3191  214F         	fcall	_Flash_Memory_Write
 12555                           
 12556                           ;MCU_B1.c: 966: GIE = 1;
 12557  06E5  178B               	bsf	11,7	;volatile
 12558                           
 12559                           ;MCU_B1.c: 967: myMain.FirstOpen = 1;
 12560  06E6  0021               	movlb	1	; select bank1
 12561  06E7  15AE               	bsf	_myMain^(0+128),3
 12562                           
 12563                           ;MCU_B1.c: 968: myMain.First = 1;
 12564  06E8  16AE               	bsf	_myMain^(0+128),5
 12565                           
 12566                           ;MCU_B1.c: 969: myMain.InitDimmer = 1;
 12567  06E9  1638               	bsf	(_myMain^(0+128)+10),4
 12568  06EA  0008               	return
 12569  06EB                     __end_of_Flash_Memory_Initialization:	
 12570                           
 12571                           	psect	text80
 12572  1C5C                     __ptext80:	
 12573 ;; *************** function _setMemory_Data *****************
 12574 ;; Defined at:
 12575 ;;		line 1092 in file "../src/MCU_B1.c"
 12576 ;; Parameters:    Size  Location     Type
 12577 ;;  address         1    wreg     unsigned char 
 12578 ;;  data            1    0[BANK0 ] unsigned char 
 12579 ;; Auto vars:     Size  Location     Type
 12580 ;;  address         1    2[BANK0 ] unsigned char 
 12581 ;; Return value:  Size  Location     Type
 12582 ;;		None               void
 12583 ;; Registers used:
 12584 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12585 ;; Tracked objects:
 12586 ;;		On entry : 0/0
 12587 ;;		On exit  : 0/0
 12588 ;;		Unchanged: 0/0
 12589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12590 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12591 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;Total ram usage:        3 bytes
 12595 ;; Hardware stack levels used:    1
 12596 ;; Hardware stack levels required when called:    5
 12597 ;; This function calls:
 12598 ;;		Nothing
 12599 ;; This function is called by:
 12600 ;;		_Flash_Memory_Initialization
 12601 ;;		_Flash_Memory_Modify
 12602 ;; This function uses a non-reentrant model
 12603 ;;
 12604                           
 12605                           
 12606                           ;psect for function _setMemory_Data
 12607  1C5C                     _setMemory_Data:	
 12608                           
 12609                           ;incstack = 0
 12610                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12611                           ;setMemory_Data@address stored from wreg
 12612  1C5C  0020               	movlb	0	; select bank0
 12613  1C5D  00A2               	movwf	setMemory_Data@address
 12614                           
 12615                           ;MCU_B1.c: 1093: Memory.Data[address] = data;
 12616  1C5E  0820               	movf	setMemory_Data@data,w
 12617  1C5F  00A1               	movwf	??_setMemory_Data
 12618  1C60  0822               	movf	setMemory_Data@address,w
 12619  1C61  3EBE               	addlw	_Memory& (0+255)
 12620  1C62  0086               	movwf	6
 12621  1C63  3001               	movlw	1	; select bank3/4
 12622  1C64  0087               	movwf	7
 12623  1C65  0821               	movf	??_setMemory_Data,w
 12624  1C66  0081               	movwf	1
 12625  1C67  0008               	return
 12626  1C68                     __end_of_setMemory_Data:	
 12627                           
 12628                           	psect	text81
 12629  114F                     __ptext81:	
 12630 ;; *************** function _Flash_Memory_Write *****************
 12631 ;; Defined at:
 12632 ;;		line 1021 in file "../src/MCU_B1.c"
 12633 ;; Parameters:    Size  Location     Type
 12634 ;;		None
 12635 ;; Auto vars:     Size  Location     Type
 12636 ;;  i               1    1[BANK0 ] unsigned char 
 12637 ;; Return value:  Size  Location     Type
 12638 ;;		None               void
 12639 ;; Registers used:
 12640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12641 ;; Tracked objects:
 12642 ;;		On entry : 0/0
 12643 ;;		On exit  : 0/0
 12644 ;;		Unchanged: 0/0
 12645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12650 ;;Total ram usage:        2 bytes
 12651 ;; Hardware stack levels used:    1
 12652 ;; Hardware stack levels required when called:    6
 12653 ;; This function calls:
 12654 ;;		_Flash_Memory_Unlock
 12655 ;; This function is called by:
 12656 ;;		_Flash_Memory_Initialization
 12657 ;;		_Flash_Memory_Modify
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           
 12662                           ;psect for function _Flash_Memory_Write
 12663  114F                     _Flash_Memory_Write:	
 12664                           
 12665                           ;MCU_B1.c: 1022: char i = 0;
 12666                           
 12667                           ;incstack = 0
 12668                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12669  114F  0020               	movlb	0	; select bank0
 12670  1150  01A1               	clrf	Flash_Memory_Write@i
 12671                           
 12672                           ;MCU_B1.c: 1023: CFGS = 0;
 12673  1151  0023               	movlb	3	; select bank3
 12674  1152  1315               	bcf	21,6	;volatile
 12675                           
 12676                           ;MCU_B1.c: 1024: PMADRH = 0x30;
 12677  1153  3030               	movlw	48
 12678  1154  0092               	movwf	18	;volatile
 12679                           
 12680                           ;MCU_B1.c: 1025: PMDATH = 0;
 12681  1155  0194               	clrf	20	;volatile
 12682                           
 12683                           ;MCU_B1.c: 1026: FREE = 0;
 12684  1156  1215               	bcf	21,4	;volatile
 12685                           
 12686                           ;MCU_B1.c: 1027: LWLO = 1;
 12687  1157  1695               	bsf	21,5	;volatile
 12688                           
 12689                           ;MCU_B1.c: 1028: WREN = 1;
 12690  1158  1515               	bsf	21,2	;volatile
 12691                           
 12692                           ;MCU_B1.c: 1029: for (i = 0; i < 32; i++) {
 12693  1159  0020               	movlb	0	; select bank0
 12694  115A  01A1               	clrf	Flash_Memory_Write@i
 12695  115B  3020               	movlw	32
 12696  115C  0221               	subwf	Flash_Memory_Write@i,w
 12697  115D  1803               	btfsc	3,0
 12698  115E  2977               	goto	l1256
 12699  115F                     l6867:	
 12700                           
 12701                           ;MCU_B1.c: 1030: PMADRL = i;
 12702  115F  0821               	movf	Flash_Memory_Write@i,w
 12703  1160  0023               	movlb	3	; select bank3
 12704  1161  0091               	movwf	17	;volatile
 12705                           
 12706                           ;MCU_B1.c: 1031: PMDATL = Memory.Data[i];
 12707  1162  0020               	movlb	0	; select bank0
 12708  1163  0821               	movf	Flash_Memory_Write@i,w
 12709  1164  3EBE               	addlw	_Memory& (0+255)
 12710  1165  0086               	movwf	6
 12711  1166  3001               	movlw	1	; select bank3/4
 12712  1167  0087               	movwf	7
 12713  1168  0801               	movf	1,w
 12714  1169  0023               	movlb	3	; select bank3
 12715  116A  0093               	movwf	19	;volatile
 12716                           
 12717                           ;MCU_B1.c: 1032: Flash_Memory_Unlock();
 12718  116B  319B  23D5  3191   	fcall	_Flash_Memory_Unlock
 12719  116E  3001               	movlw	1
 12720  116F  0020               	movlb	0	; select bank0
 12721  1170  00A0               	movwf	??_Flash_Memory_Write
 12722  1171  0820               	movf	??_Flash_Memory_Write,w
 12723  1172  07A1               	addwf	Flash_Memory_Write@i,f
 12724  1173  3020               	movlw	32
 12725  1174  0221               	subwf	Flash_Memory_Write@i,w
 12726  1175  1C03               	skipc
 12727  1176  295F               	goto	l6867
 12728  1177                     l1256:	
 12729                           
 12730                           ;MCU_B1.c: 1033: }
 12731                           ;MCU_B1.c: 1034: LWLO = 0;
 12732  1177  0023               	movlb	3	; select bank3
 12733  1178  1295               	bcf	21,5	;volatile
 12734                           
 12735                           ;MCU_B1.c: 1035: Flash_Memory_Unlock();
 12736  1179  319B  23D5         	fcall	_Flash_Memory_Unlock
 12737                           
 12738                           ;MCU_B1.c: 1036: WREN = 0;
 12739  117B  0023               	movlb	3	; select bank3
 12740  117C  1115               	bcf	21,2	;volatile
 12741  117D  0008               	return
 12742  117E                     __end_of_Flash_Memory_Write:	
 12743                           
 12744                           	psect	text82
 12745  1BD5                     __ptext82:	
 12746 ;; *************** function _Flash_Memory_Unlock *****************
 12747 ;; Defined at:
 12748 ;;		line 1000 in file "../src/MCU_B1.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;		None
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;		None
 12753 ;; Return value:  Size  Location     Type
 12754 ;;		None               void
 12755 ;; Registers used:
 12756 ;;		wreg
 12757 ;; Tracked objects:
 12758 ;;		On entry : 0/0
 12759 ;;		On exit  : 0/0
 12760 ;;		Unchanged: 0/0
 12761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;Total ram usage:        0 bytes
 12767 ;; Hardware stack levels used:    1
 12768 ;; Hardware stack levels required when called:    5
 12769 ;; This function calls:
 12770 ;;		Nothing
 12771 ;; This function is called by:
 12772 ;;		_Flash_Memory_Write
 12773 ;;		_Flash_Memory_Erasing
 12774 ;; This function uses a non-reentrant model
 12775 ;;
 12776                           
 12777                           
 12778                           ;psect for function _Flash_Memory_Unlock
 12779  1BD5                     _Flash_Memory_Unlock:	
 12780                           
 12781                           ;MCU_B1.c: 1001: PMCON2 = 0x55;
 12782                           
 12783                           ;incstack = 0
 12784                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12785  1BD5  3055               	movlw	85
 12786  1BD6  0023               	movlb	3	; select bank3
 12787  1BD7  0096               	movwf	22	;volatile
 12788                           
 12789                           ;MCU_B1.c: 1002: PMCON2 = 0xaa;
 12790  1BD8  30AA               	movlw	170
 12791  1BD9  0096               	movwf	22	;volatile
 12792                           
 12793                           ;MCU_B1.c: 1003: WR = 1;
 12794  1BDA  1495               	bsf	21,1	;volatile
 12795                           
 12796                           ;MCU_B1.c: 1004: __nop();
 12797  1BDB  0000               	nop
 12798                           
 12799                           ;MCU_B1.c: 1005: __nop();
 12800  1BDC  0000               	nop
 12801  1BDD  0008               	return
 12802  1BDE                     __end_of_Flash_Memory_Unlock:	
 12803                           
 12804                           	psect	text83
 12805  1EE6                     __ptext83:	
 12806 ;; *************** function _Flash_Memory_Read *****************
 12807 ;; Defined at:
 12808 ;;		line 1009 in file "../src/MCU_B1.c"
 12809 ;; Parameters:    Size  Location     Type
 12810 ;;  address         1    wreg     unsigned char 
 12811 ;; Auto vars:     Size  Location     Type
 12812 ;;  address         1    2[BANK0 ] unsigned char 
 12813 ;;  ret             1    3[BANK0 ] unsigned char 
 12814 ;;  i               1    1[BANK0 ] unsigned char 
 12815 ;; Return value:  Size  Location     Type
 12816 ;;                  1    wreg      unsigned char 
 12817 ;; Registers used:
 12818 ;;		wreg, status,2
 12819 ;; Tracked objects:
 12820 ;;		On entry : 0/0
 12821 ;;		On exit  : 0/0
 12822 ;;		Unchanged: 0/0
 12823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12825 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12827 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12828 ;;Total ram usage:        4 bytes
 12829 ;; Hardware stack levels used:    1
 12830 ;; Hardware stack levels required when called:    5
 12831 ;; This function calls:
 12832 ;;		Nothing
 12833 ;; This function is called by:
 12834 ;;		_Flash_Memory_Initialization
 12835 ;;		_Flash_Memory_Modify
 12836 ;; This function uses a non-reentrant model
 12837 ;;
 12838                           
 12839                           
 12840                           ;psect for function _Flash_Memory_Read
 12841  1EE6                     _Flash_Memory_Read:	
 12842                           
 12843                           ;incstack = 0
 12844                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12845                           ;Flash_Memory_Read@address stored from wreg
 12846  1EE6  0020               	movlb	0	; select bank0
 12847  1EE7  00A2               	movwf	Flash_Memory_Read@address
 12848                           
 12849                           ;MCU_B1.c: 1010: char i = 0, ret = 0;
 12850  1EE8  01A1               	clrf	Flash_Memory_Read@i
 12851  1EE9  01A3               	clrf	Flash_Memory_Read@ret
 12852                           
 12853                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 12854  1EEA  3030               	movlw	48
 12855  1EEB  0023               	movlb	3	; select bank3
 12856  1EEC  0092               	movwf	18	;volatile
 12857                           
 12858                           ;MCU_B1.c: 1012: PMADRL = address;
 12859  1EED  0020               	movlb	0	; select bank0
 12860  1EEE  0822               	movf	Flash_Memory_Read@address,w
 12861  1EEF  0023               	movlb	3	; select bank3
 12862  1EF0  0091               	movwf	17	;volatile
 12863                           
 12864                           ;MCU_B1.c: 1013: CFGS = 0;
 12865  1EF1  1315               	bcf	21,6	;volatile
 12866                           
 12867                           ;MCU_B1.c: 1014: RD = 1;
 12868  1EF2  1415               	bsf	21,0	;volatile
 12869                           
 12870                           ;MCU_B1.c: 1015: i = PMDATH;
 12871  1EF3  0814               	movf	20,w	;volatile
 12872  1EF4  0020               	movlb	0	; select bank0
 12873  1EF5  00A0               	movwf	??_Flash_Memory_Read
 12874  1EF6  0820               	movf	??_Flash_Memory_Read,w
 12875  1EF7  00A1               	movwf	Flash_Memory_Read@i
 12876                           
 12877                           ;MCU_B1.c: 1016: ret = PMDATL;
 12878  1EF8  0023               	movlb	3	; select bank3
 12879  1EF9  0813               	movf	19,w	;volatile
 12880  1EFA  0020               	movlb	0	; select bank0
 12881  1EFB  00A0               	movwf	??_Flash_Memory_Read
 12882  1EFC  0820               	movf	??_Flash_Memory_Read,w
 12883  1EFD  00A3               	movwf	Flash_Memory_Read@ret
 12884                           
 12885                           ;MCU_B1.c: 1017: return ret;
 12886  1EFE  0823               	movf	Flash_Memory_Read@ret,w
 12887  1EFF  0008               	return
 12888  1F00                     __end_of_Flash_Memory_Read:	
 12889                           
 12890                           	psect	text84
 12891  054C                     __ptext84:	
 12892 ;; *************** function _Exception_Main *****************
 12893 ;; Defined at:
 12894 ;;		line 499 in file "../src/Main_B1.c"
 12895 ;; Parameters:    Size  Location     Type
 12896 ;;		None
 12897 ;; Auto vars:     Size  Location     Type
 12898 ;;  i               2   18[BANK0 ] int 
 12899 ;;  i               2   16[BANK0 ] int 
 12900 ;;  lights          1   21[BANK0 ] unsigned char 
 12901 ;;  error           1   20[BANK0 ] unsigned char 
 12902 ;;  count           1   15[BANK0 ] unsigned char 
 12903 ;;  status          1   14[BANK0 ] unsigned char 
 12904 ;; Return value:  Size  Location     Type
 12905 ;;		None               void
 12906 ;; Registers used:
 12907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12908 ;; Tracked objects:
 12909 ;;		On entry : 0/0
 12910 ;;		On exit  : 0/0
 12911 ;;		Unchanged: 0/0
 12912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12915 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12916 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12917 ;;Total ram usage:        9 bytes
 12918 ;; Hardware stack levels used:    1
 12919 ;; Hardware stack levels required when called:    7
 12920 ;; This function calls:
 12921 ;;		_getDimmerLights_Line
 12922 ;;		_getDimmerLights_Status
 12923 ;;		_getMain_All_Error_Status
 12924 ;;		_getMain_All_LightsStatus
 12925 ;;		_setBuz
 12926 ;;		_setDimmerLights_SwOff
 12927 ;;		_setLED
 12928 ;; This function is called by:
 12929 ;;		_main
 12930 ;; This function uses a non-reentrant model
 12931 ;;
 12932                           
 12933                           
 12934                           ;psect for function _Exception_Main
 12935  054C                     _Exception_Main:	
 12936                           
 12937                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12938                           
 12939                           ;incstack = 0
 12940                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12941  054C  3000               	movlw	0
 12942  054D  3191  21AF  3185   	fcall	_getMain_All_Error_Status
 12943  0550  0020               	movlb	0	; select bank0
 12944  0551  00AD               	movwf	??_Exception_Main
 12945  0552  082D               	movf	??_Exception_Main,w
 12946  0553  00B4               	movwf	Exception_Main@error
 12947                           
 12948                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12949  0554  01B5               	clrf	Exception_Main@lights
 12950  0555  01AF               	clrf	Exception_Main@count
 12951  0556  0AAF               	incf	Exception_Main@count,f
 12952                           
 12953                           ;Main_B1.c: 502: char status = 0;
 12954  0557  01AE               	clrf	Exception_Main@status
 12955                           
 12956                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12957  0558  0021               	movlb	1	; select bank1
 12958  0559  1DB8               	btfss	(_myMain^(0+128)+10),3
 12959  055A  2D6A               	goto	l8049
 12960                           
 12961                           ;Main_B1.c: 505: if (error == 0) {
 12962  055B  0020               	movlb	0	; select bank0
 12963  055C  08B4               	movf	Exception_Main@error,f
 12964  055D  1D03               	skipz
 12965  055E  0008               	return
 12966                           
 12967                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12968  055F  0021               	movlb	1	; select bank1
 12969  0560  11B8               	bcf	(_myMain^(0+128)+10),3
 12970                           
 12971                           ;Main_B1.c: 509: setLED(99, 10);
 12972  0561  300A               	movlw	10
 12973  0562  0020               	movlb	0	; select bank0
 12974  0563  00AD               	movwf	??_Exception_Main
 12975  0564  082D               	movf	??_Exception_Main,w
 12976  0565  00A2               	movwf	setLED@command
 12977  0566  3063               	movlw	99
 12978  0567  3192  22F1         	fcall	_setLED
 12979                           
 12980                           ;Main_B1.c: 522: }
 12981                           ;Main_B1.c: 523: } else {
 12982  0569  0008               	return
 12983  056A                     l8049:	
 12984                           
 12985                           ;Main_B1.c: 524: if (error != 0) {
 12986  056A  0020               	movlb	0	; select bank0
 12987  056B  0834               	movf	Exception_Main@error,w
 12988  056C  1903               	btfsc	3,2
 12989  056D  0008               	return
 12990                           
 12991                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 12992  056E  0021               	movlb	1	; select bank1
 12993  056F  15B8               	bsf	(_myMain^(0+128)+10),3
 12994                           
 12995                           ;Main_B1.c: 527: setLED(99, 11);
 12996  0570  300B               	movlw	11
 12997  0571  0020               	movlb	0	; select bank0
 12998  0572  00AD               	movwf	??_Exception_Main
 12999  0573  082D               	movf	??_Exception_Main,w
 13000  0574  00A2               	movwf	setLED@command
 13001  0575  3063               	movlw	99
 13002  0576  3192  22F1  3185   	fcall	_setLED
 13003                           
 13004                           ;Main_B1.c: 538: switch (error) {
 13005  0579  2E16               	goto	l8097
 13006  057A                     l8055:	
 13007                           ;Main_B1.c: 539: case 2:
 13008                           
 13009                           
 13010                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13011  057A  319B  23DE  3185   	fcall	_getMain_All_LightsStatus
 13012  057D  3A01               	xorlw	1
 13013  057E  1D03               	skipz
 13014  057F  2D89               	goto	l8059
 13015                           
 13016                           ;Main_B1.c: 547: setBuz(10, 300);
 13017  0580  302C               	movlw	44
 13018  0581  0020               	movlb	0	; select bank0
 13019  0582  00A9               	movwf	setBuz@time
 13020  0583  3001               	movlw	1
 13021  0584  00AA               	movwf	setBuz@time+1
 13022  0585  300A               	movlw	10
 13023  0586  3195  2551  3185   	fcall	_setBuz
 13024  0589                     l8059:	
 13025                           
 13026                           ;Main_B1.c: 548: }
 13027                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13028  0589  0020               	movlb	0	; select bank0
 13029  058A  01B0               	clrf	Exception_Main@i
 13030  058B  01B1               	clrf	Exception_Main@i+1
 13031  058C                     l8069:	
 13032  058C  0831               	movf	Exception_Main@i+1,w
 13033  058D  3A80               	xorlw	128
 13034  058E  00AD               	movwf	??_Exception_Main
 13035  058F  3080               	movlw	128
 13036  0590  022D               	subwf	??_Exception_Main,w
 13037  0591  1D03               	skipz
 13038  0592  2D95               	goto	u8335
 13039  0593  082F               	movf	Exception_Main@count,w
 13040  0594  0230               	subwf	Exception_Main@i,w
 13041  0595                     u8335:	
 13042  0595  1803               	btfsc	3,0
 13043  0596  2DB7               	goto	u8330
 13044                           
 13045                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13046  0597  0020               	movlb	0	; select bank0
 13047  0598  0830               	movf	Exception_Main@i,w
 13048  0599  3E01               	addlw	1
 13049  059A  319C  24D3  3185   	fcall	_getDimmerLights_Status
 13050  059D  3A01               	xorlw	1
 13051  059E  1D03               	skipz
 13052  059F  2DB1               	goto	l8067
 13053                           
 13054                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13055  05A0  0021               	movlb	1	; select bank1
 13056  05A1  0855               	movf	_DimmerLights^(0+128),w
 13057  05A2  0086               	movwf	6
 13058  05A3  3001               	movlw	1	; select bank2/3
 13059  05A4  0087               	movwf	7
 13060  05A5  1401               	bsf	1,0
 13061                           
 13062                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13063  05A6  0A55               	incf	_DimmerLights^(0+128),w
 13064  05A7  0086               	movwf	6
 13065  05A8  3001               	movlw	1	; select bank2/3
 13066  05A9  0087               	movwf	7
 13067  05AA  1001               	bcf	1,0
 13068                           
 13069                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13070  05AB  0020               	movlb	0	; select bank0
 13071  05AC  0830               	movf	Exception_Main@i,w
 13072  05AD  3E01               	addlw	1
 13073  05AE  3192  22B8  3185   	fcall	_setDimmerLights_SwOff
 13074  05B1                     l8067:	
 13075  05B1  3001               	movlw	1
 13076  05B2  0020               	movlb	0	; select bank0
 13077  05B3  07B0               	addwf	Exception_Main@i,f
 13078  05B4  3000               	movlw	0
 13079  05B5  3DB1               	addwfc	Exception_Main@i+1,f
 13080  05B6  2D8C               	goto	l8069
 13081  05B7                     u8330:	
 13082  05B7  0020               	movlb	0	; select bank0
 13083  05B8  0008               	return
 13084  05B9                     l8071:	
 13085                           ;Main_B1.c: 561: case 3:
 13086                           
 13087                           ;Main_B1.c: 556: }
 13088                           ;Main_B1.c: 557: }
 13089                           ;Main_B1.c: 560: break;
 13090                           
 13091                           
 13092                           ;Main_B1.c: 563: setBuz(5, 300);
 13093  05B9  302C               	movlw	44
 13094  05BA  0020               	movlb	0	; select bank0
 13095  05BB  00A9               	movwf	setBuz@time
 13096  05BC  3001               	movlw	1
 13097  05BD  00AA               	movwf	setBuz@time+1
 13098  05BE  3005               	movlw	5
 13099  05BF  3195  2551  3185   	fcall	_setBuz
 13100                           
 13101                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13102  05C2  319B  23E8  3185   	fcall	_getDimmerLights_Line
 13103  05C5  0020               	movlb	0	; select bank0
 13104  05C6  00AD               	movwf	??_Exception_Main
 13105  05C7  082D               	movf	??_Exception_Main,w
 13106  05C8  00B5               	movwf	Exception_Main@lights
 13107                           
 13108                           ;Main_B1.c: 565: if (lights == 0) {
 13109  05C9  08B5               	movf	Exception_Main@lights,f
 13110  05CA  1D03               	skipz
 13111  05CB  2DFB               	goto	l8089
 13112                           
 13113                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13114  05CC  01B2               	clrf	Exception_Main@i_3580
 13115  05CD  01B3               	clrf	Exception_Main@i_3580+1
 13116  05CE                     l8087:	
 13117  05CE  0833               	movf	Exception_Main@i_3580+1,w
 13118  05CF  3A80               	xorlw	128
 13119  05D0  00AD               	movwf	??_Exception_Main
 13120  05D1  3080               	movlw	128
 13121  05D2  022D               	subwf	??_Exception_Main,w
 13122  05D3  1D03               	skipz
 13123  05D4  2DD7               	goto	u8365
 13124  05D5  082F               	movf	Exception_Main@count,w
 13125  05D6  0232               	subwf	Exception_Main@i_3580,w
 13126  05D7                     u8365:	
 13127  05D7  1803               	btfsc	3,0
 13128  05D8  2DF9               	goto	u8360
 13129                           
 13130                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13131  05D9  0020               	movlb	0	; select bank0
 13132  05DA  0832               	movf	Exception_Main@i_3580,w
 13133  05DB  3E01               	addlw	1
 13134  05DC  319C  24D3  3185   	fcall	_getDimmerLights_Status
 13135  05DF  3A01               	xorlw	1
 13136  05E0  1D03               	skipz
 13137  05E1  2DF3               	goto	l8085
 13138                           
 13139                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13140  05E2  0021               	movlb	1	; select bank1
 13141  05E3  0855               	movf	_DimmerLights^(0+128),w
 13142  05E4  0086               	movwf	6
 13143  05E5  3001               	movlw	1	; select bank2/3
 13144  05E6  0087               	movwf	7
 13145  05E7  1401               	bsf	1,0
 13146                           
 13147                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13148  05E8  0A55               	incf	_DimmerLights^(0+128),w
 13149  05E9  0086               	movwf	6
 13150  05EA  3001               	movlw	1	; select bank2/3
 13151  05EB  0087               	movwf	7
 13152  05EC  1001               	bcf	1,0
 13153                           
 13154                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13155  05ED  0020               	movlb	0	; select bank0
 13156  05EE  0832               	movf	Exception_Main@i_3580,w
 13157  05EF  3E01               	addlw	1
 13158  05F0  3192  22B8  3185   	fcall	_setDimmerLights_SwOff
 13159  05F3                     l8085:	
 13160  05F3  3001               	movlw	1
 13161  05F4  0020               	movlb	0	; select bank0
 13162  05F5  07B2               	addwf	Exception_Main@i_3580,f
 13163  05F6  3000               	movlw	0
 13164  05F7  3DB3               	addwfc	Exception_Main@i_3580+1,f
 13165  05F8  2DCE               	goto	l8087
 13166  05F9                     u8360:	
 13167  05F9  0020               	movlb	0	; select bank0
 13168  05FA  0008               	return
 13169  05FB                     l8089:	
 13170                           ;Main_B1.c: 573: }
 13171                           ;Main_B1.c: 574: }
 13172                           ;Main_B1.c: 575: } else {
 13173                           
 13174                           
 13175                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13176  05FB  0020               	movlb	0	; select bank0
 13177  05FC  0835               	movf	Exception_Main@lights,w
 13178  05FD  319C  24D3  3185   	fcall	_getDimmerLights_Status
 13179  0600  3A01               	xorlw	1
 13180  0601  1903               	btfsc	3,2
 13181  0602  2E05               	goto	l8091
 13182  0603  0020               	movlb	0	; select bank0
 13183  0604  0008               	return
 13184  0605                     l8091:	
 13185                           
 13186                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13187  0605  0021               	movlb	1	; select bank1
 13188  0606  0855               	movf	_DimmerLights^(0+128),w
 13189  0607  0086               	movwf	6
 13190  0608  3001               	movlw	1	; select bank2/3
 13191  0609  0087               	movwf	7
 13192  060A  1401               	bsf	1,0
 13193                           
 13194                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13195  060B  0A55               	incf	_DimmerLights^(0+128),w
 13196  060C  0086               	movwf	6
 13197  060D  3001               	movlw	1	; select bank2/3
 13198  060E  0087               	movwf	7
 13199  060F  1001               	bcf	1,0
 13200                           
 13201                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13202  0610  0020               	movlb	0	; select bank0
 13203  0611  0835               	movf	Exception_Main@lights,w
 13204  0612  3192  22B8         	fcall	_setDimmerLights_SwOff
 13205  0614  0020               	movlb	0	; select bank0
 13206  0615  0008               	return
 13207  0616                     l8097:	
 13208                           ;Main_B1.c: 586: }
 13209                           
 13210                           ;Main_B1.c: 582: }
 13211                           ;Main_B1.c: 583: }
 13212                           ;Main_B1.c: 585: break;
 13213                           
 13214  0616  0020               	movlb	0	; select bank0
 13215  0617  0834               	movf	Exception_Main@error,w
 13216                           
 13217                           ; Switch size 1, requested type "space"
 13218                           ; Number of cases is 2, Range of values is 2 to 3
 13219                           ; switch strategies available:
 13220                           ; Name         Instructions Cycles
 13221                           ; simple_byte            7     4 (average)
 13222                           ; direct_byte           13     9 (fixed)
 13223                           ; jumptable            263     9 (fixed)
 13224                           ;	Chosen strategy is simple_byte
 13225  0618  3A02               	xorlw	2	; case 2
 13226  0619  1903               	skipnz
 13227  061A  2D7A               	goto	l8055
 13228  061B  3A01               	xorlw	1	; case 3
 13229  061C  1903               	skipnz
 13230  061D  2DB9               	goto	l8071
 13231  061E  2E20               	goto	l1498
 13232  061F  0008               	return
 13233  0620                     l1498:	
 13234  0620  0008               	return
 13235  0621                     __end_of_Exception_Main:	
 13236                           
 13237                           	psect	text85
 13238  1BE8                     __ptext85:	
 13239 ;; *************** function _getDimmerLights_Line *****************
 13240 ;; Defined at:
 13241 ;;		line 1042 in file "../src/Dimmer_B1.c"
 13242 ;; Parameters:    Size  Location     Type
 13243 ;;		None
 13244 ;; Auto vars:     Size  Location     Type
 13245 ;;  line            1    0[BANK0 ] unsigned char 
 13246 ;; Return value:  Size  Location     Type
 13247 ;;                  1    wreg      unsigned char 
 13248 ;; Registers used:
 13249 ;;		wreg, status,2
 13250 ;; Tracked objects:
 13251 ;;		On entry : 0/0
 13252 ;;		On exit  : 0/0
 13253 ;;		Unchanged: 0/0
 13254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13258 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;Total ram usage:        1 bytes
 13260 ;; Hardware stack levels used:    1
 13261 ;; Hardware stack levels required when called:    5
 13262 ;; This function calls:
 13263 ;;		Nothing
 13264 ;; This function is called by:
 13265 ;;		_Exception_Main
 13266 ;; This function uses a non-reentrant model
 13267 ;;
 13268                           
 13269                           
 13270                           ;psect for function _getDimmerLights_Line
 13271  1BE8                     _getDimmerLights_Line:	
 13272                           
 13273                           ;Dimmer_B1.c: 1043: char line = 0;
 13274                           
 13275                           ;incstack = 0
 13276                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13277  1BE8  0020               	movlb	0	; select bank0
 13278  1BE9  01A0               	clrf	getDimmerLights_Line@line
 13279                           
 13280                           ;Dimmer_B1.c: 1045: if (DimmerLights1.Line == 1) {
 13281  1BEA  0022               	movlb	2	; select bank2
 13282  1BEB  1CDB               	btfss	(_DimmerLights1^(0+256)+1),1
 13283  1BEC  2BF0               	goto	l7101
 13284                           
 13285                           ;Dimmer_B1.c: 1046: line = 1;
 13286  1BED  0020               	movlb	0	; select bank0
 13287  1BEE  01A0               	clrf	getDimmerLights_Line@line
 13288  1BEF  0AA0               	incf	getDimmerLights_Line@line,f
 13289  1BF0                     l7101:	
 13290                           
 13291                           ;Dimmer_B1.c: 1047: }
 13292                           ;Dimmer_B1.c: 1059: return line;
 13293  1BF0  0020               	movlb	0	; select bank0
 13294  1BF1  0820               	movf	getDimmerLights_Line@line,w
 13295  1BF2  0008               	return
 13296  1BF3                     __end_of_getDimmerLights_Line:	
 13297                           
 13298                           	psect	text86
 13299  1F4F                     __ptext86:	
 13300 ;; *************** function _DimmerLights_Main *****************
 13301 ;; Defined at:
 13302 ;;		line 771 in file "../src/Dimmer_B1.c"
 13303 ;; Parameters:    Size  Location     Type
 13304 ;;		None
 13305 ;; Auto vars:     Size  Location     Type
 13306 ;;		None
 13307 ;; Return value:  Size  Location     Type
 13308 ;;		None               void
 13309 ;; Registers used:
 13310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13311 ;; Tracked objects:
 13312 ;;		On entry : 0/0
 13313 ;;		On exit  : 0/0
 13314 ;;		Unchanged: 0/0
 13315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13320 ;;Total ram usage:        0 bytes
 13321 ;; Hardware stack levels used:    1
 13322 ;; Hardware stack levels required when called:   10
 13323 ;; This function calls:
 13324 ;;		_getLoad_OK
 13325 ;;		_getMain_All_Error_Status
 13326 ;;		_getMain_All_LightsStatus
 13327 ;;		_setDimmerLights_Main
 13328 ;; This function is called by:
 13329 ;;		_main
 13330 ;; This function uses a non-reentrant model
 13331 ;;
 13332                           
 13333                           
 13334                           ;psect for function _DimmerLights_Main
 13335  1F4F                     _DimmerLights_Main:	
 13336                           
 13337                           ;Dimmer_B1.c: 774: if (Dimmer.LoadGO == 1) {
 13338                           
 13339                           ;incstack = 0
 13340                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13341  1F4F  0022               	movlb	2	; select bank2
 13342  1F50  1CA0               	btfss	_Dimmer^(0+256),1
 13343  1F51  2F67               	goto	l7675
 13344                           
 13345                           ;Dimmer_B1.c: 775: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13346  1F52  319B  23B3  319F   	fcall	_getLoad_OK
 13347  1F55  3A01               	xorlw	1
 13348  1F56  1903               	skipnz
 13349  1F57  2F65               	goto	l757
 13350  1F58  3000               	movlw	0
 13351  1F59  3191  21AF  319F   	fcall	_getMain_All_Error_Status
 13352  1F5C  3800               	iorlw	0
 13353  1F5D  1D03               	skipz
 13354  1F5E  2F65               	goto	l757
 13355  1F5F  319B  23DE  319F   	fcall	_getMain_All_LightsStatus
 13356  1F62  3800               	iorlw	0
 13357  1F63  1D03               	skipz
 13358  1F64  2F67               	goto	l7675
 13359  1F65                     l757:	
 13360                           
 13361                           ;Dimmer_B1.c: 776: Dimmer.LoadGO = 0;
 13362  1F65  0022               	movlb	2	; select bank2
 13363  1F66  10A0               	bcf	_Dimmer^(0+256),1
 13364  1F67                     l7675:	
 13365                           
 13366                           ;Dimmer_B1.c: 777: }
 13367                           ;Dimmer_B1.c: 778: }
 13368                           ;Dimmer_B1.c: 782: setDimmerLights_Main(1);
 13369  1F67  3001               	movlw	1
 13370  1F68  3197  2795         	fcall	_setDimmerLights_Main
 13371  1F6A  0008               	return
 13372  1F6B                     __end_of_DimmerLights_Main:	
 13373                           
 13374                           	psect	text87
 13375  1795                     __ptext87:	
 13376 ;; *************** function _setDimmerLights_Main *****************
 13377 ;; Defined at:
 13378 ;;		line 800 in file "../src/Dimmer_B1.c"
 13379 ;; Parameters:    Size  Location     Type
 13380 ;;  lights          1    wreg     unsigned char 
 13381 ;; Auto vars:     Size  Location     Type
 13382 ;;  lights          1    1[BANK1 ] unsigned char 
 13383 ;; Return value:  Size  Location     Type
 13384 ;;		None               void
 13385 ;; Registers used:
 13386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13387 ;; Tracked objects:
 13388 ;;		On entry : 0/0
 13389 ;;		On exit  : 0/0
 13390 ;;		Unchanged: 0/0
 13391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;Total ram usage:        1 bytes
 13397 ;; Hardware stack levels used:    1
 13398 ;; Hardware stack levels required when called:    9
 13399 ;; This function calls:
 13400 ;;		_DimmerLights_SelectPointer
 13401 ;;		_getDimmerLights_Allow_Condition
 13402 ;;		_getMain_All_LightsStatus
 13403 ;;		_setDimmerLights_Dimming
 13404 ;;		_setDimmerLights_OnOff
 13405 ;; This function is called by:
 13406 ;;		_DimmerLights_Main
 13407 ;; This function uses a non-reentrant model
 13408 ;;
 13409                           
 13410                           
 13411                           ;psect for function _setDimmerLights_Main
 13412  1795                     _setDimmerLights_Main:	
 13413                           
 13414                           ;incstack = 0
 13415                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13416                           ;setDimmerLights_Main@lights stored from wreg
 13417  1795  0021               	movlb	1	; select bank1
 13418  1796  00E7               	movwf	setDimmerLights_Main@lights^(0+128)
 13419                           
 13420                           ;Dimmer_B1.c: 802: DimmerLights_SelectPointer(lights);
 13421  1797  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13422  1798  319C  2420  3197   	fcall	_DimmerLights_SelectPointer
 13423                           
 13424                           ;Dimmer_B1.c: 803: if (DimmerLights->Trigger == 1) {
 13425  179B  0021               	movlb	1	; select bank1
 13426  179C  0855               	movf	_DimmerLights^(0+128),w
 13427  179D  0086               	movwf	6
 13428  179E  3001               	movlw	1	; select bank2/3
 13429  179F  0087               	movwf	7
 13430  17A0  1C81               	btfss	1,1
 13431  17A1  2FC4               	goto	l7079
 13432                           
 13433                           ;Dimmer_B1.c: 804: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13434  17A2  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13435  17A3  319E  2658  3197   	fcall	_getDimmerLights_Allow_Condition
 13436  17A6  3800               	iorlw	0
 13437  17A7  1D03               	skipz
 13438  17A8  0008               	return
 13439                           
 13440                           ;Dimmer_B1.c: 805: DimmerLights->Trigger = 0;
 13441  17A9  0021               	movlb	1	; select bank1
 13442  17AA  0855               	movf	_DimmerLights^(0+128),w
 13443  17AB  0086               	movwf	6
 13444  17AC  3001               	movlw	1	; select bank2/3
 13445  17AD  0087               	movwf	7
 13446  17AE  1081               	bcf	1,1
 13447                           
 13448                           ;Dimmer_B1.c: 806: if (DimmerLights->Switch == 1) {
 13449  17AF  0855               	movf	_DimmerLights^(0+128),w
 13450  17B0  0086               	movwf	6
 13451  17B1  3001               	movlw	1	; select bank2/3
 13452  17B2  0087               	movwf	7
 13453  17B3  1D01               	btfss	1,2
 13454  17B4  2FBD               	goto	l7077
 13455                           
 13456                           ;Dimmer_B1.c: 807: setDimmerLights_OnOff(lights, 1);
 13457  17B5  0020               	movlb	0	; select bank0
 13458  17B6  01ED               	clrf	setDimmerLights_OnOff@command
 13459  17B7  0AED               	incf	setDimmerLights_OnOff@command,f
 13460  17B8  0021               	movlb	1	; select bank1
 13461  17B9  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13462  17BA  3186  26EB         	fcall	_setDimmerLights_OnOff
 13463                           
 13464                           ;Dimmer_B1.c: 808: } else {
 13465  17BC  0008               	return
 13466  17BD                     l7077:	
 13467                           
 13468                           ;Dimmer_B1.c: 809: setDimmerLights_OnOff(lights, 0);
 13469  17BD  0020               	movlb	0	; select bank0
 13470  17BE  01ED               	clrf	setDimmerLights_OnOff@command
 13471  17BF  0021               	movlb	1	; select bank1
 13472  17C0  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13473  17C1  3186  26EB         	fcall	_setDimmerLights_OnOff
 13474                           
 13475                           ;Dimmer_B1.c: 810: }
 13476                           ;Dimmer_B1.c: 811: }
 13477                           ;Dimmer_B1.c: 812: } else {
 13478  17C3  0008               	return
 13479  17C4                     l7079:	
 13480                           
 13481                           ;Dimmer_B1.c: 813: if (getMain_All_LightsStatus() == 1) {
 13482  17C4  319B  23DE  3197   	fcall	_getMain_All_LightsStatus
 13483  17C7  3A01               	xorlw	1
 13484  17C8  1D03               	skipz
 13485  17C9  2FF3               	goto	l7091
 13486                           
 13487                           ;Dimmer_B1.c: 814: if (DimmerLights->DimmingTrigger == 1) {
 13488  17CA  0021               	movlb	1	; select bank1
 13489  17CB  0855               	movf	_DimmerLights^(0+128),w
 13490  17CC  0086               	movwf	6
 13491  17CD  3001               	movlw	1	; select bank2/3
 13492  17CE  0087               	movwf	7
 13493  17CF  1E01               	btfss	1,4
 13494  17D0  0008               	return
 13495                           
 13496                           ;Dimmer_B1.c: 815: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13497  17D1  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13498  17D2  319E  2658  3197   	fcall	_getDimmerLights_Allow_Condition
 13499  17D5  3800               	iorlw	0
 13500  17D6  1D03               	skipz
 13501  17D7  0008               	return
 13502                           
 13503                           ;Dimmer_B1.c: 816: DimmerLights->DimmingTrigger = 0;
 13504  17D8  0021               	movlb	1	; select bank1
 13505  17D9  0855               	movf	_DimmerLights^(0+128),w
 13506  17DA  0086               	movwf	6
 13507  17DB  3001               	movlw	1	; select bank2/3
 13508  17DC  0087               	movwf	7
 13509  17DD  1201               	bcf	1,4
 13510                           
 13511                           ;Dimmer_B1.c: 817: if (DimmerLights->DimmingSwitch == 1) {
 13512  17DE  0855               	movf	_DimmerLights^(0+128),w
 13513  17DF  0086               	movwf	6
 13514  17E0  3001               	movlw	1	; select bank2/3
 13515  17E1  0087               	movwf	7
 13516  17E2  1E81               	btfss	1,5
 13517  17E3  2FEC               	goto	l7089
 13518                           
 13519                           ;Dimmer_B1.c: 818: setDimmerLights_Dimming(lights, 1);
 13520  17E4  0020               	movlb	0	; select bank0
 13521  17E5  01EA               	clrf	setDimmerLights_Dimming@status
 13522  17E6  0AEA               	incf	setDimmerLights_Dimming@status,f
 13523  17E7  0021               	movlb	1	; select bank1
 13524  17E8  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13525  17E9  3194  24FB         	fcall	_setDimmerLights_Dimming
 13526                           
 13527                           ;Dimmer_B1.c: 819: } else {
 13528  17EB  0008               	return
 13529  17EC                     l7089:	
 13530                           
 13531                           ;Dimmer_B1.c: 820: setDimmerLights_Dimming(lights, 0);
 13532  17EC  0020               	movlb	0	; select bank0
 13533  17ED  01EA               	clrf	setDimmerLights_Dimming@status
 13534  17EE  0021               	movlb	1	; select bank1
 13535  17EF  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13536  17F0  3194  24FB         	fcall	_setDimmerLights_Dimming
 13537                           
 13538                           ;Dimmer_B1.c: 821: }
 13539                           ;Dimmer_B1.c: 822: }
 13540                           ;Dimmer_B1.c: 823: }
 13541                           ;Dimmer_B1.c: 824: } else {
 13542  17F2  0008               	return
 13543  17F3                     l7091:	
 13544                           
 13545                           ;Dimmer_B1.c: 825: if (DimmerLights->DimmingTrigger == 1) {
 13546  17F3  0021               	movlb	1	; select bank1
 13547  17F4  0855               	movf	_DimmerLights^(0+128),w
 13548  17F5  0086               	movwf	6
 13549  17F6  3001               	movlw	1	; select bank2/3
 13550  17F7  0087               	movwf	7
 13551  17F8  1E01               	btfss	1,4
 13552  17F9  0008               	return
 13553                           
 13554                           ;Dimmer_B1.c: 826: DimmerLights->DimmingTrigger = 0;
 13555  17FA  0855               	movf	_DimmerLights^(0+128),w
 13556  17FB  0086               	movwf	6
 13557  17FC  3001               	movlw	1	; select bank2/3
 13558  17FD  0087               	movwf	7
 13559  17FE  1201               	bcf	1,4
 13560  17FF  0008               	return
 13561  1800                     __end_of_setDimmerLights_Main:	
 13562                           
 13563                           	psect	text88
 13564  06EB                     __ptext88:	
 13565 ;; *************** function _setDimmerLights_OnOff *****************
 13566 ;; Defined at:
 13567 ;;		line 834 in file "../src/Dimmer_B1.c"
 13568 ;; Parameters:    Size  Location     Type
 13569 ;;  lights          1    wreg     unsigned char 
 13570 ;;  command         1   77[BANK0 ] unsigned char 
 13571 ;; Auto vars:     Size  Location     Type
 13572 ;;  lights          1    0[BANK1 ] unsigned char 
 13573 ;; Return value:  Size  Location     Type
 13574 ;;		None               void
 13575 ;; Registers used:
 13576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13577 ;; Tracked objects:
 13578 ;;		On entry : 0/0
 13579 ;;		On exit  : 0/0
 13580 ;;		Unchanged: 0/0
 13581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13582 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13583 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13584 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13585 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13586 ;;Total ram usage:        4 bytes
 13587 ;; Hardware stack levels used:    1
 13588 ;; Hardware stack levels required when called:    8
 13589 ;; This function calls:
 13590 ;;		_getCmd_Status
 13591 ;;		_getDelayOff_GO
 13592 ;;		_getDimmerLights_PercentToValue
 13593 ;;		_getMain_All_LightsStatus
 13594 ;;		_setCmd_Status
 13595 ;;		_setDelayOff_GO
 13596 ;;		_setDimmerIntr_ControlStatus
 13597 ;;		_setDimmerIntr_DimmingValue
 13598 ;;		_setDimmerIntr_Dimming_RF
 13599 ;;		_setDimmerIntr_MaxmumValue
 13600 ;;		_setDimmerLights_Line
 13601 ;;		_setLED
 13602 ;;		_setProductData
 13603 ;;		_setRF_DimmerLights
 13604 ;;		_setTxData
 13605 ;; This function is called by:
 13606 ;;		_setDimmerLights_Main
 13607 ;; This function uses a non-reentrant model
 13608 ;;
 13609                           
 13610                           
 13611                           ;psect for function _setDimmerLights_OnOff
 13612  06EB                     _setDimmerLights_OnOff:	
 13613                           
 13614                           ;incstack = 0
 13615                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13616                           ;setDimmerLights_OnOff@lights stored from wreg
 13617  06EB  0021               	movlb	1	; select bank1
 13618  06EC  00E6               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13619                           
 13620                           ;Dimmer_B1.c: 836: if (command == 1) {
 13621  06ED  0020               	movlb	0	; select bank0
 13622  06EE  086D               	movf	setDimmerLights_OnOff@command,w
 13623  06EF  3A01               	xorlw	1
 13624  06F0  1D03               	skipz
 13625  06F1  2F50               	goto	l6757
 13626                           
 13627                           ;Dimmer_B1.c: 837: setDimmerIntr_ControlStatus(lights, 1);
 13628  06F2  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13629  06F3  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13630  06F4  0021               	movlb	1	; select bank1
 13631  06F5  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13632  06F6  319E  2684  3186   	fcall	_setDimmerIntr_ControlStatus
 13633                           
 13634                           ;Dimmer_B1.c: 840: Dimmer.Load_Status = 1;
 13635  06F9  0022               	movlb	2	; select bank2
 13636  06FA  1520               	bsf	_Dimmer^(0+256),2
 13637                           
 13638                           ;Dimmer_B1.c: 841: setDimmerLights_Line(lights);
 13639  06FB  0021               	movlb	1	; select bank1
 13640  06FC  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13641  06FD  319C  24E4  3186   	fcall	_setDimmerLights_Line
 13642                           
 13643                           ;Dimmer_B1.c: 847: setLED(lights, 0);
 13644  0700  0020               	movlb	0	; select bank0
 13645  0701  01A2               	clrf	setLED@command
 13646  0702  0021               	movlb	1	; select bank1
 13647  0703  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13648  0704  3192  22F1  3186   	fcall	_setLED
 13649                           
 13650                           ;Dimmer_B1.c: 848: ;;
 13651                           ;Dimmer_B1.c: 868: if (DimmerLights->DimmingRun == 1) {
 13652  0707  0021               	movlb	1	; select bank1
 13653  0708  0A55               	incf	_DimmerLights^(0+128),w
 13654  0709  0086               	movwf	6
 13655  070A  3001               	movlw	1	; select bank2/3
 13656  070B  0087               	movwf	7
 13657  070C  1F01               	btfss	1,6
 13658  070D  2F32               	goto	l6749
 13659                           
 13660                           ;Dimmer_B1.c: 869: DimmerLights->DimmingRun = 0;
 13661  070E  0A55               	incf	_DimmerLights^(0+128),w
 13662  070F  0086               	movwf	6
 13663  0710  3001               	movlw	1	; select bank2/3
 13664  0711  0087               	movwf	7
 13665  0712  1301               	bcf	1,6
 13666                           
 13667                           ;Dimmer_B1.c: 870: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13668  0713  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13669  0714  3E14               	addlw	20
 13670  0715  076F               	addwf	_product^(0+128),w
 13671  0716  0020               	movlb	0	; select bank0
 13672  0717  00EE               	movwf	??_setDimmerLights_OnOff
 13673  0718  086E               	movf	??_setDimmerLights_OnOff,w
 13674  0719  0086               	movwf	6
 13675  071A  3002               	movlw	2	; select bank4/5
 13676  071B  0087               	movwf	7
 13677  071C  0801               	movf	1,w
 13678  071D  3196  2666  3186   	fcall	_getDimmerLights_PercentToValue
 13679  0720  0020               	movlb	0	; select bank0
 13680  0721  00EF               	movwf	??_setDimmerLights_OnOff+1
 13681  0722  086F               	movf	??_setDimmerLights_OnOff+1,w
 13682  0723  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13683  0724  0021               	movlb	1	; select bank1
 13684  0725  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13685  0726  319C  2438  3186   	fcall	_setDimmerIntr_MaxmumValue
 13686                           
 13687                           ;Dimmer_B1.c: 871: setDimmerIntr_Dimming_RF(lights, 1);
 13688  0729  0020               	movlb	0	; select bank0
 13689  072A  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13690  072B  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13691  072C  0021               	movlb	1	; select bank1
 13692  072D  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13693  072E  319E  269C  3186   	fcall	_setDimmerIntr_Dimming_RF
 13694                           
 13695                           ;Dimmer_B1.c: 872: } else {
 13696  0731  2F49               	goto	l6751
 13697  0732                     l6749:	
 13698                           
 13699                           ;Dimmer_B1.c: 873: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13700  0732  0021               	movlb	1	; select bank1
 13701  0733  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13702  0734  3E14               	addlw	20
 13703  0735  076F               	addwf	_product^(0+128),w
 13704  0736  0020               	movlb	0	; select bank0
 13705  0737  00EE               	movwf	??_setDimmerLights_OnOff
 13706  0738  086E               	movf	??_setDimmerLights_OnOff,w
 13707  0739  0086               	movwf	6
 13708  073A  3002               	movlw	2	; select bank4/5
 13709  073B  0087               	movwf	7
 13710  073C  0801               	movf	1,w
 13711  073D  3196  2666  3186   	fcall	_getDimmerLights_PercentToValue
 13712  0740  0020               	movlb	0	; select bank0
 13713  0741  00EF               	movwf	??_setDimmerLights_OnOff+1
 13714  0742  086F               	movf	??_setDimmerLights_OnOff+1,w
 13715  0743  00E2               	movwf	setDimmerIntr_DimmingValue@value
 13716  0744  0021               	movlb	1	; select bank1
 13717  0745  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13718  0746  319C  2444  3186   	fcall	_setDimmerIntr_DimmingValue
 13719  0749                     l6751:	
 13720                           
 13721                           ;Dimmer_B1.c: 876: }
 13722                           ;Dimmer_B1.c: 878: if (lights == 1) {
 13723  0749  0021               	movlb	1	; select bank1
 13724  074A  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13725  074B  3A01               	xorlw	1
 13726  074C  1D03               	skipz
 13727  074D  2F7F               	goto	l6771
 13728                           
 13729                           ;Dimmer_B1.c: 880: DimmerIntr1.TuneGO = 1;
 13730  074E  1748               	bsf	(_DimmerIntr1^(0+128)+1),6
 13731                           
 13732                           ;Dimmer_B1.c: 886: }
 13733                           ;Dimmer_B1.c: 892: } else if (command == 0) {
 13734                           
 13735                           ;Dimmer_B1.c: 882: } else if (lights == 2) {
 13736  074F  2F7F               	goto	l6771
 13737  0750                     l6757:	
 13738  0750  0020               	movlb	0	; select bank0
 13739  0751  08ED               	movf	setDimmerLights_OnOff@command,f
 13740  0752  1D03               	skipz
 13741  0753  2F7F               	goto	l6771
 13742                           
 13743                           ;Dimmer_B1.c: 893: setDimmerIntr_ControlStatus(lights, 0);
 13744  0754  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13745  0755  0021               	movlb	1	; select bank1
 13746  0756  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13747  0757  319E  2684  3186   	fcall	_setDimmerIntr_ControlStatus
 13748                           
 13749                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 13750  075A  0022               	movlb	2	; select bank2
 13751  075B  1120               	bcf	_Dimmer^(0+256),2
 13752                           
 13753                           ;Dimmer_B1.c: 896: setDimmerLights_Line(0);
 13754  075C  3000               	movlw	0
 13755  075D  319C  24E4  3186   	fcall	_setDimmerLights_Line
 13756                           
 13757                           ;Dimmer_B1.c: 900: if (getDelayOff_GO(lights) == 1) {
 13758  0760  0021               	movlb	1	; select bank1
 13759  0761  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13760  0762  319C  24F5  3186   	fcall	_getDelayOff_GO
 13761  0765  3A01               	xorlw	1
 13762  0766  1D03               	skipz
 13763  0767  2F70               	goto	l784
 13764                           
 13765                           ;Dimmer_B1.c: 901: setDelayOff_GO(lights, 0, 0);
 13766  0768  0020               	movlb	0	; select bank0
 13767  0769  01E5               	clrf	setDelayOff_GO@command
 13768  076A  01E6               	clrf	setDelayOff_GO@value
 13769  076B  0021               	movlb	1	; select bank1
 13770  076C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13771  076D  318C  24AB  3186   	fcall	_setDelayOff_GO
 13772  0770                     l784:	
 13773                           
 13774                           ;Dimmer_B1.c: 902: }
 13775                           ;Dimmer_B1.c: 907: setLED(lights, 1);
 13776  0770  0020               	movlb	0	; select bank0
 13777  0771  01A2               	clrf	setLED@command
 13778  0772  0AA2               	incf	setLED@command,f
 13779  0773  0021               	movlb	1	; select bank1
 13780  0774  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13781  0775  3192  22F1  3186   	fcall	_setLED
 13782                           
 13783                           ;Dimmer_B1.c: 908: ;;
 13784                           ;Dimmer_B1.c: 912: if (lights == 1) {
 13785  0778  0021               	movlb	1	; select bank1
 13786  0779  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13787  077A  3A01               	xorlw	1
 13788  077B  1D03               	skipz
 13789  077C  2F7F               	goto	l6771
 13790                           
 13791                           ;Dimmer_B1.c: 913: RB1 = 0;
 13792  077D  0020               	movlb	0	; select bank0
 13793  077E  108D               	bcf	13,1	;volatile
 13794  077F                     l6771:	
 13795                           
 13796                           ;Dimmer_B1.c: 915: }
 13797                           ;Dimmer_B1.c: 926: }
 13798                           ;Dimmer_B1.c: 929: setRF_DimmerLights(lights, command);
 13799  077F  0020               	movlb	0	; select bank0
 13800  0780  086D               	movf	setDimmerLights_OnOff@command,w
 13801  0781  00EE               	movwf	??_setDimmerLights_OnOff
 13802  0782  086E               	movf	??_setDimmerLights_OnOff,w
 13803  0783  00E5               	movwf	setRF_DimmerLights@on
 13804  0784  0021               	movlb	1	; select bank1
 13805  0785  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13806  0786  3197  2730  3186   	fcall	_setRF_DimmerLights
 13807                           
 13808                           ;Dimmer_B1.c: 931: if (getCmd_Status(1) == 1) {
 13809  0789  3001               	movlw	1
 13810  078A  319D  254A  3186   	fcall	_getCmd_Status
 13811  078D  3A01               	xorlw	1
 13812  078E  1D03               	skipz
 13813  078F  2FAB               	goto	l6785
 13814                           
 13815                           ;Dimmer_B1.c: 932: if (getMain_All_LightsStatus() == 0) {
 13816  0790  319B  23DE  3186   	fcall	_getMain_All_LightsStatus
 13817  0793  3800               	iorlw	0
 13818  0794  1D03               	skipz
 13819  0795  0008               	return
 13820                           
 13821                           ;Dimmer_B1.c: 933: setCmd_Status(1, 0);
 13822  0796  0020               	movlb	0	; select bank0
 13823  0797  01A0               	clrf	setCmd_Status@cmd
 13824  0798  3001               	movlw	1
 13825  0799  319E  26B4  3186   	fcall	_setCmd_Status
 13826                           
 13827                           ;Dimmer_B1.c: 934: setProductData(11, 0);
 13828  079C  0020               	movlb	0	; select bank0
 13829  079D  01E2               	clrf	setProductData@value
 13830  079E  300B               	movlw	11
 13831  079F  319C  242C  3186   	fcall	_setProductData
 13832                           
 13833                           ;Dimmer_B1.c: 935: setProductData(17, 0);
 13834  07A2  0020               	movlb	0	; select bank0
 13835  07A3  01E2               	clrf	setProductData@value
 13836  07A4  3011               	movlw	17
 13837  07A5  319C  242C  3186   	fcall	_setProductData
 13838                           
 13839                           ;Dimmer_B1.c: 936: setTxData();
 13840  07A8  318F  2745         	fcall	_setTxData
 13841                           
 13842                           ;Dimmer_B1.c: 937: }
 13843                           ;Dimmer_B1.c: 938: } else {
 13844  07AA  0008               	return
 13845  07AB                     l6785:	
 13846                           
 13847                           ;Dimmer_B1.c: 939: setTxData();
 13848  07AB  318F  2745         	fcall	_setTxData
 13849  07AD  0008               	return
 13850  07AE                     __end_of_setDimmerLights_OnOff:	
 13851                           
 13852                           	psect	text89
 13853  12F1                     __ptext89:	
 13854 ;; *************** function _setLED *****************
 13855 ;; Defined at:
 13856 ;;		line 81 in file "../src/LED_B1.c"
 13857 ;; Parameters:    Size  Location     Type
 13858 ;;  led             1    wreg     unsigned char 
 13859 ;;  command         1    2[BANK0 ] unsigned char 
 13860 ;; Auto vars:     Size  Location     Type
 13861 ;;  led             1    3[BANK0 ] unsigned char 
 13862 ;; Return value:  Size  Location     Type
 13863 ;;		None               void
 13864 ;; Registers used:
 13865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13866 ;; Tracked objects:
 13867 ;;		On entry : 0/0
 13868 ;;		On exit  : 0/0
 13869 ;;		Unchanged: 0/0
 13870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13871 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13875 ;;Total ram usage:        2 bytes
 13876 ;; Hardware stack levels used:    1
 13877 ;; Hardware stack levels required when called:    6
 13878 ;; This function calls:
 13879 ;;		_LedPointSelect
 13880 ;; This function is called by:
 13881 ;;		_setDimmerLights_OnOff
 13882 ;;		_setLED_Initialization
 13883 ;;		_Exception_Main
 13884 ;;		_setSw_Initialization
 13885 ;; This function uses a non-reentrant model
 13886 ;;
 13887                           
 13888                           
 13889                           ;psect for function _setLED
 13890  12F1                     _setLED:	
 13891                           
 13892                           ;incstack = 0
 13893                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13894                           ;setLED@led stored from wreg
 13895  12F1  0020               	movlb	0	; select bank0
 13896  12F2  00A3               	movwf	setLED@led
 13897                           
 13898                           ;LED_B1.c: 82: LedPointSelect(led);
 13899  12F3  0823               	movf	setLED@led,w
 13900  12F4  319C  2450  3192   	fcall	_LedPointSelect
 13901                           
 13902                           ;LED_B1.c: 83: if (command == 0) {
 13903  12F7  0020               	movlb	0	; select bank0
 13904  12F8  08A2               	movf	setLED@command,f
 13905  12F9  1D03               	skipz
 13906  12FA  2B00               	goto	l6501
 13907                           
 13908                           ;LED_B1.c: 112: if (led == 99) {
 13909  12FB  0823               	movf	setLED@led,w
 13910  12FC  3A63               	xorlw	99
 13911  12FD  1D03               	skipz
 13912  12FE  2B00               	goto	l6501
 13913                           
 13914                           ;LED_B1.c: 116: RB5 = 1;
 13915  12FF  168D               	bsf	13,5	;volatile
 13916  1300                     l6501:	
 13917                           
 13918                           ;LED_B1.c: 118: }
 13919                           ;LED_B1.c: 120: }
 13920                           ;LED_B1.c: 121: if (command == 1) {
 13921  1300  0822               	movf	setLED@command,w
 13922  1301  3A01               	xorlw	1
 13923  1302  1D03               	skipz
 13924  1303  2B09               	goto	l6507
 13925                           
 13926                           ;LED_B1.c: 150: if (led == 99) {
 13927  1304  0823               	movf	setLED@led,w
 13928  1305  3A63               	xorlw	99
 13929  1306  1D03               	skipz
 13930  1307  2B09               	goto	l6507
 13931                           
 13932                           ;LED_B1.c: 154: RB5 = 0;
 13933  1308  128D               	bcf	13,5	;volatile
 13934  1309                     l6507:	
 13935                           
 13936                           ;LED_B1.c: 156: }
 13937                           ;LED_B1.c: 158: }
 13938                           ;LED_B1.c: 159: if (command == 10) {
 13939  1309  0822               	movf	setLED@command,w
 13940  130A  3A0A               	xorlw	10
 13941  130B  1D03               	skipz
 13942  130C  2B1F               	goto	l6515
 13943                           
 13944                           ;LED_B1.c: 160: LED->GO = 0;
 13945  130D  0021               	movlb	1	; select bank1
 13946  130E  0856               	movf	_LED^(0+128),w
 13947  130F  0086               	movwf	6
 13948  1310  3001               	movlw	1	; select bank2/3
 13949  1311  0087               	movwf	7
 13950  1312  1081               	bcf	1,1
 13951                           
 13952                           ;LED_B1.c: 161: LED->Time = 0;
 13953  1313  0A56               	incf	_LED^(0+128),w
 13954  1314  0086               	movwf	6
 13955  1315  3001               	movlw	1	; select bank2/3
 13956  1316  0087               	movwf	7
 13957  1317  3000               	movlw	0
 13958  1318  3FC0               	movwi [0]fsr1
 13959  1319  3FC1               	movwi [1]fsr1
 13960                           
 13961                           ;LED_B1.c: 190: if (led == 99) {
 13962  131A  0020               	movlb	0	; select bank0
 13963  131B  0823               	movf	setLED@led,w
 13964  131C  3A63               	xorlw	99
 13965  131D  1903               	btfsc	3,2
 13966                           
 13967                           ;LED_B1.c: 194: RB5 = 1;
 13968  131E  168D               	bsf	13,5	;volatile
 13969  131F                     l6515:	
 13970                           
 13971                           ;LED_B1.c: 196: }
 13972                           ;LED_B1.c: 198: }
 13973                           ;LED_B1.c: 199: if (command == 11) {
 13974  131F  0822               	movf	setLED@command,w
 13975  1320  3A0B               	xorlw	11
 13976  1321  1D03               	skipz
 13977  1322  0008               	return
 13978                           
 13979                           ;LED_B1.c: 200: LED->GO = 1;
 13980  1323  0021               	movlb	1	; select bank1
 13981  1324  0856               	movf	_LED^(0+128),w
 13982  1325  0086               	movwf	6
 13983  1326  3001               	movlw	1	; select bank2/3
 13984  1327  0087               	movwf	7
 13985  1328  1481               	bsf	1,1
 13986  1329  0008               	return
 13987  132A                     __end_of_setLED:	
 13988                           
 13989                           	psect	text90
 13990  1C50                     __ptext90:	
 13991 ;; *************** function _LedPointSelect *****************
 13992 ;; Defined at:
 13993 ;;		line 7 in file "../src/LED_B1.c"
 13994 ;; Parameters:    Size  Location     Type
 13995 ;;  led             1    wreg     unsigned char 
 13996 ;; Auto vars:     Size  Location     Type
 13997 ;;  led             1    1[BANK0 ] unsigned char 
 13998 ;; Return value:  Size  Location     Type
 13999 ;;		None               void
 14000 ;; Registers used:
 14001 ;;		wreg
 14002 ;; Tracked objects:
 14003 ;;		On entry : 0/0
 14004 ;;		On exit  : 0/0
 14005 ;;		Unchanged: 0/0
 14006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;Total ram usage:        2 bytes
 14012 ;; Hardware stack levels used:    1
 14013 ;; Hardware stack levels required when called:    5
 14014 ;; This function calls:
 14015 ;;		Nothing
 14016 ;; This function is called by:
 14017 ;;		_setLED_Initialization
 14018 ;;		_setLED
 14019 ;;		_setLED_Main
 14020 ;; This function uses a non-reentrant model
 14021 ;;
 14022                           
 14023                           
 14024                           ;psect for function _LedPointSelect
 14025  1C50                     _LedPointSelect:	
 14026                           
 14027                           ;incstack = 0
 14028                           ; Regs used in _LedPointSelect: [wreg]
 14029                           ;LedPointSelect@led stored from wreg
 14030  1C50  0020               	movlb	0	; select bank0
 14031  1C51  00A1               	movwf	LedPointSelect@led
 14032                           
 14033                           ;LED_B1.c: 24: if (led == 99) {
 14034  1C52  0821               	movf	LedPointSelect@led,w
 14035  1C53  3A63               	xorlw	99
 14036  1C54  1D03               	skipz
 14037  1C55  0008               	return
 14038                           
 14039                           ;LED_B1.c: 25: LED = &VarErrLED;
 14040  1C56  3067               	movlw	_VarErrLED& (0+255)
 14041  1C57  00A0               	movwf	??_LedPointSelect
 14042  1C58  0820               	movf	??_LedPointSelect,w
 14043  1C59  0021               	movlb	1	; select bank1
 14044  1C5A  00D6               	movwf	_LED^(0+128)
 14045  1C5B  0008               	return
 14046  1C5C                     __end_of_LedPointSelect:	
 14047                           
 14048                           	psect	text91
 14049  1E9C                     __ptext91:	
 14050 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14051 ;; Defined at:
 14052 ;;		line 219 in file "../src/Dimmer_B1.c"
 14053 ;; Parameters:    Size  Location     Type
 14054 ;;  lights          1    wreg     unsigned char 
 14055 ;;  command         1    0[BANK0 ] unsigned char 
 14056 ;; Auto vars:     Size  Location     Type
 14057 ;;  lights          1    2[BANK0 ] unsigned char 
 14058 ;; Return value:  Size  Location     Type
 14059 ;;		None               void
 14060 ;; Registers used:
 14061 ;;		wreg, status,2, status,0
 14062 ;; Tracked objects:
 14063 ;;		On entry : 0/0
 14064 ;;		On exit  : 0/0
 14065 ;;		Unchanged: 0/0
 14066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14067 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14070 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14071 ;;Total ram usage:        3 bytes
 14072 ;; Hardware stack levels used:    1
 14073 ;; Hardware stack levels required when called:    5
 14074 ;; This function calls:
 14075 ;;		Nothing
 14076 ;; This function is called by:
 14077 ;;		_setDimmerLights_OnOff
 14078 ;;		_setRFSW_AdjControl
 14079 ;; This function uses a non-reentrant model
 14080 ;;
 14081                           
 14082                           
 14083                           ;psect for function _setDimmerIntr_Dimming_RF
 14084  1E9C                     _setDimmerIntr_Dimming_RF:	
 14085                           
 14086                           ;incstack = 0
 14087                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14088                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14089  1E9C  0020               	movlb	0	; select bank0
 14090  1E9D  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14091                           
 14092                           ;Dimmer_B1.c: 221: if (lights == 1) {
 14093  1E9E  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14094  1E9F  3A01               	xorlw	1
 14095  1EA0  1D03               	skipz
 14096  1EA1  0008               	return
 14097                           
 14098                           ;Dimmer_B1.c: 222: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14099  1EA2  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14100  1EA3  3A01               	xorlw	1
 14101  1EA4  3000               	movlw	0
 14102  1EA5  1903               	skipnz
 14103  1EA6  3001               	movlw	1
 14104  1EA7  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14105  1EA8  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14106  1EA9  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14107  1EAA  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14108  1EAB  0021               	movlb	1	; select bank1
 14109  1EAC  0847               	movf	_DimmerIntr1^(0+128),w
 14110  1EAD  0020               	movlb	0	; select bank0
 14111  1EAE  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14112  1EAF  39BF               	andlw	-65
 14113  1EB0  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14114  1EB1  0021               	movlb	1	; select bank1
 14115  1EB2  00C7               	movwf	_DimmerIntr1^(0+128)
 14116  1EB3  0008               	return
 14117  1EB4                     __end_of_setDimmerIntr_Dimming_RF:	
 14118                           
 14119                           	psect	text92
 14120  1C44                     __ptext92:	
 14121 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14122 ;; Defined at:
 14123 ;;		line 84 in file "../src/Dimmer_B1.c"
 14124 ;; Parameters:    Size  Location     Type
 14125 ;;  lights          1    wreg     unsigned char 
 14126 ;;  value           1   66[BANK0 ] unsigned char 
 14127 ;; Auto vars:     Size  Location     Type
 14128 ;;  lights          1   68[BANK0 ] unsigned char 
 14129 ;; Return value:  Size  Location     Type
 14130 ;;		None               void
 14131 ;; Registers used:
 14132 ;;		wreg
 14133 ;; Tracked objects:
 14134 ;;		On entry : 0/0
 14135 ;;		On exit  : 0/0
 14136 ;;		Unchanged: 0/0
 14137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14138 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14141 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14142 ;;Total ram usage:        3 bytes
 14143 ;; Hardware stack levels used:    1
 14144 ;; Hardware stack levels required when called:    5
 14145 ;; This function calls:
 14146 ;;		Nothing
 14147 ;; This function is called by:
 14148 ;;		_setDimmerLights_OnOff
 14149 ;; This function uses a non-reentrant model
 14150 ;;
 14151                           
 14152                           
 14153                           ;psect for function _setDimmerIntr_DimmingValue
 14154  1C44                     _setDimmerIntr_DimmingValue:	
 14155                           
 14156                           ;incstack = 0
 14157                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14158                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14159  1C44  0020               	movlb	0	; select bank0
 14160  1C45  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14161                           
 14162                           ;Dimmer_B1.c: 86: if (lights == 1) {
 14163  1C46  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14164  1C47  3A01               	xorlw	1
 14165  1C48  1D03               	skipz
 14166  1C49  0008               	return
 14167                           
 14168                           ;Dimmer_B1.c: 87: DimmerIntr1.DimmingValue = value;
 14169  1C4A  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14170  1C4B  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14171  1C4C  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14172  1C4D  0021               	movlb	1	; select bank1
 14173  1C4E  00CC               	movwf	(_DimmerIntr1^(0+128)+5)
 14174  1C4F  0008               	return
 14175  1C50                     __end_of_setDimmerIntr_DimmingValue:	
 14176                           
 14177                           	psect	text93
 14178  1E84                     __ptext93:	
 14179 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14180 ;; Defined at:
 14181 ;;		line 66 in file "../src/Dimmer_B1.c"
 14182 ;; Parameters:    Size  Location     Type
 14183 ;;  lights          1    wreg     unsigned char 
 14184 ;;  command         1    0[BANK0 ] unsigned char 
 14185 ;; Auto vars:     Size  Location     Type
 14186 ;;  lights          1    2[BANK0 ] unsigned char 
 14187 ;; Return value:  Size  Location     Type
 14188 ;;		None               void
 14189 ;; Registers used:
 14190 ;;		wreg, status,2, status,0
 14191 ;; Tracked objects:
 14192 ;;		On entry : 0/0
 14193 ;;		On exit  : 0/0
 14194 ;;		Unchanged: 0/0
 14195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14196 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;Total ram usage:        3 bytes
 14201 ;; Hardware stack levels used:    1
 14202 ;; Hardware stack levels required when called:    5
 14203 ;; This function calls:
 14204 ;;		Nothing
 14205 ;; This function is called by:
 14206 ;;		_setDimmerLights_OnOff
 14207 ;; This function uses a non-reentrant model
 14208 ;;
 14209                           
 14210                           
 14211                           ;psect for function _setDimmerIntr_ControlStatus
 14212  1E84                     _setDimmerIntr_ControlStatus:	
 14213                           
 14214                           ;incstack = 0
 14215                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14216                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14217  1E84  0020               	movlb	0	; select bank0
 14218  1E85  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14219                           
 14220                           ;Dimmer_B1.c: 68: if (lights == 1) {
 14221  1E86  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14222  1E87  3A01               	xorlw	1
 14223  1E88  1D03               	skipz
 14224  1E89  0008               	return
 14225                           
 14226                           ;Dimmer_B1.c: 69: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14227  1E8A  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14228  1E8B  3A01               	xorlw	1
 14229  1E8C  3000               	movlw	0
 14230  1E8D  1903               	skipnz
 14231  1E8E  3001               	movlw	1
 14232  1E8F  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14233  1E90  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14234  1E91  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14235  1E92  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14236  1E93  0021               	movlb	1	; select bank1
 14237  1E94  0847               	movf	_DimmerIntr1^(0+128),w
 14238  1E95  0020               	movlb	0	; select bank0
 14239  1E96  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14240  1E97  39F7               	andlw	-9
 14241  1E98  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14242  1E99  0021               	movlb	1	; select bank1
 14243  1E9A  00C7               	movwf	_DimmerIntr1^(0+128)
 14244  1E9B  0008               	return
 14245  1E9C                     __end_of_setDimmerIntr_ControlStatus:	
 14246                           
 14247                           	psect	text94
 14248  0CAB                     __ptext94:	
 14249 ;; *************** function _setDelayOff_GO *****************
 14250 ;; Defined at:
 14251 ;;		line 87 in file "../src/DelayOff_B1.c"
 14252 ;; Parameters:    Size  Location     Type
 14253 ;;  sw              1    wreg     unsigned char 
 14254 ;;  command         1   69[BANK0 ] unsigned char 
 14255 ;;  value           1   70[BANK0 ] unsigned char 
 14256 ;; Auto vars:     Size  Location     Type
 14257 ;;  sw              1   76[BANK0 ] unsigned char 
 14258 ;;  k               1   75[BANK0 ] unsigned char 
 14259 ;;  j               1   74[BANK0 ] unsigned char 
 14260 ;;  i               1   73[BANK0 ] unsigned char 
 14261 ;; Return value:  Size  Location     Type
 14262 ;;		None               void
 14263 ;; Registers used:
 14264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14265 ;; Tracked objects:
 14266 ;;		On entry : 0/0
 14267 ;;		On exit  : 0/0
 14268 ;;		Unchanged: 0/0
 14269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14270 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;Total ram usage:        8 bytes
 14275 ;; Hardware stack levels used:    1
 14276 ;; Hardware stack levels required when called:    6
 14277 ;; This function calls:
 14278 ;;		_DelayOffPointSelect
 14279 ;;		___bmul
 14280 ;;		_setProductData
 14281 ;; This function is called by:
 14282 ;;		_setDimmerLights_OnOff
 14283 ;;		_setRFSW_Control
 14284 ;; This function uses a non-reentrant model
 14285 ;;
 14286                           
 14287                           
 14288                           ;psect for function _setDelayOff_GO
 14289  0CAB                     _setDelayOff_GO:	
 14290                           
 14291                           ;incstack = 0
 14292                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14293                           ;setDelayOff_GO@sw stored from wreg
 14294  0CAB  0020               	movlb	0	; select bank0
 14295  0CAC  00EC               	movwf	setDelayOff_GO@sw
 14296                           
 14297                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14298  0CAD  086C               	movf	setDelayOff_GO@sw,w
 14299  0CAE  319C  2414  318C   	fcall	_DelayOffPointSelect
 14300                           
 14301                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14302  0CB1  0020               	movlb	0	; select bank0
 14303  0CB2  0865               	movf	setDelayOff_GO@command,w
 14304  0CB3  3A01               	xorlw	1
 14305  0CB4  3000               	movlw	0
 14306  0CB5  1903               	skipnz
 14307  0CB6  3001               	movlw	1
 14308  0CB7  00E7               	movwf	??_setDelayOff_GO
 14309  0CB8  0021               	movlb	1	; select bank1
 14310  0CB9  0854               	movf	_DelayOff^(0+128),w
 14311  0CBA  0086               	movwf	6
 14312  0CBB  3001               	movlw	1	; select bank2/3
 14313  0CBC  0087               	movwf	7
 14314  0CBD  0020               	movlb	0	; select bank0
 14315  0CBE  0DE7               	rlf	??_setDelayOff_GO,f
 14316  0CBF  0801               	movf	1,w
 14317  0CC0  0667               	xorwf	??_setDelayOff_GO,w
 14318  0CC1  39FD               	andlw	-3
 14319  0CC2  0667               	xorwf	??_setDelayOff_GO,w
 14320  0CC3  0081               	movwf	1
 14321                           
 14322                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14323  0CC4  0021               	movlb	1	; select bank1
 14324  0CC5  0854               	movf	_DelayOff^(0+128),w
 14325  0CC6  3E02               	addlw	2
 14326  0CC7  0086               	movwf	6
 14327  0CC8  3001               	movlw	1	; select bank2/3
 14328  0CC9  0087               	movwf	7
 14329  0CCA  3000               	movlw	0
 14330  0CCB  3FC0               	movwi [0]fsr1
 14331  0CCC  3FC1               	movwi [1]fsr1
 14332                           
 14333                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14334  0CCD  0854               	movf	_DelayOff^(0+128),w
 14335  0CCE  3E04               	addlw	4
 14336  0CCF  0086               	movwf	6
 14337  0CD0  3001               	movlw	1	; select bank2/3
 14338  0CD1  0087               	movwf	7
 14339  0CD2  0181               	clrf	1
 14340                           
 14341                           ;DelayOff_B1.c: 94: if (command == 1) {
 14342  0CD3  0020               	movlb	0	; select bank0
 14343  0CD4  0865               	movf	setDelayOff_GO@command,w
 14344  0CD5  3A01               	xorlw	1
 14345  0CD6  1D03               	skipz
 14346  0CD7  2D2D               	goto	l6109
 14347                           
 14348                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14349  0CD8  3005               	movlw	5
 14350  0CD9  00E7               	movwf	??_setDelayOff_GO
 14351  0CDA  0867               	movf	??_setDelayOff_GO,w
 14352  0CDB  00E9               	movwf	setDelayOff_GO@i
 14353  0CDC  01EA               	clrf	setDelayOff_GO@j
 14354  0CDD  01EB               	clrf	setDelayOff_GO@k
 14355                           
 14356                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14357  0CDE  300F               	movlw	15
 14358  0CDF  0566               	andwf	setDelayOff_GO@value,w
 14359  0CE0  00E7               	movwf	??_setDelayOff_GO
 14360  0CE1  0867               	movf	??_setDelayOff_GO,w
 14361  0CE2  3A05               	xorlw	5
 14362  0CE3  1903               	skipnz
 14363  0CE4  2CE9               	goto	l6095
 14364  0CE5  0866               	movf	setDelayOff_GO@value,w
 14365  0CE6  390F               	andlw	15
 14366  0CE7  1D03               	btfss	3,2
 14367  0CE8  2D19               	goto	l6105
 14368  0CE9                     l6095:	
 14369  0CE9  3031               	movlw	49
 14370  0CEA  0266               	subwf	setDelayOff_GO@value,w
 14371  0CEB  1803               	skipnc
 14372  0CEC  2D19               	goto	l6105
 14373                           
 14374                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14375  0CED  0866               	movf	setDelayOff_GO@value,w
 14376  0CEE  390F               	andlw	15
 14377  0CEF  00E7               	movwf	??_setDelayOff_GO
 14378  0CF0  0867               	movf	??_setDelayOff_GO,w
 14379  0CF1  00EA               	movwf	setDelayOff_GO@j
 14380                           
 14381                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14382  0CF2  0866               	movf	setDelayOff_GO@value,w
 14383  0CF3  00E7               	movwf	??_setDelayOff_GO
 14384  0CF4  3004               	movlw	4
 14385  0CF5                     u5245:	
 14386  0CF5  36E7               	lsrf	??_setDelayOff_GO,f
 14387  0CF6  0B89               	decfsz	9,f
 14388  0CF7  2CF5               	goto	u5245
 14389  0CF8  0867               	movf	??_setDelayOff_GO,w
 14390  0CF9  390F               	andlw	15
 14391  0CFA  00E8               	movwf	??_setDelayOff_GO+1
 14392  0CFB  0868               	movf	??_setDelayOff_GO+1,w
 14393  0CFC  00EB               	movwf	setDelayOff_GO@k
 14394                           
 14395                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14396  0CFD  300A               	movlw	10
 14397  0CFE  00E7               	movwf	??_setDelayOff_GO
 14398  0CFF  0867               	movf	??_setDelayOff_GO,w
 14399  0D00  00A0               	movwf	___bmul@multiplicand
 14400  0D01  086B               	movf	setDelayOff_GO@k,w
 14401  0D02  319D  255C  318C   	fcall	___bmul
 14402  0D05  0020               	movlb	0	; select bank0
 14403  0D06  076A               	addwf	setDelayOff_GO@j,w
 14404  0D07  00E8               	movwf	??_setDelayOff_GO+1
 14405  0D08  0021               	movlb	1	; select bank1
 14406  0D09  0A54               	incf	_DelayOff^(0+128),w
 14407  0D0A  0086               	movwf	6
 14408  0D0B  3001               	movlw	1	; select bank2/3
 14409  0D0C  0087               	movwf	7
 14410  0D0D  0020               	movlb	0	; select bank0
 14411  0D0E  0868               	movf	??_setDelayOff_GO+1,w
 14412  0D0F  0081               	movwf	1
 14413                           
 14414                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14415  0D10  0866               	movf	setDelayOff_GO@value,w
 14416  0D11  00E7               	movwf	??_setDelayOff_GO
 14417  0D12  0867               	movf	??_setDelayOff_GO,w
 14418  0D13  00E2               	movwf	setProductData@value
 14419  0D14  086C               	movf	setDelayOff_GO@sw,w
 14420  0D15  3E1A               	addlw	26
 14421  0D16  319C  242C         	fcall	_setProductData
 14422                           
 14423                           ;DelayOff_B1.c: 103: } else {
 14424  0D18  0008               	return
 14425  0D19                     l6105:	
 14426                           
 14427                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14428  0D19  3005               	movlw	5
 14429  0D1A  0020               	movlb	0	; select bank0
 14430  0D1B  00E7               	movwf	??_setDelayOff_GO
 14431  0D1C  0021               	movlb	1	; select bank1
 14432  0D1D  0A54               	incf	_DelayOff^(0+128),w
 14433  0D1E  0086               	movwf	6
 14434  0D1F  3001               	movlw	1	; select bank2/3
 14435  0D20  0087               	movwf	7
 14436  0D21  0020               	movlb	0	; select bank0
 14437  0D22  0867               	movf	??_setDelayOff_GO,w
 14438  0D23  0081               	movwf	1
 14439                           
 14440                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14441  0D24  3005               	movlw	5
 14442  0D25  00E7               	movwf	??_setDelayOff_GO
 14443  0D26  0867               	movf	??_setDelayOff_GO,w
 14444  0D27  00E2               	movwf	setProductData@value
 14445  0D28  086C               	movf	setDelayOff_GO@sw,w
 14446  0D29  3E1A               	addlw	26
 14447  0D2A  319C  242C         	fcall	_setProductData
 14448                           
 14449                           ;DelayOff_B1.c: 106: }
 14450                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14451  0D2C  0008               	return
 14452  0D2D                     l6109:	
 14453  0D2D  0020               	movlb	0	; select bank0
 14454  0D2E  08E5               	movf	setDelayOff_GO@command,f
 14455  0D2F  1D03               	skipz
 14456  0D30  0008               	return
 14457                           
 14458                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14459  0D31  01E2               	clrf	setProductData@value
 14460  0D32  086C               	movf	setDelayOff_GO@sw,w
 14461  0D33  3E1A               	addlw	26
 14462  0D34  319C  242C         	fcall	_setProductData
 14463  0D36  0008               	return
 14464  0D37                     __end_of_setDelayOff_GO:	
 14465                           
 14466                           	psect	text95
 14467  1D5C                     __ptext95:	
 14468 ;; *************** function ___bmul *****************
 14469 ;; Defined at:
 14470 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14471 ;; Parameters:    Size  Location     Type
 14472 ;;  multiplier      1    wreg     unsigned char 
 14473 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14474 ;; Auto vars:     Size  Location     Type
 14475 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14476 ;;  product         1    2[BANK0 ] unsigned char 
 14477 ;; Return value:  Size  Location     Type
 14478 ;;                  1    wreg      unsigned char 
 14479 ;; Registers used:
 14480 ;;		wreg, status,2, status,0
 14481 ;; Tracked objects:
 14482 ;;		On entry : 0/0
 14483 ;;		On exit  : 0/0
 14484 ;;		Unchanged: 0/0
 14485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14486 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14487 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;Total ram usage:        4 bytes
 14491 ;; Hardware stack levels used:    1
 14492 ;; Hardware stack levels required when called:    5
 14493 ;; This function calls:
 14494 ;;		Nothing
 14495 ;; This function is called by:
 14496 ;;		_setDelayOff_GO
 14497 ;;		_DelayTimejudge
 14498 ;; This function uses a non-reentrant model
 14499 ;;
 14500                           
 14501                           
 14502                           ;psect for function ___bmul
 14503  1D5C                     ___bmul:	
 14504                           
 14505                           ;incstack = 0
 14506                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14507                           ;___bmul@multiplier stored from wreg
 14508  1D5C  0020               	movlb	0	; select bank0
 14509  1D5D  00A3               	movwf	___bmul@multiplier
 14510  1D5E  01A2               	clrf	___bmul@product
 14511  1D5F                     l5773:	
 14512  1D5F  1C23               	btfss	___bmul@multiplier,0
 14513  1D60  2D65               	goto	l5777
 14514  1D61  0820               	movf	___bmul@multiplicand,w
 14515  1D62  00A1               	movwf	??___bmul
 14516  1D63  0821               	movf	??___bmul,w
 14517  1D64  07A2               	addwf	___bmul@product,f
 14518  1D65                     l5777:	
 14519  1D65  1003               	clrc
 14520  1D66  0DA0               	rlf	___bmul@multiplicand,f
 14521  1D67  1003               	clrc
 14522  1D68  0CA3               	rrf	___bmul@multiplier,f
 14523  1D69  08A3               	movf	___bmul@multiplier,f
 14524  1D6A  1D03               	skipz
 14525  1D6B  2D5F               	goto	l5773
 14526  1D6C  0822               	movf	___bmul@product,w
 14527  1D6D  0008               	return
 14528  1D6E                     __end_of___bmul:	
 14529                           
 14530                           	psect	text96
 14531  1EB4                     __ptext96:	
 14532 ;; *************** function _setCmd_Status *****************
 14533 ;; Defined at:
 14534 ;;		line 651 in file "../src/Main_B1.c"
 14535 ;; Parameters:    Size  Location     Type
 14536 ;;  number          1    wreg     unsigned char 
 14537 ;;  cmd             1    0[BANK0 ] unsigned char 
 14538 ;; Auto vars:     Size  Location     Type
 14539 ;;  number          1    2[BANK0 ] unsigned char 
 14540 ;; Return value:  Size  Location     Type
 14541 ;;		None               void
 14542 ;; Registers used:
 14543 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14544 ;; Tracked objects:
 14545 ;;		On entry : 0/0
 14546 ;;		On exit  : 0/0
 14547 ;;		Unchanged: 0/0
 14548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14549 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14552 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14553 ;;Total ram usage:        3 bytes
 14554 ;; Hardware stack levels used:    1
 14555 ;; Hardware stack levels required when called:    5
 14556 ;; This function calls:
 14557 ;;		Nothing
 14558 ;; This function is called by:
 14559 ;;		_setDimmerLights_OnOff
 14560 ;;		_setControl_Lights_Table
 14561 ;; This function uses a non-reentrant model
 14562 ;;
 14563                           
 14564                           
 14565                           ;psect for function _setCmd_Status
 14566  1EB4                     _setCmd_Status:	
 14567                           
 14568                           ;incstack = 0
 14569                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14570                           ;setCmd_Status@number stored from wreg
 14571  1EB4  0020               	movlb	0	; select bank0
 14572  1EB5  00A2               	movwf	setCmd_Status@number
 14573                           
 14574                           ;Main_B1.c: 652: switch (number) {
 14575  1EB6  2EC6               	goto	l6275
 14576  1EB7                     l6271:	
 14577                           ;Main_B1.c: 653: case 1:
 14578                           
 14579                           
 14580                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14581  1EB7  0820               	movf	setCmd_Status@cmd,w
 14582  1EB8  3A01               	xorlw	1
 14583  1EB9  3000               	movlw	0
 14584  1EBA  1903               	skipnz
 14585  1EBB  3001               	movlw	1
 14586  1EBC  00A1               	movwf	??_setCmd_Status
 14587  1EBD  0021               	movlb	1	; select bank1
 14588  1EBE  0853               	movf	_Cmd^(0+128),w
 14589  1EBF  0020               	movlb	0	; select bank0
 14590  1EC0  0621               	xorwf	??_setCmd_Status,w
 14591  1EC1  39FE               	andlw	-2
 14592  1EC2  0621               	xorwf	??_setCmd_Status,w
 14593  1EC3  0021               	movlb	1	; select bank1
 14594  1EC4  00D3               	movwf	_Cmd^(0+128)
 14595                           
 14596                           ;Main_B1.c: 656: }
 14597                           
 14598                           ;Main_B1.c: 655: break;
 14599  1EC5  0008               	return
 14600  1EC6                     l6275:	
 14601  1EC6  0020               	movlb	0	; select bank0
 14602  1EC7  0822               	movf	setCmd_Status@number,w
 14603                           
 14604                           ; Switch size 1, requested type "space"
 14605                           ; Number of cases is 1, Range of values is 1 to 1
 14606                           ; switch strategies available:
 14607                           ; Name         Instructions Cycles
 14608                           ; simple_byte            4     3 (average)
 14609                           ; direct_byte           11     9 (fixed)
 14610                           ; jumptable            263     9 (fixed)
 14611                           ;	Chosen strategy is simple_byte
 14612  1EC8  3A01               	xorlw	1	; case 1
 14613  1EC9  1903               	skipnz
 14614  1ECA  2EB7               	goto	l6271
 14615  1ECB  2ECC               	goto	l1507
 14616  1ECC                     l1507:	
 14617  1ECC  0008               	return
 14618  1ECD                     __end_of_setCmd_Status:	
 14619                           
 14620                           	psect	text97
 14621  1BDE                     __ptext97:	
 14622 ;; *************** function _getMain_All_LightsStatus *****************
 14623 ;; Defined at:
 14624 ;;		line 373 in file "../src/Main_B1.c"
 14625 ;; Parameters:    Size  Location     Type
 14626 ;;		None
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;  status          1    0[BANK0 ] unsigned char 
 14629 ;; Return value:  Size  Location     Type
 14630 ;;                  1    wreg      unsigned char 
 14631 ;; Registers used:
 14632 ;;		wreg, status,2
 14633 ;; Tracked objects:
 14634 ;;		On entry : 0/0
 14635 ;;		On exit  : 0/0
 14636 ;;		Unchanged: 0/0
 14637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;Total ram usage:        1 bytes
 14643 ;; Hardware stack levels used:    1
 14644 ;; Hardware stack levels required when called:    5
 14645 ;; This function calls:
 14646 ;;		Nothing
 14647 ;; This function is called by:
 14648 ;;		_DimmerLights_Main
 14649 ;;		_setDimmerLights_Main
 14650 ;;		_setDimmerLights_OnOff
 14651 ;;		_Flash_Memory_Main
 14652 ;;		_Exception_Main
 14653 ;;		_Load_Main
 14654 ;;		_setTemp_Main
 14655 ;;		_setControl_Lights_Table
 14656 ;; This function uses a non-reentrant model
 14657 ;;
 14658                           
 14659                           
 14660                           ;psect for function _getMain_All_LightsStatus
 14661  1BDE                     _getMain_All_LightsStatus:	
 14662                           
 14663                           ;Main_B1.c: 374: char status = 0;
 14664                           
 14665                           ;incstack = 0
 14666                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14667  1BDE  0020               	movlb	0	; select bank0
 14668  1BDF  01A0               	clrf	getMain_All_LightsStatus@status
 14669                           
 14670                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14671  1BE0  3000               	movlw	0
 14672  1BE1  0022               	movlb	2	; select bank2
 14673  1BE2  185B               	btfsc	(_DimmerLights1^(0+256)+1),0
 14674  1BE3  3001               	movlw	1
 14675  1BE4  0020               	movlb	0	; select bank0
 14676  1BE5  00A0               	movwf	getMain_All_LightsStatus@status
 14677                           
 14678                           ;Main_B1.c: 420: return status;
 14679  1BE6  0820               	movf	getMain_All_LightsStatus@status,w
 14680  1BE7  0008               	return
 14681  1BE8                     __end_of_getMain_All_LightsStatus:	
 14682                           
 14683                           	psect	text98
 14684  1CF5                     __ptext98:	
 14685 ;; *************** function _getDelayOff_GO *****************
 14686 ;; Defined at:
 14687 ;;		line 114 in file "../src/DelayOff_B1.c"
 14688 ;; Parameters:    Size  Location     Type
 14689 ;;  sw              1    wreg     unsigned char 
 14690 ;; Auto vars:     Size  Location     Type
 14691 ;;  sw              1    2[BANK0 ] unsigned char 
 14692 ;;  go              1    3[BANK0 ] unsigned char 
 14693 ;; Return value:  Size  Location     Type
 14694 ;;                  1    wreg      unsigned char 
 14695 ;; Registers used:
 14696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14697 ;; Tracked objects:
 14698 ;;		On entry : 0/0
 14699 ;;		On exit  : 0/0
 14700 ;;		Unchanged: 0/0
 14701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;Total ram usage:        2 bytes
 14707 ;; Hardware stack levels used:    1
 14708 ;; Hardware stack levels required when called:    6
 14709 ;; This function calls:
 14710 ;;		_DelayOffPointSelect
 14711 ;; This function is called by:
 14712 ;;		_setDimmerLights_OnOff
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716                           
 14717                           ;psect for function _getDelayOff_GO
 14718  1CF5                     _getDelayOff_GO:	
 14719                           
 14720                           ;incstack = 0
 14721                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14722                           ;getDelayOff_GO@sw stored from wreg
 14723  1CF5  0020               	movlb	0	; select bank0
 14724  1CF6  00A2               	movwf	getDelayOff_GO@sw
 14725                           
 14726                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 14727  1CF7  0822               	movf	getDelayOff_GO@sw,w
 14728  1CF8  319C  2414         	fcall	_DelayOffPointSelect
 14729                           
 14730                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 14731  1CFA  0021               	movlb	1	; select bank1
 14732  1CFB  0854               	movf	_DelayOff^(0+128),w
 14733  1CFC  0086               	movwf	6
 14734  1CFD  3001               	movlw	1	; select bank2/3
 14735  1CFE  0087               	movwf	7
 14736  1CFF  3000               	movlw	0
 14737  1D00  1881               	btfsc	1,1
 14738  1D01  3001               	movlw	1
 14739  1D02  0020               	movlb	0	; select bank0
 14740  1D03  00A3               	movwf	getDelayOff_GO@go
 14741                           
 14742                           ;DelayOff_B1.c: 117: return go;
 14743  1D04  0823               	movf	getDelayOff_GO@go,w
 14744  1D05  0008               	return
 14745  1D06                     __end_of_getDelayOff_GO:	
 14746                           
 14747                           	psect	text99
 14748  1D4A                     __ptext99:	
 14749 ;; *************** function _getCmd_Status *****************
 14750 ;; Defined at:
 14751 ;;		line 659 in file "../src/Main_B1.c"
 14752 ;; Parameters:    Size  Location     Type
 14753 ;;  number          1    wreg     unsigned char 
 14754 ;; Auto vars:     Size  Location     Type
 14755 ;;  number          1    0[BANK0 ] unsigned char 
 14756 ;;  cmd             1    1[BANK0 ] unsigned char 
 14757 ;; Return value:  Size  Location     Type
 14758 ;;                  1    wreg      unsigned char 
 14759 ;; Registers used:
 14760 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14761 ;; Tracked objects:
 14762 ;;		On entry : 0/0
 14763 ;;		On exit  : 0/0
 14764 ;;		Unchanged: 0/0
 14765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14770 ;;Total ram usage:        2 bytes
 14771 ;; Hardware stack levels used:    1
 14772 ;; Hardware stack levels required when called:    5
 14773 ;; This function calls:
 14774 ;;		Nothing
 14775 ;; This function is called by:
 14776 ;;		_setDimmerLights_OnOff
 14777 ;; This function uses a non-reentrant model
 14778 ;;
 14779                           
 14780                           
 14781                           ;psect for function _getCmd_Status
 14782  1D4A                     _getCmd_Status:	
 14783                           
 14784                           ;incstack = 0
 14785                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 14786                           ;getCmd_Status@number stored from wreg
 14787  1D4A  0020               	movlb	0	; select bank0
 14788  1D4B  00A0               	movwf	getCmd_Status@number
 14789                           
 14790                           ;Main_B1.c: 660: char cmd = 0;
 14791  1D4C  01A1               	clrf	getCmd_Status@cmd
 14792                           
 14793                           ;Main_B1.c: 661: switch (number) {
 14794  1D4D  2D55               	goto	l6525
 14795  1D4E                     l6521:	
 14796                           ;Main_B1.c: 662: case 1:
 14797                           
 14798                           
 14799                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 14800  1D4E  3000               	movlw	0
 14801  1D4F  0021               	movlb	1	; select bank1
 14802  1D50  1853               	btfsc	_Cmd^(0+128),0
 14803  1D51  3001               	movlw	1
 14804  1D52  0020               	movlb	0	; select bank0
 14805  1D53  00A1               	movwf	getCmd_Status@cmd
 14806                           
 14807                           ;Main_B1.c: 665: }
 14808                           
 14809                           ;Main_B1.c: 664: break;
 14810  1D54  2D5A               	goto	l6527
 14811  1D55                     l6525:	
 14812  1D55  0820               	movf	getCmd_Status@number,w
 14813                           
 14814                           ; Switch size 1, requested type "space"
 14815                           ; Number of cases is 1, Range of values is 1 to 1
 14816                           ; switch strategies available:
 14817                           ; Name         Instructions Cycles
 14818                           ; simple_byte            4     3 (average)
 14819                           ; direct_byte           11     9 (fixed)
 14820                           ; jumptable            263     9 (fixed)
 14821                           ;	Chosen strategy is simple_byte
 14822  1D56  3A01               	xorlw	1	; case 1
 14823  1D57  1903               	skipnz
 14824  1D58  2D4E               	goto	l6521
 14825  1D59  2D5A               	goto	l6527
 14826  1D5A                     l6527:	
 14827                           
 14828                           ;Main_B1.c: 666: return cmd;
 14829  1D5A  0821               	movf	getCmd_Status@cmd,w
 14830  1D5B  0008               	return
 14831  1D5C                     __end_of_getCmd_Status:	
 14832                           
 14833                           	psect	text100
 14834  14FB                     __ptext100:	
 14835 ;; *************** function _setDimmerLights_Dimming *****************
 14836 ;; Defined at:
 14837 ;;		line 945 in file "../src/Dimmer_B1.c"
 14838 ;; Parameters:    Size  Location     Type
 14839 ;;  lights          1    wreg     unsigned char 
 14840 ;;  status          1   74[BANK0 ] unsigned char 
 14841 ;; Auto vars:     Size  Location     Type
 14842 ;;  lights          1   77[BANK0 ] unsigned char 
 14843 ;;  value           1   76[BANK0 ] unsigned char 
 14844 ;; Return value:  Size  Location     Type
 14845 ;;		None               void
 14846 ;; Registers used:
 14847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14848 ;; Tracked objects:
 14849 ;;		On entry : 0/0
 14850 ;;		On exit  : 0/0
 14851 ;;		Unchanged: 0/0
 14852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14853 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14854 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14856 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14857 ;;Total ram usage:        4 bytes
 14858 ;; Hardware stack levels used:    1
 14859 ;; Hardware stack levels required when called:    8
 14860 ;; This function calls:
 14861 ;;		_getDimmerIntr_DimmingValue
 14862 ;;		_getDimmerLights_ValueToPercent
 14863 ;;		_setBuz
 14864 ;;		_setDimmerIntr_Dimming_Sw
 14865 ;;		_setDimmerIntr_MaxmumValue
 14866 ;;		_setDimmerLights_Line
 14867 ;;		_setMemory_Modify
 14868 ;;		_setProductData
 14869 ;;		_setRF_DimmerLights
 14870 ;;		_setRF_TransceiveGO
 14871 ;;		_setTxData
 14872 ;; This function is called by:
 14873 ;;		_setDimmerLights_Main
 14874 ;; This function uses a non-reentrant model
 14875 ;;
 14876                           
 14877                           
 14878                           ;psect for function _setDimmerLights_Dimming
 14879  14FB                     _setDimmerLights_Dimming:	
 14880                           
 14881                           ;incstack = 0
 14882                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14883                           ;setDimmerLights_Dimming@lights stored from wreg
 14884  14FB  0020               	movlb	0	; select bank0
 14885  14FC  00ED               	movwf	setDimmerLights_Dimming@lights
 14886                           
 14887                           ;Dimmer_B1.c: 946: if (status == 1) {
 14888  14FD  086A               	movf	setDimmerLights_Dimming@status,w
 14889  14FE  3A01               	xorlw	1
 14890  14FF  1D03               	skipz
 14891  1500  2D14               	goto	l6791
 14892                           
 14893                           ;Dimmer_B1.c: 947: setDimmerIntr_Dimming_Sw(lights, 1);
 14894  1501  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14895  1502  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 14896  1503  086D               	movf	setDimmerLights_Dimming@lights,w
 14897  1504  319E  266E  3194   	fcall	_setDimmerIntr_Dimming_Sw
 14898                           
 14899                           ;Dimmer_B1.c: 950: setRF_TransceiveGO(0);
 14900  1507  3000               	movlw	0
 14901  1508  319D  25B7  3194   	fcall	_setRF_TransceiveGO
 14902                           
 14903                           ;Dimmer_B1.c: 952: setBuz(1, 100);
 14904  150B  3064               	movlw	100
 14905  150C  0020               	movlb	0	; select bank0
 14906  150D  00A9               	movwf	setBuz@time
 14907  150E  3000               	movlw	0
 14908  150F  00AA               	movwf	setBuz@time+1
 14909  1510  3001               	movlw	1
 14910  1511  3195  2551         	fcall	_setBuz
 14911                           
 14912                           ;Dimmer_B1.c: 953: } else if (status == 0) {
 14913  1513  0008               	return
 14914  1514                     l6791:	
 14915  1514  0020               	movlb	0	; select bank0
 14916  1515  08EA               	movf	setDimmerLights_Dimming@status,f
 14917  1516  1D03               	skipz
 14918  1517  0008               	return
 14919                           
 14920                           ;Dimmer_B1.c: 954: setDimmerIntr_Dimming_Sw(lights, 0);
 14921  1518  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14922  1519  086D               	movf	setDimmerLights_Dimming@lights,w
 14923  151A  319E  266E  3194   	fcall	_setDimmerIntr_Dimming_Sw
 14924                           
 14925                           ;Dimmer_B1.c: 957: Dimmer.Load_Status = 0;
 14926  151D  0022               	movlb	2	; select bank2
 14927  151E  1120               	bcf	_Dimmer^(0+256),2
 14928                           
 14929                           ;Dimmer_B1.c: 958: setDimmerLights_Line(lights);
 14930  151F  0020               	movlb	0	; select bank0
 14931  1520  086D               	movf	setDimmerLights_Dimming@lights,w
 14932  1521  319C  24E4  3194   	fcall	_setDimmerLights_Line
 14933                           
 14934                           ;Dimmer_B1.c: 960: char value = getDimmerIntr_DimmingValue(lights);
 14935  1524  0020               	movlb	0	; select bank0
 14936  1525  086D               	movf	setDimmerLights_Dimming@lights,w
 14937  1526  319C  24A5  3194   	fcall	_getDimmerIntr_DimmingValue
 14938  1529  0020               	movlb	0	; select bank0
 14939  152A  00EB               	movwf	??_setDimmerLights_Dimming
 14940  152B  086B               	movf	??_setDimmerLights_Dimming,w
 14941  152C  00EC               	movwf	setDimmerLights_Dimming@value
 14942                           
 14943                           ;Dimmer_B1.c: 961: setDimmerIntr_MaxmumValue(lights, value);
 14944  152D  086C               	movf	setDimmerLights_Dimming@value,w
 14945  152E  00EB               	movwf	??_setDimmerLights_Dimming
 14946  152F  086B               	movf	??_setDimmerLights_Dimming,w
 14947  1530  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14948  1531  086D               	movf	setDimmerLights_Dimming@lights,w
 14949  1532  319C  2438  3194   	fcall	_setDimmerIntr_MaxmumValue
 14950                           
 14951                           ;Dimmer_B1.c: 962: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 14952  1535  0020               	movlb	0	; select bank0
 14953  1536  086C               	movf	setDimmerLights_Dimming@value,w
 14954  1537  3196  26CB  3194   	fcall	_getDimmerLights_ValueToPercent
 14955  153A  0020               	movlb	0	; select bank0
 14956  153B  00EB               	movwf	??_setDimmerLights_Dimming
 14957  153C  086B               	movf	??_setDimmerLights_Dimming,w
 14958  153D  00E2               	movwf	setProductData@value
 14959  153E  086D               	movf	setDimmerLights_Dimming@lights,w
 14960  153F  3E14               	addlw	20
 14961  1540  319C  242C  3194   	fcall	_setProductData
 14962                           
 14963                           ;Dimmer_B1.c: 969: setMemory_Modify(1);
 14964  1543  3001               	movlw	1
 14965  1544  319D  25A4  3194   	fcall	_setMemory_Modify
 14966                           
 14967                           ;Dimmer_B1.c: 973: setRF_DimmerLights(lights, 1);
 14968  1547  0020               	movlb	0	; select bank0
 14969  1548  01E5               	clrf	setRF_DimmerLights@on
 14970  1549  0AE5               	incf	setRF_DimmerLights@on,f
 14971  154A  086D               	movf	setDimmerLights_Dimming@lights,w
 14972  154B  3197  2730  3194   	fcall	_setRF_DimmerLights
 14973                           
 14974                           ;Dimmer_B1.c: 974: setTxData();
 14975  154E  318F  2745         	fcall	_setTxData
 14976  1550  0008               	return
 14977  1551                     __end_of_setDimmerLights_Dimming:	
 14978                           
 14979                           	psect	text101
 14980  0F45                     __ptext101:	
 14981 ;; *************** function _setTxData *****************
 14982 ;; Defined at:
 14983 ;;		line 183 in file "../src/RF_Control_B1.c"
 14984 ;; Parameters:    Size  Location     Type
 14985 ;;		None
 14986 ;; Auto vars:     Size  Location     Type
 14987 ;;  i               1    0        unsigned char 
 14988 ;; Return value:  Size  Location     Type
 14989 ;;		None               void
 14990 ;; Registers used:
 14991 ;;		wreg, fsr1l, fsr1h, status,2
 14992 ;; Tracked objects:
 14993 ;;		On entry : 0/0
 14994 ;;		On exit  : 0/0
 14995 ;;		Unchanged: 0/0
 14996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15000 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15001 ;;Total ram usage:        1 bytes
 15002 ;; Hardware stack levels used:    1
 15003 ;; Hardware stack levels required when called:    5
 15004 ;; This function calls:
 15005 ;;		Nothing
 15006 ;; This function is called by:
 15007 ;;		_setDimmerLights_OnOff
 15008 ;;		_setDimmerLights_Dimming
 15009 ;;		_getRxData
 15010 ;;		_setControl_Lights_Table
 15011 ;;		_setRFSW_Control
 15012 ;;		_setRFSW_AdjControl
 15013 ;; This function uses a non-reentrant model
 15014 ;;
 15015                           
 15016                           
 15017                           ;psect for function _setTxData
 15018  0F45                     _setTxData:	
 15019                           
 15020                           ;RF_Control_B1.c: 184: char i;
 15021                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15022                           
 15023                           ;incstack = 0
 15024                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15025  0F45  0021               	movlb	1	; select bank1
 15026  0F46  1C20               	btfss	_RF1^(0+128),0
 15027  0F47  0008               	return
 15028                           
 15029                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15030  0F48  1520               	bsf	_RF1^(0+128),2
 15031                           
 15032                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15033  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15034  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15035                           
 15036                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15037  0F4B  3063               	movlw	99
 15038  0F4C  0020               	movlb	0	; select bank0
 15039  0F4D  00A0               	movwf	??_setTxData
 15040  0F4E  0820               	movf	??_setTxData,w
 15041  0F4F  0023               	movlb	3	; select bank3
 15042  0F50  00A0               	movwf	_RF_Data^(0+384)
 15043                           
 15044                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15045  0F51  3002               	movlw	2
 15046  0F52  0020               	movlb	0	; select bank0
 15047  0F53  00A0               	movwf	??_setTxData
 15048  0F54  0820               	movf	??_setTxData,w
 15049  0F55  0023               	movlb	3	; select bank3
 15050  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15051                           
 15052                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15053  0F57  0021               	movlb	1	; select bank1
 15054  0F58  086F               	movf	_product^(0+128),w
 15055  0F59  0086               	movwf	6
 15056  0F5A  3002               	movlw	2	; select bank4/5
 15057  0F5B  0087               	movwf	7
 15058  0F5C  3002               	movlw	2	; select bank4/5
 15059  0F5D  3F42               	moviw [2]fsr1
 15060  0F5E  0023               	movlb	3	; select bank3
 15061  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15062                           
 15063                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15064  0F60  0021               	movlb	1	; select bank1
 15065  0F61  086F               	movf	_product^(0+128),w
 15066  0F62  0086               	movwf	6
 15067  0F63  3002               	movlw	2	; select bank4/5
 15068  0F64  0087               	movwf	7
 15069  0F65  3002               	movlw	2	; select bank4/5
 15070  0F66  3F43               	moviw [3]fsr1
 15071  0F67  0023               	movlb	3	; select bank3
 15072  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15073                           
 15074                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15075  0F69  0021               	movlb	1	; select bank1
 15076  0F6A  086F               	movf	_product^(0+128),w
 15077  0F6B  0086               	movwf	6
 15078  0F6C  3002               	movlw	2	; select bank4/5
 15079  0F6D  0087               	movwf	7
 15080  0F6E  3002               	movlw	2	; select bank4/5
 15081  0F6F  3F44               	moviw [4]fsr1
 15082  0F70  0023               	movlb	3	; select bank3
 15083  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15084                           
 15085                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15086  0F72  0021               	movlb	1	; select bank1
 15087  0F73  086F               	movf	_product^(0+128),w
 15088  0F74  0086               	movwf	6
 15089  0F75  3002               	movlw	2	; select bank4/5
 15090  0F76  0087               	movwf	7
 15091  0F77  3002               	movlw	2	; select bank4/5
 15092  0F78  3F45               	moviw [5]fsr1
 15093  0F79  0023               	movlb	3	; select bank3
 15094  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15095                           
 15096                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15097  0F7B  0021               	movlb	1	; select bank1
 15098  0F7C  086F               	movf	_product^(0+128),w
 15099  0F7D  0086               	movwf	6
 15100  0F7E  3002               	movlw	2	; select bank4/5
 15101  0F7F  0087               	movwf	7
 15102  0F80  3002               	movlw	2	; select bank4/5
 15103  0F81  3F46               	moviw [6]fsr1
 15104  0F82  0023               	movlb	3	; select bank3
 15105  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15106                           
 15107                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15108  0F84  0021               	movlb	1	; select bank1
 15109  0F85  086F               	movf	_product^(0+128),w
 15110  0F86  0086               	movwf	6
 15111  0F87  3002               	movlw	2	; select bank4/5
 15112  0F88  0087               	movwf	7
 15113  0F89  3002               	movlw	2	; select bank4/5
 15114  0F8A  3F47               	moviw [7]fsr1
 15115  0F8B  0023               	movlb	3	; select bank3
 15116  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15117                           
 15118                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15119  0F8D  0021               	movlb	1	; select bank1
 15120  0F8E  086F               	movf	_product^(0+128),w
 15121  0F8F  0086               	movwf	6
 15122  0F90  3002               	movlw	2	; select bank4/5
 15123  0F91  0087               	movwf	7
 15124  0F92  3002               	movlw	2	; select bank4/5
 15125  0F93  3F48               	moviw [8]fsr1
 15126  0F94  0023               	movlb	3	; select bank3
 15127  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15128                           
 15129                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15130  0F96  0021               	movlb	1	; select bank1
 15131  0F97  086F               	movf	_product^(0+128),w
 15132  0F98  0086               	movwf	6
 15133  0F99  3002               	movlw	2	; select bank4/5
 15134  0F9A  0087               	movwf	7
 15135  0F9B  3002               	movlw	2	; select bank4/5
 15136  0F9C  3F49               	moviw [9]fsr1
 15137  0F9D  0023               	movlb	3	; select bank3
 15138  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15139                           
 15140                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15141  0F9F  0021               	movlb	1	; select bank1
 15142  0FA0  086F               	movf	_product^(0+128),w
 15143  0FA1  0086               	movwf	6
 15144  0FA2  3002               	movlw	2	; select bank4/5
 15145  0FA3  0087               	movwf	7
 15146  0FA4  3002               	movlw	2	; select bank4/5
 15147  0FA5  3F4A               	moviw [10]fsr1
 15148  0FA6  0023               	movlb	3	; select bank3
 15149  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15150                           
 15151                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15152  0FA8  0021               	movlb	1	; select bank1
 15153  0FA9  086F               	movf	_product^(0+128),w
 15154  0FAA  0086               	movwf	6
 15155  0FAB  3002               	movlw	2	; select bank4/5
 15156  0FAC  0087               	movwf	7
 15157  0FAD  3002               	movlw	2	; select bank4/5
 15158  0FAE  3F4B               	moviw [11]fsr1
 15159  0FAF  0023               	movlb	3	; select bank3
 15160  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15161                           
 15162                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15163  0FB1  0021               	movlb	1	; select bank1
 15164  0FB2  086F               	movf	_product^(0+128),w
 15165  0FB3  0086               	movwf	6
 15166  0FB4  3002               	movlw	2	; select bank4/5
 15167  0FB5  0087               	movwf	7
 15168  0FB6  3002               	movlw	2	; select bank4/5
 15169  0FB7  3F4C               	moviw [12]fsr1
 15170  0FB8  0023               	movlb	3	; select bank3
 15171  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15172                           
 15173                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15174  0FBA  0021               	movlb	1	; select bank1
 15175  0FBB  086F               	movf	_product^(0+128),w
 15176  0FBC  0086               	movwf	6
 15177  0FBD  3002               	movlw	2	; select bank4/5
 15178  0FBE  0087               	movwf	7
 15179  0FBF  3002               	movlw	2	; select bank4/5
 15180  0FC0  3F4D               	moviw [13]fsr1
 15181  0FC1  0023               	movlb	3	; select bank3
 15182  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15183                           
 15184                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15185  0FC3  0021               	movlb	1	; select bank1
 15186  0FC4  086F               	movf	_product^(0+128),w
 15187  0FC5  0086               	movwf	6
 15188  0FC6  3002               	movlw	2	; select bank4/5
 15189  0FC7  0087               	movwf	7
 15190  0FC8  3002               	movlw	2	; select bank4/5
 15191  0FC9  3F4E               	moviw [14]fsr1
 15192  0FCA  0023               	movlb	3	; select bank3
 15193  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15194                           
 15195                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15196  0FCC  0021               	movlb	1	; select bank1
 15197  0FCD  086F               	movf	_product^(0+128),w
 15198  0FCE  0086               	movwf	6
 15199  0FCF  3002               	movlw	2	; select bank4/5
 15200  0FD0  0087               	movwf	7
 15201  0FD1  3002               	movlw	2	; select bank4/5
 15202  0FD2  3F4F               	moviw [15]fsr1
 15203  0FD3  0023               	movlb	3	; select bank3
 15204  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15205                           
 15206                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15207  0FD5  0021               	movlb	1	; select bank1
 15208  0FD6  086F               	movf	_product^(0+128),w
 15209  0FD7  0086               	movwf	6
 15210  0FD8  3002               	movlw	2	; select bank4/5
 15211  0FD9  0087               	movwf	7
 15212  0FDA  3002               	movlw	2	; select bank4/5
 15213  0FDB  3F50               	moviw [16]fsr1
 15214  0FDC  0023               	movlb	3	; select bank3
 15215  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15216                           
 15217                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15218  0FDE  0021               	movlb	1	; select bank1
 15219  0FDF  086F               	movf	_product^(0+128),w
 15220  0FE0  0086               	movwf	6
 15221  0FE1  3002               	movlw	2	; select bank4/5
 15222  0FE2  0087               	movwf	7
 15223  0FE3  3002               	movlw	2	; select bank4/5
 15224  0FE4  3F51               	moviw [17]fsr1
 15225  0FE5  0023               	movlb	3	; select bank3
 15226  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15227                           
 15228                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15229  0FE7  0021               	movlb	1	; select bank1
 15230  0FE8  086F               	movf	_product^(0+128),w
 15231  0FE9  0086               	movwf	6
 15232  0FEA  3002               	movlw	2	; select bank4/5
 15233  0FEB  0087               	movwf	7
 15234  0FEC  3002               	movlw	2	; select bank4/5
 15235  0FED  3F52               	moviw [18]fsr1
 15236  0FEE  0023               	movlb	3	; select bank3
 15237  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15238                           
 15239                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15240  0FF0  0021               	movlb	1	; select bank1
 15241  0FF1  086F               	movf	_product^(0+128),w
 15242  0FF2  0086               	movwf	6
 15243  0FF3  3002               	movlw	2	; select bank4/5
 15244  0FF4  0087               	movwf	7
 15245  0FF5  3002               	movlw	2	; select bank4/5
 15246  0FF6  3F53               	moviw [19]fsr1
 15247  0FF7  0023               	movlb	3	; select bank3
 15248  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15249                           
 15250                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15251  0FF9  30D1               	movlw	209
 15252  0FFA  0020               	movlb	0	; select bank0
 15253  0FFB  00A0               	movwf	??_setTxData
 15254  0FFC  0820               	movf	??_setTxData,w
 15255  0FFD  0023               	movlb	3	; select bank3
 15256  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15257  0FFF  0008               	return
 15258  1000                     __end_of_setTxData:	
 15259                           
 15260                           	psect	text102
 15261  1DB7                     __ptext102:	
 15262 ;; *************** function _setRF_TransceiveGO *****************
 15263 ;; Defined at:
 15264 ;;		line 470 in file "../src/RF_Control_B1.c"
 15265 ;; Parameters:    Size  Location     Type
 15266 ;;  command         1    wreg     unsigned char 
 15267 ;; Auto vars:     Size  Location     Type
 15268 ;;  command         1    1[BANK0 ] unsigned char 
 15269 ;; Return value:  Size  Location     Type
 15270 ;;		None               void
 15271 ;; Registers used:
 15272 ;;		wreg, status,2, status,0
 15273 ;; Tracked objects:
 15274 ;;		On entry : 0/0
 15275 ;;		On exit  : 0/0
 15276 ;;		Unchanged: 0/0
 15277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15281 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15282 ;;Total ram usage:        2 bytes
 15283 ;; Hardware stack levels used:    1
 15284 ;; Hardware stack levels required when called:    5
 15285 ;; This function calls:
 15286 ;;		Nothing
 15287 ;; This function is called by:
 15288 ;;		_setDimmerLights_Dimming
 15289 ;; This function uses a non-reentrant model
 15290 ;;
 15291                           
 15292                           
 15293                           ;psect for function _setRF_TransceiveGO
 15294  1DB7                     _setRF_TransceiveGO:	
 15295                           
 15296                           ;incstack = 0
 15297                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15298                           ;setRF_TransceiveGO@command stored from wreg
 15299  1DB7  0020               	movlb	0	; select bank0
 15300  1DB8  00A1               	movwf	setRF_TransceiveGO@command
 15301                           
 15302                           ;RF_Control_B1.c: 471: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15303  1DB9  0821               	movf	setRF_TransceiveGO@command,w
 15304  1DBA  3A01               	xorlw	1
 15305  1DBB  3000               	movlw	0
 15306  1DBC  1903               	skipnz
 15307  1DBD  3001               	movlw	1
 15308  1DBE  00A0               	movwf	??_setRF_TransceiveGO
 15309  1DBF  0DA0               	rlf	??_setRF_TransceiveGO,f
 15310  1DC0  0DA0               	rlf	??_setRF_TransceiveGO,f
 15311  1DC1  0021               	movlb	1	; select bank1
 15312  1DC2  0820               	movf	_RF1^(0+128),w
 15313  1DC3  0020               	movlb	0	; select bank0
 15314  1DC4  0620               	xorwf	??_setRF_TransceiveGO,w
 15315  1DC5  39FB               	andlw	-5
 15316  1DC6  0620               	xorwf	??_setRF_TransceiveGO,w
 15317  1DC7  0021               	movlb	1	; select bank1
 15318  1DC8  00A0               	movwf	_RF1^(0+128)
 15319  1DC9  0008               	return
 15320  1DCA                     __end_of_setRF_TransceiveGO:	
 15321                           
 15322                           	psect	text103
 15323  1730                     __ptext103:	
 15324 ;; *************** function _setRF_DimmerLights *****************
 15325 ;; Defined at:
 15326 ;;		line 455 in file "../src/RF_Control_B1.c"
 15327 ;; Parameters:    Size  Location     Type
 15328 ;;  lights          1    wreg     unsigned char 
 15329 ;;  on              1   69[BANK0 ] unsigned char 
 15330 ;; Auto vars:     Size  Location     Type
 15331 ;;  lights          1   73[BANK0 ] unsigned char 
 15332 ;;  status          1   72[BANK0 ] unsigned char 
 15333 ;; Return value:  Size  Location     Type
 15334 ;;		None               void
 15335 ;; Registers used:
 15336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15337 ;; Tracked objects:
 15338 ;;		On entry : 0/0
 15339 ;;		On exit  : 0/0
 15340 ;;		Unchanged: 0/0
 15341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15342 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15345 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15346 ;;Total ram usage:        5 bytes
 15347 ;; Hardware stack levels used:    1
 15348 ;; Hardware stack levels required when called:    6
 15349 ;; This function calls:
 15350 ;;		_setProductData
 15351 ;; This function is called by:
 15352 ;;		_setDimmerLights_OnOff
 15353 ;;		_setDimmerLights_Dimming
 15354 ;;		_setRFSW_Control
 15355 ;; This function uses a non-reentrant model
 15356 ;;
 15357                           
 15358                           
 15359                           ;psect for function _setRF_DimmerLights
 15360  1730                     _setRF_DimmerLights:	
 15361                           
 15362                           ;incstack = 0
 15363                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15364                           ;setRF_DimmerLights@lights stored from wreg
 15365  1730  0020               	movlb	0	; select bank0
 15366  1731  00E9               	movwf	setRF_DimmerLights@lights
 15367                           
 15368                           ;RF_Control_B1.c: 456: char status = 1;
 15369  1732  01E8               	clrf	setRF_DimmerLights@status
 15370  1733  0AE8               	incf	setRF_DimmerLights@status,f
 15371                           
 15372                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15373  1734  0869               	movf	setRF_DimmerLights@lights,w
 15374  1735  3EFF               	addlw	-1
 15375  1736  0A89               	incf	9,f
 15376  1737  2F3A               	goto	u5280
 15377  1738                     u5285:	
 15378  1738  1003               	clrc
 15379  1739  0DE8               	rlf	setRF_DimmerLights@status,f
 15380  173A                     u5280:	
 15381  173A  3EFF               	addlw	-1
 15382  173B  1D03               	skipz
 15383  173C  2F38               	goto	u5285
 15384                           
 15385                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15386  173D  0869               	movf	setRF_DimmerLights@lights,w
 15387  173E  00E6               	movwf	??_setRF_DimmerLights
 15388  173F  0866               	movf	??_setRF_DimmerLights,w
 15389  1740  00E2               	movwf	setProductData@value
 15390  1741  300B               	movlw	11
 15391  1742  319C  242C  3197   	fcall	_setProductData
 15392                           
 15393                           ;RF_Control_B1.c: 459: setProductData(17, product->Data[26 + lights]);
 15394  1745  0020               	movlb	0	; select bank0
 15395  1746  0869               	movf	setRF_DimmerLights@lights,w
 15396  1747  3E1A               	addlw	26
 15397  1748  0021               	movlb	1	; select bank1
 15398  1749  076F               	addwf	_product^(0+128),w
 15399  174A  0020               	movlb	0	; select bank0
 15400  174B  00E6               	movwf	??_setRF_DimmerLights
 15401  174C  0866               	movf	??_setRF_DimmerLights,w
 15402  174D  0086               	movwf	6
 15403  174E  3002               	movlw	2	; select bank4/5
 15404  174F  0087               	movwf	7
 15405  1750  0801               	movf	1,w
 15406  1751  00E7               	movwf	??_setRF_DimmerLights+1
 15407  1752  0867               	movf	??_setRF_DimmerLights+1,w
 15408  1753  00E2               	movwf	setProductData@value
 15409  1754  3011               	movlw	17
 15410  1755  319C  242C  3197   	fcall	_setProductData
 15411                           
 15412                           ;RF_Control_B1.c: 460: if (on == 1) {
 15413  1758  0020               	movlb	0	; select bank0
 15414  1759  0865               	movf	setRF_DimmerLights@on,w
 15415  175A  3A01               	xorlw	1
 15416  175B  1D03               	skipz
 15417  175C  2F7F               	goto	l6145
 15418                           
 15419                           ;RF_Control_B1.c: 461: setProductData(9, product->Data[20 + lights]);
 15420  175D  0869               	movf	setRF_DimmerLights@lights,w
 15421  175E  3E14               	addlw	20
 15422  175F  0021               	movlb	1	; select bank1
 15423  1760  076F               	addwf	_product^(0+128),w
 15424  1761  0020               	movlb	0	; select bank0
 15425  1762  00E6               	movwf	??_setRF_DimmerLights
 15426  1763  0866               	movf	??_setRF_DimmerLights,w
 15427  1764  0086               	movwf	6
 15428  1765  3002               	movlw	2	; select bank4/5
 15429  1766  0087               	movwf	7
 15430  1767  0801               	movf	1,w
 15431  1768  00E7               	movwf	??_setRF_DimmerLights+1
 15432  1769  0867               	movf	??_setRF_DimmerLights+1,w
 15433  176A  00E2               	movwf	setProductData@value
 15434  176B  3009               	movlw	9
 15435  176C  319C  242C  3197   	fcall	_setProductData
 15436                           
 15437                           ;RF_Control_B1.c: 462: setProductData(15, (product->Data[15] | status));
 15438  176F  0021               	movlb	1	; select bank1
 15439  1770  086F               	movf	_product^(0+128),w
 15440  1771  3E0F               	addlw	15
 15441  1772  0086               	movwf	6
 15442  1773  3002               	movlw	2	; select bank4/5
 15443  1774  0087               	movwf	7
 15444  1775  0801               	movf	1,w
 15445  1776  0020               	movlb	0	; select bank0
 15446  1777  0468               	iorwf	setRF_DimmerLights@status,w
 15447  1778  00E6               	movwf	??_setRF_DimmerLights
 15448  1779  0866               	movf	??_setRF_DimmerLights,w
 15449  177A  00E2               	movwf	setProductData@value
 15450  177B  300F               	movlw	15
 15451  177C  319C  242C         	fcall	_setProductData
 15452                           
 15453                           ;RF_Control_B1.c: 463: } else {
 15454  177E  0008               	return
 15455  177F                     l6145:	
 15456                           
 15457                           ;RF_Control_B1.c: 464: setProductData(9, 0x00);
 15458  177F  0020               	movlb	0	; select bank0
 15459  1780  01E2               	clrf	setProductData@value
 15460  1781  3009               	movlw	9
 15461  1782  319C  242C  3197   	fcall	_setProductData
 15462                           
 15463                           ;RF_Control_B1.c: 465: setProductData(15, (product->Data[15]&(~status)));
 15464  1785  0021               	movlb	1	; select bank1
 15465  1786  086F               	movf	_product^(0+128),w
 15466  1787  3E0F               	addlw	15
 15467  1788  0086               	movwf	6
 15468  1789  3002               	movlw	2	; select bank4/5
 15469  178A  0087               	movwf	7
 15470  178B  0020               	movlb	0	; select bank0
 15471  178C  0968               	comf	setRF_DimmerLights@status,w
 15472  178D  0501               	andwf	1,w
 15473  178E  00E6               	movwf	??_setRF_DimmerLights
 15474  178F  0866               	movf	??_setRF_DimmerLights,w
 15475  1790  00E2               	movwf	setProductData@value
 15476  1791  300F               	movlw	15
 15477  1792  319C  242C         	fcall	_setProductData
 15478  1794  0008               	return
 15479  1795                     __end_of_setRF_DimmerLights:	
 15480                           
 15481                           	psect	text104
 15482  1CE4                     __ptext104:	
 15483 ;; *************** function _setDimmerLights_Line *****************
 15484 ;; Defined at:
 15485 ;;		line 1019 in file "../src/Dimmer_B1.c"
 15486 ;; Parameters:    Size  Location     Type
 15487 ;;  lights          1    wreg     unsigned char 
 15488 ;; Auto vars:     Size  Location     Type
 15489 ;;  lights          1    0[BANK0 ] unsigned char 
 15490 ;; Return value:  Size  Location     Type
 15491 ;;		None               void
 15492 ;; Registers used:
 15493 ;;		wreg
 15494 ;; Tracked objects:
 15495 ;;		On entry : 0/0
 15496 ;;		On exit  : 0/0
 15497 ;;		Unchanged: 0/0
 15498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15502 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15503 ;;Total ram usage:        1 bytes
 15504 ;; Hardware stack levels used:    1
 15505 ;; Hardware stack levels required when called:    5
 15506 ;; This function calls:
 15507 ;;		Nothing
 15508 ;; This function is called by:
 15509 ;;		_setDimmerLights_OnOff
 15510 ;;		_setDimmerLights_Dimming
 15511 ;; This function uses a non-reentrant model
 15512 ;;
 15513                           
 15514                           
 15515                           ;psect for function _setDimmerLights_Line
 15516  1CE4                     _setDimmerLights_Line:	
 15517                           
 15518                           ;incstack = 0
 15519                           ; Regs used in _setDimmerLights_Line: [wreg]
 15520                           ;setDimmerLights_Line@lights stored from wreg
 15521  1CE4  0020               	movlb	0	; select bank0
 15522  1CE5  00A0               	movwf	setDimmerLights_Line@lights
 15523                           
 15524                           ;Dimmer_B1.c: 1020: Dimmer.LoadGO = 1;
 15525  1CE6  0022               	movlb	2	; select bank2
 15526  1CE7  14A0               	bsf	_Dimmer^(0+256),1
 15527                           
 15528                           ;Dimmer_B1.c: 1022: DimmerLights1.Line = 0;
 15529  1CE8  10DB               	bcf	(_DimmerLights1^(0+256)+1),1
 15530                           
 15531                           ;Dimmer_B1.c: 1023: if (lights == 1 && lights != 0) {
 15532  1CE9  0020               	movlb	0	; select bank0
 15533  1CEA  0820               	movf	setDimmerLights_Line@lights,w
 15534  1CEB  3A01               	xorlw	1
 15535  1CEC  1D03               	skipz
 15536  1CED  0008               	return
 15537  1CEE  0820               	movf	setDimmerLights_Line@lights,w
 15538  1CEF  1903               	btfsc	3,2
 15539  1CF0  0008               	return
 15540                           
 15541                           ;Dimmer_B1.c: 1024: DimmerLights1.Line = 1;
 15542  1CF1  0022               	movlb	2	; select bank2
 15543  1CF2  14DB               	bsf	(_DimmerLights1^(0+256)+1),1
 15544  1CF3  0020               	movlb	0	; select bank0
 15545  1CF4  0008               	return
 15546  1CF5                     __end_of_setDimmerLights_Line:	
 15547                           
 15548                           	psect	text105
 15549  1C38                     __ptext105:	
 15550 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15551 ;; Defined at:
 15552 ;;		line 124 in file "../src/Dimmer_B1.c"
 15553 ;; Parameters:    Size  Location     Type
 15554 ;;  lights          1    wreg     unsigned char 
 15555 ;;  value           1   66[BANK0 ] unsigned char 
 15556 ;; Auto vars:     Size  Location     Type
 15557 ;;  lights          1   68[BANK0 ] unsigned char 
 15558 ;; Return value:  Size  Location     Type
 15559 ;;		None               void
 15560 ;; Registers used:
 15561 ;;		wreg
 15562 ;; Tracked objects:
 15563 ;;		On entry : 0/0
 15564 ;;		On exit  : 0/0
 15565 ;;		Unchanged: 0/0
 15566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15567 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15568 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15570 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15571 ;;Total ram usage:        3 bytes
 15572 ;; Hardware stack levels used:    1
 15573 ;; Hardware stack levels required when called:    5
 15574 ;; This function calls:
 15575 ;;		Nothing
 15576 ;; This function is called by:
 15577 ;;		_setDimmerLights_OnOff
 15578 ;;		_setDimmerLights_Dimming
 15579 ;;		_setRFSW_AdjControl
 15580 ;; This function uses a non-reentrant model
 15581 ;;
 15582                           
 15583                           
 15584                           ;psect for function _setDimmerIntr_MaxmumValue
 15585  1C38                     _setDimmerIntr_MaxmumValue:	
 15586                           
 15587                           ;incstack = 0
 15588                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15589                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15590  1C38  0020               	movlb	0	; select bank0
 15591  1C39  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 15592                           
 15593                           ;Dimmer_B1.c: 126: if (lights == 1) {
 15594  1C3A  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 15595  1C3B  3A01               	xorlw	1
 15596  1C3C  1D03               	skipz
 15597  1C3D  0008               	return
 15598                           
 15599                           ;Dimmer_B1.c: 127: DimmerIntr1.MaxmumValue = value;
 15600  1C3E  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 15601  1C3F  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 15602  1C40  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 15603  1C41  0021               	movlb	1	; select bank1
 15604  1C42  00CD               	movwf	(_DimmerIntr1^(0+128)+6)
 15605  1C43  0008               	return
 15606  1C44                     __end_of_setDimmerIntr_MaxmumValue:	
 15607                           
 15608                           	psect	text106
 15609  1E6E                     __ptext106:	
 15610 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15611 ;; Defined at:
 15612 ;;		line 201 in file "../src/Dimmer_B1.c"
 15613 ;; Parameters:    Size  Location     Type
 15614 ;;  lights          1    wreg     unsigned char 
 15615 ;;  command         1    0[BANK0 ] unsigned char 
 15616 ;; Auto vars:     Size  Location     Type
 15617 ;;  lights          1    2[BANK0 ] unsigned char 
 15618 ;; Return value:  Size  Location     Type
 15619 ;;		None               void
 15620 ;; Registers used:
 15621 ;;		wreg, status,2, status,0
 15622 ;; Tracked objects:
 15623 ;;		On entry : 0/0
 15624 ;;		On exit  : 0/0
 15625 ;;		Unchanged: 0/0
 15626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15627 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15630 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15631 ;;Total ram usage:        3 bytes
 15632 ;; Hardware stack levels used:    1
 15633 ;; Hardware stack levels required when called:    5
 15634 ;; This function calls:
 15635 ;;		Nothing
 15636 ;; This function is called by:
 15637 ;;		_setDimmerLights_Dimming
 15638 ;; This function uses a non-reentrant model
 15639 ;;
 15640                           
 15641                           
 15642                           ;psect for function _setDimmerIntr_Dimming_Sw
 15643  1E6E                     _setDimmerIntr_Dimming_Sw:	
 15644                           
 15645                           ;incstack = 0
 15646                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15647                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15648  1E6E  0020               	movlb	0	; select bank0
 15649  1E6F  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 15650                           
 15651                           ;Dimmer_B1.c: 203: if (lights == 1) {
 15652  1E70  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15653  1E71  3A01               	xorlw	1
 15654  1E72  1D03               	skipz
 15655  1E73  0008               	return
 15656                           
 15657                           ;Dimmer_B1.c: 204: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15658  1E74  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 15659  1E75  3A01               	xorlw	1
 15660  1E76  3000               	movlw	0
 15661  1E77  1903               	skipnz
 15662  1E78  3001               	movlw	1
 15663  1E79  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 15664  1E7A  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15665  1E7B  0021               	movlb	1	; select bank1
 15666  1E7C  0847               	movf	_DimmerIntr1^(0+128),w
 15667  1E7D  0020               	movlb	0	; select bank0
 15668  1E7E  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15669  1E7F  39EF               	andlw	-17
 15670  1E80  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15671  1E81  0021               	movlb	1	; select bank1
 15672  1E82  00C7               	movwf	_DimmerIntr1^(0+128)
 15673  1E83  0008               	return
 15674  1E84                     __end_of_setDimmerIntr_Dimming_Sw:	
 15675                           
 15676                           	psect	text107
 15677  1CA5                     __ptext107:	
 15678 ;; *************** function _getDimmerIntr_DimmingValue *****************
 15679 ;; Defined at:
 15680 ;;		line 102 in file "../src/Dimmer_B1.c"
 15681 ;; Parameters:    Size  Location     Type
 15682 ;;  lights          1    wreg     unsigned char 
 15683 ;; Auto vars:     Size  Location     Type
 15684 ;;  lights          1    1[BANK0 ] unsigned char 
 15685 ;;  value           1    2[BANK0 ] unsigned char 
 15686 ;; Return value:  Size  Location     Type
 15687 ;;                  1    wreg      unsigned char 
 15688 ;; Registers used:
 15689 ;;		wreg, status,2
 15690 ;; Tracked objects:
 15691 ;;		On entry : 0/0
 15692 ;;		On exit  : 0/0
 15693 ;;		Unchanged: 0/0
 15694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15696 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15698 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15699 ;;Total ram usage:        3 bytes
 15700 ;; Hardware stack levels used:    1
 15701 ;; Hardware stack levels required when called:    5
 15702 ;; This function calls:
 15703 ;;		Nothing
 15704 ;; This function is called by:
 15705 ;;		_setDimmerLights_Dimming
 15706 ;; This function uses a non-reentrant model
 15707 ;;
 15708                           
 15709                           
 15710                           ;psect for function _getDimmerIntr_DimmingValue
 15711  1CA5                     _getDimmerIntr_DimmingValue:	
 15712                           
 15713                           ;incstack = 0
 15714                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 15715                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 15716  1CA5  0020               	movlb	0	; select bank0
 15717  1CA6  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 15718                           
 15719                           ;Dimmer_B1.c: 103: char value = 0;
 15720  1CA7  01A2               	clrf	getDimmerIntr_DimmingValue@value
 15721                           
 15722                           ;Dimmer_B1.c: 105: if (lights == 1) {
 15723  1CA8  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 15724  1CA9  3A01               	xorlw	1
 15725  1CAA  1D03               	skipz
 15726  1CAB  2CB2               	goto	l688
 15727                           
 15728                           ;Dimmer_B1.c: 106: value = DimmerIntr1.DimmingValue;
 15729  1CAC  0021               	movlb	1	; select bank1
 15730  1CAD  084C               	movf	(_DimmerIntr1^(0+128)+5),w
 15731  1CAE  0020               	movlb	0	; select bank0
 15732  1CAF  00A0               	movwf	??_getDimmerIntr_DimmingValue
 15733  1CB0  0820               	movf	??_getDimmerIntr_DimmingValue,w
 15734  1CB1  00A2               	movwf	getDimmerIntr_DimmingValue@value
 15735  1CB2                     l688:	
 15736                           
 15737                           ;Dimmer_B1.c: 107: }
 15738                           ;Dimmer_B1.c: 119: return value;
 15739  1CB2  0822               	movf	getDimmerIntr_DimmingValue@value,w
 15740  1CB3  0008               	return
 15741  1CB4                     __end_of_getDimmerIntr_DimmingValue:	
 15742                           
 15743                           	psect	text108
 15744  1E58                     __ptext108:	
 15745 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15746 ;; Defined at:
 15747 ;;		line 980 in file "../src/Dimmer_B1.c"
 15748 ;; Parameters:    Size  Location     Type
 15749 ;;  lights          1    wreg     unsigned char 
 15750 ;; Auto vars:     Size  Location     Type
 15751 ;;  lights          1    0[COMMON] unsigned char 
 15752 ;;  allow           1    2[BANK0 ] unsigned char 
 15753 ;; Return value:  Size  Location     Type
 15754 ;;                  1    wreg      unsigned char 
 15755 ;; Registers used:
 15756 ;;		wreg, status,2, pclath, cstack
 15757 ;; Tracked objects:
 15758 ;;		On entry : 0/0
 15759 ;;		On exit  : 0/0
 15760 ;;		Unchanged: 0/0
 15761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15763 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15765 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15766 ;;Total ram usage:        3 bytes
 15767 ;; Hardware stack levels used:    1
 15768 ;; Hardware stack levels required when called:    6
 15769 ;; This function calls:
 15770 ;;		_getLoad_OK
 15771 ;; This function is called by:
 15772 ;;		_setDimmerLights_Main
 15773 ;; This function uses a non-reentrant model
 15774 ;;
 15775                           
 15776                           
 15777                           ;psect for function _getDimmerLights_Allow_Condition
 15778  1E58                     _getDimmerLights_Allow_Condition:	
 15779                           
 15780                           ;Dimmer_B1.c: 981: char allow = 0;
 15781                           
 15782                           ;incstack = 0
 15783                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 15784  1E58  0020               	movlb	0	; select bank0
 15785  1E59  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 15786                           
 15787                           ;Dimmer_B1.c: 987: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15788  1E5A  01A3               	clrf	_getDimmerLights_Allow_Condition$2249
 15789  1E5B  0AA3               	incf	_getDimmerLights_Allow_Condition$2249,f
 15790  1E5C  319B  23B3  319E   	fcall	_getLoad_OK
 15791  1E5F  3800               	iorlw	0
 15792  1E60  1D03               	skipz
 15793  1E61  2E67               	goto	l6727
 15794  1E62  0022               	movlb	2	; select bank2
 15795  1E63  18A0               	btfsc	_Dimmer^(0+256),1
 15796  1E64  2E67               	goto	l6727
 15797  1E65  0020               	movlb	0	; select bank0
 15798  1E66  01A3               	clrf	_getDimmerLights_Allow_Condition$2249
 15799  1E67                     l6727:	
 15800  1E67  0020               	movlb	0	; select bank0
 15801  1E68  0823               	movf	_getDimmerLights_Allow_Condition$2249,w
 15802  1E69  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15803  1E6A  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15804  1E6B  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 15805                           
 15806                           ;Dimmer_B1.c: 1014: return allow;
 15807  1E6C  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 15808  1E6D  0008               	return
 15809  1E6E                     __end_of_getDimmerLights_Allow_Condition:	
 15810                           
 15811                           	psect	text109
 15812  1BB3                     __ptext109:	
 15813 ;; *************** function _getLoad_OK *****************
 15814 ;; Defined at:
 15815 ;;		line 272 in file "../src/OverLoad_B1.c"
 15816 ;; Parameters:    Size  Location     Type
 15817 ;;		None
 15818 ;; Auto vars:     Size  Location     Type
 15819 ;;  ok              1    0[BANK0 ] unsigned char 
 15820 ;; Return value:  Size  Location     Type
 15821 ;;                  1    wreg      unsigned char 
 15822 ;; Registers used:
 15823 ;;		wreg, status,2
 15824 ;; Tracked objects:
 15825 ;;		On entry : 0/0
 15826 ;;		On exit  : 0/0
 15827 ;;		Unchanged: 0/0
 15828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15832 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15833 ;;Total ram usage:        1 bytes
 15834 ;; Hardware stack levels used:    1
 15835 ;; Hardware stack levels required when called:    5
 15836 ;; This function calls:
 15837 ;;		Nothing
 15838 ;; This function is called by:
 15839 ;;		_DimmerLights_Main
 15840 ;;		_getDimmerLights_Allow_Condition
 15841 ;; This function uses a non-reentrant model
 15842 ;;
 15843                           
 15844                           
 15845                           ;psect for function _getLoad_OK
 15846  1BB3                     _getLoad_OK:	
 15847                           
 15848                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 15849                           
 15850                           ;incstack = 0
 15851                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15852  1BB3  3000               	movlw	0
 15853  1BB4  0022               	movlb	2	; select bank2
 15854  1BB5  1BB2               	btfsc	_Load^(0+256),7
 15855  1BB6  3001               	movlw	1
 15856  1BB7  0020               	movlb	0	; select bank0
 15857  1BB8  00A0               	movwf	getLoad_OK@ok
 15858                           
 15859                           ;OverLoad_B1.c: 274: return ok;
 15860  1BB9  0820               	movf	getLoad_OK@ok,w
 15861  1BBA  0008               	return
 15862  1BBB                     __end_of_getLoad_OK:	
 15863                           
 15864                           	psect	text110
 15865  11AF                     __ptext110:	
 15866 ;; *************** function _getMain_All_Error_Status *****************
 15867 ;; Defined at:
 15868 ;;		line 424 in file "../src/Main_B1.c"
 15869 ;; Parameters:    Size  Location     Type
 15870 ;;  command         1    wreg     unsigned char 
 15871 ;; Auto vars:     Size  Location     Type
 15872 ;;  command         1    5[BANK0 ] unsigned char 
 15873 ;;  status          1    6[BANK0 ] unsigned char 
 15874 ;; Return value:  Size  Location     Type
 15875 ;;                  1    wreg      unsigned char 
 15876 ;; Registers used:
 15877 ;;		wreg, status,2, status,0
 15878 ;; Tracked objects:
 15879 ;;		On entry : 0/0
 15880 ;;		On exit  : 0/0
 15881 ;;		Unchanged: 0/0
 15882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15884 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15885 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15886 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15887 ;;Total ram usage:        7 bytes
 15888 ;; Hardware stack levels used:    1
 15889 ;; Hardware stack levels required when called:    5
 15890 ;; This function calls:
 15891 ;;		Nothing
 15892 ;; This function is called by:
 15893 ;;		_DimmerLights_Main
 15894 ;;		_Exception_Main
 15895 ;;		_Load_Main
 15896 ;;		_setTemp_Main
 15897 ;;		_getRxData
 15898 ;;		_setSw_Main
 15899 ;; This function uses a non-reentrant model
 15900 ;;
 15901                           
 15902                           
 15903                           ;psect for function _getMain_All_Error_Status
 15904  11AF                     _getMain_All_Error_Status:	
 15905                           
 15906                           ;incstack = 0
 15907                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15908                           ;getMain_All_Error_Status@command stored from wreg
 15909  11AF  0020               	movlb	0	; select bank0
 15910  11B0  00A5               	movwf	getMain_All_Error_Status@command
 15911                           
 15912                           ;Main_B1.c: 425: char status = 0;
 15913  11B1  01A6               	clrf	getMain_All_Error_Status@status
 15914                           
 15915                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 15916  11B2  08A6               	movf	getMain_All_Error_Status@status,f
 15917  11B3  1D03               	skipz
 15918  11B4  29C9               	goto	l6473
 15919  11B5  0825               	movf	getMain_All_Error_Status@command,w
 15920  11B6  3A02               	xorlw	2
 15921  11B7  1903               	skipnz
 15922  11B8  29C9               	goto	l6473
 15923                           
 15924                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 15925  11B9  0021               	movlb	1	; select bank1
 15926  11BA  18DC               	btfsc	_Temp^(0+128),1
 15927  11BB  29C0               	goto	l6471
 15928  11BC  0020               	movlb	0	; select bank0
 15929  11BD  01A1               	clrf	_getMain_All_Error_Status$3568
 15930  11BE  01A2               	clrf	_getMain_All_Error_Status$3568+1
 15931  11BF  29C5               	goto	l1466
 15932  11C0                     l6471:	
 15933  11C0  3002               	movlw	2
 15934  11C1  0020               	movlb	0	; select bank0
 15935  11C2  00A1               	movwf	_getMain_All_Error_Status$3568
 15936  11C3  3000               	movlw	0
 15937  11C4  00A2               	movwf	_getMain_All_Error_Status$3568+1
 15938  11C5                     l1466:	
 15939  11C5  0821               	movf	_getMain_All_Error_Status$3568,w
 15940  11C6  00A0               	movwf	??_getMain_All_Error_Status
 15941  11C7  0820               	movf	??_getMain_All_Error_Status,w
 15942  11C8  00A6               	movwf	getMain_All_Error_Status@status
 15943  11C9                     l6473:	
 15944                           
 15945                           ;Main_B1.c: 438: }
 15946                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 15947  11C9  08A6               	movf	getMain_All_Error_Status@status,f
 15948  11CA  1D03               	skipz
 15949  11CB  29E0               	goto	l1467
 15950  11CC  0825               	movf	getMain_All_Error_Status@command,w
 15951  11CD  3A03               	xorlw	3
 15952  11CE  1903               	skipnz
 15953  11CF  29E0               	goto	l1467
 15954                           
 15955                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 15956  11D0  0022               	movlb	2	; select bank2
 15957  11D1  1AB2               	btfsc	_Load^(0+256),5
 15958  11D2  29D7               	goto	l6481
 15959  11D3  0020               	movlb	0	; select bank0
 15960  11D4  01A3               	clrf	_getMain_All_Error_Status$3569
 15961  11D5  01A4               	clrf	_getMain_All_Error_Status$3569+1
 15962  11D6  29DC               	goto	l1471
 15963  11D7                     l6481:	
 15964  11D7  3003               	movlw	3
 15965  11D8  0020               	movlb	0	; select bank0
 15966  11D9  00A3               	movwf	_getMain_All_Error_Status$3569
 15967  11DA  3000               	movlw	0
 15968  11DB  00A4               	movwf	_getMain_All_Error_Status$3569+1
 15969  11DC                     l1471:	
 15970  11DC  0823               	movf	_getMain_All_Error_Status$3569,w
 15971  11DD  00A0               	movwf	??_getMain_All_Error_Status
 15972  11DE  0820               	movf	??_getMain_All_Error_Status,w
 15973  11DF  00A6               	movwf	getMain_All_Error_Status@status
 15974  11E0                     l1467:	
 15975                           
 15976                           ;Main_B1.c: 445: }
 15977                           ;Main_B1.c: 455: return status;
 15978  11E0  0826               	movf	getMain_All_Error_Status@status,w
 15979  11E1  0008               	return
 15980  11E2                     __end_of_getMain_All_Error_Status:	
 15981                           
 15982                           	psect	text111
 15983  1B9E                     __ptext111:	
 15984 ;; *************** function _DimmerLights_Initialization *****************
 15985 ;; Defined at:
 15986 ;;		line 632 in file "../src/Dimmer_B1.c"
 15987 ;; Parameters:    Size  Location     Type
 15988 ;;		None
 15989 ;; Auto vars:     Size  Location     Type
 15990 ;;		None
 15991 ;; Return value:  Size  Location     Type
 15992 ;;		None               void
 15993 ;; Registers used:
 15994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15995 ;; Tracked objects:
 15996 ;;		On entry : 0/0
 15997 ;;		On exit  : 0/0
 15998 ;;		Unchanged: 0/0
 15999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;Total ram usage:        0 bytes
 16005 ;; Hardware stack levels used:    1
 16006 ;; Hardware stack levels required when called:    9
 16007 ;; This function calls:
 16008 ;;		_DimmerIntr_Initialization
 16009 ;;		_setDimmerLights_Initialization
 16010 ;; This function is called by:
 16011 ;;		_main
 16012 ;; This function uses a non-reentrant model
 16013 ;;
 16014                           
 16015                           
 16016                           ;psect for function _DimmerLights_Initialization
 16017  1B9E                     _DimmerLights_Initialization:	
 16018                           
 16019                           ;Dimmer_B1.c: 634: setDimmerLights_Initialization(1);
 16020                           
 16021                           ;incstack = 0
 16022                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16023  1B9E  3001               	movlw	1
 16024  1B9F  319B  234B  319B   	fcall	_setDimmerLights_Initialization
 16025                           
 16026                           ;Dimmer_B1.c: 644: DimmerIntr_Initialization();
 16027  1BA2  3193  232A         	fcall	_DimmerIntr_Initialization
 16028  1BA4  0008               	return
 16029  1BA5                     __end_of_DimmerLights_Initialization:	
 16030                           
 16031                           	psect	text112
 16032  1B4B                     __ptext112:	
 16033 ;; *************** function _setDimmerLights_Initialization *****************
 16034 ;; Defined at:
 16035 ;;		line 648 in file "../src/Dimmer_B1.c"
 16036 ;; Parameters:    Size  Location     Type
 16037 ;;  lights          1    wreg     unsigned char 
 16038 ;; Auto vars:     Size  Location     Type
 16039 ;;  lights          1    0[COMMON] unsigned char 
 16040 ;; Return value:  Size  Location     Type
 16041 ;;		None               void
 16042 ;; Registers used:
 16043 ;;		wreg
 16044 ;; Tracked objects:
 16045 ;;		On entry : 0/0
 16046 ;;		On exit  : 0/0
 16047 ;;		Unchanged: 0/0
 16048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16053 ;;Total ram usage:        0 bytes
 16054 ;; Hardware stack levels used:    1
 16055 ;; Hardware stack levels required when called:    5
 16056 ;; This function calls:
 16057 ;;		Nothing
 16058 ;; This function is called by:
 16059 ;;		_DimmerLights_Initialization
 16060 ;; This function uses a non-reentrant model
 16061 ;;
 16062                           
 16063                           
 16064                           ;psect for function _setDimmerLights_Initialization
 16065  1B4B                     _setDimmerLights_Initialization:	
 16066                           
 16067                           ;incstack = 0
 16068                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16069  1B4B  0008               	return
 16070  1B4C                     __end_of_setDimmerLights_Initialization:	
 16071                           
 16072                           	psect	text113
 16073  132A                     __ptext113:	
 16074 ;; *************** function _DimmerIntr_Initialization *****************
 16075 ;; Defined at:
 16076 ;;		line 7 in file "../src/Dimmer_B1.c"
 16077 ;; Parameters:    Size  Location     Type
 16078 ;;		None
 16079 ;; Auto vars:     Size  Location     Type
 16080 ;;		None
 16081 ;; Return value:  Size  Location     Type
 16082 ;;		None               void
 16083 ;; Registers used:
 16084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16085 ;; Tracked objects:
 16086 ;;		On entry : 0/0
 16087 ;;		On exit  : 0/0
 16088 ;;		Unchanged: 0/0
 16089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16093 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16094 ;;Total ram usage:        1 bytes
 16095 ;; Hardware stack levels used:    1
 16096 ;; Hardware stack levels required when called:    8
 16097 ;; This function calls:
 16098 ;;		_getDimmerLights_PercentToValue
 16099 ;;		_getDimmerLights_ValueToPercent
 16100 ;;		_setMemory_Modify
 16101 ;; This function is called by:
 16102 ;;		_DimmerLights_Initialization
 16103 ;; This function uses a non-reentrant model
 16104 ;;
 16105                           
 16106                           
 16107                           ;psect for function _DimmerIntr_Initialization
 16108  132A                     _DimmerIntr_Initialization:	
 16109                           
 16110                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16111                           
 16112                           ;incstack = 0
 16113                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16114  132A  3007               	movlw	7
 16115  132B  0020               	movlb	0	; select bank0
 16116  132C  00E2               	movwf	??_DimmerIntr_Initialization
 16117  132D  0862               	movf	??_DimmerIntr_Initialization,w
 16118  132E  0021               	movlb	1	; select bank1
 16119  132F  00CB               	movwf	(_DimmerIntr1^(0+128)+4)
 16120                           
 16121                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(70*0.8));
 16122  1330  3038               	movlw	56
 16123  1331  0020               	movlb	0	; select bank0
 16124  1332  00E2               	movwf	??_DimmerIntr_Initialization
 16125  1333  0862               	movf	??_DimmerIntr_Initialization,w
 16126  1334  0021               	movlb	1	; select bank1
 16127  1335  00CD               	movwf	(_DimmerIntr1^(0+128)+6)
 16128                           
 16129                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.8));
 16130  1336  3008               	movlw	8
 16131  1337  0020               	movlb	0	; select bank0
 16132  1338  00E2               	movwf	??_DimmerIntr_Initialization
 16133  1339  0862               	movf	??_DimmerIntr_Initialization,w
 16134  133A  0021               	movlb	1	; select bank1
 16135  133B  00CE               	movwf	(_DimmerIntr1^(0+128)+7)
 16136                           
 16137                           ;Dimmer_B1.c: 15: if (myMain.InitDimmer == 1) {
 16138  133C  1E38               	btfss	(_myMain^(0+128)+10),4
 16139  133D  2B4E               	goto	l7047
 16140                           
 16141                           ;Dimmer_B1.c: 16: product->Data[21] = getDimmerLights_ValueToPercent(((char)(70*0.8)));
 16142  133E  3038               	movlw	56
 16143  133F  3196  26CB  3193   	fcall	_getDimmerLights_ValueToPercent
 16144  1342  0020               	movlb	0	; select bank0
 16145  1343  00E2               	movwf	??_DimmerIntr_Initialization
 16146  1344  0021               	movlb	1	; select bank1
 16147  1345  086F               	movf	_product^(0+128),w
 16148  1346  3E15               	addlw	21
 16149  1347  0086               	movwf	6
 16150  1348  3002               	movlw	2	; select bank4/5
 16151  1349  0087               	movwf	7
 16152  134A  0020               	movlb	0	; select bank0
 16153  134B  0862               	movf	??_DimmerIntr_Initialization,w
 16154  134C  0081               	movwf	1
 16155                           
 16156                           ;Dimmer_B1.c: 17: } else {
 16157  134D  2B5D               	goto	l7049
 16158  134E                     l7047:	
 16159                           
 16160                           ;Dimmer_B1.c: 18: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16161  134E  0021               	movlb	1	; select bank1
 16162  134F  086F               	movf	_product^(0+128),w
 16163  1350  3E15               	addlw	21
 16164  1351  0086               	movwf	6
 16165  1352  3002               	movlw	2	; select bank4/5
 16166  1353  0087               	movwf	7
 16167  1354  0801               	movf	1,w
 16168  1355  3196  2666  3193   	fcall	_getDimmerLights_PercentToValue
 16169  1358  0020               	movlb	0	; select bank0
 16170  1359  00E2               	movwf	??_DimmerIntr_Initialization
 16171  135A  0862               	movf	??_DimmerIntr_Initialization,w
 16172  135B  0021               	movlb	1	; select bank1
 16173  135C  00CC               	movwf	(_DimmerIntr1^(0+128)+5)
 16174  135D                     l7049:	
 16175                           
 16176                           ;Dimmer_B1.c: 19: }
 16177                           ;Dimmer_B1.c: 58: if (myMain.InitDimmer == 1) {
 16178  135D  0021               	movlb	1	; select bank1
 16179  135E  1E38               	btfss	(_myMain^(0+128)+10),4
 16180  135F  0008               	return
 16181                           
 16182                           ;Dimmer_B1.c: 59: myMain.InitDimmer = 0;
 16183  1360  1238               	bcf	(_myMain^(0+128)+10),4
 16184                           
 16185                           ;Dimmer_B1.c: 60: myMain.SaveDimmer = 1;
 16186  1361  16B8               	bsf	(_myMain^(0+128)+10),5
 16187                           
 16188                           ;Dimmer_B1.c: 61: setMemory_Modify(1);
 16189  1362  3001               	movlw	1
 16190  1363  319D  25A4         	fcall	_setMemory_Modify
 16191  1365  0008               	return
 16192  1366                     __end_of_DimmerIntr_Initialization:	
 16193                           
 16194                           	psect	text114
 16195  1DA4                     __ptext114:	
 16196 ;; *************** function _setMemory_Modify *****************
 16197 ;; Defined at:
 16198 ;;		line 1081 in file "../src/MCU_B1.c"
 16199 ;; Parameters:    Size  Location     Type
 16200 ;;  command         1    wreg     unsigned char 
 16201 ;; Auto vars:     Size  Location     Type
 16202 ;;  command         1    1[BANK0 ] unsigned char 
 16203 ;; Return value:  Size  Location     Type
 16204 ;;		None               void
 16205 ;; Registers used:
 16206 ;;		wreg, status,2, status,0
 16207 ;; Tracked objects:
 16208 ;;		On entry : 0/0
 16209 ;;		On exit  : 0/0
 16210 ;;		Unchanged: 0/0
 16211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16216 ;;Total ram usage:        2 bytes
 16217 ;; Hardware stack levels used:    1
 16218 ;; Hardware stack levels required when called:    5
 16219 ;; This function calls:
 16220 ;;		Nothing
 16221 ;; This function is called by:
 16222 ;;		_DimmerIntr_Initialization
 16223 ;;		_setDimmerLights_Dimming
 16224 ;;		_setLog_Code
 16225 ;;		_setRFSW_AdjControl
 16226 ;; This function uses a non-reentrant model
 16227 ;;
 16228                           
 16229                           
 16230                           ;psect for function _setMemory_Modify
 16231  1DA4                     _setMemory_Modify:	
 16232                           
 16233                           ;incstack = 0
 16234                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16235                           ;setMemory_Modify@command stored from wreg
 16236  1DA4  0020               	movlb	0	; select bank0
 16237  1DA5  00A1               	movwf	setMemory_Modify@command
 16238                           
 16239                           ;MCU_B1.c: 1082: Memory.Modify = command == 1 ? 1 : 0;
 16240  1DA6  0821               	movf	setMemory_Modify@command,w
 16241  1DA7  3A01               	xorlw	1
 16242  1DA8  3000               	movlw	0
 16243  1DA9  1903               	skipnz
 16244  1DAA  3001               	movlw	1
 16245  1DAB  00A0               	movwf	??_setMemory_Modify
 16246  1DAC  0023               	movlb	3	; select bank3
 16247  1DAD  0862               	movf	(_Memory^(0+384)+36),w
 16248  1DAE  0020               	movlb	0	; select bank0
 16249  1DAF  0620               	xorwf	??_setMemory_Modify,w
 16250  1DB0  39FE               	andlw	-2
 16251  1DB1  0620               	xorwf	??_setMemory_Modify,w
 16252  1DB2  0023               	movlb	3	; select bank3
 16253  1DB3  00E2               	movwf	(_Memory^(0+384)+36)
 16254                           
 16255                           ;MCU_B1.c: 1083: Memory.Time = 0;
 16256  1DB4  01E0               	clrf	(_Memory^(0+384)+34)
 16257  1DB5  01E1               	clrf	((_Memory+1)^(0+384)+34)
 16258  1DB6  0008               	return
 16259  1DB7                     __end_of_setMemory_Modify:	
 16260                           
 16261                           	psect	text115
 16262  16CB                     __ptext115:	
 16263 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16264 ;; Defined at:
 16265 ;;		line 1119 in file "../src/Dimmer_B1.c"
 16266 ;; Parameters:    Size  Location     Type
 16267 ;;  value           1    wreg     unsigned char 
 16268 ;; Auto vars:     Size  Location     Type
 16269 ;;  value           1   62[BANK0 ] unsigned char 
 16270 ;;  i               3   63[BANK0 ] float 
 16271 ;; Return value:  Size  Location     Type
 16272 ;;                  1    wreg      unsigned char 
 16273 ;; Registers used:
 16274 ;;		wreg, status,2, status,0, pclath, cstack
 16275 ;; Tracked objects:
 16276 ;;		On entry : 0/0
 16277 ;;		On exit  : 0/0
 16278 ;;		Unchanged: 0/0
 16279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16281 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16282 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16283 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16284 ;;Total ram usage:        6 bytes
 16285 ;; Hardware stack levels used:    1
 16286 ;; Hardware stack levels required when called:    7
 16287 ;; This function calls:
 16288 ;;		___awtoft
 16289 ;;		___ftadd
 16290 ;;		___ftdiv
 16291 ;;		___ftneg
 16292 ;;		___fttol
 16293 ;; This function is called by:
 16294 ;;		_DimmerIntr_Initialization
 16295 ;;		_setDimmerLights_Dimming
 16296 ;; This function uses a non-reentrant model
 16297 ;;
 16298                           
 16299                           
 16300                           ;psect for function _getDimmerLights_ValueToPercent
 16301  16CB                     _getDimmerLights_ValueToPercent:	
 16302                           
 16303                           ;incstack = 0
 16304                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16305                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16306  16CB  0020               	movlb	0	; select bank0
 16307  16CC  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16308                           
 16309                           ;Dimmer_B1.c: 1127: float i = ((char)(70*0.8)) - ((char)(10*0.8));
 16310  16CD  3000               	movlw	0
 16311  16CE  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16312  16CF  3040               	movlw	64
 16313  16D0  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16314  16D1  3042               	movlw	66
 16315  16D2  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16316                           
 16317                           ;Dimmer_B1.c: 1128: i /= 100;
 16318  16D3  3000               	movlw	0
 16319  16D4  00AE               	movwf	___ftdiv@f2
 16320  16D5  30C8               	movlw	200
 16321  16D6  00AF               	movwf	___ftdiv@f2+1
 16322  16D7  3042               	movlw	66
 16323  16D8  00B0               	movwf	___ftdiv@f2+2
 16324  16D9  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16325  16DA  00B1               	movwf	___ftdiv@f1
 16326  16DB  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16327  16DC  00B2               	movwf	___ftdiv@f1+1
 16328  16DD  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16329  16DE  00B3               	movwf	___ftdiv@f1+2
 16330  16DF  318D  2537  3196   	fcall	___ftdiv
 16331  16E2  0020               	movlb	0	; select bank0
 16332  16E3  082E               	movf	?___ftdiv,w
 16333  16E4  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16334  16E5  082F               	movf	?___ftdiv+1,w
 16335  16E6  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16336  16E7  0830               	movf	?___ftdiv+2,w
 16337  16E8  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16338                           
 16339                           ;Dimmer_B1.c: 1130: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 16340  16E9  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16341  16EA  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16342  16EB  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16343  16EC  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16344  16ED  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16345  16EE  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16346  16EF  1903               	skipnz
 16347  16F0  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16348  16F1  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16349  16F2  3E38               	addlw	56
 16350  16F3  00A8               	movwf	___awtoft@c
 16351  16F4  3000               	movlw	0
 16352  16F5  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16353  16F6  00A9               	movwf	___awtoft@c+1
 16354  16F7  3190  206D  3196   	fcall	___awtoft
 16355  16FA  0020               	movlb	0	; select bank0
 16356  16FB  0828               	movf	?___awtoft,w
 16357  16FC  00B1               	movwf	___ftdiv@f1
 16358  16FD  0829               	movf	?___awtoft+1,w
 16359  16FE  00B2               	movwf	___ftdiv@f1+1
 16360  16FF  082A               	movf	?___awtoft+2,w
 16361  1700  00B3               	movwf	___ftdiv@f1+2
 16362  1701  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16363  1702  00AE               	movwf	___ftdiv@f2
 16364  1703  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16365  1704  00AF               	movwf	___ftdiv@f2+1
 16366  1705  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16367  1706  00B0               	movwf	___ftdiv@f2+2
 16368  1707  318D  2537  3196   	fcall	___ftdiv
 16369  170A  0020               	movlb	0	; select bank0
 16370  170B  082E               	movf	?___ftdiv,w
 16371  170C  00BE               	movwf	___ftneg@f1
 16372  170D  082F               	movf	?___ftdiv+1,w
 16373  170E  00BF               	movwf	___ftneg@f1+1
 16374  170F  0830               	movf	?___ftdiv+2,w
 16375  1710  00C0               	movwf	___ftneg@f1+2
 16376  1711  319B  23CC  3196   	fcall	___ftneg
 16377  1714  0020               	movlb	0	; select bank0
 16378  1715  083E               	movf	?___ftneg,w
 16379  1716  00C4               	movwf	___ftadd@f2
 16380  1717  083F               	movf	?___ftneg+1,w
 16381  1718  00C5               	movwf	___ftadd@f2+1
 16382  1719  0840               	movf	?___ftneg+2,w
 16383  171A  00C6               	movwf	___ftadd@f2+2
 16384  171B  3000               	movlw	0
 16385  171C  00C1               	movwf	___ftadd@f1
 16386  171D  30C8               	movlw	200
 16387  171E  00C2               	movwf	___ftadd@f1+1
 16388  171F  3042               	movlw	66
 16389  1720  00C3               	movwf	___ftadd@f1+2
 16390  1721  3183  2381  3196   	fcall	___ftadd
 16391  1724  0020               	movlb	0	; select bank0
 16392  1725  0841               	movf	?___ftadd,w
 16393  1726  00CE               	movwf	___fttol@f1
 16394  1727  0842               	movf	?___ftadd+1,w
 16395  1728  00CF               	movwf	___fttol@f1+1
 16396  1729  0843               	movf	?___ftadd+2,w
 16397  172A  00D0               	movwf	___fttol@f1+2
 16398  172B  318C  2424         	fcall	___fttol
 16399  172D  0020               	movlb	0	; select bank0
 16400  172E  084E               	movf	?___fttol,w
 16401  172F  0008               	return
 16402  1730                     __end_of_getDimmerLights_ValueToPercent:	
 16403                           
 16404                           	psect	text116
 16405  1666                     __ptext116:	
 16406 ;; *************** function _getDimmerLights_PercentToValue *****************
 16407 ;; Defined at:
 16408 ;;		line 1103 in file "../src/Dimmer_B1.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;  value           1    wreg     unsigned char 
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;  value           1   62[BANK0 ] unsigned char 
 16413 ;;  i               3   63[BANK0 ] float 
 16414 ;; Return value:  Size  Location     Type
 16415 ;;                  1    wreg      unsigned char 
 16416 ;; Registers used:
 16417 ;;		wreg, status,2, status,0, pclath, cstack
 16418 ;; Tracked objects:
 16419 ;;		On entry : 0/0
 16420 ;;		On exit  : 0/0
 16421 ;;		Unchanged: 0/0
 16422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16427 ;;Total ram usage:        6 bytes
 16428 ;; Hardware stack levels used:    1
 16429 ;; Hardware stack levels required when called:    7
 16430 ;; This function calls:
 16431 ;;		___awtoft
 16432 ;;		___ftadd
 16433 ;;		___ftdiv
 16434 ;;		___ftmul
 16435 ;;		___ftneg
 16436 ;;		___fttol
 16437 ;; This function is called by:
 16438 ;;		_DimmerIntr_Initialization
 16439 ;;		_setDimmerLights_OnOff
 16440 ;;		_setRFSW_AdjControl
 16441 ;; This function uses a non-reentrant model
 16442 ;;
 16443                           
 16444                           
 16445                           ;psect for function _getDimmerLights_PercentToValue
 16446  1666                     _getDimmerLights_PercentToValue:	
 16447                           
 16448                           ;incstack = 0
 16449                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16450                           ;getDimmerLights_PercentToValue@value stored from wreg
 16451  1666  0020               	movlb	0	; select bank0
 16452  1667  00DE               	movwf	getDimmerLights_PercentToValue@value
 16453                           
 16454                           ;Dimmer_B1.c: 1111: float i = ((char)(70*0.8)) - ((char)(10*0.8));
 16455  1668  3000               	movlw	0
 16456  1669  00DF               	movwf	getDimmerLights_PercentToValue@i
 16457  166A  3040               	movlw	64
 16458  166B  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16459  166C  3042               	movlw	66
 16460  166D  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16461                           
 16462                           ;Dimmer_B1.c: 1112: i /= 100;
 16463  166E  3000               	movlw	0
 16464  166F  00AE               	movwf	___ftdiv@f2
 16465  1670  30C8               	movlw	200
 16466  1671  00AF               	movwf	___ftdiv@f2+1
 16467  1672  3042               	movlw	66
 16468  1673  00B0               	movwf	___ftdiv@f2+2
 16469  1674  085F               	movf	getDimmerLights_PercentToValue@i,w
 16470  1675  00B1               	movwf	___ftdiv@f1
 16471  1676  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16472  1677  00B2               	movwf	___ftdiv@f1+1
 16473  1678  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16474  1679  00B3               	movwf	___ftdiv@f1+2
 16475  167A  318D  2537  3196   	fcall	___ftdiv
 16476  167D  0020               	movlb	0	; select bank0
 16477  167E  082E               	movf	?___ftdiv,w
 16478  167F  00DF               	movwf	getDimmerLights_PercentToValue@i
 16479  1680  082F               	movf	?___ftdiv+1,w
 16480  1681  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16481  1682  0830               	movf	?___ftdiv+2,w
 16482  1683  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16483                           
 16484                           ;Dimmer_B1.c: 1114: return (char) (((char)(70*0.8)) - ((100 - value) * i));
 16485  1684  085E               	movf	getDimmerLights_PercentToValue@value,w
 16486  1685  00DC               	movwf	??_getDimmerLights_PercentToValue
 16487  1686  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 16488  1687  09DC               	comf	??_getDimmerLights_PercentToValue,f
 16489  1688  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 16490  1689  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 16491  168A  1903               	skipnz
 16492  168B  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 16493  168C  085C               	movf	??_getDimmerLights_PercentToValue,w
 16494  168D  3E64               	addlw	100
 16495  168E  00A8               	movwf	___awtoft@c
 16496  168F  3000               	movlw	0
 16497  1690  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16498  1691  00A9               	movwf	___awtoft@c+1
 16499  1692  3190  206D  3196   	fcall	___awtoft
 16500  1695  0020               	movlb	0	; select bank0
 16501  1696  0828               	movf	?___awtoft,w
 16502  1697  00B1               	movwf	___ftmul@f2
 16503  1698  0829               	movf	?___awtoft+1,w
 16504  1699  00B2               	movwf	___ftmul@f2+1
 16505  169A  082A               	movf	?___awtoft+2,w
 16506  169B  00B3               	movwf	___ftmul@f2+2
 16507  169C  085F               	movf	getDimmerLights_PercentToValue@i,w
 16508  169D  00AE               	movwf	___ftmul@f1
 16509  169E  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16510  169F  00AF               	movwf	___ftmul@f1+1
 16511  16A0  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16512  16A1  00B0               	movwf	___ftmul@f1+2
 16513  16A2  318E  2691  3196   	fcall	___ftmul
 16514  16A5  0020               	movlb	0	; select bank0
 16515  16A6  082E               	movf	?___ftmul,w
 16516  16A7  00BE               	movwf	___ftneg@f1
 16517  16A8  082F               	movf	?___ftmul+1,w
 16518  16A9  00BF               	movwf	___ftneg@f1+1
 16519  16AA  0830               	movf	?___ftmul+2,w
 16520  16AB  00C0               	movwf	___ftneg@f1+2
 16521  16AC  319B  23CC  3196   	fcall	___ftneg
 16522  16AF  0020               	movlb	0	; select bank0
 16523  16B0  083E               	movf	?___ftneg,w
 16524  16B1  00C4               	movwf	___ftadd@f2
 16525  16B2  083F               	movf	?___ftneg+1,w
 16526  16B3  00C5               	movwf	___ftadd@f2+1
 16527  16B4  0840               	movf	?___ftneg+2,w
 16528  16B5  00C6               	movwf	___ftadd@f2+2
 16529  16B6  3000               	movlw	0
 16530  16B7  00C1               	movwf	___ftadd@f1
 16531  16B8  3060               	movlw	96
 16532  16B9  00C2               	movwf	___ftadd@f1+1
 16533  16BA  3042               	movlw	66
 16534  16BB  00C3               	movwf	___ftadd@f1+2
 16535  16BC  3183  2381  3196   	fcall	___ftadd
 16536  16BF  0020               	movlb	0	; select bank0
 16537  16C0  0841               	movf	?___ftadd,w
 16538  16C1  00CE               	movwf	___fttol@f1
 16539  16C2  0842               	movf	?___ftadd+1,w
 16540  16C3  00CF               	movwf	___fttol@f1+1
 16541  16C4  0843               	movf	?___ftadd+2,w
 16542  16C5  00D0               	movwf	___fttol@f1+2
 16543  16C6  318C  2424         	fcall	___fttol
 16544  16C8  0020               	movlb	0	; select bank0
 16545  16C9  084E               	movf	?___fttol,w
 16546  16CA  0008               	return
 16547  16CB                     __end_of_getDimmerLights_PercentToValue:	
 16548                           
 16549                           	psect	text117
 16550  0C24                     __ptext117:	
 16551 ;; *************** function ___fttol *****************
 16552 ;; Defined at:
 16553 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16554 ;; Parameters:    Size  Location     Type
 16555 ;;  f1              3   46[BANK0 ] float 
 16556 ;; Auto vars:     Size  Location     Type
 16557 ;;  lval            4   55[BANK0 ] unsigned long 
 16558 ;;  exp1            1   59[BANK0 ] unsigned char 
 16559 ;;  sign1           1   54[BANK0 ] unsigned char 
 16560 ;; Return value:  Size  Location     Type
 16561 ;;                  4   46[BANK0 ] long 
 16562 ;; Registers used:
 16563 ;;		wreg, status,2, status,0
 16564 ;; Tracked objects:
 16565 ;;		On entry : 0/0
 16566 ;;		On exit  : 0/0
 16567 ;;		Unchanged: 0/0
 16568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16569 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16570 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16571 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16572 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16573 ;;Total ram usage:       14 bytes
 16574 ;; Hardware stack levels used:    1
 16575 ;; Hardware stack levels required when called:    5
 16576 ;; This function calls:
 16577 ;;		Nothing
 16578 ;; This function is called by:
 16579 ;;		_getDimmerLights_PercentToValue
 16580 ;;		_getDimmerLights_ValueToPercent
 16581 ;; This function uses a non-reentrant model
 16582 ;;
 16583                           
 16584                           
 16585                           ;psect for function ___fttol
 16586  0C24                     ___fttol:	
 16587                           
 16588                           ;incstack = 0
 16589                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16590  0C24  0020               	movlb	0	; select bank0
 16591  0C25  084E               	movf	___fttol@f1,w
 16592  0C26  00D2               	movwf	??___fttol
 16593  0C27  084F               	movf	___fttol@f1+1,w
 16594  0C28  00D3               	movwf	??___fttol+1
 16595  0C29  0850               	movf	___fttol@f1+2,w
 16596  0C2A  00D4               	movwf	??___fttol+2
 16597  0C2B  1003               	clrc
 16598  0C2C  0D53               	rlf	??___fttol+1,w
 16599  0C2D  0D54               	rlf	??___fttol+2,w
 16600  0C2E  00D5               	movwf	??___fttol+3
 16601  0C2F  0855               	movf	??___fttol+3,w
 16602  0C30  00DB               	movwf	___fttol@exp1
 16603  0C31  08DB               	movf	___fttol@exp1,f
 16604  0C32  1D03               	skipz
 16605  0C33  2C3D               	goto	l5977
 16606  0C34  3000               	movlw	0
 16607  0C35  00D1               	movwf	?___fttol+3
 16608  0C36  3000               	movlw	0
 16609  0C37  00D0               	movwf	?___fttol+2
 16610  0C38  3000               	movlw	0
 16611  0C39  00CF               	movwf	?___fttol+1
 16612  0C3A  3000               	movlw	0
 16613  0C3B  00CE               	movwf	?___fttol
 16614  0C3C  0008               	return
 16615  0C3D                     l5977:	
 16616  0C3D  084E               	movf	___fttol@f1,w
 16617  0C3E  00D2               	movwf	??___fttol
 16618  0C3F  084F               	movf	___fttol@f1+1,w
 16619  0C40  00D3               	movwf	??___fttol+1
 16620  0C41  0850               	movf	___fttol@f1+2,w
 16621  0C42  00D4               	movwf	??___fttol+2
 16622  0C43  3017               	movlw	23
 16623  0C44                     u5025:	
 16624  0C44  36D4               	lsrf	??___fttol+2,f
 16625  0C45  0CD3               	rrf	??___fttol+1,f
 16626  0C46  0CD2               	rrf	??___fttol,f
 16627  0C47  0B89               	decfsz	9,f
 16628  0C48  2C44               	goto	u5025
 16629  0C49  0852               	movf	??___fttol,w
 16630  0C4A  00D5               	movwf	??___fttol+3
 16631  0C4B  0855               	movf	??___fttol+3,w
 16632  0C4C  00D6               	movwf	___fttol@sign1
 16633  0C4D  17CF               	bsf	___fttol@f1+1,7
 16634  0C4E  30FF               	movlw	255
 16635  0C4F  05CE               	andwf	___fttol@f1,f
 16636  0C50  30FF               	movlw	255
 16637  0C51  05CF               	andwf	___fttol@f1+1,f
 16638  0C52  3000               	movlw	0
 16639  0C53  05D0               	andwf	___fttol@f1+2,f
 16640  0C54  084E               	movf	___fttol@f1,w
 16641  0C55  00D7               	movwf	___fttol@lval
 16642  0C56  084F               	movf	___fttol@f1+1,w
 16643  0C57  00D8               	movwf	___fttol@lval+1
 16644  0C58  0850               	movf	___fttol@f1+2,w
 16645  0C59  00D9               	movwf	___fttol@lval+2
 16646  0C5A  01DA               	clrf	___fttol@lval+3
 16647  0C5B  308E               	movlw	142
 16648  0C5C  02DB               	subwf	___fttol@exp1,f
 16649  0C5D  1FDB               	btfss	___fttol@exp1,7
 16650  0C5E  2C7B               	goto	l5997
 16651  0C5F  085B               	movf	___fttol@exp1,w
 16652  0C60  3A80               	xorlw	128
 16653  0C61  3E8F               	addlw	143
 16654  0C62  1803               	skipnc
 16655  0C63  2C6D               	goto	l5995
 16656  0C64  3000               	movlw	0
 16657  0C65  00D1               	movwf	?___fttol+3
 16658  0C66  3000               	movlw	0
 16659  0C67  00D0               	movwf	?___fttol+2
 16660  0C68  3000               	movlw	0
 16661  0C69  00CF               	movwf	?___fttol+1
 16662  0C6A  3000               	movlw	0
 16663  0C6B  00CE               	movwf	?___fttol
 16664  0C6C  0008               	return
 16665  0C6D                     l5995:	
 16666  0C6D  3001               	movlw	1
 16667  0C6E                     u5055:	
 16668  0C6E  36DA               	lsrf	___fttol@lval+3,f
 16669  0C6F  0CD9               	rrf	___fttol@lval+2,f
 16670  0C70  0CD8               	rrf	___fttol@lval+1,f
 16671  0C71  0CD7               	rrf	___fttol@lval,f
 16672  0C72  0B89               	decfsz	9,f
 16673  0C73  2C6E               	goto	u5055
 16674  0C74  3001               	movlw	1
 16675  0C75  00D2               	movwf	??___fttol
 16676  0C76  0852               	movf	??___fttol,w
 16677  0C77  07DB               	addwf	___fttol@exp1,f
 16678  0C78  1903               	btfsc	3,2
 16679  0C79  2C94               	goto	l6007
 16680  0C7A  2C6D               	goto	l5995
 16681  0C7B                     l5997:	
 16682  0C7B  3018               	movlw	24
 16683  0C7C  025B               	subwf	___fttol@exp1,w
 16684  0C7D  1C03               	skipc
 16685  0C7E  2C91               	goto	l6005
 16686  0C7F  3000               	movlw	0
 16687  0C80  00D1               	movwf	?___fttol+3
 16688  0C81  3000               	movlw	0
 16689  0C82  00D0               	movwf	?___fttol+2
 16690  0C83  3000               	movlw	0
 16691  0C84  00CF               	movwf	?___fttol+1
 16692  0C85  3000               	movlw	0
 16693  0C86  00CE               	movwf	?___fttol
 16694  0C87  0008               	return
 16695  0C88                     l6003:	
 16696  0C88  3001               	movlw	1
 16697  0C89                     u5085:	
 16698  0C89  35D7               	lslf	___fttol@lval,f
 16699  0C8A  0DD8               	rlf	___fttol@lval+1,f
 16700  0C8B  0DD9               	rlf	___fttol@lval+2,f
 16701  0C8C  0DDA               	rlf	___fttol@lval+3,f
 16702  0C8D  0B89               	decfsz	9,f
 16703  0C8E  2C89               	goto	u5085
 16704  0C8F  3001               	movlw	1
 16705  0C90  02DB               	subwf	___fttol@exp1,f
 16706  0C91                     l6005:	
 16707  0C91  08DB               	movf	___fttol@exp1,f
 16708  0C92  1D03               	skipz
 16709  0C93  2C88               	goto	l6003
 16710  0C94                     l6007:	
 16711  0C94  0856               	movf	___fttol@sign1,w
 16712  0C95  1903               	btfsc	3,2
 16713  0C96  2CA2               	goto	l6011
 16714  0C97  09D7               	comf	___fttol@lval,f
 16715  0C98  09D8               	comf	___fttol@lval+1,f
 16716  0C99  09D9               	comf	___fttol@lval+2,f
 16717  0C9A  09DA               	comf	___fttol@lval+3,f
 16718  0C9B  0AD7               	incf	___fttol@lval,f
 16719  0C9C  1903               	skipnz
 16720  0C9D  0AD8               	incf	___fttol@lval+1,f
 16721  0C9E  1903               	skipnz
 16722  0C9F  0AD9               	incf	___fttol@lval+2,f
 16723  0CA0  1903               	skipnz
 16724  0CA1  0ADA               	incf	___fttol@lval+3,f
 16725  0CA2                     l6011:	
 16726  0CA2  085A               	movf	___fttol@lval+3,w
 16727  0CA3  00D1               	movwf	?___fttol+3
 16728  0CA4  0859               	movf	___fttol@lval+2,w
 16729  0CA5  00D0               	movwf	?___fttol+2
 16730  0CA6  0858               	movf	___fttol@lval+1,w
 16731  0CA7  00CF               	movwf	?___fttol+1
 16732  0CA8  0857               	movf	___fttol@lval,w
 16733  0CA9  00CE               	movwf	?___fttol
 16734  0CAA  0008               	return
 16735  0CAB                     __end_of___fttol:	
 16736                           
 16737                           	psect	text118
 16738  1BCC                     __ptext118:	
 16739 ;; *************** function ___ftneg *****************
 16740 ;; Defined at:
 16741 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16742 ;; Parameters:    Size  Location     Type
 16743 ;;  f1              3   30[BANK0 ] float 
 16744 ;; Auto vars:     Size  Location     Type
 16745 ;;		None
 16746 ;; Return value:  Size  Location     Type
 16747 ;;                  3   30[BANK0 ] float 
 16748 ;; Registers used:
 16749 ;;		wreg
 16750 ;; Tracked objects:
 16751 ;;		On entry : 0/0
 16752 ;;		On exit  : 0/0
 16753 ;;		Unchanged: 0/0
 16754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16755 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16758 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16759 ;;Total ram usage:        3 bytes
 16760 ;; Hardware stack levels used:    1
 16761 ;; Hardware stack levels required when called:    5
 16762 ;; This function calls:
 16763 ;;		Nothing
 16764 ;; This function is called by:
 16765 ;;		_getDimmerLights_PercentToValue
 16766 ;;		_getDimmerLights_ValueToPercent
 16767 ;; This function uses a non-reentrant model
 16768 ;;
 16769                           
 16770                           
 16771                           ;psect for function ___ftneg
 16772  1BCC                     ___ftneg:	
 16773                           
 16774                           ;incstack = 0
 16775                           ; Regs used in ___ftneg: [wreg]
 16776  1BCC  0020               	movlb	0	; select bank0
 16777  1BCD  0840               	movf	___ftneg@f1+2,w
 16778  1BCE  043F               	iorwf	___ftneg@f1+1,w
 16779  1BCF  043E               	iorwf	___ftneg@f1,w
 16780  1BD0  1903               	skipnz
 16781  1BD1  0008               	return
 16782  1BD2  3080               	movlw	128
 16783  1BD3  06C0               	xorwf	___ftneg@f1+2,f
 16784  1BD4  0008               	return
 16785  1BD5                     __end_of___ftneg:	
 16786                           
 16787                           	psect	text119
 16788  0E91                     __ptext119:	
 16789 ;; *************** function ___ftmul *****************
 16790 ;; Defined at:
 16791 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 16792 ;; Parameters:    Size  Location     Type
 16793 ;;  f1              3   14[BANK0 ] float 
 16794 ;;  f2              3   17[BANK0 ] float 
 16795 ;; Auto vars:     Size  Location     Type
 16796 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 16797 ;;  sign            1   29[BANK0 ] unsigned char 
 16798 ;;  cntr            1   28[BANK0 ] unsigned char 
 16799 ;;  exp             1   24[BANK0 ] unsigned char 
 16800 ;; Return value:  Size  Location     Type
 16801 ;;                  3   14[BANK0 ] float 
 16802 ;; Registers used:
 16803 ;;		wreg, status,2, status,0, pclath, cstack
 16804 ;; Tracked objects:
 16805 ;;		On entry : 0/0
 16806 ;;		On exit  : 0/0
 16807 ;;		Unchanged: 0/0
 16808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16809 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16810 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;Total ram usage:       16 bytes
 16814 ;; Hardware stack levels used:    1
 16815 ;; Hardware stack levels required when called:    6
 16816 ;; This function calls:
 16817 ;;		___ftpack
 16818 ;; This function is called by:
 16819 ;;		_getDimmerLights_PercentToValue
 16820 ;; This function uses a non-reentrant model
 16821 ;;
 16822                           
 16823                           
 16824                           ;psect for function ___ftmul
 16825  0E91                     ___ftmul:	
 16826                           
 16827                           ;incstack = 0
 16828                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16829  0E91  0020               	movlb	0	; select bank0
 16830  0E92  082E               	movf	___ftmul@f1,w
 16831  0E93  00B4               	movwf	??___ftmul
 16832  0E94  082F               	movf	___ftmul@f1+1,w
 16833  0E95  00B5               	movwf	??___ftmul+1
 16834  0E96  0830               	movf	___ftmul@f1+2,w
 16835  0E97  00B6               	movwf	??___ftmul+2
 16836  0E98  1003               	clrc
 16837  0E99  0D35               	rlf	??___ftmul+1,w
 16838  0E9A  0D36               	rlf	??___ftmul+2,w
 16839  0E9B  00B7               	movwf	??___ftmul+3
 16840  0E9C  0837               	movf	??___ftmul+3,w
 16841  0E9D  00B8               	movwf	___ftmul@exp
 16842  0E9E  08B8               	movf	___ftmul@exp,f
 16843  0E9F  1D03               	skipz
 16844  0EA0  2EA8               	goto	l5919
 16845  0EA1  3000               	movlw	0
 16846  0EA2  00AE               	movwf	?___ftmul
 16847  0EA3  3000               	movlw	0
 16848  0EA4  00AF               	movwf	?___ftmul+1
 16849  0EA5  3000               	movlw	0
 16850  0EA6  00B0               	movwf	?___ftmul+2
 16851  0EA7  0008               	return
 16852  0EA8                     l5919:	
 16853  0EA8  0831               	movf	___ftmul@f2,w
 16854  0EA9  00B4               	movwf	??___ftmul
 16855  0EAA  0832               	movf	___ftmul@f2+1,w
 16856  0EAB  00B5               	movwf	??___ftmul+1
 16857  0EAC  0833               	movf	___ftmul@f2+2,w
 16858  0EAD  00B6               	movwf	??___ftmul+2
 16859  0EAE  1003               	clrc
 16860  0EAF  0D35               	rlf	??___ftmul+1,w
 16861  0EB0  0D36               	rlf	??___ftmul+2,w
 16862  0EB1  00B7               	movwf	??___ftmul+3
 16863  0EB2  0837               	movf	??___ftmul+3,w
 16864  0EB3  00BD               	movwf	___ftmul@sign
 16865  0EB4  08BD               	movf	___ftmul@sign,f
 16866  0EB5  1D03               	skipz
 16867  0EB6  2EBE               	goto	l5925
 16868  0EB7  3000               	movlw	0
 16869  0EB8  00AE               	movwf	?___ftmul
 16870  0EB9  3000               	movlw	0
 16871  0EBA  00AF               	movwf	?___ftmul+1
 16872  0EBB  3000               	movlw	0
 16873  0EBC  00B0               	movwf	?___ftmul+2
 16874  0EBD  0008               	return
 16875  0EBE                     l5925:	
 16876  0EBE  083D               	movf	___ftmul@sign,w
 16877  0EBF  3E7B               	addlw	123
 16878  0EC0  00B4               	movwf	??___ftmul
 16879  0EC1  0834               	movf	??___ftmul,w
 16880  0EC2  07B8               	addwf	___ftmul@exp,f
 16881  0EC3  082E               	movf	___ftmul@f1,w
 16882  0EC4  00B4               	movwf	??___ftmul
 16883  0EC5  082F               	movf	___ftmul@f1+1,w
 16884  0EC6  00B5               	movwf	??___ftmul+1
 16885  0EC7  0830               	movf	___ftmul@f1+2,w
 16886  0EC8  00B6               	movwf	??___ftmul+2
 16887  0EC9  3010               	movlw	16
 16888  0ECA                     u4905:	
 16889  0ECA  36B6               	lsrf	??___ftmul+2,f
 16890  0ECB  0CB5               	rrf	??___ftmul+1,f
 16891  0ECC  0CB4               	rrf	??___ftmul,f
 16892  0ECD  0B89               	decfsz	9,f
 16893  0ECE  2ECA               	goto	u4905
 16894  0ECF  0834               	movf	??___ftmul,w
 16895  0ED0  00B7               	movwf	??___ftmul+3
 16896  0ED1  0837               	movf	??___ftmul+3,w
 16897  0ED2  00BD               	movwf	___ftmul@sign
 16898  0ED3  0831               	movf	___ftmul@f2,w
 16899  0ED4  00B4               	movwf	??___ftmul
 16900  0ED5  0832               	movf	___ftmul@f2+1,w
 16901  0ED6  00B5               	movwf	??___ftmul+1
 16902  0ED7  0833               	movf	___ftmul@f2+2,w
 16903  0ED8  00B6               	movwf	??___ftmul+2
 16904  0ED9  3010               	movlw	16
 16905  0EDA                     u4915:	
 16906  0EDA  36B6               	lsrf	??___ftmul+2,f
 16907  0EDB  0CB5               	rrf	??___ftmul+1,f
 16908  0EDC  0CB4               	rrf	??___ftmul,f
 16909  0EDD  0B89               	decfsz	9,f
 16910  0EDE  2EDA               	goto	u4915
 16911  0EDF  0834               	movf	??___ftmul,w
 16912  0EE0  00B7               	movwf	??___ftmul+3
 16913  0EE1  0837               	movf	??___ftmul+3,w
 16914  0EE2  06BD               	xorwf	___ftmul@sign,f
 16915  0EE3  3080               	movlw	128
 16916  0EE4  00B4               	movwf	??___ftmul
 16917  0EE5  0834               	movf	??___ftmul,w
 16918  0EE6  05BD               	andwf	___ftmul@sign,f
 16919  0EE7  17AF               	bsf	___ftmul@f1+1,7
 16920  0EE8  17B2               	bsf	___ftmul@f2+1,7
 16921  0EE9  30FF               	movlw	255
 16922  0EEA  05B1               	andwf	___ftmul@f2,f
 16923  0EEB  30FF               	movlw	255
 16924  0EEC  05B2               	andwf	___ftmul@f2+1,f
 16925  0EED  3000               	movlw	0
 16926  0EEE  05B3               	andwf	___ftmul@f2+2,f
 16927  0EEF  3000               	movlw	0
 16928  0EF0  00B9               	movwf	___ftmul@f3_as_product
 16929  0EF1  3000               	movlw	0
 16930  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
 16931  0EF3  3000               	movlw	0
 16932  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
 16933  0EF5  3007               	movlw	7
 16934  0EF6  00B4               	movwf	??___ftmul
 16935  0EF7  0834               	movf	??___ftmul,w
 16936  0EF8  00BC               	movwf	___ftmul@cntr
 16937  0EF9                     l5937:	
 16938  0EF9  1C2E               	btfss	___ftmul@f1,0
 16939  0EFA  2F01               	goto	l5941
 16940  0EFB  0831               	movf	___ftmul@f2,w
 16941  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
 16942  0EFD  0832               	movf	___ftmul@f2+1,w
 16943  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 16944  0EFF  0833               	movf	___ftmul@f2+2,w
 16945  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 16946  0F01                     l5941:	
 16947  0F01  3001               	movlw	1
 16948  0F02                     u4935:	
 16949  0F02  36B0               	lsrf	___ftmul@f1+2,f
 16950  0F03  0CAF               	rrf	___ftmul@f1+1,f
 16951  0F04  0CAE               	rrf	___ftmul@f1,f
 16952  0F05  0B89               	decfsz	9,f
 16953  0F06  2F02               	goto	u4935
 16954  0F07  3001               	movlw	1
 16955  0F08                     u4945:	
 16956  0F08  35B1               	lslf	___ftmul@f2,f
 16957  0F09  0DB2               	rlf	___ftmul@f2+1,f
 16958  0F0A  0DB3               	rlf	___ftmul@f2+2,f
 16959  0F0B  0B89               	decfsz	9,f
 16960  0F0C  2F08               	goto	u4945
 16961  0F0D  3001               	movlw	1
 16962  0F0E  02BC               	subwf	___ftmul@cntr,f
 16963  0F0F  1D03               	btfss	3,2
 16964  0F10  2EF9               	goto	l5937
 16965  0F11  3009               	movlw	9
 16966  0F12  00B4               	movwf	??___ftmul
 16967  0F13  0834               	movf	??___ftmul,w
 16968  0F14  00BC               	movwf	___ftmul@cntr
 16969  0F15                     l5949:	
 16970  0F15  1C2E               	btfss	___ftmul@f1,0
 16971  0F16  2F1D               	goto	l5953
 16972  0F17  0831               	movf	___ftmul@f2,w
 16973  0F18  07B9               	addwf	___ftmul@f3_as_product,f
 16974  0F19  0832               	movf	___ftmul@f2+1,w
 16975  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 16976  0F1B  0833               	movf	___ftmul@f2+2,w
 16977  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 16978  0F1D                     l5953:	
 16979  0F1D  3001               	movlw	1
 16980  0F1E                     u4975:	
 16981  0F1E  36B0               	lsrf	___ftmul@f1+2,f
 16982  0F1F  0CAF               	rrf	___ftmul@f1+1,f
 16983  0F20  0CAE               	rrf	___ftmul@f1,f
 16984  0F21  0B89               	decfsz	9,f
 16985  0F22  2F1E               	goto	u4975
 16986  0F23  3001               	movlw	1
 16987  0F24                     u4985:	
 16988  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
 16989  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
 16990  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
 16991  0F27  0B89               	decfsz	9,f
 16992  0F28  2F24               	goto	u4985
 16993  0F29  3001               	movlw	1
 16994  0F2A  02BC               	subwf	___ftmul@cntr,f
 16995  0F2B  1D03               	btfss	3,2
 16996  0F2C  2F15               	goto	l5949
 16997  0F2D  0839               	movf	___ftmul@f3_as_product,w
 16998  0F2E  00A0               	movwf	___ftpack@arg
 16999  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
 17000  0F30  00A1               	movwf	___ftpack@arg+1
 17001  0F31  083B               	movf	___ftmul@f3_as_product+2,w
 17002  0F32  00A2               	movwf	___ftpack@arg+2
 17003  0F33  0838               	movf	___ftmul@exp,w
 17004  0F34  00B4               	movwf	??___ftmul
 17005  0F35  0834               	movf	??___ftmul,w
 17006  0F36  00A3               	movwf	___ftpack@exp
 17007  0F37  083D               	movf	___ftmul@sign,w
 17008  0F38  00B5               	movwf	??___ftmul+1
 17009  0F39  0835               	movf	??___ftmul+1,w
 17010  0F3A  00A4               	movwf	___ftpack@sign
 17011  0F3B  3196  2605         	fcall	___ftpack
 17012  0F3D  0020               	movlb	0	; select bank0
 17013  0F3E  0820               	movf	?___ftpack,w
 17014  0F3F  00AE               	movwf	?___ftmul
 17015  0F40  0821               	movf	?___ftpack+1,w
 17016  0F41  00AF               	movwf	?___ftmul+1
 17017  0F42  0822               	movf	?___ftpack+2,w
 17018  0F43  00B0               	movwf	?___ftmul+2
 17019  0F44  0008               	return
 17020  0F45                     __end_of___ftmul:	
 17021                           
 17022                           	psect	text120
 17023  0D37                     __ptext120:	
 17024 ;; *************** function ___ftdiv *****************
 17025 ;; Defined at:
 17026 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17027 ;; Parameters:    Size  Location     Type
 17028 ;;  f2              3   14[BANK0 ] float 
 17029 ;;  f1              3   17[BANK0 ] float 
 17030 ;; Auto vars:     Size  Location     Type
 17031 ;;  f3              3   25[BANK0 ] float 
 17032 ;;  sign            1   29[BANK0 ] unsigned char 
 17033 ;;  exp             1   28[BANK0 ] unsigned char 
 17034 ;;  cntr            1   24[BANK0 ] unsigned char 
 17035 ;; Return value:  Size  Location     Type
 17036 ;;                  3   14[BANK0 ] float 
 17037 ;; Registers used:
 17038 ;;		wreg, status,2, status,0, pclath, cstack
 17039 ;; Tracked objects:
 17040 ;;		On entry : 0/0
 17041 ;;		On exit  : 0/0
 17042 ;;		Unchanged: 0/0
 17043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17044 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17045 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17046 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17047 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;Total ram usage:       16 bytes
 17049 ;; Hardware stack levels used:    1
 17050 ;; Hardware stack levels required when called:    6
 17051 ;; This function calls:
 17052 ;;		___ftpack
 17053 ;; This function is called by:
 17054 ;;		_getDimmerLights_PercentToValue
 17055 ;;		_getDimmerLights_ValueToPercent
 17056 ;; This function uses a non-reentrant model
 17057 ;;
 17058                           
 17059                           
 17060                           ;psect for function ___ftdiv
 17061  0D37                     ___ftdiv:	
 17062                           
 17063                           ;incstack = 0
 17064                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17065  0D37  0020               	movlb	0	; select bank0
 17066  0D38  0831               	movf	___ftdiv@f1,w
 17067  0D39  00B4               	movwf	??___ftdiv
 17068  0D3A  0832               	movf	___ftdiv@f1+1,w
 17069  0D3B  00B5               	movwf	??___ftdiv+1
 17070  0D3C  0833               	movf	___ftdiv@f1+2,w
 17071  0D3D  00B6               	movwf	??___ftdiv+2
 17072  0D3E  1003               	clrc
 17073  0D3F  0D35               	rlf	??___ftdiv+1,w
 17074  0D40  0D36               	rlf	??___ftdiv+2,w
 17075  0D41  00B7               	movwf	??___ftdiv+3
 17076  0D42  0837               	movf	??___ftdiv+3,w
 17077  0D43  00BC               	movwf	___ftdiv@exp
 17078  0D44  08BC               	movf	___ftdiv@exp,f
 17079  0D45  1D03               	skipz
 17080  0D46  2D4E               	goto	l5877
 17081  0D47  3000               	movlw	0
 17082  0D48  00AE               	movwf	?___ftdiv
 17083  0D49  3000               	movlw	0
 17084  0D4A  00AF               	movwf	?___ftdiv+1
 17085  0D4B  3000               	movlw	0
 17086  0D4C  00B0               	movwf	?___ftdiv+2
 17087  0D4D  0008               	return
 17088  0D4E                     l5877:	
 17089  0D4E  082E               	movf	___ftdiv@f2,w
 17090  0D4F  00B4               	movwf	??___ftdiv
 17091  0D50  082F               	movf	___ftdiv@f2+1,w
 17092  0D51  00B5               	movwf	??___ftdiv+1
 17093  0D52  0830               	movf	___ftdiv@f2+2,w
 17094  0D53  00B6               	movwf	??___ftdiv+2
 17095  0D54  1003               	clrc
 17096  0D55  0D35               	rlf	??___ftdiv+1,w
 17097  0D56  0D36               	rlf	??___ftdiv+2,w
 17098  0D57  00B7               	movwf	??___ftdiv+3
 17099  0D58  0837               	movf	??___ftdiv+3,w
 17100  0D59  00BD               	movwf	___ftdiv@sign
 17101  0D5A  08BD               	movf	___ftdiv@sign,f
 17102  0D5B  1D03               	skipz
 17103  0D5C  2D64               	goto	l5883
 17104  0D5D  3000               	movlw	0
 17105  0D5E  00AE               	movwf	?___ftdiv
 17106  0D5F  3000               	movlw	0
 17107  0D60  00AF               	movwf	?___ftdiv+1
 17108  0D61  3000               	movlw	0
 17109  0D62  00B0               	movwf	?___ftdiv+2
 17110  0D63  0008               	return
 17111  0D64                     l5883:	
 17112  0D64  3000               	movlw	0
 17113  0D65  00B9               	movwf	___ftdiv@f3
 17114  0D66  3000               	movlw	0
 17115  0D67  00BA               	movwf	___ftdiv@f3+1
 17116  0D68  3000               	movlw	0
 17117  0D69  00BB               	movwf	___ftdiv@f3+2
 17118  0D6A  3089               	movlw	137
 17119  0D6B  073D               	addwf	___ftdiv@sign,w
 17120  0D6C  00B4               	movwf	??___ftdiv
 17121  0D6D  0834               	movf	??___ftdiv,w
 17122  0D6E  02BC               	subwf	___ftdiv@exp,f
 17123  0D6F  0831               	movf	___ftdiv@f1,w
 17124  0D70  00B4               	movwf	??___ftdiv
 17125  0D71  0832               	movf	___ftdiv@f1+1,w
 17126  0D72  00B5               	movwf	??___ftdiv+1
 17127  0D73  0833               	movf	___ftdiv@f1+2,w
 17128  0D74  00B6               	movwf	??___ftdiv+2
 17129  0D75  3010               	movlw	16
 17130  0D76                     u4825:	
 17131  0D76  36B6               	lsrf	??___ftdiv+2,f
 17132  0D77  0CB5               	rrf	??___ftdiv+1,f
 17133  0D78  0CB4               	rrf	??___ftdiv,f
 17134  0D79  0B89               	decfsz	9,f
 17135  0D7A  2D76               	goto	u4825
 17136  0D7B  0834               	movf	??___ftdiv,w
 17137  0D7C  00B7               	movwf	??___ftdiv+3
 17138  0D7D  0837               	movf	??___ftdiv+3,w
 17139  0D7E  00BD               	movwf	___ftdiv@sign
 17140  0D7F  082E               	movf	___ftdiv@f2,w
 17141  0D80  00B4               	movwf	??___ftdiv
 17142  0D81  082F               	movf	___ftdiv@f2+1,w
 17143  0D82  00B5               	movwf	??___ftdiv+1
 17144  0D83  0830               	movf	___ftdiv@f2+2,w
 17145  0D84  00B6               	movwf	??___ftdiv+2
 17146  0D85  3010               	movlw	16
 17147  0D86                     u4835:	
 17148  0D86  36B6               	lsrf	??___ftdiv+2,f
 17149  0D87  0CB5               	rrf	??___ftdiv+1,f
 17150  0D88  0CB4               	rrf	??___ftdiv,f
 17151  0D89  0B89               	decfsz	9,f
 17152  0D8A  2D86               	goto	u4835
 17153  0D8B  0834               	movf	??___ftdiv,w
 17154  0D8C  00B7               	movwf	??___ftdiv+3
 17155  0D8D  0837               	movf	??___ftdiv+3,w
 17156  0D8E  06BD               	xorwf	___ftdiv@sign,f
 17157  0D8F  3080               	movlw	128
 17158  0D90  00B4               	movwf	??___ftdiv
 17159  0D91  0834               	movf	??___ftdiv,w
 17160  0D92  05BD               	andwf	___ftdiv@sign,f
 17161  0D93  17B2               	bsf	___ftdiv@f1+1,7
 17162  0D94  30FF               	movlw	255
 17163  0D95  05B1               	andwf	___ftdiv@f1,f
 17164  0D96  30FF               	movlw	255
 17165  0D97  05B2               	andwf	___ftdiv@f1+1,f
 17166  0D98  3000               	movlw	0
 17167  0D99  05B3               	andwf	___ftdiv@f1+2,f
 17168  0D9A  17AF               	bsf	___ftdiv@f2+1,7
 17169  0D9B  30FF               	movlw	255
 17170  0D9C  05AE               	andwf	___ftdiv@f2,f
 17171  0D9D  30FF               	movlw	255
 17172  0D9E  05AF               	andwf	___ftdiv@f2+1,f
 17173  0D9F  3000               	movlw	0
 17174  0DA0  05B0               	andwf	___ftdiv@f2+2,f
 17175  0DA1  3018               	movlw	24
 17176  0DA2  00B4               	movwf	??___ftdiv
 17177  0DA3  0834               	movf	??___ftdiv,w
 17178  0DA4  00B8               	movwf	___ftdiv@cntr
 17179  0DA5                     l5897:	
 17180  0DA5  3001               	movlw	1
 17181  0DA6                     u4845:	
 17182  0DA6  35B9               	lslf	___ftdiv@f3,f
 17183  0DA7  0DBA               	rlf	___ftdiv@f3+1,f
 17184  0DA8  0DBB               	rlf	___ftdiv@f3+2,f
 17185  0DA9  0B89               	decfsz	9,f
 17186  0DAA  2DA6               	goto	u4845
 17187  0DAB  0830               	movf	___ftdiv@f2+2,w
 17188  0DAC  0233               	subwf	___ftdiv@f1+2,w
 17189  0DAD  1D03               	skipz
 17190  0DAE  2DB5               	goto	u4855
 17191  0DAF  082F               	movf	___ftdiv@f2+1,w
 17192  0DB0  0232               	subwf	___ftdiv@f1+1,w
 17193  0DB1  1D03               	skipz
 17194  0DB2  2DB5               	goto	u4855
 17195  0DB3  082E               	movf	___ftdiv@f2,w
 17196  0DB4  0231               	subwf	___ftdiv@f1,w
 17197  0DB5                     u4855:	
 17198  0DB5  1C03               	skipc
 17199  0DB6  2DBE               	goto	l5905
 17200  0DB7  082E               	movf	___ftdiv@f2,w
 17201  0DB8  02B1               	subwf	___ftdiv@f1,f
 17202  0DB9  082F               	movf	___ftdiv@f2+1,w
 17203  0DBA  3BB2               	subwfb	___ftdiv@f1+1,f
 17204  0DBB  0830               	movf	___ftdiv@f2+2,w
 17205  0DBC  3BB3               	subwfb	___ftdiv@f1+2,f
 17206  0DBD  1439               	bsf	___ftdiv@f3,0
 17207  0DBE                     l5905:	
 17208  0DBE  3001               	movlw	1
 17209  0DBF                     u4865:	
 17210  0DBF  35B1               	lslf	___ftdiv@f1,f
 17211  0DC0  0DB2               	rlf	___ftdiv@f1+1,f
 17212  0DC1  0DB3               	rlf	___ftdiv@f1+2,f
 17213  0DC2  0B89               	decfsz	9,f
 17214  0DC3  2DBF               	goto	u4865
 17215  0DC4  3001               	movlw	1
 17216  0DC5  02B8               	subwf	___ftdiv@cntr,f
 17217  0DC6  1D03               	btfss	3,2
 17218  0DC7  2DA5               	goto	l5897
 17219  0DC8  0839               	movf	___ftdiv@f3,w
 17220  0DC9  00A0               	movwf	___ftpack@arg
 17221  0DCA  083A               	movf	___ftdiv@f3+1,w
 17222  0DCB  00A1               	movwf	___ftpack@arg+1
 17223  0DCC  083B               	movf	___ftdiv@f3+2,w
 17224  0DCD  00A2               	movwf	___ftpack@arg+2
 17225  0DCE  083C               	movf	___ftdiv@exp,w
 17226  0DCF  00B4               	movwf	??___ftdiv
 17227  0DD0  0834               	movf	??___ftdiv,w
 17228  0DD1  00A3               	movwf	___ftpack@exp
 17229  0DD2  083D               	movf	___ftdiv@sign,w
 17230  0DD3  00B5               	movwf	??___ftdiv+1
 17231  0DD4  0835               	movf	??___ftdiv+1,w
 17232  0DD5  00A4               	movwf	___ftpack@sign
 17233  0DD6  3196  2605         	fcall	___ftpack
 17234  0DD8  0020               	movlb	0	; select bank0
 17235  0DD9  0820               	movf	?___ftpack,w
 17236  0DDA  00AE               	movwf	?___ftdiv
 17237  0DDB  0821               	movf	?___ftpack+1,w
 17238  0DDC  00AF               	movwf	?___ftdiv+1
 17239  0DDD  0822               	movf	?___ftpack+2,w
 17240  0DDE  00B0               	movwf	?___ftdiv+2
 17241  0DDF  0008               	return
 17242  0DE0                     __end_of___ftdiv:	
 17243                           
 17244                           	psect	text121
 17245  0381                     __ptext121:	
 17246 ;; *************** function ___ftadd *****************
 17247 ;; Defined at:
 17248 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17249 ;; Parameters:    Size  Location     Type
 17250 ;;  f1              3   33[BANK0 ] float 
 17251 ;;  f2              3   36[BANK0 ] float 
 17252 ;; Auto vars:     Size  Location     Type
 17253 ;;  exp1            1   45[BANK0 ] unsigned char 
 17254 ;;  exp2            1   44[BANK0 ] unsigned char 
 17255 ;;  sign            1   43[BANK0 ] unsigned char 
 17256 ;; Return value:  Size  Location     Type
 17257 ;;                  3   33[BANK0 ] float 
 17258 ;; Registers used:
 17259 ;;		wreg, status,2, status,0, pclath, cstack
 17260 ;; Tracked objects:
 17261 ;;		On entry : 0/0
 17262 ;;		On exit  : 0/0
 17263 ;;		Unchanged: 0/0
 17264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17265 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17266 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17267 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17268 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17269 ;;Total ram usage:       13 bytes
 17270 ;; Hardware stack levels used:    1
 17271 ;; Hardware stack levels required when called:    6
 17272 ;; This function calls:
 17273 ;;		___ftpack
 17274 ;; This function is called by:
 17275 ;;		_getDimmerLights_PercentToValue
 17276 ;;		_getDimmerLights_ValueToPercent
 17277 ;; This function uses a non-reentrant model
 17278 ;;
 17279                           
 17280                           
 17281                           ;psect for function ___ftadd
 17282  0381                     ___ftadd:	
 17283                           
 17284                           ;incstack = 0
 17285                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17286  0381  0020               	movlb	0	; select bank0
 17287  0382  0841               	movf	___ftadd@f1,w
 17288  0383  00C7               	movwf	??___ftadd
 17289  0384  0842               	movf	___ftadd@f1+1,w
 17290  0385  00C8               	movwf	??___ftadd+1
 17291  0386  0843               	movf	___ftadd@f1+2,w
 17292  0387  00C9               	movwf	??___ftadd+2
 17293  0388  1003               	clrc
 17294  0389  0D48               	rlf	??___ftadd+1,w
 17295  038A  0D49               	rlf	??___ftadd+2,w
 17296  038B  00CA               	movwf	??___ftadd+3
 17297  038C  084A               	movf	??___ftadd+3,w
 17298  038D  00CD               	movwf	___ftadd@exp1
 17299  038E  0844               	movf	___ftadd@f2,w
 17300  038F  00C7               	movwf	??___ftadd
 17301  0390  0845               	movf	___ftadd@f2+1,w
 17302  0391  00C8               	movwf	??___ftadd+1
 17303  0392  0846               	movf	___ftadd@f2+2,w
 17304  0393  00C9               	movwf	??___ftadd+2
 17305  0394  1003               	clrc
 17306  0395  0D48               	rlf	??___ftadd+1,w
 17307  0396  0D49               	rlf	??___ftadd+2,w
 17308  0397  00CA               	movwf	??___ftadd+3
 17309  0398  084A               	movf	??___ftadd+3,w
 17310  0399  00CC               	movwf	___ftadd@exp2
 17311  039A  084D               	movf	___ftadd@exp1,w
 17312  039B  1903               	btfsc	3,2
 17313  039C  2BA9               	goto	l5807
 17314  039D  084C               	movf	___ftadd@exp2,w
 17315  039E  024D               	subwf	___ftadd@exp1,w
 17316  039F  1803               	skipnc
 17317  03A0  2BB0               	goto	l5811
 17318  03A1  034D               	decf	___ftadd@exp1,w
 17319  03A2  3AFF               	xorlw	255
 17320  03A3  074C               	addwf	___ftadd@exp2,w
 17321  03A4  00C7               	movwf	??___ftadd
 17322  03A5  3019               	movlw	25
 17323  03A6  0247               	subwf	??___ftadd,w
 17324  03A7  1C03               	skipc
 17325  03A8  2BB0               	goto	l5811
 17326  03A9                     l5807:	
 17327  03A9  0844               	movf	___ftadd@f2,w
 17328  03AA  00C1               	movwf	?___ftadd
 17329  03AB  0845               	movf	___ftadd@f2+1,w
 17330  03AC  00C2               	movwf	?___ftadd+1
 17331  03AD  0846               	movf	___ftadd@f2+2,w
 17332  03AE  00C3               	movwf	?___ftadd+2
 17333  03AF  0008               	return
 17334  03B0                     l5811:	
 17335  03B0  084C               	movf	___ftadd@exp2,w
 17336  03B1  1903               	btfsc	3,2
 17337  03B2  0008               	return
 17338  03B3  084D               	movf	___ftadd@exp1,w
 17339  03B4  024C               	subwf	___ftadd@exp2,w
 17340  03B5  1803               	skipnc
 17341  03B6  2BBF               	goto	l5817
 17342  03B7  034C               	decf	___ftadd@exp2,w
 17343  03B8  3AFF               	xorlw	255
 17344  03B9  074D               	addwf	___ftadd@exp1,w
 17345  03BA  00C7               	movwf	??___ftadd
 17346  03BB  3019               	movlw	25
 17347  03BC  0247               	subwf	??___ftadd,w
 17348  03BD  1803               	btfsc	3,0
 17349  03BE  0008               	return
 17350  03BF                     l5817:	
 17351  03BF  3006               	movlw	6
 17352  03C0  00C7               	movwf	??___ftadd
 17353  03C1  0847               	movf	??___ftadd,w
 17354  03C2  00CB               	movwf	___ftadd@sign
 17355  03C3  1BC3               	btfsc	___ftadd@f1+2,7
 17356  03C4  17CB               	bsf	___ftadd@sign,7
 17357  03C5  1BC6               	btfsc	___ftadd@f2+2,7
 17358  03C6  174B               	bsf	___ftadd@sign,6
 17359  03C7  17C2               	bsf	___ftadd@f1+1,7
 17360  03C8  30FF               	movlw	255
 17361  03C9  05C1               	andwf	___ftadd@f1,f
 17362  03CA  30FF               	movlw	255
 17363  03CB  05C2               	andwf	___ftadd@f1+1,f
 17364  03CC  3000               	movlw	0
 17365  03CD  05C3               	andwf	___ftadd@f1+2,f
 17366  03CE  17C5               	bsf	___ftadd@f2+1,7
 17367  03CF  30FF               	movlw	255
 17368  03D0  05C4               	andwf	___ftadd@f2,f
 17369  03D1  30FF               	movlw	255
 17370  03D2  05C5               	andwf	___ftadd@f2+1,f
 17371  03D3  3000               	movlw	0
 17372  03D4  05C6               	andwf	___ftadd@f2+2,f
 17373  03D5  084C               	movf	___ftadd@exp2,w
 17374  03D6  024D               	subwf	___ftadd@exp1,w
 17375  03D7  1803               	skipnc
 17376  03D8  2BFB               	goto	l5839
 17377  03D9                     l5829:	
 17378  03D9  3001               	movlw	1
 17379  03DA                     u4665:	
 17380  03DA  35C4               	lslf	___ftadd@f2,f
 17381  03DB  0DC5               	rlf	___ftadd@f2+1,f
 17382  03DC  0DC6               	rlf	___ftadd@f2+2,f
 17383  03DD  0B89               	decfsz	9,f
 17384  03DE  2BDA               	goto	u4665
 17385  03DF  3001               	movlw	1
 17386  03E0  02CC               	subwf	___ftadd@exp2,f
 17387  03E1  084C               	movf	___ftadd@exp2,w
 17388  03E2  064D               	xorwf	___ftadd@exp1,w
 17389  03E3  1903               	skipnz
 17390  03E4  2BF6               	goto	l5837
 17391  03E5  3001               	movlw	1
 17392  03E6  02CB               	subwf	___ftadd@sign,f
 17393  03E7  084B               	movf	___ftadd@sign,w
 17394  03E8  3907               	andlw	7
 17395  03E9  1903               	btfsc	3,2
 17396  03EA  2BF6               	goto	l5837
 17397  03EB  2BD9               	goto	l5829
 17398  03EC                     l5835:	
 17399  03EC  3001               	movlw	1
 17400  03ED                     u4695:	
 17401  03ED  36C3               	lsrf	___ftadd@f1+2,f
 17402  03EE  0CC2               	rrf	___ftadd@f1+1,f
 17403  03EF  0CC1               	rrf	___ftadd@f1,f
 17404  03F0  0B89               	decfsz	9,f
 17405  03F1  2BED               	goto	u4695
 17406  03F2  3001               	movlw	1
 17407  03F3  00C7               	movwf	??___ftadd
 17408  03F4  0847               	movf	??___ftadd,w
 17409  03F5  07CD               	addwf	___ftadd@exp1,f
 17410  03F6                     l5837:	
 17411  03F6  084D               	movf	___ftadd@exp1,w
 17412  03F7  064C               	xorwf	___ftadd@exp2,w
 17413  03F8  1903               	btfsc	3,2
 17414  03F9  2C20               	goto	l2866
 17415  03FA  2BEC               	goto	l5835
 17416  03FB                     l5839:	
 17417  03FB  084D               	movf	___ftadd@exp1,w
 17418  03FC  024C               	subwf	___ftadd@exp2,w
 17419  03FD  1803               	skipnc
 17420  03FE  2C20               	goto	l2866
 17421  03FF                     l5841:	
 17422  03FF  3001               	movlw	1
 17423  0400                     u4725:	
 17424  0400  35C1               	lslf	___ftadd@f1,f
 17425  0401  0DC2               	rlf	___ftadd@f1+1,f
 17426  0402  0DC3               	rlf	___ftadd@f1+2,f
 17427  0403  0B89               	decfsz	9,f
 17428  0404  2C00               	goto	u4725
 17429  0405  3001               	movlw	1
 17430  0406  02CD               	subwf	___ftadd@exp1,f
 17431  0407  084C               	movf	___ftadd@exp2,w
 17432  0408  064D               	xorwf	___ftadd@exp1,w
 17433  0409  1903               	skipnz
 17434  040A  2C1C               	goto	l5849
 17435  040B  3001               	movlw	1
 17436  040C  02CB               	subwf	___ftadd@sign,f
 17437  040D  084B               	movf	___ftadd@sign,w
 17438  040E  3907               	andlw	7
 17439  040F  1903               	btfsc	3,2
 17440  0410  2C1C               	goto	l5849
 17441  0411  2BFF               	goto	l5841
 17442  0412                     l5847:	
 17443  0412  3001               	movlw	1
 17444  0413                     u4755:	
 17445  0413  36C6               	lsrf	___ftadd@f2+2,f
 17446  0414  0CC5               	rrf	___ftadd@f2+1,f
 17447  0415  0CC4               	rrf	___ftadd@f2,f
 17448  0416  0B89               	decfsz	9,f
 17449  0417  2C13               	goto	u4755
 17450  0418  3001               	movlw	1
 17451  0419  00C7               	movwf	??___ftadd
 17452  041A  0847               	movf	??___ftadd,w
 17453  041B  07CC               	addwf	___ftadd@exp2,f
 17454  041C                     l5849:	
 17455  041C  084D               	movf	___ftadd@exp1,w
 17456  041D  064C               	xorwf	___ftadd@exp2,w
 17457  041E  1D03               	skipz
 17458  041F  2C12               	goto	l5847
 17459  0420                     l2866:	
 17460  0420  1FCB               	btfss	___ftadd@sign,7
 17461  0421  2C32               	goto	l5853
 17462  0422  30FF               	movlw	255
 17463  0423  06C1               	xorwf	___ftadd@f1,f
 17464  0424  30FF               	movlw	255
 17465  0425  06C2               	xorwf	___ftadd@f1+1,f
 17466  0426  30FF               	movlw	255
 17467  0427  06C3               	xorwf	___ftadd@f1+2,f
 17468  0428  3001               	movlw	1
 17469  0429  07C1               	addwf	___ftadd@f1,f
 17470  042A  3000               	movlw	0
 17471  042B  1803               	skipnc
 17472  042C  3001               	movlw	1
 17473  042D  07C2               	addwf	___ftadd@f1+1,f
 17474  042E  3000               	movlw	0
 17475  042F  1803               	skipnc
 17476  0430  3001               	movlw	1
 17477  0431  07C3               	addwf	___ftadd@f1+2,f
 17478  0432                     l5853:	
 17479  0432  1F4B               	btfss	___ftadd@sign,6
 17480  0433  2C44               	goto	l5857
 17481  0434  30FF               	movlw	255
 17482  0435  06C4               	xorwf	___ftadd@f2,f
 17483  0436  30FF               	movlw	255
 17484  0437  06C5               	xorwf	___ftadd@f2+1,f
 17485  0438  30FF               	movlw	255
 17486  0439  06C6               	xorwf	___ftadd@f2+2,f
 17487  043A  3001               	movlw	1
 17488  043B  07C4               	addwf	___ftadd@f2,f
 17489  043C  3000               	movlw	0
 17490  043D  1803               	skipnc
 17491  043E  3001               	movlw	1
 17492  043F  07C5               	addwf	___ftadd@f2+1,f
 17493  0440  3000               	movlw	0
 17494  0441  1803               	skipnc
 17495  0442  3001               	movlw	1
 17496  0443  07C6               	addwf	___ftadd@f2+2,f
 17497  0444                     l5857:	
 17498  0444  01CB               	clrf	___ftadd@sign
 17499  0445  0841               	movf	___ftadd@f1,w
 17500  0446  07C4               	addwf	___ftadd@f2,f
 17501  0447  0842               	movf	___ftadd@f1+1,w
 17502  0448  3DC5               	addwfc	___ftadd@f2+1,f
 17503  0449  0843               	movf	___ftadd@f1+2,w
 17504  044A  3DC6               	addwfc	___ftadd@f2+2,f
 17505  044B  1FC6               	btfss	___ftadd@f2+2,7
 17506  044C  2C5F               	goto	l5867
 17507  044D  30FF               	movlw	255
 17508  044E  06C4               	xorwf	___ftadd@f2,f
 17509  044F  30FF               	movlw	255
 17510  0450  06C5               	xorwf	___ftadd@f2+1,f
 17511  0451  30FF               	movlw	255
 17512  0452  06C6               	xorwf	___ftadd@f2+2,f
 17513  0453  3001               	movlw	1
 17514  0454  07C4               	addwf	___ftadd@f2,f
 17515  0455  3000               	movlw	0
 17516  0456  1803               	skipnc
 17517  0457  3001               	movlw	1
 17518  0458  07C5               	addwf	___ftadd@f2+1,f
 17519  0459  3000               	movlw	0
 17520  045A  1803               	skipnc
 17521  045B  3001               	movlw	1
 17522  045C  07C6               	addwf	___ftadd@f2+2,f
 17523  045D  01CB               	clrf	___ftadd@sign
 17524  045E  0ACB               	incf	___ftadd@sign,f
 17525  045F                     l5867:	
 17526  045F  0844               	movf	___ftadd@f2,w
 17527  0460  00A0               	movwf	___ftpack@arg
 17528  0461  0845               	movf	___ftadd@f2+1,w
 17529  0462  00A1               	movwf	___ftpack@arg+1
 17530  0463  0846               	movf	___ftadd@f2+2,w
 17531  0464  00A2               	movwf	___ftpack@arg+2
 17532  0465  084D               	movf	___ftadd@exp1,w
 17533  0466  00C7               	movwf	??___ftadd
 17534  0467  0847               	movf	??___ftadd,w
 17535  0468  00A3               	movwf	___ftpack@exp
 17536  0469  084B               	movf	___ftadd@sign,w
 17537  046A  00C8               	movwf	??___ftadd+1
 17538  046B  0848               	movf	??___ftadd+1,w
 17539  046C  00A4               	movwf	___ftpack@sign
 17540  046D  3196  2605         	fcall	___ftpack
 17541  046F  0020               	movlb	0	; select bank0
 17542  0470  0820               	movf	?___ftpack,w
 17543  0471  00C1               	movwf	?___ftadd
 17544  0472  0821               	movf	?___ftpack+1,w
 17545  0473  00C2               	movwf	?___ftadd+1
 17546  0474  0822               	movf	?___ftpack+2,w
 17547  0475  00C3               	movwf	?___ftadd+2
 17548  0476  0008               	return
 17549  0477                     __end_of___ftadd:	
 17550                           
 17551                           	psect	text122
 17552  106D                     __ptext122:	
 17553 ;; *************** function ___awtoft *****************
 17554 ;; Defined at:
 17555 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17556 ;; Parameters:    Size  Location     Type
 17557 ;;  c               2    8[BANK0 ] int 
 17558 ;; Auto vars:     Size  Location     Type
 17559 ;;  sign            1   13[BANK0 ] unsigned char 
 17560 ;; Return value:  Size  Location     Type
 17561 ;;                  3    8[BANK0 ] float 
 17562 ;; Registers used:
 17563 ;;		wreg, status,2, status,0, pclath, cstack
 17564 ;; Tracked objects:
 17565 ;;		On entry : 0/0
 17566 ;;		On exit  : 0/0
 17567 ;;		Unchanged: 0/0
 17568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17569 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17572 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17573 ;;Total ram usage:        6 bytes
 17574 ;; Hardware stack levels used:    1
 17575 ;; Hardware stack levels required when called:    6
 17576 ;; This function calls:
 17577 ;;		___ftpack
 17578 ;; This function is called by:
 17579 ;;		_getDimmerLights_PercentToValue
 17580 ;;		_getDimmerLights_ValueToPercent
 17581 ;; This function uses a non-reentrant model
 17582 ;;
 17583                           
 17584                           
 17585                           ;psect for function ___awtoft
 17586  106D                     ___awtoft:	
 17587                           
 17588                           ;incstack = 0
 17589                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17590  106D  0020               	movlb	0	; select bank0
 17591  106E  01AD               	clrf	___awtoft@sign
 17592  106F  1FA9               	btfss	___awtoft@c+1,7
 17593  1070  2878               	goto	l5795
 17594  1071  09A8               	comf	___awtoft@c,f
 17595  1072  09A9               	comf	___awtoft@c+1,f
 17596  1073  0AA8               	incf	___awtoft@c,f
 17597  1074  1903               	skipnz
 17598  1075  0AA9               	incf	___awtoft@c+1,f
 17599  1076  01AD               	clrf	___awtoft@sign
 17600  1077  0AAD               	incf	___awtoft@sign,f
 17601  1078                     l5795:	
 17602  1078  0828               	movf	___awtoft@c,w
 17603  1079  00A0               	movwf	___ftpack@arg
 17604  107A  0829               	movf	___awtoft@c+1,w
 17605  107B  00A1               	movwf	___ftpack@arg+1
 17606  107C  01A2               	clrf	___ftpack@arg+2
 17607  107D  308E               	movlw	142
 17608  107E  00AB               	movwf	??___awtoft
 17609  107F  082B               	movf	??___awtoft,w
 17610  1080  00A3               	movwf	___ftpack@exp
 17611  1081  082D               	movf	___awtoft@sign,w
 17612  1082  00AC               	movwf	??___awtoft+1
 17613  1083  082C               	movf	??___awtoft+1,w
 17614  1084  00A4               	movwf	___ftpack@sign
 17615  1085  3196  2605         	fcall	___ftpack
 17616  1087  0020               	movlb	0	; select bank0
 17617  1088  0820               	movf	?___ftpack,w
 17618  1089  00A8               	movwf	?___awtoft
 17619  108A  0821               	movf	?___ftpack+1,w
 17620  108B  00A9               	movwf	?___awtoft+1
 17621  108C  0822               	movf	?___ftpack+2,w
 17622  108D  00AA               	movwf	?___awtoft+2
 17623  108E  0008               	return
 17624  108F                     __end_of___awtoft:	
 17625                           
 17626                           	psect	text123
 17627  1605                     __ptext123:	
 17628 ;; *************** function ___ftpack *****************
 17629 ;; Defined at:
 17630 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17631 ;; Parameters:    Size  Location     Type
 17632 ;;  arg             3    0[BANK0 ] unsigned um
 17633 ;;  exp             1    3[BANK0 ] unsigned char 
 17634 ;;  sign            1    4[BANK0 ] unsigned char 
 17635 ;; Auto vars:     Size  Location     Type
 17636 ;;		None
 17637 ;; Return value:  Size  Location     Type
 17638 ;;                  3    0[BANK0 ] float 
 17639 ;; Registers used:
 17640 ;;		wreg, status,2, status,0
 17641 ;; Tracked objects:
 17642 ;;		On entry : 0/0
 17643 ;;		On exit  : 0/0
 17644 ;;		Unchanged: 0/0
 17645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17646 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17648 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17649 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17650 ;;Total ram usage:        8 bytes
 17651 ;; Hardware stack levels used:    1
 17652 ;; Hardware stack levels required when called:    5
 17653 ;; This function calls:
 17654 ;;		Nothing
 17655 ;; This function is called by:
 17656 ;;		___awtoft
 17657 ;;		___ftadd
 17658 ;;		___ftdiv
 17659 ;;		___ftmul
 17660 ;; This function uses a non-reentrant model
 17661 ;;
 17662                           
 17663                           
 17664                           ;psect for function ___ftpack
 17665  1605                     ___ftpack:	
 17666                           
 17667                           ;incstack = 0
 17668                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17669  1605  0020               	movlb	0	; select bank0
 17670  1606  0823               	movf	___ftpack@exp,w
 17671  1607  1903               	btfsc	3,2
 17672  1608  2E0E               	goto	l5663
 17673  1609  0822               	movf	___ftpack@arg+2,w
 17674  160A  0421               	iorwf	___ftpack@arg+1,w
 17675  160B  0420               	iorwf	___ftpack@arg,w
 17676  160C  1D03               	skipz
 17677  160D  2E1F               	goto	l5669
 17678  160E                     l5663:	
 17679  160E  3000               	movlw	0
 17680  160F  00A0               	movwf	?___ftpack
 17681  1610  3000               	movlw	0
 17682  1611  00A1               	movwf	?___ftpack+1
 17683  1612  3000               	movlw	0
 17684  1613  00A2               	movwf	?___ftpack+2
 17685  1614  0008               	return
 17686  1615                     l5667:	
 17687  1615  3001               	movlw	1
 17688  1616  00A5               	movwf	??___ftpack
 17689  1617  0825               	movf	??___ftpack,w
 17690  1618  07A3               	addwf	___ftpack@exp,f
 17691  1619  3001               	movlw	1
 17692  161A                     u4295:	
 17693  161A  36A2               	lsrf	___ftpack@arg+2,f
 17694  161B  0CA1               	rrf	___ftpack@arg+1,f
 17695  161C  0CA0               	rrf	___ftpack@arg,f
 17696  161D  0B89               	decfsz	9,f
 17697  161E  2E1A               	goto	u4295
 17698  161F                     l5669:	
 17699  161F  30FE               	movlw	254
 17700  1620  0522               	andwf	___ftpack@arg+2,w
 17701  1621  1903               	btfsc	3,2
 17702  1622  2E38               	goto	l2837
 17703  1623  2E15               	goto	l5667
 17704  1624                     l5671:	
 17705  1624  3001               	movlw	1
 17706  1625  00A5               	movwf	??___ftpack
 17707  1626  0825               	movf	??___ftpack,w
 17708  1627  07A3               	addwf	___ftpack@exp,f
 17709  1628  3001               	movlw	1
 17710  1629  07A0               	addwf	___ftpack@arg,f
 17711  162A  3000               	movlw	0
 17712  162B  1803               	skipnc
 17713  162C  3001               	movlw	1
 17714  162D  07A1               	addwf	___ftpack@arg+1,f
 17715  162E  3000               	movlw	0
 17716  162F  1803               	skipnc
 17717  1630  3001               	movlw	1
 17718  1631  07A2               	addwf	___ftpack@arg+2,f
 17719  1632  3001               	movlw	1
 17720  1633                     u4315:	
 17721  1633  36A2               	lsrf	___ftpack@arg+2,f
 17722  1634  0CA1               	rrf	___ftpack@arg+1,f
 17723  1635  0CA0               	rrf	___ftpack@arg,f
 17724  1636  0B89               	decfsz	9,f
 17725  1637  2E33               	goto	u4315
 17726  1638                     l2837:	
 17727  1638  30FF               	movlw	255
 17728  1639  0522               	andwf	___ftpack@arg+2,w
 17729  163A  1903               	btfsc	3,2
 17730  163B  2E45               	goto	l5679
 17731  163C  2E24               	goto	l5671
 17732  163D                     l5677:	
 17733  163D  3001               	movlw	1
 17734  163E  02A3               	subwf	___ftpack@exp,f
 17735  163F  3001               	movlw	1
 17736  1640                     u4335:	
 17737  1640  35A0               	lslf	___ftpack@arg,f
 17738  1641  0DA1               	rlf	___ftpack@arg+1,f
 17739  1642  0DA2               	rlf	___ftpack@arg+2,f
 17740  1643  0B89               	decfsz	9,f
 17741  1644  2E40               	goto	u4335
 17742  1645                     l5679:	
 17743  1645  1FA1               	btfss	___ftpack@arg+1,7
 17744  1646  2E3D               	goto	l5677
 17745  1647  1823               	btfsc	___ftpack@exp,0
 17746  1648  2E4F               	goto	l2843
 17747  1649  30FF               	movlw	255
 17748  164A  05A0               	andwf	___ftpack@arg,f
 17749  164B  307F               	movlw	127
 17750  164C  05A1               	andwf	___ftpack@arg+1,f
 17751  164D  30FF               	movlw	255
 17752  164E  05A2               	andwf	___ftpack@arg+2,f
 17753  164F                     l2843:	
 17754  164F  1003               	clrc
 17755  1650  0CA3               	rrf	___ftpack@exp,f
 17756  1651  0823               	movf	___ftpack@exp,w
 17757  1652  00A5               	movwf	??___ftpack
 17758  1653  01A6               	clrf	??___ftpack+1
 17759  1654  01A7               	clrf	??___ftpack+2
 17760  1655  3010               	movlw	16
 17761  1656                     u4365:	
 17762  1656  35A5               	lslf	??___ftpack,f
 17763  1657  0DA6               	rlf	??___ftpack+1,f
 17764  1658  0DA7               	rlf	??___ftpack+2,f
 17765  1659  0B89               	decfsz	9,f
 17766  165A  2E56               	goto	u4365
 17767  165B  0825               	movf	??___ftpack,w
 17768  165C  04A0               	iorwf	___ftpack@arg,f
 17769  165D  0826               	movf	??___ftpack+1,w
 17770  165E  04A1               	iorwf	___ftpack@arg+1,f
 17771  165F  0827               	movf	??___ftpack+2,w
 17772  1660  04A2               	iorwf	___ftpack@arg+2,f
 17773  1661  0824               	movf	___ftpack@sign,w
 17774  1662  1903               	btfsc	3,2
 17775  1663  0008               	return
 17776  1664  17A2               	bsf	___ftpack@arg+2,7
 17777  1665  0008               	return
 17778  1666                     __end_of___ftpack:	
 17779                           
 17780                           	psect	text124
 17781  1B63                     __ptext124:	
 17782 ;; *************** function _DelayOff_Main *****************
 17783 ;; Defined at:
 17784 ;;		line 41 in file "../src/DelayOff_B1.c"
 17785 ;; Parameters:    Size  Location     Type
 17786 ;;		None
 17787 ;; Auto vars:     Size  Location     Type
 17788 ;;		None
 17789 ;; Return value:  Size  Location     Type
 17790 ;;		None               void
 17791 ;; Registers used:
 17792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17793 ;; Tracked objects:
 17794 ;;		On entry : 0/0
 17795 ;;		On exit  : 0/0
 17796 ;;		Unchanged: 0/0
 17797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17802 ;;Total ram usage:        0 bytes
 17803 ;; Hardware stack levels used:    1
 17804 ;; Hardware stack levels required when called:    9
 17805 ;; This function calls:
 17806 ;;		_DlyOff_Main
 17807 ;; This function is called by:
 17808 ;;		_main
 17809 ;; This function uses a non-reentrant model
 17810 ;;
 17811                           
 17812                           
 17813                           ;psect for function _DelayOff_Main
 17814  1B63                     _DelayOff_Main:	
 17815                           
 17816                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17817                           
 17818                           ;incstack = 0
 17819                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17820  1B63  3001               	movlw	1
 17821  1B64  3189  2159         	fcall	_DlyOff_Main
 17822  1B66  0008               	return
 17823  1B67                     __end_of_DelayOff_Main:	
 17824                           
 17825                           	psect	text125
 17826  0959                     __ptext125:	
 17827 ;; *************** function _DlyOff_Main *****************
 17828 ;; Defined at:
 17829 ;;		line 61 in file "../src/DelayOff_B1.c"
 17830 ;; Parameters:    Size  Location     Type
 17831 ;;  sw              1    wreg     unsigned char 
 17832 ;; Auto vars:     Size  Location     Type
 17833 ;;  sw              1   71[BANK0 ] unsigned char 
 17834 ;; Return value:  Size  Location     Type
 17835 ;;		None               void
 17836 ;; Registers used:
 17837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17838 ;; Tracked objects:
 17839 ;;		On entry : 0/0
 17840 ;;		On exit  : 0/0
 17841 ;;		Unchanged: 0/0
 17842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17845 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17846 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17847 ;;Total ram usage:        3 bytes
 17848 ;; Hardware stack levels used:    1
 17849 ;; Hardware stack levels required when called:    8
 17850 ;; This function calls:
 17851 ;;		_DelayOffPointSelect
 17852 ;;		_getDimmerLights_Status
 17853 ;;		_setDimmerLights_SwOff
 17854 ;;		_setDimmerLights_SwOn
 17855 ;;		_setProductData
 17856 ;; This function is called by:
 17857 ;;		_DelayOff_Main
 17858 ;; This function uses a non-reentrant model
 17859 ;;
 17860                           
 17861                           
 17862                           ;psect for function _DlyOff_Main
 17863  0959                     _DlyOff_Main:	
 17864                           
 17865                           ;incstack = 0
 17866                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17867                           ;DlyOff_Main@sw stored from wreg
 17868  0959  0020               	movlb	0	; select bank0
 17869  095A  00E7               	movwf	DlyOff_Main@sw
 17870                           
 17871                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17872  095B  0867               	movf	DlyOff_Main@sw,w
 17873  095C  319C  2414  3189   	fcall	_DelayOffPointSelect
 17874                           
 17875                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17876  095F  0021               	movlb	1	; select bank1
 17877  0960  0854               	movf	_DelayOff^(0+128),w
 17878  0961  0086               	movwf	6
 17879  0962  3001               	movlw	1	; select bank2/3
 17880  0963  0087               	movwf	7
 17881  0964  1C81               	btfss	1,1
 17882  0965  0008               	return
 17883                           
 17884                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17885  0966  0854               	movf	_DelayOff^(0+128),w
 17886  0967  3E02               	addlw	2
 17887  0968  0086               	movwf	6
 17888  0969  3001               	movlw	1	; select bank2/3
 17889  096A  0087               	movwf	7
 17890  096B  3001               	movlw	1
 17891  096C  0781               	addwf	1,f
 17892  096D  3141               	addfsr 1,1
 17893  096E  1803               	skipnc
 17894  096F  0A81               	incf	1,f
 17895                           
 17896                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17897  0970  0854               	movf	_DelayOff^(0+128),w
 17898  0971  3E02               	addlw	2
 17899  0972  0086               	movwf	6
 17900  0973  3001               	movlw	1	; select bank2/3
 17901  0974  0087               	movwf	7
 17902  0975  3F40               	moviw [0]fsr1
 17903  0976  0020               	movlb	0	; select bank0
 17904  0977  00E5               	movwf	??_DlyOff_Main
 17905  0978  3F41               	moviw [1]fsr1
 17906  0979  00E6               	movwf	??_DlyOff_Main+1
 17907  097A  300B               	movlw	11
 17908  097B  0266               	subwf	??_DlyOff_Main+1,w
 17909  097C  30B8               	movlw	184
 17910  097D  1903               	skipnz
 17911  097E  0265               	subwf	??_DlyOff_Main,w
 17912  097F  1C03               	skipc
 17913  0980  0008               	return
 17914                           
 17915                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17916  0981  0021               	movlb	1	; select bank1
 17917  0982  0854               	movf	_DelayOff^(0+128),w
 17918  0983  3E02               	addlw	2
 17919  0984  0086               	movwf	6
 17920  0985  3001               	movlw	1	; select bank2/3
 17921  0986  0087               	movwf	7
 17922  0987  3000               	movlw	0
 17923  0988  3FC0               	movwi [0]fsr1
 17924  0989  3FC1               	movwi [1]fsr1
 17925                           
 17926                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17927  098A  3001               	movlw	1
 17928  098B  0020               	movlb	0	; select bank0
 17929  098C  00E5               	movwf	??_DlyOff_Main
 17930  098D  0021               	movlb	1	; select bank1
 17931  098E  0854               	movf	_DelayOff^(0+128),w
 17932  098F  3E04               	addlw	4
 17933  0990  0086               	movwf	6
 17934  0991  3001               	movlw	1	; select bank2/3
 17935  0992  0087               	movwf	7
 17936  0993  0020               	movlb	0	; select bank0
 17937  0994  0865               	movf	??_DlyOff_Main,w
 17938  0995  0781               	addwf	1,f
 17939                           
 17940                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17941  0996  0021               	movlb	1	; select bank1
 17942  0997  0854               	movf	_DelayOff^(0+128),w
 17943  0998  3E04               	addlw	4
 17944  0999  0086               	movwf	6
 17945  099A  3001               	movlw	1	; select bank2/3
 17946  099B  0087               	movwf	7
 17947  099C  0A54               	incf	_DelayOff^(0+128),w
 17948  099D  0084               	movwf	4
 17949  099E  3001               	movlw	1	; select bank2/3
 17950  099F  0085               	movwf	5
 17951  09A0  0800               	movf	0,w
 17952  09A1  0201               	subwf	1,w
 17953  09A2  1C03               	skipc
 17954  09A3  0008               	return
 17955                           
 17956                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17957  09A4  0854               	movf	_DelayOff^(0+128),w
 17958  09A5  3E04               	addlw	4
 17959  09A6  0086               	movwf	6
 17960  09A7  3001               	movlw	1	; select bank2/3
 17961  09A8  0087               	movwf	7
 17962  09A9  0181               	clrf	1
 17963                           
 17964                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17965  09AA  0854               	movf	_DelayOff^(0+128),w
 17966  09AB  0086               	movwf	6
 17967  09AC  3001               	movlw	1	; select bank2/3
 17968  09AD  0087               	movwf	7
 17969  09AE  1081               	bcf	1,1
 17970                           
 17971                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17972  09AF  0020               	movlb	0	; select bank0
 17973  09B0  0867               	movf	DlyOff_Main@sw,w
 17974  09B1  319C  24D3  3189   	fcall	_getDimmerLights_Status
 17975  09B4  3A01               	xorlw	1
 17976  09B5  1D03               	skipz
 17977  09B6  29C1               	goto	l531
 17978                           
 17979                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17980  09B7  0020               	movlb	0	; select bank0
 17981  09B8  0867               	movf	DlyOff_Main@sw,w
 17982  09B9  3192  2216  3189   	fcall	_setDimmerLights_SwOn
 17983                           
 17984                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17985  09BC  0020               	movlb	0	; select bank0
 17986  09BD  0867               	movf	DlyOff_Main@sw,w
 17987  09BE  3192  22B8  3189   	fcall	_setDimmerLights_SwOff
 17988  09C1                     l531:	
 17989                           
 17990                           ;DelayOff_B1.c: 78: }
 17991                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17992  09C1  0020               	movlb	0	; select bank0
 17993  09C2  01E2               	clrf	setProductData@value
 17994  09C3  0867               	movf	DlyOff_Main@sw,w
 17995  09C4  3E1A               	addlw	26
 17996  09C5  319C  242C         	fcall	_setProductData
 17997  09C7  0008               	return
 17998  09C8                     __end_of_DlyOff_Main:	
 17999                           
 18000                           	psect	text126
 18001  1C2C                     __ptext126:	
 18002 ;; *************** function _setProductData *****************
 18003 ;; Defined at:
 18004 ;;		line 645 in file "../src/Main_B1.c"
 18005 ;; Parameters:    Size  Location     Type
 18006 ;;  address         1    wreg     unsigned char 
 18007 ;;  value           1   66[BANK0 ] unsigned char 
 18008 ;; Auto vars:     Size  Location     Type
 18009 ;;  address         1   68[BANK0 ] unsigned char 
 18010 ;; Return value:  Size  Location     Type
 18011 ;;		None               void
 18012 ;; Registers used:
 18013 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18014 ;; Tracked objects:
 18015 ;;		On entry : 0/0
 18016 ;;		On exit  : 0/0
 18017 ;;		Unchanged: 0/0
 18018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18019 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;Total ram usage:        3 bytes
 18024 ;; Hardware stack levels used:    1
 18025 ;; Hardware stack levels required when called:    5
 18026 ;; This function calls:
 18027 ;;		Nothing
 18028 ;; This function is called by:
 18029 ;;		_DlyOff_Main
 18030 ;;		_setDelayOff_GO
 18031 ;;		_setDimmerLights_OnOff
 18032 ;;		_setDimmerLights_Dimming
 18033 ;;		_setTemp_Main
 18034 ;;		_setLog_Code
 18035 ;;		_setControl_Lights_Table
 18036 ;;		_setRFSW_AdjControl
 18037 ;;		_setRF_DimmerLights
 18038 ;; This function uses a non-reentrant model
 18039 ;;
 18040                           
 18041                           
 18042                           ;psect for function _setProductData
 18043  1C2C                     _setProductData:	
 18044                           
 18045                           ;incstack = 0
 18046                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18047                           ;setProductData@address stored from wreg
 18048  1C2C  0020               	movlb	0	; select bank0
 18049  1C2D  00E4               	movwf	setProductData@address
 18050                           
 18051                           ;Main_B1.c: 646: _product.Data[address] = value;
 18052  1C2E  0862               	movf	setProductData@value,w
 18053  1C2F  00E3               	movwf	??_setProductData
 18054  1C30  0864               	movf	setProductData@address,w
 18055  1C31  3E20               	addlw	__product& (0+255)
 18056  1C32  0086               	movwf	6
 18057  1C33  3002               	movlw	2	; select bank4/5
 18058  1C34  0087               	movwf	7
 18059  1C35  0863               	movf	??_setProductData,w
 18060  1C36  0081               	movwf	1
 18061  1C37  0008               	return
 18062  1C38                     __end_of_setProductData:	
 18063                           
 18064                           	psect	text127
 18065  1216                     __ptext127:	
 18066 ;; *************** function _setDimmerLights_SwOn *****************
 18067 ;; Defined at:
 18068 ;;		line 688 in file "../src/Dimmer_B1.c"
 18069 ;; Parameters:    Size  Location     Type
 18070 ;;  sw              1    wreg     unsigned char 
 18071 ;; Auto vars:     Size  Location     Type
 18072 ;;  sw              1   13[BANK0 ] unsigned char 
 18073 ;;  idle            1   14[BANK0 ] unsigned char 
 18074 ;; Return value:  Size  Location     Type
 18075 ;;		None               void
 18076 ;; Registers used:
 18077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18078 ;; Tracked objects:
 18079 ;;		On entry : 0/0
 18080 ;;		On exit  : 0/0
 18081 ;;		Unchanged: 0/0
 18082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18084 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18087 ;;Total ram usage:        2 bytes
 18088 ;; Hardware stack levels used:    1
 18089 ;; Hardware stack levels required when called:    7
 18090 ;; This function calls:
 18091 ;;		_DimmerLights_SelectPointer
 18092 ;;		_setBuz
 18093 ;; This function is called by:
 18094 ;;		_DlyOff_Main
 18095 ;;		_setControl_Lights_Table
 18096 ;;		_setRFSW_Control
 18097 ;;		_setRFSW_AdjControl
 18098 ;;		_setSw_Main
 18099 ;; This function uses a non-reentrant model
 18100 ;;
 18101                           
 18102                           
 18103                           ;psect for function _setDimmerLights_SwOn
 18104  1216                     _setDimmerLights_SwOn:	
 18105                           
 18106                           ;incstack = 0
 18107                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18108                           ;setDimmerLights_SwOn@sw stored from wreg
 18109  1216  0020               	movlb	0	; select bank0
 18110  1217  00AD               	movwf	setDimmerLights_SwOn@sw
 18111                           
 18112                           ;Dimmer_B1.c: 689: char idle = 0;
 18113  1218  01AE               	clrf	setDimmerLights_SwOn@idle
 18114                           
 18115                           ;Dimmer_B1.c: 714: DimmerLights_SelectPointer(sw);
 18116  1219  082D               	movf	setDimmerLights_SwOn@sw,w
 18117  121A  319C  2420  3192   	fcall	_DimmerLights_SelectPointer
 18118                           
 18119                           ;Dimmer_B1.c: 715: if (idle == 0) {
 18120  121D  0020               	movlb	0	; select bank0
 18121  121E  08AE               	movf	setDimmerLights_SwOn@idle,f
 18122  121F  1D03               	skipz
 18123  1220  0008               	return
 18124                           
 18125                           ;Dimmer_B1.c: 716: DimmerLights->SwFlag = 1;
 18126  1221  0021               	movlb	1	; select bank1
 18127  1222  0855               	movf	_DimmerLights^(0+128),w
 18128  1223  0086               	movwf	6
 18129  1224  3001               	movlw	1	; select bank2/3
 18130  1225  0087               	movwf	7
 18131  1226  1401               	bsf	1,0
 18132                           
 18133                           ;Dimmer_B1.c: 717: if (DimmerLights->Status == 0) {
 18134  1227  0A55               	incf	_DimmerLights^(0+128),w
 18135  1228  0086               	movwf	6
 18136  1229  3001               	movlw	1	; select bank2/3
 18137  122A  0087               	movwf	7
 18138  122B  1801               	btfsc	1,0
 18139  122C  2A3D               	goto	l6059
 18140                           
 18141                           ;Dimmer_B1.c: 718: DimmerLights->Status = 1;
 18142  122D  0A55               	incf	_DimmerLights^(0+128),w
 18143  122E  0086               	movwf	6
 18144  122F  3001               	movlw	1	; select bank2/3
 18145  1230  0087               	movwf	7
 18146  1231  1401               	bsf	1,0
 18147                           
 18148                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = 1;
 18149  1232  0855               	movf	_DimmerLights^(0+128),w
 18150  1233  0086               	movwf	6
 18151  1234  3001               	movlw	1	; select bank2/3
 18152  1235  0087               	movwf	7
 18153  1236  1481               	bsf	1,1
 18154                           
 18155                           ;Dimmer_B1.c: 720: DimmerLights->Switch = 1;
 18156  1237  0855               	movf	_DimmerLights^(0+128),w
 18157  1238  0086               	movwf	6
 18158  1239  3001               	movlw	1	; select bank2/3
 18159  123A  0087               	movwf	7
 18160  123B  1501               	bsf	1,2
 18161                           
 18162                           ;Dimmer_B1.c: 721: } else {
 18163  123C  2A42               	goto	l6061
 18164  123D                     l6059:	
 18165                           
 18166                           ;Dimmer_B1.c: 722: DimmerLights->Status = 0;
 18167  123D  0A55               	incf	_DimmerLights^(0+128),w
 18168  123E  0086               	movwf	6
 18169  123F  3001               	movlw	1	; select bank2/3
 18170  1240  0087               	movwf	7
 18171  1241  1001               	bcf	1,0
 18172  1242                     l6061:	
 18173                           
 18174                           ;Dimmer_B1.c: 723: }
 18175                           ;Dimmer_B1.c: 724: setBuz(1, 100);
 18176  1242  3064               	movlw	100
 18177  1243  0020               	movlb	0	; select bank0
 18178  1244  00A9               	movwf	setBuz@time
 18179  1245  3000               	movlw	0
 18180  1246  00AA               	movwf	setBuz@time+1
 18181  1247  3001               	movlw	1
 18182  1248  3195  2551         	fcall	_setBuz
 18183  124A  0008               	return
 18184  124B                     __end_of_setDimmerLights_SwOn:	
 18185                           
 18186                           	psect	text128
 18187  1551                     __ptext128:	
 18188 ;; *************** function _setBuz *****************
 18189 ;; Defined at:
 18190 ;;		line 22 in file "../src/Buzzer_B1.c"
 18191 ;; Parameters:    Size  Location     Type
 18192 ;;  count           1    wreg     unsigned char 
 18193 ;;  time            2    9[BANK0 ] int 
 18194 ;; Auto vars:     Size  Location     Type
 18195 ;;  count           1   12[BANK0 ] unsigned char 
 18196 ;; Return value:  Size  Location     Type
 18197 ;;		None               void
 18198 ;; Registers used:
 18199 ;;		wreg, status,2, status,0, pclath, cstack
 18200 ;; Tracked objects:
 18201 ;;		On entry : 0/0
 18202 ;;		On exit  : 0/0
 18203 ;;		Unchanged: 0/0
 18204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18205 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18208 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18209 ;;Total ram usage:        4 bytes
 18210 ;; Hardware stack levels used:    1
 18211 ;; Hardware stack levels required when called:    6
 18212 ;; This function calls:
 18213 ;;		___awdiv
 18214 ;; This function is called by:
 18215 ;;		_setDimmerLights_SwOn
 18216 ;;		_setDimmerLights_Dimming
 18217 ;;		_my_MainTimer
 18218 ;;		_Exception_Main
 18219 ;;		_setTemp_Main
 18220 ;;		_setLog_Code
 18221 ;;		_setRFSW_Control
 18222 ;;		_setSw_Main
 18223 ;; This function uses a non-reentrant model
 18224 ;;
 18225                           
 18226                           
 18227                           ;psect for function _setBuz
 18228  1551                     _setBuz:	
 18229                           
 18230                           ;incstack = 0
 18231                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18232                           ;setBuz@count stored from wreg
 18233  1551  0020               	movlb	0	; select bank0
 18234  1552  00AC               	movwf	setBuz@count
 18235                           
 18236                           ;Buzzer_B1.c: 23: time /= 20;
 18237  1553  3014               	movlw	20
 18238  1554  00A0               	movwf	___awdiv@divisor
 18239  1555  3000               	movlw	0
 18240  1556  00A1               	movwf	___awdiv@divisor+1
 18241  1557  082A               	movf	setBuz@time+1,w
 18242  1558  01A3               	clrf	___awdiv@dividend+1
 18243  1559  07A3               	addwf	___awdiv@dividend+1,f
 18244  155A  0829               	movf	setBuz@time,w
 18245  155B  01A2               	clrf	___awdiv@dividend
 18246  155C  07A2               	addwf	___awdiv@dividend,f
 18247  155D  3194  24A7  3195   	fcall	___awdiv
 18248  1560  0020               	movlb	0	; select bank0
 18249  1561  0821               	movf	?___awdiv+1,w
 18250  1562  01AA               	clrf	setBuz@time+1
 18251  1563  07AA               	addwf	setBuz@time+1,f
 18252  1564  0820               	movf	?___awdiv,w
 18253  1565  01A9               	clrf	setBuz@time
 18254  1566  07A9               	addwf	setBuz@time,f
 18255                           
 18256                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18257  1567  0021               	movlb	1	; select bank1
 18258  1568  1C3B               	btfss	_Buz1^(0+128),0
 18259  1569  0008               	return
 18260                           
 18261                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18262  156A  18BB               	btfsc	_Buz1^(0+128),1
 18263  156B  2D82               	goto	l86
 18264                           
 18265                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18266  156C  14BB               	bsf	_Buz1^(0+128),1
 18267                           
 18268                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18269  156D  01BC               	clrf	(_Buz1^(0+128)+1)
 18270  156E  01BD               	clrf	((_Buz1+1)^(0+128)+1)
 18271                           
 18272                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18273  156F  0020               	movlb	0	; select bank0
 18274  1570  082C               	movf	setBuz@count,w
 18275  1571  00AB               	movwf	??_setBuz
 18276  1572  082B               	movf	??_setBuz,w
 18277  1573  0021               	movlb	1	; select bank1
 18278  1574  00BE               	movwf	(_Buz1^(0+128)+3)
 18279                           
 18280                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18281  1575  0020               	movlb	0	; select bank0
 18282  1576  082A               	movf	setBuz@time+1,w
 18283  1577  0021               	movlb	1	; select bank1
 18284  1578  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 18285  1579  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 18286  157A  0020               	movlb	0	; select bank0
 18287  157B  0829               	movf	setBuz@time,w
 18288  157C  0021               	movlb	1	; select bank1
 18289  157D  01C1               	clrf	(_Buz1^(0+128)+6)
 18290  157E  07C1               	addwf	(_Buz1^(0+128)+6),f
 18291                           
 18292                           ;Buzzer_B1.c: 30: RB3 = 1;
 18293  157F  0020               	movlb	0	; select bank0
 18294  1580  158D               	bsf	13,3	;volatile
 18295                           
 18296                           ;Buzzer_B1.c: 31: } else {
 18297  1581  0008               	return
 18298  1582                     l86:	
 18299                           
 18300                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18301  1582  19BB               	btfsc	_Buz1^(0+128),3
 18302  1583  2D96               	goto	l88
 18303                           
 18304                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18305  1584  15BB               	bsf	_Buz1^(0+128),3
 18306                           
 18307                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18308  1585  0020               	movlb	0	; select bank0
 18309  1586  082C               	movf	setBuz@count,w
 18310  1587  00AB               	movwf	??_setBuz
 18311  1588  082B               	movf	??_setBuz,w
 18312  1589  0021               	movlb	1	; select bank1
 18313  158A  00BF               	movwf	(_Buz1^(0+128)+4)
 18314                           
 18315                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18316  158B  0020               	movlb	0	; select bank0
 18317  158C  082A               	movf	setBuz@time+1,w
 18318  158D  0021               	movlb	1	; select bank1
 18319  158E  01C4               	clrf	((_Buz1+1)^(0+128)+8)
 18320  158F  07C4               	addwf	((_Buz1+1)^(0+128)+8),f
 18321  1590  0020               	movlb	0	; select bank0
 18322  1591  0829               	movf	setBuz@time,w
 18323  1592  0021               	movlb	1	; select bank1
 18324  1593  01C3               	clrf	(_Buz1^(0+128)+8)
 18325  1594  07C3               	addwf	(_Buz1^(0+128)+8),f
 18326                           
 18327                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18328  1595  0008               	return
 18329  1596                     l88:	
 18330  1596  1A3B               	btfsc	_Buz1^(0+128),4
 18331  1597  0008               	return
 18332                           
 18333                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18334  1598  163B               	bsf	_Buz1^(0+128),4
 18335                           
 18336                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18337  1599  0020               	movlb	0	; select bank0
 18338  159A  082C               	movf	setBuz@count,w
 18339  159B  00AB               	movwf	??_setBuz
 18340  159C  082B               	movf	??_setBuz,w
 18341  159D  0021               	movlb	1	; select bank1
 18342  159E  00C0               	movwf	(_Buz1^(0+128)+5)
 18343                           
 18344                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18345  159F  0020               	movlb	0	; select bank0
 18346  15A0  082A               	movf	setBuz@time+1,w
 18347  15A1  0021               	movlb	1	; select bank1
 18348  15A2  01C6               	clrf	((_Buz1+1)^(0+128)+10)
 18349  15A3  07C6               	addwf	((_Buz1+1)^(0+128)+10),f
 18350  15A4  0020               	movlb	0	; select bank0
 18351  15A5  0829               	movf	setBuz@time,w
 18352  15A6  0021               	movlb	1	; select bank1
 18353  15A7  01C5               	clrf	(_Buz1^(0+128)+10)
 18354  15A8  07C5               	addwf	(_Buz1^(0+128)+10),f
 18355  15A9  0008               	return
 18356  15AA                     __end_of_setBuz:	
 18357                           
 18358                           	psect	text129
 18359  14A7                     __ptext129:	
 18360 ;; *************** function ___awdiv *****************
 18361 ;; Defined at:
 18362 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18363 ;; Parameters:    Size  Location     Type
 18364 ;;  divisor         2    0[BANK0 ] int 
 18365 ;;  dividend        2    2[BANK0 ] int 
 18366 ;; Auto vars:     Size  Location     Type
 18367 ;;  quotient        2    7[BANK0 ] int 
 18368 ;;  sign            1    6[BANK0 ] unsigned char 
 18369 ;;  counter         1    5[BANK0 ] unsigned char 
 18370 ;; Return value:  Size  Location     Type
 18371 ;;                  2    0[BANK0 ] int 
 18372 ;; Registers used:
 18373 ;;		wreg, status,2, status,0
 18374 ;; Tracked objects:
 18375 ;;		On entry : 0/0
 18376 ;;		On exit  : 0/0
 18377 ;;		Unchanged: 0/0
 18378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18379 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18380 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18381 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18382 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18383 ;;Total ram usage:        9 bytes
 18384 ;; Hardware stack levels used:    1
 18385 ;; Hardware stack levels required when called:    5
 18386 ;; This function calls:
 18387 ;;		Nothing
 18388 ;; This function is called by:
 18389 ;;		_setBuz
 18390 ;; This function uses a non-reentrant model
 18391 ;;
 18392                           
 18393                           
 18394                           ;psect for function ___awdiv
 18395  14A7                     ___awdiv:	
 18396                           
 18397                           ;incstack = 0
 18398                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18399  14A7  0020               	movlb	0	; select bank0
 18400  14A8  01A6               	clrf	___awdiv@sign
 18401  14A9  1FA1               	btfss	___awdiv@divisor+1,7
 18402  14AA  2CB2               	goto	l5697
 18403  14AB  09A0               	comf	___awdiv@divisor,f
 18404  14AC  09A1               	comf	___awdiv@divisor+1,f
 18405  14AD  0AA0               	incf	___awdiv@divisor,f
 18406  14AE  1903               	skipnz
 18407  14AF  0AA1               	incf	___awdiv@divisor+1,f
 18408  14B0  01A6               	clrf	___awdiv@sign
 18409  14B1  0AA6               	incf	___awdiv@sign,f
 18410  14B2                     l5697:	
 18411  14B2  1FA3               	btfss	___awdiv@dividend+1,7
 18412  14B3  2CBD               	goto	l5703
 18413  14B4  09A2               	comf	___awdiv@dividend,f
 18414  14B5  09A3               	comf	___awdiv@dividend+1,f
 18415  14B6  0AA2               	incf	___awdiv@dividend,f
 18416  14B7  1903               	skipnz
 18417  14B8  0AA3               	incf	___awdiv@dividend+1,f
 18418  14B9  3001               	movlw	1
 18419  14BA  00A4               	movwf	??___awdiv
 18420  14BB  0824               	movf	??___awdiv,w
 18421  14BC  06A6               	xorwf	___awdiv@sign,f
 18422  14BD                     l5703:	
 18423  14BD  01A7               	clrf	___awdiv@quotient
 18424  14BE  01A8               	clrf	___awdiv@quotient+1
 18425  14BF  0821               	movf	___awdiv@divisor+1,w
 18426  14C0  0420               	iorwf	___awdiv@divisor,w
 18427  14C1  1903               	skipnz
 18428  14C2  2CEC               	goto	l5725
 18429  14C3  01A5               	clrf	___awdiv@counter
 18430  14C4  0AA5               	incf	___awdiv@counter,f
 18431  14C5                     l5713:	
 18432  14C5  1BA1               	btfsc	___awdiv@divisor+1,7
 18433  14C6  2CD1               	goto	l5715
 18434  14C7  3001               	movlw	1
 18435  14C8                     u4415:	
 18436  14C8  35A0               	lslf	___awdiv@divisor,f
 18437  14C9  0DA1               	rlf	___awdiv@divisor+1,f
 18438  14CA  0B89               	decfsz	9,f
 18439  14CB  2CC8               	goto	u4415
 18440  14CC  3001               	movlw	1
 18441  14CD  00A4               	movwf	??___awdiv
 18442  14CE  0824               	movf	??___awdiv,w
 18443  14CF  07A5               	addwf	___awdiv@counter,f
 18444  14D0  2CC5               	goto	l5713
 18445  14D1                     l5715:	
 18446  14D1  3001               	movlw	1
 18447  14D2                     u4435:	
 18448  14D2  35A7               	lslf	___awdiv@quotient,f
 18449  14D3  0DA8               	rlf	___awdiv@quotient+1,f
 18450  14D4  0B89               	decfsz	9,f
 18451  14D5  2CD2               	goto	u4435
 18452  14D6  0821               	movf	___awdiv@divisor+1,w
 18453  14D7  0223               	subwf	___awdiv@dividend+1,w
 18454  14D8  1D03               	skipz
 18455  14D9  2CDC               	goto	u4445
 18456  14DA  0820               	movf	___awdiv@divisor,w
 18457  14DB  0222               	subwf	___awdiv@dividend,w
 18458  14DC                     u4445:	
 18459  14DC  1C03               	skipc
 18460  14DD  2CE3               	goto	l5721
 18461  14DE  0820               	movf	___awdiv@divisor,w
 18462  14DF  02A2               	subwf	___awdiv@dividend,f
 18463  14E0  0821               	movf	___awdiv@divisor+1,w
 18464  14E1  3BA3               	subwfb	___awdiv@dividend+1,f
 18465  14E2  1427               	bsf	___awdiv@quotient,0
 18466  14E3                     l5721:	
 18467  14E3  3001               	movlw	1
 18468  14E4                     u4455:	
 18469  14E4  36A1               	lsrf	___awdiv@divisor+1,f
 18470  14E5  0CA0               	rrf	___awdiv@divisor,f
 18471  14E6  0B89               	decfsz	9,f
 18472  14E7  2CE4               	goto	u4455
 18473  14E8  3001               	movlw	1
 18474  14E9  02A5               	subwf	___awdiv@counter,f
 18475  14EA  1D03               	btfss	3,2
 18476  14EB  2CD1               	goto	l5715
 18477  14EC                     l5725:	
 18478  14EC  0826               	movf	___awdiv@sign,w
 18479  14ED  1903               	btfsc	3,2
 18480  14EE  2CF4               	goto	l5729
 18481  14EF  09A7               	comf	___awdiv@quotient,f
 18482  14F0  09A8               	comf	___awdiv@quotient+1,f
 18483  14F1  0AA7               	incf	___awdiv@quotient,f
 18484  14F2  1903               	skipnz
 18485  14F3  0AA8               	incf	___awdiv@quotient+1,f
 18486  14F4                     l5729:	
 18487  14F4  0828               	movf	___awdiv@quotient+1,w
 18488  14F5  01A1               	clrf	?___awdiv+1
 18489  14F6  07A1               	addwf	?___awdiv+1,f
 18490  14F7  0827               	movf	___awdiv@quotient,w
 18491  14F8  01A0               	clrf	?___awdiv
 18492  14F9  07A0               	addwf	?___awdiv,f
 18493  14FA  0008               	return
 18494  14FB                     __end_of___awdiv:	
 18495                           
 18496                           	psect	text130
 18497  12B8                     __ptext130:	
 18498 ;; *************** function _setDimmerLights_SwOff *****************
 18499 ;; Defined at:
 18500 ;;		line 729 in file "../src/Dimmer_B1.c"
 18501 ;; Parameters:    Size  Location     Type
 18502 ;;  sw              1    wreg     unsigned char 
 18503 ;; Auto vars:     Size  Location     Type
 18504 ;;  sw              1    2[BANK0 ] unsigned char 
 18505 ;; Return value:  Size  Location     Type
 18506 ;;		None               void
 18507 ;; Registers used:
 18508 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18509 ;; Tracked objects:
 18510 ;;		On entry : 0/0
 18511 ;;		On exit  : 0/0
 18512 ;;		Unchanged: 0/0
 18513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18517 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18518 ;;Total ram usage:        1 bytes
 18519 ;; Hardware stack levels used:    1
 18520 ;; Hardware stack levels required when called:    6
 18521 ;; This function calls:
 18522 ;;		_DimmerLights_SelectPointer
 18523 ;; This function is called by:
 18524 ;;		_DlyOff_Main
 18525 ;;		_Exception_Main
 18526 ;;		_setControl_Lights_Table
 18527 ;;		_setRFSW_Control
 18528 ;;		_setRFSW_AdjControl
 18529 ;;		_setSw_Main
 18530 ;; This function uses a non-reentrant model
 18531 ;;
 18532                           
 18533                           
 18534                           ;psect for function _setDimmerLights_SwOff
 18535  12B8                     _setDimmerLights_SwOff:	
 18536                           
 18537                           ;incstack = 0
 18538                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18539                           ;setDimmerLights_SwOff@sw stored from wreg
 18540  12B8  0020               	movlb	0	; select bank0
 18541  12B9  00A2               	movwf	setDimmerLights_SwOff@sw
 18542                           
 18543                           ;Dimmer_B1.c: 730: DimmerLights_SelectPointer(sw);
 18544  12BA  0822               	movf	setDimmerLights_SwOff@sw,w
 18545  12BB  319C  2420  3192   	fcall	_DimmerLights_SelectPointer
 18546                           
 18547                           ;Dimmer_B1.c: 732: if (DimmerLights->SwFlag == 1) {
 18548  12BE  0021               	movlb	1	; select bank1
 18549  12BF  0855               	movf	_DimmerLights^(0+128),w
 18550  12C0  0086               	movwf	6
 18551  12C1  3001               	movlw	1	; select bank2/3
 18552  12C2  0087               	movwf	7
 18553  12C3  1C01               	btfss	1,0
 18554  12C4  0008               	return
 18555                           
 18556                           ;Dimmer_B1.c: 733: DimmerLights->SwFlag = 0;
 18557  12C5  0855               	movf	_DimmerLights^(0+128),w
 18558  12C6  0086               	movwf	6
 18559  12C7  3001               	movlw	1	; select bank2/3
 18560  12C8  0087               	movwf	7
 18561  12C9  1001               	bcf	1,0
 18562                           
 18563                           ;Dimmer_B1.c: 734: if (DimmerLights->Status == 1) {
 18564  12CA  0A55               	incf	_DimmerLights^(0+128),w
 18565  12CB  0086               	movwf	6
 18566  12CC  3001               	movlw	1	; select bank2/3
 18567  12CD  0087               	movwf	7
 18568  12CE  1C01               	btfss	1,0
 18569  12CF  2AE6               	goto	l6073
 18570                           
 18571                           ;Dimmer_B1.c: 735: if (DimmerLights->DimmingSwFlag == 1) {
 18572  12D0  0855               	movf	_DimmerLights^(0+128),w
 18573  12D1  0086               	movwf	6
 18574  12D2  3001               	movlw	1	; select bank2/3
 18575  12D3  0087               	movwf	7
 18576  12D4  1D81               	btfss	1,3
 18577  12D5  0008               	return
 18578                           
 18579                           ;Dimmer_B1.c: 736: DimmerLights->DimmingSwFlag = 0;
 18580  12D6  0855               	movf	_DimmerLights^(0+128),w
 18581  12D7  0086               	movwf	6
 18582  12D8  3001               	movlw	1	; select bank2/3
 18583  12D9  0087               	movwf	7
 18584  12DA  1181               	bcf	1,3
 18585                           
 18586                           ;Dimmer_B1.c: 738: DimmerLights->DimmingTrigger = 1;
 18587  12DB  0855               	movf	_DimmerLights^(0+128),w
 18588  12DC  0086               	movwf	6
 18589  12DD  3001               	movlw	1	; select bank2/3
 18590  12DE  0087               	movwf	7
 18591  12DF  1601               	bsf	1,4
 18592                           
 18593                           ;Dimmer_B1.c: 739: DimmerLights->DimmingSwitch = 0;
 18594  12E0  0855               	movf	_DimmerLights^(0+128),w
 18595  12E1  0086               	movwf	6
 18596  12E2  3001               	movlw	1	; select bank2/3
 18597  12E3  0087               	movwf	7
 18598  12E4  1281               	bcf	1,5
 18599                           
 18600                           ;Dimmer_B1.c: 740: }
 18601                           ;Dimmer_B1.c: 741: } else {
 18602  12E5  0008               	return
 18603  12E6                     l6073:	
 18604                           
 18605                           ;Dimmer_B1.c: 743: DimmerLights->Trigger = 1;
 18606  12E6  0855               	movf	_DimmerLights^(0+128),w
 18607  12E7  0086               	movwf	6
 18608  12E8  3001               	movlw	1	; select bank2/3
 18609  12E9  0087               	movwf	7
 18610  12EA  1481               	bsf	1,1
 18611                           
 18612                           ;Dimmer_B1.c: 744: DimmerLights->Switch = 0;
 18613  12EB  0855               	movf	_DimmerLights^(0+128),w
 18614  12EC  0086               	movwf	6
 18615  12ED  3001               	movlw	1	; select bank2/3
 18616  12EE  0087               	movwf	7
 18617  12EF  1101               	bcf	1,2
 18618  12F0  0008               	return
 18619  12F1                     __end_of_setDimmerLights_SwOff:	
 18620                           
 18621                           	psect	text131
 18622  1CD3                     __ptext131:	
 18623 ;; *************** function _getDimmerLights_Status *****************
 18624 ;; Defined at:
 18625 ;;		line 1070 in file "../src/Dimmer_B1.c"
 18626 ;; Parameters:    Size  Location     Type
 18627 ;;  lights          1    wreg     unsigned char 
 18628 ;; Auto vars:     Size  Location     Type
 18629 ;;  lights          1    2[BANK0 ] unsigned char 
 18630 ;;  status          1    3[BANK0 ] unsigned char 
 18631 ;; Return value:  Size  Location     Type
 18632 ;;                  1    wreg      unsigned char 
 18633 ;; Registers used:
 18634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18635 ;; Tracked objects:
 18636 ;;		On entry : 0/0
 18637 ;;		On exit  : 0/0
 18638 ;;		Unchanged: 0/0
 18639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18641 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18643 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18644 ;;Total ram usage:        2 bytes
 18645 ;; Hardware stack levels used:    1
 18646 ;; Hardware stack levels required when called:    6
 18647 ;; This function calls:
 18648 ;;		_DimmerLights_SelectPointer
 18649 ;; This function is called by:
 18650 ;;		_DlyOff_Main
 18651 ;;		_Exception_Main
 18652 ;;		_setControl_Lights_Table
 18653 ;;		_setRFSW_Control
 18654 ;;		_setRFSW_AdjControl
 18655 ;; This function uses a non-reentrant model
 18656 ;;
 18657                           
 18658                           
 18659                           ;psect for function _getDimmerLights_Status
 18660  1CD3                     _getDimmerLights_Status:	
 18661                           
 18662                           ;incstack = 0
 18663                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18664                           ;getDimmerLights_Status@lights stored from wreg
 18665  1CD3  0020               	movlb	0	; select bank0
 18666  1CD4  00A2               	movwf	getDimmerLights_Status@lights
 18667                           
 18668                           ;Dimmer_B1.c: 1071: DimmerLights_SelectPointer(lights);
 18669  1CD5  0822               	movf	getDimmerLights_Status@lights,w
 18670  1CD6  319C  2420         	fcall	_DimmerLights_SelectPointer
 18671                           
 18672                           ;Dimmer_B1.c: 1072: char status = DimmerLights->Status == 1 ? 1 : 0;
 18673  1CD8  0021               	movlb	1	; select bank1
 18674  1CD9  0A55               	incf	_DimmerLights^(0+128),w
 18675  1CDA  0086               	movwf	6
 18676  1CDB  3001               	movlw	1	; select bank2/3
 18677  1CDC  0087               	movwf	7
 18678  1CDD  3000               	movlw	0
 18679  1CDE  1801               	btfsc	1,0
 18680  1CDF  3001               	movlw	1
 18681  1CE0  0020               	movlb	0	; select bank0
 18682  1CE1  00A3               	movwf	getDimmerLights_Status@status
 18683                           
 18684                           ;Dimmer_B1.c: 1073: return status;
 18685  1CE2  0823               	movf	getDimmerLights_Status@status,w
 18686  1CE3  0008               	return
 18687  1CE4                     __end_of_getDimmerLights_Status:	
 18688                           
 18689                           	psect	text132
 18690  1C20                     __ptext132:	
 18691 ;; *************** function _DimmerLights_SelectPointer *****************
 18692 ;; Defined at:
 18693 ;;		line 611 in file "../src/Dimmer_B1.c"
 18694 ;; Parameters:    Size  Location     Type
 18695 ;;  lights          1    wreg     unsigned char 
 18696 ;; Auto vars:     Size  Location     Type
 18697 ;;  lights          1    1[BANK0 ] unsigned char 
 18698 ;; Return value:  Size  Location     Type
 18699 ;;		None               void
 18700 ;; Registers used:
 18701 ;;		wreg
 18702 ;; Tracked objects:
 18703 ;;		On entry : 0/0
 18704 ;;		On exit  : 0/0
 18705 ;;		Unchanged: 0/0
 18706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18711 ;;Total ram usage:        2 bytes
 18712 ;; Hardware stack levels used:    1
 18713 ;; Hardware stack levels required when called:    5
 18714 ;; This function calls:
 18715 ;;		Nothing
 18716 ;; This function is called by:
 18717 ;;		_setDimmerLights_SwOn
 18718 ;;		_setDimmerLights_SwOff
 18719 ;;		_setDimmerLights_DimmingOn
 18720 ;;		_setDimmerLights_Main
 18721 ;;		_getDimmerLights_Status
 18722 ;;		_setDimmerLights_DimmingRun
 18723 ;;		_setDimmerLights_Status
 18724 ;; This function uses a non-reentrant model
 18725 ;;
 18726                           
 18727                           
 18728                           ;psect for function _DimmerLights_SelectPointer
 18729  1C20                     _DimmerLights_SelectPointer:	
 18730                           
 18731                           ;incstack = 0
 18732                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18733                           ;DimmerLights_SelectPointer@lights stored from wreg
 18734  1C20  0020               	movlb	0	; select bank0
 18735  1C21  00A1               	movwf	DimmerLights_SelectPointer@lights
 18736                           
 18737                           ;Dimmer_B1.c: 613: if (lights == 1) {
 18738  1C22  0821               	movf	DimmerLights_SelectPointer@lights,w
 18739  1C23  3A01               	xorlw	1
 18740  1C24  1D03               	skipz
 18741  1C25  0008               	return
 18742                           
 18743                           ;Dimmer_B1.c: 614: DimmerLights = &DimmerLights1;
 18744  1C26  305A               	movlw	_DimmerLights1& (0+255)
 18745  1C27  00A0               	movwf	??_DimmerLights_SelectPointer
 18746  1C28  0820               	movf	??_DimmerLights_SelectPointer,w
 18747  1C29  0021               	movlb	1	; select bank1
 18748  1C2A  00D5               	movwf	_DimmerLights^(0+128)
 18749  1C2B  0008               	return
 18750  1C2C                     __end_of_DimmerLights_SelectPointer:	
 18751                           
 18752                           	psect	text133
 18753  1B5F                     __ptext133:	
 18754 ;; *************** function _DelayOff_Initialization *****************
 18755 ;; Defined at:
 18756 ;;		line 26 in file "../src/DelayOff_B1.c"
 18757 ;; Parameters:    Size  Location     Type
 18758 ;;		None
 18759 ;; Auto vars:     Size  Location     Type
 18760 ;;		None
 18761 ;; Return value:  Size  Location     Type
 18762 ;;		None               void
 18763 ;; Registers used:
 18764 ;;		wreg, status,2, status,0, pclath, cstack
 18765 ;; Tracked objects:
 18766 ;;		On entry : 0/0
 18767 ;;		On exit  : 0/0
 18768 ;;		Unchanged: 0/0
 18769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18774 ;;Total ram usage:        0 bytes
 18775 ;; Hardware stack levels used:    1
 18776 ;; Hardware stack levels required when called:    7
 18777 ;; This function calls:
 18778 ;;		_DlyOff_Initialization
 18779 ;; This function is called by:
 18780 ;;		_main
 18781 ;; This function uses a non-reentrant model
 18782 ;;
 18783                           
 18784                           
 18785                           ;psect for function _DelayOff_Initialization
 18786  1B5F                     _DelayOff_Initialization:	
 18787                           
 18788                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18789                           
 18790                           ;incstack = 0
 18791                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18792  1B5F  3001               	movlw	1
 18793  1B60  319B  238C         	fcall	_DlyOff_Initialization
 18794  1B62  0008               	return
 18795  1B63                     __end_of_DelayOff_Initialization:	
 18796                           
 18797                           	psect	text134
 18798  1B8C                     __ptext134:	
 18799 ;; *************** function _DlyOff_Initialization *****************
 18800 ;; Defined at:
 18801 ;;		line 56 in file "../src/DelayOff_B1.c"
 18802 ;; Parameters:    Size  Location     Type
 18803 ;;  sw              1    wreg     unsigned char 
 18804 ;; Auto vars:     Size  Location     Type
 18805 ;;  sw              1    2[BANK0 ] unsigned char 
 18806 ;; Return value:  Size  Location     Type
 18807 ;;		None               void
 18808 ;; Registers used:
 18809 ;;		wreg, status,2, status,0, pclath, cstack
 18810 ;; Tracked objects:
 18811 ;;		On entry : 0/0
 18812 ;;		On exit  : 0/0
 18813 ;;		Unchanged: 0/0
 18814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18819 ;;Total ram usage:        1 bytes
 18820 ;; Hardware stack levels used:    1
 18821 ;; Hardware stack levels required when called:    6
 18822 ;; This function calls:
 18823 ;;		_DelayOffPointSelect
 18824 ;; This function is called by:
 18825 ;;		_DelayOff_Initialization
 18826 ;; This function uses a non-reentrant model
 18827 ;;
 18828                           
 18829                           
 18830                           ;psect for function _DlyOff_Initialization
 18831  1B8C                     _DlyOff_Initialization:	
 18832                           
 18833                           ;incstack = 0
 18834                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18835                           ;DlyOff_Initialization@sw stored from wreg
 18836  1B8C  0020               	movlb	0	; select bank0
 18837  1B8D  00A2               	movwf	DlyOff_Initialization@sw
 18838                           
 18839                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18840  1B8E  0822               	movf	DlyOff_Initialization@sw,w
 18841  1B8F  319C  2414         	fcall	_DelayOffPointSelect
 18842  1B91  0008               	return
 18843  1B92                     __end_of_DlyOff_Initialization:	
 18844                           
 18845                           	psect	text135
 18846  1C14                     __ptext135:	
 18847 ;; *************** function _DelayOffPointSelect *****************
 18848 ;; Defined at:
 18849 ;;		line 7 in file "../src/DelayOff_B1.c"
 18850 ;; Parameters:    Size  Location     Type
 18851 ;;  sw              1    wreg     unsigned char 
 18852 ;; Auto vars:     Size  Location     Type
 18853 ;;  sw              1    1[BANK0 ] unsigned char 
 18854 ;; Return value:  Size  Location     Type
 18855 ;;		None               void
 18856 ;; Registers used:
 18857 ;;		wreg
 18858 ;; Tracked objects:
 18859 ;;		On entry : 0/0
 18860 ;;		On exit  : 0/0
 18861 ;;		Unchanged: 0/0
 18862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18865 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18866 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18867 ;;Total ram usage:        2 bytes
 18868 ;; Hardware stack levels used:    1
 18869 ;; Hardware stack levels required when called:    5
 18870 ;; This function calls:
 18871 ;;		Nothing
 18872 ;; This function is called by:
 18873 ;;		_DlyOff_Initialization
 18874 ;;		_DlyOff_Main
 18875 ;;		_setDelayOff_GO
 18876 ;;		_getDelayOff_GO
 18877 ;; This function uses a non-reentrant model
 18878 ;;
 18879                           
 18880                           
 18881                           ;psect for function _DelayOffPointSelect
 18882  1C14                     _DelayOffPointSelect:	
 18883                           
 18884                           ;incstack = 0
 18885                           ; Regs used in _DelayOffPointSelect: [wreg]
 18886                           ;DelayOffPointSelect@sw stored from wreg
 18887  1C14  0020               	movlb	0	; select bank0
 18888  1C15  00A1               	movwf	DelayOffPointSelect@sw
 18889                           
 18890                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18891  1C16  0821               	movf	DelayOffPointSelect@sw,w
 18892  1C17  3A01               	xorlw	1
 18893  1C18  1D03               	skipz
 18894  1C19  0008               	return
 18895                           
 18896                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18897  1C1A  3062               	movlw	_DlySw1& (0+255)
 18898  1C1B  00A0               	movwf	??_DelayOffPointSelect
 18899  1C1C  0820               	movf	??_DelayOffPointSelect,w
 18900  1C1D  0021               	movlb	1	; select bank1
 18901  1C1E  00D4               	movwf	_DelayOff^(0+128)
 18902  1C1F  0008               	return
 18903  1C20                     __end_of_DelayOffPointSelect:	
 18904                           
 18905                           	psect	text136
 18906  07AE                     __ptext136:	
 18907 ;; *************** function _Buzzer_Main *****************
 18908 ;; Defined at:
 18909 ;;		line 46 in file "../src/Buzzer_B1.c"
 18910 ;; Parameters:    Size  Location     Type
 18911 ;;		None
 18912 ;; Auto vars:     Size  Location     Type
 18913 ;;		None
 18914 ;; Return value:  Size  Location     Type
 18915 ;;		None               void
 18916 ;; Registers used:
 18917 ;;		wreg, status,2, status,0
 18918 ;; Tracked objects:
 18919 ;;		On entry : 0/0
 18920 ;;		On exit  : 0/0
 18921 ;;		Unchanged: 0/0
 18922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18926 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18927 ;;Total ram usage:        1 bytes
 18928 ;; Hardware stack levels used:    1
 18929 ;; Hardware stack levels required when called:    5
 18930 ;; This function calls:
 18931 ;;		Nothing
 18932 ;; This function is called by:
 18933 ;;		_main
 18934 ;; This function uses a non-reentrant model
 18935 ;;
 18936                           
 18937                           
 18938                           ;psect for function _Buzzer_Main
 18939  07AE                     _Buzzer_Main:	
 18940                           
 18941                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18942                           
 18943                           ;incstack = 0
 18944                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18945  07AE  0021               	movlb	1	; select bank1
 18946  07AF  1CBB               	btfss	_Buz1^(0+128),1
 18947  07B0  0008               	return
 18948                           
 18949                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18950  07B1  3001               	movlw	1
 18951  07B2  07BC               	addwf	(_Buz1^(0+128)+1),f
 18952  07B3  3000               	movlw	0
 18953  07B4  3DBD               	addwfc	((_Buz1+1)^(0+128)+1),f
 18954                           
 18955                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18956  07B5  0842               	movf	((_Buz1+1)^(0+128)+6),w
 18957  07B6  023D               	subwf	((_Buz1+1)^(0+128)+1),w
 18958  07B7  1D03               	skipz
 18959  07B8  2FBB               	goto	u7555
 18960  07B9  0841               	movf	(_Buz1^(0+128)+6),w
 18961  07BA  023C               	subwf	(_Buz1^(0+128)+1),w
 18962  07BB                     u7555:	
 18963  07BB  1C03               	skipc
 18964  07BC  0008               	return
 18965                           
 18966                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18967  07BD  01BC               	clrf	(_Buz1^(0+128)+1)
 18968  07BE  01BD               	clrf	((_Buz1+1)^(0+128)+1)
 18969                           
 18970                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18971  07BF  12BB               	bcf	_Buz1^(0+128),5
 18972  07C0  0020               	movlb	0	; select bank0
 18973  07C1  1D8D               	btfss	13,3	;volatile
 18974  07C2  2FC5               	goto	l7639
 18975  07C3  0021               	movlb	1	; select bank1
 18976  07C4  16BB               	bsf	_Buz1^(0+128),5
 18977  07C5                     l7639:	
 18978                           
 18979                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18980  07C5  0021               	movlb	1	; select bank1
 18981  07C6  1ABB               	btfsc	_Buz1^(0+128),5
 18982  07C7  2FF1               	goto	l96
 18983                           
 18984                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18985  07C8  08BE               	movf	(_Buz1^(0+128)+3),f
 18986  07C9  1D03               	skipz
 18987  07CA  2FED               	goto	l97
 18988                           
 18989                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18990  07CB  1DBB               	btfss	_Buz1^(0+128),3
 18991  07CC  2FDB               	goto	l98
 18992                           
 18993                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18994  07CD  11BB               	bcf	_Buz1^(0+128),3
 18995                           
 18996                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18997  07CE  083F               	movf	(_Buz1^(0+128)+4),w
 18998  07CF  0020               	movlb	0	; select bank0
 18999  07D0  00A0               	movwf	??_Buzzer_Main
 19000  07D1  0820               	movf	??_Buzzer_Main,w
 19001  07D2  0021               	movlb	1	; select bank1
 19002  07D3  00BE               	movwf	(_Buz1^(0+128)+3)
 19003                           
 19004                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19005  07D4  0844               	movf	((_Buz1+1)^(0+128)+8),w
 19006  07D5  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 19007  07D6  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 19008  07D7  0843               	movf	(_Buz1^(0+128)+8),w
 19009  07D8  01C1               	clrf	(_Buz1^(0+128)+6)
 19010  07D9  07C1               	addwf	(_Buz1^(0+128)+6),f
 19011                           
 19012                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19013  07DA  0008               	return
 19014  07DB                     l98:	
 19015  07DB  1E3B               	btfss	_Buz1^(0+128),4
 19016  07DC  2FEB               	goto	l100
 19017                           
 19018                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19019  07DD  123B               	bcf	_Buz1^(0+128),4
 19020                           
 19021                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19022  07DE  0840               	movf	(_Buz1^(0+128)+5),w
 19023  07DF  0020               	movlb	0	; select bank0
 19024  07E0  00A0               	movwf	??_Buzzer_Main
 19025  07E1  0820               	movf	??_Buzzer_Main,w
 19026  07E2  0021               	movlb	1	; select bank1
 19027  07E3  00BE               	movwf	(_Buz1^(0+128)+3)
 19028                           
 19029                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19030  07E4  0846               	movf	((_Buz1+1)^(0+128)+10),w
 19031  07E5  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 19032  07E6  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 19033  07E7  0845               	movf	(_Buz1^(0+128)+10),w
 19034  07E8  01C1               	clrf	(_Buz1^(0+128)+6)
 19035  07E9  07C1               	addwf	(_Buz1^(0+128)+6),f
 19036                           
 19037                           ;Buzzer_B1.c: 62: } else {
 19038  07EA  0008               	return
 19039  07EB                     l100:	
 19040                           
 19041                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19042  07EB  10BB               	bcf	_Buz1^(0+128),1
 19043                           
 19044                           ;Buzzer_B1.c: 64: }
 19045                           ;Buzzer_B1.c: 65: } else {
 19046  07EC  0008               	return
 19047  07ED                     l97:	
 19048                           
 19049                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19050  07ED  16BB               	bsf	_Buz1^(0+128),5
 19051                           
 19052                           ;Buzzer_B1.c: 68: RB3 = 1;
 19053  07EE  0020               	movlb	0	; select bank0
 19054  07EF  158D               	bsf	13,3	;volatile
 19055                           
 19056                           ;Buzzer_B1.c: 69: }
 19057                           ;Buzzer_B1.c: 70: } else {
 19058  07F0  0008               	return
 19059  07F1                     l96:	
 19060                           
 19061                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19062  07F1  12BB               	bcf	_Buz1^(0+128),5
 19063                           
 19064                           ;Buzzer_B1.c: 73: RB3 = 0;
 19065  07F2  0020               	movlb	0	; select bank0
 19066  07F3  118D               	bcf	13,3	;volatile
 19067                           
 19068                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19069  07F4  3001               	movlw	1
 19070  07F5  0021               	movlb	1	; select bank1
 19071  07F6  02BE               	subwf	(_Buz1^(0+128)+3),f
 19072  07F7  0008               	return
 19073  07F8                     __end_of_Buzzer_Main:	
 19074                           
 19075                           	psect	text137
 19076  1B4D                     __ptext137:	
 19077 ;; *************** function _Buzzer_Initialization *****************
 19078 ;; Defined at:
 19079 ;;		line 11 in file "../src/Buzzer_B1.c"
 19080 ;; Parameters:    Size  Location     Type
 19081 ;;		None
 19082 ;; Auto vars:     Size  Location     Type
 19083 ;;		None
 19084 ;; Return value:  Size  Location     Type
 19085 ;;		None               void
 19086 ;; Registers used:
 19087 ;;		None
 19088 ;; Tracked objects:
 19089 ;;		On entry : 0/0
 19090 ;;		On exit  : 0/0
 19091 ;;		Unchanged: 0/0
 19092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19097 ;;Total ram usage:        0 bytes
 19098 ;; Hardware stack levels used:    1
 19099 ;; Hardware stack levels required when called:    5
 19100 ;; This function calls:
 19101 ;;		Nothing
 19102 ;; This function is called by:
 19103 ;;		_main
 19104 ;; This function uses a non-reentrant model
 19105 ;;
 19106                           
 19107                           
 19108                           ;psect for function _Buzzer_Initialization
 19109  1B4D                     _Buzzer_Initialization:	
 19110                           
 19111                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19112                           
 19113                           ;incstack = 0
 19114                           ; Regs used in _Buzzer_Initialization: []
 19115  1B4D  0021               	movlb	1	; select bank1
 19116  1B4E  143B               	bsf	_Buz1^(0+128),0
 19117  1B4F  0008               	return
 19118  1B50                     __end_of_Buzzer_Initialization:	
 19119                           
 19120                           	psect	intentry
 19121  0004                     __pintentry:	
 19122 ;; *************** function _ISR *****************
 19123 ;; Defined at:
 19124 ;;		line 116 in file "../src/MCU_B1.c"
 19125 ;; Parameters:    Size  Location     Type
 19126 ;;		None
 19127 ;; Auto vars:     Size  Location     Type
 19128 ;;		None
 19129 ;; Return value:  Size  Location     Type
 19130 ;;		None               void
 19131 ;; Registers used:
 19132 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19133 ;; Tracked objects:
 19134 ;;		On entry : 0/0
 19135 ;;		On exit  : 0/0
 19136 ;;		Unchanged: 0/0
 19137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19141 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19142 ;;Total ram usage:        1 bytes
 19143 ;; Hardware stack levels used:    1
 19144 ;; Hardware stack levels required when called:    4
 19145 ;; This function calls:
 19146 ;;		_IOC_ISR
 19147 ;;		_TMR1_ISR
 19148 ;; This function is called by:
 19149 ;;		Interrupt level 1
 19150 ;; This function uses a non-reentrant model
 19151 ;;
 19152                           
 19153  0004                     _ISR:	
 19154                           
 19155                           ;incstack = 0
 19156                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19157  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19158  0005  3180               	pagesel	$
 19159  0006  0020               	movlb	0	; select bank0
 19160  0007  087F               	movf	127,w
 19161  0008  00FD               	movwf	??_ISR
 19162                           
 19163                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19164  0009  0021               	movlb	1	; select bank1
 19165  000A  1C11               	btfss	17,0	;volatile
 19166  000B  2813               	goto	i1l1202
 19167  000C  0020               	movlb	0	; select bank0
 19168  000D  1C11               	btfss	17,0	;volatile
 19169  000E  2813               	goto	i1l1202
 19170                           
 19171                           ;MCU_B1.c: 126: TMR1_ISR();
 19172  000F  319F  27C2  3180   	fcall	_TMR1_ISR
 19173                           
 19174                           ;MCU_B1.c: 127: }
 19175  0012  281B               	goto	i1l1205
 19176  0013                     i1l1202:	
 19177                           
 19178                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19179  0013  198B               	btfsc	11,3	;volatile
 19180  0014  1C0B               	btfss	11,0	;volatile
 19181  0015  281B               	goto	i1l1205
 19182  0016  0027               	movlb	7	; select bank7
 19183  0017  1D16               	btfss	22,2	;volatile
 19184  0018  281B               	goto	i1l1205
 19185                           
 19186                           ;MCU_B1.c: 139: IOC_ISR();
 19187  0019  319B  23C3         	fcall	_IOC_ISR
 19188  001B                     i1l1205:	
 19189                           ;MCU_B1.c: 140: }
 19190                           ;MCU_B1.c: 148: return;
 19191                           
 19192  001B  087D               	movf	??_ISR,w
 19193  001C  0020               	movlb	0	; select bank0
 19194  001D  00FF               	movwf	127
 19195  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19196  001F  0009               	retfie
 19197  0020                     __end_of_ISR:	
 19198                           
 19199                           	psect	text139
 19200  1FC2                     __ptext139:	
 19201 ;; *************** function _TMR1_ISR *****************
 19202 ;; Defined at:
 19203 ;;		line 236 in file "../src/MCU_B1.c"
 19204 ;; Parameters:    Size  Location     Type
 19205 ;;		None
 19206 ;; Auto vars:     Size  Location     Type
 19207 ;;		None
 19208 ;; Return value:  Size  Location     Type
 19209 ;;		None               void
 19210 ;; Registers used:
 19211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19212 ;; Tracked objects:
 19213 ;;		On entry : 0/0
 19214 ;;		On exit  : 0/0
 19215 ;;		Unchanged: 0/0
 19216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19221 ;;Total ram usage:        0 bytes
 19222 ;; Hardware stack levels used:    1
 19223 ;; Hardware stack levels required when called:    1
 19224 ;; This function calls:
 19225 ;;		_DimmerLights_TMR_1
 19226 ;; This function is called by:
 19227 ;;		_ISR
 19228 ;; This function uses a non-reentrant model
 19229 ;;
 19230                           
 19231                           
 19232                           ;psect for function _TMR1_ISR
 19233  1FC2                     _TMR1_ISR:	
 19234                           
 19235                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19236                           
 19237                           ;incstack = 0
 19238                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19239  1FC2  30FA               	movlw	250
 19240  1FC3  0020               	movlb	0	; select bank0
 19241  1FC4  0097               	movwf	23	;volatile
 19242                           
 19243                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19244  1FC5  3038               	movlw	56
 19245  1FC6  0096               	movwf	22	;volatile
 19246                           
 19247                           ;MCU_B1.c: 240: TMR1IF = 0;
 19248  1FC7  1011               	bcf	17,0	;volatile
 19249                           
 19250                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19251  1FC8  3188  20EB  319F   	fcall	_DimmerLights_TMR_1
 19252                           
 19253                           ;MCU_B1.c: 271: Timer1.Count++;
 19254  1FCB  3001               	movlw	1
 19255  1FCC  0022               	movlb	2	; select bank2
 19256  1FCD  07A6               	addwf	(_Timer1^(0+256)+1),f
 19257  1FCE  3000               	movlw	0
 19258  1FCF  3DA7               	addwfc	((_Timer1+1)^(0+256)+1),f
 19259                           
 19260                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19261  1FD0  3001               	movlw	1
 19262  1FD1  3E25               	addlw	_Timer1& (0+255)
 19263  1FD2  0086               	movwf	6
 19264  1FD3  3001               	movlw	1	; select bank2/3
 19265  1FD4  0087               	movwf	7
 19266  1FD5  3F40               	moviw [0]fsr1
 19267  1FD6  3AC8               	xorlw	200
 19268  1FD7  1D03               	skipz
 19269  1FD8  2FDB               	goto	u765_25
 19270  1FD9  3F41               	moviw [1]fsr1
 19271  1FDA  3A00               	xorlw	0
 19272  1FDB                     u765_25:	
 19273  1FDB  1D03               	skipz
 19274  1FDC  0008               	return
 19275                           
 19276                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19277  1FDD  01A6               	clrf	(_Timer1^(0+256)+1)
 19278  1FDE  01A7               	clrf	((_Timer1+1)^(0+256)+1)
 19279                           
 19280                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19281  1FDF  1425               	bsf	_Timer1^(0+256),0
 19282  1FE0  0008               	return
 19283  1FE1                     __end_of_TMR1_ISR:	
 19284                           
 19285                           	psect	text140
 19286  08EB                     __ptext140:	
 19287 ;; *************** function _DimmerLights_TMR_1 *****************
 19288 ;; Defined at:
 19289 ;;		line 1377 in file "../src/Dimmer_B1.c"
 19290 ;; Parameters:    Size  Location     Type
 19291 ;;		None
 19292 ;; Auto vars:     Size  Location     Type
 19293 ;;		None
 19294 ;; Return value:  Size  Location     Type
 19295 ;;		None               void
 19296 ;; Registers used:
 19297 ;;		wreg, status,2, status,0
 19298 ;; Tracked objects:
 19299 ;;		On entry : 0/0
 19300 ;;		On exit  : 0/0
 19301 ;;		Unchanged: 0/0
 19302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19305 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19306 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19307 ;;Total ram usage:        1 bytes
 19308 ;; Hardware stack levels used:    1
 19309 ;; This function calls:
 19310 ;;		Nothing
 19311 ;; This function is called by:
 19312 ;;		_TMR1_ISR
 19313 ;; This function uses a non-reentrant model
 19314 ;;
 19315                           
 19316                           
 19317                           ;psect for function _DimmerLights_TMR_1
 19318  08EB                     _DimmerLights_TMR_1:	
 19319                           
 19320                           ;Dimmer_B1.c: 1379: if (DimmerIntr1.Start == 1) {
 19321                           
 19322                           ;incstack = 0
 19323                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19324  08EB  0021               	movlb	1	; select bank1
 19325  08EC  1D47               	btfss	_DimmerIntr1^(0+128),2
 19326  08ED  290E               	goto	i1l841
 19327                           
 19328                           ;Dimmer_B1.c: 1380: DimmerIntr1.Count++;
 19329  08EE  3001               	movlw	1
 19330  08EF  00F0               	movwf	??_DimmerLights_TMR_1
 19331  08F0  0870               	movf	??_DimmerLights_TMR_1,w
 19332  08F1  07C9               	addwf	(_DimmerIntr1^(0+128)+2),f
 19333                           
 19334                           ;Dimmer_B1.c: 1399: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19335  08F2  0849               	movf	(_DimmerIntr1^(0+128)+2),w
 19336  08F3  064F               	xorwf	(_DimmerIntr1^(0+128)+8),w
 19337  08F4  1903               	btfsc	3,2
 19338                           
 19339                           ;Dimmer_B1.c: 1402: if (DimmerIntr1.ControlStatus == 1) {
 19340  08F5  1DC7               	btfss	_DimmerIntr1^(0+128),3
 19341  08F6  28F9               	goto	i1l7127
 19342                           
 19343                           ;Dimmer_B1.c: 1403: RB1 = 0;
 19344  08F7  0020               	movlb	0	; select bank0
 19345  08F8  108D               	bcf	13,1	;volatile
 19346  08F9                     i1l7127:	
 19347                           
 19348                           ;Dimmer_B1.c: 1405: }
 19349                           ;Dimmer_B1.c: 1406: }
 19350                           ;Dimmer_B1.c: 1412: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19351  08F9  0021               	movlb	1	; select bank1
 19352  08FA  0849               	movf	(_DimmerIntr1^(0+128)+2),w
 19353  08FB  0650               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19354  08FC  1903               	btfsc	3,2
 19355                           
 19356                           ;Dimmer_B1.c: 1415: if (DimmerIntr1.ControlStatus == 1) {
 19357  08FD  1DC7               	btfss	_DimmerIntr1^(0+128),3
 19358  08FE  2901               	goto	i1l7133
 19359                           
 19360                           ;Dimmer_B1.c: 1416: RB1 = 1;
 19361  08FF  0020               	movlb	0	; select bank0
 19362  0900  148D               	bsf	13,1	;volatile
 19363  0901                     i1l7133:	
 19364                           
 19365                           ;Dimmer_B1.c: 1419: }
 19366                           ;Dimmer_B1.c: 1420: }
 19367                           ;Dimmer_B1.c: 1438: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19368  0901  0021               	movlb	1	; select bank1
 19369  0902  0849               	movf	(_DimmerIntr1^(0+128)+2),w
 19370  0903  0651               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19371  0904  1D03               	skipz
 19372  0905  291F               	goto	i1l848
 19373                           
 19374                           ;Dimmer_B1.c: 1440: if (DimmerIntr1.ControlStatus == 1) {
 19375  0906  1DC7               	btfss	_DimmerIntr1^(0+128),3
 19376  0907  290A               	goto	i1l7139
 19377                           
 19378                           ;Dimmer_B1.c: 1441: RB1 = 0;
 19379  0908  0020               	movlb	0	; select bank0
 19380  0909  108D               	bcf	13,1	;volatile
 19381  090A                     i1l7139:	
 19382                           
 19383                           ;Dimmer_B1.c: 1443: }
 19384                           ;Dimmer_B1.c: 1444: DimmerIntr1.Count = 0;
 19385  090A  0021               	movlb	1	; select bank1
 19386  090B  01C9               	clrf	(_DimmerIntr1^(0+128)+2)
 19387                           
 19388                           ;Dimmer_B1.c: 1445: DimmerIntr1.Start = 0;
 19389  090C  1147               	bcf	_DimmerIntr1^(0+128),2
 19390                           
 19391                           ;Dimmer_B1.c: 1446: }
 19392                           ;Dimmer_B1.c: 1449: } else {
 19393  090D  291F               	goto	i1l848
 19394  090E                     i1l841:	
 19395                           
 19396                           ;Dimmer_B1.c: 1450: if (DimmerIntr1.GO == 1) {
 19397  090E  1C47               	btfss	_DimmerIntr1^(0+128),0
 19398  090F  291F               	goto	i1l848
 19399                           
 19400                           ;Dimmer_B1.c: 1451: DimmerIntr1.Count++;
 19401  0910  3001               	movlw	1
 19402  0911  00F0               	movwf	??_DimmerLights_TMR_1
 19403  0912  0870               	movf	??_DimmerLights_TMR_1,w
 19404  0913  07C9               	addwf	(_DimmerIntr1^(0+128)+2),f
 19405                           
 19406                           ;Dimmer_B1.c: 1452: if (DimmerIntr1.Count == 10) {
 19407  0914  0849               	movf	(_DimmerIntr1^(0+128)+2),w
 19408  0915  3A0A               	xorlw	10
 19409  0916  1D03               	skipz
 19410  0917  291F               	goto	i1l848
 19411                           
 19412                           ;Dimmer_B1.c: 1453: DimmerIntr1.Count = 0;
 19413  0918  01C9               	clrf	(_DimmerIntr1^(0+128)+2)
 19414                           
 19415                           ;Dimmer_B1.c: 1454: DimmerIntr1.Start = 1;
 19416  0919  1547               	bsf	_DimmerIntr1^(0+128),2
 19417                           
 19418                           ;Dimmer_B1.c: 1455: DimmerIntr1.GO = 0;
 19419  091A  1047               	bcf	_DimmerIntr1^(0+128),0
 19420                           
 19421                           ;Dimmer_B1.c: 1457: if (DimmerIntr1.ControlStatus == 1) {
 19422  091B  1DC7               	btfss	_DimmerIntr1^(0+128),3
 19423  091C  291F               	goto	i1l848
 19424                           
 19425                           ;Dimmer_B1.c: 1458: RB1 = 1;
 19426  091D  0020               	movlb	0	; select bank0
 19427  091E  148D               	bsf	13,1	;volatile
 19428  091F                     i1l848:	
 19429                           
 19430                           ;Dimmer_B1.c: 1459: }
 19431                           ;Dimmer_B1.c: 1460: }
 19432                           ;Dimmer_B1.c: 1461: }
 19433                           ;Dimmer_B1.c: 1462: }
 19434                           ;Dimmer_B1.c: 1464: if (DimmerIntr1.Tune == 1) {
 19435  091F  0021               	movlb	1	; select bank1
 19436  0920  1CC7               	btfss	_DimmerIntr1^(0+128),1
 19437  0921  0008               	return
 19438                           
 19439                           ;Dimmer_B1.c: 1465: DimmerIntr1.Tune = 0;
 19440  0922  10C7               	bcf	_DimmerIntr1^(0+128),1
 19441                           
 19442                           ;Dimmer_B1.c: 1466: DimmerIntr1.TuneTime++;
 19443  0923  3001               	movlw	1
 19444  0924  00F0               	movwf	??_DimmerLights_TMR_1
 19445  0925  0870               	movf	??_DimmerLights_TMR_1,w
 19446  0926  07CA               	addwf	(_DimmerIntr1^(0+128)+3),f
 19447                           
 19448                           ;Dimmer_B1.c: 1467: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19449  0927  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 19450  0928  024A               	subwf	(_DimmerIntr1^(0+128)+3),w
 19451  0929  1C03               	skipc
 19452  092A  0008               	return
 19453                           
 19454                           ;Dimmer_B1.c: 1468: DimmerIntr1.TuneTime = 0;
 19455  092B  01CA               	clrf	(_DimmerIntr1^(0+128)+3)
 19456                           
 19457                           ;Dimmer_B1.c: 1469: DimmerIntr1.TuneGO = 1;
 19458  092C  1748               	bsf	(_DimmerIntr1^(0+128)+1),6
 19459                           
 19460                           ;Dimmer_B1.c: 1470: if (DimmerIntr1.Dimming_Sw == 1) {
 19461  092D  1E47               	btfss	_DimmerIntr1^(0+128),4
 19462  092E  2945               	goto	i1l854
 19463                           
 19464                           ;Dimmer_B1.c: 1471: if (DimmerIntr1.Dimming_Status == 0) {
 19465  092F  1AC7               	btfsc	_DimmerIntr1^(0+128),5
 19466  0930  293C               	goto	i1l7175
 19467                           
 19468                           ;Dimmer_B1.c: 1472: if (DimmerIntr1.DimmingValue < ((char)(70*0.8))) {
 19469  0931  3038               	movlw	56
 19470  0932  024C               	subwf	(_DimmerIntr1^(0+128)+5),w
 19471  0933  1803               	skipnc
 19472  0934  293A               	goto	i1l856
 19473                           
 19474                           ;Dimmer_B1.c: 1473: DimmerIntr1.DimmingValue++;
 19475  0935  3001               	movlw	1
 19476  0936  00F0               	movwf	??_DimmerLights_TMR_1
 19477  0937  0870               	movf	??_DimmerLights_TMR_1,w
 19478  0938  07CC               	addwf	(_DimmerIntr1^(0+128)+5),f
 19479                           
 19480                           ;Dimmer_B1.c: 1474: } else {
 19481  0939  0008               	return
 19482  093A                     i1l856:	
 19483                           
 19484                           ;Dimmer_B1.c: 1475: DimmerIntr1.Dimming_Status = 1;
 19485  093A  16C7               	bsf	_DimmerIntr1^(0+128),5
 19486                           
 19487                           ;Dimmer_B1.c: 1476: }
 19488                           ;Dimmer_B1.c: 1477: } else {
 19489  093B  0008               	return
 19490  093C                     i1l7175:	
 19491                           
 19492                           ;Dimmer_B1.c: 1478: if (DimmerIntr1.DimmingValue > ((char)(10*0.8))) {
 19493  093C  3009               	movlw	9
 19494  093D  024C               	subwf	(_DimmerIntr1^(0+128)+5),w
 19495  093E  1C03               	skipc
 19496  093F  2943               	goto	i1l859
 19497                           
 19498                           ;Dimmer_B1.c: 1479: DimmerIntr1.DimmingValue--;
 19499  0940  3001               	movlw	1
 19500  0941  02CC               	subwf	(_DimmerIntr1^(0+128)+5),f
 19501                           
 19502                           ;Dimmer_B1.c: 1480: } else {
 19503  0942  0008               	return
 19504  0943                     i1l859:	
 19505                           
 19506                           ;Dimmer_B1.c: 1481: DimmerIntr1.Dimming_Status = 0;
 19507  0943  12C7               	bcf	_DimmerIntr1^(0+128),5
 19508                           
 19509                           ;Dimmer_B1.c: 1482: }
 19510                           ;Dimmer_B1.c: 1483: }
 19511                           ;Dimmer_B1.c: 1484: } else if (DimmerIntr1.Dimming_RF == 1) {
 19512  0944  0008               	return
 19513  0945                     i1l854:	
 19514  0945  1F47               	btfss	_DimmerIntr1^(0+128),6
 19515  0946  0008               	return
 19516                           
 19517                           ;Dimmer_B1.c: 1485: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19518  0947  084D               	movf	(_DimmerIntr1^(0+128)+6),w
 19519  0948  024C               	subwf	(_DimmerIntr1^(0+128)+5),w
 19520  0949  1803               	skipnc
 19521  094A  2950               	goto	i1l7183
 19522                           
 19523                           ;Dimmer_B1.c: 1486: DimmerIntr1.DimmingValue++;
 19524  094B  3001               	movlw	1
 19525  094C  00F0               	movwf	??_DimmerLights_TMR_1
 19526  094D  0870               	movf	??_DimmerLights_TMR_1,w
 19527  094E  07CC               	addwf	(_DimmerIntr1^(0+128)+5),f
 19528                           
 19529                           ;Dimmer_B1.c: 1487: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19530  094F  0008               	return
 19531  0950                     i1l7183:	
 19532  0950  084C               	movf	(_DimmerIntr1^(0+128)+5),w
 19533  0951  024D               	subwf	(_DimmerIntr1^(0+128)+6),w
 19534  0952  1803               	skipnc
 19535  0953  2957               	goto	i1l865
 19536                           
 19537                           ;Dimmer_B1.c: 1488: DimmerIntr1.DimmingValue--;
 19538  0954  3001               	movlw	1
 19539  0955  02CC               	subwf	(_DimmerIntr1^(0+128)+5),f
 19540                           
 19541                           ;Dimmer_B1.c: 1489: } else {
 19542  0956  0008               	return
 19543  0957                     i1l865:	
 19544                           
 19545                           ;Dimmer_B1.c: 1490: DimmerIntr1.Dimming_RF = 0;
 19546  0957  1347               	bcf	_DimmerIntr1^(0+128),6
 19547  0958  0008               	return
 19548  0959                     __end_of_DimmerLights_TMR_1:	
 19549                           
 19550                           	psect	text141
 19551  1BC3                     __ptext141:	
 19552 ;; *************** function _IOC_ISR *****************
 19553 ;; Defined at:
 19554 ;;		line 394 in file "../src/MCU_B1.c"
 19555 ;; Parameters:    Size  Location     Type
 19556 ;;		None
 19557 ;; Auto vars:     Size  Location     Type
 19558 ;;		None
 19559 ;; Return value:  Size  Location     Type
 19560 ;;		None               void
 19561 ;; Registers used:
 19562 ;;		wreg, status,2, status,0, pclath, cstack
 19563 ;; Tracked objects:
 19564 ;;		On entry : 0/0
 19565 ;;		On exit  : 0/0
 19566 ;;		Unchanged: 0/0
 19567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19572 ;;Total ram usage:        0 bytes
 19573 ;; Hardware stack levels used:    1
 19574 ;; Hardware stack levels required when called:    3
 19575 ;; This function calls:
 19576 ;;		_DimmerLights_IOC_1
 19577 ;; This function is called by:
 19578 ;;		_ISR
 19579 ;; This function uses a non-reentrant model
 19580 ;;
 19581                           
 19582                           
 19583                           ;psect for function _IOC_ISR
 19584  1BC3                     _IOC_ISR:	
 19585                           
 19586                           ;MCU_B1.c: 395: IOCBF2 = 0;
 19587                           
 19588                           ;incstack = 0
 19589                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19590  1BC3  0027               	movlb	7	; select bank7
 19591  1BC4  1116               	bcf	22,2	;volatile
 19592                           
 19593                           ;MCU_B1.c: 396: IOCIF = 0;
 19594  1BC5  100B               	bcf	11,0	;volatile
 19595                           
 19596                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 19597  1BC6  0021               	movlb	1	; select bank1
 19598  1BC7  1C2E               	btfss	_myMain^(0+128),0
 19599  1BC8  0008               	return
 19600                           
 19601                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 19602  1BC9  3191  217E         	fcall	_DimmerLights_IOC_1
 19603  1BCB  0008               	return
 19604  1BCC                     __end_of_IOC_ISR:	
 19605                           
 19606                           	psect	text142
 19607  117E                     __ptext142:	
 19608 ;; *************** function _DimmerLights_IOC_1 *****************
 19609 ;; Defined at:
 19610 ;;		line 1497 in file "../src/Dimmer_B1.c"
 19611 ;; Parameters:    Size  Location     Type
 19612 ;;		None
 19613 ;; Auto vars:     Size  Location     Type
 19614 ;;  dimming         1   12[COMMON] unsigned char 
 19615 ;; Return value:  Size  Location     Type
 19616 ;;		None               void
 19617 ;; Registers used:
 19618 ;;		wreg, status,2, status,0, pclath, cstack
 19619 ;; Tracked objects:
 19620 ;;		On entry : 0/0
 19621 ;;		On exit  : 0/0
 19622 ;;		Unchanged: 0/0
 19623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19626 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19627 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19628 ;;Total ram usage:        3 bytes
 19629 ;; Hardware stack levels used:    1
 19630 ;; Hardware stack levels required when called:    2
 19631 ;; This function calls:
 19632 ;;		_Division
 19633 ;; This function is called by:
 19634 ;;		_IOC_ISR
 19635 ;; This function uses a non-reentrant model
 19636 ;;
 19637                           
 19638                           
 19639                           ;psect for function _DimmerLights_IOC_1
 19640  117E                     _DimmerLights_IOC_1:	
 19641                           
 19642                           ;Dimmer_B1.c: 1511: if (DimmerIntr1.Start == 0) {
 19643                           
 19644                           ;incstack = 0
 19645                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 19646  117E  0021               	movlb	1	; select bank1
 19647  117F  1947               	btfsc	_DimmerIntr1^(0+128),2
 19648  1180  0008               	return
 19649                           
 19650                           ;Dimmer_B1.c: 1512: if (RB2 != DimmerIntr1.Status) {
 19651  1181  0E48               	swapf	(_DimmerIntr1^(0+128)+1),w
 19652  1182  0C89               	rrf	9,f
 19653  1183  3901               	andlw	1
 19654  1184  00FA               	movwf	??_DimmerLights_IOC_1
 19655  1185  3000               	movlw	0
 19656  1186  0020               	movlb	0	; select bank0
 19657  1187  190D               	btfsc	13,2	;volatile
 19658  1188  3001               	movlw	1
 19659  1189  067A               	xorwf	??_DimmerLights_IOC_1,w
 19660  118A  1903               	skipnz
 19661  118B  0008               	return
 19662                           
 19663                           ;Dimmer_B1.c: 1514: DimmerIntr1.Count = 0;
 19664  118C  0021               	movlb	1	; select bank1
 19665  118D  01C9               	clrf	(_DimmerIntr1^(0+128)+2)
 19666                           
 19667                           ;Dimmer_B1.c: 1515: DimmerIntr1.GO = 1;
 19668  118E  1447               	bsf	_DimmerIntr1^(0+128),0
 19669                           
 19670                           ;Dimmer_B1.c: 1517: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 19671  118F  1E47               	btfss	_DimmerIntr1^(0+128),4
 19672  1190  1B47               	btfsc	_DimmerIntr1^(0+128),6
 19673                           
 19674                           ;Dimmer_B1.c: 1518: DimmerIntr1.Tune = 1;
 19675  1191  14C7               	bsf	_DimmerIntr1^(0+128),1
 19676                           
 19677                           ;Dimmer_B1.c: 1519: }
 19678                           ;Dimmer_B1.c: 1524: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 19679  1192  3002               	movlw	2
 19680  1193  00FA               	movwf	??_DimmerLights_IOC_1
 19681  1194  087A               	movf	??_DimmerLights_IOC_1,w
 19682  1195  00F5               	movwf	Division@num
 19683  1196  084C               	movf	(_DimmerIntr1^(0+128)+5),w
 19684  1197  319C  2498         	fcall	_Division
 19685  1199  00FB               	movwf	??_DimmerLights_IOC_1+1
 19686  119A  087B               	movf	??_DimmerLights_IOC_1+1,w
 19687  119B  00FC               	movwf	DimmerLights_IOC_1@dimming
 19688                           
 19689                           ;Dimmer_B1.c: 1526: DimmerIntr1.TuneValue2 = dimming;
 19690  119C  087C               	movf	DimmerLights_IOC_1@dimming,w
 19691  119D  00FA               	movwf	??_DimmerLights_IOC_1
 19692  119E  087A               	movf	??_DimmerLights_IOC_1,w
 19693  119F  0021               	movlb	1	; select bank1
 19694  11A0  00CF               	movwf	(_DimmerIntr1^(0+128)+8)
 19695                           
 19696                           ;Dimmer_B1.c: 1527: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + ((80 - 10) - Dimme
      +                          rIntr1.DimmingValue);
 19697  11A1  034C               	decf	(_DimmerIntr1^(0+128)+5),w
 19698  11A2  3AFF               	xorlw	255
 19699  11A3  074F               	addwf	(_DimmerIntr1^(0+128)+8),w
 19700  11A4  3E46               	addlw	70
 19701  11A5  00FA               	movwf	??_DimmerLights_IOC_1
 19702  11A6  087A               	movf	??_DimmerLights_IOC_1,w
 19703  11A7  00D0               	movwf	(_DimmerIntr1^(0+128)+9)
 19704                           
 19705                           ;Dimmer_B1.c: 1528: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + dimming;
 19706  11A8  0850               	movf	(_DimmerIntr1^(0+128)+9),w
 19707  11A9  077C               	addwf	DimmerLights_IOC_1@dimming,w
 19708  11AA  00FA               	movwf	??_DimmerLights_IOC_1
 19709  11AB  087A               	movf	??_DimmerLights_IOC_1,w
 19710  11AC  00D1               	movwf	(_DimmerIntr1^(0+128)+10)
 19711                           
 19712                           ;Dimmer_B1.c: 1532: DimmerIntr1.Status = 0;
 19713  11AD  12C8               	bcf	(_DimmerIntr1^(0+128)+1),5
 19714  11AE  0008               	return
 19715  11AF                     __end_of_DimmerLights_IOC_1:	
 19716                           
 19717                           	psect	text143
 19718  1C98                     __ptext143:	
 19719 ;; *************** function _Division *****************
 19720 ;; Defined at:
 19721 ;;		line 1372 in file "../src/Dimmer_B1.c"
 19722 ;; Parameters:    Size  Location     Type
 19723 ;;  value           1    wreg     unsigned char 
 19724 ;;  num             1    5[COMMON] unsigned char 
 19725 ;; Auto vars:     Size  Location     Type
 19726 ;;  value           1    8[COMMON] unsigned char 
 19727 ;;  result          1    9[COMMON] unsigned char 
 19728 ;; Return value:  Size  Location     Type
 19729 ;;                  1    wreg      unsigned char 
 19730 ;; Registers used:
 19731 ;;		wreg, status,2, status,0, pclath, cstack
 19732 ;; Tracked objects:
 19733 ;;		On entry : 0/0
 19734 ;;		On exit  : 0/0
 19735 ;;		Unchanged: 0/0
 19736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19737 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19738 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19739 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19740 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19741 ;;Total ram usage:        5 bytes
 19742 ;; Hardware stack levels used:    1
 19743 ;; Hardware stack levels required when called:    1
 19744 ;; This function calls:
 19745 ;;		___lbdiv
 19746 ;; This function is called by:
 19747 ;;		_DimmerLights_IOC_1
 19748 ;; This function uses a non-reentrant model
 19749 ;;
 19750                           
 19751                           
 19752                           ;psect for function _Division
 19753  1C98                     _Division:	
 19754                           
 19755                           ;incstack = 0
 19756                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19757                           ;Division@value stored from wreg
 19758  1C98  00F8               	movwf	Division@value
 19759                           
 19760                           ;Dimmer_B1.c: 1373: char result = (char) (value / num);
 19761  1C99  0875               	movf	Division@num,w
 19762  1C9A  00F6               	movwf	??_Division
 19763  1C9B  0876               	movf	??_Division,w
 19764  1C9C  00F0               	movwf	___lbdiv@divisor
 19765  1C9D  0878               	movf	Division@value,w
 19766  1C9E  3190  204C         	fcall	___lbdiv
 19767  1CA0  00F7               	movwf	??_Division+1
 19768  1CA1  0877               	movf	??_Division+1,w
 19769  1CA2  00F9               	movwf	Division@result
 19770                           
 19771                           ;Dimmer_B1.c: 1374: return result;
 19772  1CA3  0879               	movf	Division@result,w
 19773  1CA4  0008               	return
 19774  1CA5                     __end_of_Division:	
 19775                           
 19776                           	psect	text144
 19777  104C                     __ptext144:	
 19778 ;; *************** function ___lbdiv *****************
 19779 ;; Defined at:
 19780 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19781 ;; Parameters:    Size  Location     Type
 19782 ;;  dividend        1    wreg     unsigned char 
 19783 ;;  divisor         1    0[COMMON] unsigned char 
 19784 ;; Auto vars:     Size  Location     Type
 19785 ;;  dividend        1    2[COMMON] unsigned char 
 19786 ;;  quotient        1    4[COMMON] unsigned char 
 19787 ;;  counter         1    3[COMMON] unsigned char 
 19788 ;; Return value:  Size  Location     Type
 19789 ;;                  1    wreg      unsigned char 
 19790 ;; Registers used:
 19791 ;;		wreg, status,2, status,0
 19792 ;; Tracked objects:
 19793 ;;		On entry : 0/0
 19794 ;;		On exit  : 0/0
 19795 ;;		Unchanged: 0/0
 19796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19797 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19798 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19799 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19800 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19801 ;;Total ram usage:        5 bytes
 19802 ;; Hardware stack levels used:    1
 19803 ;; This function calls:
 19804 ;;		Nothing
 19805 ;; This function is called by:
 19806 ;;		_Division
 19807 ;; This function uses a non-reentrant model
 19808 ;;
 19809                           
 19810                           
 19811                           ;psect for function ___lbdiv
 19812  104C                     ___lbdiv:	
 19813                           
 19814                           ;incstack = 0
 19815                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19816                           ;___lbdiv@dividend stored from wreg
 19817  104C  00F2               	movwf	___lbdiv@dividend
 19818  104D  01F4               	clrf	___lbdiv@quotient
 19819  104E  0870               	movf	___lbdiv@divisor,w
 19820  104F  1903               	btfsc	3,2
 19821  1050  286B               	goto	i1l6595
 19822  1051  01F3               	clrf	___lbdiv@counter
 19823  1052  0AF3               	incf	___lbdiv@counter,f
 19824  1053                     i1l6583:	
 19825  1053  1BF0               	btfsc	___lbdiv@divisor,7
 19826  1054  285C               	goto	i1l6585
 19827  1055  1003               	clrc
 19828  1056  0DF0               	rlf	___lbdiv@divisor,f
 19829  1057  3001               	movlw	1
 19830  1058  00F1               	movwf	??___lbdiv
 19831  1059  0871               	movf	??___lbdiv,w
 19832  105A  07F3               	addwf	___lbdiv@counter,f
 19833  105B  2853               	goto	i1l6583
 19834  105C                     i1l6585:	
 19835  105C  1003               	clrc
 19836  105D  0DF4               	rlf	___lbdiv@quotient,f
 19837  105E  0870               	movf	___lbdiv@divisor,w
 19838  105F  0272               	subwf	___lbdiv@dividend,w
 19839  1060  1C03               	skipc
 19840  1061  2866               	goto	L9
 19841  1062  0870               	movf	___lbdiv@divisor,w
 19842  1063  02F2               	subwf	___lbdiv@dividend,f
 19843  1064  1474               	bsf	___lbdiv@quotient,0
 19844  1065  1003               	clrc
 19845  1066                     L9:	
 19846  1066  0CF0               	rrf	___lbdiv@divisor,f
 19847  1067  3001               	movlw	1
 19848  1068  02F3               	subwf	___lbdiv@counter,f
 19849  1069  1D03               	btfss	3,2
 19850  106A  285C               	goto	i1l6585
 19851  106B                     i1l6595:	
 19852  106B  0874               	movf	___lbdiv@quotient,w
 19853  106C  0008               	return
 19854  106D                     __end_of___lbdiv:	
 19855  007E                     btemp	set	126	;btemp
 19856  007E                     pic14e$flags	set	126
 19857  007E                     wtemp	set	126
 19858  007E                     wtemp0	set	126
 19859  0080                     wtemp1	set	128
 19860  0082                     wtemp2	set	130
 19861  0084                     wtemp3	set	132
 19862  0086                     wtemp4	set	134
 19863  0088                     wtemp5	set	136
 19864  007F                     wtemp6	set	127
 19865  007E                     ttemp	set	126
 19866  007E                     ttemp0	set	126
 19867  0081                     ttemp1	set	129
 19868  0084                     ttemp2	set	132
 19869  0087                     ttemp3	set	135
 19870  007F                     ttemp4	set	127
 19871  007E                     ltemp	set	126
 19872  007E                     ltemp0	set	126
 19873  0082                     ltemp1	set	130
 19874  0086                     ltemp2	set	134
 19875  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         221
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      75
    BANK3            80      0      76
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  144826
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1434
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4494
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    4494
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3386
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3386
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   43107
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   43107
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   39390
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4192
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35014
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10014
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20428
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1990
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1640
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    2892
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48027
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   47819
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   27404
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3697
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20144
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     311
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   26941
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0   26941
                                             66 BANK0      1     1      0
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4458
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4458
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1501
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1434
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     452
                                             13 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     452
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  3     3      0     452
                                             10 COMMON     3     3      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     407
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4B       9       93.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     165      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     165      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Feb 09 11:36:36 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1ECD  
                          ___bmul@product 0022                 getMain_Lights_Count@count 0020  
                                      l86 1582                                        l96 07F1  
                                      l88 1596                                        l97 07ED  
                                      l98 07DB                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10B2                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 00D9  
                          setTemp_Main@AD 006C                       ___wmul@multiplicand 0022  
                    _getDimmerLights_Line 1BE8                    __end_of_setDelayOff_GO 0D37  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1795  
                    _setDimmerLights_Line 1CE4                              ___ftadd@sign 004B  
                                     l100 07EB                                       l303 1ED9  
                                     l304 1EDB                                       l235 08C2  
                    _setDimmerLights_SwOn 1216                                       l531 09C1  
                                     l347 10DC                                       l757 1F65  
                                     l688 1CB2                                       l784 0770  
                                     _GIE 005F                                       _CRC 00D2  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 0007                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00D6  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 012A                                       _Cmd 00D3  
            getDimmerLights_Status@lights 0022                                       _Sw1 01E3  
              ??_setDimmerIntr_Dimming_RF 0021                ??_setDimmerIntr_Dimming_Sw 0021  
         setDimmerIntr_Dimming_RF@command 0020                  __end_of_CC2500_WriteByte 1EE6  
                   _Buzzer_Initialization 1B4D                           __end_of_ADC_Set 1BAC  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0023       __end_of_setDimmerIntr_ControlStatus 1E9C  
             _setDimmerIntr_ControlStatus 1E84                         ??_getSw_KeyStatus 0020  
                                    ?_ISR 0070                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1BCC                     _setDimmerLights_OnOff 06EB  
        setDimmerLights_DimmingRun@lights 0024                                Load_Main@i 0030  
                            ___ftdiv@sign 003D                                      l1242 145D  
                                    l2114 0548                                      l2118 0497  
                                    l2119 04E8                                      l1256 1177  
                                    l2144 1CB9                                      l1266 0C1C  
                                    l1507 1ECC                                      l1443 13A0  
                                    l1620 01F7                                      l1630 01D3  
                                    l1622 0083                                      l2174 1212  
                                    l1471 11DC                                      l1631 01D1  
                                    l1623 007F                                      l2159 0AAA  
                                    l1624 007A                                      l1466 11C5  
                                    l1467 11E0                                      l2187 0A39  
                         __end_of_IOC_Set 1C09                                      l2472 1E4A  
                                    l1498 0620                                      l6011 0CA2  
                                    l6003 0C88                                      l2492 0379  
                                    l6005 0C91                                      l2494 0245  
                                    l1782 0E8D                                      l6007 0C94  
                                    l6105 0D19                                      l7001 128A  
                                    l1793 0E85                                      l2843 164F  
                                    l7003 1296                                      l6203 1F23  
                                    l2676 1FAD                                      l1788 0E00  
                                    l6061 1242                                      l2837 1638  
                                    l6109 0D2D                                      l7101 1BF0  
                                    l7013 12B1                                      l6205 1F26  
                                    l6073 12E6                                      l6145 177F  
                                    l7009 12A8                                      l6209 1F2C  
                                    l6241 10ED                                      l6313 0B3A  
                          _Load_Main$3939 002A                                      l2866 0420  
                                    l6059 123D                                      l6243 10F8  
                                    l6251 109B                                      l6227 1F97  
                                    l6331 10BC                                      l6323 0B8A  
                                    l6501 1300                                      l6229 1F9D  
                                    l6333 10BF                                      l6309 0B35  
                                    l5703 14BD                                      l7047 134E  
                                    l6271 1EB7                                      l6095 0CE9  
                                    l7063 1DDB                                      l6255 10A1  
                                    l5721 14E3                                      l5713 14C5  
                                    l7049 135D                                      l6521 1D4E  
                                    l7305 1D11                                      l6249 1098  
                                    l6361 148B                                      l6337 10C5  
                                    l5715 14D1                                      l5811 03B0  
                                    l6275 1EC6                                      l6515 131F  
                                    l6507 1309                                      l7091 17F3  
                                    l7331 0C15                                      l7323 0BBA  
                                    l8019 01E6                                      l6371 149B  
                                    l6611 0891                                      l8211 15CE  
                   _setDimmerLights_SwOff 12B8                                      l5725 14EC  
                                    l6525 1D55                                      l7077 17BD  
                                    l7317 0BA5                                      l6365 1491  
                                    l5671 1624                                      l5663 160E  
                                    l5807 03A9                                      l6471 11C0  
                                    l6527 1D5A                                      l7079 17C4  
                                    l8071 05B9                                      l8055 057A  
                                    l6375 14A1                                      l6359 1488  
                                    l6615 0897                                      l7415 0E5D  
                                    l8215 15D9                                      l5729 14F4  
                                    l5841 03FF                                      l5817 03BF  
                                    l5905 0DBE                                      l6481 11D7  
                                    l6473 11C9                                      l7089 17EC  
                                    l8049 056A                                      l6369 1498  
                                    l6641 08D5                                      l6633 08C8  
                                    l6609 088E                                      l6297 13D5  
                                    l6561 09E5                                      l6553 09C9  
                                    l7505 0541                                      l7521 1E4F  
                                    l7425 0E72                                      l7281 101A  
                                    l5667 1615                                      l5835 03EC  
                                    l8091 0605                                      l8067 05B1  
                                    l8059 0589                                      l6643 08D8  
                                    l6635 08CB                                      l6563 0A00  
                                    l6571 0A2A                                      l7427 0E74  
                                    l5677 163D                                      l5669 161F  
                                    l5853 0432                                      l5837 03F6  
                                    l5829 03D9                                      l5941 0F01  
                                    l5925 0EBE                                      l5773 1D5F  
                                    l8085 05F3                                      l8069 058C  
                                    l6629 08A9                                      l6565 0A22  
                                    l7525 1E55                                      l7285 101F  
                                    l5679 1645                                      l5847 0412  
                                    l5839 03FB                                      l5919 0EA8  
                                    l6727 1E67                                      l6751 0749  
                                    l8087 05CE                                      l6671 082F  
                                    l6647 08DE                                      l6639 08D1  
                                    l6911 1D33                                      l6567 0A26  
                                    l6559 09DE                                      l7463 04E3  
                                    l7383 0E12                                      l7279 1017  
                                    l5697 14B2                                      l5857 0444  
                                    l5849 041C                                      l5953 0F1D  
                                    l5937 0EF9                                      l5777 1D65  
                                    l8089 05FB                                      l8097 0616  
                                    l6665 0826                                      l7377 0E03  
                                    l7385 0E15                                      l5795 1078  
                                    l5867 045F                                      l5883 0D64  
                                    l6771 077F                                      l7715 06A3  
                                    l7619 1FA7                                      l6667 0829  
                                    l6931 0A50                                      l7491 0529  
                                    l7555 0278                                      l7539 022F  
                                    l7803 0AEA                                      l5877 0D4E  
                                    l5949 0F15                                      l6749 0732  
                                    l6757 0750                                      l7741 143C  
                                    l7477 04F7                                      l7565 02AD  
                                    l7639 07C5                                      l6791 1514  
                                    l6687 0841                                      l6943 0A68  
                                    l7823 0B19                                      l7807 0AF2  
                                    l5897 0DA5                                      l5977 0C3D  
                                    l6785 07AB                                      l7921 00A6  
                                    l7905 0082                                      l6689 085A  
                                    l5995 0C6D                                      l7675 1F67  
                                    l6867 115F                                      l6947 0A71  
                                    l7579 02ED                                      l5997 0C7B  
                                    l7589 0321                     _myMain_Initialization 0800  
                                    l7927 00D8                                      l6959 0A86  
                                    l7839 1412                                      l7855 1380  
                                    l7953 015B                                      l6985 1D44  
                                    l7963 0187                                      l7795 0ACB  
                                    l7973 01A3                                      l7983 01B9  
                                    l7959 016A                                      l7967 0193  
                                    l7887 0061                                      _CFGS 0CAE  
                            __CFG_WDTE$ON 0000                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5025 0C44  
                                    u4315 1633                                      u5115 1E13  
                                    u4415 14C8                                      u4335 1640  
                                    u5055 0C6E                                      u4435 14D2  
                                    _PEIE 005E                                      u4445 14DC  
                                    u4365 1656                                      u5085 0C89  
                                    u5245 0CF5                                      u6125 1E3D  
                                    u4455 14E4                                      u4295 161A  
                                    u5280 173A                                      u4725 0400  
                                    u5285 1738                                      u7125 0E46  
                                    u4665 03DA                                      u4825 0D76  
                                    u4905 0ECA                                      u8105 00D6  
                                    u5385 10E2                                      u7145 0E64  
                                    u4755 0413                                      u4835 0D86  
                                    u4915 0EDA                                      u6435 128D  
                                    u8115 011A                                      u7235 04BB  
                                    u4845 0DA6                                      u4695 03ED  
                                    u4855 0DB5                                      u4935 0F02  
                                    u6455 1297                                      u4865 0DBF  
                                    u4945 0F08                                      u6465 12A1  
                                    u7265 0518                                      u8330 05B7  
                                    u6475 12A9                                      u7515 1FAE  
                                    u7525 1FB3                                      u4975 0F1E  
                                    u8335 0595                                      u8095 00A4  
                                    u8360 05F9                                      u4985 0F24  
                                    u7555 07BB                                      u8195 019A  
                                    u8365 05D7                                      u7815 0ADA  
                                    u7755 1454                                      u7915 1406  
                                    u7865 0B09                                      u7955 1398  
                                    _LWLO 0CAD                                      _RSSI 012E  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1F4F                _setDimmerLights_DimmingRun 1F34  
                                    _Buz1 00BB                                      _Load 0132  
                                    _Temp 00DC                                      _main 15AA  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 09C8  
                         __end_of_RF_Main 1B59                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1C8C  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0B9E  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2249 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007D                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1E6E  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1E58                    _getDimmerLights_Status 1CD3  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 1B6F  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 012C  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00EA                           __end_of___awdiv 14FB  
                         __end_of___lbdiv 106D                           __end_of___ftadd 0477  
                         __end_of___ftdiv 0DE0                           __end_of___ftneg 1BD5  
                         __end_of___ftmul 0F45                           ___awdiv@divisor 0020  
                                   _T1CON 0018                           __end_of___fttol 0CAB  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 12B8  
                                   i1l841 090E                                     i1l854 0945  
                                   i1l856 093A                                     i1l848 091F  
                                   i1l865 0957                                     i1l859 0943  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1E43                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 1730   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 16CB                                     _Light 012D  
                        __end_of_TMR1_ISR 1FE1                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1C80  
                                   _getAD 100C                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1DA4  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1BFE  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1D80  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                     _getAll_Sw_KeyStatus 1D06                        _setRF_DimmerLights 1730  
                         ___lbdiv@divisor 0070               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0073  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0066  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0020  
             ??_setDimmerLights_DimmingOn 0022                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                          __end_of_Division 1CA5  
                 __size_of_getDelayOff_GO 0011                              __end_of_main 1605  
                     ?_setRF_DimmerLights 0065                          __end_of_Fosc_Set 1B73  
          getMain_All_LightsStatus@status 0020                        ??_setMemory_Modify 0020  
            setDimmerLights_OnOff@command 006D                            _Exception_Main 054C  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                    _setSw_Initialization 1CC3                                    ??_main 0070  
                           ___fttol@sign1 0056                      ?_getAll_Sw_KeyStatus 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0062  
            ??_DimmerLights_SelectPointer 0020                   _setControl_Lights_Table 09C8  
                          _setMemory_Data 1C5C                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 0770  
      setDimmerIntr_ControlStatus@command 0020                   _setDimmerLights_Dimming 14FB  
                               ??_IOC_ISR 007D                                 ??_IOC_Set 0020  
                             _DimmerIntr1 00C7                  _getMain_All_LightsStatus 1BDE  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1E04  
                 ??_Switch_Initialization 0025                    ?_setDimmerLights_OnOff 006D  
                    ??_setRF_DimmerLights 0066                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0959                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 07F8                                 ??_WDT_Set 0020  
                        __end_of___awtoft 108F                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 1666                  _getMain_All_Error_Status 11AF  
                                  _IOCBF2 1CB2                                    i1l1202 0013  
                                  i1l1205 001B                                    i1l7133 0901  
                                  i1l7127 08F9                                    i1l7139 090A  
                                  i1l7183 0950                                    i1l7175 093C  
                                  i1l6583 1053                                    i1l6585 105C  
                                  i1l6595 106B                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    u765_25 1FDB  
                                  _IO_Set 1F00                                    _WDTCON 0097  
                    Exception_Main@i_3580 0032                        DelayTime_1us@count 0020  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1E2E                                    _Dimmer 0120  
                                  _DlySw1 0162             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1D5C                __end_of_Mcu_Initialization 1D92  
                     __end_of_Buzzer_Main 07F8                                    _Memory 01BE  
                                  _Timer1 0125                                    ___bmul 1D5C  
                  __end_of_Exception_Main 0621                      Exception_Main@lights 0035  
                                  ___wmul 1FA4                                 ??___awdiv 0024  
                               ??___lbdiv 0071                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 0131                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1DDD  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1DCA                                    _s_data 00DB  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 12F1  
                                  _myMain 00AE                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1C68                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 1551  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 1B53          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1EB4          __end_of_setDimmerIntr_Dimming_Sw 1E84  
                   ___ftmul@f3_as_product 0039                 _setDimmerLights_DimmingOn 10FD  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1DF0               getMain_Lights_Count@status1 0021  
             __size_of_DimmerLights_IOC_1 0031                     __end_of_SwPointSelect 100C  
             __size_of_DimmerLights_TMR_1 006E              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 006B                          ___lbdiv@dividend 0072  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1E43               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 0047           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0022                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5333 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 102C  
                           __end_of_getAD 102C                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 1B67  
                         _getSw_KeyStatus 1D39                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0074                      _getMain_Lights_Count 1BF3  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01FD  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1C38                __end_of_set_TimeoutCleared 1B8C  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1C2C                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1B59                        ??_CC2500_WriteByte 0020  
                               ?_Division 0075                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 07AE  
                       ??_setRFSW_Control 006D               ?_setDimmerLights_DimmingRun 0022  
                       __end_of_Temp_Main 1B5F                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B5F  
                           ??_Switch_Main 0032                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 00D5                         LedPointSelect@led 0021  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0020                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 15AA  
                          _getDelayOff_GO 1CF5                       _CC2500_WriteCommand 1F1A  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
                        ??_setDelayOff_GO 0067         __end_of_DimmerIntr_Initialization 1366  
           ??_DimmerLights_Initialization 0063                                   ?___wmul 0020  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0AAC                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1BB3                        __size_of_setTxData 00BB  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1BA5  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 13E2  
      __end_of_DimmerLights_SelectPointer 1C2C                _DimmerLights_SelectPointer 1C20  
                              ??_WDT_Main 0020              __end_of_setRF_Initialization 1C14  
                      _setRFSW_AdjControl 0B1E                    __end_of_setProductData 1C38  
           setDimmerLights_Dimming@lights 006D                                   _IOC_ISR 1BC3  
                                 _IOC_Set 1BFE                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006A     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 1422  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1EE6  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006D  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1B56                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0076  
                                 _WDT_Set 1C80           __end_of_setControl_Lights_Table 0A3A  
                         setRF_Main@error 00E9                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 1551                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 1C98  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1D28                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1D06  
          __end_of_getDimmerLights_Status 1CE4                         __end_of_getRxData 0AAC  
                 __end_of_getSw_KeyStatus 1D4A                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 14A7  
                                 ___lbdiv 104C                                   ___ftadd 0381  
                                 ___ftdiv 0D37                                   ___ftneg 1BCC  
                         __size_of___wmul 001E                                   ___ftmul 0E91  
                                 ___fttol 0C24                       __end_of_Switch_Main 1BB3  
                                 ___lwdiv 1281                ??_getMain_All_LightsStatus 0020  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1D28  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0039                      setRFSW_AdjControl@sw 0068  
                         __size_of_setBuz 0059                                   __ptext1 1366  
                                 __ptext2 0800                                   __ptext3 13E2  
                                 __ptext4 0AAC                                   __ptext5 100C  
                                 __ptext6 1D92                                   __ptext7 0002  
                                 __ptext8 1B5C                                   __ptext9 0DE0  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0020                   ??_setDimmerLights_OnOff 006E  
                         ?_setProductData 0062                 __end_of_Flash_Memory_Main 1463  
               __end_of_Flash_Memory_Read 1F00                   ??_setDimmerLights_SwOff 0022  
                              _setRF_Main 0477                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 1B63                         _DimmerLights_Main 1F4F  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1B92  
              __end_of_CC2500_ClearRXFIFO 1B7B                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 1B7F                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00EF  
                          _LedPointSelect 1C50                 getAll_Sw_KeyStatus@status 0021  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 1C14  
                                 clrloop0 1B99            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 1B87                      end_of_initialization 0047  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1125  
                           _DelayTime_1us 10D7                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 117E        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1B92                __end_of_setRF_TransceiveGO 1DCA  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 1B93  
                              _setSw_Main 01FD                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 10B2  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1D6E  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0813                             _CC2500_TxData 087E  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 0B9E  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1800  
                           _setCmd_Status 1EB4                       _Flash_Memory_Unlock 1BD5  
                     ??_CC2500_ReadStatus 0022                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                   setTemp_Main@DangerValue 0069  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1F6B  
                      _Mcu_Initialization 1D80                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1B77                      __end_of_my_MainTimer 13A2  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1C5C                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0021                 __end_of_CC2500_InitSetREG 114F  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0065                            ?_DelayTime_1us 0020  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000C  
               __end_of_CC2500_ReadStatus 10D7                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0022           getMain_All_Error_Status@command 0025  
                             ___ftdiv@exp 003C         __end_of_setDimmerLights_DimmingOn 1125  
                        ??_Exception_Main 002D                            __end_of_IO_Set 1F1A  
                    _setRF_Initialization 1C09                        _setMemory_LoopSave 1DDD  
                             _Switch_Main 1BAC                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1D39  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1E19               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 1D17  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                 DimmerLights_IOC_1@dimming 007C  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1D6E  
     __size_of_getDimmerIntr_DimmingValue 000F                      setRF_DimmerLights@on 0065  
                          __end_of___wmul 1FC2                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001F  
           __size_of_getDimmerLights_Line 000B          DimmerLights_SelectPointer@lights 0021  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006B  
                          __end_of_setLED 132A                             __pbitbssBANK1 0770  
           __size_of_setDimmerLights_Line 0011             __size_of_setDimmerLights_SwOn 0035  
                          __end_of_setBuz 15AA                __end_of_DimmerLights_IOC_1 11AF  
                    _CC2500_FrequencyCabr 1C8C                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 13A2  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 0959  
                     start_initialization 0022                           ?_LedPointSelect 0070  
                               _Load_Main 004B                               __end_of_ISR 0020  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1BBB  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 2000  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 16CB  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 1666  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1B87         __end_of_setDimmerIntr_MaxmumValue 1C44  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0167                         __size_of_Division 000D  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0040  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1B5C                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D7  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0034                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1BE8                                 _Tx_Length 00DA  
                             __pdataBANK4 0220                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 11E2  
                        _CC2500_SIDLEMode 1B7F                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E                                 ___latbits 0003  
                        _setMemory_Modify 1DA4                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E6  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 132A                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 015A  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1F87                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EF  
                          getRxData@error 00E7               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1B73                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0030                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1D4A  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002C  
                  _setTemp_Initialization 1B4C                                 _getBuz_GO 1D17  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 06EB  
             _Flash_Memory_Initialization 0621                                  ?___awdiv 0020  
                               __ptext100 14FB                                 __ptext101 0F45  
                                ?___lbdiv 0070                                 __ptext110 11AF  
                               __ptext102 1DB7                                 __ptext111 1B9E  
                               __ptext103 1730                                 __ptext120 0D37  
                               __ptext112 1B4B                                 __ptext104 1CE4  
                               __ptext121 0381                                 __ptext113 132A  
                               __ptext105 1C38                                 __ptext130 12B8  
                               __ptext122 106D                                 __ptext114 1DA4  
                               __ptext106 1E6E                                 __ptext131 1CD3  
                               __ptext123 1605                                 __ptext115 16CB  
                               __ptext107 1CA5                                 __ptext140 08EB  
                               __ptext132 1C20                                 __ptext124 1B63  
                               __ptext116 1666                                 __ptext108 1E58  
                               __ptext141 1BC3                                 __ptext133 1B5F  
                               __ptext125 0959                                 __ptext117 0C24  
                               __ptext109 1BB3                                  ?___ftadd 0041  
                               __ptext142 117E                                 __ptext134 1B8C  
                               __ptext126 1C2C                                 __ptext118 1BCC  
                               __ptext143 1C98                                 __ptext135 1C14  
                               __ptext127 1216                                 __ptext119 0E91  
                               __ptext144 104C                                 __ptext136 07AE  
                               __ptext128 1551                                 __ptext137 1B4D  
                               __ptext129 14A7                                 __ptext139 1FC2  
                               _getRxData 0A3A                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 13E2  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1B50  
                           ??_setLog_Code 0065                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1E58                       __size_of_setSw_Main 0184  
            CC2500_ReadStatus@status_addr 0023        __end_of_getDimmerIntr_DimmingValue 1CB4  
            ??_setDimmerIntr_DimmingValue 0063                _getDimmerIntr_DimmingValue 1CA5  
                  CC2500_WriteByte@loop_a 0021            __size_of_setDimmerLights_OnOff 00C3  
                               _r_address 0130             __end_of_setDimmerLights_OnOff 07AE  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 12F1              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 0813                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0025                             _SwPointSelect 1000  
                     __end_of_setLED_Main 1281                          ??_getDelayOff_GO 0022  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1B5C  
                       _CC2500_rfSettings 182F                            ___wmul@product 0024  
                                _LED_Main 1B6B                           SwPointSelect@sw 0021  
                               clear_ram0 1B98                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 1366  
                               _setTxData 0F45                    _Flash_Memory_Main$3112 0028  
     __end_of_DimmerLights_Initialization 1BA5               _DimmerLights_Initialization 1B9E  
                      _CC2500_ClearRXFIFO 1B77                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1B7B                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1E04  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 114F                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1FC2  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1C74  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1DB7                                  _RF_Count 0128  
                    __end_of_RF_RxDisable 1CC3                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1F34                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1D92                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B1                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00D4  
                            setSw_Main@sw 0031                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1C74  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1216  
                   _DlyOff_Initialization 1B8C         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 1C98  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1E9C               setDimmerLights_OnOff@lights 00E6  
                _setDimmerIntr_Dimming_Sw 1E6E                                  _Fosc_Set 1B6F  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006E  
                      __end_of_getLoad_AD 0B1E                        __end_of_getLoad_OK 1BBB  
                   _Switch_Initialization 1B83         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 1422  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1ECD                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 000C                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 012F                               ??_Temp_Main 006E  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$3568 0021  
           _getMain_All_Error_Status$3569 0023                  __end_of_getDimmer_LoadGO 1BC3  
                     _Load_Initialization 1B50          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
                            _setTemp_Main 0DE0                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0021                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 106D  
                        ??_LedPointSelect 0020                                  ___ftpack 1605  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00E8  
                    CC2500_WriteREG@value 0022                               _setLED_Main 124B  
              __end_of_setRF_DimmerLights 1795            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 0800  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0027  
                                __ptext10 1B59                                  __ptext11 1B4C  
                                __ptext20 1E2E                                  __ptext12 1BAC  
                                __ptext21 1B83                                  __ptext13 01FD  
                                __ptext30 0B1E                                  __ptext22 1CC3  
                                __ptext14 1DF0                                  __ptext31 1F34  
                                __ptext23 1B56                                  __ptext15 10FD  
                                __ptext40 1B7F                                  __ptext32 1D28  
                                __ptext24 0477                                  __ptext16 1D39  
                                __ptext41 1463                                  __ptext33 1D17  
                                __ptext25 0A3A                                  __ptext17 1000  
                                __ptext50 1B73                                  __ptext42 1125  
                                __ptext34 1CB4                                  __ptext26 11E2  
                                __ptext18 1E43                                  __ptext51 1E04  
                                __ptext43 1FE1                                  __ptext35 087E  
                                __ptext27 1DDD                                  __ptext19 1B87  
                                __ptext60 1B6F                                  __ptext52 1ECD  
                                __ptext44 108F                                  __ptext36 0813  
                                __ptext28 09C8                                  __ptext61 1BA5  
                                __ptext53 1B53                                  __ptext45 1C8C  
                                __ptext37 10B2                                  __ptext29 13A2  
                                __ptext70 1F6B                                  __ptext62 004B  
                                __ptext54 1C09                                  __ptext46 10D7  
                                __ptext38 1F87                                  __ptext71 1B6B  
                                __ptext63 1BF3                                  __ptext55 1D80  
                                __ptext47 1B7B                                  __ptext39 1E19  
                                __ptext80 1C5C                                  __ptext72 124B  
                                __ptext64 07F8                                  __ptext56 1C80  
                                __ptext48 1B77                                  __ptext81 114F  
                                __ptext73 1B67                                  __ptext65 1BBB  
                                __ptext57 1C74                                  __ptext49 1F1A  
                                __ptext90 1C50                                  __ptext82 1BD5  
                                __ptext74 1D6E                                  __ptext66 1DCA  
                                __ptext58 1F00                                  __ptext91 1E9C  
                                __ptext83 1EE6                                  __ptext75 1422  
                                __ptext67 1FA4                                  __ptext59 1BFE  
                                __ptext92 1C44                                  __ptext84 054C  
                                __ptext76 1D06                                  __ptext68 1281  
                                __ptext93 1E84                                  __ptext85 1BE8  
                                __ptext77 0B9E                                  __ptext69 1B50  
                                __ptext94 0CAB                                  __ptext86 1F4F  
                                __ptext78 1C68                                  __ptext95 1D5C  
                                __ptext87 1795                                  __ptext79 0621  
                                __ptext96 1EB4                                  __ptext88 06EB  
                                __ptext97 1BDE                                  __ptext89 12F1  
                                __ptext98 1CF5                                  __ptext99 1D4A  
                                __product 0220                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1BF3  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1CF5  
                      _DimmerLights_IOC_1 117E              __end_of_setDimmerLights_SwOn 124B  
                            ??_setSw_Main 002F                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1DF0  
      __size_of_DimmerIntr_Initialization 003C                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 08EB                  __end_of_CC2500_SIDLEMode 1B83  
              setDimmerLights_Main@lights 00E7               __end_of_DelayOffPointSelect 1C20  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1F87  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1FE1  
                __end_of_setMemory_Modify 1DB7                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 054C                               ??_getBuz_GO 0022  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00E6  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1E19  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6371 0022  
                                main@argc 00EA                                  main@argv 00EC  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6368 0022  
     getDimmerLights_ValueToPercent@value 005E                           _CC2500_PowerRST 1463  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 006C  
      __end_of_setDimmerIntr_DimmingValue 1C50                _setDimmerIntr_DimmingValue 1C44  
             __end_of_Flash_Memory_Modify 0C24              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 11E2               __end_of_Flash_Memory_Unlock 1BDE  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 108F  
                      __end_of_setSw_Main 0381                     ??_Load_Initialization 0022  
                    ??_DimmerLights_IOC_1 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 0771  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0079                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0067  
  __end_of_setDimmerLights_Initialization 1B4C   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1B4B                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1B53  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1C68  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D8  
                 __size_of_Exception_Main 00D5                             Division@value 0078  
         __end_of_DelayOff_Initialization 1B63                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B67                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0CAB  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0072  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 10FD                   __end_of_CC2500_ReadByte 1FA4  
            __end_of_setSw_Initialization 1CD3                           _Timeout_Counter 1E2E  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 005F  
                            _RF_RxDisable 1CB4          Flash_Memory_Initialization@value 0025  
              __end_of_LED_Initialization 1B6B            __end_of_setTemp_Initialization 1B4D  
                             Division@num 0075                   setMemory_Modify@command 0021  
               __end_of_RF_Initialization 1B56                     __end_of_CC2500_RxData 087E  
                   __end_of_CC2500_TxData 08EB                     _setLoad_AH_AL_Restore 1F6B  
                 __end_of_CC2500_PowerRST 14A7  
