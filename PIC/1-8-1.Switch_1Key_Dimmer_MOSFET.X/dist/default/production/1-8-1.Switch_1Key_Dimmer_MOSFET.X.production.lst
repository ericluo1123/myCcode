

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Mar 12 16:58:48 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	intentry,global,class=CODE,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,delta=2
   169                           	dabs	1,0x7E,2
   170  0000                     	;# 
   171  0001                     	;# 
   172  0002                     	;# 
   173  0003                     	;# 
   174  0004                     	;# 
   175  0005                     	;# 
   176  0006                     	;# 
   177  0007                     	;# 
   178  0008                     	;# 
   179  0009                     	;# 
   180  000A                     	;# 
   181  000B                     	;# 
   182  000C                     	;# 
   183  000D                     	;# 
   184  000E                     	;# 
   185  0010                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  008C                     	;# 
   198  008D                     	;# 
   199  008E                     	;# 
   200  0090                     	;# 
   201  0091                     	;# 
   202  0092                     	;# 
   203  0095                     	;# 
   204  0096                     	;# 
   205  0097                     	;# 
   206  0099                     	;# 
   207  009A                     	;# 
   208  009B                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  0116                     	;# 
   217  0117                     	;# 
   218  011D                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  018E                     	;# 
   222  0191                     	;# 
   223  0191                     	;# 
   224  0192                     	;# 
   225  0193                     	;# 
   226  0193                     	;# 
   227  0194                     	;# 
   228  0195                     	;# 
   229  0196                     	;# 
   230  0197                     	;# 
   231  0199                     	;# 
   232  019A                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019C                     	;# 
   238  019C                     	;# 
   239  019D                     	;# 
   240  019E                     	;# 
   241  019F                     	;# 
   242  020D                     	;# 
   243  0210                     	;# 
   244  0211                     	;# 
   245  0211                     	;# 
   246  0212                     	;# 
   247  0212                     	;# 
   248  0213                     	;# 
   249  0213                     	;# 
   250  0214                     	;# 
   251  0214                     	;# 
   252  0215                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0216                     	;# 
   256  0216                     	;# 
   257  0217                     	;# 
   258  0217                     	;# 
   259  0291                     	;# 
   260  0291                     	;# 
   261  0292                     	;# 
   262  0293                     	;# 
   263  0298                     	;# 
   264  0298                     	;# 
   265  0299                     	;# 
   266  029A                     	;# 
   267  0394                     	;# 
   268  0395                     	;# 
   269  0396                     	;# 
   270  0FE4                     	;# 
   271  0FE5                     	;# 
   272  0FE6                     	;# 
   273  0FE7                     	;# 
   274  0FE8                     	;# 
   275  0FE9                     	;# 
   276  0FEA                     	;# 
   277  0FEB                     	;# 
   278  0FED                     	;# 
   279  0FEE                     	;# 
   280  0FEF                     	;# 
   281  0000                     	;# 
   282  0001                     	;# 
   283  0002                     	;# 
   284  0003                     	;# 
   285  0004                     	;# 
   286  0005                     	;# 
   287  0006                     	;# 
   288  0007                     	;# 
   289  0008                     	;# 
   290  0009                     	;# 
   291  000A                     	;# 
   292  000B                     	;# 
   293  000C                     	;# 
   294  000D                     	;# 
   295  000E                     	;# 
   296  0010                     	;# 
   297  0011                     	;# 
   298  0012                     	;# 
   299  0015                     	;# 
   300  0016                     	;# 
   301  0016                     	;# 
   302  0017                     	;# 
   303  0018                     	;# 
   304  0019                     	;# 
   305  001A                     	;# 
   306  001B                     	;# 
   307  001C                     	;# 
   308  008C                     	;# 
   309  008D                     	;# 
   310  008E                     	;# 
   311  0090                     	;# 
   312  0091                     	;# 
   313  0092                     	;# 
   314  0095                     	;# 
   315  0096                     	;# 
   316  0097                     	;# 
   317  0099                     	;# 
   318  009A                     	;# 
   319  009B                     	;# 
   320  009B                     	;# 
   321  009C                     	;# 
   322  009D                     	;# 
   323  009E                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  0116                     	;# 
   328  0117                     	;# 
   329  011D                     	;# 
   330  018C                     	;# 
   331  018D                     	;# 
   332  018E                     	;# 
   333  0191                     	;# 
   334  0191                     	;# 
   335  0192                     	;# 
   336  0193                     	;# 
   337  0193                     	;# 
   338  0194                     	;# 
   339  0195                     	;# 
   340  0196                     	;# 
   341  0197                     	;# 
   342  0199                     	;# 
   343  019A                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019B                     	;# 
   347  019B                     	;# 
   348  019C                     	;# 
   349  019C                     	;# 
   350  019D                     	;# 
   351  019E                     	;# 
   352  019F                     	;# 
   353  020D                     	;# 
   354  0210                     	;# 
   355  0211                     	;# 
   356  0211                     	;# 
   357  0212                     	;# 
   358  0212                     	;# 
   359  0213                     	;# 
   360  0213                     	;# 
   361  0214                     	;# 
   362  0214                     	;# 
   363  0215                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0216                     	;# 
   367  0216                     	;# 
   368  0217                     	;# 
   369  0217                     	;# 
   370  0291                     	;# 
   371  0291                     	;# 
   372  0292                     	;# 
   373  0293                     	;# 
   374  0298                     	;# 
   375  0298                     	;# 
   376  0299                     	;# 
   377  029A                     	;# 
   378  0394                     	;# 
   379  0395                     	;# 
   380  0396                     	;# 
   381  0FE4                     	;# 
   382  0FE5                     	;# 
   383  0FE6                     	;# 
   384  0FE7                     	;# 
   385  0FE8                     	;# 
   386  0FE9                     	;# 
   387  0FEA                     	;# 
   388  0FEB                     	;# 
   389  0FED                     	;# 
   390  0FEE                     	;# 
   391  0FEF                     	;# 
   392  0000                     	;# 
   393  0001                     	;# 
   394  0002                     	;# 
   395  0003                     	;# 
   396  0004                     	;# 
   397  0005                     	;# 
   398  0006                     	;# 
   399  0007                     	;# 
   400  0008                     	;# 
   401  0009                     	;# 
   402  000A                     	;# 
   403  000B                     	;# 
   404  000C                     	;# 
   405  000D                     	;# 
   406  000E                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0015                     	;# 
   411  0016                     	;# 
   412  0016                     	;# 
   413  0017                     	;# 
   414  0018                     	;# 
   415  0019                     	;# 
   416  001A                     	;# 
   417  001B                     	;# 
   418  001C                     	;# 
   419  008C                     	;# 
   420  008D                     	;# 
   421  008E                     	;# 
   422  0090                     	;# 
   423  0091                     	;# 
   424  0092                     	;# 
   425  0095                     	;# 
   426  0096                     	;# 
   427  0097                     	;# 
   428  0099                     	;# 
   429  009A                     	;# 
   430  009B                     	;# 
   431  009B                     	;# 
   432  009C                     	;# 
   433  009D                     	;# 
   434  009E                     	;# 
   435  010C                     	;# 
   436  010D                     	;# 
   437  010E                     	;# 
   438  0116                     	;# 
   439  0117                     	;# 
   440  011D                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  018E                     	;# 
   444  0191                     	;# 
   445  0191                     	;# 
   446  0192                     	;# 
   447  0193                     	;# 
   448  0193                     	;# 
   449  0194                     	;# 
   450  0195                     	;# 
   451  0196                     	;# 
   452  0197                     	;# 
   453  0199                     	;# 
   454  019A                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019C                     	;# 
   460  019C                     	;# 
   461  019D                     	;# 
   462  019E                     	;# 
   463  019F                     	;# 
   464  020D                     	;# 
   465  0210                     	;# 
   466  0211                     	;# 
   467  0211                     	;# 
   468  0212                     	;# 
   469  0212                     	;# 
   470  0213                     	;# 
   471  0213                     	;# 
   472  0214                     	;# 
   473  0214                     	;# 
   474  0215                     	;# 
   475  0215                     	;# 
   476  0215                     	;# 
   477  0216                     	;# 
   478  0216                     	;# 
   479  0217                     	;# 
   480  0217                     	;# 
   481  0291                     	;# 
   482  0291                     	;# 
   483  0292                     	;# 
   484  0293                     	;# 
   485  0298                     	;# 
   486  0298                     	;# 
   487  0299                     	;# 
   488  029A                     	;# 
   489  0394                     	;# 
   490  0395                     	;# 
   491  0396                     	;# 
   492  0FE4                     	;# 
   493  0FE5                     	;# 
   494  0FE6                     	;# 
   495  0FE7                     	;# 
   496  0FE8                     	;# 
   497  0FE9                     	;# 
   498  0FEA                     	;# 
   499  0FEB                     	;# 
   500  0FED                     	;# 
   501  0FEE                     	;# 
   502  0FEF                     	;# 
   503  0000                     	;# 
   504  0001                     	;# 
   505  0002                     	;# 
   506  0003                     	;# 
   507  0004                     	;# 
   508  0005                     	;# 
   509  0006                     	;# 
   510  0007                     	;# 
   511  0008                     	;# 
   512  0009                     	;# 
   513  000A                     	;# 
   514  000B                     	;# 
   515  000C                     	;# 
   516  000D                     	;# 
   517  000E                     	;# 
   518  0010                     	;# 
   519  0011                     	;# 
   520  0012                     	;# 
   521  0015                     	;# 
   522  0016                     	;# 
   523  0016                     	;# 
   524  0017                     	;# 
   525  0018                     	;# 
   526  0019                     	;# 
   527  001A                     	;# 
   528  001B                     	;# 
   529  001C                     	;# 
   530  008C                     	;# 
   531  008D                     	;# 
   532  008E                     	;# 
   533  0090                     	;# 
   534  0091                     	;# 
   535  0092                     	;# 
   536  0095                     	;# 
   537  0096                     	;# 
   538  0097                     	;# 
   539  0099                     	;# 
   540  009A                     	;# 
   541  009B                     	;# 
   542  009B                     	;# 
   543  009C                     	;# 
   544  009D                     	;# 
   545  009E                     	;# 
   546  010C                     	;# 
   547  010D                     	;# 
   548  010E                     	;# 
   549  0116                     	;# 
   550  0117                     	;# 
   551  011D                     	;# 
   552  018C                     	;# 
   553  018D                     	;# 
   554  018E                     	;# 
   555  0191                     	;# 
   556  0191                     	;# 
   557  0192                     	;# 
   558  0193                     	;# 
   559  0193                     	;# 
   560  0194                     	;# 
   561  0195                     	;# 
   562  0196                     	;# 
   563  0197                     	;# 
   564  0199                     	;# 
   565  019A                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019C                     	;# 
   571  019C                     	;# 
   572  019D                     	;# 
   573  019E                     	;# 
   574  019F                     	;# 
   575  020D                     	;# 
   576  0210                     	;# 
   577  0211                     	;# 
   578  0211                     	;# 
   579  0212                     	;# 
   580  0212                     	;# 
   581  0213                     	;# 
   582  0213                     	;# 
   583  0214                     	;# 
   584  0214                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0216                     	;# 
   589  0216                     	;# 
   590  0217                     	;# 
   591  0217                     	;# 
   592  0291                     	;# 
   593  0291                     	;# 
   594  0292                     	;# 
   595  0293                     	;# 
   596  0298                     	;# 
   597  0298                     	;# 
   598  0299                     	;# 
   599  029A                     	;# 
   600  0394                     	;# 
   601  0395                     	;# 
   602  0396                     	;# 
   603  0FE4                     	;# 
   604  0FE5                     	;# 
   605  0FE6                     	;# 
   606  0FE7                     	;# 
   607  0FE8                     	;# 
   608  0FE9                     	;# 
   609  0FEA                     	;# 
   610  0FEB                     	;# 
   611  0FED                     	;# 
   612  0FEE                     	;# 
   613  0FEF                     	;# 
   614  0000                     	;# 
   615  0001                     	;# 
   616  0002                     	;# 
   617  0003                     	;# 
   618  0004                     	;# 
   619  0005                     	;# 
   620  0006                     	;# 
   621  0007                     	;# 
   622  0008                     	;# 
   623  0009                     	;# 
   624  000A                     	;# 
   625  000B                     	;# 
   626  000C                     	;# 
   627  000D                     	;# 
   628  000E                     	;# 
   629  0010                     	;# 
   630  0011                     	;# 
   631  0012                     	;# 
   632  0015                     	;# 
   633  0016                     	;# 
   634  0016                     	;# 
   635  0017                     	;# 
   636  0018                     	;# 
   637  0019                     	;# 
   638  001A                     	;# 
   639  001B                     	;# 
   640  001C                     	;# 
   641  008C                     	;# 
   642  008D                     	;# 
   643  008E                     	;# 
   644  0090                     	;# 
   645  0091                     	;# 
   646  0092                     	;# 
   647  0095                     	;# 
   648  0096                     	;# 
   649  0097                     	;# 
   650  0099                     	;# 
   651  009A                     	;# 
   652  009B                     	;# 
   653  009B                     	;# 
   654  009C                     	;# 
   655  009D                     	;# 
   656  009E                     	;# 
   657  010C                     	;# 
   658  010D                     	;# 
   659  010E                     	;# 
   660  0116                     	;# 
   661  0117                     	;# 
   662  011D                     	;# 
   663  018C                     	;# 
   664  018D                     	;# 
   665  018E                     	;# 
   666  0191                     	;# 
   667  0191                     	;# 
   668  0192                     	;# 
   669  0193                     	;# 
   670  0193                     	;# 
   671  0194                     	;# 
   672  0195                     	;# 
   673  0196                     	;# 
   674  0197                     	;# 
   675  0199                     	;# 
   676  019A                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019B                     	;# 
   680  019B                     	;# 
   681  019C                     	;# 
   682  019C                     	;# 
   683  019D                     	;# 
   684  019E                     	;# 
   685  019F                     	;# 
   686  020D                     	;# 
   687  0210                     	;# 
   688  0211                     	;# 
   689  0211                     	;# 
   690  0212                     	;# 
   691  0212                     	;# 
   692  0213                     	;# 
   693  0213                     	;# 
   694  0214                     	;# 
   695  0214                     	;# 
   696  0215                     	;# 
   697  0215                     	;# 
   698  0215                     	;# 
   699  0216                     	;# 
   700  0216                     	;# 
   701  0217                     	;# 
   702  0217                     	;# 
   703  0291                     	;# 
   704  0291                     	;# 
   705  0292                     	;# 
   706  0293                     	;# 
   707  0298                     	;# 
   708  0298                     	;# 
   709  0299                     	;# 
   710  029A                     	;# 
   711  0394                     	;# 
   712  0395                     	;# 
   713  0396                     	;# 
   714  0FE4                     	;# 
   715  0FE5                     	;# 
   716  0FE6                     	;# 
   717  0FE7                     	;# 
   718  0FE8                     	;# 
   719  0FE9                     	;# 
   720  0FEA                     	;# 
   721  0FEB                     	;# 
   722  0FED                     	;# 
   723  0FEE                     	;# 
   724  0FEF                     	;# 
   725  0000                     	;# 
   726  0001                     	;# 
   727  0002                     	;# 
   728  0003                     	;# 
   729  0004                     	;# 
   730  0005                     	;# 
   731  0006                     	;# 
   732  0007                     	;# 
   733  0008                     	;# 
   734  0009                     	;# 
   735  000A                     	;# 
   736  000B                     	;# 
   737  000C                     	;# 
   738  000D                     	;# 
   739  000E                     	;# 
   740  0010                     	;# 
   741  0011                     	;# 
   742  0012                     	;# 
   743  0015                     	;# 
   744  0016                     	;# 
   745  0016                     	;# 
   746  0017                     	;# 
   747  0018                     	;# 
   748  0019                     	;# 
   749  001A                     	;# 
   750  001B                     	;# 
   751  001C                     	;# 
   752  008C                     	;# 
   753  008D                     	;# 
   754  008E                     	;# 
   755  0090                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0095                     	;# 
   759  0096                     	;# 
   760  0097                     	;# 
   761  0099                     	;# 
   762  009A                     	;# 
   763  009B                     	;# 
   764  009B                     	;# 
   765  009C                     	;# 
   766  009D                     	;# 
   767  009E                     	;# 
   768  010C                     	;# 
   769  010D                     	;# 
   770  010E                     	;# 
   771  0116                     	;# 
   772  0117                     	;# 
   773  011D                     	;# 
   774  018C                     	;# 
   775  018D                     	;# 
   776  018E                     	;# 
   777  0191                     	;# 
   778  0191                     	;# 
   779  0192                     	;# 
   780  0193                     	;# 
   781  0193                     	;# 
   782  0194                     	;# 
   783  0195                     	;# 
   784  0196                     	;# 
   785  0197                     	;# 
   786  0199                     	;# 
   787  019A                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019C                     	;# 
   793  019C                     	;# 
   794  019D                     	;# 
   795  019E                     	;# 
   796  019F                     	;# 
   797  020D                     	;# 
   798  0210                     	;# 
   799  0211                     	;# 
   800  0211                     	;# 
   801  0212                     	;# 
   802  0212                     	;# 
   803  0213                     	;# 
   804  0213                     	;# 
   805  0214                     	;# 
   806  0214                     	;# 
   807  0215                     	;# 
   808  0215                     	;# 
   809  0215                     	;# 
   810  0216                     	;# 
   811  0216                     	;# 
   812  0217                     	;# 
   813  0217                     	;# 
   814  0291                     	;# 
   815  0291                     	;# 
   816  0292                     	;# 
   817  0293                     	;# 
   818  0298                     	;# 
   819  0298                     	;# 
   820  0299                     	;# 
   821  029A                     	;# 
   822  0394                     	;# 
   823  0395                     	;# 
   824  0396                     	;# 
   825  0FE4                     	;# 
   826  0FE5                     	;# 
   827  0FE6                     	;# 
   828  0FE7                     	;# 
   829  0FE8                     	;# 
   830  0FE9                     	;# 
   831  0FEA                     	;# 
   832  0FEB                     	;# 
   833  0FED                     	;# 
   834  0FEE                     	;# 
   835  0FEF                     	;# 
   836  0000                     	;# 
   837  0001                     	;# 
   838  0002                     	;# 
   839  0003                     	;# 
   840  0004                     	;# 
   841  0005                     	;# 
   842  0006                     	;# 
   843  0007                     	;# 
   844  0008                     	;# 
   845  0009                     	;# 
   846  000A                     	;# 
   847  000B                     	;# 
   848  000C                     	;# 
   849  000D                     	;# 
   850  000E                     	;# 
   851  0010                     	;# 
   852  0011                     	;# 
   853  0012                     	;# 
   854  0015                     	;# 
   855  0016                     	;# 
   856  0016                     	;# 
   857  0017                     	;# 
   858  0018                     	;# 
   859  0019                     	;# 
   860  001A                     	;# 
   861  001B                     	;# 
   862  001C                     	;# 
   863  008C                     	;# 
   864  008D                     	;# 
   865  008E                     	;# 
   866  0090                     	;# 
   867  0091                     	;# 
   868  0092                     	;# 
   869  0095                     	;# 
   870  0096                     	;# 
   871  0097                     	;# 
   872  0099                     	;# 
   873  009A                     	;# 
   874  009B                     	;# 
   875  009B                     	;# 
   876  009C                     	;# 
   877  009D                     	;# 
   878  009E                     	;# 
   879  010C                     	;# 
   880  010D                     	;# 
   881  010E                     	;# 
   882  0116                     	;# 
   883  0117                     	;# 
   884  011D                     	;# 
   885  018C                     	;# 
   886  018D                     	;# 
   887  018E                     	;# 
   888  0191                     	;# 
   889  0191                     	;# 
   890  0192                     	;# 
   891  0193                     	;# 
   892  0193                     	;# 
   893  0194                     	;# 
   894  0195                     	;# 
   895  0196                     	;# 
   896  0197                     	;# 
   897  0199                     	;# 
   898  019A                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019B                     	;# 
   902  019B                     	;# 
   903  019C                     	;# 
   904  019C                     	;# 
   905  019D                     	;# 
   906  019E                     	;# 
   907  019F                     	;# 
   908  020D                     	;# 
   909  0210                     	;# 
   910  0211                     	;# 
   911  0211                     	;# 
   912  0212                     	;# 
   913  0212                     	;# 
   914  0213                     	;# 
   915  0213                     	;# 
   916  0214                     	;# 
   917  0214                     	;# 
   918  0215                     	;# 
   919  0215                     	;# 
   920  0215                     	;# 
   921  0216                     	;# 
   922  0216                     	;# 
   923  0217                     	;# 
   924  0217                     	;# 
   925  0291                     	;# 
   926  0291                     	;# 
   927  0292                     	;# 
   928  0293                     	;# 
   929  0298                     	;# 
   930  0298                     	;# 
   931  0299                     	;# 
   932  029A                     	;# 
   933  0394                     	;# 
   934  0395                     	;# 
   935  0396                     	;# 
   936  0FE4                     	;# 
   937  0FE5                     	;# 
   938  0FE6                     	;# 
   939  0FE7                     	;# 
   940  0FE8                     	;# 
   941  0FE9                     	;# 
   942  0FEA                     	;# 
   943  0FEB                     	;# 
   944  0FED                     	;# 
   945  0FEE                     	;# 
   946  0FEF                     	;# 
   947  0000                     	;# 
   948  0001                     	;# 
   949  0002                     	;# 
   950  0003                     	;# 
   951  0004                     	;# 
   952  0005                     	;# 
   953  0006                     	;# 
   954  0007                     	;# 
   955  0008                     	;# 
   956  0009                     	;# 
   957  000A                     	;# 
   958  000B                     	;# 
   959  000C                     	;# 
   960  000D                     	;# 
   961  000E                     	;# 
   962  0010                     	;# 
   963  0011                     	;# 
   964  0012                     	;# 
   965  0015                     	;# 
   966  0016                     	;# 
   967  0016                     	;# 
   968  0017                     	;# 
   969  0018                     	;# 
   970  0019                     	;# 
   971  001A                     	;# 
   972  001B                     	;# 
   973  001C                     	;# 
   974  008C                     	;# 
   975  008D                     	;# 
   976  008E                     	;# 
   977  0090                     	;# 
   978  0091                     	;# 
   979  0092                     	;# 
   980  0095                     	;# 
   981  0096                     	;# 
   982  0097                     	;# 
   983  0099                     	;# 
   984  009A                     	;# 
   985  009B                     	;# 
   986  009B                     	;# 
   987  009C                     	;# 
   988  009D                     	;# 
   989  009E                     	;# 
   990  010C                     	;# 
   991  010D                     	;# 
   992  010E                     	;# 
   993  0116                     	;# 
   994  0117                     	;# 
   995  011D                     	;# 
   996  018C                     	;# 
   997  018D                     	;# 
   998  018E                     	;# 
   999  0191                     	;# 
  1000  0191                     	;# 
  1001  0192                     	;# 
  1002  0193                     	;# 
  1003  0193                     	;# 
  1004  0194                     	;# 
  1005  0195                     	;# 
  1006  0196                     	;# 
  1007  0197                     	;# 
  1008  0199                     	;# 
  1009  019A                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019B                     	;# 
  1013  019B                     	;# 
  1014  019C                     	;# 
  1015  019C                     	;# 
  1016  019D                     	;# 
  1017  019E                     	;# 
  1018  019F                     	;# 
  1019  020D                     	;# 
  1020  0210                     	;# 
  1021  0211                     	;# 
  1022  0211                     	;# 
  1023  0212                     	;# 
  1024  0212                     	;# 
  1025  0213                     	;# 
  1026  0213                     	;# 
  1027  0214                     	;# 
  1028  0214                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0215                     	;# 
  1032  0216                     	;# 
  1033  0216                     	;# 
  1034  0217                     	;# 
  1035  0217                     	;# 
  1036  0291                     	;# 
  1037  0291                     	;# 
  1038  0292                     	;# 
  1039  0293                     	;# 
  1040  0298                     	;# 
  1041  0298                     	;# 
  1042  0299                     	;# 
  1043  029A                     	;# 
  1044  0394                     	;# 
  1045  0395                     	;# 
  1046  0396                     	;# 
  1047  0FE4                     	;# 
  1048  0FE5                     	;# 
  1049  0FE6                     	;# 
  1050  0FE7                     	;# 
  1051  0FE8                     	;# 
  1052  0FE9                     	;# 
  1053  0FEA                     	;# 
  1054  0FEB                     	;# 
  1055  0FED                     	;# 
  1056  0FEE                     	;# 
  1057  0FEF                     	;# 
  1058  0000                     	;# 
  1059  0001                     	;# 
  1060  0002                     	;# 
  1061  0003                     	;# 
  1062  0004                     	;# 
  1063  0005                     	;# 
  1064  0006                     	;# 
  1065  0007                     	;# 
  1066  0008                     	;# 
  1067  0009                     	;# 
  1068  000A                     	;# 
  1069  000B                     	;# 
  1070  000C                     	;# 
  1071  000D                     	;# 
  1072  000E                     	;# 
  1073  0010                     	;# 
  1074  0011                     	;# 
  1075  0012                     	;# 
  1076  0015                     	;# 
  1077  0016                     	;# 
  1078  0016                     	;# 
  1079  0017                     	;# 
  1080  0018                     	;# 
  1081  0019                     	;# 
  1082  001A                     	;# 
  1083  001B                     	;# 
  1084  001C                     	;# 
  1085  008C                     	;# 
  1086  008D                     	;# 
  1087  008E                     	;# 
  1088  0090                     	;# 
  1089  0091                     	;# 
  1090  0092                     	;# 
  1091  0095                     	;# 
  1092  0096                     	;# 
  1093  0097                     	;# 
  1094  0099                     	;# 
  1095  009A                     	;# 
  1096  009B                     	;# 
  1097  009B                     	;# 
  1098  009C                     	;# 
  1099  009D                     	;# 
  1100  009E                     	;# 
  1101  010C                     	;# 
  1102  010D                     	;# 
  1103  010E                     	;# 
  1104  0116                     	;# 
  1105  0117                     	;# 
  1106  011D                     	;# 
  1107  018C                     	;# 
  1108  018D                     	;# 
  1109  018E                     	;# 
  1110  0191                     	;# 
  1111  0191                     	;# 
  1112  0192                     	;# 
  1113  0193                     	;# 
  1114  0193                     	;# 
  1115  0194                     	;# 
  1116  0195                     	;# 
  1117  0196                     	;# 
  1118  0197                     	;# 
  1119  0199                     	;# 
  1120  019A                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019C                     	;# 
  1126  019C                     	;# 
  1127  019D                     	;# 
  1128  019E                     	;# 
  1129  019F                     	;# 
  1130  020D                     	;# 
  1131  0210                     	;# 
  1132  0211                     	;# 
  1133  0211                     	;# 
  1134  0212                     	;# 
  1135  0212                     	;# 
  1136  0213                     	;# 
  1137  0213                     	;# 
  1138  0214                     	;# 
  1139  0214                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0215                     	;# 
  1143  0216                     	;# 
  1144  0216                     	;# 
  1145  0217                     	;# 
  1146  0217                     	;# 
  1147  0291                     	;# 
  1148  0291                     	;# 
  1149  0292                     	;# 
  1150  0293                     	;# 
  1151  0298                     	;# 
  1152  0298                     	;# 
  1153  0299                     	;# 
  1154  029A                     	;# 
  1155  0394                     	;# 
  1156  0395                     	;# 
  1157  0396                     	;# 
  1158  0FE4                     	;# 
  1159  0FE5                     	;# 
  1160  0FE6                     	;# 
  1161  0FE7                     	;# 
  1162  0FE8                     	;# 
  1163  0FE9                     	;# 
  1164  0FEA                     	;# 
  1165  0FEB                     	;# 
  1166  0FED                     	;# 
  1167  0FEE                     	;# 
  1168  0FEF                     	;# 
  1169  0000                     	;# 
  1170  0001                     	;# 
  1171  0002                     	;# 
  1172  0003                     	;# 
  1173  0004                     	;# 
  1174  0005                     	;# 
  1175  0006                     	;# 
  1176  0007                     	;# 
  1177  0008                     	;# 
  1178  0009                     	;# 
  1179  000A                     	;# 
  1180  000B                     	;# 
  1181  000C                     	;# 
  1182  000D                     	;# 
  1183  000E                     	;# 
  1184  0010                     	;# 
  1185  0011                     	;# 
  1186  0012                     	;# 
  1187  0015                     	;# 
  1188  0016                     	;# 
  1189  0016                     	;# 
  1190  0017                     	;# 
  1191  0018                     	;# 
  1192  0019                     	;# 
  1193  001A                     	;# 
  1194  001B                     	;# 
  1195  001C                     	;# 
  1196  008C                     	;# 
  1197  008D                     	;# 
  1198  008E                     	;# 
  1199  0090                     	;# 
  1200  0091                     	;# 
  1201  0092                     	;# 
  1202  0095                     	;# 
  1203  0096                     	;# 
  1204  0097                     	;# 
  1205  0099                     	;# 
  1206  009A                     	;# 
  1207  009B                     	;# 
  1208  009B                     	;# 
  1209  009C                     	;# 
  1210  009D                     	;# 
  1211  009E                     	;# 
  1212  010C                     	;# 
  1213  010D                     	;# 
  1214  010E                     	;# 
  1215  0116                     	;# 
  1216  0117                     	;# 
  1217  011D                     	;# 
  1218  018C                     	;# 
  1219  018D                     	;# 
  1220  018E                     	;# 
  1221  0191                     	;# 
  1222  0191                     	;# 
  1223  0192                     	;# 
  1224  0193                     	;# 
  1225  0193                     	;# 
  1226  0194                     	;# 
  1227  0195                     	;# 
  1228  0196                     	;# 
  1229  0197                     	;# 
  1230  0199                     	;# 
  1231  019A                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019B                     	;# 
  1235  019B                     	;# 
  1236  019C                     	;# 
  1237  019C                     	;# 
  1238  019D                     	;# 
  1239  019E                     	;# 
  1240  019F                     	;# 
  1241  020D                     	;# 
  1242  0210                     	;# 
  1243  0211                     	;# 
  1244  0211                     	;# 
  1245  0212                     	;# 
  1246  0212                     	;# 
  1247  0213                     	;# 
  1248  0213                     	;# 
  1249  0214                     	;# 
  1250  0214                     	;# 
  1251  0215                     	;# 
  1252  0215                     	;# 
  1253  0215                     	;# 
  1254  0216                     	;# 
  1255  0216                     	;# 
  1256  0217                     	;# 
  1257  0217                     	;# 
  1258  0291                     	;# 
  1259  0291                     	;# 
  1260  0292                     	;# 
  1261  0293                     	;# 
  1262  0298                     	;# 
  1263  0298                     	;# 
  1264  0299                     	;# 
  1265  029A                     	;# 
  1266  0394                     	;# 
  1267  0395                     	;# 
  1268  0396                     	;# 
  1269  0FE4                     	;# 
  1270  0FE5                     	;# 
  1271  0FE6                     	;# 
  1272  0FE7                     	;# 
  1273  0FE8                     	;# 
  1274  0FE9                     	;# 
  1275  0FEA                     	;# 
  1276  0FEB                     	;# 
  1277  0FED                     	;# 
  1278  0FEE                     	;# 
  1279  0FEF                     	;# 
  1280  0000                     	;# 
  1281  0001                     	;# 
  1282  0002                     	;# 
  1283  0003                     	;# 
  1284  0004                     	;# 
  1285  0005                     	;# 
  1286  0006                     	;# 
  1287  0007                     	;# 
  1288  0008                     	;# 
  1289  0009                     	;# 
  1290  000A                     	;# 
  1291  000B                     	;# 
  1292  000C                     	;# 
  1293  000D                     	;# 
  1294  000E                     	;# 
  1295  0010                     	;# 
  1296  0011                     	;# 
  1297  0012                     	;# 
  1298  0015                     	;# 
  1299  0016                     	;# 
  1300  0016                     	;# 
  1301  0017                     	;# 
  1302  0018                     	;# 
  1303  0019                     	;# 
  1304  001A                     	;# 
  1305  001B                     	;# 
  1306  001C                     	;# 
  1307  008C                     	;# 
  1308  008D                     	;# 
  1309  008E                     	;# 
  1310  0090                     	;# 
  1311  0091                     	;# 
  1312  0092                     	;# 
  1313  0095                     	;# 
  1314  0096                     	;# 
  1315  0097                     	;# 
  1316  0099                     	;# 
  1317  009A                     	;# 
  1318  009B                     	;# 
  1319  009B                     	;# 
  1320  009C                     	;# 
  1321  009D                     	;# 
  1322  009E                     	;# 
  1323  010C                     	;# 
  1324  010D                     	;# 
  1325  010E                     	;# 
  1326  0116                     	;# 
  1327  0117                     	;# 
  1328  011D                     	;# 
  1329  018C                     	;# 
  1330  018D                     	;# 
  1331  018E                     	;# 
  1332  0191                     	;# 
  1333  0191                     	;# 
  1334  0192                     	;# 
  1335  0193                     	;# 
  1336  0193                     	;# 
  1337  0194                     	;# 
  1338  0195                     	;# 
  1339  0196                     	;# 
  1340  0197                     	;# 
  1341  0199                     	;# 
  1342  019A                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019C                     	;# 
  1348  019C                     	;# 
  1349  019D                     	;# 
  1350  019E                     	;# 
  1351  019F                     	;# 
  1352  020D                     	;# 
  1353  0210                     	;# 
  1354  0211                     	;# 
  1355  0211                     	;# 
  1356  0212                     	;# 
  1357  0212                     	;# 
  1358  0213                     	;# 
  1359  0213                     	;# 
  1360  0214                     	;# 
  1361  0214                     	;# 
  1362  0215                     	;# 
  1363  0215                     	;# 
  1364  0215                     	;# 
  1365  0216                     	;# 
  1366  0216                     	;# 
  1367  0217                     	;# 
  1368  0217                     	;# 
  1369  0291                     	;# 
  1370  0291                     	;# 
  1371  0292                     	;# 
  1372  0293                     	;# 
  1373  0298                     	;# 
  1374  0298                     	;# 
  1375  0299                     	;# 
  1376  029A                     	;# 
  1377  0394                     	;# 
  1378  0395                     	;# 
  1379  0396                     	;# 
  1380  0FE4                     	;# 
  1381  0FE5                     	;# 
  1382  0FE6                     	;# 
  1383  0FE7                     	;# 
  1384  0FE8                     	;# 
  1385  0FE9                     	;# 
  1386  0FEA                     	;# 
  1387  0FEB                     	;# 
  1388  0FED                     	;# 
  1389  0FEE                     	;# 
  1390  0FEF                     	;# 
  1391  0000                     	;# 
  1392  0001                     	;# 
  1393  0002                     	;# 
  1394  0003                     	;# 
  1395  0004                     	;# 
  1396  0005                     	;# 
  1397  0006                     	;# 
  1398  0007                     	;# 
  1399  0008                     	;# 
  1400  0009                     	;# 
  1401  000A                     	;# 
  1402  000B                     	;# 
  1403  000C                     	;# 
  1404  000D                     	;# 
  1405  000E                     	;# 
  1406  0010                     	;# 
  1407  0011                     	;# 
  1408  0012                     	;# 
  1409  0015                     	;# 
  1410  0016                     	;# 
  1411  0016                     	;# 
  1412  0017                     	;# 
  1413  0018                     	;# 
  1414  0019                     	;# 
  1415  001A                     	;# 
  1416  001B                     	;# 
  1417  001C                     	;# 
  1418  008C                     	;# 
  1419  008D                     	;# 
  1420  008E                     	;# 
  1421  0090                     	;# 
  1422  0091                     	;# 
  1423  0092                     	;# 
  1424  0095                     	;# 
  1425  0096                     	;# 
  1426  0097                     	;# 
  1427  0099                     	;# 
  1428  009A                     	;# 
  1429  009B                     	;# 
  1430  009B                     	;# 
  1431  009C                     	;# 
  1432  009D                     	;# 
  1433  009E                     	;# 
  1434  010C                     	;# 
  1435  010D                     	;# 
  1436  010E                     	;# 
  1437  0116                     	;# 
  1438  0117                     	;# 
  1439  011D                     	;# 
  1440  018C                     	;# 
  1441  018D                     	;# 
  1442  018E                     	;# 
  1443  0191                     	;# 
  1444  0191                     	;# 
  1445  0192                     	;# 
  1446  0193                     	;# 
  1447  0193                     	;# 
  1448  0194                     	;# 
  1449  0195                     	;# 
  1450  0196                     	;# 
  1451  0197                     	;# 
  1452  0199                     	;# 
  1453  019A                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019B                     	;# 
  1457  019B                     	;# 
  1458  019C                     	;# 
  1459  019C                     	;# 
  1460  019D                     	;# 
  1461  019E                     	;# 
  1462  019F                     	;# 
  1463  020D                     	;# 
  1464  0210                     	;# 
  1465  0211                     	;# 
  1466  0211                     	;# 
  1467  0212                     	;# 
  1468  0212                     	;# 
  1469  0213                     	;# 
  1470  0213                     	;# 
  1471  0214                     	;# 
  1472  0214                     	;# 
  1473  0215                     	;# 
  1474  0215                     	;# 
  1475  0215                     	;# 
  1476  0216                     	;# 
  1477  0216                     	;# 
  1478  0217                     	;# 
  1479  0217                     	;# 
  1480  0291                     	;# 
  1481  0291                     	;# 
  1482  0292                     	;# 
  1483  0293                     	;# 
  1484  0298                     	;# 
  1485  0298                     	;# 
  1486  0299                     	;# 
  1487  029A                     	;# 
  1488  0394                     	;# 
  1489  0395                     	;# 
  1490  0396                     	;# 
  1491  0FE4                     	;# 
  1492  0FE5                     	;# 
  1493  0FE6                     	;# 
  1494  0FE7                     	;# 
  1495  0FE8                     	;# 
  1496  0FE9                     	;# 
  1497  0FEA                     	;# 
  1498  0FEB                     	;# 
  1499  0FED                     	;# 
  1500  0FEE                     	;# 
  1501  0FEF                     	;# 
  1502  0000                     	;# 
  1503  0001                     	;# 
  1504  0002                     	;# 
  1505  0003                     	;# 
  1506  0004                     	;# 
  1507  0005                     	;# 
  1508  0006                     	;# 
  1509  0007                     	;# 
  1510  0008                     	;# 
  1511  0009                     	;# 
  1512  000A                     	;# 
  1513  000B                     	;# 
  1514  000C                     	;# 
  1515  000D                     	;# 
  1516  000E                     	;# 
  1517  0010                     	;# 
  1518  0011                     	;# 
  1519  0012                     	;# 
  1520  0015                     	;# 
  1521  0016                     	;# 
  1522  0016                     	;# 
  1523  0017                     	;# 
  1524  0018                     	;# 
  1525  0019                     	;# 
  1526  001A                     	;# 
  1527  001B                     	;# 
  1528  001C                     	;# 
  1529  008C                     	;# 
  1530  008D                     	;# 
  1531  008E                     	;# 
  1532  0090                     	;# 
  1533  0091                     	;# 
  1534  0092                     	;# 
  1535  0095                     	;# 
  1536  0096                     	;# 
  1537  0097                     	;# 
  1538  0099                     	;# 
  1539  009A                     	;# 
  1540  009B                     	;# 
  1541  009B                     	;# 
  1542  009C                     	;# 
  1543  009D                     	;# 
  1544  009E                     	;# 
  1545  010C                     	;# 
  1546  010D                     	;# 
  1547  010E                     	;# 
  1548  0116                     	;# 
  1549  0117                     	;# 
  1550  011D                     	;# 
  1551  018C                     	;# 
  1552  018D                     	;# 
  1553  018E                     	;# 
  1554  0191                     	;# 
  1555  0191                     	;# 
  1556  0192                     	;# 
  1557  0193                     	;# 
  1558  0193                     	;# 
  1559  0194                     	;# 
  1560  0195                     	;# 
  1561  0196                     	;# 
  1562  0197                     	;# 
  1563  0199                     	;# 
  1564  019A                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019C                     	;# 
  1570  019C                     	;# 
  1571  019D                     	;# 
  1572  019E                     	;# 
  1573  019F                     	;# 
  1574  020D                     	;# 
  1575  0210                     	;# 
  1576  0211                     	;# 
  1577  0211                     	;# 
  1578  0212                     	;# 
  1579  0212                     	;# 
  1580  0213                     	;# 
  1581  0213                     	;# 
  1582  0214                     	;# 
  1583  0214                     	;# 
  1584  0215                     	;# 
  1585  0215                     	;# 
  1586  0215                     	;# 
  1587  0216                     	;# 
  1588  0216                     	;# 
  1589  0217                     	;# 
  1590  0217                     	;# 
  1591  0291                     	;# 
  1592  0291                     	;# 
  1593  0292                     	;# 
  1594  0293                     	;# 
  1595  0298                     	;# 
  1596  0298                     	;# 
  1597  0299                     	;# 
  1598  029A                     	;# 
  1599  0394                     	;# 
  1600  0395                     	;# 
  1601  0396                     	;# 
  1602  0FE4                     	;# 
  1603  0FE5                     	;# 
  1604  0FE6                     	;# 
  1605  0FE7                     	;# 
  1606  0FE8                     	;# 
  1607  0FE9                     	;# 
  1608  0FEA                     	;# 
  1609  0FEB                     	;# 
  1610  0FED                     	;# 
  1611  0FEE                     	;# 
  1612  0FEF                     	;# 
  1613  0000                     	;# 
  1614  0001                     	;# 
  1615  0002                     	;# 
  1616  0003                     	;# 
  1617  0004                     	;# 
  1618  0005                     	;# 
  1619  0006                     	;# 
  1620  0007                     	;# 
  1621  0008                     	;# 
  1622  0009                     	;# 
  1623  000A                     	;# 
  1624  000B                     	;# 
  1625  000C                     	;# 
  1626  000D                     	;# 
  1627  000E                     	;# 
  1628  0010                     	;# 
  1629  0011                     	;# 
  1630  0012                     	;# 
  1631  0015                     	;# 
  1632  0016                     	;# 
  1633  0016                     	;# 
  1634  0017                     	;# 
  1635  0018                     	;# 
  1636  0019                     	;# 
  1637  001A                     	;# 
  1638  001B                     	;# 
  1639  001C                     	;# 
  1640  008C                     	;# 
  1641  008D                     	;# 
  1642  008E                     	;# 
  1643  0090                     	;# 
  1644  0091                     	;# 
  1645  0092                     	;# 
  1646  0095                     	;# 
  1647  0096                     	;# 
  1648  0097                     	;# 
  1649  0099                     	;# 
  1650  009A                     	;# 
  1651  009B                     	;# 
  1652  009B                     	;# 
  1653  009C                     	;# 
  1654  009D                     	;# 
  1655  009E                     	;# 
  1656  010C                     	;# 
  1657  010D                     	;# 
  1658  010E                     	;# 
  1659  0116                     	;# 
  1660  0117                     	;# 
  1661  011D                     	;# 
  1662  018C                     	;# 
  1663  018D                     	;# 
  1664  018E                     	;# 
  1665  0191                     	;# 
  1666  0191                     	;# 
  1667  0192                     	;# 
  1668  0193                     	;# 
  1669  0193                     	;# 
  1670  0194                     	;# 
  1671  0195                     	;# 
  1672  0196                     	;# 
  1673  0197                     	;# 
  1674  0199                     	;# 
  1675  019A                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019B                     	;# 
  1680  019C                     	;# 
  1681  019C                     	;# 
  1682  019D                     	;# 
  1683  019E                     	;# 
  1684  019F                     	;# 
  1685  020D                     	;# 
  1686  0210                     	;# 
  1687  0211                     	;# 
  1688  0211                     	;# 
  1689  0212                     	;# 
  1690  0212                     	;# 
  1691  0213                     	;# 
  1692  0213                     	;# 
  1693  0214                     	;# 
  1694  0214                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0215                     	;# 
  1698  0216                     	;# 
  1699  0216                     	;# 
  1700  0217                     	;# 
  1701  0217                     	;# 
  1702  0291                     	;# 
  1703  0291                     	;# 
  1704  0292                     	;# 
  1705  0293                     	;# 
  1706  0298                     	;# 
  1707  0298                     	;# 
  1708  0299                     	;# 
  1709  029A                     	;# 
  1710  0394                     	;# 
  1711  0395                     	;# 
  1712  0396                     	;# 
  1713  0FE4                     	;# 
  1714  0FE5                     	;# 
  1715  0FE6                     	;# 
  1716  0FE7                     	;# 
  1717  0FE8                     	;# 
  1718  0FE9                     	;# 
  1719  0FEA                     	;# 
  1720  0FEB                     	;# 
  1721  0FED                     	;# 
  1722  0FEE                     	;# 
  1723  0FEF                     	;# 
  1724  0000                     	;# 
  1725  0001                     	;# 
  1726  0002                     	;# 
  1727  0003                     	;# 
  1728  0004                     	;# 
  1729  0005                     	;# 
  1730  0006                     	;# 
  1731  0007                     	;# 
  1732  0008                     	;# 
  1733  0009                     	;# 
  1734  000A                     	;# 
  1735  000B                     	;# 
  1736  000C                     	;# 
  1737  000D                     	;# 
  1738  000E                     	;# 
  1739  0010                     	;# 
  1740  0011                     	;# 
  1741  0012                     	;# 
  1742  0015                     	;# 
  1743  0016                     	;# 
  1744  0016                     	;# 
  1745  0017                     	;# 
  1746  0018                     	;# 
  1747  0019                     	;# 
  1748  001A                     	;# 
  1749  001B                     	;# 
  1750  001C                     	;# 
  1751  008C                     	;# 
  1752  008D                     	;# 
  1753  008E                     	;# 
  1754  0090                     	;# 
  1755  0091                     	;# 
  1756  0092                     	;# 
  1757  0095                     	;# 
  1758  0096                     	;# 
  1759  0097                     	;# 
  1760  0099                     	;# 
  1761  009A                     	;# 
  1762  009B                     	;# 
  1763  009B                     	;# 
  1764  009C                     	;# 
  1765  009D                     	;# 
  1766  009E                     	;# 
  1767  010C                     	;# 
  1768  010D                     	;# 
  1769  010E                     	;# 
  1770  0116                     	;# 
  1771  0117                     	;# 
  1772  011D                     	;# 
  1773  018C                     	;# 
  1774  018D                     	;# 
  1775  018E                     	;# 
  1776  0191                     	;# 
  1777  0191                     	;# 
  1778  0192                     	;# 
  1779  0193                     	;# 
  1780  0193                     	;# 
  1781  0194                     	;# 
  1782  0195                     	;# 
  1783  0196                     	;# 
  1784  0197                     	;# 
  1785  0199                     	;# 
  1786  019A                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019B                     	;# 
  1790  019B                     	;# 
  1791  019C                     	;# 
  1792  019C                     	;# 
  1793  019D                     	;# 
  1794  019E                     	;# 
  1795  019F                     	;# 
  1796  020D                     	;# 
  1797  0210                     	;# 
  1798  0211                     	;# 
  1799  0211                     	;# 
  1800  0212                     	;# 
  1801  0212                     	;# 
  1802  0213                     	;# 
  1803  0213                     	;# 
  1804  0214                     	;# 
  1805  0214                     	;# 
  1806  0215                     	;# 
  1807  0215                     	;# 
  1808  0215                     	;# 
  1809  0216                     	;# 
  1810  0216                     	;# 
  1811  0217                     	;# 
  1812  0217                     	;# 
  1813  0291                     	;# 
  1814  0291                     	;# 
  1815  0292                     	;# 
  1816  0293                     	;# 
  1817  0298                     	;# 
  1818  0298                     	;# 
  1819  0299                     	;# 
  1820  029A                     	;# 
  1821  0394                     	;# 
  1822  0395                     	;# 
  1823  0396                     	;# 
  1824  0FE4                     	;# 
  1825  0FE5                     	;# 
  1826  0FE6                     	;# 
  1827  0FE7                     	;# 
  1828  0FE8                     	;# 
  1829  0FE9                     	;# 
  1830  0FEA                     	;# 
  1831  0FEB                     	;# 
  1832  0FED                     	;# 
  1833  0FEE                     	;# 
  1834  0FEF                     	;# 
  1835  0000                     	;# 
  1836  0001                     	;# 
  1837  0002                     	;# 
  1838  0003                     	;# 
  1839  0004                     	;# 
  1840  0005                     	;# 
  1841  0006                     	;# 
  1842  0007                     	;# 
  1843  0008                     	;# 
  1844  0009                     	;# 
  1845  000A                     	;# 
  1846  000B                     	;# 
  1847  000C                     	;# 
  1848  000D                     	;# 
  1849  000E                     	;# 
  1850  0010                     	;# 
  1851  0011                     	;# 
  1852  0012                     	;# 
  1853  0015                     	;# 
  1854  0016                     	;# 
  1855  0016                     	;# 
  1856  0017                     	;# 
  1857  0018                     	;# 
  1858  0019                     	;# 
  1859  001A                     	;# 
  1860  001B                     	;# 
  1861  001C                     	;# 
  1862  008C                     	;# 
  1863  008D                     	;# 
  1864  008E                     	;# 
  1865  0090                     	;# 
  1866  0091                     	;# 
  1867  0092                     	;# 
  1868  0095                     	;# 
  1869  0096                     	;# 
  1870  0097                     	;# 
  1871  0099                     	;# 
  1872  009A                     	;# 
  1873  009B                     	;# 
  1874  009B                     	;# 
  1875  009C                     	;# 
  1876  009D                     	;# 
  1877  009E                     	;# 
  1878  010C                     	;# 
  1879  010D                     	;# 
  1880  010E                     	;# 
  1881  0116                     	;# 
  1882  0117                     	;# 
  1883  011D                     	;# 
  1884  018C                     	;# 
  1885  018D                     	;# 
  1886  018E                     	;# 
  1887  0191                     	;# 
  1888  0191                     	;# 
  1889  0192                     	;# 
  1890  0193                     	;# 
  1891  0193                     	;# 
  1892  0194                     	;# 
  1893  0195                     	;# 
  1894  0196                     	;# 
  1895  0197                     	;# 
  1896  0199                     	;# 
  1897  019A                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019B                     	;# 
  1901  019B                     	;# 
  1902  019C                     	;# 
  1903  019C                     	;# 
  1904  019D                     	;# 
  1905  019E                     	;# 
  1906  019F                     	;# 
  1907  020D                     	;# 
  1908  0210                     	;# 
  1909  0211                     	;# 
  1910  0211                     	;# 
  1911  0212                     	;# 
  1912  0212                     	;# 
  1913  0213                     	;# 
  1914  0213                     	;# 
  1915  0214                     	;# 
  1916  0214                     	;# 
  1917  0215                     	;# 
  1918  0215                     	;# 
  1919  0215                     	;# 
  1920  0216                     	;# 
  1921  0216                     	;# 
  1922  0217                     	;# 
  1923  0217                     	;# 
  1924  0291                     	;# 
  1925  0291                     	;# 
  1926  0292                     	;# 
  1927  0293                     	;# 
  1928  0298                     	;# 
  1929  0298                     	;# 
  1930  0299                     	;# 
  1931  029A                     	;# 
  1932  0394                     	;# 
  1933  0395                     	;# 
  1934  0396                     	;# 
  1935  0FE4                     	;# 
  1936  0FE5                     	;# 
  1937  0FE6                     	;# 
  1938  0FE7                     	;# 
  1939  0FE8                     	;# 
  1940  0FE9                     	;# 
  1941  0FEA                     	;# 
  1942  0FEB                     	;# 
  1943  0FED                     	;# 
  1944  0FEE                     	;# 
  1945  0FEF                     	;# 
  1946  0000                     	;# 
  1947  0001                     	;# 
  1948  0002                     	;# 
  1949  0003                     	;# 
  1950  0004                     	;# 
  1951  0005                     	;# 
  1952  0006                     	;# 
  1953  0007                     	;# 
  1954  0008                     	;# 
  1955  0009                     	;# 
  1956  000A                     	;# 
  1957  000B                     	;# 
  1958  000C                     	;# 
  1959  000D                     	;# 
  1960  000E                     	;# 
  1961  0010                     	;# 
  1962  0011                     	;# 
  1963  0012                     	;# 
  1964  0015                     	;# 
  1965  0016                     	;# 
  1966  0016                     	;# 
  1967  0017                     	;# 
  1968  0018                     	;# 
  1969  0019                     	;# 
  1970  001A                     	;# 
  1971  001B                     	;# 
  1972  001C                     	;# 
  1973  008C                     	;# 
  1974  008D                     	;# 
  1975  008E                     	;# 
  1976  0090                     	;# 
  1977  0091                     	;# 
  1978  0092                     	;# 
  1979  0095                     	;# 
  1980  0096                     	;# 
  1981  0097                     	;# 
  1982  0099                     	;# 
  1983  009A                     	;# 
  1984  009B                     	;# 
  1985  009B                     	;# 
  1986  009C                     	;# 
  1987  009D                     	;# 
  1988  009E                     	;# 
  1989  010C                     	;# 
  1990  010D                     	;# 
  1991  010E                     	;# 
  1992  0116                     	;# 
  1993  0117                     	;# 
  1994  011D                     	;# 
  1995  018C                     	;# 
  1996  018D                     	;# 
  1997  018E                     	;# 
  1998  0191                     	;# 
  1999  0191                     	;# 
  2000  0192                     	;# 
  2001  0193                     	;# 
  2002  0193                     	;# 
  2003  0194                     	;# 
  2004  0195                     	;# 
  2005  0196                     	;# 
  2006  0197                     	;# 
  2007  0199                     	;# 
  2008  019A                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019B                     	;# 
  2012  019B                     	;# 
  2013  019C                     	;# 
  2014  019C                     	;# 
  2015  019D                     	;# 
  2016  019E                     	;# 
  2017  019F                     	;# 
  2018  020D                     	;# 
  2019  0210                     	;# 
  2020  0211                     	;# 
  2021  0211                     	;# 
  2022  0212                     	;# 
  2023  0212                     	;# 
  2024  0213                     	;# 
  2025  0213                     	;# 
  2026  0214                     	;# 
  2027  0214                     	;# 
  2028  0215                     	;# 
  2029  0215                     	;# 
  2030  0215                     	;# 
  2031  0216                     	;# 
  2032  0216                     	;# 
  2033  0217                     	;# 
  2034  0217                     	;# 
  2035  0291                     	;# 
  2036  0291                     	;# 
  2037  0292                     	;# 
  2038  0293                     	;# 
  2039  0298                     	;# 
  2040  0298                     	;# 
  2041  0299                     	;# 
  2042  029A                     	;# 
  2043  0394                     	;# 
  2044  0395                     	;# 
  2045  0396                     	;# 
  2046  0FE4                     	;# 
  2047  0FE5                     	;# 
  2048  0FE6                     	;# 
  2049  0FE7                     	;# 
  2050  0FE8                     	;# 
  2051  0FE9                     	;# 
  2052  0FEA                     	;# 
  2053  0FEB                     	;# 
  2054  0FED                     	;# 
  2055  0FEE                     	;# 
  2056  0FEF                     	;# 
  2057  0000                     	;# 
  2058  0001                     	;# 
  2059  0002                     	;# 
  2060  0003                     	;# 
  2061  0004                     	;# 
  2062  0005                     	;# 
  2063  0006                     	;# 
  2064  0007                     	;# 
  2065  0008                     	;# 
  2066  0009                     	;# 
  2067  000A                     	;# 
  2068  000B                     	;# 
  2069  000C                     	;# 
  2070  000D                     	;# 
  2071  000E                     	;# 
  2072  0010                     	;# 
  2073  0011                     	;# 
  2074  0012                     	;# 
  2075  0015                     	;# 
  2076  0016                     	;# 
  2077  0016                     	;# 
  2078  0017                     	;# 
  2079  0018                     	;# 
  2080  0019                     	;# 
  2081  001A                     	;# 
  2082  001B                     	;# 
  2083  001C                     	;# 
  2084  008C                     	;# 
  2085  008D                     	;# 
  2086  008E                     	;# 
  2087  0090                     	;# 
  2088  0091                     	;# 
  2089  0092                     	;# 
  2090  0095                     	;# 
  2091  0096                     	;# 
  2092  0097                     	;# 
  2093  0099                     	;# 
  2094  009A                     	;# 
  2095  009B                     	;# 
  2096  009B                     	;# 
  2097  009C                     	;# 
  2098  009D                     	;# 
  2099  009E                     	;# 
  2100  010C                     	;# 
  2101  010D                     	;# 
  2102  010E                     	;# 
  2103  0116                     	;# 
  2104  0117                     	;# 
  2105  011D                     	;# 
  2106  018C                     	;# 
  2107  018D                     	;# 
  2108  018E                     	;# 
  2109  0191                     	;# 
  2110  0191                     	;# 
  2111  0192                     	;# 
  2112  0193                     	;# 
  2113  0193                     	;# 
  2114  0194                     	;# 
  2115  0195                     	;# 
  2116  0196                     	;# 
  2117  0197                     	;# 
  2118  0199                     	;# 
  2119  019A                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019B                     	;# 
  2123  019B                     	;# 
  2124  019C                     	;# 
  2125  019C                     	;# 
  2126  019D                     	;# 
  2127  019E                     	;# 
  2128  019F                     	;# 
  2129  020D                     	;# 
  2130  0210                     	;# 
  2131  0211                     	;# 
  2132  0211                     	;# 
  2133  0212                     	;# 
  2134  0212                     	;# 
  2135  0213                     	;# 
  2136  0213                     	;# 
  2137  0214                     	;# 
  2138  0214                     	;# 
  2139  0215                     	;# 
  2140  0215                     	;# 
  2141  0215                     	;# 
  2142  0216                     	;# 
  2143  0216                     	;# 
  2144  0217                     	;# 
  2145  0217                     	;# 
  2146  0291                     	;# 
  2147  0291                     	;# 
  2148  0292                     	;# 
  2149  0293                     	;# 
  2150  0298                     	;# 
  2151  0298                     	;# 
  2152  0299                     	;# 
  2153  029A                     	;# 
  2154  0394                     	;# 
  2155  0395                     	;# 
  2156  0396                     	;# 
  2157  0FE4                     	;# 
  2158  0FE5                     	;# 
  2159  0FE6                     	;# 
  2160  0FE7                     	;# 
  2161  0FE8                     	;# 
  2162  0FE9                     	;# 
  2163  0FEA                     	;# 
  2164  0FEB                     	;# 
  2165  0FED                     	;# 
  2166  0FEE                     	;# 
  2167  0FEF                     	;# 
  2168                           
  2169                           	psect	idataBANK3
  2170  1F9D                     __pidataBANK3:	
  2171                           
  2172                           ;initializer for __product
  2173  1F9D  3463               	retlw	99
  2174  1F9E  3402               	retlw	2
  2175  1F9F  3400               	retlw	0
  2176  1FA0  3400               	retlw	0
  2177  1FA1  3400               	retlw	0
  2178  1FA2  3400               	retlw	0
  2179  1FA3  3400               	retlw	0
  2180  1FA4  3400               	retlw	0
  2181  1FA5  3400               	retlw	0
  2182  1FA6  3400               	retlw	0
  2183  1FA7  3400               	retlw	0
  2184  1FA8  3400               	retlw	0
  2185  1FA9  34FF               	retlw	255
  2186  1FAA  34FF               	retlw	255
  2187  1FAB  34FF               	retlw	255
  2188  1FAC  3400               	retlw	0
  2189  1FAD  3400               	retlw	0
  2190  1FAE  3400               	retlw	0
  2191  1FAF  3400               	retlw	0
  2192  1FB0  3400               	retlw	0
  2193  1FB1  3400               	retlw	0
  2194  1FB2  3400               	retlw	0
  2195  1FB3  3400               	retlw	0
  2196  1FB4  3400               	retlw	0
  2197  1FB5  3400               	retlw	0
  2198  1FB6  3400               	retlw	0
  2199  1FB7  3400               	retlw	0
  2200  1FB8  3400               	retlw	0
  2201  1FB9  3400               	retlw	0
  2202  1FBA  3400               	retlw	0
  2203  1FBB  3400               	retlw	0
  2204  1FBC  3400               	retlw	0
  2205                           
  2206                           	psect	stringtext
  2207  1800                     __pstringtext:	
  2208  1800                     _CC2500_registers_address:	
  2209  1800  3403               	retlw	3
  2210  1801  3416               	retlw	22
  2211  1802  3417               	retlw	23
  2212  1803  341E               	retlw	30
  2213  1804  341F               	retlw	31
  2214  1805  3420               	retlw	32
  2215  1806  342A               	retlw	42
  2216  1807  342B               	retlw	43
  2217  1808  340B               	retlw	11
  2218  1809  340C               	retlw	12
  2219  180A  340D               	retlw	13
  2220  180B  340E               	retlw	14
  2221  180C  340F               	retlw	15
  2222  180D  3410               	retlw	16
  2223  180E  3411               	retlw	17
  2224  180F  3412               	retlw	18
  2225  1810  3413               	retlw	19
  2226  1811  3414               	retlw	20
  2227  1812  340A               	retlw	10
  2228  1813  3415               	retlw	21
  2229  1814  3421               	retlw	33
  2230  1815  3422               	retlw	34
  2231  1816  3418               	retlw	24
  2232  1817  3419               	retlw	25
  2233  1818  341A               	retlw	26
  2234  1819  341B               	retlw	27
  2235  181A  341C               	retlw	28
  2236  181B  341D               	retlw	29
  2237  181C  3423               	retlw	35
  2238  181D  3424               	retlw	36
  2239  181E  3425               	retlw	37
  2240  181F  3426               	retlw	38
  2241  1820  3429               	retlw	41
  2242  1821  342C               	retlw	44
  2243  1822  342D               	retlw	45
  2244  1823  342E               	retlw	46
  2245  1824  3400               	retlw	0
  2246  1825  3401               	retlw	1
  2247  1826  3402               	retlw	2
  2248  1827  3407               	retlw	7
  2249  1828  3408               	retlw	8
  2250  1829  3409               	retlw	9
  2251  182A  3406               	retlw	6
  2252  182B  3404               	retlw	4
  2253  182C  3405               	retlw	5
  2254  182D  3427               	retlw	39
  2255  182E  3428               	retlw	40
  2256  182F                     __end_of_CC2500_registers_address:	
  2257  182F                     _CC2500_rfSettings:	
  2258  182F  3407               	retlw	7
  2259  1830  3407               	retlw	7
  2260  1831  3430               	retlw	48
  2261  1832  3487               	retlw	135
  2262  1833  346B               	retlw	107
  2263  1834  34F8               	retlw	248
  2264  1835  347F               	retlw	127
  2265  1836  343F               	retlw	63
  2266  1837  3409               	retlw	9
  2267  1838  3400               	retlw	0
  2268  1839  345C               	retlw	92
  2269  183A  34A7               	retlw	167
  2270  183B  3462               	retlw	98
  2271  183C  3486               	retlw	134
  2272  183D  3483               	retlw	131
  2273  183E  3403               	retlw	3
  2274  183F  3422               	retlw	34
  2275  1840  34F8               	retlw	248
  2276  1841  3400               	retlw	0
  2277  1842  3444               	retlw	68
  2278  1843  34B6               	retlw	182
  2279  1844  3410               	retlw	16
  2280  1845  3418               	retlw	24
  2281  1846  341D               	retlw	29
  2282  1847  341C               	retlw	28
  2283  1848  34C7               	retlw	199
  2284  1849  3400               	retlw	0
  2285  184A  34B2               	retlw	178
  2286  184B  34EA               	retlw	234
  2287  184C  340A               	retlw	10
  2288  184D  3400               	retlw	0
  2289  184E  3411               	retlw	17
  2290  184F  3459               	retlw	89
  2291  1850  3488               	retlw	136
  2292  1851  3431               	retlw	49
  2293  1852  340B               	retlw	11
  2294  1853  342F               	retlw	47
  2295  1854  342E               	retlw	46
  2296  1855  3406               	retlw	6
  2297  1856  3404               	retlw	4
  2298  1857  3405               	retlw	5
  2299  1858  3400               	retlw	0
  2300  1859  3430               	retlw	48
  2301  185A  34D3               	retlw	211
  2302  185B  3491               	retlw	145
  2303  185C  3441               	retlw	65
  2304  185D  3400               	retlw	0
  2305  185E                     __end_of_CC2500_rfSettings:	
  2306  185E                     _CC2500_patable_vaule:	
  2307  185E  34FE               	retlw	254
  2308  185F  34FE               	retlw	254
  2309  1860  34FE               	retlw	254
  2310  1861  34FE               	retlw	254
  2311  1862  34FE               	retlw	254
  2312  1863  34FE               	retlw	254
  2313  1864  34FE               	retlw	254
  2314  1865  34FE               	retlw	254
  2315  1866                     __end_of_CC2500_patable_vaule:	
  2316                           
  2317                           	psect	nvBANK1
  2318  00EE                     __pnvBANK1:	
  2319  00EE                     _product:	
  2320  00EE                     	ds	1
  2321  000C                     _PORTA	set	12
  2322  000D                     _PORTB	set	13
  2323  000E                     _PORTC	set	14
  2324  0018                     _T1CON	set	24
  2325  0017                     _TMR1H	set	23
  2326  0016                     _TMR1L	set	22
  2327  005F                     _GIE	set	95
  2328  005B                     _IOCIE	set	91
  2329  0058                     _IOCIF	set	88
  2330  005E                     _PEIE	set	94
  2331  0060                     _RA0	set	96
  2332  0064                     _RA4	set	100
  2333  0066                     _RA6	set	102
  2334  0067                     _RA7	set	103
  2335  0068                     _RB0	set	104
  2336  0069                     _RB1	set	105
  2337  006A                     _RB2	set	106
  2338  006B                     _RB3	set	107
  2339  006D                     _RB5	set	109
  2340  0070                     _RC0	set	112
  2341  0071                     _RC1	set	113
  2342  0073                     _RC3	set	115
  2343  0074                     _RC4	set	116
  2344  0075                     _RC5	set	117
  2345  0088                     _TMR1IF	set	136
  2346  009D                     _ADCON0	set	157
  2347  009E                     _ADCON1	set	158
  2348  009C                     _ADRESH	set	156
  2349  009B                     _ADRESL	set	155
  2350  0099                     _OSCCON	set	153
  2351  008C                     _TRISA	set	140
  2352  008D                     _TRISB	set	141
  2353  008E                     _TRISC	set	142
  2354  0097                     _WDTCON	set	151
  2355  04E9                     _GO_nDONE	set	1257
  2356  0488                     _TMR1IE	set	1160
  2357  0117                     _FVRCON	set	279
  2358  010C                     _LATA	set	268
  2359  010D                     _LATB	set	269
  2360  010E                     _LATC	set	270
  2361  018C                     _ANSELA	set	396
  2362  018D                     _ANSELB	set	397
  2363  018E                     _ANSELC	set	398
  2364  0192                     _PMADRH	set	402
  2365  0191                     _PMADRL	set	401
  2366  0196                     _PMCON2	set	406
  2367  0194                     _PMDATH	set	404
  2368  0193                     _PMDATL	set	403
  2369  0CAE                     _CFGS	set	3246
  2370  0CAC                     _FREE	set	3244
  2371  0CAD                     _LWLO	set	3245
  2372  0CA8                     _RD	set	3240
  2373  0CA9                     _WR	set	3241
  2374  0CAA                     _WREN	set	3242
  2375  020D                     _WPUB	set	525
  2376  0396                     _IOCBF	set	918
  2377  0395                     _IOCBN	set	917
  2378  0394                     _IOCBP	set	916
  2379  1CB2                     _IOCBF2	set	7346
  2380                           
  2381                           ; #config settings
  2382  0000                     
  2383                           	psect	cinit
  2384  0021                     start_initialization:	
  2385  0021                     __initialization:	
  2386                           
  2387                           ; Clear objects allocated to BITCOMMON
  2388  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2389                           
  2390                           ; Clear objects allocated to BITBANK1
  2391  0022  0021               	movlb	1	; select bank1
  2392  0023  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2393                           
  2394                           ; Clear objects allocated to BANK1
  2395  0024  30A0               	movlw	low __pbssBANK1
  2396  0025  0084               	movwf	4
  2397  0026  3000               	movlw	high __pbssBANK1
  2398  0027  0085               	movwf	5
  2399  0028  3046               	movlw	70
  2400  0029  319A  22D3  3180   	fcall	clear_ram0
  2401                           
  2402                           ; Clear objects allocated to BANK2
  2403  002C  3020               	movlw	low __pbssBANK2
  2404  002D  0084               	movwf	4
  2405  002E  3001               	movlw	high __pbssBANK2
  2406  002F  0085               	movwf	5
  2407  0030  304C               	movlw	76
  2408  0031  319A  22D3  3180   	fcall	clear_ram0
  2409                           
  2410                           ; Clear objects allocated to BANK3
  2411  0034  30A0               	movlw	low __pbssBANK3
  2412  0035  0084               	movwf	4
  2413  0036  3001               	movlw	high __pbssBANK3
  2414  0037  0085               	movwf	5
  2415  0038  302C               	movlw	44
  2416  0039  319A  22D3  3180   	fcall	clear_ram0
  2417                           
  2418                           ; Clear objects allocated to BANK4
  2419  003C  3020               	movlw	low __pbssBANK4
  2420  003D  0084               	movwf	4
  2421  003E  3002               	movlw	high __pbssBANK4
  2422  003F  0085               	movwf	5
  2423  0040  3025               	movlw	37
  2424  0041  319A  22D3  3180   	fcall	clear_ram0
  2425                           
  2426                           ; Initialize objects allocated to BANK3
  2427  0044  309D               	movlw	low __pidataBANK3
  2428  0045  0084               	movwf	4
  2429  0046  309F               	movlw	(high __pidataBANK3)| (0+128)
  2430  0047  0085               	movwf	5
  2431  0048  30CC               	movlw	low __pdataBANK3
  2432  0049  0086               	movwf	6
  2433  004A  3001               	movlw	high __pdataBANK3
  2434  004B  0087               	movwf	7
  2435  004C  3020               	movlw	32
  2436  004D  319A  22CD         	fcall	init_ram
  2437  004F                     end_of_initialization:	
  2438                           ;End of C runtime variable initialization code
  2439                           
  2440  004F                     __end_of__initialization:	
  2441  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2442  0050  0020               	movlb	0
  2443  0051  3194  2CE9         	ljmp	_main	;jump to C main() function
  2444                           
  2445                           	psect	bitbssCOMMON
  2446  03E8                     __pbitbssCOMMON:	
  2447  03E8                     _Transceive_OK:	
  2448  03E8                     	ds	1
  2449                           
  2450                           	psect	bitbssBANK1
  2451  0778                     __pbitbssBANK1:	
  2452  0778                     _Receive_OK:	
  2453  0778                     	ds	1
  2454                           
  2455                           	psect	bssBANK1
  2456  00A0                     __pbssBANK1:	
  2457  00A0                     _RF1:	
  2458  00A0                     	ds	15
  2459  00AF                     _myMain:	
  2460  00AF                     	ds	13
  2461  00BC                     _DimmerIntr1:	
  2462  00BC                     	ds	12
  2463  00C8                     _CRC:	
  2464  00C8                     	ds	1
  2465  00C9                     _Cmd:	
  2466  00C9                     	ds	1
  2467  00CA                     _DelayOff:	
  2468  00CA                     	ds	1
  2469  00CB                     _DimmerIntr:	
  2470  00CB                     	ds	1
  2471  00CC                     _DimmerLights:	
  2472  00CC                     	ds	1
  2473  00CD                     _LED:	
  2474  00CD                     	ds	1
  2475  00CE                     _Light:	
  2476  00CE                     	ds	1
  2477  00CF                     _RSSI:	
  2478  00CF                     	ds	1
  2479  00D0                     _Rx_Length:	
  2480  00D0                     	ds	1
  2481  00D1                     _SPI0Buffer:	
  2482  00D1                     	ds	1
  2483  00D2                     _Sw:	
  2484  00D2                     	ds	1
  2485  00D3                     _SwDetect:	
  2486  00D3                     	ds	1
  2487  00D4                     _Tx_Length:	
  2488  00D4                     	ds	1
  2489  00D5                     _r_address:	
  2490  00D5                     	ds	1
  2491  00D6                     _r_data:	
  2492  00D6                     	ds	1
  2493  00D7                     _s_data:	
  2494  00D7                     	ds	1
  2495  00D8                     _Temp:	
  2496  00D8                     	ds	14
  2497                           
  2498                           	psect	bssBANK2
  2499  0120                     __pbssBANK2:	
  2500  0120                     _Buz1:	
  2501  0120                     	ds	12
  2502  012C                     _Dimmer:	
  2503  012C                     	ds	5
  2504  0131                     _Timer1:	
  2505  0131                     	ds	3
  2506  0134                     _RF_Count:	
  2507  0134                     	ds	2
  2508  0136                     _WDT:	
  2509  0136                     	ds	2
  2510  0138                     _Load:	
  2511  0138                     	ds	40
  2512  0160                     _DimmerLights1:	
  2513  0160                     	ds	8
  2514  0168                     _VarErrLED:	
  2515  0168                     	ds	4
  2516                           
  2517                           	psect	bssBANK3
  2518  01A0                     __pbssBANK3:	
  2519  01A0                     _RF_Data:	
  2520  01A0                     	ds	30
  2521  01BE                     _Sw1:	
  2522  01BE                     	ds	9
  2523  01C7                     _DlySw1:	
  2524  01C7                     	ds	5
  2525                           
  2526                           	psect	dataBANK3
  2527  01CC                     __pdataBANK3:	
  2528  01CC                     __product:	
  2529  01CC                     	ds	32
  2530                           
  2531                           	psect	bssBANK4
  2532  0220                     __pbssBANK4:	
  2533  0220                     _Memory:	
  2534  0220                     	ds	37
  2535                           
  2536                           	psect	clrtext
  2537  1AD3                     clear_ram0:	
  2538                           ;	Called with FSR0 containing the base address, and
  2539                           ;	WREG with the size to clear
  2540                           
  2541  1AD3  0064               	clrwdt	;clear the watchdog before getting into this loop
  2542  1AD4                     clrloop0:	
  2543  1AD4  0180               	clrf	0	;clear RAM location pointed to by FSR
  2544  1AD5  3101               	addfsr 0,1
  2545  1AD6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2546  1AD7  2AD4               	goto	clrloop0	;have we reached the end yet?
  2547  1AD8  3400               	retlw	0	;all done for this memory range, return
  2548                           
  2549                           	psect	inittext
  2550  1ACD                     init_ram:	
  2551  1ACD  00FE               	movwf	126
  2552  1ACE                     initloop:	
  2553  1ACE  0012               	moviw fsr0++
  2554  1ACF  001E               	movwi fsr1++
  2555  1AD0  0BFE               	decfsz	126,f
  2556  1AD1  2ACE               	goto	initloop
  2557  1AD2  3400               	retlw	0
  2558                           
  2559                           	psect	cstackBANK1
  2560  00E6                     __pcstackBANK1:	
  2561  00E6                     ??_getRxData:	
  2562  00E6                     setDimmerLights_OnOff@lights:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565                           
  2566                           ; 1 bytes @ 0x0
  2567  00E6                     	ds	1
  2568  00E7                     setDimmerLights_Main@lights:	
  2569  00E7                     getRxData@error:	
  2570                           ; 1 bytes @ 0x1
  2571                           
  2572                           
  2573                           ; 1 bytes @ 0x1
  2574  00E7                     	ds	1
  2575  00E8                     ??_setRF_Main:	
  2576                           
  2577                           ; 0 bytes @ 0x2
  2578  00E8                     	ds	1
  2579  00E9                     setRF_Main@error:	
  2580                           
  2581                           ; 1 bytes @ 0x3
  2582  00E9                     	ds	1
  2583  00EA                     ?_main:	
  2584  00EA                     main@argc:	
  2585                           ; 2 bytes @ 0x4
  2586                           
  2587                           
  2588                           ; 2 bytes @ 0x4
  2589  00EA                     	ds	2
  2590  00EC                     main@argv:	
  2591                           
  2592                           ; 2 bytes @ 0x6
  2593  00EC                     	ds	2
  2594                           
  2595                           	psect	cstackCOMMON
  2596  0070                     __pcstackCOMMON:	
  2597  0070                     ?_CC2500_WriteCommand:	
  2598  0070                     ?_RF_Timeout_Counter:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_setRF_TimeoutCleared:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_CC2500_WriteByte:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_CC2500_ReadStatus:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_CC2500_ReadByte:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_PowerRST:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_CC2500_InitSetREG:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_CC2500_InitPATable:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_CC2500_ClearTXFIFO:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_CC2500_ClearRXFIFO:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_CC2500_FrequencyCabr:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_CC2500_SIDLEMode:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_DlyOff_Initialization:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_DlyOff_Main:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setDimmerLights_SwOn:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setDimmerLights_SwOff:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setMemory_Modify:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setDimmerLights_Initialization:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setDimmerLights_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setDimmerLights_DimmingClose:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setDimmerLights_Line:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_setTxData:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setRF_TransceiveGO:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setLED_Initialization:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setLED_Main:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_Fosc_Set:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_IO_Set:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_TMR1_Set:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_ADC_Set:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_IOC_Set:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_WDT_Set:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_TMR1_ISR:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_IOC_ISR:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Timeout_Counter:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_set_TimeoutCleared:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_Flash_Memory_Write:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_Flash_Memory_Modify:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_WDT_Clearing:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_myMain_Initialization:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_Temp_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_Load_Initialization:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_Switch_Initialization:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_RF_Initialization:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_getLoad_AD:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_getTemp_AD:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_my_MainTimer:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_Temp_Main:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Load_Main:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Switch_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_RF_Main:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_Exception_Main:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setLoad_AH_AL_Restore:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setTemp_Initialization:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_setTemp_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_setOverTemp_ADV_Restore:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setRF_Initialization:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_setRF_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_RF_RxDisable:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_getRxData:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setLog_Code:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setControl_Lights_Table:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setRFSW_Control:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setRFSW_AdjControl:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_setRF_AdjControl:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setSw_Initialization:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_setSw_Main:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_Buzzer_Initialization:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_Buzzer_Main:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_CC2500_TxData:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_CC2500_RxData:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_CC2500_PowerOnInitial:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_DelayOffPointSelect:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_DelayOff_Initialization:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_DelayOff_Main:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_DimmerIntr_Initialization:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_DimmerLights_SelectPointer:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_DimmerLights_Initialization:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DimmerLights_Main:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DimmerLights_TMR_1:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ??_DimmerLights_TMR_1:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DimmerLights_IOC_1:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_LedPointSelect:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_LED_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_LED_Main:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_Mcu_Initialization:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_ISR:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_Flash_Memory_Initialization:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_Flash_Memory_Main:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_Flash_Memory_Unlock:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_Flash_Memory_Erasing:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_setMemory_LoopSave:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_WDT_Main:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_setRF_Learn:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_TouchPower:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_SwPointSelect:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_getDimmerLights_Status:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_getDimmerLights_ValueToPercent:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_getDimmerLights_PercentToValue:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_getLoad_OK:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ?_getMain_All_Error_Status:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_getMain_All_LightsStatus:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_getDimmerLights_Allow_Condition:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_getCmd_Status:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_Flash_Memory_Read:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_getAll_Sw_KeyStatus:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_getRF_KeyStatus:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_getSw_KeyStatus:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_getDelayOff_GO:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_getDimmerIntr_DimmingValue:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDimmerLights_Line:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getDimmer_LoadGO:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getDimmer_Load_Status:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getMain_Lights_Count:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?i1___lbdiv:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     setDimmerLights_Initialization@lights:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     getDimmerLights_Allow_Condition@lights:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     getSw_KeyStatus@sw:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     i1___lbdiv@divisor:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955                           
  2956                           ; 1 bytes @ 0x0
  2957  0070                     	ds	1
  2958  0071                     ??_TMR1_ISR:	
  2959  0071                     ??i1___lbdiv:	
  2960                           ; 0 bytes @ 0x1
  2961                           
  2962                           
  2963                           ; 0 bytes @ 0x1
  2964  0071                     	ds	1
  2965  0072                     i1___lbdiv@dividend:	
  2966                           
  2967                           ; 1 bytes @ 0x2
  2968  0072                     	ds	1
  2969  0073                     i1___lbdiv@counter:	
  2970                           
  2971                           ; 1 bytes @ 0x3
  2972  0073                     	ds	1
  2973  0074                     i1___lbdiv@quotient:	
  2974                           
  2975                           ; 1 bytes @ 0x4
  2976  0074                     	ds	1
  2977  0075                     ?i1_Division:	
  2978  0075                     i1Division@num:	
  2979                           ; 1 bytes @ 0x5
  2980                           
  2981                           
  2982                           ; 1 bytes @ 0x5
  2983  0075                     	ds	1
  2984  0076                     ??i1_Division:	
  2985                           
  2986                           ; 0 bytes @ 0x6
  2987  0076                     	ds	2
  2988  0078                     i1Division@value:	
  2989                           
  2990                           ; 1 bytes @ 0x8
  2991  0078                     	ds	1
  2992  0079                     i1Division@result:	
  2993                           
  2994                           ; 1 bytes @ 0x9
  2995  0079                     	ds	1
  2996  007A                     ??_DimmerLights_IOC_1:	
  2997                           
  2998                           ; 0 bytes @ 0xA
  2999  007A                     	ds	2
  3000  007C                     ??_IOC_ISR:	
  3001  007C                     ??_ISR:	
  3002                           ; 0 bytes @ 0xC
  3003                           
  3004                           
  3005                           ; 0 bytes @ 0xC
  3006  007C                     	ds	1
  3007                           
  3008                           	psect	cstackBANK0
  3009  0020                     __pcstackBANK0:	
  3010  0020                     ??_RF_Timeout_Counter:	
  3011  0020                     ??_setRF_TimeoutCleared:	
  3012                           ; 0 bytes @ 0x0
  3013                           
  3014  0020                     ??_CC2500_WriteByte:	
  3015                           ; 0 bytes @ 0x0
  3016                           
  3017  0020                     ??_CC2500_ReadByte:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ?_DelayTime_1us:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_setMemory_Modify:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ??_setDimmerLights_Initialization:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ??_getLoad_OK:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_getMain_All_Error_Status:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ??_getMain_All_LightsStatus:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_setDimmerLights_Line:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_getCmd_Status:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ?_setCmd_Status:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_setTxData:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_setRF_TransceiveGO:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_Fosc_Set:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_IO_Set:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_TMR1_Set:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_ADC_Set:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ??_IOC_Set:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_WDT_Set:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_Timeout_Counter:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_set_TimeoutCleared:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_Flash_Memory_Read:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ?_setMemory_Data:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_Flash_Memory_Write:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ??_getAll_Sw_KeyStatus:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_WDT_Clearing:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_myMain_Initialization:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_Temp_Initialization:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_setLoad_AH_AL_Restore:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_setTemp_Initialization:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_setOverTemp_ADV_Restore:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_setRF_Initialization:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ??_getRF_KeyStatus:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ??_getSw_KeyStatus:	
  3114                           ; 0 bytes @ 0x0
  3115                           
  3116  0020                     ??_Buzzer_Initialization:	
  3117                           ; 0 bytes @ 0x0
  3118                           
  3119  0020                     ??_Buzzer_Main:	
  3120                           ; 0 bytes @ 0x0
  3121                           
  3122  0020                     ??_DelayOffPointSelect:	
  3123                           ; 0 bytes @ 0x0
  3124                           
  3125  0020                     ?_setDimmerIntr_ControlStatus:	
  3126                           ; 0 bytes @ 0x0
  3127                           
  3128  0020                     ??_getDimmerIntr_DimmingValue:	
  3129                           ; 0 bytes @ 0x0
  3130                           
  3131  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3132                           ; 0 bytes @ 0x0
  3133                           
  3134  0020                     ?_setDimmerIntr_Dimming_RF:	
  3135                           ; 0 bytes @ 0x0
  3136                           
  3137  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3138                           ; 0 bytes @ 0x0
  3139                           
  3140  0020                     ??_DimmerLights_SelectPointer:	
  3141                           ; 0 bytes @ 0x0
  3142                           
  3143  0020                     ??_getDimmerLights_Line:	
  3144                           ; 0 bytes @ 0x0
  3145                           
  3146  0020                     ??_getDimmer_LoadGO:	
  3147                           ; 0 bytes @ 0x0
  3148                           
  3149  0020                     ??_getDimmer_Load_Status:	
  3150                           ; 0 bytes @ 0x0
  3151                           
  3152  0020                     ??_LedPointSelect:	
  3153                           ; 0 bytes @ 0x0
  3154                           
  3155  0020                     ??_Flash_Memory_Unlock:	
  3156                           ; 0 bytes @ 0x0
  3157                           
  3158  0020                     ??_Flash_Memory_Erasing:	
  3159                           ; 0 bytes @ 0x0
  3160                           
  3161  0020                     ??_setMemory_LoopSave:	
  3162                           ; 0 bytes @ 0x0
  3163                           
  3164  0020                     ??_WDT_Main:	
  3165                           ; 0 bytes @ 0x0
  3166                           
  3167  0020                     ??_getMain_Lights_Count:	
  3168                           ; 0 bytes @ 0x0
  3169                           
  3170  0020                     ??_setRF_Learn:	
  3171                           ; 0 bytes @ 0x0
  3172                           
  3173  0020                     ??_TouchPower:	
  3174                           ; 0 bytes @ 0x0
  3175                           
  3176  0020                     ??_SwPointSelect:	
  3177                           ; 0 bytes @ 0x0
  3178                           
  3179  0020                     ?___bmul:	
  3180                           ; 0 bytes @ 0x0
  3181                           
  3182  0020                     ?___lbdiv:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185  0020                     ?_getBuz_GO:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188  0020                     ?_getAD:	
  3189                           ; 2 bytes @ 0x0
  3190                           
  3191  0020                     ?___wmul:	
  3192                           ; 2 bytes @ 0x0
  3193                           
  3194  0020                     ?___awdiv:	
  3195                           ; 2 bytes @ 0x0
  3196                           
  3197  0020                     ?___lwdiv:	
  3198                           ; 2 bytes @ 0x0
  3199                           
  3200  0020                     ?___ftpack:	
  3201                           ; 2 bytes @ 0x0
  3202                           
  3203  0020                     setDimmerIntr_ControlStatus@command:	
  3204                           ; 3 bytes @ 0x0
  3205                           
  3206  0020                     setDimmerIntr_Dimming_Sw@command:	
  3207                           ; 1 bytes @ 0x0
  3208                           
  3209  0020                     setDimmerIntr_Dimming_RF@command:	
  3210                           ; 1 bytes @ 0x0
  3211                           
  3212  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3213                           ; 1 bytes @ 0x0
  3214                           
  3215  0020                     setDimmerLights_Line@lights:	
  3216                           ; 1 bytes @ 0x0
  3217                           
  3218  0020                     getDimmerLights_Line@line:	
  3219                           ; 1 bytes @ 0x0
  3220                           
  3221  0020                     getDimmer_LoadGO@loadgo:	
  3222                           ; 1 bytes @ 0x0
  3223                           
  3224  0020                     getDimmer_Load_Status@status:	
  3225                           ; 1 bytes @ 0x0
  3226                           
  3227  0020                     getAD@adcon1:	
  3228                           ; 1 bytes @ 0x0
  3229                           
  3230  0020                     setMemory_Data@data:	
  3231                           ; 1 bytes @ 0x0
  3232                           
  3233  0020                     getMain_All_LightsStatus@status:	
  3234                           ; 1 bytes @ 0x0
  3235                           
  3236  0020                     getMain_Lights_Count@count:	
  3237                           ; 1 bytes @ 0x0
  3238                           
  3239  0020                     setCmd_Status@cmd:	
  3240                           ; 1 bytes @ 0x0
  3241                           
  3242  0020                     getCmd_Status@number:	
  3243                           ; 1 bytes @ 0x0
  3244                           
  3245  0020                     getLoad_OK@ok:	
  3246                           ; 1 bytes @ 0x0
  3247                           
  3248  0020                     ___bmul@multiplicand:	
  3249                           ; 1 bytes @ 0x0
  3250                           
  3251  0020                     ___lbdiv@divisor:	
  3252                           ; 1 bytes @ 0x0
  3253                           
  3254  0020                     DelayTime_1us@count:	
  3255                           ; 1 bytes @ 0x0
  3256                           
  3257  0020                     ___wmul@multiplier:	
  3258                           ; 2 bytes @ 0x0
  3259                           
  3260  0020                     ___awdiv@divisor:	
  3261                           ; 2 bytes @ 0x0
  3262                           
  3263  0020                     ___lwdiv@divisor:	
  3264                           ; 2 bytes @ 0x0
  3265                           
  3266  0020                     ___ftpack@arg:	
  3267                           ; 2 bytes @ 0x0
  3268                           
  3269                           
  3270                           ; 3 bytes @ 0x0
  3271  0020                     	ds	1
  3272  0021                     ??_getDimmerLights_Allow_Condition:	
  3273  0021                     ??_setCmd_Status:	
  3274                           ; 0 bytes @ 0x1
  3275                           
  3276  0021                     ??_setMemory_Data:	
  3277                           ; 0 bytes @ 0x1
  3278                           
  3279  0021                     ??_RF_Initialization:	
  3280                           ; 0 bytes @ 0x1
  3281                           
  3282  0021                     ??_setDimmerIntr_ControlStatus:	
  3283                           ; 0 bytes @ 0x1
  3284                           
  3285  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3286                           ; 0 bytes @ 0x1
  3287                           
  3288  0021                     ??_setDimmerIntr_Dimming_RF:	
  3289                           ; 0 bytes @ 0x1
  3290                           
  3291  0021                     ??_Mcu_Initialization:	
  3292                           ; 0 bytes @ 0x1
  3293                           
  3294  0021                     ??___bmul:	
  3295                           ; 0 bytes @ 0x1
  3296                           
  3297  0021                     ??___lbdiv:	
  3298                           ; 0 bytes @ 0x1
  3299                           
  3300  0021                     CC2500_WriteByte@loop_a:	
  3301                           ; 0 bytes @ 0x1
  3302                           
  3303  0021                     CC2500_ReadByte@loop_b:	
  3304                           ; 1 bytes @ 0x1
  3305                           
  3306  0021                     DelayOffPointSelect@sw:	
  3307                           ; 1 bytes @ 0x1
  3308                           
  3309  0021                     getDimmerIntr_DimmingValue@lights:	
  3310                           ; 1 bytes @ 0x1
  3311                           
  3312  0021                     DimmerLights_SelectPointer@lights:	
  3313                           ; 1 bytes @ 0x1
  3314                           
  3315  0021                     LedPointSelect@led:	
  3316                           ; 1 bytes @ 0x1
  3317                           
  3318  0021                     Flash_Memory_Read@i:	
  3319                           ; 1 bytes @ 0x1
  3320                           
  3321  0021                     Flash_Memory_Write@i:	
  3322                           ; 1 bytes @ 0x1
  3323                           
  3324  0021                     setMemory_Modify@command:	
  3325                           ; 1 bytes @ 0x1
  3326                           
  3327  0021                     setMemory_LoopSave@command:	
  3328                           ; 1 bytes @ 0x1
  3329                           
  3330  0021                     getMain_Lights_Count@status1:	
  3331                           ; 1 bytes @ 0x1
  3332                           
  3333  0021                     getCmd_Status@cmd:	
  3334                           ; 1 bytes @ 0x1
  3335                           
  3336  0021                     setLoad_AH_AL_Restore@i:	
  3337                           ; 1 bytes @ 0x1
  3338                           
  3339  0021                     setRF_Learn@command:	
  3340                           ; 1 bytes @ 0x1
  3341                           
  3342  0021                     getRF_KeyStatus@key:	
  3343                           ; 1 bytes @ 0x1
  3344                           
  3345  0021                     setRF_TransceiveGO@command:	
  3346                           ; 1 bytes @ 0x1
  3347                           
  3348  0021                     SwPointSelect@sw:	
  3349                           ; 1 bytes @ 0x1
  3350                           
  3351  0021                     getSw_KeyStatus@status:	
  3352                           ; 1 bytes @ 0x1
  3353                           
  3354  0021                     getAll_Sw_KeyStatus@status:	
  3355                           ; 1 bytes @ 0x1
  3356                           
  3357  0021                     _getMain_All_Error_Status$3612:	
  3358                           ; 1 bytes @ 0x1
  3359                           
  3360  0021                     setOverTemp_ADV_Restore@i:	
  3361                           ; 2 bytes @ 0x1
  3362                           
  3363                           
  3364                           ; 2 bytes @ 0x1
  3365  0021                     	ds	1
  3366  0022                     ??_CC2500_WriteCommand:	
  3367  0022                     ??_CC2500_ReadStatus:	
  3368                           ; 0 bytes @ 0x2
  3369                           
  3370  0022                     ??_DelayTime_1us:	
  3371                           ; 0 bytes @ 0x2
  3372                           
  3373  0022                     ?_CC2500_WriteREG:	
  3374                           ; 0 bytes @ 0x2
  3375                           
  3376  0022                     ??_DlyOff_Initialization:	
  3377                           ; 0 bytes @ 0x2
  3378                           
  3379  0022                     ??_getDimmerLights_Status:	
  3380                           ; 0 bytes @ 0x2
  3381                           
  3382  0022                     ??_setDimmerLights_SwOff:	
  3383                           ; 0 bytes @ 0x2
  3384                           
  3385  0022                     ?_setLED:	
  3386                           ; 0 bytes @ 0x2
  3387                           
  3388  0022                     ??_setLED_Main:	
  3389                           ; 0 bytes @ 0x2
  3390                           
  3391  0022                     ??_Load_Initialization:	
  3392                           ; 0 bytes @ 0x2
  3393                           
  3394  0022                     ??_getBuz_GO:	
  3395                           ; 0 bytes @ 0x2
  3396                           
  3397  0022                     ??_getDelayOff_GO:	
  3398                           ; 0 bytes @ 0x2
  3399                           
  3400  0022                     ?_setDimmerLights_DimmingRun:	
  3401                           ; 0 bytes @ 0x2
  3402                           
  3403  0022                     CC2500_WriteREG@value:	
  3404                           ; 0 bytes @ 0x2
  3405                           
  3406  0022                     DlyOff_Initialization@sw:	
  3407                           ; 1 bytes @ 0x2
  3408                           
  3409  0022                     getDelayOff_GO@sw:	
  3410                           ; 1 bytes @ 0x2
  3411                           
  3412  0022                     setDimmerIntr_ControlStatus@lights:	
  3413                           ; 1 bytes @ 0x2
  3414                           
  3415  0022                     getDimmerIntr_DimmingValue@value:	
  3416                           ; 1 bytes @ 0x2
  3417                           
  3418  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3419                           ; 1 bytes @ 0x2
  3420                           
  3421  0022                     setDimmerIntr_Dimming_RF@lights:	
  3422                           ; 1 bytes @ 0x2
  3423                           
  3424  0022                     setDimmerLights_SwOff@sw:	
  3425                           ; 1 bytes @ 0x2
  3426                           
  3427  0022                     getDimmerLights_Allow_Condition@allow:	
  3428                           ; 1 bytes @ 0x2
  3429                           
  3430  0022                     getDimmerLights_Status@lights:	
  3431                           ; 1 bytes @ 0x2
  3432                           
  3433  0022                     setDimmerLights_DimmingRun@command:	
  3434                           ; 1 bytes @ 0x2
  3435                           
  3436  0022                     setLED@command:	
  3437                           ; 1 bytes @ 0x2
  3438                           
  3439  0022                     Flash_Memory_Read@address:	
  3440                           ; 1 bytes @ 0x2
  3441                           
  3442  0022                     setMemory_Data@address:	
  3443                           ; 1 bytes @ 0x2
  3444                           
  3445  0022                     setCmd_Status@number:	
  3446                           ; 1 bytes @ 0x2
  3447                           
  3448  0022                     _getRF_KeyStatus$5410:	
  3449                           ; 1 bytes @ 0x2
  3450                           
  3451  0022                     _getSw_KeyStatus$6462:	
  3452                           ; 1 bytes @ 0x2
  3453                           
  3454  0022                     _getAll_Sw_KeyStatus$6465:	
  3455                           ; 1 bytes @ 0x2
  3456                           
  3457  0022                     ___bmul@product:	
  3458                           ; 1 bytes @ 0x2
  3459                           
  3460  0022                     ___lbdiv@dividend:	
  3461                           ; 1 bytes @ 0x2
  3462                           
  3463  0022                     DelayTime_1us@i:	
  3464                           ; 1 bytes @ 0x2
  3465                           
  3466  0022                     ___wmul@multiplicand:	
  3467                           ; 2 bytes @ 0x2
  3468                           
  3469  0022                     ___awdiv@dividend:	
  3470                           ; 2 bytes @ 0x2
  3471                           
  3472  0022                     ___lwdiv@dividend:	
  3473                           ; 2 bytes @ 0x2
  3474                           
  3475                           
  3476                           ; 2 bytes @ 0x2
  3477  0022                     	ds	1
  3478  0023                     ??_CC2500_WriteREG:	
  3479  0023                     ??_setDimmerLights_DimmingClose:	
  3480                           ; 0 bytes @ 0x3
  3481                           
  3482  0023                     ??_setLED:	
  3483                           ; 0 bytes @ 0x3
  3484                           
  3485  0023                     ??_DelayOff_Initialization:	
  3486                           ; 0 bytes @ 0x3
  3487                           
  3488  0023                     ??_setDimmerLights_DimmingRun:	
  3489                           ; 0 bytes @ 0x3
  3490                           
  3491  0023                     ??_getAD:	
  3492                           ; 0 bytes @ 0x3
  3493                           
  3494  0023                     CC2500_WriteCommand@command:	
  3495                           ; 0 bytes @ 0x3
  3496                           
  3497  0023                     CC2500_ReadStatus@status_addr:	
  3498                           ; 1 bytes @ 0x3
  3499                           
  3500  0023                     getDelayOff_GO@go:	
  3501                           ; 1 bytes @ 0x3
  3502                           
  3503  0023                     _getDimmerLights_Allow_Condition$2283:	
  3504                           ; 1 bytes @ 0x3
  3505                           
  3506  0023                     getDimmerLights_Status@status:	
  3507                           ; 1 bytes @ 0x3
  3508                           
  3509  0023                     setLED@led:	
  3510                           ; 1 bytes @ 0x3
  3511                           
  3512  0023                     getAD@adcon0:	
  3513                           ; 1 bytes @ 0x3
  3514                           
  3515  0023                     Flash_Memory_Read@ret:	
  3516                           ; 1 bytes @ 0x3
  3517                           
  3518  0023                     ___bmul@multiplier:	
  3519                           ; 1 bytes @ 0x3
  3520                           
  3521  0023                     ___ftpack@exp:	
  3522                           ; 1 bytes @ 0x3
  3523                           
  3524  0023                     ___lbdiv@counter:	
  3525                           ; 1 bytes @ 0x3
  3526                           
  3527  0023                     _getMain_All_Error_Status$3613:	
  3528                           ; 1 bytes @ 0x3
  3529                           
  3530                           
  3531                           ; 2 bytes @ 0x3
  3532  0023                     	ds	1
  3533  0024                     ??_CC2500_ClearTXFIFO:	
  3534  0024                     ??_CC2500_ClearRXFIFO:	
  3535                           ; 0 bytes @ 0x4
  3536                           
  3537  0024                     ??_CC2500_SIDLEMode:	
  3538                           ; 0 bytes @ 0x4
  3539                           
  3540  0024                     ??_setLED_Initialization:	
  3541                           ; 0 bytes @ 0x4
  3542                           
  3543  0024                     ??_Flash_Memory_Modify:	
  3544                           ; 0 bytes @ 0x4
  3545                           
  3546  0024                     ??_getLoad_AD:	
  3547                           ; 0 bytes @ 0x4
  3548                           
  3549  0024                     ??_getTemp_AD:	
  3550                           ; 0 bytes @ 0x4
  3551                           
  3552  0024                     ??_RF_RxDisable:	
  3553                           ; 0 bytes @ 0x4
  3554                           
  3555  0024                     ??_setRF_AdjControl:	
  3556                           ; 0 bytes @ 0x4
  3557                           
  3558  0024                     ??_setSw_Initialization:	
  3559                           ; 0 bytes @ 0x4
  3560                           
  3561  0024                     ??_CC2500_TxData:	
  3562                           ; 0 bytes @ 0x4
  3563                           
  3564  0024                     ??_CC2500_RxData:	
  3565                           ; 0 bytes @ 0x4
  3566                           
  3567  0024                     ??_Flash_Memory_Initialization:	
  3568                           ; 0 bytes @ 0x4
  3569                           
  3570  0024                     ??___wmul:	
  3571                           ; 0 bytes @ 0x4
  3572                           
  3573  0024                     ??___awdiv:	
  3574                           ; 0 bytes @ 0x4
  3575                           
  3576  0024                     ??___lwdiv:	
  3577                           ; 0 bytes @ 0x4
  3578                           
  3579  0024                     CC2500_WriteREG@w_addr:	
  3580                           ; 0 bytes @ 0x4
  3581                           
  3582  0024                     setDimmerLights_DimmingRun@lights:	
  3583                           ; 1 bytes @ 0x4
  3584                           
  3585  0024                     setLED_Initialization@led:	
  3586                           ; 1 bytes @ 0x4
  3587                           
  3588  0024                     setLED_Main@led:	
  3589                           ; 1 bytes @ 0x4
  3590                           
  3591  0024                     setSw_Initialization@sw:	
  3592                           ; 1 bytes @ 0x4
  3593                           
  3594  0024                     ___ftpack@sign:	
  3595                           ; 1 bytes @ 0x4
  3596                           
  3597  0024                     ___lbdiv@quotient:	
  3598                           ; 1 bytes @ 0x4
  3599                           
  3600  0024                     getBuz_GO@i:	
  3601                           ; 1 bytes @ 0x4
  3602                           
  3603  0024                     DelayTime_1us@j:	
  3604                           ; 2 bytes @ 0x4
  3605                           
  3606  0024                     ___wmul@product:	
  3607                           ; 2 bytes @ 0x4
  3608                           
  3609                           
  3610                           ; 2 bytes @ 0x4
  3611  0024                     	ds	1
  3612  0025                     ??_CC2500_InitSetREG:	
  3613  0025                     ??_CC2500_InitPATable:	
  3614                           ; 0 bytes @ 0x5
  3615                           
  3616  0025                     ??_Switch_Initialization:	
  3617                           ; 0 bytes @ 0x5
  3618                           
  3619  0025                     ??___ftpack:	
  3620                           ; 0 bytes @ 0x5
  3621                           
  3622  0025                     ??_LED_Initialization:	
  3623                           ; 0 bytes @ 0x5
  3624                           
  3625  0025                     ??_LED_Main:	
  3626                           ; 0 bytes @ 0x5
  3627                           
  3628  0025                     ?_Division:	
  3629                           ; 0 bytes @ 0x5
  3630                           
  3631  0025                     CC2500_TxData@loop_e:	
  3632                           ; 1 bytes @ 0x5
  3633                           
  3634  0025                     CC2500_RxData@loop_f:	
  3635                           ; 1 bytes @ 0x5
  3636                           
  3637  0025                     Division@num:	
  3638                           ; 1 bytes @ 0x5
  3639                           
  3640  0025                     Flash_Memory_Initialization@value:	
  3641                           ; 1 bytes @ 0x5
  3642                           
  3643  0025                     Flash_Memory_Modify@i:	
  3644                           ; 1 bytes @ 0x5
  3645                           
  3646  0025                     getMain_All_Error_Status@command:	
  3647                           ; 1 bytes @ 0x5
  3648                           
  3649  0025                     getTemp_AD@channel:	
  3650                           ; 1 bytes @ 0x5
  3651                           
  3652  0025                     setRF_AdjControl@status:	
  3653                           ; 1 bytes @ 0x5
  3654                           
  3655  0025                     ___awdiv@counter:	
  3656                           ; 1 bytes @ 0x5
  3657                           
  3658  0025                     ___lwdiv@quotient:	
  3659                           ; 1 bytes @ 0x5
  3660                           
  3661                           
  3662                           ; 2 bytes @ 0x5
  3663  0025                     	ds	1
  3664  0026                     ??_CC2500_PowerRST:	
  3665  0026                     ??_CC2500_FrequencyCabr:	
  3666                           ; 0 bytes @ 0x6
  3667                           
  3668  0026                     ??_Division:	
  3669                           ; 0 bytes @ 0x6
  3670                           
  3671  0026                     ??_Flash_Memory_Main:	
  3672                           ; 0 bytes @ 0x6
  3673                           
  3674  0026                     CC2500_InitSetREG@temp1:	
  3675                           ; 0 bytes @ 0x6
  3676                           
  3677  0026                     CC2500_InitPATable@temp:	
  3678                           ; 1 bytes @ 0x6
  3679                           
  3680  0026                     getMain_All_Error_Status@status:	
  3681                           ; 1 bytes @ 0x6
  3682                           
  3683  0026                     getLoad_AD@channel:	
  3684                           ; 1 bytes @ 0x6
  3685                           
  3686  0026                     setRF_AdjControl@sw:	
  3687                           ; 1 bytes @ 0x6
  3688                           
  3689  0026                     ___awdiv@sign:	
  3690                           ; 1 bytes @ 0x6
  3691                           
  3692  0026                     getTemp_AD@ADRES:	
  3693                           ; 1 bytes @ 0x6
  3694                           
  3695                           
  3696                           ; 2 bytes @ 0x6
  3697  0026                     	ds	1
  3698  0027                     CC2500_InitSetREG@temp2:	
  3699  0027                     CC2500_InitPATable@loop_d:	
  3700                           ; 1 bytes @ 0x7
  3701                           
  3702  0027                     Flash_Memory_Main@key_Status:	
  3703                           ; 1 bytes @ 0x7
  3704                           
  3705  0027                     getLoad_AD@k:	
  3706                           ; 1 bytes @ 0x7
  3707                           
  3708  0027                     ___lwdiv@counter:	
  3709                           ; 1 bytes @ 0x7
  3710                           
  3711  0027                     ___awdiv@quotient:	
  3712                           ; 1 bytes @ 0x7
  3713                           
  3714                           
  3715                           ; 2 bytes @ 0x7
  3716  0027                     	ds	1
  3717  0028                     ??_Load_Main:	
  3718  0028                     ?___awtoft:	
  3719                           ; 0 bytes @ 0x8
  3720                           
  3721  0028                     CC2500_InitSetREG@loop_c:	
  3722                           ; 3 bytes @ 0x8
  3723                           
  3724  0028                     Division@value:	
  3725                           ; 1 bytes @ 0x8
  3726                           
  3727  0028                     _Flash_Memory_Main$3152:	
  3728                           ; 1 bytes @ 0x8
  3729                           
  3730  0028                     getLoad_AD@j:	
  3731                           ; 1 bytes @ 0x8
  3732                           
  3733  0028                     ___awtoft@c:	
  3734                           ; 1 bytes @ 0x8
  3735                           
  3736                           
  3737                           ; 2 bytes @ 0x8
  3738  0028                     	ds	1
  3739  0029                     ?_setBuz:	
  3740  0029                     ??_CC2500_PowerOnInitial:	
  3741                           ; 0 bytes @ 0x9
  3742                           
  3743  0029                     Division@result:	
  3744                           ; 0 bytes @ 0x9
  3745                           
  3746  0029                     setBuz@time:	
  3747                           ; 1 bytes @ 0x9
  3748                           
  3749  0029                     getLoad_AD@ADRES:	
  3750                           ; 2 bytes @ 0x9
  3751                           
  3752                           
  3753                           ; 2 bytes @ 0x9
  3754  0029                     	ds	1
  3755  002A                     _Load_Main$3987:	
  3756                           
  3757                           ; 2 bytes @ 0xA
  3758  002A                     	ds	1
  3759  002B                     ??_setBuz:	
  3760  002B                     ??___awtoft:	
  3761                           ; 0 bytes @ 0xB
  3762                           
  3763  002B                     getLoad_AD@i:	
  3764                           ; 0 bytes @ 0xB
  3765                           
  3766                           
  3767                           ; 1 bytes @ 0xB
  3768  002B                     	ds	1
  3769  002C                     setBuz@count:	
  3770  002C                     Load_Main@error:	
  3771                           ; 1 bytes @ 0xC
  3772                           
  3773                           
  3774                           ; 1 bytes @ 0xC
  3775  002C                     	ds	1
  3776  002D                     ??_setDimmerLights_SwOn:	
  3777  002D                     ??_my_MainTimer:	
  3778                           ; 0 bytes @ 0xD
  3779                           
  3780  002D                     ??_Exception_Main:	
  3781                           ; 0 bytes @ 0xD
  3782                           
  3783  002D                     setDimmerLights_SwOn@sw:	
  3784                           ; 0 bytes @ 0xD
  3785                           
  3786  002D                     Load_Main@ErrorCountValue:	
  3787                           ; 1 bytes @ 0xD
  3788                           
  3789  002D                     ___awtoft@sign:	
  3790                           ; 1 bytes @ 0xD
  3791                           
  3792                           
  3793                           ; 1 bytes @ 0xD
  3794  002D                     	ds	1
  3795  002E                     ?___ftdiv:	
  3796  002E                     ?___ftmul:	
  3797                           ; 3 bytes @ 0xE
  3798                           
  3799  002E                     setDimmerLights_SwOn@idle:	
  3800                           ; 3 bytes @ 0xE
  3801                           
  3802  002E                     Exception_Main@status:	
  3803                           ; 1 bytes @ 0xE
  3804                           
  3805  002E                     Load_Main@Load_RunStatus:	
  3806                           ; 1 bytes @ 0xE
  3807                           
  3808  002E                     ___ftdiv@f2:	
  3809                           ; 1 bytes @ 0xE
  3810                           
  3811  002E                     ___ftmul@f1:	
  3812                           ; 3 bytes @ 0xE
  3813                           
  3814                           
  3815                           ; 3 bytes @ 0xE
  3816  002E                     	ds	1
  3817  002F                     ??_setSw_Main:	
  3818  002F                     Exception_Main@count:	
  3819                           ; 0 bytes @ 0xF
  3820                           
  3821  002F                     Load_Main@LightsCount:	
  3822                           ; 1 bytes @ 0xF
  3823                           
  3824                           
  3825                           ; 1 bytes @ 0xF
  3826  002F                     	ds	1
  3827  0030                     Exception_Main@i:	
  3828  0030                     Load_Main@i:	
  3829                           ; 2 bytes @ 0x10
  3830                           
  3831                           
  3832                           ; 2 bytes @ 0x10
  3833  0030                     	ds	1
  3834  0031                     setSw_Main@sw:	
  3835  0031                     ___ftdiv@f1:	
  3836                           ; 1 bytes @ 0x11
  3837                           
  3838  0031                     ___ftmul@f2:	
  3839                           ; 3 bytes @ 0x11
  3840                           
  3841                           
  3842                           ; 3 bytes @ 0x11
  3843  0031                     	ds	1
  3844  0032                     ??_Switch_Main:	
  3845  0032                     Exception_Main@i_3624:	
  3846                           ; 0 bytes @ 0x12
  3847                           
  3848                           
  3849                           ; 2 bytes @ 0x12
  3850  0032                     	ds	2
  3851  0034                     ??___ftdiv:	
  3852  0034                     ??___ftmul:	
  3853                           ; 0 bytes @ 0x14
  3854                           
  3855  0034                     Exception_Main@error:	
  3856                           ; 0 bytes @ 0x14
  3857                           
  3858                           
  3859                           ; 1 bytes @ 0x14
  3860  0034                     	ds	1
  3861  0035                     Exception_Main@lights:	
  3862                           
  3863                           ; 1 bytes @ 0x15
  3864  0035                     	ds	3
  3865  0038                     ___ftdiv@cntr:	
  3866  0038                     ___ftmul@exp:	
  3867                           ; 1 bytes @ 0x18
  3868                           
  3869                           
  3870                           ; 1 bytes @ 0x18
  3871  0038                     	ds	1
  3872  0039                     ___ftdiv@f3:	
  3873  0039                     ___ftmul@f3_as_product:	
  3874                           ; 3 bytes @ 0x19
  3875                           
  3876                           
  3877                           ; 3 bytes @ 0x19
  3878  0039                     	ds	3
  3879  003C                     ___ftdiv@exp:	
  3880  003C                     ___ftmul@cntr:	
  3881                           ; 1 bytes @ 0x1C
  3882                           
  3883                           
  3884                           ; 1 bytes @ 0x1C
  3885  003C                     	ds	1
  3886  003D                     ___ftdiv@sign:	
  3887  003D                     ___ftmul@sign:	
  3888                           ; 1 bytes @ 0x1D
  3889                           
  3890                           
  3891                           ; 1 bytes @ 0x1D
  3892  003D                     	ds	1
  3893  003E                     ?___ftneg:	
  3894  003E                     ___ftneg@f1:	
  3895                           ; 3 bytes @ 0x1E
  3896                           
  3897                           
  3898                           ; 3 bytes @ 0x1E
  3899  003E                     	ds	3
  3900  0041                     ??___ftneg:	
  3901  0041                     ?___ftadd:	
  3902                           ; 0 bytes @ 0x21
  3903                           
  3904  0041                     ___ftadd@f1:	
  3905                           ; 3 bytes @ 0x21
  3906                           
  3907                           
  3908                           ; 3 bytes @ 0x21
  3909  0041                     	ds	3
  3910  0044                     ___ftadd@f2:	
  3911                           
  3912                           ; 3 bytes @ 0x24
  3913  0044                     	ds	3
  3914  0047                     ??___ftadd:	
  3915                           
  3916                           ; 0 bytes @ 0x27
  3917  0047                     	ds	4
  3918  004B                     ___ftadd@sign:	
  3919                           
  3920                           ; 1 bytes @ 0x2B
  3921  004B                     	ds	1
  3922  004C                     ___ftadd@exp2:	
  3923                           
  3924                           ; 1 bytes @ 0x2C
  3925  004C                     	ds	1
  3926  004D                     ___ftadd@exp1:	
  3927                           
  3928                           ; 1 bytes @ 0x2D
  3929  004D                     	ds	1
  3930  004E                     ?___fttol:	
  3931  004E                     ___fttol@f1:	
  3932                           ; 4 bytes @ 0x2E
  3933                           
  3934                           
  3935                           ; 3 bytes @ 0x2E
  3936  004E                     	ds	4
  3937  0052                     ??___fttol:	
  3938                           
  3939                           ; 0 bytes @ 0x32
  3940  0052                     	ds	4
  3941  0056                     ___fttol@sign1:	
  3942                           
  3943                           ; 1 bytes @ 0x36
  3944  0056                     	ds	1
  3945  0057                     ___fttol@lval:	
  3946                           
  3947                           ; 4 bytes @ 0x37
  3948  0057                     	ds	4
  3949  005B                     ___fttol@exp1:	
  3950                           
  3951                           ; 1 bytes @ 0x3B
  3952  005B                     	ds	1
  3953  005C                     ??_getDimmerLights_ValueToPercent:	
  3954  005C                     ??_getDimmerLights_PercentToValue:	
  3955                           ; 0 bytes @ 0x3C
  3956                           
  3957                           
  3958                           ; 0 bytes @ 0x3C
  3959  005C                     	ds	2
  3960  005E                     getDimmerLights_PercentToValue@value:	
  3961  005E                     getDimmerLights_ValueToPercent@value:	
  3962                           ; 1 bytes @ 0x3E
  3963                           
  3964                           
  3965                           ; 1 bytes @ 0x3E
  3966  005E                     	ds	1
  3967  005F                     getDimmerLights_PercentToValue@i:	
  3968  005F                     getDimmerLights_ValueToPercent@i:	
  3969                           ; 3 bytes @ 0x3F
  3970                           
  3971                           
  3972                           ; 3 bytes @ 0x3F
  3973  005F                     	ds	3
  3974  0062                     ?_setProductData:	
  3975  0062                     ??_DimmerIntr_Initialization:	
  3976                           ; 0 bytes @ 0x42
  3977                           
  3978  0062                     ?_setDimmerIntr_DimmingValue:	
  3979                           ; 0 bytes @ 0x42
  3980                           
  3981  0062                     ?_setDimmerIntr_MaxmumValue:	
  3982                           ; 0 bytes @ 0x42
  3983                           
  3984  0062                     setDimmerIntr_DimmingValue@value:	
  3985                           ; 0 bytes @ 0x42
  3986                           
  3987  0062                     setDimmerIntr_MaxmumValue@value:	
  3988                           ; 1 bytes @ 0x42
  3989                           
  3990  0062                     setProductData@value:	
  3991                           ; 1 bytes @ 0x42
  3992                           
  3993                           
  3994                           ; 1 bytes @ 0x42
  3995  0062                     	ds	1
  3996  0063                     ??_setProductData:	
  3997  0063                     ??_setDimmerIntr_DimmingValue:	
  3998                           ; 0 bytes @ 0x43
  3999                           
  4000  0063                     ??_setDimmerIntr_MaxmumValue:	
  4001                           ; 0 bytes @ 0x43
  4002                           
  4003                           
  4004                           ; 0 bytes @ 0x43
  4005  0063                     	ds	1
  4006  0064                     ??_DimmerLights_Initialization:	
  4007  0064                     setDimmerIntr_DimmingValue@lights:	
  4008                           ; 0 bytes @ 0x44
  4009                           
  4010  0064                     setDimmerIntr_MaxmumValue@lights:	
  4011                           ; 1 bytes @ 0x44
  4012                           
  4013  0064                     setProductData@address:	
  4014                           ; 1 bytes @ 0x44
  4015                           
  4016                           
  4017                           ; 1 bytes @ 0x44
  4018  0064                     	ds	1
  4019  0065                     ??_DlyOff_Main:	
  4020  0065                     ?_setRF_DimmerLights:	
  4021                           ; 0 bytes @ 0x45
  4022                           
  4023  0065                     ??_setTemp_Main:	
  4024                           ; 0 bytes @ 0x45
  4025                           
  4026  0065                     ??_setLog_Code:	
  4027                           ; 0 bytes @ 0x45
  4028                           
  4029  0065                     ??_setRFSW_AdjControl:	
  4030                           ; 0 bytes @ 0x45
  4031                           
  4032  0065                     ?_setDelayOff_GO:	
  4033                           ; 0 bytes @ 0x45
  4034                           
  4035  0065                     setDelayOff_GO@command:	
  4036                           ; 0 bytes @ 0x45
  4037                           
  4038  0065                     setRF_DimmerLights@on:	
  4039                           ; 1 bytes @ 0x45
  4040                           
  4041                           
  4042                           ; 1 bytes @ 0x45
  4043  0065                     	ds	1
  4044  0066                     ??_setRF_DimmerLights:	
  4045  0066                     setDelayOff_GO@value:	
  4046                           ; 0 bytes @ 0x46
  4047                           
  4048                           
  4049                           ; 1 bytes @ 0x46
  4050  0066                     	ds	1
  4051  0067                     ??_setDelayOff_GO:	
  4052  0067                     DlyOff_Main@sw:	
  4053                           ; 0 bytes @ 0x47
  4054                           
  4055  0067                     setTemp_Main@error:	
  4056                           ; 1 bytes @ 0x47
  4057                           
  4058  0067                     setRFSW_AdjControl@status:	
  4059                           ; 1 bytes @ 0x47
  4060                           
  4061                           
  4062                           ; 1 bytes @ 0x47
  4063  0067                     	ds	1
  4064  0068                     ??_DelayOff_Main:	
  4065  0068                     setRFSW_AdjControl@sw:	
  4066                           ; 0 bytes @ 0x48
  4067                           
  4068  0068                     setRF_DimmerLights@status:	
  4069                           ; 1 bytes @ 0x48
  4070                           
  4071  0068                     setTemp_Main@SafeValue:	
  4072                           ; 1 bytes @ 0x48
  4073                           
  4074                           
  4075                           ; 2 bytes @ 0x48
  4076  0068                     	ds	1
  4077  0069                     setDelayOff_GO@i:	
  4078  0069                     setRF_DimmerLights@lights:	
  4079                           ; 1 bytes @ 0x49
  4080                           
  4081                           
  4082                           ; 1 bytes @ 0x49
  4083  0069                     	ds	1
  4084  006A                     ?_setDimmerLights_Dimming:	
  4085  006A                     setDelayOff_GO@j:	
  4086                           ; 0 bytes @ 0x4A
  4087                           
  4088  006A                     setDimmerLights_Dimming@status:	
  4089                           ; 1 bytes @ 0x4A
  4090                           
  4091  006A                     setTemp_Main@DangerValue:	
  4092                           ; 1 bytes @ 0x4A
  4093                           
  4094                           
  4095                           ; 2 bytes @ 0x4A
  4096  006A                     	ds	1
  4097  006B                     ??_setDimmerLights_Dimming:	
  4098  006B                     setDelayOff_GO@k:	
  4099                           ; 0 bytes @ 0x4B
  4100                           
  4101                           
  4102                           ; 1 bytes @ 0x4B
  4103  006B                     	ds	1
  4104  006C                     setDelayOff_GO@sw:	
  4105  006C                     setDimmerLights_Dimming@value:	
  4106                           ; 1 bytes @ 0x4C
  4107                           
  4108  006C                     setTemp_Main@TempGO:	
  4109                           ; 1 bytes @ 0x4C
  4110                           
  4111                           
  4112                           ; 1 bytes @ 0x4C
  4113  006C                     	ds	1
  4114  006D                     ?_setDimmerLights_OnOff:	
  4115  006D                     ??_setRFSW_Control:	
  4116                           ; 0 bytes @ 0x4D
  4117                           
  4118  006D                     setDimmerLights_OnOff@command:	
  4119                           ; 0 bytes @ 0x4D
  4120                           
  4121  006D                     setDimmerLights_Dimming@lights:	
  4122                           ; 1 bytes @ 0x4D
  4123                           
  4124  006D                     setTemp_Main@AD:	
  4125                           ; 1 bytes @ 0x4D
  4126                           
  4127                           
  4128                           ; 2 bytes @ 0x4D
  4129  006D                     	ds	1
  4130  006E                     ??_setDimmerLights_OnOff:	
  4131  006E                     setRFSW_Control@status:	
  4132                           ; 0 bytes @ 0x4E
  4133                           
  4134                           
  4135                           ; 1 bytes @ 0x4E
  4136  006E                     	ds	1
  4137  006F                     ??_Temp_Main:	
  4138  006F                     setRFSW_Control@sw:	
  4139                           ; 0 bytes @ 0x4F
  4140                           
  4141                           
  4142                           ; 1 bytes @ 0x4F
  4143  006F                     	ds	1
  4144  0070                     ??_setDimmerLights_Main:	
  4145  0070                     ??_RF_Main:	
  4146                           ; 0 bytes @ 0x50
  4147                           
  4148  0070                     ??_setControl_Lights_Table:	
  4149                           ; 0 bytes @ 0x50
  4150                           
  4151  0070                     ??_DimmerLights_Main:	
  4152                           ; 0 bytes @ 0x50
  4153                           
  4154  0070                     ??_main:	
  4155                           ; 0 bytes @ 0x50
  4156                           
  4157                           
  4158                           	psect	maintext
  4159  14E9                     __pmaintext:	
  4160                           ; 0 bytes @ 0x50
  4161 ;;
  4162 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4163 ;;
  4164 ;; *************** function _main *****************
  4165 ;; Defined at:
  4166 ;;		line 7 in file "../src/Main_B1.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;  argc            2    4[BANK1 ] int 
  4169 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;		None
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  2    4[BANK1 ] int 
  4174 ;; Registers used:
  4175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4176 ;; Tracked objects:
  4177 ;;		On entry : 17F/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4181 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4184 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4185 ;;Total ram usage:        4 bytes
  4186 ;; Hardware stack levels required when called:   13
  4187 ;; This function calls:
  4188 ;;		_Buzzer_Initialization
  4189 ;;		_Buzzer_Main
  4190 ;;		_CC2500_PowerOnInitial
  4191 ;;		_DelayOff_Initialization
  4192 ;;		_DelayOff_Main
  4193 ;;		_DimmerLights_Initialization
  4194 ;;		_DimmerLights_Main
  4195 ;;		_Exception_Main
  4196 ;;		_Flash_Memory_Initialization
  4197 ;;		_Flash_Memory_Main
  4198 ;;		_LED_Initialization
  4199 ;;		_LED_Main
  4200 ;;		_Load_Initialization
  4201 ;;		_Load_Main
  4202 ;;		_Mcu_Initialization
  4203 ;;		_RF_Initialization
  4204 ;;		_RF_Main
  4205 ;;		_Switch_Initialization
  4206 ;;		_Switch_Main
  4207 ;;		_Temp_Initialization
  4208 ;;		_Temp_Main
  4209 ;;		_WDT_Main
  4210 ;;		_getLoad_AD
  4211 ;;		_getTemp_AD
  4212 ;;		_myMain_Initialization
  4213 ;;		_my_MainTimer
  4214 ;; This function is called by:
  4215 ;;		Startup code after reset
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           
  4220                           ;psect for function _main
  4221  14E9                     _main:	
  4222                           
  4223                           ;Main_B1.c: 8: myMain_Initialization();
  4224                           
  4225                           ;incstack = 0
  4226                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4227  14E9  319D  253F  3194   	fcall	_myMain_Initialization
  4228                           
  4229                           ;Main_B1.c: 9: Mcu_Initialization();
  4230  14EC  319C  24CF  3194   	fcall	_Mcu_Initialization
  4231                           
  4232                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4233  14EF  318F  2736  3194   	fcall	_Flash_Memory_Initialization
  4234                           
  4235                           ;Main_B1.c: 11: LED_Initialization();
  4236  14F2  319A  229C  3194   	fcall	_LED_Initialization
  4237                           
  4238                           ;Main_B1.c: 12: Buzzer_Initialization();
  4239  14F5  319A  2285  3194   	fcall	_Buzzer_Initialization
  4240                           
  4241                           ;Main_B1.c: 14: ;;
  4242                           ;Main_B1.c: 15: Temp_Initialization();
  4243  14F8  319A  2291  3194   	fcall	_Temp_Initialization
  4244                           
  4245                           ;Main_B1.c: 16: Load_Initialization();
  4246  14FB  319A  2288  3194   	fcall	_Load_Initialization
  4247                           
  4248                           ;Main_B1.c: 17: ;;
  4249                           ;Main_B1.c: 18: DelayOff_Initialization();
  4250  14FE  319A  2294  3194   	fcall	_DelayOff_Initialization
  4251                           
  4252                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4253  1501  319A  22D9  3194   	fcall	_DimmerLights_Initialization
  4254                           
  4255                           ;Main_B1.c: 21: ;;
  4256                           ;Main_B1.c: 22: ;;
  4257                           ;Main_B1.c: 23: ;;
  4258                           ;Main_B1.c: 24: Switch_Initialization();
  4259  1504  319A  22B8  3194   	fcall	_Switch_Initialization
  4260                           
  4261                           ;Main_B1.c: 25: RF_Initialization();
  4262  1507  319A  228B  3194   	fcall	_RF_Initialization
  4263                           
  4264                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4265  150A  319D  257B  3194   	fcall	_CC2500_PowerOnInitial
  4266  150D                     l8815:	
  4267                           ;Main_B1.c: 27: ;;
  4268                           ;Main_B1.c: 28: ;;
  4269                           ;Main_B1.c: 30: while (1) {
  4270                           
  4271                           
  4272                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4273  150D  0021               	movlb	1	; select bank1
  4274  150E  1C2F               	btfss	_myMain^(0+128),0
  4275  150F  2D18               	goto	l8819
  4276                           
  4277                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4278  1510  3005               	movlw	5
  4279  1511  3189  218D  3194   	fcall	_getLoad_AD
  4280                           
  4281                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4282  1514  3009               	movlw	9
  4283  1515  318C  2491  3194   	fcall	_getTemp_AD
  4284  1518                     l8819:	
  4285                           
  4286                           ;Main_B1.c: 57: }
  4287                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4288  1518  0022               	movlb	2	; select bank2
  4289  1519  1C31               	btfss	_Timer1^(0+256),0
  4290  151A  2D0D               	goto	l8815
  4291                           
  4292                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4293  151B  1031               	bcf	_Timer1^(0+256),0
  4294                           
  4295                           ;Main_B1.c: 96: my_MainTimer();
  4296  151C  3192  22DF  3194   	fcall	_my_MainTimer
  4297                           
  4298                           ;Main_B1.c: 97: WDT_Main();
  4299  151F  319C  24E1  3194   	fcall	_WDT_Main
  4300                           
  4301                           ;Main_B1.c: 98: ;;
  4302                           ;Main_B1.c: 99: ;;
  4303                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4304  1522  0021               	movlb	1	; select bank1
  4305  1523  1C2F               	btfss	_myMain^(0+128),0
  4306  1524  2D0D               	goto	l8815
  4307                           
  4308                           ;Main_B1.c: 101: Flash_Memory_Main();
  4309  1525  3193  235B  3194   	fcall	_Flash_Memory_Main
  4310                           
  4311                           ;Main_B1.c: 103: LED_Main();
  4312  1528  319A  22A0  3194   	fcall	_LED_Main
  4313                           
  4314                           ;Main_B1.c: 104: Buzzer_Main();
  4315  152B  3193  239C  3194   	fcall	_Buzzer_Main
  4316                           
  4317                           ;Main_B1.c: 106: ;;
  4318                           ;Main_B1.c: 107: Temp_Main();
  4319  152E  3188  2000  3194   	fcall	_Temp_Main
  4320                           
  4321                           ;Main_B1.c: 108: Load_Main();
  4322  1531  3180  2053  3194   	fcall	_Load_Main
  4323                           
  4324                           ;Main_B1.c: 109: ;;
  4325                           ;Main_B1.c: 111: ;;
  4326                           ;Main_B1.c: 112: DimmerLights_Main();
  4327  1534  319E  26CC  3194   	fcall	_DimmerLights_Main
  4328                           
  4329                           ;Main_B1.c: 113: Switch_Main();
  4330  1537  319A  22E7  3194   	fcall	_Switch_Main
  4331                           
  4332                           ;Main_B1.c: 114: ;;
  4333                           ;Main_B1.c: 115: ;;
  4334                           ;Main_B1.c: 117: RF_Main();
  4335  153A  319A  228E  3194   	fcall	_RF_Main
  4336                           
  4337                           ;Main_B1.c: 118: DelayOff_Main();
  4338  153D  319A  2298  3194   	fcall	_DelayOff_Main
  4339                           
  4340                           ;Main_B1.c: 119: ;;
  4341                           ;Main_B1.c: 120: ;;
  4342                           ;Main_B1.c: 121: Exception_Main();
  4343  1540  3185  254F  3194   	fcall	_Exception_Main
  4344  1543  2D0D               	goto	l8815
  4345  1544                     __end_of_main:	
  4346                           ;Main_B1.c: 128: }
  4347                           ;Main_B1.c: 129: }
  4348                           ;Main_B1.c: 163: }
  4349                           ;Main_B1.c: 164: return (0);
  4350                           ;	Return value of _main is never used
  4351                           
  4352                           
  4353                           	psect	text1
  4354  12DF                     __ptext1:	
  4355 ;; *************** function _my_MainTimer *****************
  4356 ;; Defined at:
  4357 ;;		line 185 in file "../src/Main_B1.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;		None
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;		None
  4362 ;; Return value:  Size  Location     Type
  4363 ;;		None               void
  4364 ;; Registers used:
  4365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;Total ram usage:        1 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    7
  4378 ;; This function calls:
  4379 ;;		_setBuz
  4380 ;; This function is called by:
  4381 ;;		_main
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function _my_MainTimer
  4387  12DF                     _my_MainTimer:	
  4388                           
  4389                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4390                           
  4391                           ;incstack = 0
  4392                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4393  12DF  0021               	movlb	1	; select bank1
  4394  12E0  182F               	btfsc	_myMain^(0+128),0
  4395  12E1  2AF9               	goto	l7999
  4396                           
  4397                           ;Main_B1.c: 188: myMain.PowerCount++;
  4398  12E2  3001               	movlw	1
  4399  12E3  0020               	movlb	0	; select bank0
  4400  12E4  00AD               	movwf	??_my_MainTimer
  4401  12E5  082D               	movf	??_my_MainTimer,w
  4402  12E6  0021               	movlb	1	; select bank1
  4403  12E7  07B0               	addwf	(_myMain^(0+128)+1),f
  4404                           
  4405                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4406  12E8  0830               	movf	(_myMain^(0+128)+1),w
  4407  12E9  3A4B               	xorlw	75
  4408  12EA  1D03               	skipz
  4409  12EB  0008               	return
  4410                           
  4411                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4412  12EC  01B0               	clrf	(_myMain^(0+128)+1)
  4413                           
  4414                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4415  12ED  142F               	bsf	_myMain^(0+128),0
  4416                           
  4417                           ;Main_B1.c: 196: setBuz(3, 50);
  4418  12EE  3032               	movlw	50
  4419  12EF  0020               	movlb	0	; select bank0
  4420  12F0  00A9               	movwf	setBuz@time
  4421  12F1  3000               	movlw	0
  4422  12F2  00AA               	movwf	setBuz@time+1
  4423  12F3  3003               	movlw	3
  4424  12F4  3194  2490         	fcall	_setBuz
  4425                           
  4426                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4427  12F6  0021               	movlb	1	; select bank1
  4428  12F7  162F               	bsf	_myMain^(0+128),4
  4429                           
  4430                           ;Main_B1.c: 206: }
  4431                           ;Main_B1.c: 207: } else {
  4432  12F8  0008               	return
  4433  12F9                     l7999:	
  4434                           
  4435                           ;Main_B1.c: 208: myMain.PowerCount++;
  4436  12F9  3001               	movlw	1
  4437  12FA  0020               	movlb	0	; select bank0
  4438  12FB  00AD               	movwf	??_my_MainTimer
  4439  12FC  082D               	movf	??_my_MainTimer,w
  4440  12FD  0021               	movlb	1	; select bank1
  4441  12FE  07B0               	addwf	(_myMain^(0+128)+1),f
  4442                           
  4443                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4444  12FF  0830               	movf	(_myMain^(0+128)+1),w
  4445  1300  3A32               	xorlw	50
  4446  1301  1903               	btfsc	3,2
  4447                           
  4448                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4449  1302  01B0               	clrf	(_myMain^(0+128)+1)
  4450                           
  4451                           ;Main_B1.c: 226: }
  4452                           ;Main_B1.c: 228: myMain.Count1++;
  4453  1303  3001               	movlw	1
  4454  1304  07B3               	addwf	(_myMain^(0+128)+4),f
  4455  1305  3000               	movlw	0
  4456  1306  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4457                           
  4458                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4459  1307  3004               	movlw	4
  4460  1308  3EAF               	addlw	_myMain& (0+255)
  4461  1309  0086               	movwf	6
  4462  130A  0187               	clrf	7
  4463  130B  3F40               	moviw [0]fsr1
  4464  130C  3A32               	xorlw	50
  4465  130D  1D03               	skipz
  4466  130E  2B11               	goto	u8015
  4467  130F  3F41               	moviw [1]fsr1
  4468  1310  3A00               	xorlw	0
  4469  1311                     u8015:	
  4470  1311  1D03               	skipz
  4471  1312  0008               	return
  4472                           
  4473                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4474  1313  01B3               	clrf	(_myMain^(0+128)+4)
  4475  1314  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4476                           
  4477                           ;Main_B1.c: 242: if (myMain.Flag) {
  4478  1315  1CAF               	btfss	_myMain^(0+128),1
  4479  1316  2B19               	goto	l1435
  4480                           
  4481                           ;Main_B1.c: 243: myMain.Flag = 0;
  4482  1317  10AF               	bcf	_myMain^(0+128),1
  4483                           
  4484                           ;Main_B1.c: 252: } else {
  4485  1318  0008               	return
  4486  1319                     l1435:	
  4487                           
  4488                           ;Main_B1.c: 253: myMain.Flag = 1;
  4489  1319  14AF               	bsf	_myMain^(0+128),1
  4490  131A  0008               	return
  4491  131B                     __end_of_my_MainTimer:	
  4492                           
  4493                           	psect	text2
  4494  1D3F                     __ptext2:	
  4495 ;; *************** function _myMain_Initialization *****************
  4496 ;; Defined at:
  4497 ;;		line 170 in file "../src/Main_B1.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;		None
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;		None
  4502 ;; Return value:  Size  Location     Type
  4503 ;;		None               void
  4504 ;; Registers used:
  4505 ;;		wreg, fsr1l, fsr1h
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4514 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4515 ;;Total ram usage:        1 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:    5
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_main
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           
  4526                           ;psect for function _myMain_Initialization
  4527  1D3F                     _myMain_Initialization:	
  4528                           
  4529                           ;Main_B1.c: 173: product = &_product;
  4530                           
  4531                           ;incstack = 0
  4532                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4533  1D3F  30CC               	movlw	__product& (0+255)
  4534  1D40  0020               	movlb	0	; select bank0
  4535  1D41  00A0               	movwf	??_myMain_Initialization
  4536  1D42  0820               	movf	??_myMain_Initialization,w
  4537  1D43  0021               	movlb	1	; select bank1
  4538  1D44  00EE               	movwf	_product^(0+128)
  4539                           
  4540                           ;Main_B1.c: 174: product->Data[20] = 209;
  4541  1D45  30D1               	movlw	209
  4542  1D46  0020               	movlb	0	; select bank0
  4543  1D47  00A0               	movwf	??_myMain_Initialization
  4544  1D48  0021               	movlb	1	; select bank1
  4545  1D49  086E               	movf	_product^(0+128),w
  4546  1D4A  3E14               	addlw	20
  4547  1D4B  0086               	movwf	6
  4548  1D4C  3001               	movlw	1	; select bank2/3
  4549  1D4D  0087               	movwf	7
  4550  1D4E  0020               	movlb	0	; select bank0
  4551  1D4F  0820               	movf	??_myMain_Initialization,w
  4552  1D50  0081               	movwf	1
  4553  1D51  0008               	return
  4554  1D52                     __end_of_myMain_Initialization:	
  4555                           
  4556                           	psect	text3
  4557  0C91                     __ptext3:	
  4558 ;; *************** function _getTemp_AD *****************
  4559 ;; Defined at:
  4560 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;  channel         1    wreg     unsigned char 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;  channel         1    5[BANK0 ] unsigned char 
  4565 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;		None               void
  4568 ;; Registers used:
  4569 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;Total ram usage:        4 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    7
  4582 ;; This function calls:
  4583 ;;		_getAD
  4584 ;; This function is called by:
  4585 ;;		_main
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           
  4590                           ;psect for function _getTemp_AD
  4591  0C91                     _getTemp_AD:	
  4592                           
  4593                           ;incstack = 0
  4594                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4595                           ;getTemp_AD@channel stored from wreg
  4596  0C91  0020               	movlb	0	; select bank0
  4597  0C92  00A5               	movwf	getTemp_AD@channel
  4598                           
  4599                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4600  0C93  01A6               	clrf	getTemp_AD@ADRES
  4601  0C94  01A7               	clrf	getTemp_AD@ADRES+1
  4602                           
  4603                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4604  0C95  0021               	movlb	1	; select bank1
  4605  0C96  1D58               	btfss	_Temp^(0+128),2
  4606  0C97  0008               	return
  4607                           
  4608                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4609  0C98  30F0               	movlw	240
  4610  0C99  0020               	movlb	0	; select bank0
  4611  0C9A  00A4               	movwf	??_getTemp_AD
  4612  0C9B  0824               	movf	??_getTemp_AD,w
  4613  0C9C  00A0               	movwf	getAD@adcon1
  4614  0C9D  0825               	movf	getTemp_AD@channel,w
  4615  0C9E  319F  277D  318C   	fcall	_getAD
  4616  0CA1  0020               	movlb	0	; select bank0
  4617  0CA2  0821               	movf	?_getAD+1,w
  4618  0CA3  01A7               	clrf	getTemp_AD@ADRES+1
  4619  0CA4  07A7               	addwf	getTemp_AD@ADRES+1,f
  4620  0CA5  0820               	movf	?_getAD,w
  4621  0CA6  01A6               	clrf	getTemp_AD@ADRES
  4622  0CA7  07A6               	addwf	getTemp_AD@ADRES,f
  4623                           
  4624                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4625  0CA8  0827               	movf	getTemp_AD@ADRES+1,w
  4626  0CA9  0426               	iorwf	getTemp_AD@ADRES,w
  4627  0CAA  1903               	skipnz
  4628  0CAB  0008               	return
  4629                           
  4630                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4631  0CAC  0827               	movf	getTemp_AD@ADRES+1,w
  4632  0CAD  0021               	movlb	1	; select bank1
  4633  0CAE  025D               	subwf	((_Temp+1)^(0+128)+4),w
  4634  0CAF  1D03               	skipz
  4635  0CB0  2CB5               	goto	u7935
  4636  0CB1  0020               	movlb	0	; select bank0
  4637  0CB2  0826               	movf	getTemp_AD@ADRES,w
  4638  0CB3  0021               	movlb	1	; select bank1
  4639  0CB4  025C               	subwf	(_Temp^(0+128)+4),w
  4640  0CB5                     u7935:	
  4641  0CB5  1803               	skipnc
  4642  0CB6  2CC2               	goto	l7969
  4643                           
  4644                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4645  0CB7  0020               	movlb	0	; select bank0
  4646  0CB8  0827               	movf	getTemp_AD@ADRES+1,w
  4647  0CB9  0021               	movlb	1	; select bank1
  4648  0CBA  01DD               	clrf	((_Temp+1)^(0+128)+4)
  4649  0CBB  07DD               	addwf	((_Temp+1)^(0+128)+4),f
  4650  0CBC  0020               	movlb	0	; select bank0
  4651  0CBD  0826               	movf	getTemp_AD@ADRES,w
  4652  0CBE  0021               	movlb	1	; select bank1
  4653  0CBF  01DC               	clrf	(_Temp^(0+128)+4)
  4654  0CC0  07DC               	addwf	(_Temp^(0+128)+4),f
  4655                           
  4656                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4657  0CC1  0008               	return
  4658  0CC2                     l7969:	
  4659  0CC2  0020               	movlb	0	; select bank0
  4660  0CC3  0827               	movf	getTemp_AD@ADRES+1,w
  4661  0CC4  0021               	movlb	1	; select bank1
  4662  0CC5  025F               	subwf	((_Temp+1)^(0+128)+6),w
  4663  0CC6  1D03               	skipz
  4664  0CC7  2CCC               	goto	u7945
  4665  0CC8  0020               	movlb	0	; select bank0
  4666  0CC9  0826               	movf	getTemp_AD@ADRES,w
  4667  0CCA  0021               	movlb	1	; select bank1
  4668  0CCB  025E               	subwf	(_Temp^(0+128)+6),w
  4669  0CCC                     u7945:	
  4670  0CCC  1803               	skipnc
  4671  0CCD  2CD9               	goto	l7973
  4672                           
  4673                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4674  0CCE  0020               	movlb	0	; select bank0
  4675  0CCF  0827               	movf	getTemp_AD@ADRES+1,w
  4676  0CD0  0021               	movlb	1	; select bank1
  4677  0CD1  01DF               	clrf	((_Temp+1)^(0+128)+6)
  4678  0CD2  07DF               	addwf	((_Temp+1)^(0+128)+6),f
  4679  0CD3  0020               	movlb	0	; select bank0
  4680  0CD4  0826               	movf	getTemp_AD@ADRES,w
  4681  0CD5  0021               	movlb	1	; select bank1
  4682  0CD6  01DE               	clrf	(_Temp^(0+128)+6)
  4683  0CD7  07DE               	addwf	(_Temp^(0+128)+6),f
  4684                           
  4685                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4686  0CD8  0008               	return
  4687  0CD9                     l7973:	
  4688  0CD9  0020               	movlb	0	; select bank0
  4689  0CDA  0827               	movf	getTemp_AD@ADRES+1,w
  4690  0CDB  0021               	movlb	1	; select bank1
  4691  0CDC  0261               	subwf	((_Temp+1)^(0+128)+8),w
  4692  0CDD  1D03               	skipz
  4693  0CDE  2CE3               	goto	u7955
  4694  0CDF  0020               	movlb	0	; select bank0
  4695  0CE0  0826               	movf	getTemp_AD@ADRES,w
  4696  0CE1  0021               	movlb	1	; select bank1
  4697  0CE2  0260               	subwf	(_Temp^(0+128)+8),w
  4698  0CE3                     u7955:	
  4699  0CE3  1803               	skipnc
  4700  0CE4  2CF0               	goto	l7977
  4701                           
  4702                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4703  0CE5  0020               	movlb	0	; select bank0
  4704  0CE6  0827               	movf	getTemp_AD@ADRES+1,w
  4705  0CE7  0021               	movlb	1	; select bank1
  4706  0CE8  01E1               	clrf	((_Temp+1)^(0+128)+8)
  4707  0CE9  07E1               	addwf	((_Temp+1)^(0+128)+8),f
  4708  0CEA  0020               	movlb	0	; select bank0
  4709  0CEB  0826               	movf	getTemp_AD@ADRES,w
  4710  0CEC  0021               	movlb	1	; select bank1
  4711  0CED  01E0               	clrf	(_Temp^(0+128)+8)
  4712  0CEE  07E0               	addwf	(_Temp^(0+128)+8),f
  4713                           
  4714                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4715  0CEF  0008               	return
  4716  0CF0                     l7977:	
  4717  0CF0  0020               	movlb	0	; select bank0
  4718  0CF1  0827               	movf	getTemp_AD@ADRES+1,w
  4719  0CF2  0021               	movlb	1	; select bank1
  4720  0CF3  0263               	subwf	((_Temp+1)^(0+128)+10),w
  4721  0CF4  1D03               	skipz
  4722  0CF5  2CFA               	goto	u7965
  4723  0CF6  0020               	movlb	0	; select bank0
  4724  0CF7  0826               	movf	getTemp_AD@ADRES,w
  4725  0CF8  0021               	movlb	1	; select bank1
  4726  0CF9  0262               	subwf	(_Temp^(0+128)+10),w
  4727  0CFA                     u7965:	
  4728  0CFA  1803               	skipnc
  4729  0CFB  2D07               	goto	l7981
  4730                           
  4731                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4732  0CFC  0020               	movlb	0	; select bank0
  4733  0CFD  0827               	movf	getTemp_AD@ADRES+1,w
  4734  0CFE  0021               	movlb	1	; select bank1
  4735  0CFF  01E3               	clrf	((_Temp+1)^(0+128)+10)
  4736  0D00  07E3               	addwf	((_Temp+1)^(0+128)+10),f
  4737  0D01  0020               	movlb	0	; select bank0
  4738  0D02  0826               	movf	getTemp_AD@ADRES,w
  4739  0D03  0021               	movlb	1	; select bank1
  4740  0D04  01E2               	clrf	(_Temp^(0+128)+10)
  4741  0D05  07E2               	addwf	(_Temp^(0+128)+10),f
  4742                           
  4743                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4744  0D06  0008               	return
  4745  0D07                     l7981:	
  4746  0D07  0020               	movlb	0	; select bank0
  4747  0D08  0827               	movf	getTemp_AD@ADRES+1,w
  4748  0D09  0021               	movlb	1	; select bank1
  4749  0D0A  0265               	subwf	((_Temp+1)^(0+128)+12),w
  4750  0D0B  1D03               	skipz
  4751  0D0C  2D11               	goto	u7975
  4752  0D0D  0020               	movlb	0	; select bank0
  4753  0D0E  0826               	movf	getTemp_AD@ADRES,w
  4754  0D0F  0021               	movlb	1	; select bank1
  4755  0D10  0264               	subwf	(_Temp^(0+128)+12),w
  4756  0D11                     u7975:	
  4757  0D11  1803               	skipnc
  4758  0D12  0008               	return
  4759                           
  4760                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4761  0D13  0020               	movlb	0	; select bank0
  4762  0D14  0827               	movf	getTemp_AD@ADRES+1,w
  4763  0D15  0021               	movlb	1	; select bank1
  4764  0D16  01E5               	clrf	((_Temp+1)^(0+128)+12)
  4765  0D17  07E5               	addwf	((_Temp+1)^(0+128)+12),f
  4766  0D18  0020               	movlb	0	; select bank0
  4767  0D19  0826               	movf	getTemp_AD@ADRES,w
  4768  0D1A  0021               	movlb	1	; select bank1
  4769  0D1B  01E4               	clrf	(_Temp^(0+128)+12)
  4770  0D1C  07E4               	addwf	(_Temp^(0+128)+12),f
  4771  0D1D  0008               	return
  4772  0D1E                     __end_of_getTemp_AD:	
  4773                           
  4774                           	psect	text4
  4775  098D                     __ptext4:	
  4776 ;; *************** function _getLoad_AD *****************
  4777 ;; Defined at:
  4778 ;;		line 16 in file "../src/OverLoad_B1.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;  channel         1    wreg     unsigned char 
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;  channel         1    6[BANK0 ] unsigned char 
  4783 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4784 ;;  i               1   11[BANK0 ] unsigned char 
  4785 ;;  j               1    8[BANK0 ] unsigned char 
  4786 ;;  k               1    7[BANK0 ] unsigned char 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;		None               void
  4789 ;; Registers used:
  4790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4799 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4800 ;;Total ram usage:        8 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    7
  4803 ;; This function calls:
  4804 ;;		_getAD
  4805 ;; This function is called by:
  4806 ;;		_main
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           
  4811                           ;psect for function _getLoad_AD
  4812  098D                     _getLoad_AD:	
  4813                           
  4814                           ;incstack = 0
  4815                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4816                           ;getLoad_AD@channel stored from wreg
  4817  098D  0020               	movlb	0	; select bank0
  4818  098E  00A6               	movwf	getLoad_AD@channel
  4819                           
  4820                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4821  098F  01AB               	clrf	getLoad_AD@i
  4822  0990  01A8               	clrf	getLoad_AD@j
  4823  0991  01A7               	clrf	getLoad_AD@k
  4824                           
  4825                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4826  0992  01A9               	clrf	getLoad_AD@ADRES
  4827  0993  01AA               	clrf	getLoad_AD@ADRES+1
  4828                           
  4829                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4830  0994  0022               	movlb	2	; select bank2
  4831  0995  1E38               	btfss	_Load^(0+256),4
  4832  0996  0008               	return
  4833                           
  4834                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4835  0997  30F3               	movlw	243
  4836  0998  0020               	movlb	0	; select bank0
  4837  0999  00A4               	movwf	??_getLoad_AD
  4838  099A  0824               	movf	??_getLoad_AD,w
  4839  099B  00A0               	movwf	getAD@adcon1
  4840  099C  0826               	movf	getLoad_AD@channel,w
  4841  099D  319F  277D  3189   	fcall	_getAD
  4842  09A0  0020               	movlb	0	; select bank0
  4843  09A1  0821               	movf	?_getAD+1,w
  4844  09A2  01AA               	clrf	getLoad_AD@ADRES+1
  4845  09A3  07AA               	addwf	getLoad_AD@ADRES+1,f
  4846  09A4  0820               	movf	?_getAD,w
  4847  09A5  01A9               	clrf	getLoad_AD@ADRES
  4848  09A6  07A9               	addwf	getLoad_AD@ADRES,f
  4849                           
  4850                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4851  09A7  01AB               	clrf	getLoad_AD@i
  4852  09A8  3004               	movlw	4
  4853  09A9  022B               	subwf	getLoad_AD@i,w
  4854  09AA  1803               	btfsc	3,0
  4855  09AB  29D3               	goto	l7937
  4856  09AC                     l7925:	
  4857                           
  4858                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4859  09AC  352B               	lslf	getLoad_AD@i,w
  4860  09AD  3E43               	addlw	(_Load+11)& (0+255)
  4861  09AE  0086               	movwf	6
  4862  09AF  3001               	movlw	1	; select bank2/3
  4863  09B0  0087               	movwf	7
  4864  09B1  3F40               	moviw [0]fsr1
  4865  09B2  00A4               	movwf	??_getLoad_AD
  4866  09B3  3F41               	moviw [1]fsr1
  4867  09B4  00A5               	movwf	??_getLoad_AD+1
  4868  09B5  082A               	movf	getLoad_AD@ADRES+1,w
  4869  09B6  0225               	subwf	??_getLoad_AD+1,w
  4870  09B7  1D03               	skipz
  4871  09B8  29BB               	goto	u7835
  4872  09B9  0829               	movf	getLoad_AD@ADRES,w
  4873  09BA  0224               	subwf	??_getLoad_AD,w
  4874  09BB                     u7835:	
  4875  09BB  1803               	skipnc
  4876  09BC  29CB               	goto	l7933
  4877  09BD  08A8               	movf	getLoad_AD@j,f
  4878  09BE  1D03               	skipz
  4879  09BF  29CB               	goto	l7933
  4880                           
  4881                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4882  09C0  352B               	lslf	getLoad_AD@i,w
  4883  09C1  3E43               	addlw	(_Load+11)& (0+255)
  4884  09C2  0086               	movwf	6
  4885  09C3  3001               	movlw	1	; select bank2/3
  4886  09C4  0087               	movwf	7
  4887  09C5  0829               	movf	getLoad_AD@ADRES,w
  4888  09C6  3FC0               	movwi [0]fsr1
  4889  09C7  082A               	movf	getLoad_AD@ADRES+1,w
  4890  09C8  3FC1               	movwi [1]fsr1
  4891                           
  4892                           ;OverLoad_B1.c: 25: j = 1;
  4893  09C9  01A8               	clrf	getLoad_AD@j
  4894  09CA  0AA8               	incf	getLoad_AD@j,f
  4895  09CB                     l7933:	
  4896  09CB  3001               	movlw	1
  4897  09CC  00A4               	movwf	??_getLoad_AD
  4898  09CD  0824               	movf	??_getLoad_AD,w
  4899  09CE  07AB               	addwf	getLoad_AD@i,f
  4900  09CF  3004               	movlw	4
  4901  09D0  022B               	subwf	getLoad_AD@i,w
  4902  09D1  1C03               	skipc
  4903  09D2  29AC               	goto	l7925
  4904  09D3                     l7937:	
  4905                           
  4906                           ;OverLoad_B1.c: 26: }
  4907                           ;OverLoad_B1.c: 27: }
  4908                           ;OverLoad_B1.c: 28: if (j == 0) {
  4909  09D3  08A8               	movf	getLoad_AD@j,f
  4910  09D4  1D03               	skipz
  4911  09D5  0008               	return
  4912                           
  4913                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4914  09D6  01AB               	clrf	getLoad_AD@i
  4915  09D7                     L1:	
  4916  09D7  3004               	movlw	4
  4917  09D8  022B               	subwf	getLoad_AD@i,w
  4918  09D9  1803               	btfsc	3,0
  4919  09DA  0008               	return
  4920                           
  4921                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4922  09DB  352B               	lslf	getLoad_AD@i,w
  4923  09DC  3E4D               	addlw	(_Load+21)& (0+255)
  4924  09DD  0086               	movwf	6
  4925  09DE  3001               	movlw	1	; select bank2/3
  4926  09DF  0087               	movwf	7
  4927  09E0  3F40               	moviw [0]fsr1
  4928  09E1  00A4               	movwf	??_getLoad_AD
  4929  09E2  3F41               	moviw [1]fsr1
  4930  09E3  00A5               	movwf	??_getLoad_AD+1
  4931  09E4  0825               	movf	??_getLoad_AD+1,w
  4932  09E5  022A               	subwf	getLoad_AD@ADRES+1,w
  4933  09E6  1D03               	skipz
  4934  09E7  29EA               	goto	u7885
  4935  09E8  0824               	movf	??_getLoad_AD,w
  4936  09E9  0229               	subwf	getLoad_AD@ADRES,w
  4937  09EA                     u7885:	
  4938  09EA  1803               	skipnc
  4939  09EB  29FA               	goto	l7953
  4940  09EC  08A7               	movf	getLoad_AD@k,f
  4941  09ED  1D03               	skipz
  4942  09EE  29FA               	goto	l7953
  4943                           
  4944                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4945  09EF  352B               	lslf	getLoad_AD@i,w
  4946  09F0  3E4D               	addlw	(_Load+21)& (0+255)
  4947  09F1  0086               	movwf	6
  4948  09F2  3001               	movlw	1	; select bank2/3
  4949  09F3  0087               	movwf	7
  4950  09F4  0829               	movf	getLoad_AD@ADRES,w
  4951  09F5  3FC0               	movwi [0]fsr1
  4952  09F6  082A               	movf	getLoad_AD@ADRES+1,w
  4953  09F7  3FC1               	movwi [1]fsr1
  4954                           
  4955                           ;OverLoad_B1.c: 32: k = 1;
  4956  09F8  01A7               	clrf	getLoad_AD@k
  4957  09F9  0AA7               	incf	getLoad_AD@k,f
  4958  09FA                     l7953:	
  4959  09FA  3001               	movlw	1
  4960  09FB  00A4               	movwf	??_getLoad_AD
  4961  09FC  0824               	movf	??_getLoad_AD,w
  4962  09FD  07AB               	addwf	getLoad_AD@i,f
  4963  09FE  29D7               	goto	L1
  4964  09FF                     __end_of_getLoad_AD:	
  4965                           
  4966                           	psect	text5
  4967  1F7D                     __ptext5:	
  4968 ;; *************** function _getAD *****************
  4969 ;; Defined at:
  4970 ;;		line 461 in file "../src/MCU_B1.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  adcon0          1    wreg     unsigned char 
  4973 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  2    0[BANK0 ] int 
  4978 ;; Registers used:
  4979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4985 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4988 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;Total ram usage:        4 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    6
  4992 ;; This function calls:
  4993 ;;		_Timeout_Counter
  4994 ;;		_set_TimeoutCleared
  4995 ;; This function is called by:
  4996 ;;		_getLoad_AD
  4997 ;;		_getTemp_AD
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           
  5002                           ;psect for function _getAD
  5003  1F7D                     _getAD:	
  5004                           
  5005                           ;incstack = 0
  5006                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5007                           ;getAD@adcon0 stored from wreg
  5008  1F7D  0020               	movlb	0	; select bank0
  5009  1F7E  00A3               	movwf	getAD@adcon0
  5010                           
  5011                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  5012  1F7F  0823               	movf	getAD@adcon0,w
  5013  1F80  0021               	movlb	1	; select bank1
  5014  1F81  009D               	movwf	29	;volatile
  5015                           
  5016                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  5017  1F82  0020               	movlb	0	; select bank0
  5018  1F83  0820               	movf	getAD@adcon1,w
  5019  1F84  0021               	movlb	1	; select bank1
  5020  1F85  009E               	movwf	30	;volatile
  5021                           
  5022                           ;MCU_B1.c: 464: GO_nDONE = 1;
  5023  1F86  149D               	bsf	29,1	;volatile
  5024                           
  5025                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5026  1F87  2F8B               	goto	l7405
  5027  1F88                     l7403:	
  5028                           
  5029                           ;MCU_B1.c: 466: Timeout_Counter();
  5030  1F88  319D  2590  319F   	fcall	_Timeout_Counter
  5031  1F8B                     l7405:	
  5032  1F8B  0021               	movlb	1	; select bank1
  5033  1F8C  1C9D               	btfss	29,1	;volatile
  5034  1F8D  2F90               	goto	l7409
  5035  1F8E  1D39               	btfss	(_myMain^(0+128)+10),2
  5036  1F8F  2F88               	goto	l7403
  5037  1F90                     l7409:	
  5038                           
  5039                           ;MCU_B1.c: 467: };
  5040                           ;MCU_B1.c: 468: set_TimeoutCleared();
  5041  1F90  319A  22BC         	fcall	_set_TimeoutCleared
  5042                           
  5043                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  5044  1F92  0021               	movlb	1	; select bank1
  5045  1F93  081C               	movf	28,w	;volatile
  5046  1F94  0020               	movlb	0	; select bank0
  5047  1F95  01A1               	clrf	?_getAD+1
  5048  1F96  07A1               	addwf	?_getAD+1,f
  5049  1F97  0021               	movlb	1	; select bank1
  5050  1F98  081B               	movf	27,w	;volatile
  5051  1F99  0020               	movlb	0	; select bank0
  5052  1F9A  01A0               	clrf	?_getAD
  5053  1F9B  07A0               	addwf	?_getAD,f
  5054  1F9C  0008               	return
  5055  1F9D                     __end_of_getAD:	
  5056                           
  5057                           	psect	text6
  5058  1CE1                     __ptext6:	
  5059 ;; *************** function _WDT_Main *****************
  5060 ;; Defined at:
  5061 ;;		line 1116 in file "../src/MCU_B1.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;		None
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;		None
  5066 ;; Return value:  Size  Location     Type
  5067 ;;		None               void
  5068 ;; Registers used:
  5069 ;;		wreg, status,2, status,0, pclath, cstack
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5078 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5079 ;;Total ram usage:        1 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; Hardware stack levels required when called:    6
  5082 ;; This function calls:
  5083 ;;		_WDT_Clearing
  5084 ;; This function is called by:
  5085 ;;		_main
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           
  5090                           ;psect for function _WDT_Main
  5091  1CE1                     _WDT_Main:	
  5092                           
  5093                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  5094                           
  5095                           ;incstack = 0
  5096                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5097  1CE1  0022               	movlb	2	; select bank2
  5098  1CE2  1C36               	btfss	_WDT^(0+256),0
  5099  1CE3  0008               	return
  5100                           
  5101                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  5102  1CE4  3001               	movlw	1
  5103  1CE5  02B7               	subwf	(_WDT^(0+256)+1),f
  5104  1CE6  0837               	movf	(_WDT^(0+256)+1),w
  5105  1CE7  3AFF               	xorlw	255
  5106  1CE8  1903               	skipnz
  5107  1CE9  0008               	return
  5108                           
  5109                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  5110  1CEA  3064               	movlw	100
  5111  1CEB  0020               	movlb	0	; select bank0
  5112  1CEC  00A0               	movwf	??_WDT_Main
  5113  1CED  0820               	movf	??_WDT_Main,w
  5114  1CEE  0022               	movlb	2	; select bank2
  5115  1CEF  00B7               	movwf	(_WDT^(0+256)+1)
  5116                           
  5117                           ;MCU_B1.c: 1120: WDT_Clearing();
  5118  1CF0  3180  2002         	fcall	_WDT_Clearing
  5119  1CF2  0008               	return
  5120  1CF3                     __end_of_WDT_Main:	
  5121                           
  5122                           	psect	text7
  5123  0002                     __ptext7:	
  5124 ;; *************** function _WDT_Clearing *****************
  5125 ;; Defined at:
  5126 ;;		line 1126 in file "../src/MCU_B1.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;		None
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;		None               void
  5133 ;; Registers used:
  5134 ;;		None
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5144 ;;Total ram usage:        0 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    5
  5147 ;; This function calls:
  5148 ;;		Nothing
  5149 ;; This function is called by:
  5150 ;;		_WDT_Main
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           
  5155                           ;psect for function _WDT_Clearing
  5156  0002                     _WDT_Clearing:	
  5157                           
  5158                           ;incstack = 0
  5159                           ; Regs used in _WDT_Clearing: []
  5160  0002  0064               	clrwdt	;# 
  5161  0003  0008               	return
  5162  0004                     __end_of_WDT_Clearing:	
  5163                           
  5164                           	psect	text8
  5165  0800                     __ptext8:	
  5166 ;; *************** function _Temp_Main *****************
  5167 ;; Defined at:
  5168 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;		None
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;		None
  5173 ;; Return value:  Size  Location     Type
  5174 ;;		None               void
  5175 ;; Registers used:
  5176 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;Total ram usage:        0 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    8
  5189 ;; This function calls:
  5190 ;;		_setTemp_Main
  5191 ;; This function is called by:
  5192 ;;		_main
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           
  5197                           ;psect for function _Temp_Main
  5198  0800                     _Temp_Main:	
  5199                           
  5200                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5201                           
  5202                           ;incstack = 0
  5203                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5204  0800  3186  2624         	fcall	_setTemp_Main
  5205  0802  0008               	return
  5206  0803                     __end_of_Temp_Main:	
  5207                           
  5208                           	psect	text9
  5209  0624                     __ptext9:	
  5210 ;; *************** function _setTemp_Main *****************
  5211 ;; Defined at:
  5212 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;		None
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  AD              2   77[BANK0 ] int 
  5217 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5218 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5219 ;;  TempGO          1   76[BANK0 ] unsigned char 
  5220 ;;  error           1   71[BANK0 ] unsigned char 
  5221 ;; Return value:  Size  Location     Type
  5222 ;;		None               void
  5223 ;; Registers used:
  5224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5232 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5233 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;Total ram usage:       10 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    7
  5237 ;; This function calls:
  5238 ;;		___lwdiv
  5239 ;;		_getMain_All_Error_Status
  5240 ;;		_getMain_All_LightsStatus
  5241 ;;		_setBuz
  5242 ;;		_setOverTemp_ADV_Restore
  5243 ;;		_setProductData
  5244 ;; This function is called by:
  5245 ;;		_Temp_Main
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           
  5250                           ;psect for function _setTemp_Main
  5251  0624                     _setTemp_Main:	
  5252                           
  5253                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5254                           
  5255                           ;incstack = 0
  5256                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5257  0624  3000               	movlw	0
  5258  0625  3190  20F8  3186   	fcall	_getMain_All_Error_Status
  5259  0628  0020               	movlb	0	; select bank0
  5260  0629  00E5               	movwf	??_setTemp_Main
  5261  062A  0865               	movf	??_setTemp_Main,w
  5262  062B  00E7               	movwf	setTemp_Main@error
  5263                           
  5264                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5265  062C  01E8               	clrf	setTemp_Main@SafeValue
  5266  062D  01E9               	clrf	setTemp_Main@SafeValue+1
  5267  062E  01EA               	clrf	setTemp_Main@DangerValue
  5268  062F  01EB               	clrf	setTemp_Main@DangerValue+1
  5269                           
  5270                           ;OverTemperature_B1.c: 75: int AD = 0;
  5271  0630  01ED               	clrf	setTemp_Main@AD
  5272  0631  01EE               	clrf	setTemp_Main@AD+1
  5273                           
  5274                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5275  0632  319B  2321  3186   	fcall	_getMain_All_LightsStatus
  5276  0635  0020               	movlb	0	; select bank0
  5277  0636  00E5               	movwf	??_setTemp_Main
  5278  0637  0865               	movf	??_setTemp_Main,w
  5279  0638  00EC               	movwf	setTemp_Main@TempGO
  5280                           
  5281                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5282  0639  0021               	movlb	1	; select bank1
  5283  063A  1C58               	btfss	_Temp^(0+128),0
  5284  063B  2EF3               	goto	l1784
  5285                           
  5286                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5287  063C  1958               	btfsc	_Temp^(0+128),2
  5288  063D  2E5B               	goto	l7511
  5289                           
  5290                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5291  063E  0020               	movlb	0	; select bank0
  5292  063F  086C               	movf	setTemp_Main@TempGO,w
  5293  0640  3A01               	xorlw	1
  5294  0641  1D03               	skipz
  5295  0642  2E46               	goto	l1790
  5296  0643  0021               	movlb	1	; select bank1
  5297  0644  1CD8               	btfss	_Temp^(0+128),1
  5298  0645  2E49               	goto	l7503
  5299  0646                     l1790:	
  5300  0646  0021               	movlb	1	; select bank1
  5301  0647  1CD8               	btfss	_Temp^(0+128),1
  5302  0648  2E58               	goto	l7509
  5303  0649                     l7503:	
  5304                           
  5305                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5306  0649  3001               	movlw	1
  5307  064A  07D9               	addwf	(_Temp^(0+128)+1),f
  5308  064B  3000               	movlw	0
  5309  064C  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5310                           
  5311                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5312  064D  3000               	movlw	0
  5313  064E  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5314  064F  30FA               	movlw	250
  5315  0650  1903               	skipnz
  5316  0651  0259               	subwf	(_Temp^(0+128)+1),w
  5317  0652  1C03               	skipc
  5318  0653  0008               	return
  5319                           
  5320                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5321  0654  01D9               	clrf	(_Temp^(0+128)+1)
  5322  0655  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5323                           
  5324                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5325  0656  1558               	bsf	_Temp^(0+128),2
  5326                           
  5327                           ;OverTemperature_B1.c: 92: }
  5328                           ;OverTemperature_B1.c: 93: } else {
  5329  0657  0008               	return
  5330  0658                     l7509:	
  5331                           
  5332                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5333  0658  01D9               	clrf	(_Temp^(0+128)+1)
  5334  0659  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5335                           
  5336                           ;OverTemperature_B1.c: 95: }
  5337                           ;OverTemperature_B1.c: 96: } else {
  5338  065A  0008               	return
  5339  065B                     l7511:	
  5340                           
  5341                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5342  065B  3001               	movlw	1
  5343  065C  07D9               	addwf	(_Temp^(0+128)+1),f
  5344  065D  3000               	movlw	0
  5345  065E  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5346                           
  5347                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5348  065F  3000               	movlw	0
  5349  0660  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5350  0661  3005               	movlw	5
  5351  0662  1903               	skipnz
  5352  0663  0259               	subwf	(_Temp^(0+128)+1),w
  5353  0664  1C03               	skipc
  5354  0665  0008               	return
  5355                           
  5356                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5357  0666  01D9               	clrf	(_Temp^(0+128)+1)
  5358  0667  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5359                           
  5360                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5361  0668  3003               	movlw	3
  5362  0669  0020               	movlb	0	; select bank0
  5363  066A  00A0               	movwf	___lwdiv@divisor
  5364  066B  3000               	movlw	0
  5365  066C  00A1               	movwf	___lwdiv@divisor+1
  5366  066D  300A               	movlw	10
  5367  066E  3ED8               	addlw	_Temp& (0+255)
  5368  066F  0086               	movwf	6
  5369  0670  0187               	clrf	7
  5370  0671  3008               	movlw	8
  5371  0672  3ED8               	addlw	_Temp& (0+255)
  5372  0673  0084               	movwf	4
  5373  0674  0185               	clrf	5
  5374  0675  3F00               	moviw [0]fsr0
  5375  0676  0021               	movlb	1	; select bank1
  5376  0677  075E               	addwf	(_Temp^(0+128)+6),w
  5377  0678  0020               	movlb	0	; select bank0
  5378  0679  00E5               	movwf	??_setTemp_Main
  5379  067A  3F01               	moviw [1]fsr0
  5380  067B  0021               	movlb	1	; select bank1
  5381  067C  3D5F               	addwfc	((_Temp+1)^(0+128)+6),w
  5382  067D  0020               	movlb	0	; select bank0
  5383  067E  00E6               	movwf	??_setTemp_Main+1
  5384  067F  3F40               	moviw [0]fsr1
  5385  0680  0765               	addwf	??_setTemp_Main,w
  5386  0681  00A2               	movwf	___lwdiv@dividend
  5387  0682  3F41               	moviw [1]fsr1
  5388  0683  3D66               	addwfc	??_setTemp_Main+1,w
  5389  0684  00A3               	movwf	___lwdiv@dividend+1
  5390  0685  3191  21FE  3186   	fcall	___lwdiv
  5391  0688  0020               	movlb	0	; select bank0
  5392  0689  0821               	movf	?___lwdiv+1,w
  5393  068A  01EE               	clrf	setTemp_Main@AD+1
  5394  068B  07EE               	addwf	setTemp_Main@AD+1,f
  5395  068C  0820               	movf	?___lwdiv,w
  5396  068D  01ED               	clrf	setTemp_Main@AD
  5397  068E  07ED               	addwf	setTemp_Main@AD,f
  5398                           
  5399                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5400  068F  319E  26B1  3186   	fcall	_setOverTemp_ADV_Restore
  5401                           
  5402                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5403  0692  0020               	movlb	0	; select bank0
  5404  0693  086E               	movf	setTemp_Main@AD+1,w
  5405  0694  3A80               	xorlw	128
  5406  0695  00E5               	movwf	??_setTemp_Main
  5407  0696  3080               	movlw	128
  5408  0697  0265               	subwf	??_setTemp_Main,w
  5409  0698  1D03               	skipz
  5410  0699  2E9C               	goto	u7125
  5411  069A  3001               	movlw	1
  5412  069B  026D               	subwf	setTemp_Main@AD,w
  5413  069C                     u7125:	
  5414  069C  1C03               	skipc
  5415  069D  0008               	return
  5416                           
  5417                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5418  069E  0021               	movlb	1	; select bank1
  5419  069F  1158               	bcf	_Temp^(0+128),2
  5420                           
  5421                           ;OverTemperature_B1.c: 123: SafeValue = 0x205;
  5422  06A0  3005               	movlw	5
  5423  06A1  0020               	movlb	0	; select bank0
  5424  06A2  00E8               	movwf	setTemp_Main@SafeValue
  5425  06A3  3002               	movlw	2
  5426  06A4  00E9               	movwf	setTemp_Main@SafeValue+1
  5427                           
  5428                           ;OverTemperature_B1.c: 124: DangerValue = 0x1ba;
  5429  06A5  30BA               	movlw	186
  5430  06A6  00EA               	movwf	setTemp_Main@DangerValue
  5431  06A7  3001               	movlw	1
  5432  06A8  00EB               	movwf	setTemp_Main@DangerValue+1
  5433                           
  5434                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5435  06A9  0021               	movlb	1	; select bank1
  5436  06AA  1CD8               	btfss	_Temp^(0+128),1
  5437  06AB  2ECA               	goto	l7541
  5438                           
  5439                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5440  06AC  0020               	movlb	0	; select bank0
  5441  06AD  0869               	movf	setTemp_Main@SafeValue+1,w
  5442  06AE  026E               	subwf	setTemp_Main@AD+1,w
  5443  06AF  1D03               	skipz
  5444  06B0  2EB3               	goto	u7145
  5445  06B1  0868               	movf	setTemp_Main@SafeValue,w
  5446  06B2  026D               	subwf	setTemp_Main@AD,w
  5447  06B3                     u7145:	
  5448  06B3  1C03               	skipc
  5449  06B4  2EDF               	goto	l7551
  5450                           
  5451                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5452  06B5  3001               	movlw	1
  5453  06B6  00E5               	movwf	??_setTemp_Main
  5454  06B7  0865               	movf	??_setTemp_Main,w
  5455  06B8  0021               	movlb	1	; select bank1
  5456  06B9  07DB               	addwf	(_Temp^(0+128)+3),f
  5457                           
  5458                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5459  06BA  3003               	movlw	3
  5460  06BB  025B               	subwf	(_Temp^(0+128)+3),w
  5461  06BC  1C03               	skipc
  5462  06BD  2EE1               	goto	l7553
  5463                           
  5464                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5465  06BE  01DB               	clrf	(_Temp^(0+128)+3)
  5466                           
  5467                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5468  06BF  10D8               	bcf	_Temp^(0+128),1
  5469                           
  5470                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5471  06C0  3064               	movlw	100
  5472  06C1  0020               	movlb	0	; select bank0
  5473  06C2  00A9               	movwf	setBuz@time
  5474  06C3  3000               	movlw	0
  5475  06C4  00AA               	movwf	setBuz@time+1
  5476  06C5  3002               	movlw	2
  5477  06C6  3194  2490  3186   	fcall	_setBuz
  5478                           
  5479                           ;OverTemperature_B1.c: 137: }
  5480                           ;OverTemperature_B1.c: 138: } else {
  5481  06C9  2EE1               	goto	l7553
  5482  06CA                     l7541:	
  5483                           ;OverTemperature_B1.c: 140: }
  5484                           ;OverTemperature_B1.c: 141: } else {
  5485                           
  5486                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5487                           
  5488                           
  5489                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5490  06CA  0020               	movlb	0	; select bank0
  5491  06CB  086E               	movf	setTemp_Main@AD+1,w
  5492  06CC  026B               	subwf	setTemp_Main@DangerValue+1,w
  5493  06CD  1D03               	skipz
  5494  06CE  2ED1               	goto	u7165
  5495  06CF  086D               	movf	setTemp_Main@AD,w
  5496  06D0  026A               	subwf	setTemp_Main@DangerValue,w
  5497  06D1                     u7165:	
  5498  06D1  1C03               	skipc
  5499  06D2  2EDF               	goto	l7551
  5500                           
  5501                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5502  06D3  3001               	movlw	1
  5503  06D4  00E5               	movwf	??_setTemp_Main
  5504  06D5  0865               	movf	??_setTemp_Main,w
  5505  06D6  0021               	movlb	1	; select bank1
  5506  06D7  07DB               	addwf	(_Temp^(0+128)+3),f
  5507                           
  5508                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5509  06D8  3003               	movlw	3
  5510  06D9  025B               	subwf	(_Temp^(0+128)+3),w
  5511  06DA  1C03               	skipc
  5512  06DB  2EE1               	goto	l7553
  5513                           
  5514                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5515  06DC  01DB               	clrf	(_Temp^(0+128)+3)
  5516                           
  5517                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5518  06DD  14D8               	bsf	_Temp^(0+128),1
  5519                           
  5520                           ;OverTemperature_B1.c: 147: }
  5521                           ;OverTemperature_B1.c: 148: } else {
  5522  06DE  2EE1               	goto	l7553
  5523  06DF                     l7551:	
  5524                           
  5525                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5526  06DF  0021               	movlb	1	; select bank1
  5527  06E0  01DB               	clrf	(_Temp^(0+128)+3)
  5528  06E1                     l7553:	
  5529                           
  5530                           ;OverTemperature_B1.c: 150: }
  5531                           ;OverTemperature_B1.c: 151: }
  5532                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5533  06E1  0020               	movlb	0	; select bank0
  5534  06E2  086E               	movf	setTemp_Main@AD+1,w
  5535  06E3  00E5               	movwf	??_setTemp_Main
  5536  06E4  0865               	movf	??_setTemp_Main,w
  5537  06E5  00E2               	movwf	setProductData@value
  5538  06E6  3018               	movlw	24
  5539  06E7  319B  236F  3186   	fcall	_setProductData
  5540                           
  5541                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5542  06EA  0020               	movlb	0	; select bank0
  5543  06EB  086D               	movf	setTemp_Main@AD,w
  5544  06EC  00E5               	movwf	??_setTemp_Main
  5545  06ED  0865               	movf	??_setTemp_Main,w
  5546  06EE  00E2               	movwf	setProductData@value
  5547  06EF  3019               	movlw	25
  5548  06F0  319B  236F         	fcall	_setProductData
  5549                           
  5550                           ;OverTemperature_B1.c: 169: }
  5551                           ;OverTemperature_B1.c: 170: }
  5552                           ;OverTemperature_B1.c: 171: }
  5553                           ;OverTemperature_B1.c: 174: } else {
  5554  06F2  0008               	return
  5555  06F3                     l1784:	
  5556                           
  5557                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5558  06F3  1C2F               	btfss	_myMain^(0+128),0
  5559  06F4  0008               	return
  5560                           
  5561                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5562  06F5  1458               	bsf	_Temp^(0+128),0
  5563  06F6  0008               	return
  5564  06F7                     __end_of_setTemp_Main:	
  5565                           
  5566                           	psect	text10
  5567  1EB1                     __ptext10:	
  5568 ;; *************** function _setOverTemp_ADV_Restore *****************
  5569 ;; Defined at:
  5570 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;		None
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  i               2    1[BANK0 ] int 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;		None               void
  5577 ;; Registers used:
  5578 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5585 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5586 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5587 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5588 ;;Total ram usage:        3 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    5
  5591 ;; This function calls:
  5592 ;;		Nothing
  5593 ;; This function is called by:
  5594 ;;		_setTemp_Main
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           
  5599                           ;psect for function _setOverTemp_ADV_Restore
  5600  1EB1                     _setOverTemp_ADV_Restore:	
  5601                           
  5602                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5603                           
  5604                           ;incstack = 0
  5605                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5606  1EB1  0020               	movlb	0	; select bank0
  5607  1EB2  01A1               	clrf	setOverTemp_ADV_Restore@i
  5608  1EB3  01A2               	clrf	setOverTemp_ADV_Restore@i+1
  5609  1EB4                     L2:	
  5610  1EB4  0822               	movf	setOverTemp_ADV_Restore@i+1,w
  5611  1EB5  3A80               	xorlw	128
  5612  1EB6  00A0               	movwf	??_setOverTemp_ADV_Restore
  5613  1EB7  3080               	movlw	128
  5614  1EB8  0220               	subwf	??_setOverTemp_ADV_Restore,w
  5615  1EB9  1D03               	skipz
  5616  1EBA  2EBD               	goto	u6235
  5617  1EBB  3005               	movlw	5
  5618  1EBC  0221               	subwf	setOverTemp_ADV_Restore@i,w
  5619  1EBD                     u6235:	
  5620  1EBD  1803               	btfsc	3,0
  5621  1EBE  0008               	return
  5622                           
  5623                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5624  1EBF  0020               	movlb	0	; select bank0
  5625  1EC0  3521               	lslf	setOverTemp_ADV_Restore@i,w
  5626  1EC1  3EDC               	addlw	(_Temp+4)& (0+255)
  5627  1EC2  0086               	movwf	6
  5628  1EC3  0187               	clrf	7
  5629  1EC4  3000               	movlw	0
  5630  1EC5  3FC0               	movwi [0]fsr1
  5631  1EC6  3FC1               	movwi [1]fsr1
  5632  1EC7  3001               	movlw	1
  5633  1EC8  07A1               	addwf	setOverTemp_ADV_Restore@i,f
  5634  1EC9  3000               	movlw	0
  5635  1ECA  3DA2               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5636  1ECB  2EB4               	goto	L2
  5637  1ECC                     __end_of_setOverTemp_ADV_Restore:	
  5638                           
  5639                           	psect	text11
  5640  1A91                     __ptext11:	
  5641 ;; *************** function _Temp_Initialization *****************
  5642 ;; Defined at:
  5643 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;		None               void
  5650 ;; Registers used:
  5651 ;;		status,2, status,0, pclath, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;Total ram usage:        0 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    6
  5664 ;; This function calls:
  5665 ;;		_setTemp_Initialization
  5666 ;; This function is called by:
  5667 ;;		_main
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           
  5672                           ;psect for function _Temp_Initialization
  5673  1A91                     _Temp_Initialization:	
  5674                           
  5675                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5676                           
  5677                           ;incstack = 0
  5678                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5679  1A91  3187  27FF         	fcall	_setTemp_Initialization
  5680  1A93  0008               	return
  5681  1A94                     __end_of_Temp_Initialization:	
  5682                           
  5683                           	psect	text12
  5684  07FF                     __ptext12:	
  5685 ;; *************** function _setTemp_Initialization *****************
  5686 ;; Defined at:
  5687 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;		None
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;		None
  5692 ;; Return value:  Size  Location     Type
  5693 ;;		None               void
  5694 ;; Registers used:
  5695 ;;		None
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;Total ram usage:        0 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    5
  5708 ;; This function calls:
  5709 ;;		Nothing
  5710 ;; This function is called by:
  5711 ;;		_Temp_Initialization
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           
  5716                           ;psect for function _setTemp_Initialization
  5717  07FF                     _setTemp_Initialization:	
  5718                           
  5719                           ;incstack = 0
  5720                           ; Regs used in _setTemp_Initialization: []
  5721  07FF  0008               	return
  5722  0800                     __end_of_setTemp_Initialization:	
  5723                           
  5724                           	psect	text13
  5725  1AE7                     __ptext13:	
  5726 ;; *************** function _Switch_Main *****************
  5727 ;; Defined at:
  5728 ;;		line 76 in file "../src/Switch_B1.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;		None
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;		None
  5733 ;; Return value:  Size  Location     Type
  5734 ;;		None               void
  5735 ;; Registers used:
  5736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;Total ram usage:        0 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    9
  5749 ;; This function calls:
  5750 ;;		_TouchPower
  5751 ;;		_setSw_Main
  5752 ;; This function is called by:
  5753 ;;		_main
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           
  5758                           ;psect for function _Switch_Main
  5759  1AE7                     _Switch_Main:	
  5760                           
  5761                           ;Switch_B1.c: 79: setSw_Main(1);
  5762                           
  5763                           ;incstack = 0
  5764                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5765  1AE7  3001               	movlw	1
  5766  1AE8  3182  2205  319A   	fcall	_setSw_Main
  5767                           
  5768                           ;Switch_B1.c: 91: TouchPower();
  5769  1AEB  319D  25A5         	fcall	_TouchPower
  5770  1AED  0008               	return
  5771  1AEE                     __end_of_Switch_Main:	
  5772                           
  5773                           	psect	text14
  5774  0205                     __ptext14:	
  5775 ;; *************** function _setSw_Main *****************
  5776 ;; Defined at:
  5777 ;;		line 117 in file "../src/Switch_B1.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;  sw              1    wreg     unsigned char 
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  sw              1   17[BANK0 ] unsigned char 
  5782 ;; Return value:  Size  Location     Type
  5783 ;;		None               void
  5784 ;; Registers used:
  5785 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;Total ram usage:        3 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:    8
  5798 ;; This function calls:
  5799 ;;		_SwPointSelect
  5800 ;;		_getMain_All_Error_Status
  5801 ;;		_getSw_KeyStatus
  5802 ;;		_setBuz
  5803 ;;		_setDimmerLights_SwOff
  5804 ;;		_setDimmerLights_SwOn
  5805 ;;		_setRF_Learn
  5806 ;; This function is called by:
  5807 ;;		_Switch_Main
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           
  5812                           ;psect for function _setSw_Main
  5813  0205                     _setSw_Main:	
  5814                           
  5815                           ;incstack = 0
  5816                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5817                           ;setSw_Main@sw stored from wreg
  5818  0205  0020               	movlb	0	; select bank0
  5819  0206  00B1               	movwf	setSw_Main@sw
  5820                           
  5821                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5822  0207  0831               	movf	setSw_Main@sw,w
  5823  0208  319B  23DB  3182   	fcall	_SwPointSelect
  5824                           
  5825                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5826  020B  0021               	movlb	1	; select bank1
  5827  020C  0852               	movf	_Sw^(0+128),w
  5828  020D  0086               	movwf	6
  5829  020E  3001               	movlw	1	; select bank2/3
  5830  020F  0087               	movwf	7
  5831  0210  1C01               	btfss	1,0
  5832  0211  2B7C               	goto	l2512
  5833                           
  5834                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5835  0212  3000               	movlw	0
  5836  0213  3190  20F8  3182   	fcall	_getMain_All_Error_Status
  5837  0216  3800               	iorlw	0
  5838  0217  1D03               	skipz
  5839  0218  2A37               	goto	l7665
  5840                           
  5841                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5842  0219  0021               	movlb	1	; select bank1
  5843  021A  0A52               	incf	_Sw^(0+128),w
  5844  021B  0086               	movwf	6
  5845  021C  3001               	movlw	1	; select bank2/3
  5846  021D  0087               	movwf	7
  5847  021E  1081               	bcf	1,1
  5848                           
  5849                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5850  021F  0020               	movlb	0	; select bank0
  5851  0220  0831               	movf	setSw_Main@sw,w
  5852  0221  319C  2488  3182   	fcall	_getSw_KeyStatus
  5853  0224  3A01               	xorlw	1
  5854  0225  3000               	movlw	0
  5855  0226  1903               	skipnz
  5856  0227  3001               	movlw	1
  5857  0228  0020               	movlb	0	; select bank0
  5858  0229  00AF               	movwf	??_setSw_Main
  5859  022A  0021               	movlb	1	; select bank1
  5860  022B  0852               	movf	_Sw^(0+128),w
  5861  022C  0086               	movwf	6
  5862  022D  3001               	movlw	1	; select bank2/3
  5863  022E  0087               	movwf	7
  5864  022F  0020               	movlb	0	; select bank0
  5865  0230  0DAF               	rlf	??_setSw_Main,f
  5866  0231  0801               	movf	1,w
  5867  0232  062F               	xorwf	??_setSw_Main,w
  5868  0233  39FD               	andlw	-3
  5869  0234  062F               	xorwf	??_setSw_Main,w
  5870  0235  0081               	movwf	1
  5871                           
  5872                           ;Switch_B1.c: 124: } else {
  5873  0236  2A4D               	goto	l2514
  5874  0237                     l7665:	
  5875                           
  5876                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5877  0237  0021               	movlb	1	; select bank1
  5878  0238  0A52               	incf	_Sw^(0+128),w
  5879  0239  0086               	movwf	6
  5880  023A  3001               	movlw	1	; select bank2/3
  5881  023B  0087               	movwf	7
  5882  023C  1881               	btfsc	1,1
  5883  023D  2A4D               	goto	l2514
  5884                           
  5885                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5886  023E  0A52               	incf	_Sw^(0+128),w
  5887  023F  0086               	movwf	6
  5888  0240  3001               	movlw	1	; select bank2/3
  5889  0241  0087               	movwf	7
  5890  0242  1481               	bsf	1,1
  5891                           
  5892                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5893  0243  0852               	movf	_Sw^(0+128),w
  5894  0244  0086               	movwf	6
  5895  0245  3001               	movlw	1	; select bank2/3
  5896  0246  0087               	movwf	7
  5897  0247  1081               	bcf	1,1
  5898                           
  5899                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5900  0248  0852               	movf	_Sw^(0+128),w
  5901  0249  0086               	movwf	6
  5902  024A  3001               	movlw	1	; select bank2/3
  5903  024B  0087               	movwf	7
  5904  024C  1501               	bsf	1,2
  5905  024D                     l2514:	
  5906                           
  5907                           ;Switch_B1.c: 130: }
  5908                           ;Switch_B1.c: 131: }
  5909                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5910  024D  0021               	movlb	1	; select bank1
  5911  024E  0852               	movf	_Sw^(0+128),w
  5912  024F  0086               	movwf	6
  5913  0250  3001               	movlw	1	; select bank2/3
  5914  0251  0087               	movwf	7
  5915  0252  1C81               	btfss	1,1
  5916  0253  2B24               	goto	l7713
  5917                           
  5918                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5919  0254  0852               	movf	_Sw^(0+128),w
  5920  0255  0086               	movwf	6
  5921  0256  3001               	movlw	1	; select bank2/3
  5922  0257  0087               	movwf	7
  5923  0258  1901               	btfsc	1,2
  5924  0259  2A80               	goto	l7681
  5925                           
  5926                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5927  025A  3001               	movlw	1
  5928  025B  0020               	movlb	0	; select bank0
  5929  025C  00AF               	movwf	??_setSw_Main
  5930  025D  0021               	movlb	1	; select bank1
  5931  025E  0852               	movf	_Sw^(0+128),w
  5932  025F  3E02               	addlw	2
  5933  0260  0086               	movwf	6
  5934  0261  3001               	movlw	1	; select bank2/3
  5935  0262  0087               	movwf	7
  5936  0263  0020               	movlb	0	; select bank0
  5937  0264  082F               	movf	??_setSw_Main,w
  5938  0265  0781               	addwf	1,f
  5939                           
  5940                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5941  0266  0021               	movlb	1	; select bank1
  5942  0267  0852               	movf	_Sw^(0+128),w
  5943  0268  3E02               	addlw	2
  5944  0269  0086               	movwf	6
  5945  026A  3001               	movlw	1	; select bank2/3
  5946  026B  0087               	movwf	7
  5947  026C  3003               	movlw	3
  5948  026D  0201               	subwf	1,w
  5949  026E  1C03               	skipc
  5950  026F  0008               	return
  5951                           
  5952                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5953  0270  0852               	movf	_Sw^(0+128),w
  5954  0271  3E02               	addlw	2
  5955  0272  0086               	movwf	6
  5956  0273  3001               	movlw	1	; select bank2/3
  5957  0274  0087               	movwf	7
  5958  0275  0181               	clrf	1
  5959                           
  5960                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5961  0276  0852               	movf	_Sw^(0+128),w
  5962  0277  0086               	movwf	6
  5963  0278  3001               	movlw	1	; select bank2/3
  5964  0279  0087               	movwf	7
  5965  027A  1501               	bsf	1,2
  5966                           
  5967                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5968  027B  0020               	movlb	0	; select bank0
  5969  027C  0831               	movf	setSw_Main@sw,w
  5970  027D  3191  2193         	fcall	_setDimmerLights_SwOn
  5971                           
  5972                           ;Switch_B1.c: 146: }
  5973                           ;Switch_B1.c: 147: } else {
  5974  027F  0008               	return
  5975  0280                     l7681:	
  5976                           
  5977                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5978  0280  0021               	movlb	1	; select bank1
  5979  0281  0852               	movf	_Sw^(0+128),w
  5980  0282  0086               	movwf	6
  5981  0283  3001               	movlw	1	; select bank2/3
  5982  0284  0087               	movwf	7
  5983  0285  1981               	btfsc	1,3
  5984  0286  2AB1               	goto	l7689
  5985                           
  5986                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5987  0287  0852               	movf	_Sw^(0+128),w
  5988  0288  3E03               	addlw	3
  5989  0289  0086               	movwf	6
  5990  028A  3001               	movlw	1	; select bank2/3
  5991  028B  0087               	movwf	7
  5992  028C  3001               	movlw	1
  5993  028D  0781               	addwf	1,f
  5994  028E  3141               	addfsr 1,1
  5995  028F  1803               	skipnc
  5996  0290  0A81               	incf	1,f
  5997                           
  5998                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5999  0291  0852               	movf	_Sw^(0+128),w
  6000  0292  3E03               	addlw	3
  6001  0293  0086               	movwf	6
  6002  0294  3001               	movlw	1	; select bank2/3
  6003  0295  0087               	movwf	7
  6004  0296  3F40               	moviw [0]fsr1
  6005  0297  0020               	movlb	0	; select bank0
  6006  0298  00AF               	movwf	??_setSw_Main
  6007  0299  3F41               	moviw [1]fsr1
  6008  029A  00B0               	movwf	??_setSw_Main+1
  6009  029B  3000               	movlw	0
  6010  029C  0230               	subwf	??_setSw_Main+1,w
  6011  029D  304B               	movlw	75
  6012  029E  1903               	skipnz
  6013  029F  022F               	subwf	??_setSw_Main,w
  6014  02A0  1C03               	skipc
  6015  02A1  0008               	return
  6016                           
  6017                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  6018  02A2  0021               	movlb	1	; select bank1
  6019  02A3  0852               	movf	_Sw^(0+128),w
  6020  02A4  3E03               	addlw	3
  6021  02A5  0086               	movwf	6
  6022  02A6  3001               	movlw	1	; select bank2/3
  6023  02A7  0087               	movwf	7
  6024  02A8  3000               	movlw	0
  6025  02A9  3FC0               	movwi [0]fsr1
  6026  02AA  3FC1               	movwi [1]fsr1
  6027                           
  6028                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  6029  02AB  0852               	movf	_Sw^(0+128),w
  6030  02AC  0086               	movwf	6
  6031  02AD  3001               	movlw	1	; select bank2/3
  6032  02AE  0087               	movwf	7
  6033  02AF  1581               	bsf	1,3
  6034                           
  6035                           ;Switch_B1.c: 161: }
  6036                           ;Switch_B1.c: 162: } else {
  6037  02B0  0008               	return
  6038  02B1                     l7689:	
  6039                           
  6040                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  6041  02B1  0852               	movf	_Sw^(0+128),w
  6042  02B2  0086               	movwf	6
  6043  02B3  3001               	movlw	1	; select bank2/3
  6044  02B4  0087               	movwf	7
  6045  02B5  1A01               	btfsc	1,4
  6046  02B6  2AF0               	goto	l7703
  6047                           
  6048                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  6049  02B7  0852               	movf	_Sw^(0+128),w
  6050  02B8  3E05               	addlw	5
  6051  02B9  0086               	movwf	6
  6052  02BA  3001               	movlw	1	; select bank2/3
  6053  02BB  0087               	movwf	7
  6054  02BC  3001               	movlw	1
  6055  02BD  0781               	addwf	1,f
  6056  02BE  3141               	addfsr 1,1
  6057  02BF  1803               	skipnc
  6058  02C0  0A81               	incf	1,f
  6059                           
  6060                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  6061  02C1  0852               	movf	_Sw^(0+128),w
  6062  02C2  3E05               	addlw	5
  6063  02C3  0086               	movwf	6
  6064  02C4  3001               	movlw	1	; select bank2/3
  6065  02C5  0087               	movwf	7
  6066  02C6  3F40               	moviw [0]fsr1
  6067  02C7  0020               	movlb	0	; select bank0
  6068  02C8  00AF               	movwf	??_setSw_Main
  6069  02C9  3F41               	moviw [1]fsr1
  6070  02CA  00B0               	movwf	??_setSw_Main+1
  6071  02CB  3000               	movlw	0
  6072  02CC  0230               	subwf	??_setSw_Main+1,w
  6073  02CD  304B               	movlw	75
  6074  02CE  1903               	skipnz
  6075  02CF  022F               	subwf	??_setSw_Main,w
  6076  02D0  1C03               	skipc
  6077  02D1  0008               	return
  6078                           
  6079                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  6080  02D2  0021               	movlb	1	; select bank1
  6081  02D3  0852               	movf	_Sw^(0+128),w
  6082  02D4  3E05               	addlw	5
  6083  02D5  0086               	movwf	6
  6084  02D6  3001               	movlw	1	; select bank2/3
  6085  02D7  0087               	movwf	7
  6086  02D8  3000               	movlw	0
  6087  02D9  3FC0               	movwi [0]fsr1
  6088  02DA  3FC1               	movwi [1]fsr1
  6089                           
  6090                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  6091  02DB  0852               	movf	_Sw^(0+128),w
  6092  02DC  0086               	movwf	6
  6093  02DD  3001               	movlw	1	; select bank2/3
  6094  02DE  0087               	movwf	7
  6095  02DF  1601               	bsf	1,4
  6096                           
  6097                           ;Switch_B1.c: 171: setRF_Learn(1);
  6098  02E0  3001               	movlw	1
  6099  02E1  319D  2552  3182   	fcall	_setRF_Learn
  6100                           
  6101                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  6102  02E4  0021               	movlb	1	; select bank1
  6103  02E5  1EAF               	btfss	_myMain^(0+128),5
  6104  02E6  0008               	return
  6105                           
  6106                           ;Switch_B1.c: 173: setBuz(2, 100);
  6107  02E7  3064               	movlw	100
  6108  02E8  0020               	movlb	0	; select bank0
  6109  02E9  00A9               	movwf	setBuz@time
  6110  02EA  3000               	movlw	0
  6111  02EB  00AA               	movwf	setBuz@time+1
  6112  02EC  3002               	movlw	2
  6113  02ED  3194  2490         	fcall	_setBuz
  6114                           
  6115                           ;Switch_B1.c: 174: }
  6116                           ;Switch_B1.c: 178: }
  6117                           ;Switch_B1.c: 179: } else {
  6118  02EF  0008               	return
  6119  02F0                     l7703:	
  6120                           
  6121                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  6122  02F0  0021               	movlb	1	; select bank1
  6123  02F1  0852               	movf	_Sw^(0+128),w
  6124  02F2  0086               	movwf	6
  6125  02F3  3001               	movlw	1	; select bank2/3
  6126  02F4  0087               	movwf	7
  6127  02F5  1A81               	btfsc	1,5
  6128  02F6  0008               	return
  6129                           
  6130                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  6131  02F7  0852               	movf	_Sw^(0+128),w
  6132  02F8  3E07               	addlw	7
  6133  02F9  0086               	movwf	6
  6134  02FA  3001               	movlw	1	; select bank2/3
  6135  02FB  0087               	movwf	7
  6136  02FC  3001               	movlw	1
  6137  02FD  0781               	addwf	1,f
  6138  02FE  3141               	addfsr 1,1
  6139  02FF  1803               	skipnc
  6140  0300  0A81               	incf	1,f
  6141                           
  6142                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  6143  0301  0852               	movf	_Sw^(0+128),w
  6144  0302  3E07               	addlw	7
  6145  0303  0086               	movwf	6
  6146  0304  3001               	movlw	1	; select bank2/3
  6147  0305  0087               	movwf	7
  6148  0306  3F40               	moviw [0]fsr1
  6149  0307  0020               	movlb	0	; select bank0
  6150  0308  00AF               	movwf	??_setSw_Main
  6151  0309  3F41               	moviw [1]fsr1
  6152  030A  00B0               	movwf	??_setSw_Main+1
  6153  030B  3000               	movlw	0
  6154  030C  0230               	subwf	??_setSw_Main+1,w
  6155  030D  3096               	movlw	150
  6156  030E  1903               	skipnz
  6157  030F  022F               	subwf	??_setSw_Main,w
  6158  0310  1C03               	skipc
  6159  0311  0008               	return
  6160                           
  6161                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  6162  0312  0021               	movlb	1	; select bank1
  6163  0313  0852               	movf	_Sw^(0+128),w
  6164  0314  3E07               	addlw	7
  6165  0315  0086               	movwf	6
  6166  0316  3001               	movlw	1	; select bank2/3
  6167  0317  0087               	movwf	7
  6168  0318  3000               	movlw	0
  6169  0319  3FC0               	movwi [0]fsr1
  6170  031A  3FC1               	movwi [1]fsr1
  6171                           
  6172                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  6173  031B  0852               	movf	_Sw^(0+128),w
  6174  031C  0086               	movwf	6
  6175  031D  3001               	movlw	1	; select bank2/3
  6176  031E  0087               	movwf	7
  6177  031F  1681               	bsf	1,5
  6178                           
  6179                           ;Switch_B1.c: 187: setRF_Learn(0);
  6180  0320  3000               	movlw	0
  6181  0321  319D  2552         	fcall	_setRF_Learn
  6182                           
  6183                           ;Switch_B1.c: 190: }
  6184                           ;Switch_B1.c: 191: }
  6185                           ;Switch_B1.c: 192: }
  6186                           ;Switch_B1.c: 194: }
  6187                           ;Switch_B1.c: 195: }
  6188                           ;Switch_B1.c: 196: } else {
  6189  0323  0008               	return
  6190  0324                     l7713:	
  6191                           
  6192                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  6193  0324  0021               	movlb	1	; select bank1
  6194  0325  0852               	movf	_Sw^(0+128),w
  6195  0326  0086               	movwf	6
  6196  0327  3001               	movlw	1	; select bank2/3
  6197  0328  0087               	movwf	7
  6198  0329  1D01               	btfss	1,2
  6199  032A  0008               	return
  6200                           
  6201                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  6202  032B  3001               	movlw	1
  6203  032C  0020               	movlb	0	; select bank0
  6204  032D  00AF               	movwf	??_setSw_Main
  6205  032E  0021               	movlb	1	; select bank1
  6206  032F  0852               	movf	_Sw^(0+128),w
  6207  0330  3E02               	addlw	2
  6208  0331  0086               	movwf	6
  6209  0332  3001               	movlw	1	; select bank2/3
  6210  0333  0087               	movwf	7
  6211  0334  0020               	movlb	0	; select bank0
  6212  0335  082F               	movf	??_setSw_Main,w
  6213  0336  0781               	addwf	1,f
  6214                           
  6215                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  6216  0337  0021               	movlb	1	; select bank1
  6217  0338  0852               	movf	_Sw^(0+128),w
  6218  0339  3E02               	addlw	2
  6219  033A  0086               	movwf	6
  6220  033B  3001               	movlw	1	; select bank2/3
  6221  033C  0087               	movwf	7
  6222  033D  3003               	movlw	3
  6223  033E  0201               	subwf	1,w
  6224  033F  1C03               	skipc
  6225  0340  0008               	return
  6226                           
  6227                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  6228  0341  0852               	movf	_Sw^(0+128),w
  6229  0342  3E02               	addlw	2
  6230  0343  0086               	movwf	6
  6231  0344  3001               	movlw	1	; select bank2/3
  6232  0345  0087               	movwf	7
  6233  0346  0181               	clrf	1
  6234                           
  6235                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6236  0347  0852               	movf	_Sw^(0+128),w
  6237  0348  0086               	movwf	6
  6238  0349  3001               	movlw	1	; select bank2/3
  6239  034A  0087               	movwf	7
  6240  034B  1101               	bcf	1,2
  6241                           
  6242                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6243  034C  0852               	movf	_Sw^(0+128),w
  6244  034D  3E03               	addlw	3
  6245  034E  0086               	movwf	6
  6246  034F  3001               	movlw	1	; select bank2/3
  6247  0350  0087               	movwf	7
  6248  0351  3000               	movlw	0
  6249  0352  3FC0               	movwi [0]fsr1
  6250  0353  3FC1               	movwi [1]fsr1
  6251                           
  6252                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6253  0354  0852               	movf	_Sw^(0+128),w
  6254  0355  0086               	movwf	6
  6255  0356  3001               	movlw	1	; select bank2/3
  6256  0357  0087               	movwf	7
  6257  0358  1181               	bcf	1,3
  6258                           
  6259                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6260  0359  0852               	movf	_Sw^(0+128),w
  6261  035A  0086               	movwf	6
  6262  035B  3001               	movlw	1	; select bank2/3
  6263  035C  0087               	movwf	7
  6264  035D  1201               	bcf	1,4
  6265                           
  6266                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6267  035E  0852               	movf	_Sw^(0+128),w
  6268  035F  0086               	movwf	6
  6269  0360  3001               	movlw	1	; select bank2/3
  6270  0361  0087               	movwf	7
  6271  0362  1281               	bcf	1,5
  6272                           
  6273                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6274  0363  0852               	movf	_Sw^(0+128),w
  6275  0364  3E05               	addlw	5
  6276  0365  0086               	movwf	6
  6277  0366  3001               	movlw	1	; select bank2/3
  6278  0367  0087               	movwf	7
  6279  0368  3000               	movlw	0
  6280  0369  3FC0               	movwi [0]fsr1
  6281  036A  3FC1               	movwi [1]fsr1
  6282                           
  6283                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6284  036B  0852               	movf	_Sw^(0+128),w
  6285  036C  3E07               	addlw	7
  6286  036D  0086               	movwf	6
  6287  036E  3001               	movlw	1	; select bank2/3
  6288  036F  0087               	movwf	7
  6289  0370  3000               	movlw	0
  6290  0371  3FC0               	movwi [0]fsr1
  6291  0372  3FC1               	movwi [1]fsr1
  6292                           
  6293                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6294  0373  0020               	movlb	0	; select bank0
  6295  0374  0831               	movf	setSw_Main@sw,w
  6296  0375  3192  226D  3182   	fcall	_setDimmerLights_SwOff
  6297                           
  6298                           ;Switch_B1.c: 219: setRF_Learn(0);
  6299  0378  3000               	movlw	0
  6300  0379  319D  2552         	fcall	_setRF_Learn
  6301                           
  6302                           ;Switch_B1.c: 221: }
  6303                           ;Switch_B1.c: 222: }
  6304                           ;Switch_B1.c: 223: }
  6305                           ;Switch_B1.c: 224: } else {
  6306  037B  0008               	return
  6307  037C                     l2512:	
  6308                           
  6309                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6310  037C  1C2F               	btfss	_myMain^(0+128),0
  6311  037D  0008               	return
  6312                           
  6313                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6314  037E  0852               	movf	_Sw^(0+128),w
  6315  037F  0086               	movwf	6
  6316  0380  3001               	movlw	1	; select bank2/3
  6317  0381  0087               	movwf	7
  6318  0382  1401               	bsf	1,0
  6319  0383  0008               	return
  6320  0384                     __end_of_setSw_Main:	
  6321                           
  6322                           	psect	text15
  6323  1D52                     __ptext15:	
  6324 ;; *************** function _setRF_Learn *****************
  6325 ;; Defined at:
  6326 ;;		line 33 in file "../src/RF_Control_B1.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;  command         1    wreg     unsigned char 
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  command         1    1[BANK0 ] unsigned char 
  6331 ;; Return value:  Size  Location     Type
  6332 ;;		None               void
  6333 ;; Registers used:
  6334 ;;		wreg, status,2, status,0
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6344 ;;Total ram usage:        2 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    5
  6347 ;; This function calls:
  6348 ;;		Nothing
  6349 ;; This function is called by:
  6350 ;;		_setSw_Main
  6351 ;; This function uses a non-reentrant model
  6352 ;;
  6353                           
  6354                           
  6355                           ;psect for function _setRF_Learn
  6356  1D52                     _setRF_Learn:	
  6357                           
  6358                           ;incstack = 0
  6359                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6360                           ;setRF_Learn@command stored from wreg
  6361  1D52  0020               	movlb	0	; select bank0
  6362  1D53  00A1               	movwf	setRF_Learn@command
  6363                           
  6364                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6365  1D54  0821               	movf	setRF_Learn@command,w
  6366  1D55  3A01               	xorlw	1
  6367  1D56  3000               	movlw	0
  6368  1D57  1903               	skipnz
  6369  1D58  3001               	movlw	1
  6370  1D59  00A0               	movwf	??_setRF_Learn
  6371  1D5A  0EA0               	swapf	??_setRF_Learn,f
  6372  1D5B  0DA0               	rlf	??_setRF_Learn,f
  6373  1D5C  0DA0               	rlf	??_setRF_Learn,f
  6374  1D5D  0021               	movlb	1	; select bank1
  6375  1D5E  0820               	movf	_RF1^(0+128),w
  6376  1D5F  0020               	movlb	0	; select bank0
  6377  1D60  0620               	xorwf	??_setRF_Learn,w
  6378  1D61  39BF               	andlw	-65
  6379  1D62  0620               	xorwf	??_setRF_Learn,w
  6380  1D63  0021               	movlb	1	; select bank1
  6381  1D64  00A0               	movwf	_RF1^(0+128)
  6382  1D65  0008               	return
  6383  1D66                     __end_of_setRF_Learn:	
  6384                           
  6385                           	psect	text16
  6386  1C88                     __ptext16:	
  6387 ;; *************** function _getSw_KeyStatus *****************
  6388 ;; Defined at:
  6389 ;;		line 237 in file "../src/Switch_B1.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;  sw              1    wreg     unsigned char 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;  sw              1    0[COMMON] unsigned char 
  6394 ;;  status          1    1[BANK0 ] unsigned char 
  6395 ;; Return value:  Size  Location     Type
  6396 ;;                  1    wreg      unsigned char 
  6397 ;; Registers used:
  6398 ;;		wreg, status,2
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6407 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;Total ram usage:        3 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    5
  6411 ;; This function calls:
  6412 ;;		Nothing
  6413 ;; This function is called by:
  6414 ;;		_setSw_Main
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           
  6419                           ;psect for function _getSw_KeyStatus
  6420  1C88                     _getSw_KeyStatus:	
  6421                           
  6422                           ;Switch_B1.c: 238: char status = 0;
  6423                           
  6424                           ;incstack = 0
  6425                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6426  1C88  0020               	movlb	0	; select bank0
  6427  1C89  01A1               	clrf	getSw_KeyStatus@status
  6428                           
  6429                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6430  1C8A  01A2               	clrf	_getSw_KeyStatus$6462
  6431  1C8B  0AA2               	incf	_getSw_KeyStatus$6462,f
  6432  1C8C  1F0C               	btfss	12,6	;volatile
  6433  1C8D  1A0C               	btfsc	12,4	;volatile
  6434  1C8E  2C93               	goto	l7121
  6435  1C8F  1C0C               	btfss	12,0	;volatile
  6436  1C90  1B8C               	btfsc	12,7	;volatile
  6437  1C91  2C93               	goto	l7121
  6438  1C92  01A2               	clrf	_getSw_KeyStatus$6462
  6439  1C93                     l7121:	
  6440  1C93  0822               	movf	_getSw_KeyStatus$6462,w
  6441  1C94  00A0               	movwf	??_getSw_KeyStatus
  6442  1C95  0820               	movf	??_getSw_KeyStatus,w
  6443  1C96  00A1               	movwf	getSw_KeyStatus@status
  6444                           
  6445                           ;Switch_B1.c: 275: return status;
  6446  1C97  0821               	movf	getSw_KeyStatus@status,w
  6447  1C98  0008               	return
  6448  1C99                     __end_of_getSw_KeyStatus:	
  6449                           
  6450                           	psect	text17
  6451  1BDB                     __ptext17:	
  6452 ;; *************** function _SwPointSelect *****************
  6453 ;; Defined at:
  6454 ;;		line 25 in file "../src/Switch_B1.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;  sw              1    wreg     unsigned char 
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;  sw              1    1[BANK0 ] unsigned char 
  6459 ;; Return value:  Size  Location     Type
  6460 ;;		None               void
  6461 ;; Registers used:
  6462 ;;		wreg
  6463 ;; Tracked objects:
  6464 ;;		On entry : 0/0
  6465 ;;		On exit  : 0/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;Total ram usage:        2 bytes
  6473 ;; Hardware stack levels used:    1
  6474 ;; Hardware stack levels required when called:    5
  6475 ;; This function calls:
  6476 ;;		Nothing
  6477 ;; This function is called by:
  6478 ;;		_setSw_Main
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           
  6483                           ;psect for function _SwPointSelect
  6484  1BDB                     _SwPointSelect:	
  6485                           
  6486                           ;incstack = 0
  6487                           ; Regs used in _SwPointSelect: [wreg]
  6488                           ;SwPointSelect@sw stored from wreg
  6489  1BDB  0020               	movlb	0	; select bank0
  6490  1BDC  00A1               	movwf	SwPointSelect@sw
  6491                           
  6492                           ;Switch_B1.c: 28: if (sw == 1) {
  6493  1BDD  0821               	movf	SwPointSelect@sw,w
  6494  1BDE  3A01               	xorlw	1
  6495  1BDF  1D03               	skipz
  6496  1BE0  0008               	return
  6497                           
  6498                           ;Switch_B1.c: 29: Sw = &Sw1;
  6499  1BE1  30BE               	movlw	_Sw1& (0+255)
  6500  1BE2  00A0               	movwf	??_SwPointSelect
  6501  1BE3  0820               	movf	??_SwPointSelect,w
  6502  1BE4  0021               	movlb	1	; select bank1
  6503  1BE5  00D2               	movwf	_Sw^(0+128)
  6504  1BE6  0008               	return
  6505  1BE7                     __end_of_SwPointSelect:	
  6506                           
  6507                           	psect	text18
  6508  1DA5                     __ptext18:	
  6509 ;; *************** function _TouchPower *****************
  6510 ;; Defined at:
  6511 ;;		line 10 in file "../src/Switch_B1.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;		None
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;		None
  6516 ;; Return value:  Size  Location     Type
  6517 ;;		None               void
  6518 ;; Registers used:
  6519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;Total ram usage:        0 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:    6
  6532 ;; This function calls:
  6533 ;;		_Timeout_Counter
  6534 ;;		_set_TimeoutCleared
  6535 ;; This function is called by:
  6536 ;;		_Switch_Main
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           
  6541                           ;psect for function _TouchPower
  6542  1DA5                     _TouchPower:	
  6543                           
  6544                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6545                           
  6546                           ;incstack = 0
  6547                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6548  1DA5  0021               	movlb	1	; select bank1
  6549  1DA6  1C2F               	btfss	_myMain^(0+128),0
  6550  1DA7  0008               	return
  6551                           
  6552                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6553  1DA8  0020               	movlb	0	; select bank0
  6554  1DA9  180D               	btfsc	13,0	;volatile
  6555  1DAA  0008               	return
  6556  1DAB  2DB1               	goto	l7647
  6557  1DAC                     l2492:	
  6558                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6559                           
  6560                           
  6561                           ;Switch_B1.c: 14: RB0 = 1;
  6562  1DAC  0020               	movlb	0	; select bank0
  6563  1DAD  140D               	bsf	13,0	;volatile
  6564                           
  6565                           ;Switch_B1.c: 15: Timeout_Counter();
  6566  1DAE  319D  2590  319D   	fcall	_Timeout_Counter
  6567  1DB1                     l7647:	
  6568  1DB1  0020               	movlb	0	; select bank0
  6569  1DB2  180D               	btfsc	13,0	;volatile
  6570  1DB3  2DB7               	goto	l7651
  6571  1DB4  0021               	movlb	1	; select bank1
  6572  1DB5  1D39               	btfss	(_myMain^(0+128)+10),2
  6573  1DB6  2DAC               	goto	l2492
  6574  1DB7                     l7651:	
  6575                           
  6576                           ;Switch_B1.c: 16: }
  6577                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6578  1DB7  319A  22BC         	fcall	_set_TimeoutCleared
  6579  1DB9  0008               	return
  6580  1DBA                     __end_of_TouchPower:	
  6581                           
  6582                           	psect	text19
  6583  1ABC                     __ptext19:	
  6584 ;; *************** function _set_TimeoutCleared *****************
  6585 ;; Defined at:
  6586 ;;		line 281 in file "../src/Main_B1.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;		None
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;		None
  6591 ;; Return value:  Size  Location     Type
  6592 ;;		None               void
  6593 ;; Registers used:
  6594 ;;		status,2
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;Total ram usage:        0 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    5
  6607 ;; This function calls:
  6608 ;;		Nothing
  6609 ;; This function is called by:
  6610 ;;		_getAD
  6611 ;;		_TouchPower
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           
  6616                           ;psect for function _set_TimeoutCleared
  6617  1ABC                     _set_TimeoutCleared:	
  6618                           
  6619                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6620                           
  6621                           ;incstack = 0
  6622                           ; Regs used in _set_TimeoutCleared: [status,2]
  6623  1ABC  0021               	movlb	1	; select bank1
  6624  1ABD  1139               	bcf	(_myMain^(0+128)+10),2
  6625                           
  6626                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6627  1ABE  01BA               	clrf	(_myMain^(0+128)+11)
  6628  1ABF  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6629  1AC0  0008               	return
  6630  1AC1                     __end_of_set_TimeoutCleared:	
  6631                           
  6632                           	psect	text20
  6633  1D90                     __ptext20:	
  6634 ;; *************** function _Timeout_Counter *****************
  6635 ;; Defined at:
  6636 ;;		line 272 in file "../src/Main_B1.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;		None
  6639 ;; Auto vars:     Size  Location     Type
  6640 ;;		None
  6641 ;; Return value:  Size  Location     Type
  6642 ;;		None               void
  6643 ;; Registers used:
  6644 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6645 ;; Tracked objects:
  6646 ;;		On entry : 0/0
  6647 ;;		On exit  : 0/0
  6648 ;;		Unchanged: 0/0
  6649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;Total ram usage:        0 bytes
  6655 ;; Hardware stack levels used:    1
  6656 ;; Hardware stack levels required when called:    5
  6657 ;; This function calls:
  6658 ;;		Nothing
  6659 ;; This function is called by:
  6660 ;;		_getAD
  6661 ;;		_TouchPower
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           
  6666                           ;psect for function _Timeout_Counter
  6667  1D90                     _Timeout_Counter:	
  6668                           
  6669                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6670                           
  6671                           ;incstack = 0
  6672                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6673  1D90  3001               	movlw	1
  6674  1D91  0021               	movlb	1	; select bank1
  6675  1D92  07BA               	addwf	(_myMain^(0+128)+11),f
  6676  1D93  3000               	movlw	0
  6677  1D94  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6678                           
  6679                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6680  1D95  300B               	movlw	11
  6681  1D96  3EAF               	addlw	_myMain& (0+255)
  6682  1D97  0086               	movwf	6
  6683  1D98  0187               	clrf	7
  6684  1D99  3F40               	moviw [0]fsr1
  6685  1D9A  3AA8               	xorlw	168
  6686  1D9B  1D03               	skipz
  6687  1D9C  2D9F               	goto	u6205
  6688  1D9D  3F41               	moviw [1]fsr1
  6689  1D9E  3A61               	xorlw	97
  6690  1D9F                     u6205:	
  6691  1D9F  1D03               	skipz
  6692  1DA0  0008               	return
  6693                           
  6694                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6695  1DA1  01BA               	clrf	(_myMain^(0+128)+11)
  6696  1DA2  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6697                           
  6698                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6699  1DA3  1539               	bsf	(_myMain^(0+128)+10),2
  6700  1DA4  0008               	return
  6701  1DA5                     __end_of_Timeout_Counter:	
  6702                           
  6703                           	psect	text21
  6704  1AB8                     __ptext21:	
  6705 ;; *************** function _Switch_Initialization *****************
  6706 ;; Defined at:
  6707 ;;		line 46 in file "../src/Switch_B1.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;		None
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;		None
  6712 ;; Return value:  Size  Location     Type
  6713 ;;		None               void
  6714 ;; Registers used:
  6715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;Total ram usage:        0 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; Hardware stack levels required when called:    8
  6728 ;; This function calls:
  6729 ;;		_setSw_Initialization
  6730 ;; This function is called by:
  6731 ;;		_main
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           
  6736                           ;psect for function _Switch_Initialization
  6737  1AB8                     _Switch_Initialization:	
  6738                           
  6739                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6740                           
  6741                           ;incstack = 0
  6742                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6743  1AB8  3001               	movlw	1
  6744  1AB9  319C  2412         	fcall	_setSw_Initialization
  6745  1ABB  0008               	return
  6746  1ABC                     __end_of_Switch_Initialization:	
  6747                           
  6748                           	psect	text22
  6749  1C12                     __ptext22:	
  6750 ;; *************** function _setSw_Initialization *****************
  6751 ;; Defined at:
  6752 ;;		line 66 in file "../src/Switch_B1.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;  sw              1    wreg     unsigned char 
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;  sw              1    4[BANK0 ] unsigned char 
  6757 ;; Return value:  Size  Location     Type
  6758 ;;		None               void
  6759 ;; Registers used:
  6760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;Total ram usage:        1 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    7
  6773 ;; This function calls:
  6774 ;;		_setLED
  6775 ;; This function is called by:
  6776 ;;		_Switch_Initialization
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           
  6781                           ;psect for function _setSw_Initialization
  6782  1C12                     _setSw_Initialization:	
  6783                           
  6784                           ;incstack = 0
  6785                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6786                           ;setSw_Initialization@sw stored from wreg
  6787  1C12  0020               	movlb	0	; select bank0
  6788  1C13  00A4               	movwf	setSw_Initialization@sw
  6789                           
  6790                           ;Switch_B1.c: 68: setLED(sw, 1);
  6791  1C14  01A2               	clrf	setLED@command
  6792  1C15  0AA2               	incf	setLED@command,f
  6793  1C16  0824               	movf	setSw_Initialization@sw,w
  6794  1C17  3192  22A6  319C   	fcall	_setLED
  6795                           
  6796                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6797  1C1A  0020               	movlb	0	; select bank0
  6798  1C1B  01A2               	clrf	setLED@command
  6799  1C1C  0AA2               	incf	setLED@command,f
  6800  1C1D  0824               	movf	setSw_Initialization@sw,w
  6801  1C1E  3E01               	addlw	1
  6802  1C1F  3192  22A6         	fcall	_setLED
  6803  1C21  0008               	return
  6804  1C22                     __end_of_setSw_Initialization:	
  6805                           
  6806                           	psect	text23
  6807  1A8E                     __ptext23:	
  6808 ;; *************** function _RF_Main *****************
  6809 ;; Defined at:
  6810 ;;		line 26 in file "../src/RF_Control_B1.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;		None
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;		None
  6815 ;; Return value:  Size  Location     Type
  6816 ;;		None               void
  6817 ;; Registers used:
  6818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6828 ;;Total ram usage:        0 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:   12
  6831 ;; This function calls:
  6832 ;;		_setRF_Main
  6833 ;; This function is called by:
  6834 ;;		_main
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           
  6838                           
  6839                           ;psect for function _RF_Main
  6840  1A8E                     _RF_Main:	
  6841                           
  6842                           ;RF_Control_B1.c: 28: setRF_Main();
  6843                           
  6844                           ;incstack = 0
  6845                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6846  1A8E  3184  247A         	fcall	_setRF_Main
  6847  1A90  0008               	return
  6848  1A91                     __end_of_RF_Main:	
  6849                           
  6850                           	psect	text24
  6851  047A                     __ptext24:	
  6852 ;; *************** function _setRF_Main *****************
  6853 ;; Defined at:
  6854 ;;		line 53 in file "../src/RF_Control_B1.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;		None
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;  error           1    3[BANK1 ] unsigned char 
  6859 ;; Return value:  Size  Location     Type
  6860 ;;		None               void
  6861 ;; Registers used:
  6862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6872 ;;Total ram usage:        2 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; Hardware stack levels required when called:   11
  6875 ;; This function calls:
  6876 ;;		_CC2500_PowerOnInitial
  6877 ;;		_CC2500_RxData
  6878 ;;		_CC2500_TxData
  6879 ;;		_CC2500_WriteCommand
  6880 ;;		_RF_RxDisable
  6881 ;;		___lwdiv
  6882 ;;		_getBuz_GO
  6883 ;;		_getRF_KeyStatus
  6884 ;;		_getRxData
  6885 ;; This function is called by:
  6886 ;;		_RF_Main
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function _setRF_Main
  6892  047A                     _setRF_Main:	
  6893                           
  6894                           ;RF_Control_B1.c: 54: char error = 0;
  6895                           
  6896                           ;incstack = 0
  6897                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6898  047A  0021               	movlb	1	; select bank1
  6899  047B  01E9               	clrf	setRF_Main@error^(0+128)
  6900                           
  6901                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6902  047C  1C20               	btfss	_RF1^(0+128),0
  6903  047D  2D4B               	goto	l2125
  6904                           
  6905                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6906  047E  319C  2466  3184   	fcall	_getBuz_GO
  6907  0481  0020               	movlb	0	; select bank0
  6908  0482  0821               	movf	?_getBuz_GO+1,w
  6909  0483  0420               	iorwf	?_getBuz_GO,w
  6910  0484  1D03               	skipz
  6911  0485  2D2C               	goto	l8751
  6912                           
  6913                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6914  0486  319C  2477  3184   	fcall	_getRF_KeyStatus
  6915  0489  3A01               	xorlw	1
  6916  048A  3000               	movlw	0
  6917  048B  1903               	skipnz
  6918  048C  3001               	movlw	1
  6919  048D  0021               	movlb	1	; select bank1
  6920  048E  00E8               	movwf	??_setRF_Main^(0+128)
  6921  048F  0CE8               	rrf	??_setRF_Main^(0+128),f
  6922  0490  0CE8               	rrf	??_setRF_Main^(0+128),f
  6923  0491  0820               	movf	_RF1^(0+128),w
  6924  0492  0668               	xorwf	??_setRF_Main^(0+128),w
  6925  0493  397F               	andlw	-129
  6926  0494  0668               	xorwf	??_setRF_Main^(0+128),w
  6927  0495  00A0               	movwf	_RF1^(0+128)
  6928                           
  6929                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6930  0496  1FA0               	btfss	_RF1^(0+128),7
  6931  0497  2C9A               	goto	l2129
  6932  0498  1F20               	btfss	_RF1^(0+128),6
  6933  0499  2D2C               	goto	l8751
  6934  049A                     l2129:	
  6935                           
  6936                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6937  049A  1D20               	btfss	_RF1^(0+128),2
  6938  049B  2CEB               	goto	l2130
  6939                           
  6940                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6941  049C  1B20               	btfsc	_RF1^(0+128),6
  6942  049D  2CE6               	goto	l8723
  6943                           
  6944                           ;RF_Control_B1.c: 68: RF1.Count++;
  6945  049E  3001               	movlw	1
  6946  049F  07A3               	addwf	(_RF1^(0+128)+3),f
  6947  04A0  3000               	movlw	0
  6948  04A1  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  6949                           
  6950                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6951  04A2  3014               	movlw	20
  6952  04A3  0020               	movlb	0	; select bank0
  6953  04A4  00A0               	movwf	___lwdiv@divisor
  6954  04A5  3000               	movlw	0
  6955  04A6  00A1               	movwf	___lwdiv@divisor+1
  6956  04A7  0021               	movlb	1	; select bank1
  6957  04A8  0829               	movf	((_RF1+1)^(0+128)+8),w
  6958  04A9  0020               	movlb	0	; select bank0
  6959  04AA  01A3               	clrf	___lwdiv@dividend+1
  6960  04AB  07A3               	addwf	___lwdiv@dividend+1,f
  6961  04AC  0021               	movlb	1	; select bank1
  6962  04AD  0828               	movf	(_RF1^(0+128)+8),w
  6963  04AE  0020               	movlb	0	; select bank0
  6964  04AF  01A2               	clrf	___lwdiv@dividend
  6965  04B0  07A2               	addwf	___lwdiv@dividend,f
  6966  04B1  3191  21FE  3184   	fcall	___lwdiv
  6967  04B4  0020               	movlb	0	; select bank0
  6968  04B5  0821               	movf	?___lwdiv+1,w
  6969  04B6  0021               	movlb	1	; select bank1
  6970  04B7  0224               	subwf	((_RF1+1)^(0+128)+3),w
  6971  04B8  1D03               	skipz
  6972  04B9  2CBE               	goto	u9035
  6973  04BA  0020               	movlb	0	; select bank0
  6974  04BB  0820               	movf	?___lwdiv,w
  6975  04BC  0021               	movlb	1	; select bank1
  6976  04BD  0223               	subwf	(_RF1^(0+128)+3),w
  6977  04BE                     u9035:	
  6978  04BE  1C03               	skipc
  6979  04BF  2D2C               	goto	l8751
  6980                           
  6981                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6982  04C0  3014               	movlw	20
  6983  04C1  0020               	movlb	0	; select bank0
  6984  04C2  00A0               	movwf	___lwdiv@divisor
  6985  04C3  3000               	movlw	0
  6986  04C4  00A1               	movwf	___lwdiv@divisor+1
  6987  04C5  0021               	movlb	1	; select bank1
  6988  04C6  0829               	movf	((_RF1+1)^(0+128)+8),w
  6989  04C7  0020               	movlb	0	; select bank0
  6990  04C8  01A3               	clrf	___lwdiv@dividend+1
  6991  04C9  07A3               	addwf	___lwdiv@dividend+1,f
  6992  04CA  0021               	movlb	1	; select bank1
  6993  04CB  0828               	movf	(_RF1^(0+128)+8),w
  6994  04CC  0020               	movlb	0	; select bank0
  6995  04CD  01A2               	clrf	___lwdiv@dividend
  6996  04CE  07A2               	addwf	___lwdiv@dividend,f
  6997  04CF  3191  21FE  3184   	fcall	___lwdiv
  6998  04D2  0020               	movlb	0	; select bank0
  6999  04D3  0821               	movf	?___lwdiv+1,w
  7000  04D4  0021               	movlb	1	; select bank1
  7001  04D5  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7002  04D6  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  7003  04D7  0020               	movlb	0	; select bank0
  7004  04D8  0820               	movf	?___lwdiv,w
  7005  04D9  0021               	movlb	1	; select bank1
  7006  04DA  01A3               	clrf	(_RF1^(0+128)+3)
  7007  04DB  07A3               	addwf	(_RF1^(0+128)+3),f
  7008                           
  7009                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7010  04DC  1120               	bcf	_RF1^(0+128),2
  7011                           
  7012                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7013  04DD  01AB               	clrf	(_RF1^(0+128)+11)
  7014  04DE  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7015                           
  7016                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7017  04DF  3190  2000  3184   	fcall	_RF_RxDisable
  7018                           
  7019                           ;RF_Control_B1.c: 75: CC2500_TxData();
  7020  04E2  3188  20B2  3184   	fcall	_CC2500_TxData
  7021                           
  7022                           ;RF_Control_B1.c: 77: }
  7023                           ;RF_Control_B1.c: 78: } else {
  7024  04E5  2D2C               	goto	l8751
  7025  04E6                     l8723:	
  7026                           
  7027                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7028  04E6  0021               	movlb	1	; select bank1
  7029  04E7  01A3               	clrf	(_RF1^(0+128)+3)
  7030  04E8  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7031                           
  7032                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  7033  04E9  1120               	bcf	_RF1^(0+128),2
  7034                           
  7035                           ;RF_Control_B1.c: 81: }
  7036                           ;RF_Control_B1.c: 82: } else {
  7037  04EA  2D2C               	goto	l8751
  7038  04EB                     l2130:	
  7039                           
  7040                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  7041  04EB  1DA0               	btfss	_RF1^(0+128),3
  7042  04EC  2CFA               	goto	l8737
  7043                           
  7044                           ;RF_Control_B1.c: 85: CC2500_RxData();
  7045  04ED  3188  2047  3184   	fcall	_CC2500_RxData
  7046                           
  7047                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  7048  04F0  0021               	movlb	1	; select bank1
  7049  04F1  1CA0               	btfss	_RF1^(0+128),1
  7050  04F2  2D2C               	goto	l8751
  7051                           
  7052                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  7053  04F3  10A0               	bcf	_RF1^(0+128),1
  7054                           
  7055                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  7056  04F4  01AB               	clrf	(_RF1^(0+128)+11)
  7057  04F5  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7058                           
  7059                           ;RF_Control_B1.c: 97: getRxData();
  7060  04F6  3196  2602  3184   	fcall	_getRxData
  7061                           
  7062                           ;RF_Control_B1.c: 100: }
  7063                           ;RF_Control_B1.c: 101: } else {
  7064  04F9  2D2C               	goto	l8751
  7065  04FA                     l8737:	
  7066                           
  7067                           ;RF_Control_B1.c: 102: RF1.Count++;
  7068  04FA  3001               	movlw	1
  7069  04FB  0021               	movlb	1	; select bank1
  7070  04FC  07A3               	addwf	(_RF1^(0+128)+3),f
  7071  04FD  3000               	movlw	0
  7072  04FE  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7073                           
  7074                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7075  04FF  3014               	movlw	20
  7076  0500  0020               	movlb	0	; select bank0
  7077  0501  00A0               	movwf	___lwdiv@divisor
  7078  0502  3000               	movlw	0
  7079  0503  00A1               	movwf	___lwdiv@divisor+1
  7080  0504  0021               	movlb	1	; select bank1
  7081  0505  0829               	movf	((_RF1+1)^(0+128)+8),w
  7082  0506  0020               	movlb	0	; select bank0
  7083  0507  01A3               	clrf	___lwdiv@dividend+1
  7084  0508  07A3               	addwf	___lwdiv@dividend+1,f
  7085  0509  0021               	movlb	1	; select bank1
  7086  050A  0828               	movf	(_RF1^(0+128)+8),w
  7087  050B  0020               	movlb	0	; select bank0
  7088  050C  01A2               	clrf	___lwdiv@dividend
  7089  050D  07A2               	addwf	___lwdiv@dividend,f
  7090  050E  3191  21FE  3184   	fcall	___lwdiv
  7091  0511  0020               	movlb	0	; select bank0
  7092  0512  0821               	movf	?___lwdiv+1,w
  7093  0513  0021               	movlb	1	; select bank1
  7094  0514  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7095  0515  1D03               	skipz
  7096  0516  2D1B               	goto	u9065
  7097  0517  0020               	movlb	0	; select bank0
  7098  0518  0820               	movf	?___lwdiv,w
  7099  0519  0021               	movlb	1	; select bank1
  7100  051A  0223               	subwf	(_RF1^(0+128)+3),w
  7101  051B                     u9065:	
  7102  051B  1C03               	skipc
  7103  051C  2D2C               	goto	l8751
  7104                           
  7105                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7106  051D  01A3               	clrf	(_RF1^(0+128)+3)
  7107  051E  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7108                           
  7109                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7110  051F  15A0               	bsf	_RF1^(0+128),3
  7111                           
  7112                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7113  0520  3036               	movlw	54
  7114  0521  319E  267C  3184   	fcall	_CC2500_WriteCommand
  7115                           
  7116                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7117  0524  303A               	movlw	58
  7118  0525  319E  267C  3184   	fcall	_CC2500_WriteCommand
  7119                           
  7120                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7121  0528  3034               	movlw	52
  7122  0529  319E  267C  3184   	fcall	_CC2500_WriteCommand
  7123  052C                     l8751:	
  7124                           
  7125                           ;RF_Control_B1.c: 111: }
  7126                           ;RF_Control_B1.c: 112: }
  7127                           ;RF_Control_B1.c: 113: }
  7128                           ;RF_Control_B1.c: 114: }
  7129                           ;RF_Control_B1.c: 115: }
  7130                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7131  052C  3001               	movlw	1
  7132  052D  0021               	movlb	1	; select bank1
  7133  052E  07AB               	addwf	(_RF1^(0+128)+11),f
  7134  052F  3000               	movlw	0
  7135  0530  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7136                           
  7137                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7138  0531  300B               	movlw	11
  7139  0532  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7140  0533  30B9               	movlw	185
  7141  0534  1903               	skipnz
  7142  0535  022B               	subwf	(_RF1^(0+128)+11),w
  7143  0536  1C03               	skipc
  7144  0537  2D44               	goto	l8765
  7145                           
  7146                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7147  0538  01AB               	clrf	(_RF1^(0+128)+11)
  7148  0539  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7149                           
  7150                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7151  053A  11A0               	bcf	_RF1^(0+128),3
  7152                           
  7153                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7154  053B  10A0               	bcf	_RF1^(0+128),1
  7155                           
  7156                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7157  053C  3036               	movlw	54
  7158  053D  319E  267C  3184   	fcall	_CC2500_WriteCommand
  7159                           
  7160                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7161  0540  303A               	movlw	58
  7162  0541  319E  267C  3184   	fcall	_CC2500_WriteCommand
  7163  0544                     l8765:	
  7164                           
  7165                           ;RF_Control_B1.c: 125: }
  7166                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7167  0544  0021               	movlb	1	; select bank1
  7168  0545  1F21               	btfss	(_RF1^(0+128)+1),6
  7169  0546  0008               	return
  7170                           
  7171                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7172  0547  1321               	bcf	(_RF1^(0+128)+1),6
  7173                           
  7174                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7175  0548  319D  257B         	fcall	_CC2500_PowerOnInitial
  7176                           
  7177                           ;RF_Control_B1.c: 130: }
  7178                           ;RF_Control_B1.c: 132: } else {
  7179  054A  0008               	return
  7180  054B                     l2125:	
  7181                           
  7182                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7183  054B  1C2F               	btfss	_myMain^(0+128),0
  7184  054C  0008               	return
  7185                           
  7186                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7187  054D  1420               	bsf	_RF1^(0+128),0
  7188  054E  0008               	return
  7189  054F                     __end_of_setRF_Main:	
  7190                           
  7191                           	psect	text25
  7192  1602                     __ptext25:	
  7193 ;; *************** function _getRxData *****************
  7194 ;; Defined at:
  7195 ;;		line 227 in file "../src/RF_Control_B1.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;		None
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;  error           1    1[BANK1 ] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;		None               void
  7202 ;; Registers used:
  7203 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7210 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7212 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7213 ;;Total ram usage:        2 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:   10
  7216 ;; This function calls:
  7217 ;;		_getMain_All_Error_Status
  7218 ;;		_setControl_Lights_Table
  7219 ;;		_setLog_Code
  7220 ;;		_setTxData
  7221 ;; This function is called by:
  7222 ;;		_setRF_Main
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           
  7227                           ;psect for function _getRxData
  7228  1602                     _getRxData:	
  7229                           
  7230                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7231                           
  7232                           ;incstack = 0
  7233                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7234  1602  0023               	movlb	3	; select bank3
  7235  1603  0820               	movf	_RF_Data^(0+384),w
  7236  1604  3AAA               	xorlw	170
  7237  1605  1D03               	skipz
  7238  1606  2E18               	goto	l7075
  7239  1607  0821               	movf	(_RF_Data^(0+384)+1),w
  7240  1608  3A01               	xorlw	1
  7241  1609  1D03               	skipz
  7242  160A  2E18               	goto	l7075
  7243                           
  7244                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7245  160B  3055               	movlw	85
  7246  160C  0021               	movlb	1	; select bank1
  7247  160D  00E6               	movwf	??_getRxData^(0+128)
  7248  160E  086E               	movf	_product^(0+128),w
  7249  160F  3E02               	addlw	2
  7250  1610  0086               	movwf	6
  7251  1611  3001               	movlw	1	; select bank2/3
  7252  1612  0087               	movwf	7
  7253  1613  0866               	movf	??_getRxData^(0+128),w
  7254  1614  0081               	movwf	1
  7255                           
  7256                           ;RF_Control_B1.c: 231: setTxData();
  7257  1615  318E  267B         	fcall	_setTxData
  7258                           
  7259                           ;RF_Control_B1.c: 235: } else {
  7260  1617  0008               	return
  7261  1618                     l7075:	
  7262                           
  7263                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7264  1618  3000               	movlw	0
  7265  1619  3190  20F8  3196   	fcall	_getMain_All_Error_Status
  7266  161C  0021               	movlb	1	; select bank1
  7267  161D  00E6               	movwf	??_getRxData^(0+128)
  7268  161E  0866               	movf	??_getRxData^(0+128),w
  7269  161F  00E7               	movwf	getRxData@error^(0+128)
  7270                           
  7271                           ;RF_Control_B1.c: 237: if (error == 0) {
  7272  1620  08E7               	movf	getRxData@error^(0+128),f
  7273  1621  1D03               	skipz
  7274  1622  2E64               	goto	l2170
  7275                           
  7276                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7277  1623  1F20               	btfss	_RF1^(0+128),6
  7278  1624  2E30               	goto	l7087
  7279                           
  7280                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7281  1625  0023               	movlb	3	; select bank3
  7282  1626  08A0               	movf	_RF_Data^(0+384),f
  7283  1627  1D03               	skipz
  7284  1628  0008               	return
  7285  1629  0821               	movf	(_RF_Data^(0+384)+1),w
  7286  162A  3A64               	xorlw	100
  7287  162B  1D03               	skipz
  7288  162C  0008               	return
  7289                           
  7290                           ;RF_Control_B1.c: 241: setLog_Code();
  7291  162D  3191  215F         	fcall	_setLog_Code
  7292                           
  7293                           ;RF_Control_B1.c: 242: }
  7294                           ;RF_Control_B1.c: 243: } else {
  7295  162F  0008               	return
  7296  1630                     l7087:	
  7297                           
  7298                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7299  1630  0023               	movlb	3	; select bank3
  7300  1631  0834               	movf	(_RF_Data^(0+384)+20),w
  7301  1632  3AD1               	xorlw	209
  7302  1633  1903               	skipnz
  7303  1634  2E39               	goto	l7091
  7304  1635  0834               	movf	(_RF_Data^(0+384)+20),w
  7305  1636  3A0A               	xorlw	10
  7306  1637  1D03               	skipz
  7307  1638  0008               	return
  7308  1639                     l7091:	
  7309                           
  7310                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7311  1639  08A0               	movf	_RF_Data^(0+384),f
  7312  163A  1D03               	skipz
  7313  163B  0008               	return
  7314  163C  0821               	movf	(_RF_Data^(0+384)+1),w
  7315  163D  3A02               	xorlw	2
  7316  163E  1D03               	skipz
  7317  163F  0008               	return
  7318                           
  7319                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7320  1640  0021               	movlb	1	; select bank1
  7321  1641  086E               	movf	_product^(0+128),w
  7322  1642  3E0C               	addlw	12
  7323  1643  0086               	movwf	6
  7324  1644  3001               	movlw	1	; select bank2/3
  7325  1645  0087               	movwf	7
  7326  1646  0023               	movlb	3	; select bank3
  7327  1647  082C               	movf	(_RF_Data^(0+384)+12),w
  7328  1648  0601               	xorwf	1,w
  7329  1649  1D03               	skipz
  7330  164A  0008               	return
  7331  164B  0021               	movlb	1	; select bank1
  7332  164C  086E               	movf	_product^(0+128),w
  7333  164D  3E0D               	addlw	13
  7334  164E  0086               	movwf	6
  7335  164F  3001               	movlw	1	; select bank2/3
  7336  1650  0087               	movwf	7
  7337  1651  0023               	movlb	3	; select bank3
  7338  1652  082D               	movf	(_RF_Data^(0+384)+13),w
  7339  1653  0601               	xorwf	1,w
  7340  1654  1D03               	skipz
  7341  1655  0008               	return
  7342  1656  0021               	movlb	1	; select bank1
  7343  1657  086E               	movf	_product^(0+128),w
  7344  1658  3E0E               	addlw	14
  7345  1659  0086               	movwf	6
  7346  165A  3001               	movlw	1	; select bank2/3
  7347  165B  0087               	movwf	7
  7348  165C  0023               	movlb	3	; select bank3
  7349  165D  082E               	movf	(_RF_Data^(0+384)+14),w
  7350  165E  0601               	xorwf	1,w
  7351  165F  1D03               	skipz
  7352  1660  0008               	return
  7353                           
  7354                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7355  1661  3189  21FF         	fcall	_setControl_Lights_Table
  7356                           
  7357                           ;RF_Control_B1.c: 250: }
  7358                           ;RF_Control_B1.c: 253: }
  7359                           ;RF_Control_B1.c: 264: }
  7360                           ;RF_Control_B1.c: 265: }
  7361                           ;RF_Control_B1.c: 266: } else {
  7362  1663  0008               	return
  7363  1664                     l2170:	
  7364                           
  7365                           ;RF_Control_B1.c: 267: __nop();
  7366  1664  0000               	nop
  7367  1665  0008               	return
  7368  1666                     __end_of_getRxData:	
  7369                           
  7370                           	psect	text26
  7371  115F                     __ptext26:	
  7372 ;; *************** function _setLog_Code *****************
  7373 ;; Defined at:
  7374 ;;		line 273 in file "../src/RF_Control_B1.c"
  7375 ;; Parameters:    Size  Location     Type
  7376 ;;		None
  7377 ;; Auto vars:     Size  Location     Type
  7378 ;;		None
  7379 ;; Return value:  Size  Location     Type
  7380 ;;		None               void
  7381 ;; Registers used:
  7382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7383 ;; Tracked objects:
  7384 ;;		On entry : 0/0
  7385 ;;		On exit  : 0/0
  7386 ;;		Unchanged: 0/0
  7387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7392 ;;Total ram usage:        1 bytes
  7393 ;; Hardware stack levels used:    1
  7394 ;; Hardware stack levels required when called:    7
  7395 ;; This function calls:
  7396 ;;		_setBuz
  7397 ;;		_setMemory_LoopSave
  7398 ;;		_setMemory_Modify
  7399 ;;		_setProductData
  7400 ;; This function is called by:
  7401 ;;		_getRxData
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           
  7406                           ;psect for function _setLog_Code
  7407  115F                     _setLog_Code:	
  7408                           
  7409                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7410                           
  7411                           ;incstack = 0
  7412                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7413  115F  0021               	movlb	1	; select bank1
  7414  1160  1320               	bcf	_RF1^(0+128),6
  7415                           
  7416                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7417  1161  0023               	movlb	3	; select bank3
  7418  1162  082C               	movf	(_RF_Data^(0+384)+12),w
  7419  1163  0020               	movlb	0	; select bank0
  7420  1164  00E5               	movwf	??_setLog_Code
  7421  1165  0865               	movf	??_setLog_Code,w
  7422  1166  00E2               	movwf	setProductData@value
  7423  1167  300C               	movlw	12
  7424  1168  319B  236F  3191   	fcall	_setProductData
  7425                           
  7426                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7427  116B  0023               	movlb	3	; select bank3
  7428  116C  082D               	movf	(_RF_Data^(0+384)+13),w
  7429  116D  0020               	movlb	0	; select bank0
  7430  116E  00E5               	movwf	??_setLog_Code
  7431  116F  0865               	movf	??_setLog_Code,w
  7432  1170  00E2               	movwf	setProductData@value
  7433  1171  300D               	movlw	13
  7434  1172  319B  236F  3191   	fcall	_setProductData
  7435                           
  7436                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7437  1175  0023               	movlb	3	; select bank3
  7438  1176  082E               	movf	(_RF_Data^(0+384)+14),w
  7439  1177  0020               	movlb	0	; select bank0
  7440  1178  00E5               	movwf	??_setLog_Code
  7441  1179  0865               	movf	??_setLog_Code,w
  7442  117A  00E2               	movwf	setProductData@value
  7443  117B  300E               	movlw	14
  7444  117C  319B  236F  3191   	fcall	_setProductData
  7445                           
  7446                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7447  117F  3064               	movlw	100
  7448  1180  0020               	movlb	0	; select bank0
  7449  1181  00A9               	movwf	setBuz@time
  7450  1182  3000               	movlw	0
  7451  1183  00AA               	movwf	setBuz@time+1
  7452  1184  3001               	movlw	1
  7453  1185  3194  2490  3191   	fcall	_setBuz
  7454                           
  7455                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7456  1188  0021               	movlb	1	; select bank1
  7457  1189  1EAF               	btfss	_myMain^(0+128),5
  7458  118A  298F               	goto	l2183
  7459                           
  7460                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7461  118B  3001               	movlw	1
  7462  118C  319D  252C  3191   	fcall	_setMemory_LoopSave
  7463  118F                     l2183:	
  7464                           
  7465                           ;RF_Control_B1.c: 281: }
  7466                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7467  118F  3001               	movlw	1
  7468  1190  319C  24F3         	fcall	_setMemory_Modify
  7469  1192  0008               	return
  7470  1193                     __end_of_setLog_Code:	
  7471                           
  7472                           	psect	text27
  7473  1D2C                     __ptext27:	
  7474 ;; *************** function _setMemory_LoopSave *****************
  7475 ;; Defined at:
  7476 ;;		line 1089 in file "../src/MCU_B1.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;  command         1    wreg     unsigned char 
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;  command         1    1[BANK0 ] unsigned char 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;		None               void
  7483 ;; Registers used:
  7484 ;;		wreg, status,2, status,0
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7491 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7492 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7493 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;Total ram usage:        2 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:    5
  7497 ;; This function calls:
  7498 ;;		Nothing
  7499 ;; This function is called by:
  7500 ;;		_setLog_Code
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           
  7505                           ;psect for function _setMemory_LoopSave
  7506  1D2C                     _setMemory_LoopSave:	
  7507                           
  7508                           ;incstack = 0
  7509                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7510                           ;setMemory_LoopSave@command stored from wreg
  7511  1D2C  0020               	movlb	0	; select bank0
  7512  1D2D  00A1               	movwf	setMemory_LoopSave@command
  7513                           
  7514                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7515  1D2E  0821               	movf	setMemory_LoopSave@command,w
  7516  1D2F  3A01               	xorlw	1
  7517  1D30  3000               	movlw	0
  7518  1D31  1903               	skipnz
  7519  1D32  3001               	movlw	1
  7520  1D33  00A0               	movwf	??_setMemory_LoopSave
  7521  1D34  0DA0               	rlf	??_setMemory_LoopSave,f
  7522  1D35  0DA0               	rlf	??_setMemory_LoopSave,f
  7523  1D36  0024               	movlb	4	; select bank4
  7524  1D37  0844               	movf	(_Memory^(0+512)+36),w
  7525  1D38  0020               	movlb	0	; select bank0
  7526  1D39  0620               	xorwf	??_setMemory_LoopSave,w
  7527  1D3A  39FB               	andlw	-5
  7528  1D3B  0620               	xorwf	??_setMemory_LoopSave,w
  7529  1D3C  0024               	movlb	4	; select bank4
  7530  1D3D  00C4               	movwf	(_Memory^(0+512)+36)
  7531  1D3E  0008               	return
  7532  1D3F                     __end_of_setMemory_LoopSave:	
  7533                           
  7534                           	psect	text28
  7535  09FF                     __ptext28:	
  7536 ;; *************** function _setControl_Lights_Table *****************
  7537 ;; Defined at:
  7538 ;;		line 286 in file "../src/RF_Control_B1.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;		None
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;		None
  7543 ;; Return value:  Size  Location     Type
  7544 ;;		None               void
  7545 ;; Registers used:
  7546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7556 ;;Total ram usage:        0 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    9
  7559 ;; This function calls:
  7560 ;;		_getDimmerLights_Status
  7561 ;;		_getMain_All_LightsStatus
  7562 ;;		_setCmd_Status
  7563 ;;		_setDimmerLights_SwOff
  7564 ;;		_setDimmerLights_SwOn
  7565 ;;		_setProductData
  7566 ;;		_setRFSW_AdjControl
  7567 ;;		_setRFSW_Control
  7568 ;;		_setRF_AdjControl
  7569 ;;		_setTxData
  7570 ;; This function is called by:
  7571 ;;		_getRxData
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           
  7576                           ;psect for function _setControl_Lights_Table
  7577  09FF                     _setControl_Lights_Table:	
  7578                           
  7579                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7580                           
  7581                           ;incstack = 0
  7582                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7583  09FF  2A65               	goto	l6685
  7584  0A00                     l6665:	
  7585                           ;RF_Control_B1.c: 290: case 0x00:
  7586                           
  7587                           
  7588                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7589  0A00  319B  2321  3189   	fcall	_getMain_All_LightsStatus
  7590  0A03  3A01               	xorlw	1
  7591  0A04  1D03               	skipz
  7592  0A05  2A1C               	goto	l6673
  7593                           
  7594                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7595  0A06  3001               	movlw	1
  7596  0A07  319C  2422  3189   	fcall	_getDimmerLights_Status
  7597  0A0A  3A01               	xorlw	1
  7598  0A0B  1D03               	skipz
  7599  0A0C  2A15               	goto	l6671
  7600                           
  7601                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7602  0A0D  3001               	movlw	1
  7603  0A0E  3191  2193  3189   	fcall	_setDimmerLights_SwOn
  7604                           
  7605                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7606  0A11  3001               	movlw	1
  7607  0A12  3192  226D  3189   	fcall	_setDimmerLights_SwOff
  7608  0A15                     l6671:	
  7609                           
  7610                           ;RF_Control_B1.c: 297: }
  7611                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7612  0A15  0020               	movlb	0	; select bank0
  7613  0A16  01A0               	clrf	setCmd_Status@cmd
  7614  0A17  0AA0               	incf	setCmd_Status@cmd,f
  7615  0A18  3001               	movlw	1
  7616  0A19  319E  2616         	fcall	_setCmd_Status
  7617                           
  7618                           ;RF_Control_B1.c: 313: } else {
  7619  0A1B  0008               	return
  7620  0A1C                     l6673:	
  7621                           
  7622                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7623  0A1C  0020               	movlb	0	; select bank0
  7624  0A1D  01E2               	clrf	setProductData@value
  7625  0A1E  3009               	movlw	9
  7626  0A1F  319B  236F  3189   	fcall	_setProductData
  7627                           
  7628                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7629  0A22  0020               	movlb	0	; select bank0
  7630  0A23  01E2               	clrf	setProductData@value
  7631  0A24  300B               	movlw	11
  7632  0A25  319B  236F  3189   	fcall	_setProductData
  7633                           
  7634                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7635  0A28  0020               	movlb	0	; select bank0
  7636  0A29  01E2               	clrf	setProductData@value
  7637  0A2A  300F               	movlw	15
  7638  0A2B  319B  236F  3189   	fcall	_setProductData
  7639                           
  7640                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7641  0A2E  0020               	movlb	0	; select bank0
  7642  0A2F  01E2               	clrf	setProductData@value
  7643  0A30  3011               	movlw	17
  7644  0A31  319B  236F  3189   	fcall	_setProductData
  7645                           
  7646                           ;RF_Control_B1.c: 318: setTxData();
  7647  0A34  318E  267B         	fcall	_setTxData
  7648                           
  7649                           ;RF_Control_B1.c: 319: }
  7650                           ;RF_Control_B1.c: 320: break;
  7651  0A36  0008               	return
  7652  0A37                     l6675:	
  7653                           ;RF_Control_B1.c: 322: case 0x20:
  7654                           
  7655                           
  7656                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7657  0A37  0020               	movlb	0	; select bank0
  7658  0A38  01E2               	clrf	setProductData@value
  7659  0A39  3009               	movlw	9
  7660  0A3A  319B  236F  3189   	fcall	_setProductData
  7661                           
  7662                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7663  0A3D  0020               	movlb	0	; select bank0
  7664  0A3E  01E2               	clrf	setProductData@value
  7665  0A3F  300B               	movlw	11
  7666  0A40  319B  236F  3189   	fcall	_setProductData
  7667                           
  7668                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7669  0A43  0021               	movlb	1	; select bank1
  7670  0A44  086E               	movf	_product^(0+128),w
  7671  0A45  0086               	movwf	6
  7672  0A46  3001               	movlw	1	; select bank2/3
  7673  0A47  0087               	movwf	7
  7674  0A48  3001               	movlw	1	; select bank2/3
  7675  0A49  3F4F               	moviw [15]fsr1
  7676  0A4A  0020               	movlb	0	; select bank0
  7677  0A4B  00E2               	movwf	setProductData@value
  7678  0A4C  300F               	movlw	15
  7679  0A4D  319B  236F  3189   	fcall	_setProductData
  7680                           
  7681                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7682  0A50  0020               	movlb	0	; select bank0
  7683  0A51  01E2               	clrf	setProductData@value
  7684  0A52  3011               	movlw	17
  7685  0A53  319B  236F  3189   	fcall	_setProductData
  7686                           
  7687                           ;RF_Control_B1.c: 327: setTxData();
  7688  0A56  318E  267B         	fcall	_setTxData
  7689                           
  7690                           ;RF_Control_B1.c: 328: break;
  7691  0A58  0008               	return
  7692  0A59                     l6677:	
  7693                           ;RF_Control_B1.c: 331: case 0x01:
  7694                           
  7695                           
  7696                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7697  0A59  3001               	movlw	1
  7698  0A5A  3193  231B         	fcall	_setRFSW_Control
  7699                           
  7700                           ;RF_Control_B1.c: 333: break;
  7701  0A5C  0008               	return
  7702  0A5D                     l6679:	
  7703                           ;RF_Control_B1.c: 337: case 0x11:
  7704                           
  7705                           
  7706                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7707  0A5D  3001               	movlw	1
  7708  0A5E  318A  2278         	fcall	_setRFSW_AdjControl
  7709                           
  7710                           ;RF_Control_B1.c: 339: break;
  7711  0A60  0008               	return
  7712  0A61                     l6681:	
  7713                           ;RF_Control_B1.c: 341: case 0xd1:
  7714                           
  7715                           
  7716                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  7717  0A61  3001               	movlw	1
  7718  0A62  3191  212B         	fcall	_setRF_AdjControl
  7719                           
  7720                           ;RF_Control_B1.c: 372: }
  7721                           
  7722                           ;RF_Control_B1.c: 343: break;
  7723  0A64  0008               	return
  7724  0A65                     l6685:	
  7725  0A65  0023               	movlb	3	; select bank3
  7726  0A66  082F               	movf	(_RF_Data^(0+384)+15),w
  7727                           
  7728                           ; Switch size 1, requested type "space"
  7729                           ; Number of cases is 5, Range of values is 0 to 209
  7730                           ; switch strategies available:
  7731                           ; Name         Instructions Cycles
  7732                           ; simple_byte           16     9 (average)
  7733                           ; jumptable            260     6 (fixed)
  7734                           ;	Chosen strategy is simple_byte
  7735  0A67  3A00               	xorlw	0	; case 0
  7736  0A68  1903               	skipnz
  7737  0A69  2A00               	goto	l6665
  7738  0A6A  3A01               	xorlw	1	; case 1
  7739  0A6B  1903               	skipnz
  7740  0A6C  2A59               	goto	l6677
  7741  0A6D  3A10               	xorlw	16	; case 17
  7742  0A6E  1903               	skipnz
  7743  0A6F  2A5D               	goto	l6679
  7744  0A70  3A31               	xorlw	49	; case 32
  7745  0A71  1903               	skipnz
  7746  0A72  2A37               	goto	l6675
  7747  0A73  3AF1               	xorlw	241	; case 209
  7748  0A74  1903               	skipnz
  7749  0A75  2A61               	goto	l6681
  7750  0A76  2A77               	goto	l2197
  7751  0A77                     l2197:	
  7752  0A77  0008               	return
  7753  0A78                     __end_of_setControl_Lights_Table:	
  7754                           
  7755                           	psect	text29
  7756  112B                     __ptext29:	
  7757 ;; *************** function _setRF_AdjControl *****************
  7758 ;; Defined at:
  7759 ;;		line 443 in file "../src/RF_Control_B1.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  sw              1    wreg     unsigned char 
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;  sw              1    6[BANK0 ] unsigned char 
  7764 ;;  status          1    5[BANK0 ] unsigned char 
  7765 ;; Return value:  Size  Location     Type
  7766 ;;		None               void
  7767 ;; Registers used:
  7768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;Total ram usage:        3 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; Hardware stack levels required when called:    7
  7781 ;; This function calls:
  7782 ;;		_DimmerLights_SelectPointer
  7783 ;;		_getDimmerLights_Status
  7784 ;; This function is called by:
  7785 ;;		_setControl_Lights_Table
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _setRF_AdjControl
  7791  112B                     _setRF_AdjControl:	
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7795                           ;setRF_AdjControl@sw stored from wreg
  7796  112B  0020               	movlb	0	; select bank0
  7797  112C  00A6               	movwf	setRF_AdjControl@sw
  7798                           
  7799                           ;RF_Control_B1.c: 444: char status = 0;
  7800  112D  01A5               	clrf	setRF_AdjControl@status
  7801                           
  7802                           ;RF_Control_B1.c: 446: status = getDimmerLights_Status(sw);
  7803  112E  0826               	movf	setRF_AdjControl@sw,w
  7804  112F  319C  2422  3191   	fcall	_getDimmerLights_Status
  7805  1132  0020               	movlb	0	; select bank0
  7806  1133  00A4               	movwf	??_setRF_AdjControl
  7807  1134  0824               	movf	??_setRF_AdjControl,w
  7808  1135  00A5               	movwf	setRF_AdjControl@status
  7809                           
  7810                           ;RF_Control_B1.c: 448: if (status == 1) {
  7811  1136  0825               	movf	setRF_AdjControl@status,w
  7812  1137  3A01               	xorlw	1
  7813  1138  1D03               	skipz
  7814  1139  0008               	return
  7815                           
  7816                           ;RF_Control_B1.c: 449: if (RF1.flagDimming == 0) {
  7817  113A  0021               	movlb	1	; select bank1
  7818  113B  1822               	btfsc	(_RF1^(0+128)+2),0
  7819  113C  2953               	goto	l2216
  7820                           
  7821                           ;RF_Control_B1.c: 450: RF1.flagDimming = 1;
  7822  113D  1422               	bsf	(_RF1^(0+128)+2),0
  7823                           
  7824                           ;RF_Control_B1.c: 451: DimmerLights_SelectPointer(sw);
  7825  113E  0020               	movlb	0	; select bank0
  7826  113F  0826               	movf	setRF_AdjControl@sw,w
  7827  1140  319B  2363         	fcall	_DimmerLights_SelectPointer
  7828                           
  7829                           ;RF_Control_B1.c: 453: DimmerLights->DimmingSwFlag = 1;
  7830  1142  0021               	movlb	1	; select bank1
  7831  1143  084C               	movf	_DimmerLights^(0+128),w
  7832  1144  0086               	movwf	6
  7833  1145  3001               	movlw	1	; select bank2/3
  7834  1146  0087               	movwf	7
  7835  1147  1581               	bsf	1,3
  7836                           
  7837                           ;RF_Control_B1.c: 454: DimmerLights->DimmingTrigger = 1;
  7838  1148  084C               	movf	_DimmerLights^(0+128),w
  7839  1149  0086               	movwf	6
  7840  114A  3001               	movlw	1	; select bank2/3
  7841  114B  0087               	movwf	7
  7842  114C  1601               	bsf	1,4
  7843                           
  7844                           ;RF_Control_B1.c: 455: DimmerLights->DimmingSwitch = 1;
  7845  114D  084C               	movf	_DimmerLights^(0+128),w
  7846  114E  0086               	movwf	6
  7847  114F  3001               	movlw	1	; select bank2/3
  7848  1150  0087               	movwf	7
  7849  1151  1681               	bsf	1,5
  7850                           
  7851                           ;RF_Control_B1.c: 457: } else {
  7852  1152  0008               	return
  7853  1153                     l2216:	
  7854                           
  7855                           ;RF_Control_B1.c: 458: RF1.flagDimming = 0;
  7856  1153  1022               	bcf	(_RF1^(0+128)+2),0
  7857                           
  7858                           ;RF_Control_B1.c: 459: DimmerLights->DimmingTrigger = 1;
  7859  1154  084C               	movf	_DimmerLights^(0+128),w
  7860  1155  0086               	movwf	6
  7861  1156  3001               	movlw	1	; select bank2/3
  7862  1157  0087               	movwf	7
  7863  1158  1601               	bsf	1,4
  7864                           
  7865                           ;RF_Control_B1.c: 460: DimmerLights->DimmingSwitch = 0;
  7866  1159  084C               	movf	_DimmerLights^(0+128),w
  7867  115A  0086               	movwf	6
  7868  115B  3001               	movlw	1	; select bank2/3
  7869  115C  0087               	movwf	7
  7870  115D  1281               	bcf	1,5
  7871  115E  0008               	return
  7872  115F                     __end_of_setRF_AdjControl:	
  7873                           
  7874                           	psect	text30
  7875  131B                     __ptext30:	
  7876 ;; *************** function _setRFSW_Control *****************
  7877 ;; Defined at:
  7878 ;;		line 380 in file "../src/RF_Control_B1.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  sw              1    wreg     unsigned char 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  sw              1   79[BANK0 ] unsigned char 
  7883 ;;  status          1   78[BANK0 ] unsigned char 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;		None               void
  7886 ;; Registers used:
  7887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;Total ram usage:        3 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    8
  7900 ;; This function calls:
  7901 ;;		_getDimmerLights_Status
  7902 ;;		_setBuz
  7903 ;;		_setDelayOff_GO
  7904 ;;		_setDimmerLights_SwOff
  7905 ;;		_setDimmerLights_SwOn
  7906 ;;		_setRF_DimmerLights
  7907 ;;		_setTxData
  7908 ;; This function is called by:
  7909 ;;		_setControl_Lights_Table
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           
  7914                           ;psect for function _setRFSW_Control
  7915  131B                     _setRFSW_Control:	
  7916                           
  7917                           ;incstack = 0
  7918                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7919                           ;setRFSW_Control@sw stored from wreg
  7920  131B  0020               	movlb	0	; select bank0
  7921  131C  00EF               	movwf	setRFSW_Control@sw
  7922                           
  7923                           ;RF_Control_B1.c: 381: char status = 0;
  7924  131D  01EE               	clrf	setRFSW_Control@status
  7925                           
  7926                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  7927  131E  0023               	movlb	3	; select bank3
  7928  131F  0830               	movf	(_RF_Data^(0+384)+16),w
  7929  1320  3A80               	xorlw	128
  7930  1321  1D03               	skipz
  7931  1322  2B4E               	goto	l6391
  7932                           
  7933                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  7934  1323  0020               	movlb	0	; select bank0
  7935  1324  01E5               	clrf	setDelayOff_GO@command
  7936  1325  0AE5               	incf	setDelayOff_GO@command,f
  7937  1326  0023               	movlb	3	; select bank3
  7938  1327  0831               	movf	(_RF_Data^(0+384)+17),w
  7939  1328  0020               	movlb	0	; select bank0
  7940  1329  00ED               	movwf	??_setRFSW_Control
  7941  132A  086D               	movf	??_setRFSW_Control,w
  7942  132B  00E6               	movwf	setDelayOff_GO@value
  7943  132C  086F               	movf	setRFSW_Control@sw,w
  7944  132D  318C  2405  3193   	fcall	_setDelayOff_GO
  7945                           
  7946                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  7947  1330  0020               	movlb	0	; select bank0
  7948  1331  086F               	movf	setRFSW_Control@sw,w
  7949  1332  319C  2422  3193   	fcall	_getDimmerLights_Status
  7950  1335  3A01               	xorlw	1
  7951  1336  1D03               	skipz
  7952  1337  2B4E               	goto	l6391
  7953                           
  7954                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  7955  1338  3064               	movlw	100
  7956  1339  0020               	movlb	0	; select bank0
  7957  133A  00A9               	movwf	setBuz@time
  7958  133B  3000               	movlw	0
  7959  133C  00AA               	movwf	setBuz@time+1
  7960  133D  3001               	movlw	1
  7961  133E  3194  2490  3193   	fcall	_setBuz
  7962                           
  7963                           ;RF_Control_B1.c: 387: setRF_DimmerLights(sw, 1);
  7964  1341  0020               	movlb	0	; select bank0
  7965  1342  01E5               	clrf	setRF_DimmerLights@on
  7966  1343  0AE5               	incf	setRF_DimmerLights@on,f
  7967  1344  086F               	movf	setRFSW_Control@sw,w
  7968  1345  3197  2730  3193   	fcall	_setRF_DimmerLights
  7969                           
  7970                           ;RF_Control_B1.c: 388: setTxData();
  7971  1348  318E  267B  3193   	fcall	_setTxData
  7972                           
  7973                           ;RF_Control_B1.c: 389: status = 1;
  7974  134B  0020               	movlb	0	; select bank0
  7975  134C  01EE               	clrf	setRFSW_Control@status
  7976  134D  0AEE               	incf	setRFSW_Control@status,f
  7977  134E                     l6391:	
  7978                           
  7979                           ;RF_Control_B1.c: 390: }
  7980                           ;RF_Control_B1.c: 391: }
  7981                           ;RF_Control_B1.c: 393: if (status == 0) {
  7982  134E  0020               	movlb	0	; select bank0
  7983  134F  08EE               	movf	setRFSW_Control@status,f
  7984  1350  1D03               	skipz
  7985  1351  0008               	return
  7986                           
  7987                           ;RF_Control_B1.c: 395: setDimmerLights_SwOn(sw);
  7988  1352  086F               	movf	setRFSW_Control@sw,w
  7989  1353  3191  2193  3193   	fcall	_setDimmerLights_SwOn
  7990                           
  7991                           ;RF_Control_B1.c: 396: setDimmerLights_SwOff(sw);
  7992  1356  0020               	movlb	0	; select bank0
  7993  1357  086F               	movf	setRFSW_Control@sw,w
  7994  1358  3192  226D         	fcall	_setDimmerLights_SwOff
  7995  135A  0008               	return
  7996  135B                     __end_of_setRFSW_Control:	
  7997                           
  7998                           	psect	text31
  7999  0A78                     __ptext31:	
  8000 ;; *************** function _setRFSW_AdjControl *****************
  8001 ;; Defined at:
  8002 ;;		line 402 in file "../src/RF_Control_B1.c"
  8003 ;; Parameters:    Size  Location     Type
  8004 ;;  sw              1    wreg     unsigned char 
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;  sw              1   72[BANK0 ] unsigned char 
  8007 ;;  status          1   71[BANK0 ] unsigned char 
  8008 ;; Return value:  Size  Location     Type
  8009 ;;		None               void
  8010 ;; Registers used:
  8011 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8012 ;; Tracked objects:
  8013 ;;		On entry : 0/0
  8014 ;;		On exit  : 0/0
  8015 ;;		Unchanged: 0/0
  8016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8018 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;Total ram usage:        4 bytes
  8022 ;; Hardware stack levels used:    1
  8023 ;; Hardware stack levels required when called:    8
  8024 ;; This function calls:
  8025 ;;		_getDimmerLights_PercentToValue
  8026 ;;		_getDimmerLights_Status
  8027 ;;		_setDimmerIntr_Dimming_RF
  8028 ;;		_setDimmerIntr_MaxmumValue
  8029 ;;		_setDimmerLights_DimmingRun
  8030 ;;		_setDimmerLights_SwOff
  8031 ;;		_setDimmerLights_SwOn
  8032 ;;		_setMemory_Modify
  8033 ;;		_setProductData
  8034 ;;		_setTxData
  8035 ;; This function is called by:
  8036 ;;		_setControl_Lights_Table
  8037 ;; This function uses a non-reentrant model
  8038 ;;
  8039                           
  8040                           
  8041                           ;psect for function _setRFSW_AdjControl
  8042  0A78                     _setRFSW_AdjControl:	
  8043                           
  8044                           ;incstack = 0
  8045                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8046                           ;setRFSW_AdjControl@sw stored from wreg
  8047  0A78  0020               	movlb	0	; select bank0
  8048  0A79  00E8               	movwf	setRFSW_AdjControl@sw
  8049                           
  8050                           ;RF_Control_B1.c: 403: char status = 0;
  8051  0A7A  01E7               	clrf	setRFSW_AdjControl@status
  8052                           
  8053                           ;RF_Control_B1.c: 405: status = getDimmerLights_Status(sw);
  8054  0A7B  0868               	movf	setRFSW_AdjControl@sw,w
  8055  0A7C  319C  2422  318A   	fcall	_getDimmerLights_Status
  8056  0A7F  0020               	movlb	0	; select bank0
  8057  0A80  00E5               	movwf	??_setRFSW_AdjControl
  8058  0A81  0865               	movf	??_setRFSW_AdjControl,w
  8059  0A82  00E7               	movwf	setRFSW_AdjControl@status
  8060                           
  8061                           ;RF_Control_B1.c: 407: if (RF_Data[9] > 0x64) {
  8062  0A83  3065               	movlw	101
  8063  0A84  0023               	movlb	3	; select bank3
  8064  0A85  0229               	subwf	(_RF_Data^(0+384)+9),w
  8065  0A86  1C03               	skipc
  8066  0A87  2A8F               	goto	l6403
  8067                           
  8068                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x64;
  8069  0A88  3064               	movlw	100
  8070  0A89  0020               	movlb	0	; select bank0
  8071  0A8A  00E5               	movwf	??_setRFSW_AdjControl
  8072  0A8B  0865               	movf	??_setRFSW_AdjControl,w
  8073  0A8C  0023               	movlb	3	; select bank3
  8074  0A8D  00A9               	movwf	(_RF_Data^(0+384)+9)
  8075                           
  8076                           ;RF_Control_B1.c: 409: } else if (RF_Data[9] < 0x01) {
  8077  0A8E  2A94               	goto	l6407
  8078  0A8F                     l6403:	
  8079  0A8F  08A9               	movf	(_RF_Data^(0+384)+9),f
  8080  0A90  1D03               	skipz
  8081  0A91  2A94               	goto	l6407
  8082                           
  8083                           ;RF_Control_B1.c: 410: RF_Data[9] = 0x01;
  8084  0A92  01A9               	clrf	(_RF_Data^(0+384)+9)
  8085  0A93  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8086  0A94                     l6407:	
  8087                           
  8088                           ;RF_Control_B1.c: 411: }
  8089                           ;RF_Control_B1.c: 412: setProductData(9, RF_Data[9]);
  8090  0A94  0829               	movf	(_RF_Data^(0+384)+9),w
  8091  0A95  0020               	movlb	0	; select bank0
  8092  0A96  00E5               	movwf	??_setRFSW_AdjControl
  8093  0A97  0865               	movf	??_setRFSW_AdjControl,w
  8094  0A98  00E2               	movwf	setProductData@value
  8095  0A99  3009               	movlw	9
  8096  0A9A  319B  236F  318A   	fcall	_setProductData
  8097                           
  8098                           ;RF_Control_B1.c: 413: setProductData(11, sw);
  8099  0A9D  0020               	movlb	0	; select bank0
  8100  0A9E  0868               	movf	setRFSW_AdjControl@sw,w
  8101  0A9F  00E5               	movwf	??_setRFSW_AdjControl
  8102  0AA0  0865               	movf	??_setRFSW_AdjControl,w
  8103  0AA1  00E2               	movwf	setProductData@value
  8104  0AA2  300B               	movlw	11
  8105  0AA3  319B  236F  318A   	fcall	_setProductData
  8106                           
  8107                           ;RF_Control_B1.c: 414: setProductData(17, product->Data[26 + sw]);
  8108  0AA6  0020               	movlb	0	; select bank0
  8109  0AA7  0868               	movf	setRFSW_AdjControl@sw,w
  8110  0AA8  3E1A               	addlw	26
  8111  0AA9  0021               	movlb	1	; select bank1
  8112  0AAA  076E               	addwf	_product^(0+128),w
  8113  0AAB  0020               	movlb	0	; select bank0
  8114  0AAC  00E5               	movwf	??_setRFSW_AdjControl
  8115  0AAD  0865               	movf	??_setRFSW_AdjControl,w
  8116  0AAE  0086               	movwf	6
  8117  0AAF  3001               	movlw	1	; select bank2/3
  8118  0AB0  0087               	movwf	7
  8119  0AB1  0801               	movf	1,w
  8120  0AB2  00E6               	movwf	??_setRFSW_AdjControl+1
  8121  0AB3  0866               	movf	??_setRFSW_AdjControl+1,w
  8122  0AB4  00E2               	movwf	setProductData@value
  8123  0AB5  3011               	movlw	17
  8124  0AB6  319B  236F  318A   	fcall	_setProductData
  8125                           
  8126                           ;RF_Control_B1.c: 415: setProductData((20 + sw), RF_Data[9]);
  8127  0AB9  0023               	movlb	3	; select bank3
  8128  0ABA  0829               	movf	(_RF_Data^(0+384)+9),w
  8129  0ABB  0020               	movlb	0	; select bank0
  8130  0ABC  00E5               	movwf	??_setRFSW_AdjControl
  8131  0ABD  0865               	movf	??_setRFSW_AdjControl,w
  8132  0ABE  00E2               	movwf	setProductData@value
  8133  0ABF  0868               	movf	setRFSW_AdjControl@sw,w
  8134  0AC0  3E14               	addlw	20
  8135  0AC1  319B  236F  318A   	fcall	_setProductData
  8136                           
  8137                           ;RF_Control_B1.c: 423: setMemory_Modify(1);
  8138  0AC4  3001               	movlw	1
  8139  0AC5  319C  24F3  318A   	fcall	_setMemory_Modify
  8140                           
  8141                           ;RF_Control_B1.c: 427: if (status == 1) {
  8142  0AC8  0020               	movlb	0	; select bank0
  8143  0AC9  0867               	movf	setRFSW_AdjControl@status,w
  8144  0ACA  3A01               	xorlw	1
  8145  0ACB  1D03               	skipz
  8146  0ACC  2AE4               	goto	l6417
  8147                           
  8148                           ;RF_Control_B1.c: 428: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8149  0ACD  0023               	movlb	3	; select bank3
  8150  0ACE  0829               	movf	(_RF_Data^(0+384)+9),w
  8151  0ACF  3196  2666  318A   	fcall	_getDimmerLights_PercentToValue
  8152  0AD2  0020               	movlb	0	; select bank0
  8153  0AD3  00E5               	movwf	??_setRFSW_AdjControl
  8154  0AD4  0865               	movf	??_setRFSW_AdjControl,w
  8155  0AD5  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8156  0AD6  0868               	movf	setRFSW_AdjControl@sw,w
  8157  0AD7  319B  237B  318A   	fcall	_setDimmerIntr_MaxmumValue
  8158                           
  8159                           ;RF_Control_B1.c: 429: setDimmerIntr_Dimming_RF(sw, 1);
  8160  0ADA  0020               	movlb	0	; select bank0
  8161  0ADB  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8162  0ADC  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8163  0ADD  0868               	movf	setRFSW_AdjControl@sw,w
  8164  0ADE  319D  25FE  318A   	fcall	_setDimmerIntr_Dimming_RF
  8165                           
  8166                           ;RF_Control_B1.c: 430: setTxData();
  8167  0AE1  318E  267B         	fcall	_setTxData
  8168                           
  8169                           ;RF_Control_B1.c: 432: } else if (status == 0) {
  8170  0AE3  0008               	return
  8171  0AE4                     l6417:	
  8172  0AE4  0020               	movlb	0	; select bank0
  8173  0AE5  08E7               	movf	setRFSW_AdjControl@status,f
  8174  0AE6  1D03               	skipz
  8175  0AE7  0008               	return
  8176                           
  8177                           ;RF_Control_B1.c: 436: setDimmerLights_DimmingRun(sw, 1);
  8178  0AE8  01A2               	clrf	setDimmerLights_DimmingRun@command
  8179  0AE9  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8180  0AEA  0868               	movf	setRFSW_AdjControl@sw,w
  8181  0AEB  319E  2696  318A   	fcall	_setDimmerLights_DimmingRun
  8182                           
  8183                           ;RF_Control_B1.c: 437: setDimmerLights_SwOn(sw);
  8184  0AEE  0020               	movlb	0	; select bank0
  8185  0AEF  0868               	movf	setRFSW_AdjControl@sw,w
  8186  0AF0  3191  2193  318A   	fcall	_setDimmerLights_SwOn
  8187                           
  8188                           ;RF_Control_B1.c: 438: setDimmerLights_SwOff(sw);
  8189  0AF3  0020               	movlb	0	; select bank0
  8190  0AF4  0868               	movf	setRFSW_AdjControl@sw,w
  8191  0AF5  3192  226D         	fcall	_setDimmerLights_SwOff
  8192  0AF7  0008               	return
  8193  0AF8                     __end_of_setRFSW_AdjControl:	
  8194                           
  8195                           	psect	text32
  8196  1E96                     __ptext32:	
  8197 ;; *************** function _setDimmerLights_DimmingRun *****************
  8198 ;; Defined at:
  8199 ;;		line 1089 in file "../src/Dimmer_B1.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;  lights          1    wreg     unsigned char 
  8202 ;;  command         1    2[BANK0 ] unsigned char 
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;  lights          1    4[BANK0 ] unsigned char 
  8205 ;; Return value:  Size  Location     Type
  8206 ;;		None               void
  8207 ;; Registers used:
  8208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8214 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;Total ram usage:        3 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    6
  8221 ;; This function calls:
  8222 ;;		_DimmerLights_SelectPointer
  8223 ;; This function is called by:
  8224 ;;		_setRFSW_AdjControl
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           
  8229                           ;psect for function _setDimmerLights_DimmingRun
  8230  1E96                     _setDimmerLights_DimmingRun:	
  8231                           
  8232                           ;incstack = 0
  8233                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8234                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8235  1E96  0020               	movlb	0	; select bank0
  8236  1E97  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8237                           
  8238                           ;Dimmer_B1.c: 1090: DimmerLights_SelectPointer(lights);
  8239  1E98  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8240  1E99  319B  2363         	fcall	_DimmerLights_SelectPointer
  8241                           
  8242                           ;Dimmer_B1.c: 1091: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8243  1E9B  0020               	movlb	0	; select bank0
  8244  1E9C  0822               	movf	setDimmerLights_DimmingRun@command,w
  8245  1E9D  3A01               	xorlw	1
  8246  1E9E  3000               	movlw	0
  8247  1E9F  1903               	skipnz
  8248  1EA0  3001               	movlw	1
  8249  1EA1  00A3               	movwf	??_setDimmerLights_DimmingRun
  8250  1EA2  0021               	movlb	1	; select bank1
  8251  1EA3  0A4C               	incf	_DimmerLights^(0+128),w
  8252  1EA4  0086               	movwf	6
  8253  1EA5  3001               	movlw	1	; select bank2/3
  8254  1EA6  0087               	movwf	7
  8255  1EA7  0020               	movlb	0	; select bank0
  8256  1EA8  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8257  1EA9  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8258  1EAA  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8259  1EAB  0801               	movf	1,w
  8260  1EAC  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8261  1EAD  39BF               	andlw	-65
  8262  1EAE  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8263  1EAF  0081               	movwf	1
  8264  1EB0  0008               	return
  8265  1EB1                     __end_of_setDimmerLights_DimmingRun:	
  8266                           
  8267                           	psect	text33
  8268  1C77                     __ptext33:	
  8269 ;; *************** function _getRF_KeyStatus *****************
  8270 ;; Defined at:
  8271 ;;		line 166 in file "../src/RF_Control_B1.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;		None
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;  key             1    1[BANK0 ] unsigned char 
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      unsigned char 
  8278 ;; Registers used:
  8279 ;;		wreg, status,2
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;Total ram usage:        3 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; Hardware stack levels required when called:    5
  8292 ;; This function calls:
  8293 ;;		Nothing
  8294 ;; This function is called by:
  8295 ;;		_setRF_Main
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           
  8300                           ;psect for function _getRF_KeyStatus
  8301  1C77                     _getRF_KeyStatus:	
  8302                           
  8303                           ;RF_Control_B1.c: 167: char key = 0;
  8304                           
  8305                           ;incstack = 0
  8306                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8307  1C77  0020               	movlb	0	; select bank0
  8308  1C78  01A1               	clrf	getRF_KeyStatus@key
  8309                           
  8310                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8311  1C79  01A2               	clrf	_getRF_KeyStatus$5410
  8312  1C7A  0AA2               	incf	_getRF_KeyStatus$5410,f
  8313  1C7B  1F0C               	btfss	12,6	;volatile
  8314  1C7C  1A0C               	btfsc	12,4	;volatile
  8315  1C7D  2C82               	goto	l7055
  8316  1C7E  1C0C               	btfss	12,0	;volatile
  8317  1C7F  1B8C               	btfsc	12,7	;volatile
  8318  1C80  2C82               	goto	l7055
  8319  1C81  01A2               	clrf	_getRF_KeyStatus$5410
  8320  1C82                     l7055:	
  8321  1C82  0822               	movf	_getRF_KeyStatus$5410,w
  8322  1C83  00A0               	movwf	??_getRF_KeyStatus
  8323  1C84  0820               	movf	??_getRF_KeyStatus,w
  8324  1C85  00A1               	movwf	getRF_KeyStatus@key
  8325                           
  8326                           ;RF_Control_B1.c: 179: return key;
  8327  1C86  0821               	movf	getRF_KeyStatus@key,w
  8328  1C87  0008               	return
  8329  1C88                     __end_of_getRF_KeyStatus:	
  8330                           
  8331                           	psect	text34
  8332  1C66                     __ptext34:	
  8333 ;; *************** function _getBuz_GO *****************
  8334 ;; Defined at:
  8335 ;;		line 82 in file "../src/Buzzer_B1.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;  i               2    4[BANK0 ] int 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  2    0[BANK0 ] int 
  8342 ;; Registers used:
  8343 ;;		wreg, status,2, status,0
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:        6 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    5
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		_setRF_Main
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           
  8364                           ;psect for function _getBuz_GO
  8365  1C66                     _getBuz_GO:	
  8366                           
  8367                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8368                           
  8369                           ;incstack = 0
  8370                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8371  1C66  0022               	movlb	2	; select bank2
  8372  1C67  0C20               	rrf	_Buz1^(0+256),w
  8373  1C68  3901               	andlw	1
  8374  1C69  0020               	movlb	0	; select bank0
  8375  1C6A  00A2               	movwf	??_getBuz_GO
  8376  1C6B  01A3               	clrf	??_getBuz_GO+1
  8377  1C6C  0822               	movf	??_getBuz_GO,w
  8378  1C6D  00A4               	movwf	getBuz_GO@i
  8379  1C6E  0823               	movf	??_getBuz_GO+1,w
  8380  1C6F  00A5               	movwf	getBuz_GO@i+1
  8381                           
  8382                           ;Buzzer_B1.c: 84: return i;
  8383  1C70  0825               	movf	getBuz_GO@i+1,w
  8384  1C71  01A1               	clrf	?_getBuz_GO+1
  8385  1C72  07A1               	addwf	?_getBuz_GO+1,f
  8386  1C73  0824               	movf	getBuz_GO@i,w
  8387  1C74  01A0               	clrf	?_getBuz_GO
  8388  1C75  07A0               	addwf	?_getBuz_GO,f
  8389  1C76  0008               	return
  8390  1C77                     __end_of_getBuz_GO:	
  8391                           
  8392                           	psect	text35
  8393  1000                     __ptext35:	
  8394 ;; *************** function _RF_RxDisable *****************
  8395 ;; Defined at:
  8396 ;;		line 154 in file "../src/RF_Control_B1.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;		None
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;		None
  8401 ;; Return value:  Size  Location     Type
  8402 ;;		None               void
  8403 ;; Registers used:
  8404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8414 ;;Total ram usage:        0 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; Hardware stack levels required when called:    7
  8417 ;; This function calls:
  8418 ;;		_CC2500_WriteCommand
  8419 ;; This function is called by:
  8420 ;;		_setRF_Main
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           
  8425                           ;psect for function _RF_RxDisable
  8426  1000                     _RF_RxDisable:	
  8427                           
  8428                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8429                           
  8430                           ;incstack = 0
  8431                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8432  1000  0021               	movlb	1	; select bank1
  8433  1001  18A0               	btfsc	_RF1^(0+128),1
  8434  1002  2805               	goto	l2155
  8435  1003  1DA0               	btfss	_RF1^(0+128),3
  8436  1004  0008               	return
  8437  1005                     l2155:	
  8438                           
  8439                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8440  1005  11A0               	bcf	_RF1^(0+128),3
  8441                           
  8442                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8443  1006  10A0               	bcf	_RF1^(0+128),1
  8444                           
  8445                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8446  1007  3036               	movlw	54
  8447  1008  319E  267C  3190   	fcall	_CC2500_WriteCommand
  8448                           
  8449                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8450  100B  303A               	movlw	58
  8451  100C  319E  267C         	fcall	_CC2500_WriteCommand
  8452  100E  0008               	return
  8453  100F                     __end_of_RF_RxDisable:	
  8454                           
  8455                           	psect	text36
  8456  08B2                     __ptext36:	
  8457 ;; *************** function _CC2500_TxData *****************
  8458 ;; Defined at:
  8459 ;;		line 32 in file "../src/CC2500_B1.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;		None
  8462 ;; Auto vars:     Size  Location     Type
  8463 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8464 ;; Return value:  Size  Location     Type
  8465 ;;		None               void
  8466 ;; Registers used:
  8467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8468 ;; Tracked objects:
  8469 ;;		On entry : 0/0
  8470 ;;		On exit  : 0/0
  8471 ;;		Unchanged: 0/0
  8472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8476 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8477 ;;Total ram usage:        2 bytes
  8478 ;; Hardware stack levels used:    1
  8479 ;; Hardware stack levels required when called:    7
  8480 ;; This function calls:
  8481 ;;		_CC2500_WriteByte
  8482 ;;		_CC2500_WriteCommand
  8483 ;;		_RF_Timeout_Counter
  8484 ;;		_setRF_TimeoutCleared
  8485 ;; This function is called by:
  8486 ;;		_setRF_Main
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           
  8491                           ;psect for function _CC2500_TxData
  8492  08B2                     _CC2500_TxData:	
  8493                           
  8494                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8495                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8496                           
  8497                           ;incstack = 0
  8498                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8499  08B2  3036               	movlw	54
  8500  08B3  319E  267C  3188   	fcall	_CC2500_WriteCommand
  8501                           
  8502                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8503  08B6  303B               	movlw	59
  8504  08B7  319E  267C  3188   	fcall	_CC2500_WriteCommand
  8505                           
  8506                           ;CC2500_B1.c: 38: RC0 = 0;
  8507  08BA  0020               	movlb	0	; select bank0
  8508  08BB  100E               	bcf	14,0	;volatile
  8509                           
  8510                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8511  08BC  307F               	movlw	127
  8512  08BD  00A4               	movwf	??_CC2500_TxData
  8513  08BE  0824               	movf	??_CC2500_TxData,w
  8514  08BF  0021               	movlb	1	; select bank1
  8515  08C0  00D1               	movwf	_SPI0Buffer^(0+128)
  8516                           
  8517                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8518  08C1  28C5               	goto	l8591
  8519  08C2                     l8589:	
  8520                           
  8521                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8522  08C2  319D  2566  3188   	fcall	_RF_Timeout_Counter
  8523  08C5                     l8591:	
  8524  08C5  0020               	movlb	0	; select bank0
  8525  08C6  1E8E               	btfss	14,5	;volatile
  8526  08C7  28CB               	goto	l8595
  8527  08C8  0021               	movlb	1	; select bank1
  8528  08C9  1F21               	btfss	(_RF1^(0+128)+1),6
  8529  08CA  28C2               	goto	l8589
  8530  08CB                     l8595:	
  8531                           
  8532                           ;CC2500_B1.c: 42: };
  8533                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8534  08CB  319A  22A8  3188   	fcall	_setRF_TimeoutCleared
  8535                           
  8536                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8537  08CE  319E  262F  3188   	fcall	_CC2500_WriteByte
  8538                           
  8539                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8540  08D1  0021               	movlb	1	; select bank1
  8541  08D2  0854               	movf	_Tx_Length^(0+128),w
  8542  08D3  0020               	movlb	0	; select bank0
  8543  08D4  00A4               	movwf	??_CC2500_TxData
  8544  08D5  0824               	movf	??_CC2500_TxData,w
  8545  08D6  0021               	movlb	1	; select bank1
  8546  08D7  00D1               	movwf	_SPI0Buffer^(0+128)
  8547                           
  8548                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8549  08D8  319E  262F  3188   	fcall	_CC2500_WriteByte
  8550                           
  8551                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8552  08DB  0020               	movlb	0	; select bank0
  8553  08DC  01A5               	clrf	CC2500_TxData@loop_e
  8554  08DD                     l8609:	
  8555  08DD  0021               	movlb	1	; select bank1
  8556  08DE  0854               	movf	_Tx_Length^(0+128),w
  8557  08DF  0020               	movlb	0	; select bank0
  8558  08E0  0225               	subwf	CC2500_TxData@loop_e,w
  8559  08E1  1803               	btfsc	3,0
  8560  08E2  28F6               	goto	l235
  8561                           
  8562                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8563  08E3  0825               	movf	CC2500_TxData@loop_e,w
  8564  08E4  3EA0               	addlw	_RF_Data& (0+255)
  8565  08E5  0086               	movwf	6
  8566  08E6  3001               	movlw	1	; select bank3/4
  8567  08E7  0087               	movwf	7
  8568  08E8  0801               	movf	1,w
  8569  08E9  00A4               	movwf	??_CC2500_TxData
  8570  08EA  0824               	movf	??_CC2500_TxData,w
  8571  08EB  0021               	movlb	1	; select bank1
  8572  08EC  00D1               	movwf	_SPI0Buffer^(0+128)
  8573                           
  8574                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8575  08ED  319E  262F  3188   	fcall	_CC2500_WriteByte
  8576  08F0  3001               	movlw	1
  8577  08F1  0020               	movlb	0	; select bank0
  8578  08F2  00A4               	movwf	??_CC2500_TxData
  8579  08F3  0824               	movf	??_CC2500_TxData,w
  8580  08F4  07A5               	addwf	CC2500_TxData@loop_e,f
  8581  08F5  28DD               	goto	l8609
  8582  08F6                     l235:	
  8583                           
  8584                           ;CC2500_B1.c: 51: }
  8585                           ;CC2500_B1.c: 52: RC0 = 1;
  8586  08F6  140E               	bsf	14,0	;volatile
  8587                           
  8588                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8589  08F7  3035               	movlw	53
  8590  08F8  319E  267C  3188   	fcall	_CC2500_WriteCommand
  8591                           
  8592                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8593  08FB  28FF               	goto	l8615
  8594  08FC                     l8613:	
  8595                           
  8596                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8597  08FC  319D  2566  3188   	fcall	_RF_Timeout_Counter
  8598  08FF                     l8615:	
  8599  08FF  0020               	movlb	0	; select bank0
  8600  0900  188E               	btfsc	14,1	;volatile
  8601  0901  2905               	goto	l8619
  8602  0902  0021               	movlb	1	; select bank1
  8603  0903  1F21               	btfss	(_RF1^(0+128)+1),6
  8604  0904  28FC               	goto	l8613
  8605  0905                     l8619:	
  8606                           
  8607                           ;CC2500_B1.c: 56: };
  8608                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8609  0905  319A  22A8  3188   	fcall	_setRF_TimeoutCleared
  8610                           
  8611                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8612  0908  290C               	goto	l8623
  8613  0909                     l8621:	
  8614                           
  8615                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8616  0909  319D  2566  3188   	fcall	_RF_Timeout_Counter
  8617  090C                     l8623:	
  8618  090C  0020               	movlb	0	; select bank0
  8619  090D  1C8E               	btfss	14,1	;volatile
  8620  090E  2912               	goto	l8627
  8621  090F  0021               	movlb	1	; select bank1
  8622  0910  1F21               	btfss	(_RF1^(0+128)+1),6
  8623  0911  2909               	goto	l8621
  8624  0912                     l8627:	
  8625                           
  8626                           ;CC2500_B1.c: 61: };
  8627                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8628  0912  319A  22A8  3188   	fcall	_setRF_TimeoutCleared
  8629                           
  8630                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8631  0915  3036               	movlw	54
  8632  0916  319E  267C  3188   	fcall	_CC2500_WriteCommand
  8633                           
  8634                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8635  0919  303B               	movlw	59
  8636  091A  319E  267C         	fcall	_CC2500_WriteCommand
  8637                           
  8638                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8639  091C  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8640  091D  0008               	return
  8641  091E                     __end_of_CC2500_TxData:	
  8642                           
  8643                           	psect	text37
  8644  0847                     __ptext37:	
  8645 ;; *************** function _CC2500_RxData *****************
  8646 ;; Defined at:
  8647 ;;		line 73 in file "../src/CC2500_B1.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;		None
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8652 ;; Return value:  Size  Location     Type
  8653 ;;		None               void
  8654 ;; Registers used:
  8655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8656 ;; Tracked objects:
  8657 ;;		On entry : 0/0
  8658 ;;		On exit  : 0/0
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;Total ram usage:        2 bytes
  8666 ;; Hardware stack levels used:    1
  8667 ;; Hardware stack levels required when called:    7
  8668 ;; This function calls:
  8669 ;;		_CC2500_ReadByte
  8670 ;;		_CC2500_ReadStatus
  8671 ;;		_CC2500_WriteByte
  8672 ;;		_CC2500_WriteCommand
  8673 ;;		_RF_Timeout_Counter
  8674 ;;		_setRF_TimeoutCleared
  8675 ;; This function is called by:
  8676 ;;		_setRF_Main
  8677 ;; This function uses a non-reentrant model
  8678 ;;
  8679                           
  8680                           
  8681                           ;psect for function _CC2500_RxData
  8682  0847                     _CC2500_RxData:	
  8683                           
  8684                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8685                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8686                           
  8687                           ;incstack = 0
  8688                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8689  0847  0020               	movlb	0	; select bank0
  8690  0848  188E               	btfsc	14,1	;volatile
  8691  0849  0008               	return
  8692                           
  8693                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8694  084A  303B               	movlw	59
  8695  084B  3190  2054  3188   	fcall	_CC2500_ReadStatus
  8696                           
  8697                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8698  084E  0021               	movlb	1	; select bank1
  8699  084F  0857               	movf	_s_data^(0+128),w
  8700  0850  1903               	btfsc	3,2
  8701  0851  0008               	return
  8702                           
  8703                           ;CC2500_B1.c: 90: RC0 = 0;
  8704  0852  0020               	movlb	0	; select bank0
  8705  0853  100E               	bcf	14,0	;volatile
  8706                           
  8707                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8708  0854  30FF               	movlw	255
  8709  0855  00A4               	movwf	??_CC2500_RxData
  8710  0856  0824               	movf	??_CC2500_RxData,w
  8711  0857  0021               	movlb	1	; select bank1
  8712  0858  00D1               	movwf	_SPI0Buffer^(0+128)
  8713                           
  8714                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8715  0859  285D               	goto	l8647
  8716  085A                     l8645:	
  8717                           
  8718                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8719  085A  319D  2566  3188   	fcall	_RF_Timeout_Counter
  8720  085D                     l8647:	
  8721  085D  0020               	movlb	0	; select bank0
  8722  085E  1E8E               	btfss	14,5	;volatile
  8723  085F  2863               	goto	l8651
  8724  0860  0021               	movlb	1	; select bank1
  8725  0861  1F21               	btfss	(_RF1^(0+128)+1),6
  8726  0862  285A               	goto	l8645
  8727  0863                     l8651:	
  8728                           
  8729                           ;CC2500_B1.c: 95: };
  8730                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8731  0863  319A  22A8  3188   	fcall	_setRF_TimeoutCleared
  8732                           
  8733                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8734  0866  319E  262F  3188   	fcall	_CC2500_WriteByte
  8735                           
  8736                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8737  0869  319F  2704  3188   	fcall	_CC2500_ReadByte
  8738                           
  8739                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8740  086C  0021               	movlb	1	; select bank1
  8741  086D  0851               	movf	_SPI0Buffer^(0+128),w
  8742  086E  0020               	movlb	0	; select bank0
  8743  086F  00A4               	movwf	??_CC2500_RxData
  8744  0870  0824               	movf	??_CC2500_RxData,w
  8745  0871  0021               	movlb	1	; select bank1
  8746  0872  00D0               	movwf	_Rx_Length^(0+128)
  8747                           
  8748                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8749  0873  0020               	movlb	0	; select bank0
  8750  0874  01A5               	clrf	CC2500_RxData@loop_f
  8751  0875                     l8667:	
  8752  0875  0021               	movlb	1	; select bank1
  8753  0876  0850               	movf	_Rx_Length^(0+128),w
  8754  0877  0020               	movlb	0	; select bank0
  8755  0878  0225               	subwf	CC2500_RxData@loop_f,w
  8756  0879  1803               	btfsc	3,0
  8757  087A  288E               	goto	l8669
  8758                           
  8759                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8760  087B  319F  2704  3188   	fcall	_CC2500_ReadByte
  8761                           
  8762                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8763  087E  0021               	movlb	1	; select bank1
  8764  087F  0851               	movf	_SPI0Buffer^(0+128),w
  8765  0880  0020               	movlb	0	; select bank0
  8766  0881  00A4               	movwf	??_CC2500_RxData
  8767  0882  0825               	movf	CC2500_RxData@loop_f,w
  8768  0883  3EA0               	addlw	_RF_Data& (0+255)
  8769  0884  0086               	movwf	6
  8770  0885  3001               	movlw	1	; select bank3/4
  8771  0886  0087               	movwf	7
  8772  0887  0824               	movf	??_CC2500_RxData,w
  8773  0888  0081               	movwf	1
  8774  0889  3001               	movlw	1
  8775  088A  00A4               	movwf	??_CC2500_RxData
  8776  088B  0824               	movf	??_CC2500_RxData,w
  8777  088C  07A5               	addwf	CC2500_RxData@loop_f,f
  8778  088D  2875               	goto	l8667
  8779  088E                     l8669:	
  8780                           
  8781                           ;CC2500_B1.c: 104: }
  8782                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8783  088E  319F  2704  3188   	fcall	_CC2500_ReadByte
  8784                           
  8785                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8786  0891  0021               	movlb	1	; select bank1
  8787  0892  0851               	movf	_SPI0Buffer^(0+128),w
  8788  0893  0020               	movlb	0	; select bank0
  8789  0894  00A4               	movwf	??_CC2500_RxData
  8790  0895  0824               	movf	??_CC2500_RxData,w
  8791  0896  0021               	movlb	1	; select bank1
  8792  0897  00CF               	movwf	_RSSI^(0+128)
  8793                           
  8794                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8795  0898  319F  2704  3188   	fcall	_CC2500_ReadByte
  8796                           
  8797                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8798  089B  0021               	movlb	1	; select bank1
  8799  089C  0851               	movf	_SPI0Buffer^(0+128),w
  8800  089D  0020               	movlb	0	; select bank0
  8801  089E  00A4               	movwf	??_CC2500_RxData
  8802  089F  0824               	movf	??_CC2500_RxData,w
  8803  08A0  0021               	movlb	1	; select bank1
  8804  08A1  00C8               	movwf	_CRC^(0+128)
  8805                           
  8806                           ;CC2500_B1.c: 109: RC0 = 1;
  8807  08A2  0020               	movlb	0	; select bank0
  8808  08A3  140E               	bsf	14,0	;volatile
  8809                           
  8810                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8811  08A4  0021               	movlb	1	; select bank1
  8812  08A5  1BC8               	btfsc	_CRC^(0+128),7
  8813                           
  8814                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8815  08A6  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8816                           
  8817                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8818  08A7  11A0               	bcf	_RF1^(0+128),3
  8819                           
  8820                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8821  08A8  14A0               	bsf	_RF1^(0+128),1
  8822                           
  8823                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8824  08A9  3036               	movlw	54
  8825  08AA  319E  267C  3188   	fcall	_CC2500_WriteCommand
  8826                           
  8827                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8828  08AD  303A               	movlw	58
  8829  08AE  319E  267C         	fcall	_CC2500_WriteCommand
  8830  08B0  0021               	movlb	1	; select bank1
  8831  08B1  0008               	return
  8832  08B2                     __end_of_CC2500_RxData:	
  8833                           
  8834                           	psect	text38
  8835  1054                     __ptext38:	
  8836 ;; *************** function _CC2500_ReadStatus *****************
  8837 ;; Defined at:
  8838 ;;		line 308 in file "../src/CC2500_B1.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;  status_addr     1    wreg     unsigned char 
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8843 ;; Return value:  Size  Location     Type
  8844 ;;		None               void
  8845 ;; Registers used:
  8846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;Total ram usage:        2 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    6
  8859 ;; This function calls:
  8860 ;;		_CC2500_ReadByte
  8861 ;;		_CC2500_WriteByte
  8862 ;;		_RF_Timeout_Counter
  8863 ;;		_setRF_TimeoutCleared
  8864 ;; This function is called by:
  8865 ;;		_CC2500_RxData
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           
  8870                           ;psect for function _CC2500_ReadStatus
  8871  1054                     _CC2500_ReadStatus:	
  8872                           
  8873                           ;incstack = 0
  8874                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8875                           ;CC2500_ReadStatus@status_addr stored from wreg
  8876  1054  0020               	movlb	0	; select bank0
  8877  1055  00A3               	movwf	CC2500_ReadStatus@status_addr
  8878                           
  8879                           ;CC2500_B1.c: 309: RC0 = 0;
  8880  1056  100E               	bcf	14,0	;volatile
  8881                           
  8882                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8883  1057  0823               	movf	CC2500_ReadStatus@status_addr,w
  8884  1058  3EC0               	addlw	192
  8885  1059  00A2               	movwf	??_CC2500_ReadStatus
  8886  105A  0822               	movf	??_CC2500_ReadStatus,w
  8887  105B  0021               	movlb	1	; select bank1
  8888  105C  00D1               	movwf	_SPI0Buffer^(0+128)
  8889                           
  8890                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8891  105D  2861               	goto	l8497
  8892  105E                     l8495:	
  8893                           
  8894                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8895  105E  319D  2566  3190   	fcall	_RF_Timeout_Counter
  8896  1061                     l8497:	
  8897  1061  0020               	movlb	0	; select bank0
  8898  1062  1E8E               	btfss	14,5	;volatile
  8899  1063  2867               	goto	l8501
  8900  1064  0021               	movlb	1	; select bank1
  8901  1065  1F21               	btfss	(_RF1^(0+128)+1),6
  8902  1066  285E               	goto	l8495
  8903  1067                     l8501:	
  8904                           
  8905                           ;CC2500_B1.c: 314: };
  8906                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8907  1067  319A  22A8  3190   	fcall	_setRF_TimeoutCleared
  8908                           
  8909                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8910  106A  319E  262F  3190   	fcall	_CC2500_WriteByte
  8911                           
  8912                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8913  106D  319F  2704         	fcall	_CC2500_ReadByte
  8914                           
  8915                           ;CC2500_B1.c: 319: RC0 = 1;
  8916  106F  0020               	movlb	0	; select bank0
  8917  1070  140E               	bsf	14,0	;volatile
  8918                           
  8919                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8920  1071  0021               	movlb	1	; select bank1
  8921  1072  0851               	movf	_SPI0Buffer^(0+128),w
  8922  1073  0020               	movlb	0	; select bank0
  8923  1074  00A2               	movwf	??_CC2500_ReadStatus
  8924  1075  0822               	movf	??_CC2500_ReadStatus,w
  8925  1076  0021               	movlb	1	; select bank1
  8926  1077  00D7               	movwf	_s_data^(0+128)
  8927  1078  0008               	return
  8928  1079                     __end_of_CC2500_ReadStatus:	
  8929                           
  8930                           	psect	text39
  8931  1F04                     __ptext39:	
  8932 ;; *************** function _CC2500_ReadByte *****************
  8933 ;; Defined at:
  8934 ;;		line 242 in file "../src/CC2500_B1.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;		None
  8937 ;; Auto vars:     Size  Location     Type
  8938 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8939 ;; Return value:  Size  Location     Type
  8940 ;;		None               void
  8941 ;; Registers used:
  8942 ;;		wreg, status,2, status,0
  8943 ;; Tracked objects:
  8944 ;;		On entry : 0/0
  8945 ;;		On exit  : 0/0
  8946 ;;		Unchanged: 0/0
  8947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;Total ram usage:        2 bytes
  8953 ;; Hardware stack levels used:    1
  8954 ;; Hardware stack levels required when called:    5
  8955 ;; This function calls:
  8956 ;;		Nothing
  8957 ;; This function is called by:
  8958 ;;		_CC2500_RxData
  8959 ;;		_CC2500_ReadStatus
  8960 ;;		_CC2500_ReadREG
  8961 ;; This function uses a non-reentrant model
  8962 ;;
  8963                           
  8964                           
  8965                           ;psect for function _CC2500_ReadByte
  8966  1F04                     _CC2500_ReadByte:	
  8967                           
  8968                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8969                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8970                           
  8971                           ;incstack = 0
  8972                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8973  1F04  0020               	movlb	0	; select bank0
  8974  1F05  01A1               	clrf	CC2500_ReadByte@loop_b
  8975  1F06                     L3:	
  8976  1F06  3008               	movlw	8
  8977  1F07  0221               	subwf	CC2500_ReadByte@loop_b,w
  8978  1F08  1803               	btfsc	3,0
  8979  1F09  0008               	return
  8980                           
  8981                           ;CC2500_B1.c: 245: RC3 = 1;
  8982  1F0A  158E               	bsf	14,3	;volatile
  8983                           
  8984                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8985  1F0B  1003               	clrc
  8986  1F0C  0021               	movlb	1	; select bank1
  8987  1F0D  0DD1               	rlf	_SPI0Buffer^(0+128),f
  8988                           
  8989                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8990  1F0E  0020               	movlb	0	; select bank0
  8991  1F0F  1E8E               	btfss	14,5	;volatile
  8992  1F10  2F14               	goto	l8467
  8993                           
  8994                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8995  1F11  0021               	movlb	1	; select bank1
  8996  1F12  1451               	bsf	_SPI0Buffer^(0+128),0
  8997  1F13  2F1A               	goto	l8469
  8998  1F14                     l8467:	
  8999                           
  9000                           ;CC2500_B1.c: 249: else
  9001                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9002  1F14  30FE               	movlw	254
  9003  1F15  0020               	movlb	0	; select bank0
  9004  1F16  00A0               	movwf	??_CC2500_ReadByte
  9005  1F17  0820               	movf	??_CC2500_ReadByte,w
  9006  1F18  0021               	movlb	1	; select bank1
  9007  1F19  05D1               	andwf	_SPI0Buffer^(0+128),f
  9008  1F1A                     l8469:	
  9009                           
  9010                           ;CC2500_B1.c: 251: RC3 = 0;
  9011  1F1A  0020               	movlb	0	; select bank0
  9012  1F1B  118E               	bcf	14,3	;volatile
  9013  1F1C  3001               	movlw	1
  9014  1F1D  00A0               	movwf	??_CC2500_ReadByte
  9015  1F1E  0820               	movf	??_CC2500_ReadByte,w
  9016  1F1F  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9017  1F20  2F06               	goto	L3
  9018  1F21                     __end_of_CC2500_ReadByte:	
  9019                           
  9020                           	psect	text40
  9021  1D7B                     __ptext40:	
  9022 ;; *************** function _CC2500_PowerOnInitial *****************
  9023 ;; Defined at:
  9024 ;;		line 126 in file "../src/CC2500_B1.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;		None
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;		None
  9029 ;; Return value:  Size  Location     Type
  9030 ;;		None               void
  9031 ;; Registers used:
  9032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;Total ram usage:        0 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    8
  9045 ;; This function calls:
  9046 ;;		_CC2500_ClearRXFIFO
  9047 ;;		_CC2500_ClearTXFIFO
  9048 ;;		_CC2500_FrequencyCabr
  9049 ;;		_CC2500_InitPATable
  9050 ;;		_CC2500_InitSetREG
  9051 ;;		_CC2500_PowerRST
  9052 ;;		_CC2500_SIDLEMode
  9053 ;; This function is called by:
  9054 ;;		_main
  9055 ;;		_setRF_Main
  9056 ;; This function uses a non-reentrant model
  9057 ;;
  9058                           
  9059                           
  9060                           ;psect for function _CC2500_PowerOnInitial
  9061  1D7B                     _CC2500_PowerOnInitial:	
  9062                           
  9063                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9064                           
  9065                           ;incstack = 0
  9066                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9067  1D7B  3188  2003  319D   	fcall	_CC2500_PowerRST
  9068                           
  9069                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9070  1D7E  3190  209F  319D   	fcall	_CC2500_InitSetREG
  9071                           
  9072                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9073  1D81  319F  275E  319D   	fcall	_CC2500_InitPATable
  9074                           
  9075                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9076  1D84  319A  22B0  319D   	fcall	_CC2500_ClearTXFIFO
  9077                           
  9078                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9079  1D87  319A  22AC  319D   	fcall	_CC2500_ClearRXFIFO
  9080                           
  9081                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9082  1D8A  319B  23CF  319D   	fcall	_CC2500_FrequencyCabr
  9083                           
  9084                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9085  1D8D  319A  22B4         	fcall	_CC2500_SIDLEMode
  9086  1D8F  0008               	return
  9087  1D90                     __end_of_CC2500_PowerOnInitial:	
  9088                           
  9089                           	psect	text41
  9090  1AB4                     __ptext41:	
  9091 ;; *************** function _CC2500_SIDLEMode *****************
  9092 ;; Defined at:
  9093 ;;		line 216 in file "../src/CC2500_B1.c"
  9094 ;; Parameters:    Size  Location     Type
  9095 ;;		None
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;		None
  9098 ;; Return value:  Size  Location     Type
  9099 ;;		None               void
  9100 ;; Registers used:
  9101 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;Total ram usage:        0 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    7
  9114 ;; This function calls:
  9115 ;;		_CC2500_WriteCommand
  9116 ;; This function is called by:
  9117 ;;		_CC2500_PowerOnInitial
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _CC2500_SIDLEMode
  9123  1AB4                     _CC2500_SIDLEMode:	
  9124                           
  9125                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9129  1AB4  3036               	movlw	54
  9130  1AB5  319E  267C         	fcall	_CC2500_WriteCommand
  9131  1AB7  0008               	return
  9132  1AB8                     __end_of_CC2500_SIDLEMode:	
  9133                           
  9134                           	psect	text42
  9135  0803                     __ptext42:	
  9136 ;; *************** function _CC2500_PowerRST *****************
  9137 ;; Defined at:
  9138 ;;		line 139 in file "../src/CC2500_B1.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;		None
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;		None
  9143 ;; Return value:  Size  Location     Type
  9144 ;;		None               void
  9145 ;; Registers used:
  9146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;Total ram usage:        1 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:    6
  9159 ;; This function calls:
  9160 ;;		_CC2500_WriteByte
  9161 ;;		_DelayTime_1us
  9162 ;;		_RF_Timeout_Counter
  9163 ;;		_setRF_TimeoutCleared
  9164 ;; This function is called by:
  9165 ;;		_CC2500_PowerOnInitial
  9166 ;; This function uses a non-reentrant model
  9167 ;;
  9168                           
  9169                           
  9170                           ;psect for function _CC2500_PowerRST
  9171  0803                     _CC2500_PowerRST:	
  9172                           
  9173                           ;CC2500_B1.c: 140: RC3 = 0;
  9174                           
  9175                           ;incstack = 0
  9176                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9177  0803  0020               	movlb	0	; select bank0
  9178  0804  118E               	bcf	14,3	;volatile
  9179                           
  9180                           ;CC2500_B1.c: 141: RC4 = 0;
  9181  0805  120E               	bcf	14,4	;volatile
  9182                           
  9183                           ;CC2500_B1.c: 142: RC0 = 1;
  9184  0806  140E               	bsf	14,0	;volatile
  9185                           
  9186                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9187  0807  300A               	movlw	10
  9188  0808  00A0               	movwf	DelayTime_1us@count
  9189  0809  3000               	movlw	0
  9190  080A  00A1               	movwf	DelayTime_1us@count+1
  9191  080B  3190  2079  3188   	fcall	_DelayTime_1us
  9192                           
  9193                           ;CC2500_B1.c: 144: RC0 = 0;
  9194  080E  0020               	movlb	0	; select bank0
  9195  080F  100E               	bcf	14,0	;volatile
  9196                           
  9197                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9198  0810  300A               	movlw	10
  9199  0811  00A0               	movwf	DelayTime_1us@count
  9200  0812  3000               	movlw	0
  9201  0813  00A1               	movwf	DelayTime_1us@count+1
  9202  0814  3190  2079  3188   	fcall	_DelayTime_1us
  9203                           
  9204                           ;CC2500_B1.c: 146: RC0 = 1;
  9205  0817  0020               	movlb	0	; select bank0
  9206  0818  140E               	bsf	14,0	;volatile
  9207                           
  9208                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9209  0819  3028               	movlw	40
  9210  081A  00A0               	movwf	DelayTime_1us@count
  9211  081B  3000               	movlw	0
  9212  081C  00A1               	movwf	DelayTime_1us@count+1
  9213  081D  3190  2079  3188   	fcall	_DelayTime_1us
  9214                           
  9215                           ;CC2500_B1.c: 148: RC0 = 0;
  9216  0820  0020               	movlb	0	; select bank0
  9217  0821  100E               	bcf	14,0	;volatile
  9218                           
  9219                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9220  0822  3030               	movlw	48
  9221  0823  00A6               	movwf	??_CC2500_PowerRST
  9222  0824  0826               	movf	??_CC2500_PowerRST,w
  9223  0825  0021               	movlb	1	; select bank1
  9224  0826  00D1               	movwf	_SPI0Buffer^(0+128)
  9225                           
  9226                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9227  0827  282B               	goto	l8525
  9228  0828                     l8523:	
  9229                           
  9230                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9231  0828  319D  2566  3188   	fcall	_RF_Timeout_Counter
  9232  082B                     l8525:	
  9233  082B  0020               	movlb	0	; select bank0
  9234  082C  1E8E               	btfss	14,5	;volatile
  9235  082D  2831               	goto	l8529
  9236  082E  0021               	movlb	1	; select bank1
  9237  082F  1F21               	btfss	(_RF1^(0+128)+1),6
  9238  0830  2828               	goto	l8523
  9239  0831                     l8529:	
  9240                           
  9241                           ;CC2500_B1.c: 152: };
  9242                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9243  0831  319A  22A8  3188   	fcall	_setRF_TimeoutCleared
  9244                           
  9245                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9246  0834  319E  262F  3188   	fcall	_CC2500_WriteByte
  9247                           
  9248                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9249  0837  283B               	goto	l8535
  9250  0838                     l8533:	
  9251                           
  9252                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9253  0838  319D  2566  3188   	fcall	_RF_Timeout_Counter
  9254  083B                     l8535:	
  9255  083B  0020               	movlb	0	; select bank0
  9256  083C  1E8E               	btfss	14,5	;volatile
  9257  083D  2841               	goto	l8539
  9258  083E  0021               	movlb	1	; select bank1
  9259  083F  1F21               	btfss	(_RF1^(0+128)+1),6
  9260  0840  2838               	goto	l8533
  9261  0841                     l8539:	
  9262                           
  9263                           ;CC2500_B1.c: 157: };
  9264                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9265  0841  319A  22A8         	fcall	_setRF_TimeoutCleared
  9266                           
  9267                           ;CC2500_B1.c: 159: RC4 = 0;
  9268  0843  0020               	movlb	0	; select bank0
  9269  0844  120E               	bcf	14,4	;volatile
  9270                           
  9271                           ;CC2500_B1.c: 160: RC0 = 1;
  9272  0845  140E               	bsf	14,0	;volatile
  9273  0846  0008               	return
  9274  0847                     __end_of_CC2500_PowerRST:	
  9275                           
  9276                           	psect	text43
  9277  109F                     __ptext43:	
  9278 ;; *************** function _CC2500_InitSetREG *****************
  9279 ;; Defined at:
  9280 ;;		line 166 in file "../src/CC2500_B1.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;		None
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9285 ;;  temp2           1    7[BANK0 ] unsigned char 
  9286 ;;  temp1           1    6[BANK0 ] unsigned char 
  9287 ;; Return value:  Size  Location     Type
  9288 ;;		None               void
  9289 ;; Registers used:
  9290 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;Total ram usage:        4 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:    7
  9303 ;; This function calls:
  9304 ;;		_CC2500_WriteREG
  9305 ;; This function is called by:
  9306 ;;		_CC2500_PowerOnInitial
  9307 ;; This function uses a non-reentrant model
  9308 ;;
  9309                           
  9310                           
  9311                           ;psect for function _CC2500_InitSetREG
  9312  109F                     _CC2500_InitSetREG:	
  9313                           
  9314                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9315                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9316                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9317                           
  9318                           ;incstack = 0
  9319                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9320  109F  0020               	movlb	0	; select bank0
  9321  10A0  01A8               	clrf	CC2500_InitSetREG@loop_c
  9322  10A1                     L4:	
  9323  10A1  302F               	movlw	47
  9324  10A2  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9325  10A3  1803               	btfsc	3,0
  9326  10A4  0008               	return
  9327                           
  9328                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9329  10A5  0828               	movf	CC2500_InitSetREG@loop_c,w
  9330  10A6  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9331  10A7  0084               	movwf	4
  9332  10A8  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9333  10A9  1803               	skipnc
  9334  10AA  3E01               	addlw	1
  9335  10AB  0085               	movwf	5
  9336  10AC  0800               	movf	0,w	;code access
  9337  10AD  00A5               	movwf	??_CC2500_InitSetREG
  9338  10AE  0825               	movf	??_CC2500_InitSetREG,w
  9339  10AF  00A6               	movwf	CC2500_InitSetREG@temp1
  9340                           
  9341                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9342  10B0  0828               	movf	CC2500_InitSetREG@loop_c,w
  9343  10B1  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9344  10B2  0084               	movwf	4
  9345  10B3  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9346  10B4  1803               	skipnc
  9347  10B5  3E01               	addlw	1
  9348  10B6  0085               	movwf	5
  9349  10B7  0800               	movf	0,w	;code access
  9350  10B8  00A5               	movwf	??_CC2500_InitSetREG
  9351  10B9  0825               	movf	??_CC2500_InitSetREG,w
  9352  10BA  00A7               	movwf	CC2500_InitSetREG@temp2
  9353                           
  9354                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9355  10BB  0827               	movf	CC2500_InitSetREG@temp2,w
  9356  10BC  00A5               	movwf	??_CC2500_InitSetREG
  9357  10BD  0825               	movf	??_CC2500_InitSetREG,w
  9358  10BE  00A2               	movwf	CC2500_WriteREG@value
  9359  10BF  0826               	movf	CC2500_InitSetREG@temp1,w
  9360  10C0  3190  2031  3190   	fcall	_CC2500_WriteREG
  9361  10C3  3001               	movlw	1
  9362  10C4  0020               	movlb	0	; select bank0
  9363  10C5  00A5               	movwf	??_CC2500_InitSetREG
  9364  10C6  0825               	movf	??_CC2500_InitSetREG,w
  9365  10C7  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9366  10C8  28A1               	goto	L4
  9367  10C9                     __end_of_CC2500_InitSetREG:	
  9368                           
  9369                           	psect	text44
  9370  1F5E                     __ptext44:	
  9371 ;; *************** function _CC2500_InitPATable *****************
  9372 ;; Defined at:
  9373 ;;		line 181 in file "../src/CC2500_B1.c"
  9374 ;; Parameters:    Size  Location     Type
  9375 ;;		None
  9376 ;; Auto vars:     Size  Location     Type
  9377 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9378 ;;  temp            1    6[BANK0 ] unsigned char 
  9379 ;; Return value:  Size  Location     Type
  9380 ;;		None               void
  9381 ;; Registers used:
  9382 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9383 ;; Tracked objects:
  9384 ;;		On entry : 0/0
  9385 ;;		On exit  : 0/0
  9386 ;;		Unchanged: 0/0
  9387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9389 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9391 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;Total ram usage:        3 bytes
  9393 ;; Hardware stack levels used:    1
  9394 ;; Hardware stack levels required when called:    7
  9395 ;; This function calls:
  9396 ;;		_CC2500_WriteREG
  9397 ;; This function is called by:
  9398 ;;		_CC2500_PowerOnInitial
  9399 ;; This function uses a non-reentrant model
  9400 ;;
  9401                           
  9402                           
  9403                           ;psect for function _CC2500_InitPATable
  9404  1F5E                     _CC2500_InitPATable:	
  9405                           
  9406                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9407                           ;CC2500_B1.c: 183: unsigned char temp;
  9408                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9409                           
  9410                           ;incstack = 0
  9411                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9412  1F5E  0020               	movlb	0	; select bank0
  9413  1F5F  01A7               	clrf	CC2500_InitPATable@loop_d
  9414  1F60                     L5:	
  9415  1F60  3008               	movlw	8
  9416  1F61  0227               	subwf	CC2500_InitPATable@loop_d,w
  9417  1F62  1803               	btfsc	3,0
  9418  1F63  0008               	return
  9419                           
  9420                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9421  1F64  0827               	movf	CC2500_InitPATable@loop_d,w
  9422  1F65  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9423  1F66  0084               	movwf	4
  9424  1F67  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9425  1F68  1803               	skipnc
  9426  1F69  3E01               	addlw	1
  9427  1F6A  0085               	movwf	5
  9428  1F6B  0800               	movf	0,w	;code access
  9429  1F6C  00A5               	movwf	??_CC2500_InitPATable
  9430  1F6D  0825               	movf	??_CC2500_InitPATable,w
  9431  1F6E  00A6               	movwf	CC2500_InitPATable@temp
  9432                           
  9433                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9434  1F6F  0826               	movf	CC2500_InitPATable@temp,w
  9435  1F70  00A5               	movwf	??_CC2500_InitPATable
  9436  1F71  0825               	movf	??_CC2500_InitPATable,w
  9437  1F72  00A2               	movwf	CC2500_WriteREG@value
  9438  1F73  303E               	movlw	62
  9439  1F74  3190  2031  319F   	fcall	_CC2500_WriteREG
  9440  1F77  3001               	movlw	1
  9441  1F78  0020               	movlb	0	; select bank0
  9442  1F79  00A5               	movwf	??_CC2500_InitPATable
  9443  1F7A  0825               	movf	??_CC2500_InitPATable,w
  9444  1F7B  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9445  1F7C  2F60               	goto	L5
  9446  1F7D                     __end_of_CC2500_InitPATable:	
  9447                           
  9448                           	psect	text45
  9449  1031                     __ptext45:	
  9450 ;; *************** function _CC2500_WriteREG *****************
  9451 ;; Defined at:
  9452 ;;		line 258 in file "../src/CC2500_B1.c"
  9453 ;; Parameters:    Size  Location     Type
  9454 ;;  w_addr          1    wreg     unsigned char 
  9455 ;;  value           1    2[BANK0 ] unsigned char 
  9456 ;; Auto vars:     Size  Location     Type
  9457 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9458 ;; Return value:  Size  Location     Type
  9459 ;;		None               void
  9460 ;; Registers used:
  9461 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9462 ;; Tracked objects:
  9463 ;;		On entry : 0/0
  9464 ;;		On exit  : 0/0
  9465 ;;		Unchanged: 0/0
  9466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9467 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;Total ram usage:        3 bytes
  9472 ;; Hardware stack levels used:    1
  9473 ;; Hardware stack levels required when called:    6
  9474 ;; This function calls:
  9475 ;;		_CC2500_WriteByte
  9476 ;;		_RF_Timeout_Counter
  9477 ;;		_setRF_TimeoutCleared
  9478 ;; This function is called by:
  9479 ;;		_CC2500_InitSetREG
  9480 ;;		_CC2500_InitPATable
  9481 ;; This function uses a non-reentrant model
  9482 ;;
  9483                           
  9484                           
  9485                           ;psect for function _CC2500_WriteREG
  9486  1031                     _CC2500_WriteREG:	
  9487                           
  9488                           ;incstack = 0
  9489                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9490                           ;CC2500_WriteREG@w_addr stored from wreg
  9491  1031  0020               	movlb	0	; select bank0
  9492  1032  00A4               	movwf	CC2500_WriteREG@w_addr
  9493                           
  9494                           ;CC2500_B1.c: 259: RC0 = 0;
  9495  1033  100E               	bcf	14,0	;volatile
  9496                           
  9497                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9498  1034  0824               	movf	CC2500_WriteREG@w_addr,w
  9499  1035  00A3               	movwf	??_CC2500_WriteREG
  9500  1036  0823               	movf	??_CC2500_WriteREG,w
  9501  1037  0021               	movlb	1	; select bank1
  9502  1038  00D1               	movwf	_SPI0Buffer^(0+128)
  9503                           
  9504                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9505  1039  283D               	goto	l8479
  9506  103A                     l8477:	
  9507                           
  9508                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9509  103A  319D  2566  3190   	fcall	_RF_Timeout_Counter
  9510  103D                     l8479:	
  9511  103D  0020               	movlb	0	; select bank0
  9512  103E  1E8E               	btfss	14,5	;volatile
  9513  103F  2843               	goto	l8483
  9514  1040  0021               	movlb	1	; select bank1
  9515  1041  1F21               	btfss	(_RF1^(0+128)+1),6
  9516  1042  283A               	goto	l8477
  9517  1043                     l8483:	
  9518                           
  9519                           ;CC2500_B1.c: 263: };
  9520                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9521  1043  319A  22A8  3190   	fcall	_setRF_TimeoutCleared
  9522                           
  9523                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9524  1046  319E  262F  3190   	fcall	_CC2500_WriteByte
  9525                           
  9526                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9527  1049  0020               	movlb	0	; select bank0
  9528  104A  0822               	movf	CC2500_WriteREG@value,w
  9529  104B  00A3               	movwf	??_CC2500_WriteREG
  9530  104C  0823               	movf	??_CC2500_WriteREG,w
  9531  104D  0021               	movlb	1	; select bank1
  9532  104E  00D1               	movwf	_SPI0Buffer^(0+128)
  9533                           
  9534                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9535  104F  319E  262F         	fcall	_CC2500_WriteByte
  9536                           
  9537                           ;CC2500_B1.c: 269: RC0 = 1;
  9538  1051  0020               	movlb	0	; select bank0
  9539  1052  140E               	bsf	14,0	;volatile
  9540  1053  0008               	return
  9541  1054                     __end_of_CC2500_WriteREG:	
  9542                           
  9543                           	psect	text46
  9544  1BCF                     __ptext46:	
  9545 ;; *************** function _CC2500_FrequencyCabr *****************
  9546 ;; Defined at:
  9547 ;;		line 208 in file "../src/CC2500_B1.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;		None
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;		None
  9552 ;; Return value:  Size  Location     Type
  9553 ;;		None               void
  9554 ;; Registers used:
  9555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;Total ram usage:        0 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    7
  9568 ;; This function calls:
  9569 ;;		_CC2500_WriteCommand
  9570 ;;		_DelayTime_1us
  9571 ;; This function is called by:
  9572 ;;		_CC2500_PowerOnInitial
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           
  9577                           ;psect for function _CC2500_FrequencyCabr
  9578  1BCF                     _CC2500_FrequencyCabr:	
  9579                           
  9580                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9581                           
  9582                           ;incstack = 0
  9583                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9584  1BCF  3033               	movlw	51
  9585  1BD0  319E  267C  319B   	fcall	_CC2500_WriteCommand
  9586                           
  9587                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9588  1BD3  30E8               	movlw	232
  9589  1BD4  0020               	movlb	0	; select bank0
  9590  1BD5  00A0               	movwf	DelayTime_1us@count
  9591  1BD6  3003               	movlw	3
  9592  1BD7  00A1               	movwf	DelayTime_1us@count+1
  9593  1BD8  3190  2079         	fcall	_DelayTime_1us
  9594  1BDA  0008               	return
  9595  1BDB                     __end_of_CC2500_FrequencyCabr:	
  9596                           
  9597                           	psect	text47
  9598  1079                     __ptext47:	
  9599 ;; *************** function _DelayTime_1us *****************
  9600 ;; Defined at:
  9601 ;;		line 327 in file "../src/CC2500_B1.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;  count           2    0[BANK0 ] int 
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;  j               2    4[BANK0 ] unsigned int 
  9606 ;;  i               2    2[BANK0 ] unsigned int 
  9607 ;; Return value:  Size  Location     Type
  9608 ;;		None               void
  9609 ;; Registers used:
  9610 ;;		wreg, status,2
  9611 ;; Tracked objects:
  9612 ;;		On entry : 0/0
  9613 ;;		On exit  : 0/0
  9614 ;;		Unchanged: 0/0
  9615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9616 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9617 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9620 ;;Total ram usage:        6 bytes
  9621 ;; Hardware stack levels used:    1
  9622 ;; Hardware stack levels required when called:    5
  9623 ;; This function calls:
  9624 ;;		Nothing
  9625 ;; This function is called by:
  9626 ;;		_CC2500_PowerRST
  9627 ;;		_CC2500_FrequencyCabr
  9628 ;; This function uses a non-reentrant model
  9629 ;;
  9630                           
  9631                           
  9632                           ;psect for function _DelayTime_1us
  9633  1079                     _DelayTime_1us:	
  9634                           
  9635                           ;CC2500_B1.c: 328: unsigned int i, j;
  9636                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9637                           
  9638                           ;incstack = 0
  9639                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9640  1079  3001               	movlw	1
  9641  107A  0020               	movlb	0	; select bank0
  9642  107B  00A2               	movwf	DelayTime_1us@i
  9643  107C  3000               	movlw	0
  9644  107D  00A3               	movwf	DelayTime_1us@i+1
  9645  107E                     l347:	
  9646  107E  0821               	movf	DelayTime_1us@count+1,w
  9647  107F  0223               	subwf	DelayTime_1us@i+1,w
  9648  1080  1D03               	skipz
  9649  1081  2884               	goto	u5425
  9650  1082  0820               	movf	DelayTime_1us@count,w
  9651  1083  0222               	subwf	DelayTime_1us@i,w
  9652  1084                     u5425:	
  9653  1084  1803               	btfsc	3,0
  9654  1085  0008               	return
  9655                           
  9656                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9657  1086  01A4               	clrf	DelayTime_1us@j
  9658  1087  01A5               	clrf	DelayTime_1us@j+1
  9659  1088  3000               	movlw	0
  9660  1089  0225               	subwf	DelayTime_1us@j+1,w
  9661  108A  3002               	movlw	2
  9662  108B  1903               	skipnz
  9663  108C  0224               	subwf	DelayTime_1us@j,w
  9664  108D  1803               	btfsc	3,0
  9665  108E  289A               	goto	l6333
  9666  108F                     l6331:	
  9667  108F  3001               	movlw	1
  9668  1090  07A4               	addwf	DelayTime_1us@j,f
  9669  1091  3000               	movlw	0
  9670  1092  3DA5               	addwfc	DelayTime_1us@j+1,f
  9671  1093  3000               	movlw	0
  9672  1094  0225               	subwf	DelayTime_1us@j+1,w
  9673  1095  3002               	movlw	2
  9674  1096  1903               	skipnz
  9675  1097  0224               	subwf	DelayTime_1us@j,w
  9676  1098  1C03               	skipc
  9677  1099  288F               	goto	l6331
  9678  109A                     l6333:	
  9679  109A  3001               	movlw	1
  9680  109B  07A2               	addwf	DelayTime_1us@i,f
  9681  109C  3000               	movlw	0
  9682  109D  3DA3               	addwfc	DelayTime_1us@i+1,f
  9683  109E  287E               	goto	l347
  9684  109F                     __end_of_DelayTime_1us:	
  9685                           
  9686                           	psect	text48
  9687  1AB0                     __ptext48:	
  9688 ;; *************** function _CC2500_ClearTXFIFO *****************
  9689 ;; Defined at:
  9690 ;;		line 194 in file "../src/CC2500_B1.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;		None
  9693 ;; Auto vars:     Size  Location     Type
  9694 ;;		None
  9695 ;; Return value:  Size  Location     Type
  9696 ;;		None               void
  9697 ;; Registers used:
  9698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;Total ram usage:        0 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    7
  9711 ;; This function calls:
  9712 ;;		_CC2500_WriteCommand
  9713 ;; This function is called by:
  9714 ;;		_CC2500_PowerOnInitial
  9715 ;; This function uses a non-reentrant model
  9716 ;;
  9717                           
  9718                           
  9719                           ;psect for function _CC2500_ClearTXFIFO
  9720  1AB0                     _CC2500_ClearTXFIFO:	
  9721                           
  9722                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9723                           
  9724                           ;incstack = 0
  9725                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9726  1AB0  303B               	movlw	59
  9727  1AB1  319E  267C         	fcall	_CC2500_WriteCommand
  9728  1AB3  0008               	return
  9729  1AB4                     __end_of_CC2500_ClearTXFIFO:	
  9730                           
  9731                           	psect	text49
  9732  1AAC                     __ptext49:	
  9733 ;; *************** function _CC2500_ClearRXFIFO *****************
  9734 ;; Defined at:
  9735 ;;		line 201 in file "../src/CC2500_B1.c"
  9736 ;; Parameters:    Size  Location     Type
  9737 ;;		None
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;		None
  9740 ;; Return value:  Size  Location     Type
  9741 ;;		None               void
  9742 ;; Registers used:
  9743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9744 ;; Tracked objects:
  9745 ;;		On entry : 0/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;Total ram usage:        0 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; Hardware stack levels required when called:    7
  9756 ;; This function calls:
  9757 ;;		_CC2500_WriteCommand
  9758 ;; This function is called by:
  9759 ;;		_CC2500_PowerOnInitial
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _CC2500_ClearRXFIFO
  9765  1AAC                     _CC2500_ClearRXFIFO:	
  9766                           
  9767                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9768                           
  9769                           ;incstack = 0
  9770                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9771  1AAC  303A               	movlw	58
  9772  1AAD  319E  267C         	fcall	_CC2500_WriteCommand
  9773  1AAF  0008               	return
  9774  1AB0                     __end_of_CC2500_ClearRXFIFO:	
  9775                           
  9776                           	psect	text50
  9777  1E7C                     __ptext50:	
  9778 ;; *************** function _CC2500_WriteCommand *****************
  9779 ;; Defined at:
  9780 ;;		line 292 in file "../src/CC2500_B1.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;  command         1    wreg     unsigned char 
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;  command         1    3[BANK0 ] unsigned char 
  9785 ;; Return value:  Size  Location     Type
  9786 ;;		None               void
  9787 ;; Registers used:
  9788 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9789 ;; Tracked objects:
  9790 ;;		On entry : 0/0
  9791 ;;		On exit  : 0/0
  9792 ;;		Unchanged: 0/0
  9793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9798 ;;Total ram usage:        2 bytes
  9799 ;; Hardware stack levels used:    1
  9800 ;; Hardware stack levels required when called:    6
  9801 ;; This function calls:
  9802 ;;		_CC2500_WriteByte
  9803 ;;		_RF_Timeout_Counter
  9804 ;;		_setRF_TimeoutCleared
  9805 ;; This function is called by:
  9806 ;;		_CC2500_TxData
  9807 ;;		_CC2500_RxData
  9808 ;;		_CC2500_ClearTXFIFO
  9809 ;;		_CC2500_ClearRXFIFO
  9810 ;;		_CC2500_FrequencyCabr
  9811 ;;		_CC2500_SIDLEMode
  9812 ;;		_setRF_Main
  9813 ;;		_RF_RxDisable
  9814 ;; This function uses a non-reentrant model
  9815 ;;
  9816                           
  9817                           
  9818                           ;psect for function _CC2500_WriteCommand
  9819  1E7C                     _CC2500_WriteCommand:	
  9820                           
  9821                           ;incstack = 0
  9822                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9823                           ;CC2500_WriteCommand@command stored from wreg
  9824  1E7C  0020               	movlb	0	; select bank0
  9825  1E7D  00A3               	movwf	CC2500_WriteCommand@command
  9826                           
  9827                           ;CC2500_B1.c: 293: RC0 = 0;
  9828  1E7E  100E               	bcf	14,0	;volatile
  9829                           
  9830                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9831  1E7F  0823               	movf	CC2500_WriteCommand@command,w
  9832  1E80  00A2               	movwf	??_CC2500_WriteCommand
  9833  1E81  0822               	movf	??_CC2500_WriteCommand,w
  9834  1E82  0021               	movlb	1	; select bank1
  9835  1E83  00D1               	movwf	_SPI0Buffer^(0+128)
  9836                           
  9837                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9838  1E84  2E88               	goto	l8445
  9839  1E85                     l8443:	
  9840                           
  9841                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9842  1E85  319D  2566  319E   	fcall	_RF_Timeout_Counter
  9843  1E88                     l8445:	
  9844  1E88  0020               	movlb	0	; select bank0
  9845  1E89  1E8E               	btfss	14,5	;volatile
  9846  1E8A  2E8E               	goto	l8449
  9847  1E8B  0021               	movlb	1	; select bank1
  9848  1E8C  1F21               	btfss	(_RF1^(0+128)+1),6
  9849  1E8D  2E85               	goto	l8443
  9850  1E8E                     l8449:	
  9851                           
  9852                           ;CC2500_B1.c: 298: };
  9853                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9854  1E8E  319A  22A8  319E   	fcall	_setRF_TimeoutCleared
  9855                           
  9856                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9857  1E91  319E  262F         	fcall	_CC2500_WriteByte
  9858                           
  9859                           ;CC2500_B1.c: 302: RC0 = 1;
  9860  1E93  0020               	movlb	0	; select bank0
  9861  1E94  140E               	bsf	14,0	;volatile
  9862  1E95  0008               	return
  9863  1E96                     __end_of_CC2500_WriteCommand:	
  9864                           
  9865                           	psect	text51
  9866  1AA8                     __ptext51:	
  9867 ;; *************** function _setRF_TimeoutCleared *****************
  9868 ;; Defined at:
  9869 ;;		line 149 in file "../src/RF_Control_B1.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;		None
  9872 ;; Auto vars:     Size  Location     Type
  9873 ;;		None
  9874 ;; Return value:  Size  Location     Type
  9875 ;;		None               void
  9876 ;; Registers used:
  9877 ;;		status,2
  9878 ;; Tracked objects:
  9879 ;;		On entry : 0/0
  9880 ;;		On exit  : 0/0
  9881 ;;		Unchanged: 0/0
  9882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;Total ram usage:        0 bytes
  9888 ;; Hardware stack levels used:    1
  9889 ;; Hardware stack levels required when called:    5
  9890 ;; This function calls:
  9891 ;;		Nothing
  9892 ;; This function is called by:
  9893 ;;		_CC2500_TxData
  9894 ;;		_CC2500_RxData
  9895 ;;		_CC2500_PowerRST
  9896 ;;		_CC2500_WriteREG
  9897 ;;		_CC2500_WriteCommand
  9898 ;;		_CC2500_ReadStatus
  9899 ;;		_CC2500_ReadREG
  9900 ;; This function uses a non-reentrant model
  9901 ;;
  9902                           
  9903                           
  9904                           ;psect for function _setRF_TimeoutCleared
  9905  1AA8                     _setRF_TimeoutCleared:	
  9906                           
  9907                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9908                           
  9909                           ;incstack = 0
  9910                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9911  1AA8  0021               	movlb	1	; select bank1
  9912  1AA9  01AD               	clrf	(_RF1^(0+128)+13)
  9913  1AAA  01AE               	clrf	((_RF1+1)^(0+128)+13)
  9914  1AAB  0008               	return
  9915  1AAC                     __end_of_setRF_TimeoutCleared:	
  9916                           
  9917                           	psect	text52
  9918  1D66                     __ptext52:	
  9919 ;; *************** function _RF_Timeout_Counter *****************
  9920 ;; Defined at:
  9921 ;;		line 141 in file "../src/RF_Control_B1.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;		None
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;		None
  9926 ;; Return value:  Size  Location     Type
  9927 ;;		None               void
  9928 ;; Registers used:
  9929 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;Total ram usage:        0 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    5
  9942 ;; This function calls:
  9943 ;;		Nothing
  9944 ;; This function is called by:
  9945 ;;		_CC2500_TxData
  9946 ;;		_CC2500_RxData
  9947 ;;		_CC2500_PowerRST
  9948 ;;		_CC2500_WriteREG
  9949 ;;		_CC2500_WriteCommand
  9950 ;;		_CC2500_ReadStatus
  9951 ;;		_CC2500_ReadREG
  9952 ;; This function uses a non-reentrant model
  9953 ;;
  9954                           
  9955                           
  9956                           ;psect for function _RF_Timeout_Counter
  9957  1D66                     _RF_Timeout_Counter:	
  9958                           
  9959                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9960                           
  9961                           ;incstack = 0
  9962                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9963  1D66  3001               	movlw	1
  9964  1D67  0021               	movlb	1	; select bank1
  9965  1D68  07AD               	addwf	(_RF1^(0+128)+13),f
  9966  1D69  3000               	movlw	0
  9967  1D6A  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
  9968                           
  9969                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9970  1D6B  300D               	movlw	13
  9971  1D6C  3EA0               	addlw	_RF1& (0+255)
  9972  1D6D  0086               	movwf	6
  9973  1D6E  0187               	clrf	7
  9974  1D6F  3F40               	moviw [0]fsr1
  9975  1D70  3AA8               	xorlw	168
  9976  1D71  1D03               	skipz
  9977  1D72  2D75               	goto	u8615
  9978  1D73  3F41               	moviw [1]fsr1
  9979  1D74  3A61               	xorlw	97
  9980  1D75                     u8615:	
  9981  1D75  1D03               	skipz
  9982  1D76  0008               	return
  9983                           
  9984                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9985  1D77  01AD               	clrf	(_RF1^(0+128)+13)
  9986  1D78  01AE               	clrf	((_RF1+1)^(0+128)+13)
  9987                           
  9988                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9989  1D79  1721               	bsf	(_RF1^(0+128)+1),6
  9990  1D7A  0008               	return
  9991  1D7B                     __end_of_RF_Timeout_Counter:	
  9992                           
  9993                           	psect	text53
  9994  1E2F                     __ptext53:	
  9995 ;; *************** function _CC2500_WriteByte *****************
  9996 ;; Defined at:
  9997 ;;		line 226 in file "../src/CC2500_B1.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;		None
 10000 ;; Auto vars:     Size  Location     Type
 10001 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10002 ;; Return value:  Size  Location     Type
 10003 ;;		None               void
 10004 ;; Registers used:
 10005 ;;		wreg, status,2, status,0
 10006 ;; Tracked objects:
 10007 ;;		On entry : 0/0
 10008 ;;		On exit  : 0/0
 10009 ;;		Unchanged: 0/0
 10010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;Total ram usage:        2 bytes
 10016 ;; Hardware stack levels used:    1
 10017 ;; Hardware stack levels required when called:    5
 10018 ;; This function calls:
 10019 ;;		Nothing
 10020 ;; This function is called by:
 10021 ;;		_CC2500_TxData
 10022 ;;		_CC2500_RxData
 10023 ;;		_CC2500_PowerRST
 10024 ;;		_CC2500_WriteREG
 10025 ;;		_CC2500_WriteCommand
 10026 ;;		_CC2500_ReadStatus
 10027 ;;		_CC2500_ReadREG
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           
 10032                           ;psect for function _CC2500_WriteByte
 10033  1E2F                     _CC2500_WriteByte:	
 10034                           
 10035                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10036                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10037                           
 10038                           ;incstack = 0
 10039                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10040  1E2F  0020               	movlb	0	; select bank0
 10041  1E30  01A1               	clrf	CC2500_WriteByte@loop_a
 10042  1E31                     L6:	
 10043  1E31  3008               	movlw	8
 10044  1E32  0221               	subwf	CC2500_WriteByte@loop_a,w
 10045  1E33  1803               	btfsc	3,0
 10046  1E34  0008               	return
 10047                           
 10048                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10049  1E35  0021               	movlb	1	; select bank1
 10050  1E36  1FD1               	btfss	_SPI0Buffer^(0+128),7
 10051  1E37  2E3B               	goto	l303
 10052                           
 10053                           ;CC2500_B1.c: 230: RC4 = 1;
 10054  1E38  0020               	movlb	0	; select bank0
 10055  1E39  160E               	bsf	14,4	;volatile
 10056  1E3A  2E3D               	goto	l304
 10057  1E3B                     l303:	
 10058                           
 10059                           ;CC2500_B1.c: 231: else
 10060                           ;CC2500_B1.c: 232: RC4 = 0;
 10061  1E3B  0020               	movlb	0	; select bank0
 10062  1E3C  120E               	bcf	14,4	;volatile
 10063  1E3D                     l304:	
 10064                           
 10065                           ;CC2500_B1.c: 233: RC3 = 1;
 10066  1E3D  158E               	bsf	14,3	;volatile
 10067                           
 10068                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10069  1E3E  1003               	clrc
 10070  1E3F  0021               	movlb	1	; select bank1
 10071  1E40  0DD1               	rlf	_SPI0Buffer^(0+128),f
 10072                           
 10073                           ;CC2500_B1.c: 235: RC3 = 0;
 10074  1E41  0020               	movlb	0	; select bank0
 10075  1E42  118E               	bcf	14,3	;volatile
 10076  1E43  3001               	movlw	1
 10077  1E44  00A0               	movwf	??_CC2500_WriteByte
 10078  1E45  0820               	movf	??_CC2500_WriteByte,w
 10079  1E46  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10080  1E47  2E31               	goto	L6
 10081  1E48                     __end_of_CC2500_WriteByte:	
 10082                           
 10083                           	psect	text54
 10084  1A8B                     __ptext54:	
 10085 ;; *************** function _RF_Initialization *****************
 10086 ;; Defined at:
 10087 ;;		line 9 in file "../src/RF_Control_B1.c"
 10088 ;; Parameters:    Size  Location     Type
 10089 ;;		None
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;		None
 10092 ;; Return value:  Size  Location     Type
 10093 ;;		None               void
 10094 ;; Registers used:
 10095 ;;		wreg, status,2, status,0, pclath, cstack
 10096 ;; Tracked objects:
 10097 ;;		On entry : 0/0
 10098 ;;		On exit  : 0/0
 10099 ;;		Unchanged: 0/0
 10100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;Total ram usage:        0 bytes
 10106 ;; Hardware stack levels used:    1
 10107 ;; Hardware stack levels required when called:    6
 10108 ;; This function calls:
 10109 ;;		_setRF_Initialization
 10110 ;; This function is called by:
 10111 ;;		_main
 10112 ;; This function uses a non-reentrant model
 10113 ;;
 10114                           
 10115                           
 10116                           ;psect for function _RF_Initialization
 10117  1A8B                     _RF_Initialization:	
 10118                           
 10119                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10120                           
 10121                           ;incstack = 0
 10122                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10123  1A8B  319B  234C         	fcall	_setRF_Initialization
 10124  1A8D  0008               	return
 10125  1A8E                     __end_of_RF_Initialization:	
 10126                           
 10127                           	psect	text55
 10128  1B4C                     __ptext55:	
 10129 ;; *************** function _setRF_Initialization *****************
 10130 ;; Defined at:
 10131 ;;		line 17 in file "../src/RF_Control_B1.c"
 10132 ;; Parameters:    Size  Location     Type
 10133 ;;		None
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;		None
 10136 ;; Return value:  Size  Location     Type
 10137 ;;		None               void
 10138 ;; Registers used:
 10139 ;;		wreg
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;Total ram usage:        1 bytes
 10150 ;; Hardware stack levels used:    1
 10151 ;; Hardware stack levels required when called:    5
 10152 ;; This function calls:
 10153 ;;		Nothing
 10154 ;; This function is called by:
 10155 ;;		_RF_Initialization
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           
 10160                           ;psect for function _setRF_Initialization
 10161  1B4C                     _setRF_Initialization:	
 10162                           
 10163                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10164                           
 10165                           ;incstack = 0
 10166                           ; Regs used in _setRF_Initialization: [wreg]
 10167  1B4C  3015               	movlw	21
 10168  1B4D  0020               	movlb	0	; select bank0
 10169  1B4E  00A0               	movwf	??_setRF_Initialization
 10170  1B4F  0820               	movf	??_setRF_Initialization,w
 10171  1B50  0021               	movlb	1	; select bank1
 10172  1B51  00D4               	movwf	_Tx_Length^(0+128)
 10173                           
 10174                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10175  1B52  30C8               	movlw	200
 10176  1B53  00A8               	movwf	(_RF1^(0+128)+8)
 10177  1B54  3000               	movlw	0
 10178  1B55  00A9               	movwf	(_RF1^(0+128)+9)
 10179  1B56  0008               	return
 10180  1B57                     __end_of_setRF_Initialization:	
 10181                           
 10182                           	psect	text56
 10183  1CCF                     __ptext56:	
 10184 ;; *************** function _Mcu_Initialization *****************
 10185 ;; Defined at:
 10186 ;;		line 30 in file "../src/MCU_B1.c"
 10187 ;; Parameters:    Size  Location     Type
 10188 ;;		None
 10189 ;; Auto vars:     Size  Location     Type
 10190 ;;		None
 10191 ;; Return value:  Size  Location     Type
 10192 ;;		None               void
 10193 ;; Registers used:
 10194 ;;		wreg, status,2, status,0, pclath, cstack
 10195 ;; Tracked objects:
 10196 ;;		On entry : 0/0
 10197 ;;		On exit  : 0/0
 10198 ;;		Unchanged: 0/0
 10199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;Total ram usage:        0 bytes
 10205 ;; Hardware stack levels used:    1
 10206 ;; Hardware stack levels required when called:    6
 10207 ;; This function calls:
 10208 ;;		_ADC_Set
 10209 ;;		_Fosc_Set
 10210 ;;		_IOC_Set
 10211 ;;		_IO_Set
 10212 ;;		_TMR1_Set
 10213 ;;		_WDT_Set
 10214 ;; This function is called by:
 10215 ;;		_main
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219                           
 10220                           ;psect for function _Mcu_Initialization
 10221  1CCF                     _Mcu_Initialization:	
 10222                           
 10223                           ;MCU_B1.c: 32: Fosc_Set();
 10224                           
 10225                           ;incstack = 0
 10226                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10227  1CCF  319A  22A4  319C   	fcall	_Fosc_Set
 10228                           
 10229                           ;MCU_B1.c: 34: IO_Set();
 10230  1CD2  319E  2662  319C   	fcall	_IO_Set
 10231                           
 10232                           ;MCU_B1.c: 36: ;;
 10233                           ;MCU_B1.c: 38: TMR1_Set();
 10234  1CD5  319B  23B7  319C   	fcall	_TMR1_Set
 10235                           
 10236                           ;MCU_B1.c: 40: ADC_Set();
 10237  1CD8  319A  22E0  319C   	fcall	_ADC_Set
 10238                           
 10239                           ;MCU_B1.c: 42: ;;
 10240                           ;MCU_B1.c: 44: ;;
 10241                           ;MCU_B1.c: 46: IOC_Set();
 10242  1CDB  319B  2341  319C   	fcall	_IOC_Set
 10243                           
 10244                           ;MCU_B1.c: 48: ;;
 10245                           ;MCU_B1.c: 50: ;;
 10246                           ;MCU_B1.c: 52: WDT_Set();
 10247  1CDE  319B  23C3         	fcall	_WDT_Set
 10248  1CE0  0008               	return
 10249  1CE1                     __end_of_Mcu_Initialization:	
 10250                           
 10251                           	psect	text57
 10252  1BC3                     __ptext57:	
 10253 ;; *************** function _WDT_Set *****************
 10254 ;; Defined at:
 10255 ;;		line 1102 in file "../src/MCU_B1.c"
 10256 ;; Parameters:    Size  Location     Type
 10257 ;;		None
 10258 ;; Auto vars:     Size  Location     Type
 10259 ;;		None
 10260 ;; Return value:  Size  Location     Type
 10261 ;;		None               void
 10262 ;; Registers used:
 10263 ;;		wreg
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;Total ram usage:        1 bytes
 10274 ;; Hardware stack levels used:    1
 10275 ;; Hardware stack levels required when called:    5
 10276 ;; This function calls:
 10277 ;;		Nothing
 10278 ;; This function is called by:
 10279 ;;		_Mcu_Initialization
 10280 ;; This function uses a non-reentrant model
 10281 ;;
 10282                           
 10283                           
 10284                           ;psect for function _WDT_Set
 10285  1BC3                     _WDT_Set:	
 10286                           
 10287                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10288                           
 10289                           ;incstack = 0
 10290                           ; Regs used in _WDT_Set: [wreg]
 10291  1BC3  3017               	movlw	23
 10292  1BC4  0021               	movlb	1	; select bank1
 10293  1BC5  0097               	movwf	23	;volatile
 10294                           
 10295                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10296  1BC6  0022               	movlb	2	; select bank2
 10297  1BC7  1436               	bsf	_WDT^(0+256),0
 10298                           
 10299                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10300  1BC8  300A               	movlw	10
 10301  1BC9  0020               	movlb	0	; select bank0
 10302  1BCA  00A0               	movwf	??_WDT_Set
 10303  1BCB  0820               	movf	??_WDT_Set,w
 10304  1BCC  0022               	movlb	2	; select bank2
 10305  1BCD  00B7               	movwf	(_WDT^(0+256)+1)
 10306  1BCE  0008               	return
 10307  1BCF                     __end_of_WDT_Set:	
 10308                           
 10309                           	psect	text58
 10310  1BB7                     __ptext58:	
 10311 ;; *************** function _TMR1_Set *****************
 10312 ;; Defined at:
 10313 ;;		line 226 in file "../src/MCU_B1.c"
 10314 ;; Parameters:    Size  Location     Type
 10315 ;;		None
 10316 ;; Auto vars:     Size  Location     Type
 10317 ;;		None
 10318 ;; Return value:  Size  Location     Type
 10319 ;;		None               void
 10320 ;; Registers used:
 10321 ;;		wreg
 10322 ;; Tracked objects:
 10323 ;;		On entry : 0/0
 10324 ;;		On exit  : 0/0
 10325 ;;		Unchanged: 0/0
 10326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10331 ;;Total ram usage:        0 bytes
 10332 ;; Hardware stack levels used:    1
 10333 ;; Hardware stack levels required when called:    5
 10334 ;; This function calls:
 10335 ;;		Nothing
 10336 ;; This function is called by:
 10337 ;;		_Mcu_Initialization
 10338 ;; This function uses a non-reentrant model
 10339 ;;
 10340                           
 10341                           
 10342                           ;psect for function _TMR1_Set
 10343  1BB7                     _TMR1_Set:	
 10344                           
 10345                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10346                           
 10347                           ;incstack = 0
 10348                           ; Regs used in _TMR1_Set: [wreg]
 10349  1BB7  3041               	movlw	65
 10350  1BB8  0020               	movlb	0	; select bank0
 10351  1BB9  0098               	movwf	24	;volatile
 10352                           
 10353                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10354  1BBA  30FA               	movlw	250
 10355  1BBB  0097               	movwf	23	;volatile
 10356                           
 10357                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10358  1BBC  3038               	movlw	56
 10359  1BBD  0096               	movwf	22	;volatile
 10360                           
 10361                           ;MCU_B1.c: 230: TMR1IE = 1;
 10362  1BBE  0021               	movlb	1	; select bank1
 10363  1BBF  1411               	bsf	17,0	;volatile
 10364                           
 10365                           ;MCU_B1.c: 231: PEIE = 1;
 10366  1BC0  170B               	bsf	11,6	;volatile
 10367                           
 10368                           ;MCU_B1.c: 232: GIE = 1;
 10369  1BC1  178B               	bsf	11,7	;volatile
 10370  1BC2  0008               	return
 10371  1BC3                     __end_of_TMR1_Set:	
 10372                           
 10373                           	psect	text59
 10374  1E62                     __ptext59:	
 10375 ;; *************** function _IO_Set *****************
 10376 ;; Defined at:
 10377 ;;		line 60 in file "../src/MCU_B1.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;		None
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;		None
 10382 ;; Return value:  Size  Location     Type
 10383 ;;		None               void
 10384 ;; Registers used:
 10385 ;;		wreg, status,2
 10386 ;; Tracked objects:
 10387 ;;		On entry : 0/0
 10388 ;;		On exit  : 0/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;Total ram usage:        0 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; Hardware stack levels required when called:    5
 10398 ;; This function calls:
 10399 ;;		Nothing
 10400 ;; This function is called by:
 10401 ;;		_Mcu_Initialization
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           
 10406                           ;psect for function _IO_Set
 10407  1E62                     _IO_Set:	
 10408                           
 10409                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10410                           
 10411                           ;incstack = 0
 10412                           ; Regs used in _IO_Set: [wreg+status,2]
 10413  1E62  30F7               	movlw	247
 10414  1E63  0021               	movlb	1	; select bank1
 10415  1E64  008C               	movwf	12	;volatile
 10416                           
 10417                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10418  1E65  3004               	movlw	4
 10419  1E66  008D               	movwf	13	;volatile
 10420                           
 10421                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10422  1E67  3026               	movlw	38
 10423  1E68  008E               	movwf	14	;volatile
 10424                           
 10425                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10426  1E69  0022               	movlb	2	; select bank2
 10427  1E6A  018C               	clrf	12	;volatile
 10428                           
 10429                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10430  1E6B  018D               	clrf	13	;volatile
 10431                           
 10432                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10433  1E6C  018E               	clrf	14	;volatile
 10434                           
 10435                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10436  1E6D  300E               	movlw	14
 10437  1E6E  0023               	movlb	3	; select bank3
 10438  1E6F  008C               	movwf	12	;volatile
 10439                           
 10440                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10441  1E70  018D               	clrf	13	;volatile
 10442                           
 10443                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10444  1E71  018E               	clrf	14	;volatile
 10445                           
 10446                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10447  1E72  30F7               	movlw	247
 10448  1E73  0020               	movlb	0	; select bank0
 10449  1E74  008C               	movwf	12	;volatile
 10450                           
 10451                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10452  1E75  3004               	movlw	4
 10453  1E76  008D               	movwf	13	;volatile
 10454                           
 10455                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10456  1E77  3026               	movlw	38
 10457  1E78  008E               	movwf	14	;volatile
 10458                           
 10459                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10460  1E79  0024               	movlb	4	; select bank4
 10461  1E7A  018D               	clrf	13	;volatile
 10462  1E7B  0008               	return
 10463  1E7C                     __end_of_IO_Set:	
 10464                           
 10465                           	psect	text60
 10466  1B41                     __ptext60:	
 10467 ;; *************** function _IOC_Set *****************
 10468 ;; Defined at:
 10469 ;;		line 380 in file "../src/MCU_B1.c"
 10470 ;; Parameters:    Size  Location     Type
 10471 ;;		None
 10472 ;; Auto vars:     Size  Location     Type
 10473 ;;		None
 10474 ;; Return value:  Size  Location     Type
 10475 ;;		None               void
 10476 ;; Registers used:
 10477 ;;		wreg, status,2
 10478 ;; Tracked objects:
 10479 ;;		On entry : 0/0
 10480 ;;		On exit  : 0/0
 10481 ;;		Unchanged: 0/0
 10482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10487 ;;Total ram usage:        0 bytes
 10488 ;; Hardware stack levels used:    1
 10489 ;; Hardware stack levels required when called:    5
 10490 ;; This function calls:
 10491 ;;		Nothing
 10492 ;; This function is called by:
 10493 ;;		_Mcu_Initialization
 10494 ;; This function uses a non-reentrant model
 10495 ;;
 10496                           
 10497                           
 10498                           ;psect for function _IOC_Set
 10499  1B41                     _IOC_Set:	
 10500                           
 10501                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10502                           
 10503                           ;incstack = 0
 10504                           ; Regs used in _IOC_Set: [wreg+status,2]
 10505  1B41  3004               	movlw	4
 10506  1B42  0027               	movlb	7	; select bank7
 10507  1B43  0094               	movwf	20	;volatile
 10508                           
 10509                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10510  1B44  3004               	movlw	4
 10511  1B45  0095               	movwf	21	;volatile
 10512                           
 10513                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10514  1B46  0196               	clrf	22	;volatile
 10515                           
 10516                           ;MCU_B1.c: 387: IOCIE = 1;
 10517  1B47  158B               	bsf	11,3	;volatile
 10518                           
 10519                           ;MCU_B1.c: 388: IOCIF = 0;
 10520  1B48  100B               	bcf	11,0	;volatile
 10521                           
 10522                           ;MCU_B1.c: 389: PEIE = 1;
 10523  1B49  170B               	bsf	11,6	;volatile
 10524                           
 10525                           ;MCU_B1.c: 390: GIE = 1;
 10526  1B4A  178B               	bsf	11,7	;volatile
 10527  1B4B  0008               	return
 10528  1B4C                     __end_of_IOC_Set:	
 10529                           
 10530                           	psect	text61
 10531  1AA4                     __ptext61:	
 10532 ;; *************** function _Fosc_Set *****************
 10533 ;; Defined at:
 10534 ;;		line 56 in file "../src/MCU_B1.c"
 10535 ;; Parameters:    Size  Location     Type
 10536 ;;		None
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;		None
 10539 ;; Return value:  Size  Location     Type
 10540 ;;		None               void
 10541 ;; Registers used:
 10542 ;;		wreg
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;Total ram usage:        0 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    5
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_Mcu_Initialization
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           
 10563                           ;psect for function _Fosc_Set
 10564  1AA4                     _Fosc_Set:	
 10565                           
 10566                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10567                           
 10568                           ;incstack = 0
 10569                           ; Regs used in _Fosc_Set: [wreg]
 10570  1AA4  3078               	movlw	120
 10571  1AA5  0021               	movlb	1	; select bank1
 10572  1AA6  0099               	movwf	25	;volatile
 10573  1AA7  0008               	return
 10574  1AA8                     __end_of_Fosc_Set:	
 10575                           
 10576                           	psect	text62
 10577  1AE0                     __ptext62:	
 10578 ;; *************** function _ADC_Set *****************
 10579 ;; Defined at:
 10580 ;;		line 427 in file "../src/MCU_B1.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;		None
 10583 ;; Auto vars:     Size  Location     Type
 10584 ;;		None
 10585 ;; Return value:  Size  Location     Type
 10586 ;;		None               void
 10587 ;; Registers used:
 10588 ;;		wreg
 10589 ;; Tracked objects:
 10590 ;;		On entry : 0/0
 10591 ;;		On exit  : 0/0
 10592 ;;		Unchanged: 0/0
 10593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;Total ram usage:        0 bytes
 10599 ;; Hardware stack levels used:    1
 10600 ;; Hardware stack levels required when called:    5
 10601 ;; This function calls:
 10602 ;;		Nothing
 10603 ;; This function is called by:
 10604 ;;		_Mcu_Initialization
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           
 10609                           ;psect for function _ADC_Set
 10610  1AE0                     _ADC_Set:	
 10611                           
 10612                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10613                           
 10614                           ;incstack = 0
 10615                           ; Regs used in _ADC_Set: [wreg]
 10616  1AE0  30F3               	movlw	243
 10617  1AE1  0021               	movlb	1	; select bank1
 10618  1AE2  009E               	movwf	30	;volatile
 10619                           
 10620                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10621  1AE3  30C1               	movlw	193
 10622  1AE4  0022               	movlb	2	; select bank2
 10623  1AE5  0097               	movwf	23	;volatile
 10624  1AE6  0008               	return
 10625  1AE7                     __end_of_ADC_Set:	
 10626                           
 10627                           	psect	text63
 10628  0053                     __ptext63:	
 10629 ;; *************** function _Load_Main *****************
 10630 ;; Defined at:
 10631 ;;		line 40 in file "../src/OverLoad_B1.c"
 10632 ;; Parameters:    Size  Location     Type
 10633 ;;		None
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;  i               2   16[BANK0 ] int 
 10636 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10637 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10638 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10639 ;;  error           1   12[BANK0 ] unsigned char 
 10640 ;; Return value:  Size  Location     Type
 10641 ;;		None               void
 10642 ;; Registers used:
 10643 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10650 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;Total ram usage:       10 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:    6
 10656 ;; This function calls:
 10657 ;;		___lwdiv
 10658 ;;		___wmul
 10659 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10660 ;;		_getDimmer_LoadGO
 10661 ;;		_getDimmer_Load_Status
 10662 ;;		_getMain_All_Error_Status
 10663 ;;		_getMain_All_LightsStatus
 10664 ;;		_getMain_Lights_Count
 10665 ;;		_setLoad_AH_AL_Restore
 10666 ;; This function is called by:
 10667 ;;		_main
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           
 10672                           ;psect for function _Load_Main
 10673  0053                     _Load_Main:	
 10674                           
 10675                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10676                           
 10677                           ;incstack = 0
 10678                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10679  0053  3000               	movlw	0
 10680  0054  3190  20F8  3180   	fcall	_getMain_All_Error_Status
 10681  0057  0020               	movlb	0	; select bank0
 10682  0058  00A8               	movwf	??_Load_Main
 10683  0059  0828               	movf	??_Load_Main,w
 10684  005A  00AC               	movwf	Load_Main@error
 10685                           
 10686                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10687  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10688  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10689  005D  01AF               	clrf	Load_Main@LightsCount
 10690                           
 10691                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10692  005E  0022               	movlb	2	; select bank2
 10693  005F  1C38               	btfss	_Load^(0+256),0
 10694  0060  29FF               	goto	l1612
 10695                           
 10696                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10697  0061  319B  2321  3180   	fcall	_getMain_All_LightsStatus
 10698  0064  3800               	iorlw	0
 10699  0065  1D03               	skipz
 10700  0066  2869               	goto	l8031
 10701                           
 10702                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10703  0067  0022               	movlb	2	; select bank2
 10704  0068  288A               	goto	l8049
 10705  0069                     l8031:	
 10706                           ;OverLoad_B1.c: 47: } else {
 10707                           
 10708                           
 10709                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10710  0069  0020               	movlb	0	; select bank0
 10711  006A  08AC               	movf	Load_Main@error,f
 10712  006B  1D03               	skipz
 10713  006C  2887               	goto	l1615
 10714  006D  319D  2519  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10715  0070  3800               	iorlw	0
 10716  0071  1D03               	skipz
 10717  0072  2887               	goto	l1615
 10718                           
 10719                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10720  0073  0022               	movlb	2	; select bank2
 10721  0074  14B8               	bsf	_Load^(0+256),1
 10722                           
 10723                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10724  0075  319A  22F6  3180   	fcall	_getDimmer_LoadGO
 10725  0078  3A01               	xorlw	1
 10726  0079  1D03               	skipz
 10727  007A  2882               	goto	l1616
 10728                           
 10729                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10730  007B  0022               	movlb	2	; select bank2
 10731  007C  1DB8               	btfss	_Load^(0+256),3
 10732  007D  1BB8               	btfsc	_Load^(0+256),7
 10733  007E  288B               	goto	l1614
 10734                           
 10735                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10736  007F  15B8               	bsf	_Load^(0+256),3
 10737                           
 10738                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10739  0080  01DD               	clrf	(_Load^(0+256)+37)
 10740                           
 10741                           ;OverLoad_B1.c: 57: }
 10742                           ;OverLoad_B1.c: 58: } else {
 10743  0081  288B               	goto	l1614
 10744  0082                     l1616:	
 10745                           
 10746                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10747  0082  0022               	movlb	2	; select bank2
 10748  0083  1FB8               	btfss	_Load^(0+256),7
 10749  0084  288B               	goto	l1614
 10750                           
 10751                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10752  0085  13B8               	bcf	_Load^(0+256),7
 10753                           
 10754                           ;OverLoad_B1.c: 61: }
 10755                           ;OverLoad_B1.c: 62: }
 10756                           ;OverLoad_B1.c: 63: } else {
 10757  0086  288B               	goto	l1614
 10758  0087                     l1615:	
 10759                           
 10760                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10761  0087  0022               	movlb	2	; select bank2
 10762  0088  1CB8               	btfss	_Load^(0+256),1
 10763  0089  288B               	goto	l1614
 10764  008A                     l8049:	
 10765                           
 10766                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10767  008A  10B8               	bcf	_Load^(0+256),1
 10768  008B                     l1614:	
 10769                           
 10770                           ;OverLoad_B1.c: 66: }
 10771                           ;OverLoad_B1.c: 67: }
 10772                           ;OverLoad_B1.c: 89: }
 10773                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10774  008B  1CB8               	btfss	_Load^(0+256),1
 10775  008C  29DB               	goto	l1622
 10776                           
 10777                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10778  008D  1538               	bsf	_Load^(0+256),2
 10779                           
 10780                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10781  008E  1E38               	btfss	_Load^(0+256),4
 10782  008F  29D9               	goto	l1623
 10783                           
 10784                           ;OverLoad_B1.c: 96: Load.Time++;
 10785  0090  3001               	movlw	1
 10786  0091  07B9               	addwf	(_Load^(0+256)+1),f
 10787  0092  3000               	movlw	0
 10788  0093  3DBA               	addwfc	((_Load+1)^(0+256)+1),f
 10789                           
 10790                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10791  0094  3000               	movlw	0
 10792  0095  023A               	subwf	((_Load+1)^(0+256)+1),w
 10793  0096  3002               	movlw	2
 10794  0097  1903               	skipnz
 10795  0098  0239               	subwf	(_Load^(0+256)+1),w
 10796  0099  1C03               	skipc
 10797  009A  0008               	return
 10798                           
 10799                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10800  009B  01B9               	clrf	(_Load^(0+256)+1)
 10801  009C  01BA               	clrf	((_Load+1)^(0+256)+1)
 10802                           
 10803                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10804  009D  1238               	bcf	_Load^(0+256),4
 10805                           
 10806                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10807  009E  3001               	movlw	1
 10808  009F  0020               	movlb	0	; select bank0
 10809  00A0  00B0               	movwf	Load_Main@i
 10810  00A1  3000               	movlw	0
 10811  00A2  00B1               	movwf	Load_Main@i+1
 10812  00A3  0831               	movf	Load_Main@i+1,w
 10813  00A4  3A80               	xorlw	128
 10814  00A5  00A8               	movwf	??_Load_Main
 10815  00A6  3080               	movlw	128
 10816  00A7  0228               	subwf	??_Load_Main,w
 10817  00A8  1D03               	skipz
 10818  00A9  28AC               	goto	u8155
 10819  00AA  3004               	movlw	4
 10820  00AB  0230               	subwf	Load_Main@i,w
 10821  00AC                     u8155:	
 10822  00AC  1803               	btfsc	3,0
 10823  00AD  28E0               	goto	l8071
 10824  00AE                     l8065:	
 10825                           
 10826                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10827  00AE  0020               	movlb	0	; select bank0
 10828  00AF  3530               	lslf	Load_Main@i,w
 10829  00B0  3E43               	addlw	(_Load+11)& (0+255)
 10830  00B1  0086               	movwf	6
 10831  00B2  3001               	movlw	1	; select bank2/3
 10832  00B3  0087               	movwf	7
 10833  00B4  3F40               	moviw [0]fsr1
 10834  00B5  00A8               	movwf	??_Load_Main
 10835  00B6  3F41               	moviw [1]fsr1
 10836  00B7  00A9               	movwf	??_Load_Main+1
 10837  00B8  0828               	movf	??_Load_Main,w
 10838  00B9  0022               	movlb	2	; select bank2
 10839  00BA  07BD               	addwf	(_Load^(0+256)+5),f
 10840  00BB  0020               	movlb	0	; select bank0
 10841  00BC  0829               	movf	??_Load_Main+1,w
 10842  00BD  0022               	movlb	2	; select bank2
 10843  00BE  3DBE               	addwfc	((_Load+1)^(0+256)+5),f
 10844                           
 10845                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 10846  00BF  0020               	movlb	0	; select bank0
 10847  00C0  3530               	lslf	Load_Main@i,w
 10848  00C1  3E4D               	addlw	(_Load+21)& (0+255)
 10849  00C2  0086               	movwf	6
 10850  00C3  3001               	movlw	1	; select bank2/3
 10851  00C4  0087               	movwf	7
 10852  00C5  3F40               	moviw [0]fsr1
 10853  00C6  00A8               	movwf	??_Load_Main
 10854  00C7  3F41               	moviw [1]fsr1
 10855  00C8  00A9               	movwf	??_Load_Main+1
 10856  00C9  0828               	movf	??_Load_Main,w
 10857  00CA  0022               	movlb	2	; select bank2
 10858  00CB  07BF               	addwf	(_Load^(0+256)+7),f
 10859  00CC  0020               	movlb	0	; select bank0
 10860  00CD  0829               	movf	??_Load_Main+1,w
 10861  00CE  0022               	movlb	2	; select bank2
 10862  00CF  3DC0               	addwfc	((_Load+1)^(0+256)+7),f
 10863  00D0  3001               	movlw	1
 10864  00D1  0020               	movlb	0	; select bank0
 10865  00D2  07B0               	addwf	Load_Main@i,f
 10866  00D3  3000               	movlw	0
 10867  00D4  3DB1               	addwfc	Load_Main@i+1,f
 10868  00D5  0831               	movf	Load_Main@i+1,w
 10869  00D6  3A80               	xorlw	128
 10870  00D7  00A8               	movwf	??_Load_Main
 10871  00D8  3080               	movlw	128
 10872  00D9  0228               	subwf	??_Load_Main,w
 10873  00DA  1D03               	skipz
 10874  00DB  28DE               	goto	u8165
 10875  00DC  3004               	movlw	4
 10876  00DD  0230               	subwf	Load_Main@i,w
 10877  00DE                     u8165:	
 10878  00DE  1C03               	skipc
 10879  00DF  28AE               	goto	l8065
 10880  00E0                     l8071:	
 10881                           
 10882                           ;OverLoad_B1.c: 104: }
 10883                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 10884  00E0  3003               	movlw	3
 10885  00E1  0020               	movlb	0	; select bank0
 10886  00E2  00A0               	movwf	___lwdiv@divisor
 10887  00E3  3000               	movlw	0
 10888  00E4  00A1               	movwf	___lwdiv@divisor+1
 10889  00E5  0022               	movlb	2	; select bank2
 10890  00E6  083E               	movf	((_Load+1)^(0+256)+5),w
 10891  00E7  0020               	movlb	0	; select bank0
 10892  00E8  01A3               	clrf	___lwdiv@dividend+1
 10893  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 10894  00EA  0022               	movlb	2	; select bank2
 10895  00EB  083D               	movf	(_Load^(0+256)+5),w
 10896  00EC  0020               	movlb	0	; select bank0
 10897  00ED  01A2               	clrf	___lwdiv@dividend
 10898  00EE  07A2               	addwf	___lwdiv@dividend,f
 10899  00EF  3191  21FE  3180   	fcall	___lwdiv
 10900  00F2  0020               	movlb	0	; select bank0
 10901  00F3  0821               	movf	?___lwdiv+1,w
 10902  00F4  0022               	movlb	2	; select bank2
 10903  00F5  01BE               	clrf	((_Load+1)^(0+256)+5)
 10904  00F6  07BE               	addwf	((_Load+1)^(0+256)+5),f
 10905  00F7  0020               	movlb	0	; select bank0
 10906  00F8  0820               	movf	?___lwdiv,w
 10907  00F9  0022               	movlb	2	; select bank2
 10908  00FA  01BD               	clrf	(_Load^(0+256)+5)
 10909  00FB  07BD               	addwf	(_Load^(0+256)+5),f
 10910                           
 10911                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 10912  00FC  3003               	movlw	3
 10913  00FD  0020               	movlb	0	; select bank0
 10914  00FE  00A0               	movwf	___lwdiv@divisor
 10915  00FF  3000               	movlw	0
 10916  0100  00A1               	movwf	___lwdiv@divisor+1
 10917  0101  0022               	movlb	2	; select bank2
 10918  0102  0840               	movf	((_Load+1)^(0+256)+7),w
 10919  0103  0020               	movlb	0	; select bank0
 10920  0104  01A3               	clrf	___lwdiv@dividend+1
 10921  0105  07A3               	addwf	___lwdiv@dividend+1,f
 10922  0106  0022               	movlb	2	; select bank2
 10923  0107  083F               	movf	(_Load^(0+256)+7),w
 10924  0108  0020               	movlb	0	; select bank0
 10925  0109  01A2               	clrf	___lwdiv@dividend
 10926  010A  07A2               	addwf	___lwdiv@dividend,f
 10927  010B  3191  21FE  3180   	fcall	___lwdiv
 10928  010E  0020               	movlb	0	; select bank0
 10929  010F  0821               	movf	?___lwdiv+1,w
 10930  0110  0022               	movlb	2	; select bank2
 10931  0111  01C0               	clrf	((_Load+1)^(0+256)+7)
 10932  0112  07C0               	addwf	((_Load+1)^(0+256)+7),f
 10933  0113  0020               	movlb	0	; select bank0
 10934  0114  0820               	movf	?___lwdiv,w
 10935  0115  0022               	movlb	2	; select bank2
 10936  0116  01BF               	clrf	(_Load^(0+256)+7)
 10937  0117  07BF               	addwf	(_Load^(0+256)+7),f
 10938                           
 10939                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 10940  0118  319E  26E8  3180   	fcall	_setLoad_AH_AL_Restore
 10941                           
 10942                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 10943  011B  0022               	movlb	2	; select bank2
 10944  011C  0840               	movf	((_Load+1)^(0+256)+7),w
 10945  011D  023E               	subwf	((_Load+1)^(0+256)+5),w
 10946  011E  1D03               	skipz
 10947  011F  2922               	goto	u8175
 10948  0120  083F               	movf	(_Load^(0+256)+7),w
 10949  0121  023D               	subwf	(_Load^(0+256)+5),w
 10950  0122                     u8175:	
 10951  0122  1C03               	skipc
 10952  0123  0008               	return
 10953                           
 10954                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 10955  0124  3005               	movlw	5
 10956  0125  3E38               	addlw	_Load& (0+255)
 10957  0126  0086               	movwf	6
 10958  0127  3001               	movlw	1	; select bank2/3
 10959  0128  0087               	movwf	7
 10960  0129  093F               	comf	(_Load^(0+256)+7),w
 10961  012A  0020               	movlb	0	; select bank0
 10962  012B  00A8               	movwf	??_Load_Main
 10963  012C  0022               	movlb	2	; select bank2
 10964  012D  0940               	comf	((_Load+1)^(0+256)+7),w
 10965  012E  0020               	movlb	0	; select bank0
 10966  012F  00A9               	movwf	??_Load_Main+1
 10967  0130  0AA8               	incf	??_Load_Main,f
 10968  0131  1903               	skipnz
 10969  0132  0AA9               	incf	??_Load_Main+1,f
 10970  0133  3F40               	moviw [0]fsr1
 10971  0134  0728               	addwf	??_Load_Main,w
 10972  0135  0022               	movlb	2	; select bank2
 10973  0136  00D7               	movwf	(_Load^(0+256)+31)
 10974  0137  3F41               	moviw [1]fsr1
 10975  0138  0020               	movlb	0	; select bank0
 10976  0139  3D29               	addwfc	??_Load_Main+1,w
 10977  013A  0022               	movlb	2	; select bank2
 10978  013B  00D8               	movwf	(_Load^(0+256)+32)
 10979                           
 10980                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 10981  013C  01BD               	clrf	(_Load^(0+256)+5)
 10982  013D  01BE               	clrf	((_Load+1)^(0+256)+5)
 10983                           
 10984                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 10985  013E  01BF               	clrf	(_Load^(0+256)+7)
 10986  013F  01C0               	clrf	((_Load+1)^(0+256)+7)
 10987                           
 10988                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 10989  0140  1DB8               	btfss	_Load^(0+256),3
 10990  0141  299B               	goto	l8111
 10991                           
 10992                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 10993  0142  3002               	movlw	2
 10994  0143  025D               	subwf	(_Load^(0+256)+37),w
 10995  0144  1803               	skipnc
 10996  0145  299B               	goto	l8111
 10997                           
 10998                           ;OverLoad_B1.c: 117: Load.Count++;
 10999  0146  3001               	movlw	1
 11000  0147  0020               	movlb	0	; select bank0
 11001  0148  00A8               	movwf	??_Load_Main
 11002  0149  0828               	movf	??_Load_Main,w
 11003  014A  0022               	movlb	2	; select bank2
 11004  014B  07DD               	addwf	(_Load^(0+256)+37),f
 11005                           
 11006                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11007  014C  319A  22FE  3180   	fcall	_getDimmer_Load_Status
 11008  014F  0020               	movlb	0	; select bank0
 11009  0150  00A8               	movwf	??_Load_Main
 11010  0151  0828               	movf	??_Load_Main,w
 11011  0152  00AE               	movwf	Load_Main@Load_RunStatus
 11012                           
 11013                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11014  0153  319B  2336  3180   	fcall	_getMain_Lights_Count
 11015  0156  0020               	movlb	0	; select bank0
 11016  0157  00A8               	movwf	??_Load_Main
 11017  0158  0828               	movf	??_Load_Main,w
 11018  0159  00AF               	movwf	Load_Main@LightsCount
 11019                           
 11020                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11021  015A  0022               	movlb	2	; select bank2
 11022  015B  085D               	movf	(_Load^(0+256)+37),w
 11023  015C  3A01               	xorlw	1
 11024  015D  1D03               	skipz
 11025  015E  2963               	goto	l8097
 11026                           
 11027                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*65);
 11028  015F  3014               	movlw	20
 11029  0160  00DB               	movwf	(_Load^(0+256)+35)
 11030  0161  3005               	movlw	5
 11031  0162  2970               	goto	L7
 11032  0163                     l8097:	
 11033                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11034                           
 11035  0163  085D               	movf	(_Load^(0+256)+37),w
 11036  0164  3A02               	xorlw	2
 11037  0165  1D03               	skipz
 11038  0166  299B               	goto	l8111
 11039                           
 11040                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11041  0167  0020               	movlb	0	; select bank0
 11042  0168  082F               	movf	Load_Main@LightsCount,w
 11043  0169  3A01               	xorlw	1
 11044  016A  1D03               	skipz
 11045  016B  2972               	goto	l8103
 11046                           
 11047                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.8*65);
 11048  016C  3075               	movlw	117
 11049  016D  0022               	movlb	2	; select bank2
 11050  016E  00DB               	movwf	(_Load^(0+256)+35)
 11051  016F  3000               	movlw	0
 11052  0170                     L7:	
 11053  0170  00DC               	movwf	(_Load^(0+256)+36)
 11054                           
 11055                           ;OverLoad_B1.c: 132: } else {
 11056  0171  299B               	goto	l8111
 11057  0172                     l8103:	
 11058                           
 11059                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11060  0172  0020               	movlb	0	; select bank0
 11061  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 11062  0174  1D03               	skipz
 11063  0175  298F               	goto	l8107
 11064                           
 11065                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*65) * LightsCount;
 11066  0176  082F               	movf	Load_Main@LightsCount,w
 11067  0177  00A8               	movwf	??_Load_Main
 11068  0178  01A9               	clrf	??_Load_Main+1
 11069  0179  0828               	movf	??_Load_Main,w
 11070  017A  00A0               	movwf	___wmul@multiplier
 11071  017B  0829               	movf	??_Load_Main+1,w
 11072  017C  00A1               	movwf	___wmul@multiplier+1
 11073  017D  3075               	movlw	117
 11074  017E  00A2               	movwf	___wmul@multiplicand
 11075  017F  3000               	movlw	0
 11076  0180  00A3               	movwf	___wmul@multiplicand+1
 11077  0181  319F  2721  3180   	fcall	___wmul
 11078  0184  0020               	movlb	0	; select bank0
 11079  0185  0821               	movf	?___wmul+1,w
 11080  0186  0022               	movlb	2	; select bank2
 11081  0187  01DC               	clrf	((_Load+1)^(0+256)+35)
 11082  0188  07DC               	addwf	((_Load+1)^(0+256)+35),f
 11083  0189  0020               	movlb	0	; select bank0
 11084  018A  0820               	movf	?___wmul,w
 11085  018B  0022               	movlb	2	; select bank2
 11086  018C  01DB               	clrf	(_Load^(0+256)+35)
 11087  018D  07DB               	addwf	(_Load^(0+256)+35),f
 11088                           
 11089                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11090  018E  299B               	goto	l8111
 11091  018F                     l8107:	
 11092  018F  0020               	movlb	0	; select bank0
 11093  0190  082E               	movf	Load_Main@Load_RunStatus,w
 11094  0191  3A01               	xorlw	1
 11095  0192  1D03               	skipz
 11096  0193  299B               	goto	l8111
 11097                           
 11098                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.8*65) + Load.TotalLoad;
 11099  0194  0022               	movlb	2	; select bank2
 11100  0195  0841               	movf	(_Load^(0+256)+9),w
 11101  0196  3E75               	addlw	117
 11102  0197  00DB               	movwf	(_Load^(0+256)+35)
 11103  0198  3000               	movlw	0
 11104  0199  3D42               	addwfc	((_Load+1)^(0+256)+9),w
 11105  019A  00DC               	movwf	((_Load+1)^(0+256)+35)
 11106  019B                     l8111:	
 11107                           
 11108                           ;OverLoad_B1.c: 137: }
 11109                           ;OverLoad_B1.c: 138: }
 11110                           ;OverLoad_B1.c: 139: }
 11111                           ;OverLoad_B1.c: 140: }
 11112                           ;OverLoad_B1.c: 141: }
 11113                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11114  019B  0022               	movlb	2	; select bank2
 11115  019C  085C               	movf	((_Load+1)^(0+256)+35),w
 11116  019D  0258               	subwf	((_Load+1)^(0+256)+31),w
 11117  019E  1D03               	skipz
 11118  019F  29A2               	goto	u8255
 11119  01A0  085B               	movf	(_Load^(0+256)+35),w
 11120  01A1  0257               	subwf	(_Load^(0+256)+31),w
 11121  01A2                     u8255:	
 11122  01A2  1C03               	skipc
 11123  01A3  29C1               	goto	l8127
 11124                           
 11125                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11126  01A4  0020               	movlb	0	; select bank0
 11127  01A5  082F               	movf	Load_Main@LightsCount,w
 11128  01A6  3A01               	xorlw	1
 11129  01A7  1903               	skipnz
 11130  01A8  29AB               	goto	l8117
 11131  01A9  3003               	movlw	3
 11132  01AA  29AC               	goto	L8
 11133  01AB                     l8117:	
 11134  01AB  3002               	movlw	2
 11135  01AC                     L8:	
 11136  01AC  00AA               	movwf	_Load_Main$3987
 11137  01AD  3000               	movlw	0
 11138  01AE  00AB               	movwf	_Load_Main$3987+1
 11139  01AF  082A               	movf	_Load_Main$3987,w
 11140  01B0  00A8               	movwf	??_Load_Main
 11141  01B1  0828               	movf	??_Load_Main,w
 11142  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 11143                           
 11144                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11145  01B3  3001               	movlw	1
 11146  01B4  00A8               	movwf	??_Load_Main
 11147  01B5  0828               	movf	??_Load_Main,w
 11148  01B6  0022               	movlb	2	; select bank2
 11149  01B7  07DE               	addwf	(_Load^(0+256)+38),f
 11150                           
 11151                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11152  01B8  085E               	movf	(_Load^(0+256)+38),w
 11153  01B9  0020               	movlb	0	; select bank0
 11154  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 11155  01BB  1803               	skipnc
 11156  01BC  0008               	return
 11157                           
 11158                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11159  01BD  0022               	movlb	2	; select bank2
 11160  01BE  01DE               	clrf	(_Load^(0+256)+38)
 11161                           
 11162                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11163  01BF  16B8               	bsf	_Load^(0+256),5
 11164                           
 11165                           ;OverLoad_B1.c: 170: }
 11166                           ;OverLoad_B1.c: 171: } else {
 11167  01C0  0008               	return
 11168  01C1                     l8127:	
 11169                           
 11170                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11171  01C1  01DE               	clrf	(_Load^(0+256)+38)
 11172                           
 11173                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11174  01C2  1DB8               	btfss	_Load^(0+256),3
 11175  01C3  0008               	return
 11176                           
 11177                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11178  01C4  3001               	movlw	1
 11179  01C5  0020               	movlb	0	; select bank0
 11180  01C6  00A8               	movwf	??_Load_Main
 11181  01C7  0828               	movf	??_Load_Main,w
 11182  01C8  0022               	movlb	2	; select bank2
 11183  01C9  07DF               	addwf	(_Load^(0+256)+39),f
 11184                           
 11185                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11186  01CA  3003               	movlw	3
 11187  01CB  025F               	subwf	(_Load^(0+256)+39),w
 11188  01CC  1C03               	skipc
 11189  01CD  0008               	return
 11190                           
 11191                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11192  01CE  01DF               	clrf	(_Load^(0+256)+39)
 11193                           
 11194                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11195  01CF  17B8               	bsf	_Load^(0+256),7
 11196                           
 11197                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11198  01D0  11B8               	bcf	_Load^(0+256),3
 11199                           
 11200                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11201  01D1  01DD               	clrf	(_Load^(0+256)+37)
 11202                           
 11203                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11204  01D2  0858               	movf	((_Load+1)^(0+256)+31),w
 11205  01D3  01C2               	clrf	((_Load+1)^(0+256)+9)
 11206  01D4  07C2               	addwf	((_Load+1)^(0+256)+9),f
 11207  01D5  0857               	movf	(_Load^(0+256)+31),w
 11208  01D6  01C1               	clrf	(_Load^(0+256)+9)
 11209  01D7  07C1               	addwf	(_Load^(0+256)+9),f
 11210                           
 11211                           ;OverLoad_B1.c: 184: }
 11212                           ;OverLoad_B1.c: 185: }
 11213                           ;OverLoad_B1.c: 208: }
 11214                           ;OverLoad_B1.c: 209: }
 11215                           ;OverLoad_B1.c: 210: }
 11216                           ;OverLoad_B1.c: 211: } else {
 11217  01D8  0008               	return
 11218  01D9                     l1623:	
 11219                           
 11220                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11221  01D9  1638               	bsf	_Load^(0+256),4
 11222                           
 11223                           ;OverLoad_B1.c: 213: }
 11224                           ;OverLoad_B1.c: 214: } else {
 11225  01DA  0008               	return
 11226  01DB                     l1622:	
 11227                           
 11228                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11229  01DB  1D38               	btfss	_Load^(0+256),2
 11230  01DC  29EE               	goto	l8163
 11231                           
 11232                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11233  01DD  1138               	bcf	_Load^(0+256),2
 11234                           
 11235                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11236  01DE  1238               	bcf	_Load^(0+256),4
 11237                           
 11238                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11239  01DF  01B9               	clrf	(_Load^(0+256)+1)
 11240  01E0  01BA               	clrf	((_Load+1)^(0+256)+1)
 11241                           
 11242                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11243  01E1  319E  26E8  3180   	fcall	_setLoad_AH_AL_Restore
 11244                           
 11245                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11246  01E4  0022               	movlb	2	; select bank2
 11247  01E5  01DE               	clrf	(_Load^(0+256)+38)
 11248                           
 11249                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11250  01E6  01DF               	clrf	(_Load^(0+256)+39)
 11251                           
 11252                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11253  01E7  01BD               	clrf	(_Load^(0+256)+5)
 11254  01E8  01BE               	clrf	((_Load+1)^(0+256)+5)
 11255                           
 11256                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11257  01E9  01BF               	clrf	(_Load^(0+256)+7)
 11258  01EA  01C0               	clrf	((_Load+1)^(0+256)+7)
 11259                           
 11260                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11261  01EB  11B8               	bcf	_Load^(0+256),3
 11262                           
 11263                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11264  01EC  01DD               	clrf	(_Load^(0+256)+37)
 11265                           
 11266                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11267  01ED  13B8               	bcf	_Load^(0+256),7
 11268  01EE                     l8163:	
 11269                           
 11270                           ;OverLoad_B1.c: 257: }
 11271                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11272  01EE  1EB8               	btfss	_Load^(0+256),5
 11273  01EF  0008               	return
 11274                           
 11275                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11276  01F0  3001               	movlw	1
 11277  01F1  07BB               	addwf	(_Load^(0+256)+3),f
 11278  01F2  3000               	movlw	0
 11279  01F3  3DBC               	addwfc	((_Load+1)^(0+256)+3),f
 11280                           
 11281                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11282  01F4  3001               	movlw	1
 11283  01F5  023C               	subwf	((_Load+1)^(0+256)+3),w
 11284  01F6  30F4               	movlw	244
 11285  01F7  1903               	skipnz
 11286  01F8  023B               	subwf	(_Load^(0+256)+3),w
 11287  01F9  1C03               	skipc
 11288  01FA  0008               	return
 11289                           
 11290                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11291  01FB  01BB               	clrf	(_Load^(0+256)+3)
 11292  01FC  01BC               	clrf	((_Load+1)^(0+256)+3)
 11293                           
 11294                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11295  01FD  12B8               	bcf	_Load^(0+256),5
 11296                           
 11297                           ;OverLoad_B1.c: 263: }
 11298                           ;OverLoad_B1.c: 264: }
 11299                           ;OverLoad_B1.c: 265: }
 11300                           ;OverLoad_B1.c: 266: } else {
 11301  01FE  0008               	return
 11302  01FF                     l1612:	
 11303                           
 11304                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11305  01FF  0021               	movlb	1	; select bank1
 11306  0200  1C2F               	btfss	_myMain^(0+128),0
 11307  0201  0008               	return
 11308                           
 11309                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11310  0202  0022               	movlb	2	; select bank2
 11311  0203  1438               	bsf	_Load^(0+256),0
 11312  0204  0008               	return
 11313  0205                     __end_of_Load_Main:	
 11314                           
 11315                           	psect	text64
 11316  1B36                     __ptext64:	
 11317 ;; *************** function _getMain_Lights_Count *****************
 11318 ;; Defined at:
 11319 ;;		line 459 in file "../src/Main_B1.c"
 11320 ;; Parameters:    Size  Location     Type
 11321 ;;		None
 11322 ;; Auto vars:     Size  Location     Type
 11323 ;;  status1         1    1[BANK0 ] unsigned char 
 11324 ;;  count           1    0[BANK0 ] unsigned char 
 11325 ;; Return value:  Size  Location     Type
 11326 ;;                  1    wreg      unsigned char 
 11327 ;; Registers used:
 11328 ;;		wreg, status,2
 11329 ;; Tracked objects:
 11330 ;;		On entry : 0/0
 11331 ;;		On exit  : 0/0
 11332 ;;		Unchanged: 0/0
 11333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11338 ;;Total ram usage:        2 bytes
 11339 ;; Hardware stack levels used:    1
 11340 ;; Hardware stack levels required when called:    5
 11341 ;; This function calls:
 11342 ;;		Nothing
 11343 ;; This function is called by:
 11344 ;;		_Load_Main
 11345 ;; This function uses a non-reentrant model
 11346 ;;
 11347                           
 11348                           
 11349                           ;psect for function _getMain_Lights_Count
 11350  1B36                     _getMain_Lights_Count:	
 11351                           
 11352                           ;Main_B1.c: 460: char count = 0;
 11353                           
 11354                           ;incstack = 0
 11355                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11356  1B36  0020               	movlb	0	; select bank0
 11357  1B37  01A0               	clrf	getMain_Lights_Count@count
 11358                           
 11359                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11360  1B38  3000               	movlw	0
 11361  1B39  0021               	movlb	1	; select bank1
 11362  1B3A  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11363  1B3B  3001               	movlw	1
 11364  1B3C  0020               	movlb	0	; select bank0
 11365  1B3D  00A1               	movwf	getMain_Lights_Count@status1
 11366                           
 11367                           ;Main_B1.c: 487: return count = status1;
 11368  1B3E  0821               	movf	getMain_Lights_Count@status1,w
 11369  1B3F  00A0               	movwf	getMain_Lights_Count@count
 11370  1B40  0008               	return
 11371  1B41                     __end_of_getMain_Lights_Count:	
 11372                           
 11373                           	psect	text65
 11374  1AFE                     __ptext65:	
 11375 ;; *************** function _getDimmer_Load_Status *****************
 11376 ;; Defined at:
 11377 ;;		line 1161 in file "../src/Dimmer_B1.c"
 11378 ;; Parameters:    Size  Location     Type
 11379 ;;		None
 11380 ;; Auto vars:     Size  Location     Type
 11381 ;;  status          1    0[BANK0 ] unsigned char 
 11382 ;; Return value:  Size  Location     Type
 11383 ;;                  1    wreg      unsigned char 
 11384 ;; Registers used:
 11385 ;;		wreg, status,2
 11386 ;; Tracked objects:
 11387 ;;		On entry : 0/0
 11388 ;;		On exit  : 0/0
 11389 ;;		Unchanged: 0/0
 11390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11394 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11395 ;;Total ram usage:        1 bytes
 11396 ;; Hardware stack levels used:    1
 11397 ;; Hardware stack levels required when called:    5
 11398 ;; This function calls:
 11399 ;;		Nothing
 11400 ;; This function is called by:
 11401 ;;		_Load_Main
 11402 ;; This function uses a non-reentrant model
 11403 ;;
 11404                           
 11405                           
 11406                           ;psect for function _getDimmer_Load_Status
 11407  1AFE                     _getDimmer_Load_Status:	
 11408                           
 11409                           ;Dimmer_B1.c: 1162: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11410                           
 11411                           ;incstack = 0
 11412                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11413  1AFE  3000               	movlw	0
 11414  1AFF  0022               	movlb	2	; select bank2
 11415  1B00  192C               	btfsc	_Dimmer^(0+256),2
 11416  1B01  3001               	movlw	1
 11417  1B02  0020               	movlb	0	; select bank0
 11418  1B03  00A0               	movwf	getDimmer_Load_Status@status
 11419                           
 11420                           ;Dimmer_B1.c: 1163: return status;
 11421  1B04  0820               	movf	getDimmer_Load_Status@status,w
 11422  1B05  0008               	return
 11423  1B06                     __end_of_getDimmer_Load_Status:	
 11424                           
 11425                           	psect	text66
 11426  1AF6                     __ptext66:	
 11427 ;; *************** function _getDimmer_LoadGO *****************
 11428 ;; Defined at:
 11429 ;;		line 1155 in file "../src/Dimmer_B1.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;		None
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  1    wreg      unsigned char 
 11436 ;; Registers used:
 11437 ;;		wreg, status,2
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11446 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11447 ;;Total ram usage:        1 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    5
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_Load_Main
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           
 11458                           ;psect for function _getDimmer_LoadGO
 11459  1AF6                     _getDimmer_LoadGO:	
 11460                           
 11461                           ;Dimmer_B1.c: 1156: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11462                           
 11463                           ;incstack = 0
 11464                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11465  1AF6  3000               	movlw	0
 11466  1AF7  0022               	movlb	2	; select bank2
 11467  1AF8  18AC               	btfsc	_Dimmer^(0+256),1
 11468  1AF9  3001               	movlw	1
 11469  1AFA  0020               	movlb	0	; select bank0
 11470  1AFB  00A0               	movwf	getDimmer_LoadGO@loadgo
 11471                           
 11472                           ;Dimmer_B1.c: 1157: return loadgo;
 11473  1AFC  0820               	movf	getDimmer_LoadGO@loadgo,w
 11474  1AFD  0008               	return
 11475  1AFE                     __end_of_getDimmer_LoadGO:	
 11476                           
 11477                           	psect	text67
 11478  1D19                     __ptext67:	
 11479 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11480 ;; Defined at:
 11481 ;;		line 286 in file "../src/Dimmer_B1.c"
 11482 ;; Parameters:    Size  Location     Type
 11483 ;;		None
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;  status          1    0[BANK0 ] unsigned char 
 11486 ;; Return value:  Size  Location     Type
 11487 ;;                  1    wreg      unsigned char 
 11488 ;; Registers used:
 11489 ;;		wreg, status,2, status,0
 11490 ;; Tracked objects:
 11491 ;;		On entry : 0/0
 11492 ;;		On exit  : 0/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;Total ram usage:        1 bytes
 11500 ;; Hardware stack levels used:    1
 11501 ;; Hardware stack levels required when called:    5
 11502 ;; This function calls:
 11503 ;;		Nothing
 11504 ;; This function is called by:
 11505 ;;		_Load_Main
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           
 11510                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11511  1D19                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11512                           
 11513                           ;Dimmer_B1.c: 287: char status = 0;
 11514                           
 11515                           ;incstack = 0
 11516                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11517  1D19  0020               	movlb	0	; select bank0
 11518  1D1A  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11519                           
 11520                           ;Dimmer_B1.c: 298: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11521  1D1B  3000               	movlw	0
 11522  1D1C  0021               	movlb	1	; select bank1
 11523  1D1D  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 11524  1D1E  3001               	movlw	1
 11525  1D1F  0020               	movlb	0	; select bank0
 11526  1D20  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11527                           
 11528                           ;Dimmer_B1.c: 302: if (status == 0) {
 11529  1D21  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11530  1D22  1D03               	skipz
 11531  1D23  2D2A               	goto	l7211
 11532                           
 11533                           ;Dimmer_B1.c: 312: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11534  1D24  3000               	movlw	0
 11535  1D25  0021               	movlb	1	; select bank1
 11536  1D26  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 11537  1D27  3001               	movlw	1
 11538  1D28  0020               	movlb	0	; select bank0
 11539  1D29  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11540  1D2A                     l7211:	
 11541                           
 11542                           ;Dimmer_B1.c: 314: }
 11543                           ;Dimmer_B1.c: 316: return status;
 11544  1D2A  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11545  1D2B  0008               	return
 11546  1D2C                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11547                           
 11548                           	psect	text68
 11549  1F21                     __ptext68:	
 11550 ;; *************** function ___wmul *****************
 11551 ;; Defined at:
 11552 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11553 ;; Parameters:    Size  Location     Type
 11554 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11555 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11556 ;; Auto vars:     Size  Location     Type
 11557 ;;  product         2    4[BANK0 ] unsigned int 
 11558 ;; Return value:  Size  Location     Type
 11559 ;;                  2    0[BANK0 ] unsigned int 
 11560 ;; Registers used:
 11561 ;;		wreg, status,2, status,0
 11562 ;; Tracked objects:
 11563 ;;		On entry : 0/0
 11564 ;;		On exit  : 0/0
 11565 ;;		Unchanged: 0/0
 11566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11567 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;Total ram usage:        6 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:    5
 11574 ;; This function calls:
 11575 ;;		Nothing
 11576 ;; This function is called by:
 11577 ;;		_Load_Main
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           
 11582                           ;psect for function ___wmul
 11583  1F21                     ___wmul:	
 11584                           
 11585                           ;incstack = 0
 11586                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11587  1F21  0020               	movlb	0	; select bank0
 11588  1F22  01A4               	clrf	___wmul@product
 11589  1F23  01A5               	clrf	___wmul@product+1
 11590  1F24                     l7743:	
 11591  1F24  1C20               	btfss	___wmul@multiplier,0
 11592  1F25  2F2A               	goto	l2696
 11593  1F26  0822               	movf	___wmul@multiplicand,w
 11594  1F27  07A4               	addwf	___wmul@product,f
 11595  1F28  0823               	movf	___wmul@multiplicand+1,w
 11596  1F29  3DA5               	addwfc	___wmul@product+1,f
 11597  1F2A                     l2696:	
 11598  1F2A  3001               	movlw	1
 11599  1F2B                     u7535:	
 11600  1F2B  35A2               	lslf	___wmul@multiplicand,f
 11601  1F2C  0DA3               	rlf	___wmul@multiplicand+1,f
 11602  1F2D  0B89               	decfsz	9,f
 11603  1F2E  2F2B               	goto	u7535
 11604  1F2F  3001               	movlw	1
 11605  1F30                     u7545:	
 11606  1F30  36A1               	lsrf	___wmul@multiplier+1,f
 11607  1F31  0CA0               	rrf	___wmul@multiplier,f
 11608  1F32  0B89               	decfsz	9,f
 11609  1F33  2F30               	goto	u7545
 11610  1F34  0821               	movf	___wmul@multiplier+1,w
 11611  1F35  0420               	iorwf	___wmul@multiplier,w
 11612  1F36  1D03               	skipz
 11613  1F37  2F24               	goto	l7743
 11614  1F38  0825               	movf	___wmul@product+1,w
 11615  1F39  01A1               	clrf	?___wmul+1
 11616  1F3A  07A1               	addwf	?___wmul+1,f
 11617  1F3B  0824               	movf	___wmul@product,w
 11618  1F3C  01A0               	clrf	?___wmul
 11619  1F3D  07A0               	addwf	?___wmul,f
 11620  1F3E  0008               	return
 11621  1F3F                     __end_of___wmul:	
 11622                           
 11623                           	psect	text69
 11624  11FE                     __ptext69:	
 11625 ;; *************** function ___lwdiv *****************
 11626 ;; Defined at:
 11627 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;  divisor         2    0[BANK0 ] unsigned int 
 11630 ;;  dividend        2    2[BANK0 ] unsigned int 
 11631 ;; Auto vars:     Size  Location     Type
 11632 ;;  quotient        2    5[BANK0 ] unsigned int 
 11633 ;;  counter         1    7[BANK0 ] unsigned char 
 11634 ;; Return value:  Size  Location     Type
 11635 ;;                  2    0[BANK0 ] unsigned int 
 11636 ;; Registers used:
 11637 ;;		wreg, status,2, status,0
 11638 ;; Tracked objects:
 11639 ;;		On entry : 0/0
 11640 ;;		On exit  : 0/0
 11641 ;;		Unchanged: 0/0
 11642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11643 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;Total ram usage:        8 bytes
 11648 ;; Hardware stack levels used:    1
 11649 ;; Hardware stack levels required when called:    5
 11650 ;; This function calls:
 11651 ;;		Nothing
 11652 ;; This function is called by:
 11653 ;;		_Load_Main
 11654 ;;		_setTemp_Main
 11655 ;;		_setRF_Main
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           
 11660                           ;psect for function ___lwdiv
 11661  11FE                     ___lwdiv:	
 11662                           
 11663                           ;incstack = 0
 11664                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11665  11FE  0020               	movlb	0	; select bank0
 11666  11FF  01A5               	clrf	___lwdiv@quotient
 11667  1200  01A6               	clrf	___lwdiv@quotient+1
 11668  1201  0821               	movf	___lwdiv@divisor+1,w
 11669  1202  0420               	iorwf	___lwdiv@divisor,w
 11670  1203  1903               	skipnz
 11671  1204  2A2E               	goto	l7149
 11672  1205  01A7               	clrf	___lwdiv@counter
 11673  1206  0AA7               	incf	___lwdiv@counter,f
 11674  1207                     l7137:	
 11675  1207  1BA1               	btfsc	___lwdiv@divisor+1,7
 11676  1208  2A13               	goto	l7139
 11677  1209  3001               	movlw	1
 11678  120A                     u6505:	
 11679  120A  35A0               	lslf	___lwdiv@divisor,f
 11680  120B  0DA1               	rlf	___lwdiv@divisor+1,f
 11681  120C  0B89               	decfsz	9,f
 11682  120D  2A0A               	goto	u6505
 11683  120E  3001               	movlw	1
 11684  120F  00A4               	movwf	??___lwdiv
 11685  1210  0824               	movf	??___lwdiv,w
 11686  1211  07A7               	addwf	___lwdiv@counter,f
 11687  1212  2A07               	goto	l7137
 11688  1213                     l7139:	
 11689  1213  3001               	movlw	1
 11690  1214                     u6525:	
 11691  1214  35A5               	lslf	___lwdiv@quotient,f
 11692  1215  0DA6               	rlf	___lwdiv@quotient+1,f
 11693  1216  0B89               	decfsz	9,f
 11694  1217  2A14               	goto	u6525
 11695  1218  0821               	movf	___lwdiv@divisor+1,w
 11696  1219  0223               	subwf	___lwdiv@dividend+1,w
 11697  121A  1D03               	skipz
 11698  121B  2A1E               	goto	u6535
 11699  121C  0820               	movf	___lwdiv@divisor,w
 11700  121D  0222               	subwf	___lwdiv@dividend,w
 11701  121E                     u6535:	
 11702  121E  1C03               	skipc
 11703  121F  2A25               	goto	l7145
 11704  1220  0820               	movf	___lwdiv@divisor,w
 11705  1221  02A2               	subwf	___lwdiv@dividend,f
 11706  1222  0821               	movf	___lwdiv@divisor+1,w
 11707  1223  3BA3               	subwfb	___lwdiv@dividend+1,f
 11708  1224  1425               	bsf	___lwdiv@quotient,0
 11709  1225                     l7145:	
 11710  1225  3001               	movlw	1
 11711  1226                     u6545:	
 11712  1226  36A1               	lsrf	___lwdiv@divisor+1,f
 11713  1227  0CA0               	rrf	___lwdiv@divisor,f
 11714  1228  0B89               	decfsz	9,f
 11715  1229  2A26               	goto	u6545
 11716  122A  3001               	movlw	1
 11717  122B  02A7               	subwf	___lwdiv@counter,f
 11718  122C  1D03               	btfss	3,2
 11719  122D  2A13               	goto	l7139
 11720  122E                     l7149:	
 11721  122E  0826               	movf	___lwdiv@quotient+1,w
 11722  122F  01A1               	clrf	?___lwdiv+1
 11723  1230  07A1               	addwf	?___lwdiv+1,f
 11724  1231  0825               	movf	___lwdiv@quotient,w
 11725  1232  01A0               	clrf	?___lwdiv
 11726  1233  07A0               	addwf	?___lwdiv,f
 11727  1234  0008               	return
 11728  1235                     __end_of___lwdiv:	
 11729                           
 11730                           	psect	text70
 11731  1A88                     __ptext70:	
 11732 ;; *************** function _Load_Initialization *****************
 11733 ;; Defined at:
 11734 ;;		line 9 in file "../src/OverLoad_B1.c"
 11735 ;; Parameters:    Size  Location     Type
 11736 ;;		None
 11737 ;; Auto vars:     Size  Location     Type
 11738 ;;		None
 11739 ;; Return value:  Size  Location     Type
 11740 ;;		None               void
 11741 ;; Registers used:
 11742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11743 ;; Tracked objects:
 11744 ;;		On entry : 0/0
 11745 ;;		On exit  : 0/0
 11746 ;;		Unchanged: 0/0
 11747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;Total ram usage:        0 bytes
 11753 ;; Hardware stack levels used:    1
 11754 ;; Hardware stack levels required when called:    6
 11755 ;; This function calls:
 11756 ;;		_setLoad_AH_AL_Restore
 11757 ;; This function is called by:
 11758 ;;		_main
 11759 ;; This function uses a non-reentrant model
 11760 ;;
 11761                           
 11762                           
 11763                           ;psect for function _Load_Initialization
 11764  1A88                     _Load_Initialization:	
 11765                           
 11766                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11767                           
 11768                           ;incstack = 0
 11769                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11770  1A88  319E  26E8         	fcall	_setLoad_AH_AL_Restore
 11771  1A8A  0008               	return
 11772  1A8B                     __end_of_Load_Initialization:	
 11773                           
 11774                           	psect	text71
 11775  1EE8                     __ptext71:	
 11776 ;; *************** function _setLoad_AH_AL_Restore *****************
 11777 ;; Defined at:
 11778 ;;		line 294 in file "../src/OverLoad_B1.c"
 11779 ;; Parameters:    Size  Location     Type
 11780 ;;		None
 11781 ;; Auto vars:     Size  Location     Type
 11782 ;;  i               1    1[BANK0 ] unsigned char 
 11783 ;; Return value:  Size  Location     Type
 11784 ;;		None               void
 11785 ;; Registers used:
 11786 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11787 ;; Tracked objects:
 11788 ;;		On entry : 0/0
 11789 ;;		On exit  : 0/0
 11790 ;;		Unchanged: 0/0
 11791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11795 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11796 ;;Total ram usage:        2 bytes
 11797 ;; Hardware stack levels used:    1
 11798 ;; Hardware stack levels required when called:    5
 11799 ;; This function calls:
 11800 ;;		Nothing
 11801 ;; This function is called by:
 11802 ;;		_Load_Initialization
 11803 ;;		_Load_Main
 11804 ;; This function uses a non-reentrant model
 11805 ;;
 11806                           
 11807                           
 11808                           ;psect for function _setLoad_AH_AL_Restore
 11809  1EE8                     _setLoad_AH_AL_Restore:	
 11810                           
 11811                           ;OverLoad_B1.c: 295: char i;
 11812                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 11813                           
 11814                           ;incstack = 0
 11815                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11816  1EE8  0020               	movlb	0	; select bank0
 11817  1EE9  01A1               	clrf	setLoad_AH_AL_Restore@i
 11818  1EEA                     L9:	
 11819  1EEA  3005               	movlw	5
 11820  1EEB  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11821  1EEC  1803               	btfsc	3,0
 11822  1EED  0008               	return
 11823                           
 11824                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 11825  1EEE  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11826  1EEF  3E43               	addlw	(_Load+11)& (0+255)
 11827  1EF0  0086               	movwf	6
 11828  1EF1  3001               	movlw	1	; select bank2/3
 11829  1EF2  0087               	movwf	7
 11830  1EF3  3000               	movlw	0
 11831  1EF4  3FC0               	movwi [0]fsr1
 11832  1EF5  3FC1               	movwi [1]fsr1
 11833                           
 11834                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 11835  1EF6  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11836  1EF7  3E4D               	addlw	(_Load+21)& (0+255)
 11837  1EF8  0086               	movwf	6
 11838  1EF9  3001               	movlw	1	; select bank2/3
 11839  1EFA  0087               	movwf	7
 11840  1EFB  30FF               	movlw	255
 11841  1EFC  3FC0               	movwi [0]fsr1
 11842  1EFD  30FF               	movlw	255
 11843  1EFE  3FC1               	movwi [1]fsr1
 11844  1EFF  3001               	movlw	1
 11845  1F00  00A0               	movwf	??_setLoad_AH_AL_Restore
 11846  1F01  0820               	movf	??_setLoad_AH_AL_Restore,w
 11847  1F02  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11848  1F03  2EEA               	goto	L9
 11849  1F04                     __end_of_setLoad_AH_AL_Restore:	
 11850                           
 11851                           	psect	text72
 11852  1AA0                     __ptext72:	
 11853 ;; *************** function _LED_Main *****************
 11854 ;; Defined at:
 11855 ;;		line 47 in file "../src/LED_B1.c"
 11856 ;; Parameters:    Size  Location     Type
 11857 ;;		None
 11858 ;; Auto vars:     Size  Location     Type
 11859 ;;		None
 11860 ;; Return value:  Size  Location     Type
 11861 ;;		None               void
 11862 ;; Registers used:
 11863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11864 ;; Tracked objects:
 11865 ;;		On entry : 0/0
 11866 ;;		On exit  : 0/0
 11867 ;;		Unchanged: 0/0
 11868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;Total ram usage:        0 bytes
 11874 ;; Hardware stack levels used:    1
 11875 ;; Hardware stack levels required when called:    7
 11876 ;; This function calls:
 11877 ;;		_setLED_Main
 11878 ;; This function is called by:
 11879 ;;		_main
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function _LED_Main
 11885  1AA0                     _LED_Main:	
 11886                           
 11887                           ;LED_B1.c: 67: setLED_Main(99);
 11888                           
 11889                           ;incstack = 0
 11890                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11891  1AA0  3063               	movlw	99
 11892  1AA1  3191  21C8         	fcall	_setLED_Main
 11893  1AA3  0008               	return
 11894  1AA4                     __end_of_LED_Main:	
 11895                           
 11896                           	psect	text73
 11897  11C8                     __ptext73:	
 11898 ;; *************** function _setLED_Main *****************
 11899 ;; Defined at:
 11900 ;;		line 229 in file "../src/LED_B1.c"
 11901 ;; Parameters:    Size  Location     Type
 11902 ;;  led             1    wreg     unsigned char 
 11903 ;; Auto vars:     Size  Location     Type
 11904 ;;  led             1    4[BANK0 ] unsigned char 
 11905 ;; Return value:  Size  Location     Type
 11906 ;;		None               void
 11907 ;; Registers used:
 11908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11909 ;; Tracked objects:
 11910 ;;		On entry : 0/0
 11911 ;;		On exit  : 0/0
 11912 ;;		Unchanged: 0/0
 11913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11915 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;Total ram usage:        3 bytes
 11919 ;; Hardware stack levels used:    1
 11920 ;; Hardware stack levels required when called:    6
 11921 ;; This function calls:
 11922 ;;		_LedPointSelect
 11923 ;; This function is called by:
 11924 ;;		_LED_Main
 11925 ;; This function uses a non-reentrant model
 11926 ;;
 11927                           
 11928                           
 11929                           ;psect for function _setLED_Main
 11930  11C8                     _setLED_Main:	
 11931                           
 11932                           ;incstack = 0
 11933                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11934                           ;setLED_Main@led stored from wreg
 11935  11C8  0020               	movlb	0	; select bank0
 11936  11C9  00A4               	movwf	setLED_Main@led
 11937                           
 11938                           ;LED_B1.c: 230: LedPointSelect(led);
 11939  11CA  0824               	movf	setLED_Main@led,w
 11940  11CB  319B  2393  3191   	fcall	_LedPointSelect
 11941                           
 11942                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11943  11CE  0021               	movlb	1	; select bank1
 11944  11CF  084D               	movf	_LED^(0+128),w
 11945  11D0  0086               	movwf	6
 11946  11D1  3001               	movlw	1	; select bank2/3
 11947  11D2  0087               	movwf	7
 11948  11D3  1C81               	btfss	1,1
 11949  11D4  0008               	return
 11950                           
 11951                           ;LED_B1.c: 232: LED->Time++;
 11952  11D5  0A4D               	incf	_LED^(0+128),w
 11953  11D6  0086               	movwf	6
 11954  11D7  3001               	movlw	1	; select bank2/3
 11955  11D8  0087               	movwf	7
 11956  11D9  3001               	movlw	1
 11957  11DA  0781               	addwf	1,f
 11958  11DB  3141               	addfsr 1,1
 11959  11DC  1803               	skipnc
 11960  11DD  0A81               	incf	1,f
 11961                           
 11962                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11963  11DE  0A4D               	incf	_LED^(0+128),w
 11964  11DF  0086               	movwf	6
 11965  11E0  3001               	movlw	1	; select bank2/3
 11966  11E1  0087               	movwf	7
 11967  11E2  3F40               	moviw [0]fsr1
 11968  11E3  0020               	movlb	0	; select bank0
 11969  11E4  00A2               	movwf	??_setLED_Main
 11970  11E5  3F41               	moviw [1]fsr1
 11971  11E6  00A3               	movwf	??_setLED_Main+1
 11972  11E7  3000               	movlw	0
 11973  11E8  0223               	subwf	??_setLED_Main+1,w
 11974  11E9  3019               	movlw	25
 11975  11EA  1903               	skipnz
 11976  11EB  0222               	subwf	??_setLED_Main,w
 11977  11EC  1C03               	skipc
 11978  11ED  0008               	return
 11979                           
 11980                           ;LED_B1.c: 234: LED->Time = 0;
 11981  11EE  0021               	movlb	1	; select bank1
 11982  11EF  0A4D               	incf	_LED^(0+128),w
 11983  11F0  0086               	movwf	6
 11984  11F1  3001               	movlw	1	; select bank2/3
 11985  11F2  0087               	movwf	7
 11986  11F3  3000               	movlw	0
 11987  11F4  3FC0               	movwi [0]fsr1
 11988  11F5  3FC1               	movwi [1]fsr1
 11989                           
 11990                           ;LED_B1.c: 252: if (led == 99) {
 11991  11F6  0020               	movlb	0	; select bank0
 11992  11F7  0824               	movf	setLED_Main@led,w
 11993  11F8  3A63               	xorlw	99
 11994  11F9  1D03               	skipz
 11995  11FA  0008               	return
 11996                           
 11997                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11998  11FB  3020               	movlw	32
 11999  11FC  068D               	xorwf	13,f
 12000  11FD  0008               	return
 12001  11FE                     __end_of_setLED_Main:	
 12002                           
 12003                           	psect	text74
 12004  1A9C                     __ptext74:	
 12005 ;; *************** function _LED_Initialization *****************
 12006 ;; Defined at:
 12007 ;;		line 31 in file "../src/LED_B1.c"
 12008 ;; Parameters:    Size  Location     Type
 12009 ;;		None
 12010 ;; Auto vars:     Size  Location     Type
 12011 ;;		None
 12012 ;; Return value:  Size  Location     Type
 12013 ;;		None               void
 12014 ;; Registers used:
 12015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12016 ;; Tracked objects:
 12017 ;;		On entry : 0/0
 12018 ;;		On exit  : 0/0
 12019 ;;		Unchanged: 0/0
 12020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;Total ram usage:        0 bytes
 12026 ;; Hardware stack levels used:    1
 12027 ;; Hardware stack levels required when called:    8
 12028 ;; This function calls:
 12029 ;;		_setLED_Initialization
 12030 ;; This function is called by:
 12031 ;;		_main
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           
 12036                           ;psect for function _LED_Initialization
 12037  1A9C                     _LED_Initialization:	
 12038                           
 12039                           ;LED_B1.c: 42: setLED_Initialization(99);
 12040                           
 12041                           ;incstack = 0
 12042                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12043  1A9C  3063               	movlw	99
 12044  1A9D  319C  24BD         	fcall	_setLED_Initialization
 12045  1A9F  0008               	return
 12046  1AA0                     __end_of_LED_Initialization:	
 12047                           
 12048                           	psect	text75
 12049  1CBD                     __ptext75:	
 12050 ;; *************** function _setLED_Initialization *****************
 12051 ;; Defined at:
 12052 ;;		line 74 in file "../src/LED_B1.c"
 12053 ;; Parameters:    Size  Location     Type
 12054 ;;  led             1    wreg     unsigned char 
 12055 ;; Auto vars:     Size  Location     Type
 12056 ;;  led             1    4[BANK0 ] unsigned char 
 12057 ;; Return value:  Size  Location     Type
 12058 ;;		None               void
 12059 ;; Registers used:
 12060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12061 ;; Tracked objects:
 12062 ;;		On entry : 0/0
 12063 ;;		On exit  : 0/0
 12064 ;;		Unchanged: 0/0
 12065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;Total ram usage:        1 bytes
 12071 ;; Hardware stack levels used:    1
 12072 ;; Hardware stack levels required when called:    7
 12073 ;; This function calls:
 12074 ;;		_LedPointSelect
 12075 ;;		_setLED
 12076 ;; This function is called by:
 12077 ;;		_LED_Initialization
 12078 ;; This function uses a non-reentrant model
 12079 ;;
 12080                           
 12081                           
 12082                           ;psect for function _setLED_Initialization
 12083  1CBD                     _setLED_Initialization:	
 12084                           
 12085                           ;incstack = 0
 12086                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12087                           ;setLED_Initialization@led stored from wreg
 12088  1CBD  0020               	movlb	0	; select bank0
 12089  1CBE  00A4               	movwf	setLED_Initialization@led
 12090                           
 12091                           ;LED_B1.c: 75: LedPointSelect(led);
 12092  1CBF  0824               	movf	setLED_Initialization@led,w
 12093  1CC0  319B  2393  319C   	fcall	_LedPointSelect
 12094                           
 12095                           ;LED_B1.c: 76: LED->Enable = 1;
 12096  1CC3  0021               	movlb	1	; select bank1
 12097  1CC4  084D               	movf	_LED^(0+128),w
 12098  1CC5  0086               	movwf	6
 12099  1CC6  3001               	movlw	1	; select bank2/3
 12100  1CC7  0087               	movwf	7
 12101  1CC8  1401               	bsf	1,0
 12102                           
 12103                           ;LED_B1.c: 77: setLED(led, 0);
 12104  1CC9  0020               	movlb	0	; select bank0
 12105  1CCA  01A2               	clrf	setLED@command
 12106  1CCB  0824               	movf	setLED_Initialization@led,w
 12107  1CCC  3192  22A6         	fcall	_setLED
 12108  1CCE  0008               	return
 12109  1CCF                     __end_of_setLED_Initialization:	
 12110                           
 12111                           	psect	text76
 12112  135B                     __ptext76:	
 12113 ;; *************** function _Flash_Memory_Main *****************
 12114 ;; Defined at:
 12115 ;;		line 976 in file "../src/MCU_B1.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;		None
 12118 ;; Auto vars:     Size  Location     Type
 12119 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12120 ;; Return value:  Size  Location     Type
 12121 ;;		None               void
 12122 ;; Registers used:
 12123 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12124 ;; Tracked objects:
 12125 ;;		On entry : 0/0
 12126 ;;		On exit  : 0/0
 12127 ;;		Unchanged: 0/0
 12128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;Total ram usage:        3 bytes
 12134 ;; Hardware stack levels used:    1
 12135 ;; Hardware stack levels required when called:    8
 12136 ;; This function calls:
 12137 ;;		_Flash_Memory_Modify
 12138 ;;		_getAll_Sw_KeyStatus
 12139 ;;		_getMain_All_LightsStatus
 12140 ;; This function is called by:
 12141 ;;		_main
 12142 ;; This function uses a non-reentrant model
 12143 ;;
 12144                           
 12145                           
 12146                           ;psect for function _Flash_Memory_Main
 12147  135B                     _Flash_Memory_Main:	
 12148                           
 12149                           ;MCU_B1.c: 977: char key_Status = 0;
 12150                           
 12151                           ;incstack = 0
 12152                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12153  135B  0020               	movlb	0	; select bank0
 12154  135C  01A7               	clrf	Flash_Memory_Main@key_Status
 12155                           
 12156                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12157  135D  319C  2455  3193   	fcall	_getAll_Sw_KeyStatus
 12158  1360  0020               	movlb	0	; select bank0
 12159  1361  00A6               	movwf	??_Flash_Memory_Main
 12160  1362  0826               	movf	??_Flash_Memory_Main,w
 12161  1363  00A7               	movwf	Flash_Memory_Main@key_Status
 12162                           
 12163                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12164  1364  0024               	movlb	4	; select bank4
 12165  1365  1C44               	btfss	(_Memory^(0+512)+36),0
 12166  1366  0008               	return
 12167                           
 12168                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12169  1367  0020               	movlb	0	; select bank0
 12170  1368  01A8               	clrf	_Flash_Memory_Main$3152
 12171  1369  319B  2321  3193   	fcall	_getMain_All_LightsStatus
 12172  136C  3800               	iorlw	0
 12173  136D  1D03               	skipz
 12174  136E  2B75               	goto	l7871
 12175  136F  0020               	movlb	0	; select bank0
 12176  1370  08A7               	movf	Flash_Memory_Main@key_Status,f
 12177  1371  1D03               	skipz
 12178  1372  2B75               	goto	l7871
 12179  1373  01A8               	clrf	_Flash_Memory_Main$3152
 12180  1374  0AA8               	incf	_Flash_Memory_Main$3152,f
 12181  1375                     l7871:	
 12182  1375  0020               	movlb	0	; select bank0
 12183  1376  0828               	movf	_Flash_Memory_Main$3152,w
 12184  1377  0024               	movlb	4	; select bank4
 12185  1378  10C4               	bcf	(_Memory^(0+512)+36),1
 12186  1379  1D03               	skipz
 12187  137A  14C4               	bsf	(_Memory^(0+512)+36),1
 12188                           
 12189                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12190  137B  1CC4               	btfss	(_Memory^(0+512)+36),1
 12191  137C  2B96               	goto	l1234
 12192                           
 12193                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12194  137D  15C4               	bsf	(_Memory^(0+512)+36),3
 12195                           
 12196                           ;MCU_B1.c: 985: Memory.Time++;
 12197  137E  3001               	movlw	1
 12198  137F  07C2               	addwf	(_Memory^(0+512)+34),f
 12199  1380  3000               	movlw	0
 12200  1381  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12201                           
 12202                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12203  1382  3022               	movlw	34
 12204  1383  3E20               	addlw	_Memory& (0+255)
 12205  1384  0086               	movwf	6
 12206  1385  3002               	movlw	2	; select bank4/5
 12207  1386  0087               	movwf	7
 12208  1387  3F40               	moviw [0]fsr1
 12209  1388  3A0A               	xorlw	10
 12210  1389  1D03               	skipz
 12211  138A  2B8D               	goto	u7775
 12212  138B  3F41               	moviw [1]fsr1
 12213  138C  3A00               	xorlw	0
 12214  138D                     u7775:	
 12215  138D  1D03               	skipz
 12216  138E  0008               	return
 12217                           
 12218                           ;MCU_B1.c: 987: Memory.Time = 0;
 12219  138F  01C2               	clrf	(_Memory^(0+512)+34)
 12220  1390  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12221                           
 12222                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12223  1391  1044               	bcf	(_Memory^(0+512)+36),0
 12224                           
 12225                           ;MCU_B1.c: 989: Memory.GO = 0;
 12226  1392  10C4               	bcf	(_Memory^(0+512)+36),1
 12227                           
 12228                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12229  1393  318A  22F8         	fcall	_Flash_Memory_Modify
 12230                           
 12231                           ;MCU_B1.c: 991: }
 12232                           ;MCU_B1.c: 992: } else {
 12233  1395  0008               	return
 12234  1396                     l1234:	
 12235                           
 12236                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12237  1396  1DC4               	btfss	(_Memory^(0+512)+36),3
 12238  1397  0008               	return
 12239                           
 12240                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12241  1398  11C4               	bcf	(_Memory^(0+512)+36),3
 12242                           
 12243                           ;MCU_B1.c: 995: Memory.Time = 0;
 12244  1399  01C2               	clrf	(_Memory^(0+512)+34)
 12245  139A  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12246  139B  0008               	return
 12247  139C                     __end_of_Flash_Memory_Main:	
 12248                           
 12249                           	psect	text77
 12250  1C55                     __ptext77:	
 12251 ;; *************** function _getAll_Sw_KeyStatus *****************
 12252 ;; Defined at:
 12253 ;;		line 278 in file "../src/Switch_B1.c"
 12254 ;; Parameters:    Size  Location     Type
 12255 ;;		None
 12256 ;; Auto vars:     Size  Location     Type
 12257 ;;  status          1    1[BANK0 ] unsigned char 
 12258 ;; Return value:  Size  Location     Type
 12259 ;;                  1    wreg      unsigned char 
 12260 ;; Registers used:
 12261 ;;		wreg, status,2
 12262 ;; Tracked objects:
 12263 ;;		On entry : 0/0
 12264 ;;		On exit  : 0/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;Total ram usage:        3 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; Hardware stack levels required when called:    5
 12274 ;; This function calls:
 12275 ;;		Nothing
 12276 ;; This function is called by:
 12277 ;;		_Flash_Memory_Main
 12278 ;; This function uses a non-reentrant model
 12279 ;;
 12280                           
 12281                           
 12282                           ;psect for function _getAll_Sw_KeyStatus
 12283  1C55                     _getAll_Sw_KeyStatus:	
 12284                           
 12285                           ;Switch_B1.c: 279: char status = 0;
 12286                           
 12287                           ;incstack = 0
 12288                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12289  1C55  0020               	movlb	0	; select bank0
 12290  1C56  01A1               	clrf	getAll_Sw_KeyStatus@status
 12291                           
 12292                           ;Switch_B1.c: 298: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12293  1C57  01A2               	clrf	_getAll_Sw_KeyStatus$6465
 12294  1C58  0AA2               	incf	_getAll_Sw_KeyStatus$6465,f
 12295  1C59  1F0C               	btfss	12,6	;volatile
 12296  1C5A  1A0C               	btfsc	12,4	;volatile
 12297  1C5B  2C60               	goto	l7429
 12298  1C5C  1C0C               	btfss	12,0	;volatile
 12299  1C5D  1B8C               	btfsc	12,7	;volatile
 12300  1C5E  2C60               	goto	l7429
 12301  1C5F  01A2               	clrf	_getAll_Sw_KeyStatus$6465
 12302  1C60                     l7429:	
 12303  1C60  0822               	movf	_getAll_Sw_KeyStatus$6465,w
 12304  1C61  00A0               	movwf	??_getAll_Sw_KeyStatus
 12305  1C62  0820               	movf	??_getAll_Sw_KeyStatus,w
 12306  1C63  00A1               	movwf	getAll_Sw_KeyStatus@status
 12307                           
 12308                           ;Switch_B1.c: 302: return status;
 12309  1C64  0821               	movf	getAll_Sw_KeyStatus@status,w
 12310  1C65  0008               	return
 12311  1C66                     __end_of_getAll_Sw_KeyStatus:	
 12312                           
 12313                           	psect	text78
 12314  0AF8                     __ptext78:	
 12315 ;; *************** function _Flash_Memory_Modify *****************
 12316 ;; Defined at:
 12317 ;;		line 1053 in file "../src/MCU_B1.c"
 12318 ;; Parameters:    Size  Location     Type
 12319 ;;		None
 12320 ;; Auto vars:     Size  Location     Type
 12321 ;;  i               1    5[BANK0 ] unsigned char 
 12322 ;; Return value:  Size  Location     Type
 12323 ;;		None               void
 12324 ;; Registers used:
 12325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12326 ;; Tracked objects:
 12327 ;;		On entry : 0/0
 12328 ;;		On exit  : 0/0
 12329 ;;		Unchanged: 0/0
 12330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12335 ;;Total ram usage:        2 bytes
 12336 ;; Hardware stack levels used:    1
 12337 ;; Hardware stack levels required when called:    7
 12338 ;; This function calls:
 12339 ;;		_Flash_Memory_Erasing
 12340 ;;		_Flash_Memory_Read
 12341 ;;		_Flash_Memory_Write
 12342 ;;		_setMemory_Data
 12343 ;; This function is called by:
 12344 ;;		_Flash_Memory_Main
 12345 ;; This function uses a non-reentrant model
 12346 ;;
 12347                           
 12348                           
 12349                           ;psect for function _Flash_Memory_Modify
 12350  0AF8                     _Flash_Memory_Modify:	
 12351                           
 12352                           ;MCU_B1.c: 1054: char i = 0;
 12353                           
 12354                           ;incstack = 0
 12355                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12356  0AF8  0020               	movlb	0	; select bank0
 12357  0AF9  01A5               	clrf	Flash_Memory_Modify@i
 12358                           
 12359                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12360  0AFA  01A5               	clrf	Flash_Memory_Modify@i
 12361  0AFB  3020               	movlw	32
 12362  0AFC  0225               	subwf	Flash_Memory_Modify@i,w
 12363  0AFD  1803               	btfsc	3,0
 12364  0AFE  2B14               	goto	l7447
 12365  0AFF                     l7441:	
 12366                           
 12367                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12368  0AFF  0825               	movf	Flash_Memory_Modify@i,w
 12369  0B00  319E  2648  318A   	fcall	_Flash_Memory_Read
 12370  0B03  0020               	movlb	0	; select bank0
 12371  0B04  00A4               	movwf	??_Flash_Memory_Modify
 12372  0B05  0825               	movf	Flash_Memory_Modify@i,w
 12373  0B06  3E20               	addlw	_Memory& (0+255)
 12374  0B07  0086               	movwf	6
 12375  0B08  3002               	movlw	2	; select bank4/5
 12376  0B09  0087               	movwf	7
 12377  0B0A  0824               	movf	??_Flash_Memory_Modify,w
 12378  0B0B  0081               	movwf	1
 12379  0B0C  3001               	movlw	1
 12380  0B0D  00A4               	movwf	??_Flash_Memory_Modify
 12381  0B0E  0824               	movf	??_Flash_Memory_Modify,w
 12382  0B0F  07A5               	addwf	Flash_Memory_Modify@i,f
 12383  0B10  3020               	movlw	32
 12384  0B11  0225               	subwf	Flash_Memory_Modify@i,w
 12385  0B12  1C03               	skipc
 12386  0B13  2AFF               	goto	l7441
 12387  0B14                     l7447:	
 12388                           
 12389                           ;MCU_B1.c: 1057: }
 12390                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12391  0B14  0021               	movlb	1	; select bank1
 12392  0B15  086E               	movf	_product^(0+128),w
 12393  0B16  0086               	movwf	6
 12394  0B17  3001               	movlw	1	; select bank2/3
 12395  0B18  0087               	movwf	7
 12396  0B19  3001               	movlw	1	; select bank2/3
 12397  0B1A  3F4C               	moviw [12]fsr1
 12398  0B1B  0020               	movlb	0	; select bank0
 12399  0B1C  00A0               	movwf	setMemory_Data@data
 12400  0B1D  3000               	movlw	0
 12401  0B1E  319B  239F  318A   	fcall	_setMemory_Data
 12402                           
 12403                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12404  0B21  0021               	movlb	1	; select bank1
 12405  0B22  086E               	movf	_product^(0+128),w
 12406  0B23  0086               	movwf	6
 12407  0B24  3001               	movlw	1	; select bank2/3
 12408  0B25  0087               	movwf	7
 12409  0B26  3001               	movlw	1	; select bank2/3
 12410  0B27  3F4D               	moviw [13]fsr1
 12411  0B28  0020               	movlb	0	; select bank0
 12412  0B29  00A0               	movwf	setMemory_Data@data
 12413  0B2A  3001               	movlw	1
 12414  0B2B  319B  239F  318A   	fcall	_setMemory_Data
 12415                           
 12416                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12417  0B2E  0021               	movlb	1	; select bank1
 12418  0B2F  086E               	movf	_product^(0+128),w
 12419  0B30  0086               	movwf	6
 12420  0B31  3001               	movlw	1	; select bank2/3
 12421  0B32  0087               	movwf	7
 12422  0B33  3001               	movlw	1	; select bank2/3
 12423  0B34  3F4E               	moviw [14]fsr1
 12424  0B35  0020               	movlb	0	; select bank0
 12425  0B36  00A0               	movwf	setMemory_Data@data
 12426  0B37  3002               	movlw	2
 12427  0B38  319B  239F  318A   	fcall	_setMemory_Data
 12428                           
 12429                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12430  0B3B  0021               	movlb	1	; select bank1
 12431  0B3C  086E               	movf	_product^(0+128),w
 12432  0B3D  0086               	movwf	6
 12433  0B3E  3001               	movlw	1	; select bank2/3
 12434  0B3F  0087               	movwf	7
 12435  0B40  3001               	movlw	1	; select bank2/3
 12436  0B41  3F55               	moviw [21]fsr1
 12437  0B42  0020               	movlb	0	; select bank0
 12438  0B43  00A0               	movwf	setMemory_Data@data
 12439  0B44  3003               	movlw	3
 12440  0B45  319B  239F  318A   	fcall	_setMemory_Data
 12441                           
 12442                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12443  0B48  0021               	movlb	1	; select bank1
 12444  0B49  086E               	movf	_product^(0+128),w
 12445  0B4A  0086               	movwf	6
 12446  0B4B  3001               	movlw	1	; select bank2/3
 12447  0B4C  0087               	movwf	7
 12448  0B4D  3001               	movlw	1	; select bank2/3
 12449  0B4E  3F56               	moviw [22]fsr1
 12450  0B4F  0020               	movlb	0	; select bank0
 12451  0B50  00A0               	movwf	setMemory_Data@data
 12452  0B51  3004               	movlw	4
 12453  0B52  319B  239F  318A   	fcall	_setMemory_Data
 12454                           
 12455                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12456  0B55  0021               	movlb	1	; select bank1
 12457  0B56  086E               	movf	_product^(0+128),w
 12458  0B57  0086               	movwf	6
 12459  0B58  3001               	movlw	1	; select bank2/3
 12460  0B59  0087               	movwf	7
 12461  0B5A  3001               	movlw	1	; select bank2/3
 12462  0B5B  3F57               	moviw [23]fsr1
 12463  0B5C  0020               	movlb	0	; select bank0
 12464  0B5D  00A0               	movwf	setMemory_Data@data
 12465  0B5E  3005               	movlw	5
 12466  0B5F  319B  239F  318A   	fcall	_setMemory_Data
 12467                           
 12468                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12469  0B62  0021               	movlb	1	; select bank1
 12470  0B63  1EB9               	btfss	(_myMain^(0+128)+10),5
 12471  0B64  2B6F               	goto	l7455
 12472                           
 12473                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12474  0B65  12B9               	bcf	(_myMain^(0+128)+10),5
 12475                           
 12476                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12477  0B66  30AA               	movlw	170
 12478  0B67  0020               	movlb	0	; select bank0
 12479  0B68  00A4               	movwf	??_Flash_Memory_Modify
 12480  0B69  0824               	movf	??_Flash_Memory_Modify,w
 12481  0B6A  00A0               	movwf	setMemory_Data@data
 12482  0B6B  301E               	movlw	30
 12483  0B6C  319B  239F  318A   	fcall	_setMemory_Data
 12484  0B6F                     l7455:	
 12485                           
 12486                           ;MCU_B1.c: 1068: }
 12487                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12488  0B6F  0024               	movlb	4	; select bank4
 12489  0B70  1D44               	btfss	(_Memory^(0+512)+36),2
 12490  0B71  2B76               	goto	l1258
 12491                           
 12492                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12493  0B72  1144               	bcf	(_Memory^(0+512)+36),2
 12494                           
 12495                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12496  0B73  0021               	movlb	1	; select bank1
 12497  0B74  11AF               	bcf	_myMain^(0+128),3
 12498                           
 12499                           ;MCU_B1.c: 1073: myMain.First = 0;
 12500  0B75  12AF               	bcf	_myMain^(0+128),5
 12501  0B76                     l1258:	
 12502                           
 12503                           ;MCU_B1.c: 1075: }
 12504                           ;MCU_B1.c: 1076: GIE = 0;
 12505  0B76  138B               	bcf	11,7	;volatile
 12506                           
 12507                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12508  0B77  319B  23AB  318A   	fcall	_Flash_Memory_Erasing
 12509                           
 12510                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12511  0B7A  3190  20C9         	fcall	_Flash_Memory_Write
 12512                           
 12513                           ;MCU_B1.c: 1079: GIE = 1;
 12514  0B7C  178B               	bsf	11,7	;volatile
 12515  0B7D  0008               	return
 12516  0B7E                     __end_of_Flash_Memory_Modify:	
 12517                           
 12518                           	psect	text79
 12519  1BAB                     __ptext79:	
 12520 ;; *************** function _Flash_Memory_Erasing *****************
 12521 ;; Defined at:
 12522 ;;		line 1042 in file "../src/MCU_B1.c"
 12523 ;; Parameters:    Size  Location     Type
 12524 ;;		None
 12525 ;; Auto vars:     Size  Location     Type
 12526 ;;		None
 12527 ;; Return value:  Size  Location     Type
 12528 ;;		None               void
 12529 ;; Registers used:
 12530 ;;		wreg, status,2, status,0, pclath, cstack
 12531 ;; Tracked objects:
 12532 ;;		On entry : 0/0
 12533 ;;		On exit  : 0/0
 12534 ;;		Unchanged: 0/0
 12535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;Total ram usage:        0 bytes
 12541 ;; Hardware stack levels used:    1
 12542 ;; Hardware stack levels required when called:    6
 12543 ;; This function calls:
 12544 ;;		_Flash_Memory_Unlock
 12545 ;; This function is called by:
 12546 ;;		_Flash_Memory_Modify
 12547 ;; This function uses a non-reentrant model
 12548 ;;
 12549                           
 12550                           
 12551                           ;psect for function _Flash_Memory_Erasing
 12552  1BAB                     _Flash_Memory_Erasing:	
 12553                           
 12554                           ;MCU_B1.c: 1043: CFGS = 0;
 12555                           
 12556                           ;incstack = 0
 12557                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12558  1BAB  0023               	movlb	3	; select bank3
 12559  1BAC  1315               	bcf	21,6	;volatile
 12560                           
 12561                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12562  1BAD  3030               	movlw	48
 12563  1BAE  0092               	movwf	18	;volatile
 12564                           
 12565                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12566  1BAF  0191               	clrf	17	;volatile
 12567                           
 12568                           ;MCU_B1.c: 1046: FREE = 1;
 12569  1BB0  1615               	bsf	21,4	;volatile
 12570                           
 12571                           ;MCU_B1.c: 1047: WREN = 1;
 12572  1BB1  1515               	bsf	21,2	;volatile
 12573                           
 12574                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12575  1BB2  319B  2318         	fcall	_Flash_Memory_Unlock
 12576                           
 12577                           ;MCU_B1.c: 1049: WREN = 0;
 12578  1BB4  0023               	movlb	3	; select bank3
 12579  1BB5  1115               	bcf	21,2	;volatile
 12580  1BB6  0008               	return
 12581  1BB7                     __end_of_Flash_Memory_Erasing:	
 12582                           
 12583                           	psect	text80
 12584  0F36                     __ptext80:	
 12585 ;; *************** function _Flash_Memory_Initialization *****************
 12586 ;; Defined at:
 12587 ;;		line 932 in file "../src/MCU_B1.c"
 12588 ;; Parameters:    Size  Location     Type
 12589 ;;		None
 12590 ;; Auto vars:     Size  Location     Type
 12591 ;;  value           1    5[BANK0 ] unsigned char 
 12592 ;; Return value:  Size  Location     Type
 12593 ;;		None               void
 12594 ;; Registers used:
 12595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12596 ;; Tracked objects:
 12597 ;;		On entry : 0/0
 12598 ;;		On exit  : 0/0
 12599 ;;		Unchanged: 0/0
 12600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;Total ram usage:        2 bytes
 12606 ;; Hardware stack levels used:    1
 12607 ;; Hardware stack levels required when called:    7
 12608 ;; This function calls:
 12609 ;;		_Flash_Memory_Read
 12610 ;;		_Flash_Memory_Write
 12611 ;;		_setMemory_Data
 12612 ;; This function is called by:
 12613 ;;		_main
 12614 ;; This function uses a non-reentrant model
 12615 ;;
 12616                           
 12617                           
 12618                           ;psect for function _Flash_Memory_Initialization
 12619  0F36                     _Flash_Memory_Initialization:	
 12620                           
 12621                           ;MCU_B1.c: 933: char value = 0;
 12622                           
 12623                           ;incstack = 0
 12624                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12625  0F36  0020               	movlb	0	; select bank0
 12626  0F37  01A5               	clrf	Flash_Memory_Initialization@value
 12627                           
 12628                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12629  0F38  301F               	movlw	31
 12630  0F39  319E  2648  318F   	fcall	_Flash_Memory_Read
 12631  0F3C  3AAA               	xorlw	170
 12632  0F3D  1D03               	skipz
 12633  0F3E  2FB8               	goto	l7845
 12634                           
 12635                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12636  0F3F  3000               	movlw	0
 12637  0F40  319E  2648  318F   	fcall	_Flash_Memory_Read
 12638  0F43  0020               	movlb	0	; select bank0
 12639  0F44  00A4               	movwf	??_Flash_Memory_Initialization
 12640  0F45  0021               	movlb	1	; select bank1
 12641  0F46  086E               	movf	_product^(0+128),w
 12642  0F47  3E0C               	addlw	12
 12643  0F48  0086               	movwf	6
 12644  0F49  3001               	movlw	1	; select bank2/3
 12645  0F4A  0087               	movwf	7
 12646  0F4B  0020               	movlb	0	; select bank0
 12647  0F4C  0824               	movf	??_Flash_Memory_Initialization,w
 12648  0F4D  0081               	movwf	1
 12649                           
 12650                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12651  0F4E  3001               	movlw	1
 12652  0F4F  319E  2648  318F   	fcall	_Flash_Memory_Read
 12653  0F52  0020               	movlb	0	; select bank0
 12654  0F53  00A4               	movwf	??_Flash_Memory_Initialization
 12655  0F54  0021               	movlb	1	; select bank1
 12656  0F55  086E               	movf	_product^(0+128),w
 12657  0F56  3E0D               	addlw	13
 12658  0F57  0086               	movwf	6
 12659  0F58  3001               	movlw	1	; select bank2/3
 12660  0F59  0087               	movwf	7
 12661  0F5A  0020               	movlb	0	; select bank0
 12662  0F5B  0824               	movf	??_Flash_Memory_Initialization,w
 12663  0F5C  0081               	movwf	1
 12664                           
 12665                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12666  0F5D  3002               	movlw	2
 12667  0F5E  319E  2648  318F   	fcall	_Flash_Memory_Read
 12668  0F61  0020               	movlb	0	; select bank0
 12669  0F62  00A4               	movwf	??_Flash_Memory_Initialization
 12670  0F63  0021               	movlb	1	; select bank1
 12671  0F64  086E               	movf	_product^(0+128),w
 12672  0F65  3E0E               	addlw	14
 12673  0F66  0086               	movwf	6
 12674  0F67  3001               	movlw	1	; select bank2/3
 12675  0F68  0087               	movwf	7
 12676  0F69  0020               	movlb	0	; select bank0
 12677  0F6A  0824               	movf	??_Flash_Memory_Initialization,w
 12678  0F6B  0081               	movwf	1
 12679                           
 12680                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12681  0F6C  3003               	movlw	3
 12682  0F6D  319E  2648  318F   	fcall	_Flash_Memory_Read
 12683  0F70  0020               	movlb	0	; select bank0
 12684  0F71  00A4               	movwf	??_Flash_Memory_Initialization
 12685  0F72  0021               	movlb	1	; select bank1
 12686  0F73  086E               	movf	_product^(0+128),w
 12687  0F74  3E15               	addlw	21
 12688  0F75  0086               	movwf	6
 12689  0F76  3001               	movlw	1	; select bank2/3
 12690  0F77  0087               	movwf	7
 12691  0F78  0020               	movlb	0	; select bank0
 12692  0F79  0824               	movf	??_Flash_Memory_Initialization,w
 12693  0F7A  0081               	movwf	1
 12694                           
 12695                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12696  0F7B  3004               	movlw	4
 12697  0F7C  319E  2648  318F   	fcall	_Flash_Memory_Read
 12698  0F7F  0020               	movlb	0	; select bank0
 12699  0F80  00A4               	movwf	??_Flash_Memory_Initialization
 12700  0F81  0021               	movlb	1	; select bank1
 12701  0F82  086E               	movf	_product^(0+128),w
 12702  0F83  3E16               	addlw	22
 12703  0F84  0086               	movwf	6
 12704  0F85  3001               	movlw	1	; select bank2/3
 12705  0F86  0087               	movwf	7
 12706  0F87  0020               	movlb	0	; select bank0
 12707  0F88  0824               	movf	??_Flash_Memory_Initialization,w
 12708  0F89  0081               	movwf	1
 12709                           
 12710                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12711  0F8A  3005               	movlw	5
 12712  0F8B  319E  2648  318F   	fcall	_Flash_Memory_Read
 12713  0F8E  0020               	movlb	0	; select bank0
 12714  0F8F  00A4               	movwf	??_Flash_Memory_Initialization
 12715  0F90  0021               	movlb	1	; select bank1
 12716  0F91  086E               	movf	_product^(0+128),w
 12717  0F92  3E17               	addlw	23
 12718  0F93  0086               	movwf	6
 12719  0F94  3001               	movlw	1	; select bank2/3
 12720  0F95  0087               	movwf	7
 12721  0F96  0020               	movlb	0	; select bank0
 12722  0F97  0824               	movf	??_Flash_Memory_Initialization,w
 12723  0F98  0081               	movwf	1
 12724                           
 12725                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12726  0F99  0021               	movlb	1	; select bank1
 12727  0F9A  086E               	movf	_product^(0+128),w
 12728  0F9B  3E0C               	addlw	12
 12729  0F9C  0086               	movwf	6
 12730  0F9D  3001               	movlw	1	; select bank2/3
 12731  0F9E  0087               	movwf	7
 12732  0F9F  0801               	movf	1,w
 12733  0FA0  3AFF               	xorlw	255
 12734  0FA1  1D03               	skipz
 12735  0FA2  0008               	return
 12736  0FA3  086E               	movf	_product^(0+128),w
 12737  0FA4  3E0D               	addlw	13
 12738  0FA5  0086               	movwf	6
 12739  0FA6  3001               	movlw	1	; select bank2/3
 12740  0FA7  0087               	movwf	7
 12741  0FA8  0801               	movf	1,w
 12742  0FA9  3AFF               	xorlw	255
 12743  0FAA  1D03               	skipz
 12744  0FAB  0008               	return
 12745  0FAC  086E               	movf	_product^(0+128),w
 12746  0FAD  3E0E               	addlw	14
 12747  0FAE  0086               	movwf	6
 12748  0FAF  3001               	movlw	1	; select bank2/3
 12749  0FB0  0087               	movwf	7
 12750  0FB1  0801               	movf	1,w
 12751  0FB2  3AFF               	xorlw	255
 12752  0FB3  1D03               	skipz
 12753  0FB4  0008               	return
 12754                           
 12755                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12756  0FB5  15AF               	bsf	_myMain^(0+128),3
 12757                           
 12758                           ;MCU_B1.c: 951: myMain.First = 1;
 12759  0FB6  16AF               	bsf	_myMain^(0+128),5
 12760                           
 12761                           ;MCU_B1.c: 952: }
 12762                           ;MCU_B1.c: 953: } else {
 12763  0FB7  0008               	return
 12764  0FB8                     l7845:	
 12765                           
 12766                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12767  0FB8  30FF               	movlw	255
 12768  0FB9  0020               	movlb	0	; select bank0
 12769  0FBA  00A4               	movwf	??_Flash_Memory_Initialization
 12770  0FBB  0824               	movf	??_Flash_Memory_Initialization,w
 12771  0FBC  00A0               	movwf	setMemory_Data@data
 12772  0FBD  3000               	movlw	0
 12773  0FBE  319B  239F  318F   	fcall	_setMemory_Data
 12774                           
 12775                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12776  0FC1  30FF               	movlw	255
 12777  0FC2  0020               	movlb	0	; select bank0
 12778  0FC3  00A4               	movwf	??_Flash_Memory_Initialization
 12779  0FC4  0824               	movf	??_Flash_Memory_Initialization,w
 12780  0FC5  00A0               	movwf	setMemory_Data@data
 12781  0FC6  3001               	movlw	1
 12782  0FC7  319B  239F  318F   	fcall	_setMemory_Data
 12783                           
 12784                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12785  0FCA  30FF               	movlw	255
 12786  0FCB  0020               	movlb	0	; select bank0
 12787  0FCC  00A4               	movwf	??_Flash_Memory_Initialization
 12788  0FCD  0824               	movf	??_Flash_Memory_Initialization,w
 12789  0FCE  00A0               	movwf	setMemory_Data@data
 12790  0FCF  3002               	movlw	2
 12791  0FD0  319B  239F  318F   	fcall	_setMemory_Data
 12792                           
 12793                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12794  0FD3  30FF               	movlw	255
 12795  0FD4  0020               	movlb	0	; select bank0
 12796  0FD5  00A4               	movwf	??_Flash_Memory_Initialization
 12797  0FD6  0824               	movf	??_Flash_Memory_Initialization,w
 12798  0FD7  00A0               	movwf	setMemory_Data@data
 12799  0FD8  3003               	movlw	3
 12800  0FD9  319B  239F  318F   	fcall	_setMemory_Data
 12801                           
 12802                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12803  0FDC  30FF               	movlw	255
 12804  0FDD  0020               	movlb	0	; select bank0
 12805  0FDE  00A4               	movwf	??_Flash_Memory_Initialization
 12806  0FDF  0824               	movf	??_Flash_Memory_Initialization,w
 12807  0FE0  00A0               	movwf	setMemory_Data@data
 12808  0FE1  3004               	movlw	4
 12809  0FE2  319B  239F  318F   	fcall	_setMemory_Data
 12810                           
 12811                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12812  0FE5  30FF               	movlw	255
 12813  0FE6  0020               	movlb	0	; select bank0
 12814  0FE7  00A4               	movwf	??_Flash_Memory_Initialization
 12815  0FE8  0824               	movf	??_Flash_Memory_Initialization,w
 12816  0FE9  00A0               	movwf	setMemory_Data@data
 12817  0FEA  3005               	movlw	5
 12818  0FEB  319B  239F  318F   	fcall	_setMemory_Data
 12819                           
 12820                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12821  0FEE  30AA               	movlw	170
 12822  0FEF  0020               	movlb	0	; select bank0
 12823  0FF0  00A4               	movwf	??_Flash_Memory_Initialization
 12824  0FF1  0824               	movf	??_Flash_Memory_Initialization,w
 12825  0FF2  00A0               	movwf	setMemory_Data@data
 12826  0FF3  301F               	movlw	31
 12827  0FF4  319B  239F  318F   	fcall	_setMemory_Data
 12828                           
 12829                           ;MCU_B1.c: 966: GIE = 0;
 12830  0FF7  138B               	bcf	11,7	;volatile
 12831                           
 12832                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12833  0FF8  3190  20C9         	fcall	_Flash_Memory_Write
 12834                           
 12835                           ;MCU_B1.c: 968: GIE = 1;
 12836  0FFA  178B               	bsf	11,7	;volatile
 12837                           
 12838                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12839  0FFB  0021               	movlb	1	; select bank1
 12840  0FFC  15AF               	bsf	_myMain^(0+128),3
 12841                           
 12842                           ;MCU_B1.c: 970: myMain.First = 1;
 12843  0FFD  16AF               	bsf	_myMain^(0+128),5
 12844                           
 12845                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12846  0FFE  1639               	bsf	(_myMain^(0+128)+10),4
 12847  0FFF  0008               	return
 12848  1000                     __end_of_Flash_Memory_Initialization:	
 12849                           
 12850                           	psect	text81
 12851  1B9F                     __ptext81:	
 12852 ;; *************** function _setMemory_Data *****************
 12853 ;; Defined at:
 12854 ;;		line 1094 in file "../src/MCU_B1.c"
 12855 ;; Parameters:    Size  Location     Type
 12856 ;;  address         1    wreg     unsigned char 
 12857 ;;  data            1    0[BANK0 ] unsigned char 
 12858 ;; Auto vars:     Size  Location     Type
 12859 ;;  address         1    2[BANK0 ] unsigned char 
 12860 ;; Return value:  Size  Location     Type
 12861 ;;		None               void
 12862 ;; Registers used:
 12863 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12864 ;; Tracked objects:
 12865 ;;		On entry : 0/0
 12866 ;;		On exit  : 0/0
 12867 ;;		Unchanged: 0/0
 12868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12869 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12872 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12873 ;;Total ram usage:        3 bytes
 12874 ;; Hardware stack levels used:    1
 12875 ;; Hardware stack levels required when called:    5
 12876 ;; This function calls:
 12877 ;;		Nothing
 12878 ;; This function is called by:
 12879 ;;		_Flash_Memory_Initialization
 12880 ;;		_Flash_Memory_Modify
 12881 ;; This function uses a non-reentrant model
 12882 ;;
 12883                           
 12884                           
 12885                           ;psect for function _setMemory_Data
 12886  1B9F                     _setMemory_Data:	
 12887                           
 12888                           ;incstack = 0
 12889                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12890                           ;setMemory_Data@address stored from wreg
 12891  1B9F  0020               	movlb	0	; select bank0
 12892  1BA0  00A2               	movwf	setMemory_Data@address
 12893                           
 12894                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 12895  1BA1  0820               	movf	setMemory_Data@data,w
 12896  1BA2  00A1               	movwf	??_setMemory_Data
 12897  1BA3  0822               	movf	setMemory_Data@address,w
 12898  1BA4  3E20               	addlw	_Memory& (0+255)
 12899  1BA5  0086               	movwf	6
 12900  1BA6  3002               	movlw	2	; select bank4/5
 12901  1BA7  0087               	movwf	7
 12902  1BA8  0821               	movf	??_setMemory_Data,w
 12903  1BA9  0081               	movwf	1
 12904  1BAA  0008               	return
 12905  1BAB                     __end_of_setMemory_Data:	
 12906                           
 12907                           	psect	text82
 12908  10C9                     __ptext82:	
 12909 ;; *************** function _Flash_Memory_Write *****************
 12910 ;; Defined at:
 12911 ;;		line 1023 in file "../src/MCU_B1.c"
 12912 ;; Parameters:    Size  Location     Type
 12913 ;;		None
 12914 ;; Auto vars:     Size  Location     Type
 12915 ;;  i               1    1[BANK0 ] unsigned char 
 12916 ;; Return value:  Size  Location     Type
 12917 ;;		None               void
 12918 ;; Registers used:
 12919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12920 ;; Tracked objects:
 12921 ;;		On entry : 0/0
 12922 ;;		On exit  : 0/0
 12923 ;;		Unchanged: 0/0
 12924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12929 ;;Total ram usage:        2 bytes
 12930 ;; Hardware stack levels used:    1
 12931 ;; Hardware stack levels required when called:    6
 12932 ;; This function calls:
 12933 ;;		_Flash_Memory_Unlock
 12934 ;; This function is called by:
 12935 ;;		_Flash_Memory_Initialization
 12936 ;;		_Flash_Memory_Modify
 12937 ;; This function uses a non-reentrant model
 12938 ;;
 12939                           
 12940                           
 12941                           ;psect for function _Flash_Memory_Write
 12942  10C9                     _Flash_Memory_Write:	
 12943                           
 12944                           ;MCU_B1.c: 1024: char i = 0;
 12945                           
 12946                           ;incstack = 0
 12947                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12948  10C9  0020               	movlb	0	; select bank0
 12949  10CA  01A1               	clrf	Flash_Memory_Write@i
 12950                           
 12951                           ;MCU_B1.c: 1025: CFGS = 0;
 12952  10CB  0023               	movlb	3	; select bank3
 12953  10CC  1315               	bcf	21,6	;volatile
 12954                           
 12955                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 12956  10CD  3030               	movlw	48
 12957  10CE  0092               	movwf	18	;volatile
 12958                           
 12959                           ;MCU_B1.c: 1027: PMDATH = 0;
 12960  10CF  0194               	clrf	20	;volatile
 12961                           
 12962                           ;MCU_B1.c: 1028: FREE = 0;
 12963  10D0  1215               	bcf	21,4	;volatile
 12964                           
 12965                           ;MCU_B1.c: 1029: LWLO = 1;
 12966  10D1  1695               	bsf	21,5	;volatile
 12967                           
 12968                           ;MCU_B1.c: 1030: WREN = 1;
 12969  10D2  1515               	bsf	21,2	;volatile
 12970                           
 12971                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 12972  10D3  0020               	movlb	0	; select bank0
 12973  10D4  01A1               	clrf	Flash_Memory_Write@i
 12974  10D5  3020               	movlw	32
 12975  10D6  0221               	subwf	Flash_Memory_Write@i,w
 12976  10D7  1803               	btfsc	3,0
 12977  10D8  28F1               	goto	l1248
 12978  10D9                     l6999:	
 12979                           
 12980                           ;MCU_B1.c: 1032: PMADRL = i;
 12981  10D9  0821               	movf	Flash_Memory_Write@i,w
 12982  10DA  0023               	movlb	3	; select bank3
 12983  10DB  0091               	movwf	17	;volatile
 12984                           
 12985                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 12986  10DC  0020               	movlb	0	; select bank0
 12987  10DD  0821               	movf	Flash_Memory_Write@i,w
 12988  10DE  3E20               	addlw	_Memory& (0+255)
 12989  10DF  0086               	movwf	6
 12990  10E0  3002               	movlw	2	; select bank4/5
 12991  10E1  0087               	movwf	7
 12992  10E2  0801               	movf	1,w
 12993  10E3  0023               	movlb	3	; select bank3
 12994  10E4  0093               	movwf	19	;volatile
 12995                           
 12996                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 12997  10E5  319B  2318  3190   	fcall	_Flash_Memory_Unlock
 12998  10E8  3001               	movlw	1
 12999  10E9  0020               	movlb	0	; select bank0
 13000  10EA  00A0               	movwf	??_Flash_Memory_Write
 13001  10EB  0820               	movf	??_Flash_Memory_Write,w
 13002  10EC  07A1               	addwf	Flash_Memory_Write@i,f
 13003  10ED  3020               	movlw	32
 13004  10EE  0221               	subwf	Flash_Memory_Write@i,w
 13005  10EF  1C03               	skipc
 13006  10F0  28D9               	goto	l6999
 13007  10F1                     l1248:	
 13008                           
 13009                           ;MCU_B1.c: 1035: }
 13010                           ;MCU_B1.c: 1036: LWLO = 0;
 13011  10F1  0023               	movlb	3	; select bank3
 13012  10F2  1295               	bcf	21,5	;volatile
 13013                           
 13014                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 13015  10F3  319B  2318         	fcall	_Flash_Memory_Unlock
 13016                           
 13017                           ;MCU_B1.c: 1038: WREN = 0;
 13018  10F5  0023               	movlb	3	; select bank3
 13019  10F6  1115               	bcf	21,2	;volatile
 13020  10F7  0008               	return
 13021  10F8                     __end_of_Flash_Memory_Write:	
 13022                           
 13023                           	psect	text83
 13024  1B18                     __ptext83:	
 13025 ;; *************** function _Flash_Memory_Unlock *****************
 13026 ;; Defined at:
 13027 ;;		line 1002 in file "../src/MCU_B1.c"
 13028 ;; Parameters:    Size  Location     Type
 13029 ;;		None
 13030 ;; Auto vars:     Size  Location     Type
 13031 ;;		None
 13032 ;; Return value:  Size  Location     Type
 13033 ;;		None               void
 13034 ;; Registers used:
 13035 ;;		wreg
 13036 ;; Tracked objects:
 13037 ;;		On entry : 0/0
 13038 ;;		On exit  : 0/0
 13039 ;;		Unchanged: 0/0
 13040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;Total ram usage:        0 bytes
 13046 ;; Hardware stack levels used:    1
 13047 ;; Hardware stack levels required when called:    5
 13048 ;; This function calls:
 13049 ;;		Nothing
 13050 ;; This function is called by:
 13051 ;;		_Flash_Memory_Write
 13052 ;;		_Flash_Memory_Erasing
 13053 ;; This function uses a non-reentrant model
 13054 ;;
 13055                           
 13056                           
 13057                           ;psect for function _Flash_Memory_Unlock
 13058  1B18                     _Flash_Memory_Unlock:	
 13059                           
 13060                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13061                           
 13062                           ;incstack = 0
 13063                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13064  1B18  3055               	movlw	85
 13065  1B19  0023               	movlb	3	; select bank3
 13066  1B1A  0096               	movwf	22	;volatile
 13067                           
 13068                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13069  1B1B  30AA               	movlw	170
 13070  1B1C  0096               	movwf	22	;volatile
 13071                           
 13072                           ;MCU_B1.c: 1005: WR = 1;
 13073  1B1D  1495               	bsf	21,1	;volatile
 13074                           
 13075                           ;MCU_B1.c: 1006: __nop();
 13076  1B1E  0000               	nop
 13077                           
 13078                           ;MCU_B1.c: 1007: __nop();
 13079  1B1F  0000               	nop
 13080  1B20  0008               	return
 13081  1B21                     __end_of_Flash_Memory_Unlock:	
 13082                           
 13083                           	psect	text84
 13084  1E48                     __ptext84:	
 13085 ;; *************** function _Flash_Memory_Read *****************
 13086 ;; Defined at:
 13087 ;;		line 1011 in file "../src/MCU_B1.c"
 13088 ;; Parameters:    Size  Location     Type
 13089 ;;  address         1    wreg     unsigned char 
 13090 ;; Auto vars:     Size  Location     Type
 13091 ;;  address         1    2[BANK0 ] unsigned char 
 13092 ;;  ret             1    3[BANK0 ] unsigned char 
 13093 ;;  i               1    1[BANK0 ] unsigned char 
 13094 ;; Return value:  Size  Location     Type
 13095 ;;                  1    wreg      unsigned char 
 13096 ;; Registers used:
 13097 ;;		wreg, status,2
 13098 ;; Tracked objects:
 13099 ;;		On entry : 0/0
 13100 ;;		On exit  : 0/0
 13101 ;;		Unchanged: 0/0
 13102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13104 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;Total ram usage:        4 bytes
 13108 ;; Hardware stack levels used:    1
 13109 ;; Hardware stack levels required when called:    5
 13110 ;; This function calls:
 13111 ;;		Nothing
 13112 ;; This function is called by:
 13113 ;;		_Flash_Memory_Initialization
 13114 ;;		_Flash_Memory_Modify
 13115 ;; This function uses a non-reentrant model
 13116 ;;
 13117                           
 13118                           
 13119                           ;psect for function _Flash_Memory_Read
 13120  1E48                     _Flash_Memory_Read:	
 13121                           
 13122                           ;incstack = 0
 13123                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13124                           ;Flash_Memory_Read@address stored from wreg
 13125  1E48  0020               	movlb	0	; select bank0
 13126  1E49  00A2               	movwf	Flash_Memory_Read@address
 13127                           
 13128                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13129  1E4A  01A1               	clrf	Flash_Memory_Read@i
 13130  1E4B  01A3               	clrf	Flash_Memory_Read@ret
 13131                           
 13132                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13133  1E4C  3030               	movlw	48
 13134  1E4D  0023               	movlb	3	; select bank3
 13135  1E4E  0092               	movwf	18	;volatile
 13136                           
 13137                           ;MCU_B1.c: 1014: PMADRL = address;
 13138  1E4F  0020               	movlb	0	; select bank0
 13139  1E50  0822               	movf	Flash_Memory_Read@address,w
 13140  1E51  0023               	movlb	3	; select bank3
 13141  1E52  0091               	movwf	17	;volatile
 13142                           
 13143                           ;MCU_B1.c: 1015: CFGS = 0;
 13144  1E53  1315               	bcf	21,6	;volatile
 13145                           
 13146                           ;MCU_B1.c: 1016: RD = 1;
 13147  1E54  1415               	bsf	21,0	;volatile
 13148                           
 13149                           ;MCU_B1.c: 1017: i = PMDATH;
 13150  1E55  0814               	movf	20,w	;volatile
 13151  1E56  0020               	movlb	0	; select bank0
 13152  1E57  00A0               	movwf	??_Flash_Memory_Read
 13153  1E58  0820               	movf	??_Flash_Memory_Read,w
 13154  1E59  00A1               	movwf	Flash_Memory_Read@i
 13155                           
 13156                           ;MCU_B1.c: 1018: ret = PMDATL;
 13157  1E5A  0023               	movlb	3	; select bank3
 13158  1E5B  0813               	movf	19,w	;volatile
 13159  1E5C  0020               	movlb	0	; select bank0
 13160  1E5D  00A0               	movwf	??_Flash_Memory_Read
 13161  1E5E  0820               	movf	??_Flash_Memory_Read,w
 13162  1E5F  00A3               	movwf	Flash_Memory_Read@ret
 13163                           
 13164                           ;MCU_B1.c: 1019: return ret;
 13165  1E60  0823               	movf	Flash_Memory_Read@ret,w
 13166  1E61  0008               	return
 13167  1E62                     __end_of_Flash_Memory_Read:	
 13168                           
 13169                           	psect	text85
 13170  054F                     __ptext85:	
 13171 ;; *************** function _Exception_Main *****************
 13172 ;; Defined at:
 13173 ;;		line 499 in file "../src/Main_B1.c"
 13174 ;; Parameters:    Size  Location     Type
 13175 ;;		None
 13176 ;; Auto vars:     Size  Location     Type
 13177 ;;  i               2   18[BANK0 ] int 
 13178 ;;  i               2   16[BANK0 ] int 
 13179 ;;  lights          1   21[BANK0 ] unsigned char 
 13180 ;;  error           1   20[BANK0 ] unsigned char 
 13181 ;;  count           1   15[BANK0 ] unsigned char 
 13182 ;;  status          1   14[BANK0 ] unsigned char 
 13183 ;; Return value:  Size  Location     Type
 13184 ;;		None               void
 13185 ;; Registers used:
 13186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13187 ;; Tracked objects:
 13188 ;;		On entry : 0/0
 13189 ;;		On exit  : 0/0
 13190 ;;		Unchanged: 0/0
 13191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13193 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13194 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;Total ram usage:        9 bytes
 13197 ;; Hardware stack levels used:    1
 13198 ;; Hardware stack levels required when called:    7
 13199 ;; This function calls:
 13200 ;;		_getDimmerLights_Line
 13201 ;;		_getDimmerLights_Status
 13202 ;;		_getMain_All_Error_Status
 13203 ;;		_getMain_All_LightsStatus
 13204 ;;		_setBuz
 13205 ;;		_setDimmerLights_SwOff
 13206 ;;		_setLED
 13207 ;; This function is called by:
 13208 ;;		_main
 13209 ;; This function uses a non-reentrant model
 13210 ;;
 13211                           
 13212                           
 13213                           ;psect for function _Exception_Main
 13214  054F                     _Exception_Main:	
 13215                           
 13216                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13217                           
 13218                           ;incstack = 0
 13219                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13220  054F  3000               	movlw	0
 13221  0550  3190  20F8  3185   	fcall	_getMain_All_Error_Status
 13222  0553  0020               	movlb	0	; select bank0
 13223  0554  00AD               	movwf	??_Exception_Main
 13224  0555  082D               	movf	??_Exception_Main,w
 13225  0556  00B4               	movwf	Exception_Main@error
 13226                           
 13227                           ;Main_B1.c: 501: char lights = 0, count = 1;
 13228  0557  01B5               	clrf	Exception_Main@lights
 13229  0558  01AF               	clrf	Exception_Main@count
 13230  0559  0AAF               	incf	Exception_Main@count,f
 13231                           
 13232                           ;Main_B1.c: 502: char status = 0;
 13233  055A  01AE               	clrf	Exception_Main@status
 13234                           
 13235                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13236  055B  0021               	movlb	1	; select bank1
 13237  055C  1DB9               	btfss	(_myMain^(0+128)+10),3
 13238  055D  2D6D               	goto	l8193
 13239                           
 13240                           ;Main_B1.c: 505: if (error == 0) {
 13241  055E  0020               	movlb	0	; select bank0
 13242  055F  08B4               	movf	Exception_Main@error,f
 13243  0560  1D03               	skipz
 13244  0561  0008               	return
 13245                           
 13246                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13247  0562  0021               	movlb	1	; select bank1
 13248  0563  11B9               	bcf	(_myMain^(0+128)+10),3
 13249                           
 13250                           ;Main_B1.c: 509: setLED(99, 10);
 13251  0564  300A               	movlw	10
 13252  0565  0020               	movlb	0	; select bank0
 13253  0566  00AD               	movwf	??_Exception_Main
 13254  0567  082D               	movf	??_Exception_Main,w
 13255  0568  00A2               	movwf	setLED@command
 13256  0569  3063               	movlw	99
 13257  056A  3192  22A6         	fcall	_setLED
 13258                           
 13259                           ;Main_B1.c: 522: }
 13260                           ;Main_B1.c: 523: } else {
 13261  056C  0008               	return
 13262  056D                     l8193:	
 13263                           
 13264                           ;Main_B1.c: 524: if (error != 0) {
 13265  056D  0020               	movlb	0	; select bank0
 13266  056E  0834               	movf	Exception_Main@error,w
 13267  056F  1903               	btfsc	3,2
 13268  0570  0008               	return
 13269                           
 13270                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13271  0571  0021               	movlb	1	; select bank1
 13272  0572  15B9               	bsf	(_myMain^(0+128)+10),3
 13273                           
 13274                           ;Main_B1.c: 527: setLED(99, 11);
 13275  0573  300B               	movlw	11
 13276  0574  0020               	movlb	0	; select bank0
 13277  0575  00AD               	movwf	??_Exception_Main
 13278  0576  082D               	movf	??_Exception_Main,w
 13279  0577  00A2               	movwf	setLED@command
 13280  0578  3063               	movlw	99
 13281  0579  3192  22A6  3185   	fcall	_setLED
 13282                           
 13283                           ;Main_B1.c: 538: switch (error) {
 13284  057C  2E19               	goto	l8241
 13285  057D                     l8199:	
 13286                           ;Main_B1.c: 539: case 2:
 13287                           
 13288                           
 13289                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13290  057D  319B  2321  3185   	fcall	_getMain_All_LightsStatus
 13291  0580  3A01               	xorlw	1
 13292  0581  1D03               	skipz
 13293  0582  2D8C               	goto	l8203
 13294                           
 13295                           ;Main_B1.c: 547: setBuz(10, 300);
 13296  0583  302C               	movlw	44
 13297  0584  0020               	movlb	0	; select bank0
 13298  0585  00A9               	movwf	setBuz@time
 13299  0586  3001               	movlw	1
 13300  0587  00AA               	movwf	setBuz@time+1
 13301  0588  300A               	movlw	10
 13302  0589  3194  2490  3185   	fcall	_setBuz
 13303  058C                     l8203:	
 13304                           
 13305                           ;Main_B1.c: 548: }
 13306                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13307  058C  0020               	movlb	0	; select bank0
 13308  058D  01B0               	clrf	Exception_Main@i
 13309  058E  01B1               	clrf	Exception_Main@i+1
 13310  058F                     l8213:	
 13311  058F  0831               	movf	Exception_Main@i+1,w
 13312  0590  3A80               	xorlw	128
 13313  0591  00AD               	movwf	??_Exception_Main
 13314  0592  3080               	movlw	128
 13315  0593  022D               	subwf	??_Exception_Main,w
 13316  0594  1D03               	skipz
 13317  0595  2D98               	goto	u8395
 13318  0596  082F               	movf	Exception_Main@count,w
 13319  0597  0230               	subwf	Exception_Main@i,w
 13320  0598                     u8395:	
 13321  0598  1803               	btfsc	3,0
 13322  0599  2DBA               	goto	u8390
 13323                           
 13324                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13325  059A  0020               	movlb	0	; select bank0
 13326  059B  0830               	movf	Exception_Main@i,w
 13327  059C  3E01               	addlw	1
 13328  059D  319C  2422  3185   	fcall	_getDimmerLights_Status
 13329  05A0  3A01               	xorlw	1
 13330  05A1  1D03               	skipz
 13331  05A2  2DB4               	goto	l8211
 13332                           
 13333                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13334  05A3  0021               	movlb	1	; select bank1
 13335  05A4  084C               	movf	_DimmerLights^(0+128),w
 13336  05A5  0086               	movwf	6
 13337  05A6  3001               	movlw	1	; select bank2/3
 13338  05A7  0087               	movwf	7
 13339  05A8  1401               	bsf	1,0
 13340                           
 13341                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13342  05A9  0A4C               	incf	_DimmerLights^(0+128),w
 13343  05AA  0086               	movwf	6
 13344  05AB  3001               	movlw	1	; select bank2/3
 13345  05AC  0087               	movwf	7
 13346  05AD  1001               	bcf	1,0
 13347                           
 13348                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13349  05AE  0020               	movlb	0	; select bank0
 13350  05AF  0830               	movf	Exception_Main@i,w
 13351  05B0  3E01               	addlw	1
 13352  05B1  3192  226D  3185   	fcall	_setDimmerLights_SwOff
 13353  05B4                     l8211:	
 13354  05B4  3001               	movlw	1
 13355  05B5  0020               	movlb	0	; select bank0
 13356  05B6  07B0               	addwf	Exception_Main@i,f
 13357  05B7  3000               	movlw	0
 13358  05B8  3DB1               	addwfc	Exception_Main@i+1,f
 13359  05B9  2D8F               	goto	l8213
 13360  05BA                     u8390:	
 13361  05BA  0020               	movlb	0	; select bank0
 13362  05BB  0008               	return
 13363  05BC                     l8215:	
 13364                           ;Main_B1.c: 561: case 3:
 13365                           
 13366                           ;Main_B1.c: 556: }
 13367                           ;Main_B1.c: 557: }
 13368                           ;Main_B1.c: 560: break;
 13369                           
 13370                           
 13371                           ;Main_B1.c: 563: setBuz(5, 300);
 13372  05BC  302C               	movlw	44
 13373  05BD  0020               	movlb	0	; select bank0
 13374  05BE  00A9               	movwf	setBuz@time
 13375  05BF  3001               	movlw	1
 13376  05C0  00AA               	movwf	setBuz@time+1
 13377  05C1  3005               	movlw	5
 13378  05C2  3194  2490  3185   	fcall	_setBuz
 13379                           
 13380                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13381  05C5  319B  232B  3185   	fcall	_getDimmerLights_Line
 13382  05C8  0020               	movlb	0	; select bank0
 13383  05C9  00AD               	movwf	??_Exception_Main
 13384  05CA  082D               	movf	??_Exception_Main,w
 13385  05CB  00B5               	movwf	Exception_Main@lights
 13386                           
 13387                           ;Main_B1.c: 565: if (lights == 0) {
 13388  05CC  08B5               	movf	Exception_Main@lights,f
 13389  05CD  1D03               	skipz
 13390  05CE  2DFE               	goto	l8233
 13391                           
 13392                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13393  05CF  01B2               	clrf	Exception_Main@i_3624
 13394  05D0  01B3               	clrf	Exception_Main@i_3624+1
 13395  05D1                     l8231:	
 13396  05D1  0833               	movf	Exception_Main@i_3624+1,w
 13397  05D2  3A80               	xorlw	128
 13398  05D3  00AD               	movwf	??_Exception_Main
 13399  05D4  3080               	movlw	128
 13400  05D5  022D               	subwf	??_Exception_Main,w
 13401  05D6  1D03               	skipz
 13402  05D7  2DDA               	goto	u8425
 13403  05D8  082F               	movf	Exception_Main@count,w
 13404  05D9  0232               	subwf	Exception_Main@i_3624,w
 13405  05DA                     u8425:	
 13406  05DA  1803               	btfsc	3,0
 13407  05DB  2DFC               	goto	u8420
 13408                           
 13409                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13410  05DC  0020               	movlb	0	; select bank0
 13411  05DD  0832               	movf	Exception_Main@i_3624,w
 13412  05DE  3E01               	addlw	1
 13413  05DF  319C  2422  3185   	fcall	_getDimmerLights_Status
 13414  05E2  3A01               	xorlw	1
 13415  05E3  1D03               	skipz
 13416  05E4  2DF6               	goto	l8229
 13417                           
 13418                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13419  05E5  0021               	movlb	1	; select bank1
 13420  05E6  084C               	movf	_DimmerLights^(0+128),w
 13421  05E7  0086               	movwf	6
 13422  05E8  3001               	movlw	1	; select bank2/3
 13423  05E9  0087               	movwf	7
 13424  05EA  1401               	bsf	1,0
 13425                           
 13426                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13427  05EB  0A4C               	incf	_DimmerLights^(0+128),w
 13428  05EC  0086               	movwf	6
 13429  05ED  3001               	movlw	1	; select bank2/3
 13430  05EE  0087               	movwf	7
 13431  05EF  1001               	bcf	1,0
 13432                           
 13433                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13434  05F0  0020               	movlb	0	; select bank0
 13435  05F1  0832               	movf	Exception_Main@i_3624,w
 13436  05F2  3E01               	addlw	1
 13437  05F3  3192  226D  3185   	fcall	_setDimmerLights_SwOff
 13438  05F6                     l8229:	
 13439  05F6  3001               	movlw	1
 13440  05F7  0020               	movlb	0	; select bank0
 13441  05F8  07B2               	addwf	Exception_Main@i_3624,f
 13442  05F9  3000               	movlw	0
 13443  05FA  3DB3               	addwfc	Exception_Main@i_3624+1,f
 13444  05FB  2DD1               	goto	l8231
 13445  05FC                     u8420:	
 13446  05FC  0020               	movlb	0	; select bank0
 13447  05FD  0008               	return
 13448  05FE                     l8233:	
 13449                           ;Main_B1.c: 573: }
 13450                           ;Main_B1.c: 574: }
 13451                           ;Main_B1.c: 575: } else {
 13452                           
 13453                           
 13454                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13455  05FE  0020               	movlb	0	; select bank0
 13456  05FF  0835               	movf	Exception_Main@lights,w
 13457  0600  319C  2422  3185   	fcall	_getDimmerLights_Status
 13458  0603  3A01               	xorlw	1
 13459  0604  1903               	btfsc	3,2
 13460  0605  2E08               	goto	l8235
 13461  0606  0020               	movlb	0	; select bank0
 13462  0607  0008               	return
 13463  0608                     l8235:	
 13464                           
 13465                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13466  0608  0021               	movlb	1	; select bank1
 13467  0609  084C               	movf	_DimmerLights^(0+128),w
 13468  060A  0086               	movwf	6
 13469  060B  3001               	movlw	1	; select bank2/3
 13470  060C  0087               	movwf	7
 13471  060D  1401               	bsf	1,0
 13472                           
 13473                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13474  060E  0A4C               	incf	_DimmerLights^(0+128),w
 13475  060F  0086               	movwf	6
 13476  0610  3001               	movlw	1	; select bank2/3
 13477  0611  0087               	movwf	7
 13478  0612  1001               	bcf	1,0
 13479                           
 13480                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13481  0613  0020               	movlb	0	; select bank0
 13482  0614  0835               	movf	Exception_Main@lights,w
 13483  0615  3192  226D         	fcall	_setDimmerLights_SwOff
 13484  0617  0020               	movlb	0	; select bank0
 13485  0618  0008               	return
 13486  0619                     l8241:	
 13487                           ;Main_B1.c: 586: }
 13488                           
 13489                           ;Main_B1.c: 582: }
 13490                           ;Main_B1.c: 583: }
 13491                           ;Main_B1.c: 585: break;
 13492                           
 13493  0619  0020               	movlb	0	; select bank0
 13494  061A  0834               	movf	Exception_Main@error,w
 13495                           
 13496                           ; Switch size 1, requested type "space"
 13497                           ; Number of cases is 2, Range of values is 2 to 3
 13498                           ; switch strategies available:
 13499                           ; Name         Instructions Cycles
 13500                           ; simple_byte            7     4 (average)
 13501                           ; direct_byte           13     9 (fixed)
 13502                           ; jumptable            263     9 (fixed)
 13503                           ;	Chosen strategy is simple_byte
 13504  061B  3A02               	xorlw	2	; case 2
 13505  061C  1903               	skipnz
 13506  061D  2D7D               	goto	l8199
 13507  061E  3A01               	xorlw	1	; case 3
 13508  061F  1903               	skipnz
 13509  0620  2DBC               	goto	l8215
 13510  0621  2E23               	goto	l1490
 13511  0622  0008               	return
 13512  0623                     l1490:	
 13513  0623  0008               	return
 13514  0624                     __end_of_Exception_Main:	
 13515                           
 13516                           	psect	text86
 13517  1B2B                     __ptext86:	
 13518 ;; *************** function _getDimmerLights_Line *****************
 13519 ;; Defined at:
 13520 ;;		line 1055 in file "../src/Dimmer_B1.c"
 13521 ;; Parameters:    Size  Location     Type
 13522 ;;		None
 13523 ;; Auto vars:     Size  Location     Type
 13524 ;;  line            1    0[BANK0 ] unsigned char 
 13525 ;; Return value:  Size  Location     Type
 13526 ;;                  1    wreg      unsigned char 
 13527 ;; Registers used:
 13528 ;;		wreg, status,2
 13529 ;; Tracked objects:
 13530 ;;		On entry : 0/0
 13531 ;;		On exit  : 0/0
 13532 ;;		Unchanged: 0/0
 13533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13538 ;;Total ram usage:        1 bytes
 13539 ;; Hardware stack levels used:    1
 13540 ;; Hardware stack levels required when called:    5
 13541 ;; This function calls:
 13542 ;;		Nothing
 13543 ;; This function is called by:
 13544 ;;		_Exception_Main
 13545 ;; This function uses a non-reentrant model
 13546 ;;
 13547                           
 13548                           
 13549                           ;psect for function _getDimmerLights_Line
 13550  1B2B                     _getDimmerLights_Line:	
 13551                           
 13552                           ;Dimmer_B1.c: 1056: char line = 0;
 13553                           
 13554                           ;incstack = 0
 13555                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13556  1B2B  0020               	movlb	0	; select bank0
 13557  1B2C  01A0               	clrf	getDimmerLights_Line@line
 13558                           
 13559                           ;Dimmer_B1.c: 1058: if (DimmerLights1.Line == 1) {
 13560  1B2D  0022               	movlb	2	; select bank2
 13561  1B2E  1CE1               	btfss	(_DimmerLights1^(0+256)+1),1
 13562  1B2F  2B33               	goto	l7249
 13563                           
 13564                           ;Dimmer_B1.c: 1059: line = 1;
 13565  1B30  0020               	movlb	0	; select bank0
 13566  1B31  01A0               	clrf	getDimmerLights_Line@line
 13567  1B32  0AA0               	incf	getDimmerLights_Line@line,f
 13568  1B33                     l7249:	
 13569                           
 13570                           ;Dimmer_B1.c: 1060: }
 13571                           ;Dimmer_B1.c: 1072: return line;
 13572  1B33  0020               	movlb	0	; select bank0
 13573  1B34  0820               	movf	getDimmerLights_Line@line,w
 13574  1B35  0008               	return
 13575  1B36                     __end_of_getDimmerLights_Line:	
 13576                           
 13577                           	psect	text87
 13578  1ECC                     __ptext87:	
 13579 ;; *************** function _DimmerLights_Main *****************
 13580 ;; Defined at:
 13581 ;;		line 781 in file "../src/Dimmer_B1.c"
 13582 ;; Parameters:    Size  Location     Type
 13583 ;;		None
 13584 ;; Auto vars:     Size  Location     Type
 13585 ;;		None
 13586 ;; Return value:  Size  Location     Type
 13587 ;;		None               void
 13588 ;; Registers used:
 13589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13590 ;; Tracked objects:
 13591 ;;		On entry : 0/0
 13592 ;;		On exit  : 0/0
 13593 ;;		Unchanged: 0/0
 13594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;Total ram usage:        0 bytes
 13600 ;; Hardware stack levels used:    1
 13601 ;; Hardware stack levels required when called:   10
 13602 ;; This function calls:
 13603 ;;		_getLoad_OK
 13604 ;;		_getMain_All_Error_Status
 13605 ;;		_getMain_All_LightsStatus
 13606 ;;		_setDimmerLights_Main
 13607 ;; This function is called by:
 13608 ;;		_main
 13609 ;; This function uses a non-reentrant model
 13610 ;;
 13611                           
 13612                           
 13613                           ;psect for function _DimmerLights_Main
 13614  1ECC                     _DimmerLights_Main:	
 13615                           
 13616                           ;Dimmer_B1.c: 784: if (Dimmer.LoadGO == 1) {
 13617                           
 13618                           ;incstack = 0
 13619                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13620  1ECC  0022               	movlb	2	; select bank2
 13621  1ECD  1CAC               	btfss	_Dimmer^(0+256),1
 13622  1ECE  2EE4               	goto	l7799
 13623                           
 13624                           ;Dimmer_B1.c: 785: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13625  1ECF  319A  22EE  319E   	fcall	_getLoad_OK
 13626  1ED2  3A01               	xorlw	1
 13627  1ED3  1903               	skipnz
 13628  1ED4  2EE2               	goto	l760
 13629  1ED5  3000               	movlw	0
 13630  1ED6  3190  20F8  319E   	fcall	_getMain_All_Error_Status
 13631  1ED9  3800               	iorlw	0
 13632  1EDA  1D03               	skipz
 13633  1EDB  2EE2               	goto	l760
 13634  1EDC  319B  2321  319E   	fcall	_getMain_All_LightsStatus
 13635  1EDF  3800               	iorlw	0
 13636  1EE0  1D03               	skipz
 13637  1EE1  2EE4               	goto	l7799
 13638  1EE2                     l760:	
 13639                           
 13640                           ;Dimmer_B1.c: 786: Dimmer.LoadGO = 0;
 13641  1EE2  0022               	movlb	2	; select bank2
 13642  1EE3  10AC               	bcf	_Dimmer^(0+256),1
 13643  1EE4                     l7799:	
 13644                           
 13645                           ;Dimmer_B1.c: 787: }
 13646                           ;Dimmer_B1.c: 788: }
 13647                           ;Dimmer_B1.c: 792: setDimmerLights_Main(1);
 13648  1EE4  3001               	movlw	1
 13649  1EE5  3197  2795         	fcall	_setDimmerLights_Main
 13650  1EE7  0008               	return
 13651  1EE8                     __end_of_DimmerLights_Main:	
 13652                           
 13653                           	psect	text88
 13654  1795                     __ptext88:	
 13655 ;; *************** function _setDimmerLights_Main *****************
 13656 ;; Defined at:
 13657 ;;		line 810 in file "../src/Dimmer_B1.c"
 13658 ;; Parameters:    Size  Location     Type
 13659 ;;  lights          1    wreg     unsigned char 
 13660 ;; Auto vars:     Size  Location     Type
 13661 ;;  lights          1    1[BANK1 ] unsigned char 
 13662 ;; Return value:  Size  Location     Type
 13663 ;;		None               void
 13664 ;; Registers used:
 13665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13666 ;; Tracked objects:
 13667 ;;		On entry : 0/0
 13668 ;;		On exit  : 0/0
 13669 ;;		Unchanged: 0/0
 13670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;Total ram usage:        1 bytes
 13676 ;; Hardware stack levels used:    1
 13677 ;; Hardware stack levels required when called:    9
 13678 ;; This function calls:
 13679 ;;		_DimmerLights_SelectPointer
 13680 ;;		_getDimmerLights_Allow_Condition
 13681 ;;		_getMain_All_LightsStatus
 13682 ;;		_setDimmerLights_Dimming
 13683 ;;		_setDimmerLights_OnOff
 13684 ;; This function is called by:
 13685 ;;		_DimmerLights_Main
 13686 ;; This function uses a non-reentrant model
 13687 ;;
 13688                           
 13689                           
 13690                           ;psect for function _setDimmerLights_Main
 13691  1795                     _setDimmerLights_Main:	
 13692                           
 13693                           ;incstack = 0
 13694                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13695                           ;setDimmerLights_Main@lights stored from wreg
 13696  1795  0021               	movlb	1	; select bank1
 13697  1796  00E7               	movwf	setDimmerLights_Main@lights^(0+128)
 13698                           
 13699                           ;Dimmer_B1.c: 812: DimmerLights_SelectPointer(lights);
 13700  1797  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13701  1798  319B  2363  3197   	fcall	_DimmerLights_SelectPointer
 13702                           
 13703                           ;Dimmer_B1.c: 813: if (DimmerLights->Trigger == 1) {
 13704  179B  0021               	movlb	1	; select bank1
 13705  179C  084C               	movf	_DimmerLights^(0+128),w
 13706  179D  0086               	movwf	6
 13707  179E  3001               	movlw	1	; select bank2/3
 13708  179F  0087               	movwf	7
 13709  17A0  1C81               	btfss	1,1
 13710  17A1  2FC4               	goto	l7227
 13711                           
 13712                           ;Dimmer_B1.c: 814: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13713  17A2  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13714  17A3  319D  25BA  3197   	fcall	_getDimmerLights_Allow_Condition
 13715  17A6  3800               	iorlw	0
 13716  17A7  1D03               	skipz
 13717  17A8  0008               	return
 13718                           
 13719                           ;Dimmer_B1.c: 815: DimmerLights->Trigger = 0;
 13720  17A9  0021               	movlb	1	; select bank1
 13721  17AA  084C               	movf	_DimmerLights^(0+128),w
 13722  17AB  0086               	movwf	6
 13723  17AC  3001               	movlw	1	; select bank2/3
 13724  17AD  0087               	movwf	7
 13725  17AE  1081               	bcf	1,1
 13726                           
 13727                           ;Dimmer_B1.c: 816: if (DimmerLights->Switch == 1) {
 13728  17AF  084C               	movf	_DimmerLights^(0+128),w
 13729  17B0  0086               	movwf	6
 13730  17B1  3001               	movlw	1	; select bank2/3
 13731  17B2  0087               	movwf	7
 13732  17B3  1D01               	btfss	1,2
 13733  17B4  2FBD               	goto	l7225
 13734                           
 13735                           ;Dimmer_B1.c: 817: setDimmerLights_OnOff(lights, 1);
 13736  17B5  0020               	movlb	0	; select bank0
 13737  17B6  01ED               	clrf	setDimmerLights_OnOff@command
 13738  17B7  0AED               	incf	setDimmerLights_OnOff@command,f
 13739  17B8  0021               	movlb	1	; select bank1
 13740  17B9  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13741  17BA  3186  26F7         	fcall	_setDimmerLights_OnOff
 13742                           
 13743                           ;Dimmer_B1.c: 818: } else {
 13744  17BC  0008               	return
 13745  17BD                     l7225:	
 13746                           
 13747                           ;Dimmer_B1.c: 819: setDimmerLights_OnOff(lights, 0);
 13748  17BD  0020               	movlb	0	; select bank0
 13749  17BE  01ED               	clrf	setDimmerLights_OnOff@command
 13750  17BF  0021               	movlb	1	; select bank1
 13751  17C0  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13752  17C1  3186  26F7         	fcall	_setDimmerLights_OnOff
 13753                           
 13754                           ;Dimmer_B1.c: 820: }
 13755                           ;Dimmer_B1.c: 821: }
 13756                           ;Dimmer_B1.c: 822: } else {
 13757  17C3  0008               	return
 13758  17C4                     l7227:	
 13759                           
 13760                           ;Dimmer_B1.c: 823: if (getMain_All_LightsStatus() == 1) {
 13761  17C4  319B  2321  3197   	fcall	_getMain_All_LightsStatus
 13762  17C7  3A01               	xorlw	1
 13763  17C8  1D03               	skipz
 13764  17C9  2FF3               	goto	l7239
 13765                           
 13766                           ;Dimmer_B1.c: 824: if (DimmerLights->DimmingTrigger == 1) {
 13767  17CA  0021               	movlb	1	; select bank1
 13768  17CB  084C               	movf	_DimmerLights^(0+128),w
 13769  17CC  0086               	movwf	6
 13770  17CD  3001               	movlw	1	; select bank2/3
 13771  17CE  0087               	movwf	7
 13772  17CF  1E01               	btfss	1,4
 13773  17D0  0008               	return
 13774                           
 13775                           ;Dimmer_B1.c: 825: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13776  17D1  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13777  17D2  319D  25BA  3197   	fcall	_getDimmerLights_Allow_Condition
 13778  17D5  3800               	iorlw	0
 13779  17D6  1D03               	skipz
 13780  17D7  0008               	return
 13781                           
 13782                           ;Dimmer_B1.c: 826: DimmerLights->DimmingTrigger = 0;
 13783  17D8  0021               	movlb	1	; select bank1
 13784  17D9  084C               	movf	_DimmerLights^(0+128),w
 13785  17DA  0086               	movwf	6
 13786  17DB  3001               	movlw	1	; select bank2/3
 13787  17DC  0087               	movwf	7
 13788  17DD  1201               	bcf	1,4
 13789                           
 13790                           ;Dimmer_B1.c: 827: if (DimmerLights->DimmingSwitch == 1) {
 13791  17DE  084C               	movf	_DimmerLights^(0+128),w
 13792  17DF  0086               	movwf	6
 13793  17E0  3001               	movlw	1	; select bank2/3
 13794  17E1  0087               	movwf	7
 13795  17E2  1E81               	btfss	1,5
 13796  17E3  2FEC               	goto	l7237
 13797                           
 13798                           ;Dimmer_B1.c: 828: setDimmerLights_Dimming(lights, 1);
 13799  17E4  0020               	movlb	0	; select bank0
 13800  17E5  01EA               	clrf	setDimmerLights_Dimming@status
 13801  17E6  0AEA               	incf	setDimmerLights_Dimming@status,f
 13802  17E7  0021               	movlb	1	; select bank1
 13803  17E8  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13804  17E9  3194  243A         	fcall	_setDimmerLights_Dimming
 13805                           
 13806                           ;Dimmer_B1.c: 829: } else {
 13807  17EB  0008               	return
 13808  17EC                     l7237:	
 13809                           
 13810                           ;Dimmer_B1.c: 830: setDimmerLights_Dimming(lights, 0);
 13811  17EC  0020               	movlb	0	; select bank0
 13812  17ED  01EA               	clrf	setDimmerLights_Dimming@status
 13813  17EE  0021               	movlb	1	; select bank1
 13814  17EF  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13815  17F0  3194  243A         	fcall	_setDimmerLights_Dimming
 13816                           
 13817                           ;Dimmer_B1.c: 831: }
 13818                           ;Dimmer_B1.c: 832: }
 13819                           ;Dimmer_B1.c: 833: }
 13820                           ;Dimmer_B1.c: 834: } else {
 13821  17F2  0008               	return
 13822  17F3                     l7239:	
 13823                           
 13824                           ;Dimmer_B1.c: 835: if (DimmerLights->DimmingTrigger == 1) {
 13825  17F3  0021               	movlb	1	; select bank1
 13826  17F4  084C               	movf	_DimmerLights^(0+128),w
 13827  17F5  0086               	movwf	6
 13828  17F6  3001               	movlw	1	; select bank2/3
 13829  17F7  0087               	movwf	7
 13830  17F8  1E01               	btfss	1,4
 13831  17F9  0008               	return
 13832                           
 13833                           ;Dimmer_B1.c: 836: DimmerLights->DimmingTrigger = 0;
 13834  17FA  084C               	movf	_DimmerLights^(0+128),w
 13835  17FB  0086               	movwf	6
 13836  17FC  3001               	movlw	1	; select bank2/3
 13837  17FD  0087               	movwf	7
 13838  17FE  1201               	bcf	1,4
 13839  17FF  0008               	return
 13840  1800                     __end_of_setDimmerLights_Main:	
 13841                           
 13842                           	psect	text89
 13843  06F7                     __ptext89:	
 13844 ;; *************** function _setDimmerLights_OnOff *****************
 13845 ;; Defined at:
 13846 ;;		line 844 in file "../src/Dimmer_B1.c"
 13847 ;; Parameters:    Size  Location     Type
 13848 ;;  lights          1    wreg     unsigned char 
 13849 ;;  command         1   77[BANK0 ] unsigned char 
 13850 ;; Auto vars:     Size  Location     Type
 13851 ;;  lights          1    0[BANK1 ] unsigned char 
 13852 ;; Return value:  Size  Location     Type
 13853 ;;		None               void
 13854 ;; Registers used:
 13855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13856 ;; Tracked objects:
 13857 ;;		On entry : 0/0
 13858 ;;		On exit  : 0/0
 13859 ;;		Unchanged: 0/0
 13860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13861 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13862 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13864 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13865 ;;Total ram usage:        4 bytes
 13866 ;; Hardware stack levels used:    1
 13867 ;; Hardware stack levels required when called:    8
 13868 ;; This function calls:
 13869 ;;		_getCmd_Status
 13870 ;;		_getDelayOff_GO
 13871 ;;		_getDimmerLights_PercentToValue
 13872 ;;		_getMain_All_LightsStatus
 13873 ;;		_setCmd_Status
 13874 ;;		_setDelayOff_GO
 13875 ;;		_setDimmerIntr_ControlStatus
 13876 ;;		_setDimmerIntr_DimmingValue
 13877 ;;		_setDimmerIntr_Dimming_RF
 13878 ;;		_setDimmerIntr_MaxmumValue
 13879 ;;		_setDimmerLights_DimmingClose
 13880 ;;		_setDimmerLights_Line
 13881 ;;		_setLED
 13882 ;;		_setProductData
 13883 ;;		_setRF_DimmerLights
 13884 ;;		_setTxData
 13885 ;; This function is called by:
 13886 ;;		_setDimmerLights_Main
 13887 ;; This function uses a non-reentrant model
 13888 ;;
 13889                           
 13890                           
 13891                           ;psect for function _setDimmerLights_OnOff
 13892  06F7                     _setDimmerLights_OnOff:	
 13893                           
 13894                           ;incstack = 0
 13895                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13896                           ;setDimmerLights_OnOff@lights stored from wreg
 13897  06F7  0021               	movlb	1	; select bank1
 13898  06F8  00E6               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13899                           
 13900                           ;Dimmer_B1.c: 846: if (command == 1) {
 13901  06F9  0020               	movlb	0	; select bank0
 13902  06FA  086D               	movf	setDimmerLights_OnOff@command,w
 13903  06FB  3A01               	xorlw	1
 13904  06FC  1D03               	skipz
 13905  06FD  2F60               	goto	l6895
 13906                           
 13907                           ;Dimmer_B1.c: 847: setDimmerLights_DimmingClose();
 13908  06FE  319A  22C7  3186   	fcall	_setDimmerLights_DimmingClose
 13909                           
 13910                           ;Dimmer_B1.c: 849: setDimmerIntr_ControlStatus(lights, 1);
 13911  0701  0020               	movlb	0	; select bank0
 13912  0702  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13913  0703  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13914  0704  0021               	movlb	1	; select bank1
 13915  0705  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13916  0706  319D  25E6  3186   	fcall	_setDimmerIntr_ControlStatus
 13917                           
 13918                           ;Dimmer_B1.c: 852: Dimmer.Load_Status = 1;
 13919  0709  0022               	movlb	2	; select bank2
 13920  070A  152C               	bsf	_Dimmer^(0+256),2
 13921                           
 13922                           ;Dimmer_B1.c: 853: setDimmerLights_Line(lights);
 13923  070B  0021               	movlb	1	; select bank1
 13924  070C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13925  070D  319C  2433  3186   	fcall	_setDimmerLights_Line
 13926                           
 13927                           ;Dimmer_B1.c: 859: setLED(lights, 0);
 13928  0710  0020               	movlb	0	; select bank0
 13929  0711  01A2               	clrf	setLED@command
 13930  0712  0021               	movlb	1	; select bank1
 13931  0713  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13932  0714  3192  22A6  3186   	fcall	_setLED
 13933                           
 13934                           ;Dimmer_B1.c: 860: ;;
 13935                           ;Dimmer_B1.c: 880: if (DimmerLights->DimmingRun == 1) {
 13936  0717  0021               	movlb	1	; select bank1
 13937  0718  0A4C               	incf	_DimmerLights^(0+128),w
 13938  0719  0086               	movwf	6
 13939  071A  3001               	movlw	1	; select bank2/3
 13940  071B  0087               	movwf	7
 13941  071C  1F01               	btfss	1,6
 13942  071D  2F42               	goto	l6887
 13943                           
 13944                           ;Dimmer_B1.c: 881: DimmerLights->DimmingRun = 0;
 13945  071E  0A4C               	incf	_DimmerLights^(0+128),w
 13946  071F  0086               	movwf	6
 13947  0720  3001               	movlw	1	; select bank2/3
 13948  0721  0087               	movwf	7
 13949  0722  1301               	bcf	1,6
 13950                           
 13951                           ;Dimmer_B1.c: 882: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13952  0723  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13953  0724  3E14               	addlw	20
 13954  0725  076E               	addwf	_product^(0+128),w
 13955  0726  0020               	movlb	0	; select bank0
 13956  0727  00EE               	movwf	??_setDimmerLights_OnOff
 13957  0728  086E               	movf	??_setDimmerLights_OnOff,w
 13958  0729  0086               	movwf	6
 13959  072A  3001               	movlw	1	; select bank2/3
 13960  072B  0087               	movwf	7
 13961  072C  0801               	movf	1,w
 13962  072D  3196  2666  3186   	fcall	_getDimmerLights_PercentToValue
 13963  0730  0020               	movlb	0	; select bank0
 13964  0731  00EF               	movwf	??_setDimmerLights_OnOff+1
 13965  0732  086F               	movf	??_setDimmerLights_OnOff+1,w
 13966  0733  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13967  0734  0021               	movlb	1	; select bank1
 13968  0735  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13969  0736  319B  237B  3186   	fcall	_setDimmerIntr_MaxmumValue
 13970                           
 13971                           ;Dimmer_B1.c: 883: setDimmerIntr_Dimming_RF(lights, 1);
 13972  0739  0020               	movlb	0	; select bank0
 13973  073A  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13974  073B  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13975  073C  0021               	movlb	1	; select bank1
 13976  073D  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13977  073E  319D  25FE  3186   	fcall	_setDimmerIntr_Dimming_RF
 13978                           
 13979                           ;Dimmer_B1.c: 884: } else {
 13980  0741  2F59               	goto	l6889
 13981  0742                     l6887:	
 13982                           
 13983                           ;Dimmer_B1.c: 885: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13984  0742  0021               	movlb	1	; select bank1
 13985  0743  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13986  0744  3E14               	addlw	20
 13987  0745  076E               	addwf	_product^(0+128),w
 13988  0746  0020               	movlb	0	; select bank0
 13989  0747  00EE               	movwf	??_setDimmerLights_OnOff
 13990  0748  086E               	movf	??_setDimmerLights_OnOff,w
 13991  0749  0086               	movwf	6
 13992  074A  3001               	movlw	1	; select bank2/3
 13993  074B  0087               	movwf	7
 13994  074C  0801               	movf	1,w
 13995  074D  3196  2666  3186   	fcall	_getDimmerLights_PercentToValue
 13996  0750  0020               	movlb	0	; select bank0
 13997  0751  00EF               	movwf	??_setDimmerLights_OnOff+1
 13998  0752  086F               	movf	??_setDimmerLights_OnOff+1,w
 13999  0753  00E2               	movwf	setDimmerIntr_DimmingValue@value
 14000  0754  0021               	movlb	1	; select bank1
 14001  0755  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14002  0756  319B  2387  3186   	fcall	_setDimmerIntr_DimmingValue
 14003  0759                     l6889:	
 14004                           
 14005                           ;Dimmer_B1.c: 888: }
 14006                           ;Dimmer_B1.c: 890: if (lights == 1) {
 14007  0759  0021               	movlb	1	; select bank1
 14008  075A  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14009  075B  3A01               	xorlw	1
 14010  075C  1D03               	skipz
 14011  075D  2F93               	goto	l6909
 14012                           
 14013                           ;Dimmer_B1.c: 892: DimmerIntr1.TuneGO = 1;
 14014  075E  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 14015                           
 14016                           ;Dimmer_B1.c: 898: }
 14017                           ;Dimmer_B1.c: 904: } else if (command == 0) {
 14018                           
 14019                           ;Dimmer_B1.c: 894: } else if (lights == 2) {
 14020  075F  2F93               	goto	l6909
 14021  0760                     l6895:	
 14022  0760  0020               	movlb	0	; select bank0
 14023  0761  08ED               	movf	setDimmerLights_OnOff@command,f
 14024  0762  1D03               	skipz
 14025  0763  2F93               	goto	l6909
 14026                           
 14027                           ;Dimmer_B1.c: 905: setDimmerLights_DimmingClose();
 14028  0764  319A  22C7  3186   	fcall	_setDimmerLights_DimmingClose
 14029                           
 14030                           ;Dimmer_B1.c: 906: setDimmerIntr_ControlStatus(lights, 0);
 14031  0767  0020               	movlb	0	; select bank0
 14032  0768  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14033  0769  0021               	movlb	1	; select bank1
 14034  076A  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14035  076B  319D  25E6  3186   	fcall	_setDimmerIntr_ControlStatus
 14036                           
 14037                           ;Dimmer_B1.c: 908: Dimmer.Load_Status = 0;
 14038  076E  0022               	movlb	2	; select bank2
 14039  076F  112C               	bcf	_Dimmer^(0+256),2
 14040                           
 14041                           ;Dimmer_B1.c: 909: setDimmerLights_Line(0);
 14042  0770  3000               	movlw	0
 14043  0771  319C  2433  3186   	fcall	_setDimmerLights_Line
 14044                           
 14045                           ;Dimmer_B1.c: 913: if (getDelayOff_GO(lights) == 1) {
 14046  0774  0021               	movlb	1	; select bank1
 14047  0775  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14048  0776  319C  2444  3186   	fcall	_getDelayOff_GO
 14049  0779  3A01               	xorlw	1
 14050  077A  1D03               	skipz
 14051  077B  2F84               	goto	l787
 14052                           
 14053                           ;Dimmer_B1.c: 914: setDelayOff_GO(lights, 0, 0);
 14054  077C  0020               	movlb	0	; select bank0
 14055  077D  01E5               	clrf	setDelayOff_GO@command
 14056  077E  01E6               	clrf	setDelayOff_GO@value
 14057  077F  0021               	movlb	1	; select bank1
 14058  0780  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14059  0781  318C  2405  3186   	fcall	_setDelayOff_GO
 14060  0784                     l787:	
 14061                           
 14062                           ;Dimmer_B1.c: 915: }
 14063                           ;Dimmer_B1.c: 920: setLED(lights, 1);
 14064  0784  0020               	movlb	0	; select bank0
 14065  0785  01A2               	clrf	setLED@command
 14066  0786  0AA2               	incf	setLED@command,f
 14067  0787  0021               	movlb	1	; select bank1
 14068  0788  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14069  0789  3192  22A6  3186   	fcall	_setLED
 14070                           
 14071                           ;Dimmer_B1.c: 921: ;;
 14072                           ;Dimmer_B1.c: 925: if (lights == 1) {
 14073  078C  0021               	movlb	1	; select bank1
 14074  078D  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14075  078E  3A01               	xorlw	1
 14076  078F  1D03               	skipz
 14077  0790  2F93               	goto	l6909
 14078                           
 14079                           ;Dimmer_B1.c: 926: RB1 = 0;
 14080  0791  0020               	movlb	0	; select bank0
 14081  0792  108D               	bcf	13,1	;volatile
 14082  0793                     l6909:	
 14083                           
 14084                           ;Dimmer_B1.c: 928: }
 14085                           ;Dimmer_B1.c: 939: }
 14086                           ;Dimmer_B1.c: 942: setRF_DimmerLights(lights, command);
 14087  0793  0020               	movlb	0	; select bank0
 14088  0794  086D               	movf	setDimmerLights_OnOff@command,w
 14089  0795  00EE               	movwf	??_setDimmerLights_OnOff
 14090  0796  086E               	movf	??_setDimmerLights_OnOff,w
 14091  0797  00E5               	movwf	setRF_DimmerLights@on
 14092  0798  0021               	movlb	1	; select bank1
 14093  0799  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14094  079A  3197  2730  3186   	fcall	_setRF_DimmerLights
 14095                           
 14096                           ;Dimmer_B1.c: 944: if (getCmd_Status(1) == 1) {
 14097  079D  3001               	movlw	1
 14098  079E  319C  2499  3186   	fcall	_getCmd_Status
 14099  07A1  3A01               	xorlw	1
 14100  07A2  1D03               	skipz
 14101  07A3  2FBF               	goto	l6923
 14102                           
 14103                           ;Dimmer_B1.c: 945: if (getMain_All_LightsStatus() == 0) {
 14104  07A4  319B  2321  3186   	fcall	_getMain_All_LightsStatus
 14105  07A7  3800               	iorlw	0
 14106  07A8  1D03               	skipz
 14107  07A9  0008               	return
 14108                           
 14109                           ;Dimmer_B1.c: 946: setCmd_Status(1, 0);
 14110  07AA  0020               	movlb	0	; select bank0
 14111  07AB  01A0               	clrf	setCmd_Status@cmd
 14112  07AC  3001               	movlw	1
 14113  07AD  319E  2616  3186   	fcall	_setCmd_Status
 14114                           
 14115                           ;Dimmer_B1.c: 947: setProductData(11, 0);
 14116  07B0  0020               	movlb	0	; select bank0
 14117  07B1  01E2               	clrf	setProductData@value
 14118  07B2  300B               	movlw	11
 14119  07B3  319B  236F  3186   	fcall	_setProductData
 14120                           
 14121                           ;Dimmer_B1.c: 948: setProductData(17, 0);
 14122  07B6  0020               	movlb	0	; select bank0
 14123  07B7  01E2               	clrf	setProductData@value
 14124  07B8  3011               	movlw	17
 14125  07B9  319B  236F  3186   	fcall	_setProductData
 14126                           
 14127                           ;Dimmer_B1.c: 949: setTxData();
 14128  07BC  318E  267B         	fcall	_setTxData
 14129                           
 14130                           ;Dimmer_B1.c: 950: }
 14131                           ;Dimmer_B1.c: 951: } else {
 14132  07BE  0008               	return
 14133  07BF                     l6923:	
 14134                           
 14135                           ;Dimmer_B1.c: 952: setTxData();
 14136  07BF  318E  267B         	fcall	_setTxData
 14137  07C1  0008               	return
 14138  07C2                     __end_of_setDimmerLights_OnOff:	
 14139                           
 14140                           	psect	text90
 14141  12A6                     __ptext90:	
 14142 ;; *************** function _setLED *****************
 14143 ;; Defined at:
 14144 ;;		line 81 in file "../src/LED_B1.c"
 14145 ;; Parameters:    Size  Location     Type
 14146 ;;  led             1    wreg     unsigned char 
 14147 ;;  command         1    2[BANK0 ] unsigned char 
 14148 ;; Auto vars:     Size  Location     Type
 14149 ;;  led             1    3[BANK0 ] unsigned char 
 14150 ;; Return value:  Size  Location     Type
 14151 ;;		None               void
 14152 ;; Registers used:
 14153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14154 ;; Tracked objects:
 14155 ;;		On entry : 0/0
 14156 ;;		On exit  : 0/0
 14157 ;;		Unchanged: 0/0
 14158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14159 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14160 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14162 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14163 ;;Total ram usage:        2 bytes
 14164 ;; Hardware stack levels used:    1
 14165 ;; Hardware stack levels required when called:    6
 14166 ;; This function calls:
 14167 ;;		_LedPointSelect
 14168 ;; This function is called by:
 14169 ;;		_setDimmerLights_OnOff
 14170 ;;		_setLED_Initialization
 14171 ;;		_Exception_Main
 14172 ;;		_setSw_Initialization
 14173 ;; This function uses a non-reentrant model
 14174 ;;
 14175                           
 14176                           
 14177                           ;psect for function _setLED
 14178  12A6                     _setLED:	
 14179                           
 14180                           ;incstack = 0
 14181                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14182                           ;setLED@led stored from wreg
 14183  12A6  0020               	movlb	0	; select bank0
 14184  12A7  00A3               	movwf	setLED@led
 14185                           
 14186                           ;LED_B1.c: 82: LedPointSelect(led);
 14187  12A8  0823               	movf	setLED@led,w
 14188  12A9  319B  2393  3192   	fcall	_LedPointSelect
 14189                           
 14190                           ;LED_B1.c: 83: if (command == 0) {
 14191  12AC  0020               	movlb	0	; select bank0
 14192  12AD  08A2               	movf	setLED@command,f
 14193  12AE  1D03               	skipz
 14194  12AF  2AB5               	goto	l6613
 14195                           
 14196                           ;LED_B1.c: 112: if (led == 99) {
 14197  12B0  0823               	movf	setLED@led,w
 14198  12B1  3A63               	xorlw	99
 14199  12B2  1D03               	skipz
 14200  12B3  2AB5               	goto	l6613
 14201                           
 14202                           ;LED_B1.c: 116: RB5 = 1;
 14203  12B4  168D               	bsf	13,5	;volatile
 14204  12B5                     l6613:	
 14205                           
 14206                           ;LED_B1.c: 118: }
 14207                           ;LED_B1.c: 120: }
 14208                           ;LED_B1.c: 121: if (command == 1) {
 14209  12B5  0822               	movf	setLED@command,w
 14210  12B6  3A01               	xorlw	1
 14211  12B7  1D03               	skipz
 14212  12B8  2ABE               	goto	l6619
 14213                           
 14214                           ;LED_B1.c: 150: if (led == 99) {
 14215  12B9  0823               	movf	setLED@led,w
 14216  12BA  3A63               	xorlw	99
 14217  12BB  1D03               	skipz
 14218  12BC  2ABE               	goto	l6619
 14219                           
 14220                           ;LED_B1.c: 154: RB5 = 0;
 14221  12BD  128D               	bcf	13,5	;volatile
 14222  12BE                     l6619:	
 14223                           
 14224                           ;LED_B1.c: 156: }
 14225                           ;LED_B1.c: 158: }
 14226                           ;LED_B1.c: 159: if (command == 10) {
 14227  12BE  0822               	movf	setLED@command,w
 14228  12BF  3A0A               	xorlw	10
 14229  12C0  1D03               	skipz
 14230  12C1  2AD4               	goto	l6627
 14231                           
 14232                           ;LED_B1.c: 160: LED->GO = 0;
 14233  12C2  0021               	movlb	1	; select bank1
 14234  12C3  084D               	movf	_LED^(0+128),w
 14235  12C4  0086               	movwf	6
 14236  12C5  3001               	movlw	1	; select bank2/3
 14237  12C6  0087               	movwf	7
 14238  12C7  1081               	bcf	1,1
 14239                           
 14240                           ;LED_B1.c: 161: LED->Time = 0;
 14241  12C8  0A4D               	incf	_LED^(0+128),w
 14242  12C9  0086               	movwf	6
 14243  12CA  3001               	movlw	1	; select bank2/3
 14244  12CB  0087               	movwf	7
 14245  12CC  3000               	movlw	0
 14246  12CD  3FC0               	movwi [0]fsr1
 14247  12CE  3FC1               	movwi [1]fsr1
 14248                           
 14249                           ;LED_B1.c: 190: if (led == 99) {
 14250  12CF  0020               	movlb	0	; select bank0
 14251  12D0  0823               	movf	setLED@led,w
 14252  12D1  3A63               	xorlw	99
 14253  12D2  1903               	btfsc	3,2
 14254                           
 14255                           ;LED_B1.c: 194: RB5 = 1;
 14256  12D3  168D               	bsf	13,5	;volatile
 14257  12D4                     l6627:	
 14258                           
 14259                           ;LED_B1.c: 196: }
 14260                           ;LED_B1.c: 198: }
 14261                           ;LED_B1.c: 199: if (command == 11) {
 14262  12D4  0822               	movf	setLED@command,w
 14263  12D5  3A0B               	xorlw	11
 14264  12D6  1D03               	skipz
 14265  12D7  0008               	return
 14266                           
 14267                           ;LED_B1.c: 200: LED->GO = 1;
 14268  12D8  0021               	movlb	1	; select bank1
 14269  12D9  084D               	movf	_LED^(0+128),w
 14270  12DA  0086               	movwf	6
 14271  12DB  3001               	movlw	1	; select bank2/3
 14272  12DC  0087               	movwf	7
 14273  12DD  1481               	bsf	1,1
 14274  12DE  0008               	return
 14275  12DF                     __end_of_setLED:	
 14276                           
 14277                           	psect	text91
 14278  1B93                     __ptext91:	
 14279 ;; *************** function _LedPointSelect *****************
 14280 ;; Defined at:
 14281 ;;		line 7 in file "../src/LED_B1.c"
 14282 ;; Parameters:    Size  Location     Type
 14283 ;;  led             1    wreg     unsigned char 
 14284 ;; Auto vars:     Size  Location     Type
 14285 ;;  led             1    1[BANK0 ] unsigned char 
 14286 ;; Return value:  Size  Location     Type
 14287 ;;		None               void
 14288 ;; Registers used:
 14289 ;;		wreg
 14290 ;; Tracked objects:
 14291 ;;		On entry : 0/0
 14292 ;;		On exit  : 0/0
 14293 ;;		Unchanged: 0/0
 14294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;Total ram usage:        2 bytes
 14300 ;; Hardware stack levels used:    1
 14301 ;; Hardware stack levels required when called:    5
 14302 ;; This function calls:
 14303 ;;		Nothing
 14304 ;; This function is called by:
 14305 ;;		_setLED_Initialization
 14306 ;;		_setLED
 14307 ;;		_setLED_Main
 14308 ;; This function uses a non-reentrant model
 14309 ;;
 14310                           
 14311                           
 14312                           ;psect for function _LedPointSelect
 14313  1B93                     _LedPointSelect:	
 14314                           
 14315                           ;incstack = 0
 14316                           ; Regs used in _LedPointSelect: [wreg]
 14317                           ;LedPointSelect@led stored from wreg
 14318  1B93  0020               	movlb	0	; select bank0
 14319  1B94  00A1               	movwf	LedPointSelect@led
 14320                           
 14321                           ;LED_B1.c: 24: if (led == 99) {
 14322  1B95  0821               	movf	LedPointSelect@led,w
 14323  1B96  3A63               	xorlw	99
 14324  1B97  1D03               	skipz
 14325  1B98  0008               	return
 14326                           
 14327                           ;LED_B1.c: 25: LED = &VarErrLED;
 14328  1B99  3068               	movlw	_VarErrLED& (0+255)
 14329  1B9A  00A0               	movwf	??_LedPointSelect
 14330  1B9B  0820               	movf	??_LedPointSelect,w
 14331  1B9C  0021               	movlb	1	; select bank1
 14332  1B9D  00CD               	movwf	_LED^(0+128)
 14333  1B9E  0008               	return
 14334  1B9F                     __end_of_LedPointSelect:	
 14335                           
 14336                           	psect	text92
 14337  1AC7                     __ptext92:	
 14338 ;; *************** function _setDimmerLights_DimmingClose *****************
 14339 ;; Defined at:
 14340 ;;		line 1753 in file "../src/Dimmer_B1.c"
 14341 ;; Parameters:    Size  Location     Type
 14342 ;;		None
 14343 ;; Auto vars:     Size  Location     Type
 14344 ;;		None
 14345 ;; Return value:  Size  Location     Type
 14346 ;;		None               void
 14347 ;; Registers used:
 14348 ;;		wreg, status,2, status,0, pclath, cstack
 14349 ;; Tracked objects:
 14350 ;;		On entry : 0/0
 14351 ;;		On exit  : 0/0
 14352 ;;		Unchanged: 0/0
 14353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;Total ram usage:        0 bytes
 14359 ;; Hardware stack levels used:    1
 14360 ;; Hardware stack levels required when called:    6
 14361 ;; This function calls:
 14362 ;;		_setDimmerIntr_Dimming_Sw
 14363 ;; This function is called by:
 14364 ;;		_setDimmerLights_OnOff
 14365 ;; This function uses a non-reentrant model
 14366 ;;
 14367                           
 14368                           
 14369                           ;psect for function _setDimmerLights_DimmingClose
 14370  1AC7                     _setDimmerLights_DimmingClose:	
 14371                           
 14372                           ;Dimmer_B1.c: 1755: setDimmerIntr_Dimming_Sw(1, 0);
 14373                           
 14374                           ;incstack = 0
 14375                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14376  1AC7  0020               	movlb	0	; select bank0
 14377  1AC8  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14378  1AC9  3001               	movlw	1
 14379  1ACA  319D  25D0         	fcall	_setDimmerIntr_Dimming_Sw
 14380  1ACC  0008               	return
 14381  1ACD                     __end_of_setDimmerLights_DimmingClose:	
 14382                           
 14383                           	psect	text93
 14384  1DFE                     __ptext93:	
 14385 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14386 ;; Defined at:
 14387 ;;		line 228 in file "../src/Dimmer_B1.c"
 14388 ;; Parameters:    Size  Location     Type
 14389 ;;  lights          1    wreg     unsigned char 
 14390 ;;  command         1    0[BANK0 ] unsigned char 
 14391 ;; Auto vars:     Size  Location     Type
 14392 ;;  lights          1    2[BANK0 ] unsigned char 
 14393 ;; Return value:  Size  Location     Type
 14394 ;;		None               void
 14395 ;; Registers used:
 14396 ;;		wreg, status,2, status,0
 14397 ;; Tracked objects:
 14398 ;;		On entry : 0/0
 14399 ;;		On exit  : 0/0
 14400 ;;		Unchanged: 0/0
 14401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14402 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14405 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14406 ;;Total ram usage:        3 bytes
 14407 ;; Hardware stack levels used:    1
 14408 ;; Hardware stack levels required when called:    5
 14409 ;; This function calls:
 14410 ;;		Nothing
 14411 ;; This function is called by:
 14412 ;;		_setDimmerLights_OnOff
 14413 ;;		_setRFSW_AdjControl
 14414 ;; This function uses a non-reentrant model
 14415 ;;
 14416                           
 14417                           
 14418                           ;psect for function _setDimmerIntr_Dimming_RF
 14419  1DFE                     _setDimmerIntr_Dimming_RF:	
 14420                           
 14421                           ;incstack = 0
 14422                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14423                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14424  1DFE  0020               	movlb	0	; select bank0
 14425  1DFF  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14426                           
 14427                           ;Dimmer_B1.c: 230: if (lights == 1) {
 14428  1E00  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14429  1E01  3A01               	xorlw	1
 14430  1E02  1D03               	skipz
 14431  1E03  0008               	return
 14432                           
 14433                           ;Dimmer_B1.c: 231: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14434  1E04  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14435  1E05  3A01               	xorlw	1
 14436  1E06  3000               	movlw	0
 14437  1E07  1903               	skipnz
 14438  1E08  3001               	movlw	1
 14439  1E09  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14440  1E0A  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14441  1E0B  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14442  1E0C  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14443  1E0D  0021               	movlb	1	; select bank1
 14444  1E0E  083C               	movf	_DimmerIntr1^(0+128),w
 14445  1E0F  0020               	movlb	0	; select bank0
 14446  1E10  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14447  1E11  39BF               	andlw	-65
 14448  1E12  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14449  1E13  0021               	movlb	1	; select bank1
 14450  1E14  00BC               	movwf	_DimmerIntr1^(0+128)
 14451  1E15  0008               	return
 14452  1E16                     __end_of_setDimmerIntr_Dimming_RF:	
 14453                           
 14454                           	psect	text94
 14455  1B87                     __ptext94:	
 14456 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14457 ;; Defined at:
 14458 ;;		line 93 in file "../src/Dimmer_B1.c"
 14459 ;; Parameters:    Size  Location     Type
 14460 ;;  lights          1    wreg     unsigned char 
 14461 ;;  value           1   66[BANK0 ] unsigned char 
 14462 ;; Auto vars:     Size  Location     Type
 14463 ;;  lights          1   68[BANK0 ] unsigned char 
 14464 ;; Return value:  Size  Location     Type
 14465 ;;		None               void
 14466 ;; Registers used:
 14467 ;;		wreg
 14468 ;; Tracked objects:
 14469 ;;		On entry : 0/0
 14470 ;;		On exit  : 0/0
 14471 ;;		Unchanged: 0/0
 14472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14473 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14476 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14477 ;;Total ram usage:        3 bytes
 14478 ;; Hardware stack levels used:    1
 14479 ;; Hardware stack levels required when called:    5
 14480 ;; This function calls:
 14481 ;;		Nothing
 14482 ;; This function is called by:
 14483 ;;		_setDimmerLights_OnOff
 14484 ;; This function uses a non-reentrant model
 14485 ;;
 14486                           
 14487                           
 14488                           ;psect for function _setDimmerIntr_DimmingValue
 14489  1B87                     _setDimmerIntr_DimmingValue:	
 14490                           
 14491                           ;incstack = 0
 14492                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14493                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14494  1B87  0020               	movlb	0	; select bank0
 14495  1B88  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14496                           
 14497                           ;Dimmer_B1.c: 95: if (lights == 1) {
 14498  1B89  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14499  1B8A  3A01               	xorlw	1
 14500  1B8B  1D03               	skipz
 14501  1B8C  0008               	return
 14502                           
 14503                           ;Dimmer_B1.c: 96: DimmerIntr1.DimmingValue = value;
 14504  1B8D  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14505  1B8E  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14506  1B8F  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14507  1B90  0021               	movlb	1	; select bank1
 14508  1B91  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 14509  1B92  0008               	return
 14510  1B93                     __end_of_setDimmerIntr_DimmingValue:	
 14511                           
 14512                           	psect	text95
 14513  1DE6                     __ptext95:	
 14514 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14515 ;; Defined at:
 14516 ;;		line 75 in file "../src/Dimmer_B1.c"
 14517 ;; Parameters:    Size  Location     Type
 14518 ;;  lights          1    wreg     unsigned char 
 14519 ;;  command         1    0[BANK0 ] unsigned char 
 14520 ;; Auto vars:     Size  Location     Type
 14521 ;;  lights          1    2[BANK0 ] unsigned char 
 14522 ;; Return value:  Size  Location     Type
 14523 ;;		None               void
 14524 ;; Registers used:
 14525 ;;		wreg, status,2, status,0
 14526 ;; Tracked objects:
 14527 ;;		On entry : 0/0
 14528 ;;		On exit  : 0/0
 14529 ;;		Unchanged: 0/0
 14530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14531 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14533 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14534 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14535 ;;Total ram usage:        3 bytes
 14536 ;; Hardware stack levels used:    1
 14537 ;; Hardware stack levels required when called:    5
 14538 ;; This function calls:
 14539 ;;		Nothing
 14540 ;; This function is called by:
 14541 ;;		_setDimmerLights_OnOff
 14542 ;; This function uses a non-reentrant model
 14543 ;;
 14544                           
 14545                           
 14546                           ;psect for function _setDimmerIntr_ControlStatus
 14547  1DE6                     _setDimmerIntr_ControlStatus:	
 14548                           
 14549                           ;incstack = 0
 14550                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14551                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14552  1DE6  0020               	movlb	0	; select bank0
 14553  1DE7  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14554                           
 14555                           ;Dimmer_B1.c: 77: if (lights == 1) {
 14556  1DE8  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14557  1DE9  3A01               	xorlw	1
 14558  1DEA  1D03               	skipz
 14559  1DEB  0008               	return
 14560                           
 14561                           ;Dimmer_B1.c: 78: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14562  1DEC  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14563  1DED  3A01               	xorlw	1
 14564  1DEE  3000               	movlw	0
 14565  1DEF  1903               	skipnz
 14566  1DF0  3001               	movlw	1
 14567  1DF1  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14568  1DF2  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14569  1DF3  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14570  1DF4  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14571  1DF5  0021               	movlb	1	; select bank1
 14572  1DF6  083C               	movf	_DimmerIntr1^(0+128),w
 14573  1DF7  0020               	movlb	0	; select bank0
 14574  1DF8  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14575  1DF9  39F7               	andlw	-9
 14576  1DFA  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14577  1DFB  0021               	movlb	1	; select bank1
 14578  1DFC  00BC               	movwf	_DimmerIntr1^(0+128)
 14579  1DFD  0008               	return
 14580  1DFE                     __end_of_setDimmerIntr_ControlStatus:	
 14581                           
 14582                           	psect	text96
 14583  0C05                     __ptext96:	
 14584 ;; *************** function _setDelayOff_GO *****************
 14585 ;; Defined at:
 14586 ;;		line 87 in file "../src/DelayOff_B1.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  sw              1    wreg     unsigned char 
 14589 ;;  command         1   69[BANK0 ] unsigned char 
 14590 ;;  value           1   70[BANK0 ] unsigned char 
 14591 ;; Auto vars:     Size  Location     Type
 14592 ;;  sw              1   76[BANK0 ] unsigned char 
 14593 ;;  k               1   75[BANK0 ] unsigned char 
 14594 ;;  j               1   74[BANK0 ] unsigned char 
 14595 ;;  i               1   73[BANK0 ] unsigned char 
 14596 ;; Return value:  Size  Location     Type
 14597 ;;		None               void
 14598 ;; Registers used:
 14599 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14600 ;; Tracked objects:
 14601 ;;		On entry : 0/0
 14602 ;;		On exit  : 0/0
 14603 ;;		Unchanged: 0/0
 14604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14605 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14607 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14608 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14609 ;;Total ram usage:        8 bytes
 14610 ;; Hardware stack levels used:    1
 14611 ;; Hardware stack levels required when called:    6
 14612 ;; This function calls:
 14613 ;;		_DelayOffPointSelect
 14614 ;;		___bmul
 14615 ;;		_setProductData
 14616 ;; This function is called by:
 14617 ;;		_setDimmerLights_OnOff
 14618 ;;		_setRFSW_Control
 14619 ;; This function uses a non-reentrant model
 14620 ;;
 14621                           
 14622                           
 14623                           ;psect for function _setDelayOff_GO
 14624  0C05                     _setDelayOff_GO:	
 14625                           
 14626                           ;incstack = 0
 14627                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14628                           ;setDelayOff_GO@sw stored from wreg
 14629  0C05  0020               	movlb	0	; select bank0
 14630  0C06  00EC               	movwf	setDelayOff_GO@sw
 14631                           
 14632                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14633  0C07  086C               	movf	setDelayOff_GO@sw,w
 14634  0C08  319B  2357  318C   	fcall	_DelayOffPointSelect
 14635                           
 14636                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14637  0C0B  0020               	movlb	0	; select bank0
 14638  0C0C  0865               	movf	setDelayOff_GO@command,w
 14639  0C0D  3A01               	xorlw	1
 14640  0C0E  3000               	movlw	0
 14641  0C0F  1903               	skipnz
 14642  0C10  3001               	movlw	1
 14643  0C11  00E7               	movwf	??_setDelayOff_GO
 14644  0C12  0021               	movlb	1	; select bank1
 14645  0C13  084A               	movf	_DelayOff^(0+128),w
 14646  0C14  0086               	movwf	6
 14647  0C15  3001               	movlw	1	; select bank2/3
 14648  0C16  0087               	movwf	7
 14649  0C17  0020               	movlb	0	; select bank0
 14650  0C18  0DE7               	rlf	??_setDelayOff_GO,f
 14651  0C19  0801               	movf	1,w
 14652  0C1A  0667               	xorwf	??_setDelayOff_GO,w
 14653  0C1B  39FD               	andlw	-3
 14654  0C1C  0667               	xorwf	??_setDelayOff_GO,w
 14655  0C1D  0081               	movwf	1
 14656                           
 14657                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14658  0C1E  0021               	movlb	1	; select bank1
 14659  0C1F  084A               	movf	_DelayOff^(0+128),w
 14660  0C20  3E02               	addlw	2
 14661  0C21  0086               	movwf	6
 14662  0C22  3001               	movlw	1	; select bank2/3
 14663  0C23  0087               	movwf	7
 14664  0C24  3000               	movlw	0
 14665  0C25  3FC0               	movwi [0]fsr1
 14666  0C26  3FC1               	movwi [1]fsr1
 14667                           
 14668                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14669  0C27  084A               	movf	_DelayOff^(0+128),w
 14670  0C28  3E04               	addlw	4
 14671  0C29  0086               	movwf	6
 14672  0C2A  3001               	movlw	1	; select bank2/3
 14673  0C2B  0087               	movwf	7
 14674  0C2C  0181               	clrf	1
 14675                           
 14676                           ;DelayOff_B1.c: 94: if (command == 1) {
 14677  0C2D  0020               	movlb	0	; select bank0
 14678  0C2E  0865               	movf	setDelayOff_GO@command,w
 14679  0C2F  3A01               	xorlw	1
 14680  0C30  1D03               	skipz
 14681  0C31  2C87               	goto	l6199
 14682                           
 14683                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14684  0C32  3005               	movlw	5
 14685  0C33  00E7               	movwf	??_setDelayOff_GO
 14686  0C34  0867               	movf	??_setDelayOff_GO,w
 14687  0C35  00E9               	movwf	setDelayOff_GO@i
 14688  0C36  01EA               	clrf	setDelayOff_GO@j
 14689  0C37  01EB               	clrf	setDelayOff_GO@k
 14690                           
 14691                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14692  0C38  300F               	movlw	15
 14693  0C39  0566               	andwf	setDelayOff_GO@value,w
 14694  0C3A  00E7               	movwf	??_setDelayOff_GO
 14695  0C3B  0867               	movf	??_setDelayOff_GO,w
 14696  0C3C  3A05               	xorlw	5
 14697  0C3D  1903               	skipnz
 14698  0C3E  2C43               	goto	l6185
 14699  0C3F  0866               	movf	setDelayOff_GO@value,w
 14700  0C40  390F               	andlw	15
 14701  0C41  1D03               	btfss	3,2
 14702  0C42  2C73               	goto	l6195
 14703  0C43                     l6185:	
 14704  0C43  3031               	movlw	49
 14705  0C44  0266               	subwf	setDelayOff_GO@value,w
 14706  0C45  1803               	skipnc
 14707  0C46  2C73               	goto	l6195
 14708                           
 14709                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14710  0C47  0866               	movf	setDelayOff_GO@value,w
 14711  0C48  390F               	andlw	15
 14712  0C49  00E7               	movwf	??_setDelayOff_GO
 14713  0C4A  0867               	movf	??_setDelayOff_GO,w
 14714  0C4B  00EA               	movwf	setDelayOff_GO@j
 14715                           
 14716                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14717  0C4C  0866               	movf	setDelayOff_GO@value,w
 14718  0C4D  00E7               	movwf	??_setDelayOff_GO
 14719  0C4E  3004               	movlw	4
 14720  0C4F                     u5285:	
 14721  0C4F  36E7               	lsrf	??_setDelayOff_GO,f
 14722  0C50  0B89               	decfsz	9,f
 14723  0C51  2C4F               	goto	u5285
 14724  0C52  0867               	movf	??_setDelayOff_GO,w
 14725  0C53  390F               	andlw	15
 14726  0C54  00E8               	movwf	??_setDelayOff_GO+1
 14727  0C55  0868               	movf	??_setDelayOff_GO+1,w
 14728  0C56  00EB               	movwf	setDelayOff_GO@k
 14729                           
 14730                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14731  0C57  300A               	movlw	10
 14732  0C58  00E7               	movwf	??_setDelayOff_GO
 14733  0C59  0867               	movf	??_setDelayOff_GO,w
 14734  0C5A  00A0               	movwf	___bmul@multiplicand
 14735  0C5B  086B               	movf	setDelayOff_GO@k,w
 14736  0C5C  319C  24AB  318C   	fcall	___bmul
 14737  0C5F  0020               	movlb	0	; select bank0
 14738  0C60  076A               	addwf	setDelayOff_GO@j,w
 14739  0C61  00E8               	movwf	??_setDelayOff_GO+1
 14740  0C62  0021               	movlb	1	; select bank1
 14741  0C63  0A4A               	incf	_DelayOff^(0+128),w
 14742  0C64  0086               	movwf	6
 14743  0C65  3001               	movlw	1	; select bank2/3
 14744  0C66  0087               	movwf	7
 14745  0C67  0020               	movlb	0	; select bank0
 14746  0C68  0868               	movf	??_setDelayOff_GO+1,w
 14747  0C69  0081               	movwf	1
 14748                           
 14749                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14750  0C6A  0866               	movf	setDelayOff_GO@value,w
 14751  0C6B  00E7               	movwf	??_setDelayOff_GO
 14752  0C6C  0867               	movf	??_setDelayOff_GO,w
 14753  0C6D  00E2               	movwf	setProductData@value
 14754  0C6E  086C               	movf	setDelayOff_GO@sw,w
 14755  0C6F  3E1A               	addlw	26
 14756  0C70  319B  236F         	fcall	_setProductData
 14757                           
 14758                           ;DelayOff_B1.c: 103: } else {
 14759  0C72  0008               	return
 14760  0C73                     l6195:	
 14761                           
 14762                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14763  0C73  3005               	movlw	5
 14764  0C74  0020               	movlb	0	; select bank0
 14765  0C75  00E7               	movwf	??_setDelayOff_GO
 14766  0C76  0021               	movlb	1	; select bank1
 14767  0C77  0A4A               	incf	_DelayOff^(0+128),w
 14768  0C78  0086               	movwf	6
 14769  0C79  3001               	movlw	1	; select bank2/3
 14770  0C7A  0087               	movwf	7
 14771  0C7B  0020               	movlb	0	; select bank0
 14772  0C7C  0867               	movf	??_setDelayOff_GO,w
 14773  0C7D  0081               	movwf	1
 14774                           
 14775                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14776  0C7E  3005               	movlw	5
 14777  0C7F  00E7               	movwf	??_setDelayOff_GO
 14778  0C80  0867               	movf	??_setDelayOff_GO,w
 14779  0C81  00E2               	movwf	setProductData@value
 14780  0C82  086C               	movf	setDelayOff_GO@sw,w
 14781  0C83  3E1A               	addlw	26
 14782  0C84  319B  236F         	fcall	_setProductData
 14783                           
 14784                           ;DelayOff_B1.c: 106: }
 14785                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14786  0C86  0008               	return
 14787  0C87                     l6199:	
 14788  0C87  0020               	movlb	0	; select bank0
 14789  0C88  08E5               	movf	setDelayOff_GO@command,f
 14790  0C89  1D03               	skipz
 14791  0C8A  0008               	return
 14792                           
 14793                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14794  0C8B  01E2               	clrf	setProductData@value
 14795  0C8C  086C               	movf	setDelayOff_GO@sw,w
 14796  0C8D  3E1A               	addlw	26
 14797  0C8E  319B  236F         	fcall	_setProductData
 14798  0C90  0008               	return
 14799  0C91                     __end_of_setDelayOff_GO:	
 14800                           
 14801                           	psect	text97
 14802  1CAB                     __ptext97:	
 14803 ;; *************** function ___bmul *****************
 14804 ;; Defined at:
 14805 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14806 ;; Parameters:    Size  Location     Type
 14807 ;;  multiplier      1    wreg     unsigned char 
 14808 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14809 ;; Auto vars:     Size  Location     Type
 14810 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14811 ;;  product         1    2[BANK0 ] unsigned char 
 14812 ;; Return value:  Size  Location     Type
 14813 ;;                  1    wreg      unsigned char 
 14814 ;; Registers used:
 14815 ;;		wreg, status,2, status,0
 14816 ;; Tracked objects:
 14817 ;;		On entry : 0/0
 14818 ;;		On exit  : 0/0
 14819 ;;		Unchanged: 0/0
 14820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14821 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14825 ;;Total ram usage:        4 bytes
 14826 ;; Hardware stack levels used:    1
 14827 ;; Hardware stack levels required when called:    5
 14828 ;; This function calls:
 14829 ;;		Nothing
 14830 ;; This function is called by:
 14831 ;;		_setDelayOff_GO
 14832 ;;		_DelayTimejudge
 14833 ;; This function uses a non-reentrant model
 14834 ;;
 14835                           
 14836                           
 14837                           ;psect for function ___bmul
 14838  1CAB                     ___bmul:	
 14839                           
 14840                           ;incstack = 0
 14841                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14842                           ;___bmul@multiplier stored from wreg
 14843  1CAB  0020               	movlb	0	; select bank0
 14844  1CAC  00A3               	movwf	___bmul@multiplier
 14845  1CAD  01A2               	clrf	___bmul@product
 14846  1CAE                     l5863:	
 14847  1CAE  1C23               	btfss	___bmul@multiplier,0
 14848  1CAF  2CB4               	goto	l5867
 14849  1CB0  0820               	movf	___bmul@multiplicand,w
 14850  1CB1  00A1               	movwf	??___bmul
 14851  1CB2  0821               	movf	??___bmul,w
 14852  1CB3  07A2               	addwf	___bmul@product,f
 14853  1CB4                     l5867:	
 14854  1CB4  1003               	clrc
 14855  1CB5  0DA0               	rlf	___bmul@multiplicand,f
 14856  1CB6  1003               	clrc
 14857  1CB7  0CA3               	rrf	___bmul@multiplier,f
 14858  1CB8  08A3               	movf	___bmul@multiplier,f
 14859  1CB9  1D03               	skipz
 14860  1CBA  2CAE               	goto	l5863
 14861  1CBB  0822               	movf	___bmul@product,w
 14862  1CBC  0008               	return
 14863  1CBD                     __end_of___bmul:	
 14864                           
 14865                           	psect	text98
 14866  1E16                     __ptext98:	
 14867 ;; *************** function _setCmd_Status *****************
 14868 ;; Defined at:
 14869 ;;		line 651 in file "../src/Main_B1.c"
 14870 ;; Parameters:    Size  Location     Type
 14871 ;;  number          1    wreg     unsigned char 
 14872 ;;  cmd             1    0[BANK0 ] unsigned char 
 14873 ;; Auto vars:     Size  Location     Type
 14874 ;;  number          1    2[BANK0 ] unsigned char 
 14875 ;; Return value:  Size  Location     Type
 14876 ;;		None               void
 14877 ;; Registers used:
 14878 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14879 ;; Tracked objects:
 14880 ;;		On entry : 0/0
 14881 ;;		On exit  : 0/0
 14882 ;;		Unchanged: 0/0
 14883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14884 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;Total ram usage:        3 bytes
 14889 ;; Hardware stack levels used:    1
 14890 ;; Hardware stack levels required when called:    5
 14891 ;; This function calls:
 14892 ;;		Nothing
 14893 ;; This function is called by:
 14894 ;;		_setDimmerLights_OnOff
 14895 ;;		_setControl_Lights_Table
 14896 ;; This function uses a non-reentrant model
 14897 ;;
 14898                           
 14899                           
 14900                           ;psect for function _setCmd_Status
 14901  1E16                     _setCmd_Status:	
 14902                           
 14903                           ;incstack = 0
 14904                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14905                           ;setCmd_Status@number stored from wreg
 14906  1E16  0020               	movlb	0	; select bank0
 14907  1E17  00A2               	movwf	setCmd_Status@number
 14908                           
 14909                           ;Main_B1.c: 652: switch (number) {
 14910  1E18  2E28               	goto	l6369
 14911  1E19                     l6365:	
 14912                           ;Main_B1.c: 653: case 1:
 14913                           
 14914                           
 14915                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14916  1E19  0820               	movf	setCmd_Status@cmd,w
 14917  1E1A  3A01               	xorlw	1
 14918  1E1B  3000               	movlw	0
 14919  1E1C  1903               	skipnz
 14920  1E1D  3001               	movlw	1
 14921  1E1E  00A1               	movwf	??_setCmd_Status
 14922  1E1F  0021               	movlb	1	; select bank1
 14923  1E20  0849               	movf	_Cmd^(0+128),w
 14924  1E21  0020               	movlb	0	; select bank0
 14925  1E22  0621               	xorwf	??_setCmd_Status,w
 14926  1E23  39FE               	andlw	-2
 14927  1E24  0621               	xorwf	??_setCmd_Status,w
 14928  1E25  0021               	movlb	1	; select bank1
 14929  1E26  00C9               	movwf	_Cmd^(0+128)
 14930                           
 14931                           ;Main_B1.c: 656: }
 14932                           
 14933                           ;Main_B1.c: 655: break;
 14934  1E27  0008               	return
 14935  1E28                     l6369:	
 14936  1E28  0020               	movlb	0	; select bank0
 14937  1E29  0822               	movf	setCmd_Status@number,w
 14938                           
 14939                           ; Switch size 1, requested type "space"
 14940                           ; Number of cases is 1, Range of values is 1 to 1
 14941                           ; switch strategies available:
 14942                           ; Name         Instructions Cycles
 14943                           ; simple_byte            4     3 (average)
 14944                           ; direct_byte           11     9 (fixed)
 14945                           ; jumptable            263     9 (fixed)
 14946                           ;	Chosen strategy is simple_byte
 14947  1E2A  3A01               	xorlw	1	; case 1
 14948  1E2B  1903               	skipnz
 14949  1E2C  2E19               	goto	l6365
 14950  1E2D  2E2E               	goto	l1499
 14951  1E2E                     l1499:	
 14952  1E2E  0008               	return
 14953  1E2F                     __end_of_setCmd_Status:	
 14954                           
 14955                           	psect	text99
 14956  1B21                     __ptext99:	
 14957 ;; *************** function _getMain_All_LightsStatus *****************
 14958 ;; Defined at:
 14959 ;;		line 373 in file "../src/Main_B1.c"
 14960 ;; Parameters:    Size  Location     Type
 14961 ;;		None
 14962 ;; Auto vars:     Size  Location     Type
 14963 ;;  status          1    0[BANK0 ] unsigned char 
 14964 ;; Return value:  Size  Location     Type
 14965 ;;                  1    wreg      unsigned char 
 14966 ;; Registers used:
 14967 ;;		wreg, status,2
 14968 ;; Tracked objects:
 14969 ;;		On entry : 0/0
 14970 ;;		On exit  : 0/0
 14971 ;;		Unchanged: 0/0
 14972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14977 ;;Total ram usage:        1 bytes
 14978 ;; Hardware stack levels used:    1
 14979 ;; Hardware stack levels required when called:    5
 14980 ;; This function calls:
 14981 ;;		Nothing
 14982 ;; This function is called by:
 14983 ;;		_DimmerLights_Main
 14984 ;;		_setDimmerLights_Main
 14985 ;;		_setDimmerLights_OnOff
 14986 ;;		_Flash_Memory_Main
 14987 ;;		_Exception_Main
 14988 ;;		_Load_Main
 14989 ;;		_setTemp_Main
 14990 ;;		_setControl_Lights_Table
 14991 ;; This function uses a non-reentrant model
 14992 ;;
 14993                           
 14994                           
 14995                           ;psect for function _getMain_All_LightsStatus
 14996  1B21                     _getMain_All_LightsStatus:	
 14997                           
 14998                           ;Main_B1.c: 374: char status = 0;
 14999                           
 15000                           ;incstack = 0
 15001                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 15002  1B21  0020               	movlb	0	; select bank0
 15003  1B22  01A0               	clrf	getMain_All_LightsStatus@status
 15004                           
 15005                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 15006  1B23  3000               	movlw	0
 15007  1B24  0022               	movlb	2	; select bank2
 15008  1B25  1861               	btfsc	(_DimmerLights1^(0+256)+1),0
 15009  1B26  3001               	movlw	1
 15010  1B27  0020               	movlb	0	; select bank0
 15011  1B28  00A0               	movwf	getMain_All_LightsStatus@status
 15012                           
 15013                           ;Main_B1.c: 420: return status;
 15014  1B29  0820               	movf	getMain_All_LightsStatus@status,w
 15015  1B2A  0008               	return
 15016  1B2B                     __end_of_getMain_All_LightsStatus:	
 15017                           
 15018                           	psect	text100
 15019  1C44                     __ptext100:	
 15020 ;; *************** function _getDelayOff_GO *****************
 15021 ;; Defined at:
 15022 ;;		line 114 in file "../src/DelayOff_B1.c"
 15023 ;; Parameters:    Size  Location     Type
 15024 ;;  sw              1    wreg     unsigned char 
 15025 ;; Auto vars:     Size  Location     Type
 15026 ;;  sw              1    2[BANK0 ] unsigned char 
 15027 ;;  go              1    3[BANK0 ] unsigned char 
 15028 ;; Return value:  Size  Location     Type
 15029 ;;                  1    wreg      unsigned char 
 15030 ;; Registers used:
 15031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15032 ;; Tracked objects:
 15033 ;;		On entry : 0/0
 15034 ;;		On exit  : 0/0
 15035 ;;		Unchanged: 0/0
 15036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15038 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15040 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15041 ;;Total ram usage:        2 bytes
 15042 ;; Hardware stack levels used:    1
 15043 ;; Hardware stack levels required when called:    6
 15044 ;; This function calls:
 15045 ;;		_DelayOffPointSelect
 15046 ;; This function is called by:
 15047 ;;		_setDimmerLights_OnOff
 15048 ;; This function uses a non-reentrant model
 15049 ;;
 15050                           
 15051                           
 15052                           ;psect for function _getDelayOff_GO
 15053  1C44                     _getDelayOff_GO:	
 15054                           
 15055                           ;incstack = 0
 15056                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15057                           ;getDelayOff_GO@sw stored from wreg
 15058  1C44  0020               	movlb	0	; select bank0
 15059  1C45  00A2               	movwf	getDelayOff_GO@sw
 15060                           
 15061                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15062  1C46  0822               	movf	getDelayOff_GO@sw,w
 15063  1C47  319B  2357         	fcall	_DelayOffPointSelect
 15064                           
 15065                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15066  1C49  0021               	movlb	1	; select bank1
 15067  1C4A  084A               	movf	_DelayOff^(0+128),w
 15068  1C4B  0086               	movwf	6
 15069  1C4C  3001               	movlw	1	; select bank2/3
 15070  1C4D  0087               	movwf	7
 15071  1C4E  3000               	movlw	0
 15072  1C4F  1881               	btfsc	1,1
 15073  1C50  3001               	movlw	1
 15074  1C51  0020               	movlb	0	; select bank0
 15075  1C52  00A3               	movwf	getDelayOff_GO@go
 15076                           
 15077                           ;DelayOff_B1.c: 117: return go;
 15078  1C53  0823               	movf	getDelayOff_GO@go,w
 15079  1C54  0008               	return
 15080  1C55                     __end_of_getDelayOff_GO:	
 15081                           
 15082                           	psect	text101
 15083  1C99                     __ptext101:	
 15084 ;; *************** function _getCmd_Status *****************
 15085 ;; Defined at:
 15086 ;;		line 659 in file "../src/Main_B1.c"
 15087 ;; Parameters:    Size  Location     Type
 15088 ;;  number          1    wreg     unsigned char 
 15089 ;; Auto vars:     Size  Location     Type
 15090 ;;  number          1    0[BANK0 ] unsigned char 
 15091 ;;  cmd             1    1[BANK0 ] unsigned char 
 15092 ;; Return value:  Size  Location     Type
 15093 ;;                  1    wreg      unsigned char 
 15094 ;; Registers used:
 15095 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15096 ;; Tracked objects:
 15097 ;;		On entry : 0/0
 15098 ;;		On exit  : 0/0
 15099 ;;		Unchanged: 0/0
 15100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15102 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15104 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15105 ;;Total ram usage:        2 bytes
 15106 ;; Hardware stack levels used:    1
 15107 ;; Hardware stack levels required when called:    5
 15108 ;; This function calls:
 15109 ;;		Nothing
 15110 ;; This function is called by:
 15111 ;;		_setDimmerLights_OnOff
 15112 ;; This function uses a non-reentrant model
 15113 ;;
 15114                           
 15115                           
 15116                           ;psect for function _getCmd_Status
 15117  1C99                     _getCmd_Status:	
 15118                           
 15119                           ;incstack = 0
 15120                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15121                           ;getCmd_Status@number stored from wreg
 15122  1C99  0020               	movlb	0	; select bank0
 15123  1C9A  00A0               	movwf	getCmd_Status@number
 15124                           
 15125                           ;Main_B1.c: 660: char cmd = 0;
 15126  1C9B  01A1               	clrf	getCmd_Status@cmd
 15127                           
 15128                           ;Main_B1.c: 661: switch (number) {
 15129  1C9C  2CA4               	goto	l6637
 15130  1C9D                     l6633:	
 15131                           ;Main_B1.c: 662: case 1:
 15132                           
 15133                           
 15134                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15135  1C9D  3000               	movlw	0
 15136  1C9E  0021               	movlb	1	; select bank1
 15137  1C9F  1849               	btfsc	_Cmd^(0+128),0
 15138  1CA0  3001               	movlw	1
 15139  1CA1  0020               	movlb	0	; select bank0
 15140  1CA2  00A1               	movwf	getCmd_Status@cmd
 15141                           
 15142                           ;Main_B1.c: 665: }
 15143                           
 15144                           ;Main_B1.c: 664: break;
 15145  1CA3  2CA9               	goto	l6639
 15146  1CA4                     l6637:	
 15147  1CA4  0820               	movf	getCmd_Status@number,w
 15148                           
 15149                           ; Switch size 1, requested type "space"
 15150                           ; Number of cases is 1, Range of values is 1 to 1
 15151                           ; switch strategies available:
 15152                           ; Name         Instructions Cycles
 15153                           ; simple_byte            4     3 (average)
 15154                           ; direct_byte           11     9 (fixed)
 15155                           ; jumptable            263     9 (fixed)
 15156                           ;	Chosen strategy is simple_byte
 15157  1CA5  3A01               	xorlw	1	; case 1
 15158  1CA6  1903               	skipnz
 15159  1CA7  2C9D               	goto	l6633
 15160  1CA8  2CA9               	goto	l6639
 15161  1CA9                     l6639:	
 15162                           
 15163                           ;Main_B1.c: 666: return cmd;
 15164  1CA9  0821               	movf	getCmd_Status@cmd,w
 15165  1CAA  0008               	return
 15166  1CAB                     __end_of_getCmd_Status:	
 15167                           
 15168                           	psect	text102
 15169  143A                     __ptext102:	
 15170 ;; *************** function _setDimmerLights_Dimming *****************
 15171 ;; Defined at:
 15172 ;;		line 958 in file "../src/Dimmer_B1.c"
 15173 ;; Parameters:    Size  Location     Type
 15174 ;;  lights          1    wreg     unsigned char 
 15175 ;;  status          1   74[BANK0 ] unsigned char 
 15176 ;; Auto vars:     Size  Location     Type
 15177 ;;  lights          1   77[BANK0 ] unsigned char 
 15178 ;;  value           1   76[BANK0 ] unsigned char 
 15179 ;; Return value:  Size  Location     Type
 15180 ;;		None               void
 15181 ;; Registers used:
 15182 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15183 ;; Tracked objects:
 15184 ;;		On entry : 0/0
 15185 ;;		On exit  : 0/0
 15186 ;;		Unchanged: 0/0
 15187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15188 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15189 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15190 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15191 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15192 ;;Total ram usage:        4 bytes
 15193 ;; Hardware stack levels used:    1
 15194 ;; Hardware stack levels required when called:    8
 15195 ;; This function calls:
 15196 ;;		_getDimmerIntr_DimmingValue
 15197 ;;		_getDimmerLights_ValueToPercent
 15198 ;;		_setBuz
 15199 ;;		_setDimmerIntr_Dimming_Sw
 15200 ;;		_setDimmerIntr_MaxmumValue
 15201 ;;		_setDimmerLights_Line
 15202 ;;		_setMemory_Modify
 15203 ;;		_setProductData
 15204 ;;		_setRF_DimmerLights
 15205 ;;		_setRF_TransceiveGO
 15206 ;;		_setTxData
 15207 ;; This function is called by:
 15208 ;;		_setDimmerLights_Main
 15209 ;; This function uses a non-reentrant model
 15210 ;;
 15211                           
 15212                           
 15213                           ;psect for function _setDimmerLights_Dimming
 15214  143A                     _setDimmerLights_Dimming:	
 15215                           
 15216                           ;incstack = 0
 15217                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15218                           ;setDimmerLights_Dimming@lights stored from wreg
 15219  143A  0020               	movlb	0	; select bank0
 15220  143B  00ED               	movwf	setDimmerLights_Dimming@lights
 15221                           
 15222                           ;Dimmer_B1.c: 959: if (status == 1) {
 15223  143C  086A               	movf	setDimmerLights_Dimming@status,w
 15224  143D  3A01               	xorlw	1
 15225  143E  1D03               	skipz
 15226  143F  2C53               	goto	l6929
 15227                           
 15228                           ;Dimmer_B1.c: 960: setDimmerIntr_Dimming_Sw(lights, 1);
 15229  1440  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15230  1441  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15231  1442  086D               	movf	setDimmerLights_Dimming@lights,w
 15232  1443  319D  25D0  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15233                           
 15234                           ;Dimmer_B1.c: 963: setRF_TransceiveGO(0);
 15235  1446  3000               	movlw	0
 15236  1447  319D  2506  3194   	fcall	_setRF_TransceiveGO
 15237                           
 15238                           ;Dimmer_B1.c: 965: setBuz(1, 100);
 15239  144A  3064               	movlw	100
 15240  144B  0020               	movlb	0	; select bank0
 15241  144C  00A9               	movwf	setBuz@time
 15242  144D  3000               	movlw	0
 15243  144E  00AA               	movwf	setBuz@time+1
 15244  144F  3001               	movlw	1
 15245  1450  3194  2490         	fcall	_setBuz
 15246                           
 15247                           ;Dimmer_B1.c: 966: } else if (status == 0) {
 15248  1452  0008               	return
 15249  1453                     l6929:	
 15250  1453  0020               	movlb	0	; select bank0
 15251  1454  08EA               	movf	setDimmerLights_Dimming@status,f
 15252  1455  1D03               	skipz
 15253  1456  0008               	return
 15254                           
 15255                           ;Dimmer_B1.c: 967: setDimmerIntr_Dimming_Sw(lights, 0);
 15256  1457  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15257  1458  086D               	movf	setDimmerLights_Dimming@lights,w
 15258  1459  319D  25D0  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15259                           
 15260                           ;Dimmer_B1.c: 970: Dimmer.Load_Status = 0;
 15261  145C  0022               	movlb	2	; select bank2
 15262  145D  112C               	bcf	_Dimmer^(0+256),2
 15263                           
 15264                           ;Dimmer_B1.c: 971: setDimmerLights_Line(lights);
 15265  145E  0020               	movlb	0	; select bank0
 15266  145F  086D               	movf	setDimmerLights_Dimming@lights,w
 15267  1460  319C  2433  3194   	fcall	_setDimmerLights_Line
 15268                           
 15269                           ;Dimmer_B1.c: 973: char value = getDimmerIntr_DimmingValue(lights);
 15270  1463  0020               	movlb	0	; select bank0
 15271  1464  086D               	movf	setDimmerLights_Dimming@lights,w
 15272  1465  319C  2403  3194   	fcall	_getDimmerIntr_DimmingValue
 15273  1468  0020               	movlb	0	; select bank0
 15274  1469  00EB               	movwf	??_setDimmerLights_Dimming
 15275  146A  086B               	movf	??_setDimmerLights_Dimming,w
 15276  146B  00EC               	movwf	setDimmerLights_Dimming@value
 15277                           
 15278                           ;Dimmer_B1.c: 974: setDimmerIntr_MaxmumValue(lights, value);
 15279  146C  086C               	movf	setDimmerLights_Dimming@value,w
 15280  146D  00EB               	movwf	??_setDimmerLights_Dimming
 15281  146E  086B               	movf	??_setDimmerLights_Dimming,w
 15282  146F  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15283  1470  086D               	movf	setDimmerLights_Dimming@lights,w
 15284  1471  319B  237B  3194   	fcall	_setDimmerIntr_MaxmumValue
 15285                           
 15286                           ;Dimmer_B1.c: 975: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15287  1474  0020               	movlb	0	; select bank0
 15288  1475  086C               	movf	setDimmerLights_Dimming@value,w
 15289  1476  3196  26CB  3194   	fcall	_getDimmerLights_ValueToPercent
 15290  1479  0020               	movlb	0	; select bank0
 15291  147A  00EB               	movwf	??_setDimmerLights_Dimming
 15292  147B  086B               	movf	??_setDimmerLights_Dimming,w
 15293  147C  00E2               	movwf	setProductData@value
 15294  147D  086D               	movf	setDimmerLights_Dimming@lights,w
 15295  147E  3E14               	addlw	20
 15296  147F  319B  236F  3194   	fcall	_setProductData
 15297                           
 15298                           ;Dimmer_B1.c: 982: setMemory_Modify(1);
 15299  1482  3001               	movlw	1
 15300  1483  319C  24F3  3194   	fcall	_setMemory_Modify
 15301                           
 15302                           ;Dimmer_B1.c: 986: setRF_DimmerLights(lights, 1);
 15303  1486  0020               	movlb	0	; select bank0
 15304  1487  01E5               	clrf	setRF_DimmerLights@on
 15305  1488  0AE5               	incf	setRF_DimmerLights@on,f
 15306  1489  086D               	movf	setDimmerLights_Dimming@lights,w
 15307  148A  3197  2730  3194   	fcall	_setRF_DimmerLights
 15308                           
 15309                           ;Dimmer_B1.c: 987: setTxData();
 15310  148D  318E  267B         	fcall	_setTxData
 15311  148F  0008               	return
 15312  1490                     __end_of_setDimmerLights_Dimming:	
 15313                           
 15314                           	psect	text103
 15315  0E7B                     __ptext103:	
 15316 ;; *************** function _setTxData *****************
 15317 ;; Defined at:
 15318 ;;		line 183 in file "../src/RF_Control_B1.c"
 15319 ;; Parameters:    Size  Location     Type
 15320 ;;		None
 15321 ;; Auto vars:     Size  Location     Type
 15322 ;;  i               1    0        unsigned char 
 15323 ;; Return value:  Size  Location     Type
 15324 ;;		None               void
 15325 ;; Registers used:
 15326 ;;		wreg, fsr1l, fsr1h, status,2
 15327 ;; Tracked objects:
 15328 ;;		On entry : 0/0
 15329 ;;		On exit  : 0/0
 15330 ;;		Unchanged: 0/0
 15331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15334 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15335 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15336 ;;Total ram usage:        1 bytes
 15337 ;; Hardware stack levels used:    1
 15338 ;; Hardware stack levels required when called:    5
 15339 ;; This function calls:
 15340 ;;		Nothing
 15341 ;; This function is called by:
 15342 ;;		_setDimmerLights_OnOff
 15343 ;;		_setDimmerLights_Dimming
 15344 ;;		_getRxData
 15345 ;;		_setControl_Lights_Table
 15346 ;;		_setRFSW_Control
 15347 ;;		_setRFSW_AdjControl
 15348 ;; This function uses a non-reentrant model
 15349 ;;
 15350                           
 15351                           
 15352                           ;psect for function _setTxData
 15353  0E7B                     _setTxData:	
 15354                           
 15355                           ;RF_Control_B1.c: 184: char i;
 15356                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15357                           
 15358                           ;incstack = 0
 15359                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15360  0E7B  0021               	movlb	1	; select bank1
 15361  0E7C  1C20               	btfss	_RF1^(0+128),0
 15362  0E7D  0008               	return
 15363                           
 15364                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15365  0E7E  1520               	bsf	_RF1^(0+128),2
 15366                           
 15367                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15368  0E7F  01A3               	clrf	(_RF1^(0+128)+3)
 15369  0E80  01A4               	clrf	((_RF1+1)^(0+128)+3)
 15370                           
 15371                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15372  0E81  3063               	movlw	99
 15373  0E82  0020               	movlb	0	; select bank0
 15374  0E83  00A0               	movwf	??_setTxData
 15375  0E84  0820               	movf	??_setTxData,w
 15376  0E85  0023               	movlb	3	; select bank3
 15377  0E86  00A0               	movwf	_RF_Data^(0+384)
 15378                           
 15379                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15380  0E87  3002               	movlw	2
 15381  0E88  0020               	movlb	0	; select bank0
 15382  0E89  00A0               	movwf	??_setTxData
 15383  0E8A  0820               	movf	??_setTxData,w
 15384  0E8B  0023               	movlb	3	; select bank3
 15385  0E8C  00A1               	movwf	(_RF_Data^(0+384)+1)
 15386                           
 15387                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15388  0E8D  0021               	movlb	1	; select bank1
 15389  0E8E  086E               	movf	_product^(0+128),w
 15390  0E8F  0086               	movwf	6
 15391  0E90  3001               	movlw	1	; select bank2/3
 15392  0E91  0087               	movwf	7
 15393  0E92  3001               	movlw	1	; select bank2/3
 15394  0E93  3F42               	moviw [2]fsr1
 15395  0E94  0023               	movlb	3	; select bank3
 15396  0E95  00A2               	movwf	(_RF_Data^(0+384)+2)
 15397                           
 15398                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15399  0E96  0021               	movlb	1	; select bank1
 15400  0E97  086E               	movf	_product^(0+128),w
 15401  0E98  0086               	movwf	6
 15402  0E99  3001               	movlw	1	; select bank2/3
 15403  0E9A  0087               	movwf	7
 15404  0E9B  3001               	movlw	1	; select bank2/3
 15405  0E9C  3F43               	moviw [3]fsr1
 15406  0E9D  0023               	movlb	3	; select bank3
 15407  0E9E  00A3               	movwf	(_RF_Data^(0+384)+3)
 15408                           
 15409                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15410  0E9F  0021               	movlb	1	; select bank1
 15411  0EA0  086E               	movf	_product^(0+128),w
 15412  0EA1  0086               	movwf	6
 15413  0EA2  3001               	movlw	1	; select bank2/3
 15414  0EA3  0087               	movwf	7
 15415  0EA4  3001               	movlw	1	; select bank2/3
 15416  0EA5  3F44               	moviw [4]fsr1
 15417  0EA6  0023               	movlb	3	; select bank3
 15418  0EA7  00A4               	movwf	(_RF_Data^(0+384)+4)
 15419                           
 15420                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15421  0EA8  0021               	movlb	1	; select bank1
 15422  0EA9  086E               	movf	_product^(0+128),w
 15423  0EAA  0086               	movwf	6
 15424  0EAB  3001               	movlw	1	; select bank2/3
 15425  0EAC  0087               	movwf	7
 15426  0EAD  3001               	movlw	1	; select bank2/3
 15427  0EAE  3F45               	moviw [5]fsr1
 15428  0EAF  0023               	movlb	3	; select bank3
 15429  0EB0  00A5               	movwf	(_RF_Data^(0+384)+5)
 15430                           
 15431                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15432  0EB1  0021               	movlb	1	; select bank1
 15433  0EB2  086E               	movf	_product^(0+128),w
 15434  0EB3  0086               	movwf	6
 15435  0EB4  3001               	movlw	1	; select bank2/3
 15436  0EB5  0087               	movwf	7
 15437  0EB6  3001               	movlw	1	; select bank2/3
 15438  0EB7  3F46               	moviw [6]fsr1
 15439  0EB8  0023               	movlb	3	; select bank3
 15440  0EB9  00A6               	movwf	(_RF_Data^(0+384)+6)
 15441                           
 15442                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15443  0EBA  0021               	movlb	1	; select bank1
 15444  0EBB  086E               	movf	_product^(0+128),w
 15445  0EBC  0086               	movwf	6
 15446  0EBD  3001               	movlw	1	; select bank2/3
 15447  0EBE  0087               	movwf	7
 15448  0EBF  3001               	movlw	1	; select bank2/3
 15449  0EC0  3F47               	moviw [7]fsr1
 15450  0EC1  0023               	movlb	3	; select bank3
 15451  0EC2  00A7               	movwf	(_RF_Data^(0+384)+7)
 15452                           
 15453                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15454  0EC3  0021               	movlb	1	; select bank1
 15455  0EC4  086E               	movf	_product^(0+128),w
 15456  0EC5  0086               	movwf	6
 15457  0EC6  3001               	movlw	1	; select bank2/3
 15458  0EC7  0087               	movwf	7
 15459  0EC8  3001               	movlw	1	; select bank2/3
 15460  0EC9  3F48               	moviw [8]fsr1
 15461  0ECA  0023               	movlb	3	; select bank3
 15462  0ECB  00A8               	movwf	(_RF_Data^(0+384)+8)
 15463                           
 15464                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15465  0ECC  0021               	movlb	1	; select bank1
 15466  0ECD  086E               	movf	_product^(0+128),w
 15467  0ECE  0086               	movwf	6
 15468  0ECF  3001               	movlw	1	; select bank2/3
 15469  0ED0  0087               	movwf	7
 15470  0ED1  3001               	movlw	1	; select bank2/3
 15471  0ED2  3F49               	moviw [9]fsr1
 15472  0ED3  0023               	movlb	3	; select bank3
 15473  0ED4  00A9               	movwf	(_RF_Data^(0+384)+9)
 15474                           
 15475                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15476  0ED5  0021               	movlb	1	; select bank1
 15477  0ED6  086E               	movf	_product^(0+128),w
 15478  0ED7  0086               	movwf	6
 15479  0ED8  3001               	movlw	1	; select bank2/3
 15480  0ED9  0087               	movwf	7
 15481  0EDA  3001               	movlw	1	; select bank2/3
 15482  0EDB  3F4A               	moviw [10]fsr1
 15483  0EDC  0023               	movlb	3	; select bank3
 15484  0EDD  00AA               	movwf	(_RF_Data^(0+384)+10)
 15485                           
 15486                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15487  0EDE  0021               	movlb	1	; select bank1
 15488  0EDF  086E               	movf	_product^(0+128),w
 15489  0EE0  0086               	movwf	6
 15490  0EE1  3001               	movlw	1	; select bank2/3
 15491  0EE2  0087               	movwf	7
 15492  0EE3  3001               	movlw	1	; select bank2/3
 15493  0EE4  3F4B               	moviw [11]fsr1
 15494  0EE5  0023               	movlb	3	; select bank3
 15495  0EE6  00AB               	movwf	(_RF_Data^(0+384)+11)
 15496                           
 15497                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15498  0EE7  0021               	movlb	1	; select bank1
 15499  0EE8  086E               	movf	_product^(0+128),w
 15500  0EE9  0086               	movwf	6
 15501  0EEA  3001               	movlw	1	; select bank2/3
 15502  0EEB  0087               	movwf	7
 15503  0EEC  3001               	movlw	1	; select bank2/3
 15504  0EED  3F4C               	moviw [12]fsr1
 15505  0EEE  0023               	movlb	3	; select bank3
 15506  0EEF  00AC               	movwf	(_RF_Data^(0+384)+12)
 15507                           
 15508                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15509  0EF0  0021               	movlb	1	; select bank1
 15510  0EF1  086E               	movf	_product^(0+128),w
 15511  0EF2  0086               	movwf	6
 15512  0EF3  3001               	movlw	1	; select bank2/3
 15513  0EF4  0087               	movwf	7
 15514  0EF5  3001               	movlw	1	; select bank2/3
 15515  0EF6  3F4D               	moviw [13]fsr1
 15516  0EF7  0023               	movlb	3	; select bank3
 15517  0EF8  00AD               	movwf	(_RF_Data^(0+384)+13)
 15518                           
 15519                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15520  0EF9  0021               	movlb	1	; select bank1
 15521  0EFA  086E               	movf	_product^(0+128),w
 15522  0EFB  0086               	movwf	6
 15523  0EFC  3001               	movlw	1	; select bank2/3
 15524  0EFD  0087               	movwf	7
 15525  0EFE  3001               	movlw	1	; select bank2/3
 15526  0EFF  3F4E               	moviw [14]fsr1
 15527  0F00  0023               	movlb	3	; select bank3
 15528  0F01  00AE               	movwf	(_RF_Data^(0+384)+14)
 15529                           
 15530                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15531  0F02  0021               	movlb	1	; select bank1
 15532  0F03  086E               	movf	_product^(0+128),w
 15533  0F04  0086               	movwf	6
 15534  0F05  3001               	movlw	1	; select bank2/3
 15535  0F06  0087               	movwf	7
 15536  0F07  3001               	movlw	1	; select bank2/3
 15537  0F08  3F4F               	moviw [15]fsr1
 15538  0F09  0023               	movlb	3	; select bank3
 15539  0F0A  00AF               	movwf	(_RF_Data^(0+384)+15)
 15540                           
 15541                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15542  0F0B  0021               	movlb	1	; select bank1
 15543  0F0C  086E               	movf	_product^(0+128),w
 15544  0F0D  0086               	movwf	6
 15545  0F0E  3001               	movlw	1	; select bank2/3
 15546  0F0F  0087               	movwf	7
 15547  0F10  3001               	movlw	1	; select bank2/3
 15548  0F11  3F50               	moviw [16]fsr1
 15549  0F12  0023               	movlb	3	; select bank3
 15550  0F13  00B0               	movwf	(_RF_Data^(0+384)+16)
 15551                           
 15552                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15553  0F14  0021               	movlb	1	; select bank1
 15554  0F15  086E               	movf	_product^(0+128),w
 15555  0F16  0086               	movwf	6
 15556  0F17  3001               	movlw	1	; select bank2/3
 15557  0F18  0087               	movwf	7
 15558  0F19  3001               	movlw	1	; select bank2/3
 15559  0F1A  3F51               	moviw [17]fsr1
 15560  0F1B  0023               	movlb	3	; select bank3
 15561  0F1C  00B1               	movwf	(_RF_Data^(0+384)+17)
 15562                           
 15563                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15564  0F1D  0021               	movlb	1	; select bank1
 15565  0F1E  086E               	movf	_product^(0+128),w
 15566  0F1F  0086               	movwf	6
 15567  0F20  3001               	movlw	1	; select bank2/3
 15568  0F21  0087               	movwf	7
 15569  0F22  3001               	movlw	1	; select bank2/3
 15570  0F23  3F52               	moviw [18]fsr1
 15571  0F24  0023               	movlb	3	; select bank3
 15572  0F25  00B2               	movwf	(_RF_Data^(0+384)+18)
 15573                           
 15574                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15575  0F26  0021               	movlb	1	; select bank1
 15576  0F27  086E               	movf	_product^(0+128),w
 15577  0F28  0086               	movwf	6
 15578  0F29  3001               	movlw	1	; select bank2/3
 15579  0F2A  0087               	movwf	7
 15580  0F2B  3001               	movlw	1	; select bank2/3
 15581  0F2C  3F53               	moviw [19]fsr1
 15582  0F2D  0023               	movlb	3	; select bank3
 15583  0F2E  00B3               	movwf	(_RF_Data^(0+384)+19)
 15584                           
 15585                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15586  0F2F  30D1               	movlw	209
 15587  0F30  0020               	movlb	0	; select bank0
 15588  0F31  00A0               	movwf	??_setTxData
 15589  0F32  0820               	movf	??_setTxData,w
 15590  0F33  0023               	movlb	3	; select bank3
 15591  0F34  00B4               	movwf	(_RF_Data^(0+384)+20)
 15592  0F35  0008               	return
 15593  0F36                     __end_of_setTxData:	
 15594                           
 15595                           	psect	text104
 15596  1D06                     __ptext104:	
 15597 ;; *************** function _setRF_TransceiveGO *****************
 15598 ;; Defined at:
 15599 ;;		line 505 in file "../src/RF_Control_B1.c"
 15600 ;; Parameters:    Size  Location     Type
 15601 ;;  command         1    wreg     unsigned char 
 15602 ;; Auto vars:     Size  Location     Type
 15603 ;;  command         1    1[BANK0 ] unsigned char 
 15604 ;; Return value:  Size  Location     Type
 15605 ;;		None               void
 15606 ;; Registers used:
 15607 ;;		wreg, status,2, status,0
 15608 ;; Tracked objects:
 15609 ;;		On entry : 0/0
 15610 ;;		On exit  : 0/0
 15611 ;;		Unchanged: 0/0
 15612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15615 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15617 ;;Total ram usage:        2 bytes
 15618 ;; Hardware stack levels used:    1
 15619 ;; Hardware stack levels required when called:    5
 15620 ;; This function calls:
 15621 ;;		Nothing
 15622 ;; This function is called by:
 15623 ;;		_setDimmerLights_Dimming
 15624 ;; This function uses a non-reentrant model
 15625 ;;
 15626                           
 15627                           
 15628                           ;psect for function _setRF_TransceiveGO
 15629  1D06                     _setRF_TransceiveGO:	
 15630                           
 15631                           ;incstack = 0
 15632                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15633                           ;setRF_TransceiveGO@command stored from wreg
 15634  1D06  0020               	movlb	0	; select bank0
 15635  1D07  00A1               	movwf	setRF_TransceiveGO@command
 15636                           
 15637                           ;RF_Control_B1.c: 506: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15638  1D08  0821               	movf	setRF_TransceiveGO@command,w
 15639  1D09  3A01               	xorlw	1
 15640  1D0A  3000               	movlw	0
 15641  1D0B  1903               	skipnz
 15642  1D0C  3001               	movlw	1
 15643  1D0D  00A0               	movwf	??_setRF_TransceiveGO
 15644  1D0E  0DA0               	rlf	??_setRF_TransceiveGO,f
 15645  1D0F  0DA0               	rlf	??_setRF_TransceiveGO,f
 15646  1D10  0021               	movlb	1	; select bank1
 15647  1D11  0820               	movf	_RF1^(0+128),w
 15648  1D12  0020               	movlb	0	; select bank0
 15649  1D13  0620               	xorwf	??_setRF_TransceiveGO,w
 15650  1D14  39FB               	andlw	-5
 15651  1D15  0620               	xorwf	??_setRF_TransceiveGO,w
 15652  1D16  0021               	movlb	1	; select bank1
 15653  1D17  00A0               	movwf	_RF1^(0+128)
 15654  1D18  0008               	return
 15655  1D19                     __end_of_setRF_TransceiveGO:	
 15656                           
 15657                           	psect	text105
 15658  1730                     __ptext105:	
 15659 ;; *************** function _setRF_DimmerLights *****************
 15660 ;; Defined at:
 15661 ;;		line 490 in file "../src/RF_Control_B1.c"
 15662 ;; Parameters:    Size  Location     Type
 15663 ;;  lights          1    wreg     unsigned char 
 15664 ;;  on              1   69[BANK0 ] unsigned char 
 15665 ;; Auto vars:     Size  Location     Type
 15666 ;;  lights          1   73[BANK0 ] unsigned char 
 15667 ;;  status          1   72[BANK0 ] unsigned char 
 15668 ;; Return value:  Size  Location     Type
 15669 ;;		None               void
 15670 ;; Registers used:
 15671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15672 ;; Tracked objects:
 15673 ;;		On entry : 0/0
 15674 ;;		On exit  : 0/0
 15675 ;;		Unchanged: 0/0
 15676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15677 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15679 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15680 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15681 ;;Total ram usage:        5 bytes
 15682 ;; Hardware stack levels used:    1
 15683 ;; Hardware stack levels required when called:    6
 15684 ;; This function calls:
 15685 ;;		_setProductData
 15686 ;; This function is called by:
 15687 ;;		_setDimmerLights_OnOff
 15688 ;;		_setDimmerLights_Dimming
 15689 ;;		_setRFSW_Control
 15690 ;; This function uses a non-reentrant model
 15691 ;;
 15692                           
 15693                           
 15694                           ;psect for function _setRF_DimmerLights
 15695  1730                     _setRF_DimmerLights:	
 15696                           
 15697                           ;incstack = 0
 15698                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15699                           ;setRF_DimmerLights@lights stored from wreg
 15700  1730  0020               	movlb	0	; select bank0
 15701  1731  00E9               	movwf	setRF_DimmerLights@lights
 15702                           
 15703                           ;RF_Control_B1.c: 491: char status = 1;
 15704  1732  01E8               	clrf	setRF_DimmerLights@status
 15705  1733  0AE8               	incf	setRF_DimmerLights@status,f
 15706                           
 15707                           ;RF_Control_B1.c: 492: status <<= (lights - 1);
 15708  1734  0869               	movf	setRF_DimmerLights@lights,w
 15709  1735  3EFF               	addlw	-1
 15710  1736  0A89               	incf	9,f
 15711  1737  2F3A               	goto	u5320
 15712  1738                     u5325:	
 15713  1738  1003               	clrc
 15714  1739  0DE8               	rlf	setRF_DimmerLights@status,f
 15715  173A                     u5320:	
 15716  173A  3EFF               	addlw	-1
 15717  173B  1D03               	skipz
 15718  173C  2F38               	goto	u5325
 15719                           
 15720                           ;RF_Control_B1.c: 493: setProductData(11, lights);
 15721  173D  0869               	movf	setRF_DimmerLights@lights,w
 15722  173E  00E6               	movwf	??_setRF_DimmerLights
 15723  173F  0866               	movf	??_setRF_DimmerLights,w
 15724  1740  00E2               	movwf	setProductData@value
 15725  1741  300B               	movlw	11
 15726  1742  319B  236F  3197   	fcall	_setProductData
 15727                           
 15728                           ;RF_Control_B1.c: 494: setProductData(17, product->Data[26 + lights]);
 15729  1745  0020               	movlb	0	; select bank0
 15730  1746  0869               	movf	setRF_DimmerLights@lights,w
 15731  1747  3E1A               	addlw	26
 15732  1748  0021               	movlb	1	; select bank1
 15733  1749  076E               	addwf	_product^(0+128),w
 15734  174A  0020               	movlb	0	; select bank0
 15735  174B  00E6               	movwf	??_setRF_DimmerLights
 15736  174C  0866               	movf	??_setRF_DimmerLights,w
 15737  174D  0086               	movwf	6
 15738  174E  3001               	movlw	1	; select bank2/3
 15739  174F  0087               	movwf	7
 15740  1750  0801               	movf	1,w
 15741  1751  00E7               	movwf	??_setRF_DimmerLights+1
 15742  1752  0867               	movf	??_setRF_DimmerLights+1,w
 15743  1753  00E2               	movwf	setProductData@value
 15744  1754  3011               	movlw	17
 15745  1755  319B  236F  3197   	fcall	_setProductData
 15746                           
 15747                           ;RF_Control_B1.c: 495: if (on == 1) {
 15748  1758  0020               	movlb	0	; select bank0
 15749  1759  0865               	movf	setRF_DimmerLights@on,w
 15750  175A  3A01               	xorlw	1
 15751  175B  1D03               	skipz
 15752  175C  2F7F               	goto	l6235
 15753                           
 15754                           ;RF_Control_B1.c: 496: setProductData(9, product->Data[20 + lights]);
 15755  175D  0869               	movf	setRF_DimmerLights@lights,w
 15756  175E  3E14               	addlw	20
 15757  175F  0021               	movlb	1	; select bank1
 15758  1760  076E               	addwf	_product^(0+128),w
 15759  1761  0020               	movlb	0	; select bank0
 15760  1762  00E6               	movwf	??_setRF_DimmerLights
 15761  1763  0866               	movf	??_setRF_DimmerLights,w
 15762  1764  0086               	movwf	6
 15763  1765  3001               	movlw	1	; select bank2/3
 15764  1766  0087               	movwf	7
 15765  1767  0801               	movf	1,w
 15766  1768  00E7               	movwf	??_setRF_DimmerLights+1
 15767  1769  0867               	movf	??_setRF_DimmerLights+1,w
 15768  176A  00E2               	movwf	setProductData@value
 15769  176B  3009               	movlw	9
 15770  176C  319B  236F  3197   	fcall	_setProductData
 15771                           
 15772                           ;RF_Control_B1.c: 497: setProductData(15, (product->Data[15] | status));
 15773  176F  0021               	movlb	1	; select bank1
 15774  1770  086E               	movf	_product^(0+128),w
 15775  1771  3E0F               	addlw	15
 15776  1772  0086               	movwf	6
 15777  1773  3001               	movlw	1	; select bank2/3
 15778  1774  0087               	movwf	7
 15779  1775  0801               	movf	1,w
 15780  1776  0020               	movlb	0	; select bank0
 15781  1777  0468               	iorwf	setRF_DimmerLights@status,w
 15782  1778  00E6               	movwf	??_setRF_DimmerLights
 15783  1779  0866               	movf	??_setRF_DimmerLights,w
 15784  177A  00E2               	movwf	setProductData@value
 15785  177B  300F               	movlw	15
 15786  177C  319B  236F         	fcall	_setProductData
 15787                           
 15788                           ;RF_Control_B1.c: 498: } else {
 15789  177E  0008               	return
 15790  177F                     l6235:	
 15791                           
 15792                           ;RF_Control_B1.c: 499: setProductData(9, 0x00);
 15793  177F  0020               	movlb	0	; select bank0
 15794  1780  01E2               	clrf	setProductData@value
 15795  1781  3009               	movlw	9
 15796  1782  319B  236F  3197   	fcall	_setProductData
 15797                           
 15798                           ;RF_Control_B1.c: 500: setProductData(15, (product->Data[15]&(~status)));
 15799  1785  0021               	movlb	1	; select bank1
 15800  1786  086E               	movf	_product^(0+128),w
 15801  1787  3E0F               	addlw	15
 15802  1788  0086               	movwf	6
 15803  1789  3001               	movlw	1	; select bank2/3
 15804  178A  0087               	movwf	7
 15805  178B  0020               	movlb	0	; select bank0
 15806  178C  0968               	comf	setRF_DimmerLights@status,w
 15807  178D  0501               	andwf	1,w
 15808  178E  00E6               	movwf	??_setRF_DimmerLights
 15809  178F  0866               	movf	??_setRF_DimmerLights,w
 15810  1790  00E2               	movwf	setProductData@value
 15811  1791  300F               	movlw	15
 15812  1792  319B  236F         	fcall	_setProductData
 15813  1794  0008               	return
 15814  1795                     __end_of_setRF_DimmerLights:	
 15815                           
 15816                           	psect	text106
 15817  1C33                     __ptext106:	
 15818 ;; *************** function _setDimmerLights_Line *****************
 15819 ;; Defined at:
 15820 ;;		line 1032 in file "../src/Dimmer_B1.c"
 15821 ;; Parameters:    Size  Location     Type
 15822 ;;  lights          1    wreg     unsigned char 
 15823 ;; Auto vars:     Size  Location     Type
 15824 ;;  lights          1    0[BANK0 ] unsigned char 
 15825 ;; Return value:  Size  Location     Type
 15826 ;;		None               void
 15827 ;; Registers used:
 15828 ;;		wreg
 15829 ;; Tracked objects:
 15830 ;;		On entry : 0/0
 15831 ;;		On exit  : 0/0
 15832 ;;		Unchanged: 0/0
 15833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15837 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15838 ;;Total ram usage:        1 bytes
 15839 ;; Hardware stack levels used:    1
 15840 ;; Hardware stack levels required when called:    5
 15841 ;; This function calls:
 15842 ;;		Nothing
 15843 ;; This function is called by:
 15844 ;;		_setDimmerLights_OnOff
 15845 ;;		_setDimmerLights_Dimming
 15846 ;; This function uses a non-reentrant model
 15847 ;;
 15848                           
 15849                           
 15850                           ;psect for function _setDimmerLights_Line
 15851  1C33                     _setDimmerLights_Line:	
 15852                           
 15853                           ;incstack = 0
 15854                           ; Regs used in _setDimmerLights_Line: [wreg]
 15855                           ;setDimmerLights_Line@lights stored from wreg
 15856  1C33  0020               	movlb	0	; select bank0
 15857  1C34  00A0               	movwf	setDimmerLights_Line@lights
 15858                           
 15859                           ;Dimmer_B1.c: 1033: Dimmer.LoadGO = 1;
 15860  1C35  0022               	movlb	2	; select bank2
 15861  1C36  14AC               	bsf	_Dimmer^(0+256),1
 15862                           
 15863                           ;Dimmer_B1.c: 1035: DimmerLights1.Line = 0;
 15864  1C37  10E1               	bcf	(_DimmerLights1^(0+256)+1),1
 15865                           
 15866                           ;Dimmer_B1.c: 1036: if (lights == 1 && lights != 0) {
 15867  1C38  0020               	movlb	0	; select bank0
 15868  1C39  0820               	movf	setDimmerLights_Line@lights,w
 15869  1C3A  3A01               	xorlw	1
 15870  1C3B  1D03               	skipz
 15871  1C3C  0008               	return
 15872  1C3D  0820               	movf	setDimmerLights_Line@lights,w
 15873  1C3E  1903               	btfsc	3,2
 15874  1C3F  0008               	return
 15875                           
 15876                           ;Dimmer_B1.c: 1037: DimmerLights1.Line = 1;
 15877  1C40  0022               	movlb	2	; select bank2
 15878  1C41  14E1               	bsf	(_DimmerLights1^(0+256)+1),1
 15879  1C42  0020               	movlb	0	; select bank0
 15880  1C43  0008               	return
 15881  1C44                     __end_of_setDimmerLights_Line:	
 15882                           
 15883                           	psect	text107
 15884  1B7B                     __ptext107:	
 15885 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15886 ;; Defined at:
 15887 ;;		line 133 in file "../src/Dimmer_B1.c"
 15888 ;; Parameters:    Size  Location     Type
 15889 ;;  lights          1    wreg     unsigned char 
 15890 ;;  value           1   66[BANK0 ] unsigned char 
 15891 ;; Auto vars:     Size  Location     Type
 15892 ;;  lights          1   68[BANK0 ] unsigned char 
 15893 ;; Return value:  Size  Location     Type
 15894 ;;		None               void
 15895 ;; Registers used:
 15896 ;;		wreg
 15897 ;; Tracked objects:
 15898 ;;		On entry : 0/0
 15899 ;;		On exit  : 0/0
 15900 ;;		Unchanged: 0/0
 15901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15902 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15905 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15906 ;;Total ram usage:        3 bytes
 15907 ;; Hardware stack levels used:    1
 15908 ;; Hardware stack levels required when called:    5
 15909 ;; This function calls:
 15910 ;;		Nothing
 15911 ;; This function is called by:
 15912 ;;		_setDimmerLights_OnOff
 15913 ;;		_setDimmerLights_Dimming
 15914 ;;		_setRFSW_AdjControl
 15915 ;; This function uses a non-reentrant model
 15916 ;;
 15917                           
 15918                           
 15919                           ;psect for function _setDimmerIntr_MaxmumValue
 15920  1B7B                     _setDimmerIntr_MaxmumValue:	
 15921                           
 15922                           ;incstack = 0
 15923                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15924                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15925  1B7B  0020               	movlb	0	; select bank0
 15926  1B7C  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 15927                           
 15928                           ;Dimmer_B1.c: 135: if (lights == 1) {
 15929  1B7D  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 15930  1B7E  3A01               	xorlw	1
 15931  1B7F  1D03               	skipz
 15932  1B80  0008               	return
 15933                           
 15934                           ;Dimmer_B1.c: 136: DimmerIntr1.MaxmumValue = value;
 15935  1B81  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 15936  1B82  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 15937  1B83  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 15938  1B84  0021               	movlb	1	; select bank1
 15939  1B85  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 15940  1B86  0008               	return
 15941  1B87                     __end_of_setDimmerIntr_MaxmumValue:	
 15942                           
 15943                           	psect	text108
 15944  1DD0                     __ptext108:	
 15945 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15946 ;; Defined at:
 15947 ;;		line 210 in file "../src/Dimmer_B1.c"
 15948 ;; Parameters:    Size  Location     Type
 15949 ;;  lights          1    wreg     unsigned char 
 15950 ;;  command         1    0[BANK0 ] unsigned char 
 15951 ;; Auto vars:     Size  Location     Type
 15952 ;;  lights          1    2[BANK0 ] unsigned char 
 15953 ;; Return value:  Size  Location     Type
 15954 ;;		None               void
 15955 ;; Registers used:
 15956 ;;		wreg, status,2, status,0
 15957 ;; Tracked objects:
 15958 ;;		On entry : 0/0
 15959 ;;		On exit  : 0/0
 15960 ;;		Unchanged: 0/0
 15961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15962 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15965 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15966 ;;Total ram usage:        3 bytes
 15967 ;; Hardware stack levels used:    1
 15968 ;; Hardware stack levels required when called:    5
 15969 ;; This function calls:
 15970 ;;		Nothing
 15971 ;; This function is called by:
 15972 ;;		_setDimmerLights_Dimming
 15973 ;;		_setDimmerLights_DimmingClose
 15974 ;; This function uses a non-reentrant model
 15975 ;;
 15976                           
 15977                           
 15978                           ;psect for function _setDimmerIntr_Dimming_Sw
 15979  1DD0                     _setDimmerIntr_Dimming_Sw:	
 15980                           
 15981                           ;incstack = 0
 15982                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15983                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15984  1DD0  0020               	movlb	0	; select bank0
 15985  1DD1  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 15986                           
 15987                           ;Dimmer_B1.c: 212: if (lights == 1) {
 15988  1DD2  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15989  1DD3  3A01               	xorlw	1
 15990  1DD4  1D03               	skipz
 15991  1DD5  0008               	return
 15992                           
 15993                           ;Dimmer_B1.c: 213: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15994  1DD6  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 15995  1DD7  3A01               	xorlw	1
 15996  1DD8  3000               	movlw	0
 15997  1DD9  1903               	skipnz
 15998  1DDA  3001               	movlw	1
 15999  1DDB  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16000  1DDC  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16001  1DDD  0021               	movlb	1	; select bank1
 16002  1DDE  083C               	movf	_DimmerIntr1^(0+128),w
 16003  1DDF  0020               	movlb	0	; select bank0
 16004  1DE0  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16005  1DE1  39EF               	andlw	-17
 16006  1DE2  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16007  1DE3  0021               	movlb	1	; select bank1
 16008  1DE4  00BC               	movwf	_DimmerIntr1^(0+128)
 16009  1DE5  0008               	return
 16010  1DE6                     __end_of_setDimmerIntr_Dimming_Sw:	
 16011                           
 16012                           	psect	text109
 16013  1C03                     __ptext109:	
 16014 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16015 ;; Defined at:
 16016 ;;		line 111 in file "../src/Dimmer_B1.c"
 16017 ;; Parameters:    Size  Location     Type
 16018 ;;  lights          1    wreg     unsigned char 
 16019 ;; Auto vars:     Size  Location     Type
 16020 ;;  lights          1    1[BANK0 ] unsigned char 
 16021 ;;  value           1    2[BANK0 ] unsigned char 
 16022 ;; Return value:  Size  Location     Type
 16023 ;;                  1    wreg      unsigned char 
 16024 ;; Registers used:
 16025 ;;		wreg, status,2
 16026 ;; Tracked objects:
 16027 ;;		On entry : 0/0
 16028 ;;		On exit  : 0/0
 16029 ;;		Unchanged: 0/0
 16030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16032 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16033 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16034 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16035 ;;Total ram usage:        3 bytes
 16036 ;; Hardware stack levels used:    1
 16037 ;; Hardware stack levels required when called:    5
 16038 ;; This function calls:
 16039 ;;		Nothing
 16040 ;; This function is called by:
 16041 ;;		_setDimmerLights_Dimming
 16042 ;; This function uses a non-reentrant model
 16043 ;;
 16044                           
 16045                           
 16046                           ;psect for function _getDimmerIntr_DimmingValue
 16047  1C03                     _getDimmerIntr_DimmingValue:	
 16048                           
 16049                           ;incstack = 0
 16050                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16051                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16052  1C03  0020               	movlb	0	; select bank0
 16053  1C04  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 16054                           
 16055                           ;Dimmer_B1.c: 112: char value = 0;
 16056  1C05  01A2               	clrf	getDimmerIntr_DimmingValue@value
 16057                           
 16058                           ;Dimmer_B1.c: 114: if (lights == 1) {
 16059  1C06  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 16060  1C07  3A01               	xorlw	1
 16061  1C08  1D03               	skipz
 16062  1C09  2C10               	goto	l691
 16063                           
 16064                           ;Dimmer_B1.c: 115: value = DimmerIntr1.DimmingValue;
 16065  1C0A  0021               	movlb	1	; select bank1
 16066  1C0B  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16067  1C0C  0020               	movlb	0	; select bank0
 16068  1C0D  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16069  1C0E  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16070  1C0F  00A2               	movwf	getDimmerIntr_DimmingValue@value
 16071  1C10                     l691:	
 16072                           
 16073                           ;Dimmer_B1.c: 116: }
 16074                           ;Dimmer_B1.c: 128: return value;
 16075  1C10  0822               	movf	getDimmerIntr_DimmingValue@value,w
 16076  1C11  0008               	return
 16077  1C12                     __end_of_getDimmerIntr_DimmingValue:	
 16078                           
 16079                           	psect	text110
 16080  1DBA                     __ptext110:	
 16081 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16082 ;; Defined at:
 16083 ;;		line 993 in file "../src/Dimmer_B1.c"
 16084 ;; Parameters:    Size  Location     Type
 16085 ;;  lights          1    wreg     unsigned char 
 16086 ;; Auto vars:     Size  Location     Type
 16087 ;;  lights          1    0[COMMON] unsigned char 
 16088 ;;  allow           1    2[BANK0 ] unsigned char 
 16089 ;; Return value:  Size  Location     Type
 16090 ;;                  1    wreg      unsigned char 
 16091 ;; Registers used:
 16092 ;;		wreg, status,2, pclath, cstack
 16093 ;; Tracked objects:
 16094 ;;		On entry : 0/0
 16095 ;;		On exit  : 0/0
 16096 ;;		Unchanged: 0/0
 16097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;Total ram usage:        3 bytes
 16103 ;; Hardware stack levels used:    1
 16104 ;; Hardware stack levels required when called:    6
 16105 ;; This function calls:
 16106 ;;		_getLoad_OK
 16107 ;; This function is called by:
 16108 ;;		_setDimmerLights_Main
 16109 ;; This function uses a non-reentrant model
 16110 ;;
 16111                           
 16112                           
 16113                           ;psect for function _getDimmerLights_Allow_Condition
 16114  1DBA                     _getDimmerLights_Allow_Condition:	
 16115                           
 16116                           ;Dimmer_B1.c: 994: char allow = 0;
 16117                           
 16118                           ;incstack = 0
 16119                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 16120  1DBA  0020               	movlb	0	; select bank0
 16121  1DBB  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 16122                           
 16123                           ;Dimmer_B1.c: 1000: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16124  1DBC  01A3               	clrf	_getDimmerLights_Allow_Condition$2283
 16125  1DBD  0AA3               	incf	_getDimmerLights_Allow_Condition$2283,f
 16126  1DBE  319A  22EE  319D   	fcall	_getLoad_OK
 16127  1DC1  3800               	iorlw	0
 16128  1DC2  1D03               	skipz
 16129  1DC3  2DC9               	goto	l6865
 16130  1DC4  0022               	movlb	2	; select bank2
 16131  1DC5  18AC               	btfsc	_Dimmer^(0+256),1
 16132  1DC6  2DC9               	goto	l6865
 16133  1DC7  0020               	movlb	0	; select bank0
 16134  1DC8  01A3               	clrf	_getDimmerLights_Allow_Condition$2283
 16135  1DC9                     l6865:	
 16136  1DC9  0020               	movlb	0	; select bank0
 16137  1DCA  0823               	movf	_getDimmerLights_Allow_Condition$2283,w
 16138  1DCB  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16139  1DCC  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16140  1DCD  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 16141                           
 16142                           ;Dimmer_B1.c: 1027: return allow;
 16143  1DCE  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 16144  1DCF  0008               	return
 16145  1DD0                     __end_of_getDimmerLights_Allow_Condition:	
 16146                           
 16147                           	psect	text111
 16148  1AEE                     __ptext111:	
 16149 ;; *************** function _getLoad_OK *****************
 16150 ;; Defined at:
 16151 ;;		line 274 in file "../src/OverLoad_B1.c"
 16152 ;; Parameters:    Size  Location     Type
 16153 ;;		None
 16154 ;; Auto vars:     Size  Location     Type
 16155 ;;  ok              1    0[BANK0 ] unsigned char 
 16156 ;; Return value:  Size  Location     Type
 16157 ;;                  1    wreg      unsigned char 
 16158 ;; Registers used:
 16159 ;;		wreg, status,2
 16160 ;; Tracked objects:
 16161 ;;		On entry : 0/0
 16162 ;;		On exit  : 0/0
 16163 ;;		Unchanged: 0/0
 16164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16169 ;;Total ram usage:        1 bytes
 16170 ;; Hardware stack levels used:    1
 16171 ;; Hardware stack levels required when called:    5
 16172 ;; This function calls:
 16173 ;;		Nothing
 16174 ;; This function is called by:
 16175 ;;		_DimmerLights_Main
 16176 ;;		_getDimmerLights_Allow_Condition
 16177 ;; This function uses a non-reentrant model
 16178 ;;
 16179                           
 16180                           
 16181                           ;psect for function _getLoad_OK
 16182  1AEE                     _getLoad_OK:	
 16183                           
 16184                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16185                           
 16186                           ;incstack = 0
 16187                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16188  1AEE  3000               	movlw	0
 16189  1AEF  0022               	movlb	2	; select bank2
 16190  1AF0  1BB8               	btfsc	_Load^(0+256),7
 16191  1AF1  3001               	movlw	1
 16192  1AF2  0020               	movlb	0	; select bank0
 16193  1AF3  00A0               	movwf	getLoad_OK@ok
 16194                           
 16195                           ;OverLoad_B1.c: 276: return ok;
 16196  1AF4  0820               	movf	getLoad_OK@ok,w
 16197  1AF5  0008               	return
 16198  1AF6                     __end_of_getLoad_OK:	
 16199                           
 16200                           	psect	text112
 16201  10F8                     __ptext112:	
 16202 ;; *************** function _getMain_All_Error_Status *****************
 16203 ;; Defined at:
 16204 ;;		line 424 in file "../src/Main_B1.c"
 16205 ;; Parameters:    Size  Location     Type
 16206 ;;  command         1    wreg     unsigned char 
 16207 ;; Auto vars:     Size  Location     Type
 16208 ;;  command         1    5[BANK0 ] unsigned char 
 16209 ;;  status          1    6[BANK0 ] unsigned char 
 16210 ;; Return value:  Size  Location     Type
 16211 ;;                  1    wreg      unsigned char 
 16212 ;; Registers used:
 16213 ;;		wreg, status,2, status,0
 16214 ;; Tracked objects:
 16215 ;;		On entry : 0/0
 16216 ;;		On exit  : 0/0
 16217 ;;		Unchanged: 0/0
 16218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16220 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16221 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16223 ;;Total ram usage:        7 bytes
 16224 ;; Hardware stack levels used:    1
 16225 ;; Hardware stack levels required when called:    5
 16226 ;; This function calls:
 16227 ;;		Nothing
 16228 ;; This function is called by:
 16229 ;;		_DimmerLights_Main
 16230 ;;		_Exception_Main
 16231 ;;		_Load_Main
 16232 ;;		_setTemp_Main
 16233 ;;		_getRxData
 16234 ;;		_setSw_Main
 16235 ;; This function uses a non-reentrant model
 16236 ;;
 16237                           
 16238                           
 16239                           ;psect for function _getMain_All_Error_Status
 16240  10F8                     _getMain_All_Error_Status:	
 16241                           
 16242                           ;incstack = 0
 16243                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16244                           ;getMain_All_Error_Status@command stored from wreg
 16245  10F8  0020               	movlb	0	; select bank0
 16246  10F9  00A5               	movwf	getMain_All_Error_Status@command
 16247                           
 16248                           ;Main_B1.c: 425: char status = 0;
 16249  10FA  01A6               	clrf	getMain_All_Error_Status@status
 16250                           
 16251                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16252  10FB  08A6               	movf	getMain_All_Error_Status@status,f
 16253  10FC  1D03               	skipz
 16254  10FD  2912               	goto	l6583
 16255  10FE  0825               	movf	getMain_All_Error_Status@command,w
 16256  10FF  3A02               	xorlw	2
 16257  1100  1903               	skipnz
 16258  1101  2912               	goto	l6583
 16259                           
 16260                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16261  1102  0021               	movlb	1	; select bank1
 16262  1103  18D8               	btfsc	_Temp^(0+128),1
 16263  1104  2909               	goto	l6581
 16264  1105  0020               	movlb	0	; select bank0
 16265  1106  01A1               	clrf	_getMain_All_Error_Status$3612
 16266  1107  01A2               	clrf	_getMain_All_Error_Status$3612+1
 16267  1108  290E               	goto	l1458
 16268  1109                     l6581:	
 16269  1109  3002               	movlw	2
 16270  110A  0020               	movlb	0	; select bank0
 16271  110B  00A1               	movwf	_getMain_All_Error_Status$3612
 16272  110C  3000               	movlw	0
 16273  110D  00A2               	movwf	_getMain_All_Error_Status$3612+1
 16274  110E                     l1458:	
 16275  110E  0821               	movf	_getMain_All_Error_Status$3612,w
 16276  110F  00A0               	movwf	??_getMain_All_Error_Status
 16277  1110  0820               	movf	??_getMain_All_Error_Status,w
 16278  1111  00A6               	movwf	getMain_All_Error_Status@status
 16279  1112                     l6583:	
 16280                           
 16281                           ;Main_B1.c: 438: }
 16282                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16283  1112  08A6               	movf	getMain_All_Error_Status@status,f
 16284  1113  1D03               	skipz
 16285  1114  2929               	goto	l1459
 16286  1115  0825               	movf	getMain_All_Error_Status@command,w
 16287  1116  3A03               	xorlw	3
 16288  1117  1903               	skipnz
 16289  1118  2929               	goto	l1459
 16290                           
 16291                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16292  1119  0022               	movlb	2	; select bank2
 16293  111A  1AB8               	btfsc	_Load^(0+256),5
 16294  111B  2920               	goto	l6591
 16295  111C  0020               	movlb	0	; select bank0
 16296  111D  01A3               	clrf	_getMain_All_Error_Status$3613
 16297  111E  01A4               	clrf	_getMain_All_Error_Status$3613+1
 16298  111F  2925               	goto	l1463
 16299  1120                     l6591:	
 16300  1120  3003               	movlw	3
 16301  1121  0020               	movlb	0	; select bank0
 16302  1122  00A3               	movwf	_getMain_All_Error_Status$3613
 16303  1123  3000               	movlw	0
 16304  1124  00A4               	movwf	_getMain_All_Error_Status$3613+1
 16305  1125                     l1463:	
 16306  1125  0823               	movf	_getMain_All_Error_Status$3613,w
 16307  1126  00A0               	movwf	??_getMain_All_Error_Status
 16308  1127  0820               	movf	??_getMain_All_Error_Status,w
 16309  1128  00A6               	movwf	getMain_All_Error_Status@status
 16310  1129                     l1459:	
 16311                           
 16312                           ;Main_B1.c: 445: }
 16313                           ;Main_B1.c: 455: return status;
 16314  1129  0826               	movf	getMain_All_Error_Status@status,w
 16315  112A  0008               	return
 16316  112B                     __end_of_getMain_All_Error_Status:	
 16317                           
 16318                           	psect	text113
 16319  1AD9                     __ptext113:	
 16320 ;; *************** function _DimmerLights_Initialization *****************
 16321 ;; Defined at:
 16322 ;;		line 641 in file "../src/Dimmer_B1.c"
 16323 ;; Parameters:    Size  Location     Type
 16324 ;;		None
 16325 ;; Auto vars:     Size  Location     Type
 16326 ;;		None
 16327 ;; Return value:  Size  Location     Type
 16328 ;;		None               void
 16329 ;; Registers used:
 16330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16331 ;; Tracked objects:
 16332 ;;		On entry : 0/0
 16333 ;;		On exit  : 0/0
 16334 ;;		Unchanged: 0/0
 16335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16340 ;;Total ram usage:        0 bytes
 16341 ;; Hardware stack levels used:    1
 16342 ;; Hardware stack levels required when called:    9
 16343 ;; This function calls:
 16344 ;;		_DimmerIntr_Initialization
 16345 ;;		_setDimmerLights_Initialization
 16346 ;; This function is called by:
 16347 ;;		_main
 16348 ;; This function uses a non-reentrant model
 16349 ;;
 16350                           
 16351                           
 16352                           ;psect for function _DimmerLights_Initialization
 16353  1AD9                     _DimmerLights_Initialization:	
 16354                           
 16355                           ;Dimmer_B1.c: 643: setDimmerLights_Initialization(1);
 16356                           
 16357                           ;incstack = 0
 16358                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16359  1AD9  3001               	movlw	1
 16360  1ADA  319A  2284  319A   	fcall	_setDimmerLights_Initialization
 16361                           
 16362                           ;Dimmer_B1.c: 653: DimmerIntr_Initialization();
 16363  1ADD  3195  2544         	fcall	_DimmerIntr_Initialization
 16364  1ADF  0008               	return
 16365  1AE0                     __end_of_DimmerLights_Initialization:	
 16366                           
 16367                           	psect	text114
 16368  1A84                     __ptext114:	
 16369 ;; *************** function _setDimmerLights_Initialization *****************
 16370 ;; Defined at:
 16371 ;;		line 657 in file "../src/Dimmer_B1.c"
 16372 ;; Parameters:    Size  Location     Type
 16373 ;;  lights          1    wreg     unsigned char 
 16374 ;; Auto vars:     Size  Location     Type
 16375 ;;  lights          1    0[COMMON] unsigned char 
 16376 ;; Return value:  Size  Location     Type
 16377 ;;		None               void
 16378 ;; Registers used:
 16379 ;;		wreg
 16380 ;; Tracked objects:
 16381 ;;		On entry : 0/0
 16382 ;;		On exit  : 0/0
 16383 ;;		Unchanged: 0/0
 16384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16389 ;;Total ram usage:        0 bytes
 16390 ;; Hardware stack levels used:    1
 16391 ;; Hardware stack levels required when called:    5
 16392 ;; This function calls:
 16393 ;;		Nothing
 16394 ;; This function is called by:
 16395 ;;		_DimmerLights_Initialization
 16396 ;; This function uses a non-reentrant model
 16397 ;;
 16398                           
 16399                           
 16400                           ;psect for function _setDimmerLights_Initialization
 16401  1A84                     _setDimmerLights_Initialization:	
 16402                           
 16403                           ;incstack = 0
 16404                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16405  1A84  0008               	return
 16406  1A85                     __end_of_setDimmerLights_Initialization:	
 16407                           
 16408                           	psect	text115
 16409  1544                     __ptext115:	
 16410 ;; *************** function _DimmerIntr_Initialization *****************
 16411 ;; Defined at:
 16412 ;;		line 7 in file "../src/Dimmer_B1.c"
 16413 ;; Parameters:    Size  Location     Type
 16414 ;;		None
 16415 ;; Auto vars:     Size  Location     Type
 16416 ;;		None
 16417 ;; Return value:  Size  Location     Type
 16418 ;;		None               void
 16419 ;; Registers used:
 16420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16421 ;; Tracked objects:
 16422 ;;		On entry : 0/0
 16423 ;;		On exit  : 0/0
 16424 ;;		Unchanged: 0/0
 16425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16428 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16429 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16430 ;;Total ram usage:        2 bytes
 16431 ;; Hardware stack levels used:    1
 16432 ;; Hardware stack levels required when called:    8
 16433 ;; This function calls:
 16434 ;;		_Division
 16435 ;;		_getDimmerLights_PercentToValue
 16436 ;;		_getDimmerLights_ValueToPercent
 16437 ;;		_setMemory_Modify
 16438 ;; This function is called by:
 16439 ;;		_DimmerLights_Initialization
 16440 ;; This function uses a non-reentrant model
 16441 ;;
 16442                           
 16443                           
 16444                           ;psect for function _DimmerIntr_Initialization
 16445  1544                     _DimmerIntr_Initialization:	
 16446                           
 16447                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16448                           
 16449                           ;incstack = 0
 16450                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16451  1544  3007               	movlw	7
 16452  1545  0020               	movlb	0	; select bank0
 16453  1546  00E2               	movwf	??_DimmerIntr_Initialization
 16454  1547  0862               	movf	??_DimmerIntr_Initialization,w
 16455  1548  0021               	movlb	1	; select bank1
 16456  1549  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 16457                           
 16458                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(87*0.6));
 16459  154A  3034               	movlw	52
 16460  154B  0020               	movlb	0	; select bank0
 16461  154C  00E2               	movwf	??_DimmerIntr_Initialization
 16462  154D  0862               	movf	??_DimmerIntr_Initialization,w
 16463  154E  0021               	movlb	1	; select bank1
 16464  154F  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16465                           
 16466                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16467  1550  3006               	movlw	6
 16468  1551  0020               	movlb	0	; select bank0
 16469  1552  00E2               	movwf	??_DimmerIntr_Initialization
 16470  1553  0862               	movf	??_DimmerIntr_Initialization,w
 16471  1554  0021               	movlb	1	; select bank1
 16472  1555  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 16473                           
 16474                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16475  1556  1E39               	btfss	(_myMain^(0+128)+10),4
 16476  1557  2D67               	goto	l678
 16477                           
 16478                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(87*0.6)));
 16479  1558  3034               	movlw	52
 16480  1559  3196  26CB  3195   	fcall	_getDimmerLights_ValueToPercent
 16481  155C  0020               	movlb	0	; select bank0
 16482  155D  00E2               	movwf	??_DimmerIntr_Initialization
 16483  155E  0021               	movlb	1	; select bank1
 16484  155F  086E               	movf	_product^(0+128),w
 16485  1560  3E15               	addlw	21
 16486  1561  0086               	movwf	6
 16487  1562  3001               	movlw	1	; select bank2/3
 16488  1563  0087               	movwf	7
 16489  1564  0020               	movlb	0	; select bank0
 16490  1565  0862               	movf	??_DimmerIntr_Initialization,w
 16491  1566  0081               	movwf	1
 16492  1567                     l678:	
 16493                           
 16494                           ;Dimmer_B1.c: 18: }
 16495                           ;Dimmer_B1.c: 20: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16496  1567  0021               	movlb	1	; select bank1
 16497  1568  086E               	movf	_product^(0+128),w
 16498  1569  3E15               	addlw	21
 16499  156A  0086               	movwf	6
 16500  156B  3001               	movlw	1	; select bank2/3
 16501  156C  0087               	movwf	7
 16502  156D  0801               	movf	1,w
 16503  156E  3196  2666  3195   	fcall	_getDimmerLights_PercentToValue
 16504  1571  0020               	movlb	0	; select bank0
 16505  1572  00E2               	movwf	??_DimmerIntr_Initialization
 16506  1573  0862               	movf	??_DimmerIntr_Initialization,w
 16507  1574  0021               	movlb	1	; select bank1
 16508  1575  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 16509                           
 16510                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue2 = Division(((char)(87*0.6)), 2);
 16511  1576  3002               	movlw	2
 16512  1577  0020               	movlb	0	; select bank0
 16513  1578  00E2               	movwf	??_DimmerIntr_Initialization
 16514  1579  0862               	movf	??_DimmerIntr_Initialization,w
 16515  157A  00A5               	movwf	Division@num
 16516  157B  3034               	movlw	52
 16517  157C  319B  23F4  3195   	fcall	_Division
 16518  157F  0020               	movlb	0	; select bank0
 16519  1580  00E3               	movwf	??_DimmerIntr_Initialization+1
 16520  1581  0863               	movf	??_DimmerIntr_Initialization+1,w
 16521  1582  0021               	movlb	1	; select bank1
 16522  1583  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 16523                           
 16524                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - ((char)(87*0.6
      +                          )));
 16525  1584  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 16526  1585  3E08               	addlw	8
 16527  1586  0020               	movlb	0	; select bank0
 16528  1587  00E2               	movwf	??_DimmerIntr_Initialization
 16529  1588  0862               	movf	??_DimmerIntr_Initialization,w
 16530  1589  0021               	movlb	1	; select bank1
 16531  158A  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 16532                           
 16533                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16534  158B  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 16535  158C  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 16536  158D  0020               	movlb	0	; select bank0
 16537  158E  00E2               	movwf	??_DimmerIntr_Initialization
 16538  158F  0862               	movf	??_DimmerIntr_Initialization,w
 16539  1590  0021               	movlb	1	; select bank1
 16540  1591  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 16541                           
 16542                           ;Dimmer_B1.c: 32: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16543  1592  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 16544  1593  3E01               	addlw	1
 16545  1594  0020               	movlb	0	; select bank0
 16546  1595  00E2               	movwf	??_DimmerIntr_Initialization
 16547  1596  0862               	movf	??_DimmerIntr_Initialization,w
 16548  1597  0021               	movlb	1	; select bank1
 16549  1598  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 16550                           
 16551                           ;Dimmer_B1.c: 67: if (myMain.InitDimmer == 1) {
 16552  1599  1E39               	btfss	(_myMain^(0+128)+10),4
 16553  159A  0008               	return
 16554                           
 16555                           ;Dimmer_B1.c: 68: myMain.InitDimmer = 0;
 16556  159B  1239               	bcf	(_myMain^(0+128)+10),4
 16557                           
 16558                           ;Dimmer_B1.c: 69: myMain.SaveDimmer = 1;
 16559  159C  16B9               	bsf	(_myMain^(0+128)+10),5
 16560                           
 16561                           ;Dimmer_B1.c: 70: setMemory_Modify(1);
 16562  159D  3001               	movlw	1
 16563  159E  319C  24F3         	fcall	_setMemory_Modify
 16564  15A0  0008               	return
 16565  15A1                     __end_of_DimmerIntr_Initialization:	
 16566                           
 16567                           	psect	text116
 16568  1CF3                     __ptext116:	
 16569 ;; *************** function _setMemory_Modify *****************
 16570 ;; Defined at:
 16571 ;;		line 1083 in file "../src/MCU_B1.c"
 16572 ;; Parameters:    Size  Location     Type
 16573 ;;  command         1    wreg     unsigned char 
 16574 ;; Auto vars:     Size  Location     Type
 16575 ;;  command         1    1[BANK0 ] unsigned char 
 16576 ;; Return value:  Size  Location     Type
 16577 ;;		None               void
 16578 ;; Registers used:
 16579 ;;		wreg, status,2, status,0
 16580 ;; Tracked objects:
 16581 ;;		On entry : 0/0
 16582 ;;		On exit  : 0/0
 16583 ;;		Unchanged: 0/0
 16584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;Total ram usage:        2 bytes
 16590 ;; Hardware stack levels used:    1
 16591 ;; Hardware stack levels required when called:    5
 16592 ;; This function calls:
 16593 ;;		Nothing
 16594 ;; This function is called by:
 16595 ;;		_DimmerIntr_Initialization
 16596 ;;		_setDimmerLights_Dimming
 16597 ;;		_setLog_Code
 16598 ;;		_setRFSW_AdjControl
 16599 ;; This function uses a non-reentrant model
 16600 ;;
 16601                           
 16602                           
 16603                           ;psect for function _setMemory_Modify
 16604  1CF3                     _setMemory_Modify:	
 16605                           
 16606                           ;incstack = 0
 16607                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16608                           ;setMemory_Modify@command stored from wreg
 16609  1CF3  0020               	movlb	0	; select bank0
 16610  1CF4  00A1               	movwf	setMemory_Modify@command
 16611                           
 16612                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16613  1CF5  0821               	movf	setMemory_Modify@command,w
 16614  1CF6  3A01               	xorlw	1
 16615  1CF7  3000               	movlw	0
 16616  1CF8  1903               	skipnz
 16617  1CF9  3001               	movlw	1
 16618  1CFA  00A0               	movwf	??_setMemory_Modify
 16619  1CFB  0024               	movlb	4	; select bank4
 16620  1CFC  0844               	movf	(_Memory^(0+512)+36),w
 16621  1CFD  0020               	movlb	0	; select bank0
 16622  1CFE  0620               	xorwf	??_setMemory_Modify,w
 16623  1CFF  39FE               	andlw	-2
 16624  1D00  0620               	xorwf	??_setMemory_Modify,w
 16625  1D01  0024               	movlb	4	; select bank4
 16626  1D02  00C4               	movwf	(_Memory^(0+512)+36)
 16627                           
 16628                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16629  1D03  01C2               	clrf	(_Memory^(0+512)+34)
 16630  1D04  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16631  1D05  0008               	return
 16632  1D06                     __end_of_setMemory_Modify:	
 16633                           
 16634                           	psect	text117
 16635  16CB                     __ptext117:	
 16636 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16637 ;; Defined at:
 16638 ;;		line 1132 in file "../src/Dimmer_B1.c"
 16639 ;; Parameters:    Size  Location     Type
 16640 ;;  value           1    wreg     unsigned char 
 16641 ;; Auto vars:     Size  Location     Type
 16642 ;;  value           1   62[BANK0 ] unsigned char 
 16643 ;;  i               3   63[BANK0 ] float 
 16644 ;; Return value:  Size  Location     Type
 16645 ;;                  1    wreg      unsigned char 
 16646 ;; Registers used:
 16647 ;;		wreg, status,2, status,0, pclath, cstack
 16648 ;; Tracked objects:
 16649 ;;		On entry : 0/0
 16650 ;;		On exit  : 0/0
 16651 ;;		Unchanged: 0/0
 16652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16654 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16656 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;Total ram usage:        6 bytes
 16658 ;; Hardware stack levels used:    1
 16659 ;; Hardware stack levels required when called:    7
 16660 ;; This function calls:
 16661 ;;		___awtoft
 16662 ;;		___ftadd
 16663 ;;		___ftdiv
 16664 ;;		___ftneg
 16665 ;;		___fttol
 16666 ;; This function is called by:
 16667 ;;		_DimmerIntr_Initialization
 16668 ;;		_setDimmerLights_Dimming
 16669 ;; This function uses a non-reentrant model
 16670 ;;
 16671                           
 16672                           
 16673                           ;psect for function _getDimmerLights_ValueToPercent
 16674  16CB                     _getDimmerLights_ValueToPercent:	
 16675                           
 16676                           ;incstack = 0
 16677                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16678                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16679  16CB  0020               	movlb	0	; select bank0
 16680  16CC  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16681                           
 16682                           ;Dimmer_B1.c: 1140: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 16683  16CD  3000               	movlw	0
 16684  16CE  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16685  16CF  3038               	movlw	56
 16686  16D0  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16687  16D1  3042               	movlw	66
 16688  16D2  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16689                           
 16690                           ;Dimmer_B1.c: 1141: i /= 100;
 16691  16D3  3000               	movlw	0
 16692  16D4  00AE               	movwf	___ftdiv@f2
 16693  16D5  30C8               	movlw	200
 16694  16D6  00AF               	movwf	___ftdiv@f2+1
 16695  16D7  3042               	movlw	66
 16696  16D8  00B0               	movwf	___ftdiv@f2+2
 16697  16D9  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16698  16DA  00B1               	movwf	___ftdiv@f1
 16699  16DB  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16700  16DC  00B2               	movwf	___ftdiv@f1+1
 16701  16DD  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16702  16DE  00B3               	movwf	___ftdiv@f1+2
 16703  16DF  318D  251E  3196   	fcall	___ftdiv
 16704  16E2  0020               	movlb	0	; select bank0
 16705  16E3  082E               	movf	?___ftdiv,w
 16706  16E4  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16707  16E5  082F               	movf	?___ftdiv+1,w
 16708  16E6  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16709  16E7  0830               	movf	?___ftdiv+2,w
 16710  16E8  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16711                           
 16712                           ;Dimmer_B1.c: 1143: return (char) (100 - ((((char)(87*0.6)) - value) / i));
 16713  16E9  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16714  16EA  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16715  16EB  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16716  16EC  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16717  16ED  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16718  16EE  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16719  16EF  1903               	skipnz
 16720  16F0  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16721  16F1  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16722  16F2  3E34               	addlw	52
 16723  16F3  00A8               	movwf	___awtoft@c
 16724  16F4  3000               	movlw	0
 16725  16F5  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16726  16F6  00A9               	movwf	___awtoft@c+1
 16727  16F7  3190  200F  3196   	fcall	___awtoft
 16728  16FA  0020               	movlb	0	; select bank0
 16729  16FB  0828               	movf	?___awtoft,w
 16730  16FC  00B1               	movwf	___ftdiv@f1
 16731  16FD  0829               	movf	?___awtoft+1,w
 16732  16FE  00B2               	movwf	___ftdiv@f1+1
 16733  16FF  082A               	movf	?___awtoft+2,w
 16734  1700  00B3               	movwf	___ftdiv@f1+2
 16735  1701  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16736  1702  00AE               	movwf	___ftdiv@f2
 16737  1703  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16738  1704  00AF               	movwf	___ftdiv@f2+1
 16739  1705  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16740  1706  00B0               	movwf	___ftdiv@f2+2
 16741  1707  318D  251E  3196   	fcall	___ftdiv
 16742  170A  0020               	movlb	0	; select bank0
 16743  170B  082E               	movf	?___ftdiv,w
 16744  170C  00BE               	movwf	___ftneg@f1
 16745  170D  082F               	movf	?___ftdiv+1,w
 16746  170E  00BF               	movwf	___ftneg@f1+1
 16747  170F  0830               	movf	?___ftdiv+2,w
 16748  1710  00C0               	movwf	___ftneg@f1+2
 16749  1711  319B  230F  3196   	fcall	___ftneg
 16750  1714  0020               	movlb	0	; select bank0
 16751  1715  083E               	movf	?___ftneg,w
 16752  1716  00C4               	movwf	___ftadd@f2
 16753  1717  083F               	movf	?___ftneg+1,w
 16754  1718  00C5               	movwf	___ftadd@f2+1
 16755  1719  0840               	movf	?___ftneg+2,w
 16756  171A  00C6               	movwf	___ftadd@f2+2
 16757  171B  3000               	movlw	0
 16758  171C  00C1               	movwf	___ftadd@f1
 16759  171D  30C8               	movlw	200
 16760  171E  00C2               	movwf	___ftadd@f1+1
 16761  171F  3042               	movlw	66
 16762  1720  00C3               	movwf	___ftadd@f1+2
 16763  1721  3183  2384  3196   	fcall	___ftadd
 16764  1724  0020               	movlb	0	; select bank0
 16765  1725  0841               	movf	?___ftadd,w
 16766  1726  00CE               	movwf	___fttol@f1
 16767  1727  0842               	movf	?___ftadd+1,w
 16768  1728  00CF               	movwf	___fttol@f1+1
 16769  1729  0843               	movf	?___ftadd+2,w
 16770  172A  00D0               	movwf	___fttol@f1+2
 16771  172B  318B  237E         	fcall	___fttol
 16772  172D  0020               	movlb	0	; select bank0
 16773  172E  084E               	movf	?___fttol,w
 16774  172F  0008               	return
 16775  1730                     __end_of_getDimmerLights_ValueToPercent:	
 16776                           
 16777                           	psect	text118
 16778  1666                     __ptext118:	
 16779 ;; *************** function _getDimmerLights_PercentToValue *****************
 16780 ;; Defined at:
 16781 ;;		line 1116 in file "../src/Dimmer_B1.c"
 16782 ;; Parameters:    Size  Location     Type
 16783 ;;  value           1    wreg     unsigned char 
 16784 ;; Auto vars:     Size  Location     Type
 16785 ;;  value           1   62[BANK0 ] unsigned char 
 16786 ;;  i               3   63[BANK0 ] float 
 16787 ;; Return value:  Size  Location     Type
 16788 ;;                  1    wreg      unsigned char 
 16789 ;; Registers used:
 16790 ;;		wreg, status,2, status,0, pclath, cstack
 16791 ;; Tracked objects:
 16792 ;;		On entry : 0/0
 16793 ;;		On exit  : 0/0
 16794 ;;		Unchanged: 0/0
 16795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16797 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16798 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16799 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16800 ;;Total ram usage:        6 bytes
 16801 ;; Hardware stack levels used:    1
 16802 ;; Hardware stack levels required when called:    7
 16803 ;; This function calls:
 16804 ;;		___awtoft
 16805 ;;		___ftadd
 16806 ;;		___ftdiv
 16807 ;;		___ftmul
 16808 ;;		___ftneg
 16809 ;;		___fttol
 16810 ;; This function is called by:
 16811 ;;		_DimmerIntr_Initialization
 16812 ;;		_setDimmerLights_OnOff
 16813 ;;		_setRFSW_AdjControl
 16814 ;; This function uses a non-reentrant model
 16815 ;;
 16816                           
 16817                           
 16818                           ;psect for function _getDimmerLights_PercentToValue
 16819  1666                     _getDimmerLights_PercentToValue:	
 16820                           
 16821                           ;incstack = 0
 16822                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16823                           ;getDimmerLights_PercentToValue@value stored from wreg
 16824  1666  0020               	movlb	0	; select bank0
 16825  1667  00DE               	movwf	getDimmerLights_PercentToValue@value
 16826                           
 16827                           ;Dimmer_B1.c: 1124: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 16828  1668  3000               	movlw	0
 16829  1669  00DF               	movwf	getDimmerLights_PercentToValue@i
 16830  166A  3038               	movlw	56
 16831  166B  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16832  166C  3042               	movlw	66
 16833  166D  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16834                           
 16835                           ;Dimmer_B1.c: 1125: i /= 100;
 16836  166E  3000               	movlw	0
 16837  166F  00AE               	movwf	___ftdiv@f2
 16838  1670  30C8               	movlw	200
 16839  1671  00AF               	movwf	___ftdiv@f2+1
 16840  1672  3042               	movlw	66
 16841  1673  00B0               	movwf	___ftdiv@f2+2
 16842  1674  085F               	movf	getDimmerLights_PercentToValue@i,w
 16843  1675  00B1               	movwf	___ftdiv@f1
 16844  1676  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16845  1677  00B2               	movwf	___ftdiv@f1+1
 16846  1678  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16847  1679  00B3               	movwf	___ftdiv@f1+2
 16848  167A  318D  251E  3196   	fcall	___ftdiv
 16849  167D  0020               	movlb	0	; select bank0
 16850  167E  082E               	movf	?___ftdiv,w
 16851  167F  00DF               	movwf	getDimmerLights_PercentToValue@i
 16852  1680  082F               	movf	?___ftdiv+1,w
 16853  1681  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16854  1682  0830               	movf	?___ftdiv+2,w
 16855  1683  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16856                           
 16857                           ;Dimmer_B1.c: 1127: return (char) (((char)(87*0.6)) - ((100 - value) * i));
 16858  1684  085E               	movf	getDimmerLights_PercentToValue@value,w
 16859  1685  00DC               	movwf	??_getDimmerLights_PercentToValue
 16860  1686  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 16861  1687  09DC               	comf	??_getDimmerLights_PercentToValue,f
 16862  1688  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 16863  1689  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 16864  168A  1903               	skipnz
 16865  168B  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 16866  168C  085C               	movf	??_getDimmerLights_PercentToValue,w
 16867  168D  3E64               	addlw	100
 16868  168E  00A8               	movwf	___awtoft@c
 16869  168F  3000               	movlw	0
 16870  1690  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16871  1691  00A9               	movwf	___awtoft@c+1
 16872  1692  3190  200F  3196   	fcall	___awtoft
 16873  1695  0020               	movlb	0	; select bank0
 16874  1696  0828               	movf	?___awtoft,w
 16875  1697  00B1               	movwf	___ftmul@f2
 16876  1698  0829               	movf	?___awtoft+1,w
 16877  1699  00B2               	movwf	___ftmul@f2+1
 16878  169A  082A               	movf	?___awtoft+2,w
 16879  169B  00B3               	movwf	___ftmul@f2+2
 16880  169C  085F               	movf	getDimmerLights_PercentToValue@i,w
 16881  169D  00AE               	movwf	___ftmul@f1
 16882  169E  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16883  169F  00AF               	movwf	___ftmul@f1+1
 16884  16A0  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16885  16A1  00B0               	movwf	___ftmul@f1+2
 16886  16A2  318D  25C7  3196   	fcall	___ftmul
 16887  16A5  0020               	movlb	0	; select bank0
 16888  16A6  082E               	movf	?___ftmul,w
 16889  16A7  00BE               	movwf	___ftneg@f1
 16890  16A8  082F               	movf	?___ftmul+1,w
 16891  16A9  00BF               	movwf	___ftneg@f1+1
 16892  16AA  0830               	movf	?___ftmul+2,w
 16893  16AB  00C0               	movwf	___ftneg@f1+2
 16894  16AC  319B  230F  3196   	fcall	___ftneg
 16895  16AF  0020               	movlb	0	; select bank0
 16896  16B0  083E               	movf	?___ftneg,w
 16897  16B1  00C4               	movwf	___ftadd@f2
 16898  16B2  083F               	movf	?___ftneg+1,w
 16899  16B3  00C5               	movwf	___ftadd@f2+1
 16900  16B4  0840               	movf	?___ftneg+2,w
 16901  16B5  00C6               	movwf	___ftadd@f2+2
 16902  16B6  3000               	movlw	0
 16903  16B7  00C1               	movwf	___ftadd@f1
 16904  16B8  3050               	movlw	80
 16905  16B9  00C2               	movwf	___ftadd@f1+1
 16906  16BA  3042               	movlw	66
 16907  16BB  00C3               	movwf	___ftadd@f1+2
 16908  16BC  3183  2384  3196   	fcall	___ftadd
 16909  16BF  0020               	movlb	0	; select bank0
 16910  16C0  0841               	movf	?___ftadd,w
 16911  16C1  00CE               	movwf	___fttol@f1
 16912  16C2  0842               	movf	?___ftadd+1,w
 16913  16C3  00CF               	movwf	___fttol@f1+1
 16914  16C4  0843               	movf	?___ftadd+2,w
 16915  16C5  00D0               	movwf	___fttol@f1+2
 16916  16C6  318B  237E         	fcall	___fttol
 16917  16C8  0020               	movlb	0	; select bank0
 16918  16C9  084E               	movf	?___fttol,w
 16919  16CA  0008               	return
 16920  16CB                     __end_of_getDimmerLights_PercentToValue:	
 16921                           
 16922                           	psect	text119
 16923  0B7E                     __ptext119:	
 16924 ;; *************** function ___fttol *****************
 16925 ;; Defined at:
 16926 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16927 ;; Parameters:    Size  Location     Type
 16928 ;;  f1              3   46[BANK0 ] float 
 16929 ;; Auto vars:     Size  Location     Type
 16930 ;;  lval            4   55[BANK0 ] unsigned long 
 16931 ;;  exp1            1   59[BANK0 ] unsigned char 
 16932 ;;  sign1           1   54[BANK0 ] unsigned char 
 16933 ;; Return value:  Size  Location     Type
 16934 ;;                  4   46[BANK0 ] long 
 16935 ;; Registers used:
 16936 ;;		wreg, status,2, status,0
 16937 ;; Tracked objects:
 16938 ;;		On entry : 0/0
 16939 ;;		On exit  : 0/0
 16940 ;;		Unchanged: 0/0
 16941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16942 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16944 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16945 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16946 ;;Total ram usage:       14 bytes
 16947 ;; Hardware stack levels used:    1
 16948 ;; Hardware stack levels required when called:    5
 16949 ;; This function calls:
 16950 ;;		Nothing
 16951 ;; This function is called by:
 16952 ;;		_getDimmerLights_PercentToValue
 16953 ;;		_getDimmerLights_ValueToPercent
 16954 ;; This function uses a non-reentrant model
 16955 ;;
 16956                           
 16957                           
 16958                           ;psect for function ___fttol
 16959  0B7E                     ___fttol:	
 16960                           
 16961                           ;incstack = 0
 16962                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16963  0B7E  0020               	movlb	0	; select bank0
 16964  0B7F  084E               	movf	___fttol@f1,w
 16965  0B80  00D2               	movwf	??___fttol
 16966  0B81  084F               	movf	___fttol@f1+1,w
 16967  0B82  00D3               	movwf	??___fttol+1
 16968  0B83  0850               	movf	___fttol@f1+2,w
 16969  0B84  00D4               	movwf	??___fttol+2
 16970  0B85  1003               	clrc
 16971  0B86  0D53               	rlf	??___fttol+1,w
 16972  0B87  0D54               	rlf	??___fttol+2,w
 16973  0B88  00D5               	movwf	??___fttol+3
 16974  0B89  0855               	movf	??___fttol+3,w
 16975  0B8A  00DB               	movwf	___fttol@exp1
 16976  0B8B  08DB               	movf	___fttol@exp1,f
 16977  0B8C  1D03               	skipz
 16978  0B8D  2B97               	goto	l6067
 16979  0B8E  3000               	movlw	0
 16980  0B8F  00D1               	movwf	?___fttol+3
 16981  0B90  3000               	movlw	0
 16982  0B91  00D0               	movwf	?___fttol+2
 16983  0B92  3000               	movlw	0
 16984  0B93  00CF               	movwf	?___fttol+1
 16985  0B94  3000               	movlw	0
 16986  0B95  00CE               	movwf	?___fttol
 16987  0B96  0008               	return
 16988  0B97                     l6067:	
 16989  0B97  084E               	movf	___fttol@f1,w
 16990  0B98  00D2               	movwf	??___fttol
 16991  0B99  084F               	movf	___fttol@f1+1,w
 16992  0B9A  00D3               	movwf	??___fttol+1
 16993  0B9B  0850               	movf	___fttol@f1+2,w
 16994  0B9C  00D4               	movwf	??___fttol+2
 16995  0B9D  3017               	movlw	23
 16996  0B9E                     u5065:	
 16997  0B9E  36D4               	lsrf	??___fttol+2,f
 16998  0B9F  0CD3               	rrf	??___fttol+1,f
 16999  0BA0  0CD2               	rrf	??___fttol,f
 17000  0BA1  0B89               	decfsz	9,f
 17001  0BA2  2B9E               	goto	u5065
 17002  0BA3  0852               	movf	??___fttol,w
 17003  0BA4  00D5               	movwf	??___fttol+3
 17004  0BA5  0855               	movf	??___fttol+3,w
 17005  0BA6  00D6               	movwf	___fttol@sign1
 17006  0BA7  17CF               	bsf	___fttol@f1+1,7
 17007  0BA8  30FF               	movlw	255
 17008  0BA9  05CE               	andwf	___fttol@f1,f
 17009  0BAA  30FF               	movlw	255
 17010  0BAB  05CF               	andwf	___fttol@f1+1,f
 17011  0BAC  3000               	movlw	0
 17012  0BAD  05D0               	andwf	___fttol@f1+2,f
 17013  0BAE  084E               	movf	___fttol@f1,w
 17014  0BAF  00D7               	movwf	___fttol@lval
 17015  0BB0  084F               	movf	___fttol@f1+1,w
 17016  0BB1  00D8               	movwf	___fttol@lval+1
 17017  0BB2  0850               	movf	___fttol@f1+2,w
 17018  0BB3  00D9               	movwf	___fttol@lval+2
 17019  0BB4  01DA               	clrf	___fttol@lval+3
 17020  0BB5  308E               	movlw	142
 17021  0BB6  02DB               	subwf	___fttol@exp1,f
 17022  0BB7  1FDB               	btfss	___fttol@exp1,7
 17023  0BB8  2BD5               	goto	l6087
 17024  0BB9  085B               	movf	___fttol@exp1,w
 17025  0BBA  3A80               	xorlw	128
 17026  0BBB  3E8F               	addlw	143
 17027  0BBC  1803               	skipnc
 17028  0BBD  2BC7               	goto	l6085
 17029  0BBE  3000               	movlw	0
 17030  0BBF  00D1               	movwf	?___fttol+3
 17031  0BC0  3000               	movlw	0
 17032  0BC1  00D0               	movwf	?___fttol+2
 17033  0BC2  3000               	movlw	0
 17034  0BC3  00CF               	movwf	?___fttol+1
 17035  0BC4  3000               	movlw	0
 17036  0BC5  00CE               	movwf	?___fttol
 17037  0BC6  0008               	return
 17038  0BC7                     l6085:	
 17039  0BC7  3001               	movlw	1
 17040  0BC8                     u5095:	
 17041  0BC8  36DA               	lsrf	___fttol@lval+3,f
 17042  0BC9  0CD9               	rrf	___fttol@lval+2,f
 17043  0BCA  0CD8               	rrf	___fttol@lval+1,f
 17044  0BCB  0CD7               	rrf	___fttol@lval,f
 17045  0BCC  0B89               	decfsz	9,f
 17046  0BCD  2BC8               	goto	u5095
 17047  0BCE  3001               	movlw	1
 17048  0BCF  00D2               	movwf	??___fttol
 17049  0BD0  0852               	movf	??___fttol,w
 17050  0BD1  07DB               	addwf	___fttol@exp1,f
 17051  0BD2  1903               	btfsc	3,2
 17052  0BD3  2BEE               	goto	l6097
 17053  0BD4  2BC7               	goto	l6085
 17054  0BD5                     l6087:	
 17055  0BD5  3018               	movlw	24
 17056  0BD6  025B               	subwf	___fttol@exp1,w
 17057  0BD7  1C03               	skipc
 17058  0BD8  2BEB               	goto	l6095
 17059  0BD9  3000               	movlw	0
 17060  0BDA  00D1               	movwf	?___fttol+3
 17061  0BDB  3000               	movlw	0
 17062  0BDC  00D0               	movwf	?___fttol+2
 17063  0BDD  3000               	movlw	0
 17064  0BDE  00CF               	movwf	?___fttol+1
 17065  0BDF  3000               	movlw	0
 17066  0BE0  00CE               	movwf	?___fttol
 17067  0BE1  0008               	return
 17068  0BE2                     l6093:	
 17069  0BE2  3001               	movlw	1
 17070  0BE3                     u5125:	
 17071  0BE3  35D7               	lslf	___fttol@lval,f
 17072  0BE4  0DD8               	rlf	___fttol@lval+1,f
 17073  0BE5  0DD9               	rlf	___fttol@lval+2,f
 17074  0BE6  0DDA               	rlf	___fttol@lval+3,f
 17075  0BE7  0B89               	decfsz	9,f
 17076  0BE8  2BE3               	goto	u5125
 17077  0BE9  3001               	movlw	1
 17078  0BEA  02DB               	subwf	___fttol@exp1,f
 17079  0BEB                     l6095:	
 17080  0BEB  08DB               	movf	___fttol@exp1,f
 17081  0BEC  1D03               	skipz
 17082  0BED  2BE2               	goto	l6093
 17083  0BEE                     l6097:	
 17084  0BEE  0856               	movf	___fttol@sign1,w
 17085  0BEF  1903               	btfsc	3,2
 17086  0BF0  2BFC               	goto	l6101
 17087  0BF1  09D7               	comf	___fttol@lval,f
 17088  0BF2  09D8               	comf	___fttol@lval+1,f
 17089  0BF3  09D9               	comf	___fttol@lval+2,f
 17090  0BF4  09DA               	comf	___fttol@lval+3,f
 17091  0BF5  0AD7               	incf	___fttol@lval,f
 17092  0BF6  1903               	skipnz
 17093  0BF7  0AD8               	incf	___fttol@lval+1,f
 17094  0BF8  1903               	skipnz
 17095  0BF9  0AD9               	incf	___fttol@lval+2,f
 17096  0BFA  1903               	skipnz
 17097  0BFB  0ADA               	incf	___fttol@lval+3,f
 17098  0BFC                     l6101:	
 17099  0BFC  085A               	movf	___fttol@lval+3,w
 17100  0BFD  00D1               	movwf	?___fttol+3
 17101  0BFE  0859               	movf	___fttol@lval+2,w
 17102  0BFF  00D0               	movwf	?___fttol+2
 17103  0C00  0858               	movf	___fttol@lval+1,w
 17104  0C01  00CF               	movwf	?___fttol+1
 17105  0C02  0857               	movf	___fttol@lval,w
 17106  0C03  00CE               	movwf	?___fttol
 17107  0C04  0008               	return
 17108  0C05                     __end_of___fttol:	
 17109                           
 17110                           	psect	text120
 17111  1B0F                     __ptext120:	
 17112 ;; *************** function ___ftneg *****************
 17113 ;; Defined at:
 17114 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17115 ;; Parameters:    Size  Location     Type
 17116 ;;  f1              3   30[BANK0 ] float 
 17117 ;; Auto vars:     Size  Location     Type
 17118 ;;		None
 17119 ;; Return value:  Size  Location     Type
 17120 ;;                  3   30[BANK0 ] float 
 17121 ;; Registers used:
 17122 ;;		wreg
 17123 ;; Tracked objects:
 17124 ;;		On entry : 0/0
 17125 ;;		On exit  : 0/0
 17126 ;;		Unchanged: 0/0
 17127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17128 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17131 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17132 ;;Total ram usage:        3 bytes
 17133 ;; Hardware stack levels used:    1
 17134 ;; Hardware stack levels required when called:    5
 17135 ;; This function calls:
 17136 ;;		Nothing
 17137 ;; This function is called by:
 17138 ;;		_getDimmerLights_PercentToValue
 17139 ;;		_getDimmerLights_ValueToPercent
 17140 ;; This function uses a non-reentrant model
 17141 ;;
 17142                           
 17143                           
 17144                           ;psect for function ___ftneg
 17145  1B0F                     ___ftneg:	
 17146                           
 17147                           ;incstack = 0
 17148                           ; Regs used in ___ftneg: [wreg]
 17149  1B0F  0020               	movlb	0	; select bank0
 17150  1B10  0840               	movf	___ftneg@f1+2,w
 17151  1B11  043F               	iorwf	___ftneg@f1+1,w
 17152  1B12  043E               	iorwf	___ftneg@f1,w
 17153  1B13  1903               	skipnz
 17154  1B14  0008               	return
 17155  1B15  3080               	movlw	128
 17156  1B16  06C0               	xorwf	___ftneg@f1+2,f
 17157  1B17  0008               	return
 17158  1B18                     __end_of___ftneg:	
 17159                           
 17160                           	psect	text121
 17161  0DC7                     __ptext121:	
 17162 ;; *************** function ___ftmul *****************
 17163 ;; Defined at:
 17164 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17165 ;; Parameters:    Size  Location     Type
 17166 ;;  f1              3   14[BANK0 ] float 
 17167 ;;  f2              3   17[BANK0 ] float 
 17168 ;; Auto vars:     Size  Location     Type
 17169 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17170 ;;  sign            1   29[BANK0 ] unsigned char 
 17171 ;;  cntr            1   28[BANK0 ] unsigned char 
 17172 ;;  exp             1   24[BANK0 ] unsigned char 
 17173 ;; Return value:  Size  Location     Type
 17174 ;;                  3   14[BANK0 ] float 
 17175 ;; Registers used:
 17176 ;;		wreg, status,2, status,0, pclath, cstack
 17177 ;; Tracked objects:
 17178 ;;		On entry : 0/0
 17179 ;;		On exit  : 0/0
 17180 ;;		Unchanged: 0/0
 17181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17182 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17183 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17184 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17185 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;Total ram usage:       16 bytes
 17187 ;; Hardware stack levels used:    1
 17188 ;; Hardware stack levels required when called:    6
 17189 ;; This function calls:
 17190 ;;		___ftpack
 17191 ;; This function is called by:
 17192 ;;		_getDimmerLights_PercentToValue
 17193 ;; This function uses a non-reentrant model
 17194 ;;
 17195                           
 17196                           
 17197                           ;psect for function ___ftmul
 17198  0DC7                     ___ftmul:	
 17199                           
 17200                           ;incstack = 0
 17201                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17202  0DC7  0020               	movlb	0	; select bank0
 17203  0DC8  082E               	movf	___ftmul@f1,w
 17204  0DC9  00B4               	movwf	??___ftmul
 17205  0DCA  082F               	movf	___ftmul@f1+1,w
 17206  0DCB  00B5               	movwf	??___ftmul+1
 17207  0DCC  0830               	movf	___ftmul@f1+2,w
 17208  0DCD  00B6               	movwf	??___ftmul+2
 17209  0DCE  1003               	clrc
 17210  0DCF  0D35               	rlf	??___ftmul+1,w
 17211  0DD0  0D36               	rlf	??___ftmul+2,w
 17212  0DD1  00B7               	movwf	??___ftmul+3
 17213  0DD2  0837               	movf	??___ftmul+3,w
 17214  0DD3  00B8               	movwf	___ftmul@exp
 17215  0DD4  08B8               	movf	___ftmul@exp,f
 17216  0DD5  1D03               	skipz
 17217  0DD6  2DDE               	goto	l6009
 17218  0DD7  3000               	movlw	0
 17219  0DD8  00AE               	movwf	?___ftmul
 17220  0DD9  3000               	movlw	0
 17221  0DDA  00AF               	movwf	?___ftmul+1
 17222  0DDB  3000               	movlw	0
 17223  0DDC  00B0               	movwf	?___ftmul+2
 17224  0DDD  0008               	return
 17225  0DDE                     l6009:	
 17226  0DDE  0831               	movf	___ftmul@f2,w
 17227  0DDF  00B4               	movwf	??___ftmul
 17228  0DE0  0832               	movf	___ftmul@f2+1,w
 17229  0DE1  00B5               	movwf	??___ftmul+1
 17230  0DE2  0833               	movf	___ftmul@f2+2,w
 17231  0DE3  00B6               	movwf	??___ftmul+2
 17232  0DE4  1003               	clrc
 17233  0DE5  0D35               	rlf	??___ftmul+1,w
 17234  0DE6  0D36               	rlf	??___ftmul+2,w
 17235  0DE7  00B7               	movwf	??___ftmul+3
 17236  0DE8  0837               	movf	??___ftmul+3,w
 17237  0DE9  00BD               	movwf	___ftmul@sign
 17238  0DEA  08BD               	movf	___ftmul@sign,f
 17239  0DEB  1D03               	skipz
 17240  0DEC  2DF4               	goto	l6015
 17241  0DED  3000               	movlw	0
 17242  0DEE  00AE               	movwf	?___ftmul
 17243  0DEF  3000               	movlw	0
 17244  0DF0  00AF               	movwf	?___ftmul+1
 17245  0DF1  3000               	movlw	0
 17246  0DF2  00B0               	movwf	?___ftmul+2
 17247  0DF3  0008               	return
 17248  0DF4                     l6015:	
 17249  0DF4  083D               	movf	___ftmul@sign,w
 17250  0DF5  3E7B               	addlw	123
 17251  0DF6  00B4               	movwf	??___ftmul
 17252  0DF7  0834               	movf	??___ftmul,w
 17253  0DF8  07B8               	addwf	___ftmul@exp,f
 17254  0DF9  082E               	movf	___ftmul@f1,w
 17255  0DFA  00B4               	movwf	??___ftmul
 17256  0DFB  082F               	movf	___ftmul@f1+1,w
 17257  0DFC  00B5               	movwf	??___ftmul+1
 17258  0DFD  0830               	movf	___ftmul@f1+2,w
 17259  0DFE  00B6               	movwf	??___ftmul+2
 17260  0DFF  3010               	movlw	16
 17261  0E00                     u4945:	
 17262  0E00  36B6               	lsrf	??___ftmul+2,f
 17263  0E01  0CB5               	rrf	??___ftmul+1,f
 17264  0E02  0CB4               	rrf	??___ftmul,f
 17265  0E03  0B89               	decfsz	9,f
 17266  0E04  2E00               	goto	u4945
 17267  0E05  0834               	movf	??___ftmul,w
 17268  0E06  00B7               	movwf	??___ftmul+3
 17269  0E07  0837               	movf	??___ftmul+3,w
 17270  0E08  00BD               	movwf	___ftmul@sign
 17271  0E09  0831               	movf	___ftmul@f2,w
 17272  0E0A  00B4               	movwf	??___ftmul
 17273  0E0B  0832               	movf	___ftmul@f2+1,w
 17274  0E0C  00B5               	movwf	??___ftmul+1
 17275  0E0D  0833               	movf	___ftmul@f2+2,w
 17276  0E0E  00B6               	movwf	??___ftmul+2
 17277  0E0F  3010               	movlw	16
 17278  0E10                     u4955:	
 17279  0E10  36B6               	lsrf	??___ftmul+2,f
 17280  0E11  0CB5               	rrf	??___ftmul+1,f
 17281  0E12  0CB4               	rrf	??___ftmul,f
 17282  0E13  0B89               	decfsz	9,f
 17283  0E14  2E10               	goto	u4955
 17284  0E15  0834               	movf	??___ftmul,w
 17285  0E16  00B7               	movwf	??___ftmul+3
 17286  0E17  0837               	movf	??___ftmul+3,w
 17287  0E18  06BD               	xorwf	___ftmul@sign,f
 17288  0E19  3080               	movlw	128
 17289  0E1A  00B4               	movwf	??___ftmul
 17290  0E1B  0834               	movf	??___ftmul,w
 17291  0E1C  05BD               	andwf	___ftmul@sign,f
 17292  0E1D  17AF               	bsf	___ftmul@f1+1,7
 17293  0E1E  17B2               	bsf	___ftmul@f2+1,7
 17294  0E1F  30FF               	movlw	255
 17295  0E20  05B1               	andwf	___ftmul@f2,f
 17296  0E21  30FF               	movlw	255
 17297  0E22  05B2               	andwf	___ftmul@f2+1,f
 17298  0E23  3000               	movlw	0
 17299  0E24  05B3               	andwf	___ftmul@f2+2,f
 17300  0E25  3000               	movlw	0
 17301  0E26  00B9               	movwf	___ftmul@f3_as_product
 17302  0E27  3000               	movlw	0
 17303  0E28  00BA               	movwf	___ftmul@f3_as_product+1
 17304  0E29  3000               	movlw	0
 17305  0E2A  00BB               	movwf	___ftmul@f3_as_product+2
 17306  0E2B  3007               	movlw	7
 17307  0E2C  00B4               	movwf	??___ftmul
 17308  0E2D  0834               	movf	??___ftmul,w
 17309  0E2E  00BC               	movwf	___ftmul@cntr
 17310  0E2F                     l6027:	
 17311  0E2F  1C2E               	btfss	___ftmul@f1,0
 17312  0E30  2E37               	goto	l6031
 17313  0E31  0831               	movf	___ftmul@f2,w
 17314  0E32  07B9               	addwf	___ftmul@f3_as_product,f
 17315  0E33  0832               	movf	___ftmul@f2+1,w
 17316  0E34  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17317  0E35  0833               	movf	___ftmul@f2+2,w
 17318  0E36  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17319  0E37                     l6031:	
 17320  0E37  3001               	movlw	1
 17321  0E38                     u4975:	
 17322  0E38  36B0               	lsrf	___ftmul@f1+2,f
 17323  0E39  0CAF               	rrf	___ftmul@f1+1,f
 17324  0E3A  0CAE               	rrf	___ftmul@f1,f
 17325  0E3B  0B89               	decfsz	9,f
 17326  0E3C  2E38               	goto	u4975
 17327  0E3D  3001               	movlw	1
 17328  0E3E                     u4985:	
 17329  0E3E  35B1               	lslf	___ftmul@f2,f
 17330  0E3F  0DB2               	rlf	___ftmul@f2+1,f
 17331  0E40  0DB3               	rlf	___ftmul@f2+2,f
 17332  0E41  0B89               	decfsz	9,f
 17333  0E42  2E3E               	goto	u4985
 17334  0E43  3001               	movlw	1
 17335  0E44  02BC               	subwf	___ftmul@cntr,f
 17336  0E45  1D03               	btfss	3,2
 17337  0E46  2E2F               	goto	l6027
 17338  0E47  3009               	movlw	9
 17339  0E48  00B4               	movwf	??___ftmul
 17340  0E49  0834               	movf	??___ftmul,w
 17341  0E4A  00BC               	movwf	___ftmul@cntr
 17342  0E4B                     l6039:	
 17343  0E4B  1C2E               	btfss	___ftmul@f1,0
 17344  0E4C  2E53               	goto	l6043
 17345  0E4D  0831               	movf	___ftmul@f2,w
 17346  0E4E  07B9               	addwf	___ftmul@f3_as_product,f
 17347  0E4F  0832               	movf	___ftmul@f2+1,w
 17348  0E50  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17349  0E51  0833               	movf	___ftmul@f2+2,w
 17350  0E52  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17351  0E53                     l6043:	
 17352  0E53  3001               	movlw	1
 17353  0E54                     u5015:	
 17354  0E54  36B0               	lsrf	___ftmul@f1+2,f
 17355  0E55  0CAF               	rrf	___ftmul@f1+1,f
 17356  0E56  0CAE               	rrf	___ftmul@f1,f
 17357  0E57  0B89               	decfsz	9,f
 17358  0E58  2E54               	goto	u5015
 17359  0E59  3001               	movlw	1
 17360  0E5A                     u5025:	
 17361  0E5A  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17362  0E5B  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17363  0E5C  0CB9               	rrf	___ftmul@f3_as_product,f
 17364  0E5D  0B89               	decfsz	9,f
 17365  0E5E  2E5A               	goto	u5025
 17366  0E5F  3001               	movlw	1
 17367  0E60  02BC               	subwf	___ftmul@cntr,f
 17368  0E61  1D03               	btfss	3,2
 17369  0E62  2E4B               	goto	l6039
 17370  0E63  0839               	movf	___ftmul@f3_as_product,w
 17371  0E64  00A0               	movwf	___ftpack@arg
 17372  0E65  083A               	movf	___ftmul@f3_as_product+1,w
 17373  0E66  00A1               	movwf	___ftpack@arg+1
 17374  0E67  083B               	movf	___ftmul@f3_as_product+2,w
 17375  0E68  00A2               	movwf	___ftpack@arg+2
 17376  0E69  0838               	movf	___ftmul@exp,w
 17377  0E6A  00B4               	movwf	??___ftmul
 17378  0E6B  0834               	movf	??___ftmul,w
 17379  0E6C  00A3               	movwf	___ftpack@exp
 17380  0E6D  083D               	movf	___ftmul@sign,w
 17381  0E6E  00B5               	movwf	??___ftmul+1
 17382  0E6F  0835               	movf	??___ftmul+1,w
 17383  0E70  00A4               	movwf	___ftpack@sign
 17384  0E71  3195  25A1         	fcall	___ftpack
 17385  0E73  0020               	movlb	0	; select bank0
 17386  0E74  0820               	movf	?___ftpack,w
 17387  0E75  00AE               	movwf	?___ftmul
 17388  0E76  0821               	movf	?___ftpack+1,w
 17389  0E77  00AF               	movwf	?___ftmul+1
 17390  0E78  0822               	movf	?___ftpack+2,w
 17391  0E79  00B0               	movwf	?___ftmul+2
 17392  0E7A  0008               	return
 17393  0E7B                     __end_of___ftmul:	
 17394                           
 17395                           	psect	text122
 17396  0D1E                     __ptext122:	
 17397 ;; *************** function ___ftdiv *****************
 17398 ;; Defined at:
 17399 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17400 ;; Parameters:    Size  Location     Type
 17401 ;;  f2              3   14[BANK0 ] float 
 17402 ;;  f1              3   17[BANK0 ] float 
 17403 ;; Auto vars:     Size  Location     Type
 17404 ;;  f3              3   25[BANK0 ] float 
 17405 ;;  sign            1   29[BANK0 ] unsigned char 
 17406 ;;  exp             1   28[BANK0 ] unsigned char 
 17407 ;;  cntr            1   24[BANK0 ] unsigned char 
 17408 ;; Return value:  Size  Location     Type
 17409 ;;                  3   14[BANK0 ] float 
 17410 ;; Registers used:
 17411 ;;		wreg, status,2, status,0, pclath, cstack
 17412 ;; Tracked objects:
 17413 ;;		On entry : 0/0
 17414 ;;		On exit  : 0/0
 17415 ;;		Unchanged: 0/0
 17416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17417 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17418 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17419 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17420 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17421 ;;Total ram usage:       16 bytes
 17422 ;; Hardware stack levels used:    1
 17423 ;; Hardware stack levels required when called:    6
 17424 ;; This function calls:
 17425 ;;		___ftpack
 17426 ;; This function is called by:
 17427 ;;		_getDimmerLights_PercentToValue
 17428 ;;		_getDimmerLights_ValueToPercent
 17429 ;; This function uses a non-reentrant model
 17430 ;;
 17431                           
 17432                           
 17433                           ;psect for function ___ftdiv
 17434  0D1E                     ___ftdiv:	
 17435                           
 17436                           ;incstack = 0
 17437                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17438  0D1E  0020               	movlb	0	; select bank0
 17439  0D1F  0831               	movf	___ftdiv@f1,w
 17440  0D20  00B4               	movwf	??___ftdiv
 17441  0D21  0832               	movf	___ftdiv@f1+1,w
 17442  0D22  00B5               	movwf	??___ftdiv+1
 17443  0D23  0833               	movf	___ftdiv@f1+2,w
 17444  0D24  00B6               	movwf	??___ftdiv+2
 17445  0D25  1003               	clrc
 17446  0D26  0D35               	rlf	??___ftdiv+1,w
 17447  0D27  0D36               	rlf	??___ftdiv+2,w
 17448  0D28  00B7               	movwf	??___ftdiv+3
 17449  0D29  0837               	movf	??___ftdiv+3,w
 17450  0D2A  00BC               	movwf	___ftdiv@exp
 17451  0D2B  08BC               	movf	___ftdiv@exp,f
 17452  0D2C  1D03               	skipz
 17453  0D2D  2D35               	goto	l5967
 17454  0D2E  3000               	movlw	0
 17455  0D2F  00AE               	movwf	?___ftdiv
 17456  0D30  3000               	movlw	0
 17457  0D31  00AF               	movwf	?___ftdiv+1
 17458  0D32  3000               	movlw	0
 17459  0D33  00B0               	movwf	?___ftdiv+2
 17460  0D34  0008               	return
 17461  0D35                     l5967:	
 17462  0D35  082E               	movf	___ftdiv@f2,w
 17463  0D36  00B4               	movwf	??___ftdiv
 17464  0D37  082F               	movf	___ftdiv@f2+1,w
 17465  0D38  00B5               	movwf	??___ftdiv+1
 17466  0D39  0830               	movf	___ftdiv@f2+2,w
 17467  0D3A  00B6               	movwf	??___ftdiv+2
 17468  0D3B  1003               	clrc
 17469  0D3C  0D35               	rlf	??___ftdiv+1,w
 17470  0D3D  0D36               	rlf	??___ftdiv+2,w
 17471  0D3E  00B7               	movwf	??___ftdiv+3
 17472  0D3F  0837               	movf	??___ftdiv+3,w
 17473  0D40  00BD               	movwf	___ftdiv@sign
 17474  0D41  08BD               	movf	___ftdiv@sign,f
 17475  0D42  1D03               	skipz
 17476  0D43  2D4B               	goto	l5973
 17477  0D44  3000               	movlw	0
 17478  0D45  00AE               	movwf	?___ftdiv
 17479  0D46  3000               	movlw	0
 17480  0D47  00AF               	movwf	?___ftdiv+1
 17481  0D48  3000               	movlw	0
 17482  0D49  00B0               	movwf	?___ftdiv+2
 17483  0D4A  0008               	return
 17484  0D4B                     l5973:	
 17485  0D4B  3000               	movlw	0
 17486  0D4C  00B9               	movwf	___ftdiv@f3
 17487  0D4D  3000               	movlw	0
 17488  0D4E  00BA               	movwf	___ftdiv@f3+1
 17489  0D4F  3000               	movlw	0
 17490  0D50  00BB               	movwf	___ftdiv@f3+2
 17491  0D51  3089               	movlw	137
 17492  0D52  073D               	addwf	___ftdiv@sign,w
 17493  0D53  00B4               	movwf	??___ftdiv
 17494  0D54  0834               	movf	??___ftdiv,w
 17495  0D55  02BC               	subwf	___ftdiv@exp,f
 17496  0D56  0831               	movf	___ftdiv@f1,w
 17497  0D57  00B4               	movwf	??___ftdiv
 17498  0D58  0832               	movf	___ftdiv@f1+1,w
 17499  0D59  00B5               	movwf	??___ftdiv+1
 17500  0D5A  0833               	movf	___ftdiv@f1+2,w
 17501  0D5B  00B6               	movwf	??___ftdiv+2
 17502  0D5C  3010               	movlw	16
 17503  0D5D                     u4865:	
 17504  0D5D  36B6               	lsrf	??___ftdiv+2,f
 17505  0D5E  0CB5               	rrf	??___ftdiv+1,f
 17506  0D5F  0CB4               	rrf	??___ftdiv,f
 17507  0D60  0B89               	decfsz	9,f
 17508  0D61  2D5D               	goto	u4865
 17509  0D62  0834               	movf	??___ftdiv,w
 17510  0D63  00B7               	movwf	??___ftdiv+3
 17511  0D64  0837               	movf	??___ftdiv+3,w
 17512  0D65  00BD               	movwf	___ftdiv@sign
 17513  0D66  082E               	movf	___ftdiv@f2,w
 17514  0D67  00B4               	movwf	??___ftdiv
 17515  0D68  082F               	movf	___ftdiv@f2+1,w
 17516  0D69  00B5               	movwf	??___ftdiv+1
 17517  0D6A  0830               	movf	___ftdiv@f2+2,w
 17518  0D6B  00B6               	movwf	??___ftdiv+2
 17519  0D6C  3010               	movlw	16
 17520  0D6D                     u4875:	
 17521  0D6D  36B6               	lsrf	??___ftdiv+2,f
 17522  0D6E  0CB5               	rrf	??___ftdiv+1,f
 17523  0D6F  0CB4               	rrf	??___ftdiv,f
 17524  0D70  0B89               	decfsz	9,f
 17525  0D71  2D6D               	goto	u4875
 17526  0D72  0834               	movf	??___ftdiv,w
 17527  0D73  00B7               	movwf	??___ftdiv+3
 17528  0D74  0837               	movf	??___ftdiv+3,w
 17529  0D75  06BD               	xorwf	___ftdiv@sign,f
 17530  0D76  3080               	movlw	128
 17531  0D77  00B4               	movwf	??___ftdiv
 17532  0D78  0834               	movf	??___ftdiv,w
 17533  0D79  05BD               	andwf	___ftdiv@sign,f
 17534  0D7A  17B2               	bsf	___ftdiv@f1+1,7
 17535  0D7B  30FF               	movlw	255
 17536  0D7C  05B1               	andwf	___ftdiv@f1,f
 17537  0D7D  30FF               	movlw	255
 17538  0D7E  05B2               	andwf	___ftdiv@f1+1,f
 17539  0D7F  3000               	movlw	0
 17540  0D80  05B3               	andwf	___ftdiv@f1+2,f
 17541  0D81  17AF               	bsf	___ftdiv@f2+1,7
 17542  0D82  30FF               	movlw	255
 17543  0D83  05AE               	andwf	___ftdiv@f2,f
 17544  0D84  30FF               	movlw	255
 17545  0D85  05AF               	andwf	___ftdiv@f2+1,f
 17546  0D86  3000               	movlw	0
 17547  0D87  05B0               	andwf	___ftdiv@f2+2,f
 17548  0D88  3018               	movlw	24
 17549  0D89  00B4               	movwf	??___ftdiv
 17550  0D8A  0834               	movf	??___ftdiv,w
 17551  0D8B  00B8               	movwf	___ftdiv@cntr
 17552  0D8C                     l5987:	
 17553  0D8C  3001               	movlw	1
 17554  0D8D                     u4885:	
 17555  0D8D  35B9               	lslf	___ftdiv@f3,f
 17556  0D8E  0DBA               	rlf	___ftdiv@f3+1,f
 17557  0D8F  0DBB               	rlf	___ftdiv@f3+2,f
 17558  0D90  0B89               	decfsz	9,f
 17559  0D91  2D8D               	goto	u4885
 17560  0D92  0830               	movf	___ftdiv@f2+2,w
 17561  0D93  0233               	subwf	___ftdiv@f1+2,w
 17562  0D94  1D03               	skipz
 17563  0D95  2D9C               	goto	u4895
 17564  0D96  082F               	movf	___ftdiv@f2+1,w
 17565  0D97  0232               	subwf	___ftdiv@f1+1,w
 17566  0D98  1D03               	skipz
 17567  0D99  2D9C               	goto	u4895
 17568  0D9A  082E               	movf	___ftdiv@f2,w
 17569  0D9B  0231               	subwf	___ftdiv@f1,w
 17570  0D9C                     u4895:	
 17571  0D9C  1C03               	skipc
 17572  0D9D  2DA5               	goto	l5995
 17573  0D9E  082E               	movf	___ftdiv@f2,w
 17574  0D9F  02B1               	subwf	___ftdiv@f1,f
 17575  0DA0  082F               	movf	___ftdiv@f2+1,w
 17576  0DA1  3BB2               	subwfb	___ftdiv@f1+1,f
 17577  0DA2  0830               	movf	___ftdiv@f2+2,w
 17578  0DA3  3BB3               	subwfb	___ftdiv@f1+2,f
 17579  0DA4  1439               	bsf	___ftdiv@f3,0
 17580  0DA5                     l5995:	
 17581  0DA5  3001               	movlw	1
 17582  0DA6                     u4905:	
 17583  0DA6  35B1               	lslf	___ftdiv@f1,f
 17584  0DA7  0DB2               	rlf	___ftdiv@f1+1,f
 17585  0DA8  0DB3               	rlf	___ftdiv@f1+2,f
 17586  0DA9  0B89               	decfsz	9,f
 17587  0DAA  2DA6               	goto	u4905
 17588  0DAB  3001               	movlw	1
 17589  0DAC  02B8               	subwf	___ftdiv@cntr,f
 17590  0DAD  1D03               	btfss	3,2
 17591  0DAE  2D8C               	goto	l5987
 17592  0DAF  0839               	movf	___ftdiv@f3,w
 17593  0DB0  00A0               	movwf	___ftpack@arg
 17594  0DB1  083A               	movf	___ftdiv@f3+1,w
 17595  0DB2  00A1               	movwf	___ftpack@arg+1
 17596  0DB3  083B               	movf	___ftdiv@f3+2,w
 17597  0DB4  00A2               	movwf	___ftpack@arg+2
 17598  0DB5  083C               	movf	___ftdiv@exp,w
 17599  0DB6  00B4               	movwf	??___ftdiv
 17600  0DB7  0834               	movf	??___ftdiv,w
 17601  0DB8  00A3               	movwf	___ftpack@exp
 17602  0DB9  083D               	movf	___ftdiv@sign,w
 17603  0DBA  00B5               	movwf	??___ftdiv+1
 17604  0DBB  0835               	movf	??___ftdiv+1,w
 17605  0DBC  00A4               	movwf	___ftpack@sign
 17606  0DBD  3195  25A1         	fcall	___ftpack
 17607  0DBF  0020               	movlb	0	; select bank0
 17608  0DC0  0820               	movf	?___ftpack,w
 17609  0DC1  00AE               	movwf	?___ftdiv
 17610  0DC2  0821               	movf	?___ftpack+1,w
 17611  0DC3  00AF               	movwf	?___ftdiv+1
 17612  0DC4  0822               	movf	?___ftpack+2,w
 17613  0DC5  00B0               	movwf	?___ftdiv+2
 17614  0DC6  0008               	return
 17615  0DC7                     __end_of___ftdiv:	
 17616                           
 17617                           	psect	text123
 17618  0384                     __ptext123:	
 17619 ;; *************** function ___ftadd *****************
 17620 ;; Defined at:
 17621 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17622 ;; Parameters:    Size  Location     Type
 17623 ;;  f1              3   33[BANK0 ] float 
 17624 ;;  f2              3   36[BANK0 ] float 
 17625 ;; Auto vars:     Size  Location     Type
 17626 ;;  exp1            1   45[BANK0 ] unsigned char 
 17627 ;;  exp2            1   44[BANK0 ] unsigned char 
 17628 ;;  sign            1   43[BANK0 ] unsigned char 
 17629 ;; Return value:  Size  Location     Type
 17630 ;;                  3   33[BANK0 ] float 
 17631 ;; Registers used:
 17632 ;;		wreg, status,2, status,0, pclath, cstack
 17633 ;; Tracked objects:
 17634 ;;		On entry : 0/0
 17635 ;;		On exit  : 0/0
 17636 ;;		Unchanged: 0/0
 17637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17638 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17640 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17641 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17642 ;;Total ram usage:       13 bytes
 17643 ;; Hardware stack levels used:    1
 17644 ;; Hardware stack levels required when called:    6
 17645 ;; This function calls:
 17646 ;;		___ftpack
 17647 ;; This function is called by:
 17648 ;;		_getDimmerLights_PercentToValue
 17649 ;;		_getDimmerLights_ValueToPercent
 17650 ;; This function uses a non-reentrant model
 17651 ;;
 17652                           
 17653                           
 17654                           ;psect for function ___ftadd
 17655  0384                     ___ftadd:	
 17656                           
 17657                           ;incstack = 0
 17658                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17659  0384  0020               	movlb	0	; select bank0
 17660  0385  0841               	movf	___ftadd@f1,w
 17661  0386  00C7               	movwf	??___ftadd
 17662  0387  0842               	movf	___ftadd@f1+1,w
 17663  0388  00C8               	movwf	??___ftadd+1
 17664  0389  0843               	movf	___ftadd@f1+2,w
 17665  038A  00C9               	movwf	??___ftadd+2
 17666  038B  1003               	clrc
 17667  038C  0D48               	rlf	??___ftadd+1,w
 17668  038D  0D49               	rlf	??___ftadd+2,w
 17669  038E  00CA               	movwf	??___ftadd+3
 17670  038F  084A               	movf	??___ftadd+3,w
 17671  0390  00CD               	movwf	___ftadd@exp1
 17672  0391  0844               	movf	___ftadd@f2,w
 17673  0392  00C7               	movwf	??___ftadd
 17674  0393  0845               	movf	___ftadd@f2+1,w
 17675  0394  00C8               	movwf	??___ftadd+1
 17676  0395  0846               	movf	___ftadd@f2+2,w
 17677  0396  00C9               	movwf	??___ftadd+2
 17678  0397  1003               	clrc
 17679  0398  0D48               	rlf	??___ftadd+1,w
 17680  0399  0D49               	rlf	??___ftadd+2,w
 17681  039A  00CA               	movwf	??___ftadd+3
 17682  039B  084A               	movf	??___ftadd+3,w
 17683  039C  00CC               	movwf	___ftadd@exp2
 17684  039D  084D               	movf	___ftadd@exp1,w
 17685  039E  1903               	btfsc	3,2
 17686  039F  2BAC               	goto	l5897
 17687  03A0  084C               	movf	___ftadd@exp2,w
 17688  03A1  024D               	subwf	___ftadd@exp1,w
 17689  03A2  1803               	skipnc
 17690  03A3  2BB3               	goto	l5901
 17691  03A4  034D               	decf	___ftadd@exp1,w
 17692  03A5  3AFF               	xorlw	255
 17693  03A6  074C               	addwf	___ftadd@exp2,w
 17694  03A7  00C7               	movwf	??___ftadd
 17695  03A8  3019               	movlw	25
 17696  03A9  0247               	subwf	??___ftadd,w
 17697  03AA  1C03               	skipc
 17698  03AB  2BB3               	goto	l5901
 17699  03AC                     l5897:	
 17700  03AC  0844               	movf	___ftadd@f2,w
 17701  03AD  00C1               	movwf	?___ftadd
 17702  03AE  0845               	movf	___ftadd@f2+1,w
 17703  03AF  00C2               	movwf	?___ftadd+1
 17704  03B0  0846               	movf	___ftadd@f2+2,w
 17705  03B1  00C3               	movwf	?___ftadd+2
 17706  03B2  0008               	return
 17707  03B3                     l5901:	
 17708  03B3  084C               	movf	___ftadd@exp2,w
 17709  03B4  1903               	btfsc	3,2
 17710  03B5  0008               	return
 17711  03B6  084D               	movf	___ftadd@exp1,w
 17712  03B7  024C               	subwf	___ftadd@exp2,w
 17713  03B8  1803               	skipnc
 17714  03B9  2BC2               	goto	l5907
 17715  03BA  034C               	decf	___ftadd@exp2,w
 17716  03BB  3AFF               	xorlw	255
 17717  03BC  074D               	addwf	___ftadd@exp1,w
 17718  03BD  00C7               	movwf	??___ftadd
 17719  03BE  3019               	movlw	25
 17720  03BF  0247               	subwf	??___ftadd,w
 17721  03C0  1803               	btfsc	3,0
 17722  03C1  0008               	return
 17723  03C2                     l5907:	
 17724  03C2  3006               	movlw	6
 17725  03C3  00C7               	movwf	??___ftadd
 17726  03C4  0847               	movf	??___ftadd,w
 17727  03C5  00CB               	movwf	___ftadd@sign
 17728  03C6  1BC3               	btfsc	___ftadd@f1+2,7
 17729  03C7  17CB               	bsf	___ftadd@sign,7
 17730  03C8  1BC6               	btfsc	___ftadd@f2+2,7
 17731  03C9  174B               	bsf	___ftadd@sign,6
 17732  03CA  17C2               	bsf	___ftadd@f1+1,7
 17733  03CB  30FF               	movlw	255
 17734  03CC  05C1               	andwf	___ftadd@f1,f
 17735  03CD  30FF               	movlw	255
 17736  03CE  05C2               	andwf	___ftadd@f1+1,f
 17737  03CF  3000               	movlw	0
 17738  03D0  05C3               	andwf	___ftadd@f1+2,f
 17739  03D1  17C5               	bsf	___ftadd@f2+1,7
 17740  03D2  30FF               	movlw	255
 17741  03D3  05C4               	andwf	___ftadd@f2,f
 17742  03D4  30FF               	movlw	255
 17743  03D5  05C5               	andwf	___ftadd@f2+1,f
 17744  03D6  3000               	movlw	0
 17745  03D7  05C6               	andwf	___ftadd@f2+2,f
 17746  03D8  084C               	movf	___ftadd@exp2,w
 17747  03D9  024D               	subwf	___ftadd@exp1,w
 17748  03DA  1803               	skipnc
 17749  03DB  2BFE               	goto	l5929
 17750  03DC                     l5919:	
 17751  03DC  3001               	movlw	1
 17752  03DD                     u4705:	
 17753  03DD  35C4               	lslf	___ftadd@f2,f
 17754  03DE  0DC5               	rlf	___ftadd@f2+1,f
 17755  03DF  0DC6               	rlf	___ftadd@f2+2,f
 17756  03E0  0B89               	decfsz	9,f
 17757  03E1  2BDD               	goto	u4705
 17758  03E2  3001               	movlw	1
 17759  03E3  02CC               	subwf	___ftadd@exp2,f
 17760  03E4  084C               	movf	___ftadd@exp2,w
 17761  03E5  064D               	xorwf	___ftadd@exp1,w
 17762  03E6  1903               	skipnz
 17763  03E7  2BF9               	goto	l5927
 17764  03E8  3001               	movlw	1
 17765  03E9  02CB               	subwf	___ftadd@sign,f
 17766  03EA  084B               	movf	___ftadd@sign,w
 17767  03EB  3907               	andlw	7
 17768  03EC  1903               	btfsc	3,2
 17769  03ED  2BF9               	goto	l5927
 17770  03EE  2BDC               	goto	l5919
 17771  03EF                     l5925:	
 17772  03EF  3001               	movlw	1
 17773  03F0                     u4735:	
 17774  03F0  36C3               	lsrf	___ftadd@f1+2,f
 17775  03F1  0CC2               	rrf	___ftadd@f1+1,f
 17776  03F2  0CC1               	rrf	___ftadd@f1,f
 17777  03F3  0B89               	decfsz	9,f
 17778  03F4  2BF0               	goto	u4735
 17779  03F5  3001               	movlw	1
 17780  03F6  00C7               	movwf	??___ftadd
 17781  03F7  0847               	movf	??___ftadd,w
 17782  03F8  07CD               	addwf	___ftadd@exp1,f
 17783  03F9                     l5927:	
 17784  03F9  084D               	movf	___ftadd@exp1,w
 17785  03FA  064C               	xorwf	___ftadd@exp2,w
 17786  03FB  1903               	btfsc	3,2
 17787  03FC  2C23               	goto	l2886
 17788  03FD  2BEF               	goto	l5925
 17789  03FE                     l5929:	
 17790  03FE  084D               	movf	___ftadd@exp1,w
 17791  03FF  024C               	subwf	___ftadd@exp2,w
 17792  0400  1803               	skipnc
 17793  0401  2C23               	goto	l2886
 17794  0402                     l5931:	
 17795  0402  3001               	movlw	1
 17796  0403                     u4765:	
 17797  0403  35C1               	lslf	___ftadd@f1,f
 17798  0404  0DC2               	rlf	___ftadd@f1+1,f
 17799  0405  0DC3               	rlf	___ftadd@f1+2,f
 17800  0406  0B89               	decfsz	9,f
 17801  0407  2C03               	goto	u4765
 17802  0408  3001               	movlw	1
 17803  0409  02CD               	subwf	___ftadd@exp1,f
 17804  040A  084C               	movf	___ftadd@exp2,w
 17805  040B  064D               	xorwf	___ftadd@exp1,w
 17806  040C  1903               	skipnz
 17807  040D  2C1F               	goto	l5939
 17808  040E  3001               	movlw	1
 17809  040F  02CB               	subwf	___ftadd@sign,f
 17810  0410  084B               	movf	___ftadd@sign,w
 17811  0411  3907               	andlw	7
 17812  0412  1903               	btfsc	3,2
 17813  0413  2C1F               	goto	l5939
 17814  0414  2C02               	goto	l5931
 17815  0415                     l5937:	
 17816  0415  3001               	movlw	1
 17817  0416                     u4795:	
 17818  0416  36C6               	lsrf	___ftadd@f2+2,f
 17819  0417  0CC5               	rrf	___ftadd@f2+1,f
 17820  0418  0CC4               	rrf	___ftadd@f2,f
 17821  0419  0B89               	decfsz	9,f
 17822  041A  2C16               	goto	u4795
 17823  041B  3001               	movlw	1
 17824  041C  00C7               	movwf	??___ftadd
 17825  041D  0847               	movf	??___ftadd,w
 17826  041E  07CC               	addwf	___ftadd@exp2,f
 17827  041F                     l5939:	
 17828  041F  084D               	movf	___ftadd@exp1,w
 17829  0420  064C               	xorwf	___ftadd@exp2,w
 17830  0421  1D03               	skipz
 17831  0422  2C15               	goto	l5937
 17832  0423                     l2886:	
 17833  0423  1FCB               	btfss	___ftadd@sign,7
 17834  0424  2C35               	goto	l5943
 17835  0425  30FF               	movlw	255
 17836  0426  06C1               	xorwf	___ftadd@f1,f
 17837  0427  30FF               	movlw	255
 17838  0428  06C2               	xorwf	___ftadd@f1+1,f
 17839  0429  30FF               	movlw	255
 17840  042A  06C3               	xorwf	___ftadd@f1+2,f
 17841  042B  3001               	movlw	1
 17842  042C  07C1               	addwf	___ftadd@f1,f
 17843  042D  3000               	movlw	0
 17844  042E  1803               	skipnc
 17845  042F  3001               	movlw	1
 17846  0430  07C2               	addwf	___ftadd@f1+1,f
 17847  0431  3000               	movlw	0
 17848  0432  1803               	skipnc
 17849  0433  3001               	movlw	1
 17850  0434  07C3               	addwf	___ftadd@f1+2,f
 17851  0435                     l5943:	
 17852  0435  1F4B               	btfss	___ftadd@sign,6
 17853  0436  2C47               	goto	l5947
 17854  0437  30FF               	movlw	255
 17855  0438  06C4               	xorwf	___ftadd@f2,f
 17856  0439  30FF               	movlw	255
 17857  043A  06C5               	xorwf	___ftadd@f2+1,f
 17858  043B  30FF               	movlw	255
 17859  043C  06C6               	xorwf	___ftadd@f2+2,f
 17860  043D  3001               	movlw	1
 17861  043E  07C4               	addwf	___ftadd@f2,f
 17862  043F  3000               	movlw	0
 17863  0440  1803               	skipnc
 17864  0441  3001               	movlw	1
 17865  0442  07C5               	addwf	___ftadd@f2+1,f
 17866  0443  3000               	movlw	0
 17867  0444  1803               	skipnc
 17868  0445  3001               	movlw	1
 17869  0446  07C6               	addwf	___ftadd@f2+2,f
 17870  0447                     l5947:	
 17871  0447  01CB               	clrf	___ftadd@sign
 17872  0448  0841               	movf	___ftadd@f1,w
 17873  0449  07C4               	addwf	___ftadd@f2,f
 17874  044A  0842               	movf	___ftadd@f1+1,w
 17875  044B  3DC5               	addwfc	___ftadd@f2+1,f
 17876  044C  0843               	movf	___ftadd@f1+2,w
 17877  044D  3DC6               	addwfc	___ftadd@f2+2,f
 17878  044E  1FC6               	btfss	___ftadd@f2+2,7
 17879  044F  2C62               	goto	l5957
 17880  0450  30FF               	movlw	255
 17881  0451  06C4               	xorwf	___ftadd@f2,f
 17882  0452  30FF               	movlw	255
 17883  0453  06C5               	xorwf	___ftadd@f2+1,f
 17884  0454  30FF               	movlw	255
 17885  0455  06C6               	xorwf	___ftadd@f2+2,f
 17886  0456  3001               	movlw	1
 17887  0457  07C4               	addwf	___ftadd@f2,f
 17888  0458  3000               	movlw	0
 17889  0459  1803               	skipnc
 17890  045A  3001               	movlw	1
 17891  045B  07C5               	addwf	___ftadd@f2+1,f
 17892  045C  3000               	movlw	0
 17893  045D  1803               	skipnc
 17894  045E  3001               	movlw	1
 17895  045F  07C6               	addwf	___ftadd@f2+2,f
 17896  0460  01CB               	clrf	___ftadd@sign
 17897  0461  0ACB               	incf	___ftadd@sign,f
 17898  0462                     l5957:	
 17899  0462  0844               	movf	___ftadd@f2,w
 17900  0463  00A0               	movwf	___ftpack@arg
 17901  0464  0845               	movf	___ftadd@f2+1,w
 17902  0465  00A1               	movwf	___ftpack@arg+1
 17903  0466  0846               	movf	___ftadd@f2+2,w
 17904  0467  00A2               	movwf	___ftpack@arg+2
 17905  0468  084D               	movf	___ftadd@exp1,w
 17906  0469  00C7               	movwf	??___ftadd
 17907  046A  0847               	movf	??___ftadd,w
 17908  046B  00A3               	movwf	___ftpack@exp
 17909  046C  084B               	movf	___ftadd@sign,w
 17910  046D  00C8               	movwf	??___ftadd+1
 17911  046E  0848               	movf	??___ftadd+1,w
 17912  046F  00A4               	movwf	___ftpack@sign
 17913  0470  3195  25A1         	fcall	___ftpack
 17914  0472  0020               	movlb	0	; select bank0
 17915  0473  0820               	movf	?___ftpack,w
 17916  0474  00C1               	movwf	?___ftadd
 17917  0475  0821               	movf	?___ftpack+1,w
 17918  0476  00C2               	movwf	?___ftadd+1
 17919  0477  0822               	movf	?___ftpack+2,w
 17920  0478  00C3               	movwf	?___ftadd+2
 17921  0479  0008               	return
 17922  047A                     __end_of___ftadd:	
 17923                           
 17924                           	psect	text124
 17925  100F                     __ptext124:	
 17926 ;; *************** function ___awtoft *****************
 17927 ;; Defined at:
 17928 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17929 ;; Parameters:    Size  Location     Type
 17930 ;;  c               2    8[BANK0 ] int 
 17931 ;; Auto vars:     Size  Location     Type
 17932 ;;  sign            1   13[BANK0 ] unsigned char 
 17933 ;; Return value:  Size  Location     Type
 17934 ;;                  3    8[BANK0 ] float 
 17935 ;; Registers used:
 17936 ;;		wreg, status,2, status,0, pclath, cstack
 17937 ;; Tracked objects:
 17938 ;;		On entry : 0/0
 17939 ;;		On exit  : 0/0
 17940 ;;		Unchanged: 0/0
 17941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17942 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17944 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17945 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17946 ;;Total ram usage:        6 bytes
 17947 ;; Hardware stack levels used:    1
 17948 ;; Hardware stack levels required when called:    6
 17949 ;; This function calls:
 17950 ;;		___ftpack
 17951 ;; This function is called by:
 17952 ;;		_getDimmerLights_PercentToValue
 17953 ;;		_getDimmerLights_ValueToPercent
 17954 ;; This function uses a non-reentrant model
 17955 ;;
 17956                           
 17957                           
 17958                           ;psect for function ___awtoft
 17959  100F                     ___awtoft:	
 17960                           
 17961                           ;incstack = 0
 17962                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17963  100F  0020               	movlb	0	; select bank0
 17964  1010  01AD               	clrf	___awtoft@sign
 17965  1011  1FA9               	btfss	___awtoft@c+1,7
 17966  1012  281A               	goto	l5885
 17967  1013  09A8               	comf	___awtoft@c,f
 17968  1014  09A9               	comf	___awtoft@c+1,f
 17969  1015  0AA8               	incf	___awtoft@c,f
 17970  1016  1903               	skipnz
 17971  1017  0AA9               	incf	___awtoft@c+1,f
 17972  1018  01AD               	clrf	___awtoft@sign
 17973  1019  0AAD               	incf	___awtoft@sign,f
 17974  101A                     l5885:	
 17975  101A  0828               	movf	___awtoft@c,w
 17976  101B  00A0               	movwf	___ftpack@arg
 17977  101C  0829               	movf	___awtoft@c+1,w
 17978  101D  00A1               	movwf	___ftpack@arg+1
 17979  101E  01A2               	clrf	___ftpack@arg+2
 17980  101F  308E               	movlw	142
 17981  1020  00AB               	movwf	??___awtoft
 17982  1021  082B               	movf	??___awtoft,w
 17983  1022  00A3               	movwf	___ftpack@exp
 17984  1023  082D               	movf	___awtoft@sign,w
 17985  1024  00AC               	movwf	??___awtoft+1
 17986  1025  082C               	movf	??___awtoft+1,w
 17987  1026  00A4               	movwf	___ftpack@sign
 17988  1027  3195  25A1         	fcall	___ftpack
 17989  1029  0020               	movlb	0	; select bank0
 17990  102A  0820               	movf	?___ftpack,w
 17991  102B  00A8               	movwf	?___awtoft
 17992  102C  0821               	movf	?___ftpack+1,w
 17993  102D  00A9               	movwf	?___awtoft+1
 17994  102E  0822               	movf	?___ftpack+2,w
 17995  102F  00AA               	movwf	?___awtoft+2
 17996  1030  0008               	return
 17997  1031                     __end_of___awtoft:	
 17998                           
 17999                           	psect	text125
 18000  15A1                     __ptext125:	
 18001 ;; *************** function ___ftpack *****************
 18002 ;; Defined at:
 18003 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18004 ;; Parameters:    Size  Location     Type
 18005 ;;  arg             3    0[BANK0 ] unsigned um
 18006 ;;  exp             1    3[BANK0 ] unsigned char 
 18007 ;;  sign            1    4[BANK0 ] unsigned char 
 18008 ;; Auto vars:     Size  Location     Type
 18009 ;;		None
 18010 ;; Return value:  Size  Location     Type
 18011 ;;                  3    0[BANK0 ] float 
 18012 ;; Registers used:
 18013 ;;		wreg, status,2, status,0
 18014 ;; Tracked objects:
 18015 ;;		On entry : 0/0
 18016 ;;		On exit  : 0/0
 18017 ;;		Unchanged: 0/0
 18018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18019 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18021 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;Total ram usage:        8 bytes
 18024 ;; Hardware stack levels used:    1
 18025 ;; Hardware stack levels required when called:    5
 18026 ;; This function calls:
 18027 ;;		Nothing
 18028 ;; This function is called by:
 18029 ;;		___awtoft
 18030 ;;		___ftadd
 18031 ;;		___ftdiv
 18032 ;;		___ftmul
 18033 ;; This function uses a non-reentrant model
 18034 ;;
 18035                           
 18036                           
 18037                           ;psect for function ___ftpack
 18038  15A1                     ___ftpack:	
 18039                           
 18040                           ;incstack = 0
 18041                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18042  15A1  0020               	movlb	0	; select bank0
 18043  15A2  0823               	movf	___ftpack@exp,w
 18044  15A3  1903               	btfsc	3,2
 18045  15A4  2DAA               	goto	l5753
 18046  15A5  0822               	movf	___ftpack@arg+2,w
 18047  15A6  0421               	iorwf	___ftpack@arg+1,w
 18048  15A7  0420               	iorwf	___ftpack@arg,w
 18049  15A8  1D03               	skipz
 18050  15A9  2DBB               	goto	l5759
 18051  15AA                     l5753:	
 18052  15AA  3000               	movlw	0
 18053  15AB  00A0               	movwf	?___ftpack
 18054  15AC  3000               	movlw	0
 18055  15AD  00A1               	movwf	?___ftpack+1
 18056  15AE  3000               	movlw	0
 18057  15AF  00A2               	movwf	?___ftpack+2
 18058  15B0  0008               	return
 18059  15B1                     l5757:	
 18060  15B1  3001               	movlw	1
 18061  15B2  00A5               	movwf	??___ftpack
 18062  15B3  0825               	movf	??___ftpack,w
 18063  15B4  07A3               	addwf	___ftpack@exp,f
 18064  15B5  3001               	movlw	1
 18065  15B6                     u4335:	
 18066  15B6  36A2               	lsrf	___ftpack@arg+2,f
 18067  15B7  0CA1               	rrf	___ftpack@arg+1,f
 18068  15B8  0CA0               	rrf	___ftpack@arg,f
 18069  15B9  0B89               	decfsz	9,f
 18070  15BA  2DB6               	goto	u4335
 18071  15BB                     l5759:	
 18072  15BB  30FE               	movlw	254
 18073  15BC  0522               	andwf	___ftpack@arg+2,w
 18074  15BD  1903               	btfsc	3,2
 18075  15BE  2DD4               	goto	l2857
 18076  15BF  2DB1               	goto	l5757
 18077  15C0                     l5761:	
 18078  15C0  3001               	movlw	1
 18079  15C1  00A5               	movwf	??___ftpack
 18080  15C2  0825               	movf	??___ftpack,w
 18081  15C3  07A3               	addwf	___ftpack@exp,f
 18082  15C4  3001               	movlw	1
 18083  15C5  07A0               	addwf	___ftpack@arg,f
 18084  15C6  3000               	movlw	0
 18085  15C7  1803               	skipnc
 18086  15C8  3001               	movlw	1
 18087  15C9  07A1               	addwf	___ftpack@arg+1,f
 18088  15CA  3000               	movlw	0
 18089  15CB  1803               	skipnc
 18090  15CC  3001               	movlw	1
 18091  15CD  07A2               	addwf	___ftpack@arg+2,f
 18092  15CE  3001               	movlw	1
 18093  15CF                     u4355:	
 18094  15CF  36A2               	lsrf	___ftpack@arg+2,f
 18095  15D0  0CA1               	rrf	___ftpack@arg+1,f
 18096  15D1  0CA0               	rrf	___ftpack@arg,f
 18097  15D2  0B89               	decfsz	9,f
 18098  15D3  2DCF               	goto	u4355
 18099  15D4                     l2857:	
 18100  15D4  30FF               	movlw	255
 18101  15D5  0522               	andwf	___ftpack@arg+2,w
 18102  15D6  1903               	btfsc	3,2
 18103  15D7  2DE1               	goto	l5769
 18104  15D8  2DC0               	goto	l5761
 18105  15D9                     l5767:	
 18106  15D9  3001               	movlw	1
 18107  15DA  02A3               	subwf	___ftpack@exp,f
 18108  15DB  3001               	movlw	1
 18109  15DC                     u4375:	
 18110  15DC  35A0               	lslf	___ftpack@arg,f
 18111  15DD  0DA1               	rlf	___ftpack@arg+1,f
 18112  15DE  0DA2               	rlf	___ftpack@arg+2,f
 18113  15DF  0B89               	decfsz	9,f
 18114  15E0  2DDC               	goto	u4375
 18115  15E1                     l5769:	
 18116  15E1  1FA1               	btfss	___ftpack@arg+1,7
 18117  15E2  2DD9               	goto	l5767
 18118  15E3  1823               	btfsc	___ftpack@exp,0
 18119  15E4  2DEB               	goto	l2863
 18120  15E5  30FF               	movlw	255
 18121  15E6  05A0               	andwf	___ftpack@arg,f
 18122  15E7  307F               	movlw	127
 18123  15E8  05A1               	andwf	___ftpack@arg+1,f
 18124  15E9  30FF               	movlw	255
 18125  15EA  05A2               	andwf	___ftpack@arg+2,f
 18126  15EB                     l2863:	
 18127  15EB  1003               	clrc
 18128  15EC  0CA3               	rrf	___ftpack@exp,f
 18129  15ED  0823               	movf	___ftpack@exp,w
 18130  15EE  00A5               	movwf	??___ftpack
 18131  15EF  01A6               	clrf	??___ftpack+1
 18132  15F0  01A7               	clrf	??___ftpack+2
 18133  15F1  3010               	movlw	16
 18134  15F2                     u4405:	
 18135  15F2  35A5               	lslf	??___ftpack,f
 18136  15F3  0DA6               	rlf	??___ftpack+1,f
 18137  15F4  0DA7               	rlf	??___ftpack+2,f
 18138  15F5  0B89               	decfsz	9,f
 18139  15F6  2DF2               	goto	u4405
 18140  15F7  0825               	movf	??___ftpack,w
 18141  15F8  04A0               	iorwf	___ftpack@arg,f
 18142  15F9  0826               	movf	??___ftpack+1,w
 18143  15FA  04A1               	iorwf	___ftpack@arg+1,f
 18144  15FB  0827               	movf	??___ftpack+2,w
 18145  15FC  04A2               	iorwf	___ftpack@arg+2,f
 18146  15FD  0824               	movf	___ftpack@sign,w
 18147  15FE  1903               	btfsc	3,2
 18148  15FF  0008               	return
 18149  1600  17A2               	bsf	___ftpack@arg+2,7
 18150  1601  0008               	return
 18151  1602                     __end_of___ftpack:	
 18152                           
 18153                           	psect	text126
 18154  1BF4                     __ptext126:	
 18155 ;; *************** function _Division *****************
 18156 ;; Defined at:
 18157 ;;		line 1385 in file "../src/Dimmer_B1.c"
 18158 ;; Parameters:    Size  Location     Type
 18159 ;;  value           1    wreg     unsigned char 
 18160 ;;  num             1    5[BANK0 ] unsigned char 
 18161 ;; Auto vars:     Size  Location     Type
 18162 ;;  value           1    8[BANK0 ] unsigned char 
 18163 ;;  result          1    9[BANK0 ] unsigned char 
 18164 ;; Return value:  Size  Location     Type
 18165 ;;                  1    wreg      unsigned char 
 18166 ;; Registers used:
 18167 ;;		wreg, status,2, status,0, pclath, cstack
 18168 ;; Tracked objects:
 18169 ;;		On entry : 0/0
 18170 ;;		On exit  : 0/0
 18171 ;;		Unchanged: 0/0
 18172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18173 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18174 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18175 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18176 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18177 ;;Total ram usage:        5 bytes
 18178 ;; Hardware stack levels used:    1
 18179 ;; Hardware stack levels required when called:    6
 18180 ;; This function calls:
 18181 ;;		___lbdiv
 18182 ;; This function is called by:
 18183 ;;		_DimmerIntr_Initialization
 18184 ;; This function uses a non-reentrant model
 18185 ;;
 18186                           
 18187                           
 18188                           ;psect for function _Division
 18189  1BF4                     _Division:	
 18190                           
 18191                           ;incstack = 0
 18192                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 18193                           ;Division@value stored from wreg
 18194  1BF4  0020               	movlb	0	; select bank0
 18195  1BF5  00A8               	movwf	Division@value
 18196                           
 18197                           ;Dimmer_B1.c: 1386: char result = (char) (value / num);
 18198  1BF6  0825               	movf	Division@num,w
 18199  1BF7  00A6               	movwf	??_Division
 18200  1BF8  0826               	movf	??_Division,w
 18201  1BF9  00A0               	movwf	___lbdiv@divisor
 18202  1BFA  0828               	movf	Division@value,w
 18203  1BFB  319F  27DE         	fcall	___lbdiv
 18204  1BFD  0020               	movlb	0	; select bank0
 18205  1BFE  00A7               	movwf	??_Division+1
 18206  1BFF  0827               	movf	??_Division+1,w
 18207  1C00  00A9               	movwf	Division@result
 18208                           
 18209                           ;Dimmer_B1.c: 1387: return result;
 18210  1C01  0829               	movf	Division@result,w
 18211  1C02  0008               	return
 18212  1C03                     __end_of_Division:	
 18213                           
 18214                           	psect	text127
 18215  1FDE                     __ptext127:	
 18216 ;; *************** function ___lbdiv *****************
 18217 ;; Defined at:
 18218 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 18219 ;; Parameters:    Size  Location     Type
 18220 ;;  dividend        1    wreg     unsigned char 
 18221 ;;  divisor         1    0[BANK0 ] unsigned char 
 18222 ;; Auto vars:     Size  Location     Type
 18223 ;;  dividend        1    2[BANK0 ] unsigned char 
 18224 ;;  quotient        1    4[BANK0 ] unsigned char 
 18225 ;;  counter         1    3[BANK0 ] unsigned char 
 18226 ;; Return value:  Size  Location     Type
 18227 ;;                  1    wreg      unsigned char 
 18228 ;; Registers used:
 18229 ;;		wreg, status,2, status,0
 18230 ;; Tracked objects:
 18231 ;;		On entry : 0/0
 18232 ;;		On exit  : 0/0
 18233 ;;		Unchanged: 0/0
 18234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18235 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18236 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18239 ;;Total ram usage:        5 bytes
 18240 ;; Hardware stack levels used:    1
 18241 ;; Hardware stack levels required when called:    5
 18242 ;; This function calls:
 18243 ;;		Nothing
 18244 ;; This function is called by:
 18245 ;;		_Division
 18246 ;; This function uses a non-reentrant model
 18247 ;;
 18248                           
 18249                           
 18250                           ;psect for function ___lbdiv
 18251  1FDE                     ___lbdiv:	
 18252                           
 18253                           ;incstack = 0
 18254                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 18255                           ;___lbdiv@dividend stored from wreg
 18256  1FDE  0020               	movlb	0	; select bank0
 18257  1FDF  00A2               	movwf	___lbdiv@dividend
 18258  1FE0  01A4               	clrf	___lbdiv@quotient
 18259  1FE1  0820               	movf	___lbdiv@divisor,w
 18260  1FE2  1903               	btfsc	3,2
 18261  1FE3  2FFE               	goto	l6709
 18262  1FE4  01A3               	clrf	___lbdiv@counter
 18263  1FE5  0AA3               	incf	___lbdiv@counter,f
 18264  1FE6                     l6697:	
 18265  1FE6  1BA0               	btfsc	___lbdiv@divisor,7
 18266  1FE7  2FEF               	goto	l6699
 18267  1FE8  1003               	clrc
 18268  1FE9  0DA0               	rlf	___lbdiv@divisor,f
 18269  1FEA  3001               	movlw	1
 18270  1FEB  00A1               	movwf	??___lbdiv
 18271  1FEC  0821               	movf	??___lbdiv,w
 18272  1FED  07A3               	addwf	___lbdiv@counter,f
 18273  1FEE  2FE6               	goto	l6697
 18274  1FEF                     l6699:	
 18275  1FEF  1003               	clrc
 18276  1FF0  0DA4               	rlf	___lbdiv@quotient,f
 18277  1FF1  0820               	movf	___lbdiv@divisor,w
 18278  1FF2  0222               	subwf	___lbdiv@dividend,w
 18279  1FF3  1C03               	skipc
 18280  1FF4  2FF9               	goto	L10
 18281  1FF5  0820               	movf	___lbdiv@divisor,w
 18282  1FF6  02A2               	subwf	___lbdiv@dividend,f
 18283  1FF7  1424               	bsf	___lbdiv@quotient,0
 18284  1FF8  1003               	clrc
 18285  1FF9                     L10:	
 18286  1FF9  0CA0               	rrf	___lbdiv@divisor,f
 18287  1FFA  3001               	movlw	1
 18288  1FFB  02A3               	subwf	___lbdiv@counter,f
 18289  1FFC  1D03               	btfss	3,2
 18290  1FFD  2FEF               	goto	l6699
 18291  1FFE                     l6709:	
 18292  1FFE  0824               	movf	___lbdiv@quotient,w
 18293  1FFF  0008               	return
 18294  2000                     __end_of___lbdiv:	
 18295                           
 18296                           	psect	text128
 18297  1A98                     __ptext128:	
 18298 ;; *************** function _DelayOff_Main *****************
 18299 ;; Defined at:
 18300 ;;		line 41 in file "../src/DelayOff_B1.c"
 18301 ;; Parameters:    Size  Location     Type
 18302 ;;		None
 18303 ;; Auto vars:     Size  Location     Type
 18304 ;;		None
 18305 ;; Return value:  Size  Location     Type
 18306 ;;		None               void
 18307 ;; Registers used:
 18308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18309 ;; Tracked objects:
 18310 ;;		On entry : 0/0
 18311 ;;		On exit  : 0/0
 18312 ;;		Unchanged: 0/0
 18313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18318 ;;Total ram usage:        0 bytes
 18319 ;; Hardware stack levels used:    1
 18320 ;; Hardware stack levels required when called:    9
 18321 ;; This function calls:
 18322 ;;		_DlyOff_Main
 18323 ;; This function is called by:
 18324 ;;		_main
 18325 ;; This function uses a non-reentrant model
 18326 ;;
 18327                           
 18328                           
 18329                           ;psect for function _DelayOff_Main
 18330  1A98                     _DelayOff_Main:	
 18331                           
 18332                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18333                           
 18334                           ;incstack = 0
 18335                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18336  1A98  3001               	movlw	1
 18337  1A99  3189  211E         	fcall	_DlyOff_Main
 18338  1A9B  0008               	return
 18339  1A9C                     __end_of_DelayOff_Main:	
 18340                           
 18341                           	psect	text129
 18342  091E                     __ptext129:	
 18343 ;; *************** function _DlyOff_Main *****************
 18344 ;; Defined at:
 18345 ;;		line 61 in file "../src/DelayOff_B1.c"
 18346 ;; Parameters:    Size  Location     Type
 18347 ;;  sw              1    wreg     unsigned char 
 18348 ;; Auto vars:     Size  Location     Type
 18349 ;;  sw              1   71[BANK0 ] unsigned char 
 18350 ;; Return value:  Size  Location     Type
 18351 ;;		None               void
 18352 ;; Registers used:
 18353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18354 ;; Tracked objects:
 18355 ;;		On entry : 0/0
 18356 ;;		On exit  : 0/0
 18357 ;;		Unchanged: 0/0
 18358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18361 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18362 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18363 ;;Total ram usage:        3 bytes
 18364 ;; Hardware stack levels used:    1
 18365 ;; Hardware stack levels required when called:    8
 18366 ;; This function calls:
 18367 ;;		_DelayOffPointSelect
 18368 ;;		_getDimmerLights_Status
 18369 ;;		_setDimmerLights_SwOff
 18370 ;;		_setDimmerLights_SwOn
 18371 ;;		_setProductData
 18372 ;; This function is called by:
 18373 ;;		_DelayOff_Main
 18374 ;; This function uses a non-reentrant model
 18375 ;;
 18376                           
 18377                           
 18378                           ;psect for function _DlyOff_Main
 18379  091E                     _DlyOff_Main:	
 18380                           
 18381                           ;incstack = 0
 18382                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18383                           ;DlyOff_Main@sw stored from wreg
 18384  091E  0020               	movlb	0	; select bank0
 18385  091F  00E7               	movwf	DlyOff_Main@sw
 18386                           
 18387                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18388  0920  0867               	movf	DlyOff_Main@sw,w
 18389  0921  319B  2357  3189   	fcall	_DelayOffPointSelect
 18390                           
 18391                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18392  0924  0021               	movlb	1	; select bank1
 18393  0925  084A               	movf	_DelayOff^(0+128),w
 18394  0926  0086               	movwf	6
 18395  0927  3001               	movlw	1	; select bank2/3
 18396  0928  0087               	movwf	7
 18397  0929  1C81               	btfss	1,1
 18398  092A  0008               	return
 18399                           
 18400                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18401  092B  084A               	movf	_DelayOff^(0+128),w
 18402  092C  3E02               	addlw	2
 18403  092D  0086               	movwf	6
 18404  092E  3001               	movlw	1	; select bank2/3
 18405  092F  0087               	movwf	7
 18406  0930  3001               	movlw	1
 18407  0931  0781               	addwf	1,f
 18408  0932  3141               	addfsr 1,1
 18409  0933  1803               	skipnc
 18410  0934  0A81               	incf	1,f
 18411                           
 18412                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18413  0935  084A               	movf	_DelayOff^(0+128),w
 18414  0936  3E02               	addlw	2
 18415  0937  0086               	movwf	6
 18416  0938  3001               	movlw	1	; select bank2/3
 18417  0939  0087               	movwf	7
 18418  093A  3F40               	moviw [0]fsr1
 18419  093B  0020               	movlb	0	; select bank0
 18420  093C  00E5               	movwf	??_DlyOff_Main
 18421  093D  3F41               	moviw [1]fsr1
 18422  093E  00E6               	movwf	??_DlyOff_Main+1
 18423  093F  300B               	movlw	11
 18424  0940  0266               	subwf	??_DlyOff_Main+1,w
 18425  0941  30B8               	movlw	184
 18426  0942  1903               	skipnz
 18427  0943  0265               	subwf	??_DlyOff_Main,w
 18428  0944  1C03               	skipc
 18429  0945  0008               	return
 18430                           
 18431                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18432  0946  0021               	movlb	1	; select bank1
 18433  0947  084A               	movf	_DelayOff^(0+128),w
 18434  0948  3E02               	addlw	2
 18435  0949  0086               	movwf	6
 18436  094A  3001               	movlw	1	; select bank2/3
 18437  094B  0087               	movwf	7
 18438  094C  3000               	movlw	0
 18439  094D  3FC0               	movwi [0]fsr1
 18440  094E  3FC1               	movwi [1]fsr1
 18441                           
 18442                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18443  094F  3001               	movlw	1
 18444  0950  0020               	movlb	0	; select bank0
 18445  0951  00E5               	movwf	??_DlyOff_Main
 18446  0952  0021               	movlb	1	; select bank1
 18447  0953  084A               	movf	_DelayOff^(0+128),w
 18448  0954  3E04               	addlw	4
 18449  0955  0086               	movwf	6
 18450  0956  3001               	movlw	1	; select bank2/3
 18451  0957  0087               	movwf	7
 18452  0958  0020               	movlb	0	; select bank0
 18453  0959  0865               	movf	??_DlyOff_Main,w
 18454  095A  0781               	addwf	1,f
 18455                           
 18456                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18457  095B  0021               	movlb	1	; select bank1
 18458  095C  084A               	movf	_DelayOff^(0+128),w
 18459  095D  3E04               	addlw	4
 18460  095E  0086               	movwf	6
 18461  095F  3001               	movlw	1	; select bank2/3
 18462  0960  0087               	movwf	7
 18463  0961  0A4A               	incf	_DelayOff^(0+128),w
 18464  0962  0084               	movwf	4
 18465  0963  3001               	movlw	1	; select bank2/3
 18466  0964  0085               	movwf	5
 18467  0965  0800               	movf	0,w
 18468  0966  0201               	subwf	1,w
 18469  0967  1C03               	skipc
 18470  0968  0008               	return
 18471                           
 18472                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18473  0969  084A               	movf	_DelayOff^(0+128),w
 18474  096A  3E04               	addlw	4
 18475  096B  0086               	movwf	6
 18476  096C  3001               	movlw	1	; select bank2/3
 18477  096D  0087               	movwf	7
 18478  096E  0181               	clrf	1
 18479                           
 18480                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18481  096F  084A               	movf	_DelayOff^(0+128),w
 18482  0970  0086               	movwf	6
 18483  0971  3001               	movlw	1	; select bank2/3
 18484  0972  0087               	movwf	7
 18485  0973  1081               	bcf	1,1
 18486                           
 18487                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18488  0974  0020               	movlb	0	; select bank0
 18489  0975  0867               	movf	DlyOff_Main@sw,w
 18490  0976  319C  2422  3189   	fcall	_getDimmerLights_Status
 18491  0979  3A01               	xorlw	1
 18492  097A  1D03               	skipz
 18493  097B  2986               	goto	l531
 18494                           
 18495                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18496  097C  0020               	movlb	0	; select bank0
 18497  097D  0867               	movf	DlyOff_Main@sw,w
 18498  097E  3191  2193  3189   	fcall	_setDimmerLights_SwOn
 18499                           
 18500                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18501  0981  0020               	movlb	0	; select bank0
 18502  0982  0867               	movf	DlyOff_Main@sw,w
 18503  0983  3192  226D  3189   	fcall	_setDimmerLights_SwOff
 18504  0986                     l531:	
 18505                           
 18506                           ;DelayOff_B1.c: 78: }
 18507                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18508  0986  0020               	movlb	0	; select bank0
 18509  0987  01E2               	clrf	setProductData@value
 18510  0988  0867               	movf	DlyOff_Main@sw,w
 18511  0989  3E1A               	addlw	26
 18512  098A  319B  236F         	fcall	_setProductData
 18513  098C  0008               	return
 18514  098D                     __end_of_DlyOff_Main:	
 18515                           
 18516                           	psect	text130
 18517  1B6F                     __ptext130:	
 18518 ;; *************** function _setProductData *****************
 18519 ;; Defined at:
 18520 ;;		line 645 in file "../src/Main_B1.c"
 18521 ;; Parameters:    Size  Location     Type
 18522 ;;  address         1    wreg     unsigned char 
 18523 ;;  value           1   66[BANK0 ] unsigned char 
 18524 ;; Auto vars:     Size  Location     Type
 18525 ;;  address         1   68[BANK0 ] unsigned char 
 18526 ;; Return value:  Size  Location     Type
 18527 ;;		None               void
 18528 ;; Registers used:
 18529 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18530 ;; Tracked objects:
 18531 ;;		On entry : 0/0
 18532 ;;		On exit  : 0/0
 18533 ;;		Unchanged: 0/0
 18534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18535 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18538 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18539 ;;Total ram usage:        3 bytes
 18540 ;; Hardware stack levels used:    1
 18541 ;; Hardware stack levels required when called:    5
 18542 ;; This function calls:
 18543 ;;		Nothing
 18544 ;; This function is called by:
 18545 ;;		_DlyOff_Main
 18546 ;;		_setDelayOff_GO
 18547 ;;		_setDimmerLights_OnOff
 18548 ;;		_setDimmerLights_Dimming
 18549 ;;		_setTemp_Main
 18550 ;;		_setLog_Code
 18551 ;;		_setControl_Lights_Table
 18552 ;;		_setRFSW_AdjControl
 18553 ;;		_setRF_DimmerLights
 18554 ;; This function uses a non-reentrant model
 18555 ;;
 18556                           
 18557                           
 18558                           ;psect for function _setProductData
 18559  1B6F                     _setProductData:	
 18560                           
 18561                           ;incstack = 0
 18562                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18563                           ;setProductData@address stored from wreg
 18564  1B6F  0020               	movlb	0	; select bank0
 18565  1B70  00E4               	movwf	setProductData@address
 18566                           
 18567                           ;Main_B1.c: 646: _product.Data[address] = value;
 18568  1B71  0862               	movf	setProductData@value,w
 18569  1B72  00E3               	movwf	??_setProductData
 18570  1B73  0864               	movf	setProductData@address,w
 18571  1B74  3ECC               	addlw	__product& (0+255)
 18572  1B75  0086               	movwf	6
 18573  1B76  3001               	movlw	1	; select bank3/4
 18574  1B77  0087               	movwf	7
 18575  1B78  0863               	movf	??_setProductData,w
 18576  1B79  0081               	movwf	1
 18577  1B7A  0008               	return
 18578  1B7B                     __end_of_setProductData:	
 18579                           
 18580                           	psect	text131
 18581  1193                     __ptext131:	
 18582 ;; *************** function _setDimmerLights_SwOn *****************
 18583 ;; Defined at:
 18584 ;;		line 697 in file "../src/Dimmer_B1.c"
 18585 ;; Parameters:    Size  Location     Type
 18586 ;;  sw              1    wreg     unsigned char 
 18587 ;; Auto vars:     Size  Location     Type
 18588 ;;  sw              1   13[BANK0 ] unsigned char 
 18589 ;;  idle            1   14[BANK0 ] unsigned char 
 18590 ;; Return value:  Size  Location     Type
 18591 ;;		None               void
 18592 ;; Registers used:
 18593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18594 ;; Tracked objects:
 18595 ;;		On entry : 0/0
 18596 ;;		On exit  : 0/0
 18597 ;;		Unchanged: 0/0
 18598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18600 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18602 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18603 ;;Total ram usage:        2 bytes
 18604 ;; Hardware stack levels used:    1
 18605 ;; Hardware stack levels required when called:    7
 18606 ;; This function calls:
 18607 ;;		_DimmerLights_SelectPointer
 18608 ;;		_setBuz
 18609 ;; This function is called by:
 18610 ;;		_DlyOff_Main
 18611 ;;		_setControl_Lights_Table
 18612 ;;		_setRFSW_Control
 18613 ;;		_setRFSW_AdjControl
 18614 ;;		_setSw_Main
 18615 ;; This function uses a non-reentrant model
 18616 ;;
 18617                           
 18618                           
 18619                           ;psect for function _setDimmerLights_SwOn
 18620  1193                     _setDimmerLights_SwOn:	
 18621                           
 18622                           ;incstack = 0
 18623                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18624                           ;setDimmerLights_SwOn@sw stored from wreg
 18625  1193  0020               	movlb	0	; select bank0
 18626  1194  00AD               	movwf	setDimmerLights_SwOn@sw
 18627                           
 18628                           ;Dimmer_B1.c: 698: char idle = 0;
 18629  1195  01AE               	clrf	setDimmerLights_SwOn@idle
 18630                           
 18631                           ;Dimmer_B1.c: 723: DimmerLights_SelectPointer(sw);
 18632  1196  082D               	movf	setDimmerLights_SwOn@sw,w
 18633  1197  319B  2363  3191   	fcall	_DimmerLights_SelectPointer
 18634                           
 18635                           ;Dimmer_B1.c: 724: if (idle == 0) {
 18636  119A  0020               	movlb	0	; select bank0
 18637  119B  08AE               	movf	setDimmerLights_SwOn@idle,f
 18638  119C  1D03               	skipz
 18639  119D  0008               	return
 18640                           
 18641                           ;Dimmer_B1.c: 726: DimmerLights->SwFlag = 1;
 18642  119E  0021               	movlb	1	; select bank1
 18643  119F  084C               	movf	_DimmerLights^(0+128),w
 18644  11A0  0086               	movwf	6
 18645  11A1  3001               	movlw	1	; select bank2/3
 18646  11A2  0087               	movwf	7
 18647  11A3  1401               	bsf	1,0
 18648                           
 18649                           ;Dimmer_B1.c: 727: if (DimmerLights->Status == 0) {
 18650  11A4  0A4C               	incf	_DimmerLights^(0+128),w
 18651  11A5  0086               	movwf	6
 18652  11A6  3001               	movlw	1	; select bank2/3
 18653  11A7  0087               	movwf	7
 18654  11A8  1801               	btfsc	1,0
 18655  11A9  29BA               	goto	l6149
 18656                           
 18657                           ;Dimmer_B1.c: 728: DimmerLights->Status = 1;
 18658  11AA  0A4C               	incf	_DimmerLights^(0+128),w
 18659  11AB  0086               	movwf	6
 18660  11AC  3001               	movlw	1	; select bank2/3
 18661  11AD  0087               	movwf	7
 18662  11AE  1401               	bsf	1,0
 18663                           
 18664                           ;Dimmer_B1.c: 729: DimmerLights->Trigger = 1;
 18665  11AF  084C               	movf	_DimmerLights^(0+128),w
 18666  11B0  0086               	movwf	6
 18667  11B1  3001               	movlw	1	; select bank2/3
 18668  11B2  0087               	movwf	7
 18669  11B3  1481               	bsf	1,1
 18670                           
 18671                           ;Dimmer_B1.c: 730: DimmerLights->Switch = 1;
 18672  11B4  084C               	movf	_DimmerLights^(0+128),w
 18673  11B5  0086               	movwf	6
 18674  11B6  3001               	movlw	1	; select bank2/3
 18675  11B7  0087               	movwf	7
 18676  11B8  1501               	bsf	1,2
 18677                           
 18678                           ;Dimmer_B1.c: 731: } else {
 18679  11B9  29BF               	goto	l6151
 18680  11BA                     l6149:	
 18681                           
 18682                           ;Dimmer_B1.c: 732: DimmerLights->Status = 0;
 18683  11BA  0A4C               	incf	_DimmerLights^(0+128),w
 18684  11BB  0086               	movwf	6
 18685  11BC  3001               	movlw	1	; select bank2/3
 18686  11BD  0087               	movwf	7
 18687  11BE  1001               	bcf	1,0
 18688  11BF                     l6151:	
 18689                           
 18690                           ;Dimmer_B1.c: 733: }
 18691                           ;Dimmer_B1.c: 734: setBuz(1, 100);
 18692  11BF  3064               	movlw	100
 18693  11C0  0020               	movlb	0	; select bank0
 18694  11C1  00A9               	movwf	setBuz@time
 18695  11C2  3000               	movlw	0
 18696  11C3  00AA               	movwf	setBuz@time+1
 18697  11C4  3001               	movlw	1
 18698  11C5  3194  2490         	fcall	_setBuz
 18699  11C7  0008               	return
 18700  11C8                     __end_of_setDimmerLights_SwOn:	
 18701                           
 18702                           	psect	text132
 18703  1490                     __ptext132:	
 18704 ;; *************** function _setBuz *****************
 18705 ;; Defined at:
 18706 ;;		line 22 in file "../src/Buzzer_B1.c"
 18707 ;; Parameters:    Size  Location     Type
 18708 ;;  count           1    wreg     unsigned char 
 18709 ;;  time            2    9[BANK0 ] int 
 18710 ;; Auto vars:     Size  Location     Type
 18711 ;;  count           1   12[BANK0 ] unsigned char 
 18712 ;; Return value:  Size  Location     Type
 18713 ;;		None               void
 18714 ;; Registers used:
 18715 ;;		wreg, status,2, status,0, pclath, cstack
 18716 ;; Tracked objects:
 18717 ;;		On entry : 0/0
 18718 ;;		On exit  : 0/0
 18719 ;;		Unchanged: 0/0
 18720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18721 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18724 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18725 ;;Total ram usage:        4 bytes
 18726 ;; Hardware stack levels used:    1
 18727 ;; Hardware stack levels required when called:    6
 18728 ;; This function calls:
 18729 ;;		___awdiv
 18730 ;; This function is called by:
 18731 ;;		_setDimmerLights_SwOn
 18732 ;;		_setDimmerLights_Dimming
 18733 ;;		_my_MainTimer
 18734 ;;		_Exception_Main
 18735 ;;		_setTemp_Main
 18736 ;;		_setLog_Code
 18737 ;;		_setRFSW_Control
 18738 ;;		_setSw_Main
 18739 ;; This function uses a non-reentrant model
 18740 ;;
 18741                           
 18742                           
 18743                           ;psect for function _setBuz
 18744  1490                     _setBuz:	
 18745                           
 18746                           ;incstack = 0
 18747                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18748                           ;setBuz@count stored from wreg
 18749  1490  0020               	movlb	0	; select bank0
 18750  1491  00AC               	movwf	setBuz@count
 18751                           
 18752                           ;Buzzer_B1.c: 23: time /= 20;
 18753  1492  3014               	movlw	20
 18754  1493  00A0               	movwf	___awdiv@divisor
 18755  1494  3000               	movlw	0
 18756  1495  00A1               	movwf	___awdiv@divisor+1
 18757  1496  082A               	movf	setBuz@time+1,w
 18758  1497  01A3               	clrf	___awdiv@dividend+1
 18759  1498  07A3               	addwf	___awdiv@dividend+1,f
 18760  1499  0829               	movf	setBuz@time,w
 18761  149A  01A2               	clrf	___awdiv@dividend
 18762  149B  07A2               	addwf	___awdiv@dividend,f
 18763  149C  3193  23E6  3194   	fcall	___awdiv
 18764  149F  0020               	movlb	0	; select bank0
 18765  14A0  0821               	movf	?___awdiv+1,w
 18766  14A1  01AA               	clrf	setBuz@time+1
 18767  14A2  07AA               	addwf	setBuz@time+1,f
 18768  14A3  0820               	movf	?___awdiv,w
 18769  14A4  01A9               	clrf	setBuz@time
 18770  14A5  07A9               	addwf	setBuz@time,f
 18771                           
 18772                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18773  14A6  0022               	movlb	2	; select bank2
 18774  14A7  1C20               	btfss	_Buz1^(0+256),0
 18775  14A8  0008               	return
 18776                           
 18777                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18778  14A9  18A0               	btfsc	_Buz1^(0+256),1
 18779  14AA  2CC1               	goto	l86
 18780                           
 18781                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18782  14AB  14A0               	bsf	_Buz1^(0+256),1
 18783                           
 18784                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18785  14AC  01A1               	clrf	(_Buz1^(0+256)+1)
 18786  14AD  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18787                           
 18788                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18789  14AE  0020               	movlb	0	; select bank0
 18790  14AF  082C               	movf	setBuz@count,w
 18791  14B0  00AB               	movwf	??_setBuz
 18792  14B1  082B               	movf	??_setBuz,w
 18793  14B2  0022               	movlb	2	; select bank2
 18794  14B3  00A3               	movwf	(_Buz1^(0+256)+3)
 18795                           
 18796                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18797  14B4  0020               	movlb	0	; select bank0
 18798  14B5  082A               	movf	setBuz@time+1,w
 18799  14B6  0022               	movlb	2	; select bank2
 18800  14B7  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18801  14B8  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18802  14B9  0020               	movlb	0	; select bank0
 18803  14BA  0829               	movf	setBuz@time,w
 18804  14BB  0022               	movlb	2	; select bank2
 18805  14BC  01A6               	clrf	(_Buz1^(0+256)+6)
 18806  14BD  07A6               	addwf	(_Buz1^(0+256)+6),f
 18807                           
 18808                           ;Buzzer_B1.c: 30: RB3 = 1;
 18809  14BE  0020               	movlb	0	; select bank0
 18810  14BF  158D               	bsf	13,3	;volatile
 18811                           
 18812                           ;Buzzer_B1.c: 31: } else {
 18813  14C0  0008               	return
 18814  14C1                     l86:	
 18815                           
 18816                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18817  14C1  19A0               	btfsc	_Buz1^(0+256),3
 18818  14C2  2CD5               	goto	l88
 18819                           
 18820                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18821  14C3  15A0               	bsf	_Buz1^(0+256),3
 18822                           
 18823                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18824  14C4  0020               	movlb	0	; select bank0
 18825  14C5  082C               	movf	setBuz@count,w
 18826  14C6  00AB               	movwf	??_setBuz
 18827  14C7  082B               	movf	??_setBuz,w
 18828  14C8  0022               	movlb	2	; select bank2
 18829  14C9  00A4               	movwf	(_Buz1^(0+256)+4)
 18830                           
 18831                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18832  14CA  0020               	movlb	0	; select bank0
 18833  14CB  082A               	movf	setBuz@time+1,w
 18834  14CC  0022               	movlb	2	; select bank2
 18835  14CD  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 18836  14CE  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 18837  14CF  0020               	movlb	0	; select bank0
 18838  14D0  0829               	movf	setBuz@time,w
 18839  14D1  0022               	movlb	2	; select bank2
 18840  14D2  01A8               	clrf	(_Buz1^(0+256)+8)
 18841  14D3  07A8               	addwf	(_Buz1^(0+256)+8),f
 18842                           
 18843                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18844  14D4  0008               	return
 18845  14D5                     l88:	
 18846  14D5  1A20               	btfsc	_Buz1^(0+256),4
 18847  14D6  0008               	return
 18848                           
 18849                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18850  14D7  1620               	bsf	_Buz1^(0+256),4
 18851                           
 18852                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18853  14D8  0020               	movlb	0	; select bank0
 18854  14D9  082C               	movf	setBuz@count,w
 18855  14DA  00AB               	movwf	??_setBuz
 18856  14DB  082B               	movf	??_setBuz,w
 18857  14DC  0022               	movlb	2	; select bank2
 18858  14DD  00A5               	movwf	(_Buz1^(0+256)+5)
 18859                           
 18860                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18861  14DE  0020               	movlb	0	; select bank0
 18862  14DF  082A               	movf	setBuz@time+1,w
 18863  14E0  0022               	movlb	2	; select bank2
 18864  14E1  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 18865  14E2  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 18866  14E3  0020               	movlb	0	; select bank0
 18867  14E4  0829               	movf	setBuz@time,w
 18868  14E5  0022               	movlb	2	; select bank2
 18869  14E6  01AA               	clrf	(_Buz1^(0+256)+10)
 18870  14E7  07AA               	addwf	(_Buz1^(0+256)+10),f
 18871  14E8  0008               	return
 18872  14E9                     __end_of_setBuz:	
 18873                           
 18874                           	psect	text133
 18875  13E6                     __ptext133:	
 18876 ;; *************** function ___awdiv *****************
 18877 ;; Defined at:
 18878 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18879 ;; Parameters:    Size  Location     Type
 18880 ;;  divisor         2    0[BANK0 ] int 
 18881 ;;  dividend        2    2[BANK0 ] int 
 18882 ;; Auto vars:     Size  Location     Type
 18883 ;;  quotient        2    7[BANK0 ] int 
 18884 ;;  sign            1    6[BANK0 ] unsigned char 
 18885 ;;  counter         1    5[BANK0 ] unsigned char 
 18886 ;; Return value:  Size  Location     Type
 18887 ;;                  2    0[BANK0 ] int 
 18888 ;; Registers used:
 18889 ;;		wreg, status,2, status,0
 18890 ;; Tracked objects:
 18891 ;;		On entry : 0/0
 18892 ;;		On exit  : 0/0
 18893 ;;		Unchanged: 0/0
 18894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18895 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18896 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18898 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18899 ;;Total ram usage:        9 bytes
 18900 ;; Hardware stack levels used:    1
 18901 ;; Hardware stack levels required when called:    5
 18902 ;; This function calls:
 18903 ;;		Nothing
 18904 ;; This function is called by:
 18905 ;;		_setBuz
 18906 ;; This function uses a non-reentrant model
 18907 ;;
 18908                           
 18909                           
 18910                           ;psect for function ___awdiv
 18911  13E6                     ___awdiv:	
 18912                           
 18913                           ;incstack = 0
 18914                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18915  13E6  0020               	movlb	0	; select bank0
 18916  13E7  01A6               	clrf	___awdiv@sign
 18917  13E8  1FA1               	btfss	___awdiv@divisor+1,7
 18918  13E9  2BF1               	goto	l5787
 18919  13EA  09A0               	comf	___awdiv@divisor,f
 18920  13EB  09A1               	comf	___awdiv@divisor+1,f
 18921  13EC  0AA0               	incf	___awdiv@divisor,f
 18922  13ED  1903               	skipnz
 18923  13EE  0AA1               	incf	___awdiv@divisor+1,f
 18924  13EF  01A6               	clrf	___awdiv@sign
 18925  13F0  0AA6               	incf	___awdiv@sign,f
 18926  13F1                     l5787:	
 18927  13F1  1FA3               	btfss	___awdiv@dividend+1,7
 18928  13F2  2BFC               	goto	l5793
 18929  13F3  09A2               	comf	___awdiv@dividend,f
 18930  13F4  09A3               	comf	___awdiv@dividend+1,f
 18931  13F5  0AA2               	incf	___awdiv@dividend,f
 18932  13F6  1903               	skipnz
 18933  13F7  0AA3               	incf	___awdiv@dividend+1,f
 18934  13F8  3001               	movlw	1
 18935  13F9  00A4               	movwf	??___awdiv
 18936  13FA  0824               	movf	??___awdiv,w
 18937  13FB  06A6               	xorwf	___awdiv@sign,f
 18938  13FC                     l5793:	
 18939  13FC  01A7               	clrf	___awdiv@quotient
 18940  13FD  01A8               	clrf	___awdiv@quotient+1
 18941  13FE  0821               	movf	___awdiv@divisor+1,w
 18942  13FF  0420               	iorwf	___awdiv@divisor,w
 18943  1400  1903               	skipnz
 18944  1401  2C2B               	goto	l5815
 18945  1402  01A5               	clrf	___awdiv@counter
 18946  1403  0AA5               	incf	___awdiv@counter,f
 18947  1404                     l5803:	
 18948  1404  1BA1               	btfsc	___awdiv@divisor+1,7
 18949  1405  2C10               	goto	l5805
 18950  1406  3001               	movlw	1
 18951  1407                     u4455:	
 18952  1407  35A0               	lslf	___awdiv@divisor,f
 18953  1408  0DA1               	rlf	___awdiv@divisor+1,f
 18954  1409  0B89               	decfsz	9,f
 18955  140A  2C07               	goto	u4455
 18956  140B  3001               	movlw	1
 18957  140C  00A4               	movwf	??___awdiv
 18958  140D  0824               	movf	??___awdiv,w
 18959  140E  07A5               	addwf	___awdiv@counter,f
 18960  140F  2C04               	goto	l5803
 18961  1410                     l5805:	
 18962  1410  3001               	movlw	1
 18963  1411                     u4475:	
 18964  1411  35A7               	lslf	___awdiv@quotient,f
 18965  1412  0DA8               	rlf	___awdiv@quotient+1,f
 18966  1413  0B89               	decfsz	9,f
 18967  1414  2C11               	goto	u4475
 18968  1415  0821               	movf	___awdiv@divisor+1,w
 18969  1416  0223               	subwf	___awdiv@dividend+1,w
 18970  1417  1D03               	skipz
 18971  1418  2C1B               	goto	u4485
 18972  1419  0820               	movf	___awdiv@divisor,w
 18973  141A  0222               	subwf	___awdiv@dividend,w
 18974  141B                     u4485:	
 18975  141B  1C03               	skipc
 18976  141C  2C22               	goto	l5811
 18977  141D  0820               	movf	___awdiv@divisor,w
 18978  141E  02A2               	subwf	___awdiv@dividend,f
 18979  141F  0821               	movf	___awdiv@divisor+1,w
 18980  1420  3BA3               	subwfb	___awdiv@dividend+1,f
 18981  1421  1427               	bsf	___awdiv@quotient,0
 18982  1422                     l5811:	
 18983  1422  3001               	movlw	1
 18984  1423                     u4495:	
 18985  1423  36A1               	lsrf	___awdiv@divisor+1,f
 18986  1424  0CA0               	rrf	___awdiv@divisor,f
 18987  1425  0B89               	decfsz	9,f
 18988  1426  2C23               	goto	u4495
 18989  1427  3001               	movlw	1
 18990  1428  02A5               	subwf	___awdiv@counter,f
 18991  1429  1D03               	btfss	3,2
 18992  142A  2C10               	goto	l5805
 18993  142B                     l5815:	
 18994  142B  0826               	movf	___awdiv@sign,w
 18995  142C  1903               	btfsc	3,2
 18996  142D  2C33               	goto	l5819
 18997  142E  09A7               	comf	___awdiv@quotient,f
 18998  142F  09A8               	comf	___awdiv@quotient+1,f
 18999  1430  0AA7               	incf	___awdiv@quotient,f
 19000  1431  1903               	skipnz
 19001  1432  0AA8               	incf	___awdiv@quotient+1,f
 19002  1433                     l5819:	
 19003  1433  0828               	movf	___awdiv@quotient+1,w
 19004  1434  01A1               	clrf	?___awdiv+1
 19005  1435  07A1               	addwf	?___awdiv+1,f
 19006  1436  0827               	movf	___awdiv@quotient,w
 19007  1437  01A0               	clrf	?___awdiv
 19008  1438  07A0               	addwf	?___awdiv,f
 19009  1439  0008               	return
 19010  143A                     __end_of___awdiv:	
 19011                           
 19012                           	psect	text134
 19013  126D                     __ptext134:	
 19014 ;; *************** function _setDimmerLights_SwOff *****************
 19015 ;; Defined at:
 19016 ;;		line 739 in file "../src/Dimmer_B1.c"
 19017 ;; Parameters:    Size  Location     Type
 19018 ;;  sw              1    wreg     unsigned char 
 19019 ;; Auto vars:     Size  Location     Type
 19020 ;;  sw              1    2[BANK0 ] unsigned char 
 19021 ;; Return value:  Size  Location     Type
 19022 ;;		None               void
 19023 ;; Registers used:
 19024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19025 ;; Tracked objects:
 19026 ;;		On entry : 0/0
 19027 ;;		On exit  : 0/0
 19028 ;;		Unchanged: 0/0
 19029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19033 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19034 ;;Total ram usage:        1 bytes
 19035 ;; Hardware stack levels used:    1
 19036 ;; Hardware stack levels required when called:    6
 19037 ;; This function calls:
 19038 ;;		_DimmerLights_SelectPointer
 19039 ;; This function is called by:
 19040 ;;		_DlyOff_Main
 19041 ;;		_Exception_Main
 19042 ;;		_setControl_Lights_Table
 19043 ;;		_setRFSW_Control
 19044 ;;		_setRFSW_AdjControl
 19045 ;;		_setSw_Main
 19046 ;; This function uses a non-reentrant model
 19047 ;;
 19048                           
 19049                           
 19050                           ;psect for function _setDimmerLights_SwOff
 19051  126D                     _setDimmerLights_SwOff:	
 19052                           
 19053                           ;incstack = 0
 19054                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19055                           ;setDimmerLights_SwOff@sw stored from wreg
 19056  126D  0020               	movlb	0	; select bank0
 19057  126E  00A2               	movwf	setDimmerLights_SwOff@sw
 19058                           
 19059                           ;Dimmer_B1.c: 740: DimmerLights_SelectPointer(sw);
 19060  126F  0822               	movf	setDimmerLights_SwOff@sw,w
 19061  1270  319B  2363  3192   	fcall	_DimmerLights_SelectPointer
 19062                           
 19063                           ;Dimmer_B1.c: 742: if (DimmerLights->SwFlag == 1) {
 19064  1273  0021               	movlb	1	; select bank1
 19065  1274  084C               	movf	_DimmerLights^(0+128),w
 19066  1275  0086               	movwf	6
 19067  1276  3001               	movlw	1	; select bank2/3
 19068  1277  0087               	movwf	7
 19069  1278  1C01               	btfss	1,0
 19070  1279  0008               	return
 19071                           
 19072                           ;Dimmer_B1.c: 743: DimmerLights->SwFlag = 0;
 19073  127A  084C               	movf	_DimmerLights^(0+128),w
 19074  127B  0086               	movwf	6
 19075  127C  3001               	movlw	1	; select bank2/3
 19076  127D  0087               	movwf	7
 19077  127E  1001               	bcf	1,0
 19078                           
 19079                           ;Dimmer_B1.c: 744: if (DimmerLights->Status == 1) {
 19080  127F  0A4C               	incf	_DimmerLights^(0+128),w
 19081  1280  0086               	movwf	6
 19082  1281  3001               	movlw	1	; select bank2/3
 19083  1282  0087               	movwf	7
 19084  1283  1C01               	btfss	1,0
 19085  1284  2A9B               	goto	l6163
 19086                           
 19087                           ;Dimmer_B1.c: 745: if (DimmerLights->DimmingSwFlag == 1) {
 19088  1285  084C               	movf	_DimmerLights^(0+128),w
 19089  1286  0086               	movwf	6
 19090  1287  3001               	movlw	1	; select bank2/3
 19091  1288  0087               	movwf	7
 19092  1289  1D81               	btfss	1,3
 19093  128A  0008               	return
 19094                           
 19095                           ;Dimmer_B1.c: 746: DimmerLights->DimmingSwFlag = 0;
 19096  128B  084C               	movf	_DimmerLights^(0+128),w
 19097  128C  0086               	movwf	6
 19098  128D  3001               	movlw	1	; select bank2/3
 19099  128E  0087               	movwf	7
 19100  128F  1181               	bcf	1,3
 19101                           
 19102                           ;Dimmer_B1.c: 748: DimmerLights->DimmingTrigger = 1;
 19103  1290  084C               	movf	_DimmerLights^(0+128),w
 19104  1291  0086               	movwf	6
 19105  1292  3001               	movlw	1	; select bank2/3
 19106  1293  0087               	movwf	7
 19107  1294  1601               	bsf	1,4
 19108                           
 19109                           ;Dimmer_B1.c: 749: DimmerLights->DimmingSwitch = 0;
 19110  1295  084C               	movf	_DimmerLights^(0+128),w
 19111  1296  0086               	movwf	6
 19112  1297  3001               	movlw	1	; select bank2/3
 19113  1298  0087               	movwf	7
 19114  1299  1281               	bcf	1,5
 19115                           
 19116                           ;Dimmer_B1.c: 750: }
 19117                           ;Dimmer_B1.c: 751: } else {
 19118  129A  0008               	return
 19119  129B                     l6163:	
 19120                           
 19121                           ;Dimmer_B1.c: 753: DimmerLights->Trigger = 1;
 19122  129B  084C               	movf	_DimmerLights^(0+128),w
 19123  129C  0086               	movwf	6
 19124  129D  3001               	movlw	1	; select bank2/3
 19125  129E  0087               	movwf	7
 19126  129F  1481               	bsf	1,1
 19127                           
 19128                           ;Dimmer_B1.c: 754: DimmerLights->Switch = 0;
 19129  12A0  084C               	movf	_DimmerLights^(0+128),w
 19130  12A1  0086               	movwf	6
 19131  12A2  3001               	movlw	1	; select bank2/3
 19132  12A3  0087               	movwf	7
 19133  12A4  1101               	bcf	1,2
 19134  12A5  0008               	return
 19135  12A6                     __end_of_setDimmerLights_SwOff:	
 19136                           
 19137                           	psect	text135
 19138  1C22                     __ptext135:	
 19139 ;; *************** function _getDimmerLights_Status *****************
 19140 ;; Defined at:
 19141 ;;		line 1083 in file "../src/Dimmer_B1.c"
 19142 ;; Parameters:    Size  Location     Type
 19143 ;;  lights          1    wreg     unsigned char 
 19144 ;; Auto vars:     Size  Location     Type
 19145 ;;  lights          1    2[BANK0 ] unsigned char 
 19146 ;;  status          1    3[BANK0 ] unsigned char 
 19147 ;; Return value:  Size  Location     Type
 19148 ;;                  1    wreg      unsigned char 
 19149 ;; Registers used:
 19150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19151 ;; Tracked objects:
 19152 ;;		On entry : 0/0
 19153 ;;		On exit  : 0/0
 19154 ;;		Unchanged: 0/0
 19155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19157 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19159 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19160 ;;Total ram usage:        2 bytes
 19161 ;; Hardware stack levels used:    1
 19162 ;; Hardware stack levels required when called:    6
 19163 ;; This function calls:
 19164 ;;		_DimmerLights_SelectPointer
 19165 ;; This function is called by:
 19166 ;;		_DlyOff_Main
 19167 ;;		_Exception_Main
 19168 ;;		_setControl_Lights_Table
 19169 ;;		_setRFSW_Control
 19170 ;;		_setRFSW_AdjControl
 19171 ;;		_setRF_AdjControl
 19172 ;; This function uses a non-reentrant model
 19173 ;;
 19174                           
 19175                           
 19176                           ;psect for function _getDimmerLights_Status
 19177  1C22                     _getDimmerLights_Status:	
 19178                           
 19179                           ;incstack = 0
 19180                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19181                           ;getDimmerLights_Status@lights stored from wreg
 19182  1C22  0020               	movlb	0	; select bank0
 19183  1C23  00A2               	movwf	getDimmerLights_Status@lights
 19184                           
 19185                           ;Dimmer_B1.c: 1084: DimmerLights_SelectPointer(lights);
 19186  1C24  0822               	movf	getDimmerLights_Status@lights,w
 19187  1C25  319B  2363         	fcall	_DimmerLights_SelectPointer
 19188                           
 19189                           ;Dimmer_B1.c: 1085: char status = DimmerLights->Status == 1 ? 1 : 0;
 19190  1C27  0021               	movlb	1	; select bank1
 19191  1C28  0A4C               	incf	_DimmerLights^(0+128),w
 19192  1C29  0086               	movwf	6
 19193  1C2A  3001               	movlw	1	; select bank2/3
 19194  1C2B  0087               	movwf	7
 19195  1C2C  3000               	movlw	0
 19196  1C2D  1801               	btfsc	1,0
 19197  1C2E  3001               	movlw	1
 19198  1C2F  0020               	movlb	0	; select bank0
 19199  1C30  00A3               	movwf	getDimmerLights_Status@status
 19200                           
 19201                           ;Dimmer_B1.c: 1086: return status;
 19202  1C31  0823               	movf	getDimmerLights_Status@status,w
 19203  1C32  0008               	return
 19204  1C33                     __end_of_getDimmerLights_Status:	
 19205                           
 19206                           	psect	text136
 19207  1B63                     __ptext136:	
 19208 ;; *************** function _DimmerLights_SelectPointer *****************
 19209 ;; Defined at:
 19210 ;;		line 620 in file "../src/Dimmer_B1.c"
 19211 ;; Parameters:    Size  Location     Type
 19212 ;;  lights          1    wreg     unsigned char 
 19213 ;; Auto vars:     Size  Location     Type
 19214 ;;  lights          1    1[BANK0 ] unsigned char 
 19215 ;; Return value:  Size  Location     Type
 19216 ;;		None               void
 19217 ;; Registers used:
 19218 ;;		wreg
 19219 ;; Tracked objects:
 19220 ;;		On entry : 0/0
 19221 ;;		On exit  : 0/0
 19222 ;;		Unchanged: 0/0
 19223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19228 ;;Total ram usage:        2 bytes
 19229 ;; Hardware stack levels used:    1
 19230 ;; Hardware stack levels required when called:    5
 19231 ;; This function calls:
 19232 ;;		Nothing
 19233 ;; This function is called by:
 19234 ;;		_setDimmerLights_SwOn
 19235 ;;		_setDimmerLights_SwOff
 19236 ;;		_setDimmerLights_Main
 19237 ;;		_getDimmerLights_Status
 19238 ;;		_setDimmerLights_DimmingRun
 19239 ;;		_setRF_AdjControl
 19240 ;;		_setDimmerLights_DimmingOn
 19241 ;;		_setDimmerLights_Status
 19242 ;; This function uses a non-reentrant model
 19243 ;;
 19244                           
 19245                           
 19246                           ;psect for function _DimmerLights_SelectPointer
 19247  1B63                     _DimmerLights_SelectPointer:	
 19248                           
 19249                           ;incstack = 0
 19250                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19251                           ;DimmerLights_SelectPointer@lights stored from wreg
 19252  1B63  0020               	movlb	0	; select bank0
 19253  1B64  00A1               	movwf	DimmerLights_SelectPointer@lights
 19254                           
 19255                           ;Dimmer_B1.c: 622: if (lights == 1) {
 19256  1B65  0821               	movf	DimmerLights_SelectPointer@lights,w
 19257  1B66  3A01               	xorlw	1
 19258  1B67  1D03               	skipz
 19259  1B68  0008               	return
 19260                           
 19261                           ;Dimmer_B1.c: 623: DimmerLights = &DimmerLights1;
 19262  1B69  3060               	movlw	_DimmerLights1& (0+255)
 19263  1B6A  00A0               	movwf	??_DimmerLights_SelectPointer
 19264  1B6B  0820               	movf	??_DimmerLights_SelectPointer,w
 19265  1B6C  0021               	movlb	1	; select bank1
 19266  1B6D  00CC               	movwf	_DimmerLights^(0+128)
 19267  1B6E  0008               	return
 19268  1B6F                     __end_of_DimmerLights_SelectPointer:	
 19269                           
 19270                           	psect	text137
 19271  1A94                     __ptext137:	
 19272 ;; *************** function _DelayOff_Initialization *****************
 19273 ;; Defined at:
 19274 ;;		line 26 in file "../src/DelayOff_B1.c"
 19275 ;; Parameters:    Size  Location     Type
 19276 ;;		None
 19277 ;; Auto vars:     Size  Location     Type
 19278 ;;		None
 19279 ;; Return value:  Size  Location     Type
 19280 ;;		None               void
 19281 ;; Registers used:
 19282 ;;		wreg, status,2, status,0, pclath, cstack
 19283 ;; Tracked objects:
 19284 ;;		On entry : 0/0
 19285 ;;		On exit  : 0/0
 19286 ;;		Unchanged: 0/0
 19287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19292 ;;Total ram usage:        0 bytes
 19293 ;; Hardware stack levels used:    1
 19294 ;; Hardware stack levels required when called:    7
 19295 ;; This function calls:
 19296 ;;		_DlyOff_Initialization
 19297 ;; This function is called by:
 19298 ;;		_main
 19299 ;; This function uses a non-reentrant model
 19300 ;;
 19301                           
 19302                           
 19303                           ;psect for function _DelayOff_Initialization
 19304  1A94                     _DelayOff_Initialization:	
 19305                           
 19306                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19307                           
 19308                           ;incstack = 0
 19309                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19310  1A94  3001               	movlw	1
 19311  1A95  319A  22C1         	fcall	_DlyOff_Initialization
 19312  1A97  0008               	return
 19313  1A98                     __end_of_DelayOff_Initialization:	
 19314                           
 19315                           	psect	text138
 19316  1AC1                     __ptext138:	
 19317 ;; *************** function _DlyOff_Initialization *****************
 19318 ;; Defined at:
 19319 ;;		line 56 in file "../src/DelayOff_B1.c"
 19320 ;; Parameters:    Size  Location     Type
 19321 ;;  sw              1    wreg     unsigned char 
 19322 ;; Auto vars:     Size  Location     Type
 19323 ;;  sw              1    2[BANK0 ] unsigned char 
 19324 ;; Return value:  Size  Location     Type
 19325 ;;		None               void
 19326 ;; Registers used:
 19327 ;;		wreg, status,2, status,0, pclath, cstack
 19328 ;; Tracked objects:
 19329 ;;		On entry : 0/0
 19330 ;;		On exit  : 0/0
 19331 ;;		Unchanged: 0/0
 19332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19336 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19337 ;;Total ram usage:        1 bytes
 19338 ;; Hardware stack levels used:    1
 19339 ;; Hardware stack levels required when called:    6
 19340 ;; This function calls:
 19341 ;;		_DelayOffPointSelect
 19342 ;; This function is called by:
 19343 ;;		_DelayOff_Initialization
 19344 ;; This function uses a non-reentrant model
 19345 ;;
 19346                           
 19347                           
 19348                           ;psect for function _DlyOff_Initialization
 19349  1AC1                     _DlyOff_Initialization:	
 19350                           
 19351                           ;incstack = 0
 19352                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19353                           ;DlyOff_Initialization@sw stored from wreg
 19354  1AC1  0020               	movlb	0	; select bank0
 19355  1AC2  00A2               	movwf	DlyOff_Initialization@sw
 19356                           
 19357                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19358  1AC3  0822               	movf	DlyOff_Initialization@sw,w
 19359  1AC4  319B  2357         	fcall	_DelayOffPointSelect
 19360  1AC6  0008               	return
 19361  1AC7                     __end_of_DlyOff_Initialization:	
 19362                           
 19363                           	psect	text139
 19364  1B57                     __ptext139:	
 19365 ;; *************** function _DelayOffPointSelect *****************
 19366 ;; Defined at:
 19367 ;;		line 7 in file "../src/DelayOff_B1.c"
 19368 ;; Parameters:    Size  Location     Type
 19369 ;;  sw              1    wreg     unsigned char 
 19370 ;; Auto vars:     Size  Location     Type
 19371 ;;  sw              1    1[BANK0 ] unsigned char 
 19372 ;; Return value:  Size  Location     Type
 19373 ;;		None               void
 19374 ;; Registers used:
 19375 ;;		wreg
 19376 ;; Tracked objects:
 19377 ;;		On entry : 0/0
 19378 ;;		On exit  : 0/0
 19379 ;;		Unchanged: 0/0
 19380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19383 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19384 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19385 ;;Total ram usage:        2 bytes
 19386 ;; Hardware stack levels used:    1
 19387 ;; Hardware stack levels required when called:    5
 19388 ;; This function calls:
 19389 ;;		Nothing
 19390 ;; This function is called by:
 19391 ;;		_DlyOff_Initialization
 19392 ;;		_DlyOff_Main
 19393 ;;		_setDelayOff_GO
 19394 ;;		_getDelayOff_GO
 19395 ;; This function uses a non-reentrant model
 19396 ;;
 19397                           
 19398                           
 19399                           ;psect for function _DelayOffPointSelect
 19400  1B57                     _DelayOffPointSelect:	
 19401                           
 19402                           ;incstack = 0
 19403                           ; Regs used in _DelayOffPointSelect: [wreg]
 19404                           ;DelayOffPointSelect@sw stored from wreg
 19405  1B57  0020               	movlb	0	; select bank0
 19406  1B58  00A1               	movwf	DelayOffPointSelect@sw
 19407                           
 19408                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19409  1B59  0821               	movf	DelayOffPointSelect@sw,w
 19410  1B5A  3A01               	xorlw	1
 19411  1B5B  1D03               	skipz
 19412  1B5C  0008               	return
 19413                           
 19414                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19415  1B5D  30C7               	movlw	_DlySw1& (0+255)
 19416  1B5E  00A0               	movwf	??_DelayOffPointSelect
 19417  1B5F  0820               	movf	??_DelayOffPointSelect,w
 19418  1B60  0021               	movlb	1	; select bank1
 19419  1B61  00CA               	movwf	_DelayOff^(0+128)
 19420  1B62  0008               	return
 19421  1B63                     __end_of_DelayOffPointSelect:	
 19422                           
 19423                           	psect	text140
 19424  139C                     __ptext140:	
 19425 ;; *************** function _Buzzer_Main *****************
 19426 ;; Defined at:
 19427 ;;		line 46 in file "../src/Buzzer_B1.c"
 19428 ;; Parameters:    Size  Location     Type
 19429 ;;		None
 19430 ;; Auto vars:     Size  Location     Type
 19431 ;;		None
 19432 ;; Return value:  Size  Location     Type
 19433 ;;		None               void
 19434 ;; Registers used:
 19435 ;;		wreg, status,2, status,0
 19436 ;; Tracked objects:
 19437 ;;		On entry : 0/0
 19438 ;;		On exit  : 0/0
 19439 ;;		Unchanged: 0/0
 19440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19444 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19445 ;;Total ram usage:        1 bytes
 19446 ;; Hardware stack levels used:    1
 19447 ;; Hardware stack levels required when called:    5
 19448 ;; This function calls:
 19449 ;;		Nothing
 19450 ;; This function is called by:
 19451 ;;		_main
 19452 ;; This function uses a non-reentrant model
 19453 ;;
 19454                           
 19455                           
 19456                           ;psect for function _Buzzer_Main
 19457  139C                     _Buzzer_Main:	
 19458                           
 19459                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19460                           
 19461                           ;incstack = 0
 19462                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19463  139C  0022               	movlb	2	; select bank2
 19464  139D  1CA0               	btfss	_Buz1^(0+256),1
 19465  139E  0008               	return
 19466                           
 19467                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19468  139F  3001               	movlw	1
 19469  13A0  07A1               	addwf	(_Buz1^(0+256)+1),f
 19470  13A1  3000               	movlw	0
 19471  13A2  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19472                           
 19473                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19474  13A3  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19475  13A4  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19476  13A5  1D03               	skipz
 19477  13A6  2BA9               	goto	u7575
 19478  13A7  0826               	movf	(_Buz1^(0+256)+6),w
 19479  13A8  0221               	subwf	(_Buz1^(0+256)+1),w
 19480  13A9                     u7575:	
 19481  13A9  1C03               	skipc
 19482  13AA  0008               	return
 19483                           
 19484                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19485  13AB  01A1               	clrf	(_Buz1^(0+256)+1)
 19486  13AC  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19487                           
 19488                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19489  13AD  12A0               	bcf	_Buz1^(0+256),5
 19490  13AE  0020               	movlb	0	; select bank0
 19491  13AF  1D8D               	btfss	13,3	;volatile
 19492  13B0  2BB3               	goto	l7763
 19493  13B1  0022               	movlb	2	; select bank2
 19494  13B2  16A0               	bsf	_Buz1^(0+256),5
 19495  13B3                     l7763:	
 19496                           
 19497                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19498  13B3  0022               	movlb	2	; select bank2
 19499  13B4  1AA0               	btfsc	_Buz1^(0+256),5
 19500  13B5  2BDF               	goto	l96
 19501                           
 19502                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19503  13B6  08A3               	movf	(_Buz1^(0+256)+3),f
 19504  13B7  1D03               	skipz
 19505  13B8  2BDB               	goto	l97
 19506                           
 19507                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19508  13B9  1DA0               	btfss	_Buz1^(0+256),3
 19509  13BA  2BC9               	goto	l98
 19510                           
 19511                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19512  13BB  11A0               	bcf	_Buz1^(0+256),3
 19513                           
 19514                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19515  13BC  0824               	movf	(_Buz1^(0+256)+4),w
 19516  13BD  0020               	movlb	0	; select bank0
 19517  13BE  00A0               	movwf	??_Buzzer_Main
 19518  13BF  0820               	movf	??_Buzzer_Main,w
 19519  13C0  0022               	movlb	2	; select bank2
 19520  13C1  00A3               	movwf	(_Buz1^(0+256)+3)
 19521                           
 19522                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19523  13C2  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19524  13C3  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19525  13C4  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19526  13C5  0828               	movf	(_Buz1^(0+256)+8),w
 19527  13C6  01A6               	clrf	(_Buz1^(0+256)+6)
 19528  13C7  07A6               	addwf	(_Buz1^(0+256)+6),f
 19529                           
 19530                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19531  13C8  0008               	return
 19532  13C9                     l98:	
 19533  13C9  1E20               	btfss	_Buz1^(0+256),4
 19534  13CA  2BD9               	goto	l100
 19535                           
 19536                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19537  13CB  1220               	bcf	_Buz1^(0+256),4
 19538                           
 19539                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19540  13CC  0825               	movf	(_Buz1^(0+256)+5),w
 19541  13CD  0020               	movlb	0	; select bank0
 19542  13CE  00A0               	movwf	??_Buzzer_Main
 19543  13CF  0820               	movf	??_Buzzer_Main,w
 19544  13D0  0022               	movlb	2	; select bank2
 19545  13D1  00A3               	movwf	(_Buz1^(0+256)+3)
 19546                           
 19547                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19548  13D2  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19549  13D3  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19550  13D4  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19551  13D5  082A               	movf	(_Buz1^(0+256)+10),w
 19552  13D6  01A6               	clrf	(_Buz1^(0+256)+6)
 19553  13D7  07A6               	addwf	(_Buz1^(0+256)+6),f
 19554                           
 19555                           ;Buzzer_B1.c: 62: } else {
 19556  13D8  0008               	return
 19557  13D9                     l100:	
 19558                           
 19559                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19560  13D9  10A0               	bcf	_Buz1^(0+256),1
 19561                           
 19562                           ;Buzzer_B1.c: 64: }
 19563                           ;Buzzer_B1.c: 65: } else {
 19564  13DA  0008               	return
 19565  13DB                     l97:	
 19566                           
 19567                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19568  13DB  16A0               	bsf	_Buz1^(0+256),5
 19569                           
 19570                           ;Buzzer_B1.c: 68: RB3 = 1;
 19571  13DC  0020               	movlb	0	; select bank0
 19572  13DD  158D               	bsf	13,3	;volatile
 19573                           
 19574                           ;Buzzer_B1.c: 69: }
 19575                           ;Buzzer_B1.c: 70: } else {
 19576  13DE  0008               	return
 19577  13DF                     l96:	
 19578                           
 19579                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19580  13DF  12A0               	bcf	_Buz1^(0+256),5
 19581                           
 19582                           ;Buzzer_B1.c: 73: RB3 = 0;
 19583  13E0  0020               	movlb	0	; select bank0
 19584  13E1  118D               	bcf	13,3	;volatile
 19585                           
 19586                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19587  13E2  3001               	movlw	1
 19588  13E3  0022               	movlb	2	; select bank2
 19589  13E4  02A3               	subwf	(_Buz1^(0+256)+3),f
 19590  13E5  0008               	return
 19591  13E6                     __end_of_Buzzer_Main:	
 19592                           
 19593                           	psect	text141
 19594  1A85                     __ptext141:	
 19595 ;; *************** function _Buzzer_Initialization *****************
 19596 ;; Defined at:
 19597 ;;		line 11 in file "../src/Buzzer_B1.c"
 19598 ;; Parameters:    Size  Location     Type
 19599 ;;		None
 19600 ;; Auto vars:     Size  Location     Type
 19601 ;;		None
 19602 ;; Return value:  Size  Location     Type
 19603 ;;		None               void
 19604 ;; Registers used:
 19605 ;;		None
 19606 ;; Tracked objects:
 19607 ;;		On entry : 0/0
 19608 ;;		On exit  : 0/0
 19609 ;;		Unchanged: 0/0
 19610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19615 ;;Total ram usage:        0 bytes
 19616 ;; Hardware stack levels used:    1
 19617 ;; Hardware stack levels required when called:    5
 19618 ;; This function calls:
 19619 ;;		Nothing
 19620 ;; This function is called by:
 19621 ;;		_main
 19622 ;; This function uses a non-reentrant model
 19623 ;;
 19624                           
 19625                           
 19626                           ;psect for function _Buzzer_Initialization
 19627  1A85                     _Buzzer_Initialization:	
 19628                           
 19629                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19630                           
 19631                           ;incstack = 0
 19632                           ; Regs used in _Buzzer_Initialization: []
 19633  1A85  0022               	movlb	2	; select bank2
 19634  1A86  1420               	bsf	_Buz1^(0+256),0
 19635  1A87  0008               	return
 19636  1A88                     __end_of_Buzzer_Initialization:	
 19637                           
 19638                           	psect	intentry
 19639  0004                     __pintentry:	
 19640 ;; *************** function _ISR *****************
 19641 ;; Defined at:
 19642 ;;		line 116 in file "../src/MCU_B1.c"
 19643 ;; Parameters:    Size  Location     Type
 19644 ;;		None
 19645 ;; Auto vars:     Size  Location     Type
 19646 ;;		None
 19647 ;; Return value:  Size  Location     Type
 19648 ;;		None               void
 19649 ;; Registers used:
 19650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19651 ;; Tracked objects:
 19652 ;;		On entry : 0/0
 19653 ;;		On exit  : 0/0
 19654 ;;		Unchanged: 0/0
 19655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19658 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19659 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19660 ;;Total ram usage:        1 bytes
 19661 ;; Hardware stack levels used:    1
 19662 ;; Hardware stack levels required when called:    4
 19663 ;; This function calls:
 19664 ;;		_IOC_ISR
 19665 ;;		_TMR1_ISR
 19666 ;; This function is called by:
 19667 ;;		Interrupt level 1
 19668 ;; This function uses a non-reentrant model
 19669 ;;
 19670                           
 19671  0004                     _ISR:	
 19672                           
 19673                           ;incstack = 0
 19674                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19675  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19676  0005  3180               	pagesel	$
 19677  0006  0020               	movlb	0	; select bank0
 19678  0007  087F               	movf	127,w
 19679  0008  00FC               	movwf	??_ISR
 19680                           
 19681                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19682  0009  0021               	movlb	1	; select bank1
 19683  000A  1C11               	btfss	17,0	;volatile
 19684  000B  2812               	goto	i1l8335
 19685  000C  0020               	movlb	0	; select bank0
 19686  000D  1C11               	btfss	17,0	;volatile
 19687  000E  2812               	goto	i1l8335
 19688                           
 19689                           ;MCU_B1.c: 126: TMR1_ISR();
 19690  000F  319F  273F  3180   	fcall	_TMR1_ISR
 19691  0012                     i1l8335:	
 19692                           
 19693                           ;MCU_B1.c: 127: }
 19694                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19695  0012  198B               	btfsc	11,3	;volatile
 19696  0013  1C0B               	btfss	11,0	;volatile
 19697  0014  281A               	goto	i1l1197
 19698  0015  0027               	movlb	7	; select bank7
 19699  0016  1D16               	btfss	22,2	;volatile
 19700  0017  281A               	goto	i1l1197
 19701                           
 19702                           ;MCU_B1.c: 139: IOC_ISR();
 19703  0018  319B  2306         	fcall	_IOC_ISR
 19704  001A                     i1l1197:	
 19705                           ;MCU_B1.c: 140: }
 19706                           ;MCU_B1.c: 148: return;
 19707                           
 19708  001A  087C               	movf	??_ISR,w
 19709  001B  0020               	movlb	0	; select bank0
 19710  001C  00FF               	movwf	127
 19711  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19712  001E  0009               	retfie
 19713  001F                     __end_of_ISR:	
 19714                           
 19715                           	psect	text143
 19716  1F3F                     __ptext143:	
 19717 ;; *************** function _TMR1_ISR *****************
 19718 ;; Defined at:
 19719 ;;		line 236 in file "../src/MCU_B1.c"
 19720 ;; Parameters:    Size  Location     Type
 19721 ;;		None
 19722 ;; Auto vars:     Size  Location     Type
 19723 ;;		None
 19724 ;; Return value:  Size  Location     Type
 19725 ;;		None               void
 19726 ;; Registers used:
 19727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19728 ;; Tracked objects:
 19729 ;;		On entry : 0/0
 19730 ;;		On exit  : 0/0
 19731 ;;		Unchanged: 0/0
 19732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19737 ;;Total ram usage:        0 bytes
 19738 ;; Hardware stack levels used:    1
 19739 ;; Hardware stack levels required when called:    1
 19740 ;; This function calls:
 19741 ;;		_DimmerLights_TMR_1
 19742 ;; This function is called by:
 19743 ;;		_ISR
 19744 ;; This function uses a non-reentrant model
 19745 ;;
 19746                           
 19747                           
 19748                           ;psect for function _TMR1_ISR
 19749  1F3F                     _TMR1_ISR:	
 19750                           
 19751                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19752                           
 19753                           ;incstack = 0
 19754                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19755  1F3F  3192  2235  319F   	fcall	_DimmerLights_TMR_1
 19756                           
 19757                           ;MCU_B1.c: 268: Timer1.Count++;
 19758  1F42  3001               	movlw	1
 19759  1F43  0022               	movlb	2	; select bank2
 19760  1F44  07B2               	addwf	(_Timer1^(0+256)+1),f
 19761  1F45  3000               	movlw	0
 19762  1F46  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19763                           
 19764                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19765  1F47  3001               	movlw	1
 19766  1F48  3E31               	addlw	_Timer1& (0+255)
 19767  1F49  0086               	movwf	6
 19768  1F4A  3001               	movlw	1	; select bank2/3
 19769  1F4B  0087               	movwf	7
 19770  1F4C  3F40               	moviw [0]fsr1
 19771  1F4D  3AC8               	xorlw	200
 19772  1F4E  1D03               	skipz
 19773  1F4F  2F52               	goto	u767_25
 19774  1F50  3F41               	moviw [1]fsr1
 19775  1F51  3A00               	xorlw	0
 19776  1F52                     u767_25:	
 19777  1F52  1D03               	skipz
 19778  1F53  2F57               	goto	i1l7817
 19779                           
 19780                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19781  1F54  01B2               	clrf	(_Timer1^(0+256)+1)
 19782  1F55  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 19783                           
 19784                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19785  1F56  1431               	bsf	_Timer1^(0+256),0
 19786  1F57                     i1l7817:	
 19787                           
 19788                           ;MCU_B1.c: 272: }
 19789                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19790  1F57  30FA               	movlw	250
 19791  1F58  0020               	movlb	0	; select bank0
 19792  1F59  0097               	movwf	23	;volatile
 19793                           
 19794                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19795  1F5A  3038               	movlw	56
 19796  1F5B  0096               	movwf	22	;volatile
 19797                           
 19798                           ;MCU_B1.c: 276: TMR1IF = 0;
 19799  1F5C  1011               	bcf	17,0	;volatile
 19800  1F5D  0008               	return
 19801  1F5E                     __end_of_TMR1_ISR:	
 19802                           
 19803                           	psect	text144
 19804  1235                     __ptext144:	
 19805 ;; *************** function _DimmerLights_TMR_1 *****************
 19806 ;; Defined at:
 19807 ;;		line 1390 in file "../src/Dimmer_B1.c"
 19808 ;; Parameters:    Size  Location     Type
 19809 ;;		None
 19810 ;; Auto vars:     Size  Location     Type
 19811 ;;		None
 19812 ;; Return value:  Size  Location     Type
 19813 ;;		None               void
 19814 ;; Registers used:
 19815 ;;		wreg, status,2, status,0
 19816 ;; Tracked objects:
 19817 ;;		On entry : 0/0
 19818 ;;		On exit  : 0/0
 19819 ;;		Unchanged: 0/0
 19820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19823 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19824 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19825 ;;Total ram usage:        1 bytes
 19826 ;; Hardware stack levels used:    1
 19827 ;; This function calls:
 19828 ;;		Nothing
 19829 ;; This function is called by:
 19830 ;;		_TMR1_ISR
 19831 ;; This function uses a non-reentrant model
 19832 ;;
 19833                           
 19834                           
 19835                           ;psect for function _DimmerLights_TMR_1
 19836  1235                     _DimmerLights_TMR_1:	
 19837                           
 19838                           ;Dimmer_B1.c: 1392: if (DimmerIntr1.Start == 1) {
 19839                           
 19840                           ;incstack = 0
 19841                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19842  1235  0021               	movlb	1	; select bank1
 19843  1236  1D3C               	btfss	_DimmerIntr1^(0+128),2
 19844  1237  2A5B               	goto	i1l844
 19845                           
 19846                           ;Dimmer_B1.c: 1393: DimmerIntr1.Count++;
 19847  1238  3001               	movlw	1
 19848  1239  00F0               	movwf	??_DimmerLights_TMR_1
 19849  123A  0870               	movf	??_DimmerLights_TMR_1,w
 19850  123B  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 19851                           
 19852                           ;Dimmer_B1.c: 1395: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 19853  123C  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19854  123D  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19855  123E  1D03               	skipz
 19856  123F  2A42               	goto	i1l7275
 19857                           
 19858                           ;Dimmer_B1.c: 1396: DimmerIntr1.Count = 0;
 19859  1240  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 19860                           
 19861                           ;Dimmer_B1.c: 1397: DimmerIntr1.Start = 0;
 19862  1241  113C               	bcf	_DimmerIntr1^(0+128),2
 19863  1242                     i1l7275:	
 19864                           
 19865                           ;Dimmer_B1.c: 1398: }
 19866                           ;Dimmer_B1.c: 1412: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19867  1242  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19868  1243  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 19869  1244  1903               	btfsc	3,2
 19870                           
 19871                           ;Dimmer_B1.c: 1413: if (DimmerIntr1.ControlStatus == 1) {
 19872  1245  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19873  1246  2A49               	goto	i1l7281
 19874                           
 19875                           ;Dimmer_B1.c: 1414: RB1 = 0;
 19876  1247  0020               	movlb	0	; select bank0
 19877  1248  108D               	bcf	13,1	;volatile
 19878  1249                     i1l7281:	
 19879                           
 19880                           ;Dimmer_B1.c: 1415: }
 19881                           ;Dimmer_B1.c: 1416: }
 19882                           ;Dimmer_B1.c: 1419: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19883  1249  0021               	movlb	1	; select bank1
 19884  124A  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19885  124B  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19886  124C  1903               	btfsc	3,2
 19887                           
 19888                           ;Dimmer_B1.c: 1420: if (DimmerIntr1.ControlStatus == 1) {
 19889  124D  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19890  124E  2A51               	goto	i1l7287
 19891                           
 19892                           ;Dimmer_B1.c: 1421: RB1 = 1;
 19893  124F  0020               	movlb	0	; select bank0
 19894  1250  148D               	bsf	13,1	;volatile
 19895  1251                     i1l7287:	
 19896                           
 19897                           ;Dimmer_B1.c: 1422: }
 19898                           ;Dimmer_B1.c: 1423: }
 19899                           ;Dimmer_B1.c: 1426: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19900  1251  0021               	movlb	1	; select bank1
 19901  1252  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19902  1253  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19903  1254  1D03               	skipz
 19904  1255  0008               	return
 19905                           
 19906                           ;Dimmer_B1.c: 1427: if (DimmerIntr1.ControlStatus == 1) {
 19907  1256  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19908  1257  0008               	return
 19909                           
 19910                           ;Dimmer_B1.c: 1428: RB1 = 0;
 19911  1258  0020               	movlb	0	; select bank0
 19912  1259  108D               	bcf	13,1	;volatile
 19913                           
 19914                           ;Dimmer_B1.c: 1429: }
 19915                           ;Dimmer_B1.c: 1432: }
 19916                           ;Dimmer_B1.c: 1434: } else {
 19917  125A  0008               	return
 19918  125B                     i1l844:	
 19919                           
 19920                           ;Dimmer_B1.c: 1435: if (DimmerIntr1.GO == 1) {
 19921  125B  1C3C               	btfss	_DimmerIntr1^(0+128),0
 19922  125C  0008               	return
 19923                           
 19924                           ;Dimmer_B1.c: 1436: DimmerIntr1.Count++;
 19925  125D  3001               	movlw	1
 19926  125E  00F0               	movwf	??_DimmerLights_TMR_1
 19927  125F  0870               	movf	??_DimmerLights_TMR_1,w
 19928  1260  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 19929                           
 19930                           ;Dimmer_B1.c: 1437: if (DimmerIntr1.Count == 7) {
 19931  1261  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19932  1262  3A07               	xorlw	7
 19933  1263  1D03               	skipz
 19934  1264  0008               	return
 19935                           
 19936                           ;Dimmer_B1.c: 1438: DimmerIntr1.Count = 0;
 19937  1265  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 19938                           
 19939                           ;Dimmer_B1.c: 1439: DimmerIntr1.GO = 0;
 19940  1266  103C               	bcf	_DimmerIntr1^(0+128),0
 19941                           
 19942                           ;Dimmer_B1.c: 1440: DimmerIntr1.Start = 1;
 19943  1267  153C               	bsf	_DimmerIntr1^(0+128),2
 19944                           
 19945                           ;Dimmer_B1.c: 1442: if (DimmerIntr1.ControlStatus == 1) {
 19946  1268  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19947  1269  0008               	return
 19948                           
 19949                           ;Dimmer_B1.c: 1443: RB1 = 1;
 19950  126A  0020               	movlb	0	; select bank0
 19951  126B  148D               	bsf	13,1	;volatile
 19952  126C  0008               	return
 19953  126D                     __end_of_DimmerLights_TMR_1:	
 19954                           
 19955                           	psect	text145
 19956  1B06                     __ptext145:	
 19957 ;; *************** function _IOC_ISR *****************
 19958 ;; Defined at:
 19959 ;;		line 395 in file "../src/MCU_B1.c"
 19960 ;; Parameters:    Size  Location     Type
 19961 ;;		None
 19962 ;; Auto vars:     Size  Location     Type
 19963 ;;		None
 19964 ;; Return value:  Size  Location     Type
 19965 ;;		None               void
 19966 ;; Registers used:
 19967 ;;		wreg, status,2, status,0, pclath, cstack
 19968 ;; Tracked objects:
 19969 ;;		On entry : 0/0
 19970 ;;		On exit  : 0/0
 19971 ;;		Unchanged: 0/0
 19972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19977 ;;Total ram usage:        0 bytes
 19978 ;; Hardware stack levels used:    1
 19979 ;; Hardware stack levels required when called:    3
 19980 ;; This function calls:
 19981 ;;		_DimmerLights_IOC_1
 19982 ;; This function is called by:
 19983 ;;		_ISR
 19984 ;; This function uses a non-reentrant model
 19985 ;;
 19986                           
 19987                           
 19988                           ;psect for function _IOC_ISR
 19989  1B06                     _IOC_ISR:	
 19990                           
 19991                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 19992                           
 19993                           ;incstack = 0
 19994                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19995  1B06  0021               	movlb	1	; select bank1
 19996  1B07  1C2F               	btfss	_myMain^(0+128),0
 19997  1B08  2B0B               	goto	i1l7827
 19998                           
 19999                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20000  1B09  3187  27C2         	fcall	_DimmerLights_IOC_1
 20001  1B0B                     i1l7827:	
 20002                           
 20003                           ;MCU_B1.c: 416: }
 20004                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20005  1B0B  0027               	movlb	7	; select bank7
 20006  1B0C  1116               	bcf	22,2	;volatile
 20007                           
 20008                           ;MCU_B1.c: 419: IOCIF = 0;
 20009  1B0D  100B               	bcf	11,0	;volatile
 20010  1B0E  0008               	return
 20011  1B0F                     __end_of_IOC_ISR:	
 20012                           
 20013                           	psect	text146
 20014  07C2                     __ptext146:	
 20015 ;; *************** function _DimmerLights_IOC_1 *****************
 20016 ;; Defined at:
 20017 ;;		line 1485 in file "../src/Dimmer_B1.c"
 20018 ;; Parameters:    Size  Location     Type
 20019 ;;		None
 20020 ;; Auto vars:     Size  Location     Type
 20021 ;;		None
 20022 ;; Return value:  Size  Location     Type
 20023 ;;		None               void
 20024 ;; Registers used:
 20025 ;;		wreg, status,2, status,0, pclath, cstack
 20026 ;; Tracked objects:
 20027 ;;		On entry : 0/0
 20028 ;;		On exit  : 0/0
 20029 ;;		Unchanged: 0/0
 20030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20033 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20034 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20035 ;;Total ram usage:        2 bytes
 20036 ;; Hardware stack levels used:    1
 20037 ;; Hardware stack levels required when called:    2
 20038 ;; This function calls:
 20039 ;;		i1_Division
 20040 ;; This function is called by:
 20041 ;;		_IOC_ISR
 20042 ;; This function uses a non-reentrant model
 20043 ;;
 20044                           
 20045                           
 20046                           ;psect for function _DimmerLights_IOC_1
 20047  07C2                     _DimmerLights_IOC_1:	
 20048                           
 20049                           ;Dimmer_B1.c: 1499: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20050                           
 20051                           ;incstack = 0
 20052                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20053  07C2  0021               	movlb	1	; select bank1
 20054  07C3  193C               	btfsc	_DimmerIntr1^(0+128),2
 20055  07C4  0008               	return
 20056  07C5  183C               	btfsc	_DimmerIntr1^(0+128),0
 20057  07C6  0008               	return
 20058                           
 20059                           ;Dimmer_B1.c: 1501: if (RB2 != DimmerIntr1.Status) {
 20060  07C7  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 20061  07C8  0C89               	rrf	9,f
 20062  07C9  3901               	andlw	1
 20063  07CA  00FA               	movwf	??_DimmerLights_IOC_1
 20064  07CB  3000               	movlw	0
 20065  07CC  0020               	movlb	0	; select bank0
 20066  07CD  190D               	btfsc	13,2	;volatile
 20067  07CE  3001               	movlw	1
 20068  07CF  067A               	xorwf	??_DimmerLights_IOC_1,w
 20069  07D0  1903               	skipnz
 20070  07D1  0008               	return
 20071                           
 20072                           ;Dimmer_B1.c: 1504: DimmerIntr1.Count = 0;
 20073  07D2  0021               	movlb	1	; select bank1
 20074  07D3  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20075                           
 20076                           ;Dimmer_B1.c: 1505: DimmerIntr1.GO = 1;
 20077  07D4  143C               	bsf	_DimmerIntr1^(0+128),0
 20078                           
 20079                           ;Dimmer_B1.c: 1507: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20080  07D5  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20081  07D6  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 20082                           
 20083                           ;Dimmer_B1.c: 1508: DimmerIntr1.Tune = 1;
 20084  07D7  14BC               	bsf	_DimmerIntr1^(0+128),1
 20085                           
 20086                           ;Dimmer_B1.c: 1509: }
 20087                           ;Dimmer_B1.c: 1511: if (DimmerIntr1.TuneGO == 1) {
 20088  07D8  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 20089  07D9  2FF8               	goto	i1l7331
 20090                           
 20091                           ;Dimmer_B1.c: 1512: DimmerIntr1.TuneGO = 0;
 20092  07DA  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 20093                           
 20094                           ;Dimmer_B1.c: 1515: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20095  07DB  3002               	movlw	2
 20096  07DC  00FA               	movwf	??_DimmerLights_IOC_1
 20097  07DD  087A               	movf	??_DimmerLights_IOC_1,w
 20098  07DE  00F5               	movwf	i1Division@num
 20099  07DF  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20100  07E0  319B  23E7  3187   	fcall	i1_Division
 20101  07E3  00FB               	movwf	??_DimmerLights_IOC_1+1
 20102  07E4  087B               	movf	??_DimmerLights_IOC_1+1,w
 20103  07E5  0021               	movlb	1	; select bank1
 20104  07E6  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 20105                           
 20106                           ;Dimmer_B1.c: 1516: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 20107  07E7  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 20108  07E8  3AFF               	xorlw	255
 20109  07E9  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20110  07EA  3E3C               	addlw	60
 20111  07EB  00FA               	movwf	??_DimmerLights_IOC_1
 20112  07EC  087A               	movf	??_DimmerLights_IOC_1,w
 20113  07ED  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 20114                           
 20115                           ;Dimmer_B1.c: 1517: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20116  07EE  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 20117  07EF  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20118  07F0  00FA               	movwf	??_DimmerLights_IOC_1
 20119  07F1  087A               	movf	??_DimmerLights_IOC_1,w
 20120  07F2  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 20121                           
 20122                           ;Dimmer_B1.c: 1518: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 20123  07F3  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 20124  07F4  3E01               	addlw	1
 20125  07F5  00FA               	movwf	??_DimmerLights_IOC_1
 20126  07F6  087A               	movf	??_DimmerLights_IOC_1,w
 20127  07F7  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 20128  07F8                     i1l7331:	
 20129                           
 20130                           ;Dimmer_B1.c: 1519: }
 20131                           ;Dimmer_B1.c: 1523: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20132  07F8  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 20133  07F9  0020               	movlb	0	; select bank0
 20134  07FA  1D0D               	btfss	13,2	;volatile
 20135  07FB  0008               	return
 20136  07FC  0021               	movlb	1	; select bank1
 20137  07FD  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 20138  07FE  0008               	return
 20139  07FF                     __end_of_DimmerLights_IOC_1:	
 20140                           
 20141                           	psect	text147
 20142  1BE7                     __ptext147:	
 20143 ;; *************** function i1_Division *****************
 20144 ;; Defined at:
 20145 ;;		line 1385 in file "../src/Dimmer_B1.c"
 20146 ;; Parameters:    Size  Location     Type
 20147 ;;  value           1    wreg     unsigned char 
 20148 ;;  num             1    5[COMMON] unsigned char 
 20149 ;; Auto vars:     Size  Location     Type
 20150 ;;  value           1    8[COMMON] unsigned char 
 20151 ;;  Division        1    9[COMMON] unsigned char 
 20152 ;; Return value:  Size  Location     Type
 20153 ;;                  1    wreg      unsigned char 
 20154 ;; Registers used:
 20155 ;;		wreg, status,2, status,0, pclath, cstack
 20156 ;; Tracked objects:
 20157 ;;		On entry : 0/0
 20158 ;;		On exit  : 0/0
 20159 ;;		Unchanged: 0/0
 20160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20161 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20162 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20163 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20164 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20165 ;;Total ram usage:        5 bytes
 20166 ;; Hardware stack levels used:    1
 20167 ;; Hardware stack levels required when called:    1
 20168 ;; This function calls:
 20169 ;;		i1___lbdiv
 20170 ;; This function is called by:
 20171 ;;		_DimmerLights_IOC_1
 20172 ;; This function uses a non-reentrant model
 20173 ;;
 20174                           
 20175                           
 20176                           ;psect for function i1_Division
 20177  1BE7                     i1_Division:	
 20178                           
 20179                           ;incstack = 0
 20180                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 20181                           ;i1Division@value stored from wreg
 20182  1BE7  00F8               	movwf	i1Division@value
 20183                           
 20184                           ;Dimmer_B1.c: 1386: char result = (char) (value / num);
 20185  1BE8  0875               	movf	i1Division@num,w
 20186  1BE9  00F6               	movwf	??i1_Division
 20187  1BEA  0876               	movf	??i1_Division,w
 20188  1BEB  00F0               	movwf	i1___lbdiv@divisor
 20189  1BEC  0878               	movf	i1Division@value,w
 20190  1BED  319F  27BD         	fcall	i1___lbdiv
 20191  1BEF  00F7               	movwf	??i1_Division+1
 20192  1BF0  0877               	movf	??i1_Division+1,w
 20193  1BF1  00F9               	movwf	i1Division@result
 20194                           
 20195                           ;Dimmer_B1.c: 1387: return result;
 20196  1BF2  0879               	movf	i1Division@result,w
 20197  1BF3  0008               	return
 20198  1BF4                     __end_ofi1_Division:	
 20199                           
 20200                           	psect	text148
 20201  1FBD                     __ptext148:	
 20202 ;; *************** function i1___lbdiv *****************
 20203 ;; Defined at:
 20204 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20205 ;; Parameters:    Size  Location     Type
 20206 ;;  dividend        1    wreg     unsigned char 
 20207 ;;  divisor         1    0[COMMON] unsigned char 
 20208 ;; Auto vars:     Size  Location     Type
 20209 ;;  dividend        1    2[COMMON] unsigned char 
 20210 ;;  __lbdiv         1    4[COMMON] unsigned char 
 20211 ;;  __lbdiv         1    3[COMMON] unsigned char 
 20212 ;; Return value:  Size  Location     Type
 20213 ;;                  1    wreg      unsigned char 
 20214 ;; Registers used:
 20215 ;;		wreg, status,2, status,0
 20216 ;; Tracked objects:
 20217 ;;		On entry : 0/0
 20218 ;;		On exit  : 0/0
 20219 ;;		Unchanged: 0/0
 20220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20221 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20222 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20223 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20224 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20225 ;;Total ram usage:        5 bytes
 20226 ;; Hardware stack levels used:    1
 20227 ;; This function calls:
 20228 ;;		Nothing
 20229 ;; This function is called by:
 20230 ;;		i1_Division
 20231 ;; This function uses a non-reentrant model
 20232 ;;
 20233                           
 20234                           
 20235                           ;psect for function i1___lbdiv
 20236  1FBD                     i1___lbdiv:	
 20237                           
 20238                           ;incstack = 0
 20239                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 20240                           ;i1___lbdiv@dividend stored from wreg
 20241  1FBD  00F2               	movwf	i1___lbdiv@dividend
 20242  1FBE  01F4               	clrf	i1___lbdiv@quotient
 20243  1FBF  0870               	movf	i1___lbdiv@divisor,w
 20244  1FC0  1903               	btfsc	3,2
 20245  1FC1  2FDC               	goto	i1l6735
 20246  1FC2  01F3               	clrf	i1___lbdiv@counter
 20247  1FC3  0AF3               	incf	i1___lbdiv@counter,f
 20248  1FC4                     i1l6723:	
 20249  1FC4  1BF0               	btfsc	i1___lbdiv@divisor,7
 20250  1FC5  2FCD               	goto	i1l6725
 20251  1FC6  1003               	clrc
 20252  1FC7  0DF0               	rlf	i1___lbdiv@divisor,f
 20253  1FC8  3001               	movlw	1
 20254  1FC9  00F1               	movwf	??i1___lbdiv
 20255  1FCA  0871               	movf	??i1___lbdiv,w
 20256  1FCB  07F3               	addwf	i1___lbdiv@counter,f
 20257  1FCC  2FC4               	goto	i1l6723
 20258  1FCD                     i1l6725:	
 20259  1FCD  1003               	clrc
 20260  1FCE  0DF4               	rlf	i1___lbdiv@quotient,f
 20261  1FCF  0870               	movf	i1___lbdiv@divisor,w
 20262  1FD0  0272               	subwf	i1___lbdiv@dividend,w
 20263  1FD1  1C03               	skipc
 20264  1FD2  2FD7               	goto	L11
 20265  1FD3  0870               	movf	i1___lbdiv@divisor,w
 20266  1FD4  02F2               	subwf	i1___lbdiv@dividend,f
 20267  1FD5  1474               	bsf	i1___lbdiv@quotient,0
 20268  1FD6  1003               	clrc
 20269  1FD7                     L11:	
 20270  1FD7  0CF0               	rrf	i1___lbdiv@divisor,f
 20271  1FD8  3001               	movlw	1
 20272  1FD9  02F3               	subwf	i1___lbdiv@counter,f
 20273  1FDA  1D03               	btfss	3,2
 20274  1FDB  2FCD               	goto	i1l6725
 20275  1FDC                     i1l6735:	
 20276  1FDC  0874               	movf	i1___lbdiv@quotient,w
 20277  1FDD  0008               	return
 20278  1FDE                     __end_ofi1___lbdiv:	
 20279  007E                     btemp	set	126	;btemp
 20280  007E                     pic14e$flags	set	126
 20281  007E                     wtemp	set	126
 20282  007E                     wtemp0	set	126
 20283  0080                     wtemp1	set	128
 20284  0082                     wtemp2	set	130
 20285  0084                     wtemp3	set	132
 20286  0086                     wtemp4	set	134
 20287  0088                     wtemp5	set	136
 20288  007F                     wtemp6	set	127
 20289  007E                     ttemp	set	126
 20290  007E                     ttemp0	set	126
 20291  0081                     ttemp1	set	129
 20292  0084                     ttemp2	set	132
 20293  0087                     ttemp3	set	135
 20294  007F                     ttemp4	set	127
 20295  007E                     ltemp	set	126
 20296  007E                     ltemp0	set	126
 20297  0082                     ltemp1	set	130
 20298  0086                     ltemp2	set	134
 20299  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         227
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      76
    BANK3            80      0      76
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  148508
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1434
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5815
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    5815
                                             69 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3320
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3320
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   44121
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   44121
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   39547
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4192
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35171
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     3     3      0     157
                                              4 BANK0      3     3      0
         _DimmerLights_SelectPointer
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10014
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20428
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2168
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1640
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    2892
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48427
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   48219
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   27715
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     311
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3697
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20233
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     311
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     311
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27411
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   27411
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     470
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     251
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4458
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4458
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1501
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1434
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     281
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     281
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     281
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     281
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4C       9       95.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Mar 12 16:58:48 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1E2F                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l86 14C1  
                                      l96 13DF                                        l88 14D5  
                                      l97 13DB                                        l98 13C9  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1054  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D2                            setTemp_Main@AD 006D  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1B2B  
                  __end_of_setDelayOff_GO 0C91                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 0025  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1795  
                    _setDimmerLights_Line 1C33                              ___ftadd@sign 004B  
                                     l100 13D9                                       l303 1E3B  
                                     l304 1E3D                                       l235 08F6  
                    _setDimmerLights_SwOn 1193                                       l531 0986  
                                     l347 107E                                       l760 1EE2  
                                     l691 1C10                                       l678 1567  
                                     l787 0784                                       _GIE 005F  
                                     _CRC 00C8                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00CD                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 0136  
                                     _Cmd 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01BE                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1E48                     _Buzzer_Initialization 1A85  
                         __end_of_ADC_Set 1AE7                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1DFE               _setDimmerIntr_ControlStatus 1DE6  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1B0F  
                   _setDimmerLights_OnOff 06F7          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l1234 1396                                      l2130 04EB  
                                    l2125 054B                                      l1248 10F1  
                                    l2216 1153                                      l2129 049A  
                                    l1258 0B76                                      l2170 1664  
                                    l2155 1005                                      l1435 1319  
                                    l1612 01FF                                      l1622 01DB  
                                    l1614 008B                                      l1463 1125  
                                    l1623 01D9                                      l1615 0087  
                                    l2183 118F                                      l1616 0082  
                                    l2512 037C                                      l1458 110E  
                                    l1490 0623                                      l2514 024D  
                                    l1459 1129                           __end_of_IOC_Set 1B4C  
                                    l2197 0A77                                      l1499 1E2E  
                                    l2492 1DAC                                      l6101 0BFC  
                                    l1790 0646                                      l6031 0E37  
                                    l6015 0DF4                                      l1784 06F3  
                                    l6009 0DDE                                      l6043 0E53  
                                    l6027 0E2F                                      l6151 11BF  
                                    l2863 15EB                                      l6039 0E4B  
                                    l2696 1F2A                                      l2857 15D4  
                                    l7121 1C93                                      l6163 129B  
                                    l6067 0B97                                      l6235 177F  
                                    l7211 1D2A                                      l6331 108F  
                                    l6403 0A8F                                      l6149 11BA  
                                    l6093 0BE2                                      l6085 0BC7  
                                    l6333 109A                                      l2886 0423  
                                    l6095 0BEB                                      l6087 0BD5  
                                    l8103 0172                                      l8111 019B  
                                    l8031 0069                                      l7055 1C82  
                                    l6407 0A94                                      l6097 0BEE  
                                    l6185 0C43                                      l7225 17BD  
                                    l7145 1225                                      l7137 1207  
                                    l6417 0AE4                            _Load_Main$3987 002A  
                                    l5811 1422                                      l5803 1404  
                                    l6195 0C73                                      l7227 17C4  
                                    l8211 05B4                                      l8203 058C  
                                    l7139 1213                                      l8107 018F  
                                    l7091 1639                                      l7075 1618  
                                    l7403 1F88                     _setDimmerLights_SwOff 126D  
                                    l5805 1410                                      l5901 03B3  
                                    l6365 1E19                                      l6613 12B5  
                                    l7237 17EC                                      l8213 058F  
                                    l7149 122E                                      l8117 01AB  
                                    l7405 1F8B                                      l5815 142B  
                                    l6199 0C87                                      l7239 17F3  
                                    l8231 05D1                                      l8215 05BC  
                                    l8127 01C1                                      l8071 00E0  
                                    l6391 134E                                      l7087 1630  
                                    l7503 0649                                      l7511 065B  
                                    l5761 15C0                                      l5753 15AA  
                                    l6633 1C9D                                      l6369 1E28  
                                    l7249 1B33                                      l8233 05FE  
                                    l8241 0619                                      l7441 0AFF  
                                    l8065 00AE                                      l8049 008A  
                                    l7409 1F90                                      l5819 1433  
                                    l5931 0402                                      l5907 03C2  
                                    l6627 12D4                                      l6619 12BE  
                                    l8235 0608                                      l8163 01EE  
                                    l6709 1FFE                                      l5757 15B1  
                                    l5925 03EF                                      l6581 1109  
                                    l6637 1CA4                                      l8229 05F6  
                                    l7429 1C60                                      l8501 1067  
                                    l7541 06CA                                      l7509 0658  
                                    l5767 15D9                                      l5759 15BB  
                                    l5943 0435                                      l5927 03F9  
                                    l5919 03DC                                      l6591 1120  
                                    l6583 1112                                      l6639 1CA9  
                                    l5863 1CAE                                      l7455 0B6F  
                                    l7447 0B14                                      l6671 0A15  
                                    l7703 02F0                                      l7551 06DF  
                                    l5793 13FC                                      l5769 15E1  
                                    l5937 0415                                      l5929 03FE  
                                    l8193 056D                                      l8097 0163  
                                    l6681 0A61                                      l6673 0A1C  
                                    l6665 0A00                                      l7713 0324  
                                    l7553 06E1                                      l5787 13F1  
                                    l5947 0447                                      l5939 041F  
                                    l5867 1CB4                                      l6923 07BF  
                                    l8443 1E85                                      l8523 0828  
                                    l6675 0A37                                      l7651 1DB7  
                                    l5885 101A                                      l5957 0462  
                                    l5973 0D4B                                      l6909 0793  
                                    l8445 1E88                                      l8533 0838  
                                    l8525 082B                                      l8621 0909  
                                    l8613 08FC                                      l6677 0A59  
                                    l6685 0A65                                      l5967 0D35  
                                    l8199 057D                                      l7743 1F24  
                                    l8535 083B                                      l8623 090C  
                                    l8615 08FF                                      l6679 0A5D  
                                    l7647 1DB1                                      l6697 1FE6  
                                    l5897 03AC                                      l6865 1DC9  
                                    l6929 1453                                      l8449 1E8E  
                                    l8529 0831                                      l8609 08DD  
                                    l7681 0280                                      l7665 0237  
                                    l7763 13B3                                      l6699 1FEF  
                                    l5995 0DA5                                      l5987 0D8C  
                                    l8483 1043                                      l8539 0841  
                                    l8467 1F14                                      l8651 0863  
                                    l8627 0912                                      l8619 0905  
                                    l8723 04E6                                      l7845 0FB8  
                                    l8477 103A                                      l8469 1F1A  
                                    l8645 085A                                      l7933 09CB  
                                    l7925 09AC                     _myMain_Initialization 1D3F  
                                    l6887 0742                                      l6895 0760  
                                    l7871 1375                                      l8479 103D  
                                    l8495 105E                                      l8647 085D  
                                    l8591 08C5                                      l8751 052C  
                                    l8815 150D                                      l6889 0759  
                                    l8497 1061                                      l8737 04FA  
                                    l7689 02B1                                      l7953 09FA  
                                    l7937 09D3                                      l8667 0875  
                                    l8595 08CB                                      l8819 1518  
                                    l8669 088E                                      l8589 08C2  
                                    l8765 0544                                      l7981 0D07  
                                    l7973 0CD9                                      l7799 1EE4  
                                    l6999 10D9                                      l7977 0CF0  
                                    l7969 0CC2                                      _CFGS 0CAE  
                                    l7999 12F9                              __CFG_WDTE$ON 0000  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5015 0E54                                      u5025 0E5A  
                                    u4405 15F2                                      u5125 0BE3  
                                    u4335 15B6                                      u5320 173A  
                                    u5065 0B9E                                      u4355 15CF  
                                    _PEIE 005E                                      u5325 1738  
                                    u6205 1D9F                                      u4455 1407  
                                    u4375 15DC                                      u5095 0BC8  
                                    u4705 03DD                                      u5425 1084  
                                    u4475 1411                                      u6235 1EBD  
                                    u4485 141B                                      u5285 0C4F  
                                    u7125 069C                                      u4495 1423  
                                    u4735 03F0                                      u8015 1311  
                                    u4905 0DA6                                      u6505 120A  
                                    u7145 06B3                                      u4765 0403  
                                    u6525 1214                                      u7165 06D1  
                                    u6535 121E                                      u4865 0D5D  
                                    u4945 0E00                                      u6545 1226  
                                    u4795 0416                                      u4875 0D6D  
                                    u4955 0E10                                      u8155 00AC  
                                    u9035 04BE                                      u8420 05FC  
                                    u4885 0D8D                                      u8165 00DE  
                                    u4895 0D9C                                      u4975 0E38  
                                    u7535 1F2B                                      u8255 01A2  
                                    u8175 0122                                      u4985 0E3E  
                                    u8425 05DA                                      u7545 1F30  
                                    u9065 051B                                      u8390 05BA  
                                    u7575 13A9                                      u8615 1D75  
                                    u8395 0598                                      u7835 09BB  
                                    u7775 138D                                      u7935 0CB5  
                                    u7945 0CCC                                      u7955 0CE3  
                                    u7885 09EA                                      u7965 0CFA  
                                    u7975 0D11                                      _LWLO 0CAD  
                                    _RSSI 00CF                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1EB1  
              _setDimmerLights_DimmingRun 1E96                                      _Buz1 0120  
                                    _Load 0138                                      _Temp 00D8  
                                    _main 14E9                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 098D                           __end_of_RF_Main 1A91  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1BCF                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 001F  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0AF8                         ___bmul@multiplier 0023  
                            ___ftmul@cntr 003C                              ___ftmul@sign 003D  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2283 0023  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 007C  
                            ___fttol@exp1 005B                              ___fttol@lval 0057  
       setDimmerLights_DimmingRun@command 0022   __end_of_getDimmerLights_Allow_Condition 1DD0  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1DBA  
                  _getDimmerLights_Status 1C22                        ??_getDimmer_LoadGO 0020  
                        __end_of_LED_Main 1AA4                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CB                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0065  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 00EA  
                         __end_of___awdiv 143A                           __end_of___lbdiv 2000  
                         __end_of___ftadd 047A                           __end_of___ftdiv 0DC7  
                         __end_of___ftneg 1B18                           __end_of___ftmul 0E7B  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                         __end_of___fttol 0C05                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1235                                     i1l844 125B  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1DA5                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 1730   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 16CB                                     _Light 00CE  
                         i1Division@value 0078                          __end_of_TMR1_ISR 1F5E  
                             ?i1_Division 0075                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1BC3  
                                   _getAD 1F7D                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1CF3  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1B41                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1CCF                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        __size_ofi1___lbdiv 0021  
                     _getAll_Sw_KeyStatus 1C55                        _setRF_DimmerLights 1730  
                         ___lbdiv@divisor 0020               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0023  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0067  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0020  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1C03                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 1544                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 1AA8            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 054F                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1C12  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 09FF                            _setMemory_Data 1B9F  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0778        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 143A                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BC  
                _getMain_All_LightsStatus 1B21                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1D66                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 091E  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1AFE  
                               ??_WDT_Set 0020                          __end_of___awtoft 1031  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1602  
                _getMain_All_Error_Status 10F8                                    _IOCBF2 1CB2  
                                  i1l1197 001A                                    i1l7331 07F8  
                                  i1l7281 1249                                    i1l6723 1FC4  
                                  i1l7275 1242                                    i1l6725 1FCD  
                                  i1l6735 1FDC                                    i1l7287 1251  
                                  i1l8335 0012                                    i1l7817 1F57  
                                  i1l7827 1B0B                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    u767_25 1F52  
                                  _IO_Set 1E62                                    _WDTCON 0097  
    __end_of_setDimmerLights_DimmingClose 1ACD     __size_of_setDimmerLights_DimmingClose 0006  
            _setDimmerLights_DimmingClose 1AC7                      Exception_Main@i_3624 0032  
                      DelayTime_1us@count 0020                        setRF_AdjControl@sw 0026  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1D90                                    _Dimmer 012C  
                                  _DlySw1 01C7                          _setRF_AdjControl 112B  
                ?_setOverTemp_ADV_Restore 0070             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1CAB                __end_of_Mcu_Initialization 1CE1  
                     __end_of_Buzzer_Main 13E6                                    _Memory 0220  
                        i1Division@result 0079                                    _Timer1 0131  
                                  ___bmul 1CAB                    __end_of_Exception_Main 0624  
                    Exception_Main@lights 0035                                    ___wmul 1F21  
                     __size_ofi1_Division 000D                                 ??___awdiv 0024  
                               ??___lbdiv 0021                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D6                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1D2C  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1D19                                    _s_data 00D7  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 12A6  
                                  _myMain 00AF                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1BAB                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 1490  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 1A8B          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1E16          __end_of_setDimmerIntr_Dimming_Sw 1DE6  
                   ___ftmul@f3_as_product 0039                         __end_ofi1___lbdiv 1FDE  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1D3F               getMain_Lights_Count@status1 0021  
             __size_of_DimmerLights_IOC_1 003D                     __end_of_SwPointSelect 1BE7  
             __size_of_DimmerLights_TMR_1 0038              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 006C                          ___lbdiv@dividend 0022  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1DA5               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 004F           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0022                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5410 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039             ?_setDimmerLights_DimmingClose 0070  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK3 1F9D                             __end_of_getAD 1F9D  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
                      _LED_Initialization 1A9C                           _getSw_KeyStatus 1C88  
               ??_setControl_Lights_Table 0070                        getRF_KeyStatus@key 0021  
                         ?_setMemory_Data 0020          ??_getDimmerLights_PercentToValue 005C  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 006B  
           ??_Flash_Memory_Initialization 0024                          ___lbdiv@quotient 0024  
                    _getMain_Lights_Count 1B36                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 0205         setDimmerIntr_ControlStatus@lights 0022  
                      __size_of_getBuz_GO 0011                 _setDimmerIntr_MaxmumValue 1B7B  
              __end_of_set_TimeoutCleared 1AC1           setDimmerIntr_MaxmumValue@lights 0064  
                      __size_of_getRxData 0064                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1B6F  
                    __size_of_setLED_Main 0036                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 1A91  
                      ??_CC2500_WriteByte 0020                                 ?_Division 0025  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 139C  
                       ??_setRFSW_Control 006D               ?_setDimmerLights_DimmingRun 0022  
                       __end_of_Temp_Main 0803                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1A94  
                           ??_Switch_Main 0032                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 00CC                         LedPointSelect@led 0021  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0020                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 14E9  
                          _getDelayOff_GO 1C44                       _CC2500_WriteCommand 1E7C  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
                        ??_setDelayOff_GO 0067         __end_of_DimmerIntr_Initialization 15A1  
           ??_DimmerLights_Initialization 0064                                   ?___wmul 0020  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 098D                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1AEE                        __size_of_setTxData 00BB  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1AE0  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 0C91  
      __end_of_DimmerLights_SelectPointer 1B6F                _DimmerLights_SelectPointer 1B63  
                              ??_WDT_Main 0020              __end_of_setRF_Initialization 1B57  
                      _setRFSW_AdjControl 0A78                    __end_of_setProductData 1B7B  
           setDimmerLights_Dimming@lights 006D                                   _IOC_ISR 1B06  
                                 _IOC_Set 1B41                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006A     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                              ??i1_Division 0076  
                       _Flash_Memory_Main 135B                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1E48                    __size_of_CC2500_RxData 006B  
                  __size_of_CC2500_TxData 006C                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1A8E  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0026                                   _WDT_Set 1BC3  
         __end_of_setControl_Lights_Table 0A78                           setRF_Main@error 00E9  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 1490  
                 ??_setLoad_AH_AL_Restore 0020                       getCmd_Status@number 0020  
            __end_of_CC2500_FrequencyCabr 1BDB                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0022         __size_of_setDimmerIntr_Dimming_RF 0018  
       __size_of_setDimmerIntr_Dimming_Sw 0016                         __end_of_getBuz_GO 1C77  
               ?_setDimmerIntr_Dimming_RF 0020                       ??_Flash_Memory_Main 0026  
               ?_setDimmerIntr_Dimming_Sw 0020                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1C55            __end_of_getDimmerLights_Status 1C33  
                       __end_of_getRxData 1666                   __end_of_getSw_KeyStatus 1C99  
                _CC2500_registers_address 1800                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0065                            ??_setTemp_Main 0065  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 13E6            ??_setDimmerLights_DimmingClose 0023  
                                 ___lbdiv 1FDE                                   ___ftadd 0384  
                                 ___ftdiv 0D1E                                   ___ftneg 1B0F  
                         __size_of___wmul 001E                                   ___ftmul 0DC7  
                                 ___fttol 0B7E                       __end_of_Switch_Main 1AEE  
                      __end_ofi1_Division 1BF4                                   ___lwdiv 11FE  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1C77                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 12DF                                   __ptext2 1D3F  
                                 __ptext3 0C91                                   __ptext4 098D  
                                 __ptext5 1F7D                                   __ptext6 1CE1  
                                 __ptext7 0002                                   __ptext8 0800  
                                 __ptext9 0624                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
                      i1___lbdiv@dividend 0072                 __end_of_Flash_Memory_Main 139C  
               __end_of_Flash_Memory_Read 1E62                   ??_setDimmerLights_SwOff 0022  
                              _setRF_Main 047A                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 1A98                  __end_of_setRF_AdjControl 115F  
                       _DimmerLights_Main 1ECC            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1AC7                __end_of_CC2500_ClearRXFIFO 1AB0  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1AB4  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00EE                            _LedPointSelect 1B93  
               getAll_Sw_KeyStatus@status 0021                           getTemp_AD@ADRES 0026  
                     _DelayOffPointSelect 1B57                                   clrloop0 1AD4  
          __size_of_Switch_Initialization 0004             __end_of_Switch_Initialization 1ABC  
                    end_of_initialization 004F                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 109F                             _DelayTime_1us 1079  
                       __end_of_setTxData 0F36                __end_of_Flash_Memory_Write 10F8  
                                 init_ram 1ACD                __end_of_setRF_TransceiveGO 1D19  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 1ACE  
                              _setSw_Main 0205                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 1054  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1CBD  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                        i1___lbdiv@quotient 0074  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 0847  
                           _CC2500_TxData 08B2                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0AF8                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1E16  
                     _Flash_Memory_Unlock 1B18                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 006A                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1EE8                        _Mcu_Initialization 1CCF  
                __size_of_CC2500_PowerRST 0044          __size_of_setOverTemp_ADV_Restore 001B  
            __end_of_setRF_TimeoutCleared 1AAC                      __end_of_my_MainTimer 131B  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1B9F                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0021                                 i1___lbdiv 1FBD  
               __end_of_CC2500_InitSetREG 10C9                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 1079  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
                        ??_Exception_Main 002D                             i1Division@num 0075  
                          __end_of_IO_Set 1E7C                      _setRF_Initialization 1B4C  
                      _setMemory_LoopSave 1D2C                               _Switch_Main 1AE7  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1C88                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1D7B  
             ??_DimmerIntr_Initialization 0062                      ??_Mcu_Initialization 0021  
             __end_of_getAll_Sw_KeyStatus 1C66                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0020  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1CBD  
     __size_of_getDimmerIntr_DimmingValue 000F                      setRF_DimmerLights@on 0065  
                          __end_of___wmul 1F3F                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001F  
           __size_of_getDimmerLights_Line 000B          DimmerLights_SelectPointer@lights 0021  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006B  
                          __end_of_setLED 12DF                             __pbitbssBANK1 0778  
           __size_of_setDimmerLights_Line 0011             __size_of_setDimmerLights_SwOn 0035  
                          __end_of_setBuz 14E9                __end_of_DimmerLights_IOC_1 07FF  
                    _CC2500_FrequencyCabr 1BCF                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 131B  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 126D  
                     start_initialization 0021                           ?_LedPointSelect 0070  
                               _Load_Main 0053                               __end_of_ISR 001F  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1AF6  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                              ?i1___lbdiv 0070              ?_setDimmerIntr_ControlStatus 0020  
              __end_of_CC2500_InitPATable 1F7D           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 06F7                            ??_RF_RxDisable 0024  
  __end_of_getDimmerLights_PercentToValue 16CB   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 1666                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 005E  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1ABC  
       __end_of_setDimmerIntr_MaxmumValue 1B87                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0168  
                       __size_of_Division 000F                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 008D                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 0800  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00D0                     setProductData@address 0064  
                     Exception_Main@count 002F                       Exception_Main@error 0034  
                                ??___bmul 0021                                  ??___wmul 0024  
                  __size_of_SwPointSelect 000C          __end_of_getMain_All_LightsStatus 1B2B  
                               _Tx_Length 00D4                               __pdataBANK3 01CC  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 0068  
                       ??_CC2500_ReadByte 0020               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 112B                          _CC2500_SIDLEMode 1AB4  
              __size_of_DimmerLights_Main 001C                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0022  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 002E  
                               ___latbits 0003                          _setMemory_Modify 1CF3  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E6                 setRF_TransceiveGO@command 0021  
                    ??_set_TimeoutCleared 0020                 _DimmerIntr_Initialization 1544  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0067                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0021                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0062                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0160  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1F04                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EE  
                          getRxData@error 00E7               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1AA8                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0030                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1C99  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002C  
                  _setTemp_Initialization 07FF                                 _getBuz_GO 1C66  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 1000  
             _Flash_Memory_Initialization 0F36                                  ?___awdiv 0020  
                               __ptext100 1C44                                 __ptext101 1C99  
                                ?___lbdiv 0020                                 __ptext110 1DBA  
                               __ptext102 143A                                 __ptext111 1AEE  
                               __ptext103 0E7B                                 __ptext120 1B0F  
                               __ptext112 10F8                                 __ptext104 1D06  
                               __ptext121 0DC7                                 __ptext113 1AD9  
                               __ptext105 1730                                 __ptext130 1B6F  
                               __ptext122 0D1E                                 __ptext114 1A84  
                               __ptext106 1C33                                 __ptext131 1193  
                               __ptext123 0384                                 __ptext115 1544  
                               __ptext107 1B7B                                 __ptext140 139C  
                               __ptext132 1490                                 __ptext124 100F  
                               __ptext116 1CF3                                 __ptext108 1DD0  
                               __ptext141 1A85                                 __ptext133 13E6  
                               __ptext125 15A1                                 __ptext117 16CB  
                               __ptext109 1C03                                  ?___ftadd 0041  
                               __ptext134 126D                                 __ptext126 1BF4  
                               __ptext118 1666                                 __ptext143 1F3F  
                               __ptext135 1C22                                 __ptext127 1FDE  
                               __ptext119 0B7E                                 __ptext144 1235  
                               __ptext136 1B63                                 __ptext128 1A98  
                               __ptext145 1B06                                 __ptext137 1A94  
                               __ptext129 091E                                 __ptext146 07C2  
                               __ptext138 1AC1                                 __ptext147 1BE7  
                               __ptext139 1B57                                 __ptext148 1FBD  
                               _getRxData 1602                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 135B  
                        ??_setProductData 0063                   _setOverTemp_ADV_Restore 1EB1  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1A88                             ??_setLog_Code 0065  
                getDimmerLights_Line@line 0020                        __end_of_TouchPower 1DBA  
                     __size_of_setSw_Main 017F              CC2500_ReadStatus@status_addr 0023  
      __end_of_getDimmerIntr_DimmingValue 1C12              ??_setDimmerIntr_DimmingValue 0063  
              _getDimmerIntr_DimmingValue 1C03                    CC2500_WriteByte@loop_a 0021  
          __size_of_setDimmerLights_OnOff 00CB                         ?_setRF_AdjControl 0070  
                               _r_address 00D5             __end_of_setDimmerLights_OnOff 07C2  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 12A6              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 1D52                               ??i1___lbdiv 0071  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0025  
                      ??_setRF_AdjControl 0024                             _SwPointSelect 1BDB  
                     __end_of_setLED_Main 11FE                          ??_getDelayOff_GO 0022  
                       i1___lbdiv@divisor 0070                         i1___lbdiv@counter 0073  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1A94  
                       _CC2500_rfSettings 182F                            ___wmul@product 0024  
                                _LED_Main 1AA0                           SwPointSelect@sw 0021  
                               clear_ram0 1AD3                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 12DF  
                               _setTxData 0E7B       __end_of_DimmerLights_Initialization 1AE0  
             _DimmerLights_Initialization 1AD9                    _Flash_Memory_Main$3152 0028  
                      _CC2500_ClearRXFIFO 1AAC                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1AB0                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1D66  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 10C9                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1F3F  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1BB7  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1D06                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 100F                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1E96                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1CE1                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00D3                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00CA  
                            setSw_Main@sw 0031                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1BB7  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1193  
                   _DlyOff_Initialization 1AC1         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 1BF4  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1DFE               setDimmerLights_OnOff@lights 00E6  
                _setDimmerIntr_Dimming_Sw 1DD0                                  _Fosc_Set 1AA4  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006E  
                      __end_of_getLoad_AD 09FF                        __end_of_getLoad_OK 1AF6  
                   _Switch_Initialization 1AB8         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 0D1E  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1E2F                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 000C                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 00D3                               ??_Temp_Main 006F  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$3612 0021  
           _getMain_All_Error_Status$3613 0023                  __end_of_getDimmer_LoadGO 1AFE  
                     _Load_Initialization 1A88          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
               ??_setOverTemp_ADV_Restore 0020                              _setTemp_Main 0624  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0022  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 100F                          ??_LedPointSelect 0020  
                                ___ftpack 15A1             __size_of_getMain_Lights_Count 000B  
                  getDimmer_LoadGO@loadgo 0020                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00E8                      CC2500_WriteREG@value 0022  
                             _setLED_Main 11C8                __end_of_setRF_DimmerLights 1795  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 1B06                          setDelayOff_GO@sw 006C  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0027                                  __ptext10 1EB1  
                                __ptext11 1A91                                  __ptext20 1D90  
                                __ptext12 07FF                                  __ptext21 1AB8  
                                __ptext13 1AE7                                  __ptext30 131B  
                                __ptext22 1C12                                  __ptext14 0205  
                                __ptext31 0A78                                  __ptext23 1A8E  
                                __ptext15 1D52                                  __ptext40 1D7B  
                                __ptext32 1E96                                  __ptext24 047A  
                                __ptext16 1C88                                  __ptext41 1AB4  
                                __ptext33 1C77                                  __ptext25 1602  
                                __ptext17 1BDB                                  __ptext50 1E7C  
                                __ptext42 0803                                  __ptext34 1C66  
                                __ptext26 115F                                  __ptext18 1DA5  
                                __ptext51 1AA8                                  __ptext43 109F  
                                __ptext35 1000                                  __ptext27 1D2C  
                                __ptext19 1ABC                                  __ptext60 1B41  
                                __ptext52 1D66                                  __ptext44 1F5E  
                                __ptext36 08B2                                  __ptext28 09FF  
                                __ptext61 1AA4                                  __ptext53 1E2F  
                                __ptext45 1031                                  __ptext37 0847  
                                __ptext29 112B                                  __ptext70 1A88  
                                __ptext62 1AE0                                  __ptext54 1A8B  
                                __ptext46 1BCF                                  __ptext38 1054  
                                __ptext71 1EE8                                  __ptext63 0053  
                                __ptext55 1B4C                                  __ptext47 1079  
                                __ptext39 1F04                                  __ptext80 0F36  
                                __ptext72 1AA0                                  __ptext64 1B36  
                                __ptext56 1CCF                                  __ptext48 1AB0  
                                __ptext81 1B9F                                  __ptext73 11C8  
                                __ptext65 1AFE                                  __ptext57 1BC3  
                                __ptext49 1AAC                                  __ptext90 12A6  
                                __ptext82 10C9                                  __ptext74 1A9C  
                                __ptext66 1AF6                                  __ptext58 1BB7  
                                __ptext91 1B93                                  __ptext83 1B18  
                                __ptext75 1CBD                                  __ptext67 1D19  
                                __ptext59 1E62                                  __ptext92 1AC7  
                                __ptext84 1E48                                  __ptext76 135B  
                                __ptext68 1F21                                  __ptext93 1DFE  
                                __ptext85 054F                                  __ptext77 1C55  
                                __ptext69 11FE                                  __ptext94 1B87  
                                __ptext86 1B2B                                  __ptext78 0AF8  
                                __ptext95 1DE6                                  __ptext87 1ECC  
                                __ptext79 1BAB                                  __ptext96 0C05  
                                __ptext88 1795                                  __ptext97 1CAB  
                                __ptext89 06F7                                  __ptext98 1E16  
                                __ptext99 1B21                                  __product 01CC  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1B36              __end_of_setDimmerLights_Main 1800  
            __end_of_setDimmerLights_Line 1C44                        _DimmerLights_IOC_1 07C2  
            __end_of_setDimmerLights_SwOn 11C8                              ??_setSw_Main 002F  
                  ??_setRF_TimeoutCleared 0020              ??_setDimmerLights_DimmingRun 0023  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1D52        __size_of_DimmerIntr_Initialization 005D  
                         ??_getCmd_Status 0020                        _DimmerLights_TMR_1 1235  
                __end_of_CC2500_SIDLEMode 1AB8                setDimmerLights_Main@lights 00E7  
             __end_of_DelayOffPointSelect 1B63                  setOverTemp_ADV_Restore@i 0021  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1F04  
                      _CC2500_InitPATable 1F5E                  __end_of_setMemory_Modify 1D06  
                     ?_DimmerLights_IOC_1 0070                        __end_of_setRF_Main 054F  
                             ??_getBuz_GO 0022                       ?_DimmerLights_TMR_1 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 185E  
                             ??_getRxData 00E6                              getLoad_OK@ok 0020  
              __end_of_RF_Timeout_Counter 1D7B               Flash_Memory_Main@key_Status 0027  
                _getAll_Sw_KeyStatus$6465 0022                                  main@argc 00EA  
                                main@argv 00EC                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6462 0022       getDimmerLights_ValueToPercent@value 005E  
                         _CC2500_PowerRST 0803                  __size_of_getSw_KeyStatus 0011  
            setDimmerLights_Dimming@value 006C        __end_of_setDimmerIntr_DimmingValue 1B93  
              _setDimmerIntr_DimmingValue 1B87               __end_of_Flash_Memory_Modify 0B7E  
            __size_of_getAll_Sw_KeyStatus 0011                               _setLog_Code 115F  
             __end_of_Flash_Memory_Unlock 1B21                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1031                        __end_of_setSw_Main 0384  
                   ??_Load_Initialization 0022                      ??_DimmerLights_IOC_1 007A  
         getDimmerLights_PercentToValue@i 005F       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 03E8                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                            Division@result 0029  
         __end_of_setOverTemp_ADV_Restore 1ECC                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 1A85   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1A84                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1A8B  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1BAB  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D1  
                 __size_of_Exception_Main 00D5                             Division@value 0028  
         __end_of_DelayOff_Initialization 1A98                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1A9C                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0C05  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0079  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                                i1_Division 1BE7  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 109F  
                 __end_of_CC2500_ReadByte 1F21              __end_of_setSw_Initialization 1C22  
                         _Timeout_Counter 1D90           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 1000  
        Flash_Memory_Initialization@value 0025                __end_of_LED_Initialization 1AA0  
          __end_of_setTemp_Initialization 0800                               Division@num 0025  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 1A8E  
               __size_of_setRF_AdjControl 0034                     __end_of_CC2500_RxData 08B2  
                   __end_of_CC2500_TxData 091E                     _setLoad_AH_AL_Restore 1EE8  
                 __end_of_CC2500_PowerRST 0847  
