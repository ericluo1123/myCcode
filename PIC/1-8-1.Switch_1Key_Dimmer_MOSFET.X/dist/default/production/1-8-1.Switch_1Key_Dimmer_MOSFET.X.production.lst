

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Dec 18 11:06:26 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1FBE                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1FBE  3463               	retlw	99
  2163  1FBF  3402               	retlw	2
  2164  1FC0  3400               	retlw	0
  2165  1FC1  3400               	retlw	0
  2166  1FC2  3400               	retlw	0
  2167  1FC3  3400               	retlw	0
  2168  1FC4  3400               	retlw	0
  2169  1FC5  3400               	retlw	0
  2170  1FC6  3400               	retlw	0
  2171  1FC7  3400               	retlw	0
  2172  1FC8  3400               	retlw	0
  2173  1FC9  3400               	retlw	0
  2174  1FCA  34FF               	retlw	255
  2175  1FCB  34FF               	retlw	255
  2176  1FCC  34FF               	retlw	255
  2177  1FCD  3400               	retlw	0
  2178  1FCE  3400               	retlw	0
  2179  1FCF  3400               	retlw	0
  2180  1FD0  3400               	retlw	0
  2181  1FD1  3400               	retlw	0
  2182  1FD2  3400               	retlw	0
  2183  1FD3  3400               	retlw	0
  2184  1FD4  3400               	retlw	0
  2185  1FD5  3400               	retlw	0
  2186  1FD6  3400               	retlw	0
  2187  1FD7  3400               	retlw	0
  2188  1FD8  3400               	retlw	0
  2189  1FD9  3400               	retlw	0
  2190  1FDA  3400               	retlw	0
  2191  1FDB  3400               	retlw	0
  2192  1FDC  3400               	retlw	0
  2193  1FDD  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0064                     _RA4	set	100
  2322  0066                     _RA6	set	102
  2323  0067                     _RA7	set	103
  2324  0068                     _RB0	set	104
  2325  0069                     _RB1	set	105
  2326  006A                     _RB2	set	106
  2327  006B                     _RB3	set	107
  2328  006D                     _RB5	set	109
  2329  0070                     _RC0	set	112
  2330  0071                     _RC1	set	113
  2331  0073                     _RC3	set	115
  2332  0074                     _RC4	set	116
  2333  0075                     _RC5	set	117
  2334  0088                     _TMR1IF	set	136
  2335  009D                     _ADCON0	set	157
  2336  009E                     _ADCON1	set	158
  2337  009C                     _ADRESH	set	156
  2338  009B                     _ADRESL	set	155
  2339  0099                     _OSCCON	set	153
  2340  008C                     _TRISA	set	140
  2341  008D                     _TRISB	set	141
  2342  008E                     _TRISC	set	142
  2343  0097                     _WDTCON	set	151
  2344  04E9                     _GO_nDONE	set	1257
  2345  0488                     _TMR1IE	set	1160
  2346  0117                     _FVRCON	set	279
  2347  010C                     _LATA	set	268
  2348  010D                     _LATB	set	269
  2349  010E                     _LATC	set	270
  2350  018C                     _ANSELA	set	396
  2351  018D                     _ANSELB	set	397
  2352  018E                     _ANSELC	set	398
  2353  0192                     _PMADRH	set	402
  2354  0191                     _PMADRL	set	401
  2355  0196                     _PMCON2	set	406
  2356  0194                     _PMDATH	set	404
  2357  0193                     _PMDATL	set	403
  2358  0CAE                     _CFGS	set	3246
  2359  0CAC                     _FREE	set	3244
  2360  0CAD                     _LWLO	set	3245
  2361  0CA8                     _RD	set	3240
  2362  0CA9                     _WR	set	3241
  2363  0CAA                     _WREN	set	3242
  2364  1069                     _WPUB1	set	4201
  2365  106A                     _WPUB2	set	4202
  2366  0396                     _IOCBF	set	918
  2367  0395                     _IOCBN	set	917
  2368  0394                     _IOCBP	set	916
  2369  1CB2                     _IOCBF2	set	7346
  2370                           
  2371                           ; #config settings
  2372  0000                     
  2373                           	psect	cinit
  2374  0015                     start_initialization:	
  2375  0015                     __initialization:	
  2376                           
  2377                           ; Clear objects allocated to BITCOMMON
  2378  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2379                           
  2380                           ; Clear objects allocated to COMMON
  2381  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2382  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2383  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK0
  2386  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK1
  2389  001A  30A0               	movlw	low __pbssBANK1
  2390  001B  0084               	movwf	4
  2391  001C  3000               	movlw	high __pbssBANK1
  2392  001D  0085               	movwf	5
  2393  001E  3049               	movlw	73
  2394  001F  319C  243E  3180   	fcall	clear_ram0
  2395                           
  2396                           ; Clear objects allocated to BANK2
  2397  0022  3020               	movlw	low __pbssBANK2
  2398  0023  0084               	movwf	4
  2399  0024  3001               	movlw	high __pbssBANK2
  2400  0025  0085               	movwf	5
  2401  0026  304D               	movlw	77
  2402  0027  319C  243E  3180   	fcall	clear_ram0
  2403                           
  2404                           ; Clear objects allocated to BANK3
  2405  002A  30A0               	movlw	low __pbssBANK3
  2406  002B  0084               	movwf	4
  2407  002C  3001               	movlw	high __pbssBANK3
  2408  002D  0085               	movwf	5
  2409  002E  304C               	movlw	76
  2410  002F  319C  243E  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Initialize objects allocated to BANK4
  2413  0032  30BE               	movlw	low __pidataBANK4
  2414  0033  0084               	movwf	4
  2415  0034  309F               	movlw	(high __pidataBANK4)| (0+128)
  2416  0035  0085               	movwf	5
  2417  0036  3020               	movlw	low __pdataBANK4
  2418  0037  0086               	movwf	6
  2419  0038  3002               	movlw	high __pdataBANK4
  2420  0039  0087               	movwf	7
  2421  003A  3020               	movlw	32
  2422  003B  319C  2438         	fcall	init_ram
  2423  003D                     end_of_initialization:	
  2424                           ;End of C runtime variable initialization code
  2425                           
  2426  003D                     __end_of__initialization:	
  2427  003D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2428  003E  0020               	movlb	0
  2429  003F  3188  2877         	ljmp	_main	;jump to C main() function
  2430                           
  2431                           	psect	bitbssCOMMON
  2432  03C0                     __pbitbssCOMMON:	
  2433  03C0                     _Receive_OK:	
  2434  03C0                     	ds	1
  2435  03C1                     _Transceive_OK:	
  2436  03C1                     	ds	1
  2437                           
  2438                           	psect	bssCOMMON
  2439  0075                     __pbssCOMMON:	
  2440  0075                     _DelayOff:	
  2441  0075                     	ds	1
  2442  0076                     _DimmerLightsIntr:	
  2443  0076                     	ds	1
  2444  0077                     _Sw:	
  2445  0077                     	ds	1
  2446                           
  2447                           	psect	bssBANK0
  2448  006F                     __pbssBANK0:	
  2449  006F                     _DimmerLights:	
  2450  006F                     	ds	1
  2451                           
  2452                           	psect	bssBANK1
  2453  00A0                     __pbssBANK1:	
  2454  00A0                     _myMain:	
  2455  00A0                     	ds	14
  2456  00AE                     _Buz1:	
  2457  00AE                     	ds	12
  2458  00BA                     _RF1:	
  2459  00BA                     	ds	12
  2460  00C6                     _Dimmer:	
  2461  00C6                     	ds	3
  2462  00C9                     _WDT:	
  2463  00C9                     	ds	2
  2464  00CB                     _CRC:	
  2465  00CB                     	ds	1
  2466  00CC                     _DimmerLights11:	
  2467  00CC                     	ds	1
  2468  00CD                     _DimmerLightsIntrIOC:	
  2469  00CD                     	ds	1
  2470  00CE                     _LED:	
  2471  00CE                     	ds	1
  2472  00CF                     _RSSI:	
  2473  00CF                     	ds	1
  2474  00D0                     _Rx_Length:	
  2475  00D0                     	ds	1
  2476  00D1                     _SPI0Buffer:	
  2477  00D1                     	ds	1
  2478  00D2                     _SwDetect:	
  2479  00D2                     	ds	1
  2480  00D3                     _Tx_Length:	
  2481  00D3                     	ds	1
  2482  00D4                     _r_address:	
  2483  00D4                     	ds	1
  2484  00D5                     _r_data:	
  2485  00D5                     	ds	1
  2486  00D6                     _s_data:	
  2487  00D6                     	ds	1
  2488  00D7                     _Temp:	
  2489  00D7                     	ds	18
  2490                           
  2491                           	psect	bssBANK2
  2492  0120                     __pbssBANK2:	
  2493  0120                     _Timer1:	
  2494  0120                     	ds	3
  2495  0123                     _RF_Count:	
  2496  0123                     	ds	2
  2497  0125                     _Load:	
  2498  0125                     	ds	46
  2499  0153                     _DimmerLights1:	
  2500  0153                     	ds	17
  2501  0164                     _DlySw1:	
  2502  0164                     	ds	5
  2503  0169                     _VarErrLED:	
  2504  0169                     	ds	4
  2505                           
  2506                           	psect	bssBANK3
  2507  01A0                     __pbssBANK3:	
  2508  01A0                     _RF_Data:	
  2509  01A0                     	ds	30
  2510  01BE                     _Memory:	
  2511  01BE                     	ds	37
  2512  01E3                     _Sw1:	
  2513  01E3                     	ds	9
  2514                           
  2515                           	psect	dataBANK4
  2516  0220                     __pdataBANK4:	
  2517  0220                     __product:	
  2518  0220                     	ds	32
  2519                           
  2520                           	psect	clrtext
  2521  1C3E                     clear_ram0:	
  2522                           ;	Called with FSR0 containing the base address, and
  2523                           ;	WREG with the size to clear
  2524                           
  2525  1C3E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2526  1C3F                     clrloop0:	
  2527  1C3F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2528  1C40  3101               	addfsr 0,1
  2529  1C41  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2530  1C42  2C3F               	goto	clrloop0	;have we reached the end yet?
  2531  1C43  3400               	retlw	0	;all done for this memory range, return
  2532                           
  2533                           	psect	inittext
  2534  1C38                     init_ram:	
  2535  1C38  00FE               	movwf	126
  2536  1C39                     initloop:	
  2537  1C39  0012               	moviw fsr0++
  2538  1C3A  001E               	movwi fsr1++
  2539  1C3B  0BFE               	decfsz	126,f
  2540  1C3C  2C39               	goto	initloop
  2541  1C3D  3400               	retlw	0
  2542                           
  2543                           	psect	cstackBANK3
  2544  01EC                     __pcstackBANK3:	
  2545  01EC                     ?_main:	
  2546  01EC                     main@argc:	
  2547                           ; 2 bytes @ 0x0
  2548                           
  2549                           
  2550                           ; 2 bytes @ 0x0
  2551  01EC                     	ds	2
  2552  01EE                     main@argv:	
  2553                           
  2554                           ; 2 bytes @ 0x2
  2555  01EE                     	ds	2
  2556                           
  2557                           	psect	cstackBANK2
  2558  016D                     __pcstackBANK2:	
  2559  016D                     setRF_Main@loop_f:	
  2560                           
  2561                           ; 1 bytes @ 0x0
  2562  016D                     	ds	1
  2563  016E                     setRF_Main@Receive_OK:	
  2564                           
  2565                           ; 1 bytes @ 0x1
  2566  016E                     	ds	1
  2567  016F                     setRF_Main@error:	
  2568                           
  2569                           ; 1 bytes @ 0x2
  2570  016F                     	ds	1
  2571                           
  2572                           	psect	cstackBANK1
  2573  00E9                     __pcstackBANK1:	
  2574  00E9                     setDimmerLights_ErrorClose@count:	
  2575  00E9                     Exception_Main@count:	
  2576                           ; 1 bytes @ 0x0
  2577                           
  2578                           
  2579                           ; 1 bytes @ 0x0
  2580  00E9                     	ds	1
  2581  00EA                     setDimmerLights_ErrorClose@lights:	
  2582  00EA                     Exception_Main@error:	
  2583                           ; 1 bytes @ 0x1
  2584                           
  2585                           
  2586                           ; 1 bytes @ 0x1
  2587  00EA                     	ds	1
  2588  00EB                     setDimmerLights_ErrorClose@i:	
  2589  00EB                     Exception_Main@i:	
  2590                           ; 2 bytes @ 0x2
  2591                           
  2592                           
  2593                           ; 2 bytes @ 0x2
  2594  00EB                     	ds	2
  2595  00ED                     getRxData@error:	
  2596  00ED                     Exception_Main@i_3438:	
  2597                           ; 1 bytes @ 0x4
  2598                           
  2599                           
  2600                           ; 2 bytes @ 0x4
  2601  00ED                     	ds	1
  2602  00EE                     ??_setRF_Main:	
  2603                           
  2604                           ; 0 bytes @ 0x5
  2605  00EE                     	ds	1
  2606  00EF                     Exception_Main@lights:	
  2607                           
  2608                           ; 1 bytes @ 0x6
  2609  00EF                     	ds	1
  2610                           
  2611                           	psect	cstackCOMMON
  2612  0070                     __pcstackCOMMON:	
  2613  0070                     ?_Timeout_Counter:	
  2614  0070                     ?_set_TimeoutCleared:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_WriteByte:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_WriteCommand:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ReadStatus:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_ReadByte:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_PowerRST:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_InitSetREG:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_InitPATable:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_ClearTXFIFO:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_ClearRXFIFO:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_FrequencyCabr:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_CC2500_SIDLEMode:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DlyOff_Initialization:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_DlyOff_Main:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setDimmerLights_ErrorClose:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setDimmerLights_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_Main:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setDimmerLights_Line:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setTxData:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setLED_Initialization:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setLED_Main:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_Fosc_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_IO_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_TMR1_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_ADC_Set:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_IOC_Set:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_WDT_Set:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_IOC_ISR:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_TMR1_ISR:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Flash_Memory_Write:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Flash_Memory_Modify:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_WDT_Clearing:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_myMain_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Temp_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Load_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Switch_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_RF_Initialization:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_getLoad_AD:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_getTemp_AD:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_my_MainTimer:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Temp_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Load_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Switch_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_RF_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_Exception_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setLoad_AH_AL_Restore:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setTemp_Initialization:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setTemp_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_Initialization:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setRF_Main:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_RF_RxDisable:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_getRxData:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setLog_Code:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setControl_Lights_Table:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRFSW_Control:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setRFSW_AdjControl:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setRF_DimmerValue:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setSw_Initialization:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setSw_Main:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_Buzzer_Initialization:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_Buzzer_Main:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_CC2500_TxData:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_CC2500_RxData:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_CC2500_PowerOnInitial:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_DelayOffPointSelect:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DelayOff_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DelayOff_Main:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_DimmerIntrIOCPointSelect:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ??_DimmerIntrIOCPointSelect:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerIntrPointSelect:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ??_DimmerIntrPointSelect:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_setDimmerLights_IntrControl:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLightsPointSelect:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DimmerLights_Initialization:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setDimmerLights_SwOn:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setDimmerLights_SwOff:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_setDimmerLights_AdjOn:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_DimmerLights_Main:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_setDimmerLights_AdjRF:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_LedPointSelect:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_LED_Initialization:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_LED_Main:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_Mcu_Initialization:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_ISR:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_setDimmerReClock:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_Flash_Memory_Initialization:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Main:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Flash_Memory_Unlock:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_Flash_Memory_Erasing:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_setMemory_Modify:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_setMemory_LoopSave:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_WDT_Main:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_setRF_Learn:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_TouchPower:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_SwPointSelect:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_DelayTimejudge:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0070                     ?_getDimmerLights_Allow_Condition:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getLoad_OK:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getMain_All_Error_Status:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getMain_LightsStatus:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_setPercentValue:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getPercentValue:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_Flash_Memory_Read:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getRF_KeyStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getSw_KeyStatus:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDelayOff_GO:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmer_LoadGO:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmerLights_Line:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getDimmerLights_Status:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getAll_DimmerLights_AdjSw:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getDimmer_Load_Status:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_getMain_Lights_Count:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     getDimmerLights_Allow_Condition@lights:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     getSw_KeyStatus@sw:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959                           
  2960                           ; 1 bytes @ 0x0
  2961  0070                     	ds	1
  2962  0071                     DimmerIntrIOCPointSelect@lights:	
  2963  0071                     DimmerIntrPointSelect@lights:	
  2964                           ; 1 bytes @ 0x1
  2965                           
  2966                           
  2967                           ; 1 bytes @ 0x1
  2968  0071                     	ds	1
  2969  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2970  0072                     ??_setDimmerLights_IntrControl:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2974                           ; 0 bytes @ 0x2
  2975                           
  2976                           
  2977                           ; 1 bytes @ 0x2
  2978  0072                     	ds	1
  2979  0073                     ??_IOC_ISR:	
  2980  0073                     ??_setDimmerReClock:	
  2981                           ; 0 bytes @ 0x3
  2982                           
  2983  0073                     setDimmerLights_IntrControl@lights:	
  2984                           ; 0 bytes @ 0x3
  2985                           
  2986                           
  2987                           ; 1 bytes @ 0x3
  2988  0073                     	ds	1
  2989  0074                     ??_TMR1_ISR:	
  2990  0074                     ??_ISR:	
  2991                           ; 0 bytes @ 0x4
  2992                           
  2993                           
  2994                           ; 0 bytes @ 0x4
  2995  0074                     	ds	1
  2996                           
  2997                           	psect	cstackBANK0
  2998  0020                     __pcstackBANK0:	
  2999  0020                     ??_Timeout_Counter:	
  3000  0020                     ??_set_TimeoutCleared:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_CC2500_WriteByte:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ??_CC2500_ReadByte:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ?_DelayTime_1us:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_getLoad_OK:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_getMain_All_Error_Status:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_getMain_LightsStatus:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_setDimmerLights_Line:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_setTxData:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_Fosc_Set:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_IO_Set:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_TMR1_Set:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_ADC_Set:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_IOC_Set:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_WDT_Set:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_Flash_Memory_Read:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ?_setMemory_Data:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_Flash_Memory_Write:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_WDT_Clearing:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_myMain_Initialization:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_Temp_Initialization:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_setLoad_AH_AL_Restore:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_setTemp_Initialization:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_setRF_Initialization:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_getRF_KeyStatus:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_getSw_KeyStatus:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_Buzzer_Initialization:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_Buzzer_Main:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_DelayOffPointSelect:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_DimmerLightsPointSelect:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_getDimmer_LoadGO:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_getDimmerLights_Line:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_getDimmer_Load_Status:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_LedPointSelect:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_Flash_Memory_Unlock:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_Flash_Memory_Erasing:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_setMemory_Modify:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_setMemory_LoopSave:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_WDT_Main:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_getMain_Lights_Count:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_setRF_Learn:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_TouchPower:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_SwPointSelect:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ?___bmul:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ?_getBuz_GO:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135  0020                     ?_getAD:	
  3136                           ; 2 bytes @ 0x0
  3137                           
  3138  0020                     ?___wmul:	
  3139                           ; 2 bytes @ 0x0
  3140                           
  3141  0020                     ?___awdiv:	
  3142                           ; 2 bytes @ 0x0
  3143                           
  3144  0020                     ?___lwdiv:	
  3145                           ; 2 bytes @ 0x0
  3146                           
  3147  0020                     ?___ftpack:	
  3148                           ; 2 bytes @ 0x0
  3149                           
  3150  0020                     getDimmer_LoadGO@loadgo:	
  3151                           ; 3 bytes @ 0x0
  3152                           
  3153  0020                     setDimmerLights_Line@lights:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0020                     getDimmerLights_Line@line:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0020                     getDimmer_Load_Status@status:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0020                     getAD@adcon1:	
  3163                           ; 1 bytes @ 0x0
  3164                           
  3165  0020                     setMemory_Data@data:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0020                     getMain_LightsStatus@status:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0020                     getMain_Lights_Count@count:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0020                     getLoad_OK@ok:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0020                     ___bmul@multiplicand:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0020                     DelayTime_1us@count:	
  3181                           ; 1 bytes @ 0x0
  3182                           
  3183  0020                     ___wmul@multiplier:	
  3184                           ; 2 bytes @ 0x0
  3185                           
  3186  0020                     ___awdiv@divisor:	
  3187                           ; 2 bytes @ 0x0
  3188                           
  3189  0020                     ___lwdiv@divisor:	
  3190                           ; 2 bytes @ 0x0
  3191                           
  3192  0020                     ___ftpack@arg:	
  3193                           ; 2 bytes @ 0x0
  3194                           
  3195                           
  3196                           ; 3 bytes @ 0x0
  3197  0020                     	ds	1
  3198  0021                     ??_getDimmerLights_Allow_Condition:	
  3199  0021                     ??_setMemory_Data:	
  3200                           ; 0 bytes @ 0x1
  3201                           
  3202  0021                     ??_RF_Initialization:	
  3203                           ; 0 bytes @ 0x1
  3204                           
  3205  0021                     ??_Mcu_Initialization:	
  3206                           ; 0 bytes @ 0x1
  3207                           
  3208  0021                     ??___bmul:	
  3209                           ; 0 bytes @ 0x1
  3210                           
  3211  0021                     CC2500_WriteByte@loop_a:	
  3212                           ; 0 bytes @ 0x1
  3213                           
  3214  0021                     CC2500_ReadByte@loop_b:	
  3215                           ; 1 bytes @ 0x1
  3216                           
  3217  0021                     DelayOffPointSelect@sw:	
  3218                           ; 1 bytes @ 0x1
  3219                           
  3220  0021                     DimmerLightsPointSelect@lights:	
  3221                           ; 1 bytes @ 0x1
  3222                           
  3223  0021                     LedPointSelect@led:	
  3224                           ; 1 bytes @ 0x1
  3225                           
  3226  0021                     Flash_Memory_Read@i:	
  3227                           ; 1 bytes @ 0x1
  3228                           
  3229  0021                     Flash_Memory_Write@i:	
  3230                           ; 1 bytes @ 0x1
  3231                           
  3232  0021                     setMemory_Modify@command:	
  3233                           ; 1 bytes @ 0x1
  3234                           
  3235  0021                     setMemory_LoopSave@command:	
  3236                           ; 1 bytes @ 0x1
  3237                           
  3238  0021                     getMain_Lights_Count@status1:	
  3239                           ; 1 bytes @ 0x1
  3240                           
  3241  0021                     setLoad_AH_AL_Restore@i:	
  3242                           ; 1 bytes @ 0x1
  3243                           
  3244  0021                     setRF_Learn@command:	
  3245                           ; 1 bytes @ 0x1
  3246                           
  3247  0021                     getRF_KeyStatus@key:	
  3248                           ; 1 bytes @ 0x1
  3249                           
  3250  0021                     SwPointSelect@sw:	
  3251                           ; 1 bytes @ 0x1
  3252                           
  3253  0021                     getSw_KeyStatus@status:	
  3254                           ; 1 bytes @ 0x1
  3255                           
  3256  0021                     _getMain_All_Error_Status$3424:	
  3257                           ; 1 bytes @ 0x1
  3258                           
  3259                           
  3260                           ; 2 bytes @ 0x1
  3261  0021                     	ds	1
  3262  0022                     ??_CC2500_WriteCommand:	
  3263  0022                     ??_CC2500_ReadStatus:	
  3264                           ; 0 bytes @ 0x2
  3265                           
  3266  0022                     ??_DelayTime_1us:	
  3267                           ; 0 bytes @ 0x2
  3268                           
  3269  0022                     ?_CC2500_WriteREG:	
  3270                           ; 0 bytes @ 0x2
  3271                           
  3272  0022                     ??_DlyOff_Initialization:	
  3273                           ; 0 bytes @ 0x2
  3274                           
  3275  0022                     ??_setDimmerLights_Initialization:	
  3276                           ; 0 bytes @ 0x2
  3277                           
  3278  0022                     ?_setLED:	
  3279                           ; 0 bytes @ 0x2
  3280                           
  3281  0022                     ??_setLED_Main:	
  3282                           ; 0 bytes @ 0x2
  3283                           
  3284  0022                     ??_Load_Initialization:	
  3285                           ; 0 bytes @ 0x2
  3286                           
  3287  0022                     ??_getBuz_GO:	
  3288                           ; 0 bytes @ 0x2
  3289                           
  3290  0022                     ??_getDelayOff_GO:	
  3291                           ; 0 bytes @ 0x2
  3292                           
  3293  0022                     ??_getDimmerLights_Status:	
  3294                           ; 0 bytes @ 0x2
  3295                           
  3296  0022                     ??_getAll_DimmerLights_AdjSw:	
  3297                           ; 0 bytes @ 0x2
  3298                           
  3299  0022                     CC2500_WriteREG@value:	
  3300                           ; 0 bytes @ 0x2
  3301                           
  3302  0022                     DlyOff_Initialization@sw:	
  3303                           ; 1 bytes @ 0x2
  3304                           
  3305  0022                     getDelayOff_GO@sw:	
  3306                           ; 1 bytes @ 0x2
  3307                           
  3308  0022                     getDimmerLights_Allow_Condition@allow:	
  3309                           ; 1 bytes @ 0x2
  3310                           
  3311  0022                     getDimmerLights_Status@lights:	
  3312                           ; 1 bytes @ 0x2
  3313                           
  3314  0022                     setLED@command:	
  3315                           ; 1 bytes @ 0x2
  3316                           
  3317  0022                     Flash_Memory_Read@address:	
  3318                           ; 1 bytes @ 0x2
  3319                           
  3320  0022                     setMemory_Data@address:	
  3321                           ; 1 bytes @ 0x2
  3322                           
  3323  0022                     _getRF_KeyStatus$5048:	
  3324                           ; 1 bytes @ 0x2
  3325                           
  3326  0022                     _getSw_KeyStatus$6016:	
  3327                           ; 1 bytes @ 0x2
  3328                           
  3329  0022                     ___bmul@product:	
  3330                           ; 1 bytes @ 0x2
  3331                           
  3332  0022                     DelayTime_1us@i:	
  3333                           ; 1 bytes @ 0x2
  3334                           
  3335  0022                     ___wmul@multiplicand:	
  3336                           ; 2 bytes @ 0x2
  3337                           
  3338  0022                     ___awdiv@dividend:	
  3339                           ; 2 bytes @ 0x2
  3340                           
  3341  0022                     ___lwdiv@dividend:	
  3342                           ; 2 bytes @ 0x2
  3343                           
  3344                           
  3345                           ; 2 bytes @ 0x2
  3346  0022                     	ds	1
  3347  0023                     ??_CC2500_WriteREG:	
  3348  0023                     ??_setLED:	
  3349                           ; 0 bytes @ 0x3
  3350                           
  3351  0023                     ??_DelayOff_Initialization:	
  3352                           ; 0 bytes @ 0x3
  3353                           
  3354  0023                     ??_getAD:	
  3355                           ; 0 bytes @ 0x3
  3356                           
  3357  0023                     CC2500_WriteCommand@command:	
  3358                           ; 0 bytes @ 0x3
  3359                           
  3360  0023                     CC2500_ReadStatus@status_addr:	
  3361                           ; 1 bytes @ 0x3
  3362                           
  3363  0023                     getDelayOff_GO@go:	
  3364                           ; 1 bytes @ 0x3
  3365                           
  3366  0023                     setDimmerLights_Initialization@lights:	
  3367                           ; 1 bytes @ 0x3
  3368                           
  3369  0023                     _getDimmerLights_Allow_Condition$2172:	
  3370                           ; 1 bytes @ 0x3
  3371                           
  3372  0023                     getDimmerLights_Status@status:	
  3373                           ; 1 bytes @ 0x3
  3374                           
  3375  0023                     getAll_DimmerLights_AdjSw@count:	
  3376                           ; 1 bytes @ 0x3
  3377                           
  3378  0023                     setLED@led:	
  3379                           ; 1 bytes @ 0x3
  3380                           
  3381  0023                     getAD@adcon0:	
  3382                           ; 1 bytes @ 0x3
  3383                           
  3384  0023                     Flash_Memory_Read@ret:	
  3385                           ; 1 bytes @ 0x3
  3386                           
  3387  0023                     ___bmul@multiplier:	
  3388                           ; 1 bytes @ 0x3
  3389                           
  3390  0023                     ___ftpack@exp:	
  3391                           ; 1 bytes @ 0x3
  3392                           
  3393  0023                     _getMain_All_Error_Status$3425:	
  3394                           ; 1 bytes @ 0x3
  3395                           
  3396                           
  3397                           ; 2 bytes @ 0x3
  3398  0023                     	ds	1
  3399  0024                     ??_CC2500_ClearTXFIFO:	
  3400  0024                     ??_CC2500_ClearRXFIFO:	
  3401                           ; 0 bytes @ 0x4
  3402                           
  3403  0024                     ??_CC2500_SIDLEMode:	
  3404                           ; 0 bytes @ 0x4
  3405                           
  3406  0024                     ??_DelayTimejudge:	
  3407                           ; 0 bytes @ 0x4
  3408                           
  3409  0024                     ??_setLED_Initialization:	
  3410                           ; 0 bytes @ 0x4
  3411                           
  3412  0024                     ??_Flash_Memory_Modify:	
  3413                           ; 0 bytes @ 0x4
  3414                           
  3415  0024                     ??_getLoad_AD:	
  3416                           ; 0 bytes @ 0x4
  3417                           
  3418  0024                     ??_getTemp_AD:	
  3419                           ; 0 bytes @ 0x4
  3420                           
  3421  0024                     ??_RF_RxDisable:	
  3422                           ; 0 bytes @ 0x4
  3423                           
  3424  0024                     ??_setSw_Initialization:	
  3425                           ; 0 bytes @ 0x4
  3426                           
  3427  0024                     ??_CC2500_TxData:	
  3428                           ; 0 bytes @ 0x4
  3429                           
  3430  0024                     ??_CC2500_RxData:	
  3431                           ; 0 bytes @ 0x4
  3432                           
  3433  0024                     ??_DimmerLights_Initialization:	
  3434                           ; 0 bytes @ 0x4
  3435                           
  3436  0024                     ??_setDimmerLights_AdjOn:	
  3437                           ; 0 bytes @ 0x4
  3438                           
  3439  0024                     ??___wmul:	
  3440                           ; 0 bytes @ 0x4
  3441                           
  3442  0024                     ??___awdiv:	
  3443                           ; 0 bytes @ 0x4
  3444                           
  3445  0024                     ??___lwdiv:	
  3446                           ; 0 bytes @ 0x4
  3447                           
  3448  0024                     CC2500_WriteREG@w_addr:	
  3449                           ; 0 bytes @ 0x4
  3450                           
  3451  0024                     setDimmerLights_AdjOn@sw:	
  3452                           ; 1 bytes @ 0x4
  3453                           
  3454  0024                     setLED_Initialization@led:	
  3455                           ; 1 bytes @ 0x4
  3456                           
  3457  0024                     setLED_Main@led:	
  3458                           ; 1 bytes @ 0x4
  3459                           
  3460  0024                     setSw_Initialization@sw:	
  3461                           ; 1 bytes @ 0x4
  3462                           
  3463  0024                     ___ftpack@sign:	
  3464                           ; 1 bytes @ 0x4
  3465                           
  3466  0024                     getBuz_GO@i:	
  3467                           ; 1 bytes @ 0x4
  3468                           
  3469  0024                     DelayTime_1us@j:	
  3470                           ; 2 bytes @ 0x4
  3471                           
  3472  0024                     getAll_DimmerLights_AdjSw@i:	
  3473                           ; 2 bytes @ 0x4
  3474                           
  3475  0024                     ___wmul@product:	
  3476                           ; 2 bytes @ 0x4
  3477                           
  3478                           
  3479                           ; 2 bytes @ 0x4
  3480  0024                     	ds	1
  3481  0025                     ??_CC2500_InitSetREG:	
  3482  0025                     ??_CC2500_InitPATable:	
  3483                           ; 0 bytes @ 0x5
  3484                           
  3485  0025                     ??_Switch_Initialization:	
  3486                           ; 0 bytes @ 0x5
  3487                           
  3488  0025                     ??___ftpack:	
  3489                           ; 0 bytes @ 0x5
  3490                           
  3491  0025                     ??_LED_Initialization:	
  3492                           ; 0 bytes @ 0x5
  3493                           
  3494  0025                     ??_LED_Main:	
  3495                           ; 0 bytes @ 0x5
  3496                           
  3497  0025                     CC2500_TxData@loop_e:	
  3498                           ; 0 bytes @ 0x5
  3499                           
  3500  0025                     CC2500_RxData@loop_f:	
  3501                           ; 1 bytes @ 0x5
  3502                           
  3503  0025                     Flash_Memory_Modify@i:	
  3504                           ; 1 bytes @ 0x5
  3505                           
  3506  0025                     getMain_All_Error_Status@command:	
  3507                           ; 1 bytes @ 0x5
  3508                           
  3509  0025                     getTemp_AD@channel:	
  3510                           ; 1 bytes @ 0x5
  3511                           
  3512  0025                     ___awdiv@counter:	
  3513                           ; 1 bytes @ 0x5
  3514                           
  3515  0025                     ___lwdiv@counter:	
  3516                           ; 1 bytes @ 0x5
  3517                           
  3518                           
  3519                           ; 1 bytes @ 0x5
  3520  0025                     	ds	1
  3521  0026                     ??_CC2500_PowerRST:	
  3522  0026                     ??_CC2500_FrequencyCabr:	
  3523                           ; 0 bytes @ 0x6
  3524                           
  3525  0026                     ??_Flash_Memory_Main:	
  3526                           ; 0 bytes @ 0x6
  3527                           
  3528  0026                     CC2500_InitSetREG@temp1:	
  3529                           ; 0 bytes @ 0x6
  3530                           
  3531  0026                     CC2500_InitPATable@temp:	
  3532                           ; 1 bytes @ 0x6
  3533                           
  3534  0026                     DelayTimejudge@i:	
  3535                           ; 1 bytes @ 0x6
  3536                           
  3537  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3538                           ; 1 bytes @ 0x6
  3539                           
  3540  0026                     getMain_All_Error_Status@status:	
  3541                           ; 1 bytes @ 0x6
  3542                           
  3543  0026                     getLoad_AD@channel:	
  3544                           ; 1 bytes @ 0x6
  3545                           
  3546  0026                     ___awdiv@sign:	
  3547                           ; 1 bytes @ 0x6
  3548                           
  3549  0026                     ___lwdiv@quotient:	
  3550                           ; 1 bytes @ 0x6
  3551                           
  3552                           
  3553                           ; 2 bytes @ 0x6
  3554  0026                     	ds	1
  3555  0027                     CC2500_InitSetREG@temp2:	
  3556  0027                     CC2500_InitPATable@loop_d:	
  3557                           ; 1 bytes @ 0x7
  3558                           
  3559  0027                     DelayTimejudge@j:	
  3560                           ; 1 bytes @ 0x7
  3561                           
  3562  0027                     getLoad_AD@k:	
  3563                           ; 1 bytes @ 0x7
  3564                           
  3565  0027                     ___awdiv@quotient:	
  3566                           ; 1 bytes @ 0x7
  3567                           
  3568                           
  3569                           ; 2 bytes @ 0x7
  3570  0027                     	ds	1
  3571  0028                     ??_Load_Main:	
  3572  0028                     ?___awtoft:	
  3573                           ; 0 bytes @ 0x8
  3574                           
  3575  0028                     CC2500_InitSetREG@loop_c:	
  3576                           ; 3 bytes @ 0x8
  3577                           
  3578  0028                     DelayTimejudge@k:	
  3579                           ; 1 bytes @ 0x8
  3580                           
  3581  0028                     getLoad_AD@j:	
  3582                           ; 1 bytes @ 0x8
  3583                           
  3584  0028                     ___awtoft@c:	
  3585                           ; 1 bytes @ 0x8
  3586                           
  3587                           
  3588                           ; 2 bytes @ 0x8
  3589  0028                     	ds	1
  3590  0029                     ?_setBuz:	
  3591  0029                     ??_CC2500_PowerOnInitial:	
  3592                           ; 0 bytes @ 0x9
  3593                           
  3594  0029                     DelayTimejudge@value:	
  3595                           ; 0 bytes @ 0x9
  3596                           
  3597  0029                     getLoad_AD@i:	
  3598                           ; 1 bytes @ 0x9
  3599                           
  3600  0029                     setBuz@time:	
  3601                           ; 1 bytes @ 0x9
  3602                           
  3603                           
  3604                           ; 2 bytes @ 0x9
  3605  0029                     	ds	1
  3606  002A                     Load_Main@error:	
  3607                           
  3608                           ; 1 bytes @ 0xA
  3609  002A                     	ds	1
  3610  002B                     ??_setBuz:	
  3611  002B                     ??___awtoft:	
  3612                           ; 0 bytes @ 0xB
  3613                           
  3614  002B                     Load_Main@Load_Status:	
  3615                           ; 0 bytes @ 0xB
  3616                           
  3617                           
  3618                           ; 1 bytes @ 0xB
  3619  002B                     	ds	1
  3620  002C                     setBuz@count:	
  3621  002C                     Load_Main@i:	
  3622                           ; 1 bytes @ 0xC
  3623                           
  3624                           
  3625                           ; 2 bytes @ 0xC
  3626  002C                     	ds	1
  3627  002D                     ??_my_MainTimer:	
  3628  002D                     ??_setDimmerLights_SwOn:	
  3629                           ; 0 bytes @ 0xD
  3630                           
  3631  002D                     setDimmerLights_SwOn@sw:	
  3632                           ; 0 bytes @ 0xD
  3633                           
  3634  002D                     ___awtoft@sign:	
  3635                           ; 1 bytes @ 0xD
  3636                           
  3637                           
  3638                           ; 1 bytes @ 0xD
  3639  002D                     	ds	1
  3640  002E                     ?___ftdiv:	
  3641  002E                     ?___ftmul:	
  3642                           ; 3 bytes @ 0xE
  3643                           
  3644  002E                     setDimmerLights_SwOn@idle:	
  3645                           ; 3 bytes @ 0xE
  3646                           
  3647  002E                     ___ftdiv@f2:	
  3648                           ; 1 bytes @ 0xE
  3649                           
  3650  002E                     ___ftmul@f1:	
  3651                           ; 3 bytes @ 0xE
  3652                           
  3653                           
  3654                           ; 3 bytes @ 0xE
  3655  002E                     	ds	3
  3656  0031                     ___ftdiv@f1:	
  3657  0031                     ___ftmul@f2:	
  3658                           ; 3 bytes @ 0x11
  3659                           
  3660                           
  3661                           ; 3 bytes @ 0x11
  3662  0031                     	ds	3
  3663  0034                     ??___ftdiv:	
  3664  0034                     ??___ftmul:	
  3665                           ; 0 bytes @ 0x14
  3666                           
  3667                           
  3668                           ; 0 bytes @ 0x14
  3669  0034                     	ds	4
  3670  0038                     ___ftdiv@cntr:	
  3671  0038                     ___ftmul@exp:	
  3672                           ; 1 bytes @ 0x18
  3673                           
  3674                           
  3675                           ; 1 bytes @ 0x18
  3676  0038                     	ds	1
  3677  0039                     ___ftdiv@f3:	
  3678  0039                     ___ftmul@f3_as_product:	
  3679                           ; 3 bytes @ 0x19
  3680                           
  3681                           
  3682                           ; 3 bytes @ 0x19
  3683  0039                     	ds	3
  3684  003C                     ___ftdiv@exp:	
  3685  003C                     ___ftmul@cntr:	
  3686                           ; 1 bytes @ 0x1C
  3687                           
  3688                           
  3689                           ; 1 bytes @ 0x1C
  3690  003C                     	ds	1
  3691  003D                     ___ftdiv@sign:	
  3692  003D                     ___ftmul@sign:	
  3693                           ; 1 bytes @ 0x1D
  3694                           
  3695                           
  3696                           ; 1 bytes @ 0x1D
  3697  003D                     	ds	1
  3698  003E                     ?___ftneg:	
  3699  003E                     ___ftneg@f1:	
  3700                           ; 3 bytes @ 0x1E
  3701                           
  3702                           
  3703                           ; 3 bytes @ 0x1E
  3704  003E                     	ds	3
  3705  0041                     ??___ftneg:	
  3706  0041                     ?___ftadd:	
  3707                           ; 0 bytes @ 0x21
  3708                           
  3709  0041                     ___ftadd@f1:	
  3710                           ; 3 bytes @ 0x21
  3711                           
  3712                           
  3713                           ; 3 bytes @ 0x21
  3714  0041                     	ds	3
  3715  0044                     ___ftadd@f2:	
  3716                           
  3717                           ; 3 bytes @ 0x24
  3718  0044                     	ds	3
  3719  0047                     ??___ftadd:	
  3720                           
  3721                           ; 0 bytes @ 0x27
  3722  0047                     	ds	4
  3723  004B                     ___ftadd@sign:	
  3724                           
  3725                           ; 1 bytes @ 0x2B
  3726  004B                     	ds	1
  3727  004C                     ___ftadd@exp2:	
  3728                           
  3729                           ; 1 bytes @ 0x2C
  3730  004C                     	ds	1
  3731  004D                     ___ftadd@exp1:	
  3732                           
  3733                           ; 1 bytes @ 0x2D
  3734  004D                     	ds	1
  3735  004E                     ?___fttol:	
  3736  004E                     ___fttol@f1:	
  3737                           ; 4 bytes @ 0x2E
  3738                           
  3739                           
  3740                           ; 3 bytes @ 0x2E
  3741  004E                     	ds	4
  3742  0052                     ??___fttol:	
  3743                           
  3744                           ; 0 bytes @ 0x32
  3745  0052                     	ds	4
  3746  0056                     ___fttol@sign1:	
  3747                           
  3748                           ; 1 bytes @ 0x36
  3749  0056                     	ds	1
  3750  0057                     ___fttol@lval:	
  3751                           
  3752                           ; 4 bytes @ 0x37
  3753  0057                     	ds	4
  3754  005B                     ___fttol@exp1:	
  3755                           
  3756                           ; 1 bytes @ 0x3B
  3757  005B                     	ds	1
  3758  005C                     ??_setPercentValue:	
  3759  005C                     ??_getPercentValue:	
  3760                           ; 0 bytes @ 0x3C
  3761                           
  3762                           
  3763                           ; 0 bytes @ 0x3C
  3764  005C                     	ds	2
  3765  005E                     getPercentValue@value:	
  3766  005E                     setPercentValue@value:	
  3767                           ; 1 bytes @ 0x3E
  3768                           
  3769                           
  3770                           ; 1 bytes @ 0x3E
  3771  005E                     	ds	1
  3772  005F                     getPercentValue@i:	
  3773  005F                     setPercentValue@i:	
  3774                           ; 3 bytes @ 0x3F
  3775                           
  3776                           
  3777                           ; 3 bytes @ 0x3F
  3778  005F                     	ds	3
  3779  0062                     ?_setProductData:	
  3780  0062                     ??_setDimmerLights_AdjRF:	
  3781                           ; 0 bytes @ 0x42
  3782                           
  3783  0062                     ??_Flash_Memory_Initialization:	
  3784                           ; 0 bytes @ 0x42
  3785                           
  3786  0062                     setProductData@value:	
  3787                           ; 0 bytes @ 0x42
  3788                           
  3789                           
  3790                           ; 1 bytes @ 0x42
  3791  0062                     	ds	1
  3792  0063                     ??_setProductData:	
  3793  0063                     setDimmerLights_AdjRF@lights:	
  3794                           ; 0 bytes @ 0x43
  3795                           
  3796  0063                     Flash_Memory_Initialization@i:	
  3797                           ; 1 bytes @ 0x43
  3798                           
  3799                           
  3800                           ; 1 bytes @ 0x43
  3801  0063                     	ds	2
  3802  0065                     setProductData@address:	
  3803                           
  3804                           ; 1 bytes @ 0x45
  3805  0065                     	ds	1
  3806  0066                     ?_setRF_DimmerLights:	
  3807  0066                     ??_setTemp_Main:	
  3808                           ; 0 bytes @ 0x46
  3809                           
  3810  0066                     ??_setLog_Code:	
  3811                           ; 0 bytes @ 0x46
  3812                           
  3813  0066                     ??_setRF_DimmerValue:	
  3814                           ; 0 bytes @ 0x46
  3815                           
  3816  0066                     ?_setDelayOff_GO:	
  3817                           ; 0 bytes @ 0x46
  3818                           
  3819  0066                     setDelayOff_GO@command:	
  3820                           ; 0 bytes @ 0x46
  3821                           
  3822  0066                     setRF_DimmerLights@on:	
  3823                           ; 1 bytes @ 0x46
  3824                           
  3825                           
  3826                           ; 1 bytes @ 0x46
  3827  0066                     	ds	1
  3828  0067                     ??_setRF_DimmerLights:	
  3829  0067                     setDelayOff_GO@value:	
  3830                           ; 0 bytes @ 0x47
  3831                           
  3832  0067                     setRF_DimmerValue@lights:	
  3833                           ; 1 bytes @ 0x47
  3834                           
  3835                           
  3836                           ; 1 bytes @ 0x47
  3837  0067                     	ds	1
  3838  0068                     ??_setRFSW_AdjControl:	
  3839  0068                     ??_setDelayOff_GO:	
  3840                           ; 0 bytes @ 0x48
  3841                           
  3842  0068                     setTemp_Main@error:	
  3843                           ; 0 bytes @ 0x48
  3844                           
  3845                           
  3846                           ; 1 bytes @ 0x48
  3847  0068                     	ds	1
  3848  0069                     ??_Temp_Main:	
  3849  0069                     setDelayOff_GO@sw:	
  3850                           ; 0 bytes @ 0x49
  3851                           
  3852  0069                     setRF_DimmerLights@status:	
  3853                           ; 1 bytes @ 0x49
  3854                           
  3855                           
  3856                           ; 1 bytes @ 0x49
  3857  0069                     	ds	1
  3858  006A                     ??_setDimmerLights_SwOff:	
  3859  006A                     setDimmerLights_SwOff@sw:	
  3860                           ; 0 bytes @ 0x4A
  3861                           
  3862  006A                     setRFSW_AdjControl@status:	
  3863                           ; 1 bytes @ 0x4A
  3864                           
  3865  006A                     setRF_DimmerLights@lights:	
  3866                           ; 1 bytes @ 0x4A
  3867                           
  3868                           
  3869                           ; 1 bytes @ 0x4A
  3870  006A                     	ds	1
  3871  006B                     ??_setDimmerLights_ErrorClose:	
  3872  006B                     ?_setDimmerLights:	
  3873                           ; 0 bytes @ 0x4B
  3874                           
  3875  006B                     ?_setDimmerLights_Adj:	
  3876                           ; 0 bytes @ 0x4B
  3877                           
  3878  006B                     ??_Exception_Main:	
  3879                           ; 0 bytes @ 0x4B
  3880                           
  3881  006B                     ??_setRFSW_Control:	
  3882                           ; 0 bytes @ 0x4B
  3883                           
  3884  006B                     ??_setSw_Main:	
  3885                           ; 0 bytes @ 0x4B
  3886                           
  3887  006B                     setDimmerLights@status:	
  3888                           ; 0 bytes @ 0x4B
  3889                           
  3890  006B                     setDimmerLights_Adj@status:	
  3891                           ; 1 bytes @ 0x4B
  3892                           
  3893  006B                     setRFSW_AdjControl@sw:	
  3894                           ; 1 bytes @ 0x4B
  3895                           
  3896                           
  3897                           ; 1 bytes @ 0x4B
  3898  006B                     	ds	1
  3899  006C                     ??_DlyOff_Main:	
  3900  006C                     ??_setDimmerLights:	
  3901                           ; 0 bytes @ 0x4C
  3902                           
  3903  006C                     ??_setDimmerLights_Adj:	
  3904                           ; 0 bytes @ 0x4C
  3905                           
  3906  006C                     setRFSW_Control@status:	
  3907                           ; 0 bytes @ 0x4C
  3908                           
  3909                           
  3910                           ; 1 bytes @ 0x4C
  3911  006C                     	ds	1
  3912  006D                     setDimmerLights@lights:	
  3913  006D                     setDimmerLights_Adj@lights:	
  3914                           ; 1 bytes @ 0x4D
  3915                           
  3916  006D                     setRFSW_Control@sw:	
  3917                           ; 1 bytes @ 0x4D
  3918                           
  3919  006D                     setSw_Main@sw:	
  3920                           ; 1 bytes @ 0x4D
  3921                           
  3922                           
  3923                           ; 1 bytes @ 0x4D
  3924  006D                     	ds	1
  3925  006E                     ??_setDimmerLights_Main:	
  3926  006E                     ??_Switch_Main:	
  3927                           ; 0 bytes @ 0x4E
  3928                           
  3929  006E                     ??_getRxData:	
  3930                           ; 0 bytes @ 0x4E
  3931                           
  3932  006E                     ??_setControl_Lights_Table:	
  3933                           ; 0 bytes @ 0x4E
  3934                           
  3935  006E                     DlyOff_Main@sw:	
  3936                           ; 0 bytes @ 0x4E
  3937                           
  3938  006E                     setDimmerLights_Main@lights:	
  3939                           ; 1 bytes @ 0x4E
  3940                           
  3941                           
  3942                           ; 1 bytes @ 0x4E
  3943  006E                     	ds	1
  3944  006F                     ??_RF_Main:	
  3945  006F                     ??_DelayOff_Main:	
  3946                           ; 0 bytes @ 0x4F
  3947                           
  3948  006F                     ??_DimmerLights_Main:	
  3949                           ; 0 bytes @ 0x4F
  3950                           
  3951  006F                     ??_main:	
  3952                           ; 0 bytes @ 0x4F
  3953                           
  3954                           
  3955                           	psect	maintext
  3956  0877                     __pmaintext:	
  3957                           ; 0 bytes @ 0x4F
  3958 ;;
  3959 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3960 ;;
  3961 ;; *************** function _main *****************
  3962 ;; Defined at:
  3963 ;;		line 7 in file "../src/Main_B1.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  argc            2    0[BANK3 ] int 
  3966 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;		None
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  2    0[BANK3 ] int 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 17F/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3978 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3981 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3982 ;;Total ram usage:        4 bytes
  3983 ;; Hardware stack levels required when called:   15
  3984 ;; This function calls:
  3985 ;;		_Buzzer_Initialization
  3986 ;;		_Buzzer_Main
  3987 ;;		_CC2500_PowerOnInitial
  3988 ;;		_DelayOff_Initialization
  3989 ;;		_DelayOff_Main
  3990 ;;		_DimmerLights_Initialization
  3991 ;;		_DimmerLights_Main
  3992 ;;		_Exception_Main
  3993 ;;		_Flash_Memory_Initialization
  3994 ;;		_Flash_Memory_Main
  3995 ;;		_LED_Initialization
  3996 ;;		_LED_Main
  3997 ;;		_Load_Initialization
  3998 ;;		_Load_Main
  3999 ;;		_Mcu_Initialization
  4000 ;;		_RF_Initialization
  4001 ;;		_RF_Main
  4002 ;;		_Switch_Initialization
  4003 ;;		_Switch_Main
  4004 ;;		_Temp_Initialization
  4005 ;;		_Temp_Main
  4006 ;;		_WDT_Main
  4007 ;;		_getLoad_AD
  4008 ;;		_getTemp_AD
  4009 ;;		_myMain_Initialization
  4010 ;;		_my_MainTimer
  4011 ;; This function is called by:
  4012 ;;		Startup code after reset
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           
  4017                           ;psect for function _main
  4018  0877                     _main:	
  4019                           
  4020                           ;Main_B1.c: 8: myMain_Initialization();
  4021                           
  4022                           ;incstack = 0
  4023                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4024  0877  319D  2568  3188   	fcall	_myMain_Initialization
  4025                           
  4026                           ;Main_B1.c: 9: Mcu_Initialization();
  4027  087A  319D  25FF  3188   	fcall	_Mcu_Initialization
  4028                           
  4029                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4030  087D  3185  2550  3188   	fcall	_Flash_Memory_Initialization
  4031                           
  4032                           ;Main_B1.c: 11: LED_Initialization();
  4033  0880  319C  2421  3188   	fcall	_LED_Initialization
  4034                           
  4035                           ;Main_B1.c: 12: Buzzer_Initialization();
  4036  0883  319B  23F7  3188   	fcall	_Buzzer_Initialization
  4037                           
  4038                           ;Main_B1.c: 14: ;;
  4039                           ;Main_B1.c: 15: Temp_Initialization();
  4040  0886  319C  2403  3188   	fcall	_Temp_Initialization
  4041                           
  4042                           ;Main_B1.c: 16: Load_Initialization();
  4043  0889  319B  23FA  3188   	fcall	_Load_Initialization
  4044                           
  4045                           ;Main_B1.c: 17: ;;
  4046                           ;Main_B1.c: 18: DelayOff_Initialization();
  4047  088C  319C  2419  3188   	fcall	_DelayOff_Initialization
  4048                           
  4049                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4050  088F  319C  2488  3188   	fcall	_DimmerLights_Initialization
  4051                           
  4052                           ;Main_B1.c: 21: ;;
  4053                           ;Main_B1.c: 22: ;;
  4054                           ;Main_B1.c: 23: ;;
  4055                           ;Main_B1.c: 24: Switch_Initialization();
  4056  0892  319C  2475  3188   	fcall	_Switch_Initialization
  4057                           
  4058                           ;Main_B1.c: 25: RF_Initialization();
  4059  0895  319B  23FD  3188   	fcall	_RF_Initialization
  4060                           
  4061                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4062  0898  319E  2685  3188   	fcall	_CC2500_PowerOnInitial
  4063  089B                     l10287:	
  4064                           ;Main_B1.c: 27: ;;
  4065                           ;Main_B1.c: 28: ;;
  4066                           ;Main_B1.c: 30: while (1) {
  4067                           
  4068                           
  4069                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4070  089B  0021               	movlb	1	; select bank1
  4071  089C  1C20               	btfss	_myMain^(0+128),0
  4072  089D  28A6               	goto	l10291
  4073                           
  4074                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4075  089E  3005               	movlw	5
  4076  089F  318C  2469  3188   	fcall	_getLoad_AD
  4077                           
  4078                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4079  08A2  3009               	movlw	9
  4080  08A3  3194  2492  3188   	fcall	_getTemp_AD
  4081  08A6                     l10291:	
  4082                           
  4083                           ;Main_B1.c: 57: }
  4084                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4085  08A6  0022               	movlb	2	; select bank2
  4086  08A7  1C20               	btfss	_Timer1^(0+256),0
  4087  08A8  289B               	goto	l10287
  4088                           
  4089                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4090  08A9  1020               	bcf	_Timer1^(0+256),0
  4091                           
  4092                           ;Main_B1.c: 96: my_MainTimer();
  4093  08AA  3194  2418  3188   	fcall	_my_MainTimer
  4094                           
  4095                           ;Main_B1.c: 97: WDT_Main();
  4096  08AD  319E  2611  3188   	fcall	_WDT_Main
  4097                           
  4098                           ;Main_B1.c: 98: ;;
  4099                           ;Main_B1.c: 99: ;;
  4100                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4101  08B0  0021               	movlb	1	; select bank1
  4102  08B1  1C20               	btfss	_myMain^(0+128),0
  4103  08B2  289B               	goto	l10287
  4104                           
  4105                           ;Main_B1.c: 101: Flash_Memory_Main();
  4106  08B3  3192  22CD  3188   	fcall	_Flash_Memory_Main
  4107                           
  4108                           ;Main_B1.c: 103: LED_Main();
  4109  08B6  319C  2425  3188   	fcall	_LED_Main
  4110                           
  4111                           ;Main_B1.c: 104: Buzzer_Main();
  4112  08B9  3194  24D0  3188   	fcall	_Buzzer_Main
  4113                           
  4114                           ;Main_B1.c: 106: ;;
  4115                           ;Main_B1.c: 107: Temp_Main();
  4116  08BC  319C  2406  3188   	fcall	_Temp_Main
  4117                           
  4118                           ;Main_B1.c: 108: Load_Main();
  4119  08BF  3180  2041  3188   	fcall	_Load_Main
  4120                           
  4121                           ;Main_B1.c: 109: ;;
  4122                           ;Main_B1.c: 111: ;;
  4123                           ;Main_B1.c: 112: DimmerLights_Main();
  4124  08C2  319F  272A  3188   	fcall	_DimmerLights_Main
  4125                           
  4126                           ;Main_B1.c: 113: Switch_Main();
  4127  08C5  3190  2066  3188   	fcall	_Switch_Main
  4128                           
  4129                           ;Main_B1.c: 114: ;;
  4130                           ;Main_B1.c: 115: ;;
  4131                           ;Main_B1.c: 117: RF_Main();
  4132  08C8  319C  2400  3188   	fcall	_RF_Main
  4133                           
  4134                           ;Main_B1.c: 118: DelayOff_Main();
  4135  08CB  319C  241D  3188   	fcall	_DelayOff_Main
  4136                           
  4137                           ;Main_B1.c: 119: ;;
  4138                           ;Main_B1.c: 120: ;;
  4139                           ;Main_B1.c: 121: Exception_Main();
  4140  08CE  3186  262C  3188   	fcall	_Exception_Main
  4141  08D1  289B               	goto	l10287
  4142  08D2                     __end_of_main:	
  4143                           ;Main_B1.c: 128: }
  4144                           ;Main_B1.c: 129: }
  4145                           ;Main_B1.c: 163: }
  4146                           ;Main_B1.c: 164: return (0);
  4147                           ;	Return value of _main is never used
  4148                           
  4149                           
  4150                           	psect	text1
  4151  1418                     __ptext1:	
  4152 ;; *************** function _my_MainTimer *****************
  4153 ;; Defined at:
  4154 ;;		line 185 in file "../src/Main_B1.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;		None               void
  4161 ;; Registers used:
  4162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;Total ram usage:        1 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    7
  4175 ;; This function calls:
  4176 ;;		_setBuz
  4177 ;; This function is called by:
  4178 ;;		_main
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           
  4183                           ;psect for function _my_MainTimer
  4184  1418                     _my_MainTimer:	
  4185                           
  4186                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4187                           
  4188                           ;incstack = 0
  4189                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4190  1418  0021               	movlb	1	; select bank1
  4191  1419  1820               	btfsc	_myMain^(0+128),0
  4192  141A  2C32               	goto	l9989
  4193                           
  4194                           ;Main_B1.c: 189: myMain.PowerCount++;
  4195  141B  3001               	movlw	1
  4196  141C  0020               	movlb	0	; select bank0
  4197  141D  00AD               	movwf	??_my_MainTimer
  4198  141E  082D               	movf	??_my_MainTimer,w
  4199  141F  0021               	movlb	1	; select bank1
  4200  1420  07A1               	addwf	(_myMain^(0+128)+1),f
  4201                           
  4202                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4203  1421  0821               	movf	(_myMain^(0+128)+1),w
  4204  1422  3A96               	xorlw	150
  4205  1423  1D03               	skipz
  4206  1424  0008               	return
  4207                           
  4208                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4209  1425  01A1               	clrf	(_myMain^(0+128)+1)
  4210                           
  4211                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4212  1426  1420               	bsf	_myMain^(0+128),0
  4213                           
  4214                           ;Main_B1.c: 197: setBuz(3, 50);
  4215  1427  3032               	movlw	50
  4216  1428  0020               	movlb	0	; select bank0
  4217  1429  00A9               	movwf	setBuz@time
  4218  142A  3000               	movlw	0
  4219  142B  00AA               	movwf	setBuz@time+1
  4220  142C  3003               	movlw	3
  4221  142D  3197  27A7         	fcall	_setBuz
  4222                           
  4223                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4224  142F  0021               	movlb	1	; select bank1
  4225  1430  1620               	bsf	_myMain^(0+128),4
  4226                           
  4227                           ;Main_B1.c: 207: }
  4228                           ;Main_B1.c: 208: } else {
  4229  1431  0008               	return
  4230  1432                     l9989:	
  4231                           
  4232                           ;Main_B1.c: 209: myMain.PowerCount++;
  4233  1432  3001               	movlw	1
  4234  1433  0020               	movlb	0	; select bank0
  4235  1434  00AD               	movwf	??_my_MainTimer
  4236  1435  082D               	movf	??_my_MainTimer,w
  4237  1436  0021               	movlb	1	; select bank1
  4238  1437  07A1               	addwf	(_myMain^(0+128)+1),f
  4239                           
  4240                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4241  1438  0821               	movf	(_myMain^(0+128)+1),w
  4242  1439  3A64               	xorlw	100
  4243  143A  1903               	btfsc	3,2
  4244                           
  4245                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4246  143B  01A1               	clrf	(_myMain^(0+128)+1)
  4247                           
  4248                           ;Main_B1.c: 226: }
  4249                           ;Main_B1.c: 228: myMain.Count1++;
  4250  143C  3001               	movlw	1
  4251  143D  07A4               	addwf	(_myMain^(0+128)+4),f
  4252  143E  3000               	movlw	0
  4253  143F  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4254                           
  4255                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4256  1440  3004               	movlw	4
  4257  1441  3EA0               	addlw	_myMain& (0+255)
  4258  1442  0086               	movwf	6
  4259  1443  0187               	clrf	7
  4260  1444  3F40               	moviw [0]fsr1
  4261  1445  3A64               	xorlw	100
  4262  1446  1D03               	skipz
  4263  1447  2C4A               	goto	u11405
  4264  1448  3F41               	moviw [1]fsr1
  4265  1449  3A00               	xorlw	0
  4266  144A                     u11405:	
  4267  144A  1D03               	skipz
  4268  144B  0008               	return
  4269                           
  4270                           ;Main_B1.c: 230: {
  4271                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4272  144C  01A4               	clrf	(_myMain^(0+128)+4)
  4273  144D  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4274                           
  4275                           ;Main_B1.c: 243: if (myMain.Flag) {
  4276  144E  1CA0               	btfss	_myMain^(0+128),1
  4277  144F  2C52               	goto	l1395
  4278                           
  4279                           ;Main_B1.c: 244: myMain.Flag = 0;
  4280  1450  10A0               	bcf	_myMain^(0+128),1
  4281                           
  4282                           ;Main_B1.c: 253: } else {
  4283  1451  0008               	return
  4284  1452                     l1395:	
  4285                           
  4286                           ;Main_B1.c: 254: myMain.Flag = 1;
  4287  1452  14A0               	bsf	_myMain^(0+128),1
  4288  1453  0008               	return
  4289  1454                     __end_of_my_MainTimer:	
  4290                           
  4291                           	psect	text2
  4292  1D68                     __ptext2:	
  4293 ;; *************** function _myMain_Initialization *****************
  4294 ;; Defined at:
  4295 ;;		line 170 in file "../src/Main_B1.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;		None
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;		None               void
  4302 ;; Registers used:
  4303 ;;		wreg, fsr1l, fsr1h
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;Total ram usage:        1 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    5
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_main
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           
  4324                           ;psect for function _myMain_Initialization
  4325  1D68                     _myMain_Initialization:	
  4326                           
  4327                           ;Main_B1.c: 173: product = &_product;
  4328                           
  4329                           ;incstack = 0
  4330                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4331  1D68  3020               	movlw	__product& (0+255)
  4332  1D69  0020               	movlb	0	; select bank0
  4333  1D6A  00A0               	movwf	??_myMain_Initialization
  4334  1D6B  0820               	movf	??_myMain_Initialization,w
  4335  1D6C  00F9               	movwf	_product
  4336                           
  4337                           ;Main_B1.c: 174: product->Data[20] = 209;
  4338  1D6D  30D1               	movlw	209
  4339  1D6E  00A0               	movwf	??_myMain_Initialization
  4340  1D6F  0879               	movf	_product,w
  4341  1D70  3E14               	addlw	20
  4342  1D71  0086               	movwf	6
  4343  1D72  3002               	movlw	2	; select bank4/5
  4344  1D73  0087               	movwf	7
  4345  1D74  0820               	movf	??_myMain_Initialization,w
  4346  1D75  0081               	movwf	1
  4347  1D76  0008               	return
  4348  1D77                     __end_of_myMain_Initialization:	
  4349                           
  4350                           	psect	text3
  4351  1492                     __ptext3:	
  4352 ;; *************** function _getTemp_AD *****************
  4353 ;; Defined at:
  4354 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;  channel         1    wreg     unsigned char 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  channel         1    5[BANK0 ] unsigned char 
  4359 ;; Return value:  Size  Location     Type
  4360 ;;		None               void
  4361 ;; Registers used:
  4362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;Total ram usage:        2 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    7
  4375 ;; This function calls:
  4376 ;;		_getAD
  4377 ;; This function is called by:
  4378 ;;		_main
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           
  4383                           ;psect for function _getTemp_AD
  4384  1492                     _getTemp_AD:	
  4385                           
  4386                           ;incstack = 0
  4387                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4388                           ;getTemp_AD@channel stored from wreg
  4389  1492  0020               	movlb	0	; select bank0
  4390  1493  00A5               	movwf	getTemp_AD@channel
  4391                           
  4392                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4393  1494  0021               	movlb	1	; select bank1
  4394  1495  1D57               	btfss	_Temp^(0+128),2
  4395  1496  0008               	return
  4396                           
  4397                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4398  1497  30F0               	movlw	240
  4399  1498  0020               	movlb	0	; select bank0
  4400  1499  00A4               	movwf	??_getTemp_AD
  4401  149A  0824               	movf	??_getTemp_AD,w
  4402  149B  00A0               	movwf	getAD@adcon1
  4403  149C  0825               	movf	getTemp_AD@channel,w
  4404  149D  319F  279E  3194   	fcall	_getAD
  4405  14A0  0020               	movlb	0	; select bank0
  4406  14A1  0821               	movf	?_getAD+1,w
  4407  14A2  0021               	movlb	1	; select bank1
  4408  14A3  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4409  14A4  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4410  14A5  0020               	movlb	0	; select bank0
  4411  14A6  0820               	movf	?_getAD,w
  4412  14A7  0021               	movlb	1	; select bank1
  4413  14A8  01E3               	clrf	(_Temp^(0+128)+12)
  4414  14A9  07E3               	addwf	(_Temp^(0+128)+12),f
  4415                           
  4416                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4417  14AA  300C               	movlw	12
  4418  14AB  3ED7               	addlw	_Temp& (0+255)
  4419  14AC  0086               	movwf	6
  4420  14AD  0187               	clrf	7
  4421  14AE  0016               	moviw fsr1++
  4422  14AF  0401               	iorwf	1,w
  4423  14B0  1903               	skipnz
  4424  14B1  0008               	return
  4425                           
  4426                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4427  14B2  0864               	movf	((_Temp+1)^(0+128)+12),w
  4428  14B3  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4429  14B4  1D03               	skipz
  4430  14B5  2CB8               	goto	u11355
  4431  14B6  0863               	movf	(_Temp^(0+128)+12),w
  4432  14B7  025F               	subwf	(_Temp^(0+128)+8),w
  4433  14B8                     u11355:	
  4434  14B8  1803               	skipnc
  4435  14B9  2CC1               	goto	l9971
  4436                           
  4437                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4438  14BA  0864               	movf	((_Temp+1)^(0+128)+12),w
  4439  14BB  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4440  14BC  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4441  14BD  0863               	movf	(_Temp^(0+128)+12),w
  4442  14BE  01DF               	clrf	(_Temp^(0+128)+8)
  4443  14BF  07DF               	addwf	(_Temp^(0+128)+8),f
  4444                           
  4445                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4446  14C0  0008               	return
  4447  14C1                     l9971:	
  4448  14C1  0864               	movf	((_Temp+1)^(0+128)+12),w
  4449  14C2  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4450  14C3  1D03               	skipz
  4451  14C4  2CC7               	goto	u11365
  4452  14C5  0863               	movf	(_Temp^(0+128)+12),w
  4453  14C6  0261               	subwf	(_Temp^(0+128)+10),w
  4454  14C7                     u11365:	
  4455  14C7  1803               	skipnc
  4456  14C8  0008               	return
  4457                           
  4458                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4459  14C9  0864               	movf	((_Temp+1)^(0+128)+12),w
  4460  14CA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4461  14CB  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4462  14CC  0863               	movf	(_Temp^(0+128)+12),w
  4463  14CD  01E1               	clrf	(_Temp^(0+128)+10)
  4464  14CE  07E1               	addwf	(_Temp^(0+128)+10),f
  4465  14CF  0008               	return
  4466  14D0                     __end_of_getTemp_AD:	
  4467                           
  4468                           	psect	text4
  4469  0C69                     __ptext4:	
  4470 ;; *************** function _getLoad_AD *****************
  4471 ;; Defined at:
  4472 ;;		line 15 in file "../src/OverLoad_B1.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;  channel         1    wreg     unsigned char 
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  channel         1    6[BANK0 ] unsigned char 
  4477 ;;  i               1    9[BANK0 ] unsigned char 
  4478 ;;  j               1    8[BANK0 ] unsigned char 
  4479 ;;  k               1    7[BANK0 ] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;		None               void
  4482 ;; Registers used:
  4483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;Total ram usage:        6 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    7
  4496 ;; This function calls:
  4497 ;;		_getAD
  4498 ;; This function is called by:
  4499 ;;		_main
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _getLoad_AD
  4505  0C69                     _getLoad_AD:	
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4509                           ;getLoad_AD@channel stored from wreg
  4510  0C69  0020               	movlb	0	; select bank0
  4511  0C6A  00A6               	movwf	getLoad_AD@channel
  4512                           
  4513                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4514  0C6B  01A9               	clrf	getLoad_AD@i
  4515  0C6C  01A8               	clrf	getLoad_AD@j
  4516  0C6D  01A7               	clrf	getLoad_AD@k
  4517                           
  4518                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4519  0C6E  0022               	movlb	2	; select bank2
  4520  0C6F  1E25               	btfss	_Load^(0+256),4
  4521  0C70  0008               	return
  4522                           
  4523                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4524  0C71  30F3               	movlw	243
  4525  0C72  0020               	movlb	0	; select bank0
  4526  0C73  00A4               	movwf	??_getLoad_AD
  4527  0C74  0824               	movf	??_getLoad_AD,w
  4528  0C75  00A0               	movwf	getAD@adcon1
  4529  0C76  0826               	movf	getLoad_AD@channel,w
  4530  0C77  319F  279E  318C   	fcall	_getAD
  4531  0C7A  0020               	movlb	0	; select bank0
  4532  0C7B  0821               	movf	?_getAD+1,w
  4533  0C7C  0022               	movlb	2	; select bank2
  4534  0C7D  01C7               	clrf	((_Load+1)^(0+256)+33)
  4535  0C7E  07C7               	addwf	((_Load+1)^(0+256)+33),f
  4536  0C7F  0020               	movlb	0	; select bank0
  4537  0C80  0820               	movf	?_getAD,w
  4538  0C81  0022               	movlb	2	; select bank2
  4539  0C82  01C6               	clrf	(_Load^(0+256)+33)
  4540  0C83  07C6               	addwf	(_Load^(0+256)+33),f
  4541                           
  4542                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4543  0C84  0020               	movlb	0	; select bank0
  4544  0C85  01A9               	clrf	getLoad_AD@i
  4545  0C86  3004               	movlw	4
  4546  0C87  0229               	subwf	getLoad_AD@i,w
  4547  0C88  1803               	btfsc	3,0
  4548  0C89  2CB7               	goto	l9941
  4549  0C8A                     l9929:	
  4550                           
  4551                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4552  0C8A  3529               	lslf	getLoad_AD@i,w
  4553  0C8B  3E30               	addlw	(_Load+11)& (0+255)
  4554  0C8C  0086               	movwf	6
  4555  0C8D  3001               	movlw	1	; select bank2/3
  4556  0C8E  0087               	movwf	7
  4557  0C8F  3F40               	moviw [0]fsr1
  4558  0C90  00A4               	movwf	??_getLoad_AD
  4559  0C91  3F41               	moviw [1]fsr1
  4560  0C92  00A5               	movwf	??_getLoad_AD+1
  4561  0C93  0022               	movlb	2	; select bank2
  4562  0C94  0847               	movf	((_Load+1)^(0+256)+33),w
  4563  0C95  0020               	movlb	0	; select bank0
  4564  0C96  0225               	subwf	??_getLoad_AD+1,w
  4565  0C97  1D03               	skipz
  4566  0C98  2C9D               	goto	u11255
  4567  0C99  0022               	movlb	2	; select bank2
  4568  0C9A  0846               	movf	(_Load^(0+256)+33),w
  4569  0C9B  0020               	movlb	0	; select bank0
  4570  0C9C  0224               	subwf	??_getLoad_AD,w
  4571  0C9D                     u11255:	
  4572  0C9D  1803               	skipnc
  4573  0C9E  2CAF               	goto	l9937
  4574  0C9F  08A8               	movf	getLoad_AD@j,f
  4575  0CA0  1D03               	skipz
  4576  0CA1  2CAF               	goto	l9937
  4577                           
  4578                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4579  0CA2  3529               	lslf	getLoad_AD@i,w
  4580  0CA3  3E30               	addlw	(_Load+11)& (0+255)
  4581  0CA4  0086               	movwf	6
  4582  0CA5  3001               	movlw	1	; select bank2/3
  4583  0CA6  0087               	movwf	7
  4584  0CA7  0022               	movlb	2	; select bank2
  4585  0CA8  0846               	movf	(_Load^(0+256)+33),w
  4586  0CA9  3FC0               	movwi [0]fsr1
  4587  0CAA  0847               	movf	((_Load+1)^(0+256)+33),w
  4588  0CAB  3FC1               	movwi [1]fsr1
  4589                           
  4590                           ;OverLoad_B1.c: 24: j = 1;
  4591  0CAC  0020               	movlb	0	; select bank0
  4592  0CAD  01A8               	clrf	getLoad_AD@j
  4593  0CAE  0AA8               	incf	getLoad_AD@j,f
  4594  0CAF                     l9937:	
  4595  0CAF  3001               	movlw	1
  4596  0CB0  00A4               	movwf	??_getLoad_AD
  4597  0CB1  0824               	movf	??_getLoad_AD,w
  4598  0CB2  07A9               	addwf	getLoad_AD@i,f
  4599  0CB3  3004               	movlw	4
  4600  0CB4  0229               	subwf	getLoad_AD@i,w
  4601  0CB5  1C03               	skipc
  4602  0CB6  2C8A               	goto	l9929
  4603  0CB7                     l9941:	
  4604                           
  4605                           ;OverLoad_B1.c: 25: }
  4606                           ;OverLoad_B1.c: 26: }
  4607                           ;OverLoad_B1.c: 27: if (j == 0) {
  4608  0CB7  08A8               	movf	getLoad_AD@j,f
  4609  0CB8  1D03               	skipz
  4610  0CB9  0008               	return
  4611                           
  4612                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4613  0CBA  01A9               	clrf	getLoad_AD@i
  4614  0CBB                     L1:	
  4615  0CBB  3004               	movlw	4
  4616  0CBC  0229               	subwf	getLoad_AD@i,w
  4617  0CBD  1803               	btfsc	3,0
  4618  0CBE  0008               	return
  4619                           
  4620                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4621  0CBF  3529               	lslf	getLoad_AD@i,w
  4622  0CC0  3E3A               	addlw	(_Load+21)& (0+255)
  4623  0CC1  0086               	movwf	6
  4624  0CC2  3001               	movlw	1	; select bank2/3
  4625  0CC3  0087               	movwf	7
  4626  0CC4  3F40               	moviw [0]fsr1
  4627  0CC5  00A4               	movwf	??_getLoad_AD
  4628  0CC6  3F41               	moviw [1]fsr1
  4629  0CC7  00A5               	movwf	??_getLoad_AD+1
  4630  0CC8  0825               	movf	??_getLoad_AD+1,w
  4631  0CC9  0022               	movlb	2	; select bank2
  4632  0CCA  0247               	subwf	((_Load+1)^(0+256)+33),w
  4633  0CCB  1D03               	skipz
  4634  0CCC  2CD1               	goto	u11305
  4635  0CCD  0020               	movlb	0	; select bank0
  4636  0CCE  0824               	movf	??_getLoad_AD,w
  4637  0CCF  0022               	movlb	2	; select bank2
  4638  0CD0  0246               	subwf	(_Load^(0+256)+33),w
  4639  0CD1                     u11305:	
  4640  0CD1  1803               	skipnc
  4641  0CD2  2CE4               	goto	l9957
  4642  0CD3  0020               	movlb	0	; select bank0
  4643  0CD4  08A7               	movf	getLoad_AD@k,f
  4644  0CD5  1D03               	skipz
  4645  0CD6  2CE4               	goto	l9957
  4646                           
  4647                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4648  0CD7  3529               	lslf	getLoad_AD@i,w
  4649  0CD8  3E3A               	addlw	(_Load+21)& (0+255)
  4650  0CD9  0086               	movwf	6
  4651  0CDA  3001               	movlw	1	; select bank2/3
  4652  0CDB  0087               	movwf	7
  4653  0CDC  0022               	movlb	2	; select bank2
  4654  0CDD  0846               	movf	(_Load^(0+256)+33),w
  4655  0CDE  3FC0               	movwi [0]fsr1
  4656  0CDF  0847               	movf	((_Load+1)^(0+256)+33),w
  4657  0CE0  3FC1               	movwi [1]fsr1
  4658                           
  4659                           ;OverLoad_B1.c: 31: k = 1;
  4660  0CE1  0020               	movlb	0	; select bank0
  4661  0CE2  01A7               	clrf	getLoad_AD@k
  4662  0CE3  0AA7               	incf	getLoad_AD@k,f
  4663  0CE4                     l9957:	
  4664  0CE4  3001               	movlw	1
  4665  0CE5  0020               	movlb	0	; select bank0
  4666  0CE6  00A4               	movwf	??_getLoad_AD
  4667  0CE7  0824               	movf	??_getLoad_AD,w
  4668  0CE8  07A9               	addwf	getLoad_AD@i,f
  4669  0CE9  2CBB               	goto	L1
  4670  0CEA                     __end_of_getLoad_AD:	
  4671                           
  4672                           	psect	text5
  4673  1F9E                     __ptext5:	
  4674 ;; *************** function _getAD *****************
  4675 ;; Defined at:
  4676 ;;		line 453 in file "../src/MCU_B1.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  adcon0          1    wreg     unsigned char 
  4679 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  2    0[BANK0 ] int 
  4684 ;; Registers used:
  4685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4691 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;Total ram usage:        4 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    6
  4698 ;; This function calls:
  4699 ;;		_Timeout_Counter
  4700 ;;		_set_TimeoutCleared
  4701 ;; This function is called by:
  4702 ;;		_getLoad_AD
  4703 ;;		_getTemp_AD
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           
  4708                           ;psect for function _getAD
  4709  1F9E                     _getAD:	
  4710                           
  4711                           ;incstack = 0
  4712                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4713                           ;getAD@adcon0 stored from wreg
  4714  1F9E  0020               	movlb	0	; select bank0
  4715  1F9F  00A3               	movwf	getAD@adcon0
  4716                           
  4717                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4718  1FA0  0823               	movf	getAD@adcon0,w
  4719  1FA1  0021               	movlb	1	; select bank1
  4720  1FA2  009D               	movwf	29	;volatile
  4721                           
  4722                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4723  1FA3  0020               	movlb	0	; select bank0
  4724  1FA4  0820               	movf	getAD@adcon1,w
  4725  1FA5  0021               	movlb	1	; select bank1
  4726  1FA6  009E               	movwf	30	;volatile
  4727                           
  4728                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4729  1FA7  149D               	bsf	29,1	;volatile
  4730                           
  4731                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4732  1FA8  2FAC               	goto	l9415
  4733  1FA9                     l9413:	
  4734                           
  4735                           ;MCU_B1.c: 458: Timeout_Counter();
  4736  1FA9  319E  2670  319F   	fcall	_Timeout_Counter
  4737  1FAC                     l9415:	
  4738  1FAC  0021               	movlb	1	; select bank1
  4739  1FAD  1C9D               	btfss	29,1	;volatile
  4740  1FAE  2FB1               	goto	l9419
  4741  1FAF  1D2B               	btfss	(_myMain^(0+128)+11),2
  4742  1FB0  2FA9               	goto	l9413
  4743  1FB1                     l9419:	
  4744                           
  4745                           ;MCU_B1.c: 459: };
  4746                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4747  1FB1  319C  242D         	fcall	_set_TimeoutCleared
  4748                           
  4749                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4750  1FB3  0021               	movlb	1	; select bank1
  4751  1FB4  081C               	movf	28,w	;volatile
  4752  1FB5  0020               	movlb	0	; select bank0
  4753  1FB6  01A1               	clrf	?_getAD+1
  4754  1FB7  07A1               	addwf	?_getAD+1,f
  4755  1FB8  0021               	movlb	1	; select bank1
  4756  1FB9  081B               	movf	27,w	;volatile
  4757  1FBA  0020               	movlb	0	; select bank0
  4758  1FBB  01A0               	clrf	?_getAD
  4759  1FBC  07A0               	addwf	?_getAD,f
  4760  1FBD  0008               	return
  4761  1FBE                     __end_of_getAD:	
  4762                           
  4763                           	psect	text6
  4764  1E11                     __ptext6:	
  4765 ;; *************** function _WDT_Main *****************
  4766 ;; Defined at:
  4767 ;;		line 1097 in file "../src/MCU_B1.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;		None
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;		None
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		wreg, status,2, status,0, pclath, cstack
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;Total ram usage:        1 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    6
  4788 ;; This function calls:
  4789 ;;		_WDT_Clearing
  4790 ;; This function is called by:
  4791 ;;		_main
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           
  4796                           ;psect for function _WDT_Main
  4797  1E11                     _WDT_Main:	
  4798                           
  4799                           ;MCU_B1.c: 1098: if (WDT.Enable == 1) {
  4800                           
  4801                           ;incstack = 0
  4802                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4803  1E11  0021               	movlb	1	; select bank1
  4804  1E12  1C49               	btfss	_WDT^(0+128),0
  4805  1E13  0008               	return
  4806                           
  4807                           ;MCU_B1.c: 1099: if (WDT.Timer-- > 0) {
  4808  1E14  3001               	movlw	1
  4809  1E15  02CA               	subwf	(_WDT^(0+128)+1),f
  4810  1E16  084A               	movf	(_WDT^(0+128)+1),w
  4811  1E17  3AFF               	xorlw	255
  4812  1E18  1903               	skipnz
  4813  1E19  0008               	return
  4814                           
  4815                           ;MCU_B1.c: 1100: WDT.Timer = 100;
  4816  1E1A  3064               	movlw	100
  4817  1E1B  0020               	movlb	0	; select bank0
  4818  1E1C  00A0               	movwf	??_WDT_Main
  4819  1E1D  0820               	movf	??_WDT_Main,w
  4820  1E1E  0021               	movlb	1	; select bank1
  4821  1E1F  00CA               	movwf	(_WDT^(0+128)+1)
  4822                           
  4823                           ;MCU_B1.c: 1101: WDT_Clearing();
  4824  1E20  3180  2002         	fcall	_WDT_Clearing
  4825  1E22  0008               	return
  4826  1E23                     __end_of_WDT_Main:	
  4827                           
  4828                           	psect	text7
  4829  0002                     __ptext7:	
  4830 ;; *************** function _WDT_Clearing *****************
  4831 ;; Defined at:
  4832 ;;		line 1107 in file "../src/MCU_B1.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;		None
  4837 ;; Return value:  Size  Location     Type
  4838 ;;		None               void
  4839 ;; Registers used:
  4840 ;;		None
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;Total ram usage:        0 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    5
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		_WDT_Main
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           
  4861                           ;psect for function _WDT_Clearing
  4862  0002                     _WDT_Clearing:	
  4863                           
  4864                           ;incstack = 0
  4865                           ; Regs used in _WDT_Clearing: []
  4866  0002  0064               	clrwdt	;# 
  4867  0003  0008               	return
  4868  0004                     __end_of_WDT_Clearing:	
  4869                           
  4870                           	psect	text8
  4871  1C06                     __ptext8:	
  4872 ;; *************** function _Temp_Main *****************
  4873 ;; Defined at:
  4874 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;		None
  4879 ;; Return value:  Size  Location     Type
  4880 ;;		None               void
  4881 ;; Registers used:
  4882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;Total ram usage:        0 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    8
  4895 ;; This function calls:
  4896 ;;		_setTemp_Main
  4897 ;; This function is called by:
  4898 ;;		_main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _Temp_Main
  4904  1C06                     _Temp_Main:	
  4905                           
  4906                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4910  1C06  318F  2750         	fcall	_setTemp_Main
  4911  1C08  0008               	return
  4912  1C09                     __end_of_Temp_Main:	
  4913                           
  4914                           	psect	text9
  4915  0F50                     __ptext9:	
  4916 ;; *************** function _setTemp_Main *****************
  4917 ;; Defined at:
  4918 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;  error           1   72[BANK0 ] unsigned char 
  4923 ;; Return value:  Size  Location     Type
  4924 ;;		None               void
  4925 ;; Registers used:
  4926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;Total ram usage:        3 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    7
  4939 ;; This function calls:
  4940 ;;		_getMain_All_Error_Status
  4941 ;;		_setBuz
  4942 ;;		_setProductData
  4943 ;; This function is called by:
  4944 ;;		_Temp_Main
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function _setTemp_Main
  4950  0F50                     _setTemp_Main:	
  4951                           
  4952                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4953                           
  4954                           ;incstack = 0
  4955                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4956  0F50  3000               	movlw	0
  4957  0F51  3192  2232  318F   	fcall	_getMain_All_Error_Status
  4958  0F54  0020               	movlb	0	; select bank0
  4959  0F55  00E6               	movwf	??_setTemp_Main
  4960  0F56  0866               	movf	??_setTemp_Main,w
  4961  0F57  00E8               	movwf	setTemp_Main@error
  4962                           
  4963                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4964  0F58  0021               	movlb	1	; select bank1
  4965  0F59  1C57               	btfss	_Temp^(0+128),0
  4966  0F5A  2FFC               	goto	l1720
  4967                           
  4968                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4969  0F5B  1957               	btfsc	_Temp^(0+128),2
  4970  0F5C  2F6C               	goto	l9481
  4971                           
  4972                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4973  0F5D  3001               	movlw	1
  4974  0F5E  07D8               	addwf	(_Temp^(0+128)+1),f
  4975  0F5F  3000               	movlw	0
  4976  0F60  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4977                           
  4978                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4979  0F61  3001               	movlw	1
  4980  0F62  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4981  0F63  30F4               	movlw	244
  4982  0F64  1903               	skipnz
  4983  0F65  0258               	subwf	(_Temp^(0+128)+1),w
  4984  0F66  1C03               	skipc
  4985  0F67  0008               	return
  4986                           
  4987                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4988  0F68  01D8               	clrf	(_Temp^(0+128)+1)
  4989  0F69  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4990                           
  4991                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4992  0F6A  1557               	bsf	_Temp^(0+128),2
  4993                           
  4994                           ;OverTemperature_B1.c: 70: }
  4995                           ;OverTemperature_B1.c: 71: } else {
  4996  0F6B  0008               	return
  4997  0F6C                     l9481:	
  4998                           
  4999                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5000  0F6C  3001               	movlw	1
  5001  0F6D  07D8               	addwf	(_Temp^(0+128)+1),f
  5002  0F6E  3000               	movlw	0
  5003  0F6F  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5004                           
  5005                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5006  0F70  3000               	movlw	0
  5007  0F71  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5008  0F72  3005               	movlw	5
  5009  0F73  1903               	skipnz
  5010  0F74  0258               	subwf	(_Temp^(0+128)+1),w
  5011  0F75  1C03               	skipc
  5012  0F76  0008               	return
  5013                           
  5014                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5015  0F77  01D8               	clrf	(_Temp^(0+128)+1)
  5016  0F78  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5017                           
  5018                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5019  0F79  3008               	movlw	8
  5020  0F7A  3ED7               	addlw	_Temp& (0+255)
  5021  0F7B  0086               	movwf	6
  5022  0F7C  0187               	clrf	7
  5023  0F7D  0016               	moviw fsr1++
  5024  0F7E  0401               	iorwf	1,w
  5025  0F7F  1903               	skipnz
  5026  0F80  2FF6               	goto	l1725
  5027  0F81  300A               	movlw	10
  5028  0F82  3ED7               	addlw	_Temp& (0+255)
  5029  0F83  0086               	movwf	6
  5030  0F84  0187               	clrf	7
  5031  0F85  0016               	moviw fsr1++
  5032  0F86  0401               	iorwf	1,w
  5033  0F87  1903               	skipnz
  5034  0F88  2FF6               	goto	l1725
  5035                           
  5036                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5037  0F89  1157               	bcf	_Temp^(0+128),2
  5038                           
  5039                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5040  0F8A  300A               	movlw	10
  5041  0F8B  3ED7               	addlw	_Temp& (0+255)
  5042  0F8C  0086               	movwf	6
  5043  0F8D  0187               	clrf	7
  5044  0F8E  3008               	movlw	8
  5045  0F8F  3ED7               	addlw	_Temp& (0+255)
  5046  0F90  0084               	movwf	4
  5047  0F91  0185               	clrf	5
  5048  0F92  3F40               	moviw [0]fsr1
  5049  0F93  0700               	addwf	0,w
  5050  0F94  0020               	movlb	0	; select bank0
  5051  0F95  00E6               	movwf	??_setTemp_Main
  5052  0F96  3101               	addfsr 0,1
  5053  0F97  3F41               	moviw [1]fsr1
  5054  0F98  3D00               	addwfc	0,w
  5055  0F99  00E7               	movwf	??_setTemp_Main+1
  5056  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5057  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5058  0F9C  0866               	movf	??_setTemp_Main,w
  5059  0F9D  0021               	movlb	1	; select bank1
  5060  0F9E  00DD               	movwf	(_Temp^(0+128)+6)
  5061  0F9F  0020               	movlb	0	; select bank0
  5062  0FA0  0867               	movf	??_setTemp_Main+1,w
  5063  0FA1  0021               	movlb	1	; select bank1
  5064  0FA2  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5065                           
  5066                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 400;
  5067  0FA3  3090               	movlw	144
  5068  0FA4  00E5               	movwf	(_Temp^(0+128)+14)
  5069  0FA5  3001               	movlw	1
  5070  0FA6  00E6               	movwf	(_Temp^(0+128)+15)
  5071                           
  5072                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 345;
  5073  0FA7  3059               	movlw	89
  5074  0FA8  00E7               	movwf	(_Temp^(0+128)+16)
  5075  0FA9  3001               	movlw	1
  5076  0FAA  00E8               	movwf	(_Temp^(0+128)+17)
  5077                           
  5078                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5079  0FAB  1CD7               	btfss	_Temp^(0+128),1
  5080  0FAC  2FCD               	goto	l9513
  5081                           
  5082                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5083  0FAD  0866               	movf	((_Temp+1)^(0+128)+14),w
  5084  0FAE  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5085  0FAF  1D03               	skipz
  5086  0FB0  2FB3               	goto	u10445
  5087  0FB1  0865               	movf	(_Temp^(0+128)+14),w
  5088  0FB2  025D               	subwf	(_Temp^(0+128)+6),w
  5089  0FB3                     u10445:	
  5090  0FB3  1C03               	skipc
  5091  0FB4  2FCB               	goto	l9511
  5092                           
  5093                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5094  0FB5  3001               	movlw	1
  5095  0FB6  0020               	movlb	0	; select bank0
  5096  0FB7  00E6               	movwf	??_setTemp_Main
  5097  0FB8  0866               	movf	??_setTemp_Main,w
  5098  0FB9  0021               	movlb	1	; select bank1
  5099  0FBA  07DA               	addwf	(_Temp^(0+128)+3),f
  5100                           
  5101                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5102  0FBB  3003               	movlw	3
  5103  0FBC  025A               	subwf	(_Temp^(0+128)+3),w
  5104  0FBD  1C03               	skipc
  5105  0FBE  2FE3               	goto	l9525
  5106                           
  5107                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5108  0FBF  01DA               	clrf	(_Temp^(0+128)+3)
  5109                           
  5110                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5111  0FC0  10D7               	bcf	_Temp^(0+128),1
  5112                           
  5113                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5114  0FC1  3064               	movlw	100
  5115  0FC2  0020               	movlb	0	; select bank0
  5116  0FC3  00A9               	movwf	setBuz@time
  5117  0FC4  3000               	movlw	0
  5118  0FC5  00AA               	movwf	setBuz@time+1
  5119  0FC6  3002               	movlw	2
  5120  0FC7  3197  27A7  318F   	fcall	_setBuz
  5121                           
  5122                           ;OverTemperature_B1.c: 103: }
  5123                           ;OverTemperature_B1.c: 104: } else {
  5124  0FCA  2FE3               	goto	l9525
  5125  0FCB                     l9511:	
  5126                           
  5127                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5128  0FCB  0021               	movlb	1	; select bank1
  5129  0FCC  2FE2               	goto	l9523
  5130  0FCD                     l9513:	
  5131                           ;OverTemperature_B1.c: 106: }
  5132                           ;OverTemperature_B1.c: 107: } else {
  5133                           
  5134                           
  5135                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5136  0FCD  085E               	movf	((_Temp+1)^(0+128)+6),w
  5137  0FCE  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5138  0FCF  1D03               	skipz
  5139  0FD0  2FD3               	goto	u10465
  5140  0FD1  085D               	movf	(_Temp^(0+128)+6),w
  5141  0FD2  0267               	subwf	(_Temp^(0+128)+16),w
  5142  0FD3                     u10465:	
  5143  0FD3  1C03               	skipc
  5144  0FD4  2FE2               	goto	l9523
  5145                           
  5146                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5147  0FD5  3001               	movlw	1
  5148  0FD6  0020               	movlb	0	; select bank0
  5149  0FD7  00E6               	movwf	??_setTemp_Main
  5150  0FD8  0866               	movf	??_setTemp_Main,w
  5151  0FD9  0021               	movlb	1	; select bank1
  5152  0FDA  07DA               	addwf	(_Temp^(0+128)+3),f
  5153                           
  5154                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5155  0FDB  3003               	movlw	3
  5156  0FDC  025A               	subwf	(_Temp^(0+128)+3),w
  5157  0FDD  1C03               	skipc
  5158  0FDE  2FE3               	goto	l9525
  5159                           
  5160                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5161  0FDF  01DA               	clrf	(_Temp^(0+128)+3)
  5162                           
  5163                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5164  0FE0  14D7               	bsf	_Temp^(0+128),1
  5165                           
  5166                           ;OverTemperature_B1.c: 113: }
  5167                           ;OverTemperature_B1.c: 114: } else {
  5168  0FE1  2FE3               	goto	l9525
  5169  0FE2                     l9523:	
  5170                           
  5171                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5172  0FE2  01DA               	clrf	(_Temp^(0+128)+3)
  5173  0FE3                     l9525:	
  5174                           
  5175                           ;OverTemperature_B1.c: 116: }
  5176                           ;OverTemperature_B1.c: 117: }
  5177                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5178  0FE3  0021               	movlb	1	; select bank1
  5179  0FE4  085E               	movf	((_Temp+1)^(0+128)+6),w
  5180  0FE5  0020               	movlb	0	; select bank0
  5181  0FE6  00E6               	movwf	??_setTemp_Main
  5182  0FE7  0866               	movf	??_setTemp_Main,w
  5183  0FE8  00E2               	movwf	setProductData@value
  5184  0FE9  3018               	movlw	24
  5185  0FEA  319D  253D  318F   	fcall	_setProductData
  5186                           
  5187                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5188  0FED  0021               	movlb	1	; select bank1
  5189  0FEE  085D               	movf	(_Temp^(0+128)+6),w
  5190  0FEF  0020               	movlb	0	; select bank0
  5191  0FF0  00E6               	movwf	??_setTemp_Main
  5192  0FF1  0866               	movf	??_setTemp_Main,w
  5193  0FF2  00E2               	movwf	setProductData@value
  5194  0FF3  3019               	movlw	25
  5195  0FF4  319D  253D         	fcall	_setProductData
  5196  0FF6                     l1725:	
  5197                           
  5198                           ;OverTemperature_B1.c: 135: }
  5199                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5200  0FF6  0021               	movlb	1	; select bank1
  5201  0FF7  01DF               	clrf	(_Temp^(0+128)+8)
  5202  0FF8  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5203                           
  5204                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5205  0FF9  01E1               	clrf	(_Temp^(0+128)+10)
  5206  0FFA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5207                           
  5208                           ;OverTemperature_B1.c: 138: }
  5209                           ;OverTemperature_B1.c: 139: }
  5210                           ;OverTemperature_B1.c: 141: } else {
  5211  0FFB  0008               	return
  5212  0FFC                     l1720:	
  5213                           
  5214                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5215  0FFC  1C20               	btfss	_myMain^(0+128),0
  5216  0FFD  0008               	return
  5217                           
  5218                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5219  0FFE  1457               	bsf	_Temp^(0+128),0
  5220  0FFF  0008               	return
  5221  1000                     __end_of_setTemp_Main:	
  5222                           
  5223                           	psect	text10
  5224  1C03                     __ptext10:	
  5225 ;; *************** function _Temp_Initialization *****************
  5226 ;; Defined at:
  5227 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;		None
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;		None
  5232 ;; Return value:  Size  Location     Type
  5233 ;;		None               void
  5234 ;; Registers used:
  5235 ;;		status,2, status,0, pclath, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;Total ram usage:        0 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    6
  5248 ;; This function calls:
  5249 ;;		_setTemp_Initialization
  5250 ;; This function is called by:
  5251 ;;		_main
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           
  5256                           ;psect for function _Temp_Initialization
  5257  1C03                     _Temp_Initialization:	
  5258                           
  5259                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5260                           
  5261                           ;incstack = 0
  5262                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5263  1C03  319B  23F6         	fcall	_setTemp_Initialization
  5264  1C05  0008               	return
  5265  1C06                     __end_of_Temp_Initialization:	
  5266                           
  5267                           	psect	text11
  5268  1BF6                     __ptext11:	
  5269 ;; *************** function _setTemp_Initialization *****************
  5270 ;; Defined at:
  5271 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;		None
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;		None
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		None
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;Total ram usage:        0 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    5
  5292 ;; This function calls:
  5293 ;;		Nothing
  5294 ;; This function is called by:
  5295 ;;		_Temp_Initialization
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           
  5300                           ;psect for function _setTemp_Initialization
  5301  1BF6                     _setTemp_Initialization:	
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _setTemp_Initialization: []
  5305  1BF6  0008               	return
  5306  1BF7                     __end_of_setTemp_Initialization:	
  5307                           
  5308                           	psect	text12
  5309  1066                     __ptext12:	
  5310 ;; *************** function _Switch_Main *****************
  5311 ;; Defined at:
  5312 ;;		line 72 in file "../src/Switch_B1.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;		None
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;		None               void
  5319 ;; Registers used:
  5320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;Total ram usage:        0 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:   10
  5333 ;; This function calls:
  5334 ;;		_TouchPower
  5335 ;;		_setSw_Main
  5336 ;; This function is called by:
  5337 ;;		_main
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function _Switch_Main
  5343  1066                     _Switch_Main:	
  5344                           
  5345                           ;Switch_B1.c: 75: setSw_Main(1);
  5346                           
  5347                           ;incstack = 0
  5348                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5349  1066  3001               	movlw	1
  5350  1067  3181  21ED  3190   	fcall	_setSw_Main
  5351                           
  5352                           ;Switch_B1.c: 87: TouchPower();
  5353  106A  319E  269A         	fcall	_TouchPower
  5354  106C  0008               	return
  5355  106D                     __end_of_Switch_Main:	
  5356                           
  5357                           	psect	text13
  5358  01ED                     __ptext13:	
  5359 ;; *************** function _setSw_Main *****************
  5360 ;; Defined at:
  5361 ;;		line 121 in file "../src/Switch_B1.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  sw              1    wreg     unsigned char 
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  sw              1   77[BANK0 ] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;		None               void
  5368 ;; Registers used:
  5369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;Total ram usage:        3 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    9
  5382 ;; This function calls:
  5383 ;;		_SwPointSelect
  5384 ;;		_getMain_All_Error_Status
  5385 ;;		_getSw_KeyStatus
  5386 ;;		_setBuz
  5387 ;;		_setDimmerLights_AdjOn
  5388 ;;		_setDimmerLights_SwOff
  5389 ;;		_setDimmerLights_SwOn
  5390 ;;		_setRF_Learn
  5391 ;; This function is called by:
  5392 ;;		_Switch_Main
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           
  5397                           ;psect for function _setSw_Main
  5398  01ED                     _setSw_Main:	
  5399                           
  5400                           ;incstack = 0
  5401                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5402                           ;setSw_Main@sw stored from wreg
  5403  01ED  0020               	movlb	0	; select bank0
  5404  01EE  00ED               	movwf	setSw_Main@sw
  5405                           
  5406                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5407  01EF  086D               	movf	setSw_Main@sw,w
  5408  01F0  319C  24DE  3181   	fcall	_SwPointSelect
  5409                           
  5410                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5411  01F3  0877               	movf	_Sw,w
  5412  01F4  0086               	movwf	6
  5413  01F5  3001               	movlw	1	; select bank2/3
  5414  01F6  0087               	movwf	7
  5415  01F7  1C01               	btfss	1,0
  5416  01F8  2B57               	goto	l2416
  5417                           
  5418                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5419  01F9  3000               	movlw	0
  5420  01FA  3192  2232  3181   	fcall	_getMain_All_Error_Status
  5421  01FD  3800               	iorlw	0
  5422  01FE  1D03               	skipz
  5423  01FF  2A1B               	goto	l9639
  5424                           
  5425                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5426  0200  0A77               	incf	_Sw,w
  5427  0201  0086               	movwf	6
  5428  0202  3001               	movlw	1	; select bank2/3
  5429  0203  0087               	movwf	7
  5430  0204  1081               	bcf	1,1
  5431                           
  5432                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5433  0205  0020               	movlb	0	; select bank0
  5434  0206  086D               	movf	setSw_Main@sw,w
  5435  0207  319D  25CA  3181   	fcall	_getSw_KeyStatus
  5436  020A  3A01               	xorlw	1
  5437  020B  3000               	movlw	0
  5438  020C  1903               	skipnz
  5439  020D  3001               	movlw	1
  5440  020E  0020               	movlb	0	; select bank0
  5441  020F  00EB               	movwf	??_setSw_Main
  5442  0210  0877               	movf	_Sw,w
  5443  0211  0086               	movwf	6
  5444  0212  3001               	movlw	1	; select bank2/3
  5445  0213  0087               	movwf	7
  5446  0214  0DEB               	rlf	??_setSw_Main,f
  5447  0215  0801               	movf	1,w
  5448  0216  066B               	xorwf	??_setSw_Main,w
  5449  0217  39FD               	andlw	-3
  5450  0218  066B               	xorwf	??_setSw_Main,w
  5451  0219  0081               	movwf	1
  5452                           
  5453                           ;Switch_B1.c: 128: } else {
  5454  021A  2A30               	goto	l2418
  5455  021B                     l9639:	
  5456                           
  5457                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5458  021B  0A77               	incf	_Sw,w
  5459  021C  0086               	movwf	6
  5460  021D  3001               	movlw	1	; select bank2/3
  5461  021E  0087               	movwf	7
  5462  021F  1881               	btfsc	1,1
  5463  0220  2A30               	goto	l2418
  5464                           
  5465                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5466  0221  0A77               	incf	_Sw,w
  5467  0222  0086               	movwf	6
  5468  0223  3001               	movlw	1	; select bank2/3
  5469  0224  0087               	movwf	7
  5470  0225  1481               	bsf	1,1
  5471                           
  5472                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5473  0226  0877               	movf	_Sw,w
  5474  0227  0086               	movwf	6
  5475  0228  3001               	movlw	1	; select bank2/3
  5476  0229  0087               	movwf	7
  5477  022A  1081               	bcf	1,1
  5478                           
  5479                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5480  022B  0877               	movf	_Sw,w
  5481  022C  0086               	movwf	6
  5482  022D  3001               	movlw	1	; select bank2/3
  5483  022E  0087               	movwf	7
  5484  022F  1501               	bsf	1,2
  5485  0230                     l2418:	
  5486                           
  5487                           ;Switch_B1.c: 133: }
  5488                           ;Switch_B1.c: 134: }
  5489                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5490  0230  0877               	movf	_Sw,w
  5491  0231  0086               	movwf	6
  5492  0232  3001               	movlw	1	; select bank2/3
  5493  0233  0087               	movwf	7
  5494  0234  1C81               	btfss	1,1
  5495  0235  2B00               	goto	l9689
  5496                           
  5497                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5498  0236  0877               	movf	_Sw,w
  5499  0237  0086               	movwf	6
  5500  0238  3001               	movlw	1	; select bank2/3
  5501  0239  0087               	movwf	7
  5502  023A  1901               	btfsc	1,2
  5503  023B  2A5E               	goto	l9655
  5504                           
  5505                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5506  023C  3001               	movlw	1
  5507  023D  0020               	movlb	0	; select bank0
  5508  023E  00EB               	movwf	??_setSw_Main
  5509  023F  0877               	movf	_Sw,w
  5510  0240  3E02               	addlw	2
  5511  0241  0086               	movwf	6
  5512  0242  3001               	movlw	1	; select bank2/3
  5513  0243  0087               	movwf	7
  5514  0244  086B               	movf	??_setSw_Main,w
  5515  0245  0781               	addwf	1,f
  5516                           
  5517                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5518  0246  0877               	movf	_Sw,w
  5519  0247  3E02               	addlw	2
  5520  0248  0086               	movwf	6
  5521  0249  3001               	movlw	1	; select bank2/3
  5522  024A  0087               	movwf	7
  5523  024B  3005               	movlw	5
  5524  024C  0201               	subwf	1,w
  5525  024D  1C03               	skipc
  5526  024E  0008               	return
  5527                           
  5528                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5529  024F  0877               	movf	_Sw,w
  5530  0250  3E02               	addlw	2
  5531  0251  0086               	movwf	6
  5532  0252  3001               	movlw	1	; select bank2/3
  5533  0253  0087               	movwf	7
  5534  0254  0181               	clrf	1
  5535                           
  5536                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5537  0255  0877               	movf	_Sw,w
  5538  0256  0086               	movwf	6
  5539  0257  3001               	movlw	1	; select bank2/3
  5540  0258  0087               	movwf	7
  5541  0259  1501               	bsf	1,2
  5542                           
  5543                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5544  025A  086D               	movf	setSw_Main@sw,w
  5545  025B  3193  23DF         	fcall	_setDimmerLights_SwOn
  5546                           
  5547                           ;Switch_B1.c: 147: }
  5548                           ;Switch_B1.c: 148: } else {
  5549  025D  0008               	return
  5550  025E                     l9655:	
  5551                           
  5552                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5553  025E  0877               	movf	_Sw,w
  5554  025F  0086               	movwf	6
  5555  0260  3001               	movlw	1	; select bank2/3
  5556  0261  0087               	movwf	7
  5557  0262  1981               	btfsc	1,3
  5558  0263  2A90               	goto	l9665
  5559                           
  5560                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5561  0264  0877               	movf	_Sw,w
  5562  0265  3E03               	addlw	3
  5563  0266  0086               	movwf	6
  5564  0267  3001               	movlw	1	; select bank2/3
  5565  0268  0087               	movwf	7
  5566  0269  3001               	movlw	1
  5567  026A  0781               	addwf	1,f
  5568  026B  3141               	addfsr 1,1
  5569  026C  1803               	skipnc
  5570  026D  0A81               	incf	1,f
  5571                           
  5572                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5573  026E  0877               	movf	_Sw,w
  5574  026F  3E03               	addlw	3
  5575  0270  0086               	movwf	6
  5576  0271  3001               	movlw	1	; select bank2/3
  5577  0272  0087               	movwf	7
  5578  0273  3F40               	moviw [0]fsr1
  5579  0274  0020               	movlb	0	; select bank0
  5580  0275  00EB               	movwf	??_setSw_Main
  5581  0276  3F41               	moviw [1]fsr1
  5582  0277  00EC               	movwf	??_setSw_Main+1
  5583  0278  3000               	movlw	0
  5584  0279  026C               	subwf	??_setSw_Main+1,w
  5585  027A  3096               	movlw	150
  5586  027B  1903               	skipnz
  5587  027C  026B               	subwf	??_setSw_Main,w
  5588  027D  1C03               	skipc
  5589  027E  0008               	return
  5590                           
  5591                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5592  027F  0877               	movf	_Sw,w
  5593  0280  3E03               	addlw	3
  5594  0281  0086               	movwf	6
  5595  0282  3001               	movlw	1	; select bank2/3
  5596  0283  0087               	movwf	7
  5597  0284  3000               	movlw	0
  5598  0285  3FC0               	movwi [0]fsr1
  5599  0286  3FC1               	movwi [1]fsr1
  5600                           
  5601                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5602  0287  0877               	movf	_Sw,w
  5603  0288  0086               	movwf	6
  5604  0289  3001               	movlw	1	; select bank2/3
  5605  028A  0087               	movwf	7
  5606  028B  1581               	bsf	1,3
  5607                           
  5608                           ;Switch_B1.c: 156: setDimmerLights_AdjOn(sw);
  5609  028C  086D               	movf	setSw_Main@sw,w
  5610  028D  3193  2339         	fcall	_setDimmerLights_AdjOn
  5611                           
  5612                           ;Switch_B1.c: 159: }
  5613                           ;Switch_B1.c: 160: } else {
  5614  028F  0008               	return
  5615  0290                     l9665:	
  5616                           
  5617                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5618  0290  0877               	movf	_Sw,w
  5619  0291  0086               	movwf	6
  5620  0292  3001               	movlw	1	; select bank2/3
  5621  0293  0087               	movwf	7
  5622  0294  1A01               	btfsc	1,4
  5623  0295  2ACE               	goto	l9679
  5624                           
  5625                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5626  0296  0877               	movf	_Sw,w
  5627  0297  3E05               	addlw	5
  5628  0298  0086               	movwf	6
  5629  0299  3001               	movlw	1	; select bank2/3
  5630  029A  0087               	movwf	7
  5631  029B  3001               	movlw	1
  5632  029C  0781               	addwf	1,f
  5633  029D  3141               	addfsr 1,1
  5634  029E  1803               	skipnc
  5635  029F  0A81               	incf	1,f
  5636                           
  5637                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5638  02A0  0877               	movf	_Sw,w
  5639  02A1  3E05               	addlw	5
  5640  02A2  0086               	movwf	6
  5641  02A3  3001               	movlw	1	; select bank2/3
  5642  02A4  0087               	movwf	7
  5643  02A5  3F40               	moviw [0]fsr1
  5644  02A6  0020               	movlb	0	; select bank0
  5645  02A7  00EB               	movwf	??_setSw_Main
  5646  02A8  3F41               	moviw [1]fsr1
  5647  02A9  00EC               	movwf	??_setSw_Main+1
  5648  02AA  3000               	movlw	0
  5649  02AB  026C               	subwf	??_setSw_Main+1,w
  5650  02AC  3096               	movlw	150
  5651  02AD  1903               	skipnz
  5652  02AE  026B               	subwf	??_setSw_Main,w
  5653  02AF  1C03               	skipc
  5654  02B0  0008               	return
  5655                           
  5656                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5657  02B1  0877               	movf	_Sw,w
  5658  02B2  3E05               	addlw	5
  5659  02B3  0086               	movwf	6
  5660  02B4  3001               	movlw	1	; select bank2/3
  5661  02B5  0087               	movwf	7
  5662  02B6  3000               	movlw	0
  5663  02B7  3FC0               	movwi [0]fsr1
  5664  02B8  3FC1               	movwi [1]fsr1
  5665                           
  5666                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5667  02B9  0877               	movf	_Sw,w
  5668  02BA  0086               	movwf	6
  5669  02BB  3001               	movlw	1	; select bank2/3
  5670  02BC  0087               	movwf	7
  5671  02BD  1601               	bsf	1,4
  5672                           
  5673                           ;Switch_B1.c: 168: setRF_Learn(1);
  5674  02BE  3001               	movlw	1
  5675  02BF  319E  265C  3181   	fcall	_setRF_Learn
  5676                           
  5677                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5678  02C2  0021               	movlb	1	; select bank1
  5679  02C3  1EA0               	btfss	_myMain^(0+128),5
  5680  02C4  0008               	return
  5681                           
  5682                           ;Switch_B1.c: 171: setBuz(2, 100);
  5683  02C5  3064               	movlw	100
  5684  02C6  0020               	movlb	0	; select bank0
  5685  02C7  00A9               	movwf	setBuz@time
  5686  02C8  3000               	movlw	0
  5687  02C9  00AA               	movwf	setBuz@time+1
  5688  02CA  3002               	movlw	2
  5689  02CB  3197  27A7         	fcall	_setBuz
  5690                           
  5691                           ;Switch_B1.c: 172: }
  5692                           ;Switch_B1.c: 174: }
  5693                           ;Switch_B1.c: 175: } else {
  5694  02CD  0008               	return
  5695  02CE                     l9679:	
  5696                           
  5697                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5698  02CE  0877               	movf	_Sw,w
  5699  02CF  0086               	movwf	6
  5700  02D0  3001               	movlw	1	; select bank2/3
  5701  02D1  0087               	movwf	7
  5702  02D2  1A81               	btfsc	1,5
  5703  02D3  0008               	return
  5704                           
  5705                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5706  02D4  0877               	movf	_Sw,w
  5707  02D5  3E07               	addlw	7
  5708  02D6  0086               	movwf	6
  5709  02D7  3001               	movlw	1	; select bank2/3
  5710  02D8  0087               	movwf	7
  5711  02D9  3001               	movlw	1
  5712  02DA  0781               	addwf	1,f
  5713  02DB  3141               	addfsr 1,1
  5714  02DC  1803               	skipnc
  5715  02DD  0A81               	incf	1,f
  5716                           
  5717                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5718  02DE  0877               	movf	_Sw,w
  5719  02DF  3E07               	addlw	7
  5720  02E0  0086               	movwf	6
  5721  02E1  3001               	movlw	1	; select bank2/3
  5722  02E2  0087               	movwf	7
  5723  02E3  3F40               	moviw [0]fsr1
  5724  02E4  0020               	movlb	0	; select bank0
  5725  02E5  00EB               	movwf	??_setSw_Main
  5726  02E6  3F41               	moviw [1]fsr1
  5727  02E7  00EC               	movwf	??_setSw_Main+1
  5728  02E8  3001               	movlw	1
  5729  02E9  026C               	subwf	??_setSw_Main+1,w
  5730  02EA  302C               	movlw	44
  5731  02EB  1903               	skipnz
  5732  02EC  026B               	subwf	??_setSw_Main,w
  5733  02ED  1C03               	skipc
  5734  02EE  0008               	return
  5735                           
  5736                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5737  02EF  0877               	movf	_Sw,w
  5738  02F0  3E07               	addlw	7
  5739  02F1  0086               	movwf	6
  5740  02F2  3001               	movlw	1	; select bank2/3
  5741  02F3  0087               	movwf	7
  5742  02F4  3000               	movlw	0
  5743  02F5  3FC0               	movwi [0]fsr1
  5744  02F6  3FC1               	movwi [1]fsr1
  5745                           
  5746                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5747  02F7  0877               	movf	_Sw,w
  5748  02F8  0086               	movwf	6
  5749  02F9  3001               	movlw	1	; select bank2/3
  5750  02FA  0087               	movwf	7
  5751  02FB  1681               	bsf	1,5
  5752                           
  5753                           ;Switch_B1.c: 183: setRF_Learn(0);
  5754  02FC  3000               	movlw	0
  5755  02FD  319E  265C         	fcall	_setRF_Learn
  5756                           
  5757                           ;Switch_B1.c: 186: }
  5758                           ;Switch_B1.c: 187: }
  5759                           ;Switch_B1.c: 188: }
  5760                           ;Switch_B1.c: 189: }
  5761                           ;Switch_B1.c: 190: }
  5762                           ;Switch_B1.c: 191: } else {
  5763  02FF  0008               	return
  5764  0300                     l9689:	
  5765                           
  5766                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5767  0300  0877               	movf	_Sw,w
  5768  0301  0086               	movwf	6
  5769  0302  3001               	movlw	1	; select bank2/3
  5770  0303  0087               	movwf	7
  5771  0304  1D01               	btfss	1,2
  5772  0305  0008               	return
  5773                           
  5774                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5775  0306  3001               	movlw	1
  5776  0307  0020               	movlb	0	; select bank0
  5777  0308  00EB               	movwf	??_setSw_Main
  5778  0309  0877               	movf	_Sw,w
  5779  030A  3E02               	addlw	2
  5780  030B  0086               	movwf	6
  5781  030C  3001               	movlw	1	; select bank2/3
  5782  030D  0087               	movwf	7
  5783  030E  086B               	movf	??_setSw_Main,w
  5784  030F  0781               	addwf	1,f
  5785                           
  5786                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5787  0310  0877               	movf	_Sw,w
  5788  0311  3E02               	addlw	2
  5789  0312  0086               	movwf	6
  5790  0313  3001               	movlw	1	; select bank2/3
  5791  0314  0087               	movwf	7
  5792  0315  3005               	movlw	5
  5793  0316  0201               	subwf	1,w
  5794  0317  1C03               	skipc
  5795  0318  0008               	return
  5796                           
  5797                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5798  0319  0877               	movf	_Sw,w
  5799  031A  3E02               	addlw	2
  5800  031B  0086               	movwf	6
  5801  031C  3001               	movlw	1	; select bank2/3
  5802  031D  0087               	movwf	7
  5803  031E  0181               	clrf	1
  5804                           
  5805                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5806  031F  0877               	movf	_Sw,w
  5807  0320  0086               	movwf	6
  5808  0321  3001               	movlw	1	; select bank2/3
  5809  0322  0087               	movwf	7
  5810  0323  1101               	bcf	1,2
  5811                           
  5812                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5813  0324  0877               	movf	_Sw,w
  5814  0325  3E03               	addlw	3
  5815  0326  0086               	movwf	6
  5816  0327  3001               	movlw	1	; select bank2/3
  5817  0328  0087               	movwf	7
  5818  0329  3000               	movlw	0
  5819  032A  3FC0               	movwi [0]fsr1
  5820  032B  3FC1               	movwi [1]fsr1
  5821                           
  5822                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5823  032C  0877               	movf	_Sw,w
  5824  032D  0086               	movwf	6
  5825  032E  3001               	movlw	1	; select bank2/3
  5826  032F  0087               	movwf	7
  5827  0330  1181               	bcf	1,3
  5828                           
  5829                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5830  0331  0877               	movf	_Sw,w
  5831  0332  3E05               	addlw	5
  5832  0333  0086               	movwf	6
  5833  0334  3001               	movlw	1	; select bank2/3
  5834  0335  0087               	movwf	7
  5835  0336  3000               	movlw	0
  5836  0337  3FC0               	movwi [0]fsr1
  5837  0338  3FC1               	movwi [1]fsr1
  5838                           
  5839                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5840  0339  0877               	movf	_Sw,w
  5841  033A  0086               	movwf	6
  5842  033B  3001               	movlw	1	; select bank2/3
  5843  033C  0087               	movwf	7
  5844  033D  1201               	bcf	1,4
  5845                           
  5846                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5847  033E  0877               	movf	_Sw,w
  5848  033F  3E07               	addlw	7
  5849  0340  0086               	movwf	6
  5850  0341  3001               	movlw	1	; select bank2/3
  5851  0342  0087               	movwf	7
  5852  0343  3000               	movlw	0
  5853  0344  3FC0               	movwi [0]fsr1
  5854  0345  3FC1               	movwi [1]fsr1
  5855                           
  5856                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5857  0346  0877               	movf	_Sw,w
  5858  0347  0086               	movwf	6
  5859  0348  3001               	movlw	1	; select bank2/3
  5860  0349  0087               	movwf	7
  5861  034A  1281               	bcf	1,5
  5862                           
  5863                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5864  034B  0021               	movlb	1	; select bank1
  5865  034C  1852               	btfsc	_SwDetect^(0+128),0
  5866  034D  2B53               	goto	l9715
  5867                           
  5868                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5869  034E  0020               	movlb	0	; select bank0
  5870  034F  086D               	movf	setSw_Main@sw,w
  5871  0350  3195  2568  3181   	fcall	_setDimmerLights_SwOff
  5872  0353                     l9715:	
  5873                           
  5874                           ;Switch_B1.c: 206: }
  5875                           ;Switch_B1.c: 209: setRF_Learn(0);
  5876  0353  3000               	movlw	0
  5877  0354  319E  265C         	fcall	_setRF_Learn
  5878                           
  5879                           ;Switch_B1.c: 211: }
  5880                           ;Switch_B1.c: 212: }
  5881                           ;Switch_B1.c: 213: }
  5882                           ;Switch_B1.c: 214: } else {
  5883  0356  0008               	return
  5884  0357                     l2416:	
  5885                           
  5886                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5887  0357  0021               	movlb	1	; select bank1
  5888  0358  1C20               	btfss	_myMain^(0+128),0
  5889  0359  0008               	return
  5890                           
  5891                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5892  035A  0877               	movf	_Sw,w
  5893  035B  0086               	movwf	6
  5894  035C  3001               	movlw	1	; select bank2/3
  5895  035D  0087               	movwf	7
  5896  035E  1401               	bsf	1,0
  5897  035F  0008               	return
  5898  0360                     __end_of_setSw_Main:	
  5899                           
  5900                           	psect	text14
  5901  1E5C                     __ptext14:	
  5902 ;; *************** function _setRF_Learn *****************
  5903 ;; Defined at:
  5904 ;;		line 23 in file "../src/RF_Control_B1.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;  command         1    wreg     unsigned char 
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;  command         1    1[BANK0 ] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;		None               void
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;Total ram usage:        2 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    5
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_setSw_Main
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           
  5933                           ;psect for function _setRF_Learn
  5934  1E5C                     _setRF_Learn:	
  5935                           
  5936                           ;incstack = 0
  5937                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5938                           ;setRF_Learn@command stored from wreg
  5939  1E5C  0020               	movlb	0	; select bank0
  5940  1E5D  00A1               	movwf	setRF_Learn@command
  5941                           
  5942                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5943  1E5E  0821               	movf	setRF_Learn@command,w
  5944  1E5F  3A01               	xorlw	1
  5945  1E60  3000               	movlw	0
  5946  1E61  1903               	skipnz
  5947  1E62  3001               	movlw	1
  5948  1E63  00A0               	movwf	??_setRF_Learn
  5949  1E64  0EA0               	swapf	??_setRF_Learn,f
  5950  1E65  0DA0               	rlf	??_setRF_Learn,f
  5951  1E66  0DA0               	rlf	??_setRF_Learn,f
  5952  1E67  0021               	movlb	1	; select bank1
  5953  1E68  083A               	movf	_RF1^(0+128),w
  5954  1E69  0020               	movlb	0	; select bank0
  5955  1E6A  0620               	xorwf	??_setRF_Learn,w
  5956  1E6B  39BF               	andlw	-65
  5957  1E6C  0620               	xorwf	??_setRF_Learn,w
  5958  1E6D  0021               	movlb	1	; select bank1
  5959  1E6E  00BA               	movwf	_RF1^(0+128)
  5960  1E6F  0008               	return
  5961  1E70                     __end_of_setRF_Learn:	
  5962                           
  5963                           	psect	text15
  5964  1339                     __ptext15:	
  5965 ;; *************** function _setDimmerLights_AdjOn *****************
  5966 ;; Defined at:
  5967 ;;		line 477 in file "../src/Dimmer_B1.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;  sw              1    wreg     unsigned char 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  sw              1    4[BANK0 ] unsigned char 
  5972 ;; Return value:  Size  Location     Type
  5973 ;;		None               void
  5974 ;; Registers used:
  5975 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5985 ;;Total ram usage:        1 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    7
  5988 ;; This function calls:
  5989 ;;		_DimmerLightsPointSelect
  5990 ;;		_getDimmerLights_Allow_Condition
  5991 ;; This function is called by:
  5992 ;;		_setSw_Main
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           
  5997                           ;psect for function _setDimmerLights_AdjOn
  5998  1339                     _setDimmerLights_AdjOn:	
  5999                           
  6000                           ;incstack = 0
  6001                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6002                           ;setDimmerLights_AdjOn@sw stored from wreg
  6003  1339  0020               	movlb	0	; select bank0
  6004  133A  00A4               	movwf	setDimmerLights_AdjOn@sw
  6005                           
  6006                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  6007  133B  0824               	movf	setDimmerLights_AdjOn@sw,w
  6008  133C  319C  24B2  3193   	fcall	_DimmerLightsPointSelect
  6009                           
  6010                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  6011  133F  0020               	movlb	0	; select bank0
  6012  1340  086F               	movf	_DimmerLights,w
  6013  1341  3E0A               	addlw	10
  6014  1342  0086               	movwf	6
  6015  1343  3001               	movlw	1	; select bank2/3
  6016  1344  0087               	movwf	7
  6017  1345  1881               	btfsc	1,1
  6018  1346  0008               	return
  6019  1347  0824               	movf	setDimmerLights_AdjOn@sw,w
  6020  1348  319E  26AF  3193   	fcall	_getDimmerLights_Allow_Condition
  6021  134B  3800               	iorlw	0
  6022  134C  1D03               	skipz
  6023  134D  0008               	return
  6024                           
  6025                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6026  134E  0020               	movlb	0	; select bank0
  6027  134F  086F               	movf	_DimmerLights,w
  6028  1350  3E0B               	addlw	11
  6029  1351  0086               	movwf	6
  6030  1352  3001               	movlw	1	; select bank2/3
  6031  1353  0087               	movwf	7
  6032  1354  1C81               	btfss	1,1
  6033  1355  0008               	return
  6034                           
  6035                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6036  1356  086F               	movf	_DimmerLights,w
  6037  1357  3E0B               	addlw	11
  6038  1358  0086               	movwf	6
  6039  1359  3001               	movlw	1	; select bank2/3
  6040  135A  0087               	movwf	7
  6041  135B  1501               	bsf	1,2
  6042                           
  6043                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6044  135C  086F               	movf	_DimmerLights,w
  6045  135D  3E02               	addlw	2
  6046  135E  0086               	movwf	6
  6047  135F  3001               	movlw	1	; select bank2/3
  6048  1360  0087               	movwf	7
  6049  1361  1481               	bsf	1,1
  6050                           
  6051                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6052  1362  086F               	movf	_DimmerLights,w
  6053  1363  3E0A               	addlw	10
  6054  1364  0086               	movwf	6
  6055  1365  3001               	movlw	1	; select bank2/3
  6056  1366  0087               	movwf	7
  6057  1367  1581               	bsf	1,3
  6058                           
  6059                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6060  1368  086F               	movf	_DimmerLights,w
  6061  1369  3E0A               	addlw	10
  6062  136A  0086               	movwf	6
  6063  136B  3001               	movlw	1	; select bank2/3
  6064  136C  0087               	movwf	7
  6065  136D  1501               	bsf	1,2
  6066  136E  0008               	return
  6067  136F                     __end_of_setDimmerLights_AdjOn:	
  6068                           
  6069                           	psect	text16
  6070  1DCA                     __ptext16:	
  6071 ;; *************** function _getSw_KeyStatus *****************
  6072 ;; Defined at:
  6073 ;;		line 222 in file "../src/Switch_B1.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;  sw              1    wreg     unsigned char 
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;  sw              1    0[COMMON] unsigned char 
  6078 ;;  status          1    1[BANK0 ] unsigned char 
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  1    wreg      unsigned char 
  6081 ;; Registers used:
  6082 ;;		wreg, status,2
  6083 ;; Tracked objects:
  6084 ;;		On entry : 0/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;Total ram usage:        3 bytes
  6093 ;; Hardware stack levels used:    1
  6094 ;; Hardware stack levels required when called:    5
  6095 ;; This function calls:
  6096 ;;		Nothing
  6097 ;; This function is called by:
  6098 ;;		_setSw_Main
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           
  6103                           ;psect for function _getSw_KeyStatus
  6104  1DCA                     _getSw_KeyStatus:	
  6105                           
  6106                           ;Switch_B1.c: 223: char status = 0;
  6107                           
  6108                           ;incstack = 0
  6109                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6110  1DCA  0020               	movlb	0	; select bank0
  6111  1DCB  01A1               	clrf	getSw_KeyStatus@status
  6112                           
  6113                           ;Switch_B1.c: 243: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6114  1DCC  01A2               	clrf	_getSw_KeyStatus$6016
  6115  1DCD  0AA2               	incf	_getSw_KeyStatus$6016,f
  6116  1DCE  1F0C               	btfss	12,6	;volatile
  6117  1DCF  1A0C               	btfsc	12,4	;volatile
  6118  1DD0  2DD5               	goto	l9163
  6119  1DD1  1C0C               	btfss	12,0	;volatile
  6120  1DD2  1B8C               	btfsc	12,7	;volatile
  6121  1DD3  2DD5               	goto	l9163
  6122  1DD4  01A2               	clrf	_getSw_KeyStatus$6016
  6123  1DD5                     l9163:	
  6124  1DD5  0822               	movf	_getSw_KeyStatus$6016,w
  6125  1DD6  00A0               	movwf	??_getSw_KeyStatus
  6126  1DD7  0820               	movf	??_getSw_KeyStatus,w
  6127  1DD8  00A1               	movwf	getSw_KeyStatus@status
  6128                           
  6129                           ;Switch_B1.c: 246: return status;
  6130  1DD9  0821               	movf	getSw_KeyStatus@status,w
  6131  1DDA  0008               	return
  6132  1DDB                     __end_of_getSw_KeyStatus:	
  6133                           
  6134                           	psect	text17
  6135  1CDE                     __ptext17:	
  6136 ;; *************** function _SwPointSelect *****************
  6137 ;; Defined at:
  6138 ;;		line 25 in file "../src/Switch_B1.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;  sw              1    wreg     unsigned char 
  6141 ;; Auto vars:     Size  Location     Type
  6142 ;;  sw              1    1[BANK0 ] unsigned char 
  6143 ;; Return value:  Size  Location     Type
  6144 ;;		None               void
  6145 ;; Registers used:
  6146 ;;		wreg
  6147 ;; Tracked objects:
  6148 ;;		On entry : 0/0
  6149 ;;		On exit  : 0/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;Total ram usage:        2 bytes
  6157 ;; Hardware stack levels used:    1
  6158 ;; Hardware stack levels required when called:    5
  6159 ;; This function calls:
  6160 ;;		Nothing
  6161 ;; This function is called by:
  6162 ;;		_setSw_Main
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           
  6167                           ;psect for function _SwPointSelect
  6168  1CDE                     _SwPointSelect:	
  6169                           
  6170                           ;incstack = 0
  6171                           ; Regs used in _SwPointSelect: [wreg]
  6172                           ;SwPointSelect@sw stored from wreg
  6173  1CDE  0020               	movlb	0	; select bank0
  6174  1CDF  00A1               	movwf	SwPointSelect@sw
  6175                           
  6176                           ;Switch_B1.c: 28: if (sw == 1) {
  6177  1CE0  0821               	movf	SwPointSelect@sw,w
  6178  1CE1  3A01               	xorlw	1
  6179  1CE2  1D03               	skipz
  6180  1CE3  0008               	return
  6181                           
  6182                           ;Switch_B1.c: 29: Sw = &Sw1;
  6183  1CE4  30E3               	movlw	_Sw1& (0+255)
  6184  1CE5  00A0               	movwf	??_SwPointSelect
  6185  1CE6  0820               	movf	??_SwPointSelect,w
  6186  1CE7  00F7               	movwf	_Sw
  6187  1CE8  0008               	return
  6188  1CE9                     __end_of_SwPointSelect:	
  6189                           
  6190                           	psect	text18
  6191  1C75                     __ptext18:	
  6192 ;; *************** function _Switch_Initialization *****************
  6193 ;; Defined at:
  6194 ;;		line 46 in file "../src/Switch_B1.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;		None
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;		None
  6199 ;; Return value:  Size  Location     Type
  6200 ;;		None               void
  6201 ;; Registers used:
  6202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/0
  6205 ;;		On exit  : 0/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;Total ram usage:        0 bytes
  6213 ;; Hardware stack levels used:    1
  6214 ;; Hardware stack levels required when called:    8
  6215 ;; This function calls:
  6216 ;;		_TouchPower
  6217 ;;		_setSw_Initialization
  6218 ;; This function is called by:
  6219 ;;		_main
  6220 ;; This function uses a non-reentrant model
  6221 ;;
  6222                           
  6223                           
  6224                           ;psect for function _Switch_Initialization
  6225  1C75                     _Switch_Initialization:	
  6226                           
  6227                           ;Switch_B1.c: 47: TouchPower();
  6228                           
  6229                           ;incstack = 0
  6230                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6231  1C75  319E  269A  319C   	fcall	_TouchPower
  6232                           
  6233                           ;Switch_B1.c: 49: WPUB1 = 0;
  6234  1C78  0024               	movlb	4	; select bank4
  6235  1C79  108D               	bcf	13,1	;volatile
  6236                           
  6237                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6238  1C7A  3001               	movlw	1
  6239  1C7B  319D  2587         	fcall	_setSw_Initialization
  6240  1C7D  0008               	return
  6241  1C7E                     __end_of_Switch_Initialization:	
  6242                           
  6243                           	psect	text19
  6244  1D87                     __ptext19:	
  6245 ;; *************** function _setSw_Initialization *****************
  6246 ;; Defined at:
  6247 ;;		line 93 in file "../src/Switch_B1.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  sw              1    wreg     unsigned char 
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;  sw              1    4[BANK0 ] unsigned char 
  6252 ;; Return value:  Size  Location     Type
  6253 ;;		None               void
  6254 ;; Registers used:
  6255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6256 ;; Tracked objects:
  6257 ;;		On entry : 0/0
  6258 ;;		On exit  : 0/0
  6259 ;;		Unchanged: 0/0
  6260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;Total ram usage:        1 bytes
  6266 ;; Hardware stack levels used:    1
  6267 ;; Hardware stack levels required when called:    7
  6268 ;; This function calls:
  6269 ;;		_setLED
  6270 ;; This function is called by:
  6271 ;;		_Switch_Initialization
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275                           
  6276                           ;psect for function _setSw_Initialization
  6277  1D87                     _setSw_Initialization:	
  6278                           
  6279                           ;incstack = 0
  6280                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6281                           ;setSw_Initialization@sw stored from wreg
  6282  1D87  0020               	movlb	0	; select bank0
  6283  1D88  00A4               	movwf	setSw_Initialization@sw
  6284                           
  6285                           ;Switch_B1.c: 94: setLED(sw, 1);
  6286  1D89  01A2               	clrf	setLED@command
  6287  1D8A  0AA2               	incf	setLED@command,f
  6288  1D8B  0824               	movf	setSw_Initialization@sw,w
  6289  1D8C  3193  23A6  319D   	fcall	_setLED
  6290                           
  6291                           ;Switch_B1.c: 96: setLED(sw + 1, 1);
  6292  1D8F  0020               	movlb	0	; select bank0
  6293  1D90  01A2               	clrf	setLED@command
  6294  1D91  0AA2               	incf	setLED@command,f
  6295  1D92  0824               	movf	setSw_Initialization@sw,w
  6296  1D93  3E01               	addlw	1
  6297  1D94  3193  23A6         	fcall	_setLED
  6298  1D96  0008               	return
  6299  1D97                     __end_of_setSw_Initialization:	
  6300                           
  6301                           	psect	text20
  6302  1E9A                     __ptext20:	
  6303 ;; *************** function _TouchPower *****************
  6304 ;; Defined at:
  6305 ;;		line 10 in file "../src/Switch_B1.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;		None
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;		None
  6310 ;; Return value:  Size  Location     Type
  6311 ;;		None               void
  6312 ;; Registers used:
  6313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;Total ram usage:        0 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:    6
  6326 ;; This function calls:
  6327 ;;		_Timeout_Counter
  6328 ;;		_set_TimeoutCleared
  6329 ;; This function is called by:
  6330 ;;		_Switch_Initialization
  6331 ;;		_Switch_Main
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           
  6336                           ;psect for function _TouchPower
  6337  1E9A                     _TouchPower:	
  6338                           
  6339                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6340                           
  6341                           ;incstack = 0
  6342                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6343  1E9A  0020               	movlb	0	; select bank0
  6344  1E9B  180D               	btfsc	13,0	;volatile
  6345  1E9C  0008               	return
  6346                           
  6347                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6348  1E9D  0021               	movlb	1	; select bank1
  6349  1E9E  1C20               	btfss	_myMain^(0+128),0
  6350  1E9F  0008               	return
  6351  1EA0  2EA6               	goto	l9621
  6352  1EA1                     l2396:	
  6353                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6354                           
  6355                           
  6356                           ;Switch_B1.c: 14: RB0 = 1;
  6357  1EA1  0020               	movlb	0	; select bank0
  6358  1EA2  140D               	bsf	13,0	;volatile
  6359                           
  6360                           ;Switch_B1.c: 15: Timeout_Counter();
  6361  1EA3  319E  2670  319E   	fcall	_Timeout_Counter
  6362  1EA6                     l9621:	
  6363  1EA6  0020               	movlb	0	; select bank0
  6364  1EA7  180D               	btfsc	13,0	;volatile
  6365  1EA8  2EAC               	goto	l9625
  6366  1EA9  0021               	movlb	1	; select bank1
  6367  1EAA  1D2B               	btfss	(_myMain^(0+128)+11),2
  6368  1EAB  2EA1               	goto	l2396
  6369  1EAC                     l9625:	
  6370                           
  6371                           ;Switch_B1.c: 16: }
  6372                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6373  1EAC  319C  242D         	fcall	_set_TimeoutCleared
  6374  1EAE  0008               	return
  6375  1EAF                     __end_of_TouchPower:	
  6376                           
  6377                           	psect	text21
  6378  1C00                     __ptext21:	
  6379 ;; *************** function _RF_Main *****************
  6380 ;; Defined at:
  6381 ;;		line 16 in file "../src/RF_Control_B1.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;		None
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;		None
  6386 ;; Return value:  Size  Location     Type
  6387 ;;		None               void
  6388 ;; Registers used:
  6389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;Total ram usage:        0 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:   14
  6402 ;; This function calls:
  6403 ;;		_setRF_Main
  6404 ;; This function is called by:
  6405 ;;		_main
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           
  6410                           ;psect for function _RF_Main
  6411  1C00                     _RF_Main:	
  6412                           
  6413                           ;RF_Control_B1.c: 18: setRF_Main();
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6417  1C00  318E  260C         	fcall	_setRF_Main
  6418  1C02  0008               	return
  6419  1C03                     __end_of_RF_Main:	
  6420                           
  6421                           	psect	text22
  6422  0E0C                     __ptext22:	
  6423 ;; *************** function _setRF_Main *****************
  6424 ;; Defined at:
  6425 ;;		line 52 in file "../src/RF_Control_B1.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;		None
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;  error           1    2[BANK2 ] unsigned char 
  6430 ;;  Receive_OK      1    1[BANK2 ] unsigned char 
  6431 ;;  loop_f          1    0[BANK2 ] unsigned char 
  6432 ;; Return value:  Size  Location     Type
  6433 ;;		None               void
  6434 ;; Registers used:
  6435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Totals:         0       0       1       3       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;Total ram usage:        4 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; Hardware stack levels required when called:   13
  6448 ;; This function calls:
  6449 ;;		_CC2500_RxData
  6450 ;;		_CC2500_TxData
  6451 ;;		_CC2500_WriteCommand
  6452 ;;		_RF_RxDisable
  6453 ;;		_getBuz_GO
  6454 ;;		_getMain_All_Error_Status
  6455 ;;		_getRF_KeyStatus
  6456 ;;		_getRxData
  6457 ;; This function is called by:
  6458 ;;		_RF_Main
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function _setRF_Main
  6464  0E0C                     _setRF_Main:	
  6465                           
  6466                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6470  0E0C  0022               	movlb	2	; select bank2
  6471  0E0D  01ED               	clrf	setRF_Main@loop_f^(0+256)
  6472  0E0E  01EE               	clrf	setRF_Main@Receive_OK^(0+256)
  6473  0E0F  01EF               	clrf	setRF_Main@error^(0+256)
  6474                           
  6475                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6476  0E10  0021               	movlb	1	; select bank1
  6477  0E11  1C3A               	btfss	_RF1^(0+128),0
  6478  0E12  2EA3               	goto	l2038
  6479                           
  6480                           ;RF_Control_B1.c: 56: if (RF1.RxStatus == 1) {
  6481  0E13  1DBA               	btfss	_RF1^(0+128),3
  6482  0E14  2E26               	goto	l9545
  6483                           
  6484                           ;RF_Control_B1.c: 57: RF1.CorrectionCounter++;
  6485  0E15  3001               	movlw	1
  6486  0E16  07C4               	addwf	(_RF1^(0+128)+10),f
  6487  0E17  3000               	movlw	0
  6488  0E18  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  6489                           
  6490                           ;RF_Control_B1.c: 58: if (RF1.CorrectionCounter >= 6000) {
  6491  0E19  3017               	movlw	23
  6492  0E1A  0245               	subwf	((_RF1+1)^(0+128)+10),w
  6493  0E1B  3070               	movlw	112
  6494  0E1C  1903               	skipnz
  6495  0E1D  0244               	subwf	(_RF1^(0+128)+10),w
  6496  0E1E  1C03               	skipc
  6497  0E1F  2E29               	goto	l9547
  6498                           
  6499                           ;RF_Control_B1.c: 59: RF1.CorrectionCounter = 0;
  6500  0E20  01C4               	clrf	(_RF1^(0+128)+10)
  6501  0E21  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6502                           
  6503                           ;RF_Control_B1.c: 60: RF_RxDisable();
  6504  0E22  319E  2623  318E   	fcall	_RF_RxDisable
  6505                           
  6506                           ;RF_Control_B1.c: 61: }
  6507                           ;RF_Control_B1.c: 62: } else {
  6508  0E25  2E29               	goto	l9547
  6509  0E26                     l9545:	
  6510                           
  6511                           ;RF_Control_B1.c: 63: RF1.CorrectionCounter = 0;
  6512  0E26  0021               	movlb	1	; select bank1
  6513  0E27  01C4               	clrf	(_RF1^(0+128)+10)
  6514  0E28  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6515  0E29                     l9547:	
  6516                           
  6517                           ;RF_Control_B1.c: 64: }
  6518                           ;RF_Control_B1.c: 66: if (RF1.Learn == 0) {
  6519  0E29  0021               	movlb	1	; select bank1
  6520  0E2A  1B3A               	btfsc	_RF1^(0+128),6
  6521  0E2B  2E3F               	goto	l2042
  6522                           
  6523                           ;RF_Control_B1.c: 67: if (RF1.Run == 1) {
  6524  0E2C  1CBB               	btfss	(_RF1^(0+128)+1),1
  6525  0E2D  2E44               	goto	l9563
  6526                           
  6527                           ;RF_Control_B1.c: 68: RF1.Count++;
  6528  0E2E  3001               	movlw	1
  6529  0E2F  07BC               	addwf	(_RF1^(0+128)+2),f
  6530  0E30  3000               	movlw	0
  6531  0E31  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6532                           
  6533                           ;RF_Control_B1.c: 69: if (RF1.Count == RF1.RunTime) {
  6534  0E32  3002               	movlw	2
  6535  0E33  3EBA               	addlw	_RF1& (0+255)
  6536  0E34  0086               	movwf	6
  6537  0E35  0187               	clrf	7
  6538  0E36  3F40               	moviw [0]fsr1
  6539  0E37  0641               	xorwf	(_RF1^(0+128)+7),w
  6540  0E38  1D03               	skipz
  6541  0E39  2E3C               	goto	u10545
  6542  0E3A  3F41               	moviw [1]fsr1
  6543  0E3B  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6544  0E3C                     u10545:	
  6545  0E3C  1D03               	skipz
  6546  0E3D  2E44               	goto	l9563
  6547  0E3E  2E41               	goto	l9559
  6548  0E3F                     l2042:	
  6549                           ;RF_Control_B1.c: 72: }
  6550                           ;RF_Control_B1.c: 73: }
  6551                           ;RF_Control_B1.c: 74: } else {
  6552                           
  6553                           ;RF_Control_B1.c: 71: RF1.Run = 0;
  6554                           
  6555                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6556                           
  6557                           
  6558                           ;RF_Control_B1.c: 75: if (RF1.Run == 1) {
  6559  0E3F  1CBB               	btfss	(_RF1^(0+128)+1),1
  6560  0E40  2E44               	goto	l9563
  6561  0E41                     l9559:	
  6562                           
  6563                           ;RF_Control_B1.c: 76: RF1.Count = 0;
  6564  0E41  01BC               	clrf	(_RF1^(0+128)+2)
  6565  0E42  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6566                           
  6567                           ;RF_Control_B1.c: 77: RF1.Run = 0;
  6568  0E43  10BB               	bcf	(_RF1^(0+128)+1),1
  6569  0E44                     l9563:	
  6570                           
  6571                           ;RF_Control_B1.c: 78: }
  6572                           ;RF_Control_B1.c: 79: }
  6573                           ;RF_Control_B1.c: 81: if (getBuz_GO() == 0) {
  6574  0E44  319D  25A8  318E   	fcall	_getBuz_GO
  6575  0E47  0020               	movlb	0	; select bank0
  6576  0E48  0821               	movf	?_getBuz_GO+1,w
  6577  0E49  0420               	iorwf	?_getBuz_GO,w
  6578  0E4A  1D03               	skipz
  6579  0E4B  0008               	return
  6580                           
  6581                           ;RF_Control_B1.c: 82: if (getMain_All_Error_Status(0) == 0) {
  6582  0E4C  3000               	movlw	0
  6583  0E4D  3192  2232  318E   	fcall	_getMain_All_Error_Status
  6584  0E50  3800               	iorlw	0
  6585  0E51  1D03               	skipz
  6586  0E52  2E68               	goto	l2048
  6587                           
  6588                           ;RF_Control_B1.c: 84: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6589  0E53  319D  25B9  318E   	fcall	_getRF_KeyStatus
  6590  0E56  3A01               	xorlw	1
  6591  0E57  3000               	movlw	0
  6592  0E58  1903               	skipnz
  6593  0E59  3001               	movlw	1
  6594  0E5A  0021               	movlb	1	; select bank1
  6595  0E5B  00EE               	movwf	??_setRF_Main^(0+128)
  6596  0E5C  0CEE               	rrf	??_setRF_Main^(0+128),f
  6597  0E5D  0CEE               	rrf	??_setRF_Main^(0+128),f
  6598  0E5E  083A               	movf	_RF1^(0+128),w
  6599  0E5F  066E               	xorwf	??_setRF_Main^(0+128),w
  6600  0E60  397F               	andlw	-129
  6601  0E61  066E               	xorwf	??_setRF_Main^(0+128),w
  6602  0E62  00BA               	movwf	_RF1^(0+128)
  6603                           
  6604                           ;RF_Control_B1.c: 85: if (RF1.Key == 1 && RF1.Learn == 0) {
  6605  0E63  1BBA               	btfsc	_RF1^(0+128),7
  6606  0E64  1B3A               	btfsc	_RF1^(0+128),6
  6607  0E65  2E6A               	goto	l2050
  6608                           
  6609                           ;RF_Control_B1.c: 86: RF1.Run = 1;
  6610  0E66  14BB               	bsf	(_RF1^(0+128)+1),1
  6611                           
  6612                           ;RF_Control_B1.c: 87: }
  6613                           ;RF_Control_B1.c: 92: } else {
  6614  0E67  2E6A               	goto	l2050
  6615  0E68                     l2048:	
  6616                           
  6617                           ;RF_Control_B1.c: 93: RF1.Key = 0;
  6618  0E68  0021               	movlb	1	; select bank1
  6619  0E69  13BA               	bcf	_RF1^(0+128),7
  6620  0E6A                     l2050:	
  6621                           
  6622                           ;RF_Control_B1.c: 94: }
  6623                           ;RF_Control_B1.c: 96: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6624  0E6A  193A               	btfsc	_RF1^(0+128),2
  6625  0E6B  1B3A               	btfsc	_RF1^(0+128),6
  6626  0E6C  2E7B               	goto	l9587
  6627                           
  6628                           ;RF_Control_B1.c: 97: RF1.TransceiveGO = 0;
  6629  0E6D  113A               	bcf	_RF1^(0+128),2
  6630                           
  6631                           ;RF_Control_B1.c: 98: RF1.RxStatus = 0;
  6632  0E6E  11BA               	bcf	_RF1^(0+128),3
  6633                           
  6634                           ;RF_Control_B1.c: 99: RF1.ReceiveGO = 0;
  6635  0E6F  10BA               	bcf	_RF1^(0+128),1
  6636                           
  6637                           ;RF_Control_B1.c: 100: RF1.RunTime = 5;
  6638  0E70  3005               	movlw	5
  6639  0E71  00C1               	movwf	(_RF1^(0+128)+7)
  6640  0E72  3000               	movlw	0
  6641  0E73  00C2               	movwf	(_RF1^(0+128)+8)
  6642                           
  6643                           ;RF_Control_B1.c: 101: RF1.Run = 1;
  6644  0E74  14BB               	bsf	(_RF1^(0+128)+1),1
  6645                           
  6646                           ;RF_Control_B1.c: 102: RF_RxDisable();
  6647  0E75  319E  2623  318E   	fcall	_RF_RxDisable
  6648                           
  6649                           ;RF_Control_B1.c: 103: CC2500_TxData();
  6650  0E78  318A  224D  318E   	fcall	_CC2500_TxData
  6651  0E7B                     l9587:	
  6652                           
  6653                           ;RF_Control_B1.c: 104: }
  6654                           ;RF_Control_B1.c: 106: if (RF1.Run == 0 && RF1.TransceiveGO == 0) {
  6655  0E7B  0021               	movlb	1	; select bank1
  6656  0E7C  18BB               	btfsc	(_RF1^(0+128)+1),1
  6657  0E7D  0008               	return
  6658  0E7E  193A               	btfsc	_RF1^(0+128),2
  6659  0E7F  0008               	return
  6660                           
  6661                           ;RF_Control_B1.c: 107: if (RF1.RxStatus == 1) {
  6662  0E80  1DBA               	btfss	_RF1^(0+128),3
  6663  0E81  2E94               	goto	l2053
  6664                           
  6665                           ;RF_Control_B1.c: 108: if (RF1.Key == 0 || RF1.Learn == 1) {
  6666  0E82  1FBA               	btfss	_RF1^(0+128),7
  6667  0E83  2E86               	goto	l9597
  6668  0E84  1F3A               	btfss	_RF1^(0+128),6
  6669  0E85  0008               	return
  6670  0E86                     l9597:	
  6671                           
  6672                           ;RF_Control_B1.c: 110: CC2500_RxData();
  6673  0E86  318B  237B  318E   	fcall	_CC2500_RxData
  6674                           
  6675                           ;RF_Control_B1.c: 112: if (RF1.ReceiveGO == 1) {
  6676  0E89  0021               	movlb	1	; select bank1
  6677  0E8A  1CBA               	btfss	_RF1^(0+128),1
  6678  0E8B  0008               	return
  6679                           
  6680                           ;RF_Control_B1.c: 113: RF1.ReceiveGO = 0;
  6681  0E8C  10BA               	bcf	_RF1^(0+128),1
  6682                           
  6683                           ;RF_Control_B1.c: 114: RF1.Run = 1;
  6684  0E8D  14BB               	bsf	(_RF1^(0+128)+1),1
  6685                           
  6686                           ;RF_Control_B1.c: 115: RF1.Correction = 0;
  6687  0E8E  12BB               	bcf	(_RF1^(0+128)+1),5
  6688                           
  6689                           ;RF_Control_B1.c: 116: RF1.CorrectionCounter = 0;
  6690  0E8F  01C4               	clrf	(_RF1^(0+128)+10)
  6691  0E90  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6692                           
  6693                           ;RF_Control_B1.c: 124: getRxData();
  6694  0E91  318B  23EA         	fcall	_getRxData
  6695                           
  6696                           ;RF_Control_B1.c: 126: }
  6697                           ;RF_Control_B1.c: 127: }
  6698                           ;RF_Control_B1.c: 128: } else {
  6699  0E93  0008               	return
  6700  0E94                     l2053:	
  6701                           
  6702                           ;RF_Control_B1.c: 130: if (RF1.ReceiveGO == 0) {
  6703  0E94  18BA               	btfsc	_RF1^(0+128),1
  6704  0E95  0008               	return
  6705                           
  6706                           ;RF_Control_B1.c: 131: RF1.RxStatus = 1;
  6707  0E96  15BA               	bsf	_RF1^(0+128),3
  6708                           
  6709                           ;RF_Control_B1.c: 133: CC2500_WriteCommand(0x36);
  6710  0E97  3036               	movlw	54
  6711  0E98  319E  26F6  318E   	fcall	_CC2500_WriteCommand
  6712                           
  6713                           ;RF_Control_B1.c: 135: CC2500_WriteCommand(0x3A);
  6714  0E9B  303A               	movlw	58
  6715  0E9C  319E  26F6  318E   	fcall	_CC2500_WriteCommand
  6716                           
  6717                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x34);
  6718  0E9F  3034               	movlw	52
  6719  0EA0  319E  26F6         	fcall	_CC2500_WriteCommand
  6720                           
  6721                           ;RF_Control_B1.c: 137: }
  6722                           ;RF_Control_B1.c: 139: }
  6723                           ;RF_Control_B1.c: 140: }
  6724                           ;RF_Control_B1.c: 141: }
  6725                           ;RF_Control_B1.c: 142: } else {
  6726  0EA2  0008               	return
  6727  0EA3                     l2038:	
  6728                           
  6729                           ;RF_Control_B1.c: 143: if (myMain.PowerON == 1) {
  6730  0EA3  1C20               	btfss	_myMain^(0+128),0
  6731  0EA4  0008               	return
  6732                           
  6733                           ;RF_Control_B1.c: 144: RF1.Enable = 1;
  6734  0EA5  143A               	bsf	_RF1^(0+128),0
  6735  0EA6  0008               	return
  6736  0EA7                     __end_of_setRF_Main:	
  6737                           
  6738                           	psect	text23
  6739  0BEA                     __ptext23:	
  6740 ;; *************** function _getRxData *****************
  6741 ;; Defined at:
  6742 ;;		line 238 in file "../src/RF_Control_B1.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;		None
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;  error           1    4[BANK1 ] unsigned char 
  6747 ;; Return value:  Size  Location     Type
  6748 ;;		None               void
  6749 ;; Registers used:
  6750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/0
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6757 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6758 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6759 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6760 ;;Total ram usage:        2 bytes
  6761 ;; Hardware stack levels used:    1
  6762 ;; Hardware stack levels required when called:   12
  6763 ;; This function calls:
  6764 ;;		_getMain_All_Error_Status
  6765 ;;		_setControl_Lights_Table
  6766 ;;		_setLog_Code
  6767 ;;		_setTxData
  6768 ;; This function is called by:
  6769 ;;		_setRF_Main
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           
  6774                           ;psect for function _getRxData
  6775  0BEA                     _getRxData:	
  6776                           
  6777                           ;RF_Control_B1.c: 239: char error = getMain_All_Error_Status(0);
  6778                           
  6779                           ;incstack = 0
  6780                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6781  0BEA  3000               	movlw	0
  6782  0BEB  3192  2232  318B   	fcall	_getMain_All_Error_Status
  6783  0BEE  0020               	movlb	0	; select bank0
  6784  0BEF  00EE               	movwf	??_getRxData
  6785  0BF0  086E               	movf	??_getRxData,w
  6786  0BF1  0021               	movlb	1	; select bank1
  6787  0BF2  00ED               	movwf	getRxData@error^(0+128)
  6788                           
  6789                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6790  0BF3  0023               	movlb	3	; select bank3
  6791  0BF4  0820               	movf	_RF_Data^(0+384),w
  6792  0BF5  3AAA               	xorlw	170
  6793  0BF6  1D03               	skipz
  6794  0BF7  2C0E               	goto	l9103
  6795  0BF8  0821               	movf	(_RF_Data^(0+384)+1),w
  6796  0BF9  3A01               	xorlw	1
  6797  0BFA  1D03               	skipz
  6798  0BFB  2C0E               	goto	l9103
  6799                           
  6800                           ;RF_Control_B1.c: 242: product->Data[2] = 0x55;
  6801  0BFC  3055               	movlw	85
  6802  0BFD  0020               	movlb	0	; select bank0
  6803  0BFE  00EE               	movwf	??_getRxData
  6804  0BFF  0879               	movf	_product,w
  6805  0C00  3E02               	addlw	2
  6806  0C01  0086               	movwf	6
  6807  0C02  3002               	movlw	2	; select bank4/5
  6808  0C03  0087               	movwf	7
  6809  0C04  086E               	movf	??_getRxData,w
  6810  0C05  0081               	movwf	1
  6811                           
  6812                           ;RF_Control_B1.c: 243: setTxData();
  6813  0C06  318D  2571         	fcall	_setTxData
  6814                           
  6815                           ;RF_Control_B1.c: 244: RF1.RunTime = 10;
  6816  0C08  300A               	movlw	10
  6817  0C09  0021               	movlb	1	; select bank1
  6818  0C0A  00C1               	movwf	(_RF1^(0+128)+7)
  6819  0C0B  3000               	movlw	0
  6820  0C0C  00C2               	movwf	(_RF1^(0+128)+8)
  6821                           
  6822                           ;RF_Control_B1.c: 250: } else {
  6823  0C0D  0008               	return
  6824  0C0E                     l9103:	
  6825                           
  6826                           ;RF_Control_B1.c: 252: if (error == 0) {
  6827  0C0E  0021               	movlb	1	; select bank1
  6828  0C0F  08ED               	movf	getRxData@error^(0+128),f
  6829  0C10  1D03               	skipz
  6830  0C11  0008               	return
  6831                           
  6832                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  6833  0C12  1F3A               	btfss	_RF1^(0+128),6
  6834  0C13  2C1F               	goto	l9113
  6835                           
  6836                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6837  0C14  0023               	movlb	3	; select bank3
  6838  0C15  08A0               	movf	_RF_Data^(0+384),f
  6839  0C16  1D03               	skipz
  6840  0C17  0008               	return
  6841  0C18  0821               	movf	(_RF_Data^(0+384)+1),w
  6842  0C19  3A64               	xorlw	100
  6843  0C1A  1D03               	skipz
  6844  0C1B  0008               	return
  6845                           
  6846                           ;RF_Control_B1.c: 255: setLog_Code();
  6847  0C1C  3192  2299         	fcall	_setLog_Code
  6848                           
  6849                           ;RF_Control_B1.c: 256: }
  6850                           ;RF_Control_B1.c: 257: } else {
  6851  0C1E  0008               	return
  6852  0C1F                     l9113:	
  6853                           
  6854                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6855  0C1F  0023               	movlb	3	; select bank3
  6856  0C20  08A0               	movf	_RF_Data^(0+384),f
  6857  0C21  1D03               	skipz
  6858  0C22  2C54               	goto	l9133
  6859  0C23  0821               	movf	(_RF_Data^(0+384)+1),w
  6860  0C24  3A02               	xorlw	2
  6861  0C25  1D03               	skipz
  6862  0C26  2C54               	goto	l9133
  6863                           
  6864                           ;RF_Control_B1.c: 260: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6865  0C27  082C               	movf	(_RF_Data^(0+384)+12),w
  6866  0C28  3AFF               	xorlw	255
  6867  0C29  1D03               	skipz
  6868  0C2A  2C35               	goto	l9125
  6869  0C2B  082D               	movf	(_RF_Data^(0+384)+13),w
  6870  0C2C  3AFF               	xorlw	255
  6871  0C2D  1D03               	skipz
  6872  0C2E  2C35               	goto	l9125
  6873  0C2F  082E               	movf	(_RF_Data^(0+384)+14),w
  6874  0C30  3AFF               	xorlw	255
  6875  0C31  1D03               	skipz
  6876  0C32  2C35               	goto	l9125
  6877                           
  6878                           ;RF_Control_B1.c: 261: __nop();
  6879  0C33  0000               	nop
  6880                           
  6881                           ;RF_Control_B1.c: 262: } else {
  6882  0C34  0008               	return
  6883  0C35                     l9125:	
  6884                           
  6885                           ;RF_Control_B1.c: 263: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6886  0C35  0879               	movf	_product,w
  6887  0C36  3E0C               	addlw	12
  6888  0C37  0086               	movwf	6
  6889  0C38  3002               	movlw	2	; select bank4/5
  6890  0C39  0087               	movwf	7
  6891  0C3A  0023               	movlb	3	; select bank3
  6892  0C3B  082C               	movf	(_RF_Data^(0+384)+12),w
  6893  0C3C  0601               	xorwf	1,w
  6894  0C3D  1D03               	skipz
  6895  0C3E  0008               	return
  6896  0C3F  0879               	movf	_product,w
  6897  0C40  3E0D               	addlw	13
  6898  0C41  0086               	movwf	6
  6899  0C42  3002               	movlw	2	; select bank4/5
  6900  0C43  0087               	movwf	7
  6901  0C44  082D               	movf	(_RF_Data^(0+384)+13),w
  6902  0C45  0601               	xorwf	1,w
  6903  0C46  1D03               	skipz
  6904  0C47  0008               	return
  6905  0C48  0879               	movf	_product,w
  6906  0C49  3E0E               	addlw	14
  6907  0C4A  0086               	movwf	6
  6908  0C4B  3002               	movlw	2	; select bank4/5
  6909  0C4C  0087               	movwf	7
  6910  0C4D  082E               	movf	(_RF_Data^(0+384)+14),w
  6911  0C4E  0601               	xorwf	1,w
  6912  0C4F  1D03               	skipz
  6913  0C50  0008               	return
  6914                           
  6915                           ;RF_Control_B1.c: 264: setControl_Lights_Table();
  6916  0C51  3189  218D         	fcall	_setControl_Lights_Table
  6917                           
  6918                           ;RF_Control_B1.c: 265: }
  6919                           ;RF_Control_B1.c: 266: }
  6920                           ;RF_Control_B1.c: 267: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6921  0C53  0008               	return
  6922  0C54                     l9133:	
  6923  0C54  0023               	movlb	3	; select bank3
  6924  0C55  0820               	movf	_RF_Data^(0+384),w
  6925  0C56  3AFF               	xorlw	255
  6926  0C57  1D03               	skipz
  6927  0C58  2C5F               	goto	l9139
  6928  0C59  0821               	movf	(_RF_Data^(0+384)+1),w
  6929  0C5A  3A02               	xorlw	2
  6930  0C5B  1D03               	skipz
  6931  0C5C  2C5F               	goto	l9139
  6932                           
  6933                           ;RF_Control_B1.c: 268: __nop();
  6934  0C5D  0000               	nop
  6935                           
  6936                           ;RF_Control_B1.c: 269: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6937  0C5E  0008               	return
  6938  0C5F                     l9139:	
  6939  0C5F  0023               	movlb	3	; select bank3
  6940  0C60  08A0               	movf	_RF_Data^(0+384),f
  6941  0C61  1D03               	skipz
  6942  0C62  0008               	return
  6943  0C63  0821               	movf	(_RF_Data^(0+384)+1),w
  6944  0C64  3A65               	xorlw	101
  6945  0C65  1D03               	skipz
  6946  0C66  0008               	return
  6947                           
  6948                           ;RF_Control_B1.c: 270: __nop();
  6949  0C67  0000               	nop
  6950                           
  6951                           ;RF_Control_B1.c: 278: ;
  6952                           
  6953                           ;RF_Control_B1.c: 271: }
  6954                           ;RF_Control_B1.c: 276: }
  6955                           ;RF_Control_B1.c: 277: } else {
  6956  0C68  0008               	return
  6957  0C69                     __end_of_getRxData:	
  6958                           
  6959                           	psect	text24
  6960  1299                     __ptext24:	
  6961 ;; *************** function _setLog_Code *****************
  6962 ;; Defined at:
  6963 ;;		line 284 in file "../src/RF_Control_B1.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;		None
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;		None
  6968 ;; Return value:  Size  Location     Type
  6969 ;;		None               void
  6970 ;; Registers used:
  6971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;Total ram usage:        1 bytes
  6982 ;; Hardware stack levels used:    1
  6983 ;; Hardware stack levels required when called:    7
  6984 ;; This function calls:
  6985 ;;		_setBuz
  6986 ;;		_setMemory_LoopSave
  6987 ;;		_setMemory_Modify
  6988 ;;		_setProductData
  6989 ;; This function is called by:
  6990 ;;		_getRxData
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           
  6995                           ;psect for function _setLog_Code
  6996  1299                     _setLog_Code:	
  6997                           
  6998                           ;RF_Control_B1.c: 285: RF1.Learn = 0;
  6999                           
  7000                           ;incstack = 0
  7001                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7002  1299  0021               	movlb	1	; select bank1
  7003  129A  133A               	bcf	_RF1^(0+128),6
  7004                           
  7005                           ;RF_Control_B1.c: 286: setProductData(12, RF_Data[12]);
  7006  129B  0023               	movlb	3	; select bank3
  7007  129C  082C               	movf	(_RF_Data^(0+384)+12),w
  7008  129D  0020               	movlb	0	; select bank0
  7009  129E  00E6               	movwf	??_setLog_Code
  7010  129F  0866               	movf	??_setLog_Code,w
  7011  12A0  00E2               	movwf	setProductData@value
  7012  12A1  300C               	movlw	12
  7013  12A2  319D  253D  3192   	fcall	_setProductData
  7014                           
  7015                           ;RF_Control_B1.c: 287: setProductData(13, RF_Data[13]);
  7016  12A5  0023               	movlb	3	; select bank3
  7017  12A6  082D               	movf	(_RF_Data^(0+384)+13),w
  7018  12A7  0020               	movlb	0	; select bank0
  7019  12A8  00E6               	movwf	??_setLog_Code
  7020  12A9  0866               	movf	??_setLog_Code,w
  7021  12AA  00E2               	movwf	setProductData@value
  7022  12AB  300D               	movlw	13
  7023  12AC  319D  253D  3192   	fcall	_setProductData
  7024                           
  7025                           ;RF_Control_B1.c: 288: setProductData(14, RF_Data[14]);
  7026  12AF  0023               	movlb	3	; select bank3
  7027  12B0  082E               	movf	(_RF_Data^(0+384)+14),w
  7028  12B1  0020               	movlb	0	; select bank0
  7029  12B2  00E6               	movwf	??_setLog_Code
  7030  12B3  0866               	movf	??_setLog_Code,w
  7031  12B4  00E2               	movwf	setProductData@value
  7032  12B5  300E               	movlw	14
  7033  12B6  319D  253D  3192   	fcall	_setProductData
  7034                           
  7035                           ;RF_Control_B1.c: 289: setBuz(1, 100);
  7036  12B9  3064               	movlw	100
  7037  12BA  0020               	movlb	0	; select bank0
  7038  12BB  00A9               	movwf	setBuz@time
  7039  12BC  3000               	movlw	0
  7040  12BD  00AA               	movwf	setBuz@time+1
  7041  12BE  3001               	movlw	1
  7042  12BF  3197  27A7  3192   	fcall	_setBuz
  7043                           
  7044                           ;RF_Control_B1.c: 290: if (myMain.First == 1) {
  7045  12C2  0021               	movlb	1	; select bank1
  7046  12C3  1EA0               	btfss	_myMain^(0+128),5
  7047  12C4  2AC9               	goto	l2102
  7048                           
  7049                           ;RF_Control_B1.c: 291: setMemory_LoopSave(1);
  7050  12C5  3001               	movlw	1
  7051  12C6  319E  2649  3192   	fcall	_setMemory_LoopSave
  7052  12C9                     l2102:	
  7053                           
  7054                           ;RF_Control_B1.c: 292: }
  7055                           ;RF_Control_B1.c: 293: setMemory_Modify(1);
  7056  12C9  3001               	movlw	1
  7057  12CA  319E  2636         	fcall	_setMemory_Modify
  7058  12CC  0008               	return
  7059  12CD                     __end_of_setLog_Code:	
  7060                           
  7061                           	psect	text25
  7062  1E49                     __ptext25:	
  7063 ;; *************** function _setMemory_LoopSave *****************
  7064 ;; Defined at:
  7065 ;;		line 1070 in file "../src/MCU_B1.c"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;  command         1    wreg     unsigned char 
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;  command         1    1[BANK0 ] unsigned char 
  7070 ;; Return value:  Size  Location     Type
  7071 ;;		None               void
  7072 ;; Registers used:
  7073 ;;		wreg, status,2, status,0
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;Total ram usage:        2 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    5
  7086 ;; This function calls:
  7087 ;;		Nothing
  7088 ;; This function is called by:
  7089 ;;		_setLog_Code
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           
  7094                           ;psect for function _setMemory_LoopSave
  7095  1E49                     _setMemory_LoopSave:	
  7096                           
  7097                           ;incstack = 0
  7098                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7099                           ;setMemory_LoopSave@command stored from wreg
  7100  1E49  0020               	movlb	0	; select bank0
  7101  1E4A  00A1               	movwf	setMemory_LoopSave@command
  7102                           
  7103                           ;MCU_B1.c: 1071: Memory.LoopSave = command == 1 ? 1 : 0;
  7104  1E4B  0821               	movf	setMemory_LoopSave@command,w
  7105  1E4C  3A01               	xorlw	1
  7106  1E4D  3000               	movlw	0
  7107  1E4E  1903               	skipnz
  7108  1E4F  3001               	movlw	1
  7109  1E50  00A0               	movwf	??_setMemory_LoopSave
  7110  1E51  0DA0               	rlf	??_setMemory_LoopSave,f
  7111  1E52  0DA0               	rlf	??_setMemory_LoopSave,f
  7112  1E53  0023               	movlb	3	; select bank3
  7113  1E54  0862               	movf	(_Memory^(0+384)+36),w
  7114  1E55  0020               	movlb	0	; select bank0
  7115  1E56  0620               	xorwf	??_setMemory_LoopSave,w
  7116  1E57  39FB               	andlw	-5
  7117  1E58  0620               	xorwf	??_setMemory_LoopSave,w
  7118  1E59  0023               	movlb	3	; select bank3
  7119  1E5A  00E2               	movwf	(_Memory^(0+384)+36)
  7120  1E5B  0008               	return
  7121  1E5C                     __end_of_setMemory_LoopSave:	
  7122                           
  7123                           	psect	text26
  7124  098D                     __ptext26:	
  7125 ;; *************** function _setControl_Lights_Table *****************
  7126 ;; Defined at:
  7127 ;;		line 297 in file "../src/RF_Control_B1.c"
  7128 ;; Parameters:    Size  Location     Type
  7129 ;;		None
  7130 ;; Auto vars:     Size  Location     Type
  7131 ;;		None
  7132 ;; Return value:  Size  Location     Type
  7133 ;;		None               void
  7134 ;; Registers used:
  7135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7136 ;; Tracked objects:
  7137 ;;		On entry : 0/0
  7138 ;;		On exit  : 0/0
  7139 ;;		Unchanged: 0/0
  7140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7145 ;;Total ram usage:        0 bytes
  7146 ;; Hardware stack levels used:    1
  7147 ;; Hardware stack levels required when called:   11
  7148 ;; This function calls:
  7149 ;;		_setBuz
  7150 ;;		_setDimmerLights_ErrorClose
  7151 ;;		_setProductData
  7152 ;;		_setRFSW_AdjControl
  7153 ;;		_setRFSW_Control
  7154 ;;		_setTxData
  7155 ;; This function is called by:
  7156 ;;		_getRxData
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           
  7161                           ;psect for function _setControl_Lights_Table
  7162  098D                     _setControl_Lights_Table:	
  7163                           
  7164                           ;RF_Control_B1.c: 298: switch (RF_Data[15]) {
  7165                           
  7166                           ;incstack = 0
  7167                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7168  098D  29D0               	goto	l8791
  7169  098E                     l8779:	
  7170                           ;RF_Control_B1.c: 299: case 0x00:
  7171                           
  7172                           
  7173                           ;RF_Control_B1.c: 301: setDimmerLights_ErrorClose(255);
  7174  098E  30FF               	movlw	255
  7175  098F  3189  212F  3189   	fcall	_setDimmerLights_ErrorClose
  7176                           
  7177                           ;RF_Control_B1.c: 303: setProductData(9, 0);
  7178  0992  0020               	movlb	0	; select bank0
  7179  0993  01E2               	clrf	setProductData@value
  7180  0994  3009               	movlw	9
  7181  0995  319D  253D  3189   	fcall	_setProductData
  7182                           
  7183                           ;RF_Control_B1.c: 304: setProductData(11, 0);
  7184  0998  0020               	movlb	0	; select bank0
  7185  0999  01E2               	clrf	setProductData@value
  7186  099A  300B               	movlw	11
  7187  099B  319D  253D  3189   	fcall	_setProductData
  7188                           
  7189                           ;RF_Control_B1.c: 305: setProductData(15, 0);
  7190  099E  0020               	movlb	0	; select bank0
  7191  099F  01E2               	clrf	setProductData@value
  7192  09A0  300F               	movlw	15
  7193  09A1  319D  253D  3189   	fcall	_setProductData
  7194                           
  7195                           ;RF_Control_B1.c: 306: setProductData(17, 0);
  7196  09A4  0020               	movlb	0	; select bank0
  7197  09A5  01E2               	clrf	setProductData@value
  7198  09A6  3011               	movlw	17
  7199  09A7  319D  253D  3189   	fcall	_setProductData
  7200                           
  7201                           ;RF_Control_B1.c: 307: setBuz(1, 100);
  7202  09AA  3064               	movlw	100
  7203  09AB  0020               	movlb	0	; select bank0
  7204  09AC  00A9               	movwf	setBuz@time
  7205  09AD  3000               	movlw	0
  7206  09AE  00AA               	movwf	setBuz@time+1
  7207  09AF  3001               	movlw	1
  7208  09B0  3197  27A7         	fcall	_setBuz
  7209                           
  7210                           ;RF_Control_B1.c: 309: break;
  7211  09B2  0008               	return
  7212  09B3                     l8783:	
  7213                           ;RF_Control_B1.c: 310: case 0x20:
  7214                           
  7215                           
  7216                           ;RF_Control_B1.c: 311: setProductData(9, 0);
  7217  09B3  0020               	movlb	0	; select bank0
  7218  09B4  01E2               	clrf	setProductData@value
  7219  09B5  3009               	movlw	9
  7220  09B6  319D  253D  3189   	fcall	_setProductData
  7221                           
  7222                           ;RF_Control_B1.c: 312: setProductData(11, 0);
  7223  09B9  0020               	movlb	0	; select bank0
  7224  09BA  01E2               	clrf	setProductData@value
  7225  09BB  300B               	movlw	11
  7226  09BC  319D  253D  3189   	fcall	_setProductData
  7227                           
  7228                           ;RF_Control_B1.c: 313: setProductData(17, 0);
  7229  09BF  0020               	movlb	0	; select bank0
  7230  09C0  01E2               	clrf	setProductData@value
  7231  09C1  3011               	movlw	17
  7232  09C2  319D  253D  3189   	fcall	_setProductData
  7233                           
  7234                           ;RF_Control_B1.c: 314: setTxData();
  7235  09C5  318D  2571         	fcall	_setTxData
  7236                           
  7237                           ;RF_Control_B1.c: 315: break;
  7238  09C7  0008               	return
  7239  09C8                     l8785:	
  7240                           ;RF_Control_B1.c: 316: case 0x01:
  7241                           
  7242                           
  7243                           ;RF_Control_B1.c: 318: setRFSW_Control(1);
  7244  09C8  3001               	movlw	1
  7245  09C9  3195  25B7         	fcall	_setRFSW_Control
  7246                           
  7247                           ;RF_Control_B1.c: 330: break;
  7248                           
  7249                           ;RF_Control_B1.c: 326: case 0x03:
  7250                           
  7251                           ;RF_Control_B1.c: 325: break;
  7252                           
  7253                           ;RF_Control_B1.c: 321: case 0x02:
  7254                           
  7255                           ;RF_Control_B1.c: 320: break;
  7256  09CB  0008               	return
  7257  09CC                     l8787:	
  7258                           ;RF_Control_B1.c: 331: case 0x11:
  7259                           
  7260                           
  7261                           ;RF_Control_B1.c: 334: setRFSW_AdjControl(1);
  7262  09CC  3001               	movlw	1
  7263  09CD  3194  2454         	fcall	_setRFSW_AdjControl
  7264                           
  7265                           ;RF_Control_B1.c: 352: }
  7266                           
  7267                           ;RF_Control_B1.c: 351: break;
  7268                           
  7269                           ;RF_Control_B1.c: 345: case 0x31:
  7270                           
  7271                           ;RF_Control_B1.c: 344: break;
  7272                           
  7273                           ;RF_Control_B1.c: 338: case 0x21:
  7274                           
  7275                           ;RF_Control_B1.c: 337: break;
  7276  09CF  0008               	return
  7277  09D0                     l8791:	
  7278  09D0  0023               	movlb	3	; select bank3
  7279  09D1  082F               	movf	(_RF_Data^(0+384)+15),w
  7280                           
  7281                           ; Switch size 1, requested type "space"
  7282                           ; Number of cases is 8, Range of values is 0 to 49
  7283                           ; switch strategies available:
  7284                           ; Name         Instructions Cycles
  7285                           ; simple_byte           25    13 (average)
  7286                           ; direct_byte          106     6 (fixed)
  7287                           ; jumptable            260     6 (fixed)
  7288                           ;	Chosen strategy is simple_byte
  7289  09D2  3A00               	xorlw	0	; case 0
  7290  09D3  1903               	skipnz
  7291  09D4  298E               	goto	l8779
  7292  09D5  3A01               	xorlw	1	; case 1
  7293  09D6  1903               	skipnz
  7294  09D7  29C8               	goto	l8785
  7295  09D8  3A03               	xorlw	3	; case 2
  7296  09D9  1903               	skipnz
  7297  09DA  29EB               	goto	l2116
  7298  09DB  3A01               	xorlw	1	; case 3
  7299  09DC  1903               	skipnz
  7300  09DD  29EB               	goto	l2116
  7301  09DE  3A12               	xorlw	18	; case 17
  7302  09DF  1903               	skipnz
  7303  09E0  29CC               	goto	l8787
  7304  09E1  3A31               	xorlw	49	; case 32
  7305  09E2  1903               	skipnz
  7306  09E3  29B3               	goto	l8783
  7307  09E4  3A01               	xorlw	1	; case 33
  7308  09E5  1903               	skipnz
  7309  09E6  29EB               	goto	l2116
  7310  09E7  3A10               	xorlw	16	; case 49
  7311  09E8  1903               	skipnz
  7312  09E9  29EB               	goto	l2116
  7313  09EA  29EB               	goto	l2116
  7314  09EB                     l2116:	
  7315  09EB  0008               	return
  7316  09EC                     __end_of_setControl_Lights_Table:	
  7317                           
  7318                           	psect	text27
  7319  15B7                     __ptext27:	
  7320 ;; *************** function _setRFSW_Control *****************
  7321 ;; Defined at:
  7322 ;;		line 379 in file "../src/RF_Control_B1.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;  sw              1    wreg     unsigned char 
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;  sw              1   77[BANK0 ] unsigned char 
  7327 ;;  status          1   76[BANK0 ] unsigned char 
  7328 ;; Return value:  Size  Location     Type
  7329 ;;		None               void
  7330 ;; Registers used:
  7331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7332 ;; Tracked objects:
  7333 ;;		On entry : 0/0
  7334 ;;		On exit  : 0/0
  7335 ;;		Unchanged: 0/0
  7336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;Total ram usage:        3 bytes
  7342 ;; Hardware stack levels used:    1
  7343 ;; Hardware stack levels required when called:    9
  7344 ;; This function calls:
  7345 ;;		_getDelayOff_GO
  7346 ;;		_getDimmerLights_Status
  7347 ;;		_setBuz
  7348 ;;		_setDelayOff_GO
  7349 ;;		_setDimmerLights_SwOff
  7350 ;;		_setDimmerLights_SwOn
  7351 ;;		_setRF_DimmerLights
  7352 ;;		_setTxData
  7353 ;; This function is called by:
  7354 ;;		_setControl_Lights_Table
  7355 ;; This function uses a non-reentrant model
  7356 ;;
  7357                           
  7358                           
  7359                           ;psect for function _setRFSW_Control
  7360  15B7                     _setRFSW_Control:	
  7361                           
  7362                           ;incstack = 0
  7363                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7364                           ;setRFSW_Control@sw stored from wreg
  7365  15B7  0020               	movlb	0	; select bank0
  7366  15B8  00ED               	movwf	setRFSW_Control@sw
  7367                           
  7368                           ;RF_Control_B1.c: 380: char status = 0;
  7369  15B9  01EC               	clrf	setRFSW_Control@status
  7370                           
  7371                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  7372  15BA  0023               	movlb	3	; select bank3
  7373  15BB  0830               	movf	(_RF_Data^(0+384)+16),w
  7374  15BC  3A80               	xorlw	128
  7375  15BD  1D03               	skipz
  7376  15BE  2DEA               	goto	l8623
  7377                           
  7378                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  7379  15BF  0020               	movlb	0	; select bank0
  7380  15C0  01E6               	clrf	setDelayOff_GO@command
  7381  15C1  0AE6               	incf	setDelayOff_GO@command,f
  7382  15C2  0023               	movlb	3	; select bank3
  7383  15C3  0831               	movf	(_RF_Data^(0+384)+17),w
  7384  15C4  0020               	movlb	0	; select bank0
  7385  15C5  00EB               	movwf	??_setRFSW_Control
  7386  15C6  086B               	movf	??_setRFSW_Control,w
  7387  15C7  00E7               	movwf	setDelayOff_GO@value
  7388  15C8  086D               	movf	setRFSW_Control@sw,w
  7389  15C9  3196  26A8  3195   	fcall	_setDelayOff_GO
  7390                           
  7391                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  7392  15CC  0020               	movlb	0	; select bank0
  7393  15CD  086D               	movf	setRFSW_Control@sw,w
  7394  15CE  319D  2597  3195   	fcall	_getDimmerLights_Status
  7395  15D1  3A01               	xorlw	1
  7396  15D2  1D03               	skipz
  7397  15D3  2DF9               	goto	l8627
  7398                           
  7399                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  7400  15D4  3064               	movlw	100
  7401  15D5  0020               	movlb	0	; select bank0
  7402  15D6  00A9               	movwf	setBuz@time
  7403  15D7  3000               	movlw	0
  7404  15D8  00AA               	movwf	setBuz@time+1
  7405  15D9  3001               	movlw	1
  7406  15DA  3197  27A7  3195   	fcall	_setBuz
  7407                           
  7408                           ;RF_Control_B1.c: 387: status = 1;
  7409  15DD  0020               	movlb	0	; select bank0
  7410  15DE  01EC               	clrf	setRFSW_Control@status
  7411  15DF  0AEC               	incf	setRFSW_Control@status,f
  7412                           
  7413                           ;RF_Control_B1.c: 388: setRF_DimmerLights(sw, 1);
  7414  15E0  01E6               	clrf	setRF_DimmerLights@on
  7415  15E1  0AE6               	incf	setRF_DimmerLights@on,f
  7416  15E2  086D               	movf	setRFSW_Control@sw,w
  7417  15E3  3188  201E  3195   	fcall	_setRF_DimmerLights
  7418                           
  7419                           ;RF_Control_B1.c: 389: setTxData();
  7420  15E6  318D  2571  3195   	fcall	_setTxData
  7421                           
  7422                           ;RF_Control_B1.c: 391: }
  7423                           ;RF_Control_B1.c: 392: } else {
  7424  15E9  2DF9               	goto	l8627
  7425  15EA                     l8623:	
  7426                           
  7427                           ;RF_Control_B1.c: 394: if (getDelayOff_GO(sw) == 1) {
  7428  15EA  0020               	movlb	0	; select bank0
  7429  15EB  086D               	movf	setRFSW_Control@sw,w
  7430  15EC  319D  2577  3195   	fcall	_getDelayOff_GO
  7431  15EF  3A01               	xorlw	1
  7432  15F0  1D03               	skipz
  7433  15F1  2DF9               	goto	l8627
  7434                           
  7435                           ;RF_Control_B1.c: 395: setDelayOff_GO(sw, 0, 0);
  7436  15F2  0020               	movlb	0	; select bank0
  7437  15F3  01E6               	clrf	setDelayOff_GO@command
  7438  15F4  01E7               	clrf	setDelayOff_GO@value
  7439  15F5  086D               	movf	setRFSW_Control@sw,w
  7440  15F6  3196  26A8  3195   	fcall	_setDelayOff_GO
  7441  15F9                     l8627:	
  7442                           
  7443                           ;RF_Control_B1.c: 396: }
  7444                           ;RF_Control_B1.c: 398: }
  7445                           ;RF_Control_B1.c: 399: if (status == 0) {
  7446  15F9  0020               	movlb	0	; select bank0
  7447  15FA  08EC               	movf	setRFSW_Control@status,f
  7448  15FB  1D03               	skipz
  7449  15FC  0008               	return
  7450                           
  7451                           ;RF_Control_B1.c: 401: setDimmerLights_SwOn(sw);
  7452  15FD  086D               	movf	setRFSW_Control@sw,w
  7453  15FE  3193  23DF  3195   	fcall	_setDimmerLights_SwOn
  7454                           
  7455                           ;RF_Control_B1.c: 402: setDimmerLights_SwOff(sw);
  7456  1601  0020               	movlb	0	; select bank0
  7457  1602  086D               	movf	setRFSW_Control@sw,w
  7458  1603  3195  2568         	fcall	_setDimmerLights_SwOff
  7459  1605  0008               	return
  7460  1606                     __end_of_setRFSW_Control:	
  7461                           
  7462                           	psect	text28
  7463  13DF                     __ptext28:	
  7464 ;; *************** function _setDimmerLights_SwOn *****************
  7465 ;; Defined at:
  7466 ;;		line 405 in file "../src/Dimmer_B1.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;  sw              1    wreg     unsigned char 
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;  sw              1   13[BANK0 ] unsigned char 
  7471 ;;  idle            1   14[BANK0 ] unsigned char 
  7472 ;; Return value:  Size  Location     Type
  7473 ;;		None               void
  7474 ;; Registers used:
  7475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7482 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;Total ram usage:        2 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; Hardware stack levels required when called:    7
  7488 ;; This function calls:
  7489 ;;		_DimmerLightsPointSelect
  7490 ;;		_setBuz
  7491 ;; This function is called by:
  7492 ;;		_setRFSW_Control
  7493 ;;		_setSw_Main
  7494 ;; This function uses a non-reentrant model
  7495 ;;
  7496                           
  7497                           
  7498                           ;psect for function _setDimmerLights_SwOn
  7499  13DF                     _setDimmerLights_SwOn:	
  7500                           
  7501                           ;incstack = 0
  7502                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7503                           ;setDimmerLights_SwOn@sw stored from wreg
  7504  13DF  0020               	movlb	0	; select bank0
  7505  13E0  00AD               	movwf	setDimmerLights_SwOn@sw
  7506                           
  7507                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7508  13E1  082D               	movf	setDimmerLights_SwOn@sw,w
  7509  13E2  319C  24B2  3193   	fcall	_DimmerLightsPointSelect
  7510                           
  7511                           ;Dimmer_B1.c: 407: char idle = 0;
  7512  13E5  0020               	movlb	0	; select bank0
  7513  13E6  01AE               	clrf	setDimmerLights_SwOn@idle
  7514                           
  7515                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7516  13E7  08AE               	movf	setDimmerLights_SwOn@idle,f
  7517  13E8  1D03               	skipz
  7518  13E9  0008               	return
  7519                           
  7520                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7521  13EA  086F               	movf	_DimmerLights,w
  7522  13EB  3E0B               	addlw	11
  7523  13EC  0086               	movwf	6
  7524  13ED  3001               	movlw	1	; select bank2/3
  7525  13EE  0087               	movwf	7
  7526  13EF  1481               	bsf	1,1
  7527                           
  7528                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7529  13F0  086F               	movf	_DimmerLights,w
  7530  13F1  3E02               	addlw	2
  7531  13F2  0086               	movwf	6
  7532  13F3  3001               	movlw	1	; select bank2/3
  7533  13F4  0087               	movwf	7
  7534  13F5  1881               	btfsc	1,1
  7535  13F6  2C0A               	goto	l8421
  7536                           
  7537                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7538  13F7  086F               	movf	_DimmerLights,w
  7539  13F8  3E02               	addlw	2
  7540  13F9  0086               	movwf	6
  7541  13FA  3001               	movlw	1	; select bank2/3
  7542  13FB  0087               	movwf	7
  7543  13FC  1481               	bsf	1,1
  7544                           
  7545                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7546  13FD  086F               	movf	_DimmerLights,w
  7547  13FE  3E0A               	addlw	10
  7548  13FF  0086               	movwf	6
  7549  1400  3001               	movlw	1	; select bank2/3
  7550  1401  0087               	movwf	7
  7551  1402  1481               	bsf	1,1
  7552                           
  7553                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7554  1403  086F               	movf	_DimmerLights,w
  7555  1404  3E0A               	addlw	10
  7556  1405  0086               	movwf	6
  7557  1406  3001               	movlw	1	; select bank2/3
  7558  1407  0087               	movwf	7
  7559  1408  1401               	bsf	1,0
  7560                           
  7561                           ;Dimmer_B1.c: 442: } else {
  7562  1409  2C10               	goto	l8423
  7563  140A                     l8421:	
  7564                           
  7565                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7566  140A  086F               	movf	_DimmerLights,w
  7567  140B  3E02               	addlw	2
  7568  140C  0086               	movwf	6
  7569  140D  3001               	movlw	1	; select bank2/3
  7570  140E  0087               	movwf	7
  7571  140F  1081               	bcf	1,1
  7572  1410                     l8423:	
  7573                           
  7574                           ;Dimmer_B1.c: 444: }
  7575                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7576  1410  3064               	movlw	100
  7577  1411  00A9               	movwf	setBuz@time
  7578  1412  3000               	movlw	0
  7579  1413  00AA               	movwf	setBuz@time+1
  7580  1414  3001               	movlw	1
  7581  1415  3197  27A7         	fcall	_setBuz
  7582  1417  0008               	return
  7583  1418                     __end_of_setDimmerLights_SwOn:	
  7584                           
  7585                           	psect	text29
  7586  1454                     __ptext29:	
  7587 ;; *************** function _setRFSW_AdjControl *****************
  7588 ;; Defined at:
  7589 ;;		line 408 in file "../src/RF_Control_B1.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;  sw              1    wreg     unsigned char 
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;  sw              1   75[BANK0 ] unsigned char 
  7594 ;;  status          1   74[BANK0 ] unsigned char 
  7595 ;; Return value:  Size  Location     Type
  7596 ;;		None               void
  7597 ;; Registers used:
  7598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7605 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7606 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7607 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;Total ram usage:        4 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:   10
  7611 ;; This function calls:
  7612 ;;		_getDimmerLights_Status
  7613 ;;		_setMemory_Modify
  7614 ;;		_setProductData
  7615 ;;		_setRF_DimmerValue
  7616 ;;		_setTxData
  7617 ;; This function is called by:
  7618 ;;		_setControl_Lights_Table
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           
  7623                           ;psect for function _setRFSW_AdjControl
  7624  1454                     _setRFSW_AdjControl:	
  7625                           
  7626                           ;incstack = 0
  7627                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7628                           ;setRFSW_AdjControl@sw stored from wreg
  7629  1454  0020               	movlb	0	; select bank0
  7630  1455  00EB               	movwf	setRFSW_AdjControl@sw
  7631                           
  7632                           ;RF_Control_B1.c: 409: char status = 0;
  7633  1456  01EA               	clrf	setRFSW_AdjControl@status
  7634                           
  7635                           ;RF_Control_B1.c: 411: status = getDimmerLights_Status(sw);
  7636  1457  086B               	movf	setRFSW_AdjControl@sw,w
  7637  1458  319D  2597  3194   	fcall	_getDimmerLights_Status
  7638  145B  0020               	movlb	0	; select bank0
  7639  145C  00E8               	movwf	??_setRFSW_AdjControl
  7640  145D  0868               	movf	??_setRFSW_AdjControl,w
  7641  145E  00EA               	movwf	setRFSW_AdjControl@status
  7642                           
  7643                           ;RF_Control_B1.c: 414: if (status == 1) {
  7644  145F  086A               	movf	setRFSW_AdjControl@status,w
  7645  1460  3A01               	xorlw	1
  7646  1461  1D03               	skipz
  7647  1462  2C6D               	goto	l8641
  7648                           
  7649                           ;RF_Control_B1.c: 415: setMemory_Modify(1);
  7650  1463  3001               	movlw	1
  7651  1464  319E  2636  3194   	fcall	_setMemory_Modify
  7652                           
  7653                           ;RF_Control_B1.c: 416: setRF_DimmerValue(sw);
  7654  1467  0020               	movlb	0	; select bank0
  7655  1468  086B               	movf	setRFSW_AdjControl@sw,w
  7656  1469  3191  21D2  3194   	fcall	_setRF_DimmerValue
  7657                           
  7658                           ;RF_Control_B1.c: 417: } else {
  7659  146C  2C7E               	goto	l2128
  7660  146D                     l8641:	
  7661                           
  7662                           ;RF_Control_B1.c: 418: setProductData(9, product->Data[20 + sw]);
  7663  146D  0020               	movlb	0	; select bank0
  7664  146E  086B               	movf	setRFSW_AdjControl@sw,w
  7665  146F  3E14               	addlw	20
  7666  1470  0779               	addwf	_product,w
  7667  1471  00E8               	movwf	??_setRFSW_AdjControl
  7668  1472  0868               	movf	??_setRFSW_AdjControl,w
  7669  1473  0086               	movwf	6
  7670  1474  3002               	movlw	2	; select bank4/5
  7671  1475  0087               	movwf	7
  7672  1476  0801               	movf	1,w
  7673  1477  00E9               	movwf	??_setRFSW_AdjControl+1
  7674  1478  0869               	movf	??_setRFSW_AdjControl+1,w
  7675  1479  00E2               	movwf	setProductData@value
  7676  147A  3009               	movlw	9
  7677  147B  319D  253D  3194   	fcall	_setProductData
  7678  147E                     l2128:	
  7679                           
  7680                           ;RF_Control_B1.c: 419: }
  7681                           ;RF_Control_B1.c: 420: setProductData(17, product->Data[26 + sw]);
  7682  147E  0020               	movlb	0	; select bank0
  7683  147F  086B               	movf	setRFSW_AdjControl@sw,w
  7684  1480  3E1A               	addlw	26
  7685  1481  0779               	addwf	_product,w
  7686  1482  00E8               	movwf	??_setRFSW_AdjControl
  7687  1483  0868               	movf	??_setRFSW_AdjControl,w
  7688  1484  0086               	movwf	6
  7689  1485  3002               	movlw	2	; select bank4/5
  7690  1486  0087               	movwf	7
  7691  1487  0801               	movf	1,w
  7692  1488  00E9               	movwf	??_setRFSW_AdjControl+1
  7693  1489  0869               	movf	??_setRFSW_AdjControl+1,w
  7694  148A  00E2               	movwf	setProductData@value
  7695  148B  3011               	movlw	17
  7696  148C  319D  253D  3194   	fcall	_setProductData
  7697                           
  7698                           ;RF_Control_B1.c: 421: setTxData();
  7699  148F  318D  2571         	fcall	_setTxData
  7700  1491  0008               	return
  7701  1492                     __end_of_setRFSW_AdjControl:	
  7702                           
  7703                           	psect	text30
  7704  11D2                     __ptext30:	
  7705 ;; *************** function _setRF_DimmerValue *****************
  7706 ;; Defined at:
  7707 ;;		line 426 in file "../src/RF_Control_B1.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  lights          1    wreg     unsigned char 
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;  lights          1   71[BANK0 ] unsigned char 
  7712 ;; Return value:  Size  Location     Type
  7713 ;;		None               void
  7714 ;; Registers used:
  7715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;Total ram usage:        2 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; Hardware stack levels required when called:    9
  7728 ;; This function calls:
  7729 ;;		_setDimmerLights_AdjRF
  7730 ;;		_setProductData
  7731 ;; This function is called by:
  7732 ;;		_setRFSW_AdjControl
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           
  7737                           ;psect for function _setRF_DimmerValue
  7738  11D2                     _setRF_DimmerValue:	
  7739                           
  7740                           ;incstack = 0
  7741                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7742                           ;setRF_DimmerValue@lights stored from wreg
  7743  11D2  0020               	movlb	0	; select bank0
  7744  11D3  00E7               	movwf	setRF_DimmerValue@lights
  7745                           
  7746                           ;RF_Control_B1.c: 427: if (RF_Data[9] > 0x64) {
  7747  11D4  3065               	movlw	101
  7748  11D5  0023               	movlb	3	; select bank3
  7749  11D6  0229               	subwf	(_RF_Data^(0+384)+9),w
  7750  11D7  1C03               	skipc
  7751  11D8  29DF               	goto	l8517
  7752                           
  7753                           ;RF_Control_B1.c: 428: RF_Data[9] = 0x64;
  7754  11D9  3064               	movlw	100
  7755  11DA  0020               	movlb	0	; select bank0
  7756  11DB  00E6               	movwf	??_setRF_DimmerValue
  7757  11DC  0866               	movf	??_setRF_DimmerValue,w
  7758  11DD  0023               	movlb	3	; select bank3
  7759  11DE  00A9               	movwf	(_RF_Data^(0+384)+9)
  7760  11DF                     l8517:	
  7761                           
  7762                           ;RF_Control_B1.c: 429: }
  7763                           ;RF_Control_B1.c: 430: setProductData(9, RF_Data[9]);
  7764  11DF  0829               	movf	(_RF_Data^(0+384)+9),w
  7765  11E0  0020               	movlb	0	; select bank0
  7766  11E1  00E6               	movwf	??_setRF_DimmerValue
  7767  11E2  0866               	movf	??_setRF_DimmerValue,w
  7768  11E3  00E2               	movwf	setProductData@value
  7769  11E4  3009               	movlw	9
  7770  11E5  319D  253D  3191   	fcall	_setProductData
  7771                           
  7772                           ;RF_Control_B1.c: 431: setProductData(11, lights);
  7773  11E8  0020               	movlb	0	; select bank0
  7774  11E9  0867               	movf	setRF_DimmerValue@lights,w
  7775  11EA  00E6               	movwf	??_setRF_DimmerValue
  7776  11EB  0866               	movf	??_setRF_DimmerValue,w
  7777  11EC  00E2               	movwf	setProductData@value
  7778  11ED  300B               	movlw	11
  7779  11EE  319D  253D  3191   	fcall	_setProductData
  7780                           
  7781                           ;RF_Control_B1.c: 432: setProductData((20 + lights), RF_Data[9]);
  7782  11F1  0023               	movlb	3	; select bank3
  7783  11F2  0829               	movf	(_RF_Data^(0+384)+9),w
  7784  11F3  0020               	movlb	0	; select bank0
  7785  11F4  00E6               	movwf	??_setRF_DimmerValue
  7786  11F5  0866               	movf	??_setRF_DimmerValue,w
  7787  11F6  00E2               	movwf	setProductData@value
  7788  11F7  0867               	movf	setRF_DimmerValue@lights,w
  7789  11F8  3E14               	addlw	20
  7790  11F9  319D  253D  3191   	fcall	_setProductData
  7791                           
  7792                           ;RF_Control_B1.c: 433: setDimmerLights_AdjRF(lights);
  7793  11FC  0020               	movlb	0	; select bank0
  7794  11FD  0867               	movf	setRF_DimmerValue@lights,w
  7795  11FE  3190  2090         	fcall	_setDimmerLights_AdjRF
  7796  1200  0008               	return
  7797  1201                     __end_of_setRF_DimmerValue:	
  7798                           
  7799                           	psect	text31
  7800  1090                     __ptext31:	
  7801 ;; *************** function _setDimmerLights_AdjRF *****************
  7802 ;; Defined at:
  7803 ;;		line 903 in file "../src/Dimmer_B1.c"
  7804 ;; Parameters:    Size  Location     Type
  7805 ;;  lights          1    wreg     unsigned char 
  7806 ;; Auto vars:     Size  Location     Type
  7807 ;;  lights          1   67[BANK0 ] unsigned char 
  7808 ;; Return value:  Size  Location     Type
  7809 ;;		None               void
  7810 ;; Registers used:
  7811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7812 ;; Tracked objects:
  7813 ;;		On entry : 0/0
  7814 ;;		On exit  : 0/0
  7815 ;;		Unchanged: 0/0
  7816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7821 ;;Total ram usage:        2 bytes
  7822 ;; Hardware stack levels used:    1
  7823 ;; Hardware stack levels required when called:    8
  7824 ;; This function calls:
  7825 ;;		_DimmerLightsPointSelect
  7826 ;;		_getPercentValue
  7827 ;; This function is called by:
  7828 ;;		_setRF_DimmerValue
  7829 ;; This function uses a non-reentrant model
  7830 ;;
  7831                           
  7832                           
  7833                           ;psect for function _setDimmerLights_AdjRF
  7834  1090                     _setDimmerLights_AdjRF:	
  7835                           
  7836                           ;incstack = 0
  7837                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7838                           ;setDimmerLights_AdjRF@lights stored from wreg
  7839  1090  0020               	movlb	0	; select bank0
  7840  1091  00E3               	movwf	setDimmerLights_AdjRF@lights
  7841                           
  7842                           ;Dimmer_B1.c: 905: DimmerLightsPointSelect(lights);
  7843  1092  0863               	movf	setDimmerLights_AdjRF@lights,w
  7844  1093  319C  24B2  3190   	fcall	_DimmerLightsPointSelect
  7845                           
  7846                           ;Dimmer_B1.c: 906: DimmerLights->AdjRF = 1;
  7847  1096  0020               	movlb	0	; select bank0
  7848  1097  086F               	movf	_DimmerLights,w
  7849  1098  3E02               	addlw	2
  7850  1099  0086               	movwf	6
  7851  109A  3001               	movlw	1	; select bank2/3
  7852  109B  0087               	movwf	7
  7853  109C  1401               	bsf	1,0
  7854                           
  7855                           ;Dimmer_B1.c: 907: DimmerLights->Signal = 1;
  7856  109D  0A6F               	incf	_DimmerLights,w
  7857  109E  0086               	movwf	6
  7858  109F  3001               	movlw	1	; select bank2/3
  7859  10A0  0087               	movwf	7
  7860  10A1  1681               	bsf	1,5
  7861                           
  7862                           ;Dimmer_B1.c: 908: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7863  10A2  0879               	movf	_product,w
  7864  10A3  3E09               	addlw	9
  7865  10A4  0086               	movwf	6
  7866  10A5  3002               	movlw	2	; select bank4/5
  7867  10A6  0087               	movwf	7
  7868  10A7  0801               	movf	1,w
  7869  10A8  318B  2316         	fcall	_getPercentValue
  7870  10AA  0020               	movlb	0	; select bank0
  7871  10AB  00E2               	movwf	??_setDimmerLights_AdjRF
  7872  10AC  086F               	movf	_DimmerLights,w
  7873  10AD  3E06               	addlw	6
  7874  10AE  0086               	movwf	6
  7875  10AF  3001               	movlw	1	; select bank2/3
  7876  10B0  0087               	movwf	7
  7877  10B1  0862               	movf	??_setDimmerLights_AdjRF,w
  7878  10B2  0081               	movwf	1
  7879  10B3  0008               	return
  7880  10B4                     __end_of_setDimmerLights_AdjRF:	
  7881                           
  7882                           	psect	text32
  7883  0B16                     __ptext32:	
  7884 ;; *************** function _getPercentValue *****************
  7885 ;; Defined at:
  7886 ;;		line 1018 in file "../src/Dimmer_B1.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;  value           1    wreg     unsigned char 
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;  value           1   62[BANK0 ] unsigned char 
  7891 ;;  i               3   63[BANK0 ] float 
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  1    wreg      unsigned char 
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, status,0, pclath, cstack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7905 ;;Total ram usage:        6 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:    7
  7908 ;; This function calls:
  7909 ;;		___awtoft
  7910 ;;		___ftadd
  7911 ;;		___ftdiv
  7912 ;;		___ftmul
  7913 ;;		___ftneg
  7914 ;;		___fttol
  7915 ;; This function is called by:
  7916 ;;		_setDimmerLights_AdjRF
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           
  7921                           ;psect for function _getPercentValue
  7922  0B16                     _getPercentValue:	
  7923                           
  7924                           ;incstack = 0
  7925                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7926                           ;getPercentValue@value stored from wreg
  7927  0B16  0020               	movlb	0	; select bank0
  7928  0B17  00DE               	movwf	getPercentValue@value
  7929                           
  7930                           ;Dimmer_B1.c: 1026: float i = ((char)(70*0.8)) - ((char)(15*0.8));
  7931  0B18  3000               	movlw	0
  7932  0B19  00DF               	movwf	getPercentValue@i
  7933  0B1A  3030               	movlw	48
  7934  0B1B  00E0               	movwf	getPercentValue@i+1
  7935  0B1C  3042               	movlw	66
  7936  0B1D  00E1               	movwf	getPercentValue@i+2
  7937                           
  7938                           ;Dimmer_B1.c: 1027: i /= 100;
  7939  0B1E  3000               	movlw	0
  7940  0B1F  00AE               	movwf	___ftdiv@f2
  7941  0B20  30C8               	movlw	200
  7942  0B21  00AF               	movwf	___ftdiv@f2+1
  7943  0B22  3042               	movlw	66
  7944  0B23  00B0               	movwf	___ftdiv@f2+2
  7945  0B24  085F               	movf	getPercentValue@i,w
  7946  0B25  00B1               	movwf	___ftdiv@f1
  7947  0B26  0860               	movf	getPercentValue@i+1,w
  7948  0B27  00B2               	movwf	___ftdiv@f1+1
  7949  0B28  0861               	movf	getPercentValue@i+2,w
  7950  0B29  00B3               	movwf	___ftdiv@f1+2
  7951  0B2A  318E  26A7  318B   	fcall	___ftdiv
  7952  0B2D  0020               	movlb	0	; select bank0
  7953  0B2E  082E               	movf	?___ftdiv,w
  7954  0B2F  00DF               	movwf	getPercentValue@i
  7955  0B30  082F               	movf	?___ftdiv+1,w
  7956  0B31  00E0               	movwf	getPercentValue@i+1
  7957  0B32  0830               	movf	?___ftdiv+2,w
  7958  0B33  00E1               	movwf	getPercentValue@i+2
  7959                           
  7960                           ;Dimmer_B1.c: 1029: return (char) (((char)(70*0.8)) - ((100 - value) * i));
  7961  0B34  085E               	movf	getPercentValue@value,w
  7962  0B35  00DC               	movwf	??_getPercentValue
  7963  0B36  01DD               	clrf	??_getPercentValue+1
  7964  0B37  09DC               	comf	??_getPercentValue,f
  7965  0B38  09DD               	comf	??_getPercentValue+1,f
  7966  0B39  0ADC               	incf	??_getPercentValue,f
  7967  0B3A  1903               	skipnz
  7968  0B3B  0ADD               	incf	??_getPercentValue+1,f
  7969  0B3C  085C               	movf	??_getPercentValue,w
  7970  0B3D  3E64               	addlw	100
  7971  0B3E  00A8               	movwf	___awtoft@c
  7972  0B3F  3000               	movlw	0
  7973  0B40  3D5D               	addwfc	??_getPercentValue+1,w
  7974  0B41  00A9               	movwf	___awtoft@c+1
  7975  0B42  319F  27DE  318B   	fcall	___awtoft
  7976  0B45  0020               	movlb	0	; select bank0
  7977  0B46  0828               	movf	?___awtoft,w
  7978  0B47  00B1               	movwf	___ftmul@f2
  7979  0B48  0829               	movf	?___awtoft+1,w
  7980  0B49  00B2               	movwf	___ftmul@f2+1
  7981  0B4A  082A               	movf	?___awtoft+2,w
  7982  0B4B  00B3               	movwf	___ftmul@f2+2
  7983  0B4C  085F               	movf	getPercentValue@i,w
  7984  0B4D  00AE               	movwf	___ftmul@f1
  7985  0B4E  0860               	movf	getPercentValue@i+1,w
  7986  0B4F  00AF               	movwf	___ftmul@f1+1
  7987  0B50  0861               	movf	getPercentValue@i+2,w
  7988  0B51  00B0               	movwf	___ftmul@f1+2
  7989  0B52  3187  2708  318B   	fcall	___ftmul
  7990  0B55  0020               	movlb	0	; select bank0
  7991  0B56  082E               	movf	?___ftmul,w
  7992  0B57  00BE               	movwf	___ftneg@f1
  7993  0B58  082F               	movf	?___ftmul+1,w
  7994  0B59  00BF               	movwf	___ftneg@f1+1
  7995  0B5A  0830               	movf	?___ftmul+2,w
  7996  0B5B  00C0               	movwf	___ftneg@f1+2
  7997  0B5C  319C  2463  318B   	fcall	___ftneg
  7998  0B5F  0020               	movlb	0	; select bank0
  7999  0B60  083E               	movf	?___ftneg,w
  8000  0B61  00C4               	movwf	___ftadd@f2
  8001  0B62  083F               	movf	?___ftneg+1,w
  8002  0B63  00C5               	movwf	___ftadd@f2+1
  8003  0B64  0840               	movf	?___ftneg+2,w
  8004  0B65  00C6               	movwf	___ftadd@f2+2
  8005  0B66  3000               	movlw	0
  8006  0B67  00C1               	movwf	___ftadd@f1
  8007  0B68  3060               	movlw	96
  8008  0B69  00C2               	movwf	___ftadd@f1+1
  8009  0B6A  3042               	movlw	66
  8010  0B6B  00C3               	movwf	___ftadd@f1+2
  8011  0B6C  3184  245A  318B   	fcall	___ftadd
  8012  0B6F  0020               	movlb	0	; select bank0
  8013  0B70  0841               	movf	?___ftadd,w
  8014  0B71  00CE               	movwf	___fttol@f1
  8015  0B72  0842               	movf	?___ftadd+1,w
  8016  0B73  00CF               	movwf	___fttol@f1+1
  8017  0B74  0843               	movf	?___ftadd+2,w
  8018  0B75  00D0               	movwf	___fttol@f1+2
  8019  0B76  318C  24EA         	fcall	___fttol
  8020  0B78  0020               	movlb	0	; select bank0
  8021  0B79  084E               	movf	?___fttol,w
  8022  0B7A  0008               	return
  8023  0B7B                     __end_of_getPercentValue:	
  8024                           
  8025                           	psect	text33
  8026  0708                     __ptext33:	
  8027 ;; *************** function ___ftmul *****************
  8028 ;; Defined at:
  8029 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;  f1              3   14[BANK0 ] float 
  8032 ;;  f2              3   17[BANK0 ] float 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8035 ;;  sign            1   29[BANK0 ] unsigned char 
  8036 ;;  cntr            1   28[BANK0 ] unsigned char 
  8037 ;;  exp             1   24[BANK0 ] unsigned char 
  8038 ;; Return value:  Size  Location     Type
  8039 ;;                  3   14[BANK0 ] float 
  8040 ;; Registers used:
  8041 ;;		wreg, status,2, status,0, pclath, cstack
  8042 ;; Tracked objects:
  8043 ;;		On entry : 0/0
  8044 ;;		On exit  : 0/0
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8047 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;Total ram usage:       16 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; Hardware stack levels required when called:    6
  8054 ;; This function calls:
  8055 ;;		___ftpack
  8056 ;; This function is called by:
  8057 ;;		_getPercentValue
  8058 ;; This function uses a non-reentrant model
  8059 ;;
  8060                           
  8061                           
  8062                           ;psect for function ___ftmul
  8063  0708                     ___ftmul:	
  8064                           
  8065                           ;incstack = 0
  8066                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8067  0708  0020               	movlb	0	; select bank0
  8068  0709  082E               	movf	___ftmul@f1,w
  8069  070A  00B4               	movwf	??___ftmul
  8070  070B  082F               	movf	___ftmul@f1+1,w
  8071  070C  00B5               	movwf	??___ftmul+1
  8072  070D  0830               	movf	___ftmul@f1+2,w
  8073  070E  00B6               	movwf	??___ftmul+2
  8074  070F  1003               	clrc
  8075  0710  0D35               	rlf	??___ftmul+1,w
  8076  0711  0D36               	rlf	??___ftmul+2,w
  8077  0712  00B7               	movwf	??___ftmul+3
  8078  0713  0837               	movf	??___ftmul+3,w
  8079  0714  00B8               	movwf	___ftmul@exp
  8080  0715  08B8               	movf	___ftmul@exp,f
  8081  0716  1D03               	skipz
  8082  0717  2F1F               	goto	l8169
  8083  0718  3000               	movlw	0
  8084  0719  00AE               	movwf	?___ftmul
  8085  071A  3000               	movlw	0
  8086  071B  00AF               	movwf	?___ftmul+1
  8087  071C  3000               	movlw	0
  8088  071D  00B0               	movwf	?___ftmul+2
  8089  071E  0008               	return
  8090  071F                     l8169:	
  8091  071F  0831               	movf	___ftmul@f2,w
  8092  0720  00B4               	movwf	??___ftmul
  8093  0721  0832               	movf	___ftmul@f2+1,w
  8094  0722  00B5               	movwf	??___ftmul+1
  8095  0723  0833               	movf	___ftmul@f2+2,w
  8096  0724  00B6               	movwf	??___ftmul+2
  8097  0725  1003               	clrc
  8098  0726  0D35               	rlf	??___ftmul+1,w
  8099  0727  0D36               	rlf	??___ftmul+2,w
  8100  0728  00B7               	movwf	??___ftmul+3
  8101  0729  0837               	movf	??___ftmul+3,w
  8102  072A  00BD               	movwf	___ftmul@sign
  8103  072B  08BD               	movf	___ftmul@sign,f
  8104  072C  1D03               	skipz
  8105  072D  2F35               	goto	l8175
  8106  072E  3000               	movlw	0
  8107  072F  00AE               	movwf	?___ftmul
  8108  0730  3000               	movlw	0
  8109  0731  00AF               	movwf	?___ftmul+1
  8110  0732  3000               	movlw	0
  8111  0733  00B0               	movwf	?___ftmul+2
  8112  0734  0008               	return
  8113  0735                     l8175:	
  8114  0735  083D               	movf	___ftmul@sign,w
  8115  0736  3E7B               	addlw	123
  8116  0737  00B4               	movwf	??___ftmul
  8117  0738  0834               	movf	??___ftmul,w
  8118  0739  07B8               	addwf	___ftmul@exp,f
  8119  073A  082E               	movf	___ftmul@f1,w
  8120  073B  00B4               	movwf	??___ftmul
  8121  073C  082F               	movf	___ftmul@f1+1,w
  8122  073D  00B5               	movwf	??___ftmul+1
  8123  073E  0830               	movf	___ftmul@f1+2,w
  8124  073F  00B6               	movwf	??___ftmul+2
  8125  0740  3010               	movlw	16
  8126  0741                     u8585:	
  8127  0741  36B6               	lsrf	??___ftmul+2,f
  8128  0742  0CB5               	rrf	??___ftmul+1,f
  8129  0743  0CB4               	rrf	??___ftmul,f
  8130  0744  0B89               	decfsz	9,f
  8131  0745  2F41               	goto	u8585
  8132  0746  0834               	movf	??___ftmul,w
  8133  0747  00B7               	movwf	??___ftmul+3
  8134  0748  0837               	movf	??___ftmul+3,w
  8135  0749  00BD               	movwf	___ftmul@sign
  8136  074A  0831               	movf	___ftmul@f2,w
  8137  074B  00B4               	movwf	??___ftmul
  8138  074C  0832               	movf	___ftmul@f2+1,w
  8139  074D  00B5               	movwf	??___ftmul+1
  8140  074E  0833               	movf	___ftmul@f2+2,w
  8141  074F  00B6               	movwf	??___ftmul+2
  8142  0750  3010               	movlw	16
  8143  0751                     u8595:	
  8144  0751  36B6               	lsrf	??___ftmul+2,f
  8145  0752  0CB5               	rrf	??___ftmul+1,f
  8146  0753  0CB4               	rrf	??___ftmul,f
  8147  0754  0B89               	decfsz	9,f
  8148  0755  2F51               	goto	u8595
  8149  0756  0834               	movf	??___ftmul,w
  8150  0757  00B7               	movwf	??___ftmul+3
  8151  0758  0837               	movf	??___ftmul+3,w
  8152  0759  06BD               	xorwf	___ftmul@sign,f
  8153  075A  3080               	movlw	128
  8154  075B  00B4               	movwf	??___ftmul
  8155  075C  0834               	movf	??___ftmul,w
  8156  075D  05BD               	andwf	___ftmul@sign,f
  8157  075E  17AF               	bsf	___ftmul@f1+1,7
  8158  075F  17B2               	bsf	___ftmul@f2+1,7
  8159  0760  30FF               	movlw	255
  8160  0761  05B1               	andwf	___ftmul@f2,f
  8161  0762  30FF               	movlw	255
  8162  0763  05B2               	andwf	___ftmul@f2+1,f
  8163  0764  3000               	movlw	0
  8164  0765  05B3               	andwf	___ftmul@f2+2,f
  8165  0766  3000               	movlw	0
  8166  0767  00B9               	movwf	___ftmul@f3_as_product
  8167  0768  3000               	movlw	0
  8168  0769  00BA               	movwf	___ftmul@f3_as_product+1
  8169  076A  3000               	movlw	0
  8170  076B  00BB               	movwf	___ftmul@f3_as_product+2
  8171  076C  3007               	movlw	7
  8172  076D  00B4               	movwf	??___ftmul
  8173  076E  0834               	movf	??___ftmul,w
  8174  076F  00BC               	movwf	___ftmul@cntr
  8175  0770                     l8187:	
  8176  0770  1C2E               	btfss	___ftmul@f1,0
  8177  0771  2F78               	goto	l8191
  8178  0772  0831               	movf	___ftmul@f2,w
  8179  0773  07B9               	addwf	___ftmul@f3_as_product,f
  8180  0774  0832               	movf	___ftmul@f2+1,w
  8181  0775  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8182  0776  0833               	movf	___ftmul@f2+2,w
  8183  0777  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8184  0778                     l8191:	
  8185  0778  3001               	movlw	1
  8186  0779                     u8615:	
  8187  0779  36B0               	lsrf	___ftmul@f1+2,f
  8188  077A  0CAF               	rrf	___ftmul@f1+1,f
  8189  077B  0CAE               	rrf	___ftmul@f1,f
  8190  077C  0B89               	decfsz	9,f
  8191  077D  2F79               	goto	u8615
  8192  077E  3001               	movlw	1
  8193  077F                     u8625:	
  8194  077F  35B1               	lslf	___ftmul@f2,f
  8195  0780  0DB2               	rlf	___ftmul@f2+1,f
  8196  0781  0DB3               	rlf	___ftmul@f2+2,f
  8197  0782  0B89               	decfsz	9,f
  8198  0783  2F7F               	goto	u8625
  8199  0784  3001               	movlw	1
  8200  0785  02BC               	subwf	___ftmul@cntr,f
  8201  0786  1D03               	btfss	3,2
  8202  0787  2F70               	goto	l8187
  8203  0788  3009               	movlw	9
  8204  0789  00B4               	movwf	??___ftmul
  8205  078A  0834               	movf	??___ftmul,w
  8206  078B  00BC               	movwf	___ftmul@cntr
  8207  078C                     l8199:	
  8208  078C  1C2E               	btfss	___ftmul@f1,0
  8209  078D  2F94               	goto	l8203
  8210  078E  0831               	movf	___ftmul@f2,w
  8211  078F  07B9               	addwf	___ftmul@f3_as_product,f
  8212  0790  0832               	movf	___ftmul@f2+1,w
  8213  0791  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8214  0792  0833               	movf	___ftmul@f2+2,w
  8215  0793  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8216  0794                     l8203:	
  8217  0794  3001               	movlw	1
  8218  0795                     u8655:	
  8219  0795  36B0               	lsrf	___ftmul@f1+2,f
  8220  0796  0CAF               	rrf	___ftmul@f1+1,f
  8221  0797  0CAE               	rrf	___ftmul@f1,f
  8222  0798  0B89               	decfsz	9,f
  8223  0799  2F95               	goto	u8655
  8224  079A  3001               	movlw	1
  8225  079B                     u8665:	
  8226  079B  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8227  079C  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8228  079D  0CB9               	rrf	___ftmul@f3_as_product,f
  8229  079E  0B89               	decfsz	9,f
  8230  079F  2F9B               	goto	u8665
  8231  07A0  3001               	movlw	1
  8232  07A1  02BC               	subwf	___ftmul@cntr,f
  8233  07A2  1D03               	btfss	3,2
  8234  07A3  2F8C               	goto	l8199
  8235  07A4  0839               	movf	___ftmul@f3_as_product,w
  8236  07A5  00A0               	movwf	___ftpack@arg
  8237  07A6  083A               	movf	___ftmul@f3_as_product+1,w
  8238  07A7  00A1               	movwf	___ftpack@arg+1
  8239  07A8  083B               	movf	___ftmul@f3_as_product+2,w
  8240  07A9  00A2               	movwf	___ftpack@arg+2
  8241  07AA  0838               	movf	___ftmul@exp,w
  8242  07AB  00B4               	movwf	??___ftmul
  8243  07AC  0834               	movf	??___ftmul,w
  8244  07AD  00A3               	movwf	___ftpack@exp
  8245  07AE  083D               	movf	___ftmul@sign,w
  8246  07AF  00B5               	movwf	??___ftmul+1
  8247  07B0  0835               	movf	??___ftmul+1,w
  8248  07B1  00A4               	movwf	___ftpack@sign
  8249  07B2  3189  21EC         	fcall	___ftpack
  8250  07B4  0020               	movlb	0	; select bank0
  8251  07B5  0820               	movf	?___ftpack,w
  8252  07B6  00AE               	movwf	?___ftmul
  8253  07B7  0821               	movf	?___ftpack+1,w
  8254  07B8  00AF               	movwf	?___ftmul+1
  8255  07B9  0822               	movf	?___ftpack+2,w
  8256  07BA  00B0               	movwf	?___ftmul+2
  8257  07BB  0008               	return
  8258  07BC                     __end_of___ftmul:	
  8259                           
  8260                           	psect	text34
  8261  1E36                     __ptext34:	
  8262 ;; *************** function _setMemory_Modify *****************
  8263 ;; Defined at:
  8264 ;;		line 1064 in file "../src/MCU_B1.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;  command         1    wreg     unsigned char 
  8267 ;; Auto vars:     Size  Location     Type
  8268 ;;  command         1    1[BANK0 ] unsigned char 
  8269 ;; Return value:  Size  Location     Type
  8270 ;;		None               void
  8271 ;; Registers used:
  8272 ;;		wreg, status,2, status,0
  8273 ;; Tracked objects:
  8274 ;;		On entry : 0/0
  8275 ;;		On exit  : 0/0
  8276 ;;		Unchanged: 0/0
  8277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;Total ram usage:        2 bytes
  8283 ;; Hardware stack levels used:    1
  8284 ;; Hardware stack levels required when called:    5
  8285 ;; This function calls:
  8286 ;;		Nothing
  8287 ;; This function is called by:
  8288 ;;		_setLog_Code
  8289 ;;		_setRFSW_AdjControl
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           
  8294                           ;psect for function _setMemory_Modify
  8295  1E36                     _setMemory_Modify:	
  8296                           
  8297                           ;incstack = 0
  8298                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8299                           ;setMemory_Modify@command stored from wreg
  8300  1E36  0020               	movlb	0	; select bank0
  8301  1E37  00A1               	movwf	setMemory_Modify@command
  8302                           
  8303                           ;MCU_B1.c: 1065: Memory.Modify = command == 1 ? 1 : 0;
  8304  1E38  0821               	movf	setMemory_Modify@command,w
  8305  1E39  3A01               	xorlw	1
  8306  1E3A  3000               	movlw	0
  8307  1E3B  1903               	skipnz
  8308  1E3C  3001               	movlw	1
  8309  1E3D  00A0               	movwf	??_setMemory_Modify
  8310  1E3E  0023               	movlb	3	; select bank3
  8311  1E3F  0862               	movf	(_Memory^(0+384)+36),w
  8312  1E40  0020               	movlb	0	; select bank0
  8313  1E41  0620               	xorwf	??_setMemory_Modify,w
  8314  1E42  39FE               	andlw	-2
  8315  1E43  0620               	xorwf	??_setMemory_Modify,w
  8316  1E44  0023               	movlb	3	; select bank3
  8317  1E45  00E2               	movwf	(_Memory^(0+384)+36)
  8318                           
  8319                           ;MCU_B1.c: 1066: Memory.Time = 0;
  8320  1E46  01E0               	clrf	(_Memory^(0+384)+34)
  8321  1E47  01E1               	clrf	((_Memory+1)^(0+384)+34)
  8322  1E48  0008               	return
  8323  1E49                     __end_of_setMemory_Modify:	
  8324                           
  8325                           	psect	text35
  8326  1DB9                     __ptext35:	
  8327 ;; *************** function _getRF_KeyStatus *****************
  8328 ;; Defined at:
  8329 ;;		line 150 in file "../src/RF_Control_B1.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;		None
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  key             1    1[BANK0 ] unsigned char 
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  1    wreg      unsigned char 
  8336 ;; Registers used:
  8337 ;;		wreg, status,2
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;Total ram usage:        3 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    5
  8350 ;; This function calls:
  8351 ;;		Nothing
  8352 ;; This function is called by:
  8353 ;;		_setRF_Main
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           
  8358                           ;psect for function _getRF_KeyStatus
  8359  1DB9                     _getRF_KeyStatus:	
  8360                           
  8361                           ;RF_Control_B1.c: 151: char key = 0;
  8362                           
  8363                           ;incstack = 0
  8364                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8365  1DB9  0020               	movlb	0	; select bank0
  8366  1DBA  01A1               	clrf	getRF_KeyStatus@key
  8367                           
  8368                           ;RF_Control_B1.c: 161: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8369  1DBB  01A2               	clrf	_getRF_KeyStatus$5048
  8370  1DBC  0AA2               	incf	_getRF_KeyStatus$5048,f
  8371  1DBD  1F0C               	btfss	12,6	;volatile
  8372  1DBE  1A0C               	btfsc	12,4	;volatile
  8373  1DBF  2DC4               	goto	l9085
  8374  1DC0  1C0C               	btfss	12,0	;volatile
  8375  1DC1  1B8C               	btfsc	12,7	;volatile
  8376  1DC2  2DC4               	goto	l9085
  8377  1DC3  01A2               	clrf	_getRF_KeyStatus$5048
  8378  1DC4                     l9085:	
  8379  1DC4  0822               	movf	_getRF_KeyStatus$5048,w
  8380  1DC5  00A0               	movwf	??_getRF_KeyStatus
  8381  1DC6  0820               	movf	??_getRF_KeyStatus,w
  8382  1DC7  00A1               	movwf	getRF_KeyStatus@key
  8383                           
  8384                           ;RF_Control_B1.c: 163: return key;
  8385  1DC8  0821               	movf	getRF_KeyStatus@key,w
  8386  1DC9  0008               	return
  8387  1DCA                     __end_of_getRF_KeyStatus:	
  8388                           
  8389                           	psect	text36
  8390  1DA8                     __ptext36:	
  8391 ;; *************** function _getBuz_GO *****************
  8392 ;; Defined at:
  8393 ;;		line 82 in file "../src/Buzzer_B1.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;		None
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;  i               2    4[BANK0 ] int 
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  2    0[BANK0 ] int 
  8400 ;; Registers used:
  8401 ;;		wreg, status,2, status,0
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8407 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;Total ram usage:        6 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    5
  8414 ;; This function calls:
  8415 ;;		Nothing
  8416 ;; This function is called by:
  8417 ;;		_setRF_Main
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           
  8422                           ;psect for function _getBuz_GO
  8423  1DA8                     _getBuz_GO:	
  8424                           
  8425                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8426                           
  8427                           ;incstack = 0
  8428                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8429  1DA8  0021               	movlb	1	; select bank1
  8430  1DA9  0C2E               	rrf	_Buz1^(0+128),w
  8431  1DAA  3901               	andlw	1
  8432  1DAB  0020               	movlb	0	; select bank0
  8433  1DAC  00A2               	movwf	??_getBuz_GO
  8434  1DAD  01A3               	clrf	??_getBuz_GO+1
  8435  1DAE  0822               	movf	??_getBuz_GO,w
  8436  1DAF  00A4               	movwf	getBuz_GO@i
  8437  1DB0  0823               	movf	??_getBuz_GO+1,w
  8438  1DB1  00A5               	movwf	getBuz_GO@i+1
  8439                           
  8440                           ;Buzzer_B1.c: 84: return i;
  8441  1DB2  0825               	movf	getBuz_GO@i+1,w
  8442  1DB3  01A1               	clrf	?_getBuz_GO+1
  8443  1DB4  07A1               	addwf	?_getBuz_GO+1,f
  8444  1DB5  0824               	movf	getBuz_GO@i,w
  8445  1DB6  01A0               	clrf	?_getBuz_GO
  8446  1DB7  07A0               	addwf	?_getBuz_GO,f
  8447  1DB8  0008               	return
  8448  1DB9                     __end_of_getBuz_GO:	
  8449                           
  8450                           	psect	text37
  8451  1E23                     __ptext37:	
  8452 ;; *************** function _RF_RxDisable *****************
  8453 ;; Defined at:
  8454 ;;		line 225 in file "../src/RF_Control_B1.c"
  8455 ;; Parameters:    Size  Location     Type
  8456 ;;		None
  8457 ;; Auto vars:     Size  Location     Type
  8458 ;;		None
  8459 ;; Return value:  Size  Location     Type
  8460 ;;		None               void
  8461 ;; Registers used:
  8462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8463 ;; Tracked objects:
  8464 ;;		On entry : 0/0
  8465 ;;		On exit  : 0/0
  8466 ;;		Unchanged: 0/0
  8467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8472 ;;Total ram usage:        0 bytes
  8473 ;; Hardware stack levels used:    1
  8474 ;; Hardware stack levels required when called:    7
  8475 ;; This function calls:
  8476 ;;		_CC2500_WriteCommand
  8477 ;; This function is called by:
  8478 ;;		_setRF_Main
  8479 ;; This function uses a non-reentrant model
  8480 ;;
  8481                           
  8482                           
  8483                           ;psect for function _RF_RxDisable
  8484  1E23                     _RF_RxDisable:	
  8485                           
  8486                           ;RF_Control_B1.c: 226: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8487                           
  8488                           ;incstack = 0
  8489                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8490  1E23  0021               	movlb	1	; select bank1
  8491  1E24  18BA               	btfsc	_RF1^(0+128),1
  8492  1E25  2E28               	goto	l2080
  8493  1E26  1DBA               	btfss	_RF1^(0+128),3
  8494  1E27  0008               	return
  8495  1E28                     l2080:	
  8496                           
  8497                           ;RF_Control_B1.c: 227: RF1.RxStatus = 0;
  8498  1E28  11BA               	bcf	_RF1^(0+128),3
  8499                           
  8500                           ;RF_Control_B1.c: 228: RF1.ReceiveGO = 0;
  8501  1E29  10BA               	bcf	_RF1^(0+128),1
  8502                           
  8503                           ;RF_Control_B1.c: 229: CC2500_WriteCommand(0x36);
  8504  1E2A  3036               	movlw	54
  8505  1E2B  319E  26F6  319E   	fcall	_CC2500_WriteCommand
  8506                           
  8507                           ;RF_Control_B1.c: 231: CC2500_WriteCommand(0x3A);
  8508  1E2E  303A               	movlw	58
  8509  1E2F  319E  26F6  319E   	fcall	_CC2500_WriteCommand
  8510                           
  8511                           ;RF_Control_B1.c: 232: CC2500_WriteCommand(0x3B);
  8512  1E32  303B               	movlw	59
  8513  1E33  319E  26F6         	fcall	_CC2500_WriteCommand
  8514  1E35  0008               	return
  8515  1E36                     __end_of_RF_RxDisable:	
  8516                           
  8517                           	psect	text38
  8518  0A4D                     __ptext38:	
  8519 ;; *************** function _CC2500_TxData *****************
  8520 ;; Defined at:
  8521 ;;		line 32 in file "../src/CC2500_B1.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;		None
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8526 ;; Return value:  Size  Location     Type
  8527 ;;		None               void
  8528 ;; Registers used:
  8529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8538 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;Total ram usage:        2 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    7
  8542 ;; This function calls:
  8543 ;;		_CC2500_WriteByte
  8544 ;;		_CC2500_WriteCommand
  8545 ;;		_Timeout_Counter
  8546 ;;		_set_TimeoutCleared
  8547 ;; This function is called by:
  8548 ;;		_setRF_Main
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           
  8553                           ;psect for function _CC2500_TxData
  8554  0A4D                     _CC2500_TxData:	
  8555                           
  8556                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8557                           ;CC2500_B1.c: 35: RC0 = 0;
  8558                           
  8559                           ;incstack = 0
  8560                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8561  0A4D  0020               	movlb	0	; select bank0
  8562  0A4E  100E               	bcf	14,0	;volatile
  8563                           
  8564                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8565  0A4F  307F               	movlw	127
  8566  0A50  00A4               	movwf	??_CC2500_TxData
  8567  0A51  0824               	movf	??_CC2500_TxData,w
  8568  0A52  0021               	movlb	1	; select bank1
  8569  0A53  00D1               	movwf	_SPI0Buffer^(0+128)
  8570                           
  8571                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  8572  0A54  2A58               	goto	l8803
  8573  0A55                     l8801:	
  8574                           
  8575                           ;CC2500_B1.c: 38: Timeout_Counter();
  8576  0A55  319E  2670  318A   	fcall	_Timeout_Counter
  8577  0A58                     l8803:	
  8578  0A58  0020               	movlb	0	; select bank0
  8579  0A59  1E8E               	btfss	14,5	;volatile
  8580  0A5A  2A5E               	goto	l8807
  8581  0A5B  0021               	movlb	1	; select bank1
  8582  0A5C  1D2B               	btfss	(_myMain^(0+128)+11),2
  8583  0A5D  2A55               	goto	l8801
  8584  0A5E                     l8807:	
  8585                           
  8586                           ;CC2500_B1.c: 39: };
  8587                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8588  0A5E  319C  242D  318A   	fcall	_set_TimeoutCleared
  8589                           
  8590                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8591  0A61  319E  26DD  318A   	fcall	_CC2500_WriteByte
  8592                           
  8593                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8594  0A64  0021               	movlb	1	; select bank1
  8595  0A65  0853               	movf	_Tx_Length^(0+128),w
  8596  0A66  0020               	movlb	0	; select bank0
  8597  0A67  00A4               	movwf	??_CC2500_TxData
  8598  0A68  0824               	movf	??_CC2500_TxData,w
  8599  0A69  0021               	movlb	1	; select bank1
  8600  0A6A  00D1               	movwf	_SPI0Buffer^(0+128)
  8601                           
  8602                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8603  0A6B  319E  26DD  318A   	fcall	_CC2500_WriteByte
  8604                           
  8605                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8606  0A6E  0020               	movlb	0	; select bank0
  8607  0A6F  01A5               	clrf	CC2500_TxData@loop_e
  8608  0A70                     l8821:	
  8609  0A70  0021               	movlb	1	; select bank1
  8610  0A71  0853               	movf	_Tx_Length^(0+128),w
  8611  0A72  0020               	movlb	0	; select bank0
  8612  0A73  0225               	subwf	CC2500_TxData@loop_e,w
  8613  0A74  1803               	btfsc	3,0
  8614  0A75  2A89               	goto	l231
  8615                           
  8616                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8617  0A76  0825               	movf	CC2500_TxData@loop_e,w
  8618  0A77  3EA0               	addlw	_RF_Data& (0+255)
  8619  0A78  0086               	movwf	6
  8620  0A79  3001               	movlw	1	; select bank3/4
  8621  0A7A  0087               	movwf	7
  8622  0A7B  0801               	movf	1,w
  8623  0A7C  00A4               	movwf	??_CC2500_TxData
  8624  0A7D  0824               	movf	??_CC2500_TxData,w
  8625  0A7E  0021               	movlb	1	; select bank1
  8626  0A7F  00D1               	movwf	_SPI0Buffer^(0+128)
  8627                           
  8628                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8629  0A80  319E  26DD  318A   	fcall	_CC2500_WriteByte
  8630  0A83  3001               	movlw	1
  8631  0A84  0020               	movlb	0	; select bank0
  8632  0A85  00A4               	movwf	??_CC2500_TxData
  8633  0A86  0824               	movf	??_CC2500_TxData,w
  8634  0A87  07A5               	addwf	CC2500_TxData@loop_e,f
  8635  0A88  2A70               	goto	l8821
  8636  0A89                     l231:	
  8637                           
  8638                           ;CC2500_B1.c: 48: }
  8639                           ;CC2500_B1.c: 49: RC0 = 1;
  8640  0A89  140E               	bsf	14,0	;volatile
  8641                           
  8642                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8643  0A8A  3035               	movlw	53
  8644  0A8B  319E  26F6  318A   	fcall	_CC2500_WriteCommand
  8645                           
  8646                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  8647  0A8E  2A92               	goto	l8827
  8648  0A8F                     l8825:	
  8649                           
  8650                           ;CC2500_B1.c: 52: Timeout_Counter();
  8651  0A8F  319E  2670  318A   	fcall	_Timeout_Counter
  8652  0A92                     l8827:	
  8653  0A92  0020               	movlb	0	; select bank0
  8654  0A93  188E               	btfsc	14,1	;volatile
  8655  0A94  2A98               	goto	l8831
  8656  0A95  0021               	movlb	1	; select bank1
  8657  0A96  1D2B               	btfss	(_myMain^(0+128)+11),2
  8658  0A97  2A8F               	goto	l8825
  8659  0A98                     l8831:	
  8660                           
  8661                           ;CC2500_B1.c: 53: };
  8662                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8663  0A98  319C  242D  318A   	fcall	_set_TimeoutCleared
  8664                           
  8665                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  8666  0A9B  2A9F               	goto	l8835
  8667  0A9C                     l8833:	
  8668                           
  8669                           ;CC2500_B1.c: 57: Timeout_Counter();
  8670  0A9C  319E  2670  318A   	fcall	_Timeout_Counter
  8671  0A9F                     l8835:	
  8672  0A9F  0020               	movlb	0	; select bank0
  8673  0AA0  1C8E               	btfss	14,1	;volatile
  8674  0AA1  2AA5               	goto	l8839
  8675  0AA2  0021               	movlb	1	; select bank1
  8676  0AA3  1D2B               	btfss	(_myMain^(0+128)+11),2
  8677  0AA4  2A9C               	goto	l8833
  8678  0AA5                     l8839:	
  8679                           
  8680                           ;CC2500_B1.c: 58: };
  8681                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8682  0AA5  319C  242D  318A   	fcall	_set_TimeoutCleared
  8683                           
  8684                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8685  0AA8  3036               	movlw	54
  8686  0AA9  319E  26F6  318A   	fcall	_CC2500_WriteCommand
  8687                           
  8688                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8689  0AAC  303B               	movlw	59
  8690  0AAD  319E  26F6         	fcall	_CC2500_WriteCommand
  8691                           
  8692                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8693  0AAF  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8694  0AB0  0008               	return
  8695  0AB1                     __end_of_CC2500_TxData:	
  8696                           
  8697                           	psect	text39
  8698  0B7B                     __ptext39:	
  8699 ;; *************** function _CC2500_RxData *****************
  8700 ;; Defined at:
  8701 ;;		line 70 in file "../src/CC2500_B1.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;		None
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8706 ;; Return value:  Size  Location     Type
  8707 ;;		None               void
  8708 ;; Registers used:
  8709 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;Total ram usage:        2 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    7
  8722 ;; This function calls:
  8723 ;;		_CC2500_ReadByte
  8724 ;;		_CC2500_ReadStatus
  8725 ;;		_CC2500_WriteByte
  8726 ;;		_Timeout_Counter
  8727 ;;		_set_TimeoutCleared
  8728 ;; This function is called by:
  8729 ;;		_setRF_Main
  8730 ;; This function uses a non-reentrant model
  8731 ;;
  8732                           
  8733                           
  8734                           ;psect for function _CC2500_RxData
  8735  0B7B                     _CC2500_RxData:	
  8736                           
  8737                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8738                           ;CC2500_B1.c: 75: if (RC1 == 1)
  8739                           
  8740                           ;incstack = 0
  8741                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8742  0B7B  0020               	movlb	0	; select bank0
  8743  0B7C  188E               	btfsc	14,1	;volatile
  8744  0B7D  2B82               	goto	l8853
  8745  0B7E  2B8B               	goto	l8859
  8746  0B7F                     l8851:	
  8747                           ;CC2500_B1.c: 76: {
  8748                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  8749                           
  8750                           
  8751                           ;CC2500_B1.c: 78: Timeout_Counter();
  8752  0B7F  319E  2670  318B   	fcall	_Timeout_Counter
  8753  0B82                     l8853:	
  8754  0B82  0020               	movlb	0	; select bank0
  8755  0B83  1C8E               	btfss	14,1	;volatile
  8756  0B84  2B88               	goto	l8857
  8757  0B85  0021               	movlb	1	; select bank1
  8758  0B86  1D2B               	btfss	(_myMain^(0+128)+11),2
  8759  0B87  2B7F               	goto	l8851
  8760  0B88                     l8857:	
  8761                           
  8762                           ;CC2500_B1.c: 79: };
  8763                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8764  0B88  319C  242D  318B   	fcall	_set_TimeoutCleared
  8765  0B8B                     l8859:	
  8766                           
  8767                           ;CC2500_B1.c: 81: }
  8768                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8769  0B8B  303B               	movlw	59
  8770  0B8C  3190  20D9  318B   	fcall	_CC2500_ReadStatus
  8771                           
  8772                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8773  0B8F  0021               	movlb	1	; select bank1
  8774  0B90  0856               	movf	_s_data^(0+128),w
  8775  0B91  1903               	btfsc	3,2
  8776  0B92  0008               	return
  8777                           
  8778                           ;CC2500_B1.c: 86: RC0 = 0;
  8779  0B93  0020               	movlb	0	; select bank0
  8780  0B94  100E               	bcf	14,0	;volatile
  8781                           
  8782                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8783  0B95  30FF               	movlw	255
  8784  0B96  00A4               	movwf	??_CC2500_RxData
  8785  0B97  0824               	movf	??_CC2500_RxData,w
  8786  0B98  0021               	movlb	1	; select bank1
  8787  0B99  00D1               	movwf	_SPI0Buffer^(0+128)
  8788                           
  8789                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  8790  0B9A  2B9E               	goto	l8869
  8791  0B9B                     l8867:	
  8792                           
  8793                           ;CC2500_B1.c: 89: Timeout_Counter();
  8794  0B9B  319E  2670  318B   	fcall	_Timeout_Counter
  8795  0B9E                     l8869:	
  8796  0B9E  0020               	movlb	0	; select bank0
  8797  0B9F  1E8E               	btfss	14,5	;volatile
  8798  0BA0  2BA4               	goto	l8873
  8799  0BA1  0021               	movlb	1	; select bank1
  8800  0BA2  1D2B               	btfss	(_myMain^(0+128)+11),2
  8801  0BA3  2B9B               	goto	l8867
  8802  0BA4                     l8873:	
  8803                           
  8804                           ;CC2500_B1.c: 90: };
  8805                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8806  0BA4  319C  242D  318B   	fcall	_set_TimeoutCleared
  8807                           
  8808                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8809  0BA7  319E  26DD  318B   	fcall	_CC2500_WriteByte
  8810                           
  8811                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8812  0BAA  319F  2762  318B   	fcall	_CC2500_ReadByte
  8813                           
  8814                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8815  0BAD  0021               	movlb	1	; select bank1
  8816  0BAE  0851               	movf	_SPI0Buffer^(0+128),w
  8817  0BAF  0020               	movlb	0	; select bank0
  8818  0BB0  00A4               	movwf	??_CC2500_RxData
  8819  0BB1  0824               	movf	??_CC2500_RxData,w
  8820  0BB2  0021               	movlb	1	; select bank1
  8821  0BB3  00D0               	movwf	_Rx_Length^(0+128)
  8822                           
  8823                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8824  0BB4  0020               	movlb	0	; select bank0
  8825  0BB5  01A5               	clrf	CC2500_RxData@loop_f
  8826  0BB6                     l8889:	
  8827  0BB6  0021               	movlb	1	; select bank1
  8828  0BB7  0850               	movf	_Rx_Length^(0+128),w
  8829  0BB8  0020               	movlb	0	; select bank0
  8830  0BB9  0225               	subwf	CC2500_RxData@loop_f,w
  8831  0BBA  1803               	btfsc	3,0
  8832  0BBB  2BCF               	goto	l8891
  8833                           
  8834                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8835  0BBC  319F  2762  318B   	fcall	_CC2500_ReadByte
  8836                           
  8837                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8838  0BBF  0021               	movlb	1	; select bank1
  8839  0BC0  0851               	movf	_SPI0Buffer^(0+128),w
  8840  0BC1  0020               	movlb	0	; select bank0
  8841  0BC2  00A4               	movwf	??_CC2500_RxData
  8842  0BC3  0825               	movf	CC2500_RxData@loop_f,w
  8843  0BC4  3EA0               	addlw	_RF_Data& (0+255)
  8844  0BC5  0086               	movwf	6
  8845  0BC6  3001               	movlw	1	; select bank3/4
  8846  0BC7  0087               	movwf	7
  8847  0BC8  0824               	movf	??_CC2500_RxData,w
  8848  0BC9  0081               	movwf	1
  8849  0BCA  3001               	movlw	1
  8850  0BCB  00A4               	movwf	??_CC2500_RxData
  8851  0BCC  0824               	movf	??_CC2500_RxData,w
  8852  0BCD  07A5               	addwf	CC2500_RxData@loop_f,f
  8853  0BCE  2BB6               	goto	l8889
  8854  0BCF                     l8891:	
  8855                           
  8856                           ;CC2500_B1.c: 99: }
  8857                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8858  0BCF  319F  2762  318B   	fcall	_CC2500_ReadByte
  8859                           
  8860                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8861  0BD2  0021               	movlb	1	; select bank1
  8862  0BD3  0851               	movf	_SPI0Buffer^(0+128),w
  8863  0BD4  0020               	movlb	0	; select bank0
  8864  0BD5  00A4               	movwf	??_CC2500_RxData
  8865  0BD6  0824               	movf	??_CC2500_RxData,w
  8866  0BD7  0021               	movlb	1	; select bank1
  8867  0BD8  00CF               	movwf	_RSSI^(0+128)
  8868                           
  8869                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8870  0BD9  319F  2762         	fcall	_CC2500_ReadByte
  8871                           
  8872                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8873  0BDB  0021               	movlb	1	; select bank1
  8874  0BDC  0851               	movf	_SPI0Buffer^(0+128),w
  8875  0BDD  0020               	movlb	0	; select bank0
  8876  0BDE  00A4               	movwf	??_CC2500_RxData
  8877  0BDF  0824               	movf	??_CC2500_RxData,w
  8878  0BE0  0021               	movlb	1	; select bank1
  8879  0BE1  00CB               	movwf	_CRC^(0+128)
  8880                           
  8881                           ;CC2500_B1.c: 104: RC0 = 1;
  8882  0BE2  0020               	movlb	0	; select bank0
  8883  0BE3  140E               	bsf	14,0	;volatile
  8884                           
  8885                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8886  0BE4  0021               	movlb	1	; select bank1
  8887  0BE5  1BCB               	btfsc	_CRC^(0+128),7
  8888                           
  8889                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8890  0BE6  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8891                           
  8892                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8893  0BE7  11BA               	bcf	_RF1^(0+128),3
  8894                           
  8895                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8896  0BE8  14BA               	bsf	_RF1^(0+128),1
  8897  0BE9  0008               	return
  8898  0BEA                     __end_of_CC2500_RxData:	
  8899                           
  8900                           	psect	text40
  8901  10D9                     __ptext40:	
  8902 ;; *************** function _CC2500_ReadStatus *****************
  8903 ;; Defined at:
  8904 ;;		line 301 in file "../src/CC2500_B1.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;  status_addr     1    wreg     unsigned char 
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8909 ;; Return value:  Size  Location     Type
  8910 ;;		None               void
  8911 ;; Registers used:
  8912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;Total ram usage:        2 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; Hardware stack levels required when called:    6
  8925 ;; This function calls:
  8926 ;;		_CC2500_ReadByte
  8927 ;;		_CC2500_WriteByte
  8928 ;;		_Timeout_Counter
  8929 ;;		_set_TimeoutCleared
  8930 ;; This function is called by:
  8931 ;;		_CC2500_RxData
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           
  8936                           ;psect for function _CC2500_ReadStatus
  8937  10D9                     _CC2500_ReadStatus:	
  8938                           
  8939                           ;incstack = 0
  8940                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8941                           ;CC2500_ReadStatus@status_addr stored from wreg
  8942  10D9  0020               	movlb	0	; select bank0
  8943  10DA  00A3               	movwf	CC2500_ReadStatus@status_addr
  8944                           
  8945                           ;CC2500_B1.c: 302: RC0 = 0;
  8946  10DB  100E               	bcf	14,0	;volatile
  8947                           
  8948                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  8949  10DC  0823               	movf	CC2500_ReadStatus@status_addr,w
  8950  10DD  3EC0               	addlw	192
  8951  10DE  00A2               	movwf	??_CC2500_ReadStatus
  8952  10DF  0822               	movf	??_CC2500_ReadStatus,w
  8953  10E0  0021               	movlb	1	; select bank1
  8954  10E1  00D1               	movwf	_SPI0Buffer^(0+128)
  8955                           
  8956                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  8957  10E2  28E6               	goto	l8665
  8958  10E3                     l8663:	
  8959                           
  8960                           ;CC2500_B1.c: 306: Timeout_Counter();
  8961  10E3  319E  2670  3190   	fcall	_Timeout_Counter
  8962  10E6                     l8665:	
  8963  10E6  0020               	movlb	0	; select bank0
  8964  10E7  1E8E               	btfss	14,5	;volatile
  8965  10E8  28EC               	goto	l8669
  8966  10E9  0021               	movlb	1	; select bank1
  8967  10EA  1D2B               	btfss	(_myMain^(0+128)+11),2
  8968  10EB  28E3               	goto	l8663
  8969  10EC                     l8669:	
  8970                           
  8971                           ;CC2500_B1.c: 307: };
  8972                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  8973  10EC  319C  242D  3190   	fcall	_set_TimeoutCleared
  8974                           
  8975                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  8976  10EF  319E  26DD  3190   	fcall	_CC2500_WriteByte
  8977                           
  8978                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  8979  10F2  319F  2762         	fcall	_CC2500_ReadByte
  8980                           
  8981                           ;CC2500_B1.c: 312: RC0 = 1;
  8982  10F4  0020               	movlb	0	; select bank0
  8983  10F5  140E               	bsf	14,0	;volatile
  8984                           
  8985                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  8986  10F6  0021               	movlb	1	; select bank1
  8987  10F7  0851               	movf	_SPI0Buffer^(0+128),w
  8988  10F8  0020               	movlb	0	; select bank0
  8989  10F9  00A2               	movwf	??_CC2500_ReadStatus
  8990  10FA  0822               	movf	??_CC2500_ReadStatus,w
  8991  10FB  0021               	movlb	1	; select bank1
  8992  10FC  00D6               	movwf	_s_data^(0+128)
  8993  10FD  0008               	return
  8994  10FE                     __end_of_CC2500_ReadStatus:	
  8995                           
  8996                           	psect	text41
  8997  1F62                     __ptext41:	
  8998 ;; *************** function _CC2500_ReadByte *****************
  8999 ;; Defined at:
  9000 ;;		line 235 in file "../src/CC2500_B1.c"
  9001 ;; Parameters:    Size  Location     Type
  9002 ;;		None
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9005 ;; Return value:  Size  Location     Type
  9006 ;;		None               void
  9007 ;; Registers used:
  9008 ;;		wreg, status,2, status,0
  9009 ;; Tracked objects:
  9010 ;;		On entry : 0/0
  9011 ;;		On exit  : 0/0
  9012 ;;		Unchanged: 0/0
  9013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9018 ;;Total ram usage:        2 bytes
  9019 ;; Hardware stack levels used:    1
  9020 ;; Hardware stack levels required when called:    5
  9021 ;; This function calls:
  9022 ;;		Nothing
  9023 ;; This function is called by:
  9024 ;;		_CC2500_RxData
  9025 ;;		_CC2500_ReadStatus
  9026 ;;		_CC2500_ReadREG
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           
  9031                           ;psect for function _CC2500_ReadByte
  9032  1F62                     _CC2500_ReadByte:	
  9033                           
  9034                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9035                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9036                           
  9037                           ;incstack = 0
  9038                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9039  1F62  0020               	movlb	0	; select bank0
  9040  1F63  01A1               	clrf	CC2500_ReadByte@loop_b
  9041  1F64                     L2:	
  9042  1F64  3008               	movlw	8
  9043  1F65  0221               	subwf	CC2500_ReadByte@loop_b,w
  9044  1F66  1803               	btfsc	3,0
  9045  1F67  0008               	return
  9046                           
  9047                           ;CC2500_B1.c: 238: RC3 = 1;
  9048  1F68  158E               	bsf	14,3	;volatile
  9049                           
  9050                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9051  1F69  1003               	clrc
  9052  1F6A  0021               	movlb	1	; select bank1
  9053  1F6B  0DD1               	rlf	_SPI0Buffer^(0+128),f
  9054                           
  9055                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9056  1F6C  0020               	movlb	0	; select bank0
  9057  1F6D  1E8E               	btfss	14,5	;volatile
  9058  1F6E  2F72               	goto	l8565
  9059                           
  9060                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9061  1F6F  0021               	movlb	1	; select bank1
  9062  1F70  1451               	bsf	_SPI0Buffer^(0+128),0
  9063  1F71  2F78               	goto	l8567
  9064  1F72                     l8565:	
  9065                           
  9066                           ;CC2500_B1.c: 242: else
  9067                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9068  1F72  30FE               	movlw	254
  9069  1F73  0020               	movlb	0	; select bank0
  9070  1F74  00A0               	movwf	??_CC2500_ReadByte
  9071  1F75  0820               	movf	??_CC2500_ReadByte,w
  9072  1F76  0021               	movlb	1	; select bank1
  9073  1F77  05D1               	andwf	_SPI0Buffer^(0+128),f
  9074  1F78                     l8567:	
  9075                           
  9076                           ;CC2500_B1.c: 244: RC3 = 0;
  9077  1F78  0020               	movlb	0	; select bank0
  9078  1F79  118E               	bcf	14,3	;volatile
  9079  1F7A  3001               	movlw	1
  9080  1F7B  00A0               	movwf	??_CC2500_ReadByte
  9081  1F7C  0820               	movf	??_CC2500_ReadByte,w
  9082  1F7D  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9083  1F7E  2F64               	goto	L2
  9084  1F7F                     __end_of_CC2500_ReadByte:	
  9085                           
  9086                           	psect	text42
  9087  1BFD                     __ptext42:	
  9088 ;; *************** function _RF_Initialization *****************
  9089 ;; Defined at:
  9090 ;;		line 9 in file "../src/RF_Control_B1.c"
  9091 ;; Parameters:    Size  Location     Type
  9092 ;;		None
  9093 ;; Auto vars:     Size  Location     Type
  9094 ;;		None
  9095 ;; Return value:  Size  Location     Type
  9096 ;;		None               void
  9097 ;; Registers used:
  9098 ;;		wreg, status,2, status,0, pclath, cstack
  9099 ;; Tracked objects:
  9100 ;;		On entry : 0/0
  9101 ;;		On exit  : 0/0
  9102 ;;		Unchanged: 0/0
  9103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;Total ram usage:        0 bytes
  9109 ;; Hardware stack levels used:    1
  9110 ;; Hardware stack levels required when called:    6
  9111 ;; This function calls:
  9112 ;;		_setRF_Initialization
  9113 ;; This function is called by:
  9114 ;;		_main
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           
  9119                           ;psect for function _RF_Initialization
  9120  1BFD                     _RF_Initialization:	
  9121                           
  9122                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9126  1BFD  319C  24D3         	fcall	_setRF_Initialization
  9127  1BFF  0008               	return
  9128  1C00                     __end_of_RF_Initialization:	
  9129                           
  9130                           	psect	text43
  9131  1CD3                     __ptext43:	
  9132 ;; *************** function _setRF_Initialization *****************
  9133 ;; Defined at:
  9134 ;;		line 43 in file "../src/RF_Control_B1.c"
  9135 ;; Parameters:    Size  Location     Type
  9136 ;;		None
  9137 ;; Auto vars:     Size  Location     Type
  9138 ;;		None
  9139 ;; Return value:  Size  Location     Type
  9140 ;;		None               void
  9141 ;; Registers used:
  9142 ;;		wreg
  9143 ;; Tracked objects:
  9144 ;;		On entry : 0/0
  9145 ;;		On exit  : 0/0
  9146 ;;		Unchanged: 0/0
  9147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;Total ram usage:        1 bytes
  9153 ;; Hardware stack levels used:    1
  9154 ;; Hardware stack levels required when called:    5
  9155 ;; This function calls:
  9156 ;;		Nothing
  9157 ;; This function is called by:
  9158 ;;		_RF_Initialization
  9159 ;; This function uses a non-reentrant model
  9160 ;;
  9161                           
  9162                           
  9163                           ;psect for function _setRF_Initialization
  9164  1CD3                     _setRF_Initialization:	
  9165                           
  9166                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9167                           
  9168                           ;incstack = 0
  9169                           ; Regs used in _setRF_Initialization: [wreg]
  9170  1CD3  3015               	movlw	21
  9171  1CD4  0020               	movlb	0	; select bank0
  9172  1CD5  00A0               	movwf	??_setRF_Initialization
  9173  1CD6  0820               	movf	??_setRF_Initialization,w
  9174  1CD7  0021               	movlb	1	; select bank1
  9175  1CD8  00D3               	movwf	_Tx_Length^(0+128)
  9176                           
  9177                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9178  1CD9  3005               	movlw	5
  9179  1CDA  00C1               	movwf	(_RF1^(0+128)+7)
  9180  1CDB  3000               	movlw	0
  9181  1CDC  00C2               	movwf	(_RF1^(0+128)+8)
  9182  1CDD  0008               	return
  9183  1CDE                     __end_of_setRF_Initialization:	
  9184                           
  9185                           	psect	text44
  9186  1DFF                     __ptext44:	
  9187 ;; *************** function _Mcu_Initialization *****************
  9188 ;; Defined at:
  9189 ;;		line 30 in file "../src/MCU_B1.c"
  9190 ;; Parameters:    Size  Location     Type
  9191 ;;		None
  9192 ;; Auto vars:     Size  Location     Type
  9193 ;;		None
  9194 ;; Return value:  Size  Location     Type
  9195 ;;		None               void
  9196 ;; Registers used:
  9197 ;;		wreg, status,2, status,0, pclath, cstack
  9198 ;; Tracked objects:
  9199 ;;		On entry : 0/0
  9200 ;;		On exit  : 0/0
  9201 ;;		Unchanged: 0/0
  9202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;Total ram usage:        0 bytes
  9208 ;; Hardware stack levels used:    1
  9209 ;; Hardware stack levels required when called:    6
  9210 ;; This function calls:
  9211 ;;		_ADC_Set
  9212 ;;		_Fosc_Set
  9213 ;;		_IOC_Set
  9214 ;;		_IO_Set
  9215 ;;		_TMR1_Set
  9216 ;;		_WDT_Set
  9217 ;; This function is called by:
  9218 ;;		_main
  9219 ;; This function uses a non-reentrant model
  9220 ;;
  9221                           
  9222                           
  9223                           ;psect for function _Mcu_Initialization
  9224  1DFF                     _Mcu_Initialization:	
  9225                           
  9226                           ;MCU_B1.c: 32: Fosc_Set();
  9227                           
  9228                           ;incstack = 0
  9229                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9230  1DFF  319C  2429  319D   	fcall	_Fosc_Set
  9231                           
  9232                           ;MCU_B1.c: 34: IO_Set();
  9233  1E02  319E  26C5  319D   	fcall	_IO_Set
  9234                           
  9235                           ;MCU_B1.c: 36: ;;
  9236                           ;MCU_B1.c: 38: TMR1_Set();
  9237  1E05  319D  2531  319D   	fcall	_TMR1_Set
  9238                           
  9239                           ;MCU_B1.c: 40: ADC_Set();
  9240  1E08  319C  2444  319D   	fcall	_ADC_Set
  9241                           
  9242                           ;MCU_B1.c: 42: ;;
  9243                           ;MCU_B1.c: 44: ;;
  9244                           ;MCU_B1.c: 46: IOC_Set();
  9245  1E0B  319D  2525  319D   	fcall	_IOC_Set
  9246                           
  9247                           ;MCU_B1.c: 48: ;;
  9248                           ;MCU_B1.c: 50: ;;
  9249                           ;MCU_B1.c: 52: WDT_Set();
  9250  1E0E  319C  24C8         	fcall	_WDT_Set
  9251  1E10  0008               	return
  9252  1E11                     __end_of_Mcu_Initialization:	
  9253                           
  9254                           	psect	text45
  9255  1CC8                     __ptext45:	
  9256 ;; *************** function _WDT_Set *****************
  9257 ;; Defined at:
  9258 ;;		line 1083 in file "../src/MCU_B1.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;		None
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;		None
  9263 ;; Return value:  Size  Location     Type
  9264 ;;		None               void
  9265 ;; Registers used:
  9266 ;;		wreg
  9267 ;; Tracked objects:
  9268 ;;		On entry : 0/0
  9269 ;;		On exit  : 0/0
  9270 ;;		Unchanged: 0/0
  9271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;Total ram usage:        1 bytes
  9277 ;; Hardware stack levels used:    1
  9278 ;; Hardware stack levels required when called:    5
  9279 ;; This function calls:
  9280 ;;		Nothing
  9281 ;; This function is called by:
  9282 ;;		_Mcu_Initialization
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           
  9287                           ;psect for function _WDT_Set
  9288  1CC8                     _WDT_Set:	
  9289                           
  9290                           ;MCU_B1.c: 1090: WDTCON = 0b00010111;;
  9291                           
  9292                           ;incstack = 0
  9293                           ; Regs used in _WDT_Set: [wreg]
  9294  1CC8  3017               	movlw	23
  9295  1CC9  0021               	movlb	1	; select bank1
  9296  1CCA  0097               	movwf	23	;volatile
  9297                           
  9298                           ;MCU_B1.c: 1092: WDT.Enable = 1;
  9299  1CCB  1449               	bsf	_WDT^(0+128),0
  9300                           
  9301                           ;MCU_B1.c: 1093: WDT.Timer = 10;
  9302  1CCC  300A               	movlw	10
  9303  1CCD  0020               	movlb	0	; select bank0
  9304  1CCE  00A0               	movwf	??_WDT_Set
  9305  1CCF  0820               	movf	??_WDT_Set,w
  9306  1CD0  0021               	movlb	1	; select bank1
  9307  1CD1  00CA               	movwf	(_WDT^(0+128)+1)
  9308  1CD2  0008               	return
  9309  1CD3                     __end_of_WDT_Set:	
  9310                           
  9311                           	psect	text46
  9312  1D31                     __ptext46:	
  9313 ;; *************** function _TMR1_Set *****************
  9314 ;; Defined at:
  9315 ;;		line 199 in file "../src/MCU_B1.c"
  9316 ;; Parameters:    Size  Location     Type
  9317 ;;		None
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;		None
  9320 ;; Return value:  Size  Location     Type
  9321 ;;		None               void
  9322 ;; Registers used:
  9323 ;;		wreg
  9324 ;; Tracked objects:
  9325 ;;		On entry : 0/0
  9326 ;;		On exit  : 0/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;Total ram usage:        0 bytes
  9334 ;; Hardware stack levels used:    1
  9335 ;; Hardware stack levels required when called:    5
  9336 ;; This function calls:
  9337 ;;		Nothing
  9338 ;; This function is called by:
  9339 ;;		_Mcu_Initialization
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           
  9344                           ;psect for function _TMR1_Set
  9345  1D31                     _TMR1_Set:	
  9346                           
  9347                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9348                           
  9349                           ;incstack = 0
  9350                           ; Regs used in _TMR1_Set: [wreg]
  9351  1D31  3041               	movlw	65
  9352  1D32  0020               	movlb	0	; select bank0
  9353  1D33  0098               	movwf	24	;volatile
  9354                           
  9355                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9356  1D34  30FA               	movlw	250
  9357  1D35  0097               	movwf	23	;volatile
  9358                           
  9359                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9360  1D36  3038               	movlw	56
  9361  1D37  0096               	movwf	22	;volatile
  9362                           
  9363                           ;MCU_B1.c: 203: TMR1IE = 1;
  9364  1D38  0021               	movlb	1	; select bank1
  9365  1D39  1411               	bsf	17,0	;volatile
  9366                           
  9367                           ;MCU_B1.c: 204: PEIE = 1;
  9368  1D3A  170B               	bsf	11,6	;volatile
  9369                           
  9370                           ;MCU_B1.c: 205: GIE = 1;
  9371  1D3B  178B               	bsf	11,7	;volatile
  9372  1D3C  0008               	return
  9373  1D3D                     __end_of_TMR1_Set:	
  9374                           
  9375                           	psect	text47
  9376  1EC5                     __ptext47:	
  9377 ;; *************** function _IO_Set *****************
  9378 ;; Defined at:
  9379 ;;		line 60 in file "../src/MCU_B1.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;		None
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;		None
  9384 ;; Return value:  Size  Location     Type
  9385 ;;		None               void
  9386 ;; Registers used:
  9387 ;;		wreg, status,2
  9388 ;; Tracked objects:
  9389 ;;		On entry : 0/0
  9390 ;;		On exit  : 0/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9397 ;;Total ram usage:        0 bytes
  9398 ;; Hardware stack levels used:    1
  9399 ;; Hardware stack levels required when called:    5
  9400 ;; This function calls:
  9401 ;;		Nothing
  9402 ;; This function is called by:
  9403 ;;		_Mcu_Initialization
  9404 ;; This function uses a non-reentrant model
  9405 ;;
  9406                           
  9407                           
  9408                           ;psect for function _IO_Set
  9409  1EC5                     _IO_Set:	
  9410                           
  9411                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9412                           
  9413                           ;incstack = 0
  9414                           ; Regs used in _IO_Set: [wreg+status,2]
  9415  1EC5  30F7               	movlw	247
  9416  1EC6  0021               	movlb	1	; select bank1
  9417  1EC7  008C               	movwf	12	;volatile
  9418                           
  9419                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9420  1EC8  3004               	movlw	4
  9421  1EC9  008D               	movwf	13	;volatile
  9422                           
  9423                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9424  1ECA  3026               	movlw	38
  9425  1ECB  008E               	movwf	14	;volatile
  9426                           
  9427                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9428  1ECC  0022               	movlb	2	; select bank2
  9429  1ECD  018C               	clrf	12	;volatile
  9430                           
  9431                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9432  1ECE  018D               	clrf	13	;volatile
  9433                           
  9434                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9435  1ECF  018E               	clrf	14	;volatile
  9436                           
  9437                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9438  1ED0  300E               	movlw	14
  9439  1ED1  0023               	movlb	3	; select bank3
  9440  1ED2  008C               	movwf	12	;volatile
  9441                           
  9442                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9443  1ED3  018D               	clrf	13	;volatile
  9444                           
  9445                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9446  1ED4  018E               	clrf	14	;volatile
  9447                           
  9448                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9449  1ED5  30F7               	movlw	247
  9450  1ED6  0020               	movlb	0	; select bank0
  9451  1ED7  008C               	movwf	12	;volatile
  9452                           
  9453                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9454  1ED8  3004               	movlw	4
  9455  1ED9  008D               	movwf	13	;volatile
  9456                           
  9457                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9458  1EDA  3026               	movlw	38
  9459  1EDB  008E               	movwf	14	;volatile
  9460  1EDC  0008               	return
  9461  1EDD                     __end_of_IO_Set:	
  9462                           
  9463                           	psect	text48
  9464  1D25                     __ptext48:	
  9465 ;; *************** function _IOC_Set *****************
  9466 ;; Defined at:
  9467 ;;		line 365 in file "../src/MCU_B1.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;		None
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;		None
  9472 ;; Return value:  Size  Location     Type
  9473 ;;		None               void
  9474 ;; Registers used:
  9475 ;;		wreg, status,2
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;Total ram usage:        0 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    5
  9488 ;; This function calls:
  9489 ;;		Nothing
  9490 ;; This function is called by:
  9491 ;;		_Mcu_Initialization
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           
  9496                           ;psect for function _IOC_Set
  9497  1D25                     _IOC_Set:	
  9498                           
  9499                           ;MCU_B1.c: 366: WPUB2 = 0;
  9500                           
  9501                           ;incstack = 0
  9502                           ; Regs used in _IOC_Set: [wreg+status,2]
  9503  1D25  0024               	movlb	4	; select bank4
  9504  1D26  110D               	bcf	13,2	;volatile
  9505                           
  9506                           ;MCU_B1.c: 386: IOCBP = 0b00000100;
  9507  1D27  3004               	movlw	4
  9508  1D28  0027               	movlb	7	; select bank7
  9509  1D29  0094               	movwf	20	;volatile
  9510                           
  9511                           ;MCU_B1.c: 387: IOCBN = 0b00000000;
  9512  1D2A  0195               	clrf	21	;volatile
  9513                           
  9514                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9515  1D2B  0196               	clrf	22	;volatile
  9516                           
  9517                           ;MCU_B1.c: 393: IOCIE = 1;
  9518  1D2C  158B               	bsf	11,3	;volatile
  9519                           
  9520                           ;MCU_B1.c: 394: IOCIF = 0;
  9521  1D2D  100B               	bcf	11,0	;volatile
  9522                           
  9523                           ;MCU_B1.c: 395: PEIE = 1;
  9524  1D2E  170B               	bsf	11,6	;volatile
  9525                           
  9526                           ;MCU_B1.c: 396: GIE = 1;
  9527  1D2F  178B               	bsf	11,7	;volatile
  9528  1D30  0008               	return
  9529  1D31                     __end_of_IOC_Set:	
  9530                           
  9531                           	psect	text49
  9532  1C29                     __ptext49:	
  9533 ;; *************** function _Fosc_Set *****************
  9534 ;; Defined at:
  9535 ;;		line 56 in file "../src/MCU_B1.c"
  9536 ;; Parameters:    Size  Location     Type
  9537 ;;		None
  9538 ;; Auto vars:     Size  Location     Type
  9539 ;;		None
  9540 ;; Return value:  Size  Location     Type
  9541 ;;		None               void
  9542 ;; Registers used:
  9543 ;;		wreg
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;Total ram usage:        0 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    5
  9556 ;; This function calls:
  9557 ;;		Nothing
  9558 ;; This function is called by:
  9559 ;;		_Mcu_Initialization
  9560 ;; This function uses a non-reentrant model
  9561 ;;
  9562                           
  9563                           
  9564                           ;psect for function _Fosc_Set
  9565  1C29                     _Fosc_Set:	
  9566                           
  9567                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9568                           
  9569                           ;incstack = 0
  9570                           ; Regs used in _Fosc_Set: [wreg]
  9571  1C29  3078               	movlw	120
  9572  1C2A  0021               	movlb	1	; select bank1
  9573  1C2B  0099               	movwf	25	;volatile
  9574  1C2C  0008               	return
  9575  1C2D                     __end_of_Fosc_Set:	
  9576                           
  9577                           	psect	text50
  9578  1C44                     __ptext50:	
  9579 ;; *************** function _ADC_Set *****************
  9580 ;; Defined at:
  9581 ;;		line 419 in file "../src/MCU_B1.c"
  9582 ;; Parameters:    Size  Location     Type
  9583 ;;		None
  9584 ;; Auto vars:     Size  Location     Type
  9585 ;;		None
  9586 ;; Return value:  Size  Location     Type
  9587 ;;		None               void
  9588 ;; Registers used:
  9589 ;;		wreg
  9590 ;; Tracked objects:
  9591 ;;		On entry : 0/0
  9592 ;;		On exit  : 0/0
  9593 ;;		Unchanged: 0/0
  9594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;Total ram usage:        0 bytes
  9600 ;; Hardware stack levels used:    1
  9601 ;; Hardware stack levels required when called:    5
  9602 ;; This function calls:
  9603 ;;		Nothing
  9604 ;; This function is called by:
  9605 ;;		_Mcu_Initialization
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           
  9610                           ;psect for function _ADC_Set
  9611  1C44                     _ADC_Set:	
  9612                           
  9613                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9614                           
  9615                           ;incstack = 0
  9616                           ; Regs used in _ADC_Set: [wreg]
  9617  1C44  30F3               	movlw	243
  9618  1C45  0021               	movlb	1	; select bank1
  9619  1C46  009E               	movwf	30	;volatile
  9620                           
  9621                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  9622  1C47  30C1               	movlw	193
  9623  1C48  0022               	movlb	2	; select bank2
  9624  1C49  0097               	movwf	23	;volatile
  9625  1C4A  0008               	return
  9626  1C4B                     __end_of_ADC_Set:	
  9627                           
  9628                           	psect	text51
  9629  0041                     __ptext51:	
  9630 ;; *************** function _Load_Main *****************
  9631 ;; Defined at:
  9632 ;;		line 39 in file "../src/OverLoad_B1.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;		None
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;  i               2   12[BANK0 ] int 
  9637 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  9638 ;;  error           1   10[BANK0 ] unsigned char 
  9639 ;; Return value:  Size  Location     Type
  9640 ;;		None               void
  9641 ;; Registers used:
  9642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9643 ;; Tracked objects:
  9644 ;;		On entry : 0/0
  9645 ;;		On exit  : 0/0
  9646 ;;		Unchanged: 0/0
  9647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;Total ram usage:        6 bytes
  9653 ;; Hardware stack levels used:    1
  9654 ;; Hardware stack levels required when called:    7
  9655 ;; This function calls:
  9656 ;;		___lwdiv
  9657 ;;		___wmul
  9658 ;;		_getAll_DimmerLights_AdjSw
  9659 ;;		_getDimmer_LoadGO
  9660 ;;		_getDimmer_Load_Status
  9661 ;;		_getMain_All_Error_Status
  9662 ;;		_getMain_LightsStatus
  9663 ;;		_getMain_Lights_Count
  9664 ;;		_setLoad_AH_AL_Restore
  9665 ;; This function is called by:
  9666 ;;		_main
  9667 ;; This function uses a non-reentrant model
  9668 ;;
  9669                           
  9670                           
  9671                           ;psect for function _Load_Main
  9672  0041                     _Load_Main:	
  9673                           
  9674                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9675                           
  9676                           ;incstack = 0
  9677                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9678  0041  3000               	movlw	0
  9679  0042  3192  2232  3180   	fcall	_getMain_All_Error_Status
  9680  0045  0020               	movlb	0	; select bank0
  9681  0046  00A8               	movwf	??_Load_Main
  9682  0047  0828               	movf	??_Load_Main,w
  9683  0048  00AA               	movwf	Load_Main@error
  9684                           
  9685                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9686  0049  01AB               	clrf	Load_Main@Load_Status
  9687                           
  9688                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9689  004A  0022               	movlb	2	; select bank2
  9690  004B  1C25               	btfss	_Load^(0+256),0
  9691  004C  29E7               	goto	l1564
  9692                           
  9693                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9694  004D  319C  2492  3180   	fcall	_getMain_LightsStatus
  9695  0050  3800               	iorlw	0
  9696  0051  1D03               	skipz
  9697  0052  2855               	goto	l10017
  9698                           
  9699                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9700  0053  0022               	movlb	2	; select bank2
  9701  0054  2876               	goto	l10035
  9702  0055                     l10017:	
  9703                           ;OverLoad_B1.c: 66: } else {
  9704                           
  9705                           
  9706                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9707  0055  0020               	movlb	0	; select bank0
  9708  0056  08AA               	movf	Load_Main@error,f
  9709  0057  1D03               	skipz
  9710  0058  2873               	goto	l1567
  9711  0059  3191  2178  3180   	fcall	_getAll_DimmerLights_AdjSw
  9712  005C  3800               	iorlw	0
  9713  005D  1D03               	skipz
  9714  005E  2873               	goto	l1567
  9715                           
  9716                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9717  005F  0022               	movlb	2	; select bank2
  9718  0060  14A5               	bsf	_Load^(0+256),1
  9719                           
  9720                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  9721  0061  319C  2453  3180   	fcall	_getDimmer_LoadGO
  9722  0064  3A01               	xorlw	1
  9723  0065  1D03               	skipz
  9724  0066  286E               	goto	l1568
  9725                           
  9726                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  9727  0067  0022               	movlb	2	; select bank2
  9728  0068  1DA5               	btfss	_Load^(0+256),3
  9729  0069  1BA5               	btfsc	_Load^(0+256),7
  9730  006A  2877               	goto	l1566
  9731                           
  9732                           ;OverLoad_B1.c: 74: Load.Run = 1;
  9733  006B  15A5               	bsf	_Load^(0+256),3
  9734                           
  9735                           ;OverLoad_B1.c: 75: Load.Count = 0;
  9736  006C  01CE               	clrf	(_Load^(0+256)+41)
  9737                           
  9738                           ;OverLoad_B1.c: 76: }
  9739                           ;OverLoad_B1.c: 77: } else {
  9740  006D  2877               	goto	l1566
  9741  006E                     l1568:	
  9742                           
  9743                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  9744  006E  0022               	movlb	2	; select bank2
  9745  006F  1FA5               	btfss	_Load^(0+256),7
  9746  0070  2877               	goto	l1566
  9747                           
  9748                           ;OverLoad_B1.c: 79: Load.OK = 0;
  9749  0071  13A5               	bcf	_Load^(0+256),7
  9750                           
  9751                           ;OverLoad_B1.c: 80: }
  9752                           ;OverLoad_B1.c: 81: }
  9753                           ;OverLoad_B1.c: 82: } else {
  9754  0072  2877               	goto	l1566
  9755  0073                     l1567:	
  9756                           
  9757                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  9758  0073  0022               	movlb	2	; select bank2
  9759  0074  1CA5               	btfss	_Load^(0+256),1
  9760  0075  2877               	goto	l1566
  9761  0076                     l10035:	
  9762                           
  9763                           ;OverLoad_B1.c: 84: Load.GO = 0;
  9764  0076  10A5               	bcf	_Load^(0+256),1
  9765  0077                     l1566:	
  9766                           
  9767                           ;OverLoad_B1.c: 85: }
  9768                           ;OverLoad_B1.c: 86: }
  9769                           ;OverLoad_B1.c: 88: }
  9770                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  9771  0077  1CA5               	btfss	_Load^(0+256),1
  9772  0078  29C3               	goto	l1574
  9773                           
  9774                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  9775  0079  1525               	bsf	_Load^(0+256),2
  9776                           
  9777                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  9778  007A  1E25               	btfss	_Load^(0+256),4
  9779  007B  29C1               	goto	l1575
  9780                           
  9781                           ;OverLoad_B1.c: 95: Load.Time++;
  9782  007C  3001               	movlw	1
  9783  007D  07A6               	addwf	(_Load^(0+256)+1),f
  9784  007E  3000               	movlw	0
  9785  007F  3DA7               	addwfc	((_Load+1)^(0+256)+1),f
  9786                           
  9787                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  9788  0080  3000               	movlw	0
  9789  0081  0227               	subwf	((_Load+1)^(0+256)+1),w
  9790  0082  3005               	movlw	5
  9791  0083  1903               	skipnz
  9792  0084  0226               	subwf	(_Load^(0+256)+1),w
  9793  0085  1C03               	skipc
  9794  0086  0008               	return
  9795                           
  9796                           ;OverLoad_B1.c: 97: Load.Time = 0;
  9797  0087  01A6               	clrf	(_Load^(0+256)+1)
  9798  0088  01A7               	clrf	((_Load+1)^(0+256)+1)
  9799                           
  9800                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  9801  0089  1225               	bcf	_Load^(0+256),4
  9802                           
  9803                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  9804  008A  3001               	movlw	1
  9805  008B  0020               	movlb	0	; select bank0
  9806  008C  00AC               	movwf	Load_Main@i
  9807  008D  3000               	movlw	0
  9808  008E  00AD               	movwf	Load_Main@i+1
  9809  008F  082D               	movf	Load_Main@i+1,w
  9810  0090  3A80               	xorlw	128
  9811  0091  00A8               	movwf	??_Load_Main
  9812  0092  3080               	movlw	128
  9813  0093  0228               	subwf	??_Load_Main,w
  9814  0094  1D03               	skipz
  9815  0095  2898               	goto	u11545
  9816  0096  3004               	movlw	4
  9817  0097  022C               	subwf	Load_Main@i,w
  9818  0098                     u11545:	
  9819  0098  1803               	btfsc	3,0
  9820  0099  28CC               	goto	l10057
  9821  009A                     l10051:	
  9822                           
  9823                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  9824  009A  0020               	movlb	0	; select bank0
  9825  009B  352C               	lslf	Load_Main@i,w
  9826  009C  3E30               	addlw	(_Load+11)& (0+255)
  9827  009D  0086               	movwf	6
  9828  009E  3001               	movlw	1	; select bank2/3
  9829  009F  0087               	movwf	7
  9830  00A0  3F40               	moviw [0]fsr1
  9831  00A1  00A8               	movwf	??_Load_Main
  9832  00A2  3F41               	moviw [1]fsr1
  9833  00A3  00A9               	movwf	??_Load_Main+1
  9834  00A4  0828               	movf	??_Load_Main,w
  9835  00A5  0022               	movlb	2	; select bank2
  9836  00A6  07AA               	addwf	(_Load^(0+256)+5),f
  9837  00A7  0020               	movlb	0	; select bank0
  9838  00A8  0829               	movf	??_Load_Main+1,w
  9839  00A9  0022               	movlb	2	; select bank2
  9840  00AA  3DAB               	addwfc	((_Load+1)^(0+256)+5),f
  9841                           
  9842                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  9843  00AB  0020               	movlb	0	; select bank0
  9844  00AC  352C               	lslf	Load_Main@i,w
  9845  00AD  3E3A               	addlw	(_Load+21)& (0+255)
  9846  00AE  0086               	movwf	6
  9847  00AF  3001               	movlw	1	; select bank2/3
  9848  00B0  0087               	movwf	7
  9849  00B1  3F40               	moviw [0]fsr1
  9850  00B2  00A8               	movwf	??_Load_Main
  9851  00B3  3F41               	moviw [1]fsr1
  9852  00B4  00A9               	movwf	??_Load_Main+1
  9853  00B5  0828               	movf	??_Load_Main,w
  9854  00B6  0022               	movlb	2	; select bank2
  9855  00B7  07AC               	addwf	(_Load^(0+256)+7),f
  9856  00B8  0020               	movlb	0	; select bank0
  9857  00B9  0829               	movf	??_Load_Main+1,w
  9858  00BA  0022               	movlb	2	; select bank2
  9859  00BB  3DAD               	addwfc	((_Load+1)^(0+256)+7),f
  9860  00BC  3001               	movlw	1
  9861  00BD  0020               	movlb	0	; select bank0
  9862  00BE  07AC               	addwf	Load_Main@i,f
  9863  00BF  3000               	movlw	0
  9864  00C0  3DAD               	addwfc	Load_Main@i+1,f
  9865  00C1  082D               	movf	Load_Main@i+1,w
  9866  00C2  3A80               	xorlw	128
  9867  00C3  00A8               	movwf	??_Load_Main
  9868  00C4  3080               	movlw	128
  9869  00C5  0228               	subwf	??_Load_Main,w
  9870  00C6  1D03               	skipz
  9871  00C7  28CA               	goto	u11555
  9872  00C8  3004               	movlw	4
  9873  00C9  022C               	subwf	Load_Main@i,w
  9874  00CA                     u11555:	
  9875  00CA  1C03               	skipc
  9876  00CB  289A               	goto	l10051
  9877  00CC                     l10057:	
  9878                           
  9879                           ;OverLoad_B1.c: 103: }
  9880                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  9881  00CC  3003               	movlw	3
  9882  00CD  0020               	movlb	0	; select bank0
  9883  00CE  00A0               	movwf	___lwdiv@divisor
  9884  00CF  3000               	movlw	0
  9885  00D0  00A1               	movwf	___lwdiv@divisor+1
  9886  00D1  0022               	movlb	2	; select bank2
  9887  00D2  082B               	movf	((_Load+1)^(0+256)+5),w
  9888  00D3  0020               	movlb	0	; select bank0
  9889  00D4  01A3               	clrf	___lwdiv@dividend+1
  9890  00D5  07A3               	addwf	___lwdiv@dividend+1,f
  9891  00D6  0022               	movlb	2	; select bank2
  9892  00D7  082A               	movf	(_Load^(0+256)+5),w
  9893  00D8  0020               	movlb	0	; select bank0
  9894  00D9  01A2               	clrf	___lwdiv@dividend
  9895  00DA  07A2               	addwf	___lwdiv@dividend,f
  9896  00DB  3193  236F  3180   	fcall	___lwdiv
  9897  00DE  0020               	movlb	0	; select bank0
  9898  00DF  0821               	movf	?___lwdiv+1,w
  9899  00E0  0022               	movlb	2	; select bank2
  9900  00E1  01AB               	clrf	((_Load+1)^(0+256)+5)
  9901  00E2  07AB               	addwf	((_Load+1)^(0+256)+5),f
  9902  00E3  0020               	movlb	0	; select bank0
  9903  00E4  0820               	movf	?___lwdiv,w
  9904  00E5  0022               	movlb	2	; select bank2
  9905  00E6  01AA               	clrf	(_Load^(0+256)+5)
  9906  00E7  07AA               	addwf	(_Load^(0+256)+5),f
  9907                           
  9908                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  9909  00E8  3003               	movlw	3
  9910  00E9  0020               	movlb	0	; select bank0
  9911  00EA  00A0               	movwf	___lwdiv@divisor
  9912  00EB  3000               	movlw	0
  9913  00EC  00A1               	movwf	___lwdiv@divisor+1
  9914  00ED  0022               	movlb	2	; select bank2
  9915  00EE  082D               	movf	((_Load+1)^(0+256)+7),w
  9916  00EF  0020               	movlb	0	; select bank0
  9917  00F0  01A3               	clrf	___lwdiv@dividend+1
  9918  00F1  07A3               	addwf	___lwdiv@dividend+1,f
  9919  00F2  0022               	movlb	2	; select bank2
  9920  00F3  082C               	movf	(_Load^(0+256)+7),w
  9921  00F4  0020               	movlb	0	; select bank0
  9922  00F5  01A2               	clrf	___lwdiv@dividend
  9923  00F6  07A2               	addwf	___lwdiv@dividend,f
  9924  00F7  3193  236F  3180   	fcall	___lwdiv
  9925  00FA  0020               	movlb	0	; select bank0
  9926  00FB  0821               	movf	?___lwdiv+1,w
  9927  00FC  0022               	movlb	2	; select bank2
  9928  00FD  01AD               	clrf	((_Load+1)^(0+256)+7)
  9929  00FE  07AD               	addwf	((_Load+1)^(0+256)+7),f
  9930  00FF  0020               	movlb	0	; select bank0
  9931  0100  0820               	movf	?___lwdiv,w
  9932  0101  0022               	movlb	2	; select bank2
  9933  0102  01AC               	clrf	(_Load^(0+256)+7)
  9934  0103  07AC               	addwf	(_Load^(0+256)+7),f
  9935                           
  9936                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  9937  0104  319F  2746  3180   	fcall	_setLoad_AH_AL_Restore
  9938                           
  9939                           ;OverLoad_B1.c: 108: if (Load.ADH > Load.ADL) {
  9940  0107  0022               	movlb	2	; select bank2
  9941  0108  082B               	movf	((_Load+1)^(0+256)+5),w
  9942  0109  022D               	subwf	((_Load+1)^(0+256)+7),w
  9943  010A  1D03               	skipz
  9944  010B  290E               	goto	u11565
  9945  010C  082A               	movf	(_Load^(0+256)+5),w
  9946  010D  022C               	subwf	(_Load^(0+256)+7),w
  9947  010E                     u11565:	
  9948  010E  1803               	skipnc
  9949  010F  0008               	return
  9950                           
  9951                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  9952  0110  3005               	movlw	5
  9953  0111  3E25               	addlw	_Load& (0+255)
  9954  0112  0086               	movwf	6
  9955  0113  3001               	movlw	1	; select bank2/3
  9956  0114  0087               	movwf	7
  9957  0115  092C               	comf	(_Load^(0+256)+7),w
  9958  0116  0020               	movlb	0	; select bank0
  9959  0117  00A8               	movwf	??_Load_Main
  9960  0118  0022               	movlb	2	; select bank2
  9961  0119  092D               	comf	((_Load+1)^(0+256)+7),w
  9962  011A  0020               	movlb	0	; select bank0
  9963  011B  00A9               	movwf	??_Load_Main+1
  9964  011C  0AA8               	incf	??_Load_Main,f
  9965  011D  1903               	skipnz
  9966  011E  0AA9               	incf	??_Load_Main+1,f
  9967  011F  3F40               	moviw [0]fsr1
  9968  0120  0728               	addwf	??_Load_Main,w
  9969  0121  0022               	movlb	2	; select bank2
  9970  0122  00C4               	movwf	(_Load^(0+256)+31)
  9971  0123  3F41               	moviw [1]fsr1
  9972  0124  0020               	movlb	0	; select bank0
  9973  0125  3D29               	addwfc	??_Load_Main+1,w
  9974  0126  0022               	movlb	2	; select bank2
  9975  0127  00C5               	movwf	(_Load^(0+256)+32)
  9976                           
  9977                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  9978  0128  01AA               	clrf	(_Load^(0+256)+5)
  9979  0129  01AB               	clrf	((_Load+1)^(0+256)+5)
  9980                           
  9981                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  9982  012A  01AC               	clrf	(_Load^(0+256)+7)
  9983  012B  01AD               	clrf	((_Load+1)^(0+256)+7)
  9984                           
  9985                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  9986  012C  1DA5               	btfss	_Load^(0+256),3
  9987  012D  298D               	goto	l10097
  9988                           
  9989                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  9990  012E  3002               	movlw	2
  9991  012F  024E               	subwf	(_Load^(0+256)+41),w
  9992  0130  1803               	skipnc
  9993  0131  298D               	goto	l10097
  9994                           
  9995                           ;OverLoad_B1.c: 115: Load.Count++;
  9996  0132  3001               	movlw	1
  9997  0133  0020               	movlb	0	; select bank0
  9998  0134  00A8               	movwf	??_Load_Main
  9999  0135  0828               	movf	??_Load_Main,w
 10000  0136  0022               	movlb	2	; select bank2
 10001  0137  07CE               	addwf	(_Load^(0+256)+41),f
 10002                           
 10003                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
 10004  0138  319C  245B  3180   	fcall	_getDimmer_Load_Status
 10005  013B  0020               	movlb	0	; select bank0
 10006  013C  00A8               	movwf	??_Load_Main
 10007  013D  0828               	movf	??_Load_Main,w
 10008  013E  00AB               	movwf	Load_Main@Load_Status
 10009                           
 10010                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
 10011  013F  319D  2519  3180   	fcall	_getMain_Lights_Count
 10012  0142  0020               	movlb	0	; select bank0
 10013  0143  00A8               	movwf	??_Load_Main
 10014  0144  0828               	movf	??_Load_Main,w
 10015  0145  0022               	movlb	2	; select bank2
 10016  0146  00D1               	movwf	(_Load^(0+256)+44)
 10017                           
 10018                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
 10019  0147  084E               	movf	(_Load^(0+256)+41),w
 10020  0148  3A01               	xorlw	1
 10021  0149  1D03               	skipz
 10022  014A  2955               	goto	l10083
 10023                           
 10024                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
 10025  014B  3002               	movlw	2
 10026  014C  0020               	movlb	0	; select bank0
 10027  014D  00A8               	movwf	??_Load_Main
 10028  014E  0828               	movf	??_Load_Main,w
 10029  014F  0022               	movlb	2	; select bank2
 10030  0150  00D0               	movwf	(_Load^(0+256)+43)
 10031                           
 10032                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*57);
 10033  0151  3074               	movlw	116
 10034  0152  00CA               	movwf	(_Load^(0+256)+37)
 10035  0153  3004               	movlw	4
 10036  0154  2960               	goto	L3
 10037  0155                     l10083:	
 10038                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
 10039                           
 10040  0155  084E               	movf	(_Load^(0+256)+41),w
 10041  0156  3A02               	xorlw	2
 10042  0157  1D03               	skipz
 10043  0158  298D               	goto	l10097
 10044                           
 10045                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
 10046  0159  0851               	movf	(_Load^(0+256)+44),w
 10047  015A  3A01               	xorlw	1
 10048  015B  1D03               	skipz
 10049  015C  2962               	goto	l10089
 10050                           
 10051                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.6*57);
 10052  015D  305B               	movlw	91
 10053  015E  00CA               	movwf	(_Load^(0+256)+37)
 10054  015F  3000               	movlw	0
 10055  0160                     L3:	
 10056  0160  00CB               	movwf	(_Load^(0+256)+38)
 10057                           
 10058                           ;OverLoad_B1.c: 124: } else {
 10059  0161  298D               	goto	l10097
 10060  0162                     l10089:	
 10061                           
 10062                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 10063  0162  0020               	movlb	0	; select bank0
 10064  0163  08AB               	movf	Load_Main@Load_Status,f
 10065  0164  1D03               	skipz
 10066  0165  2981               	goto	l10093
 10067                           
 10068                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.6*57) * Load.LightsCount;
 10069  0166  0022               	movlb	2	; select bank2
 10070  0167  0851               	movf	(_Load^(0+256)+44),w
 10071  0168  0020               	movlb	0	; select bank0
 10072  0169  00A8               	movwf	??_Load_Main
 10073  016A  01A9               	clrf	??_Load_Main+1
 10074  016B  0828               	movf	??_Load_Main,w
 10075  016C  00A0               	movwf	___wmul@multiplier
 10076  016D  0829               	movf	??_Load_Main+1,w
 10077  016E  00A1               	movwf	___wmul@multiplier+1
 10078  016F  305B               	movlw	91
 10079  0170  00A2               	movwf	___wmul@multiplicand
 10080  0171  3000               	movlw	0
 10081  0172  00A3               	movwf	___wmul@multiplicand+1
 10082  0173  3188  2000  3180   	fcall	___wmul
 10083  0176  0020               	movlb	0	; select bank0
 10084  0177  0821               	movf	?___wmul+1,w
 10085  0178  0022               	movlb	2	; select bank2
 10086  0179  01CB               	clrf	((_Load+1)^(0+256)+37)
 10087  017A  07CB               	addwf	((_Load+1)^(0+256)+37),f
 10088  017B  0020               	movlb	0	; select bank0
 10089  017C  0820               	movf	?___wmul,w
 10090  017D  0022               	movlb	2	; select bank2
 10091  017E  01CA               	clrf	(_Load^(0+256)+37)
 10092  017F  07CA               	addwf	(_Load^(0+256)+37),f
 10093                           
 10094                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10095  0180  298D               	goto	l10097
 10096  0181                     l10093:	
 10097  0181  0020               	movlb	0	; select bank0
 10098  0182  082B               	movf	Load_Main@Load_Status,w
 10099  0183  3A01               	xorlw	1
 10100  0184  1D03               	skipz
 10101  0185  298D               	goto	l10097
 10102                           
 10103                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.6*57) + Load.TotalLoad;
 10104  0186  0022               	movlb	2	; select bank2
 10105  0187  082E               	movf	(_Load^(0+256)+9),w
 10106  0188  3E5B               	addlw	91
 10107  0189  00CA               	movwf	(_Load^(0+256)+37)
 10108  018A  3000               	movlw	0
 10109  018B  3D2F               	addwfc	((_Load+1)^(0+256)+9),w
 10110  018C  00CB               	movwf	((_Load+1)^(0+256)+37)
 10111  018D                     l10097:	
 10112                           
 10113                           ;OverLoad_B1.c: 129: }
 10114                           ;OverLoad_B1.c: 130: }
 10115                           ;OverLoad_B1.c: 131: }
 10116                           ;OverLoad_B1.c: 132: }
 10117                           ;OverLoad_B1.c: 133: }
 10118                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10119  018D  0022               	movlb	2	; select bank2
 10120  018E  084B               	movf	((_Load+1)^(0+256)+37),w
 10121  018F  0245               	subwf	((_Load+1)^(0+256)+31),w
 10122  0190  1D03               	skipz
 10123  0191  2994               	goto	u11645
 10124  0192  084A               	movf	(_Load^(0+256)+37),w
 10125  0193  0244               	subwf	(_Load^(0+256)+31),w
 10126  0194                     u11645:	
 10127  0194  1C03               	skipc
 10128  0195  29A3               	goto	l10107
 10129                           
 10130                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10131  0196  3001               	movlw	1
 10132  0197  0020               	movlb	0	; select bank0
 10133  0198  00A8               	movwf	??_Load_Main
 10134  0199  0828               	movf	??_Load_Main,w
 10135  019A  0022               	movlb	2	; select bank2
 10136  019B  07CF               	addwf	(_Load^(0+256)+42),f
 10137                           
 10138                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10139  019C  084F               	movf	(_Load^(0+256)+42),w
 10140  019D  0250               	subwf	(_Load^(0+256)+43),w
 10141  019E  1803               	skipnc
 10142  019F  0008               	return
 10143                           
 10144                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10145  01A0  01CF               	clrf	(_Load^(0+256)+42)
 10146                           
 10147                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10148  01A1  16A5               	bsf	_Load^(0+256),5
 10149                           
 10150                           ;OverLoad_B1.c: 161: }
 10151                           ;OverLoad_B1.c: 162: } else {
 10152  01A2  0008               	return
 10153  01A3                     l10107:	
 10154                           
 10155                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 10156  01A3  01CF               	clrf	(_Load^(0+256)+42)
 10157                           
 10158                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 10159  01A4  1DA5               	btfss	_Load^(0+256),3
 10160  01A5  0008               	return
 10161                           
 10162                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10163  01A6  3001               	movlw	1
 10164  01A7  0020               	movlb	0	; select bank0
 10165  01A8  00A8               	movwf	??_Load_Main
 10166  01A9  0828               	movf	??_Load_Main,w
 10167  01AA  0022               	movlb	2	; select bank2
 10168  01AB  07D2               	addwf	(_Load^(0+256)+45),f
 10169                           
 10170                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10171  01AC  3003               	movlw	3
 10172  01AD  0252               	subwf	(_Load^(0+256)+45),w
 10173  01AE  1C03               	skipc
 10174  01AF  0008               	return
 10175                           
 10176                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10177  01B0  01D2               	clrf	(_Load^(0+256)+45)
 10178                           
 10179                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10180  01B1  17A5               	bsf	_Load^(0+256),7
 10181                           
 10182                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10183  01B2  11A5               	bcf	_Load^(0+256),3
 10184                           
 10185                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10186  01B3  01CE               	clrf	(_Load^(0+256)+41)
 10187                           
 10188                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 10189  01B4  0845               	movf	((_Load+1)^(0+256)+31),w
 10190  01B5  01AF               	clrf	((_Load+1)^(0+256)+9)
 10191  01B6  07AF               	addwf	((_Load+1)^(0+256)+9),f
 10192  01B7  0844               	movf	(_Load^(0+256)+31),w
 10193  01B8  01AE               	clrf	(_Load^(0+256)+9)
 10194  01B9  07AE               	addwf	(_Load^(0+256)+9),f
 10195                           
 10196                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 10197  01BA  3003               	movlw	3
 10198  01BB  0020               	movlb	0	; select bank0
 10199  01BC  00A8               	movwf	??_Load_Main
 10200  01BD  0828               	movf	??_Load_Main,w
 10201  01BE  0022               	movlb	2	; select bank2
 10202  01BF  00D0               	movwf	(_Load^(0+256)+43)
 10203                           
 10204                           ;OverLoad_B1.c: 176: }
 10205                           ;OverLoad_B1.c: 177: }
 10206                           ;OverLoad_B1.c: 200: }
 10207                           ;OverLoad_B1.c: 201: }
 10208                           ;OverLoad_B1.c: 202: }
 10209                           ;OverLoad_B1.c: 203: } else {
 10210  01C0  0008               	return
 10211  01C1                     l1575:	
 10212                           
 10213                           ;OverLoad_B1.c: 204: Load.ADtoGO = 1;
 10214  01C1  1625               	bsf	_Load^(0+256),4
 10215                           
 10216                           ;OverLoad_B1.c: 205: }
 10217                           ;OverLoad_B1.c: 206: } else {
 10218  01C2  0008               	return
 10219  01C3                     l1574:	
 10220                           
 10221                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 10222  01C3  1D25               	btfss	_Load^(0+256),2
 10223  01C4  29D6               	goto	l10145
 10224                           
 10225                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 10226  01C5  1125               	bcf	_Load^(0+256),2
 10227                           
 10228                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 10229  01C6  1225               	bcf	_Load^(0+256),4
 10230                           
 10231                           ;OverLoad_B1.c: 211: Load.Time = 0;
 10232  01C7  01A6               	clrf	(_Load^(0+256)+1)
 10233  01C8  01A7               	clrf	((_Load+1)^(0+256)+1)
 10234                           
 10235                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 10236  01C9  319F  2746  3180   	fcall	_setLoad_AH_AL_Restore
 10237                           
 10238                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 10239  01CC  0022               	movlb	2	; select bank2
 10240  01CD  01CF               	clrf	(_Load^(0+256)+42)
 10241                           
 10242                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 10243  01CE  01D2               	clrf	(_Load^(0+256)+45)
 10244                           
 10245                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 10246  01CF  01AA               	clrf	(_Load^(0+256)+5)
 10247  01D0  01AB               	clrf	((_Load+1)^(0+256)+5)
 10248                           
 10249                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 10250  01D1  01AC               	clrf	(_Load^(0+256)+7)
 10251  01D2  01AD               	clrf	((_Load+1)^(0+256)+7)
 10252                           
 10253                           ;OverLoad_B1.c: 224: Load.Run = 0;
 10254  01D3  11A5               	bcf	_Load^(0+256),3
 10255                           
 10256                           ;OverLoad_B1.c: 225: Load.Count = 0;
 10257  01D4  01CE               	clrf	(_Load^(0+256)+41)
 10258                           
 10259                           ;OverLoad_B1.c: 226: Load.OK = 0;
 10260  01D5  13A5               	bcf	_Load^(0+256),7
 10261  01D6                     l10145:	
 10262                           
 10263                           ;OverLoad_B1.c: 248: }
 10264                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 10265  01D6  1EA5               	btfss	_Load^(0+256),5
 10266  01D7  0008               	return
 10267                           
 10268                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 10269  01D8  3001               	movlw	1
 10270  01D9  07A8               	addwf	(_Load^(0+256)+3),f
 10271  01DA  3000               	movlw	0
 10272  01DB  3DA9               	addwfc	((_Load+1)^(0+256)+3),f
 10273                           
 10274                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
 10275  01DC  3003               	movlw	3
 10276  01DD  0229               	subwf	((_Load+1)^(0+256)+3),w
 10277  01DE  30E8               	movlw	232
 10278  01DF  1903               	skipnz
 10279  01E0  0228               	subwf	(_Load^(0+256)+3),w
 10280  01E1  1C03               	skipc
 10281  01E2  0008               	return
 10282                           
 10283                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 10284  01E3  01A8               	clrf	(_Load^(0+256)+3)
 10285  01E4  01A9               	clrf	((_Load+1)^(0+256)+3)
 10286                           
 10287                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 10288  01E5  12A5               	bcf	_Load^(0+256),5
 10289                           
 10290                           ;OverLoad_B1.c: 254: }
 10291                           ;OverLoad_B1.c: 255: }
 10292                           ;OverLoad_B1.c: 256: }
 10293                           ;OverLoad_B1.c: 257: } else {
 10294  01E6  0008               	return
 10295  01E7                     l1564:	
 10296                           
 10297                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 10298  01E7  0021               	movlb	1	; select bank1
 10299  01E8  1C20               	btfss	_myMain^(0+128),0
 10300  01E9  0008               	return
 10301                           
 10302                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 10303  01EA  0022               	movlb	2	; select bank2
 10304  01EB  1425               	bsf	_Load^(0+256),0
 10305  01EC  0008               	return
 10306  01ED                     __end_of_Load_Main:	
 10307                           
 10308                           	psect	text52
 10309  1D19                     __ptext52:	
 10310 ;; *************** function _getMain_Lights_Count *****************
 10311 ;; Defined at:
 10312 ;;		line 467 in file "../src/Main_B1.c"
 10313 ;; Parameters:    Size  Location     Type
 10314 ;;		None
 10315 ;; Auto vars:     Size  Location     Type
 10316 ;;  status1         1    1[BANK0 ] unsigned char 
 10317 ;;  count           1    0[BANK0 ] unsigned char 
 10318 ;; Return value:  Size  Location     Type
 10319 ;;                  1    wreg      unsigned char 
 10320 ;; Registers used:
 10321 ;;		wreg, status,2
 10322 ;; Tracked objects:
 10323 ;;		On entry : 0/0
 10324 ;;		On exit  : 0/0
 10325 ;;		Unchanged: 0/0
 10326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10331 ;;Total ram usage:        2 bytes
 10332 ;; Hardware stack levels used:    1
 10333 ;; Hardware stack levels required when called:    5
 10334 ;; This function calls:
 10335 ;;		Nothing
 10336 ;; This function is called by:
 10337 ;;		_Load_Main
 10338 ;; This function uses a non-reentrant model
 10339 ;;
 10340                           
 10341                           
 10342                           ;psect for function _getMain_Lights_Count
 10343  1D19                     _getMain_Lights_Count:	
 10344                           
 10345                           ;Main_B1.c: 468: char count = 0;
 10346                           
 10347                           ;incstack = 0
 10348                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 10349  1D19  0020               	movlb	0	; select bank0
 10350  1D1A  01A0               	clrf	getMain_Lights_Count@count
 10351                           
 10352                           ;Main_B1.c: 472: char status1 = 0;
 10353  1D1B  01A1               	clrf	getMain_Lights_Count@status1
 10354                           
 10355                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10356  1D1C  3000               	movlw	0
 10357  1D1D  0022               	movlb	2	; select bank2
 10358  1D1E  1954               	btfsc	(_DimmerLights1^(0+256)+1),2	;volatile
 10359  1D1F  3001               	movlw	1
 10360  1D20  0020               	movlb	0	; select bank0
 10361  1D21  00A1               	movwf	getMain_Lights_Count@status1
 10362                           
 10363                           ;Main_B1.c: 498: return count = status1;
 10364  1D22  0821               	movf	getMain_Lights_Count@status1,w
 10365  1D23  00A0               	movwf	getMain_Lights_Count@count
 10366  1D24  0008               	return
 10367  1D25                     __end_of_getMain_Lights_Count:	
 10368                           
 10369                           	psect	text53
 10370  1C5B                     __ptext53:	
 10371 ;; *************** function _getDimmer_Load_Status *****************
 10372 ;; Defined at:
 10373 ;;		line 888 in file "../src/Dimmer_B1.c"
 10374 ;; Parameters:    Size  Location     Type
 10375 ;;		None
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;  status          1    0[BANK0 ] unsigned char 
 10378 ;; Return value:  Size  Location     Type
 10379 ;;                  1    wreg      unsigned char 
 10380 ;; Registers used:
 10381 ;;		wreg, status,2
 10382 ;; Tracked objects:
 10383 ;;		On entry : 0/0
 10384 ;;		On exit  : 0/0
 10385 ;;		Unchanged: 0/0
 10386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;Total ram usage:        1 bytes
 10392 ;; Hardware stack levels used:    1
 10393 ;; Hardware stack levels required when called:    5
 10394 ;; This function calls:
 10395 ;;		Nothing
 10396 ;; This function is called by:
 10397 ;;		_Load_Main
 10398 ;; This function uses a non-reentrant model
 10399 ;;
 10400                           
 10401                           
 10402                           ;psect for function _getDimmer_Load_Status
 10403  1C5B                     _getDimmer_Load_Status:	
 10404                           
 10405                           ;Dimmer_B1.c: 889: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10406                           
 10407                           ;incstack = 0
 10408                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10409  1C5B  3000               	movlw	0
 10410  1C5C  0021               	movlb	1	; select bank1
 10411  1C5D  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10412  1C5E  3001               	movlw	1
 10413  1C5F  0020               	movlb	0	; select bank0
 10414  1C60  00A0               	movwf	getDimmer_Load_Status@status
 10415                           
 10416                           ;Dimmer_B1.c: 890: return status;
 10417  1C61  0820               	movf	getDimmer_Load_Status@status,w
 10418  1C62  0008               	return
 10419  1C63                     __end_of_getDimmer_Load_Status:	
 10420                           
 10421                           	psect	text54
 10422  1C53                     __ptext54:	
 10423 ;; *************** function _getDimmer_LoadGO *****************
 10424 ;; Defined at:
 10425 ;;		line 623 in file "../src/Dimmer_B1.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;		None
 10428 ;; Auto vars:     Size  Location     Type
 10429 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10430 ;; Return value:  Size  Location     Type
 10431 ;;                  1    wreg      unsigned char 
 10432 ;; Registers used:
 10433 ;;		wreg, status,2
 10434 ;; Tracked objects:
 10435 ;;		On entry : 0/0
 10436 ;;		On exit  : 0/0
 10437 ;;		Unchanged: 0/0
 10438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;Total ram usage:        1 bytes
 10444 ;; Hardware stack levels used:    1
 10445 ;; Hardware stack levels required when called:    5
 10446 ;; This function calls:
 10447 ;;		Nothing
 10448 ;; This function is called by:
 10449 ;;		_Load_Main
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           
 10454                           ;psect for function _getDimmer_LoadGO
 10455  1C53                     _getDimmer_LoadGO:	
 10456                           
 10457                           ;Dimmer_B1.c: 624: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10458                           
 10459                           ;incstack = 0
 10460                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10461  1C53  3000               	movlw	0
 10462  1C54  0021               	movlb	1	; select bank1
 10463  1C55  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10464  1C56  3001               	movlw	1
 10465  1C57  0020               	movlb	0	; select bank0
 10466  1C58  00A0               	movwf	getDimmer_LoadGO@loadgo
 10467                           
 10468                           ;Dimmer_B1.c: 625: return loadgo;
 10469  1C59  0820               	movf	getDimmer_LoadGO@loadgo,w
 10470  1C5A  0008               	return
 10471  1C5B                     __end_of_getDimmer_LoadGO:	
 10472                           
 10473                           	psect	text55
 10474  1178                     __ptext55:	
 10475 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10476 ;; Defined at:
 10477 ;;		line 832 in file "../src/Dimmer_B1.c"
 10478 ;; Parameters:    Size  Location     Type
 10479 ;;		None
 10480 ;; Auto vars:     Size  Location     Type
 10481 ;;  i               2    4[BANK0 ] int 
 10482 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10483 ;;  count           1    3[BANK0 ] unsigned char 
 10484 ;; Return value:  Size  Location     Type
 10485 ;;                  1    wreg      unsigned char 
 10486 ;; Registers used:
 10487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10488 ;; Tracked objects:
 10489 ;;		On entry : 0/0
 10490 ;;		On exit  : 0/0
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;Total ram usage:        5 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:    6
 10500 ;; This function calls:
 10501 ;;		_DimmerLightsPointSelect
 10502 ;; This function is called by:
 10503 ;;		_Load_Main
 10504 ;; This function uses a non-reentrant model
 10505 ;;
 10506                           
 10507                           
 10508                           ;psect for function _getAll_DimmerLights_AdjSw
 10509  1178                     _getAll_DimmerLights_AdjSw:	
 10510                           
 10511                           ;Dimmer_B1.c: 833: char count = 1;
 10512                           
 10513                           ;incstack = 0
 10514                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10515  1178  0020               	movlb	0	; select bank0
 10516  1179  01A3               	clrf	getAll_DimmerLights_AdjSw@count
 10517  117A  0AA3               	incf	getAll_DimmerLights_AdjSw@count,f
 10518                           
 10519                           ;Dimmer_B1.c: 834: char adjsw = 0;
 10520  117B  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10521                           
 10522                           ;Dimmer_B1.c: 836: for (int i = 0; i < count; i++) {
 10523  117C  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10524  117D  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10525  117E                     l9329:	
 10526  117E  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10527  117F  3A80               	xorlw	128
 10528  1180  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10529  1181  3080               	movlw	128
 10530  1182  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10531  1183  1D03               	skipz
 10532  1184  2987               	goto	u10265
 10533  1185  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10534  1186  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10535  1187                     u10265:	
 10536  1187  1803               	btfsc	3,0
 10537  1188  29A0               	goto	l9331
 10538                           
 10539                           ;Dimmer_B1.c: 837: DimmerLightsPointSelect(i + 1);
 10540  1189  0020               	movlb	0	; select bank0
 10541  118A  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10542  118B  3E01               	addlw	1
 10543  118C  319C  24B2  3191   	fcall	_DimmerLightsPointSelect
 10544                           
 10545                           ;Dimmer_B1.c: 838: if (adjsw == 0) {
 10546  118F  0020               	movlb	0	; select bank0
 10547  1190  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10548  1191  1D03               	skipz
 10549  1192  299B               	goto	l9327
 10550                           
 10551                           ;Dimmer_B1.c: 839: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10552  1193  0A6F               	incf	_DimmerLights,w
 10553  1194  0086               	movwf	6
 10554  1195  3001               	movlw	1	; select bank2/3
 10555  1196  0087               	movwf	7
 10556  1197  3000               	movlw	0
 10557  1198  1B01               	btfsc	1,6
 10558  1199  3001               	movlw	1
 10559  119A  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10560  119B                     l9327:	
 10561  119B  3001               	movlw	1
 10562  119C  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10563  119D  3000               	movlw	0
 10564  119E  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10565  119F  297E               	goto	l9329
 10566  11A0                     l9331:	
 10567                           
 10568                           ;Dimmer_B1.c: 840: }
 10569                           ;Dimmer_B1.c: 841: }
 10570                           ;Dimmer_B1.c: 842: return adjsw;
 10571  11A0  0020               	movlb	0	; select bank0
 10572  11A1  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10573  11A2  0008               	return
 10574  11A3                     __end_of_getAll_DimmerLights_AdjSw:	
 10575                           
 10576                           	psect	text56
 10577  0800                     __ptext56:	
 10578 ;; *************** function ___wmul *****************
 10579 ;; Defined at:
 10580 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10583 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;  product         2    4[BANK0 ] unsigned int 
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  2    0[BANK0 ] unsigned int 
 10588 ;; Registers used:
 10589 ;;		wreg, status,2, status,0
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10595 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10599 ;;Total ram usage:        6 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    5
 10602 ;; This function calls:
 10603 ;;		Nothing
 10604 ;; This function is called by:
 10605 ;;		_Load_Main
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           
 10610                           ;psect for function ___wmul
 10611  0800                     ___wmul:	
 10612                           
 10613                           ;incstack = 0
 10614                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10615  0800  0020               	movlb	0	; select bank0
 10616  0801  01A4               	clrf	___wmul@product
 10617  0802  01A5               	clrf	___wmul@product+1
 10618  0803                     l9721:	
 10619  0803  1C20               	btfss	___wmul@multiplier,0
 10620  0804  2809               	goto	l2592
 10621  0805  0822               	movf	___wmul@multiplicand,w
 10622  0806  07A4               	addwf	___wmul@product,f
 10623  0807  0823               	movf	___wmul@multiplicand+1,w
 10624  0808  3DA5               	addwfc	___wmul@product+1,f
 10625  0809                     l2592:	
 10626  0809  3001               	movlw	1
 10627  080A                     u10925:	
 10628  080A  35A2               	lslf	___wmul@multiplicand,f
 10629  080B  0DA3               	rlf	___wmul@multiplicand+1,f
 10630  080C  0B89               	decfsz	9,f
 10631  080D  280A               	goto	u10925
 10632  080E  3001               	movlw	1
 10633  080F                     u10935:	
 10634  080F  36A1               	lsrf	___wmul@multiplier+1,f
 10635  0810  0CA0               	rrf	___wmul@multiplier,f
 10636  0811  0B89               	decfsz	9,f
 10637  0812  280F               	goto	u10935
 10638  0813  0821               	movf	___wmul@multiplier+1,w
 10639  0814  0420               	iorwf	___wmul@multiplier,w
 10640  0815  1D03               	skipz
 10641  0816  2803               	goto	l9721
 10642  0817  0825               	movf	___wmul@product+1,w
 10643  0818  01A1               	clrf	?___wmul+1
 10644  0819  07A1               	addwf	?___wmul+1,f
 10645  081A  0824               	movf	___wmul@product,w
 10646  081B  01A0               	clrf	?___wmul
 10647  081C  07A0               	addwf	?___wmul,f
 10648  081D  0008               	return
 10649  081E                     __end_of___wmul:	
 10650                           
 10651                           	psect	text57
 10652  136F                     __ptext57:	
 10653 ;; *************** function ___lwdiv *****************
 10654 ;; Defined at:
 10655 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;  divisor         2    0[BANK0 ] unsigned int 
 10658 ;;  dividend        2    2[BANK0 ] unsigned int 
 10659 ;; Auto vars:     Size  Location     Type
 10660 ;;  quotient        2    6[BANK0 ] unsigned int 
 10661 ;;  counter         1    5[BANK0 ] unsigned char 
 10662 ;; Return value:  Size  Location     Type
 10663 ;;                  2    0[BANK0 ] unsigned int 
 10664 ;; Registers used:
 10665 ;;		wreg, status,2, status,0
 10666 ;; Tracked objects:
 10667 ;;		On entry : 0/0
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10671 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;Total ram usage:        8 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    5
 10678 ;; This function calls:
 10679 ;;		Nothing
 10680 ;; This function is called by:
 10681 ;;		_Load_Main
 10682 ;; This function uses a non-reentrant model
 10683 ;;
 10684                           
 10685                           
 10686                           ;psect for function ___lwdiv
 10687  136F                     ___lwdiv:	
 10688                           
 10689                           ;incstack = 0
 10690                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10691  136F  0020               	movlb	0	; select bank0
 10692  1370  01A6               	clrf	___lwdiv@quotient
 10693  1371  01A7               	clrf	___lwdiv@quotient+1
 10694  1372  0821               	movf	___lwdiv@divisor+1,w
 10695  1373  0420               	iorwf	___lwdiv@divisor,w
 10696  1374  1903               	skipnz
 10697  1375  2B9F               	goto	l9753
 10698  1376  01A5               	clrf	___lwdiv@counter
 10699  1377  0AA5               	incf	___lwdiv@counter,f
 10700  1378                     l9741:	
 10701  1378  1BA1               	btfsc	___lwdiv@divisor+1,7
 10702  1379  2B84               	goto	l9743
 10703  137A  3001               	movlw	1
 10704  137B                     u10965:	
 10705  137B  35A0               	lslf	___lwdiv@divisor,f
 10706  137C  0DA1               	rlf	___lwdiv@divisor+1,f
 10707  137D  0B89               	decfsz	9,f
 10708  137E  2B7B               	goto	u10965
 10709  137F  3001               	movlw	1
 10710  1380  00A4               	movwf	??___lwdiv
 10711  1381  0824               	movf	??___lwdiv,w
 10712  1382  07A5               	addwf	___lwdiv@counter,f
 10713  1383  2B78               	goto	l9741
 10714  1384                     l9743:	
 10715  1384  3001               	movlw	1
 10716  1385                     u10985:	
 10717  1385  35A6               	lslf	___lwdiv@quotient,f
 10718  1386  0DA7               	rlf	___lwdiv@quotient+1,f
 10719  1387  0B89               	decfsz	9,f
 10720  1388  2B85               	goto	u10985
 10721  1389  0821               	movf	___lwdiv@divisor+1,w
 10722  138A  0223               	subwf	___lwdiv@dividend+1,w
 10723  138B  1D03               	skipz
 10724  138C  2B8F               	goto	u10995
 10725  138D  0820               	movf	___lwdiv@divisor,w
 10726  138E  0222               	subwf	___lwdiv@dividend,w
 10727  138F                     u10995:	
 10728  138F  1C03               	skipc
 10729  1390  2B96               	goto	l9749
 10730  1391  0820               	movf	___lwdiv@divisor,w
 10731  1392  02A2               	subwf	___lwdiv@dividend,f
 10732  1393  0821               	movf	___lwdiv@divisor+1,w
 10733  1394  3BA3               	subwfb	___lwdiv@dividend+1,f
 10734  1395  1426               	bsf	___lwdiv@quotient,0
 10735  1396                     l9749:	
 10736  1396  3001               	movlw	1
 10737  1397                     u11005:	
 10738  1397  36A1               	lsrf	___lwdiv@divisor+1,f
 10739  1398  0CA0               	rrf	___lwdiv@divisor,f
 10740  1399  0B89               	decfsz	9,f
 10741  139A  2B97               	goto	u11005
 10742  139B  3001               	movlw	1
 10743  139C  02A5               	subwf	___lwdiv@counter,f
 10744  139D  1D03               	btfss	3,2
 10745  139E  2B84               	goto	l9743
 10746  139F                     l9753:	
 10747  139F  0827               	movf	___lwdiv@quotient+1,w
 10748  13A0  01A1               	clrf	?___lwdiv+1
 10749  13A1  07A1               	addwf	?___lwdiv+1,f
 10750  13A2  0826               	movf	___lwdiv@quotient,w
 10751  13A3  01A0               	clrf	?___lwdiv
 10752  13A4  07A0               	addwf	?___lwdiv,f
 10753  13A5  0008               	return
 10754  13A6                     __end_of___lwdiv:	
 10755                           
 10756                           	psect	text58
 10757  1BFA                     __ptext58:	
 10758 ;; *************** function _Load_Initialization *****************
 10759 ;; Defined at:
 10760 ;;		line 9 in file "../src/OverLoad_B1.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;		None
 10765 ;; Return value:  Size  Location     Type
 10766 ;;		None               void
 10767 ;; Registers used:
 10768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;Total ram usage:        0 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    6
 10781 ;; This function calls:
 10782 ;;		_setLoad_AH_AL_Restore
 10783 ;; This function is called by:
 10784 ;;		_main
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           
 10789                           ;psect for function _Load_Initialization
 10790  1BFA                     _Load_Initialization:	
 10791                           
 10792                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10793                           
 10794                           ;incstack = 0
 10795                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10796  1BFA  319F  2746         	fcall	_setLoad_AH_AL_Restore
 10797  1BFC  0008               	return
 10798  1BFD                     __end_of_Load_Initialization:	
 10799                           
 10800                           	psect	text59
 10801  1F46                     __ptext59:	
 10802 ;; *************** function _setLoad_AH_AL_Restore *****************
 10803 ;; Defined at:
 10804 ;;		line 285 in file "../src/OverLoad_B1.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;		None
 10807 ;; Auto vars:     Size  Location     Type
 10808 ;;  i               1    1[BANK0 ] unsigned char 
 10809 ;; Return value:  Size  Location     Type
 10810 ;;		None               void
 10811 ;; Registers used:
 10812 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;Total ram usage:        2 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; Hardware stack levels required when called:    5
 10825 ;; This function calls:
 10826 ;;		Nothing
 10827 ;; This function is called by:
 10828 ;;		_Load_Initialization
 10829 ;;		_Load_Main
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833                           
 10834                           ;psect for function _setLoad_AH_AL_Restore
 10835  1F46                     _setLoad_AH_AL_Restore:	
 10836                           
 10837                           ;OverLoad_B1.c: 286: char i;
 10838                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 10839                           
 10840                           ;incstack = 0
 10841                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10842  1F46  0020               	movlb	0	; select bank0
 10843  1F47  01A1               	clrf	setLoad_AH_AL_Restore@i
 10844  1F48                     L4:	
 10845  1F48  3005               	movlw	5
 10846  1F49  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10847  1F4A  1803               	btfsc	3,0
 10848  1F4B  0008               	return
 10849                           
 10850                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 10851  1F4C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10852  1F4D  3E30               	addlw	(_Load+11)& (0+255)
 10853  1F4E  0086               	movwf	6
 10854  1F4F  3001               	movlw	1	; select bank2/3
 10855  1F50  0087               	movwf	7
 10856  1F51  3000               	movlw	0
 10857  1F52  3FC0               	movwi [0]fsr1
 10858  1F53  3FC1               	movwi [1]fsr1
 10859                           
 10860                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 10861  1F54  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10862  1F55  3E3A               	addlw	(_Load+21)& (0+255)
 10863  1F56  0086               	movwf	6
 10864  1F57  3001               	movlw	1	; select bank2/3
 10865  1F58  0087               	movwf	7
 10866  1F59  30FF               	movlw	255
 10867  1F5A  3FC0               	movwi [0]fsr1
 10868  1F5B  30FF               	movlw	255
 10869  1F5C  3FC1               	movwi [1]fsr1
 10870  1F5D  3001               	movlw	1
 10871  1F5E  00A0               	movwf	??_setLoad_AH_AL_Restore
 10872  1F5F  0820               	movf	??_setLoad_AH_AL_Restore,w
 10873  1F60  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10874  1F61  2F48               	goto	L4
 10875  1F62                     __end_of_setLoad_AH_AL_Restore:	
 10876                           
 10877                           	psect	text60
 10878  1C25                     __ptext60:	
 10879 ;; *************** function _LED_Main *****************
 10880 ;; Defined at:
 10881 ;;		line 47 in file "../src/LED_B1.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;		None
 10884 ;; Auto vars:     Size  Location     Type
 10885 ;;		None
 10886 ;; Return value:  Size  Location     Type
 10887 ;;		None               void
 10888 ;; Registers used:
 10889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10890 ;; Tracked objects:
 10891 ;;		On entry : 0/0
 10892 ;;		On exit  : 0/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;Total ram usage:        0 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; Hardware stack levels required when called:    7
 10902 ;; This function calls:
 10903 ;;		_setLED_Main
 10904 ;; This function is called by:
 10905 ;;		_main
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           
 10910                           ;psect for function _LED_Main
 10911  1C25                     _LED_Main:	
 10912                           
 10913                           ;LED_B1.c: 62: setLED_Main(99);
 10914                           
 10915                           ;incstack = 0
 10916                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10917  1C25  3063               	movlw	99
 10918  1C26  3193  2303         	fcall	_setLED_Main
 10919  1C28  0008               	return
 10920  1C29                     __end_of_LED_Main:	
 10921                           
 10922                           	psect	text61
 10923  1303                     __ptext61:	
 10924 ;; *************** function _setLED_Main *****************
 10925 ;; Defined at:
 10926 ;;		line 221 in file "../src/LED_B1.c"
 10927 ;; Parameters:    Size  Location     Type
 10928 ;;  led             1    wreg     unsigned char 
 10929 ;; Auto vars:     Size  Location     Type
 10930 ;;  led             1    4[BANK0 ] unsigned char 
 10931 ;; Return value:  Size  Location     Type
 10932 ;;		None               void
 10933 ;; Registers used:
 10934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10935 ;; Tracked objects:
 10936 ;;		On entry : 0/0
 10937 ;;		On exit  : 0/0
 10938 ;;		Unchanged: 0/0
 10939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;Total ram usage:        3 bytes
 10945 ;; Hardware stack levels used:    1
 10946 ;; Hardware stack levels required when called:    6
 10947 ;; This function calls:
 10948 ;;		_LedPointSelect
 10949 ;; This function is called by:
 10950 ;;		_LED_Main
 10951 ;; This function uses a non-reentrant model
 10952 ;;
 10953                           
 10954                           
 10955                           ;psect for function _setLED_Main
 10956  1303                     _setLED_Main:	
 10957                           
 10958                           ;incstack = 0
 10959                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10960                           ;setLED_Main@led stored from wreg
 10961  1303  0020               	movlb	0	; select bank0
 10962  1304  00A4               	movwf	setLED_Main@led
 10963                           
 10964                           ;LED_B1.c: 222: LedPointSelect(led);
 10965  1305  0824               	movf	setLED_Main@led,w
 10966  1306  319C  24F5  3193   	fcall	_LedPointSelect
 10967                           
 10968                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10969  1309  0021               	movlb	1	; select bank1
 10970  130A  084E               	movf	_LED^(0+128),w
 10971  130B  0086               	movwf	6
 10972  130C  3001               	movlw	1	; select bank2/3
 10973  130D  0087               	movwf	7
 10974  130E  1C81               	btfss	1,1
 10975  130F  0008               	return
 10976                           
 10977                           ;LED_B1.c: 224: LED->Time++;
 10978  1310  0A4E               	incf	_LED^(0+128),w
 10979  1311  0086               	movwf	6
 10980  1312  3001               	movlw	1	; select bank2/3
 10981  1313  0087               	movwf	7
 10982  1314  3001               	movlw	1
 10983  1315  0781               	addwf	1,f
 10984  1316  3141               	addfsr 1,1
 10985  1317  1803               	skipnc
 10986  1318  0A81               	incf	1,f
 10987                           
 10988                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10989  1319  0A4E               	incf	_LED^(0+128),w
 10990  131A  0086               	movwf	6
 10991  131B  3001               	movlw	1	; select bank2/3
 10992  131C  0087               	movwf	7
 10993  131D  3F40               	moviw [0]fsr1
 10994  131E  0020               	movlb	0	; select bank0
 10995  131F  00A2               	movwf	??_setLED_Main
 10996  1320  3F41               	moviw [1]fsr1
 10997  1321  00A3               	movwf	??_setLED_Main+1
 10998  1322  3000               	movlw	0
 10999  1323  0223               	subwf	??_setLED_Main+1,w
 11000  1324  3032               	movlw	50
 11001  1325  1903               	skipnz
 11002  1326  0222               	subwf	??_setLED_Main,w
 11003  1327  1C03               	skipc
 11004  1328  0008               	return
 11005                           
 11006                           ;LED_B1.c: 226: LED->Time = 0;
 11007  1329  0021               	movlb	1	; select bank1
 11008  132A  0A4E               	incf	_LED^(0+128),w
 11009  132B  0086               	movwf	6
 11010  132C  3001               	movlw	1	; select bank2/3
 11011  132D  0087               	movwf	7
 11012  132E  3000               	movlw	0
 11013  132F  3FC0               	movwi [0]fsr1
 11014  1330  3FC1               	movwi [1]fsr1
 11015                           
 11016                           ;LED_B1.c: 243: if (led == 99) {
 11017  1331  0020               	movlb	0	; select bank0
 11018  1332  0824               	movf	setLED_Main@led,w
 11019  1333  3A63               	xorlw	99
 11020  1334  1D03               	skipz
 11021  1335  0008               	return
 11022                           
 11023                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11024  1336  3020               	movlw	32
 11025  1337  068D               	xorwf	13,f
 11026  1338  0008               	return
 11027  1339                     __end_of_setLED_Main:	
 11028                           
 11029                           	psect	text62
 11030  1C21                     __ptext62:	
 11031 ;; *************** function _LED_Initialization *****************
 11032 ;; Defined at:
 11033 ;;		line 31 in file "../src/LED_B1.c"
 11034 ;; Parameters:    Size  Location     Type
 11035 ;;		None
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;		None
 11038 ;; Return value:  Size  Location     Type
 11039 ;;		None               void
 11040 ;; Registers used:
 11041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;Total ram usage:        0 bytes
 11052 ;; Hardware stack levels used:    1
 11053 ;; Hardware stack levels required when called:    8
 11054 ;; This function calls:
 11055 ;;		_setLED_Initialization
 11056 ;; This function is called by:
 11057 ;;		_main
 11058 ;; This function uses a non-reentrant model
 11059 ;;
 11060                           
 11061                           
 11062                           ;psect for function _LED_Initialization
 11063  1C21                     _LED_Initialization:	
 11064                           
 11065                           ;LED_B1.c: 42: setLED_Initialization(99);
 11066                           
 11067                           ;incstack = 0
 11068                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11069  1C21  3063               	movlw	99
 11070  1C22  319D  25ED         	fcall	_setLED_Initialization
 11071  1C24  0008               	return
 11072  1C25                     __end_of_LED_Initialization:	
 11073                           
 11074                           	psect	text63
 11075  1DED                     __ptext63:	
 11076 ;; *************** function _setLED_Initialization *****************
 11077 ;; Defined at:
 11078 ;;		line 69 in file "../src/LED_B1.c"
 11079 ;; Parameters:    Size  Location     Type
 11080 ;;  led             1    wreg     unsigned char 
 11081 ;; Auto vars:     Size  Location     Type
 11082 ;;  led             1    4[BANK0 ] unsigned char 
 11083 ;; Return value:  Size  Location     Type
 11084 ;;		None               void
 11085 ;; Registers used:
 11086 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11087 ;; Tracked objects:
 11088 ;;		On entry : 0/0
 11089 ;;		On exit  : 0/0
 11090 ;;		Unchanged: 0/0
 11091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;Total ram usage:        1 bytes
 11097 ;; Hardware stack levels used:    1
 11098 ;; Hardware stack levels required when called:    7
 11099 ;; This function calls:
 11100 ;;		_LedPointSelect
 11101 ;;		_setLED
 11102 ;; This function is called by:
 11103 ;;		_LED_Initialization
 11104 ;; This function uses a non-reentrant model
 11105 ;;
 11106                           
 11107                           
 11108                           ;psect for function _setLED_Initialization
 11109  1DED                     _setLED_Initialization:	
 11110                           
 11111                           ;incstack = 0
 11112                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11113                           ;setLED_Initialization@led stored from wreg
 11114  1DED  0020               	movlb	0	; select bank0
 11115  1DEE  00A4               	movwf	setLED_Initialization@led
 11116                           
 11117                           ;LED_B1.c: 70: LedPointSelect(led);
 11118  1DEF  0824               	movf	setLED_Initialization@led,w
 11119  1DF0  319C  24F5  319D   	fcall	_LedPointSelect
 11120                           
 11121                           ;LED_B1.c: 71: LED->Enable = 1;
 11122  1DF3  0021               	movlb	1	; select bank1
 11123  1DF4  084E               	movf	_LED^(0+128),w
 11124  1DF5  0086               	movwf	6
 11125  1DF6  3001               	movlw	1	; select bank2/3
 11126  1DF7  0087               	movwf	7
 11127  1DF8  1401               	bsf	1,0
 11128                           
 11129                           ;LED_B1.c: 72: setLED(led, 0);
 11130  1DF9  0020               	movlb	0	; select bank0
 11131  1DFA  01A2               	clrf	setLED@command
 11132  1DFB  0824               	movf	setLED_Initialization@led,w
 11133  1DFC  3193  23A6         	fcall	_setLED
 11134  1DFE  0008               	return
 11135  1DFF                     __end_of_setLED_Initialization:	
 11136                           
 11137                           	psect	text64
 11138  12CD                     __ptext64:	
 11139 ;; *************** function _Flash_Memory_Main *****************
 11140 ;; Defined at:
 11141 ;;		line 965 in file "../src/MCU_B1.c"
 11142 ;; Parameters:    Size  Location     Type
 11143 ;;		None
 11144 ;; Auto vars:     Size  Location     Type
 11145 ;;		None
 11146 ;; Return value:  Size  Location     Type
 11147 ;;		None               void
 11148 ;; Registers used:
 11149 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11150 ;; Tracked objects:
 11151 ;;		On entry : 0/0
 11152 ;;		On exit  : 0/0
 11153 ;;		Unchanged: 0/0
 11154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11157 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;Total ram usage:        1 bytes
 11160 ;; Hardware stack levels used:    1
 11161 ;; Hardware stack levels required when called:    8
 11162 ;; This function calls:
 11163 ;;		_Flash_Memory_Modify
 11164 ;;		_getMain_LightsStatus
 11165 ;; This function is called by:
 11166 ;;		_main
 11167 ;; This function uses a non-reentrant model
 11168 ;;
 11169                           
 11170                           
 11171                           ;psect for function _Flash_Memory_Main
 11172  12CD                     _Flash_Memory_Main:	
 11173                           
 11174                           ;MCU_B1.c: 966: if (Memory.Modify == 1) {
 11175                           
 11176                           ;incstack = 0
 11177                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11178  12CD  0023               	movlb	3	; select bank3
 11179  12CE  1C62               	btfss	(_Memory^(0+384)+36),0
 11180  12CF  0008               	return
 11181                           
 11182                           ;MCU_B1.c: 967: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11183  12D0  319C  2492  3192   	fcall	_getMain_LightsStatus
 11184  12D3  3A00               	xorlw	0
 11185  12D4  3000               	movlw	0
 11186  12D5  1903               	skipnz
 11187  12D6  3001               	movlw	1
 11188  12D7  0020               	movlb	0	; select bank0
 11189  12D8  00A6               	movwf	??_Flash_Memory_Main
 11190  12D9  0DA6               	rlf	??_Flash_Memory_Main,f
 11191  12DA  0023               	movlb	3	; select bank3
 11192  12DB  0862               	movf	(_Memory^(0+384)+36),w
 11193  12DC  0020               	movlb	0	; select bank0
 11194  12DD  0626               	xorwf	??_Flash_Memory_Main,w
 11195  12DE  39FD               	andlw	-3
 11196  12DF  0626               	xorwf	??_Flash_Memory_Main,w
 11197  12E0  0023               	movlb	3	; select bank3
 11198  12E1  00E2               	movwf	(_Memory^(0+384)+36)
 11199                           
 11200                           ;MCU_B1.c: 968: if (Memory.GO == 1) {
 11201  12E2  1CE2               	btfss	(_Memory^(0+384)+36),1
 11202  12E3  2AFD               	goto	l1195
 11203                           
 11204                           ;MCU_B1.c: 969: Memory.Runtime = 1;
 11205  12E4  15E2               	bsf	(_Memory^(0+384)+36),3
 11206                           
 11207                           ;MCU_B1.c: 970: Memory.Time++;
 11208  12E5  3001               	movlw	1
 11209  12E6  07E0               	addwf	(_Memory^(0+384)+34),f
 11210  12E7  3000               	movlw	0
 11211  12E8  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11212                           
 11213                           ;MCU_B1.c: 971: if (Memory.Time == 25) {
 11214  12E9  3022               	movlw	34
 11215  12EA  3EBE               	addlw	_Memory& (0+255)
 11216  12EB  0086               	movwf	6
 11217  12EC  3001               	movlw	1	; select bank3/4
 11218  12ED  0087               	movwf	7
 11219  12EE  3F40               	moviw [0]fsr1
 11220  12EF  3A19               	xorlw	25
 11221  12F0  1D03               	skipz
 11222  12F1  2AF4               	goto	u11195
 11223  12F2  3F41               	moviw [1]fsr1
 11224  12F3  3A00               	xorlw	0
 11225  12F4                     u11195:	
 11226  12F4  1D03               	skipz
 11227  12F5  0008               	return
 11228                           
 11229                           ;MCU_B1.c: 972: Memory.Time = 0;
 11230  12F6  01E0               	clrf	(_Memory^(0+384)+34)
 11231  12F7  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11232                           
 11233                           ;MCU_B1.c: 973: Memory.Modify = 0;
 11234  12F8  1062               	bcf	(_Memory^(0+384)+36),0
 11235                           
 11236                           ;MCU_B1.c: 974: Memory.GO = 0;
 11237  12F9  10E2               	bcf	(_Memory^(0+384)+36),1
 11238                           
 11239                           ;MCU_B1.c: 975: Flash_Memory_Modify();
 11240  12FA  3195  251A         	fcall	_Flash_Memory_Modify
 11241                           
 11242                           ;MCU_B1.c: 976: }
 11243                           ;MCU_B1.c: 977: } else {
 11244  12FC  0008               	return
 11245  12FD                     l1195:	
 11246                           
 11247                           ;MCU_B1.c: 978: if (Memory.Runtime == 1) {
 11248  12FD  1DE2               	btfss	(_Memory^(0+384)+36),3
 11249  12FE  0008               	return
 11250                           
 11251                           ;MCU_B1.c: 979: Memory.Runtime = 0;
 11252  12FF  11E2               	bcf	(_Memory^(0+384)+36),3
 11253                           
 11254                           ;MCU_B1.c: 980: Memory.Time = 0;
 11255  1300  01E0               	clrf	(_Memory^(0+384)+34)
 11256  1301  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11257  1302  0008               	return
 11258  1303                     __end_of_Flash_Memory_Main:	
 11259                           
 11260                           	psect	text65
 11261  151A                     __ptext65:	
 11262 ;; *************** function _Flash_Memory_Modify *****************
 11263 ;; Defined at:
 11264 ;;		line 1038 in file "../src/MCU_B1.c"
 11265 ;; Parameters:    Size  Location     Type
 11266 ;;		None
 11267 ;; Auto vars:     Size  Location     Type
 11268 ;;  i               1    5[BANK0 ] unsigned char 
 11269 ;; Return value:  Size  Location     Type
 11270 ;;		None               void
 11271 ;; Registers used:
 11272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11273 ;; Tracked objects:
 11274 ;;		On entry : 0/0
 11275 ;;		On exit  : 0/0
 11276 ;;		Unchanged: 0/0
 11277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;Total ram usage:        2 bytes
 11283 ;; Hardware stack levels used:    1
 11284 ;; Hardware stack levels required when called:    7
 11285 ;; This function calls:
 11286 ;;		_Flash_Memory_Erasing
 11287 ;;		_Flash_Memory_Read
 11288 ;;		_Flash_Memory_Write
 11289 ;;		_setMemory_Data
 11290 ;; This function is called by:
 11291 ;;		_Flash_Memory_Main
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           
 11296                           ;psect for function _Flash_Memory_Modify
 11297  151A                     _Flash_Memory_Modify:	
 11298                           
 11299                           ;MCU_B1.c: 1039: char i = 0;
 11300                           
 11301                           ;incstack = 0
 11302                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11303  151A  0020               	movlb	0	; select bank0
 11304  151B  01A5               	clrf	Flash_Memory_Modify@i
 11305                           
 11306                           ;MCU_B1.c: 1040: for (i = 0; i < 32; i++) {
 11307  151C  01A5               	clrf	Flash_Memory_Modify@i
 11308  151D  3020               	movlw	32
 11309  151E  0225               	subwf	Flash_Memory_Modify@i,w
 11310  151F  1803               	btfsc	3,0
 11311  1520  2D36               	goto	l9437
 11312  1521                     l9431:	
 11313                           
 11314                           ;MCU_B1.c: 1041: Memory.Data[i] = Flash_Memory_Read(i);
 11315  1521  0825               	movf	Flash_Memory_Modify@i,w
 11316  1522  319F  2710  3195   	fcall	_Flash_Memory_Read
 11317  1525  0020               	movlb	0	; select bank0
 11318  1526  00A4               	movwf	??_Flash_Memory_Modify
 11319  1527  0825               	movf	Flash_Memory_Modify@i,w
 11320  1528  3EBE               	addlw	_Memory& (0+255)
 11321  1529  0086               	movwf	6
 11322  152A  3001               	movlw	1	; select bank3/4
 11323  152B  0087               	movwf	7
 11324  152C  0824               	movf	??_Flash_Memory_Modify,w
 11325  152D  0081               	movwf	1
 11326  152E  3001               	movlw	1
 11327  152F  00A4               	movwf	??_Flash_Memory_Modify
 11328  1530  0824               	movf	??_Flash_Memory_Modify,w
 11329  1531  07A5               	addwf	Flash_Memory_Modify@i,f
 11330  1532  3020               	movlw	32
 11331  1533  0225               	subwf	Flash_Memory_Modify@i,w
 11332  1534  1C03               	skipc
 11333  1535  2D21               	goto	l9431
 11334  1536                     l9437:	
 11335                           
 11336                           ;MCU_B1.c: 1042: }
 11337                           ;MCU_B1.c: 1043: setMemory_Data(0, product->Data[12]);
 11338  1536  0879               	movf	_product,w
 11339  1537  0086               	movwf	6
 11340  1538  3002               	movlw	2	; select bank4/5
 11341  1539  0087               	movwf	7
 11342  153A  3002               	movlw	2	; select bank4/5
 11343  153B  3F4C               	moviw [12]fsr1
 11344  153C  00A0               	movwf	setMemory_Data@data
 11345  153D  3000               	movlw	0
 11346  153E  319D  2501  3195   	fcall	_setMemory_Data
 11347                           
 11348                           ;MCU_B1.c: 1044: setMemory_Data(1, product->Data[13]);
 11349  1541  0879               	movf	_product,w
 11350  1542  0086               	movwf	6
 11351  1543  3002               	movlw	2	; select bank4/5
 11352  1544  0087               	movwf	7
 11353  1545  3002               	movlw	2	; select bank4/5
 11354  1546  3F4D               	moviw [13]fsr1
 11355  1547  0020               	movlb	0	; select bank0
 11356  1548  00A0               	movwf	setMemory_Data@data
 11357  1549  3001               	movlw	1
 11358  154A  319D  2501  3195   	fcall	_setMemory_Data
 11359                           
 11360                           ;MCU_B1.c: 1045: setMemory_Data(2, product->Data[14]);
 11361  154D  0879               	movf	_product,w
 11362  154E  0086               	movwf	6
 11363  154F  3002               	movlw	2	; select bank4/5
 11364  1550  0087               	movwf	7
 11365  1551  3002               	movlw	2	; select bank4/5
 11366  1552  3F4E               	moviw [14]fsr1
 11367  1553  0020               	movlb	0	; select bank0
 11368  1554  00A0               	movwf	setMemory_Data@data
 11369  1555  3002               	movlw	2
 11370  1556  319D  2501  3195   	fcall	_setMemory_Data
 11371                           
 11372                           ;MCU_B1.c: 1051: if (Memory.LoopSave == 1) {
 11373  1559  0023               	movlb	3	; select bank3
 11374  155A  1D62               	btfss	(_Memory^(0+384)+36),2
 11375  155B  2D60               	goto	l1218
 11376                           
 11377                           ;MCU_B1.c: 1052: Memory.LoopSave = 0;
 11378  155C  1162               	bcf	(_Memory^(0+384)+36),2
 11379                           
 11380                           ;MCU_B1.c: 1053: myMain.FirstOpen = 0;
 11381  155D  0021               	movlb	1	; select bank1
 11382  155E  11A0               	bcf	_myMain^(0+128),3
 11383                           
 11384                           ;MCU_B1.c: 1054: myMain.First = 0;
 11385  155F  12A0               	bcf	_myMain^(0+128),5
 11386  1560                     l1218:	
 11387                           
 11388                           ;MCU_B1.c: 1056: }
 11389                           ;MCU_B1.c: 1057: GIE = 0;
 11390  1560  138B               	bcf	11,7	;volatile
 11391                           
 11392                           ;MCU_B1.c: 1058: Flash_Memory_Erasing();
 11393  1561  319D  250D  3195   	fcall	_Flash_Memory_Erasing
 11394                           
 11395                           ;MCU_B1.c: 1059: Flash_Memory_Write();
 11396  1564  3191  21A3         	fcall	_Flash_Memory_Write
 11397                           
 11398                           ;MCU_B1.c: 1060: GIE = 1;
 11399  1566  178B               	bsf	11,7	;volatile
 11400  1567  0008               	return
 11401  1568                     __end_of_Flash_Memory_Modify:	
 11402                           
 11403                           	psect	text66
 11404  1D0D                     __ptext66:	
 11405 ;; *************** function _Flash_Memory_Erasing *****************
 11406 ;; Defined at:
 11407 ;;		line 1027 in file "../src/MCU_B1.c"
 11408 ;; Parameters:    Size  Location     Type
 11409 ;;		None
 11410 ;; Auto vars:     Size  Location     Type
 11411 ;;		None
 11412 ;; Return value:  Size  Location     Type
 11413 ;;		None               void
 11414 ;; Registers used:
 11415 ;;		wreg, status,2, status,0, pclath, cstack
 11416 ;; Tracked objects:
 11417 ;;		On entry : 0/0
 11418 ;;		On exit  : 0/0
 11419 ;;		Unchanged: 0/0
 11420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;Total ram usage:        0 bytes
 11426 ;; Hardware stack levels used:    1
 11427 ;; Hardware stack levels required when called:    6
 11428 ;; This function calls:
 11429 ;;		_Flash_Memory_Unlock
 11430 ;; This function is called by:
 11431 ;;		_Flash_Memory_Modify
 11432 ;; This function uses a non-reentrant model
 11433 ;;
 11434                           
 11435                           
 11436                           ;psect for function _Flash_Memory_Erasing
 11437  1D0D                     _Flash_Memory_Erasing:	
 11438                           
 11439                           ;MCU_B1.c: 1028: CFGS = 0;
 11440                           
 11441                           ;incstack = 0
 11442                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11443  1D0D  0023               	movlb	3	; select bank3
 11444  1D0E  1315               	bcf	21,6	;volatile
 11445                           
 11446                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 11447  1D0F  3030               	movlw	48
 11448  1D10  0092               	movwf	18	;volatile
 11449                           
 11450                           ;MCU_B1.c: 1030: PMADRL = 0x00;
 11451  1D11  0191               	clrf	17	;volatile
 11452                           
 11453                           ;MCU_B1.c: 1031: FREE = 1;
 11454  1D12  1615               	bsf	21,4	;volatile
 11455                           
 11456                           ;MCU_B1.c: 1032: WREN = 1;
 11457  1D13  1515               	bsf	21,2	;volatile
 11458                           
 11459                           ;MCU_B1.c: 1033: Flash_Memory_Unlock();
 11460  1D14  319C  246C         	fcall	_Flash_Memory_Unlock
 11461                           
 11462                           ;MCU_B1.c: 1034: WREN = 0;
 11463  1D16  0023               	movlb	3	; select bank3
 11464  1D17  1115               	bcf	21,2	;volatile
 11465  1D18  0008               	return
 11466  1D19                     __end_of_Flash_Memory_Erasing:	
 11467                           
 11468                           	psect	text67
 11469  0550                     __ptext67:	
 11470 ;; *************** function _Flash_Memory_Initialization *****************
 11471 ;; Defined at:
 11472 ;;		line 924 in file "../src/MCU_B1.c"
 11473 ;; Parameters:    Size  Location     Type
 11474 ;;		None
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;  i               1   67[BANK0 ] unsigned char 
 11477 ;; Return value:  Size  Location     Type
 11478 ;;		None               void
 11479 ;; Registers used:
 11480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;Total ram usage:        2 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    8
 11493 ;; This function calls:
 11494 ;;		_Flash_Memory_Read
 11495 ;;		_Flash_Memory_Write
 11496 ;;		_setMemory_Data
 11497 ;;		_setPercentValue
 11498 ;; This function is called by:
 11499 ;;		_main
 11500 ;; This function uses a non-reentrant model
 11501 ;;
 11502                           
 11503                           
 11504                           ;psect for function _Flash_Memory_Initialization
 11505  0550                     _Flash_Memory_Initialization:	
 11506                           
 11507                           ;MCU_B1.c: 925: char i = 0;
 11508                           
 11509                           ;incstack = 0
 11510                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11511  0550  0020               	movlb	0	; select bank0
 11512  0551  01E3               	clrf	Flash_Memory_Initialization@i
 11513                           
 11514                           ;MCU_B1.c: 926: if (Flash_Memory_Read(31) == 0xaa) {
 11515  0552  301F               	movlw	31
 11516  0553  319F  2710  3185   	fcall	_Flash_Memory_Read
 11517  0556  3AAA               	xorlw	170
 11518  0557  1D03               	skipz
 11519  0558  2DC2               	goto	l9839
 11520                           
 11521                           ;MCU_B1.c: 927: product->Data[12] = Flash_Memory_Read(0);
 11522  0559  3000               	movlw	0
 11523  055A  319F  2710  3185   	fcall	_Flash_Memory_Read
 11524  055D  0020               	movlb	0	; select bank0
 11525  055E  00E2               	movwf	??_Flash_Memory_Initialization
 11526  055F  0879               	movf	_product,w
 11527  0560  3E0C               	addlw	12
 11528  0561  0086               	movwf	6
 11529  0562  3002               	movlw	2	; select bank4/5
 11530  0563  0087               	movwf	7
 11531  0564  0862               	movf	??_Flash_Memory_Initialization,w
 11532  0565  0081               	movwf	1
 11533                           
 11534                           ;MCU_B1.c: 928: product->Data[13] = Flash_Memory_Read(1);
 11535  0566  3001               	movlw	1
 11536  0567  319F  2710  3185   	fcall	_Flash_Memory_Read
 11537  056A  0020               	movlb	0	; select bank0
 11538  056B  00E2               	movwf	??_Flash_Memory_Initialization
 11539  056C  0879               	movf	_product,w
 11540  056D  3E0D               	addlw	13
 11541  056E  0086               	movwf	6
 11542  056F  3002               	movlw	2	; select bank4/5
 11543  0570  0087               	movwf	7
 11544  0571  0862               	movf	??_Flash_Memory_Initialization,w
 11545  0572  0081               	movwf	1
 11546                           
 11547                           ;MCU_B1.c: 929: product->Data[14] = Flash_Memory_Read(2);
 11548  0573  3002               	movlw	2
 11549  0574  319F  2710  3185   	fcall	_Flash_Memory_Read
 11550  0577  0020               	movlb	0	; select bank0
 11551  0578  00E2               	movwf	??_Flash_Memory_Initialization
 11552  0579  0879               	movf	_product,w
 11553  057A  3E0E               	addlw	14
 11554  057B  0086               	movwf	6
 11555  057C  3002               	movlw	2	; select bank4/5
 11556  057D  0087               	movwf	7
 11557  057E  0862               	movf	??_Flash_Memory_Initialization,w
 11558  057F  0081               	movwf	1
 11559                           
 11560                           ;MCU_B1.c: 935: i = setPercentValue(((char)(70*0.8)));
 11561  0580  3038               	movlw	56
 11562  0581  318A  22B1  3185   	fcall	_setPercentValue
 11563  0584  0020               	movlb	0	; select bank0
 11564  0585  00E2               	movwf	??_Flash_Memory_Initialization
 11565  0586  0862               	movf	??_Flash_Memory_Initialization,w
 11566  0587  00E3               	movwf	Flash_Memory_Initialization@i
 11567                           
 11568                           ;MCU_B1.c: 936: product->Data[21] = i;
 11569  0588  0863               	movf	Flash_Memory_Initialization@i,w
 11570  0589  00E2               	movwf	??_Flash_Memory_Initialization
 11571  058A  0879               	movf	_product,w
 11572  058B  3E15               	addlw	21
 11573  058C  0086               	movwf	6
 11574  058D  3002               	movlw	2	; select bank4/5
 11575  058E  0087               	movwf	7
 11576  058F  0862               	movf	??_Flash_Memory_Initialization,w
 11577  0590  0081               	movwf	1
 11578                           
 11579                           ;MCU_B1.c: 937: product->Data[22] = i;
 11580  0591  0863               	movf	Flash_Memory_Initialization@i,w
 11581  0592  00E2               	movwf	??_Flash_Memory_Initialization
 11582  0593  0879               	movf	_product,w
 11583  0594  3E16               	addlw	22
 11584  0595  0086               	movwf	6
 11585  0596  3002               	movlw	2	; select bank4/5
 11586  0597  0087               	movwf	7
 11587  0598  0862               	movf	??_Flash_Memory_Initialization,w
 11588  0599  0081               	movwf	1
 11589                           
 11590                           ;MCU_B1.c: 938: product->Data[23] = i;
 11591  059A  0863               	movf	Flash_Memory_Initialization@i,w
 11592  059B  00E2               	movwf	??_Flash_Memory_Initialization
 11593  059C  0879               	movf	_product,w
 11594  059D  3E17               	addlw	23
 11595  059E  0086               	movwf	6
 11596  059F  3002               	movlw	2	; select bank4/5
 11597  05A0  0087               	movwf	7
 11598  05A1  0862               	movf	??_Flash_Memory_Initialization,w
 11599  05A2  0081               	movwf	1
 11600                           
 11601                           ;MCU_B1.c: 940: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11602  05A3  0879               	movf	_product,w
 11603  05A4  3E0C               	addlw	12
 11604  05A5  0086               	movwf	6
 11605  05A6  3002               	movlw	2	; select bank4/5
 11606  05A7  0087               	movwf	7
 11607  05A8  0801               	movf	1,w
 11608  05A9  3AFF               	xorlw	255
 11609  05AA  1D03               	skipz
 11610  05AB  0008               	return
 11611  05AC  0879               	movf	_product,w
 11612  05AD  3E0D               	addlw	13
 11613  05AE  0086               	movwf	6
 11614  05AF  3002               	movlw	2	; select bank4/5
 11615  05B0  0087               	movwf	7
 11616  05B1  0801               	movf	1,w
 11617  05B2  3AFF               	xorlw	255
 11618  05B3  1D03               	skipz
 11619  05B4  0008               	return
 11620  05B5  0879               	movf	_product,w
 11621  05B6  3E0E               	addlw	14
 11622  05B7  0086               	movwf	6
 11623  05B8  3002               	movlw	2	; select bank4/5
 11624  05B9  0087               	movwf	7
 11625  05BA  0801               	movf	1,w
 11626  05BB  3AFF               	xorlw	255
 11627  05BC  1D03               	skipz
 11628  05BD  0008               	return
 11629                           
 11630                           ;MCU_B1.c: 941: myMain.FirstOpen = 1;
 11631  05BE  0021               	movlb	1	; select bank1
 11632  05BF  15A0               	bsf	_myMain^(0+128),3
 11633                           
 11634                           ;MCU_B1.c: 942: myMain.First = 1;
 11635  05C0  16A0               	bsf	_myMain^(0+128),5
 11636                           
 11637                           ;MCU_B1.c: 943: }
 11638                           ;MCU_B1.c: 944: } else {
 11639  05C1  0008               	return
 11640  05C2                     l9839:	
 11641                           
 11642                           ;MCU_B1.c: 945: i = setPercentValue(((char)(70*0.8)));
 11643  05C2  3038               	movlw	56
 11644  05C3  318A  22B1  3185   	fcall	_setPercentValue
 11645  05C6  0020               	movlb	0	; select bank0
 11646  05C7  00E2               	movwf	??_Flash_Memory_Initialization
 11647  05C8  0862               	movf	??_Flash_Memory_Initialization,w
 11648  05C9  00E3               	movwf	Flash_Memory_Initialization@i
 11649                           
 11650                           ;MCU_B1.c: 946: setMemory_Data(0, 0xff);
 11651  05CA  30FF               	movlw	255
 11652  05CB  00E2               	movwf	??_Flash_Memory_Initialization
 11653  05CC  0862               	movf	??_Flash_Memory_Initialization,w
 11654  05CD  00A0               	movwf	setMemory_Data@data
 11655  05CE  3000               	movlw	0
 11656  05CF  319D  2501  3185   	fcall	_setMemory_Data
 11657                           
 11658                           ;MCU_B1.c: 947: setMemory_Data(1, 0xff);
 11659  05D2  30FF               	movlw	255
 11660  05D3  0020               	movlb	0	; select bank0
 11661  05D4  00E2               	movwf	??_Flash_Memory_Initialization
 11662  05D5  0862               	movf	??_Flash_Memory_Initialization,w
 11663  05D6  00A0               	movwf	setMemory_Data@data
 11664  05D7  3001               	movlw	1
 11665  05D8  319D  2501  3185   	fcall	_setMemory_Data
 11666                           
 11667                           ;MCU_B1.c: 948: setMemory_Data(2, 0xff);
 11668  05DB  30FF               	movlw	255
 11669  05DC  0020               	movlb	0	; select bank0
 11670  05DD  00E2               	movwf	??_Flash_Memory_Initialization
 11671  05DE  0862               	movf	??_Flash_Memory_Initialization,w
 11672  05DF  00A0               	movwf	setMemory_Data@data
 11673  05E0  3002               	movlw	2
 11674  05E1  319D  2501  3185   	fcall	_setMemory_Data
 11675                           
 11676                           ;MCU_B1.c: 949: setMemory_Data(3, 0xff);
 11677  05E4  30FF               	movlw	255
 11678  05E5  0020               	movlb	0	; select bank0
 11679  05E6  00E2               	movwf	??_Flash_Memory_Initialization
 11680  05E7  0862               	movf	??_Flash_Memory_Initialization,w
 11681  05E8  00A0               	movwf	setMemory_Data@data
 11682  05E9  3003               	movlw	3
 11683  05EA  319D  2501  3185   	fcall	_setMemory_Data
 11684                           
 11685                           ;MCU_B1.c: 950: setMemory_Data(4, 0xff);
 11686  05ED  30FF               	movlw	255
 11687  05EE  0020               	movlb	0	; select bank0
 11688  05EF  00E2               	movwf	??_Flash_Memory_Initialization
 11689  05F0  0862               	movf	??_Flash_Memory_Initialization,w
 11690  05F1  00A0               	movwf	setMemory_Data@data
 11691  05F2  3004               	movlw	4
 11692  05F3  319D  2501  3185   	fcall	_setMemory_Data
 11693                           
 11694                           ;MCU_B1.c: 951: setMemory_Data(5, 0xff);
 11695  05F6  30FF               	movlw	255
 11696  05F7  0020               	movlb	0	; select bank0
 11697  05F8  00E2               	movwf	??_Flash_Memory_Initialization
 11698  05F9  0862               	movf	??_Flash_Memory_Initialization,w
 11699  05FA  00A0               	movwf	setMemory_Data@data
 11700  05FB  3005               	movlw	5
 11701  05FC  319D  2501  3185   	fcall	_setMemory_Data
 11702                           
 11703                           ;MCU_B1.c: 952: setMemory_Data(31, 0xaa);
 11704  05FF  30AA               	movlw	170
 11705  0600  0020               	movlb	0	; select bank0
 11706  0601  00E2               	movwf	??_Flash_Memory_Initialization
 11707  0602  0862               	movf	??_Flash_Memory_Initialization,w
 11708  0603  00A0               	movwf	setMemory_Data@data
 11709  0604  301F               	movlw	31
 11710  0605  319D  2501  3185   	fcall	_setMemory_Data
 11711                           
 11712                           ;MCU_B1.c: 953: product->Data[21] = i;
 11713  0608  0020               	movlb	0	; select bank0
 11714  0609  0863               	movf	Flash_Memory_Initialization@i,w
 11715  060A  00E2               	movwf	??_Flash_Memory_Initialization
 11716  060B  0879               	movf	_product,w
 11717  060C  3E15               	addlw	21
 11718  060D  0086               	movwf	6
 11719  060E  3002               	movlw	2	; select bank4/5
 11720  060F  0087               	movwf	7
 11721  0610  0862               	movf	??_Flash_Memory_Initialization,w
 11722  0611  0081               	movwf	1
 11723                           
 11724                           ;MCU_B1.c: 954: product->Data[22] = i;
 11725  0612  0863               	movf	Flash_Memory_Initialization@i,w
 11726  0613  00E2               	movwf	??_Flash_Memory_Initialization
 11727  0614  0879               	movf	_product,w
 11728  0615  3E16               	addlw	22
 11729  0616  0086               	movwf	6
 11730  0617  3002               	movlw	2	; select bank4/5
 11731  0618  0087               	movwf	7
 11732  0619  0862               	movf	??_Flash_Memory_Initialization,w
 11733  061A  0081               	movwf	1
 11734                           
 11735                           ;MCU_B1.c: 955: product->Data[23] = i;
 11736  061B  0863               	movf	Flash_Memory_Initialization@i,w
 11737  061C  00E2               	movwf	??_Flash_Memory_Initialization
 11738  061D  0879               	movf	_product,w
 11739  061E  3E17               	addlw	23
 11740  061F  0086               	movwf	6
 11741  0620  3002               	movlw	2	; select bank4/5
 11742  0621  0087               	movwf	7
 11743  0622  0862               	movf	??_Flash_Memory_Initialization,w
 11744  0623  0081               	movwf	1
 11745                           
 11746                           ;MCU_B1.c: 956: GIE = 0;
 11747  0624  138B               	bcf	11,7	;volatile
 11748                           
 11749                           ;MCU_B1.c: 957: Flash_Memory_Write();
 11750  0625  3191  21A3         	fcall	_Flash_Memory_Write
 11751                           
 11752                           ;MCU_B1.c: 958: GIE = 1;
 11753  0627  178B               	bsf	11,7	;volatile
 11754                           
 11755                           ;MCU_B1.c: 959: myMain.FirstOpen = 1;
 11756  0628  0021               	movlb	1	; select bank1
 11757  0629  15A0               	bsf	_myMain^(0+128),3
 11758                           
 11759                           ;MCU_B1.c: 960: myMain.First = 1;
 11760  062A  16A0               	bsf	_myMain^(0+128),5
 11761  062B  0008               	return
 11762  062C                     __end_of_Flash_Memory_Initialization:	
 11763                           
 11764                           	psect	text68
 11765  1D01                     __ptext68:	
 11766 ;; *************** function _setMemory_Data *****************
 11767 ;; Defined at:
 11768 ;;		line 1075 in file "../src/MCU_B1.c"
 11769 ;; Parameters:    Size  Location     Type
 11770 ;;  address         1    wreg     unsigned char 
 11771 ;;  data            1    0[BANK0 ] unsigned char 
 11772 ;; Auto vars:     Size  Location     Type
 11773 ;;  address         1    2[BANK0 ] unsigned char 
 11774 ;; Return value:  Size  Location     Type
 11775 ;;		None               void
 11776 ;; Registers used:
 11777 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11778 ;; Tracked objects:
 11779 ;;		On entry : 0/0
 11780 ;;		On exit  : 0/0
 11781 ;;		Unchanged: 0/0
 11782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11783 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11784 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11787 ;;Total ram usage:        3 bytes
 11788 ;; Hardware stack levels used:    1
 11789 ;; Hardware stack levels required when called:    5
 11790 ;; This function calls:
 11791 ;;		Nothing
 11792 ;; This function is called by:
 11793 ;;		_Flash_Memory_Initialization
 11794 ;;		_Flash_Memory_Modify
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           
 11799                           ;psect for function _setMemory_Data
 11800  1D01                     _setMemory_Data:	
 11801                           
 11802                           ;incstack = 0
 11803                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11804                           ;setMemory_Data@address stored from wreg
 11805  1D01  0020               	movlb	0	; select bank0
 11806  1D02  00A2               	movwf	setMemory_Data@address
 11807                           
 11808                           ;MCU_B1.c: 1076: Memory.Data[address] = data;
 11809  1D03  0820               	movf	setMemory_Data@data,w
 11810  1D04  00A1               	movwf	??_setMemory_Data
 11811  1D05  0822               	movf	setMemory_Data@address,w
 11812  1D06  3EBE               	addlw	_Memory& (0+255)
 11813  1D07  0086               	movwf	6
 11814  1D08  3001               	movlw	1	; select bank3/4
 11815  1D09  0087               	movwf	7
 11816  1D0A  0821               	movf	??_setMemory_Data,w
 11817  1D0B  0081               	movwf	1
 11818  1D0C  0008               	return
 11819  1D0D                     __end_of_setMemory_Data:	
 11820                           
 11821                           	psect	text69
 11822  11A3                     __ptext69:	
 11823 ;; *************** function _Flash_Memory_Write *****************
 11824 ;; Defined at:
 11825 ;;		line 1008 in file "../src/MCU_B1.c"
 11826 ;; Parameters:    Size  Location     Type
 11827 ;;		None
 11828 ;; Auto vars:     Size  Location     Type
 11829 ;;  i               1    1[BANK0 ] unsigned char 
 11830 ;; Return value:  Size  Location     Type
 11831 ;;		None               void
 11832 ;; Registers used:
 11833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11834 ;; Tracked objects:
 11835 ;;		On entry : 0/0
 11836 ;;		On exit  : 0/0
 11837 ;;		Unchanged: 0/0
 11838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;Total ram usage:        2 bytes
 11844 ;; Hardware stack levels used:    1
 11845 ;; Hardware stack levels required when called:    6
 11846 ;; This function calls:
 11847 ;;		_Flash_Memory_Unlock
 11848 ;; This function is called by:
 11849 ;;		_Flash_Memory_Initialization
 11850 ;;		_Flash_Memory_Modify
 11851 ;; This function uses a non-reentrant model
 11852 ;;
 11853                           
 11854                           
 11855                           ;psect for function _Flash_Memory_Write
 11856  11A3                     _Flash_Memory_Write:	
 11857                           
 11858                           ;MCU_B1.c: 1009: char i = 0;
 11859                           
 11860                           ;incstack = 0
 11861                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11862  11A3  0020               	movlb	0	; select bank0
 11863  11A4  01A1               	clrf	Flash_Memory_Write@i
 11864                           
 11865                           ;MCU_B1.c: 1010: CFGS = 0;
 11866  11A5  0023               	movlb	3	; select bank3
 11867  11A6  1315               	bcf	21,6	;volatile
 11868                           
 11869                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 11870  11A7  3030               	movlw	48
 11871  11A8  0092               	movwf	18	;volatile
 11872                           
 11873                           ;MCU_B1.c: 1012: PMDATH = 0;
 11874  11A9  0194               	clrf	20	;volatile
 11875                           
 11876                           ;MCU_B1.c: 1013: FREE = 0;
 11877  11AA  1215               	bcf	21,4	;volatile
 11878                           
 11879                           ;MCU_B1.c: 1014: LWLO = 1;
 11880  11AB  1695               	bsf	21,5	;volatile
 11881                           
 11882                           ;MCU_B1.c: 1015: WREN = 1;
 11883  11AC  1515               	bsf	21,2	;volatile
 11884                           
 11885                           ;MCU_B1.c: 1016: for (i = 0; i < 32; i++) {
 11886  11AD  0020               	movlb	0	; select bank0
 11887  11AE  01A1               	clrf	Flash_Memory_Write@i
 11888  11AF  3020               	movlw	32
 11889  11B0  0221               	subwf	Flash_Memory_Write@i,w
 11890  11B1  1803               	btfsc	3,0
 11891  11B2  29CB               	goto	l1209
 11892  11B3                     l9035:	
 11893                           
 11894                           ;MCU_B1.c: 1017: PMADRL = i;
 11895  11B3  0821               	movf	Flash_Memory_Write@i,w
 11896  11B4  0023               	movlb	3	; select bank3
 11897  11B5  0091               	movwf	17	;volatile
 11898                           
 11899                           ;MCU_B1.c: 1018: PMDATL = Memory.Data[i];
 11900  11B6  0020               	movlb	0	; select bank0
 11901  11B7  0821               	movf	Flash_Memory_Write@i,w
 11902  11B8  3EBE               	addlw	_Memory& (0+255)
 11903  11B9  0086               	movwf	6
 11904  11BA  3001               	movlw	1	; select bank3/4
 11905  11BB  0087               	movwf	7
 11906  11BC  0801               	movf	1,w
 11907  11BD  0023               	movlb	3	; select bank3
 11908  11BE  0093               	movwf	19	;volatile
 11909                           
 11910                           ;MCU_B1.c: 1019: Flash_Memory_Unlock();
 11911  11BF  319C  246C  3191   	fcall	_Flash_Memory_Unlock
 11912  11C2  3001               	movlw	1
 11913  11C3  0020               	movlb	0	; select bank0
 11914  11C4  00A0               	movwf	??_Flash_Memory_Write
 11915  11C5  0820               	movf	??_Flash_Memory_Write,w
 11916  11C6  07A1               	addwf	Flash_Memory_Write@i,f
 11917  11C7  3020               	movlw	32
 11918  11C8  0221               	subwf	Flash_Memory_Write@i,w
 11919  11C9  1C03               	skipc
 11920  11CA  29B3               	goto	l9035
 11921  11CB                     l1209:	
 11922                           
 11923                           ;MCU_B1.c: 1020: }
 11924                           ;MCU_B1.c: 1021: LWLO = 0;
 11925  11CB  0023               	movlb	3	; select bank3
 11926  11CC  1295               	bcf	21,5	;volatile
 11927                           
 11928                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 11929  11CD  319C  246C         	fcall	_Flash_Memory_Unlock
 11930                           
 11931                           ;MCU_B1.c: 1023: WREN = 0;
 11932  11CF  0023               	movlb	3	; select bank3
 11933  11D0  1115               	bcf	21,2	;volatile
 11934  11D1  0008               	return
 11935  11D2                     __end_of_Flash_Memory_Write:	
 11936                           
 11937                           	psect	text70
 11938  1C6C                     __ptext70:	
 11939 ;; *************** function _Flash_Memory_Unlock *****************
 11940 ;; Defined at:
 11941 ;;		line 987 in file "../src/MCU_B1.c"
 11942 ;; Parameters:    Size  Location     Type
 11943 ;;		None
 11944 ;; Auto vars:     Size  Location     Type
 11945 ;;		None
 11946 ;; Return value:  Size  Location     Type
 11947 ;;		None               void
 11948 ;; Registers used:
 11949 ;;		wreg
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;Total ram usage:        0 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; Hardware stack levels required when called:    5
 11962 ;; This function calls:
 11963 ;;		Nothing
 11964 ;; This function is called by:
 11965 ;;		_Flash_Memory_Write
 11966 ;;		_Flash_Memory_Erasing
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           
 11971                           ;psect for function _Flash_Memory_Unlock
 11972  1C6C                     _Flash_Memory_Unlock:	
 11973                           
 11974                           ;MCU_B1.c: 988: PMCON2 = 0x55;
 11975                           
 11976                           ;incstack = 0
 11977                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11978  1C6C  3055               	movlw	85
 11979  1C6D  0023               	movlb	3	; select bank3
 11980  1C6E  0096               	movwf	22	;volatile
 11981                           
 11982                           ;MCU_B1.c: 989: PMCON2 = 0xaa;
 11983  1C6F  30AA               	movlw	170
 11984  1C70  0096               	movwf	22	;volatile
 11985                           
 11986                           ;MCU_B1.c: 990: WR = 1;
 11987  1C71  1495               	bsf	21,1	;volatile
 11988                           
 11989                           ;MCU_B1.c: 991: __nop();
 11990  1C72  0000               	nop
 11991                           
 11992                           ;MCU_B1.c: 992: __nop();
 11993  1C73  0000               	nop
 11994  1C74  0008               	return
 11995  1C75                     __end_of_Flash_Memory_Unlock:	
 11996                           
 11997                           	psect	text71
 11998  1F10                     __ptext71:	
 11999 ;; *************** function _Flash_Memory_Read *****************
 12000 ;; Defined at:
 12001 ;;		line 996 in file "../src/MCU_B1.c"
 12002 ;; Parameters:    Size  Location     Type
 12003 ;;  address         1    wreg     unsigned char 
 12004 ;; Auto vars:     Size  Location     Type
 12005 ;;  address         1    2[BANK0 ] unsigned char 
 12006 ;;  ret             1    3[BANK0 ] unsigned char 
 12007 ;;  i               1    1[BANK0 ] unsigned char 
 12008 ;; Return value:  Size  Location     Type
 12009 ;;                  1    wreg      unsigned char 
 12010 ;; Registers used:
 12011 ;;		wreg, status,2
 12012 ;; Tracked objects:
 12013 ;;		On entry : 0/0
 12014 ;;		On exit  : 0/0
 12015 ;;		Unchanged: 0/0
 12016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;Total ram usage:        4 bytes
 12022 ;; Hardware stack levels used:    1
 12023 ;; Hardware stack levels required when called:    5
 12024 ;; This function calls:
 12025 ;;		Nothing
 12026 ;; This function is called by:
 12027 ;;		_Flash_Memory_Initialization
 12028 ;;		_Flash_Memory_Modify
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           
 12033                           ;psect for function _Flash_Memory_Read
 12034  1F10                     _Flash_Memory_Read:	
 12035                           
 12036                           ;incstack = 0
 12037                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12038                           ;Flash_Memory_Read@address stored from wreg
 12039  1F10  0020               	movlb	0	; select bank0
 12040  1F11  00A2               	movwf	Flash_Memory_Read@address
 12041                           
 12042                           ;MCU_B1.c: 997: char i = 0, ret = 0;
 12043  1F12  01A1               	clrf	Flash_Memory_Read@i
 12044  1F13  01A3               	clrf	Flash_Memory_Read@ret
 12045                           
 12046                           ;MCU_B1.c: 998: PMADRH = 0x30;
 12047  1F14  3030               	movlw	48
 12048  1F15  0023               	movlb	3	; select bank3
 12049  1F16  0092               	movwf	18	;volatile
 12050                           
 12051                           ;MCU_B1.c: 999: PMADRL = address;
 12052  1F17  0020               	movlb	0	; select bank0
 12053  1F18  0822               	movf	Flash_Memory_Read@address,w
 12054  1F19  0023               	movlb	3	; select bank3
 12055  1F1A  0091               	movwf	17	;volatile
 12056                           
 12057                           ;MCU_B1.c: 1000: CFGS = 0;
 12058  1F1B  1315               	bcf	21,6	;volatile
 12059                           
 12060                           ;MCU_B1.c: 1001: RD = 1;
 12061  1F1C  1415               	bsf	21,0	;volatile
 12062                           
 12063                           ;MCU_B1.c: 1002: i = PMDATH;
 12064  1F1D  0814               	movf	20,w	;volatile
 12065  1F1E  0020               	movlb	0	; select bank0
 12066  1F1F  00A0               	movwf	??_Flash_Memory_Read
 12067  1F20  0820               	movf	??_Flash_Memory_Read,w
 12068  1F21  00A1               	movwf	Flash_Memory_Read@i
 12069                           
 12070                           ;MCU_B1.c: 1003: ret = PMDATL;
 12071  1F22  0023               	movlb	3	; select bank3
 12072  1F23  0813               	movf	19,w	;volatile
 12073  1F24  0020               	movlb	0	; select bank0
 12074  1F25  00A0               	movwf	??_Flash_Memory_Read
 12075  1F26  0820               	movf	??_Flash_Memory_Read,w
 12076  1F27  00A3               	movwf	Flash_Memory_Read@ret
 12077                           
 12078                           ;MCU_B1.c: 1004: return ret;
 12079  1F28  0823               	movf	Flash_Memory_Read@ret,w
 12080  1F29  0008               	return
 12081  1F2A                     __end_of_Flash_Memory_Read:	
 12082                           
 12083                           	psect	text72
 12084  062C                     __ptext72:	
 12085 ;; *************** function _Exception_Main *****************
 12086 ;; Defined at:
 12087 ;;		line 523 in file "../src/Main_B1.c"
 12088 ;; Parameters:    Size  Location     Type
 12089 ;;		None
 12090 ;; Auto vars:     Size  Location     Type
 12091 ;;  i               2    4[BANK1 ] int 
 12092 ;;  i               2    2[BANK1 ] int 
 12093 ;;  lights          1    6[BANK1 ] unsigned char 
 12094 ;;  error           1    1[BANK1 ] unsigned char 
 12095 ;;  count           1    0[BANK1 ] unsigned char 
 12096 ;; Return value:  Size  Location     Type
 12097 ;;		None               void
 12098 ;; Registers used:
 12099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12100 ;; Tracked objects:
 12101 ;;		On entry : 0/0
 12102 ;;		On exit  : 0/0
 12103 ;;		Unchanged: 0/0
 12104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12106 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12108 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12109 ;;Total ram usage:        8 bytes
 12110 ;; Hardware stack levels used:    1
 12111 ;; Hardware stack levels required when called:    9
 12112 ;; This function calls:
 12113 ;;		_getDimmerLights_Line
 12114 ;;		_getDimmerLights_Status
 12115 ;;		_getMain_All_Error_Status
 12116 ;;		_getMain_LightsStatus
 12117 ;;		_setBuz
 12118 ;;		_setDimmerLights_SwOff
 12119 ;;		_setLED
 12120 ;; This function is called by:
 12121 ;;		_main
 12122 ;; This function uses a non-reentrant model
 12123 ;;
 12124                           
 12125                           
 12126                           ;psect for function _Exception_Main
 12127  062C                     _Exception_Main:	
 12128                           
 12129                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 12130                           
 12131                           ;incstack = 0
 12132                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12133  062C  3000               	movlw	0
 12134  062D  3192  2232  3186   	fcall	_getMain_All_Error_Status
 12135  0630  0020               	movlb	0	; select bank0
 12136  0631  00EB               	movwf	??_Exception_Main
 12137  0632  086B               	movf	??_Exception_Main,w
 12138  0633  0021               	movlb	1	; select bank1
 12139  0634  00EA               	movwf	Exception_Main@error^(0+128)
 12140                           
 12141                           ;Main_B1.c: 525: char lights = 0, count = 1;
 12142  0635  01EF               	clrf	Exception_Main@lights^(0+128)
 12143  0636  01E9               	clrf	Exception_Main@count^(0+128)
 12144  0637  0AE9               	incf	Exception_Main@count^(0+128),f
 12145                           
 12146                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 12147  0638  1DAB               	btfss	(_myMain^(0+128)+11),3
 12148  0639  2E47               	goto	l10173
 12149                           
 12150                           ;Main_B1.c: 527: if (error == 0) {
 12151  063A  08EA               	movf	Exception_Main@error^(0+128),f
 12152  063B  1D03               	skipz
 12153  063C  0008               	return
 12154                           
 12155                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 12156  063D  11AB               	bcf	(_myMain^(0+128)+11),3
 12157                           
 12158                           ;Main_B1.c: 533: setLED(99, 10);
 12159  063E  300A               	movlw	10
 12160  063F  0020               	movlb	0	; select bank0
 12161  0640  00EB               	movwf	??_Exception_Main
 12162  0641  086B               	movf	??_Exception_Main,w
 12163  0642  00A2               	movwf	setLED@command
 12164  0643  3063               	movlw	99
 12165  0644  3193  23A6         	fcall	_setLED
 12166                           
 12167                           ;Main_B1.c: 535: }
 12168                           ;Main_B1.c: 536: } else {
 12169  0646  0008               	return
 12170  0647                     l10173:	
 12171                           
 12172                           ;Main_B1.c: 537: if (error != 0) {
 12173  0647  0021               	movlb	1	; select bank1
 12174  0648  086A               	movf	Exception_Main@error^(0+128),w
 12175  0649  1903               	btfsc	3,2
 12176  064A  0008               	return
 12177                           
 12178                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 12179  064B  15AB               	bsf	(_myMain^(0+128)+11),3
 12180                           
 12181                           ;Main_B1.c: 541: setLED(99, 11);
 12182  064C  300B               	movlw	11
 12183  064D  0020               	movlb	0	; select bank0
 12184  064E  00EB               	movwf	??_Exception_Main
 12185  064F  086B               	movf	??_Exception_Main,w
 12186  0650  00A2               	movwf	setLED@command
 12187  0651  3063               	movlw	99
 12188  0652  3193  23A6  3186   	fcall	_setLED
 12189                           
 12190                           ;Main_B1.c: 543: switch (error) {
 12191  0655  2EFD               	goto	l10221
 12192  0656                     l10179:	
 12193                           ;Main_B1.c: 544: case 2:
 12194                           
 12195                           
 12196                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12197  0656  319C  2492  3186   	fcall	_getMain_LightsStatus
 12198  0659  3A01               	xorlw	1
 12199  065A  1D03               	skipz
 12200  065B  2E65               	goto	l10183
 12201                           
 12202                           ;Main_B1.c: 546: setBuz(10, 300);
 12203  065C  302C               	movlw	44
 12204  065D  0020               	movlb	0	; select bank0
 12205  065E  00A9               	movwf	setBuz@time
 12206  065F  3001               	movlw	1
 12207  0660  00AA               	movwf	setBuz@time+1
 12208  0661  300A               	movlw	10
 12209  0662  3197  27A7  3186   	fcall	_setBuz
 12210  0665                     l10183:	
 12211                           
 12212                           ;Main_B1.c: 547: }
 12213                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12214  0665  0021               	movlb	1	; select bank1
 12215  0666  01EB               	clrf	Exception_Main@i^(0+128)
 12216  0667  01EC               	clrf	(Exception_Main@i+1)^(0+128)
 12217  0668                     l10193:	
 12218  0668  086C               	movf	(Exception_Main@i+1)^(0+128),w
 12219  0669  3A80               	xorlw	128
 12220  066A  0020               	movlb	0	; select bank0
 12221  066B  00EB               	movwf	??_Exception_Main
 12222  066C  3080               	movlw	128
 12223  066D  026B               	subwf	??_Exception_Main,w
 12224  066E  1D03               	skipz
 12225  066F  2E73               	goto	u11775
 12226  0670  0021               	movlb	1	; select bank1
 12227  0671  0869               	movf	Exception_Main@count^(0+128),w
 12228  0672  026B               	subwf	Exception_Main@i^(0+128),w
 12229  0673                     u11775:	
 12230  0673  1803               	btfsc	3,0
 12231  0674  2E97               	goto	u11770
 12232                           
 12233                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12234  0675  0021               	movlb	1	; select bank1
 12235  0676  086B               	movf	Exception_Main@i^(0+128),w
 12236  0677  3E01               	addlw	1
 12237  0678  319D  2597  3186   	fcall	_getDimmerLights_Status
 12238  067B  3A01               	xorlw	1
 12239  067C  1D03               	skipz
 12240  067D  2E91               	goto	l10191
 12241                           
 12242                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12243  067E  0020               	movlb	0	; select bank0
 12244  067F  086F               	movf	_DimmerLights,w
 12245  0680  3E0B               	addlw	11
 12246  0681  0086               	movwf	6
 12247  0682  3001               	movlw	1	; select bank2/3
 12248  0683  0087               	movwf	7
 12249  0684  1481               	bsf	1,1
 12250                           
 12251                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12252  0685  086F               	movf	_DimmerLights,w
 12253  0686  3E02               	addlw	2
 12254  0687  0086               	movwf	6
 12255  0688  3001               	movlw	1	; select bank2/3
 12256  0689  0087               	movwf	7
 12257  068A  1081               	bcf	1,1
 12258                           
 12259                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12260  068B  0021               	movlb	1	; select bank1
 12261  068C  086B               	movf	Exception_Main@i^(0+128),w
 12262  068D  3E01               	addlw	1
 12263  068E  3195  2568  3186   	fcall	_setDimmerLights_SwOff
 12264  0691                     l10191:	
 12265  0691  3001               	movlw	1
 12266  0692  0021               	movlb	1	; select bank1
 12267  0693  07EB               	addwf	Exception_Main@i^(0+128),f
 12268  0694  3000               	movlw	0
 12269  0695  3DEC               	addwfc	(Exception_Main@i+1)^(0+128),f
 12270  0696  2E68               	goto	l10193
 12271  0697                     u11770:	
 12272  0697  0021               	movlb	1	; select bank1
 12273  0698  0008               	return
 12274  0699                     l10195:	
 12275                           ;Main_B1.c: 558: case 3:
 12276                           
 12277                           ;Main_B1.c: 555: }
 12278                           ;Main_B1.c: 556: }
 12279                           ;Main_B1.c: 557: break;
 12280                           
 12281                           
 12282                           ;Main_B1.c: 560: setBuz(5, 300);
 12283  0699  302C               	movlw	44
 12284  069A  0020               	movlb	0	; select bank0
 12285  069B  00A9               	movwf	setBuz@time
 12286  069C  3001               	movlw	1
 12287  069D  00AA               	movwf	setBuz@time+1
 12288  069E  3005               	movlw	5
 12289  069F  3197  27A7  3186   	fcall	_setBuz
 12290                           
 12291                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12292  06A2  319C  24BD  3186   	fcall	_getDimmerLights_Line
 12293  06A5  0020               	movlb	0	; select bank0
 12294  06A6  00EB               	movwf	??_Exception_Main
 12295  06A7  086B               	movf	??_Exception_Main,w
 12296  06A8  0021               	movlb	1	; select bank1
 12297  06A9  00EF               	movwf	Exception_Main@lights^(0+128)
 12298                           
 12299                           ;Main_B1.c: 562: if (lights == 0) {
 12300  06AA  08EF               	movf	Exception_Main@lights^(0+128),f
 12301  06AB  1D03               	skipz
 12302  06AC  2EE0               	goto	l10213
 12303                           
 12304                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12305  06AD  01ED               	clrf	Exception_Main@i_3438^(0+128)
 12306  06AE  01EE               	clrf	(Exception_Main@i_3438+1)^(0+128)
 12307  06AF                     l10211:	
 12308  06AF  086E               	movf	(Exception_Main@i_3438+1)^(0+128),w
 12309  06B0  3A80               	xorlw	128
 12310  06B1  0020               	movlb	0	; select bank0
 12311  06B2  00EB               	movwf	??_Exception_Main
 12312  06B3  3080               	movlw	128
 12313  06B4  026B               	subwf	??_Exception_Main,w
 12314  06B5  1D03               	skipz
 12315  06B6  2EBA               	goto	u11805
 12316  06B7  0021               	movlb	1	; select bank1
 12317  06B8  0869               	movf	Exception_Main@count^(0+128),w
 12318  06B9  026D               	subwf	Exception_Main@i_3438^(0+128),w
 12319  06BA                     u11805:	
 12320  06BA  1803               	btfsc	3,0
 12321  06BB  2EDE               	goto	u11800
 12322                           
 12323                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12324  06BC  0021               	movlb	1	; select bank1
 12325  06BD  086D               	movf	Exception_Main@i_3438^(0+128),w
 12326  06BE  3E01               	addlw	1
 12327  06BF  319D  2597  3186   	fcall	_getDimmerLights_Status
 12328  06C2  3A01               	xorlw	1
 12329  06C3  1D03               	skipz
 12330  06C4  2ED8               	goto	l10209
 12331                           
 12332                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12333  06C5  0020               	movlb	0	; select bank0
 12334  06C6  086F               	movf	_DimmerLights,w
 12335  06C7  3E0B               	addlw	11
 12336  06C8  0086               	movwf	6
 12337  06C9  3001               	movlw	1	; select bank2/3
 12338  06CA  0087               	movwf	7
 12339  06CB  1481               	bsf	1,1
 12340                           
 12341                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12342  06CC  086F               	movf	_DimmerLights,w
 12343  06CD  3E02               	addlw	2
 12344  06CE  0086               	movwf	6
 12345  06CF  3001               	movlw	1	; select bank2/3
 12346  06D0  0087               	movwf	7
 12347  06D1  1081               	bcf	1,1
 12348                           
 12349                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12350  06D2  0021               	movlb	1	; select bank1
 12351  06D3  086D               	movf	Exception_Main@i_3438^(0+128),w
 12352  06D4  3E01               	addlw	1
 12353  06D5  3195  2568  3186   	fcall	_setDimmerLights_SwOff
 12354  06D8                     l10209:	
 12355  06D8  3001               	movlw	1
 12356  06D9  0021               	movlb	1	; select bank1
 12357  06DA  07ED               	addwf	Exception_Main@i_3438^(0+128),f
 12358  06DB  3000               	movlw	0
 12359  06DC  3DEE               	addwfc	(Exception_Main@i_3438+1)^(0+128),f
 12360  06DD  2EAF               	goto	l10211
 12361  06DE                     u11800:	
 12362  06DE  0021               	movlb	1	; select bank1
 12363  06DF  0008               	return
 12364  06E0                     l10213:	
 12365                           ;Main_B1.c: 570: }
 12366                           ;Main_B1.c: 571: }
 12367                           ;Main_B1.c: 572: } else {
 12368                           
 12369                           
 12370                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12371  06E0  0021               	movlb	1	; select bank1
 12372  06E1  086F               	movf	Exception_Main@lights^(0+128),w
 12373  06E2  319D  2597  3186   	fcall	_getDimmerLights_Status
 12374  06E5  3A01               	xorlw	1
 12375  06E6  1903               	btfsc	3,2
 12376  06E7  2EEA               	goto	l10215
 12377  06E8  0021               	movlb	1	; select bank1
 12378  06E9  0008               	return
 12379  06EA                     l10215:	
 12380                           
 12381                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12382  06EA  0020               	movlb	0	; select bank0
 12383  06EB  086F               	movf	_DimmerLights,w
 12384  06EC  3E0B               	addlw	11
 12385  06ED  0086               	movwf	6
 12386  06EE  3001               	movlw	1	; select bank2/3
 12387  06EF  0087               	movwf	7
 12388  06F0  1481               	bsf	1,1
 12389                           
 12390                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12391  06F1  086F               	movf	_DimmerLights,w
 12392  06F2  3E02               	addlw	2
 12393  06F3  0086               	movwf	6
 12394  06F4  3001               	movlw	1	; select bank2/3
 12395  06F5  0087               	movwf	7
 12396  06F6  1081               	bcf	1,1
 12397                           
 12398                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12399  06F7  0021               	movlb	1	; select bank1
 12400  06F8  086F               	movf	Exception_Main@lights^(0+128),w
 12401  06F9  3195  2568         	fcall	_setDimmerLights_SwOff
 12402  06FB  0021               	movlb	1	; select bank1
 12403  06FC  0008               	return
 12404  06FD                     l10221:	
 12405                           ;Main_B1.c: 582: }
 12406                           
 12407                           ;Main_B1.c: 579: }
 12408                           ;Main_B1.c: 580: }
 12409                           ;Main_B1.c: 581: break;
 12410                           
 12411  06FD  0021               	movlb	1	; select bank1
 12412  06FE  086A               	movf	Exception_Main@error^(0+128),w
 12413                           
 12414                           ; Switch size 1, requested type "space"
 12415                           ; Number of cases is 2, Range of values is 2 to 3
 12416                           ; switch strategies available:
 12417                           ; Name         Instructions Cycles
 12418                           ; simple_byte            7     4 (average)
 12419                           ; direct_byte           13     9 (fixed)
 12420                           ; jumptable            263     9 (fixed)
 12421                           ;	Chosen strategy is simple_byte
 12422  06FF  3A02               	xorlw	2	; case 2
 12423  0700  1903               	skipnz
 12424  0701  2E56               	goto	l10179
 12425  0702  3A01               	xorlw	1	; case 3
 12426  0703  1903               	skipnz
 12427  0704  2E99               	goto	l10195
 12428  0705  2F07               	goto	l1456
 12429  0706  0008               	return
 12430  0707                     l1456:	
 12431  0707  0008               	return
 12432  0708                     __end_of_Exception_Main:	
 12433                           
 12434                           	psect	text73
 12435  1CBD                     __ptext73:	
 12436 ;; *************** function _getDimmerLights_Line *****************
 12437 ;; Defined at:
 12438 ;;		line 736 in file "../src/Dimmer_B1.c"
 12439 ;; Parameters:    Size  Location     Type
 12440 ;;		None
 12441 ;; Auto vars:     Size  Location     Type
 12442 ;;  line            1    0[BANK0 ] unsigned char 
 12443 ;; Return value:  Size  Location     Type
 12444 ;;                  1    wreg      unsigned char 
 12445 ;; Registers used:
 12446 ;;		wreg, status,2
 12447 ;; Tracked objects:
 12448 ;;		On entry : 0/0
 12449 ;;		On exit  : 0/0
 12450 ;;		Unchanged: 0/0
 12451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;Total ram usage:        1 bytes
 12457 ;; Hardware stack levels used:    1
 12458 ;; Hardware stack levels required when called:    5
 12459 ;; This function calls:
 12460 ;;		Nothing
 12461 ;; This function is called by:
 12462 ;;		_Exception_Main
 12463 ;; This function uses a non-reentrant model
 12464 ;;
 12465                           
 12466                           
 12467                           ;psect for function _getDimmerLights_Line
 12468  1CBD                     _getDimmerLights_Line:	
 12469                           
 12470                           ;Dimmer_B1.c: 737: char line = 0;
 12471                           
 12472                           ;incstack = 0
 12473                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12474  1CBD  0020               	movlb	0	; select bank0
 12475  1CBE  01A0               	clrf	getDimmerLights_Line@line
 12476                           
 12477                           ;Dimmer_B1.c: 739: if (DimmerLights1.Line == 1) {
 12478  1CBF  0022               	movlb	2	; select bank2
 12479  1CC0  1F5D               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12480  1CC1  2CC5               	goto	l9313
 12481                           
 12482                           ;Dimmer_B1.c: 740: line = 1;
 12483  1CC2  0020               	movlb	0	; select bank0
 12484  1CC3  01A0               	clrf	getDimmerLights_Line@line
 12485  1CC4  0AA0               	incf	getDimmerLights_Line@line,f
 12486  1CC5                     l9313:	
 12487                           
 12488                           ;Dimmer_B1.c: 741: }
 12489                           ;Dimmer_B1.c: 753: return line;
 12490  1CC5  0020               	movlb	0	; select bank0
 12491  1CC6  0820               	movf	getDimmerLights_Line@line,w
 12492  1CC7  0008               	return
 12493  1CC8                     __end_of_getDimmerLights_Line:	
 12494                           
 12495                           	psect	text74
 12496  1F2A                     __ptext74:	
 12497 ;; *************** function _DimmerLights_Main *****************
 12498 ;; Defined at:
 12499 ;;		line 502 in file "../src/Dimmer_B1.c"
 12500 ;; Parameters:    Size  Location     Type
 12501 ;;		None
 12502 ;; Auto vars:     Size  Location     Type
 12503 ;;		None
 12504 ;; Return value:  Size  Location     Type
 12505 ;;		None               void
 12506 ;; Registers used:
 12507 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12508 ;; Tracked objects:
 12509 ;;		On entry : 0/0
 12510 ;;		On exit  : 0/0
 12511 ;;		Unchanged: 0/0
 12512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12517 ;;Total ram usage:        0 bytes
 12518 ;; Hardware stack levels used:    1
 12519 ;; Hardware stack levels required when called:   10
 12520 ;; This function calls:
 12521 ;;		_getLoad_OK
 12522 ;;		_getMain_All_Error_Status
 12523 ;;		_getMain_LightsStatus
 12524 ;;		_setDimmerLights_Main
 12525 ;; This function is called by:
 12526 ;;		_main
 12527 ;; This function uses a non-reentrant model
 12528 ;;
 12529                           
 12530                           
 12531                           ;psect for function _DimmerLights_Main
 12532  1F2A                     _DimmerLights_Main:	
 12533                           
 12534                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
 12535                           
 12536                           ;incstack = 0
 12537                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12538  1F2A  0021               	movlb	1	; select bank1
 12539  1F2B  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 12540  1F2C  2F42               	goto	l9809
 12541                           
 12542                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 12543  1F2D  319C  244B  319F   	fcall	_getLoad_OK
 12544  1F30  3A01               	xorlw	1
 12545  1F31  1903               	skipnz
 12546  1F32  2F40               	goto	l730
 12547  1F33  3000               	movlw	0
 12548  1F34  3192  2232  319F   	fcall	_getMain_All_Error_Status
 12549  1F37  3800               	iorlw	0
 12550  1F38  1D03               	skipz
 12551  1F39  2F40               	goto	l730
 12552  1F3A  319C  2492  319F   	fcall	_getMain_LightsStatus
 12553  1F3D  3800               	iorlw	0
 12554  1F3E  1D03               	skipz
 12555  1F3F  2F42               	goto	l9809
 12556  1F40                     l730:	
 12557                           
 12558                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
 12559  1F40  0021               	movlb	1	; select bank1
 12560  1F41  1146               	bcf	_Dimmer^(0+128),2	;volatile
 12561  1F42                     l9809:	
 12562                           
 12563                           ;Dimmer_B1.c: 517: }
 12564                           ;Dimmer_B1.c: 518: }
 12565                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
 12566  1F42  3001               	movlw	1
 12567  1F43  3196  2606         	fcall	_setDimmerLights_Main
 12568  1F45  0008               	return
 12569  1F46                     __end_of_DimmerLights_Main:	
 12570                           
 12571                           	psect	text75
 12572  1606                     __ptext75:	
 12573 ;; *************** function _setDimmerLights_Main *****************
 12574 ;; Defined at:
 12575 ;;		line 536 in file "../src/Dimmer_B1.c"
 12576 ;; Parameters:    Size  Location     Type
 12577 ;;  lights          1    wreg     unsigned char 
 12578 ;; Auto vars:     Size  Location     Type
 12579 ;;  lights          1   78[BANK0 ] unsigned char 
 12580 ;; Return value:  Size  Location     Type
 12581 ;;		None               void
 12582 ;; Registers used:
 12583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12584 ;; Tracked objects:
 12585 ;;		On entry : 0/0
 12586 ;;		On exit  : 0/0
 12587 ;;		Unchanged: 0/0
 12588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12590 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;Total ram usage:        1 bytes
 12594 ;; Hardware stack levels used:    1
 12595 ;; Hardware stack levels required when called:    9
 12596 ;; This function calls:
 12597 ;;		_DimmerLightsPointSelect
 12598 ;;		_getDimmerLights_Allow_Condition
 12599 ;;		_setDimmerLights
 12600 ;;		_setDimmerLights_Adj
 12601 ;; This function is called by:
 12602 ;;		_DimmerLights_Main
 12603 ;; This function uses a non-reentrant model
 12604 ;;
 12605                           
 12606                           
 12607                           ;psect for function _setDimmerLights_Main
 12608  1606                     _setDimmerLights_Main:	
 12609                           
 12610                           ;incstack = 0
 12611                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12612                           ;setDimmerLights_Main@lights stored from wreg
 12613  1606  0020               	movlb	0	; select bank0
 12614  1607  00EE               	movwf	setDimmerLights_Main@lights
 12615                           
 12616                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
 12617  1608  086E               	movf	setDimmerLights_Main@lights,w
 12618  1609  319C  24B2  3196   	fcall	_DimmerLightsPointSelect
 12619                           
 12620                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
 12621  160C  0020               	movlb	0	; select bank0
 12622  160D  086F               	movf	_DimmerLights,w
 12623  160E  3E0A               	addlw	10
 12624  160F  0086               	movwf	6
 12625  1610  3001               	movlw	1	; select bank2/3
 12626  1611  0087               	movwf	7
 12627  1612  1C81               	btfss	1,1
 12628  1613  2E35               	goto	l9293
 12629                           
 12630                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12631  1614  086E               	movf	setDimmerLights_Main@lights,w
 12632  1615  319E  26AF  3196   	fcall	_getDimmerLights_Allow_Condition
 12633  1618  3800               	iorlw	0
 12634  1619  1D03               	skipz
 12635  161A  0008               	return
 12636                           
 12637                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
 12638  161B  0020               	movlb	0	; select bank0
 12639  161C  086F               	movf	_DimmerLights,w
 12640  161D  3E0A               	addlw	10
 12641  161E  0086               	movwf	6
 12642  161F  3001               	movlw	1	; select bank2/3
 12643  1620  0087               	movwf	7
 12644  1621  1081               	bcf	1,1
 12645                           
 12646                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
 12647  1622  086F               	movf	_DimmerLights,w
 12648  1623  3E0A               	addlw	10
 12649  1624  0086               	movwf	6
 12650  1625  3001               	movlw	1	; select bank2/3
 12651  1626  0087               	movwf	7
 12652  1627  1C01               	btfss	1,0
 12653  1628  2E2F               	goto	l9291
 12654                           
 12655                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
 12656  1629  01EB               	clrf	setDimmerLights@status
 12657  162A  0AEB               	incf	setDimmerLights@status,f
 12658  162B  086E               	movf	setDimmerLights_Main@lights,w
 12659  162C  3196  2656         	fcall	_setDimmerLights
 12660                           
 12661                           ;Dimmer_B1.c: 544: } else {
 12662  162E  0008               	return
 12663  162F                     l9291:	
 12664                           
 12665                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
 12666  162F  0020               	movlb	0	; select bank0
 12667  1630  01EB               	clrf	setDimmerLights@status
 12668  1631  086E               	movf	setDimmerLights_Main@lights,w
 12669  1632  3196  2656         	fcall	_setDimmerLights
 12670                           
 12671                           ;Dimmer_B1.c: 546: }
 12672                           ;Dimmer_B1.c: 547: }
 12673                           ;Dimmer_B1.c: 548: } else {
 12674  1634  0008               	return
 12675  1635                     l9293:	
 12676                           
 12677                           ;Dimmer_B1.c: 549: if (DimmerLights->TriggerAdj == 1) {
 12678  1635  0020               	movlb	0	; select bank0
 12679  1636  086F               	movf	_DimmerLights,w
 12680  1637  3E0A               	addlw	10
 12681  1638  0086               	movwf	6
 12682  1639  3001               	movlw	1	; select bank2/3
 12683  163A  0087               	movwf	7
 12684  163B  1D81               	btfss	1,3
 12685  163C  0008               	return
 12686                           
 12687                           ;Dimmer_B1.c: 550: DimmerLights->TriggerAdj = 0;
 12688  163D  086F               	movf	_DimmerLights,w
 12689  163E  3E0A               	addlw	10
 12690  163F  0086               	movwf	6
 12691  1640  3001               	movlw	1	; select bank2/3
 12692  1641  0087               	movwf	7
 12693  1642  1181               	bcf	1,3
 12694                           
 12695                           ;Dimmer_B1.c: 551: if (DimmerLights->SwitchAdj == 1) {
 12696  1643  086F               	movf	_DimmerLights,w
 12697  1644  3E0A               	addlw	10
 12698  1645  0086               	movwf	6
 12699  1646  3001               	movlw	1	; select bank2/3
 12700  1647  0087               	movwf	7
 12701  1648  1D01               	btfss	1,2
 12702  1649  2E50               	goto	l9299
 12703                           
 12704                           ;Dimmer_B1.c: 552: setDimmerLights_Adj(lights, 1);
 12705  164A  01EB               	clrf	setDimmerLights_Adj@status
 12706  164B  0AEB               	incf	setDimmerLights_Adj@status,f
 12707  164C  086E               	movf	setDimmerLights_Main@lights,w
 12708  164D  3197  274F         	fcall	_setDimmerLights_Adj
 12709                           
 12710                           ;Dimmer_B1.c: 553: } else {
 12711  164F  0008               	return
 12712  1650                     l9299:	
 12713                           
 12714                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 0);
 12715  1650  0020               	movlb	0	; select bank0
 12716  1651  01EB               	clrf	setDimmerLights_Adj@status
 12717  1652  086E               	movf	setDimmerLights_Main@lights,w
 12718  1653  3197  274F         	fcall	_setDimmerLights_Adj
 12719  1655  0008               	return
 12720  1656                     __end_of_setDimmerLights_Main:	
 12721                           
 12722                           	psect	text76
 12723  174F                     __ptext76:	
 12724 ;; *************** function _setDimmerLights_Adj *****************
 12725 ;; Defined at:
 12726 ;;		line 672 in file "../src/Dimmer_B1.c"
 12727 ;; Parameters:    Size  Location     Type
 12728 ;;  lights          1    wreg     unsigned char 
 12729 ;;  status          1   75[BANK0 ] unsigned char 
 12730 ;; Auto vars:     Size  Location     Type
 12731 ;;  lights          1   77[BANK0 ] unsigned char 
 12732 ;; Return value:  Size  Location     Type
 12733 ;;		None               void
 12734 ;; Registers used:
 12735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12736 ;; Tracked objects:
 12737 ;;		On entry : 0/0
 12738 ;;		On exit  : 0/0
 12739 ;;		Unchanged: 0/0
 12740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12741 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;Total ram usage:        3 bytes
 12746 ;; Hardware stack levels used:    1
 12747 ;; Hardware stack levels required when called:    8
 12748 ;; This function calls:
 12749 ;;		_setBuz
 12750 ;;		_setDimmerLights_Line
 12751 ;;		_setPercentValue
 12752 ;;		_setProductData
 12753 ;;		_setRF_DimmerLights
 12754 ;;		_setTxData
 12755 ;; This function is called by:
 12756 ;;		_setDimmerLights_Main
 12757 ;; This function uses a non-reentrant model
 12758 ;;
 12759                           
 12760                           
 12761                           ;psect for function _setDimmerLights_Adj
 12762  174F                     _setDimmerLights_Adj:	
 12763                           
 12764                           ;incstack = 0
 12765                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12766                           ;setDimmerLights_Adj@lights stored from wreg
 12767  174F  0020               	movlb	0	; select bank0
 12768  1750  00ED               	movwf	setDimmerLights_Adj@lights
 12769                           
 12770                           ;Dimmer_B1.c: 674: if (status == 1) {
 12771  1751  086B               	movf	setDimmerLights_Adj@status,w
 12772  1752  3A01               	xorlw	1
 12773  1753  1D03               	skipz
 12774  1754  2F67               	goto	l8977
 12775                           
 12776                           ;Dimmer_B1.c: 675: DimmerLights->AdjSw = 1;
 12777  1755  0A6F               	incf	_DimmerLights,w
 12778  1756  0086               	movwf	6
 12779  1757  3001               	movlw	1	; select bank2/3
 12780  1758  0087               	movwf	7
 12781  1759  1701               	bsf	1,6
 12782                           
 12783                           ;Dimmer_B1.c: 676: DimmerLights->Signal = 1;
 12784  175A  0A6F               	incf	_DimmerLights,w
 12785  175B  0086               	movwf	6
 12786  175C  3001               	movlw	1	; select bank2/3
 12787  175D  0087               	movwf	7
 12788  175E  1681               	bsf	1,5
 12789                           
 12790                           ;Dimmer_B1.c: 677: setBuz(1, 100);
 12791  175F  3064               	movlw	100
 12792  1760  00A9               	movwf	setBuz@time
 12793  1761  3000               	movlw	0
 12794  1762  00AA               	movwf	setBuz@time+1
 12795  1763  3001               	movlw	1
 12796  1764  3197  27A7         	fcall	_setBuz
 12797                           
 12798                           ;Dimmer_B1.c: 678: } else if (status == 0) {
 12799  1766  0008               	return
 12800  1767                     l8977:	
 12801  1767  0020               	movlb	0	; select bank0
 12802  1768  08EB               	movf	setDimmerLights_Adj@status,f
 12803  1769  1D03               	skipz
 12804  176A  0008               	return
 12805                           
 12806                           ;Dimmer_B1.c: 679: Dimmer.Load_Status = 0;
 12807  176B  0021               	movlb	1	; select bank1
 12808  176C  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12809                           
 12810                           ;Dimmer_B1.c: 680: setDimmerLights_Line(lights);
 12811  176D  0020               	movlb	0	; select bank0
 12812  176E  086D               	movf	setDimmerLights_Adj@lights,w
 12813  176F  319D  254B  3197   	fcall	_setDimmerLights_Line
 12814                           
 12815                           ;Dimmer_B1.c: 681: DimmerLights->AdjSw = 0;
 12816  1772  0020               	movlb	0	; select bank0
 12817  1773  0A6F               	incf	_DimmerLights,w
 12818  1774  0086               	movwf	6
 12819  1775  3001               	movlw	1	; select bank2/3
 12820  1776  0087               	movwf	7
 12821  1777  1301               	bcf	1,6
 12822                           
 12823                           ;Dimmer_B1.c: 682: DimmerLights->Signal = 0;
 12824  1778  0A6F               	incf	_DimmerLights,w
 12825  1779  0086               	movwf	6
 12826  177A  3001               	movlw	1	; select bank2/3
 12827  177B  0087               	movwf	7
 12828  177C  1281               	bcf	1,5
 12829                           
 12830                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12831  177D  086F               	movf	_DimmerLights,w
 12832  177E  3E04               	addlw	4
 12833  177F  0086               	movwf	6
 12834  1780  3001               	movlw	1	; select bank2/3
 12835  1781  0087               	movwf	7
 12836  1782  0801               	movf	1,w
 12837  1783  00EC               	movwf	??_setDimmerLights_Adj
 12838  1784  086F               	movf	_DimmerLights,w
 12839  1785  3E06               	addlw	6
 12840  1786  0086               	movwf	6
 12841  1787  3001               	movlw	1	; select bank2/3
 12842  1788  0087               	movwf	7
 12843  1789  086C               	movf	??_setDimmerLights_Adj,w
 12844  178A  0081               	movwf	1
 12845                           
 12846                           ;Dimmer_B1.c: 685: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 12847  178B  086F               	movf	_DimmerLights,w
 12848  178C  3E04               	addlw	4
 12849  178D  0086               	movwf	6
 12850  178E  3001               	movlw	1	; select bank2/3
 12851  178F  0087               	movwf	7
 12852  1790  0801               	movf	1,w
 12853  1791  318A  22B1  3197   	fcall	_setPercentValue
 12854  1794  0020               	movlb	0	; select bank0
 12855  1795  00EC               	movwf	??_setDimmerLights_Adj
 12856  1796  086C               	movf	??_setDimmerLights_Adj,w
 12857  1797  00E2               	movwf	setProductData@value
 12858  1798  086D               	movf	setDimmerLights_Adj@lights,w
 12859  1799  3E14               	addlw	20
 12860  179A  319D  253D  3197   	fcall	_setProductData
 12861                           
 12862                           ;Dimmer_B1.c: 700: setRF_DimmerLights(lights, 1);
 12863  179D  0020               	movlb	0	; select bank0
 12864  179E  01E6               	clrf	setRF_DimmerLights@on
 12865  179F  0AE6               	incf	setRF_DimmerLights@on,f
 12866  17A0  086D               	movf	setDimmerLights_Adj@lights,w
 12867  17A1  3188  201E  3197   	fcall	_setRF_DimmerLights
 12868                           
 12869                           ;Dimmer_B1.c: 701: setTxData();
 12870  17A4  318D  2571         	fcall	_setTxData
 12871  17A6  0008               	return
 12872  17A7                     __end_of_setDimmerLights_Adj:	
 12873                           
 12874                           	psect	text77
 12875  1656                     __ptext77:	
 12876 ;; *************** function _setDimmerLights *****************
 12877 ;; Defined at:
 12878 ;;		line 630 in file "../src/Dimmer_B1.c"
 12879 ;; Parameters:    Size  Location     Type
 12880 ;;  lights          1    wreg     unsigned char 
 12881 ;;  status          1   75[BANK0 ] unsigned char 
 12882 ;; Auto vars:     Size  Location     Type
 12883 ;;  lights          1   77[BANK0 ] unsigned char 
 12884 ;; Return value:  Size  Location     Type
 12885 ;;		None               void
 12886 ;; Registers used:
 12887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12888 ;; Tracked objects:
 12889 ;;		On entry : 0/0
 12890 ;;		On exit  : 0/0
 12891 ;;		Unchanged: 0/0
 12892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12893 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12896 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12897 ;;Total ram usage:        3 bytes
 12898 ;; Hardware stack levels used:    1
 12899 ;; Hardware stack levels required when called:    8
 12900 ;; This function calls:
 12901 ;;		_setDimmerLights_Line
 12902 ;;		_setLED
 12903 ;;		_setPercentValue
 12904 ;;		_setProductData
 12905 ;;		_setRF_DimmerLights
 12906 ;;		_setTxData
 12907 ;; This function is called by:
 12908 ;;		_setDimmerLights_Main
 12909 ;; This function uses a non-reentrant model
 12910 ;;
 12911                           
 12912                           
 12913                           ;psect for function _setDimmerLights
 12914  1656                     _setDimmerLights:	
 12915                           
 12916                           ;incstack = 0
 12917                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12918                           ;setDimmerLights@lights stored from wreg
 12919  1656  0020               	movlb	0	; select bank0
 12920  1657  00ED               	movwf	setDimmerLights@lights
 12921                           
 12922                           ;Dimmer_B1.c: 638: if (status == 1) {
 12923  1658  086B               	movf	setDimmerLights@status,w
 12924  1659  3A01               	xorlw	1
 12925  165A  1D03               	skipz
 12926  165B  2E86               	goto	l8957
 12927                           
 12928                           ;Dimmer_B1.c: 639: DimmerLights->StatusFlag = 1;
 12929  165C  0A6F               	incf	_DimmerLights,w
 12930  165D  0086               	movwf	6
 12931  165E  3001               	movlw	1	; select bank2/3
 12932  165F  0087               	movwf	7
 12933  1660  1501               	bsf	1,2
 12934                           
 12935                           ;Dimmer_B1.c: 642: Dimmer.Load_Status = 1;
 12936  1661  0021               	movlb	1	; select bank1
 12937  1662  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 12938                           
 12939                           ;Dimmer_B1.c: 643: setDimmerLights_Line(lights);
 12940  1663  0020               	movlb	0	; select bank0
 12941  1664  086D               	movf	setDimmerLights@lights,w
 12942  1665  319D  254B  3196   	fcall	_setDimmerLights_Line
 12943                           
 12944                           ;Dimmer_B1.c: 645: setLED(lights, 0);
 12945  1668  0020               	movlb	0	; select bank0
 12946  1669  01A2               	clrf	setLED@command
 12947  166A  086D               	movf	setDimmerLights@lights,w
 12948  166B  3193  23A6  3196   	fcall	_setLED
 12949                           
 12950                           ;Dimmer_B1.c: 646: ;;
 12951                           ;Dimmer_B1.c: 650: DimmerLights->DimmingValue = ((char)(70*0.8));
 12952  166E  3038               	movlw	56
 12953  166F  0020               	movlb	0	; select bank0
 12954  1670  00EC               	movwf	??_setDimmerLights
 12955  1671  086F               	movf	_DimmerLights,w
 12956  1672  3E04               	addlw	4
 12957  1673  0086               	movwf	6
 12958  1674  3001               	movlw	1	; select bank2/3
 12959  1675  0087               	movwf	7
 12960  1676  086C               	movf	??_setDimmerLights,w
 12961  1677  0081               	movwf	1
 12962                           
 12963                           ;Dimmer_B1.c: 652: setProductData((20 + lights), setPercentValue(((char)(70*0.8))));
 12964  1678  3038               	movlw	56
 12965  1679  318A  22B1  3196   	fcall	_setPercentValue
 12966  167C  0020               	movlb	0	; select bank0
 12967  167D  00EC               	movwf	??_setDimmerLights
 12968  167E  086C               	movf	??_setDimmerLights,w
 12969  167F  00E2               	movwf	setProductData@value
 12970  1680  086D               	movf	setDimmerLights@lights,w
 12971  1681  3E14               	addlw	20
 12972  1682  319D  253D  3196   	fcall	_setProductData
 12973                           
 12974                           ;Dimmer_B1.c: 654: } else if (status == 0) {
 12975  1685  2E9C               	goto	l8967
 12976  1686                     l8957:	
 12977  1686  0020               	movlb	0	; select bank0
 12978  1687  08EB               	movf	setDimmerLights@status,f
 12979  1688  1D03               	skipz
 12980  1689  2E9C               	goto	l8967
 12981                           
 12982                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 12983  168A  0A6F               	incf	_DimmerLights,w
 12984  168B  0086               	movwf	6
 12985  168C  3001               	movlw	1	; select bank2/3
 12986  168D  0087               	movwf	7
 12987  168E  1101               	bcf	1,2
 12988                           
 12989                           ;Dimmer_B1.c: 658: Dimmer.Load_Status = 0;
 12990  168F  0021               	movlb	1	; select bank1
 12991  1690  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12992                           
 12993                           ;Dimmer_B1.c: 659: setDimmerLights_Line(0);
 12994  1691  3000               	movlw	0
 12995  1692  319D  254B  3196   	fcall	_setDimmerLights_Line
 12996                           
 12997                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 12998  1695  0020               	movlb	0	; select bank0
 12999  1696  01A2               	clrf	setLED@command
 13000  1697  0AA2               	incf	setLED@command,f
 13001  1698  086D               	movf	setDimmerLights@lights,w
 13002  1699  3193  23A6  3196   	fcall	_setLED
 13003  169C                     l8967:	
 13004                           ;Dimmer_B1.c: 662: ;;
 13005                           
 13006                           
 13007                           ;Dimmer_B1.c: 663: }
 13008                           ;Dimmer_B1.c: 666: setRF_DimmerLights(lights, status);
 13009  169C  0020               	movlb	0	; select bank0
 13010  169D  086B               	movf	setDimmerLights@status,w
 13011  169E  00EC               	movwf	??_setDimmerLights
 13012  169F  086C               	movf	??_setDimmerLights,w
 13013  16A0  00E6               	movwf	setRF_DimmerLights@on
 13014  16A1  086D               	movf	setDimmerLights@lights,w
 13015  16A2  3188  201E  3196   	fcall	_setRF_DimmerLights
 13016                           
 13017                           ;Dimmer_B1.c: 667: setTxData();
 13018  16A5  318D  2571         	fcall	_setTxData
 13019  16A7  0008               	return
 13020  16A8                     __end_of_setDimmerLights:	
 13021                           
 13022                           	psect	text78
 13023  0D71                     __ptext78:	
 13024 ;; *************** function _setTxData *****************
 13025 ;; Defined at:
 13026 ;;		line 167 in file "../src/RF_Control_B1.c"
 13027 ;; Parameters:    Size  Location     Type
 13028 ;;		None
 13029 ;; Auto vars:     Size  Location     Type
 13030 ;;  i               1    0        unsigned char 
 13031 ;; Return value:  Size  Location     Type
 13032 ;;		None               void
 13033 ;; Registers used:
 13034 ;;		wreg, fsr1l, fsr1h
 13035 ;; Tracked objects:
 13036 ;;		On entry : 0/0
 13037 ;;		On exit  : 0/0
 13038 ;;		Unchanged: 0/0
 13039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13043 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;Total ram usage:        1 bytes
 13045 ;; Hardware stack levels used:    1
 13046 ;; Hardware stack levels required when called:    5
 13047 ;; This function calls:
 13048 ;;		Nothing
 13049 ;; This function is called by:
 13050 ;;		_setDimmerLights
 13051 ;;		_setDimmerLights_Adj
 13052 ;;		_getRxData
 13053 ;;		_setControl_Lights_Table
 13054 ;;		_setRFSW_Control
 13055 ;;		_setRFSW_AdjControl
 13056 ;; This function uses a non-reentrant model
 13057 ;;
 13058                           
 13059                           
 13060                           ;psect for function _setTxData
 13061  0D71                     _setTxData:	
 13062                           
 13063                           ;RF_Control_B1.c: 168: char i;
 13064                           ;RF_Control_B1.c: 169: if (RF1.Enable == 1) {
 13065                           
 13066                           ;incstack = 0
 13067                           ; Regs used in _setTxData: [wregfsr1]
 13068  0D71  0021               	movlb	1	; select bank1
 13069  0D72  1C3A               	btfss	_RF1^(0+128),0
 13070  0D73  0008               	return
 13071                           
 13072                           ;RF_Control_B1.c: 171: if (RF1.TransceiveGO == 0) {
 13073  0D74  193A               	btfsc	_RF1^(0+128),2
 13074  0D75  0008               	return
 13075                           
 13076                           ;RF_Control_B1.c: 172: RF1.TransceiveGO = 1;
 13077  0D76  153A               	bsf	_RF1^(0+128),2
 13078                           
 13079                           ;RF_Control_B1.c: 173: RF1.RunTime = 20;
 13080  0D77  3014               	movlw	20
 13081  0D78  00C1               	movwf	(_RF1^(0+128)+7)
 13082  0D79  3000               	movlw	0
 13083  0D7A  00C2               	movwf	(_RF1^(0+128)+8)
 13084                           
 13085                           ;RF_Control_B1.c: 185: RF_Data[0] = 0x63;
 13086  0D7B  3063               	movlw	99
 13087  0D7C  0020               	movlb	0	; select bank0
 13088  0D7D  00A0               	movwf	??_setTxData
 13089  0D7E  0820               	movf	??_setTxData,w
 13090  0D7F  0023               	movlb	3	; select bank3
 13091  0D80  00A0               	movwf	_RF_Data^(0+384)
 13092                           
 13093                           ;RF_Control_B1.c: 186: RF_Data[1] = 0x02;
 13094  0D81  3002               	movlw	2
 13095  0D82  0020               	movlb	0	; select bank0
 13096  0D83  00A0               	movwf	??_setTxData
 13097  0D84  0820               	movf	??_setTxData,w
 13098  0D85  0023               	movlb	3	; select bank3
 13099  0D86  00A1               	movwf	(_RF_Data^(0+384)+1)
 13100                           
 13101                           ;RF_Control_B1.c: 188: RF_Data[2] = product->Data[2];
 13102  0D87  0879               	movf	_product,w
 13103  0D88  0086               	movwf	6
 13104  0D89  3002               	movlw	2	; select bank4/5
 13105  0D8A  0087               	movwf	7
 13106  0D8B  3002               	movlw	2	; select bank4/5
 13107  0D8C  3F42               	moviw [2]fsr1
 13108  0D8D  00A2               	movwf	(_RF_Data^(0+384)+2)
 13109                           
 13110                           ;RF_Control_B1.c: 189: RF_Data[3] = product->Data[3];
 13111  0D8E  0879               	movf	_product,w
 13112  0D8F  0086               	movwf	6
 13113  0D90  3002               	movlw	2	; select bank4/5
 13114  0D91  0087               	movwf	7
 13115  0D92  3002               	movlw	2	; select bank4/5
 13116  0D93  3F43               	moviw [3]fsr1
 13117  0D94  00A3               	movwf	(_RF_Data^(0+384)+3)
 13118                           
 13119                           ;RF_Control_B1.c: 190: RF_Data[4] = product->Data[4];
 13120  0D95  0879               	movf	_product,w
 13121  0D96  0086               	movwf	6
 13122  0D97  3002               	movlw	2	; select bank4/5
 13123  0D98  0087               	movwf	7
 13124  0D99  3002               	movlw	2	; select bank4/5
 13125  0D9A  3F44               	moviw [4]fsr1
 13126  0D9B  00A4               	movwf	(_RF_Data^(0+384)+4)
 13127                           
 13128                           ;RF_Control_B1.c: 191: RF_Data[5] = product->Data[5];
 13129  0D9C  0879               	movf	_product,w
 13130  0D9D  0086               	movwf	6
 13131  0D9E  3002               	movlw	2	; select bank4/5
 13132  0D9F  0087               	movwf	7
 13133  0DA0  3002               	movlw	2	; select bank4/5
 13134  0DA1  3F45               	moviw [5]fsr1
 13135  0DA2  00A5               	movwf	(_RF_Data^(0+384)+5)
 13136                           
 13137                           ;RF_Control_B1.c: 192: RF_Data[6] = product->Data[6];
 13138  0DA3  0879               	movf	_product,w
 13139  0DA4  0086               	movwf	6
 13140  0DA5  3002               	movlw	2	; select bank4/5
 13141  0DA6  0087               	movwf	7
 13142  0DA7  3002               	movlw	2	; select bank4/5
 13143  0DA8  3F46               	moviw [6]fsr1
 13144  0DA9  00A6               	movwf	(_RF_Data^(0+384)+6)
 13145                           
 13146                           ;RF_Control_B1.c: 193: RF_Data[7] = product->Data[7];
 13147  0DAA  0879               	movf	_product,w
 13148  0DAB  0086               	movwf	6
 13149  0DAC  3002               	movlw	2	; select bank4/5
 13150  0DAD  0087               	movwf	7
 13151  0DAE  3002               	movlw	2	; select bank4/5
 13152  0DAF  3F47               	moviw [7]fsr1
 13153  0DB0  00A7               	movwf	(_RF_Data^(0+384)+7)
 13154                           
 13155                           ;RF_Control_B1.c: 194: RF_Data[8] = product->Data[8];
 13156  0DB1  0879               	movf	_product,w
 13157  0DB2  0086               	movwf	6
 13158  0DB3  3002               	movlw	2	; select bank4/5
 13159  0DB4  0087               	movwf	7
 13160  0DB5  3002               	movlw	2	; select bank4/5
 13161  0DB6  3F48               	moviw [8]fsr1
 13162  0DB7  00A8               	movwf	(_RF_Data^(0+384)+8)
 13163                           
 13164                           ;RF_Control_B1.c: 195: RF_Data[9] = product->Data[9];
 13165  0DB8  0879               	movf	_product,w
 13166  0DB9  0086               	movwf	6
 13167  0DBA  3002               	movlw	2	; select bank4/5
 13168  0DBB  0087               	movwf	7
 13169  0DBC  3002               	movlw	2	; select bank4/5
 13170  0DBD  3F49               	moviw [9]fsr1
 13171  0DBE  00A9               	movwf	(_RF_Data^(0+384)+9)
 13172                           
 13173                           ;RF_Control_B1.c: 196: RF_Data[10] = product->Data[10];
 13174  0DBF  0879               	movf	_product,w
 13175  0DC0  0086               	movwf	6
 13176  0DC1  3002               	movlw	2	; select bank4/5
 13177  0DC2  0087               	movwf	7
 13178  0DC3  3002               	movlw	2	; select bank4/5
 13179  0DC4  3F4A               	moviw [10]fsr1
 13180  0DC5  00AA               	movwf	(_RF_Data^(0+384)+10)
 13181                           
 13182                           ;RF_Control_B1.c: 197: RF_Data[11] = product->Data[11];
 13183  0DC6  0879               	movf	_product,w
 13184  0DC7  0086               	movwf	6
 13185  0DC8  3002               	movlw	2	; select bank4/5
 13186  0DC9  0087               	movwf	7
 13187  0DCA  3002               	movlw	2	; select bank4/5
 13188  0DCB  3F4B               	moviw [11]fsr1
 13189  0DCC  00AB               	movwf	(_RF_Data^(0+384)+11)
 13190                           
 13191                           ;RF_Control_B1.c: 198: RF_Data[12] = product->Data[12];
 13192  0DCD  0879               	movf	_product,w
 13193  0DCE  0086               	movwf	6
 13194  0DCF  3002               	movlw	2	; select bank4/5
 13195  0DD0  0087               	movwf	7
 13196  0DD1  3002               	movlw	2	; select bank4/5
 13197  0DD2  3F4C               	moviw [12]fsr1
 13198  0DD3  00AC               	movwf	(_RF_Data^(0+384)+12)
 13199                           
 13200                           ;RF_Control_B1.c: 199: RF_Data[13] = product->Data[13];
 13201  0DD4  0879               	movf	_product,w
 13202  0DD5  0086               	movwf	6
 13203  0DD6  3002               	movlw	2	; select bank4/5
 13204  0DD7  0087               	movwf	7
 13205  0DD8  3002               	movlw	2	; select bank4/5
 13206  0DD9  3F4D               	moviw [13]fsr1
 13207  0DDA  00AD               	movwf	(_RF_Data^(0+384)+13)
 13208                           
 13209                           ;RF_Control_B1.c: 200: RF_Data[14] = product->Data[14];
 13210  0DDB  0879               	movf	_product,w
 13211  0DDC  0086               	movwf	6
 13212  0DDD  3002               	movlw	2	; select bank4/5
 13213  0DDE  0087               	movwf	7
 13214  0DDF  3002               	movlw	2	; select bank4/5
 13215  0DE0  3F4E               	moviw [14]fsr1
 13216  0DE1  00AE               	movwf	(_RF_Data^(0+384)+14)
 13217                           
 13218                           ;RF_Control_B1.c: 201: RF_Data[15] = product->Data[15];
 13219  0DE2  0879               	movf	_product,w
 13220  0DE3  0086               	movwf	6
 13221  0DE4  3002               	movlw	2	; select bank4/5
 13222  0DE5  0087               	movwf	7
 13223  0DE6  3002               	movlw	2	; select bank4/5
 13224  0DE7  3F4F               	moviw [15]fsr1
 13225  0DE8  00AF               	movwf	(_RF_Data^(0+384)+15)
 13226                           
 13227                           ;RF_Control_B1.c: 202: RF_Data[16] = product->Data[16];
 13228  0DE9  0879               	movf	_product,w
 13229  0DEA  0086               	movwf	6
 13230  0DEB  3002               	movlw	2	; select bank4/5
 13231  0DEC  0087               	movwf	7
 13232  0DED  3002               	movlw	2	; select bank4/5
 13233  0DEE  3F50               	moviw [16]fsr1
 13234  0DEF  00B0               	movwf	(_RF_Data^(0+384)+16)
 13235                           
 13236                           ;RF_Control_B1.c: 203: RF_Data[17] = product->Data[17];
 13237  0DF0  0879               	movf	_product,w
 13238  0DF1  0086               	movwf	6
 13239  0DF2  3002               	movlw	2	; select bank4/5
 13240  0DF3  0087               	movwf	7
 13241  0DF4  3002               	movlw	2	; select bank4/5
 13242  0DF5  3F51               	moviw [17]fsr1
 13243  0DF6  00B1               	movwf	(_RF_Data^(0+384)+17)
 13244                           
 13245                           ;RF_Control_B1.c: 204: RF_Data[18] = product->Data[18];
 13246  0DF7  0879               	movf	_product,w
 13247  0DF8  0086               	movwf	6
 13248  0DF9  3002               	movlw	2	; select bank4/5
 13249  0DFA  0087               	movwf	7
 13250  0DFB  3002               	movlw	2	; select bank4/5
 13251  0DFC  3F52               	moviw [18]fsr1
 13252  0DFD  00B2               	movwf	(_RF_Data^(0+384)+18)
 13253                           
 13254                           ;RF_Control_B1.c: 205: RF_Data[19] = product->Data[19];
 13255  0DFE  0879               	movf	_product,w
 13256  0DFF  0086               	movwf	6
 13257  0E00  3002               	movlw	2	; select bank4/5
 13258  0E01  0087               	movwf	7
 13259  0E02  3002               	movlw	2	; select bank4/5
 13260  0E03  3F53               	moviw [19]fsr1
 13261  0E04  00B3               	movwf	(_RF_Data^(0+384)+19)
 13262                           
 13263                           ;RF_Control_B1.c: 206: RF_Data[20] = 209;
 13264  0E05  30D1               	movlw	209
 13265  0E06  0020               	movlb	0	; select bank0
 13266  0E07  00A0               	movwf	??_setTxData
 13267  0E08  0820               	movf	??_setTxData,w
 13268  0E09  0023               	movlb	3	; select bank3
 13269  0E0A  00B4               	movwf	(_RF_Data^(0+384)+20)
 13270  0E0B  0008               	return
 13271  0E0C                     __end_of_setTxData:	
 13272                           
 13273                           	psect	text79
 13274  081E                     __ptext79:	
 13275 ;; *************** function _setRF_DimmerLights *****************
 13276 ;; Defined at:
 13277 ;;		line 437 in file "../src/RF_Control_B1.c"
 13278 ;; Parameters:    Size  Location     Type
 13279 ;;  lights          1    wreg     unsigned char 
 13280 ;;  on              1   70[BANK0 ] unsigned char 
 13281 ;; Auto vars:     Size  Location     Type
 13282 ;;  lights          1   74[BANK0 ] unsigned char 
 13283 ;;  status          1   73[BANK0 ] unsigned char 
 13284 ;; Return value:  Size  Location     Type
 13285 ;;		None               void
 13286 ;; Registers used:
 13287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13288 ;; Tracked objects:
 13289 ;;		On entry : 0/0
 13290 ;;		On exit  : 0/0
 13291 ;;		Unchanged: 0/0
 13292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13293 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13294 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13295 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13296 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;Total ram usage:        5 bytes
 13298 ;; Hardware stack levels used:    1
 13299 ;; Hardware stack levels required when called:    6
 13300 ;; This function calls:
 13301 ;;		_setProductData
 13302 ;; This function is called by:
 13303 ;;		_setDimmerLights
 13304 ;;		_setDimmerLights_Adj
 13305 ;;		_setRFSW_Control
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           
 13310                           ;psect for function _setRF_DimmerLights
 13311  081E                     _setRF_DimmerLights:	
 13312                           
 13313                           ;incstack = 0
 13314                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13315                           ;setRF_DimmerLights@lights stored from wreg
 13316  081E  0020               	movlb	0	; select bank0
 13317  081F  00EA               	movwf	setRF_DimmerLights@lights
 13318                           
 13319                           ;RF_Control_B1.c: 438: char status = 1;
 13320  0820  01E9               	clrf	setRF_DimmerLights@status
 13321  0821  0AE9               	incf	setRF_DimmerLights@status,f
 13322                           
 13323                           ;RF_Control_B1.c: 439: status <<= (lights - 1);
 13324  0822  086A               	movf	setRF_DimmerLights@lights,w
 13325  0823  3EFF               	addlw	-1
 13326  0824  0A89               	incf	9,f
 13327  0825  2828               	goto	u9070
 13328  0826                     u9075:	
 13329  0826  1003               	clrc
 13330  0827  0DE9               	rlf	setRF_DimmerLights@status,f
 13331  0828                     u9070:	
 13332  0828  3EFF               	addlw	-1
 13333  0829  1D03               	skipz
 13334  082A  2826               	goto	u9075
 13335                           
 13336                           ;RF_Control_B1.c: 440: setProductData(11, lights);
 13337  082B  086A               	movf	setRF_DimmerLights@lights,w
 13338  082C  00E7               	movwf	??_setRF_DimmerLights
 13339  082D  0867               	movf	??_setRF_DimmerLights,w
 13340  082E  00E2               	movwf	setProductData@value
 13341  082F  300B               	movlw	11
 13342  0830  319D  253D  3188   	fcall	_setProductData
 13343                           
 13344                           ;RF_Control_B1.c: 448: setProductData(9, product->Data[20 + lights]);
 13345  0833  0020               	movlb	0	; select bank0
 13346  0834  086A               	movf	setRF_DimmerLights@lights,w
 13347  0835  3E14               	addlw	20
 13348  0836  0779               	addwf	_product,w
 13349  0837  00E7               	movwf	??_setRF_DimmerLights
 13350  0838  0867               	movf	??_setRF_DimmerLights,w
 13351  0839  0086               	movwf	6
 13352  083A  3002               	movlw	2	; select bank4/5
 13353  083B  0087               	movwf	7
 13354  083C  0801               	movf	1,w
 13355  083D  00E8               	movwf	??_setRF_DimmerLights+1
 13356  083E  0868               	movf	??_setRF_DimmerLights+1,w
 13357  083F  00E2               	movwf	setProductData@value
 13358  0840  3009               	movlw	9
 13359  0841  319D  253D  3188   	fcall	_setProductData
 13360                           
 13361                           ;RF_Control_B1.c: 449: setProductData(17, product->Data[26 + lights]);
 13362  0844  0020               	movlb	0	; select bank0
 13363  0845  086A               	movf	setRF_DimmerLights@lights,w
 13364  0846  3E1A               	addlw	26
 13365  0847  0779               	addwf	_product,w
 13366  0848  00E7               	movwf	??_setRF_DimmerLights
 13367  0849  0867               	movf	??_setRF_DimmerLights,w
 13368  084A  0086               	movwf	6
 13369  084B  3002               	movlw	2	; select bank4/5
 13370  084C  0087               	movwf	7
 13371  084D  0801               	movf	1,w
 13372  084E  00E8               	movwf	??_setRF_DimmerLights+1
 13373  084F  0868               	movf	??_setRF_DimmerLights+1,w
 13374  0850  00E2               	movwf	setProductData@value
 13375  0851  3011               	movlw	17
 13376  0852  319D  253D  3188   	fcall	_setProductData
 13377                           
 13378                           ;RF_Control_B1.c: 450: if (on == 1) {
 13379  0855  0020               	movlb	0	; select bank0
 13380  0856  0866               	movf	setRF_DimmerLights@on,w
 13381  0857  3A01               	xorlw	1
 13382  0858  1D03               	skipz
 13383  0859  2868               	goto	l8455
 13384                           
 13385                           ;RF_Control_B1.c: 451: setProductData(15, (product->Data[15] | status));
 13386  085A  0879               	movf	_product,w
 13387  085B  3E0F               	addlw	15
 13388  085C  0086               	movwf	6
 13389  085D  3002               	movlw	2	; select bank4/5
 13390  085E  0087               	movwf	7
 13391  085F  0801               	movf	1,w
 13392  0860  0469               	iorwf	setRF_DimmerLights@status,w
 13393  0861  00E7               	movwf	??_setRF_DimmerLights
 13394  0862  0867               	movf	??_setRF_DimmerLights,w
 13395  0863  00E2               	movwf	setProductData@value
 13396  0864  300F               	movlw	15
 13397  0865  319D  253D         	fcall	_setProductData
 13398                           
 13399                           ;RF_Control_B1.c: 452: } else {
 13400  0867  0008               	return
 13401  0868                     l8455:	
 13402                           
 13403                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15]&(~status)));
 13404  0868  0879               	movf	_product,w
 13405  0869  3E0F               	addlw	15
 13406  086A  0086               	movwf	6
 13407  086B  3002               	movlw	2	; select bank4/5
 13408  086C  0087               	movwf	7
 13409  086D  0020               	movlb	0	; select bank0
 13410  086E  0969               	comf	setRF_DimmerLights@status,w
 13411  086F  0501               	andwf	1,w
 13412  0870  00E7               	movwf	??_setRF_DimmerLights
 13413  0871  0867               	movf	??_setRF_DimmerLights,w
 13414  0872  00E2               	movwf	setProductData@value
 13415  0873  300F               	movlw	15
 13416  0874  319D  253D         	fcall	_setProductData
 13417  0876  0008               	return
 13418  0877                     __end_of_setRF_DimmerLights:	
 13419                           
 13420                           	psect	text80
 13421  0AB1                     __ptext80:	
 13422 ;; *************** function _setPercentValue *****************
 13423 ;; Defined at:
 13424 ;;		line 1034 in file "../src/Dimmer_B1.c"
 13425 ;; Parameters:    Size  Location     Type
 13426 ;;  value           1    wreg     unsigned char 
 13427 ;; Auto vars:     Size  Location     Type
 13428 ;;  value           1   62[BANK0 ] unsigned char 
 13429 ;;  i               3   63[BANK0 ] float 
 13430 ;; Return value:  Size  Location     Type
 13431 ;;                  1    wreg      unsigned char 
 13432 ;; Registers used:
 13433 ;;		wreg, status,2, status,0, pclath, cstack
 13434 ;; Tracked objects:
 13435 ;;		On entry : 0/0
 13436 ;;		On exit  : 0/0
 13437 ;;		Unchanged: 0/0
 13438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13440 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13442 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13443 ;;Total ram usage:        6 bytes
 13444 ;; Hardware stack levels used:    1
 13445 ;; Hardware stack levels required when called:    7
 13446 ;; This function calls:
 13447 ;;		___awtoft
 13448 ;;		___ftadd
 13449 ;;		___ftdiv
 13450 ;;		___ftneg
 13451 ;;		___fttol
 13452 ;; This function is called by:
 13453 ;;		_setDimmerLights
 13454 ;;		_setDimmerLights_Adj
 13455 ;;		_Flash_Memory_Initialization
 13456 ;; This function uses a non-reentrant model
 13457 ;;
 13458                           
 13459                           
 13460                           ;psect for function _setPercentValue
 13461  0AB1                     _setPercentValue:	
 13462                           
 13463                           ;incstack = 0
 13464                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13465                           ;setPercentValue@value stored from wreg
 13466  0AB1  0020               	movlb	0	; select bank0
 13467  0AB2  00DE               	movwf	setPercentValue@value
 13468                           
 13469                           ;Dimmer_B1.c: 1042: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 13470  0AB3  3000               	movlw	0
 13471  0AB4  00DF               	movwf	setPercentValue@i
 13472  0AB5  3030               	movlw	48
 13473  0AB6  00E0               	movwf	setPercentValue@i+1
 13474  0AB7  3042               	movlw	66
 13475  0AB8  00E1               	movwf	setPercentValue@i+2
 13476                           
 13477                           ;Dimmer_B1.c: 1043: i /= 100;
 13478  0AB9  3000               	movlw	0
 13479  0ABA  00AE               	movwf	___ftdiv@f2
 13480  0ABB  30C8               	movlw	200
 13481  0ABC  00AF               	movwf	___ftdiv@f2+1
 13482  0ABD  3042               	movlw	66
 13483  0ABE  00B0               	movwf	___ftdiv@f2+2
 13484  0ABF  085F               	movf	setPercentValue@i,w
 13485  0AC0  00B1               	movwf	___ftdiv@f1
 13486  0AC1  0860               	movf	setPercentValue@i+1,w
 13487  0AC2  00B2               	movwf	___ftdiv@f1+1
 13488  0AC3  0861               	movf	setPercentValue@i+2,w
 13489  0AC4  00B3               	movwf	___ftdiv@f1+2
 13490  0AC5  318E  26A7  318A   	fcall	___ftdiv
 13491  0AC8  0020               	movlb	0	; select bank0
 13492  0AC9  082E               	movf	?___ftdiv,w
 13493  0ACA  00DF               	movwf	setPercentValue@i
 13494  0ACB  082F               	movf	?___ftdiv+1,w
 13495  0ACC  00E0               	movwf	setPercentValue@i+1
 13496  0ACD  0830               	movf	?___ftdiv+2,w
 13497  0ACE  00E1               	movwf	setPercentValue@i+2
 13498                           
 13499                           ;Dimmer_B1.c: 1045: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 13500  0ACF  085E               	movf	setPercentValue@value,w
 13501  0AD0  00DC               	movwf	??_setPercentValue
 13502  0AD1  01DD               	clrf	??_setPercentValue+1
 13503  0AD2  09DC               	comf	??_setPercentValue,f
 13504  0AD3  09DD               	comf	??_setPercentValue+1,f
 13505  0AD4  0ADC               	incf	??_setPercentValue,f
 13506  0AD5  1903               	skipnz
 13507  0AD6  0ADD               	incf	??_setPercentValue+1,f
 13508  0AD7  085C               	movf	??_setPercentValue,w
 13509  0AD8  3E38               	addlw	56
 13510  0AD9  00A8               	movwf	___awtoft@c
 13511  0ADA  3000               	movlw	0
 13512  0ADB  3D5D               	addwfc	??_setPercentValue+1,w
 13513  0ADC  00A9               	movwf	___awtoft@c+1
 13514  0ADD  319F  27DE  318A   	fcall	___awtoft
 13515  0AE0  0020               	movlb	0	; select bank0
 13516  0AE1  0828               	movf	?___awtoft,w
 13517  0AE2  00B1               	movwf	___ftdiv@f1
 13518  0AE3  0829               	movf	?___awtoft+1,w
 13519  0AE4  00B2               	movwf	___ftdiv@f1+1
 13520  0AE5  082A               	movf	?___awtoft+2,w
 13521  0AE6  00B3               	movwf	___ftdiv@f1+2
 13522  0AE7  085F               	movf	setPercentValue@i,w
 13523  0AE8  00AE               	movwf	___ftdiv@f2
 13524  0AE9  0860               	movf	setPercentValue@i+1,w
 13525  0AEA  00AF               	movwf	___ftdiv@f2+1
 13526  0AEB  0861               	movf	setPercentValue@i+2,w
 13527  0AEC  00B0               	movwf	___ftdiv@f2+2
 13528  0AED  318E  26A7  318A   	fcall	___ftdiv
 13529  0AF0  0020               	movlb	0	; select bank0
 13530  0AF1  082E               	movf	?___ftdiv,w
 13531  0AF2  00BE               	movwf	___ftneg@f1
 13532  0AF3  082F               	movf	?___ftdiv+1,w
 13533  0AF4  00BF               	movwf	___ftneg@f1+1
 13534  0AF5  0830               	movf	?___ftdiv+2,w
 13535  0AF6  00C0               	movwf	___ftneg@f1+2
 13536  0AF7  319C  2463  318A   	fcall	___ftneg
 13537  0AFA  0020               	movlb	0	; select bank0
 13538  0AFB  083E               	movf	?___ftneg,w
 13539  0AFC  00C4               	movwf	___ftadd@f2
 13540  0AFD  083F               	movf	?___ftneg+1,w
 13541  0AFE  00C5               	movwf	___ftadd@f2+1
 13542  0AFF  0840               	movf	?___ftneg+2,w
 13543  0B00  00C6               	movwf	___ftadd@f2+2
 13544  0B01  3000               	movlw	0
 13545  0B02  00C1               	movwf	___ftadd@f1
 13546  0B03  30C8               	movlw	200
 13547  0B04  00C2               	movwf	___ftadd@f1+1
 13548  0B05  3042               	movlw	66
 13549  0B06  00C3               	movwf	___ftadd@f1+2
 13550  0B07  3184  245A  318A   	fcall	___ftadd
 13551  0B0A  0020               	movlb	0	; select bank0
 13552  0B0B  0841               	movf	?___ftadd,w
 13553  0B0C  00CE               	movwf	___fttol@f1
 13554  0B0D  0842               	movf	?___ftadd+1,w
 13555  0B0E  00CF               	movwf	___fttol@f1+1
 13556  0B0F  0843               	movf	?___ftadd+2,w
 13557  0B10  00D0               	movwf	___fttol@f1+2
 13558  0B11  318C  24EA         	fcall	___fttol
 13559  0B13  0020               	movlb	0	; select bank0
 13560  0B14  084E               	movf	?___fttol,w
 13561  0B15  0008               	return
 13562  0B16                     __end_of_setPercentValue:	
 13563                           
 13564                           	psect	text81
 13565  0CEA                     __ptext81:	
 13566 ;; *************** function ___fttol *****************
 13567 ;; Defined at:
 13568 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13569 ;; Parameters:    Size  Location     Type
 13570 ;;  f1              3   46[BANK0 ] float 
 13571 ;; Auto vars:     Size  Location     Type
 13572 ;;  lval            4   55[BANK0 ] unsigned long 
 13573 ;;  exp1            1   59[BANK0 ] unsigned char 
 13574 ;;  sign1           1   54[BANK0 ] unsigned char 
 13575 ;; Return value:  Size  Location     Type
 13576 ;;                  4   46[BANK0 ] long 
 13577 ;; Registers used:
 13578 ;;		wreg, status,2, status,0
 13579 ;; Tracked objects:
 13580 ;;		On entry : 0/0
 13581 ;;		On exit  : 0/0
 13582 ;;		Unchanged: 0/0
 13583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13584 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13585 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13586 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13587 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13588 ;;Total ram usage:       14 bytes
 13589 ;; Hardware stack levels used:    1
 13590 ;; Hardware stack levels required when called:    5
 13591 ;; This function calls:
 13592 ;;		Nothing
 13593 ;; This function is called by:
 13594 ;;		_getPercentValue
 13595 ;;		_setPercentValue
 13596 ;; This function uses a non-reentrant model
 13597 ;;
 13598                           
 13599                           
 13600                           ;psect for function ___fttol
 13601  0CEA                     ___fttol:	
 13602                           
 13603                           ;incstack = 0
 13604                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13605  0CEA  0020               	movlb	0	; select bank0
 13606  0CEB  084E               	movf	___fttol@f1,w
 13607  0CEC  00D2               	movwf	??___fttol
 13608  0CED  084F               	movf	___fttol@f1+1,w
 13609  0CEE  00D3               	movwf	??___fttol+1
 13610  0CEF  0850               	movf	___fttol@f1+2,w
 13611  0CF0  00D4               	movwf	??___fttol+2
 13612  0CF1  1003               	clrc
 13613  0CF2  0D53               	rlf	??___fttol+1,w
 13614  0CF3  0D54               	rlf	??___fttol+2,w
 13615  0CF4  00D5               	movwf	??___fttol+3
 13616  0CF5  0855               	movf	??___fttol+3,w
 13617  0CF6  00DB               	movwf	___fttol@exp1
 13618  0CF7  08DB               	movf	___fttol@exp1,f
 13619  0CF8  1D03               	skipz
 13620  0CF9  2D03               	goto	l8227
 13621  0CFA  3000               	movlw	0
 13622  0CFB  00D1               	movwf	?___fttol+3
 13623  0CFC  3000               	movlw	0
 13624  0CFD  00D0               	movwf	?___fttol+2
 13625  0CFE  3000               	movlw	0
 13626  0CFF  00CF               	movwf	?___fttol+1
 13627  0D00  3000               	movlw	0
 13628  0D01  00CE               	movwf	?___fttol
 13629  0D02  0008               	return
 13630  0D03                     l8227:	
 13631  0D03  084E               	movf	___fttol@f1,w
 13632  0D04  00D2               	movwf	??___fttol
 13633  0D05  084F               	movf	___fttol@f1+1,w
 13634  0D06  00D3               	movwf	??___fttol+1
 13635  0D07  0850               	movf	___fttol@f1+2,w
 13636  0D08  00D4               	movwf	??___fttol+2
 13637  0D09  3017               	movlw	23
 13638  0D0A                     u8705:	
 13639  0D0A  36D4               	lsrf	??___fttol+2,f
 13640  0D0B  0CD3               	rrf	??___fttol+1,f
 13641  0D0C  0CD2               	rrf	??___fttol,f
 13642  0D0D  0B89               	decfsz	9,f
 13643  0D0E  2D0A               	goto	u8705
 13644  0D0F  0852               	movf	??___fttol,w
 13645  0D10  00D5               	movwf	??___fttol+3
 13646  0D11  0855               	movf	??___fttol+3,w
 13647  0D12  00D6               	movwf	___fttol@sign1
 13648  0D13  17CF               	bsf	___fttol@f1+1,7
 13649  0D14  30FF               	movlw	255
 13650  0D15  05CE               	andwf	___fttol@f1,f
 13651  0D16  30FF               	movlw	255
 13652  0D17  05CF               	andwf	___fttol@f1+1,f
 13653  0D18  3000               	movlw	0
 13654  0D19  05D0               	andwf	___fttol@f1+2,f
 13655  0D1A  084E               	movf	___fttol@f1,w
 13656  0D1B  00D7               	movwf	___fttol@lval
 13657  0D1C  084F               	movf	___fttol@f1+1,w
 13658  0D1D  00D8               	movwf	___fttol@lval+1
 13659  0D1E  0850               	movf	___fttol@f1+2,w
 13660  0D1F  00D9               	movwf	___fttol@lval+2
 13661  0D20  01DA               	clrf	___fttol@lval+3
 13662  0D21  308E               	movlw	142
 13663  0D22  02DB               	subwf	___fttol@exp1,f
 13664  0D23  1FDB               	btfss	___fttol@exp1,7
 13665  0D24  2D41               	goto	l8247
 13666  0D25  085B               	movf	___fttol@exp1,w
 13667  0D26  3A80               	xorlw	128
 13668  0D27  3E8F               	addlw	143
 13669  0D28  1803               	skipnc
 13670  0D29  2D33               	goto	l8245
 13671  0D2A  3000               	movlw	0
 13672  0D2B  00D1               	movwf	?___fttol+3
 13673  0D2C  3000               	movlw	0
 13674  0D2D  00D0               	movwf	?___fttol+2
 13675  0D2E  3000               	movlw	0
 13676  0D2F  00CF               	movwf	?___fttol+1
 13677  0D30  3000               	movlw	0
 13678  0D31  00CE               	movwf	?___fttol
 13679  0D32  0008               	return
 13680  0D33                     l8245:	
 13681  0D33  3001               	movlw	1
 13682  0D34                     u8735:	
 13683  0D34  36DA               	lsrf	___fttol@lval+3,f
 13684  0D35  0CD9               	rrf	___fttol@lval+2,f
 13685  0D36  0CD8               	rrf	___fttol@lval+1,f
 13686  0D37  0CD7               	rrf	___fttol@lval,f
 13687  0D38  0B89               	decfsz	9,f
 13688  0D39  2D34               	goto	u8735
 13689  0D3A  3001               	movlw	1
 13690  0D3B  00D2               	movwf	??___fttol
 13691  0D3C  0852               	movf	??___fttol,w
 13692  0D3D  07DB               	addwf	___fttol@exp1,f
 13693  0D3E  1903               	btfsc	3,2
 13694  0D3F  2D5A               	goto	l8257
 13695  0D40  2D33               	goto	l8245
 13696  0D41                     l8247:	
 13697  0D41  3018               	movlw	24
 13698  0D42  025B               	subwf	___fttol@exp1,w
 13699  0D43  1C03               	skipc
 13700  0D44  2D57               	goto	l8255
 13701  0D45  3000               	movlw	0
 13702  0D46  00D1               	movwf	?___fttol+3
 13703  0D47  3000               	movlw	0
 13704  0D48  00D0               	movwf	?___fttol+2
 13705  0D49  3000               	movlw	0
 13706  0D4A  00CF               	movwf	?___fttol+1
 13707  0D4B  3000               	movlw	0
 13708  0D4C  00CE               	movwf	?___fttol
 13709  0D4D  0008               	return
 13710  0D4E                     l8253:	
 13711  0D4E  3001               	movlw	1
 13712  0D4F                     u8765:	
 13713  0D4F  35D7               	lslf	___fttol@lval,f
 13714  0D50  0DD8               	rlf	___fttol@lval+1,f
 13715  0D51  0DD9               	rlf	___fttol@lval+2,f
 13716  0D52  0DDA               	rlf	___fttol@lval+3,f
 13717  0D53  0B89               	decfsz	9,f
 13718  0D54  2D4F               	goto	u8765
 13719  0D55  3001               	movlw	1
 13720  0D56  02DB               	subwf	___fttol@exp1,f
 13721  0D57                     l8255:	
 13722  0D57  08DB               	movf	___fttol@exp1,f
 13723  0D58  1D03               	skipz
 13724  0D59  2D4E               	goto	l8253
 13725  0D5A                     l8257:	
 13726  0D5A  0856               	movf	___fttol@sign1,w
 13727  0D5B  1903               	btfsc	3,2
 13728  0D5C  2D68               	goto	l8261
 13729  0D5D  09D7               	comf	___fttol@lval,f
 13730  0D5E  09D8               	comf	___fttol@lval+1,f
 13731  0D5F  09D9               	comf	___fttol@lval+2,f
 13732  0D60  09DA               	comf	___fttol@lval+3,f
 13733  0D61  0AD7               	incf	___fttol@lval,f
 13734  0D62  1903               	skipnz
 13735  0D63  0AD8               	incf	___fttol@lval+1,f
 13736  0D64  1903               	skipnz
 13737  0D65  0AD9               	incf	___fttol@lval+2,f
 13738  0D66  1903               	skipnz
 13739  0D67  0ADA               	incf	___fttol@lval+3,f
 13740  0D68                     l8261:	
 13741  0D68  085A               	movf	___fttol@lval+3,w
 13742  0D69  00D1               	movwf	?___fttol+3
 13743  0D6A  0859               	movf	___fttol@lval+2,w
 13744  0D6B  00D0               	movwf	?___fttol+2
 13745  0D6C  0858               	movf	___fttol@lval+1,w
 13746  0D6D  00CF               	movwf	?___fttol+1
 13747  0D6E  0857               	movf	___fttol@lval,w
 13748  0D6F  00CE               	movwf	?___fttol
 13749  0D70  0008               	return
 13750  0D71                     __end_of___fttol:	
 13751                           
 13752                           	psect	text82
 13753  1C63                     __ptext82:	
 13754 ;; *************** function ___ftneg *****************
 13755 ;; Defined at:
 13756 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13757 ;; Parameters:    Size  Location     Type
 13758 ;;  f1              3   30[BANK0 ] float 
 13759 ;; Auto vars:     Size  Location     Type
 13760 ;;		None
 13761 ;; Return value:  Size  Location     Type
 13762 ;;                  3   30[BANK0 ] float 
 13763 ;; Registers used:
 13764 ;;		wreg
 13765 ;; Tracked objects:
 13766 ;;		On entry : 0/0
 13767 ;;		On exit  : 0/0
 13768 ;;		Unchanged: 0/0
 13769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13770 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13773 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13774 ;;Total ram usage:        3 bytes
 13775 ;; Hardware stack levels used:    1
 13776 ;; Hardware stack levels required when called:    5
 13777 ;; This function calls:
 13778 ;;		Nothing
 13779 ;; This function is called by:
 13780 ;;		_getPercentValue
 13781 ;;		_setPercentValue
 13782 ;; This function uses a non-reentrant model
 13783 ;;
 13784                           
 13785                           
 13786                           ;psect for function ___ftneg
 13787  1C63                     ___ftneg:	
 13788                           
 13789                           ;incstack = 0
 13790                           ; Regs used in ___ftneg: [wreg]
 13791  1C63  0020               	movlb	0	; select bank0
 13792  1C64  0840               	movf	___ftneg@f1+2,w
 13793  1C65  043F               	iorwf	___ftneg@f1+1,w
 13794  1C66  043E               	iorwf	___ftneg@f1,w
 13795  1C67  1903               	skipnz
 13796  1C68  0008               	return
 13797  1C69  3080               	movlw	128
 13798  1C6A  06C0               	xorwf	___ftneg@f1+2,f
 13799  1C6B  0008               	return
 13800  1C6C                     __end_of___ftneg:	
 13801                           
 13802                           	psect	text83
 13803  0EA7                     __ptext83:	
 13804 ;; *************** function ___ftdiv *****************
 13805 ;; Defined at:
 13806 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13807 ;; Parameters:    Size  Location     Type
 13808 ;;  f2              3   14[BANK0 ] float 
 13809 ;;  f1              3   17[BANK0 ] float 
 13810 ;; Auto vars:     Size  Location     Type
 13811 ;;  f3              3   25[BANK0 ] float 
 13812 ;;  sign            1   29[BANK0 ] unsigned char 
 13813 ;;  exp             1   28[BANK0 ] unsigned char 
 13814 ;;  cntr            1   24[BANK0 ] unsigned char 
 13815 ;; Return value:  Size  Location     Type
 13816 ;;                  3   14[BANK0 ] float 
 13817 ;; Registers used:
 13818 ;;		wreg, status,2, status,0, pclath, cstack
 13819 ;; Tracked objects:
 13820 ;;		On entry : 0/0
 13821 ;;		On exit  : 0/0
 13822 ;;		Unchanged: 0/0
 13823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13824 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;Total ram usage:       16 bytes
 13829 ;; Hardware stack levels used:    1
 13830 ;; Hardware stack levels required when called:    6
 13831 ;; This function calls:
 13832 ;;		___ftpack
 13833 ;; This function is called by:
 13834 ;;		_getPercentValue
 13835 ;;		_setPercentValue
 13836 ;; This function uses a non-reentrant model
 13837 ;;
 13838                           
 13839                           
 13840                           ;psect for function ___ftdiv
 13841  0EA7                     ___ftdiv:	
 13842                           
 13843                           ;incstack = 0
 13844                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13845  0EA7  0020               	movlb	0	; select bank0
 13846  0EA8  0831               	movf	___ftdiv@f1,w
 13847  0EA9  00B4               	movwf	??___ftdiv
 13848  0EAA  0832               	movf	___ftdiv@f1+1,w
 13849  0EAB  00B5               	movwf	??___ftdiv+1
 13850  0EAC  0833               	movf	___ftdiv@f1+2,w
 13851  0EAD  00B6               	movwf	??___ftdiv+2
 13852  0EAE  1003               	clrc
 13853  0EAF  0D35               	rlf	??___ftdiv+1,w
 13854  0EB0  0D36               	rlf	??___ftdiv+2,w
 13855  0EB1  00B7               	movwf	??___ftdiv+3
 13856  0EB2  0837               	movf	??___ftdiv+3,w
 13857  0EB3  00BC               	movwf	___ftdiv@exp
 13858  0EB4  08BC               	movf	___ftdiv@exp,f
 13859  0EB5  1D03               	skipz
 13860  0EB6  2EBE               	goto	l8127
 13861  0EB7  3000               	movlw	0
 13862  0EB8  00AE               	movwf	?___ftdiv
 13863  0EB9  3000               	movlw	0
 13864  0EBA  00AF               	movwf	?___ftdiv+1
 13865  0EBB  3000               	movlw	0
 13866  0EBC  00B0               	movwf	?___ftdiv+2
 13867  0EBD  0008               	return
 13868  0EBE                     l8127:	
 13869  0EBE  082E               	movf	___ftdiv@f2,w
 13870  0EBF  00B4               	movwf	??___ftdiv
 13871  0EC0  082F               	movf	___ftdiv@f2+1,w
 13872  0EC1  00B5               	movwf	??___ftdiv+1
 13873  0EC2  0830               	movf	___ftdiv@f2+2,w
 13874  0EC3  00B6               	movwf	??___ftdiv+2
 13875  0EC4  1003               	clrc
 13876  0EC5  0D35               	rlf	??___ftdiv+1,w
 13877  0EC6  0D36               	rlf	??___ftdiv+2,w
 13878  0EC7  00B7               	movwf	??___ftdiv+3
 13879  0EC8  0837               	movf	??___ftdiv+3,w
 13880  0EC9  00BD               	movwf	___ftdiv@sign
 13881  0ECA  08BD               	movf	___ftdiv@sign,f
 13882  0ECB  1D03               	skipz
 13883  0ECC  2ED4               	goto	l8133
 13884  0ECD  3000               	movlw	0
 13885  0ECE  00AE               	movwf	?___ftdiv
 13886  0ECF  3000               	movlw	0
 13887  0ED0  00AF               	movwf	?___ftdiv+1
 13888  0ED1  3000               	movlw	0
 13889  0ED2  00B0               	movwf	?___ftdiv+2
 13890  0ED3  0008               	return
 13891  0ED4                     l8133:	
 13892  0ED4  3000               	movlw	0
 13893  0ED5  00B9               	movwf	___ftdiv@f3
 13894  0ED6  3000               	movlw	0
 13895  0ED7  00BA               	movwf	___ftdiv@f3+1
 13896  0ED8  3000               	movlw	0
 13897  0ED9  00BB               	movwf	___ftdiv@f3+2
 13898  0EDA  3089               	movlw	137
 13899  0EDB  073D               	addwf	___ftdiv@sign,w
 13900  0EDC  00B4               	movwf	??___ftdiv
 13901  0EDD  0834               	movf	??___ftdiv,w
 13902  0EDE  02BC               	subwf	___ftdiv@exp,f
 13903  0EDF  0831               	movf	___ftdiv@f1,w
 13904  0EE0  00B4               	movwf	??___ftdiv
 13905  0EE1  0832               	movf	___ftdiv@f1+1,w
 13906  0EE2  00B5               	movwf	??___ftdiv+1
 13907  0EE3  0833               	movf	___ftdiv@f1+2,w
 13908  0EE4  00B6               	movwf	??___ftdiv+2
 13909  0EE5  3010               	movlw	16
 13910  0EE6                     u8505:	
 13911  0EE6  36B6               	lsrf	??___ftdiv+2,f
 13912  0EE7  0CB5               	rrf	??___ftdiv+1,f
 13913  0EE8  0CB4               	rrf	??___ftdiv,f
 13914  0EE9  0B89               	decfsz	9,f
 13915  0EEA  2EE6               	goto	u8505
 13916  0EEB  0834               	movf	??___ftdiv,w
 13917  0EEC  00B7               	movwf	??___ftdiv+3
 13918  0EED  0837               	movf	??___ftdiv+3,w
 13919  0EEE  00BD               	movwf	___ftdiv@sign
 13920  0EEF  082E               	movf	___ftdiv@f2,w
 13921  0EF0  00B4               	movwf	??___ftdiv
 13922  0EF1  082F               	movf	___ftdiv@f2+1,w
 13923  0EF2  00B5               	movwf	??___ftdiv+1
 13924  0EF3  0830               	movf	___ftdiv@f2+2,w
 13925  0EF4  00B6               	movwf	??___ftdiv+2
 13926  0EF5  3010               	movlw	16
 13927  0EF6                     u8515:	
 13928  0EF6  36B6               	lsrf	??___ftdiv+2,f
 13929  0EF7  0CB5               	rrf	??___ftdiv+1,f
 13930  0EF8  0CB4               	rrf	??___ftdiv,f
 13931  0EF9  0B89               	decfsz	9,f
 13932  0EFA  2EF6               	goto	u8515
 13933  0EFB  0834               	movf	??___ftdiv,w
 13934  0EFC  00B7               	movwf	??___ftdiv+3
 13935  0EFD  0837               	movf	??___ftdiv+3,w
 13936  0EFE  06BD               	xorwf	___ftdiv@sign,f
 13937  0EFF  3080               	movlw	128
 13938  0F00  00B4               	movwf	??___ftdiv
 13939  0F01  0834               	movf	??___ftdiv,w
 13940  0F02  05BD               	andwf	___ftdiv@sign,f
 13941  0F03  17B2               	bsf	___ftdiv@f1+1,7
 13942  0F04  30FF               	movlw	255
 13943  0F05  05B1               	andwf	___ftdiv@f1,f
 13944  0F06  30FF               	movlw	255
 13945  0F07  05B2               	andwf	___ftdiv@f1+1,f
 13946  0F08  3000               	movlw	0
 13947  0F09  05B3               	andwf	___ftdiv@f1+2,f
 13948  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 13949  0F0B  30FF               	movlw	255
 13950  0F0C  05AE               	andwf	___ftdiv@f2,f
 13951  0F0D  30FF               	movlw	255
 13952  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 13953  0F0F  3000               	movlw	0
 13954  0F10  05B0               	andwf	___ftdiv@f2+2,f
 13955  0F11  3018               	movlw	24
 13956  0F12  00B4               	movwf	??___ftdiv
 13957  0F13  0834               	movf	??___ftdiv,w
 13958  0F14  00B8               	movwf	___ftdiv@cntr
 13959  0F15                     l8147:	
 13960  0F15  3001               	movlw	1
 13961  0F16                     u8525:	
 13962  0F16  35B9               	lslf	___ftdiv@f3,f
 13963  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 13964  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 13965  0F19  0B89               	decfsz	9,f
 13966  0F1A  2F16               	goto	u8525
 13967  0F1B  0830               	movf	___ftdiv@f2+2,w
 13968  0F1C  0233               	subwf	___ftdiv@f1+2,w
 13969  0F1D  1D03               	skipz
 13970  0F1E  2F25               	goto	u8535
 13971  0F1F  082F               	movf	___ftdiv@f2+1,w
 13972  0F20  0232               	subwf	___ftdiv@f1+1,w
 13973  0F21  1D03               	skipz
 13974  0F22  2F25               	goto	u8535
 13975  0F23  082E               	movf	___ftdiv@f2,w
 13976  0F24  0231               	subwf	___ftdiv@f1,w
 13977  0F25                     u8535:	
 13978  0F25  1C03               	skipc
 13979  0F26  2F2E               	goto	l8155
 13980  0F27  082E               	movf	___ftdiv@f2,w
 13981  0F28  02B1               	subwf	___ftdiv@f1,f
 13982  0F29  082F               	movf	___ftdiv@f2+1,w
 13983  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 13984  0F2B  0830               	movf	___ftdiv@f2+2,w
 13985  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 13986  0F2D  1439               	bsf	___ftdiv@f3,0
 13987  0F2E                     l8155:	
 13988  0F2E  3001               	movlw	1
 13989  0F2F                     u8545:	
 13990  0F2F  35B1               	lslf	___ftdiv@f1,f
 13991  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 13992  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 13993  0F32  0B89               	decfsz	9,f
 13994  0F33  2F2F               	goto	u8545
 13995  0F34  3001               	movlw	1
 13996  0F35  02B8               	subwf	___ftdiv@cntr,f
 13997  0F36  1D03               	btfss	3,2
 13998  0F37  2F15               	goto	l8147
 13999  0F38  0839               	movf	___ftdiv@f3,w
 14000  0F39  00A0               	movwf	___ftpack@arg
 14001  0F3A  083A               	movf	___ftdiv@f3+1,w
 14002  0F3B  00A1               	movwf	___ftpack@arg+1
 14003  0F3C  083B               	movf	___ftdiv@f3+2,w
 14004  0F3D  00A2               	movwf	___ftpack@arg+2
 14005  0F3E  083C               	movf	___ftdiv@exp,w
 14006  0F3F  00B4               	movwf	??___ftdiv
 14007  0F40  0834               	movf	??___ftdiv,w
 14008  0F41  00A3               	movwf	___ftpack@exp
 14009  0F42  083D               	movf	___ftdiv@sign,w
 14010  0F43  00B5               	movwf	??___ftdiv+1
 14011  0F44  0835               	movf	??___ftdiv+1,w
 14012  0F45  00A4               	movwf	___ftpack@sign
 14013  0F46  3189  21EC         	fcall	___ftpack
 14014  0F48  0020               	movlb	0	; select bank0
 14015  0F49  0820               	movf	?___ftpack,w
 14016  0F4A  00AE               	movwf	?___ftdiv
 14017  0F4B  0821               	movf	?___ftpack+1,w
 14018  0F4C  00AF               	movwf	?___ftdiv+1
 14019  0F4D  0822               	movf	?___ftpack+2,w
 14020  0F4E  00B0               	movwf	?___ftdiv+2
 14021  0F4F  0008               	return
 14022  0F50                     __end_of___ftdiv:	
 14023                           
 14024                           	psect	text84
 14025  045A                     __ptext84:	
 14026 ;; *************** function ___ftadd *****************
 14027 ;; Defined at:
 14028 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14029 ;; Parameters:    Size  Location     Type
 14030 ;;  f1              3   33[BANK0 ] float 
 14031 ;;  f2              3   36[BANK0 ] float 
 14032 ;; Auto vars:     Size  Location     Type
 14033 ;;  exp1            1   45[BANK0 ] unsigned char 
 14034 ;;  exp2            1   44[BANK0 ] unsigned char 
 14035 ;;  sign            1   43[BANK0 ] unsigned char 
 14036 ;; Return value:  Size  Location     Type
 14037 ;;                  3   33[BANK0 ] float 
 14038 ;; Registers used:
 14039 ;;		wreg, status,2, status,0, pclath, cstack
 14040 ;; Tracked objects:
 14041 ;;		On entry : 0/0
 14042 ;;		On exit  : 0/0
 14043 ;;		Unchanged: 0/0
 14044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14045 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14046 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14047 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14048 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14049 ;;Total ram usage:       13 bytes
 14050 ;; Hardware stack levels used:    1
 14051 ;; Hardware stack levels required when called:    6
 14052 ;; This function calls:
 14053 ;;		___ftpack
 14054 ;; This function is called by:
 14055 ;;		_getPercentValue
 14056 ;;		_setPercentValue
 14057 ;; This function uses a non-reentrant model
 14058 ;;
 14059                           
 14060                           
 14061                           ;psect for function ___ftadd
 14062  045A                     ___ftadd:	
 14063                           
 14064                           ;incstack = 0
 14065                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14066  045A  0020               	movlb	0	; select bank0
 14067  045B  0841               	movf	___ftadd@f1,w
 14068  045C  00C7               	movwf	??___ftadd
 14069  045D  0842               	movf	___ftadd@f1+1,w
 14070  045E  00C8               	movwf	??___ftadd+1
 14071  045F  0843               	movf	___ftadd@f1+2,w
 14072  0460  00C9               	movwf	??___ftadd+2
 14073  0461  1003               	clrc
 14074  0462  0D48               	rlf	??___ftadd+1,w
 14075  0463  0D49               	rlf	??___ftadd+2,w
 14076  0464  00CA               	movwf	??___ftadd+3
 14077  0465  084A               	movf	??___ftadd+3,w
 14078  0466  00CD               	movwf	___ftadd@exp1
 14079  0467  0844               	movf	___ftadd@f2,w
 14080  0468  00C7               	movwf	??___ftadd
 14081  0469  0845               	movf	___ftadd@f2+1,w
 14082  046A  00C8               	movwf	??___ftadd+1
 14083  046B  0846               	movf	___ftadd@f2+2,w
 14084  046C  00C9               	movwf	??___ftadd+2
 14085  046D  1003               	clrc
 14086  046E  0D48               	rlf	??___ftadd+1,w
 14087  046F  0D49               	rlf	??___ftadd+2,w
 14088  0470  00CA               	movwf	??___ftadd+3
 14089  0471  084A               	movf	??___ftadd+3,w
 14090  0472  00CC               	movwf	___ftadd@exp2
 14091  0473  084D               	movf	___ftadd@exp1,w
 14092  0474  1903               	btfsc	3,2
 14093  0475  2C82               	goto	l8057
 14094  0476  084C               	movf	___ftadd@exp2,w
 14095  0477  024D               	subwf	___ftadd@exp1,w
 14096  0478  1803               	skipnc
 14097  0479  2C89               	goto	l8061
 14098  047A  034D               	decf	___ftadd@exp1,w
 14099  047B  3AFF               	xorlw	255
 14100  047C  074C               	addwf	___ftadd@exp2,w
 14101  047D  00C7               	movwf	??___ftadd
 14102  047E  3019               	movlw	25
 14103  047F  0247               	subwf	??___ftadd,w
 14104  0480  1C03               	skipc
 14105  0481  2C89               	goto	l8061
 14106  0482                     l8057:	
 14107  0482  0844               	movf	___ftadd@f2,w
 14108  0483  00C1               	movwf	?___ftadd
 14109  0484  0845               	movf	___ftadd@f2+1,w
 14110  0485  00C2               	movwf	?___ftadd+1
 14111  0486  0846               	movf	___ftadd@f2+2,w
 14112  0487  00C3               	movwf	?___ftadd+2
 14113  0488  0008               	return
 14114  0489                     l8061:	
 14115  0489  084C               	movf	___ftadd@exp2,w
 14116  048A  1903               	btfsc	3,2
 14117  048B  0008               	return
 14118  048C  084D               	movf	___ftadd@exp1,w
 14119  048D  024C               	subwf	___ftadd@exp2,w
 14120  048E  1803               	skipnc
 14121  048F  2C98               	goto	l8067
 14122  0490  034C               	decf	___ftadd@exp2,w
 14123  0491  3AFF               	xorlw	255
 14124  0492  074D               	addwf	___ftadd@exp1,w
 14125  0493  00C7               	movwf	??___ftadd
 14126  0494  3019               	movlw	25
 14127  0495  0247               	subwf	??___ftadd,w
 14128  0496  1803               	btfsc	3,0
 14129  0497  0008               	return
 14130  0498                     l8067:	
 14131  0498  3006               	movlw	6
 14132  0499  00C7               	movwf	??___ftadd
 14133  049A  0847               	movf	??___ftadd,w
 14134  049B  00CB               	movwf	___ftadd@sign
 14135  049C  1BC3               	btfsc	___ftadd@f1+2,7
 14136  049D  17CB               	bsf	___ftadd@sign,7
 14137  049E  1BC6               	btfsc	___ftadd@f2+2,7
 14138  049F  174B               	bsf	___ftadd@sign,6
 14139  04A0  17C2               	bsf	___ftadd@f1+1,7
 14140  04A1  30FF               	movlw	255
 14141  04A2  05C1               	andwf	___ftadd@f1,f
 14142  04A3  30FF               	movlw	255
 14143  04A4  05C2               	andwf	___ftadd@f1+1,f
 14144  04A5  3000               	movlw	0
 14145  04A6  05C3               	andwf	___ftadd@f1+2,f
 14146  04A7  17C5               	bsf	___ftadd@f2+1,7
 14147  04A8  30FF               	movlw	255
 14148  04A9  05C4               	andwf	___ftadd@f2,f
 14149  04AA  30FF               	movlw	255
 14150  04AB  05C5               	andwf	___ftadd@f2+1,f
 14151  04AC  3000               	movlw	0
 14152  04AD  05C6               	andwf	___ftadd@f2+2,f
 14153  04AE  084C               	movf	___ftadd@exp2,w
 14154  04AF  024D               	subwf	___ftadd@exp1,w
 14155  04B0  1803               	skipnc
 14156  04B1  2CD4               	goto	l8089
 14157  04B2                     l8079:	
 14158  04B2  3001               	movlw	1
 14159  04B3                     u8345:	
 14160  04B3  35C4               	lslf	___ftadd@f2,f
 14161  04B4  0DC5               	rlf	___ftadd@f2+1,f
 14162  04B5  0DC6               	rlf	___ftadd@f2+2,f
 14163  04B6  0B89               	decfsz	9,f
 14164  04B7  2CB3               	goto	u8345
 14165  04B8  3001               	movlw	1
 14166  04B9  02CC               	subwf	___ftadd@exp2,f
 14167  04BA  084C               	movf	___ftadd@exp2,w
 14168  04BB  064D               	xorwf	___ftadd@exp1,w
 14169  04BC  1903               	skipnz
 14170  04BD  2CCF               	goto	l8087
 14171  04BE  3001               	movlw	1
 14172  04BF  02CB               	subwf	___ftadd@sign,f
 14173  04C0  084B               	movf	___ftadd@sign,w
 14174  04C1  3907               	andlw	7
 14175  04C2  1903               	btfsc	3,2
 14176  04C3  2CCF               	goto	l8087
 14177  04C4  2CB2               	goto	l8079
 14178  04C5                     l8085:	
 14179  04C5  3001               	movlw	1
 14180  04C6                     u8375:	
 14181  04C6  36C3               	lsrf	___ftadd@f1+2,f
 14182  04C7  0CC2               	rrf	___ftadd@f1+1,f
 14183  04C8  0CC1               	rrf	___ftadd@f1,f
 14184  04C9  0B89               	decfsz	9,f
 14185  04CA  2CC6               	goto	u8375
 14186  04CB  3001               	movlw	1
 14187  04CC  00C7               	movwf	??___ftadd
 14188  04CD  0847               	movf	??___ftadd,w
 14189  04CE  07CD               	addwf	___ftadd@exp1,f
 14190  04CF                     l8087:	
 14191  04CF  084D               	movf	___ftadd@exp1,w
 14192  04D0  064C               	xorwf	___ftadd@exp2,w
 14193  04D1  1903               	btfsc	3,2
 14194  04D2  2CF9               	goto	l2782
 14195  04D3  2CC5               	goto	l8085
 14196  04D4                     l8089:	
 14197  04D4  084D               	movf	___ftadd@exp1,w
 14198  04D5  024C               	subwf	___ftadd@exp2,w
 14199  04D6  1803               	skipnc
 14200  04D7  2CF9               	goto	l2782
 14201  04D8                     l8091:	
 14202  04D8  3001               	movlw	1
 14203  04D9                     u8405:	
 14204  04D9  35C1               	lslf	___ftadd@f1,f
 14205  04DA  0DC2               	rlf	___ftadd@f1+1,f
 14206  04DB  0DC3               	rlf	___ftadd@f1+2,f
 14207  04DC  0B89               	decfsz	9,f
 14208  04DD  2CD9               	goto	u8405
 14209  04DE  3001               	movlw	1
 14210  04DF  02CD               	subwf	___ftadd@exp1,f
 14211  04E0  084C               	movf	___ftadd@exp2,w
 14212  04E1  064D               	xorwf	___ftadd@exp1,w
 14213  04E2  1903               	skipnz
 14214  04E3  2CF5               	goto	l8099
 14215  04E4  3001               	movlw	1
 14216  04E5  02CB               	subwf	___ftadd@sign,f
 14217  04E6  084B               	movf	___ftadd@sign,w
 14218  04E7  3907               	andlw	7
 14219  04E8  1903               	btfsc	3,2
 14220  04E9  2CF5               	goto	l8099
 14221  04EA  2CD8               	goto	l8091
 14222  04EB                     l8097:	
 14223  04EB  3001               	movlw	1
 14224  04EC                     u8435:	
 14225  04EC  36C6               	lsrf	___ftadd@f2+2,f
 14226  04ED  0CC5               	rrf	___ftadd@f2+1,f
 14227  04EE  0CC4               	rrf	___ftadd@f2,f
 14228  04EF  0B89               	decfsz	9,f
 14229  04F0  2CEC               	goto	u8435
 14230  04F1  3001               	movlw	1
 14231  04F2  00C7               	movwf	??___ftadd
 14232  04F3  0847               	movf	??___ftadd,w
 14233  04F4  07CC               	addwf	___ftadd@exp2,f
 14234  04F5                     l8099:	
 14235  04F5  084D               	movf	___ftadd@exp1,w
 14236  04F6  064C               	xorwf	___ftadd@exp2,w
 14237  04F7  1D03               	skipz
 14238  04F8  2CEB               	goto	l8097
 14239  04F9                     l2782:	
 14240  04F9  1FCB               	btfss	___ftadd@sign,7
 14241  04FA  2D0B               	goto	l8103
 14242  04FB  30FF               	movlw	255
 14243  04FC  06C1               	xorwf	___ftadd@f1,f
 14244  04FD  30FF               	movlw	255
 14245  04FE  06C2               	xorwf	___ftadd@f1+1,f
 14246  04FF  30FF               	movlw	255
 14247  0500  06C3               	xorwf	___ftadd@f1+2,f
 14248  0501  3001               	movlw	1
 14249  0502  07C1               	addwf	___ftadd@f1,f
 14250  0503  3000               	movlw	0
 14251  0504  1803               	skipnc
 14252  0505  3001               	movlw	1
 14253  0506  07C2               	addwf	___ftadd@f1+1,f
 14254  0507  3000               	movlw	0
 14255  0508  1803               	skipnc
 14256  0509  3001               	movlw	1
 14257  050A  07C3               	addwf	___ftadd@f1+2,f
 14258  050B                     l8103:	
 14259  050B  1F4B               	btfss	___ftadd@sign,6
 14260  050C  2D1D               	goto	l8107
 14261  050D  30FF               	movlw	255
 14262  050E  06C4               	xorwf	___ftadd@f2,f
 14263  050F  30FF               	movlw	255
 14264  0510  06C5               	xorwf	___ftadd@f2+1,f
 14265  0511  30FF               	movlw	255
 14266  0512  06C6               	xorwf	___ftadd@f2+2,f
 14267  0513  3001               	movlw	1
 14268  0514  07C4               	addwf	___ftadd@f2,f
 14269  0515  3000               	movlw	0
 14270  0516  1803               	skipnc
 14271  0517  3001               	movlw	1
 14272  0518  07C5               	addwf	___ftadd@f2+1,f
 14273  0519  3000               	movlw	0
 14274  051A  1803               	skipnc
 14275  051B  3001               	movlw	1
 14276  051C  07C6               	addwf	___ftadd@f2+2,f
 14277  051D                     l8107:	
 14278  051D  01CB               	clrf	___ftadd@sign
 14279  051E  0841               	movf	___ftadd@f1,w
 14280  051F  07C4               	addwf	___ftadd@f2,f
 14281  0520  0842               	movf	___ftadd@f1+1,w
 14282  0521  3DC5               	addwfc	___ftadd@f2+1,f
 14283  0522  0843               	movf	___ftadd@f1+2,w
 14284  0523  3DC6               	addwfc	___ftadd@f2+2,f
 14285  0524  1FC6               	btfss	___ftadd@f2+2,7
 14286  0525  2D38               	goto	l8117
 14287  0526  30FF               	movlw	255
 14288  0527  06C4               	xorwf	___ftadd@f2,f
 14289  0528  30FF               	movlw	255
 14290  0529  06C5               	xorwf	___ftadd@f2+1,f
 14291  052A  30FF               	movlw	255
 14292  052B  06C6               	xorwf	___ftadd@f2+2,f
 14293  052C  3001               	movlw	1
 14294  052D  07C4               	addwf	___ftadd@f2,f
 14295  052E  3000               	movlw	0
 14296  052F  1803               	skipnc
 14297  0530  3001               	movlw	1
 14298  0531  07C5               	addwf	___ftadd@f2+1,f
 14299  0532  3000               	movlw	0
 14300  0533  1803               	skipnc
 14301  0534  3001               	movlw	1
 14302  0535  07C6               	addwf	___ftadd@f2+2,f
 14303  0536  01CB               	clrf	___ftadd@sign
 14304  0537  0ACB               	incf	___ftadd@sign,f
 14305  0538                     l8117:	
 14306  0538  0844               	movf	___ftadd@f2,w
 14307  0539  00A0               	movwf	___ftpack@arg
 14308  053A  0845               	movf	___ftadd@f2+1,w
 14309  053B  00A1               	movwf	___ftpack@arg+1
 14310  053C  0846               	movf	___ftadd@f2+2,w
 14311  053D  00A2               	movwf	___ftpack@arg+2
 14312  053E  084D               	movf	___ftadd@exp1,w
 14313  053F  00C7               	movwf	??___ftadd
 14314  0540  0847               	movf	??___ftadd,w
 14315  0541  00A3               	movwf	___ftpack@exp
 14316  0542  084B               	movf	___ftadd@sign,w
 14317  0543  00C8               	movwf	??___ftadd+1
 14318  0544  0848               	movf	??___ftadd+1,w
 14319  0545  00A4               	movwf	___ftpack@sign
 14320  0546  3189  21EC         	fcall	___ftpack
 14321  0548  0020               	movlb	0	; select bank0
 14322  0549  0820               	movf	?___ftpack,w
 14323  054A  00C1               	movwf	?___ftadd
 14324  054B  0821               	movf	?___ftpack+1,w
 14325  054C  00C2               	movwf	?___ftadd+1
 14326  054D  0822               	movf	?___ftpack+2,w
 14327  054E  00C3               	movwf	?___ftadd+2
 14328  054F  0008               	return
 14329  0550                     __end_of___ftadd:	
 14330                           
 14331                           	psect	text85
 14332  1FDE                     __ptext85:	
 14333 ;; *************** function ___awtoft *****************
 14334 ;; Defined at:
 14335 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14336 ;; Parameters:    Size  Location     Type
 14337 ;;  c               2    8[BANK0 ] int 
 14338 ;; Auto vars:     Size  Location     Type
 14339 ;;  sign            1   13[BANK0 ] unsigned char 
 14340 ;; Return value:  Size  Location     Type
 14341 ;;                  3    8[BANK0 ] float 
 14342 ;; Registers used:
 14343 ;;		wreg, status,2, status,0, pclath, cstack
 14344 ;; Tracked objects:
 14345 ;;		On entry : 0/0
 14346 ;;		On exit  : 0/0
 14347 ;;		Unchanged: 0/0
 14348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14349 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;Total ram usage:        6 bytes
 14354 ;; Hardware stack levels used:    1
 14355 ;; Hardware stack levels required when called:    6
 14356 ;; This function calls:
 14357 ;;		___ftpack
 14358 ;; This function is called by:
 14359 ;;		_getPercentValue
 14360 ;;		_setPercentValue
 14361 ;; This function uses a non-reentrant model
 14362 ;;
 14363                           
 14364                           
 14365                           ;psect for function ___awtoft
 14366  1FDE                     ___awtoft:	
 14367                           
 14368                           ;incstack = 0
 14369                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14370  1FDE  0020               	movlb	0	; select bank0
 14371  1FDF  01AD               	clrf	___awtoft@sign
 14372  1FE0  1FA9               	btfss	___awtoft@c+1,7
 14373  1FE1  2FE9               	goto	l8045
 14374  1FE2  09A8               	comf	___awtoft@c,f
 14375  1FE3  09A9               	comf	___awtoft@c+1,f
 14376  1FE4  0AA8               	incf	___awtoft@c,f
 14377  1FE5  1903               	skipnz
 14378  1FE6  0AA9               	incf	___awtoft@c+1,f
 14379  1FE7  01AD               	clrf	___awtoft@sign
 14380  1FE8  0AAD               	incf	___awtoft@sign,f
 14381  1FE9                     l8045:	
 14382  1FE9  0828               	movf	___awtoft@c,w
 14383  1FEA  00A0               	movwf	___ftpack@arg
 14384  1FEB  0829               	movf	___awtoft@c+1,w
 14385  1FEC  00A1               	movwf	___ftpack@arg+1
 14386  1FED  01A2               	clrf	___ftpack@arg+2
 14387  1FEE  308E               	movlw	142
 14388  1FEF  00AB               	movwf	??___awtoft
 14389  1FF0  082B               	movf	??___awtoft,w
 14390  1FF1  00A3               	movwf	___ftpack@exp
 14391  1FF2  082D               	movf	___awtoft@sign,w
 14392  1FF3  00AC               	movwf	??___awtoft+1
 14393  1FF4  082C               	movf	??___awtoft+1,w
 14394  1FF5  00A4               	movwf	___ftpack@sign
 14395  1FF6  3189  21EC         	fcall	___ftpack
 14396  1FF8  0020               	movlb	0	; select bank0
 14397  1FF9  0820               	movf	?___ftpack,w
 14398  1FFA  00A8               	movwf	?___awtoft
 14399  1FFB  0821               	movf	?___ftpack+1,w
 14400  1FFC  00A9               	movwf	?___awtoft+1
 14401  1FFD  0822               	movf	?___ftpack+2,w
 14402  1FFE  00AA               	movwf	?___awtoft+2
 14403  1FFF  0008               	return
 14404  2000                     __end_of___awtoft:	
 14405                           
 14406                           	psect	text86
 14407  09EC                     __ptext86:	
 14408 ;; *************** function ___ftpack *****************
 14409 ;; Defined at:
 14410 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14411 ;; Parameters:    Size  Location     Type
 14412 ;;  arg             3    0[BANK0 ] unsigned um
 14413 ;;  exp             1    3[BANK0 ] unsigned char 
 14414 ;;  sign            1    4[BANK0 ] unsigned char 
 14415 ;; Auto vars:     Size  Location     Type
 14416 ;;		None
 14417 ;; Return value:  Size  Location     Type
 14418 ;;                  3    0[BANK0 ] float 
 14419 ;; Registers used:
 14420 ;;		wreg, status,2, status,0
 14421 ;; Tracked objects:
 14422 ;;		On entry : 0/0
 14423 ;;		On exit  : 0/0
 14424 ;;		Unchanged: 0/0
 14425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14426 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14428 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14429 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14430 ;;Total ram usage:        8 bytes
 14431 ;; Hardware stack levels used:    1
 14432 ;; Hardware stack levels required when called:    5
 14433 ;; This function calls:
 14434 ;;		Nothing
 14435 ;; This function is called by:
 14436 ;;		___awtoft
 14437 ;;		___ftadd
 14438 ;;		___ftdiv
 14439 ;;		___ftmul
 14440 ;; This function uses a non-reentrant model
 14441 ;;
 14442                           
 14443                           
 14444                           ;psect for function ___ftpack
 14445  09EC                     ___ftpack:	
 14446                           
 14447                           ;incstack = 0
 14448                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14449  09EC  0020               	movlb	0	; select bank0
 14450  09ED  0823               	movf	___ftpack@exp,w
 14451  09EE  1903               	btfsc	3,2
 14452  09EF  29F5               	goto	l7995
 14453  09F0  0822               	movf	___ftpack@arg+2,w
 14454  09F1  0421               	iorwf	___ftpack@arg+1,w
 14455  09F2  0420               	iorwf	___ftpack@arg,w
 14456  09F3  1D03               	skipz
 14457  09F4  2A06               	goto	l8001
 14458  09F5                     l7995:	
 14459  09F5  3000               	movlw	0
 14460  09F6  00A0               	movwf	?___ftpack
 14461  09F7  3000               	movlw	0
 14462  09F8  00A1               	movwf	?___ftpack+1
 14463  09F9  3000               	movlw	0
 14464  09FA  00A2               	movwf	?___ftpack+2
 14465  09FB  0008               	return
 14466  09FC                     l7999:	
 14467  09FC  3001               	movlw	1
 14468  09FD  00A5               	movwf	??___ftpack
 14469  09FE  0825               	movf	??___ftpack,w
 14470  09FF  07A3               	addwf	___ftpack@exp,f
 14471  0A00  3001               	movlw	1
 14472  0A01                     u8135:	
 14473  0A01  36A2               	lsrf	___ftpack@arg+2,f
 14474  0A02  0CA1               	rrf	___ftpack@arg+1,f
 14475  0A03  0CA0               	rrf	___ftpack@arg,f
 14476  0A04  0B89               	decfsz	9,f
 14477  0A05  2A01               	goto	u8135
 14478  0A06                     l8001:	
 14479  0A06  30FE               	movlw	254
 14480  0A07  0522               	andwf	___ftpack@arg+2,w
 14481  0A08  1903               	btfsc	3,2
 14482  0A09  2A1F               	goto	l2753
 14483  0A0A  29FC               	goto	l7999
 14484  0A0B                     l8003:	
 14485  0A0B  3001               	movlw	1
 14486  0A0C  00A5               	movwf	??___ftpack
 14487  0A0D  0825               	movf	??___ftpack,w
 14488  0A0E  07A3               	addwf	___ftpack@exp,f
 14489  0A0F  3001               	movlw	1
 14490  0A10  07A0               	addwf	___ftpack@arg,f
 14491  0A11  3000               	movlw	0
 14492  0A12  1803               	skipnc
 14493  0A13  3001               	movlw	1
 14494  0A14  07A1               	addwf	___ftpack@arg+1,f
 14495  0A15  3000               	movlw	0
 14496  0A16  1803               	skipnc
 14497  0A17  3001               	movlw	1
 14498  0A18  07A2               	addwf	___ftpack@arg+2,f
 14499  0A19  3001               	movlw	1
 14500  0A1A                     u8155:	
 14501  0A1A  36A2               	lsrf	___ftpack@arg+2,f
 14502  0A1B  0CA1               	rrf	___ftpack@arg+1,f
 14503  0A1C  0CA0               	rrf	___ftpack@arg,f
 14504  0A1D  0B89               	decfsz	9,f
 14505  0A1E  2A1A               	goto	u8155
 14506  0A1F                     l2753:	
 14507  0A1F  30FF               	movlw	255
 14508  0A20  0522               	andwf	___ftpack@arg+2,w
 14509  0A21  1903               	btfsc	3,2
 14510  0A22  2A2C               	goto	l8011
 14511  0A23  2A0B               	goto	l8003
 14512  0A24                     l8009:	
 14513  0A24  3001               	movlw	1
 14514  0A25  02A3               	subwf	___ftpack@exp,f
 14515  0A26  3001               	movlw	1
 14516  0A27                     u8175:	
 14517  0A27  35A0               	lslf	___ftpack@arg,f
 14518  0A28  0DA1               	rlf	___ftpack@arg+1,f
 14519  0A29  0DA2               	rlf	___ftpack@arg+2,f
 14520  0A2A  0B89               	decfsz	9,f
 14521  0A2B  2A27               	goto	u8175
 14522  0A2C                     l8011:	
 14523  0A2C  1FA1               	btfss	___ftpack@arg+1,7
 14524  0A2D  2A24               	goto	l8009
 14525  0A2E  1823               	btfsc	___ftpack@exp,0
 14526  0A2F  2A36               	goto	l2759
 14527  0A30  30FF               	movlw	255
 14528  0A31  05A0               	andwf	___ftpack@arg,f
 14529  0A32  307F               	movlw	127
 14530  0A33  05A1               	andwf	___ftpack@arg+1,f
 14531  0A34  30FF               	movlw	255
 14532  0A35  05A2               	andwf	___ftpack@arg+2,f
 14533  0A36                     l2759:	
 14534  0A36  1003               	clrc
 14535  0A37  0CA3               	rrf	___ftpack@exp,f
 14536  0A38  0823               	movf	___ftpack@exp,w
 14537  0A39  00A5               	movwf	??___ftpack
 14538  0A3A  01A6               	clrf	??___ftpack+1
 14539  0A3B  01A7               	clrf	??___ftpack+2
 14540  0A3C  3010               	movlw	16
 14541  0A3D                     u8205:	
 14542  0A3D  35A5               	lslf	??___ftpack,f
 14543  0A3E  0DA6               	rlf	??___ftpack+1,f
 14544  0A3F  0DA7               	rlf	??___ftpack+2,f
 14545  0A40  0B89               	decfsz	9,f
 14546  0A41  2A3D               	goto	u8205
 14547  0A42  0825               	movf	??___ftpack,w
 14548  0A43  04A0               	iorwf	___ftpack@arg,f
 14549  0A44  0826               	movf	??___ftpack+1,w
 14550  0A45  04A1               	iorwf	___ftpack@arg+1,f
 14551  0A46  0827               	movf	??___ftpack+2,w
 14552  0A47  04A2               	iorwf	___ftpack@arg+2,f
 14553  0A48  0824               	movf	___ftpack@sign,w
 14554  0A49  1903               	btfsc	3,2
 14555  0A4A  0008               	return
 14556  0A4B  17A2               	bsf	___ftpack@arg+2,7
 14557  0A4C  0008               	return
 14558  0A4D                     __end_of___ftpack:	
 14559                           
 14560                           	psect	text87
 14561  13A6                     __ptext87:	
 14562 ;; *************** function _setLED *****************
 14563 ;; Defined at:
 14564 ;;		line 76 in file "../src/LED_B1.c"
 14565 ;; Parameters:    Size  Location     Type
 14566 ;;  led             1    wreg     unsigned char 
 14567 ;;  command         1    2[BANK0 ] unsigned char 
 14568 ;; Auto vars:     Size  Location     Type
 14569 ;;  led             1    3[BANK0 ] unsigned char 
 14570 ;; Return value:  Size  Location     Type
 14571 ;;		None               void
 14572 ;; Registers used:
 14573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14574 ;; Tracked objects:
 14575 ;;		On entry : 0/0
 14576 ;;		On exit  : 0/0
 14577 ;;		Unchanged: 0/0
 14578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14579 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;Total ram usage:        2 bytes
 14584 ;; Hardware stack levels used:    1
 14585 ;; Hardware stack levels required when called:    6
 14586 ;; This function calls:
 14587 ;;		_LedPointSelect
 14588 ;; This function is called by:
 14589 ;;		_setDimmerLights
 14590 ;;		_setLED_Initialization
 14591 ;;		_Exception_Main
 14592 ;;		_setSw_Initialization
 14593 ;; This function uses a non-reentrant model
 14594 ;;
 14595                           
 14596                           
 14597                           ;psect for function _setLED
 14598  13A6                     _setLED:	
 14599                           
 14600                           ;incstack = 0
 14601                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14602                           ;setLED@led stored from wreg
 14603  13A6  0020               	movlb	0	; select bank0
 14604  13A7  00A3               	movwf	setLED@led
 14605                           
 14606                           ;LED_B1.c: 77: LedPointSelect(led);
 14607  13A8  0823               	movf	setLED@led,w
 14608  13A9  319C  24F5  3193   	fcall	_LedPointSelect
 14609                           
 14610                           ;LED_B1.c: 78: if (command == 0) {
 14611  13AC  0020               	movlb	0	; select bank0
 14612  13AD  08A2               	movf	setLED@command,f
 14613  13AE  1D03               	skipz
 14614  13AF  2BB5               	goto	l8733
 14615                           
 14616                           ;LED_B1.c: 107: if (led == 99) {
 14617  13B0  0823               	movf	setLED@led,w
 14618  13B1  3A63               	xorlw	99
 14619  13B2  1D03               	skipz
 14620  13B3  2BB5               	goto	l8733
 14621                           
 14622                           ;LED_B1.c: 111: RB5 = 1;
 14623  13B4  168D               	bsf	13,5	;volatile
 14624  13B5                     l8733:	
 14625                           
 14626                           ;LED_B1.c: 113: }
 14627                           ;LED_B1.c: 115: }
 14628                           ;LED_B1.c: 116: if (command == 1) {
 14629  13B5  0822               	movf	setLED@command,w
 14630  13B6  3A01               	xorlw	1
 14631  13B7  1D03               	skipz
 14632  13B8  2BBE               	goto	l8739
 14633                           
 14634                           ;LED_B1.c: 145: if (led == 99) {
 14635  13B9  0823               	movf	setLED@led,w
 14636  13BA  3A63               	xorlw	99
 14637  13BB  1D03               	skipz
 14638  13BC  2BBE               	goto	l8739
 14639                           
 14640                           ;LED_B1.c: 149: RB5 = 0;
 14641  13BD  128D               	bcf	13,5	;volatile
 14642  13BE                     l8739:	
 14643                           
 14644                           ;LED_B1.c: 151: }
 14645                           ;LED_B1.c: 153: }
 14646                           ;LED_B1.c: 154: if (command == 10) {
 14647  13BE  0822               	movf	setLED@command,w
 14648  13BF  3A0A               	xorlw	10
 14649  13C0  1D03               	skipz
 14650  13C1  2BD4               	goto	l8747
 14651                           
 14652                           ;LED_B1.c: 155: LED->GO = 0;
 14653  13C2  0021               	movlb	1	; select bank1
 14654  13C3  084E               	movf	_LED^(0+128),w
 14655  13C4  0086               	movwf	6
 14656  13C5  3001               	movlw	1	; select bank2/3
 14657  13C6  0087               	movwf	7
 14658  13C7  1081               	bcf	1,1
 14659                           
 14660                           ;LED_B1.c: 156: LED->Time = 0;
 14661  13C8  0A4E               	incf	_LED^(0+128),w
 14662  13C9  0086               	movwf	6
 14663  13CA  3001               	movlw	1	; select bank2/3
 14664  13CB  0087               	movwf	7
 14665  13CC  3000               	movlw	0
 14666  13CD  3FC0               	movwi [0]fsr1
 14667  13CE  3FC1               	movwi [1]fsr1
 14668                           
 14669                           ;LED_B1.c: 185: if (led == 99) {
 14670  13CF  0020               	movlb	0	; select bank0
 14671  13D0  0823               	movf	setLED@led,w
 14672  13D1  3A63               	xorlw	99
 14673  13D2  1903               	btfsc	3,2
 14674                           
 14675                           ;LED_B1.c: 189: RB5 = 1;
 14676  13D3  168D               	bsf	13,5	;volatile
 14677  13D4                     l8747:	
 14678                           
 14679                           ;LED_B1.c: 191: }
 14680                           ;LED_B1.c: 193: }
 14681                           ;LED_B1.c: 194: if (command == 11) {
 14682  13D4  0822               	movf	setLED@command,w
 14683  13D5  3A0B               	xorlw	11
 14684  13D6  1D03               	skipz
 14685  13D7  0008               	return
 14686                           
 14687                           ;LED_B1.c: 195: LED->GO = 1;
 14688  13D8  0021               	movlb	1	; select bank1
 14689  13D9  084E               	movf	_LED^(0+128),w
 14690  13DA  0086               	movwf	6
 14691  13DB  3001               	movlw	1	; select bank2/3
 14692  13DC  0087               	movwf	7
 14693  13DD  1481               	bsf	1,1
 14694  13DE  0008               	return
 14695  13DF                     __end_of_setLED:	
 14696                           
 14697                           	psect	text88
 14698  1CF5                     __ptext88:	
 14699 ;; *************** function _LedPointSelect *****************
 14700 ;; Defined at:
 14701 ;;		line 7 in file "../src/LED_B1.c"
 14702 ;; Parameters:    Size  Location     Type
 14703 ;;  led             1    wreg     unsigned char 
 14704 ;; Auto vars:     Size  Location     Type
 14705 ;;  led             1    1[BANK0 ] unsigned char 
 14706 ;; Return value:  Size  Location     Type
 14707 ;;		None               void
 14708 ;; Registers used:
 14709 ;;		wreg
 14710 ;; Tracked objects:
 14711 ;;		On entry : 0/0
 14712 ;;		On exit  : 0/0
 14713 ;;		Unchanged: 0/0
 14714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14718 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;Total ram usage:        2 bytes
 14720 ;; Hardware stack levels used:    1
 14721 ;; Hardware stack levels required when called:    5
 14722 ;; This function calls:
 14723 ;;		Nothing
 14724 ;; This function is called by:
 14725 ;;		_setLED_Initialization
 14726 ;;		_setLED
 14727 ;;		_setLED_Main
 14728 ;; This function uses a non-reentrant model
 14729 ;;
 14730                           
 14731                           
 14732                           ;psect for function _LedPointSelect
 14733  1CF5                     _LedPointSelect:	
 14734                           
 14735                           ;incstack = 0
 14736                           ; Regs used in _LedPointSelect: [wreg]
 14737                           ;LedPointSelect@led stored from wreg
 14738  1CF5  0020               	movlb	0	; select bank0
 14739  1CF6  00A1               	movwf	LedPointSelect@led
 14740                           
 14741                           ;LED_B1.c: 24: if (led == 99) {
 14742  1CF7  0821               	movf	LedPointSelect@led,w
 14743  1CF8  3A63               	xorlw	99
 14744  1CF9  1D03               	skipz
 14745  1CFA  0008               	return
 14746                           
 14747                           ;LED_B1.c: 25: LED = &VarErrLED;
 14748  1CFB  3069               	movlw	_VarErrLED& (0+255)
 14749  1CFC  00A0               	movwf	??_LedPointSelect
 14750  1CFD  0820               	movf	??_LedPointSelect,w
 14751  1CFE  0021               	movlb	1	; select bank1
 14752  1CFF  00CE               	movwf	_LED^(0+128)
 14753  1D00  0008               	return
 14754  1D01                     __end_of_LedPointSelect:	
 14755                           
 14756                           	psect	text89
 14757  1D4B                     __ptext89:	
 14758 ;; *************** function _setDimmerLights_Line *****************
 14759 ;; Defined at:
 14760 ;;		line 706 in file "../src/Dimmer_B1.c"
 14761 ;; Parameters:    Size  Location     Type
 14762 ;;  lights          1    wreg     unsigned char 
 14763 ;; Auto vars:     Size  Location     Type
 14764 ;;  lights          1    0[BANK0 ] unsigned char 
 14765 ;; Return value:  Size  Location     Type
 14766 ;;		None               void
 14767 ;; Registers used:
 14768 ;;		wreg
 14769 ;; Tracked objects:
 14770 ;;		On entry : 0/0
 14771 ;;		On exit  : 0/0
 14772 ;;		Unchanged: 0/0
 14773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14775 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14777 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14778 ;;Total ram usage:        1 bytes
 14779 ;; Hardware stack levels used:    1
 14780 ;; Hardware stack levels required when called:    5
 14781 ;; This function calls:
 14782 ;;		Nothing
 14783 ;; This function is called by:
 14784 ;;		_setDimmerLights
 14785 ;;		_setDimmerLights_Adj
 14786 ;; This function uses a non-reentrant model
 14787 ;;
 14788                           
 14789                           
 14790                           ;psect for function _setDimmerLights_Line
 14791  1D4B                     _setDimmerLights_Line:	
 14792                           
 14793                           ;incstack = 0
 14794                           ; Regs used in _setDimmerLights_Line: [wreg]
 14795                           ;setDimmerLights_Line@lights stored from wreg
 14796  1D4B  0020               	movlb	0	; select bank0
 14797  1D4C  00A0               	movwf	setDimmerLights_Line@lights
 14798                           
 14799                           ;Dimmer_B1.c: 707: Dimmer.LoadGO = 1;
 14800  1D4D  0021               	movlb	1	; select bank1
 14801  1D4E  1546               	bsf	_Dimmer^(0+128),2	;volatile
 14802                           
 14803                           ;Dimmer_B1.c: 709: DimmerLights1.Line = 0;
 14804  1D4F  0022               	movlb	2	; select bank2
 14805  1D50  135D               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 14806                           
 14807                           ;Dimmer_B1.c: 718: if (lights == 1) {
 14808  1D51  0020               	movlb	0	; select bank0
 14809  1D52  0820               	movf	setDimmerLights_Line@lights,w
 14810  1D53  3A01               	xorlw	1
 14811  1D54  1D03               	skipz
 14812  1D55  0008               	return
 14813                           
 14814                           ;Dimmer_B1.c: 719: DimmerLights1.Line = 1;
 14815  1D56  0022               	movlb	2	; select bank2
 14816  1D57  175D               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 14817  1D58  0008               	return
 14818  1D59                     __end_of_setDimmerLights_Line:	
 14819                           
 14820                           	psect	text90
 14821  1EAF                     __ptext90:	
 14822 ;; *************** function _getDimmerLights_Allow_Condition *****************
 14823 ;; Defined at:
 14824 ;;		line 586 in file "../src/Dimmer_B1.c"
 14825 ;; Parameters:    Size  Location     Type
 14826 ;;  lights          1    wreg     unsigned char 
 14827 ;; Auto vars:     Size  Location     Type
 14828 ;;  lights          1    0[COMMON] unsigned char 
 14829 ;;  allow           1    2[BANK0 ] unsigned char 
 14830 ;; Return value:  Size  Location     Type
 14831 ;;                  1    wreg      unsigned char 
 14832 ;; Registers used:
 14833 ;;		wreg, status,2, pclath, cstack
 14834 ;; Tracked objects:
 14835 ;;		On entry : 0/0
 14836 ;;		On exit  : 0/0
 14837 ;;		Unchanged: 0/0
 14838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14840 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;Total ram usage:        3 bytes
 14844 ;; Hardware stack levels used:    1
 14845 ;; Hardware stack levels required when called:    6
 14846 ;; This function calls:
 14847 ;;		_getLoad_OK
 14848 ;; This function is called by:
 14849 ;;		_setDimmerLights_AdjOn
 14850 ;;		_setDimmerLights_Main
 14851 ;; This function uses a non-reentrant model
 14852 ;;
 14853                           
 14854                           
 14855                           ;psect for function _getDimmerLights_Allow_Condition
 14856  1EAF                     _getDimmerLights_Allow_Condition:	
 14857                           
 14858                           ;Dimmer_B1.c: 587: char allow = 0;
 14859                           
 14860                           ;incstack = 0
 14861                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 14862  1EAF  0020               	movlb	0	; select bank0
 14863  1EB0  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 14864                           
 14865                           ;Dimmer_B1.c: 594: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 14866  1EB1  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14867  1EB2  0AA3               	incf	_getDimmerLights_Allow_Condition$2172,f
 14868  1EB3  319C  244B  319E   	fcall	_getLoad_OK
 14869  1EB6  3800               	iorlw	0
 14870  1EB7  1D03               	skipz
 14871  1EB8  2EBE               	goto	l8689
 14872  1EB9  0021               	movlb	1	; select bank1
 14873  1EBA  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 14874  1EBB  2EBE               	goto	l8689
 14875  1EBC  0020               	movlb	0	; select bank0
 14876  1EBD  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14877  1EBE                     l8689:	
 14878  1EBE  0020               	movlb	0	; select bank0
 14879  1EBF  0823               	movf	_getDimmerLights_Allow_Condition$2172,w
 14880  1EC0  00A1               	movwf	??_getDimmerLights_Allow_Condition
 14881  1EC1  0821               	movf	??_getDimmerLights_Allow_Condition,w
 14882  1EC2  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 14883                           
 14884                           ;Dimmer_B1.c: 619: return allow;
 14885  1EC3  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 14886  1EC4  0008               	return
 14887  1EC5                     __end_of_getDimmerLights_Allow_Condition:	
 14888                           
 14889                           	psect	text91
 14890  1C4B                     __ptext91:	
 14891 ;; *************** function _getLoad_OK *****************
 14892 ;; Defined at:
 14893 ;;		line 265 in file "../src/OverLoad_B1.c"
 14894 ;; Parameters:    Size  Location     Type
 14895 ;;		None
 14896 ;; Auto vars:     Size  Location     Type
 14897 ;;  ok              1    0[BANK0 ] unsigned char 
 14898 ;; Return value:  Size  Location     Type
 14899 ;;                  1    wreg      unsigned char 
 14900 ;; Registers used:
 14901 ;;		wreg, status,2
 14902 ;; Tracked objects:
 14903 ;;		On entry : 0/0
 14904 ;;		On exit  : 0/0
 14905 ;;		Unchanged: 0/0
 14906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14908 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14911 ;;Total ram usage:        1 bytes
 14912 ;; Hardware stack levels used:    1
 14913 ;; Hardware stack levels required when called:    5
 14914 ;; This function calls:
 14915 ;;		Nothing
 14916 ;; This function is called by:
 14917 ;;		_DimmerLights_Main
 14918 ;;		_getDimmerLights_Allow_Condition
 14919 ;; This function uses a non-reentrant model
 14920 ;;
 14921                           
 14922                           
 14923                           ;psect for function _getLoad_OK
 14924  1C4B                     _getLoad_OK:	
 14925                           
 14926                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 14927                           
 14928                           ;incstack = 0
 14929                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14930  1C4B  3000               	movlw	0
 14931  1C4C  0022               	movlb	2	; select bank2
 14932  1C4D  1BA5               	btfsc	_Load^(0+256),7
 14933  1C4E  3001               	movlw	1
 14934  1C4F  0020               	movlb	0	; select bank0
 14935  1C50  00A0               	movwf	getLoad_OK@ok
 14936                           
 14937                           ;OverLoad_B1.c: 267: return ok;
 14938  1C51  0820               	movf	getLoad_OK@ok,w
 14939  1C52  0008               	return
 14940  1C53                     __end_of_getLoad_OK:	
 14941                           
 14942                           	psect	text92
 14943  1C92                     __ptext92:	
 14944 ;; *************** function _getMain_LightsStatus *****************
 14945 ;; Defined at:
 14946 ;;		line 375 in file "../src/Main_B1.c"
 14947 ;; Parameters:    Size  Location     Type
 14948 ;;		None
 14949 ;; Auto vars:     Size  Location     Type
 14950 ;;  status          1    0[BANK0 ] unsigned char 
 14951 ;; Return value:  Size  Location     Type
 14952 ;;                  1    wreg      unsigned char 
 14953 ;; Registers used:
 14954 ;;		wreg, status,2
 14955 ;; Tracked objects:
 14956 ;;		On entry : 0/0
 14957 ;;		On exit  : 0/0
 14958 ;;		Unchanged: 0/0
 14959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14961 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14963 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14964 ;;Total ram usage:        1 bytes
 14965 ;; Hardware stack levels used:    1
 14966 ;; Hardware stack levels required when called:    5
 14967 ;; This function calls:
 14968 ;;		Nothing
 14969 ;; This function is called by:
 14970 ;;		_DimmerLights_Main
 14971 ;;		_Flash_Memory_Main
 14972 ;;		_Exception_Main
 14973 ;;		_Load_Main
 14974 ;; This function uses a non-reentrant model
 14975 ;;
 14976                           
 14977                           
 14978                           ;psect for function _getMain_LightsStatus
 14979  1C92                     _getMain_LightsStatus:	
 14980                           
 14981                           ;Main_B1.c: 376: char status = 0;
 14982                           
 14983                           ;incstack = 0
 14984                           ; Regs used in _getMain_LightsStatus: [wreg+status,2]
 14985  1C92  0020               	movlb	0	; select bank0
 14986  1C93  01A0               	clrf	getMain_LightsStatus@status
 14987                           
 14988                           ;Main_B1.c: 383: status = DimmerLights1.Status == 1 ? 1 : 0;
 14989  1C94  3000               	movlw	0
 14990  1C95  0022               	movlb	2	; select bank2
 14991  1C96  18D5               	btfsc	(_DimmerLights1^(0+256)+2),1	;volatile
 14992  1C97  3001               	movlw	1
 14993  1C98  0020               	movlb	0	; select bank0
 14994  1C99  00A0               	movwf	getMain_LightsStatus@status
 14995                           
 14996                           ;Main_B1.c: 422: return status;
 14997  1C9A  0820               	movf	getMain_LightsStatus@status,w
 14998  1C9B  0008               	return
 14999  1C9C                     __end_of_getMain_LightsStatus:	
 15000                           
 15001                           	psect	text93
 15002  1232                     __ptext93:	
 15003 ;; *************** function _getMain_All_Error_Status *****************
 15004 ;; Defined at:
 15005 ;;		line 426 in file "../src/Main_B1.c"
 15006 ;; Parameters:    Size  Location     Type
 15007 ;;  command         1    wreg     unsigned char 
 15008 ;; Auto vars:     Size  Location     Type
 15009 ;;  command         1    5[BANK0 ] unsigned char 
 15010 ;;  status          1    6[BANK0 ] unsigned char 
 15011 ;; Return value:  Size  Location     Type
 15012 ;;                  1    wreg      unsigned char 
 15013 ;; Registers used:
 15014 ;;		wreg, status,2, status,0
 15015 ;; Tracked objects:
 15016 ;;		On entry : 0/0
 15017 ;;		On exit  : 0/0
 15018 ;;		Unchanged: 0/0
 15019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15021 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;Total ram usage:        7 bytes
 15025 ;; Hardware stack levels used:    1
 15026 ;; Hardware stack levels required when called:    5
 15027 ;; This function calls:
 15028 ;;		Nothing
 15029 ;; This function is called by:
 15030 ;;		_DimmerLights_Main
 15031 ;;		_Exception_Main
 15032 ;;		_Load_Main
 15033 ;;		_setTemp_Main
 15034 ;;		_setRF_Main
 15035 ;;		_getRxData
 15036 ;;		_setSw_Main
 15037 ;; This function uses a non-reentrant model
 15038 ;;
 15039                           
 15040                           
 15041                           ;psect for function _getMain_All_Error_Status
 15042  1232                     _getMain_All_Error_Status:	
 15043                           
 15044                           ;incstack = 0
 15045                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15046                           ;getMain_All_Error_Status@command stored from wreg
 15047  1232  0020               	movlb	0	; select bank0
 15048  1233  00A5               	movwf	getMain_All_Error_Status@command
 15049                           
 15050                           ;Main_B1.c: 427: char status = 0;
 15051  1234  01A6               	clrf	getMain_All_Error_Status@status
 15052                           
 15053                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 15054  1235  08A6               	movf	getMain_All_Error_Status@status,f
 15055  1236  1D03               	skipz
 15056  1237  2A4C               	goto	l8707
 15057  1238  0825               	movf	getMain_All_Error_Status@command,w
 15058  1239  3A02               	xorlw	2
 15059  123A  1903               	skipnz
 15060  123B  2A4C               	goto	l8707
 15061                           
 15062                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 15063  123C  0021               	movlb	1	; select bank1
 15064  123D  18D7               	btfsc	_Temp^(0+128),1
 15065  123E  2A43               	goto	l8705
 15066  123F  0020               	movlb	0	; select bank0
 15067  1240  01A1               	clrf	_getMain_All_Error_Status$3424
 15068  1241  01A2               	clrf	_getMain_All_Error_Status$3424+1
 15069  1242  2A48               	goto	l1421
 15070  1243                     l8705:	
 15071  1243  3002               	movlw	2
 15072  1244  0020               	movlb	0	; select bank0
 15073  1245  00A1               	movwf	_getMain_All_Error_Status$3424
 15074  1246  3000               	movlw	0
 15075  1247  00A2               	movwf	_getMain_All_Error_Status$3424+1
 15076  1248                     l1421:	
 15077  1248  0821               	movf	_getMain_All_Error_Status$3424,w
 15078  1249  00A0               	movwf	??_getMain_All_Error_Status
 15079  124A  0820               	movf	??_getMain_All_Error_Status,w
 15080  124B  00A6               	movwf	getMain_All_Error_Status@status
 15081  124C                     l8707:	
 15082                           
 15083                           ;Main_B1.c: 440: }
 15084                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15085  124C  08A6               	movf	getMain_All_Error_Status@status,f
 15086  124D  1D03               	skipz
 15087  124E  2A63               	goto	l1422
 15088  124F  0825               	movf	getMain_All_Error_Status@command,w
 15089  1250  3A03               	xorlw	3
 15090  1251  1903               	skipnz
 15091  1252  2A63               	goto	l1422
 15092                           
 15093                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15094  1253  0022               	movlb	2	; select bank2
 15095  1254  1AA5               	btfsc	_Load^(0+256),5
 15096  1255  2A5A               	goto	l8715
 15097  1256  0020               	movlb	0	; select bank0
 15098  1257  01A3               	clrf	_getMain_All_Error_Status$3425
 15099  1258  01A4               	clrf	_getMain_All_Error_Status$3425+1
 15100  1259  2A5F               	goto	l1426
 15101  125A                     l8715:	
 15102  125A  3003               	movlw	3
 15103  125B  0020               	movlb	0	; select bank0
 15104  125C  00A3               	movwf	_getMain_All_Error_Status$3425
 15105  125D  3000               	movlw	0
 15106  125E  00A4               	movwf	_getMain_All_Error_Status$3425+1
 15107  125F                     l1426:	
 15108  125F  0823               	movf	_getMain_All_Error_Status$3425,w
 15109  1260  00A0               	movwf	??_getMain_All_Error_Status
 15110  1261  0820               	movf	??_getMain_All_Error_Status,w
 15111  1262  00A6               	movwf	getMain_All_Error_Status@status
 15112  1263                     l1422:	
 15113                           
 15114                           ;Main_B1.c: 447: }
 15115                           ;Main_B1.c: 463: return status;
 15116  1263  0826               	movf	getMain_All_Error_Status@status,w
 15117  1264  0008               	return
 15118  1265                     __end_of_getMain_All_Error_Status:	
 15119                           
 15120                           	psect	text94
 15121  1C88                     __ptext94:	
 15122 ;; *************** function _DimmerLights_Initialization *****************
 15123 ;; Defined at:
 15124 ;;		line 341 in file "../src/Dimmer_B1.c"
 15125 ;; Parameters:    Size  Location     Type
 15126 ;;		None
 15127 ;; Auto vars:     Size  Location     Type
 15128 ;;		None
 15129 ;; Return value:  Size  Location     Type
 15130 ;;		None               void
 15131 ;; Registers used:
 15132 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15133 ;; Tracked objects:
 15134 ;;		On entry : 0/0
 15135 ;;		On exit  : 0/0
 15136 ;;		Unchanged: 0/0
 15137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15141 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;Total ram usage:        1 bytes
 15143 ;; Hardware stack levels used:    1
 15144 ;; Hardware stack levels required when called:    7
 15145 ;; This function calls:
 15146 ;;		_setDimmerLights_Initialization
 15147 ;; This function is called by:
 15148 ;;		_main
 15149 ;; This function uses a non-reentrant model
 15150 ;;
 15151                           
 15152                           
 15153                           ;psect for function _DimmerLights_Initialization
 15154  1C88                     _DimmerLights_Initialization:	
 15155                           
 15156                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15157                           
 15158                           ;incstack = 0
 15159                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15160  1C88  3053               	movlw	_DimmerLights1& (0+255)
 15161  1C89  0020               	movlb	0	; select bank0
 15162  1C8A  00A4               	movwf	??_DimmerLights_Initialization
 15163  1C8B  0824               	movf	??_DimmerLights_Initialization,w
 15164  1C8C  0021               	movlb	1	; select bank1
 15165  1C8D  00CC               	movwf	_DimmerLights11^(0+128)
 15166                           
 15167                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15168  1C8E  3001               	movlw	1
 15169  1C8F  3192  2201         	fcall	_setDimmerLights_Initialization
 15170  1C91  0008               	return
 15171  1C92                     __end_of_DimmerLights_Initialization:	
 15172                           
 15173                           	psect	text95
 15174  1201                     __ptext95:	
 15175 ;; *************** function _setDimmerLights_Initialization *****************
 15176 ;; Defined at:
 15177 ;;		line 365 in file "../src/Dimmer_B1.c"
 15178 ;; Parameters:    Size  Location     Type
 15179 ;;  lights          1    wreg     unsigned char 
 15180 ;; Auto vars:     Size  Location     Type
 15181 ;;  lights          1    3[BANK0 ] unsigned char 
 15182 ;; Return value:  Size  Location     Type
 15183 ;;		None               void
 15184 ;; Registers used:
 15185 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15186 ;; Tracked objects:
 15187 ;;		On entry : 0/0
 15188 ;;		On exit  : 0/0
 15189 ;;		Unchanged: 0/0
 15190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15193 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15194 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15195 ;;Total ram usage:        2 bytes
 15196 ;; Hardware stack levels used:    1
 15197 ;; Hardware stack levels required when called:    6
 15198 ;; This function calls:
 15199 ;;		_DimmerLightsPointSelect
 15200 ;; This function is called by:
 15201 ;;		_DimmerLights_Initialization
 15202 ;; This function uses a non-reentrant model
 15203 ;;
 15204                           
 15205                           
 15206                           ;psect for function _setDimmerLights_Initialization
 15207  1201                     _setDimmerLights_Initialization:	
 15208                           
 15209                           ;incstack = 0
 15210                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15211                           ;setDimmerLights_Initialization@lights stored from wreg
 15212  1201  0020               	movlb	0	; select bank0
 15213  1202  00A3               	movwf	setDimmerLights_Initialization@lights
 15214                           
 15215                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15216  1203  0823               	movf	setDimmerLights_Initialization@lights,w
 15217  1204  319C  24B2  3192   	fcall	_DimmerLightsPointSelect
 15218                           
 15219                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15220  1207  3007               	movlw	7
 15221  1208  0020               	movlb	0	; select bank0
 15222  1209  00A2               	movwf	??_setDimmerLights_Initialization
 15223  120A  086F               	movf	_DimmerLights,w
 15224  120B  3E08               	addlw	8
 15225  120C  0086               	movwf	6
 15226  120D  3001               	movlw	1	; select bank2/3
 15227  120E  0087               	movwf	7
 15228  120F  0822               	movf	??_setDimmerLights_Initialization,w
 15229  1210  0081               	movwf	1
 15230                           
 15231                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(70*0.8));
 15232  1211  3038               	movlw	56
 15233  1212  00A2               	movwf	??_setDimmerLights_Initialization
 15234  1213  086F               	movf	_DimmerLights,w
 15235  1214  3E06               	addlw	6
 15236  1215  0086               	movwf	6
 15237  1216  3001               	movlw	1	; select bank2/3
 15238  1217  0087               	movwf	7
 15239  1218  0822               	movf	??_setDimmerLights_Initialization,w
 15240  1219  0081               	movwf	1
 15241                           
 15242                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15243  121A  300C               	movlw	12
 15244  121B  00A2               	movwf	??_setDimmerLights_Initialization
 15245  121C  086F               	movf	_DimmerLights,w
 15246  121D  3E09               	addlw	9
 15247  121E  0086               	movwf	6
 15248  121F  3001               	movlw	1	; select bank2/3
 15249  1220  0087               	movwf	7
 15250  1221  0822               	movf	??_setDimmerLights_Initialization,w
 15251  1222  0081               	movwf	1
 15252                           
 15253                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15254  1223  086F               	movf	_DimmerLights,w
 15255  1224  3E06               	addlw	6
 15256  1225  0086               	movwf	6
 15257  1226  3001               	movlw	1	; select bank2/3
 15258  1227  0087               	movwf	7
 15259  1228  0801               	movf	1,w
 15260  1229  00A2               	movwf	??_setDimmerLights_Initialization
 15261  122A  086F               	movf	_DimmerLights,w
 15262  122B  3E04               	addlw	4
 15263  122C  0086               	movwf	6
 15264  122D  3001               	movlw	1	; select bank2/3
 15265  122E  0087               	movwf	7
 15266  122F  0822               	movf	??_setDimmerLights_Initialization,w
 15267  1230  0081               	movwf	1
 15268  1231  0008               	return
 15269  1232                     __end_of_setDimmerLights_Initialization:	
 15270                           
 15271                           	psect	text96
 15272  1C1D                     __ptext96:	
 15273 ;; *************** function _DelayOff_Main *****************
 15274 ;; Defined at:
 15275 ;;		line 41 in file "../src/DelayOff_B1.c"
 15276 ;; Parameters:    Size  Location     Type
 15277 ;;		None
 15278 ;; Auto vars:     Size  Location     Type
 15279 ;;		None
 15280 ;; Return value:  Size  Location     Type
 15281 ;;		None               void
 15282 ;; Registers used:
 15283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15284 ;; Tracked objects:
 15285 ;;		On entry : 0/0
 15286 ;;		On exit  : 0/0
 15287 ;;		Unchanged: 0/0
 15288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15293 ;;Total ram usage:        0 bytes
 15294 ;; Hardware stack levels used:    1
 15295 ;; Hardware stack levels required when called:   11
 15296 ;; This function calls:
 15297 ;;		_DlyOff_Main
 15298 ;; This function is called by:
 15299 ;;		_main
 15300 ;; This function uses a non-reentrant model
 15301 ;;
 15302                           
 15303                           
 15304                           ;psect for function _DelayOff_Main
 15305  1C1D                     _DelayOff_Main:	
 15306                           
 15307                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15308                           
 15309                           ;incstack = 0
 15310                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15311  1C1D  3001               	movlw	1
 15312  1C1E  3188  20D2         	fcall	_DlyOff_Main
 15313  1C20  0008               	return
 15314  1C21                     __end_of_DelayOff_Main:	
 15315                           
 15316                           	psect	text97
 15317  08D2                     __ptext97:	
 15318 ;; *************** function _DlyOff_Main *****************
 15319 ;; Defined at:
 15320 ;;		line 61 in file "../src/DelayOff_B1.c"
 15321 ;; Parameters:    Size  Location     Type
 15322 ;;  sw              1    wreg     unsigned char 
 15323 ;; Auto vars:     Size  Location     Type
 15324 ;;  sw              1   78[BANK0 ] unsigned char 
 15325 ;; Return value:  Size  Location     Type
 15326 ;;		None               void
 15327 ;; Registers used:
 15328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15329 ;; Tracked objects:
 15330 ;;		On entry : 0/0
 15331 ;;		On exit  : 0/0
 15332 ;;		Unchanged: 0/0
 15333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15337 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15338 ;;Total ram usage:        3 bytes
 15339 ;; Hardware stack levels used:    1
 15340 ;; Hardware stack levels required when called:   10
 15341 ;; This function calls:
 15342 ;;		_DelayOffPointSelect
 15343 ;;		_setBuz
 15344 ;;		_setDimmerLights_ErrorClose
 15345 ;; This function is called by:
 15346 ;;		_DelayOff_Main
 15347 ;; This function uses a non-reentrant model
 15348 ;;
 15349                           
 15350                           
 15351                           ;psect for function _DlyOff_Main
 15352  08D2                     _DlyOff_Main:	
 15353                           
 15354                           ;incstack = 0
 15355                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15356                           ;DlyOff_Main@sw stored from wreg
 15357  08D2  0020               	movlb	0	; select bank0
 15358  08D3  00EE               	movwf	DlyOff_Main@sw
 15359                           
 15360                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15361  08D4  086E               	movf	DlyOff_Main@sw,w
 15362  08D5  319C  24A7  3188   	fcall	_DelayOffPointSelect
 15363                           
 15364                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15365  08D8  0875               	movf	_DelayOff,w
 15366  08D9  0086               	movwf	6
 15367  08DA  3001               	movlw	1	; select bank2/3
 15368  08DB  0087               	movwf	7
 15369  08DC  1C81               	btfss	1,1
 15370  08DD  0008               	return
 15371                           
 15372                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15373  08DE  0875               	movf	_DelayOff,w
 15374  08DF  3E02               	addlw	2
 15375  08E0  0086               	movwf	6
 15376  08E1  3001               	movlw	1	; select bank2/3
 15377  08E2  0087               	movwf	7
 15378  08E3  3001               	movlw	1
 15379  08E4  0781               	addwf	1,f
 15380  08E5  3141               	addfsr 1,1
 15381  08E6  1803               	skipnc
 15382  08E7  0A81               	incf	1,f
 15383                           
 15384                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15385  08E8  0875               	movf	_DelayOff,w
 15386  08E9  3E02               	addlw	2
 15387  08EA  0086               	movwf	6
 15388  08EB  3001               	movlw	1	; select bank2/3
 15389  08EC  0087               	movwf	7
 15390  08ED  3F40               	moviw [0]fsr1
 15391  08EE  0020               	movlb	0	; select bank0
 15392  08EF  00EC               	movwf	??_DlyOff_Main
 15393  08F0  3F41               	moviw [1]fsr1
 15394  08F1  00ED               	movwf	??_DlyOff_Main+1
 15395  08F2  3017               	movlw	23
 15396  08F3  026D               	subwf	??_DlyOff_Main+1,w
 15397  08F4  3070               	movlw	112
 15398  08F5  1903               	skipnz
 15399  08F6  026C               	subwf	??_DlyOff_Main,w
 15400  08F7  1C03               	skipc
 15401  08F8  0008               	return
 15402                           
 15403                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15404  08F9  0875               	movf	_DelayOff,w
 15405  08FA  3E02               	addlw	2
 15406  08FB  0086               	movwf	6
 15407  08FC  3001               	movlw	1	; select bank2/3
 15408  08FD  0087               	movwf	7
 15409  08FE  3000               	movlw	0
 15410  08FF  3FC0               	movwi [0]fsr1
 15411  0900  3FC1               	movwi [1]fsr1
 15412                           
 15413                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15414  0901  3001               	movlw	1
 15415  0902  00EC               	movwf	??_DlyOff_Main
 15416  0903  0875               	movf	_DelayOff,w
 15417  0904  3E04               	addlw	4
 15418  0905  0086               	movwf	6
 15419  0906  3001               	movlw	1	; select bank2/3
 15420  0907  0087               	movwf	7
 15421  0908  086C               	movf	??_DlyOff_Main,w
 15422  0909  0781               	addwf	1,f
 15423                           
 15424                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15425  090A  0875               	movf	_DelayOff,w
 15426  090B  3E04               	addlw	4
 15427  090C  0086               	movwf	6
 15428  090D  3001               	movlw	1	; select bank2/3
 15429  090E  0087               	movwf	7
 15430  090F  0A75               	incf	_DelayOff,w
 15431  0910  0084               	movwf	4
 15432  0911  3001               	movlw	1	; select bank2/3
 15433  0912  0085               	movwf	5
 15434  0913  0800               	movf	0,w
 15435  0914  0201               	subwf	1,w
 15436  0915  1C03               	skipc
 15437  0916  0008               	return
 15438                           
 15439                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15440  0917  0875               	movf	_DelayOff,w
 15441  0918  3E04               	addlw	4
 15442  0919  0086               	movwf	6
 15443  091A  3001               	movlw	1	; select bank2/3
 15444  091B  0087               	movwf	7
 15445  091C  0181               	clrf	1
 15446                           
 15447                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15448  091D  0875               	movf	_DelayOff,w
 15449  091E  0086               	movwf	6
 15450  091F  3001               	movlw	1	; select bank2/3
 15451  0920  0087               	movwf	7
 15452  0921  1081               	bcf	1,1
 15453                           
 15454                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15455  0922  3064               	movlw	100
 15456  0923  00A9               	movwf	setBuz@time
 15457  0924  3000               	movlw	0
 15458  0925  00AA               	movwf	setBuz@time+1
 15459  0926  3001               	movlw	1
 15460  0927  3197  27A7  3188   	fcall	_setBuz
 15461                           
 15462                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15463  092A  0020               	movlb	0	; select bank0
 15464  092B  086E               	movf	DlyOff_Main@sw,w
 15465  092C  3189  212F         	fcall	_setDimmerLights_ErrorClose
 15466  092E  0008               	return
 15467  092F                     __end_of_DlyOff_Main:	
 15468                           
 15469                           	psect	text98
 15470  092F                     __ptext98:	
 15471 ;; *************** function _setDimmerLights_ErrorClose *****************
 15472 ;; Defined at:
 15473 ;;		line 846 in file "../src/Dimmer_B1.c"
 15474 ;; Parameters:    Size  Location     Type
 15475 ;;  lights          1    wreg     unsigned char 
 15476 ;; Auto vars:     Size  Location     Type
 15477 ;;  lights          1    1[BANK1 ] unsigned char 
 15478 ;;  i               2    2[BANK1 ] int 
 15479 ;;  count           1    0[BANK1 ] unsigned char 
 15480 ;; Return value:  Size  Location     Type
 15481 ;;		None               void
 15482 ;; Registers used:
 15483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15484 ;; Tracked objects:
 15485 ;;		On entry : 0/0
 15486 ;;		On exit  : 0/0
 15487 ;;		Unchanged: 0/0
 15488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15490 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15492 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15493 ;;Total ram usage:        5 bytes
 15494 ;; Hardware stack levels used:    1
 15495 ;; Hardware stack levels required when called:    9
 15496 ;; This function calls:
 15497 ;;		_DimmerLightsPointSelect
 15498 ;;		_getDimmerLights_Status
 15499 ;;		_setDimmerLights_SwOff
 15500 ;; This function is called by:
 15501 ;;		_DlyOff_Main
 15502 ;;		_setControl_Lights_Table
 15503 ;; This function uses a non-reentrant model
 15504 ;;
 15505                           
 15506                           
 15507                           ;psect for function _setDimmerLights_ErrorClose
 15508  092F                     _setDimmerLights_ErrorClose:	
 15509                           
 15510                           ;incstack = 0
 15511                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15512                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15513  092F  0021               	movlb	1	; select bank1
 15514  0930  00EA               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15515                           
 15516                           ;Dimmer_B1.c: 847: if (lights == 255) {
 15517  0931  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15518  0932  3AFF               	xorlw	255
 15519  0933  1D03               	skipz
 15520  0934  296E               	goto	l8589
 15521                           
 15522                           ;Dimmer_B1.c: 849: char count = 1;
 15523  0935  01E9               	clrf	setDimmerLights_ErrorClose@count^(0+128)
 15524  0936  0AE9               	incf	setDimmerLights_ErrorClose@count^(0+128),f
 15525                           
 15526                           ;Dimmer_B1.c: 857: for (int i = 0; i < count; i++) {
 15527  0937  01EB               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15528  0938  01EC               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15529  0939                     l8587:	
 15530  0939  086C               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15531  093A  3A80               	xorlw	128
 15532  093B  0020               	movlb	0	; select bank0
 15533  093C  00EB               	movwf	??_setDimmerLights_ErrorClose
 15534  093D  3080               	movlw	128
 15535  093E  026B               	subwf	??_setDimmerLights_ErrorClose,w
 15536  093F  1D03               	skipz
 15537  0940  2944               	goto	u9215
 15538  0941  0021               	movlb	1	; select bank1
 15539  0942  0869               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15540  0943  026B               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15541  0944                     u9215:	
 15542  0944  1803               	btfsc	3,0
 15543  0945  0008               	return
 15544                           
 15545                           ;Dimmer_B1.c: 858: DimmerLightsPointSelect(i + 1);
 15546  0946  0021               	movlb	1	; select bank1
 15547  0947  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15548  0948  3E01               	addlw	1
 15549  0949  319C  24B2  3189   	fcall	_DimmerLightsPointSelect
 15550                           
 15551                           ;Dimmer_B1.c: 859: if (getDimmerLights_Status(i + 1) == 1) {
 15552  094C  0021               	movlb	1	; select bank1
 15553  094D  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15554  094E  3E01               	addlw	1
 15555  094F  319D  2597  3189   	fcall	_getDimmerLights_Status
 15556  0952  3A01               	xorlw	1
 15557  0953  1D03               	skipz
 15558  0954  2968               	goto	l8585
 15559                           
 15560                           ;Dimmer_B1.c: 860: DimmerLights->SwFlag = 1;
 15561  0955  0020               	movlb	0	; select bank0
 15562  0956  086F               	movf	_DimmerLights,w
 15563  0957  3E0B               	addlw	11
 15564  0958  0086               	movwf	6
 15565  0959  3001               	movlw	1	; select bank2/3
 15566  095A  0087               	movwf	7
 15567  095B  1481               	bsf	1,1
 15568                           
 15569                           ;Dimmer_B1.c: 861: DimmerLights->Status = 0;
 15570  095C  086F               	movf	_DimmerLights,w
 15571  095D  3E02               	addlw	2
 15572  095E  0086               	movwf	6
 15573  095F  3001               	movlw	1	; select bank2/3
 15574  0960  0087               	movwf	7
 15575  0961  1081               	bcf	1,1
 15576                           
 15577                           ;Dimmer_B1.c: 862: setDimmerLights_SwOff(i + 1);
 15578  0962  0021               	movlb	1	; select bank1
 15579  0963  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15580  0964  3E01               	addlw	1
 15581  0965  3195  2568  3189   	fcall	_setDimmerLights_SwOff
 15582  0968                     l8585:	
 15583  0968  3001               	movlw	1
 15584  0969  0021               	movlb	1	; select bank1
 15585  096A  07EB               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 15586  096B  3000               	movlw	0
 15587  096C  3DEC               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 15588  096D  2939               	goto	l8587
 15589  096E                     l8589:	
 15590                           ;Dimmer_B1.c: 863: }
 15591                           ;Dimmer_B1.c: 864: }
 15592                           ;Dimmer_B1.c: 865: } else {
 15593                           
 15594                           
 15595                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(lights);
 15596  096E  0021               	movlb	1	; select bank1
 15597  096F  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15598  0970  319C  24B2  3189   	fcall	_DimmerLightsPointSelect
 15599                           
 15600                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(lights) == 1) {
 15601  0973  0021               	movlb	1	; select bank1
 15602  0974  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15603  0975  319D  2597  3189   	fcall	_getDimmerLights_Status
 15604  0978  3A01               	xorlw	1
 15605  0979  1D03               	skipz
 15606  097A  0008               	return
 15607                           
 15608                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 15609  097B  0020               	movlb	0	; select bank0
 15610  097C  086F               	movf	_DimmerLights,w
 15611  097D  3E0B               	addlw	11
 15612  097E  0086               	movwf	6
 15613  097F  3001               	movlw	1	; select bank2/3
 15614  0980  0087               	movwf	7
 15615  0981  1481               	bsf	1,1
 15616                           
 15617                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 15618  0982  086F               	movf	_DimmerLights,w
 15619  0983  3E02               	addlw	2
 15620  0984  0086               	movwf	6
 15621  0985  3001               	movlw	1	; select bank2/3
 15622  0986  0087               	movwf	7
 15623  0987  1081               	bcf	1,1
 15624                           
 15625                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(lights);
 15626  0988  0021               	movlb	1	; select bank1
 15627  0989  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15628  098A  3195  2568         	fcall	_setDimmerLights_SwOff
 15629  098C  0008               	return
 15630  098D                     __end_of_setDimmerLights_ErrorClose:	
 15631                           
 15632                           	psect	text99
 15633  1568                     __ptext99:	
 15634 ;; *************** function _setDimmerLights_SwOff *****************
 15635 ;; Defined at:
 15636 ;;		line 450 in file "../src/Dimmer_B1.c"
 15637 ;; Parameters:    Size  Location     Type
 15638 ;;  sw              1    wreg     unsigned char 
 15639 ;; Auto vars:     Size  Location     Type
 15640 ;;  sw              1   74[BANK0 ] unsigned char 
 15641 ;; Return value:  Size  Location     Type
 15642 ;;		None               void
 15643 ;; Registers used:
 15644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15645 ;; Tracked objects:
 15646 ;;		On entry : 0/0
 15647 ;;		On exit  : 0/0
 15648 ;;		Unchanged: 0/0
 15649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15651 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;Total ram usage:        1 bytes
 15655 ;; Hardware stack levels used:    1
 15656 ;; Hardware stack levels required when called:    8
 15657 ;; This function calls:
 15658 ;;		_DimmerLightsPointSelect
 15659 ;;		_getDelayOff_GO
 15660 ;;		_setDelayOff_GO
 15661 ;; This function is called by:
 15662 ;;		_setDimmerLights_ErrorClose
 15663 ;;		_Exception_Main
 15664 ;;		_setRFSW_Control
 15665 ;;		_setSw_Main
 15666 ;; This function uses a non-reentrant model
 15667 ;;
 15668                           
 15669                           
 15670                           ;psect for function _setDimmerLights_SwOff
 15671  1568                     _setDimmerLights_SwOff:	
 15672                           
 15673                           ;incstack = 0
 15674                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15675                           ;setDimmerLights_SwOff@sw stored from wreg
 15676  1568  0020               	movlb	0	; select bank0
 15677  1569  00EA               	movwf	setDimmerLights_SwOff@sw
 15678                           
 15679                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 15680  156A  086A               	movf	setDimmerLights_SwOff@sw,w
 15681  156B  319C  24B2  3195   	fcall	_DimmerLightsPointSelect
 15682                           
 15683                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 15684  156E  0020               	movlb	0	; select bank0
 15685  156F  086F               	movf	_DimmerLights,w
 15686  1570  3E0B               	addlw	11
 15687  1571  0086               	movwf	6
 15688  1572  3001               	movlw	1	; select bank2/3
 15689  1573  0087               	movwf	7
 15690  1574  1C81               	btfss	1,1
 15691  1575  0008               	return
 15692                           
 15693                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 15694  1576  086F               	movf	_DimmerLights,w
 15695  1577  3E0B               	addlw	11
 15696  1578  0086               	movwf	6
 15697  1579  3001               	movlw	1	; select bank2/3
 15698  157A  0087               	movwf	7
 15699  157B  1081               	bcf	1,1
 15700                           
 15701                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 15702  157C  086F               	movf	_DimmerLights,w
 15703  157D  3E02               	addlw	2
 15704  157E  0086               	movwf	6
 15705  157F  3001               	movlw	1	; select bank2/3
 15706  1580  0087               	movwf	7
 15707  1581  1C81               	btfss	1,1
 15708  1582  2D9D               	goto	l8435
 15709                           
 15710                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 15711  1583  086F               	movf	_DimmerLights,w
 15712  1584  3E0B               	addlw	11
 15713  1585  0086               	movwf	6
 15714  1586  3001               	movlw	1	; select bank2/3
 15715  1587  0087               	movwf	7
 15716  1588  1D01               	btfss	1,2
 15717  1589  0008               	return
 15718                           
 15719                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 15720  158A  086F               	movf	_DimmerLights,w
 15721  158B  3E0B               	addlw	11
 15722  158C  0086               	movwf	6
 15723  158D  3001               	movlw	1	; select bank2/3
 15724  158E  0087               	movwf	7
 15725  158F  1101               	bcf	1,2
 15726                           
 15727                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 15728  1590  086F               	movf	_DimmerLights,w
 15729  1591  3E0A               	addlw	10
 15730  1592  0086               	movwf	6
 15731  1593  3001               	movlw	1	; select bank2/3
 15732  1594  0087               	movwf	7
 15733  1595  1581               	bsf	1,3
 15734                           
 15735                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 15736  1596  086F               	movf	_DimmerLights,w
 15737  1597  3E0A               	addlw	10
 15738  1598  0086               	movwf	6
 15739  1599  3001               	movlw	1	; select bank2/3
 15740  159A  0087               	movwf	7
 15741  159B  1101               	bcf	1,2
 15742                           
 15743                           ;Dimmer_B1.c: 462: }
 15744                           ;Dimmer_B1.c: 463: } else {
 15745  159C  0008               	return
 15746  159D                     l8435:	
 15747                           
 15748                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 15749  159D  086F               	movf	_DimmerLights,w
 15750  159E  3E0A               	addlw	10
 15751  159F  0086               	movwf	6
 15752  15A0  3001               	movlw	1	; select bank2/3
 15753  15A1  0087               	movwf	7
 15754  15A2  1481               	bsf	1,1
 15755                           
 15756                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 15757  15A3  086F               	movf	_DimmerLights,w
 15758  15A4  3E0A               	addlw	10
 15759  15A5  0086               	movwf	6
 15760  15A6  3001               	movlw	1	; select bank2/3
 15761  15A7  0087               	movwf	7
 15762  15A8  1001               	bcf	1,0
 15763                           
 15764                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 15765  15A9  086A               	movf	setDimmerLights_SwOff@sw,w
 15766  15AA  319D  2577  3195   	fcall	_getDelayOff_GO
 15767  15AD  3A01               	xorlw	1
 15768  15AE  1D03               	skipz
 15769  15AF  0008               	return
 15770                           
 15771                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 15772  15B0  0020               	movlb	0	; select bank0
 15773  15B1  01E6               	clrf	setDelayOff_GO@command
 15774  15B2  01E7               	clrf	setDelayOff_GO@value
 15775  15B3  086A               	movf	setDimmerLights_SwOff@sw,w
 15776  15B4  3196  26A8         	fcall	_setDelayOff_GO
 15777  15B6  0008               	return
 15778  15B7                     __end_of_setDimmerLights_SwOff:	
 15779                           
 15780                           	psect	text100
 15781  16A8                     __ptext100:	
 15782 ;; *************** function _setDelayOff_GO *****************
 15783 ;; Defined at:
 15784 ;;		line 83 in file "../src/DelayOff_B1.c"
 15785 ;; Parameters:    Size  Location     Type
 15786 ;;  sw              1    wreg     unsigned char 
 15787 ;;  command         1   70[BANK0 ] unsigned char 
 15788 ;;  value           1   71[BANK0 ] unsigned char 
 15789 ;; Auto vars:     Size  Location     Type
 15790 ;;  sw              1   73[BANK0 ] unsigned char 
 15791 ;; Return value:  Size  Location     Type
 15792 ;;		None               void
 15793 ;; Registers used:
 15794 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15795 ;; Tracked objects:
 15796 ;;		On entry : 0/0
 15797 ;;		On exit  : 0/0
 15798 ;;		Unchanged: 0/0
 15799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15800 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15802 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15803 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15804 ;;Total ram usage:        4 bytes
 15805 ;; Hardware stack levels used:    1
 15806 ;; Hardware stack levels required when called:    7
 15807 ;; This function calls:
 15808 ;;		_DelayOffPointSelect
 15809 ;;		_DelayTimejudge
 15810 ;;		_setProductData
 15811 ;; This function is called by:
 15812 ;;		_setDimmerLights_SwOff
 15813 ;;		_setRFSW_Control
 15814 ;; This function uses a non-reentrant model
 15815 ;;
 15816                           
 15817                           
 15818                           ;psect for function _setDelayOff_GO
 15819  16A8                     _setDelayOff_GO:	
 15820                           
 15821                           ;incstack = 0
 15822                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15823                           ;setDelayOff_GO@sw stored from wreg
 15824  16A8  0020               	movlb	0	; select bank0
 15825  16A9  00E9               	movwf	setDelayOff_GO@sw
 15826                           
 15827                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15828  16AA  0869               	movf	setDelayOff_GO@sw,w
 15829  16AB  319C  24A7  3196   	fcall	_DelayOffPointSelect
 15830                           
 15831                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15832  16AE  0020               	movlb	0	; select bank0
 15833  16AF  0866               	movf	setDelayOff_GO@command,w
 15834  16B0  3A01               	xorlw	1
 15835  16B1  3000               	movlw	0
 15836  16B2  1903               	skipnz
 15837  16B3  3001               	movlw	1
 15838  16B4  00E8               	movwf	??_setDelayOff_GO
 15839  16B5  0875               	movf	_DelayOff,w
 15840  16B6  0086               	movwf	6
 15841  16B7  3001               	movlw	1	; select bank2/3
 15842  16B8  0087               	movwf	7
 15843  16B9  0DE8               	rlf	??_setDelayOff_GO,f
 15844  16BA  0801               	movf	1,w
 15845  16BB  0668               	xorwf	??_setDelayOff_GO,w
 15846  16BC  39FD               	andlw	-3
 15847  16BD  0668               	xorwf	??_setDelayOff_GO,w
 15848  16BE  0081               	movwf	1
 15849                           
 15850                           ;DelayOff_B1.c: 89: if (command == 1) {
 15851  16BF  0866               	movf	setDelayOff_GO@command,w
 15852  16C0  3A01               	xorlw	1
 15853  16C1  1D03               	skipz
 15854  16C2  2EE6               	goto	l8389
 15855                           
 15856                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15857  16C3  0867               	movf	setDelayOff_GO@value,w
 15858  16C4  3191  214E  3196   	fcall	_DelayTimejudge
 15859  16C7  0020               	movlb	0	; select bank0
 15860  16C8  00E8               	movwf	??_setDelayOff_GO
 15861  16C9  0A75               	incf	_DelayOff,w
 15862  16CA  0086               	movwf	6
 15863  16CB  3001               	movlw	1	; select bank2/3
 15864  16CC  0087               	movwf	7
 15865  16CD  0868               	movf	??_setDelayOff_GO,w
 15866  16CE  0081               	movwf	1
 15867                           
 15868                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15869  16CF  300F               	movlw	15
 15870  16D0  0567               	andwf	setDelayOff_GO@value,w
 15871  16D1  00E8               	movwf	??_setDelayOff_GO
 15872  16D2  0868               	movf	??_setDelayOff_GO,w
 15873  16D3  3A05               	xorlw	5
 15874  16D4  1903               	skipnz
 15875  16D5  2EDA               	goto	l8383
 15876  16D6  0867               	movf	setDelayOff_GO@value,w
 15877  16D7  390F               	andlw	15
 15878  16D8  1D03               	btfss	3,2
 15879  16D9  2EE0               	goto	l8387
 15880  16DA                     l8383:	
 15881  16DA  3026               	movlw	38
 15882  16DB  0267               	subwf	setDelayOff_GO@value,w
 15883  16DC  1803               	skipnc
 15884  16DD  2EE0               	goto	l8387
 15885                           
 15886                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 15887  16DE  0867               	movf	setDelayOff_GO@value,w
 15888  16DF  2EE2               	goto	L6
 15889  16E0                     l8387:	
 15890                           ;DelayOff_B1.c: 93: } else {
 15891                           
 15892                           
 15893                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 15894  16E0  3005               	movlw	5
 15895  16E1  0020               	movlb	0	; select bank0
 15896  16E2                     L6:	
 15897  16E2  00E8               	movwf	??_setDelayOff_GO
 15898  16E3  0868               	movf	??_setDelayOff_GO,w
 15899  16E4  00E2               	movwf	setProductData@value
 15900  16E5  2EE8               	goto	L5
 15901  16E6                     l8389:	
 15902                           ;DelayOff_B1.c: 95: }
 15903                           ;DelayOff_B1.c: 96: } else {
 15904                           
 15905                           
 15906                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 15907  16E6  0020               	movlb	0	; select bank0
 15908  16E7  01E2               	clrf	setProductData@value
 15909  16E8                     L5:	
 15910  16E8  0869               	movf	setDelayOff_GO@sw,w
 15911  16E9  3E1A               	addlw	26
 15912  16EA  319D  253D         	fcall	_setProductData
 15913                           
 15914                           ;DelayOff_B1.c: 98: }
 15915                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15916  16EC  0875               	movf	_DelayOff,w
 15917  16ED  3E02               	addlw	2
 15918  16EE  0086               	movwf	6
 15919  16EF  3001               	movlw	1	; select bank2/3
 15920  16F0  0087               	movwf	7
 15921  16F1  3000               	movlw	0
 15922  16F2  3FC0               	movwi [0]fsr1
 15923  16F3  3FC1               	movwi [1]fsr1
 15924                           
 15925                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15926  16F4  0875               	movf	_DelayOff,w
 15927  16F5  3E04               	addlw	4
 15928  16F6  0086               	movwf	6
 15929  16F7  3001               	movlw	1	; select bank2/3
 15930  16F8  0087               	movwf	7
 15931  16F9  0181               	clrf	1
 15932  16FA  0008               	return
 15933  16FB                     __end_of_setDelayOff_GO:	
 15934                           
 15935                           	psect	text101
 15936  1D3D                     __ptext101:	
 15937 ;; *************** function _setProductData *****************
 15938 ;; Defined at:
 15939 ;;		line 605 in file "../src/Main_B1.c"
 15940 ;; Parameters:    Size  Location     Type
 15941 ;;  address         1    wreg     unsigned char 
 15942 ;;  value           1   66[BANK0 ] unsigned char 
 15943 ;; Auto vars:     Size  Location     Type
 15944 ;;  address         1   69[BANK0 ] unsigned char 
 15945 ;; Return value:  Size  Location     Type
 15946 ;;		None               void
 15947 ;; Registers used:
 15948 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15949 ;; Tracked objects:
 15950 ;;		On entry : 0/0
 15951 ;;		On exit  : 0/0
 15952 ;;		Unchanged: 0/0
 15953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15954 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15958 ;;Total ram usage:        4 bytes
 15959 ;; Hardware stack levels used:    1
 15960 ;; Hardware stack levels required when called:    5
 15961 ;; This function calls:
 15962 ;;		Nothing
 15963 ;; This function is called by:
 15964 ;;		_setDelayOff_GO
 15965 ;;		_setDimmerLights
 15966 ;;		_setDimmerLights_Adj
 15967 ;;		_setTemp_Main
 15968 ;;		_setLog_Code
 15969 ;;		_setControl_Lights_Table
 15970 ;;		_setRFSW_AdjControl
 15971 ;;		_setRF_DimmerValue
 15972 ;;		_setRF_DimmerLights
 15973 ;; This function uses a non-reentrant model
 15974 ;;
 15975                           
 15976                           
 15977                           ;psect for function _setProductData
 15978  1D3D                     _setProductData:	
 15979                           
 15980                           ;incstack = 0
 15981                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 15982                           ;setProductData@address stored from wreg
 15983  1D3D  0020               	movlb	0	; select bank0
 15984  1D3E  00E5               	movwf	setProductData@address
 15985                           
 15986                           ;Main_B1.c: 606: product->Data[address] = value;
 15987  1D3F  0862               	movf	setProductData@value,w
 15988  1D40  00E3               	movwf	??_setProductData
 15989  1D41  0865               	movf	setProductData@address,w
 15990  1D42  0779               	addwf	_product,w
 15991  1D43  00E4               	movwf	??_setProductData+1
 15992  1D44  0864               	movf	??_setProductData+1,w
 15993  1D45  0086               	movwf	6
 15994  1D46  3002               	movlw	2	; select bank4/5
 15995  1D47  0087               	movwf	7
 15996  1D48  0863               	movf	??_setProductData,w
 15997  1D49  0081               	movwf	1
 15998  1D4A  0008               	return
 15999  1D4B                     __end_of_setProductData:	
 16000                           
 16001                           	psect	text102
 16002  114E                     __ptext102:	
 16003 ;; *************** function _DelayTimejudge *****************
 16004 ;; Defined at:
 16005 ;;		line 112 in file "../src/DelayOff_B1.c"
 16006 ;; Parameters:    Size  Location     Type
 16007 ;;  value           1    wreg     unsigned char 
 16008 ;; Auto vars:     Size  Location     Type
 16009 ;;  value           1    9[BANK0 ] unsigned char 
 16010 ;;  k               1    8[BANK0 ] unsigned char 
 16011 ;;  j               1    7[BANK0 ] unsigned char 
 16012 ;;  i               1    6[BANK0 ] unsigned char 
 16013 ;; Return value:  Size  Location     Type
 16014 ;;                  1    wreg      unsigned char 
 16015 ;; Registers used:
 16016 ;;		wreg, status,2, status,0, pclath, cstack
 16017 ;; Tracked objects:
 16018 ;;		On entry : 0/0
 16019 ;;		On exit  : 0/0
 16020 ;;		Unchanged: 0/0
 16021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16023 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16025 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16026 ;;Total ram usage:        6 bytes
 16027 ;; Hardware stack levels used:    1
 16028 ;; Hardware stack levels required when called:    6
 16029 ;; This function calls:
 16030 ;;		___bmul
 16031 ;; This function is called by:
 16032 ;;		_setDelayOff_GO
 16033 ;; This function uses a non-reentrant model
 16034 ;;
 16035                           
 16036                           
 16037                           ;psect for function _DelayTimejudge
 16038  114E                     _DelayTimejudge:	
 16039                           
 16040                           ;incstack = 0
 16041                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16042                           ;DelayTimejudge@value stored from wreg
 16043  114E  0020               	movlb	0	; select bank0
 16044  114F  00A9               	movwf	DelayTimejudge@value
 16045                           
 16046                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16047  1150  3005               	movlw	5
 16048  1151  00A4               	movwf	??_DelayTimejudge
 16049  1152  0824               	movf	??_DelayTimejudge,w
 16050  1153  00A6               	movwf	DelayTimejudge@i
 16051  1154  01A7               	clrf	DelayTimejudge@j
 16052  1155  01A8               	clrf	DelayTimejudge@k
 16053                           
 16054                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16055  1156  3031               	movlw	49
 16056  1157  0229               	subwf	DelayTimejudge@value,w
 16057  1158  1803               	skipnc
 16058  1159  2976               	goto	l8281
 16059                           
 16060                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16061  115A  0829               	movf	DelayTimejudge@value,w
 16062  115B  390F               	andlw	15
 16063  115C  00A4               	movwf	??_DelayTimejudge
 16064  115D  0824               	movf	??_DelayTimejudge,w
 16065  115E  00A7               	movwf	DelayTimejudge@j
 16066                           
 16067                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16068  115F  0829               	movf	DelayTimejudge@value,w
 16069  1160  00A4               	movwf	??_DelayTimejudge
 16070  1161  3004               	movlw	4
 16071  1162                     u8815:	
 16072  1162  36A4               	lsrf	??_DelayTimejudge,f
 16073  1163  0B89               	decfsz	9,f
 16074  1164  2962               	goto	u8815
 16075  1165  0824               	movf	??_DelayTimejudge,w
 16076  1166  390F               	andlw	15
 16077  1167  00A5               	movwf	??_DelayTimejudge+1
 16078  1168  0825               	movf	??_DelayTimejudge+1,w
 16079  1169  00A8               	movwf	DelayTimejudge@k
 16080                           
 16081                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16082  116A  300A               	movlw	10
 16083  116B  00A4               	movwf	??_DelayTimejudge
 16084  116C  0824               	movf	??_DelayTimejudge,w
 16085  116D  00A0               	movwf	___bmul@multiplicand
 16086  116E  0828               	movf	DelayTimejudge@k,w
 16087  116F  319D  25DB         	fcall	___bmul
 16088  1171  0020               	movlb	0	; select bank0
 16089  1172  0727               	addwf	DelayTimejudge@j,w
 16090  1173  00A5               	movwf	??_DelayTimejudge+1
 16091  1174  0825               	movf	??_DelayTimejudge+1,w
 16092  1175  00A6               	movwf	DelayTimejudge@i
 16093  1176                     l8281:	
 16094                           
 16095                           ;DelayOff_B1.c: 118: }
 16096                           ;DelayOff_B1.c: 139: return i;
 16097  1176  0826               	movf	DelayTimejudge@i,w
 16098  1177  0008               	return
 16099  1178                     __end_of_DelayTimejudge:	
 16100                           
 16101                           	psect	text103
 16102  1DDB                     __ptext103:	
 16103 ;; *************** function ___bmul *****************
 16104 ;; Defined at:
 16105 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16106 ;; Parameters:    Size  Location     Type
 16107 ;;  multiplier      1    wreg     unsigned char 
 16108 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16109 ;; Auto vars:     Size  Location     Type
 16110 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16111 ;;  product         1    2[BANK0 ] unsigned char 
 16112 ;; Return value:  Size  Location     Type
 16113 ;;                  1    wreg      unsigned char 
 16114 ;; Registers used:
 16115 ;;		wreg, status,2, status,0
 16116 ;; Tracked objects:
 16117 ;;		On entry : 0/0
 16118 ;;		On exit  : 0/0
 16119 ;;		Unchanged: 0/0
 16120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16121 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16122 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16123 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16124 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16125 ;;Total ram usage:        4 bytes
 16126 ;; Hardware stack levels used:    1
 16127 ;; Hardware stack levels required when called:    5
 16128 ;; This function calls:
 16129 ;;		Nothing
 16130 ;; This function is called by:
 16131 ;;		_DelayTimejudge
 16132 ;; This function uses a non-reentrant model
 16133 ;;
 16134                           
 16135                           
 16136                           ;psect for function ___bmul
 16137  1DDB                     ___bmul:	
 16138                           
 16139                           ;incstack = 0
 16140                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16141                           ;___bmul@multiplier stored from wreg
 16142  1DDB  0020               	movlb	0	; select bank0
 16143  1DDC  00A3               	movwf	___bmul@multiplier
 16144  1DDD  01A2               	clrf	___bmul@product
 16145  1DDE                     l8023:	
 16146  1DDE  1C23               	btfss	___bmul@multiplier,0
 16147  1DDF  2DE4               	goto	l8027
 16148  1DE0  0820               	movf	___bmul@multiplicand,w
 16149  1DE1  00A1               	movwf	??___bmul
 16150  1DE2  0821               	movf	??___bmul,w
 16151  1DE3  07A2               	addwf	___bmul@product,f
 16152  1DE4                     l8027:	
 16153  1DE4  1003               	clrc
 16154  1DE5  0DA0               	rlf	___bmul@multiplicand,f
 16155  1DE6  1003               	clrc
 16156  1DE7  0CA3               	rrf	___bmul@multiplier,f
 16157  1DE8  08A3               	movf	___bmul@multiplier,f
 16158  1DE9  1D03               	skipz
 16159  1DEA  2DDE               	goto	l8023
 16160  1DEB  0822               	movf	___bmul@product,w
 16161  1DEC  0008               	return
 16162  1DED                     __end_of___bmul:	
 16163                           
 16164                           	psect	text104
 16165  1D77                     __ptext104:	
 16166 ;; *************** function _getDelayOff_GO *****************
 16167 ;; Defined at:
 16168 ;;		line 105 in file "../src/DelayOff_B1.c"
 16169 ;; Parameters:    Size  Location     Type
 16170 ;;  sw              1    wreg     unsigned char 
 16171 ;; Auto vars:     Size  Location     Type
 16172 ;;  sw              1    2[BANK0 ] unsigned char 
 16173 ;;  go              1    3[BANK0 ] unsigned char 
 16174 ;; Return value:  Size  Location     Type
 16175 ;;                  1    wreg      unsigned char 
 16176 ;; Registers used:
 16177 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16178 ;; Tracked objects:
 16179 ;;		On entry : 0/0
 16180 ;;		On exit  : 0/0
 16181 ;;		Unchanged: 0/0
 16182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16184 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;Total ram usage:        2 bytes
 16188 ;; Hardware stack levels used:    1
 16189 ;; Hardware stack levels required when called:    6
 16190 ;; This function calls:
 16191 ;;		_DelayOffPointSelect
 16192 ;; This function is called by:
 16193 ;;		_setDimmerLights_SwOff
 16194 ;;		_setRFSW_Control
 16195 ;; This function uses a non-reentrant model
 16196 ;;
 16197                           
 16198                           
 16199                           ;psect for function _getDelayOff_GO
 16200  1D77                     _getDelayOff_GO:	
 16201                           
 16202                           ;incstack = 0
 16203                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16204                           ;getDelayOff_GO@sw stored from wreg
 16205  1D77  0020               	movlb	0	; select bank0
 16206  1D78  00A2               	movwf	getDelayOff_GO@sw
 16207                           
 16208                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16209  1D79  0822               	movf	getDelayOff_GO@sw,w
 16210  1D7A  319C  24A7         	fcall	_DelayOffPointSelect
 16211                           
 16212                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16213  1D7C  0875               	movf	_DelayOff,w
 16214  1D7D  0086               	movwf	6
 16215  1D7E  3001               	movlw	1	; select bank2/3
 16216  1D7F  0087               	movwf	7
 16217  1D80  3000               	movlw	0
 16218  1D81  1881               	btfsc	1,1
 16219  1D82  3001               	movlw	1
 16220  1D83  0020               	movlb	0	; select bank0
 16221  1D84  00A3               	movwf	getDelayOff_GO@go
 16222                           
 16223                           ;DelayOff_B1.c: 108: return go;
 16224  1D85  0823               	movf	getDelayOff_GO@go,w
 16225  1D86  0008               	return
 16226  1D87                     __end_of_getDelayOff_GO:	
 16227                           
 16228                           	psect	text105
 16229  1D97                     __ptext105:	
 16230 ;; *************** function _getDimmerLights_Status *****************
 16231 ;; Defined at:
 16232 ;;		line 757 in file "../src/Dimmer_B1.c"
 16233 ;; Parameters:    Size  Location     Type
 16234 ;;  lights          1    wreg     unsigned char 
 16235 ;; Auto vars:     Size  Location     Type
 16236 ;;  lights          1    2[BANK0 ] unsigned char 
 16237 ;;  status          1    3[BANK0 ] unsigned char 
 16238 ;; Return value:  Size  Location     Type
 16239 ;;                  1    wreg      unsigned char 
 16240 ;; Registers used:
 16241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16242 ;; Tracked objects:
 16243 ;;		On entry : 0/0
 16244 ;;		On exit  : 0/0
 16245 ;;		Unchanged: 0/0
 16246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16248 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16250 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16251 ;;Total ram usage:        2 bytes
 16252 ;; Hardware stack levels used:    1
 16253 ;; Hardware stack levels required when called:    6
 16254 ;; This function calls:
 16255 ;;		_DimmerLightsPointSelect
 16256 ;; This function is called by:
 16257 ;;		_setDimmerLights_ErrorClose
 16258 ;;		_Exception_Main
 16259 ;;		_setRFSW_Control
 16260 ;;		_setRFSW_AdjControl
 16261 ;; This function uses a non-reentrant model
 16262 ;;
 16263                           
 16264                           
 16265                           ;psect for function _getDimmerLights_Status
 16266  1D97                     _getDimmerLights_Status:	
 16267                           
 16268                           ;incstack = 0
 16269                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16270                           ;getDimmerLights_Status@lights stored from wreg
 16271  1D97  0020               	movlb	0	; select bank0
 16272  1D98  00A2               	movwf	getDimmerLights_Status@lights
 16273                           
 16274                           ;Dimmer_B1.c: 758: DimmerLightsPointSelect(lights);
 16275  1D99  0822               	movf	getDimmerLights_Status@lights,w
 16276  1D9A  319C  24B2         	fcall	_DimmerLightsPointSelect
 16277                           
 16278                           ;Dimmer_B1.c: 759: char status = DimmerLights->Status == 1 ? 1 : 0;
 16279  1D9C  0020               	movlb	0	; select bank0
 16280  1D9D  086F               	movf	_DimmerLights,w
 16281  1D9E  3E02               	addlw	2
 16282  1D9F  0086               	movwf	6
 16283  1DA0  3001               	movlw	1	; select bank2/3
 16284  1DA1  0087               	movwf	7
 16285  1DA2  3000               	movlw	0
 16286  1DA3  1881               	btfsc	1,1
 16287  1DA4  3001               	movlw	1
 16288  1DA5  00A3               	movwf	getDimmerLights_Status@status
 16289                           
 16290                           ;Dimmer_B1.c: 760: return status;
 16291  1DA6  0823               	movf	getDimmerLights_Status@status,w
 16292  1DA7  0008               	return
 16293  1DA8                     __end_of_getDimmerLights_Status:	
 16294                           
 16295                           	psect	text106
 16296  1CB2                     __ptext106:	
 16297 ;; *************** function _DimmerLightsPointSelect *****************
 16298 ;; Defined at:
 16299 ;;		line 321 in file "../src/Dimmer_B1.c"
 16300 ;; Parameters:    Size  Location     Type
 16301 ;;  lights          1    wreg     unsigned char 
 16302 ;; Auto vars:     Size  Location     Type
 16303 ;;  lights          1    1[BANK0 ] unsigned char 
 16304 ;; Return value:  Size  Location     Type
 16305 ;;		None               void
 16306 ;; Registers used:
 16307 ;;		wreg
 16308 ;; Tracked objects:
 16309 ;;		On entry : 0/0
 16310 ;;		On exit  : 0/0
 16311 ;;		Unchanged: 0/0
 16312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16315 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16316 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16317 ;;Total ram usage:        2 bytes
 16318 ;; Hardware stack levels used:    1
 16319 ;; Hardware stack levels required when called:    5
 16320 ;; This function calls:
 16321 ;;		Nothing
 16322 ;; This function is called by:
 16323 ;;		_setDimmerLights_Initialization
 16324 ;;		_setDimmerLights_SwOn
 16325 ;;		_setDimmerLights_SwOff
 16326 ;;		_setDimmerLights_AdjOn
 16327 ;;		_setDimmerLights_Main
 16328 ;;		_getDimmerLights_Status
 16329 ;;		_getAll_DimmerLights_AdjSw
 16330 ;;		_setDimmerLights_ErrorClose
 16331 ;;		_setDimmerLights_AdjRF
 16332 ;;		_setDimmerLights_Status
 16333 ;;		_setDimmerLights_GO
 16334 ;;		_setDimmerLights_MaxmumValue
 16335 ;;		_setDimmerLights_Trigger
 16336 ;;		_setDimmerLights_TriggerAdj
 16337 ;; This function uses a non-reentrant model
 16338 ;;
 16339                           
 16340                           
 16341                           ;psect for function _DimmerLightsPointSelect
 16342  1CB2                     _DimmerLightsPointSelect:	
 16343                           
 16344                           ;incstack = 0
 16345                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16346                           ;DimmerLightsPointSelect@lights stored from wreg
 16347  1CB2  0020               	movlb	0	; select bank0
 16348  1CB3  00A1               	movwf	DimmerLightsPointSelect@lights
 16349                           
 16350                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16351  1CB4  0821               	movf	DimmerLightsPointSelect@lights,w
 16352  1CB5  3A01               	xorlw	1
 16353  1CB6  1D03               	skipz
 16354  1CB7  0008               	return
 16355                           
 16356                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16357  1CB8  3053               	movlw	_DimmerLights1& (0+255)
 16358  1CB9  00A0               	movwf	??_DimmerLightsPointSelect
 16359  1CBA  0820               	movf	??_DimmerLightsPointSelect,w
 16360  1CBB  00EF               	movwf	_DimmerLights
 16361  1CBC  0008               	return
 16362  1CBD                     __end_of_DimmerLightsPointSelect:	
 16363                           
 16364                           	psect	text107
 16365  17A7                     __ptext107:	
 16366 ;; *************** function _setBuz *****************
 16367 ;; Defined at:
 16368 ;;		line 22 in file "../src/Buzzer_B1.c"
 16369 ;; Parameters:    Size  Location     Type
 16370 ;;  count           1    wreg     unsigned char 
 16371 ;;  time            2    9[BANK0 ] int 
 16372 ;; Auto vars:     Size  Location     Type
 16373 ;;  count           1   12[BANK0 ] unsigned char 
 16374 ;; Return value:  Size  Location     Type
 16375 ;;		None               void
 16376 ;; Registers used:
 16377 ;;		wreg, status,2, status,0, pclath, cstack
 16378 ;; Tracked objects:
 16379 ;;		On entry : 0/0
 16380 ;;		On exit  : 0/0
 16381 ;;		Unchanged: 0/0
 16382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16383 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16387 ;;Total ram usage:        4 bytes
 16388 ;; Hardware stack levels used:    1
 16389 ;; Hardware stack levels required when called:    6
 16390 ;; This function calls:
 16391 ;;		___awdiv
 16392 ;; This function is called by:
 16393 ;;		_DlyOff_Main
 16394 ;;		_setDimmerLights_SwOn
 16395 ;;		_setDimmerLights_Adj
 16396 ;;		_my_MainTimer
 16397 ;;		_Exception_Main
 16398 ;;		_setTemp_Main
 16399 ;;		_setLog_Code
 16400 ;;		_setControl_Lights_Table
 16401 ;;		_setRFSW_Control
 16402 ;;		_setSw_Main
 16403 ;; This function uses a non-reentrant model
 16404 ;;
 16405                           
 16406                           
 16407                           ;psect for function _setBuz
 16408  17A7                     _setBuz:	
 16409                           
 16410                           ;incstack = 0
 16411                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16412                           ;setBuz@count stored from wreg
 16413  17A7  0020               	movlb	0	; select bank0
 16414  17A8  00AC               	movwf	setBuz@count
 16415                           
 16416                           ;Buzzer_B1.c: 23: time /= 10;
 16417  17A9  300A               	movlw	10
 16418  17AA  00A0               	movwf	___awdiv@divisor
 16419  17AB  3000               	movlw	0
 16420  17AC  00A1               	movwf	___awdiv@divisor+1
 16421  17AD  082A               	movf	setBuz@time+1,w
 16422  17AE  01A3               	clrf	___awdiv@dividend+1
 16423  17AF  07A3               	addwf	___awdiv@dividend+1,f
 16424  17B0  0829               	movf	setBuz@time,w
 16425  17B1  01A2               	clrf	___awdiv@dividend
 16426  17B2  07A2               	addwf	___awdiv@dividend,f
 16427  17B3  3196  26FB  3197   	fcall	___awdiv
 16428  17B6  0020               	movlb	0	; select bank0
 16429  17B7  0821               	movf	?___awdiv+1,w
 16430  17B8  01AA               	clrf	setBuz@time+1
 16431  17B9  07AA               	addwf	setBuz@time+1,f
 16432  17BA  0820               	movf	?___awdiv,w
 16433  17BB  01A9               	clrf	setBuz@time
 16434  17BC  07A9               	addwf	setBuz@time,f
 16435                           
 16436                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16437  17BD  0021               	movlb	1	; select bank1
 16438  17BE  1C2E               	btfss	_Buz1^(0+128),0
 16439  17BF  0008               	return
 16440                           
 16441                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16442  17C0  18AE               	btfsc	_Buz1^(0+128),1
 16443  17C1  2FD8               	goto	l84
 16444                           
 16445                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16446  17C2  14AE               	bsf	_Buz1^(0+128),1
 16447                           
 16448                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16449  17C3  01AF               	clrf	(_Buz1^(0+128)+1)
 16450  17C4  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16451                           
 16452                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16453  17C5  0020               	movlb	0	; select bank0
 16454  17C6  082C               	movf	setBuz@count,w
 16455  17C7  00AB               	movwf	??_setBuz
 16456  17C8  082B               	movf	??_setBuz,w
 16457  17C9  0021               	movlb	1	; select bank1
 16458  17CA  00B1               	movwf	(_Buz1^(0+128)+3)
 16459                           
 16460                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16461  17CB  0020               	movlb	0	; select bank0
 16462  17CC  082A               	movf	setBuz@time+1,w
 16463  17CD  0021               	movlb	1	; select bank1
 16464  17CE  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16465  17CF  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16466  17D0  0020               	movlb	0	; select bank0
 16467  17D1  0829               	movf	setBuz@time,w
 16468  17D2  0021               	movlb	1	; select bank1
 16469  17D3  01B4               	clrf	(_Buz1^(0+128)+6)
 16470  17D4  07B4               	addwf	(_Buz1^(0+128)+6),f
 16471                           
 16472                           ;Buzzer_B1.c: 30: RB3 = 1;
 16473  17D5  0020               	movlb	0	; select bank0
 16474  17D6  158D               	bsf	13,3	;volatile
 16475                           
 16476                           ;Buzzer_B1.c: 31: } else {
 16477  17D7  0008               	return
 16478  17D8                     l84:	
 16479                           
 16480                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16481  17D8  19AE               	btfsc	_Buz1^(0+128),3
 16482  17D9  2FEC               	goto	l86
 16483                           
 16484                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16485  17DA  15AE               	bsf	_Buz1^(0+128),3
 16486                           
 16487                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16488  17DB  0020               	movlb	0	; select bank0
 16489  17DC  082C               	movf	setBuz@count,w
 16490  17DD  00AB               	movwf	??_setBuz
 16491  17DE  082B               	movf	??_setBuz,w
 16492  17DF  0021               	movlb	1	; select bank1
 16493  17E0  00B2               	movwf	(_Buz1^(0+128)+4)
 16494                           
 16495                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16496  17E1  0020               	movlb	0	; select bank0
 16497  17E2  082A               	movf	setBuz@time+1,w
 16498  17E3  0021               	movlb	1	; select bank1
 16499  17E4  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16500  17E5  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16501  17E6  0020               	movlb	0	; select bank0
 16502  17E7  0829               	movf	setBuz@time,w
 16503  17E8  0021               	movlb	1	; select bank1
 16504  17E9  01B6               	clrf	(_Buz1^(0+128)+8)
 16505  17EA  07B6               	addwf	(_Buz1^(0+128)+8),f
 16506                           
 16507                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16508  17EB  0008               	return
 16509  17EC                     l86:	
 16510  17EC  1A2E               	btfsc	_Buz1^(0+128),4
 16511  17ED  0008               	return
 16512                           
 16513                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16514  17EE  162E               	bsf	_Buz1^(0+128),4
 16515                           
 16516                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16517  17EF  0020               	movlb	0	; select bank0
 16518  17F0  082C               	movf	setBuz@count,w
 16519  17F1  00AB               	movwf	??_setBuz
 16520  17F2  082B               	movf	??_setBuz,w
 16521  17F3  0021               	movlb	1	; select bank1
 16522  17F4  00B3               	movwf	(_Buz1^(0+128)+5)
 16523                           
 16524                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16525  17F5  0020               	movlb	0	; select bank0
 16526  17F6  082A               	movf	setBuz@time+1,w
 16527  17F7  0021               	movlb	1	; select bank1
 16528  17F8  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16529  17F9  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16530  17FA  0020               	movlb	0	; select bank0
 16531  17FB  0829               	movf	setBuz@time,w
 16532  17FC  0021               	movlb	1	; select bank1
 16533  17FD  01B8               	clrf	(_Buz1^(0+128)+10)
 16534  17FE  07B8               	addwf	(_Buz1^(0+128)+10),f
 16535  17FF  0008               	return
 16536  1800                     __end_of_setBuz:	
 16537                           
 16538                           	psect	text108
 16539  16FB                     __ptext108:	
 16540 ;; *************** function ___awdiv *****************
 16541 ;; Defined at:
 16542 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16543 ;; Parameters:    Size  Location     Type
 16544 ;;  divisor         2    0[BANK0 ] int 
 16545 ;;  dividend        2    2[BANK0 ] int 
 16546 ;; Auto vars:     Size  Location     Type
 16547 ;;  quotient        2    7[BANK0 ] int 
 16548 ;;  sign            1    6[BANK0 ] unsigned char 
 16549 ;;  counter         1    5[BANK0 ] unsigned char 
 16550 ;; Return value:  Size  Location     Type
 16551 ;;                  2    0[BANK0 ] int 
 16552 ;; Registers used:
 16553 ;;		wreg, status,2, status,0
 16554 ;; Tracked objects:
 16555 ;;		On entry : 0/0
 16556 ;;		On exit  : 0/0
 16557 ;;		Unchanged: 0/0
 16558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16559 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16560 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16562 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16563 ;;Total ram usage:        9 bytes
 16564 ;; Hardware stack levels used:    1
 16565 ;; Hardware stack levels required when called:    5
 16566 ;; This function calls:
 16567 ;;		Nothing
 16568 ;; This function is called by:
 16569 ;;		_setBuz
 16570 ;; This function uses a non-reentrant model
 16571 ;;
 16572                           
 16573                           
 16574                           ;psect for function ___awdiv
 16575  16FB                     ___awdiv:	
 16576                           
 16577                           ;incstack = 0
 16578                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16579  16FB  0020               	movlb	0	; select bank0
 16580  16FC  01A6               	clrf	___awdiv@sign
 16581  16FD  1FA1               	btfss	___awdiv@divisor+1,7
 16582  16FE  2F06               	goto	l8307
 16583  16FF  09A0               	comf	___awdiv@divisor,f
 16584  1700  09A1               	comf	___awdiv@divisor+1,f
 16585  1701  0AA0               	incf	___awdiv@divisor,f
 16586  1702  1903               	skipnz
 16587  1703  0AA1               	incf	___awdiv@divisor+1,f
 16588  1704  01A6               	clrf	___awdiv@sign
 16589  1705  0AA6               	incf	___awdiv@sign,f
 16590  1706                     l8307:	
 16591  1706  1FA3               	btfss	___awdiv@dividend+1,7
 16592  1707  2F11               	goto	l8313
 16593  1708  09A2               	comf	___awdiv@dividend,f
 16594  1709  09A3               	comf	___awdiv@dividend+1,f
 16595  170A  0AA2               	incf	___awdiv@dividend,f
 16596  170B  1903               	skipnz
 16597  170C  0AA3               	incf	___awdiv@dividend+1,f
 16598  170D  3001               	movlw	1
 16599  170E  00A4               	movwf	??___awdiv
 16600  170F  0824               	movf	??___awdiv,w
 16601  1710  06A6               	xorwf	___awdiv@sign,f
 16602  1711                     l8313:	
 16603  1711  01A7               	clrf	___awdiv@quotient
 16604  1712  01A8               	clrf	___awdiv@quotient+1
 16605  1713  0821               	movf	___awdiv@divisor+1,w
 16606  1714  0420               	iorwf	___awdiv@divisor,w
 16607  1715  1903               	skipnz
 16608  1716  2F40               	goto	l8335
 16609  1717  01A5               	clrf	___awdiv@counter
 16610  1718  0AA5               	incf	___awdiv@counter,f
 16611  1719                     l8323:	
 16612  1719  1BA1               	btfsc	___awdiv@divisor+1,7
 16613  171A  2F25               	goto	l8325
 16614  171B  3001               	movlw	1
 16615  171C                     u8865:	
 16616  171C  35A0               	lslf	___awdiv@divisor,f
 16617  171D  0DA1               	rlf	___awdiv@divisor+1,f
 16618  171E  0B89               	decfsz	9,f
 16619  171F  2F1C               	goto	u8865
 16620  1720  3001               	movlw	1
 16621  1721  00A4               	movwf	??___awdiv
 16622  1722  0824               	movf	??___awdiv,w
 16623  1723  07A5               	addwf	___awdiv@counter,f
 16624  1724  2F19               	goto	l8323
 16625  1725                     l8325:	
 16626  1725  3001               	movlw	1
 16627  1726                     u8885:	
 16628  1726  35A7               	lslf	___awdiv@quotient,f
 16629  1727  0DA8               	rlf	___awdiv@quotient+1,f
 16630  1728  0B89               	decfsz	9,f
 16631  1729  2F26               	goto	u8885
 16632  172A  0821               	movf	___awdiv@divisor+1,w
 16633  172B  0223               	subwf	___awdiv@dividend+1,w
 16634  172C  1D03               	skipz
 16635  172D  2F30               	goto	u8895
 16636  172E  0820               	movf	___awdiv@divisor,w
 16637  172F  0222               	subwf	___awdiv@dividend,w
 16638  1730                     u8895:	
 16639  1730  1C03               	skipc
 16640  1731  2F37               	goto	l8331
 16641  1732  0820               	movf	___awdiv@divisor,w
 16642  1733  02A2               	subwf	___awdiv@dividend,f
 16643  1734  0821               	movf	___awdiv@divisor+1,w
 16644  1735  3BA3               	subwfb	___awdiv@dividend+1,f
 16645  1736  1427               	bsf	___awdiv@quotient,0
 16646  1737                     l8331:	
 16647  1737  3001               	movlw	1
 16648  1738                     u8905:	
 16649  1738  36A1               	lsrf	___awdiv@divisor+1,f
 16650  1739  0CA0               	rrf	___awdiv@divisor,f
 16651  173A  0B89               	decfsz	9,f
 16652  173B  2F38               	goto	u8905
 16653  173C  3001               	movlw	1
 16654  173D  02A5               	subwf	___awdiv@counter,f
 16655  173E  1D03               	btfss	3,2
 16656  173F  2F25               	goto	l8325
 16657  1740                     l8335:	
 16658  1740  0826               	movf	___awdiv@sign,w
 16659  1741  1903               	btfsc	3,2
 16660  1742  2F48               	goto	l8339
 16661  1743  09A7               	comf	___awdiv@quotient,f
 16662  1744  09A8               	comf	___awdiv@quotient+1,f
 16663  1745  0AA7               	incf	___awdiv@quotient,f
 16664  1746  1903               	skipnz
 16665  1747  0AA8               	incf	___awdiv@quotient+1,f
 16666  1748                     l8339:	
 16667  1748  0828               	movf	___awdiv@quotient+1,w
 16668  1749  01A1               	clrf	?___awdiv+1
 16669  174A  07A1               	addwf	?___awdiv+1,f
 16670  174B  0827               	movf	___awdiv@quotient,w
 16671  174C  01A0               	clrf	?___awdiv
 16672  174D  07A0               	addwf	?___awdiv,f
 16673  174E  0008               	return
 16674  174F                     __end_of___awdiv:	
 16675                           
 16676                           	psect	text109
 16677  1C19                     __ptext109:	
 16678 ;; *************** function _DelayOff_Initialization *****************
 16679 ;; Defined at:
 16680 ;;		line 26 in file "../src/DelayOff_B1.c"
 16681 ;; Parameters:    Size  Location     Type
 16682 ;;		None
 16683 ;; Auto vars:     Size  Location     Type
 16684 ;;		None
 16685 ;; Return value:  Size  Location     Type
 16686 ;;		None               void
 16687 ;; Registers used:
 16688 ;;		wreg, status,2, status,0, pclath, cstack
 16689 ;; Tracked objects:
 16690 ;;		On entry : 0/0
 16691 ;;		On exit  : 0/0
 16692 ;;		Unchanged: 0/0
 16693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16698 ;;Total ram usage:        0 bytes
 16699 ;; Hardware stack levels used:    1
 16700 ;; Hardware stack levels required when called:    7
 16701 ;; This function calls:
 16702 ;;		_DlyOff_Initialization
 16703 ;; This function is called by:
 16704 ;;		_main
 16705 ;; This function uses a non-reentrant model
 16706 ;;
 16707                           
 16708                           
 16709                           ;psect for function _DelayOff_Initialization
 16710  1C19                     _DelayOff_Initialization:	
 16711                           
 16712                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16713                           
 16714                           ;incstack = 0
 16715                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16716  1C19  3001               	movlw	1
 16717  1C1A  319C  2432         	fcall	_DlyOff_Initialization
 16718  1C1C  0008               	return
 16719  1C1D                     __end_of_DelayOff_Initialization:	
 16720                           
 16721                           	psect	text110
 16722  1C32                     __ptext110:	
 16723 ;; *************** function _DlyOff_Initialization *****************
 16724 ;; Defined at:
 16725 ;;		line 56 in file "../src/DelayOff_B1.c"
 16726 ;; Parameters:    Size  Location     Type
 16727 ;;  sw              1    wreg     unsigned char 
 16728 ;; Auto vars:     Size  Location     Type
 16729 ;;  sw              1    2[BANK0 ] unsigned char 
 16730 ;; Return value:  Size  Location     Type
 16731 ;;		None               void
 16732 ;; Registers used:
 16733 ;;		wreg, status,2, status,0, pclath, cstack
 16734 ;; Tracked objects:
 16735 ;;		On entry : 0/0
 16736 ;;		On exit  : 0/0
 16737 ;;		Unchanged: 0/0
 16738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;Total ram usage:        1 bytes
 16744 ;; Hardware stack levels used:    1
 16745 ;; Hardware stack levels required when called:    6
 16746 ;; This function calls:
 16747 ;;		_DelayOffPointSelect
 16748 ;; This function is called by:
 16749 ;;		_DelayOff_Initialization
 16750 ;; This function uses a non-reentrant model
 16751 ;;
 16752                           
 16753                           
 16754                           ;psect for function _DlyOff_Initialization
 16755  1C32                     _DlyOff_Initialization:	
 16756                           
 16757                           ;incstack = 0
 16758                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16759                           ;DlyOff_Initialization@sw stored from wreg
 16760  1C32  0020               	movlb	0	; select bank0
 16761  1C33  00A2               	movwf	DlyOff_Initialization@sw
 16762                           
 16763                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16764  1C34  0822               	movf	DlyOff_Initialization@sw,w
 16765  1C35  319C  24A7         	fcall	_DelayOffPointSelect
 16766  1C37  0008               	return
 16767  1C38                     __end_of_DlyOff_Initialization:	
 16768                           
 16769                           	psect	text111
 16770  1CA7                     __ptext111:	
 16771 ;; *************** function _DelayOffPointSelect *****************
 16772 ;; Defined at:
 16773 ;;		line 7 in file "../src/DelayOff_B1.c"
 16774 ;; Parameters:    Size  Location     Type
 16775 ;;  sw              1    wreg     unsigned char 
 16776 ;; Auto vars:     Size  Location     Type
 16777 ;;  sw              1    1[BANK0 ] unsigned char 
 16778 ;; Return value:  Size  Location     Type
 16779 ;;		None               void
 16780 ;; Registers used:
 16781 ;;		wreg
 16782 ;; Tracked objects:
 16783 ;;		On entry : 0/0
 16784 ;;		On exit  : 0/0
 16785 ;;		Unchanged: 0/0
 16786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16790 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16791 ;;Total ram usage:        2 bytes
 16792 ;; Hardware stack levels used:    1
 16793 ;; Hardware stack levels required when called:    5
 16794 ;; This function calls:
 16795 ;;		Nothing
 16796 ;; This function is called by:
 16797 ;;		_DlyOff_Initialization
 16798 ;;		_DlyOff_Main
 16799 ;;		_setDelayOff_GO
 16800 ;;		_getDelayOff_GO
 16801 ;; This function uses a non-reentrant model
 16802 ;;
 16803                           
 16804                           
 16805                           ;psect for function _DelayOffPointSelect
 16806  1CA7                     _DelayOffPointSelect:	
 16807                           
 16808                           ;incstack = 0
 16809                           ; Regs used in _DelayOffPointSelect: [wreg]
 16810                           ;DelayOffPointSelect@sw stored from wreg
 16811  1CA7  0020               	movlb	0	; select bank0
 16812  1CA8  00A1               	movwf	DelayOffPointSelect@sw
 16813                           
 16814                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16815  1CA9  0821               	movf	DelayOffPointSelect@sw,w
 16816  1CAA  3A01               	xorlw	1
 16817  1CAB  1D03               	skipz
 16818  1CAC  0008               	return
 16819                           
 16820                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16821  1CAD  3064               	movlw	_DlySw1& (0+255)
 16822  1CAE  00A0               	movwf	??_DelayOffPointSelect
 16823  1CAF  0820               	movf	??_DelayOffPointSelect,w
 16824  1CB0  00F5               	movwf	_DelayOff
 16825  1CB1  0008               	return
 16826  1CB2                     __end_of_DelayOffPointSelect:	
 16827                           
 16828                           	psect	text112
 16829  1E85                     __ptext112:	
 16830 ;; *************** function _CC2500_PowerOnInitial *****************
 16831 ;; Defined at:
 16832 ;;		line 119 in file "../src/CC2500_B1.c"
 16833 ;; Parameters:    Size  Location     Type
 16834 ;;		None
 16835 ;; Auto vars:     Size  Location     Type
 16836 ;;		None
 16837 ;; Return value:  Size  Location     Type
 16838 ;;		None               void
 16839 ;; Registers used:
 16840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16841 ;; Tracked objects:
 16842 ;;		On entry : 0/0
 16843 ;;		On exit  : 0/0
 16844 ;;		Unchanged: 0/0
 16845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16850 ;;Total ram usage:        0 bytes
 16851 ;; Hardware stack levels used:    1
 16852 ;; Hardware stack levels required when called:    8
 16853 ;; This function calls:
 16854 ;;		_CC2500_ClearRXFIFO
 16855 ;;		_CC2500_ClearTXFIFO
 16856 ;;		_CC2500_FrequencyCabr
 16857 ;;		_CC2500_InitPATable
 16858 ;;		_CC2500_InitSetREG
 16859 ;;		_CC2500_PowerRST
 16860 ;;		_CC2500_SIDLEMode
 16861 ;; This function is called by:
 16862 ;;		_main
 16863 ;; This function uses a non-reentrant model
 16864 ;;
 16865                           
 16866                           
 16867                           ;psect for function _CC2500_PowerOnInitial
 16868  1E85                     _CC2500_PowerOnInitial:	
 16869                           
 16870                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16871                           
 16872                           ;incstack = 0
 16873                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16874  1E85  3187  27BC  319E   	fcall	_CC2500_PowerRST
 16875                           
 16876                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16877  1E88  3191  2124  319E   	fcall	_CC2500_InitSetREG
 16878                           
 16879                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16880  1E8B  319F  277F  319E   	fcall	_CC2500_InitPATable
 16881                           
 16882                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16883  1E8E  319C  2411  319E   	fcall	_CC2500_ClearTXFIFO
 16884                           
 16885                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16886  1E91  319C  240D  319E   	fcall	_CC2500_ClearRXFIFO
 16887                           
 16888                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16889  1E94  319C  24E9  319E   	fcall	_CC2500_FrequencyCabr
 16890                           
 16891                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16892  1E97  319C  2415         	fcall	_CC2500_SIDLEMode
 16893  1E99  0008               	return
 16894  1E9A                     __end_of_CC2500_PowerOnInitial:	
 16895                           
 16896                           	psect	text113
 16897  1C15                     __ptext113:	
 16898 ;; *************** function _CC2500_SIDLEMode *****************
 16899 ;; Defined at:
 16900 ;;		line 209 in file "../src/CC2500_B1.c"
 16901 ;; Parameters:    Size  Location     Type
 16902 ;;		None
 16903 ;; Auto vars:     Size  Location     Type
 16904 ;;		None
 16905 ;; Return value:  Size  Location     Type
 16906 ;;		None               void
 16907 ;; Registers used:
 16908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16909 ;; Tracked objects:
 16910 ;;		On entry : 0/0
 16911 ;;		On exit  : 0/0
 16912 ;;		Unchanged: 0/0
 16913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16918 ;;Total ram usage:        0 bytes
 16919 ;; Hardware stack levels used:    1
 16920 ;; Hardware stack levels required when called:    7
 16921 ;; This function calls:
 16922 ;;		_CC2500_WriteCommand
 16923 ;; This function is called by:
 16924 ;;		_CC2500_PowerOnInitial
 16925 ;; This function uses a non-reentrant model
 16926 ;;
 16927                           
 16928                           
 16929                           ;psect for function _CC2500_SIDLEMode
 16930  1C15                     _CC2500_SIDLEMode:	
 16931                           
 16932                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16933                           
 16934                           ;incstack = 0
 16935                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16936  1C15  3036               	movlw	54
 16937  1C16  319E  26F6         	fcall	_CC2500_WriteCommand
 16938  1C18  0008               	return
 16939  1C19                     __end_of_CC2500_SIDLEMode:	
 16940                           
 16941                           	psect	text114
 16942  07BC                     __ptext114:	
 16943 ;; *************** function _CC2500_PowerRST *****************
 16944 ;; Defined at:
 16945 ;;		line 132 in file "../src/CC2500_B1.c"
 16946 ;; Parameters:    Size  Location     Type
 16947 ;;		None
 16948 ;; Auto vars:     Size  Location     Type
 16949 ;;		None
 16950 ;; Return value:  Size  Location     Type
 16951 ;;		None               void
 16952 ;; Registers used:
 16953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16954 ;; Tracked objects:
 16955 ;;		On entry : 0/0
 16956 ;;		On exit  : 0/0
 16957 ;;		Unchanged: 0/0
 16958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16962 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16963 ;;Total ram usage:        1 bytes
 16964 ;; Hardware stack levels used:    1
 16965 ;; Hardware stack levels required when called:    6
 16966 ;; This function calls:
 16967 ;;		_CC2500_WriteByte
 16968 ;;		_DelayTime_1us
 16969 ;;		_Timeout_Counter
 16970 ;;		_set_TimeoutCleared
 16971 ;; This function is called by:
 16972 ;;		_CC2500_PowerOnInitial
 16973 ;; This function uses a non-reentrant model
 16974 ;;
 16975                           
 16976                           
 16977                           ;psect for function _CC2500_PowerRST
 16978  07BC                     _CC2500_PowerRST:	
 16979                           
 16980                           ;CC2500_B1.c: 133: RC3 = 0;
 16981                           
 16982                           ;incstack = 0
 16983                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16984  07BC  0020               	movlb	0	; select bank0
 16985  07BD  118E               	bcf	14,3	;volatile
 16986                           
 16987                           ;CC2500_B1.c: 134: RC4 = 0;
 16988  07BE  120E               	bcf	14,4	;volatile
 16989                           
 16990                           ;CC2500_B1.c: 135: RC0 = 1;
 16991  07BF  140E               	bsf	14,0	;volatile
 16992                           
 16993                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16994  07C0  300A               	movlw	10
 16995  07C1  00A0               	movwf	DelayTime_1us@count
 16996  07C2  3000               	movlw	0
 16997  07C3  00A1               	movwf	DelayTime_1us@count+1
 16998  07C4  3190  20FE  3187   	fcall	_DelayTime_1us
 16999                           
 17000                           ;CC2500_B1.c: 137: RC0 = 0;
 17001  07C7  0020               	movlb	0	; select bank0
 17002  07C8  100E               	bcf	14,0	;volatile
 17003                           
 17004                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17005  07C9  300A               	movlw	10
 17006  07CA  00A0               	movwf	DelayTime_1us@count
 17007  07CB  3000               	movlw	0
 17008  07CC  00A1               	movwf	DelayTime_1us@count+1
 17009  07CD  3190  20FE  3187   	fcall	_DelayTime_1us
 17010                           
 17011                           ;CC2500_B1.c: 139: RC0 = 1;
 17012  07D0  0020               	movlb	0	; select bank0
 17013  07D1  140E               	bsf	14,0	;volatile
 17014                           
 17015                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17016  07D2  3028               	movlw	40
 17017  07D3  00A0               	movwf	DelayTime_1us@count
 17018  07D4  3000               	movlw	0
 17019  07D5  00A1               	movwf	DelayTime_1us@count+1
 17020  07D6  3190  20FE  3187   	fcall	_DelayTime_1us
 17021                           
 17022                           ;CC2500_B1.c: 141: RC0 = 0;
 17023  07D9  0020               	movlb	0	; select bank0
 17024  07DA  100E               	bcf	14,0	;volatile
 17025                           
 17026                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17027  07DB  3030               	movlw	48
 17028  07DC  00A6               	movwf	??_CC2500_PowerRST
 17029  07DD  0826               	movf	??_CC2500_PowerRST,w
 17030  07DE  0021               	movlb	1	; select bank1
 17031  07DF  00D1               	movwf	_SPI0Buffer^(0+128)
 17032                           
 17033                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 17034  07E0  2FE4               	goto	l9183
 17035  07E1                     l9181:	
 17036                           
 17037                           ;CC2500_B1.c: 144: Timeout_Counter();
 17038  07E1  319E  2670  3187   	fcall	_Timeout_Counter
 17039  07E4                     l9183:	
 17040  07E4  0020               	movlb	0	; select bank0
 17041  07E5  1E8E               	btfss	14,5	;volatile
 17042  07E6  2FEA               	goto	l9187
 17043  07E7  0021               	movlb	1	; select bank1
 17044  07E8  1D2B               	btfss	(_myMain^(0+128)+11),2
 17045  07E9  2FE1               	goto	l9181
 17046  07EA                     l9187:	
 17047                           
 17048                           ;CC2500_B1.c: 145: };
 17049                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17050  07EA  319C  242D  3187   	fcall	_set_TimeoutCleared
 17051                           
 17052                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17053  07ED  319E  26DD  3187   	fcall	_CC2500_WriteByte
 17054                           
 17055                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17056  07F0  2FF4               	goto	l9193
 17057  07F1                     l9191:	
 17058                           
 17059                           ;CC2500_B1.c: 149: Timeout_Counter();
 17060  07F1  319E  2670  3187   	fcall	_Timeout_Counter
 17061  07F4                     l9193:	
 17062  07F4  0020               	movlb	0	; select bank0
 17063  07F5  1E8E               	btfss	14,5	;volatile
 17064  07F6  2FFA               	goto	l9197
 17065  07F7  0021               	movlb	1	; select bank1
 17066  07F8  1D2B               	btfss	(_myMain^(0+128)+11),2
 17067  07F9  2FF1               	goto	l9191
 17068  07FA                     l9197:	
 17069                           
 17070                           ;CC2500_B1.c: 150: };
 17071                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17072  07FA  319C  242D         	fcall	_set_TimeoutCleared
 17073                           
 17074                           ;CC2500_B1.c: 152: RC4 = 0;
 17075  07FC  0020               	movlb	0	; select bank0
 17076  07FD  120E               	bcf	14,4	;volatile
 17077                           
 17078                           ;CC2500_B1.c: 153: RC0 = 1;
 17079  07FE  140E               	bsf	14,0	;volatile
 17080  07FF  0008               	return
 17081  0800                     __end_of_CC2500_PowerRST:	
 17082                           
 17083                           	psect	text115
 17084  1124                     __ptext115:	
 17085 ;; *************** function _CC2500_InitSetREG *****************
 17086 ;; Defined at:
 17087 ;;		line 159 in file "../src/CC2500_B1.c"
 17088 ;; Parameters:    Size  Location     Type
 17089 ;;		None
 17090 ;; Auto vars:     Size  Location     Type
 17091 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17092 ;;  temp2           1    7[BANK0 ] unsigned char 
 17093 ;;  temp1           1    6[BANK0 ] unsigned char 
 17094 ;; Return value:  Size  Location     Type
 17095 ;;		None               void
 17096 ;; Registers used:
 17097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17098 ;; Tracked objects:
 17099 ;;		On entry : 0/0
 17100 ;;		On exit  : 0/0
 17101 ;;		Unchanged: 0/0
 17102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17104 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17106 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17107 ;;Total ram usage:        4 bytes
 17108 ;; Hardware stack levels used:    1
 17109 ;; Hardware stack levels required when called:    7
 17110 ;; This function calls:
 17111 ;;		_CC2500_WriteREG
 17112 ;; This function is called by:
 17113 ;;		_CC2500_PowerOnInitial
 17114 ;; This function uses a non-reentrant model
 17115 ;;
 17116                           
 17117                           
 17118                           ;psect for function _CC2500_InitSetREG
 17119  1124                     _CC2500_InitSetREG:	
 17120                           
 17121                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17122                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17123                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17124                           
 17125                           ;incstack = 0
 17126                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17127  1124  0020               	movlb	0	; select bank0
 17128  1125  01A8               	clrf	CC2500_InitSetREG@loop_c
 17129  1126                     L7:	
 17130  1126  302F               	movlw	47
 17131  1127  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17132  1128  1803               	btfsc	3,0
 17133  1129  0008               	return
 17134                           
 17135                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17136  112A  0828               	movf	CC2500_InitSetREG@loop_c,w
 17137  112B  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17138  112C  0084               	movwf	4
 17139  112D  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17140  112E  1803               	skipnc
 17141  112F  3E01               	addlw	1
 17142  1130  0085               	movwf	5
 17143  1131  0800               	movf	0,w	;code access
 17144  1132  00A5               	movwf	??_CC2500_InitSetREG
 17145  1133  0825               	movf	??_CC2500_InitSetREG,w
 17146  1134  00A6               	movwf	CC2500_InitSetREG@temp1
 17147                           
 17148                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17149  1135  0828               	movf	CC2500_InitSetREG@loop_c,w
 17150  1136  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17151  1137  0084               	movwf	4
 17152  1138  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17153  1139  1803               	skipnc
 17154  113A  3E01               	addlw	1
 17155  113B  0085               	movwf	5
 17156  113C  0800               	movf	0,w	;code access
 17157  113D  00A5               	movwf	??_CC2500_InitSetREG
 17158  113E  0825               	movf	??_CC2500_InitSetREG,w
 17159  113F  00A7               	movwf	CC2500_InitSetREG@temp2
 17160                           
 17161                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17162  1140  0827               	movf	CC2500_InitSetREG@temp2,w
 17163  1141  00A5               	movwf	??_CC2500_InitSetREG
 17164  1142  0825               	movf	??_CC2500_InitSetREG,w
 17165  1143  00A2               	movwf	CC2500_WriteREG@value
 17166  1144  0826               	movf	CC2500_InitSetREG@temp1,w
 17167  1145  3190  206D  3191   	fcall	_CC2500_WriteREG
 17168  1148  3001               	movlw	1
 17169  1149  0020               	movlb	0	; select bank0
 17170  114A  00A5               	movwf	??_CC2500_InitSetREG
 17171  114B  0825               	movf	??_CC2500_InitSetREG,w
 17172  114C  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17173  114D  2926               	goto	L7
 17174  114E                     __end_of_CC2500_InitSetREG:	
 17175                           
 17176                           	psect	text116
 17177  1F7F                     __ptext116:	
 17178 ;; *************** function _CC2500_InitPATable *****************
 17179 ;; Defined at:
 17180 ;;		line 174 in file "../src/CC2500_B1.c"
 17181 ;; Parameters:    Size  Location     Type
 17182 ;;		None
 17183 ;; Auto vars:     Size  Location     Type
 17184 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17185 ;;  temp            1    6[BANK0 ] unsigned char 
 17186 ;; Return value:  Size  Location     Type
 17187 ;;		None               void
 17188 ;; Registers used:
 17189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17190 ;; Tracked objects:
 17191 ;;		On entry : 0/0
 17192 ;;		On exit  : 0/0
 17193 ;;		Unchanged: 0/0
 17194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17196 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17197 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17198 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17199 ;;Total ram usage:        3 bytes
 17200 ;; Hardware stack levels used:    1
 17201 ;; Hardware stack levels required when called:    7
 17202 ;; This function calls:
 17203 ;;		_CC2500_WriteREG
 17204 ;; This function is called by:
 17205 ;;		_CC2500_PowerOnInitial
 17206 ;; This function uses a non-reentrant model
 17207 ;;
 17208                           
 17209                           
 17210                           ;psect for function _CC2500_InitPATable
 17211  1F7F                     _CC2500_InitPATable:	
 17212                           
 17213                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17214                           ;CC2500_B1.c: 176: unsigned char temp;
 17215                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17216                           
 17217                           ;incstack = 0
 17218                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17219  1F7F  0020               	movlb	0	; select bank0
 17220  1F80  01A7               	clrf	CC2500_InitPATable@loop_d
 17221  1F81                     L8:	
 17222  1F81  3008               	movlw	8
 17223  1F82  0227               	subwf	CC2500_InitPATable@loop_d,w
 17224  1F83  1803               	btfsc	3,0
 17225  1F84  0008               	return
 17226                           
 17227                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17228  1F85  0827               	movf	CC2500_InitPATable@loop_d,w
 17229  1F86  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17230  1F87  0084               	movwf	4
 17231  1F88  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17232  1F89  1803               	skipnc
 17233  1F8A  3E01               	addlw	1
 17234  1F8B  0085               	movwf	5
 17235  1F8C  0800               	movf	0,w	;code access
 17236  1F8D  00A5               	movwf	??_CC2500_InitPATable
 17237  1F8E  0825               	movf	??_CC2500_InitPATable,w
 17238  1F8F  00A6               	movwf	CC2500_InitPATable@temp
 17239                           
 17240                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17241  1F90  0826               	movf	CC2500_InitPATable@temp,w
 17242  1F91  00A5               	movwf	??_CC2500_InitPATable
 17243  1F92  0825               	movf	??_CC2500_InitPATable,w
 17244  1F93  00A2               	movwf	CC2500_WriteREG@value
 17245  1F94  303E               	movlw	62
 17246  1F95  3190  206D  319F   	fcall	_CC2500_WriteREG
 17247  1F98  3001               	movlw	1
 17248  1F99  0020               	movlb	0	; select bank0
 17249  1F9A  00A5               	movwf	??_CC2500_InitPATable
 17250  1F9B  0825               	movf	??_CC2500_InitPATable,w
 17251  1F9C  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17252  1F9D  2F81               	goto	L8
 17253  1F9E                     __end_of_CC2500_InitPATable:	
 17254                           
 17255                           	psect	text117
 17256  106D                     __ptext117:	
 17257 ;; *************** function _CC2500_WriteREG *****************
 17258 ;; Defined at:
 17259 ;;		line 251 in file "../src/CC2500_B1.c"
 17260 ;; Parameters:    Size  Location     Type
 17261 ;;  w_addr          1    wreg     unsigned char 
 17262 ;;  value           1    2[BANK0 ] unsigned char 
 17263 ;; Auto vars:     Size  Location     Type
 17264 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17265 ;; Return value:  Size  Location     Type
 17266 ;;		None               void
 17267 ;; Registers used:
 17268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17269 ;; Tracked objects:
 17270 ;;		On entry : 0/0
 17271 ;;		On exit  : 0/0
 17272 ;;		Unchanged: 0/0
 17273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17274 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17275 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17277 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17278 ;;Total ram usage:        3 bytes
 17279 ;; Hardware stack levels used:    1
 17280 ;; Hardware stack levels required when called:    6
 17281 ;; This function calls:
 17282 ;;		_CC2500_WriteByte
 17283 ;;		_Timeout_Counter
 17284 ;;		_set_TimeoutCleared
 17285 ;; This function is called by:
 17286 ;;		_CC2500_InitSetREG
 17287 ;;		_CC2500_InitPATable
 17288 ;; This function uses a non-reentrant model
 17289 ;;
 17290                           
 17291                           
 17292                           ;psect for function _CC2500_WriteREG
 17293  106D                     _CC2500_WriteREG:	
 17294                           
 17295                           ;incstack = 0
 17296                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17297                           ;CC2500_WriteREG@w_addr stored from wreg
 17298  106D  0020               	movlb	0	; select bank0
 17299  106E  00A4               	movwf	CC2500_WriteREG@w_addr
 17300                           
 17301                           ;CC2500_B1.c: 252: RC0 = 0;
 17302  106F  100E               	bcf	14,0	;volatile
 17303                           
 17304                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17305  1070  0824               	movf	CC2500_WriteREG@w_addr,w
 17306  1071  00A3               	movwf	??_CC2500_WriteREG
 17307  1072  0823               	movf	??_CC2500_WriteREG,w
 17308  1073  0021               	movlb	1	; select bank1
 17309  1074  00D1               	movwf	_SPI0Buffer^(0+128)
 17310                           
 17311                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17312  1075  2879               	goto	l8921
 17313  1076                     l8919:	
 17314                           
 17315                           ;CC2500_B1.c: 255: Timeout_Counter();
 17316  1076  319E  2670  3190   	fcall	_Timeout_Counter
 17317  1079                     l8921:	
 17318  1079  0020               	movlb	0	; select bank0
 17319  107A  1E8E               	btfss	14,5	;volatile
 17320  107B  287F               	goto	l8925
 17321  107C  0021               	movlb	1	; select bank1
 17322  107D  1D2B               	btfss	(_myMain^(0+128)+11),2
 17323  107E  2876               	goto	l8919
 17324  107F                     l8925:	
 17325                           
 17326                           ;CC2500_B1.c: 256: };
 17327                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17328  107F  319C  242D  3190   	fcall	_set_TimeoutCleared
 17329                           
 17330                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17331  1082  319E  26DD  3190   	fcall	_CC2500_WriteByte
 17332                           
 17333                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17334  1085  0020               	movlb	0	; select bank0
 17335  1086  0822               	movf	CC2500_WriteREG@value,w
 17336  1087  00A3               	movwf	??_CC2500_WriteREG
 17337  1088  0823               	movf	??_CC2500_WriteREG,w
 17338  1089  0021               	movlb	1	; select bank1
 17339  108A  00D1               	movwf	_SPI0Buffer^(0+128)
 17340                           
 17341                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17342  108B  319E  26DD         	fcall	_CC2500_WriteByte
 17343                           
 17344                           ;CC2500_B1.c: 262: RC0 = 1;
 17345  108D  0020               	movlb	0	; select bank0
 17346  108E  140E               	bsf	14,0	;volatile
 17347  108F  0008               	return
 17348  1090                     __end_of_CC2500_WriteREG:	
 17349                           
 17350                           	psect	text118
 17351  1CE9                     __ptext118:	
 17352 ;; *************** function _CC2500_FrequencyCabr *****************
 17353 ;; Defined at:
 17354 ;;		line 201 in file "../src/CC2500_B1.c"
 17355 ;; Parameters:    Size  Location     Type
 17356 ;;		None
 17357 ;; Auto vars:     Size  Location     Type
 17358 ;;		None
 17359 ;; Return value:  Size  Location     Type
 17360 ;;		None               void
 17361 ;; Registers used:
 17362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17363 ;; Tracked objects:
 17364 ;;		On entry : 0/0
 17365 ;;		On exit  : 0/0
 17366 ;;		Unchanged: 0/0
 17367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17372 ;;Total ram usage:        0 bytes
 17373 ;; Hardware stack levels used:    1
 17374 ;; Hardware stack levels required when called:    7
 17375 ;; This function calls:
 17376 ;;		_CC2500_WriteCommand
 17377 ;;		_DelayTime_1us
 17378 ;; This function is called by:
 17379 ;;		_CC2500_PowerOnInitial
 17380 ;; This function uses a non-reentrant model
 17381 ;;
 17382                           
 17383                           
 17384                           ;psect for function _CC2500_FrequencyCabr
 17385  1CE9                     _CC2500_FrequencyCabr:	
 17386                           
 17387                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17388                           
 17389                           ;incstack = 0
 17390                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17391  1CE9  3033               	movlw	51
 17392  1CEA  319E  26F6  319C   	fcall	_CC2500_WriteCommand
 17393                           
 17394                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17395  1CED  30E8               	movlw	232
 17396  1CEE  0020               	movlb	0	; select bank0
 17397  1CEF  00A0               	movwf	DelayTime_1us@count
 17398  1CF0  3003               	movlw	3
 17399  1CF1  00A1               	movwf	DelayTime_1us@count+1
 17400  1CF2  3190  20FE         	fcall	_DelayTime_1us
 17401  1CF4  0008               	return
 17402  1CF5                     __end_of_CC2500_FrequencyCabr:	
 17403                           
 17404                           	psect	text119
 17405  10FE                     __ptext119:	
 17406 ;; *************** function _DelayTime_1us *****************
 17407 ;; Defined at:
 17408 ;;		line 320 in file "../src/CC2500_B1.c"
 17409 ;; Parameters:    Size  Location     Type
 17410 ;;  count           2    0[BANK0 ] int 
 17411 ;; Auto vars:     Size  Location     Type
 17412 ;;  j               2    4[BANK0 ] unsigned int 
 17413 ;;  i               2    2[BANK0 ] unsigned int 
 17414 ;; Return value:  Size  Location     Type
 17415 ;;		None               void
 17416 ;; Registers used:
 17417 ;;		wreg, status,2
 17418 ;; Tracked objects:
 17419 ;;		On entry : 0/0
 17420 ;;		On exit  : 0/0
 17421 ;;		Unchanged: 0/0
 17422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17423 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17424 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17426 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17427 ;;Total ram usage:        6 bytes
 17428 ;; Hardware stack levels used:    1
 17429 ;; Hardware stack levels required when called:    5
 17430 ;; This function calls:
 17431 ;;		Nothing
 17432 ;; This function is called by:
 17433 ;;		_CC2500_PowerRST
 17434 ;;		_CC2500_FrequencyCabr
 17435 ;; This function uses a non-reentrant model
 17436 ;;
 17437                           
 17438                           
 17439                           ;psect for function _DelayTime_1us
 17440  10FE                     _DelayTime_1us:	
 17441                           
 17442                           ;CC2500_B1.c: 321: unsigned int i, j;
 17443                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17444                           
 17445                           ;incstack = 0
 17446                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17447  10FE  3001               	movlw	1
 17448  10FF  0020               	movlb	0	; select bank0
 17449  1100  00A2               	movwf	DelayTime_1us@i
 17450  1101  3000               	movlw	0
 17451  1102  00A3               	movwf	DelayTime_1us@i+1
 17452  1103                     l348:	
 17453  1103  0821               	movf	DelayTime_1us@count+1,w
 17454  1104  0223               	subwf	DelayTime_1us@i+1,w
 17455  1105  1D03               	skipz
 17456  1106  2909               	goto	u9675
 17457  1107  0820               	movf	DelayTime_1us@count,w
 17458  1108  0222               	subwf	DelayTime_1us@i,w
 17459  1109                     u9675:	
 17460  1109  1803               	btfsc	3,0
 17461  110A  0008               	return
 17462                           
 17463                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17464  110B  01A4               	clrf	DelayTime_1us@j
 17465  110C  01A5               	clrf	DelayTime_1us@j+1
 17466  110D  3000               	movlw	0
 17467  110E  0225               	subwf	DelayTime_1us@j+1,w
 17468  110F  3002               	movlw	2
 17469  1110  1903               	skipnz
 17470  1111  0224               	subwf	DelayTime_1us@j,w
 17471  1112  1803               	btfsc	3,0
 17472  1113  291F               	goto	l8913
 17473  1114                     l8911:	
 17474  1114  3001               	movlw	1
 17475  1115  07A4               	addwf	DelayTime_1us@j,f
 17476  1116  3000               	movlw	0
 17477  1117  3DA5               	addwfc	DelayTime_1us@j+1,f
 17478  1118  3000               	movlw	0
 17479  1119  0225               	subwf	DelayTime_1us@j+1,w
 17480  111A  3002               	movlw	2
 17481  111B  1903               	skipnz
 17482  111C  0224               	subwf	DelayTime_1us@j,w
 17483  111D  1C03               	skipc
 17484  111E  2914               	goto	l8911
 17485  111F                     l8913:	
 17486  111F  3001               	movlw	1
 17487  1120  07A2               	addwf	DelayTime_1us@i,f
 17488  1121  3000               	movlw	0
 17489  1122  3DA3               	addwfc	DelayTime_1us@i+1,f
 17490  1123  2903               	goto	l348
 17491  1124                     __end_of_DelayTime_1us:	
 17492                           
 17493                           	psect	text120
 17494  1C11                     __ptext120:	
 17495 ;; *************** function _CC2500_ClearTXFIFO *****************
 17496 ;; Defined at:
 17497 ;;		line 187 in file "../src/CC2500_B1.c"
 17498 ;; Parameters:    Size  Location     Type
 17499 ;;		None
 17500 ;; Auto vars:     Size  Location     Type
 17501 ;;		None
 17502 ;; Return value:  Size  Location     Type
 17503 ;;		None               void
 17504 ;; Registers used:
 17505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17506 ;; Tracked objects:
 17507 ;;		On entry : 0/0
 17508 ;;		On exit  : 0/0
 17509 ;;		Unchanged: 0/0
 17510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17515 ;;Total ram usage:        0 bytes
 17516 ;; Hardware stack levels used:    1
 17517 ;; Hardware stack levels required when called:    7
 17518 ;; This function calls:
 17519 ;;		_CC2500_WriteCommand
 17520 ;; This function is called by:
 17521 ;;		_CC2500_PowerOnInitial
 17522 ;; This function uses a non-reentrant model
 17523 ;;
 17524                           
 17525                           
 17526                           ;psect for function _CC2500_ClearTXFIFO
 17527  1C11                     _CC2500_ClearTXFIFO:	
 17528                           
 17529                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17530                           
 17531                           ;incstack = 0
 17532                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17533  1C11  303B               	movlw	59
 17534  1C12  319E  26F6         	fcall	_CC2500_WriteCommand
 17535  1C14  0008               	return
 17536  1C15                     __end_of_CC2500_ClearTXFIFO:	
 17537                           
 17538                           	psect	text121
 17539  1C0D                     __ptext121:	
 17540 ;; *************** function _CC2500_ClearRXFIFO *****************
 17541 ;; Defined at:
 17542 ;;		line 194 in file "../src/CC2500_B1.c"
 17543 ;; Parameters:    Size  Location     Type
 17544 ;;		None
 17545 ;; Auto vars:     Size  Location     Type
 17546 ;;		None
 17547 ;; Return value:  Size  Location     Type
 17548 ;;		None               void
 17549 ;; Registers used:
 17550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17551 ;; Tracked objects:
 17552 ;;		On entry : 0/0
 17553 ;;		On exit  : 0/0
 17554 ;;		Unchanged: 0/0
 17555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17560 ;;Total ram usage:        0 bytes
 17561 ;; Hardware stack levels used:    1
 17562 ;; Hardware stack levels required when called:    7
 17563 ;; This function calls:
 17564 ;;		_CC2500_WriteCommand
 17565 ;; This function is called by:
 17566 ;;		_CC2500_PowerOnInitial
 17567 ;; This function uses a non-reentrant model
 17568 ;;
 17569                           
 17570                           
 17571                           ;psect for function _CC2500_ClearRXFIFO
 17572  1C0D                     _CC2500_ClearRXFIFO:	
 17573                           
 17574                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17575                           
 17576                           ;incstack = 0
 17577                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17578  1C0D  303A               	movlw	58
 17579  1C0E  319E  26F6         	fcall	_CC2500_WriteCommand
 17580  1C10  0008               	return
 17581  1C11                     __end_of_CC2500_ClearRXFIFO:	
 17582                           
 17583                           	psect	text122
 17584  1EF6                     __ptext122:	
 17585 ;; *************** function _CC2500_WriteCommand *****************
 17586 ;; Defined at:
 17587 ;;		line 285 in file "../src/CC2500_B1.c"
 17588 ;; Parameters:    Size  Location     Type
 17589 ;;  command         1    wreg     unsigned char 
 17590 ;; Auto vars:     Size  Location     Type
 17591 ;;  command         1    3[BANK0 ] unsigned char 
 17592 ;; Return value:  Size  Location     Type
 17593 ;;		None               void
 17594 ;; Registers used:
 17595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17596 ;; Tracked objects:
 17597 ;;		On entry : 0/0
 17598 ;;		On exit  : 0/0
 17599 ;;		Unchanged: 0/0
 17600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17605 ;;Total ram usage:        2 bytes
 17606 ;; Hardware stack levels used:    1
 17607 ;; Hardware stack levels required when called:    6
 17608 ;; This function calls:
 17609 ;;		_CC2500_WriteByte
 17610 ;;		_Timeout_Counter
 17611 ;;		_set_TimeoutCleared
 17612 ;; This function is called by:
 17613 ;;		_CC2500_TxData
 17614 ;;		_CC2500_ClearTXFIFO
 17615 ;;		_CC2500_ClearRXFIFO
 17616 ;;		_CC2500_FrequencyCabr
 17617 ;;		_CC2500_SIDLEMode
 17618 ;;		_setRF_Main
 17619 ;;		_RF_RxDisable
 17620 ;; This function uses a non-reentrant model
 17621 ;;
 17622                           
 17623                           
 17624                           ;psect for function _CC2500_WriteCommand
 17625  1EF6                     _CC2500_WriteCommand:	
 17626                           
 17627                           ;incstack = 0
 17628                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17629                           ;CC2500_WriteCommand@command stored from wreg
 17630  1EF6  0020               	movlb	0	; select bank0
 17631  1EF7  00A3               	movwf	CC2500_WriteCommand@command
 17632                           
 17633                           ;CC2500_B1.c: 286: RC0 = 0;
 17634  1EF8  100E               	bcf	14,0	;volatile
 17635                           
 17636                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17637  1EF9  0823               	movf	CC2500_WriteCommand@command,w
 17638  1EFA  00A2               	movwf	??_CC2500_WriteCommand
 17639  1EFB  0822               	movf	??_CC2500_WriteCommand,w
 17640  1EFC  0021               	movlb	1	; select bank1
 17641  1EFD  00D1               	movwf	_SPI0Buffer^(0+128)
 17642                           
 17643                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17644  1EFE  2F02               	goto	l8649
 17645  1EFF                     l8647:	
 17646                           
 17647                           ;CC2500_B1.c: 290: Timeout_Counter();
 17648  1EFF  319E  2670  319E   	fcall	_Timeout_Counter
 17649  1F02                     l8649:	
 17650  1F02  0020               	movlb	0	; select bank0
 17651  1F03  1E8E               	btfss	14,5	;volatile
 17652  1F04  2F08               	goto	l8653
 17653  1F05  0021               	movlb	1	; select bank1
 17654  1F06  1D2B               	btfss	(_myMain^(0+128)+11),2
 17655  1F07  2EFF               	goto	l8647
 17656  1F08                     l8653:	
 17657                           
 17658                           ;CC2500_B1.c: 291: };
 17659                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17660  1F08  319C  242D  319E   	fcall	_set_TimeoutCleared
 17661                           
 17662                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17663  1F0B  319E  26DD         	fcall	_CC2500_WriteByte
 17664                           
 17665                           ;CC2500_B1.c: 295: RC0 = 1;
 17666  1F0D  0020               	movlb	0	; select bank0
 17667  1F0E  140E               	bsf	14,0	;volatile
 17668  1F0F  0008               	return
 17669  1F10                     __end_of_CC2500_WriteCommand:	
 17670                           
 17671                           	psect	text123
 17672  1C2D                     __ptext123:	
 17673 ;; *************** function _set_TimeoutCleared *****************
 17674 ;; Defined at:
 17675 ;;		line 283 in file "../src/Main_B1.c"
 17676 ;; Parameters:    Size  Location     Type
 17677 ;;		None
 17678 ;; Auto vars:     Size  Location     Type
 17679 ;;		None
 17680 ;; Return value:  Size  Location     Type
 17681 ;;		None               void
 17682 ;; Registers used:
 17683 ;;		status,2
 17684 ;; Tracked objects:
 17685 ;;		On entry : 0/0
 17686 ;;		On exit  : 0/0
 17687 ;;		Unchanged: 0/0
 17688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;Total ram usage:        0 bytes
 17694 ;; Hardware stack levels used:    1
 17695 ;; Hardware stack levels required when called:    5
 17696 ;; This function calls:
 17697 ;;		Nothing
 17698 ;; This function is called by:
 17699 ;;		_CC2500_TxData
 17700 ;;		_CC2500_RxData
 17701 ;;		_CC2500_PowerRST
 17702 ;;		_CC2500_WriteREG
 17703 ;;		_CC2500_WriteCommand
 17704 ;;		_CC2500_ReadStatus
 17705 ;;		_getAD
 17706 ;;		_TouchPower
 17707 ;;		_CC2500_ReadREG
 17708 ;; This function uses a non-reentrant model
 17709 ;;
 17710                           
 17711                           
 17712                           ;psect for function _set_TimeoutCleared
 17713  1C2D                     _set_TimeoutCleared:	
 17714                           
 17715                           ;Main_B1.c: 284: myMain.Timeout = 0;
 17716                           
 17717                           ;incstack = 0
 17718                           ; Regs used in _set_TimeoutCleared: [status,2]
 17719  1C2D  0021               	movlb	1	; select bank1
 17720  1C2E  112B               	bcf	(_myMain^(0+128)+11),2
 17721                           
 17722                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 17723  1C2F  01AC               	clrf	(_myMain^(0+128)+12)
 17724  1C30  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17725  1C31  0008               	return
 17726  1C32                     __end_of_set_TimeoutCleared:	
 17727                           
 17728                           	psect	text124
 17729  1E70                     __ptext124:	
 17730 ;; *************** function _Timeout_Counter *****************
 17731 ;; Defined at:
 17732 ;;		line 274 in file "../src/Main_B1.c"
 17733 ;; Parameters:    Size  Location     Type
 17734 ;;		None
 17735 ;; Auto vars:     Size  Location     Type
 17736 ;;		None
 17737 ;; Return value:  Size  Location     Type
 17738 ;;		None               void
 17739 ;; Registers used:
 17740 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17741 ;; Tracked objects:
 17742 ;;		On entry : 0/0
 17743 ;;		On exit  : 0/0
 17744 ;;		Unchanged: 0/0
 17745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17750 ;;Total ram usage:        0 bytes
 17751 ;; Hardware stack levels used:    1
 17752 ;; Hardware stack levels required when called:    5
 17753 ;; This function calls:
 17754 ;;		Nothing
 17755 ;; This function is called by:
 17756 ;;		_CC2500_TxData
 17757 ;;		_CC2500_RxData
 17758 ;;		_CC2500_PowerRST
 17759 ;;		_CC2500_WriteREG
 17760 ;;		_CC2500_WriteCommand
 17761 ;;		_CC2500_ReadStatus
 17762 ;;		_getAD
 17763 ;;		_TouchPower
 17764 ;;		_CC2500_ReadREG
 17765 ;; This function uses a non-reentrant model
 17766 ;;
 17767                           
 17768                           
 17769                           ;psect for function _Timeout_Counter
 17770  1E70                     _Timeout_Counter:	
 17771                           
 17772                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 17773                           
 17774                           ;incstack = 0
 17775                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17776  1E70  3001               	movlw	1
 17777  1E71  0021               	movlb	1	; select bank1
 17778  1E72  07AC               	addwf	(_myMain^(0+128)+12),f
 17779  1E73  3000               	movlw	0
 17780  1E74  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 17781                           
 17782                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 17783  1E75  300C               	movlw	12
 17784  1E76  3EA0               	addlw	_myMain& (0+255)
 17785  1E77  0086               	movwf	6
 17786  1E78  0187               	clrf	7
 17787  1E79  3F40               	moviw [0]fsr1
 17788  1E7A  3A10               	xorlw	16
 17789  1E7B  1D03               	skipz
 17790  1E7C  2E7F               	goto	u9125
 17791  1E7D  3F41               	moviw [1]fsr1
 17792  1E7E  3A27               	xorlw	39
 17793  1E7F                     u9125:	
 17794  1E7F  1D03               	skipz
 17795  1E80  0008               	return
 17796                           
 17797                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 17798  1E81  01AC               	clrf	(_myMain^(0+128)+12)
 17799  1E82  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17800                           
 17801                           ;Main_B1.c: 278: myMain.Timeout = 1;
 17802  1E83  152B               	bsf	(_myMain^(0+128)+11),2
 17803  1E84  0008               	return
 17804  1E85                     __end_of_Timeout_Counter:	
 17805                           
 17806                           	psect	text125
 17807  1EDD                     __ptext125:	
 17808 ;; *************** function _CC2500_WriteByte *****************
 17809 ;; Defined at:
 17810 ;;		line 219 in file "../src/CC2500_B1.c"
 17811 ;; Parameters:    Size  Location     Type
 17812 ;;		None
 17813 ;; Auto vars:     Size  Location     Type
 17814 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17815 ;; Return value:  Size  Location     Type
 17816 ;;		None               void
 17817 ;; Registers used:
 17818 ;;		wreg, status,2, status,0
 17819 ;; Tracked objects:
 17820 ;;		On entry : 0/0
 17821 ;;		On exit  : 0/0
 17822 ;;		Unchanged: 0/0
 17823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17828 ;;Total ram usage:        2 bytes
 17829 ;; Hardware stack levels used:    1
 17830 ;; Hardware stack levels required when called:    5
 17831 ;; This function calls:
 17832 ;;		Nothing
 17833 ;; This function is called by:
 17834 ;;		_CC2500_TxData
 17835 ;;		_CC2500_RxData
 17836 ;;		_CC2500_PowerRST
 17837 ;;		_CC2500_WriteREG
 17838 ;;		_CC2500_WriteCommand
 17839 ;;		_CC2500_ReadStatus
 17840 ;;		_CC2500_ReadREG
 17841 ;; This function uses a non-reentrant model
 17842 ;;
 17843                           
 17844                           
 17845                           ;psect for function _CC2500_WriteByte
 17846  1EDD                     _CC2500_WriteByte:	
 17847                           
 17848                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17849                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17850                           
 17851                           ;incstack = 0
 17852                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17853  1EDD  0020               	movlb	0	; select bank0
 17854  1EDE  01A1               	clrf	CC2500_WriteByte@loop_a
 17855  1EDF                     L9:	
 17856  1EDF  3008               	movlw	8
 17857  1EE0  0221               	subwf	CC2500_WriteByte@loop_a,w
 17858  1EE1  1803               	btfsc	3,0
 17859  1EE2  0008               	return
 17860                           
 17861                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17862  1EE3  0021               	movlb	1	; select bank1
 17863  1EE4  1FD1               	btfss	_SPI0Buffer^(0+128),7
 17864  1EE5  2EE9               	goto	l304
 17865                           
 17866                           ;CC2500_B1.c: 223: RC4 = 1;
 17867  1EE6  0020               	movlb	0	; select bank0
 17868  1EE7  160E               	bsf	14,4	;volatile
 17869  1EE8  2EEB               	goto	l305
 17870  1EE9                     l304:	
 17871                           
 17872                           ;CC2500_B1.c: 224: else
 17873                           ;CC2500_B1.c: 225: RC4 = 0;
 17874  1EE9  0020               	movlb	0	; select bank0
 17875  1EEA  120E               	bcf	14,4	;volatile
 17876  1EEB                     l305:	
 17877                           
 17878                           ;CC2500_B1.c: 226: RC3 = 1;
 17879  1EEB  158E               	bsf	14,3	;volatile
 17880                           
 17881                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17882  1EEC  1003               	clrc
 17883  1EED  0021               	movlb	1	; select bank1
 17884  1EEE  0DD1               	rlf	_SPI0Buffer^(0+128),f
 17885                           
 17886                           ;CC2500_B1.c: 228: RC3 = 0;
 17887  1EEF  0020               	movlb	0	; select bank0
 17888  1EF0  118E               	bcf	14,3	;volatile
 17889  1EF1  3001               	movlw	1
 17890  1EF2  00A0               	movwf	??_CC2500_WriteByte
 17891  1EF3  0820               	movf	??_CC2500_WriteByte,w
 17892  1EF4  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17893  1EF5  2EDF               	goto	L9
 17894  1EF6                     __end_of_CC2500_WriteByte:	
 17895                           
 17896                           	psect	text126
 17897  14D0                     __ptext126:	
 17898 ;; *************** function _Buzzer_Main *****************
 17899 ;; Defined at:
 17900 ;;		line 46 in file "../src/Buzzer_B1.c"
 17901 ;; Parameters:    Size  Location     Type
 17902 ;;		None
 17903 ;; Auto vars:     Size  Location     Type
 17904 ;;		None
 17905 ;; Return value:  Size  Location     Type
 17906 ;;		None               void
 17907 ;; Registers used:
 17908 ;;		wreg, status,2, status,0
 17909 ;; Tracked objects:
 17910 ;;		On entry : 0/0
 17911 ;;		On exit  : 0/0
 17912 ;;		Unchanged: 0/0
 17913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17916 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17917 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17918 ;;Total ram usage:        1 bytes
 17919 ;; Hardware stack levels used:    1
 17920 ;; Hardware stack levels required when called:    5
 17921 ;; This function calls:
 17922 ;;		Nothing
 17923 ;; This function is called by:
 17924 ;;		_main
 17925 ;; This function uses a non-reentrant model
 17926 ;;
 17927                           
 17928                           
 17929                           ;psect for function _Buzzer_Main
 17930  14D0                     _Buzzer_Main:	
 17931                           
 17932                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17933                           
 17934                           ;incstack = 0
 17935                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17936  14D0  0021               	movlb	1	; select bank1
 17937  14D1  1CAE               	btfss	_Buz1^(0+128),1
 17938  14D2  0008               	return
 17939                           
 17940                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17941  14D3  3001               	movlw	1
 17942  14D4  07AF               	addwf	(_Buz1^(0+128)+1),f
 17943  14D5  3000               	movlw	0
 17944  14D6  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 17945                           
 17946                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17947  14D7  0835               	movf	((_Buz1+1)^(0+128)+6),w
 17948  14D8  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 17949  14D9  1D03               	skipz
 17950  14DA  2CDD               	goto	u11035
 17951  14DB  0834               	movf	(_Buz1^(0+128)+6),w
 17952  14DC  022F               	subwf	(_Buz1^(0+128)+1),w
 17953  14DD                     u11035:	
 17954  14DD  1C03               	skipc
 17955  14DE  0008               	return
 17956                           
 17957                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17958  14DF  01AF               	clrf	(_Buz1^(0+128)+1)
 17959  14E0  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17960                           
 17961                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17962  14E1  12AE               	bcf	_Buz1^(0+128),5
 17963  14E2  0020               	movlb	0	; select bank0
 17964  14E3  1D8D               	btfss	13,3	;volatile
 17965  14E4  2CE7               	goto	l9767
 17966  14E5  0021               	movlb	1	; select bank1
 17967  14E6  16AE               	bsf	_Buz1^(0+128),5
 17968  14E7                     l9767:	
 17969                           
 17970                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17971  14E7  0021               	movlb	1	; select bank1
 17972  14E8  1AAE               	btfsc	_Buz1^(0+128),5
 17973  14E9  2D13               	goto	l94
 17974                           
 17975                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17976  14EA  08B1               	movf	(_Buz1^(0+128)+3),f
 17977  14EB  1D03               	skipz
 17978  14EC  2D0F               	goto	l95
 17979                           
 17980                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17981  14ED  1DAE               	btfss	_Buz1^(0+128),3
 17982  14EE  2CFD               	goto	l96
 17983                           
 17984                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17985  14EF  11AE               	bcf	_Buz1^(0+128),3
 17986                           
 17987                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17988  14F0  0832               	movf	(_Buz1^(0+128)+4),w
 17989  14F1  0020               	movlb	0	; select bank0
 17990  14F2  00A0               	movwf	??_Buzzer_Main
 17991  14F3  0820               	movf	??_Buzzer_Main,w
 17992  14F4  0021               	movlb	1	; select bank1
 17993  14F5  00B1               	movwf	(_Buz1^(0+128)+3)
 17994                           
 17995                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17996  14F6  0837               	movf	((_Buz1+1)^(0+128)+8),w
 17997  14F7  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17998  14F8  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17999  14F9  0836               	movf	(_Buz1^(0+128)+8),w
 18000  14FA  01B4               	clrf	(_Buz1^(0+128)+6)
 18001  14FB  07B4               	addwf	(_Buz1^(0+128)+6),f
 18002                           
 18003                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18004  14FC  0008               	return
 18005  14FD                     l96:	
 18006  14FD  1E2E               	btfss	_Buz1^(0+128),4
 18007  14FE  2D0D               	goto	l98
 18008                           
 18009                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18010  14FF  122E               	bcf	_Buz1^(0+128),4
 18011                           
 18012                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18013  1500  0833               	movf	(_Buz1^(0+128)+5),w
 18014  1501  0020               	movlb	0	; select bank0
 18015  1502  00A0               	movwf	??_Buzzer_Main
 18016  1503  0820               	movf	??_Buzzer_Main,w
 18017  1504  0021               	movlb	1	; select bank1
 18018  1505  00B1               	movwf	(_Buz1^(0+128)+3)
 18019                           
 18020                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18021  1506  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18022  1507  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18023  1508  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18024  1509  0838               	movf	(_Buz1^(0+128)+10),w
 18025  150A  01B4               	clrf	(_Buz1^(0+128)+6)
 18026  150B  07B4               	addwf	(_Buz1^(0+128)+6),f
 18027                           
 18028                           ;Buzzer_B1.c: 62: } else {
 18029  150C  0008               	return
 18030  150D                     l98:	
 18031                           
 18032                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18033  150D  10AE               	bcf	_Buz1^(0+128),1
 18034                           
 18035                           ;Buzzer_B1.c: 64: }
 18036                           ;Buzzer_B1.c: 65: } else {
 18037  150E  0008               	return
 18038  150F                     l95:	
 18039                           
 18040                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18041  150F  16AE               	bsf	_Buz1^(0+128),5
 18042                           
 18043                           ;Buzzer_B1.c: 68: RB3 = 1;
 18044  1510  0020               	movlb	0	; select bank0
 18045  1511  158D               	bsf	13,3	;volatile
 18046                           
 18047                           ;Buzzer_B1.c: 69: }
 18048                           ;Buzzer_B1.c: 70: } else {
 18049  1512  0008               	return
 18050  1513                     l94:	
 18051                           
 18052                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18053  1513  12AE               	bcf	_Buz1^(0+128),5
 18054                           
 18055                           ;Buzzer_B1.c: 73: RB3 = 0;
 18056  1514  0020               	movlb	0	; select bank0
 18057  1515  118D               	bcf	13,3	;volatile
 18058                           
 18059                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18060  1516  3001               	movlw	1
 18061  1517  0021               	movlb	1	; select bank1
 18062  1518  02B1               	subwf	(_Buz1^(0+128)+3),f
 18063  1519  0008               	return
 18064  151A                     __end_of_Buzzer_Main:	
 18065                           
 18066                           	psect	text127
 18067  1BF7                     __ptext127:	
 18068 ;; *************** function _Buzzer_Initialization *****************
 18069 ;; Defined at:
 18070 ;;		line 11 in file "../src/Buzzer_B1.c"
 18071 ;; Parameters:    Size  Location     Type
 18072 ;;		None
 18073 ;; Auto vars:     Size  Location     Type
 18074 ;;		None
 18075 ;; Return value:  Size  Location     Type
 18076 ;;		None               void
 18077 ;; Registers used:
 18078 ;;		None
 18079 ;; Tracked objects:
 18080 ;;		On entry : 0/0
 18081 ;;		On exit  : 0/0
 18082 ;;		Unchanged: 0/0
 18083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18088 ;;Total ram usage:        0 bytes
 18089 ;; Hardware stack levels used:    1
 18090 ;; Hardware stack levels required when called:    5
 18091 ;; This function calls:
 18092 ;;		Nothing
 18093 ;; This function is called by:
 18094 ;;		_main
 18095 ;; This function uses a non-reentrant model
 18096 ;;
 18097                           
 18098                           
 18099                           ;psect for function _Buzzer_Initialization
 18100  1BF7                     _Buzzer_Initialization:	
 18101                           
 18102                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18103                           
 18104                           ;incstack = 0
 18105                           ; Regs used in _Buzzer_Initialization: []
 18106  1BF7  0021               	movlb	1	; select bank1
 18107  1BF8  142E               	bsf	_Buz1^(0+128),0
 18108  1BF9  0008               	return
 18109  1BFA                     __end_of_Buzzer_Initialization:	
 18110                           
 18111                           	psect	intentry
 18112  0004                     __pintentry:	
 18113 ;; *************** function _ISR *****************
 18114 ;; Defined at:
 18115 ;;		line 107 in file "../src/MCU_B1.c"
 18116 ;; Parameters:    Size  Location     Type
 18117 ;;		None
 18118 ;; Auto vars:     Size  Location     Type
 18119 ;;		None
 18120 ;; Return value:  Size  Location     Type
 18121 ;;		None               void
 18122 ;; Registers used:
 18123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18124 ;; Tracked objects:
 18125 ;;		On entry : 0/0
 18126 ;;		On exit  : 0/0
 18127 ;;		Unchanged: 0/0
 18128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18131 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18132 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18133 ;;Total ram usage:        1 bytes
 18134 ;; Hardware stack levels used:    1
 18135 ;; Hardware stack levels required when called:    4
 18136 ;; This function calls:
 18137 ;;		_IOC_ISR
 18138 ;;		_TMR1_ISR
 18139 ;; This function is called by:
 18140 ;;		Interrupt level 1
 18141 ;; This function uses a non-reentrant model
 18142 ;;
 18143                           
 18144  0004                     _ISR:	
 18145                           
 18146                           ;incstack = 0
 18147                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18148  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18149  0005  3180               	pagesel	$
 18150  0006  0020               	movlb	0	; select bank0
 18151  0007  087F               	movf	127,w
 18152  0008  00F4               	movwf	??_ISR
 18153                           
 18154                           ;MCU_B1.c: 109: IOC_ISR();
 18155  0009  319D  2559  3180   	fcall	_IOC_ISR
 18156                           
 18157                           ;MCU_B1.c: 111: ;;
 18158                           ;MCU_B1.c: 113: TMR1_ISR();
 18159  000C  3190  20B4         	fcall	_TMR1_ISR
 18160  000E  0874               	movf	??_ISR,w
 18161  000F  0020               	movlb	0	; select bank0
 18162  0010  00FF               	movwf	127
 18163  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18164  0012  0009               	retfie
 18165  0013                     __end_of_ISR:	
 18166                           
 18167                           	psect	text129
 18168  10B4                     __ptext129:	
 18169 ;; *************** function _TMR1_ISR *****************
 18170 ;; Defined at:
 18171 ;;		line 209 in file "../src/MCU_B1.c"
 18172 ;; Parameters:    Size  Location     Type
 18173 ;;		None
 18174 ;; Auto vars:     Size  Location     Type
 18175 ;;		None
 18176 ;; Return value:  Size  Location     Type
 18177 ;;		None               void
 18178 ;; Registers used:
 18179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18180 ;; Tracked objects:
 18181 ;;		On entry : 0/0
 18182 ;;		On exit  : 0/0
 18183 ;;		Unchanged: 0/0
 18184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18189 ;;Total ram usage:        0 bytes
 18190 ;; Hardware stack levels used:    1
 18191 ;; Hardware stack levels required when called:    2
 18192 ;; This function calls:
 18193 ;;		_setDimmerLights_IntrControl
 18194 ;; This function is called by:
 18195 ;;		_ISR
 18196 ;; This function uses a non-reentrant model
 18197 ;;
 18198                           
 18199                           
 18200                           ;psect for function _TMR1_ISR
 18201  10B4                     _TMR1_ISR:	
 18202                           
 18203                           ;MCU_B1.c: 211: if (TMR1IE == 1 && TMR1IF == 1) {
 18204                           
 18205                           ;incstack = 0
 18206                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18207  10B4  0021               	movlb	1	; select bank1
 18208  10B5  1C11               	btfss	17,0	;volatile
 18209  10B6  0008               	return
 18210  10B7  0020               	movlb	0	; select bank0
 18211  10B8  1C11               	btfss	17,0	;volatile
 18212  10B9  0008               	return
 18213                           
 18214                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18215  10BA  30FA               	movlw	250
 18216  10BB  0097               	movwf	23	;volatile
 18217                           
 18218                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18219  10BC  3038               	movlw	56
 18220  10BD  0096               	movwf	22	;volatile
 18221                           
 18222                           ;MCU_B1.c: 214: TMR1IF = 0;
 18223  10BE  1011               	bcf	17,0	;volatile
 18224                           
 18225                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18226  10BF  3001               	movlw	1
 18227  10C0  3183  2360  3190   	fcall	_setDimmerLights_IntrControl
 18228                           
 18229                           ;MCU_B1.c: 235: Timer1.Count++;
 18230  10C3  3001               	movlw	1
 18231  10C4  0022               	movlb	2	; select bank2
 18232  10C5  07A1               	addwf	(_Timer1^(0+256)+1),f
 18233  10C6  3000               	movlw	0
 18234  10C7  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18235                           
 18236                           ;MCU_B1.c: 236: if (Timer1.Count == 100) {
 18237  10C8  3001               	movlw	1
 18238  10C9  3E20               	addlw	_Timer1& (0+255)
 18239  10CA  0086               	movwf	6
 18240  10CB  3001               	movlw	1	; select bank2/3
 18241  10CC  0087               	movwf	7
 18242  10CD  3F40               	moviw [0]fsr1
 18243  10CE  3A64               	xorlw	100
 18244  10CF  1D03               	skipz
 18245  10D0  28D3               	goto	u735_25
 18246  10D1  3F41               	moviw [1]fsr1
 18247  10D2  3A00               	xorlw	0
 18248  10D3                     u735_25:	
 18249  10D3  1D03               	skipz
 18250  10D4  0008               	return
 18251                           
 18252                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18253  10D5  01A1               	clrf	(_Timer1^(0+256)+1)
 18254  10D6  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18255                           
 18256                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18257  10D7  1420               	bsf	_Timer1^(0+256),0
 18258  10D8  0008               	return
 18259  10D9                     __end_of_TMR1_ISR:	
 18260                           
 18261                           	psect	text130
 18262  0360                     __ptext130:	
 18263 ;; *************** function _setDimmerLights_IntrControl *****************
 18264 ;; Defined at:
 18265 ;;		line 96 in file "../src/Dimmer_B1.c"
 18266 ;; Parameters:    Size  Location     Type
 18267 ;;  lights          1    wreg     unsigned char 
 18268 ;; Auto vars:     Size  Location     Type
 18269 ;;  lights          1    3[COMMON] unsigned char 
 18270 ;; Return value:  Size  Location     Type
 18271 ;;		None               void
 18272 ;; Registers used:
 18273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18274 ;; Tracked objects:
 18275 ;;		On entry : 0/0
 18276 ;;		On exit  : 0/0
 18277 ;;		Unchanged: 0/0
 18278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18280 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18281 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18282 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18283 ;;Total ram usage:        2 bytes
 18284 ;; Hardware stack levels used:    1
 18285 ;; Hardware stack levels required when called:    1
 18286 ;; This function calls:
 18287 ;;		_DimmerIntrPointSelect
 18288 ;; This function is called by:
 18289 ;;		_TMR1_ISR
 18290 ;; This function uses a non-reentrant model
 18291 ;;
 18292                           
 18293                           
 18294                           ;psect for function _setDimmerLights_IntrControl
 18295  0360                     _setDimmerLights_IntrControl:	
 18296                           
 18297                           ;incstack = 0
 18298                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18299                           ;setDimmerLights_IntrControl@lights stored from wreg
 18300  0360  00F3               	movwf	setDimmerLights_IntrControl@lights
 18301                           
 18302                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18303  0361  0873               	movf	setDimmerLights_IntrControl@lights,w
 18304  0362  319C  247E  3183   	fcall	_DimmerIntrPointSelect
 18305                           
 18306                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18307  0365  0876               	movf	_DimmerLightsIntr,w
 18308  0366  3E02               	addlw	2
 18309  0367  0086               	movwf	6
 18310  0368  3001               	movlw	1	; select bank2/3
 18311  0369  0087               	movwf	7
 18312  036A  1D01               	btfss	1,2
 18313  036B  2B8A               	goto	i1l6797
 18314                           
 18315                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18316  036C  3001               	movlw	1
 18317  036D  00F2               	movwf	??_setDimmerLights_IntrControl
 18318  036E  0876               	movf	_DimmerLightsIntr,w
 18319  036F  3E03               	addlw	3
 18320  0370  0086               	movwf	6
 18321  0371  3001               	movlw	1	; select bank2/3
 18322  0372  0087               	movwf	7
 18323  0373  0872               	movf	??_setDimmerLights_IntrControl,w
 18324  0374  0781               	addwf	1,f
 18325                           
 18326                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(70*0.8)) + 1) {
 18327  0375  0876               	movf	_DimmerLightsIntr,w
 18328  0376  3E03               	addlw	3
 18329  0377  0086               	movwf	6
 18330  0378  3001               	movlw	1	; select bank2/3
 18331  0379  0087               	movwf	7
 18332  037A  3039               	movlw	57
 18333  037B  0201               	subwf	1,w
 18334  037C  1C03               	skipc
 18335  037D  2B8A               	goto	i1l6797
 18336                           
 18337                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18338  037E  0876               	movf	_DimmerLightsIntr,w
 18339  037F  3E03               	addlw	3
 18340  0380  0086               	movwf	6
 18341  0381  3001               	movlw	1	; select bank2/3
 18342  0382  0087               	movwf	7
 18343  0383  0181               	clrf	1
 18344                           
 18345                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18346  0384  0876               	movf	_DimmerLightsIntr,w
 18347  0385  3E02               	addlw	2
 18348  0386  0086               	movwf	6
 18349  0387  3001               	movlw	1	; select bank2/3
 18350  0388  0087               	movwf	7
 18351  0389  1101               	bcf	1,2
 18352  038A                     i1l6797:	
 18353                           
 18354                           ;Dimmer_B1.c: 241: }
 18355                           ;Dimmer_B1.c: 242: }
 18356                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18357  038A  0A76               	incf	_DimmerLightsIntr,w
 18358  038B  0086               	movwf	6
 18359  038C  3001               	movlw	1	; select bank2/3
 18360  038D  0087               	movwf	7
 18361  038E  1C01               	btfss	1,0
 18362  038F  2BBA               	goto	i1l6809
 18363                           
 18364                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18365  0390  0876               	movf	_DimmerLightsIntr,w
 18366  0391  3E03               	addlw	3
 18367  0392  0086               	movwf	6
 18368  0393  3001               	movlw	1	; select bank2/3
 18369  0394  0087               	movwf	7
 18370  0395  0876               	movf	_DimmerLightsIntr,w
 18371  0396  3E04               	addlw	4
 18372  0397  0084               	movwf	4
 18373  0398  3001               	movlw	1	; select bank2/3
 18374  0399  0085               	movwf	5
 18375  039A  0800               	movf	0,w
 18376  039B  0201               	subwf	1,w
 18377  039C  1C03               	skipc
 18378  039D  0008               	return
 18379                           
 18380                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18381  039E  0A76               	incf	_DimmerLightsIntr,w
 18382  039F  0086               	movwf	6
 18383  03A0  3001               	movlw	1	; select bank2/3
 18384  03A1  0087               	movwf	7
 18385  03A2  1001               	bcf	1,0
 18386                           
 18387                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18388  03A3  0A76               	incf	_DimmerLightsIntr,w
 18389  03A4  0086               	movwf	6
 18390  03A5  3001               	movlw	1	; select bank2/3
 18391  03A6  0087               	movwf	7
 18392  03A7  1581               	bsf	1,3
 18393                           
 18394                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18395  03A8  0876               	movf	_DimmerLightsIntr,w
 18396  03A9  0086               	movwf	6
 18397  03AA  3001               	movlw	1	; select bank2/3
 18398  03AB  0087               	movwf	7
 18399  03AC  1C01               	btfss	1,0
 18400  03AD  0008               	return
 18401                           
 18402                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18403  03AE  0876               	movf	_DimmerLightsIntr,w
 18404  03AF  0086               	movwf	6
 18405  03B0  3001               	movlw	1	; select bank2/3
 18406  03B1  0087               	movwf	7
 18407  03B2  1001               	bcf	1,0
 18408                           
 18409                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18410  03B3  0873               	movf	setDimmerLights_IntrControl@lights,w
 18411  03B4  3A01               	xorlw	1
 18412  03B5  1D03               	skipz
 18413  03B6  0008               	return
 18414                           
 18415                           ;Dimmer_B1.c: 253: RB1 = 0;
 18416  03B7  0020               	movlb	0	; select bank0
 18417  03B8  108D               	bcf	13,1	;volatile
 18418                           
 18419                           ;Dimmer_B1.c: 255: }
 18420                           ;Dimmer_B1.c: 262: }
 18421                           ;Dimmer_B1.c: 263: }
 18422                           ;Dimmer_B1.c: 264: } else {
 18423  03B9  0008               	return
 18424  03BA                     i1l6809:	
 18425                           
 18426                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18427  03BA  0A76               	incf	_DimmerLightsIntr,w
 18428  03BB  0086               	movwf	6
 18429  03BC  3001               	movlw	1	; select bank2/3
 18430  03BD  0087               	movwf	7
 18431  03BE  1D81               	btfss	1,3
 18432  03BF  0008               	return
 18433                           
 18434                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18435  03C0  0A76               	incf	_DimmerLightsIntr,w
 18436  03C1  0086               	movwf	6
 18437  03C2  3001               	movlw	1	; select bank2/3
 18438  03C3  0087               	movwf	7
 18439  03C4  1181               	bcf	1,3
 18440                           
 18441                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18442  03C5  3001               	movlw	1
 18443  03C6  00F2               	movwf	??_setDimmerLights_IntrControl
 18444  03C7  0876               	movf	_DimmerLightsIntr,w
 18445  03C8  3E05               	addlw	5
 18446  03C9  0086               	movwf	6
 18447  03CA  3001               	movlw	1	; select bank2/3
 18448  03CB  0087               	movwf	7
 18449  03CC  0872               	movf	??_setDimmerLights_IntrControl,w
 18450  03CD  0781               	addwf	1,f
 18451                           
 18452                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18453  03CE  0876               	movf	_DimmerLightsIntr,w
 18454  03CF  3E05               	addlw	5
 18455  03D0  0086               	movwf	6
 18456  03D1  3001               	movlw	1	; select bank2/3
 18457  03D2  0087               	movwf	7
 18458  03D3  0876               	movf	_DimmerLightsIntr,w
 18459  03D4  3E08               	addlw	8
 18460  03D5  0084               	movwf	4
 18461  03D6  3001               	movlw	1	; select bank2/3
 18462  03D7  0085               	movwf	5
 18463  03D8  0800               	movf	0,w
 18464  03D9  0201               	subwf	1,w
 18465  03DA  1C03               	skipc
 18466  03DB  2C1E               	goto	i1l6835
 18467                           
 18468                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18469  03DC  0876               	movf	_DimmerLightsIntr,w
 18470  03DD  3E05               	addlw	5
 18471  03DE  0086               	movwf	6
 18472  03DF  3001               	movlw	1	; select bank2/3
 18473  03E0  0087               	movwf	7
 18474  03E1  0181               	clrf	1
 18475                           
 18476                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18477  03E2  0A76               	incf	_DimmerLightsIntr,w
 18478  03E3  0086               	movwf	6
 18479  03E4  3001               	movlw	1	; select bank2/3
 18480  03E5  0087               	movwf	7
 18481  03E6  1F01               	btfss	1,6
 18482  03E7  0008               	return
 18483                           
 18484                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18485  03E8  0A76               	incf	_DimmerLightsIntr,w
 18486  03E9  0086               	movwf	6
 18487  03EA  3001               	movlw	1	; select bank2/3
 18488  03EB  0087               	movwf	7
 18489  03EC  1B81               	btfsc	1,7
 18490  03ED  2C07               	goto	i1l6829
 18491                           
 18492                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(70*0.8))) {
 18493  03EE  0876               	movf	_DimmerLightsIntr,w
 18494  03EF  3E04               	addlw	4
 18495  03F0  0086               	movwf	6
 18496  03F1  3001               	movlw	1	; select bank2/3
 18497  03F2  0087               	movwf	7
 18498  03F3  3038               	movlw	56
 18499  03F4  0201               	subwf	1,w
 18500  03F5  1803               	skipnc
 18501  03F6  2C01               	goto	i1l6827
 18502                           
 18503                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18504  03F7  3001               	movlw	1
 18505  03F8  00F2               	movwf	??_setDimmerLights_IntrControl
 18506  03F9  0876               	movf	_DimmerLightsIntr,w
 18507  03FA  3E04               	addlw	4
 18508  03FB  0086               	movwf	6
 18509  03FC  3001               	movlw	1	; select bank2/3
 18510  03FD  0087               	movwf	7
 18511  03FE  0872               	movf	??_setDimmerLights_IntrControl,w
 18512  03FF  0781               	addwf	1,f
 18513                           
 18514                           ;Dimmer_B1.c: 274: } else {
 18515  0400  0008               	return
 18516  0401                     i1l6827:	
 18517                           
 18518                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 18519  0401  0A76               	incf	_DimmerLightsIntr,w
 18520  0402  0086               	movwf	6
 18521  0403  3001               	movlw	1	; select bank2/3
 18522  0404  0087               	movwf	7
 18523  0405  1781               	bsf	1,7
 18524                           
 18525                           ;Dimmer_B1.c: 276: }
 18526                           ;Dimmer_B1.c: 277: } else {
 18527  0406  0008               	return
 18528  0407                     i1l6829:	
 18529                           
 18530                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18531  0407  0876               	movf	_DimmerLightsIntr,w
 18532  0408  3E04               	addlw	4
 18533  0409  0086               	movwf	6
 18534  040A  3001               	movlw	1	; select bank2/3
 18535  040B  0087               	movwf	7
 18536  040C  300D               	movlw	13
 18537  040D  0201               	subwf	1,w
 18538  040E  1C03               	skipc
 18539  040F  2C18               	goto	i1l6833
 18540                           
 18541                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 18542  0410  0876               	movf	_DimmerLightsIntr,w
 18543  0411  3E04               	addlw	4
 18544  0412  0086               	movwf	6
 18545  0413  3001               	movlw	1	; select bank2/3
 18546  0414  0087               	movwf	7
 18547  0415  3001               	movlw	1
 18548  0416  0281               	subwf	1,f
 18549                           
 18550                           ;Dimmer_B1.c: 280: } else
 18551  0417  0008               	return
 18552  0418                     i1l6833:	
 18553                           
 18554                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 18555  0418  0A76               	incf	_DimmerLightsIntr,w
 18556  0419  0086               	movwf	6
 18557  041A  3001               	movlw	1	; select bank2/3
 18558  041B  0087               	movwf	7
 18559  041C  1381               	bcf	1,7
 18560                           
 18561                           ;Dimmer_B1.c: 282: }
 18562                           ;Dimmer_B1.c: 283: }
 18563                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 18564  041D  0008               	return
 18565  041E                     i1l6835:	
 18566  041E  0876               	movf	_DimmerLightsIntr,w
 18567  041F  3E02               	addlw	2
 18568  0420  0086               	movwf	6
 18569  0421  3001               	movlw	1	; select bank2/3
 18570  0422  0087               	movwf	7
 18571  0423  1C01               	btfss	1,0
 18572  0424  0008               	return
 18573                           
 18574                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18575  0425  0876               	movf	_DimmerLightsIntr,w
 18576  0426  3E04               	addlw	4
 18577  0427  0086               	movwf	6
 18578  0428  3001               	movlw	1	; select bank2/3
 18579  0429  0087               	movwf	7
 18580  042A  0876               	movf	_DimmerLightsIntr,w
 18581  042B  3E06               	addlw	6
 18582  042C  0084               	movwf	4
 18583  042D  3001               	movlw	1	; select bank2/3
 18584  042E  0085               	movwf	5
 18585  042F  0800               	movf	0,w
 18586  0430  0201               	subwf	1,w
 18587  0431  1803               	skipnc
 18588  0432  2C3D               	goto	i1l6841
 18589                           
 18590                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 18591  0433  3001               	movlw	1
 18592  0434  00F2               	movwf	??_setDimmerLights_IntrControl
 18593  0435  0876               	movf	_DimmerLightsIntr,w
 18594  0436  3E04               	addlw	4
 18595  0437  0086               	movwf	6
 18596  0438  3001               	movlw	1	; select bank2/3
 18597  0439  0087               	movwf	7
 18598  043A  0872               	movf	??_setDimmerLights_IntrControl,w
 18599  043B  0781               	addwf	1,f
 18600                           
 18601                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18602  043C  0008               	return
 18603  043D                     i1l6841:	
 18604  043D  0876               	movf	_DimmerLightsIntr,w
 18605  043E  3E06               	addlw	6
 18606  043F  0086               	movwf	6
 18607  0440  3001               	movlw	1	; select bank2/3
 18608  0441  0087               	movwf	7
 18609  0442  0876               	movf	_DimmerLightsIntr,w
 18610  0443  3E04               	addlw	4
 18611  0444  0084               	movwf	4
 18612  0445  3001               	movlw	1	; select bank2/3
 18613  0446  0085               	movwf	5
 18614  0447  0800               	movf	0,w
 18615  0448  0201               	subwf	1,w
 18616  0449  1803               	skipnc
 18617  044A  2C53               	goto	i1l6845
 18618                           
 18619                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 18620  044B  0876               	movf	_DimmerLightsIntr,w
 18621  044C  3E04               	addlw	4
 18622  044D  0086               	movwf	6
 18623  044E  3001               	movlw	1	; select bank2/3
 18624  044F  0087               	movwf	7
 18625  0450  3001               	movlw	1
 18626  0451  0281               	subwf	1,f
 18627                           
 18628                           ;Dimmer_B1.c: 289: } else {
 18629  0452  0008               	return
 18630  0453                     i1l6845:	
 18631                           
 18632                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 18633  0453  0876               	movf	_DimmerLightsIntr,w
 18634  0454  3E02               	addlw	2
 18635  0455  0086               	movwf	6
 18636  0456  3001               	movlw	1	; select bank2/3
 18637  0457  0087               	movwf	7
 18638  0458  1001               	bcf	1,0
 18639  0459  0008               	return
 18640  045A                     __end_of_setDimmerLights_IntrControl:	
 18641                           
 18642                           	psect	text131
 18643  1C7E                     __ptext131:	
 18644 ;; *************** function _DimmerIntrPointSelect *****************
 18645 ;; Defined at:
 18646 ;;		line 74 in file "../src/Dimmer_B1.c"
 18647 ;; Parameters:    Size  Location     Type
 18648 ;;  lights          1    wreg     unsigned char 
 18649 ;; Auto vars:     Size  Location     Type
 18650 ;;  lights          1    1[COMMON] unsigned char 
 18651 ;; Return value:  Size  Location     Type
 18652 ;;		None               void
 18653 ;; Registers used:
 18654 ;;		wreg
 18655 ;; Tracked objects:
 18656 ;;		On entry : 0/0
 18657 ;;		On exit  : 0/0
 18658 ;;		Unchanged: 0/0
 18659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18661 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18662 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18663 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18664 ;;Total ram usage:        2 bytes
 18665 ;; Hardware stack levels used:    1
 18666 ;; This function calls:
 18667 ;;		Nothing
 18668 ;; This function is called by:
 18669 ;;		_setDimmerLights_IntrControl
 18670 ;; This function uses a non-reentrant model
 18671 ;;
 18672                           
 18673                           
 18674                           ;psect for function _DimmerIntrPointSelect
 18675  1C7E                     _DimmerIntrPointSelect:	
 18676                           
 18677                           ;incstack = 0
 18678                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18679                           ;DimmerIntrPointSelect@lights stored from wreg
 18680  1C7E  00F1               	movwf	DimmerIntrPointSelect@lights
 18681                           
 18682                           ;Dimmer_B1.c: 76: if (lights == 1) {
 18683  1C7F  0871               	movf	DimmerIntrPointSelect@lights,w
 18684  1C80  3A01               	xorlw	1
 18685  1C81  1D03               	skipz
 18686  1C82  0008               	return
 18687                           
 18688                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 18689  1C83  3053               	movlw	_DimmerLights1& (0+255)
 18690  1C84  00F0               	movwf	??_DimmerIntrPointSelect
 18691  1C85  0870               	movf	??_DimmerIntrPointSelect,w
 18692  1C86  00F6               	movwf	_DimmerLightsIntr
 18693  1C87  0008               	return
 18694  1C88                     __end_of_DimmerIntrPointSelect:	
 18695                           
 18696                           	psect	text132
 18697  1D59                     __ptext132:	
 18698 ;; *************** function _IOC_ISR *****************
 18699 ;; Defined at:
 18700 ;;		line 400 in file "../src/MCU_B1.c"
 18701 ;; Parameters:    Size  Location     Type
 18702 ;;		None
 18703 ;; Auto vars:     Size  Location     Type
 18704 ;;		None
 18705 ;; Return value:  Size  Location     Type
 18706 ;;		None               void
 18707 ;; Registers used:
 18708 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18709 ;; Tracked objects:
 18710 ;;		On entry : 0/0
 18711 ;;		On exit  : 0/0
 18712 ;;		Unchanged: 0/0
 18713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18718 ;;Total ram usage:        0 bytes
 18719 ;; Hardware stack levels used:    1
 18720 ;; Hardware stack levels required when called:    3
 18721 ;; This function calls:
 18722 ;;		_setDimmerReClock
 18723 ;; This function is called by:
 18724 ;;		_ISR
 18725 ;; This function uses a non-reentrant model
 18726 ;;
 18727                           
 18728                           
 18729                           ;psect for function _IOC_ISR
 18730  1D59                     _IOC_ISR:	
 18731                           
 18732                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18733                           
 18734                           ;incstack = 0
 18735                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18736  1D59  1D8B               	btfss	11,3	;volatile
 18737  1D5A  0008               	return
 18738  1D5B  1C0B               	btfss	11,0	;volatile
 18739  1D5C  0008               	return
 18740  1D5D  0027               	movlb	7	; select bank7
 18741  1D5E  1D16               	btfss	22,2	;volatile
 18742  1D5F  0008               	return
 18743                           
 18744                           ;MCU_B1.c: 402: IOCBF2 = 0;
 18745  1D60  1116               	bcf	22,2	;volatile
 18746                           
 18747                           ;MCU_B1.c: 403: IOCIF = 0;
 18748  1D61  100B               	bcf	11,0	;volatile
 18749                           
 18750                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 18751  1D62  0021               	movlb	1	; select bank1
 18752  1D63  1C20               	btfss	_myMain^(0+128),0
 18753  1D64  0008               	return
 18754                           
 18755                           ;MCU_B1.c: 407: setDimmerReClock();
 18756  1D65  319C  2409         	fcall	_setDimmerReClock
 18757  1D67  0008               	return
 18758  1D68                     __end_of_IOC_ISR:	
 18759                           
 18760                           	psect	text133
 18761  1C09                     __ptext133:	
 18762 ;; *************** function _setDimmerReClock *****************
 18763 ;; Defined at:
 18764 ;;		line 243 in file "../src/MCU_B1.c"
 18765 ;; Parameters:    Size  Location     Type
 18766 ;;		None
 18767 ;; Auto vars:     Size  Location     Type
 18768 ;;		None
 18769 ;; Return value:  Size  Location     Type
 18770 ;;		None               void
 18771 ;; Registers used:
 18772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18773 ;; Tracked objects:
 18774 ;;		On entry : 0/0
 18775 ;;		On exit  : 0/0
 18776 ;;		Unchanged: 0/0
 18777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18782 ;;Total ram usage:        0 bytes
 18783 ;; Hardware stack levels used:    1
 18784 ;; Hardware stack levels required when called:    2
 18785 ;; This function calls:
 18786 ;;		_setDimmerLights_IntrIOC_GO
 18787 ;; This function is called by:
 18788 ;;		_IOC_ISR
 18789 ;; This function uses a non-reentrant model
 18790 ;;
 18791                           
 18792                           
 18793                           ;psect for function _setDimmerReClock
 18794  1C09                     _setDimmerReClock:	
 18795                           
 18796                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 18797                           
 18798                           ;incstack = 0
 18799                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18800  1C09  3001               	movlw	1
 18801  1C0A  3192  2265         	fcall	_setDimmerLights_IntrIOC_GO
 18802  1C0C  0008               	return
 18803  1C0D                     __end_of_setDimmerReClock:	
 18804                           
 18805                           	psect	text134
 18806  1265                     __ptext134:	
 18807 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18808 ;; Defined at:
 18809 ;;		line 28 in file "../src/Dimmer_B1.c"
 18810 ;; Parameters:    Size  Location     Type
 18811 ;;  lights          1    wreg     unsigned char 
 18812 ;; Auto vars:     Size  Location     Type
 18813 ;;  lights          1    2[COMMON] unsigned char 
 18814 ;; Return value:  Size  Location     Type
 18815 ;;		None               void
 18816 ;; Registers used:
 18817 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18818 ;; Tracked objects:
 18819 ;;		On entry : 0/0
 18820 ;;		On exit  : 0/0
 18821 ;;		Unchanged: 0/0
 18822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18824 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18826 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18827 ;;Total ram usage:        1 bytes
 18828 ;; Hardware stack levels used:    1
 18829 ;; Hardware stack levels required when called:    1
 18830 ;; This function calls:
 18831 ;;		_DimmerIntrIOCPointSelect
 18832 ;; This function is called by:
 18833 ;;		_setDimmerReClock
 18834 ;; This function uses a non-reentrant model
 18835 ;;
 18836                           
 18837                           
 18838                           ;psect for function _setDimmerLights_IntrIOC_GO
 18839  1265                     _setDimmerLights_IntrIOC_GO:	
 18840                           
 18841                           ;incstack = 0
 18842                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18843                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18844  1265  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18845                           
 18846                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18847  1266  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18848  1267  319C  249C  3192   	fcall	_DimmerIntrIOCPointSelect
 18849                           
 18850                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 18851  126A  0021               	movlb	1	; select bank1
 18852  126B  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18853  126C  3E02               	addlw	2
 18854  126D  0086               	movwf	6
 18855  126E  3001               	movlw	1	; select bank2/3
 18856  126F  0087               	movwf	7
 18857  1270  1901               	btfsc	1,2
 18858  1271  0008               	return
 18859  1272  0020               	movlb	0	; select bank0
 18860  1273  1D0D               	btfss	13,2	;volatile
 18861  1274  0008               	return
 18862                           
 18863                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 18864  1275  0021               	movlb	1	; select bank1
 18865  1276  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18866  1277  3E02               	addlw	2
 18867  1278  0086               	movwf	6
 18868  1279  3001               	movlw	1	; select bank2/3
 18869  127A  0087               	movwf	7
 18870  127B  1501               	bsf	1,2
 18871                           
 18872                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 18873  127C  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18874  127D  0086               	movwf	6
 18875  127E  3001               	movlw	1	; select bank2/3
 18876  127F  0087               	movwf	7
 18877  1280  1401               	bsf	1,0
 18878                           
 18879                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 18880  1281  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18881  1282  0086               	movwf	6
 18882  1283  3001               	movlw	1	; select bank2/3
 18883  1284  0087               	movwf	7
 18884  1285  1481               	bsf	1,1
 18885                           
 18886                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 18887  1286  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 18888                           
 18889                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18890  1287  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18891  1288  0086               	movwf	6
 18892  1289  3001               	movlw	1	; select bank2/3
 18893  128A  0087               	movwf	7
 18894  128B  1D01               	btfss	1,2
 18895  128C  0008               	return
 18896                           
 18897                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 18898  128D  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18899  128E  0086               	movwf	6
 18900  128F  3001               	movlw	1	; select bank2/3
 18901  1290  0087               	movwf	7
 18902  1291  1401               	bsf	1,0
 18903                           
 18904                           ;Dimmer_B1.c: 55: if (lights == 1) {
 18905  1292  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18906  1293  3A01               	xorlw	1
 18907  1294  1D03               	skipz
 18908  1295  0008               	return
 18909                           
 18910                           ;Dimmer_B1.c: 56: RB1 = 1;
 18911  1296  0020               	movlb	0	; select bank0
 18912  1297  148D               	bsf	13,1	;volatile
 18913  1298  0008               	return
 18914  1299                     __end_of_setDimmerLights_IntrIOC_GO:	
 18915                           
 18916                           	psect	text135
 18917  1C9C                     __ptext135:	
 18918 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18919 ;; Defined at:
 18920 ;;		line 8 in file "../src/Dimmer_B1.c"
 18921 ;; Parameters:    Size  Location     Type
 18922 ;;  lights          1    wreg     unsigned char 
 18923 ;; Auto vars:     Size  Location     Type
 18924 ;;  lights          1    1[COMMON] unsigned char 
 18925 ;; Return value:  Size  Location     Type
 18926 ;;		None               void
 18927 ;; Registers used:
 18928 ;;		wreg
 18929 ;; Tracked objects:
 18930 ;;		On entry : 0/0
 18931 ;;		On exit  : 0/0
 18932 ;;		Unchanged: 0/0
 18933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18935 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18936 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18937 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18938 ;;Total ram usage:        2 bytes
 18939 ;; Hardware stack levels used:    1
 18940 ;; This function calls:
 18941 ;;		Nothing
 18942 ;; This function is called by:
 18943 ;;		_setDimmerLights_IntrIOC_GO
 18944 ;; This function uses a non-reentrant model
 18945 ;;
 18946                           
 18947                           
 18948                           ;psect for function _DimmerIntrIOCPointSelect
 18949  1C9C                     _DimmerIntrIOCPointSelect:	
 18950                           
 18951                           ;incstack = 0
 18952                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18953                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18954  1C9C  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18955                           
 18956                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18957  1C9D  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18958  1C9E  3A01               	xorlw	1
 18959  1C9F  1D03               	skipz
 18960  1CA0  0008               	return
 18961                           
 18962                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18963  1CA1  3053               	movlw	_DimmerLights1& (0+255)
 18964  1CA2  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18965  1CA3  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18966  1CA4  0021               	movlb	1	; select bank1
 18967  1CA5  00CD               	movwf	_DimmerLightsIntrIOC^(0+128)
 18968  1CA6  0008               	return
 18969  1CA7                     __end_of_DimmerIntrIOCPointSelect:	
 18970  007E                     btemp	set	126	;btemp
 18971  007E                     pic14e$flags	set	126
 18972  007E                     wtemp	set	126
 18973  007E                     wtemp0	set	126
 18974  0080                     wtemp1	set	128
 18975  0082                     wtemp2	set	130
 18976  0084                     wtemp3	set	132
 18977  0086                     wtemp4	set	134
 18978  0088                     wtemp5	set	136
 18979  007F                     wtemp6	set	127
 18980  007E                     ttemp	set	126
 18981  007E                     ttemp0	set	126
 18982  0081                     ttemp1	set	129
 18983  0084                     ttemp2	set	132
 18984  0087                     ttemp3	set	135
 18985  007F                     ttemp4	set	127
 18986  007E                     ltemp	set	126
 18987  007E                     ltemp0	set	126
 18988  0082                     ltemp1	set	130
 18989  0086                     ltemp2	set	134
 18990  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         230
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      7      80
    BANK2            80      3      80
    BANK3            80      4      80
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_getDimmerLights_Allow_Condition
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Exception_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  127316
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    7770
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    7770
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     201
                                              4 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     880
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     880
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45365
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   45365
                                              5 BANK1      1     1      0
                                              0 BANK2      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44206
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40065
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13473
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1762
                                             13 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18758
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16329
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14095
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1788
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      43
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     201
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     911
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     911
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1209
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    6962
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35279
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   34970
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17700
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   16945
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     818
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (5) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5786
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5786
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4027
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3612
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3392
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0      66
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
           _getLoad_OK
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      3      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Dec 18 11:06:26 2014

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l84 17D8  
                                      l94 1513                                        l86 17EC  
                                      l95 150F                                        l96 14FD  
                                      l98 150D                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1090                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1CBD  
                  __end_of_setDelayOff_GO 16FB                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1606  
                    _setDimmerLights_Line 1D4B                              ___ftadd@sign 004B  
                                     l231 0A89                                       l304 1EE9  
                                     l305 1EEB                      _setDimmerLights_SwOn 13DF  
                                     l348 1103                                       l730 1F40  
                                     _GIE 005F                                       _CRC 00CB  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000A                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CE  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01E3                 setDimmerLights_Adj@status 006B  
                __end_of_CC2500_WriteByte 1EF6                     _Buzzer_Initialization 1BF7  
                         __end_of_ADC_Set 1C4B                           ?_DelayTimejudge 0070  
                                     wreg 0009      setDimmerLights_Initialization@lights 0023  
            getDimmerLights_Status@status 0023                           _setDimmerLights 1656  
                       ??_getSw_KeyStatus 0020                     _setDimmerLights_AdjRF 1090  
                   _setDimmerLights_AdjOn 1339                                      ?_ISR 0070  
         setDimmerLights_ErrorClose@count 00E9                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1D68                                Load_Main@i 002C  
                            ___ftdiv@sign 003D                                      l2102 12C9  
                                    l1209 11CB                                      l1218 1560  
                                    l2050 0E6A                                      l2042 0E3F  
                                    l2116 09EB                                      l1421 1248  
                                    l2053 0E94                                      l1422 1263  
                                    l2038 0EA3                                      l2080 1E28  
                                    l2128 147E                                      l2048 0E68  
                                    l1426 125F                  ?_DimmerLightsPointSelect 0070  
                                    l1195 12FD                                      l1456 0707  
                                    l2416 0357                                      l1720 0FFC  
                                    l2418 0230                                      l1395 1452  
                                    l1564 01E7                           __end_of_IOC_Set 1D31  
                                    l1725 0FF6                                      l1574 01C3  
                                    l1566 0077                                      l1575 01C1  
                                    l1567 0073                                      l1568 006E  
                                    l2396 1EA1                                      l2592 0809  
                                    l2753 0A1F                                      l2782 04F9  
                                    l2759 0A36                                      l8001 0A06  
                                    l8011 0A2C                                      l8003 0A0B  
                                    l8023 1DDE                                      l8103 050B  
                                    l8009 0A24                                      l8027 1DE4  
                                    l8107 051D                                      l8203 0794  
                   _setDimmerLights_SwOff 1568                                      l8045 1FE9  
                                    l8117 0538                                      l8061 0489  
                                    l8133 0ED4                                      l8127 0EBE  
                                    l9103 0C0E                                      l8313 1711  
                                    l8057 0482                                      l9113 0C1F  
                                    l8331 1737                                      l8323 1719  
                                    l8307 1706                                      l8091 04D8  
                                    l8067 0498                                      l8155 0F2E  
                                    l8147 0F15                                      l8227 0D03  
                                    l9035 11B3                                      l8325 1725  
                                    l8085 04C5                                      l8261 0D68  
                                    l8253 0D4E                                      l8245 0D33  
                                    l8421 140A                                      l9125 0C35  
                                    l9133 0C54                                      l8335 1740  
                                    l8087 04CF                                      l8079 04B2  
                                    l8255 0D57                                      l8247 0D41  
                                    l8191 0778                                      l8175 0735  
                                    l8423 1410                                      l8281 1176  
                                    l8097 04EB                                      l8089 04D4  
                                    l8257 0D5A                                      l9313 1CC5  
                                    l8169 071F                                      l8339 1748  
                                    l8435 159D                                      l8099 04F5  
                                    l9331 11A0                                      l8187 0770  
                                    l9139 0C5F                                      l9163 1DD5  
                                    l9181 07E1                                      l9085 1DC4  
                                    l8517 11DF                                      l9413 1FA9  
                                    l9191 07F1                                      l9183 07E4  
                                    l8383 16DA                                      l8455 0868  
                                    l9431 1521                                      l9327 119B  
                                    l8199 078C                                      l8623 15EA  
                                    l9511 0FCB                                      l9415 1FAC  
                                    l9193 07F4                                      l8705 1243  
                                    l9329 117E                                      l8801 0A55  
                                    l8641 146D                                      l9513 0FCD  
                                    l9187 07EA                                      l8387 16E0  
                                    l8715 125A                                      l8707 124C  
                                    l9291 162F                                      l8803 0A58  
                                    l8627 15F9                                      l9523 0FE2  
                                    l9419 1FB1                                      l8653 1F08  
                                    l9197 07FA                                      l8389 16E6  
                                    l8733 13B5                                      l9293 1635  
                                    l9437 1536                                      l8565 1F72  
                                    l8821 0A70                                      l9621 1EA6  
                                    l9525 0FE3                     _myMain_Initialization 1D68  
                                    l8647 1EFF                                      l8911 1114  
                                    l8567 1F78                                      l8663 10E3  
                                    l8831 0A98                                      l8807 0A5E  
                                    l8649 1F02                                      l8913 111F  
                                    l8921 1079                                      l8585 0968  
                                    l9721 0803                                      l8665 10E6  
                                    l8833 0A9C                                      l8825 0A8F  
                                    l9545 0E26                                      l9625 1EAC  
                                    l9481 0F6C                                      l8587 0939  
                                    l8747 13D4                                      l8739 13BE  
                                    l9299 1650                                      l8851 0B7F  
                                    l8835 0A9F                                      l8827 0A92  
                                    l9563 0E44                                      l9547 0E29  
                                    l9715 0353                                      l8925 107F  
                                    l8589 096E                                      l9741 1378  
                                    l8669 10EC                                      l8853 0B82  
                                    l8919 1076                                      l9743 1384  
                                    l8839 0AA5                                      l8783 09B3  
                                    l8791 09D0                                      l9559 0E41  
                                    l9655 025E                                      l9639 021B  
                                    l8689 1EBE                                      l9809 1F42  
                                    l9753 139F                                      l8873 0BA4  
                                    l8857 0B88                                      l8785 09C8  
                                    l9665 0290                                      _CFGS 0CAE  
                                    l7995 09F5                                      l8891 0BCF  
                                    l8867 0B9B                                      l8859 0B8B  
                                    l8787 09CC                                      l8779 098E  
                                    l9587 0E7B                                      l8957 1686  
                                    l9749 1396                                      l8869 0B9E  
                                    l9597 0E86                                      l9941 0CB7  
                                    l9767 14E7                                      l7999 09FC  
                                    l8967 169C                                      l9839 05C2  
                                    l9679 02CE                              __CFG_WDTE$ON 0000  
                                    l8977 1767                                      l8889 0BB6  
                                    l9689 0300                                      l9937 0CAF  
                                    l9929 0C8A                                      l9971 14C1  
                                    l9957 0CE4                                      l9989 1432  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u8205 0A3D  
                                    u8135 0A01                                      u8155 0A1A  
                                    u9125 1E7F                                      u8405 04D9  
                                    u9070 0828                                      u9215 0944  
                                    u8175 0A27                                      u8345 04B3  
                                    u8505 0EE6                                      u8435 04EC  
                                    u8515 0EF6                                      u9075 0826  
                                    u8525 0F16                                      u8375 04C6  
                                    u8535 0F25                                      u8615 0779  
                                    u8545 0F2F                                      u8705 0D0A  
                                    u8625 077F                                      u8815 1162  
                                    u8735 0D34                                      u8655 0795  
                                    u8905 1738                                      u8665 079B  
                                    u8585 0741                                      u8595 0751  
                                    u8765 0D4F                                      u8865 171C  
                                    u9675 1109                                      _LWLO 0CAD  
                                    u8885 1726                                      u8895 1730  
                                    _RSSI 00CF                                      _WREN 0CAA  
                                    _Buz1 00AE                                      _Load 0125  
                                    _Temp 00D7                                      _main 0877  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 092F  
                         __end_of_RF_Main 1C03                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1CD3  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                        _setDimmerReClock 1C09                                      start 0013  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 1492  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2172 0023  
                       ?_getDimmer_LoadGO 0070            getAll_DimmerLights_AdjSw@count 0023  
                                   ??_ISR 0074                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 1EC5  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1EAF  
                  _getDimmerLights_Status 1D97                        ??_getDimmer_LoadGO 0020  
          __size_of_DimmerIntrPointSelect 000A                          __end_of_LED_Main 1C29  
        setDimmerLights_ErrorClose@lights 00EA             __end_of_DimmerIntrPointSelect 1C88  
                   ?_getDimmerLights_Line 0070                                     l10017 0055  
                                   l10211 06AF                                     l10107 01A3  
                                   l10051 009A                                     l10035 0076  
                                   l10213 06E0                                     l10221 06FD  
                                   l10215 06EA                                     l10209 06D8  
                                   l10145 01D6                                     l10057 00CC  
                                   l10083 0155                                     l10173 0647  
                                   l10093 0181                                     l10191 0691  
                                   l10183 0665                                     l10193 0668  
                                   l10089 0162                                     l10097 018D  
                                   l10195 0699                                     l10179 0656  
                                   l10291 08A6                                     l10287 089B  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 01EC                           __end_of___awdiv 174F  
                         __end_of___ftadd 0550                           __end_of___ftdiv 0F50  
                         __end_of___ftneg 1C6C                                     u11005 1397  
                                   u11035 14DD                           __end_of___ftmul 07BC  
                                   u10265 1187                                     u11305 0CD1  
                         ___awdiv@divisor 0020                                     u10445 0FB3  
                                   u11405 144A                                     u11255 0C9D  
                                   _T1CON 0018                                     u10545 0E3C  
                                   u10465 0FD3                                     u11195 12F4  
                                   u11355 14B8                           __end_of___fttol 0D71  
                                   u11365 14C7                                     u11800 06DE  
                                   u11545 0098                                     u11555 00CA  
                                   u11805 06BA                                     u10925 080A  
                                   u11645 0194                                     u11565 010E  
                                   u10935 080F                                     u11770 0697  
                                   u10965 137B                                     u11775 0673  
                                   u10985 1385                                     u10995 138F  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 13A6  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 1E85                             __CFG_WRT$HALF 0000  
      __end_of_setDimmerLights_IntrIOC_GO 1299                _setDimmerLights_IntrIOC_GO 1265  
                        __end_of_TMR1_ISR 10D9                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A        __end_of_setDimmerLights_ErrorClose 098D  
              _setDimmerLights_ErrorClose 092F                          __end_of_TMR1_Set 1D3D  
                                   _getAD 1F9E                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0071                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1E23               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03C0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1D25  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012              __end_of_getMain_LightsStatus 1C9C  
           __end_of_setLED_Initialization 1DFF                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 081E  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0068  
                  ??_Flash_Memory_Erasing 0020                           _getPercentValue 0B16  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0015  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0010                         ??_setPercentValue 005C  
                            __end_of_main 08D2                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1C2D                        ??_setMemory_Modify 0020  
                          _Exception_Main 062C                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 16A8  
                    _setSw_Initialization 1D87                                    ??_main 006F  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
                 _setControl_Lights_Table 098D                            _setMemory_Data 1D01  
                  ?_Buzzer_Initialization 0070         __size_of_DimmerIntrIOCPointSelect 000B  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 03C0  
               ?_DimmerIntrIOCPointSelect 0070                                 ??_IOC_ISR 0073  
                               ??_IOC_Set 0020           __end_of_DimmerLightsPointSelect 1CBD  
                  ?_setDimmerLights_AdjRF 0070                    ?_setDimmerLights_AdjOn 0070  
                __size_of_setRFSW_Control 004F                   ??_Switch_Initialization 0025  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 08D2                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 006F                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1C5B                                 ??_WDT_Set 0020  
                        __end_of___awtoft 2000                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0A4D                  _getMain_All_Error_Status 1232  
                                  _IOCBF2 1CB2                                    i1l6841 043D  
                                  i1l6833 0418                                    i1l6809 03BA  
                                  i1l6827 0401                                    i1l6835 041E  
                                  i1l6845 0453                                    i1l6829 0407  
                                  i1l6797 038A                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01AC  
                                  u735_25 10D3                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1EC5  
                                  _WDTCON 0097                      Exception_Main@i_3438 00ED  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1E9A                                    _Dimmer 00C6  
                                  _DlySw1 0164                __end_of_Mcu_Initialization 1E11  
                     __end_of_Buzzer_Main 151A                                    _Memory 01BE  
                                  _Timer1 0120                                    ___bmul 1DDB  
                  __end_of_Exception_Main 0708                      Load_Main@Load_Status 002B  
                    Exception_Main@lights 00EF                                    ___wmul 0800  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000B                                 ??___ftdiv 0034  
                               ??___ftneg 0041                     setDimmerLights@lights 006D  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024               setDimmerLights_AdjRF@lights 0063  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D5                                    _s_data 00D6  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 13A6  
                                  _myMain 00A0                    __end_of_setMemory_Data 1D0D  
                        _DimmerLightsIntr 0076                     ?_setSw_Initialization 0070  
                   setDimmerLights@status 006B                          ___awdiv@quotient 0027  
                                  _setBuz 17A7                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1BFD          ??_setDimmerLights_Initialization 0022  
         ?_setDimmerLights_Initialization 0070                     ___ftmul@f3_as_product 0039  
     __end_of_setDimmerLights_IntrControl 045A               _setDimmerLights_IntrControl 0360  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1E5C               getMain_Lights_Count@status1 0021  
                   __end_of_SwPointSelect 1CE9              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 000C  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1E9A  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0B7B  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 003D  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5048 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1FBE                             __end_of_getAD 1FBE  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1C21  
                         _getSw_KeyStatus 1DCA                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1D19  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01ED  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1C92  
              __end_of_set_TimeoutCleared 1C32                  __end_of_setDimmerReClock 1C0D  
                      __size_of_getRxData 007F                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1D3D  
                          _DimmerLights11 00CC                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1C03                        ??_CC2500_WriteByte 0020  
                              __pbssBANK0 006F                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 14D0  
                       ??_setRFSW_Control 006B                         __end_of_Temp_Main 1C09  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1C19                                __pnvCOMMON 0079  
                           ??_Switch_Main 006E                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 006F                         LedPointSelect@led 0021  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 0877                            _getDelayOff_GO 1D77  
                     _CC2500_WriteCommand 1EF6                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 000B  
                        ??_setDelayOff_GO 0068             ??_DimmerLights_Initialization 0024  
                                 ?___wmul 0020                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0C69  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1C4B  
                      __size_of_setTxData 009B                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1C44                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 1492                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1CDE  
                      _setRFSW_AdjControl 1454                    __end_of_setProductData 1D4B  
                                 _IOC_ISR 1D59                                   _IOC_Set 1D25  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 12CD  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1F10  
              getAll_DimmerLights_AdjSw@i 0024               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 006F                    __size_of_CC2500_TxData 0064  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1C00  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1CC8           __end_of_setControl_Lights_Table 09EC  
                         setRF_Main@error 016F                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 0AB1  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1CF5                           __size_of_IO_Set 0018  
                       __end_of_getBuz_GO 1DB9                       ??_Flash_Memory_Main 0026  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1D87  
          __end_of_getDimmerLights_Status 1DA8                         __end_of_getRxData 0C69  
                 __end_of_getSw_KeyStatus 1DDB                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1CA7                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 16FB                                   ___ftadd 045A  
                                 ___ftdiv 0EA7                                   ___ftneg 1C63  
                         __size_of___wmul 001E                                   ___ftmul 0708  
                                 ___fttol 0CEA                       __end_of_Switch_Main 106D  
                                 ___lwdiv 136F                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1DB9                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 1418                                   __ptext2 1D68  
                                 __ptext3 1492                                   __ptext4 0C69  
                                 __ptext5 1F9E                                   __ptext6 1E11  
                                 __ptext7 0002                                   __ptext8 1C06  
                                 __ptext9 0F50                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 0024                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1C7E                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1303                 __end_of_Flash_Memory_Read 1F2A  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0E0C  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1C1D  
                       _DimmerLights_Main 1F2A            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1C38                __end_of_CC2500_ClearRXFIFO 1C11  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1C15  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 0079  
                          _LedPointSelect 1CF5                       _DelayOffPointSelect 1CA7  
                                 clrloop0 1C3F            __size_of_Switch_Initialization 0009  
           __end_of_Switch_Initialization 1C7E                      end_of_initialization 003D  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1124  
                           _DelayTime_1us 10FE                         __end_of_setTxData 0E0C  
              __end_of_Flash_Memory_Write 11D2                                   init_ram 1C38  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1C39  
                              _setSw_Main 01ED                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 10D9  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1DED  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0B7B                             _CC2500_TxData 0A4D  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 151A  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1C6C                       ??_CC2500_ReadStatus 0022  
                  ??_getMain_LightsStatus 0020                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F46                        _Mcu_Initialization 1DFF  
                __size_of_CC2500_PowerRST 0044                      __end_of_my_MainTimer 1454  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1D01                   __end_of_setPercentValue 0B16  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 114E  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 174F                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 10FE                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006B  
                          __end_of_IO_Set 1EDD                      _setRF_Initialization 1CD3  
                      _setMemory_LoopSave 1E49                               _Switch_Main 1066  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1CB2                   __end_of_getRF_KeyStatus 1DCA  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1E85                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1DED                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1C9C                            __end_of___wmul 081E  
                       getSw_KeyStatus@sw 0070                         __size_of_TMR1_ISR 0025  
           __size_of_getDimmerLights_Line 000B                    ?_DimmerIntrPointSelect 0070  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0050  
                          __end_of_setLED 13DF             __size_of_setDimmerLights_Line 000E  
           __size_of_setDimmerLights_SwOn 0039                            __end_of_setBuz 1800  
                    _CC2500_FrequencyCabr 1CE9                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 15B7  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 11D2  
                         ?_LedPointSelect 0070                                 _Load_Main 0041  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1C53  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                      ??_setDimmerReClock 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1F9E           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 1000                            ??_RF_RxDisable 0024  
                     __size_of_getLoad_AD 0081                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1C2D  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0169                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1C06                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D0  
                   setProductData@address 0065                       Exception_Main@count 00E9  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00EA  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                                ??___wmul 0024                    __size_of_SwPointSelect 000B  
                               _Tx_Length 00D3                               __pdataBANK4 0220  
                                ??_setLED 0023                 _getAll_DimmerLights_AdjSw 1178  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 006F                         ??_CC2500_ReadByte 0020  
        __end_of_getMain_All_Error_Status 1265                          _CC2500_SIDLEMode 1C15  
              __size_of_DimmerLights_Main 001C                 __end_of_setRF_DimmerValue 1201  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 0075                                  ?_IOC_Set 0070  
                               ___latbits 0003                          _setMemory_Modify 1E36  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E9                             __pcstackBANK2 016D  
                           __pcstackBANK3 01EC                      ??_set_TimeoutCleared 0020  
                        ?_setPercentValue 0070                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                  __size_of_setDimmerLights 0052  
                           DlyOff_Main@sw 006E                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 005D  
              __size_of_CC2500_ReadStatus 0025                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0153  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1F62  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00ED               __size_of_LED_Initialization 0004  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 00EB  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 009B  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002A                    _setTemp_Initialization 1BF6  
                               _getBuz_GO 1DA8       __end_of_Flash_Memory_Initialization 062C  
             _Flash_Memory_Initialization 0550                                  ?___awdiv 0020  
                               __ptext100 16A8                                 __ptext101 1D3D  
                               __ptext110 1C32                                 __ptext102 114E  
                               __ptext111 1CA7                                 __ptext103 1DDB  
                               __ptext120 1C11                                 __ptext112 1E85  
                               __ptext104 1D77                                 __ptext121 1C0D  
                               __ptext113 1C15                                 __ptext105 1D97  
                               __ptext130 0360                                 __ptext122 1EF6  
                               __ptext114 07BC                                 __ptext106 1CB2  
                               __ptext131 1C7E                                 __ptext123 1C2D  
                               __ptext115 1124                                 __ptext107 17A7  
                               __ptext132 1D59                                 __ptext124 1E70  
                               __ptext116 1F7F                                 __ptext108 16FB  
                               __ptext133 1C09                                 __ptext125 1EDD  
                               __ptext117 106D                                 __ptext109 1C19  
                                ?___ftadd 0041                                 __ptext134 1265  
                               __ptext126 14D0                                 __ptext118 1CE9  
                               __ptext135 1C9C                                 __ptext127 1BF7  
                               __ptext119 10FE                                 __ptext129 10B4  
                               _getRxData 0BEA                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 1606  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1BFA  
                        getPercentValue@i 005F                          setPercentValue@i 005F  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1EAF                           DelayTimejudge@i 0026  
                         DelayTimejudge@j 0027                           DelayTimejudge@k 0028  
                     __size_of_setSw_Main 0173              CC2500_ReadStatus@status_addr 0023  
          __size_of_setDimmerLights_AdjRF 0024            __size_of_setDimmerLights_AdjOn 0036  
           __end_of_setDimmerLights_AdjRF 10B4             __end_of_setDimmerLights_AdjOn 136F  
                  CC2500_WriteByte@loop_a 0021                                 _r_address 00D4  
          __size_of_setDimmerLights_SwOff 004F            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 15B7              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1D77                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0026                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1CDE                       __end_of_setLED_Main 1339  
                        ??_getDelayOff_GO 0022                       _DimmerLightsIntrIOC 00CD  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1C06  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1C25                           SwPointSelect@sw 0021  
                               clear_ram0 1C3E                  CC2500_InitPATable@loop_d 0027  
                            _my_MainTimer 1418                                 _setTxData 0D71  
     __end_of_DimmerLights_Initialization 1C92               _DimmerLights_Initialization 1C88  
                      _CC2500_ClearRXFIFO 1C0D                        _CC2500_ClearTXFIFO 1C11  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1E70                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 11A3                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 10B4  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1D31  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 0123                      __end_of_RF_RxDisable 1E36  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1F10  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1E11  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0021  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 016D                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0075  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1D19  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 12CD  
                   _DlyOff_Initialization 1C32                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1C29  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0CEA                        __end_of_getLoad_OK 1C53  
                   _Switch_Initialization 1C75         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 14D0                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1EDD                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D2  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3424 0021             _getMain_All_Error_Status$3425 0023  
                __end_of_getDimmer_LoadGO 1C5B                       _Load_Initialization 1BFA  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F50                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 1FDE                          ??_LedPointSelect 0020  
                                ___ftpack 09EC             __size_of_getMain_Lights_Count 000C  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 000A  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00EE  
                    CC2500_WriteREG@value 0022                               _setLED_Main 1303  
              __end_of_setRF_DimmerLights 0877            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1C63  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002B  
                         ___lwdiv@counter 0025                                  __ptext10 1C03  
                                __ptext11 1BF6                                  __ptext20 1E9A  
                                __ptext12 1066                                  __ptext21 1C00  
                                __ptext13 01ED                                  __ptext30 11D2  
                                __ptext22 0E0C                                  __ptext14 1E5C  
                                __ptext31 1090                                  __ptext23 0BEA  
                                __ptext15 1339                                  __ptext40 10D9  
                                __ptext32 0B16                                  __ptext24 1299  
                                __ptext16 1DCA                                  __ptext41 1F62  
                                __ptext33 0708                                  __ptext25 1E49  
                                __ptext17 1CDE                                  __ptext50 1C44  
                                __ptext42 1BFD                                  __ptext34 1E36  
                                __ptext26 098D                                  __ptext18 1C75  
                                __ptext51 0041                                  __ptext43 1CD3  
                                __ptext35 1DB9                                  __ptext27 15B7  
                                __ptext19 1D87                                  __ptext60 1C25  
                                __ptext52 1D19                                  __ptext44 1DFF  
                                __ptext36 1DA8                                  __ptext28 13DF  
                                __ptext61 1303                                  __ptext53 1C5B  
                                __ptext45 1CC8                                  __ptext37 1E23  
                                __ptext29 1454                                  __ptext70 1C6C  
                                __ptext62 1C21                                  __ptext54 1C53  
                                __ptext46 1D31                                  __ptext38 0A4D  
                                __ptext71 1F10                                  __ptext63 1DED  
                                __ptext55 1178                                  __ptext47 1EC5  
                                __ptext39 0B7B                                  __ptext80 0AB1  
                                __ptext72 062C                                  __ptext64 12CD  
                                __ptext56 0800                                  __ptext48 1D25  
                                __ptext81 0CEA                                  __ptext73 1CBD  
                                __ptext65 151A                                  __ptext57 136F  
                                __ptext49 1C29                                  __ptext90 1EAF  
                                __ptext82 1C63                                  __ptext74 1F2A  
                                __ptext66 1D0D                                  __ptext58 1BFA  
                                __ptext91 1C4B                                  __ptext83 0EA7  
                                __ptext75 1606                                  __ptext67 0550  
                                __ptext59 1F46                                  __ptext92 1C92  
                                __ptext84 045A                                  __ptext76 174F  
                                __ptext68 1D01                                  __ptext93 1232  
                                __ptext85 1FDE                                  __ptext77 1656  
                                __ptext69 11A3                                  __ptext94 1C88  
                                __ptext86 09EC                                  __ptext78 0D71  
                                __ptext95 1201                                  __ptext87 13A6  
                                __ptext79 081E                                  __ptext96 1C1D  
                                __ptext88 1CF5                                  __ptext97 08D2  
                                __ptext89 1D4B                                  __ptext98 092F  
                                __ptext99 1568                                  __product 0220  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1CC8  
            __end_of_setDimmerLights_Main 1656              __end_of_setDimmerLights_Line 1D59  
            __end_of_setDimmerLights_SwOn 1418                              ??_setSw_Main 006B  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1E5C                  __end_of_CC2500_SIDLEMode 1C19  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 1CB2  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 016E  
               __size_of_setDimmerReClock 0004                   setDimmerLights_AdjOn@sw 0024  
                         _CC2500_ReadByte 1F62                        _CC2500_InitPATable 1F7F  
                __end_of_setMemory_Modify 1E49                        __end_of_setRF_Main 0EA7  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EB                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006E                              getLoad_OK@ok 0020  
                                main@argc 01EC                                  main@argv 01EE  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6016 0022  
                         _CC2500_PowerRST 07BC                  __size_of_getSw_KeyStatus 0011  
             __end_of_Flash_Memory_Modify 1568                         ??_getPercentValue 005C  
                             _setLog_Code 1299               __end_of_Flash_Memory_Unlock 1C75  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 106D  
                      __end_of_setSw_Main 0360                     ??_Load_Initialization 0022  
                           _Transceive_OK 03C1                    ?_DlyOff_Initialization 0070  
                          _DelayTimejudge 114E                               pic14e$flags 007E  
            ??_setDimmerLights_IntrIOC_GO 0072                setDimmerLights_Line@lights 0020  
            ??_setDimmerLights_ErrorClose 006B                   setDimmerLights_SwOff@sw 006A  
             __size_of_setMemory_LoopSave 0013         __end_of_getAll_DimmerLights_AdjSw 11A3  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                   ??_CC2500_PowerOnInitial 0029  
  __end_of_setDimmerLights_Initialization 1232   __size_of_setDimmerLights_Initialization 0031  
          _setDimmerLights_Initialization 1201               __end_of_setDimmerLights_Adj 17A7  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                     __size_of_RF_RxDisable 0013  
                       _RF_Initialization 1BFD      __size_of_setDimmerLights_IntrControl 00FA  
                             getLoad_AD@i 0029                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1D0D  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D1  
                 __size_of_Exception_Main 00DC           __end_of_DelayOff_Initialization 1C1D  
     __size_of_setDimmerLights_IntrIOC_GO 0034       __size_of_setDimmerLights_ErrorClose 005E  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1C21  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 16A8          __size_of_setControl_Lights_Table 005F  
                  __end_of_DelayTimejudge 1178               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 006C                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1124                   __end_of_CC2500_ReadByte 1F7F  
            __end_of_setSw_Initialization 1D97                           _Timeout_Counter 1E70  
         __size_of_getDimmerLights_Status 0011                      getPercentValue@value 005E  
                            _RF_RxDisable 1E23                __end_of_LED_Initialization 1C25  
          __end_of_setTemp_Initialization 1BF7                  __size_of_setPercentValue 0065  
                 setMemory_Modify@command 0021                      setPercentValue@value 005E  
               __end_of_RF_Initialization 1C00                     __end_of_CC2500_RxData 0BEA  
                   __end_of_CC2500_TxData 0AB1                     _setLoad_AH_AL_Restore 1F46  
                 __end_of_CC2500_PowerRST 0800  
