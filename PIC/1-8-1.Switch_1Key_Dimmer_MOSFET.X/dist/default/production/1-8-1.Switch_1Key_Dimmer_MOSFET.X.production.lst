

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Jan 20 17:07:45 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,delta=2
   153                           	psect	text134,local,class=CODE,merge=1,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	intentry,global,class=CODE,delta=2
   157                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text142,local,class=CODE,merge=1,delta=2
   162                           	dabs	1,0x7E,2
   163  0000                     	;# 
   164  0001                     	;# 
   165  0002                     	;# 
   166  0003                     	;# 
   167  0004                     	;# 
   168  0005                     	;# 
   169  0006                     	;# 
   170  0007                     	;# 
   171  0008                     	;# 
   172  0009                     	;# 
   173  000A                     	;# 
   174  000B                     	;# 
   175  000C                     	;# 
   176  000D                     	;# 
   177  000E                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  0116                     	;# 
   210  0117                     	;# 
   211  011D                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  018E                     	;# 
   215  0191                     	;# 
   216  0191                     	;# 
   217  0192                     	;# 
   218  0193                     	;# 
   219  0193                     	;# 
   220  0194                     	;# 
   221  0195                     	;# 
   222  0196                     	;# 
   223  0197                     	;# 
   224  0199                     	;# 
   225  019A                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019C                     	;# 
   231  019C                     	;# 
   232  019D                     	;# 
   233  019E                     	;# 
   234  019F                     	;# 
   235  020D                     	;# 
   236  0210                     	;# 
   237  0211                     	;# 
   238  0211                     	;# 
   239  0212                     	;# 
   240  0212                     	;# 
   241  0213                     	;# 
   242  0213                     	;# 
   243  0214                     	;# 
   244  0214                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  0291                     	;# 
   253  0291                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0298                     	;# 
   257  0298                     	;# 
   258  0299                     	;# 
   259  029A                     	;# 
   260  0394                     	;# 
   261  0395                     	;# 
   262  0396                     	;# 
   263  0FE4                     	;# 
   264  0FE5                     	;# 
   265  0FE6                     	;# 
   266  0FE7                     	;# 
   267  0FE8                     	;# 
   268  0FE9                     	;# 
   269  0FEA                     	;# 
   270  0FEB                     	;# 
   271  0FED                     	;# 
   272  0FEE                     	;# 
   273  0FEF                     	;# 
   274  0000                     	;# 
   275  0001                     	;# 
   276  0002                     	;# 
   277  0003                     	;# 
   278  0004                     	;# 
   279  0005                     	;# 
   280  0006                     	;# 
   281  0007                     	;# 
   282  0008                     	;# 
   283  0009                     	;# 
   284  000A                     	;# 
   285  000B                     	;# 
   286  000C                     	;# 
   287  000D                     	;# 
   288  000E                     	;# 
   289  0010                     	;# 
   290  0011                     	;# 
   291  0012                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  008C                     	;# 
   302  008D                     	;# 
   303  008E                     	;# 
   304  0090                     	;# 
   305  0091                     	;# 
   306  0092                     	;# 
   307  0095                     	;# 
   308  0096                     	;# 
   309  0097                     	;# 
   310  0099                     	;# 
   311  009A                     	;# 
   312  009B                     	;# 
   313  009B                     	;# 
   314  009C                     	;# 
   315  009D                     	;# 
   316  009E                     	;# 
   317  010C                     	;# 
   318  010D                     	;# 
   319  010E                     	;# 
   320  0116                     	;# 
   321  0117                     	;# 
   322  011D                     	;# 
   323  018C                     	;# 
   324  018D                     	;# 
   325  018E                     	;# 
   326  0191                     	;# 
   327  0191                     	;# 
   328  0192                     	;# 
   329  0193                     	;# 
   330  0193                     	;# 
   331  0194                     	;# 
   332  0195                     	;# 
   333  0196                     	;# 
   334  0197                     	;# 
   335  0199                     	;# 
   336  019A                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019C                     	;# 
   342  019C                     	;# 
   343  019D                     	;# 
   344  019E                     	;# 
   345  019F                     	;# 
   346  020D                     	;# 
   347  0210                     	;# 
   348  0211                     	;# 
   349  0211                     	;# 
   350  0212                     	;# 
   351  0212                     	;# 
   352  0213                     	;# 
   353  0213                     	;# 
   354  0214                     	;# 
   355  0214                     	;# 
   356  0215                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0216                     	;# 
   360  0216                     	;# 
   361  0217                     	;# 
   362  0217                     	;# 
   363  0291                     	;# 
   364  0291                     	;# 
   365  0292                     	;# 
   366  0293                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  0394                     	;# 
   372  0395                     	;# 
   373  0396                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0010                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  008C                     	;# 
   413  008D                     	;# 
   414  008E                     	;# 
   415  0090                     	;# 
   416  0091                     	;# 
   417  0092                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010E                     	;# 
   431  0116                     	;# 
   432  0117                     	;# 
   433  011D                     	;# 
   434  018C                     	;# 
   435  018D                     	;# 
   436  018E                     	;# 
   437  0191                     	;# 
   438  0191                     	;# 
   439  0192                     	;# 
   440  0193                     	;# 
   441  0193                     	;# 
   442  0194                     	;# 
   443  0195                     	;# 
   444  0196                     	;# 
   445  0197                     	;# 
   446  0199                     	;# 
   447  019A                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019C                     	;# 
   453  019C                     	;# 
   454  019D                     	;# 
   455  019E                     	;# 
   456  019F                     	;# 
   457  020D                     	;# 
   458  0210                     	;# 
   459  0211                     	;# 
   460  0211                     	;# 
   461  0212                     	;# 
   462  0212                     	;# 
   463  0213                     	;# 
   464  0213                     	;# 
   465  0214                     	;# 
   466  0214                     	;# 
   467  0215                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0216                     	;# 
   471  0216                     	;# 
   472  0217                     	;# 
   473  0217                     	;# 
   474  0291                     	;# 
   475  0291                     	;# 
   476  0292                     	;# 
   477  0293                     	;# 
   478  0298                     	;# 
   479  0298                     	;# 
   480  0299                     	;# 
   481  029A                     	;# 
   482  0394                     	;# 
   483  0395                     	;# 
   484  0396                     	;# 
   485  0FE4                     	;# 
   486  0FE5                     	;# 
   487  0FE6                     	;# 
   488  0FE7                     	;# 
   489  0FE8                     	;# 
   490  0FE9                     	;# 
   491  0FEA                     	;# 
   492  0FEB                     	;# 
   493  0FED                     	;# 
   494  0FEE                     	;# 
   495  0FEF                     	;# 
   496  0000                     	;# 
   497  0001                     	;# 
   498  0002                     	;# 
   499  0003                     	;# 
   500  0004                     	;# 
   501  0005                     	;# 
   502  0006                     	;# 
   503  0007                     	;# 
   504  0008                     	;# 
   505  0009                     	;# 
   506  000A                     	;# 
   507  000B                     	;# 
   508  000C                     	;# 
   509  000D                     	;# 
   510  000E                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0015                     	;# 
   515  0016                     	;# 
   516  0016                     	;# 
   517  0017                     	;# 
   518  0018                     	;# 
   519  0019                     	;# 
   520  001A                     	;# 
   521  001B                     	;# 
   522  001C                     	;# 
   523  008C                     	;# 
   524  008D                     	;# 
   525  008E                     	;# 
   526  0090                     	;# 
   527  0091                     	;# 
   528  0092                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0099                     	;# 
   533  009A                     	;# 
   534  009B                     	;# 
   535  009B                     	;# 
   536  009C                     	;# 
   537  009D                     	;# 
   538  009E                     	;# 
   539  010C                     	;# 
   540  010D                     	;# 
   541  010E                     	;# 
   542  0116                     	;# 
   543  0117                     	;# 
   544  011D                     	;# 
   545  018C                     	;# 
   546  018D                     	;# 
   547  018E                     	;# 
   548  0191                     	;# 
   549  0191                     	;# 
   550  0192                     	;# 
   551  0193                     	;# 
   552  0193                     	;# 
   553  0194                     	;# 
   554  0195                     	;# 
   555  0196                     	;# 
   556  0197                     	;# 
   557  0199                     	;# 
   558  019A                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019C                     	;# 
   564  019C                     	;# 
   565  019D                     	;# 
   566  019E                     	;# 
   567  019F                     	;# 
   568  020D                     	;# 
   569  0210                     	;# 
   570  0211                     	;# 
   571  0211                     	;# 
   572  0212                     	;# 
   573  0212                     	;# 
   574  0213                     	;# 
   575  0213                     	;# 
   576  0214                     	;# 
   577  0214                     	;# 
   578  0215                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0216                     	;# 
   582  0216                     	;# 
   583  0217                     	;# 
   584  0217                     	;# 
   585  0291                     	;# 
   586  0291                     	;# 
   587  0292                     	;# 
   588  0293                     	;# 
   589  0298                     	;# 
   590  0298                     	;# 
   591  0299                     	;# 
   592  029A                     	;# 
   593  0394                     	;# 
   594  0395                     	;# 
   595  0396                     	;# 
   596  0FE4                     	;# 
   597  0FE5                     	;# 
   598  0FE6                     	;# 
   599  0FE7                     	;# 
   600  0FE8                     	;# 
   601  0FE9                     	;# 
   602  0FEA                     	;# 
   603  0FEB                     	;# 
   604  0FED                     	;# 
   605  0FEE                     	;# 
   606  0FEF                     	;# 
   607  0000                     	;# 
   608  0001                     	;# 
   609  0002                     	;# 
   610  0003                     	;# 
   611  0004                     	;# 
   612  0005                     	;# 
   613  0006                     	;# 
   614  0007                     	;# 
   615  0008                     	;# 
   616  0009                     	;# 
   617  000A                     	;# 
   618  000B                     	;# 
   619  000C                     	;# 
   620  000D                     	;# 
   621  000E                     	;# 
   622  0010                     	;# 
   623  0011                     	;# 
   624  0012                     	;# 
   625  0015                     	;# 
   626  0016                     	;# 
   627  0016                     	;# 
   628  0017                     	;# 
   629  0018                     	;# 
   630  0019                     	;# 
   631  001A                     	;# 
   632  001B                     	;# 
   633  001C                     	;# 
   634  008C                     	;# 
   635  008D                     	;# 
   636  008E                     	;# 
   637  0090                     	;# 
   638  0091                     	;# 
   639  0092                     	;# 
   640  0095                     	;# 
   641  0096                     	;# 
   642  0097                     	;# 
   643  0099                     	;# 
   644  009A                     	;# 
   645  009B                     	;# 
   646  009B                     	;# 
   647  009C                     	;# 
   648  009D                     	;# 
   649  009E                     	;# 
   650  010C                     	;# 
   651  010D                     	;# 
   652  010E                     	;# 
   653  0116                     	;# 
   654  0117                     	;# 
   655  011D                     	;# 
   656  018C                     	;# 
   657  018D                     	;# 
   658  018E                     	;# 
   659  0191                     	;# 
   660  0191                     	;# 
   661  0192                     	;# 
   662  0193                     	;# 
   663  0193                     	;# 
   664  0194                     	;# 
   665  0195                     	;# 
   666  0196                     	;# 
   667  0197                     	;# 
   668  0199                     	;# 
   669  019A                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019C                     	;# 
   675  019C                     	;# 
   676  019D                     	;# 
   677  019E                     	;# 
   678  019F                     	;# 
   679  020D                     	;# 
   680  0210                     	;# 
   681  0211                     	;# 
   682  0211                     	;# 
   683  0212                     	;# 
   684  0212                     	;# 
   685  0213                     	;# 
   686  0213                     	;# 
   687  0214                     	;# 
   688  0214                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0216                     	;# 
   693  0216                     	;# 
   694  0217                     	;# 
   695  0217                     	;# 
   696  0291                     	;# 
   697  0291                     	;# 
   698  0292                     	;# 
   699  0293                     	;# 
   700  0298                     	;# 
   701  0298                     	;# 
   702  0299                     	;# 
   703  029A                     	;# 
   704  0394                     	;# 
   705  0395                     	;# 
   706  0396                     	;# 
   707  0FE4                     	;# 
   708  0FE5                     	;# 
   709  0FE6                     	;# 
   710  0FE7                     	;# 
   711  0FE8                     	;# 
   712  0FE9                     	;# 
   713  0FEA                     	;# 
   714  0FEB                     	;# 
   715  0FED                     	;# 
   716  0FEE                     	;# 
   717  0FEF                     	;# 
   718  0000                     	;# 
   719  0001                     	;# 
   720  0002                     	;# 
   721  0003                     	;# 
   722  0004                     	;# 
   723  0005                     	;# 
   724  0006                     	;# 
   725  0007                     	;# 
   726  0008                     	;# 
   727  0009                     	;# 
   728  000A                     	;# 
   729  000B                     	;# 
   730  000C                     	;# 
   731  000D                     	;# 
   732  000E                     	;# 
   733  0010                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  008C                     	;# 
   746  008D                     	;# 
   747  008E                     	;# 
   748  0090                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0099                     	;# 
   755  009A                     	;# 
   756  009B                     	;# 
   757  009B                     	;# 
   758  009C                     	;# 
   759  009D                     	;# 
   760  009E                     	;# 
   761  010C                     	;# 
   762  010D                     	;# 
   763  010E                     	;# 
   764  0116                     	;# 
   765  0117                     	;# 
   766  011D                     	;# 
   767  018C                     	;# 
   768  018D                     	;# 
   769  018E                     	;# 
   770  0191                     	;# 
   771  0191                     	;# 
   772  0192                     	;# 
   773  0193                     	;# 
   774  0193                     	;# 
   775  0194                     	;# 
   776  0195                     	;# 
   777  0196                     	;# 
   778  0197                     	;# 
   779  0199                     	;# 
   780  019A                     	;# 
   781  019B                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019C                     	;# 
   786  019C                     	;# 
   787  019D                     	;# 
   788  019E                     	;# 
   789  019F                     	;# 
   790  020D                     	;# 
   791  0210                     	;# 
   792  0211                     	;# 
   793  0211                     	;# 
   794  0212                     	;# 
   795  0212                     	;# 
   796  0213                     	;# 
   797  0213                     	;# 
   798  0214                     	;# 
   799  0214                     	;# 
   800  0215                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0216                     	;# 
   804  0216                     	;# 
   805  0217                     	;# 
   806  0217                     	;# 
   807  0291                     	;# 
   808  0291                     	;# 
   809  0292                     	;# 
   810  0293                     	;# 
   811  0298                     	;# 
   812  0298                     	;# 
   813  0299                     	;# 
   814  029A                     	;# 
   815  0394                     	;# 
   816  0395                     	;# 
   817  0396                     	;# 
   818  0FE4                     	;# 
   819  0FE5                     	;# 
   820  0FE6                     	;# 
   821  0FE7                     	;# 
   822  0FE8                     	;# 
   823  0FE9                     	;# 
   824  0FEA                     	;# 
   825  0FEB                     	;# 
   826  0FED                     	;# 
   827  0FEE                     	;# 
   828  0FEF                     	;# 
   829  0000                     	;# 
   830  0001                     	;# 
   831  0002                     	;# 
   832  0003                     	;# 
   833  0004                     	;# 
   834  0005                     	;# 
   835  0006                     	;# 
   836  0007                     	;# 
   837  0008                     	;# 
   838  0009                     	;# 
   839  000A                     	;# 
   840  000B                     	;# 
   841  000C                     	;# 
   842  000D                     	;# 
   843  000E                     	;# 
   844  0010                     	;# 
   845  0011                     	;# 
   846  0012                     	;# 
   847  0015                     	;# 
   848  0016                     	;# 
   849  0016                     	;# 
   850  0017                     	;# 
   851  0018                     	;# 
   852  0019                     	;# 
   853  001A                     	;# 
   854  001B                     	;# 
   855  001C                     	;# 
   856  008C                     	;# 
   857  008D                     	;# 
   858  008E                     	;# 
   859  0090                     	;# 
   860  0091                     	;# 
   861  0092                     	;# 
   862  0095                     	;# 
   863  0096                     	;# 
   864  0097                     	;# 
   865  0099                     	;# 
   866  009A                     	;# 
   867  009B                     	;# 
   868  009B                     	;# 
   869  009C                     	;# 
   870  009D                     	;# 
   871  009E                     	;# 
   872  010C                     	;# 
   873  010D                     	;# 
   874  010E                     	;# 
   875  0116                     	;# 
   876  0117                     	;# 
   877  011D                     	;# 
   878  018C                     	;# 
   879  018D                     	;# 
   880  018E                     	;# 
   881  0191                     	;# 
   882  0191                     	;# 
   883  0192                     	;# 
   884  0193                     	;# 
   885  0193                     	;# 
   886  0194                     	;# 
   887  0195                     	;# 
   888  0196                     	;# 
   889  0197                     	;# 
   890  0199                     	;# 
   891  019A                     	;# 
   892  019B                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019C                     	;# 
   897  019C                     	;# 
   898  019D                     	;# 
   899  019E                     	;# 
   900  019F                     	;# 
   901  020D                     	;# 
   902  0210                     	;# 
   903  0211                     	;# 
   904  0211                     	;# 
   905  0212                     	;# 
   906  0212                     	;# 
   907  0213                     	;# 
   908  0213                     	;# 
   909  0214                     	;# 
   910  0214                     	;# 
   911  0215                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0216                     	;# 
   915  0216                     	;# 
   916  0217                     	;# 
   917  0217                     	;# 
   918  0291                     	;# 
   919  0291                     	;# 
   920  0292                     	;# 
   921  0293                     	;# 
   922  0298                     	;# 
   923  0298                     	;# 
   924  0299                     	;# 
   925  029A                     	;# 
   926  0394                     	;# 
   927  0395                     	;# 
   928  0396                     	;# 
   929  0FE4                     	;# 
   930  0FE5                     	;# 
   931  0FE6                     	;# 
   932  0FE7                     	;# 
   933  0FE8                     	;# 
   934  0FE9                     	;# 
   935  0FEA                     	;# 
   936  0FEB                     	;# 
   937  0FED                     	;# 
   938  0FEE                     	;# 
   939  0FEF                     	;# 
   940  0000                     	;# 
   941  0001                     	;# 
   942  0002                     	;# 
   943  0003                     	;# 
   944  0004                     	;# 
   945  0005                     	;# 
   946  0006                     	;# 
   947  0007                     	;# 
   948  0008                     	;# 
   949  0009                     	;# 
   950  000A                     	;# 
   951  000B                     	;# 
   952  000C                     	;# 
   953  000D                     	;# 
   954  000E                     	;# 
   955  0010                     	;# 
   956  0011                     	;# 
   957  0012                     	;# 
   958  0015                     	;# 
   959  0016                     	;# 
   960  0016                     	;# 
   961  0017                     	;# 
   962  0018                     	;# 
   963  0019                     	;# 
   964  001A                     	;# 
   965  001B                     	;# 
   966  001C                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  0090                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0095                     	;# 
   974  0096                     	;# 
   975  0097                     	;# 
   976  0099                     	;# 
   977  009A                     	;# 
   978  009B                     	;# 
   979  009B                     	;# 
   980  009C                     	;# 
   981  009D                     	;# 
   982  009E                     	;# 
   983  010C                     	;# 
   984  010D                     	;# 
   985  010E                     	;# 
   986  0116                     	;# 
   987  0117                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0197                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019C                     	;# 
  1008  019C                     	;# 
  1009  019D                     	;# 
  1010  019E                     	;# 
  1011  019F                     	;# 
  1012  020D                     	;# 
  1013  0210                     	;# 
  1014  0211                     	;# 
  1015  0211                     	;# 
  1016  0212                     	;# 
  1017  0212                     	;# 
  1018  0213                     	;# 
  1019  0213                     	;# 
  1020  0214                     	;# 
  1021  0214                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0216                     	;# 
  1026  0216                     	;# 
  1027  0217                     	;# 
  1028  0217                     	;# 
  1029  0291                     	;# 
  1030  0291                     	;# 
  1031  0292                     	;# 
  1032  0293                     	;# 
  1033  0298                     	;# 
  1034  0298                     	;# 
  1035  0299                     	;# 
  1036  029A                     	;# 
  1037  0394                     	;# 
  1038  0395                     	;# 
  1039  0396                     	;# 
  1040  0FE4                     	;# 
  1041  0FE5                     	;# 
  1042  0FE6                     	;# 
  1043  0FE7                     	;# 
  1044  0FE8                     	;# 
  1045  0FE9                     	;# 
  1046  0FEA                     	;# 
  1047  0FEB                     	;# 
  1048  0FED                     	;# 
  1049  0FEE                     	;# 
  1050  0FEF                     	;# 
  1051  0000                     	;# 
  1052  0001                     	;# 
  1053  0002                     	;# 
  1054  0003                     	;# 
  1055  0004                     	;# 
  1056  0005                     	;# 
  1057  0006                     	;# 
  1058  0007                     	;# 
  1059  0008                     	;# 
  1060  0009                     	;# 
  1061  000A                     	;# 
  1062  000B                     	;# 
  1063  000C                     	;# 
  1064  000D                     	;# 
  1065  000E                     	;# 
  1066  0010                     	;# 
  1067  0011                     	;# 
  1068  0012                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0016                     	;# 
  1072  0017                     	;# 
  1073  0018                     	;# 
  1074  0019                     	;# 
  1075  001A                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  008C                     	;# 
  1079  008D                     	;# 
  1080  008E                     	;# 
  1081  0090                     	;# 
  1082  0091                     	;# 
  1083  0092                     	;# 
  1084  0095                     	;# 
  1085  0096                     	;# 
  1086  0097                     	;# 
  1087  0099                     	;# 
  1088  009A                     	;# 
  1089  009B                     	;# 
  1090  009B                     	;# 
  1091  009C                     	;# 
  1092  009D                     	;# 
  1093  009E                     	;# 
  1094  010C                     	;# 
  1095  010D                     	;# 
  1096  010E                     	;# 
  1097  0116                     	;# 
  1098  0117                     	;# 
  1099  011D                     	;# 
  1100  018C                     	;# 
  1101  018D                     	;# 
  1102  018E                     	;# 
  1103  0191                     	;# 
  1104  0191                     	;# 
  1105  0192                     	;# 
  1106  0193                     	;# 
  1107  0193                     	;# 
  1108  0194                     	;# 
  1109  0195                     	;# 
  1110  0196                     	;# 
  1111  0197                     	;# 
  1112  0199                     	;# 
  1113  019A                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019C                     	;# 
  1119  019C                     	;# 
  1120  019D                     	;# 
  1121  019E                     	;# 
  1122  019F                     	;# 
  1123  020D                     	;# 
  1124  0210                     	;# 
  1125  0211                     	;# 
  1126  0211                     	;# 
  1127  0212                     	;# 
  1128  0212                     	;# 
  1129  0213                     	;# 
  1130  0213                     	;# 
  1131  0214                     	;# 
  1132  0214                     	;# 
  1133  0215                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0216                     	;# 
  1137  0216                     	;# 
  1138  0217                     	;# 
  1139  0217                     	;# 
  1140  0291                     	;# 
  1141  0291                     	;# 
  1142  0292                     	;# 
  1143  0293                     	;# 
  1144  0298                     	;# 
  1145  0298                     	;# 
  1146  0299                     	;# 
  1147  029A                     	;# 
  1148  0394                     	;# 
  1149  0395                     	;# 
  1150  0396                     	;# 
  1151  0FE4                     	;# 
  1152  0FE5                     	;# 
  1153  0FE6                     	;# 
  1154  0FE7                     	;# 
  1155  0FE8                     	;# 
  1156  0FE9                     	;# 
  1157  0FEA                     	;# 
  1158  0FEB                     	;# 
  1159  0FED                     	;# 
  1160  0FEE                     	;# 
  1161  0FEF                     	;# 
  1162  0000                     	;# 
  1163  0001                     	;# 
  1164  0002                     	;# 
  1165  0003                     	;# 
  1166  0004                     	;# 
  1167  0005                     	;# 
  1168  0006                     	;# 
  1169  0007                     	;# 
  1170  0008                     	;# 
  1171  0009                     	;# 
  1172  000A                     	;# 
  1173  000B                     	;# 
  1174  000C                     	;# 
  1175  000D                     	;# 
  1176  000E                     	;# 
  1177  0010                     	;# 
  1178  0011                     	;# 
  1179  0012                     	;# 
  1180  0015                     	;# 
  1181  0016                     	;# 
  1182  0016                     	;# 
  1183  0017                     	;# 
  1184  0018                     	;# 
  1185  0019                     	;# 
  1186  001A                     	;# 
  1187  001B                     	;# 
  1188  001C                     	;# 
  1189  008C                     	;# 
  1190  008D                     	;# 
  1191  008E                     	;# 
  1192  0090                     	;# 
  1193  0091                     	;# 
  1194  0092                     	;# 
  1195  0095                     	;# 
  1196  0096                     	;# 
  1197  0097                     	;# 
  1198  0099                     	;# 
  1199  009A                     	;# 
  1200  009B                     	;# 
  1201  009B                     	;# 
  1202  009C                     	;# 
  1203  009D                     	;# 
  1204  009E                     	;# 
  1205  010C                     	;# 
  1206  010D                     	;# 
  1207  010E                     	;# 
  1208  0116                     	;# 
  1209  0117                     	;# 
  1210  011D                     	;# 
  1211  018C                     	;# 
  1212  018D                     	;# 
  1213  018E                     	;# 
  1214  0191                     	;# 
  1215  0191                     	;# 
  1216  0192                     	;# 
  1217  0193                     	;# 
  1218  0193                     	;# 
  1219  0194                     	;# 
  1220  0195                     	;# 
  1221  0196                     	;# 
  1222  0197                     	;# 
  1223  0199                     	;# 
  1224  019A                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019C                     	;# 
  1230  019C                     	;# 
  1231  019D                     	;# 
  1232  019E                     	;# 
  1233  019F                     	;# 
  1234  020D                     	;# 
  1235  0210                     	;# 
  1236  0211                     	;# 
  1237  0211                     	;# 
  1238  0212                     	;# 
  1239  0212                     	;# 
  1240  0213                     	;# 
  1241  0213                     	;# 
  1242  0214                     	;# 
  1243  0214                     	;# 
  1244  0215                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0216                     	;# 
  1248  0216                     	;# 
  1249  0217                     	;# 
  1250  0217                     	;# 
  1251  0291                     	;# 
  1252  0291                     	;# 
  1253  0292                     	;# 
  1254  0293                     	;# 
  1255  0298                     	;# 
  1256  0298                     	;# 
  1257  0299                     	;# 
  1258  029A                     	;# 
  1259  0394                     	;# 
  1260  0395                     	;# 
  1261  0396                     	;# 
  1262  0FE4                     	;# 
  1263  0FE5                     	;# 
  1264  0FE6                     	;# 
  1265  0FE7                     	;# 
  1266  0FE8                     	;# 
  1267  0FE9                     	;# 
  1268  0FEA                     	;# 
  1269  0FEB                     	;# 
  1270  0FED                     	;# 
  1271  0FEE                     	;# 
  1272  0FEF                     	;# 
  1273  0000                     	;# 
  1274  0001                     	;# 
  1275  0002                     	;# 
  1276  0003                     	;# 
  1277  0004                     	;# 
  1278  0005                     	;# 
  1279  0006                     	;# 
  1280  0007                     	;# 
  1281  0008                     	;# 
  1282  0009                     	;# 
  1283  000A                     	;# 
  1284  000B                     	;# 
  1285  000C                     	;# 
  1286  000D                     	;# 
  1287  000E                     	;# 
  1288  0010                     	;# 
  1289  0011                     	;# 
  1290  0012                     	;# 
  1291  0015                     	;# 
  1292  0016                     	;# 
  1293  0016                     	;# 
  1294  0017                     	;# 
  1295  0018                     	;# 
  1296  0019                     	;# 
  1297  001A                     	;# 
  1298  001B                     	;# 
  1299  001C                     	;# 
  1300  008C                     	;# 
  1301  008D                     	;# 
  1302  008E                     	;# 
  1303  0090                     	;# 
  1304  0091                     	;# 
  1305  0092                     	;# 
  1306  0095                     	;# 
  1307  0096                     	;# 
  1308  0097                     	;# 
  1309  0099                     	;# 
  1310  009A                     	;# 
  1311  009B                     	;# 
  1312  009B                     	;# 
  1313  009C                     	;# 
  1314  009D                     	;# 
  1315  009E                     	;# 
  1316  010C                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  0116                     	;# 
  1320  0117                     	;# 
  1321  011D                     	;# 
  1322  018C                     	;# 
  1323  018D                     	;# 
  1324  018E                     	;# 
  1325  0191                     	;# 
  1326  0191                     	;# 
  1327  0192                     	;# 
  1328  0193                     	;# 
  1329  0193                     	;# 
  1330  0194                     	;# 
  1331  0195                     	;# 
  1332  0196                     	;# 
  1333  0197                     	;# 
  1334  0199                     	;# 
  1335  019A                     	;# 
  1336  019B                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019C                     	;# 
  1341  019C                     	;# 
  1342  019D                     	;# 
  1343  019E                     	;# 
  1344  019F                     	;# 
  1345  020D                     	;# 
  1346  0210                     	;# 
  1347  0211                     	;# 
  1348  0211                     	;# 
  1349  0212                     	;# 
  1350  0212                     	;# 
  1351  0213                     	;# 
  1352  0213                     	;# 
  1353  0214                     	;# 
  1354  0214                     	;# 
  1355  0215                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0216                     	;# 
  1359  0216                     	;# 
  1360  0217                     	;# 
  1361  0217                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0298                     	;# 
  1367  0298                     	;# 
  1368  0299                     	;# 
  1369  029A                     	;# 
  1370  0394                     	;# 
  1371  0395                     	;# 
  1372  0396                     	;# 
  1373  0FE4                     	;# 
  1374  0FE5                     	;# 
  1375  0FE6                     	;# 
  1376  0FE7                     	;# 
  1377  0FE8                     	;# 
  1378  0FE9                     	;# 
  1379  0FEA                     	;# 
  1380  0FEB                     	;# 
  1381  0FED                     	;# 
  1382  0FEE                     	;# 
  1383  0FEF                     	;# 
  1384  0000                     	;# 
  1385  0001                     	;# 
  1386  0002                     	;# 
  1387  0003                     	;# 
  1388  0004                     	;# 
  1389  0005                     	;# 
  1390  0006                     	;# 
  1391  0007                     	;# 
  1392  0008                     	;# 
  1393  0009                     	;# 
  1394  000A                     	;# 
  1395  000B                     	;# 
  1396  000C                     	;# 
  1397  000D                     	;# 
  1398  000E                     	;# 
  1399  0010                     	;# 
  1400  0011                     	;# 
  1401  0012                     	;# 
  1402  0015                     	;# 
  1403  0016                     	;# 
  1404  0016                     	;# 
  1405  0017                     	;# 
  1406  0018                     	;# 
  1407  0019                     	;# 
  1408  001A                     	;# 
  1409  001B                     	;# 
  1410  001C                     	;# 
  1411  008C                     	;# 
  1412  008D                     	;# 
  1413  008E                     	;# 
  1414  0090                     	;# 
  1415  0091                     	;# 
  1416  0092                     	;# 
  1417  0095                     	;# 
  1418  0096                     	;# 
  1419  0097                     	;# 
  1420  0099                     	;# 
  1421  009A                     	;# 
  1422  009B                     	;# 
  1423  009B                     	;# 
  1424  009C                     	;# 
  1425  009D                     	;# 
  1426  009E                     	;# 
  1427  010C                     	;# 
  1428  010D                     	;# 
  1429  010E                     	;# 
  1430  0116                     	;# 
  1431  0117                     	;# 
  1432  011D                     	;# 
  1433  018C                     	;# 
  1434  018D                     	;# 
  1435  018E                     	;# 
  1436  0191                     	;# 
  1437  0191                     	;# 
  1438  0192                     	;# 
  1439  0193                     	;# 
  1440  0193                     	;# 
  1441  0194                     	;# 
  1442  0195                     	;# 
  1443  0196                     	;# 
  1444  0197                     	;# 
  1445  0199                     	;# 
  1446  019A                     	;# 
  1447  019B                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019C                     	;# 
  1452  019C                     	;# 
  1453  019D                     	;# 
  1454  019E                     	;# 
  1455  019F                     	;# 
  1456  020D                     	;# 
  1457  0210                     	;# 
  1458  0211                     	;# 
  1459  0211                     	;# 
  1460  0212                     	;# 
  1461  0212                     	;# 
  1462  0213                     	;# 
  1463  0213                     	;# 
  1464  0214                     	;# 
  1465  0214                     	;# 
  1466  0215                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0216                     	;# 
  1470  0216                     	;# 
  1471  0217                     	;# 
  1472  0217                     	;# 
  1473  0291                     	;# 
  1474  0291                     	;# 
  1475  0292                     	;# 
  1476  0293                     	;# 
  1477  0298                     	;# 
  1478  0298                     	;# 
  1479  0299                     	;# 
  1480  029A                     	;# 
  1481  0394                     	;# 
  1482  0395                     	;# 
  1483  0396                     	;# 
  1484  0FE4                     	;# 
  1485  0FE5                     	;# 
  1486  0FE6                     	;# 
  1487  0FE7                     	;# 
  1488  0FE8                     	;# 
  1489  0FE9                     	;# 
  1490  0FEA                     	;# 
  1491  0FEB                     	;# 
  1492  0FED                     	;# 
  1493  0FEE                     	;# 
  1494  0FEF                     	;# 
  1495  0000                     	;# 
  1496  0001                     	;# 
  1497  0002                     	;# 
  1498  0003                     	;# 
  1499  0004                     	;# 
  1500  0005                     	;# 
  1501  0006                     	;# 
  1502  0007                     	;# 
  1503  0008                     	;# 
  1504  0009                     	;# 
  1505  000A                     	;# 
  1506  000B                     	;# 
  1507  000C                     	;# 
  1508  000D                     	;# 
  1509  000E                     	;# 
  1510  0010                     	;# 
  1511  0011                     	;# 
  1512  0012                     	;# 
  1513  0015                     	;# 
  1514  0016                     	;# 
  1515  0016                     	;# 
  1516  0017                     	;# 
  1517  0018                     	;# 
  1518  0019                     	;# 
  1519  001A                     	;# 
  1520  001B                     	;# 
  1521  001C                     	;# 
  1522  008C                     	;# 
  1523  008D                     	;# 
  1524  008E                     	;# 
  1525  0090                     	;# 
  1526  0091                     	;# 
  1527  0092                     	;# 
  1528  0095                     	;# 
  1529  0096                     	;# 
  1530  0097                     	;# 
  1531  0099                     	;# 
  1532  009A                     	;# 
  1533  009B                     	;# 
  1534  009B                     	;# 
  1535  009C                     	;# 
  1536  009D                     	;# 
  1537  009E                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0116                     	;# 
  1542  0117                     	;# 
  1543  011D                     	;# 
  1544  018C                     	;# 
  1545  018D                     	;# 
  1546  018E                     	;# 
  1547  0191                     	;# 
  1548  0191                     	;# 
  1549  0192                     	;# 
  1550  0193                     	;# 
  1551  0193                     	;# 
  1552  0194                     	;# 
  1553  0195                     	;# 
  1554  0196                     	;# 
  1555  0197                     	;# 
  1556  0199                     	;# 
  1557  019A                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019C                     	;# 
  1564  019D                     	;# 
  1565  019E                     	;# 
  1566  019F                     	;# 
  1567  020D                     	;# 
  1568  0210                     	;# 
  1569  0211                     	;# 
  1570  0211                     	;# 
  1571  0212                     	;# 
  1572  0212                     	;# 
  1573  0213                     	;# 
  1574  0213                     	;# 
  1575  0214                     	;# 
  1576  0214                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0216                     	;# 
  1581  0216                     	;# 
  1582  0217                     	;# 
  1583  0217                     	;# 
  1584  0291                     	;# 
  1585  0291                     	;# 
  1586  0292                     	;# 
  1587  0293                     	;# 
  1588  0298                     	;# 
  1589  0298                     	;# 
  1590  0299                     	;# 
  1591  029A                     	;# 
  1592  0394                     	;# 
  1593  0395                     	;# 
  1594  0396                     	;# 
  1595  0FE4                     	;# 
  1596  0FE5                     	;# 
  1597  0FE6                     	;# 
  1598  0FE7                     	;# 
  1599  0FE8                     	;# 
  1600  0FE9                     	;# 
  1601  0FEA                     	;# 
  1602  0FEB                     	;# 
  1603  0FED                     	;# 
  1604  0FEE                     	;# 
  1605  0FEF                     	;# 
  1606  0000                     	;# 
  1607  0001                     	;# 
  1608  0002                     	;# 
  1609  0003                     	;# 
  1610  0004                     	;# 
  1611  0005                     	;# 
  1612  0006                     	;# 
  1613  0007                     	;# 
  1614  0008                     	;# 
  1615  0009                     	;# 
  1616  000A                     	;# 
  1617  000B                     	;# 
  1618  000C                     	;# 
  1619  000D                     	;# 
  1620  000E                     	;# 
  1621  0010                     	;# 
  1622  0011                     	;# 
  1623  0012                     	;# 
  1624  0015                     	;# 
  1625  0016                     	;# 
  1626  0016                     	;# 
  1627  0017                     	;# 
  1628  0018                     	;# 
  1629  0019                     	;# 
  1630  001A                     	;# 
  1631  001B                     	;# 
  1632  001C                     	;# 
  1633  008C                     	;# 
  1634  008D                     	;# 
  1635  008E                     	;# 
  1636  0090                     	;# 
  1637  0091                     	;# 
  1638  0092                     	;# 
  1639  0095                     	;# 
  1640  0096                     	;# 
  1641  0097                     	;# 
  1642  0099                     	;# 
  1643  009A                     	;# 
  1644  009B                     	;# 
  1645  009B                     	;# 
  1646  009C                     	;# 
  1647  009D                     	;# 
  1648  009E                     	;# 
  1649  010C                     	;# 
  1650  010D                     	;# 
  1651  010E                     	;# 
  1652  0116                     	;# 
  1653  0117                     	;# 
  1654  011D                     	;# 
  1655  018C                     	;# 
  1656  018D                     	;# 
  1657  018E                     	;# 
  1658  0191                     	;# 
  1659  0191                     	;# 
  1660  0192                     	;# 
  1661  0193                     	;# 
  1662  0193                     	;# 
  1663  0194                     	;# 
  1664  0195                     	;# 
  1665  0196                     	;# 
  1666  0197                     	;# 
  1667  0199                     	;# 
  1668  019A                     	;# 
  1669  019B                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019C                     	;# 
  1674  019C                     	;# 
  1675  019D                     	;# 
  1676  019E                     	;# 
  1677  019F                     	;# 
  1678  020D                     	;# 
  1679  0210                     	;# 
  1680  0211                     	;# 
  1681  0211                     	;# 
  1682  0212                     	;# 
  1683  0212                     	;# 
  1684  0213                     	;# 
  1685  0213                     	;# 
  1686  0214                     	;# 
  1687  0214                     	;# 
  1688  0215                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0216                     	;# 
  1692  0216                     	;# 
  1693  0217                     	;# 
  1694  0217                     	;# 
  1695  0291                     	;# 
  1696  0291                     	;# 
  1697  0292                     	;# 
  1698  0293                     	;# 
  1699  0298                     	;# 
  1700  0298                     	;# 
  1701  0299                     	;# 
  1702  029A                     	;# 
  1703  0394                     	;# 
  1704  0395                     	;# 
  1705  0396                     	;# 
  1706  0FE4                     	;# 
  1707  0FE5                     	;# 
  1708  0FE6                     	;# 
  1709  0FE7                     	;# 
  1710  0FE8                     	;# 
  1711  0FE9                     	;# 
  1712  0FEA                     	;# 
  1713  0FEB                     	;# 
  1714  0FED                     	;# 
  1715  0FEE                     	;# 
  1716  0FEF                     	;# 
  1717  0000                     	;# 
  1718  0001                     	;# 
  1719  0002                     	;# 
  1720  0003                     	;# 
  1721  0004                     	;# 
  1722  0005                     	;# 
  1723  0006                     	;# 
  1724  0007                     	;# 
  1725  0008                     	;# 
  1726  0009                     	;# 
  1727  000A                     	;# 
  1728  000B                     	;# 
  1729  000C                     	;# 
  1730  000D                     	;# 
  1731  000E                     	;# 
  1732  0010                     	;# 
  1733  0011                     	;# 
  1734  0012                     	;# 
  1735  0015                     	;# 
  1736  0016                     	;# 
  1737  0016                     	;# 
  1738  0017                     	;# 
  1739  0018                     	;# 
  1740  0019                     	;# 
  1741  001A                     	;# 
  1742  001B                     	;# 
  1743  001C                     	;# 
  1744  008C                     	;# 
  1745  008D                     	;# 
  1746  008E                     	;# 
  1747  0090                     	;# 
  1748  0091                     	;# 
  1749  0092                     	;# 
  1750  0095                     	;# 
  1751  0096                     	;# 
  1752  0097                     	;# 
  1753  0099                     	;# 
  1754  009A                     	;# 
  1755  009B                     	;# 
  1756  009B                     	;# 
  1757  009C                     	;# 
  1758  009D                     	;# 
  1759  009E                     	;# 
  1760  010C                     	;# 
  1761  010D                     	;# 
  1762  010E                     	;# 
  1763  0116                     	;# 
  1764  0117                     	;# 
  1765  011D                     	;# 
  1766  018C                     	;# 
  1767  018D                     	;# 
  1768  018E                     	;# 
  1769  0191                     	;# 
  1770  0191                     	;# 
  1771  0192                     	;# 
  1772  0193                     	;# 
  1773  0193                     	;# 
  1774  0194                     	;# 
  1775  0195                     	;# 
  1776  0196                     	;# 
  1777  0197                     	;# 
  1778  0199                     	;# 
  1779  019A                     	;# 
  1780  019B                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019C                     	;# 
  1785  019C                     	;# 
  1786  019D                     	;# 
  1787  019E                     	;# 
  1788  019F                     	;# 
  1789  020D                     	;# 
  1790  0210                     	;# 
  1791  0211                     	;# 
  1792  0211                     	;# 
  1793  0212                     	;# 
  1794  0212                     	;# 
  1795  0213                     	;# 
  1796  0213                     	;# 
  1797  0214                     	;# 
  1798  0214                     	;# 
  1799  0215                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0216                     	;# 
  1803  0216                     	;# 
  1804  0217                     	;# 
  1805  0217                     	;# 
  1806  0291                     	;# 
  1807  0291                     	;# 
  1808  0292                     	;# 
  1809  0293                     	;# 
  1810  0298                     	;# 
  1811  0298                     	;# 
  1812  0299                     	;# 
  1813  029A                     	;# 
  1814  0394                     	;# 
  1815  0395                     	;# 
  1816  0396                     	;# 
  1817  0FE4                     	;# 
  1818  0FE5                     	;# 
  1819  0FE6                     	;# 
  1820  0FE7                     	;# 
  1821  0FE8                     	;# 
  1822  0FE9                     	;# 
  1823  0FEA                     	;# 
  1824  0FEB                     	;# 
  1825  0FED                     	;# 
  1826  0FEE                     	;# 
  1827  0FEF                     	;# 
  1828  0000                     	;# 
  1829  0001                     	;# 
  1830  0002                     	;# 
  1831  0003                     	;# 
  1832  0004                     	;# 
  1833  0005                     	;# 
  1834  0006                     	;# 
  1835  0007                     	;# 
  1836  0008                     	;# 
  1837  0009                     	;# 
  1838  000A                     	;# 
  1839  000B                     	;# 
  1840  000C                     	;# 
  1841  000D                     	;# 
  1842  000E                     	;# 
  1843  0010                     	;# 
  1844  0011                     	;# 
  1845  0012                     	;# 
  1846  0015                     	;# 
  1847  0016                     	;# 
  1848  0016                     	;# 
  1849  0017                     	;# 
  1850  0018                     	;# 
  1851  0019                     	;# 
  1852  001A                     	;# 
  1853  001B                     	;# 
  1854  001C                     	;# 
  1855  008C                     	;# 
  1856  008D                     	;# 
  1857  008E                     	;# 
  1858  0090                     	;# 
  1859  0091                     	;# 
  1860  0092                     	;# 
  1861  0095                     	;# 
  1862  0096                     	;# 
  1863  0097                     	;# 
  1864  0099                     	;# 
  1865  009A                     	;# 
  1866  009B                     	;# 
  1867  009B                     	;# 
  1868  009C                     	;# 
  1869  009D                     	;# 
  1870  009E                     	;# 
  1871  010C                     	;# 
  1872  010D                     	;# 
  1873  010E                     	;# 
  1874  0116                     	;# 
  1875  0117                     	;# 
  1876  011D                     	;# 
  1877  018C                     	;# 
  1878  018D                     	;# 
  1879  018E                     	;# 
  1880  0191                     	;# 
  1881  0191                     	;# 
  1882  0192                     	;# 
  1883  0193                     	;# 
  1884  0193                     	;# 
  1885  0194                     	;# 
  1886  0195                     	;# 
  1887  0196                     	;# 
  1888  0197                     	;# 
  1889  0199                     	;# 
  1890  019A                     	;# 
  1891  019B                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019C                     	;# 
  1896  019C                     	;# 
  1897  019D                     	;# 
  1898  019E                     	;# 
  1899  019F                     	;# 
  1900  020D                     	;# 
  1901  0210                     	;# 
  1902  0211                     	;# 
  1903  0211                     	;# 
  1904  0212                     	;# 
  1905  0212                     	;# 
  1906  0213                     	;# 
  1907  0213                     	;# 
  1908  0214                     	;# 
  1909  0214                     	;# 
  1910  0215                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0216                     	;# 
  1914  0216                     	;# 
  1915  0217                     	;# 
  1916  0217                     	;# 
  1917  0291                     	;# 
  1918  0291                     	;# 
  1919  0292                     	;# 
  1920  0293                     	;# 
  1921  0298                     	;# 
  1922  0298                     	;# 
  1923  0299                     	;# 
  1924  029A                     	;# 
  1925  0394                     	;# 
  1926  0395                     	;# 
  1927  0396                     	;# 
  1928  0FE4                     	;# 
  1929  0FE5                     	;# 
  1930  0FE6                     	;# 
  1931  0FE7                     	;# 
  1932  0FE8                     	;# 
  1933  0FE9                     	;# 
  1934  0FEA                     	;# 
  1935  0FEB                     	;# 
  1936  0FED                     	;# 
  1937  0FEE                     	;# 
  1938  0FEF                     	;# 
  1939  0000                     	;# 
  1940  0001                     	;# 
  1941  0002                     	;# 
  1942  0003                     	;# 
  1943  0004                     	;# 
  1944  0005                     	;# 
  1945  0006                     	;# 
  1946  0007                     	;# 
  1947  0008                     	;# 
  1948  0009                     	;# 
  1949  000A                     	;# 
  1950  000B                     	;# 
  1951  000C                     	;# 
  1952  000D                     	;# 
  1953  000E                     	;# 
  1954  0010                     	;# 
  1955  0011                     	;# 
  1956  0012                     	;# 
  1957  0015                     	;# 
  1958  0016                     	;# 
  1959  0016                     	;# 
  1960  0017                     	;# 
  1961  0018                     	;# 
  1962  0019                     	;# 
  1963  001A                     	;# 
  1964  001B                     	;# 
  1965  001C                     	;# 
  1966  008C                     	;# 
  1967  008D                     	;# 
  1968  008E                     	;# 
  1969  0090                     	;# 
  1970  0091                     	;# 
  1971  0092                     	;# 
  1972  0095                     	;# 
  1973  0096                     	;# 
  1974  0097                     	;# 
  1975  0099                     	;# 
  1976  009A                     	;# 
  1977  009B                     	;# 
  1978  009B                     	;# 
  1979  009C                     	;# 
  1980  009D                     	;# 
  1981  009E                     	;# 
  1982  010C                     	;# 
  1983  010D                     	;# 
  1984  010E                     	;# 
  1985  0116                     	;# 
  1986  0117                     	;# 
  1987  011D                     	;# 
  1988  018C                     	;# 
  1989  018D                     	;# 
  1990  018E                     	;# 
  1991  0191                     	;# 
  1992  0191                     	;# 
  1993  0192                     	;# 
  1994  0193                     	;# 
  1995  0193                     	;# 
  1996  0194                     	;# 
  1997  0195                     	;# 
  1998  0196                     	;# 
  1999  0197                     	;# 
  2000  0199                     	;# 
  2001  019A                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019C                     	;# 
  2007  019C                     	;# 
  2008  019D                     	;# 
  2009  019E                     	;# 
  2010  019F                     	;# 
  2011  020D                     	;# 
  2012  0210                     	;# 
  2013  0211                     	;# 
  2014  0211                     	;# 
  2015  0212                     	;# 
  2016  0212                     	;# 
  2017  0213                     	;# 
  2018  0213                     	;# 
  2019  0214                     	;# 
  2020  0214                     	;# 
  2021  0215                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0216                     	;# 
  2025  0216                     	;# 
  2026  0217                     	;# 
  2027  0217                     	;# 
  2028  0291                     	;# 
  2029  0291                     	;# 
  2030  0292                     	;# 
  2031  0293                     	;# 
  2032  0298                     	;# 
  2033  0298                     	;# 
  2034  0299                     	;# 
  2035  029A                     	;# 
  2036  0394                     	;# 
  2037  0395                     	;# 
  2038  0396                     	;# 
  2039  0FE4                     	;# 
  2040  0FE5                     	;# 
  2041  0FE6                     	;# 
  2042  0FE7                     	;# 
  2043  0FE8                     	;# 
  2044  0FE9                     	;# 
  2045  0FEA                     	;# 
  2046  0FEB                     	;# 
  2047  0FED                     	;# 
  2048  0FEE                     	;# 
  2049  0FEF                     	;# 
  2050  0000                     	;# 
  2051  0001                     	;# 
  2052  0002                     	;# 
  2053  0003                     	;# 
  2054  0004                     	;# 
  2055  0005                     	;# 
  2056  0006                     	;# 
  2057  0007                     	;# 
  2058  0008                     	;# 
  2059  0009                     	;# 
  2060  000A                     	;# 
  2061  000B                     	;# 
  2062  000C                     	;# 
  2063  000D                     	;# 
  2064  000E                     	;# 
  2065  0010                     	;# 
  2066  0011                     	;# 
  2067  0012                     	;# 
  2068  0015                     	;# 
  2069  0016                     	;# 
  2070  0016                     	;# 
  2071  0017                     	;# 
  2072  0018                     	;# 
  2073  0019                     	;# 
  2074  001A                     	;# 
  2075  001B                     	;# 
  2076  001C                     	;# 
  2077  008C                     	;# 
  2078  008D                     	;# 
  2079  008E                     	;# 
  2080  0090                     	;# 
  2081  0091                     	;# 
  2082  0092                     	;# 
  2083  0095                     	;# 
  2084  0096                     	;# 
  2085  0097                     	;# 
  2086  0099                     	;# 
  2087  009A                     	;# 
  2088  009B                     	;# 
  2089  009B                     	;# 
  2090  009C                     	;# 
  2091  009D                     	;# 
  2092  009E                     	;# 
  2093  010C                     	;# 
  2094  010D                     	;# 
  2095  010E                     	;# 
  2096  0116                     	;# 
  2097  0117                     	;# 
  2098  011D                     	;# 
  2099  018C                     	;# 
  2100  018D                     	;# 
  2101  018E                     	;# 
  2102  0191                     	;# 
  2103  0191                     	;# 
  2104  0192                     	;# 
  2105  0193                     	;# 
  2106  0193                     	;# 
  2107  0194                     	;# 
  2108  0195                     	;# 
  2109  0196                     	;# 
  2110  0197                     	;# 
  2111  0199                     	;# 
  2112  019A                     	;# 
  2113  019B                     	;# 
  2114  019B                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019C                     	;# 
  2118  019C                     	;# 
  2119  019D                     	;# 
  2120  019E                     	;# 
  2121  019F                     	;# 
  2122  020D                     	;# 
  2123  0210                     	;# 
  2124  0211                     	;# 
  2125  0211                     	;# 
  2126  0212                     	;# 
  2127  0212                     	;# 
  2128  0213                     	;# 
  2129  0213                     	;# 
  2130  0214                     	;# 
  2131  0214                     	;# 
  2132  0215                     	;# 
  2133  0215                     	;# 
  2134  0215                     	;# 
  2135  0216                     	;# 
  2136  0216                     	;# 
  2137  0217                     	;# 
  2138  0217                     	;# 
  2139  0291                     	;# 
  2140  0291                     	;# 
  2141  0292                     	;# 
  2142  0293                     	;# 
  2143  0298                     	;# 
  2144  0298                     	;# 
  2145  0299                     	;# 
  2146  029A                     	;# 
  2147  0394                     	;# 
  2148  0395                     	;# 
  2149  0396                     	;# 
  2150  0FE4                     	;# 
  2151  0FE5                     	;# 
  2152  0FE6                     	;# 
  2153  0FE7                     	;# 
  2154  0FE8                     	;# 
  2155  0FE9                     	;# 
  2156  0FEA                     	;# 
  2157  0FEB                     	;# 
  2158  0FED                     	;# 
  2159  0FEE                     	;# 
  2160  0FEF                     	;# 
  2161                           
  2162                           	psect	idataBANK4
  2163  1071                     __pidataBANK4:	
  2164                           
  2165                           ;initializer for __product
  2166  1071  3463               	retlw	99
  2167  1072  3402               	retlw	2
  2168  1073  3400               	retlw	0
  2169  1074  3400               	retlw	0
  2170  1075  3400               	retlw	0
  2171  1076  3400               	retlw	0
  2172  1077  3400               	retlw	0
  2173  1078  3400               	retlw	0
  2174  1079  3400               	retlw	0
  2175  107A  3400               	retlw	0
  2176  107B  3400               	retlw	0
  2177  107C  3400               	retlw	0
  2178  107D  34FF               	retlw	255
  2179  107E  34FF               	retlw	255
  2180  107F  34FF               	retlw	255
  2181  1080  3400               	retlw	0
  2182  1081  3400               	retlw	0
  2183  1082  3400               	retlw	0
  2184  1083  3400               	retlw	0
  2185  1084  3400               	retlw	0
  2186  1085  3400               	retlw	0
  2187  1086  3400               	retlw	0
  2188  1087  3400               	retlw	0
  2189  1088  3400               	retlw	0
  2190  1089  3400               	retlw	0
  2191  108A  3400               	retlw	0
  2192  108B  3400               	retlw	0
  2193  108C  3400               	retlw	0
  2194  108D  3400               	retlw	0
  2195  108E  3400               	retlw	0
  2196  108F  3400               	retlw	0
  2197  1090  3400               	retlw	0
  2198                           
  2199                           	psect	stringtext
  2200  1000                     __pstringtext:	
  2201  1000                     _CC2500_registers_address:	
  2202  1000  3403               	retlw	3
  2203  1001  3416               	retlw	22
  2204  1002  3417               	retlw	23
  2205  1003  341E               	retlw	30
  2206  1004  341F               	retlw	31
  2207  1005  3420               	retlw	32
  2208  1006  342A               	retlw	42
  2209  1007  342B               	retlw	43
  2210  1008  340B               	retlw	11
  2211  1009  340C               	retlw	12
  2212  100A  340D               	retlw	13
  2213  100B  340E               	retlw	14
  2214  100C  340F               	retlw	15
  2215  100D  3410               	retlw	16
  2216  100E  3411               	retlw	17
  2217  100F  3412               	retlw	18
  2218  1010  3413               	retlw	19
  2219  1011  3414               	retlw	20
  2220  1012  340A               	retlw	10
  2221  1013  3415               	retlw	21
  2222  1014  3421               	retlw	33
  2223  1015  3422               	retlw	34
  2224  1016  3418               	retlw	24
  2225  1017  3419               	retlw	25
  2226  1018  341A               	retlw	26
  2227  1019  341B               	retlw	27
  2228  101A  341C               	retlw	28
  2229  101B  341D               	retlw	29
  2230  101C  3423               	retlw	35
  2231  101D  3424               	retlw	36
  2232  101E  3425               	retlw	37
  2233  101F  3426               	retlw	38
  2234  1020  3429               	retlw	41
  2235  1021  342C               	retlw	44
  2236  1022  342D               	retlw	45
  2237  1023  342E               	retlw	46
  2238  1024  3400               	retlw	0
  2239  1025  3401               	retlw	1
  2240  1026  3402               	retlw	2
  2241  1027  3407               	retlw	7
  2242  1028  3408               	retlw	8
  2243  1029  3409               	retlw	9
  2244  102A  3406               	retlw	6
  2245  102B  3404               	retlw	4
  2246  102C  3405               	retlw	5
  2247  102D  3427               	retlw	39
  2248  102E  3428               	retlw	40
  2249  102F                     __end_of_CC2500_registers_address:	
  2250  102F                     _CC2500_rfSettings:	
  2251  102F  3407               	retlw	7
  2252  1030  3407               	retlw	7
  2253  1031  3430               	retlw	48
  2254  1032  3487               	retlw	135
  2255  1033  346B               	retlw	107
  2256  1034  34F8               	retlw	248
  2257  1035  347F               	retlw	127
  2258  1036  343F               	retlw	63
  2259  1037  3409               	retlw	9
  2260  1038  3400               	retlw	0
  2261  1039  345C               	retlw	92
  2262  103A  34A7               	retlw	167
  2263  103B  3462               	retlw	98
  2264  103C  3486               	retlw	134
  2265  103D  3483               	retlw	131
  2266  103E  3403               	retlw	3
  2267  103F  3422               	retlw	34
  2268  1040  34F8               	retlw	248
  2269  1041  3400               	retlw	0
  2270  1042  3444               	retlw	68
  2271  1043  34B6               	retlw	182
  2272  1044  3410               	retlw	16
  2273  1045  3418               	retlw	24
  2274  1046  341D               	retlw	29
  2275  1047  341C               	retlw	28
  2276  1048  34C7               	retlw	199
  2277  1049  3400               	retlw	0
  2278  104A  34B2               	retlw	178
  2279  104B  34EA               	retlw	234
  2280  104C  340A               	retlw	10
  2281  104D  3400               	retlw	0
  2282  104E  3411               	retlw	17
  2283  104F  3459               	retlw	89
  2284  1050  3488               	retlw	136
  2285  1051  3431               	retlw	49
  2286  1052  340B               	retlw	11
  2287  1053  342F               	retlw	47
  2288  1054  342E               	retlw	46
  2289  1055  3406               	retlw	6
  2290  1056  3404               	retlw	4
  2291  1057  3405               	retlw	5
  2292  1058  3400               	retlw	0
  2293  1059  3430               	retlw	48
  2294  105A  34D3               	retlw	211
  2295  105B  3491               	retlw	145
  2296  105C  3441               	retlw	65
  2297  105D  3400               	retlw	0
  2298  105E                     __end_of_CC2500_rfSettings:	
  2299  105E                     _CC2500_patable_vaule:	
  2300  105E  34FE               	retlw	254
  2301  105F  34FE               	retlw	254
  2302  1060  34FE               	retlw	254
  2303  1061  34FE               	retlw	254
  2304  1062  34FE               	retlw	254
  2305  1063  34FE               	retlw	254
  2306  1064  34FE               	retlw	254
  2307  1065  34FE               	retlw	254
  2308  1066                     __end_of_CC2500_patable_vaule:	
  2309                           
  2310                           	psect	nvBANK1
  2311  00EE                     __pnvBANK1:	
  2312  00EE                     _product:	
  2313  00EE                     	ds	1
  2314  000C                     _PORTA	set	12
  2315  000D                     _PORTB	set	13
  2316  000E                     _PORTC	set	14
  2317  0018                     _T1CON	set	24
  2318  0017                     _TMR1H	set	23
  2319  0016                     _TMR1L	set	22
  2320  005F                     _GIE	set	95
  2321  005B                     _IOCIE	set	91
  2322  0058                     _IOCIF	set	88
  2323  005E                     _PEIE	set	94
  2324  0060                     _RA0	set	96
  2325  0064                     _RA4	set	100
  2326  0066                     _RA6	set	102
  2327  0067                     _RA7	set	103
  2328  0068                     _RB0	set	104
  2329  0069                     _RB1	set	105
  2330  006A                     _RB2	set	106
  2331  006B                     _RB3	set	107
  2332  006D                     _RB5	set	109
  2333  0070                     _RC0	set	112
  2334  0071                     _RC1	set	113
  2335  0073                     _RC3	set	115
  2336  0074                     _RC4	set	116
  2337  0075                     _RC5	set	117
  2338  0088                     _TMR1IF	set	136
  2339  009D                     _ADCON0	set	157
  2340  009E                     _ADCON1	set	158
  2341  009C                     _ADRESH	set	156
  2342  009B                     _ADRESL	set	155
  2343  0099                     _OSCCON	set	153
  2344  008C                     _TRISA	set	140
  2345  008D                     _TRISB	set	141
  2346  008E                     _TRISC	set	142
  2347  0097                     _WDTCON	set	151
  2348  04E9                     _GO_nDONE	set	1257
  2349  0488                     _TMR1IE	set	1160
  2350  0117                     _FVRCON	set	279
  2351  010C                     _LATA	set	268
  2352  010D                     _LATB	set	269
  2353  010E                     _LATC	set	270
  2354  018C                     _ANSELA	set	396
  2355  018D                     _ANSELB	set	397
  2356  018E                     _ANSELC	set	398
  2357  0192                     _PMADRH	set	402
  2358  0191                     _PMADRL	set	401
  2359  0196                     _PMCON2	set	406
  2360  0194                     _PMDATH	set	404
  2361  0193                     _PMDATL	set	403
  2362  0CAE                     _CFGS	set	3246
  2363  0CAC                     _FREE	set	3244
  2364  0CAD                     _LWLO	set	3245
  2365  0CA8                     _RD	set	3240
  2366  0CA9                     _WR	set	3241
  2367  0CAA                     _WREN	set	3242
  2368  020D                     _WPUB	set	525
  2369  0396                     _IOCBF	set	918
  2370  0395                     _IOCBN	set	917
  2371  0394                     _IOCBP	set	916
  2372  1CB2                     _IOCBF2	set	7346
  2373                           
  2374                           ; #config settings
  2375  0000                     
  2376                           	psect	cinit
  2377  0022                     start_initialization:	
  2378  0022                     __initialization:	
  2379                           
  2380                           ; Clear objects allocated to BITCOMMON
  2381  0022  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2382                           
  2383                           ; Clear objects allocated to BITBANK1
  2384  0023  0021               	movlb	1	; select bank1
  2385  0024  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2386                           
  2387                           ; Clear objects allocated to BANK1
  2388  0025  30A0               	movlw	low __pbssBANK1
  2389  0026  0084               	movwf	4
  2390  0027  3000               	movlw	high __pbssBANK1
  2391  0028  0085               	movwf	5
  2392  0029  3046               	movlw	70
  2393  002A  319B  2362  3180   	fcall	clear_ram0
  2394                           
  2395                           ; Clear objects allocated to BANK2
  2396  002D  3020               	movlw	low __pbssBANK2
  2397  002E  0084               	movwf	4
  2398  002F  3001               	movlw	high __pbssBANK2
  2399  0030  0085               	movwf	5
  2400  0031  3050               	movlw	80
  2401  0032  319B  2362  3180   	fcall	clear_ram0
  2402                           
  2403                           ; Clear objects allocated to BANK3
  2404  0035  30A0               	movlw	low __pbssBANK3
  2405  0036  0084               	movwf	4
  2406  0037  3001               	movlw	high __pbssBANK3
  2407  0038  0085               	movwf	5
  2408  0039  3044               	movlw	68
  2409  003A  319B  2362  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Initialize objects allocated to BANK4
  2412  003D  3071               	movlw	low __pidataBANK4
  2413  003E  0084               	movwf	4
  2414  003F  3090               	movlw	(high __pidataBANK4)| (0+128)
  2415  0040  0085               	movwf	5
  2416  0041  3020               	movlw	low __pdataBANK4
  2417  0042  0086               	movwf	6
  2418  0043  3002               	movlw	high __pdataBANK4
  2419  0044  0087               	movwf	7
  2420  0045  3020               	movlw	32
  2421  0046  319B  235C         	fcall	init_ram
  2422  0048                     end_of_initialization:	
  2423                           ;End of C runtime variable initialization code
  2424                           
  2425  0048                     __end_of__initialization:	
  2426  0048  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2427  0049  0020               	movlb	0
  2428  004A  3196  2E15         	ljmp	_main	;jump to C main() function
  2429                           
  2430                           	psect	bitbssCOMMON
  2431  03E8                     __pbitbssCOMMON:	
  2432  03E8                     _Transceive_OK:	
  2433  03E8                     	ds	1
  2434                           
  2435                           	psect	bitbssBANK1
  2436  0778                     __pbitbssBANK1:	
  2437  0778                     _Receive_OK:	
  2438  0778                     	ds	1
  2439                           
  2440                           	psect	bssBANK1
  2441  00A0                     __pbssBANK1:	
  2442  00A0                     _RF1:	
  2443  00A0                     	ds	14
  2444  00AE                     _myMain:	
  2445  00AE                     	ds	13
  2446  00BB                     _Buz1:	
  2447  00BB                     	ds	12
  2448  00C7                     _DimmerIntr1:	
  2449  00C7                     	ds	8
  2450  00CF                     _CRC:	
  2451  00CF                     	ds	1
  2452  00D0                     _Cmd:	
  2453  00D0                     	ds	1
  2454  00D1                     _DelayOff:	
  2455  00D1                     	ds	1
  2456  00D2                     _DimmerLights:	
  2457  00D2                     	ds	1
  2458  00D3                     _LED:	
  2459  00D3                     	ds	1
  2460  00D4                     _Rx_Length:	
  2461  00D4                     	ds	1
  2462  00D5                     _SPI0Buffer:	
  2463  00D5                     	ds	1
  2464  00D6                     _Sw:	
  2465  00D6                     	ds	1
  2466  00D7                     _SwDetect:	
  2467  00D7                     	ds	1
  2468  00D8                     _Tx_Length:	
  2469  00D8                     	ds	1
  2470  00D9                     _r_address:	
  2471  00D9                     	ds	1
  2472  00DA                     _r_data:	
  2473  00DA                     	ds	1
  2474  00DB                     _s_data:	
  2475  00DB                     	ds	1
  2476  00DC                     _Temp:	
  2477  00DC                     	ds	10
  2478                           
  2479                           	psect	bssBANK2
  2480  0120                     __pbssBANK2:	
  2481  0120                     _RF_Data:	
  2482  0120                     	ds	30
  2483  013E                     _Timer1:	
  2484  013E                     	ds	3
  2485  0141                     _RF_Count:	
  2486  0141                     	ds	2
  2487  0143                     _WDT:	
  2488  0143                     	ds	2
  2489  0145                     _DimmerIntr:	
  2490  0145                     	ds	1
  2491  0146                     _Light:	
  2492  0146                     	ds	1
  2493  0147                     _RSSI:	
  2494  0147                     	ds	1
  2495  0148                     _Load:	
  2496  0148                     	ds	40
  2497                           
  2498                           	psect	bssBANK3
  2499  01A0                     __pbssBANK3:	
  2500  01A0                     _Dimmer:	
  2501  01A0                     	ds	5
  2502  01A5                     _Memory:	
  2503  01A5                     	ds	37
  2504  01CA                     _Sw1:	
  2505  01CA                     	ds	9
  2506  01D3                     _DimmerLights1:	
  2507  01D3                     	ds	8
  2508  01DB                     _DlySw1:	
  2509  01DB                     	ds	5
  2510  01E0                     _VarErrLED:	
  2511  01E0                     	ds	4
  2512                           
  2513                           	psect	dataBANK4
  2514  0220                     __pdataBANK4:	
  2515  0220                     __product:	
  2516  0220                     	ds	32
  2517                           
  2518                           	psect	clrtext
  2519  1B62                     clear_ram0:	
  2520                           ;	Called with FSR0 containing the base address, and
  2521                           ;	WREG with the size to clear
  2522                           
  2523  1B62  0064               	clrwdt	;clear the watchdog before getting into this loop
  2524  1B63                     clrloop0:	
  2525  1B63  0180               	clrf	0	;clear RAM location pointed to by FSR
  2526  1B64  3101               	addfsr 0,1
  2527  1B65  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2528  1B66  2B63               	goto	clrloop0	;have we reached the end yet?
  2529  1B67  3400               	retlw	0	;all done for this memory range, return
  2530                           
  2531                           	psect	inittext
  2532  1B5C                     init_ram:	
  2533  1B5C  00FE               	movwf	126
  2534  1B5D                     initloop:	
  2535  1B5D  0012               	moviw fsr0++
  2536  1B5E  001E               	movwi fsr1++
  2537  1B5F  0BFE               	decfsz	126,f
  2538  1B60  2B5D               	goto	initloop
  2539  1B61  3400               	retlw	0
  2540                           
  2541                           	psect	cstackBANK1
  2542  00E6                     __pcstackBANK1:	
  2543  00E6                     ??_getRxData:	
  2544  00E6                     setDimmerLights_OnOff@lights:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547                           
  2548                           ; 1 bytes @ 0x0
  2549  00E6                     	ds	1
  2550  00E7                     setDimmerLights_Main@lights:	
  2551  00E7                     getRxData@error:	
  2552                           ; 1 bytes @ 0x1
  2553                           
  2554                           
  2555                           ; 1 bytes @ 0x1
  2556  00E7                     	ds	1
  2557  00E8                     ??_setRF_Main:	
  2558                           
  2559                           ; 0 bytes @ 0x2
  2560  00E8                     	ds	1
  2561  00E9                     setRF_Main@error:	
  2562                           
  2563                           ; 1 bytes @ 0x3
  2564  00E9                     	ds	1
  2565  00EA                     ?_main:	
  2566  00EA                     main@argc:	
  2567                           ; 2 bytes @ 0x4
  2568                           
  2569                           
  2570                           ; 2 bytes @ 0x4
  2571  00EA                     	ds	2
  2572  00EC                     main@argv:	
  2573                           
  2574                           ; 2 bytes @ 0x6
  2575  00EC                     	ds	2
  2576                           
  2577                           	psect	cstackCOMMON
  2578  0070                     __pcstackCOMMON:	
  2579  0070                     ?_CC2500_WriteCommand:	
  2580  0070                     ?_RF_Timeout_Counter:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_setRF_TimeoutCleared:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_CC2500_WriteByte:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_CC2500_ReadStatus:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_CC2500_ReadByte:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_CC2500_PowerRST:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_CC2500_InitSetREG:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_CC2500_InitPATable:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_CC2500_ClearTXFIFO:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_CC2500_ClearRXFIFO:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_CC2500_FrequencyCabr:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_SIDLEMode:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_DlyOff_Initialization:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_DlyOff_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setDimmerLights_SwOn:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setDimmerLights_SwOff:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_setDimmerLights_Initialization:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setDimmerLights_Main:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setDimmerLights_Line:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_setTxData:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setRF_TransceiveGO:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setLED_Initialization:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setLED_Main:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_Fosc_Set:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_IO_Set:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_TMR1_Set:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_ADC_Set:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_IOC_Set:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_WDT_Set:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_TMR1_ISR:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_IOC_ISR:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_Timeout_Counter:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_set_TimeoutCleared:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_Flash_Memory_Write:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_Flash_Memory_Modify:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_WDT_Clearing:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_myMain_Initialization:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_Temp_Initialization:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_Load_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Switch_Initialization:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_RF_Initialization:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_getLoad_AD:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_getTemp_AD:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_my_MainTimer:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_Temp_Main:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_Load_Main:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_Switch_Main:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_RF_Main:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_Exception_Main:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_setLoad_AH_AL_Restore:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_setTemp_Initialization:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_setTemp_Main:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setRF_Initialization:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_setRF_Main:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_RF_RxDisable:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_getRxData:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_setLog_Code:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setControl_Lights_Table:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setRFSW_Control:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_setRFSW_AdjControl:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_setSw_Initialization:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setSw_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_Buzzer_Initialization:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_Buzzer_Main:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_CC2500_TxData:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_CC2500_RxData:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_CC2500_PowerOnInitial:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_DelayOffPointSelect:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_DelayOff_Initialization:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_DelayOff_Main:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_DimmerIntr_Initialization:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_DimmerLights_SelectPointer:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_DimmerLights_Initialization:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_setDimmerLights_DimmingOn:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_DimmerLights_Main:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_DimmerLights_TMR_1:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ??_DimmerLights_TMR_1:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_DimmerLights_IOC_1:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_LedPointSelect:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_LED_Initialization:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_LED_Main:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_Mcu_Initialization:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_ISR:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_Flash_Memory_Initialization:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_Flash_Memory_Main:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_Flash_Memory_Unlock:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_Flash_Memory_Erasing:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_setMemory_Modify:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_setMemory_LoopSave:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_WDT_Main:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_setRF_Learn:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_TouchPower:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_SwPointSelect:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_getDimmerLights_Status:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_getLoad_OK:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ?_getMain_All_Error_Status:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?_getMain_All_LightsStatus:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ?_getDimmerLights_Allow_Condition:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ?_getDimmerLights_PercentToValue:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ?_getDimmerLights_ValueToPercent:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ?_getCmd_Status:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?_Flash_Memory_Read:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ?_getRF_KeyStatus:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_getSw_KeyStatus:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_getDelayOff_GO:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ?_getDimmerIntr_DimmingValue:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_getDimmerLights_Line:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_getDimmer_LoadGO:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_getDimmer_Load_Status:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_getMain_Lights_Count:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?i1___awdiv:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     setDimmerLights_Initialization@lights:	
  2917                           ; 2 bytes @ 0x0
  2918                           
  2919  0070                     getDimmerLights_Allow_Condition@lights:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     getSw_KeyStatus@sw:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     i1___awdiv@divisor:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928                           
  2929                           ; 2 bytes @ 0x0
  2930  0070                     	ds	2
  2931  0072                     DimmerLights_TMR_1@count:	
  2932  0072                     i1___awdiv@dividend:	
  2933                           ; 1 bytes @ 0x2
  2934                           
  2935                           
  2936                           ; 2 bytes @ 0x2
  2937  0072                     	ds	1
  2938  0073                     ??_TMR1_ISR:	
  2939                           
  2940                           ; 0 bytes @ 0x3
  2941  0073                     	ds	1
  2942  0074                     ??i1___awdiv:	
  2943                           
  2944                           ; 0 bytes @ 0x4
  2945  0074                     	ds	1
  2946  0075                     i1___awdiv@counter:	
  2947                           
  2948                           ; 1 bytes @ 0x5
  2949  0075                     	ds	1
  2950  0076                     i1___awdiv@sign:	
  2951                           
  2952                           ; 1 bytes @ 0x6
  2953  0076                     	ds	1
  2954  0077                     i1___awdiv@quotient:	
  2955                           
  2956                           ; 2 bytes @ 0x7
  2957  0077                     	ds	2
  2958  0079                     ??_DimmerLights_IOC_1:	
  2959                           
  2960                           ; 0 bytes @ 0x9
  2961  0079                     	ds	3
  2962  007C                     ??_IOC_ISR:	
  2963  007C                     ??_ISR:	
  2964                           ; 0 bytes @ 0xC
  2965                           
  2966                           
  2967                           ; 0 bytes @ 0xC
  2968  007C                     	ds	1
  2969                           
  2970                           	psect	cstackBANK0
  2971  0020                     __pcstackBANK0:	
  2972  0020                     ??_RF_Timeout_Counter:	
  2973  0020                     ??_setRF_TimeoutCleared:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_CC2500_WriteByte:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_CC2500_ReadByte:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ?_DelayTime_1us:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_setDimmerLights_Initialization:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_getLoad_OK:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_getMain_All_Error_Status:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_getMain_All_LightsStatus:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_setDimmerLights_Line:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_getCmd_Status:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ?_setCmd_Status:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ??_setTxData:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_setRF_TransceiveGO:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_Fosc_Set:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_IO_Set:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_TMR1_Set:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_ADC_Set:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_IOC_Set:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_WDT_Set:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_Timeout_Counter:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_set_TimeoutCleared:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_Flash_Memory_Read:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ?_setMemory_Data:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_Flash_Memory_Write:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_WDT_Clearing:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_myMain_Initialization:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_Temp_Initialization:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_setLoad_AH_AL_Restore:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_setTemp_Initialization:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_setRF_Initialization:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_getRF_KeyStatus:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_getSw_KeyStatus:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_Buzzer_Initialization:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_Buzzer_Main:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_DelayOffPointSelect:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_DimmerIntr_Initialization:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ?_setDimmerIntr_ControlStatus:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ?_setDimmerIntr_DimmingValue:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_getDimmerIntr_DimmingValue:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ?_setDimmerIntr_Dimming_RF:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_DimmerLights_SelectPointer:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_getDimmerLights_Line:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_getDimmer_LoadGO:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_getDimmer_Load_Status:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_LedPointSelect:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_Flash_Memory_Unlock:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_Flash_Memory_Erasing:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_setMemory_Modify:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_setMemory_LoopSave:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_WDT_Main:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ??_getMain_Lights_Count:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_setRF_Learn:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ??_TouchPower:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ??_SwPointSelect:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ?___bmul:	
  3142                           ; 0 bytes @ 0x0
  3143                           
  3144  0020                     ?_getBuz_GO:	
  3145                           ; 1 bytes @ 0x0
  3146                           
  3147  0020                     ?_getAD:	
  3148                           ; 2 bytes @ 0x0
  3149                           
  3150  0020                     ?___wmul:	
  3151                           ; 2 bytes @ 0x0
  3152                           
  3153  0020                     ?___awdiv:	
  3154                           ; 2 bytes @ 0x0
  3155                           
  3156  0020                     ?___lwdiv:	
  3157                           ; 2 bytes @ 0x0
  3158                           
  3159  0020                     ?___ftpack:	
  3160                           ; 2 bytes @ 0x0
  3161                           
  3162  0020                     setDimmerIntr_ControlStatus@command:	
  3163                           ; 3 bytes @ 0x0
  3164                           
  3165  0020                     setDimmerIntr_DimmingValue@value:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0020                     setDimmerIntr_Dimming_Sw@command:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0020                     setDimmerIntr_Dimming_RF@command:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0020                     setDimmerLights_Line@lights:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0020                     getDimmerLights_Line@line:	
  3181                           ; 1 bytes @ 0x0
  3182                           
  3183  0020                     getDimmer_LoadGO@loadgo:	
  3184                           ; 1 bytes @ 0x0
  3185                           
  3186  0020                     getDimmer_Load_Status@status:	
  3187                           ; 1 bytes @ 0x0
  3188                           
  3189  0020                     getAD@adcon1:	
  3190                           ; 1 bytes @ 0x0
  3191                           
  3192  0020                     setMemory_Data@data:	
  3193                           ; 1 bytes @ 0x0
  3194                           
  3195  0020                     getMain_All_LightsStatus@status:	
  3196                           ; 1 bytes @ 0x0
  3197                           
  3198  0020                     getMain_Lights_Count@count:	
  3199                           ; 1 bytes @ 0x0
  3200                           
  3201  0020                     setCmd_Status@cmd:	
  3202                           ; 1 bytes @ 0x0
  3203                           
  3204  0020                     getCmd_Status@number:	
  3205                           ; 1 bytes @ 0x0
  3206                           
  3207  0020                     getLoad_OK@ok:	
  3208                           ; 1 bytes @ 0x0
  3209                           
  3210  0020                     ___bmul@multiplicand:	
  3211                           ; 1 bytes @ 0x0
  3212                           
  3213  0020                     DelayTime_1us@count:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0020                     ___wmul@multiplier:	
  3217                           ; 2 bytes @ 0x0
  3218                           
  3219  0020                     ___awdiv@divisor:	
  3220                           ; 2 bytes @ 0x0
  3221                           
  3222  0020                     ___lwdiv@divisor:	
  3223                           ; 2 bytes @ 0x0
  3224                           
  3225  0020                     ___ftpack@arg:	
  3226                           ; 2 bytes @ 0x0
  3227                           
  3228                           
  3229                           ; 3 bytes @ 0x0
  3230  0020                     	ds	1
  3231  0021                     ??_getDimmerLights_Allow_Condition:	
  3232  0021                     ??_setCmd_Status:	
  3233                           ; 0 bytes @ 0x1
  3234                           
  3235  0021                     ??_setMemory_Data:	
  3236                           ; 0 bytes @ 0x1
  3237                           
  3238  0021                     ??_RF_Initialization:	
  3239                           ; 0 bytes @ 0x1
  3240                           
  3241  0021                     ??_setDimmerIntr_ControlStatus:	
  3242                           ; 0 bytes @ 0x1
  3243                           
  3244  0021                     ??_setDimmerIntr_DimmingValue:	
  3245                           ; 0 bytes @ 0x1
  3246                           
  3247  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3248                           ; 0 bytes @ 0x1
  3249                           
  3250  0021                     ??_setDimmerIntr_Dimming_RF:	
  3251                           ; 0 bytes @ 0x1
  3252                           
  3253  0021                     ??_DimmerLights_Initialization:	
  3254                           ; 0 bytes @ 0x1
  3255                           
  3256  0021                     ??_Mcu_Initialization:	
  3257                           ; 0 bytes @ 0x1
  3258                           
  3259  0021                     ??___bmul:	
  3260                           ; 0 bytes @ 0x1
  3261                           
  3262  0021                     CC2500_WriteByte@loop_a:	
  3263                           ; 0 bytes @ 0x1
  3264                           
  3265  0021                     CC2500_ReadByte@loop_b:	
  3266                           ; 1 bytes @ 0x1
  3267                           
  3268  0021                     DelayOffPointSelect@sw:	
  3269                           ; 1 bytes @ 0x1
  3270                           
  3271  0021                     getDimmerIntr_DimmingValue@lights:	
  3272                           ; 1 bytes @ 0x1
  3273                           
  3274  0021                     DimmerLights_SelectPointer@lights:	
  3275                           ; 1 bytes @ 0x1
  3276                           
  3277  0021                     LedPointSelect@led:	
  3278                           ; 1 bytes @ 0x1
  3279                           
  3280  0021                     Flash_Memory_Read@i:	
  3281                           ; 1 bytes @ 0x1
  3282                           
  3283  0021                     Flash_Memory_Write@i:	
  3284                           ; 1 bytes @ 0x1
  3285                           
  3286  0021                     setMemory_Modify@command:	
  3287                           ; 1 bytes @ 0x1
  3288                           
  3289  0021                     setMemory_LoopSave@command:	
  3290                           ; 1 bytes @ 0x1
  3291                           
  3292  0021                     getMain_Lights_Count@status1:	
  3293                           ; 1 bytes @ 0x1
  3294                           
  3295  0021                     getCmd_Status@cmd:	
  3296                           ; 1 bytes @ 0x1
  3297                           
  3298  0021                     setLoad_AH_AL_Restore@i:	
  3299                           ; 1 bytes @ 0x1
  3300                           
  3301  0021                     setRF_Learn@command:	
  3302                           ; 1 bytes @ 0x1
  3303                           
  3304  0021                     getRF_KeyStatus@key:	
  3305                           ; 1 bytes @ 0x1
  3306                           
  3307  0021                     setRF_TransceiveGO@command:	
  3308                           ; 1 bytes @ 0x1
  3309                           
  3310  0021                     SwPointSelect@sw:	
  3311                           ; 1 bytes @ 0x1
  3312                           
  3313  0021                     getSw_KeyStatus@status:	
  3314                           ; 1 bytes @ 0x1
  3315                           
  3316  0021                     _getMain_All_Error_Status$3401:	
  3317                           ; 1 bytes @ 0x1
  3318                           
  3319                           
  3320                           ; 2 bytes @ 0x1
  3321  0021                     	ds	1
  3322  0022                     ??_CC2500_WriteCommand:	
  3323  0022                     ??_CC2500_ReadStatus:	
  3324                           ; 0 bytes @ 0x2
  3325                           
  3326  0022                     ??_DelayTime_1us:	
  3327                           ; 0 bytes @ 0x2
  3328                           
  3329  0022                     ?_CC2500_WriteREG:	
  3330                           ; 0 bytes @ 0x2
  3331                           
  3332  0022                     ??_DlyOff_Initialization:	
  3333                           ; 0 bytes @ 0x2
  3334                           
  3335  0022                     ??_getDimmerLights_Status:	
  3336                           ; 0 bytes @ 0x2
  3337                           
  3338  0022                     ??_setDimmerLights_SwOff:	
  3339                           ; 0 bytes @ 0x2
  3340                           
  3341  0022                     ?_setLED:	
  3342                           ; 0 bytes @ 0x2
  3343                           
  3344  0022                     ??_setLED_Main:	
  3345                           ; 0 bytes @ 0x2
  3346                           
  3347  0022                     ??_Load_Initialization:	
  3348                           ; 0 bytes @ 0x2
  3349                           
  3350  0022                     ??_getBuz_GO:	
  3351                           ; 0 bytes @ 0x2
  3352                           
  3353  0022                     ??_getDelayOff_GO:	
  3354                           ; 0 bytes @ 0x2
  3355                           
  3356  0022                     ??_setDimmerLights_DimmingOn:	
  3357                           ; 0 bytes @ 0x2
  3358                           
  3359  0022                     ?_setDimmerLights_DimmingRun:	
  3360                           ; 0 bytes @ 0x2
  3361                           
  3362  0022                     CC2500_WriteREG@value:	
  3363                           ; 0 bytes @ 0x2
  3364                           
  3365  0022                     DlyOff_Initialization@sw:	
  3366                           ; 1 bytes @ 0x2
  3367                           
  3368  0022                     getDelayOff_GO@sw:	
  3369                           ; 1 bytes @ 0x2
  3370                           
  3371  0022                     setDimmerIntr_ControlStatus@lights:	
  3372                           ; 1 bytes @ 0x2
  3373                           
  3374  0022                     setDimmerIntr_DimmingValue@lights:	
  3375                           ; 1 bytes @ 0x2
  3376                           
  3377  0022                     getDimmerIntr_DimmingValue@value:	
  3378                           ; 1 bytes @ 0x2
  3379                           
  3380  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3381                           ; 1 bytes @ 0x2
  3382                           
  3383  0022                     setDimmerIntr_Dimming_RF@lights:	
  3384                           ; 1 bytes @ 0x2
  3385                           
  3386  0022                     setDimmerLights_SwOff@sw:	
  3387                           ; 1 bytes @ 0x2
  3388                           
  3389  0022                     setDimmerLights_DimmingOn@sw:	
  3390                           ; 1 bytes @ 0x2
  3391                           
  3392  0022                     getDimmerLights_Allow_Condition@allow:	
  3393                           ; 1 bytes @ 0x2
  3394                           
  3395  0022                     getDimmerLights_Status@lights:	
  3396                           ; 1 bytes @ 0x2
  3397                           
  3398  0022                     setDimmerLights_DimmingRun@command:	
  3399                           ; 1 bytes @ 0x2
  3400                           
  3401  0022                     setLED@command:	
  3402                           ; 1 bytes @ 0x2
  3403                           
  3404  0022                     Flash_Memory_Read@address:	
  3405                           ; 1 bytes @ 0x2
  3406                           
  3407  0022                     setMemory_Data@address:	
  3408                           ; 1 bytes @ 0x2
  3409                           
  3410  0022                     setCmd_Status@number:	
  3411                           ; 1 bytes @ 0x2
  3412                           
  3413  0022                     _getRF_KeyStatus$5086:	
  3414                           ; 1 bytes @ 0x2
  3415                           
  3416  0022                     _getSw_KeyStatus$6074:	
  3417                           ; 1 bytes @ 0x2
  3418                           
  3419  0022                     ___bmul@product:	
  3420                           ; 1 bytes @ 0x2
  3421                           
  3422  0022                     DelayTime_1us@i:	
  3423                           ; 1 bytes @ 0x2
  3424                           
  3425  0022                     ___wmul@multiplicand:	
  3426                           ; 2 bytes @ 0x2
  3427                           
  3428  0022                     ___awdiv@dividend:	
  3429                           ; 2 bytes @ 0x2
  3430                           
  3431  0022                     ___lwdiv@dividend:	
  3432                           ; 2 bytes @ 0x2
  3433                           
  3434                           
  3435                           ; 2 bytes @ 0x2
  3436  0022                     	ds	1
  3437  0023                     ??_CC2500_WriteREG:	
  3438  0023                     ??_setLED:	
  3439                           ; 0 bytes @ 0x3
  3440                           
  3441  0023                     ??_DelayOff_Initialization:	
  3442                           ; 0 bytes @ 0x3
  3443                           
  3444  0023                     ??_setDimmerLights_DimmingRun:	
  3445                           ; 0 bytes @ 0x3
  3446                           
  3447  0023                     ??_getAD:	
  3448                           ; 0 bytes @ 0x3
  3449                           
  3450  0023                     CC2500_WriteCommand@command:	
  3451                           ; 0 bytes @ 0x3
  3452                           
  3453  0023                     CC2500_ReadStatus@status_addr:	
  3454                           ; 1 bytes @ 0x3
  3455                           
  3456  0023                     getDelayOff_GO@go:	
  3457                           ; 1 bytes @ 0x3
  3458                           
  3459  0023                     _getDimmerLights_Allow_Condition$2141:	
  3460                           ; 1 bytes @ 0x3
  3461                           
  3462  0023                     getDimmerLights_Status@status:	
  3463                           ; 1 bytes @ 0x3
  3464                           
  3465  0023                     setLED@led:	
  3466                           ; 1 bytes @ 0x3
  3467                           
  3468  0023                     getAD@adcon0:	
  3469                           ; 1 bytes @ 0x3
  3470                           
  3471  0023                     Flash_Memory_Read@ret:	
  3472                           ; 1 bytes @ 0x3
  3473                           
  3474  0023                     ___bmul@multiplier:	
  3475                           ; 1 bytes @ 0x3
  3476                           
  3477  0023                     ___ftpack@exp:	
  3478                           ; 1 bytes @ 0x3
  3479                           
  3480  0023                     _getMain_All_Error_Status$3402:	
  3481                           ; 1 bytes @ 0x3
  3482                           
  3483                           
  3484                           ; 2 bytes @ 0x3
  3485  0023                     	ds	1
  3486  0024                     ??_CC2500_ClearTXFIFO:	
  3487  0024                     ??_CC2500_ClearRXFIFO:	
  3488                           ; 0 bytes @ 0x4
  3489                           
  3490  0024                     ??_CC2500_SIDLEMode:	
  3491                           ; 0 bytes @ 0x4
  3492                           
  3493  0024                     ??_setLED_Initialization:	
  3494                           ; 0 bytes @ 0x4
  3495                           
  3496  0024                     ??_Flash_Memory_Modify:	
  3497                           ; 0 bytes @ 0x4
  3498                           
  3499  0024                     ??_getLoad_AD:	
  3500                           ; 0 bytes @ 0x4
  3501                           
  3502  0024                     ??_getTemp_AD:	
  3503                           ; 0 bytes @ 0x4
  3504                           
  3505  0024                     ??_RF_RxDisable:	
  3506                           ; 0 bytes @ 0x4
  3507                           
  3508  0024                     ??_setSw_Initialization:	
  3509                           ; 0 bytes @ 0x4
  3510                           
  3511  0024                     ??_CC2500_TxData:	
  3512                           ; 0 bytes @ 0x4
  3513                           
  3514  0024                     ??_CC2500_RxData:	
  3515                           ; 0 bytes @ 0x4
  3516                           
  3517  0024                     ??___wmul:	
  3518                           ; 0 bytes @ 0x4
  3519                           
  3520  0024                     ??___awdiv:	
  3521                           ; 0 bytes @ 0x4
  3522                           
  3523  0024                     ??___lwdiv:	
  3524                           ; 0 bytes @ 0x4
  3525                           
  3526  0024                     CC2500_WriteREG@w_addr:	
  3527                           ; 0 bytes @ 0x4
  3528                           
  3529  0024                     setDimmerLights_DimmingRun@lights:	
  3530                           ; 1 bytes @ 0x4
  3531                           
  3532  0024                     setLED_Initialization@led:	
  3533                           ; 1 bytes @ 0x4
  3534                           
  3535  0024                     setLED_Main@led:	
  3536                           ; 1 bytes @ 0x4
  3537                           
  3538  0024                     setSw_Initialization@sw:	
  3539                           ; 1 bytes @ 0x4
  3540                           
  3541  0024                     ___ftpack@sign:	
  3542                           ; 1 bytes @ 0x4
  3543                           
  3544  0024                     getBuz_GO@i:	
  3545                           ; 1 bytes @ 0x4
  3546                           
  3547  0024                     DelayTime_1us@j:	
  3548                           ; 2 bytes @ 0x4
  3549                           
  3550  0024                     ___wmul@product:	
  3551                           ; 2 bytes @ 0x4
  3552                           
  3553                           
  3554                           ; 2 bytes @ 0x4
  3555  0024                     	ds	1
  3556  0025                     ??_CC2500_InitSetREG:	
  3557  0025                     ??_CC2500_InitPATable:	
  3558                           ; 0 bytes @ 0x5
  3559                           
  3560  0025                     ??_Switch_Initialization:	
  3561                           ; 0 bytes @ 0x5
  3562                           
  3563  0025                     ??___ftpack:	
  3564                           ; 0 bytes @ 0x5
  3565                           
  3566  0025                     ??_LED_Initialization:	
  3567                           ; 0 bytes @ 0x5
  3568                           
  3569  0025                     ??_LED_Main:	
  3570                           ; 0 bytes @ 0x5
  3571                           
  3572  0025                     CC2500_TxData@loop_e:	
  3573                           ; 0 bytes @ 0x5
  3574                           
  3575  0025                     CC2500_RxData@loop_f:	
  3576                           ; 1 bytes @ 0x5
  3577                           
  3578  0025                     Flash_Memory_Modify@i:	
  3579                           ; 1 bytes @ 0x5
  3580                           
  3581  0025                     getMain_All_Error_Status@command:	
  3582                           ; 1 bytes @ 0x5
  3583                           
  3584  0025                     getTemp_AD@channel:	
  3585                           ; 1 bytes @ 0x5
  3586                           
  3587  0025                     ___awdiv@counter:	
  3588                           ; 1 bytes @ 0x5
  3589                           
  3590  0025                     ___lwdiv@quotient:	
  3591                           ; 1 bytes @ 0x5
  3592                           
  3593                           
  3594                           ; 2 bytes @ 0x5
  3595  0025                     	ds	1
  3596  0026                     ??_CC2500_PowerRST:	
  3597  0026                     ??_CC2500_FrequencyCabr:	
  3598                           ; 0 bytes @ 0x6
  3599                           
  3600  0026                     ??_Flash_Memory_Main:	
  3601                           ; 0 bytes @ 0x6
  3602                           
  3603  0026                     CC2500_InitSetREG@temp1:	
  3604                           ; 0 bytes @ 0x6
  3605                           
  3606  0026                     CC2500_InitPATable@temp:	
  3607                           ; 1 bytes @ 0x6
  3608                           
  3609  0026                     getMain_All_Error_Status@status:	
  3610                           ; 1 bytes @ 0x6
  3611                           
  3612  0026                     getLoad_AD@channel:	
  3613                           ; 1 bytes @ 0x6
  3614                           
  3615  0026                     ___awdiv@sign:	
  3616                           ; 1 bytes @ 0x6
  3617                           
  3618  0026                     getTemp_AD@ADRES:	
  3619                           ; 1 bytes @ 0x6
  3620                           
  3621                           
  3622                           ; 2 bytes @ 0x6
  3623  0026                     	ds	1
  3624  0027                     CC2500_InitSetREG@temp2:	
  3625  0027                     CC2500_InitPATable@loop_d:	
  3626                           ; 1 bytes @ 0x7
  3627                           
  3628  0027                     getLoad_AD@k:	
  3629                           ; 1 bytes @ 0x7
  3630                           
  3631  0027                     ___lwdiv@counter:	
  3632                           ; 1 bytes @ 0x7
  3633                           
  3634  0027                     ___awdiv@quotient:	
  3635                           ; 1 bytes @ 0x7
  3636                           
  3637                           
  3638                           ; 2 bytes @ 0x7
  3639  0027                     	ds	1
  3640  0028                     ??_Load_Main:	
  3641  0028                     ?___awtoft:	
  3642                           ; 0 bytes @ 0x8
  3643                           
  3644  0028                     CC2500_InitSetREG@loop_c:	
  3645                           ; 3 bytes @ 0x8
  3646                           
  3647  0028                     getLoad_AD@j:	
  3648                           ; 1 bytes @ 0x8
  3649                           
  3650  0028                     ___awtoft@c:	
  3651                           ; 1 bytes @ 0x8
  3652                           
  3653                           
  3654                           ; 2 bytes @ 0x8
  3655  0028                     	ds	1
  3656  0029                     ?_setBuz:	
  3657  0029                     ??_CC2500_PowerOnInitial:	
  3658                           ; 0 bytes @ 0x9
  3659                           
  3660  0029                     setBuz@time:	
  3661                           ; 0 bytes @ 0x9
  3662                           
  3663  0029                     getLoad_AD@ADRES:	
  3664                           ; 2 bytes @ 0x9
  3665                           
  3666                           
  3667                           ; 2 bytes @ 0x9
  3668  0029                     	ds	1
  3669  002A                     _Load_Main$3756:	
  3670                           
  3671                           ; 2 bytes @ 0xA
  3672  002A                     	ds	1
  3673  002B                     ??_setBuz:	
  3674  002B                     ??___awtoft:	
  3675                           ; 0 bytes @ 0xB
  3676                           
  3677  002B                     getLoad_AD@i:	
  3678                           ; 0 bytes @ 0xB
  3679                           
  3680                           
  3681                           ; 1 bytes @ 0xB
  3682  002B                     	ds	1
  3683  002C                     setBuz@count:	
  3684  002C                     Load_Main@error:	
  3685                           ; 1 bytes @ 0xC
  3686                           
  3687                           
  3688                           ; 1 bytes @ 0xC
  3689  002C                     	ds	1
  3690  002D                     ??_setDimmerLights_SwOn:	
  3691  002D                     ??_my_MainTimer:	
  3692                           ; 0 bytes @ 0xD
  3693                           
  3694  002D                     ??_Exception_Main:	
  3695                           ; 0 bytes @ 0xD
  3696                           
  3697  002D                     setDimmerLights_SwOn@sw:	
  3698                           ; 0 bytes @ 0xD
  3699                           
  3700  002D                     Load_Main@ErrorCountValue:	
  3701                           ; 1 bytes @ 0xD
  3702                           
  3703  002D                     ___awtoft@sign:	
  3704                           ; 1 bytes @ 0xD
  3705                           
  3706                           
  3707                           ; 1 bytes @ 0xD
  3708  002D                     	ds	1
  3709  002E                     ?___ftdiv:	
  3710  002E                     ?___ftmul:	
  3711                           ; 3 bytes @ 0xE
  3712                           
  3713  002E                     setDimmerLights_SwOn@idle:	
  3714                           ; 3 bytes @ 0xE
  3715                           
  3716  002E                     Exception_Main@status:	
  3717                           ; 1 bytes @ 0xE
  3718                           
  3719  002E                     Load_Main@Load_RunStatus:	
  3720                           ; 1 bytes @ 0xE
  3721                           
  3722  002E                     ___ftdiv@f2:	
  3723                           ; 1 bytes @ 0xE
  3724                           
  3725  002E                     ___ftmul@f1:	
  3726                           ; 3 bytes @ 0xE
  3727                           
  3728                           
  3729                           ; 3 bytes @ 0xE
  3730  002E                     	ds	1
  3731  002F                     ??_setSw_Main:	
  3732  002F                     Exception_Main@count:	
  3733                           ; 0 bytes @ 0xF
  3734                           
  3735  002F                     Load_Main@LightsCount:	
  3736                           ; 1 bytes @ 0xF
  3737                           
  3738                           
  3739                           ; 1 bytes @ 0xF
  3740  002F                     	ds	1
  3741  0030                     Exception_Main@i:	
  3742  0030                     Load_Main@i:	
  3743                           ; 2 bytes @ 0x10
  3744                           
  3745                           
  3746                           ; 2 bytes @ 0x10
  3747  0030                     	ds	1
  3748  0031                     setSw_Main@sw:	
  3749  0031                     ___ftdiv@f1:	
  3750                           ; 1 bytes @ 0x11
  3751                           
  3752  0031                     ___ftmul@f2:	
  3753                           ; 3 bytes @ 0x11
  3754                           
  3755                           
  3756                           ; 3 bytes @ 0x11
  3757  0031                     	ds	1
  3758  0032                     ??_Switch_Main:	
  3759  0032                     Exception_Main@i_3413:	
  3760                           ; 0 bytes @ 0x12
  3761                           
  3762                           
  3763                           ; 2 bytes @ 0x12
  3764  0032                     	ds	2
  3765  0034                     ??___ftdiv:	
  3766  0034                     ??___ftmul:	
  3767                           ; 0 bytes @ 0x14
  3768                           
  3769  0034                     Exception_Main@lights:	
  3770                           ; 0 bytes @ 0x14
  3771                           
  3772                           
  3773                           ; 1 bytes @ 0x14
  3774  0034                     	ds	1
  3775  0035                     Exception_Main@error:	
  3776                           
  3777                           ; 1 bytes @ 0x15
  3778  0035                     	ds	3
  3779  0038                     ___ftdiv@cntr:	
  3780  0038                     ___ftmul@exp:	
  3781                           ; 1 bytes @ 0x18
  3782                           
  3783                           
  3784                           ; 1 bytes @ 0x18
  3785  0038                     	ds	1
  3786  0039                     ___ftdiv@f3:	
  3787  0039                     ___ftmul@f3_as_product:	
  3788                           ; 3 bytes @ 0x19
  3789                           
  3790                           
  3791                           ; 3 bytes @ 0x19
  3792  0039                     	ds	3
  3793  003C                     ___ftdiv@exp:	
  3794  003C                     ___ftmul@cntr:	
  3795                           ; 1 bytes @ 0x1C
  3796                           
  3797                           
  3798                           ; 1 bytes @ 0x1C
  3799  003C                     	ds	1
  3800  003D                     ___ftdiv@sign:	
  3801  003D                     ___ftmul@sign:	
  3802                           ; 1 bytes @ 0x1D
  3803                           
  3804                           
  3805                           ; 1 bytes @ 0x1D
  3806  003D                     	ds	1
  3807  003E                     ?___ftneg:	
  3808  003E                     ___ftneg@f1:	
  3809                           ; 3 bytes @ 0x1E
  3810                           
  3811                           
  3812                           ; 3 bytes @ 0x1E
  3813  003E                     	ds	3
  3814  0041                     ??___ftneg:	
  3815  0041                     ?___ftadd:	
  3816                           ; 0 bytes @ 0x21
  3817                           
  3818  0041                     ___ftadd@f1:	
  3819                           ; 3 bytes @ 0x21
  3820                           
  3821                           
  3822                           ; 3 bytes @ 0x21
  3823  0041                     	ds	3
  3824  0044                     ___ftadd@f2:	
  3825                           
  3826                           ; 3 bytes @ 0x24
  3827  0044                     	ds	3
  3828  0047                     ??___ftadd:	
  3829                           
  3830                           ; 0 bytes @ 0x27
  3831  0047                     	ds	4
  3832  004B                     ___ftadd@sign:	
  3833                           
  3834                           ; 1 bytes @ 0x2B
  3835  004B                     	ds	1
  3836  004C                     ___ftadd@exp2:	
  3837                           
  3838                           ; 1 bytes @ 0x2C
  3839  004C                     	ds	1
  3840  004D                     ___ftadd@exp1:	
  3841                           
  3842                           ; 1 bytes @ 0x2D
  3843  004D                     	ds	1
  3844  004E                     ?___fttol:	
  3845  004E                     ___fttol@f1:	
  3846                           ; 4 bytes @ 0x2E
  3847                           
  3848                           
  3849                           ; 3 bytes @ 0x2E
  3850  004E                     	ds	4
  3851  0052                     ??___fttol:	
  3852                           
  3853                           ; 0 bytes @ 0x32
  3854  0052                     	ds	4
  3855  0056                     ___fttol@sign1:	
  3856                           
  3857                           ; 1 bytes @ 0x36
  3858  0056                     	ds	1
  3859  0057                     ___fttol@lval:	
  3860                           
  3861                           ; 4 bytes @ 0x37
  3862  0057                     	ds	4
  3863  005B                     ___fttol@exp1:	
  3864                           
  3865                           ; 1 bytes @ 0x3B
  3866  005B                     	ds	1
  3867  005C                     ??_getDimmerLights_PercentToValue:	
  3868  005C                     ??_getDimmerLights_ValueToPercent:	
  3869                           ; 0 bytes @ 0x3C
  3870                           
  3871                           
  3872                           ; 0 bytes @ 0x3C
  3873  005C                     	ds	2
  3874  005E                     getDimmerLights_PercentToValue@value:	
  3875  005E                     getDimmerLights_ValueToPercent@value:	
  3876                           ; 1 bytes @ 0x3E
  3877                           
  3878                           
  3879                           ; 1 bytes @ 0x3E
  3880  005E                     	ds	1
  3881  005F                     getDimmerLights_PercentToValue@i:	
  3882  005F                     getDimmerLights_ValueToPercent@i:	
  3883                           ; 3 bytes @ 0x3F
  3884                           
  3885                           
  3886                           ; 3 bytes @ 0x3F
  3887  005F                     	ds	3
  3888  0062                     ?_setProductData:	
  3889  0062                     ?_setDimmerIntr_MaxmumValue:	
  3890                           ; 0 bytes @ 0x42
  3891                           
  3892  0062                     ??_Flash_Memory_Initialization:	
  3893                           ; 0 bytes @ 0x42
  3894                           
  3895  0062                     setDimmerIntr_MaxmumValue@value:	
  3896                           ; 0 bytes @ 0x42
  3897                           
  3898  0062                     setProductData@value:	
  3899                           ; 1 bytes @ 0x42
  3900                           
  3901                           
  3902                           ; 1 bytes @ 0x42
  3903  0062                     	ds	1
  3904  0063                     ??_setProductData:	
  3905  0063                     ??_setDimmerIntr_MaxmumValue:	
  3906                           ; 0 bytes @ 0x43
  3907                           
  3908  0063                     Flash_Memory_Initialization@i:	
  3909                           ; 0 bytes @ 0x43
  3910                           
  3911                           
  3912                           ; 1 bytes @ 0x43
  3913  0063                     	ds	1
  3914  0064                     setDimmerIntr_MaxmumValue@lights:	
  3915  0064                     setProductData@address:	
  3916                           ; 1 bytes @ 0x44
  3917                           
  3918                           
  3919                           ; 1 bytes @ 0x44
  3920  0064                     	ds	1
  3921  0065                     ??_DlyOff_Main:	
  3922  0065                     ?_setRF_DimmerLights:	
  3923                           ; 0 bytes @ 0x45
  3924                           
  3925  0065                     ??_setTemp_Main:	
  3926                           ; 0 bytes @ 0x45
  3927                           
  3928  0065                     ??_setLog_Code:	
  3929                           ; 0 bytes @ 0x45
  3930                           
  3931  0065                     ??_setRFSW_AdjControl:	
  3932                           ; 0 bytes @ 0x45
  3933                           
  3934  0065                     ?_setDelayOff_GO:	
  3935                           ; 0 bytes @ 0x45
  3936                           
  3937  0065                     setDelayOff_GO@command:	
  3938                           ; 0 bytes @ 0x45
  3939                           
  3940  0065                     setRF_DimmerLights@on:	
  3941                           ; 1 bytes @ 0x45
  3942                           
  3943                           
  3944                           ; 1 bytes @ 0x45
  3945  0065                     	ds	1
  3946  0066                     ??_setRF_DimmerLights:	
  3947  0066                     setDelayOff_GO@value:	
  3948                           ; 0 bytes @ 0x46
  3949                           
  3950  0066                     setTemp_Main@error:	
  3951                           ; 1 bytes @ 0x46
  3952                           
  3953                           
  3954                           ; 1 bytes @ 0x46
  3955  0066                     	ds	1
  3956  0067                     ??_setDelayOff_GO:	
  3957  0067                     DlyOff_Main@sw:	
  3958                           ; 0 bytes @ 0x47
  3959                           
  3960  0067                     setRFSW_AdjControl@status:	
  3961                           ; 1 bytes @ 0x47
  3962                           
  3963  0067                     setTemp_Main@SafeValue:	
  3964                           ; 1 bytes @ 0x47
  3965                           
  3966                           
  3967                           ; 2 bytes @ 0x47
  3968  0067                     	ds	1
  3969  0068                     ??_DelayOff_Main:	
  3970  0068                     setRFSW_AdjControl@sw:	
  3971                           ; 0 bytes @ 0x48
  3972                           
  3973  0068                     setRF_DimmerLights@status:	
  3974                           ; 1 bytes @ 0x48
  3975                           
  3976                           
  3977                           ; 1 bytes @ 0x48
  3978  0068                     	ds	1
  3979  0069                     setDelayOff_GO@i:	
  3980  0069                     setRF_DimmerLights@lights:	
  3981                           ; 1 bytes @ 0x49
  3982                           
  3983  0069                     setTemp_Main@DangerValue:	
  3984                           ; 1 bytes @ 0x49
  3985                           
  3986                           
  3987                           ; 2 bytes @ 0x49
  3988  0069                     	ds	1
  3989  006A                     ?_setDimmerLights_Dimming:	
  3990  006A                     setDelayOff_GO@j:	
  3991                           ; 0 bytes @ 0x4A
  3992                           
  3993  006A                     setDimmerLights_Dimming@status:	
  3994                           ; 1 bytes @ 0x4A
  3995                           
  3996                           
  3997                           ; 1 bytes @ 0x4A
  3998  006A                     	ds	1
  3999  006B                     ??_setDimmerLights_Dimming:	
  4000  006B                     setDelayOff_GO@k:	
  4001                           ; 0 bytes @ 0x4B
  4002                           
  4003  006B                     setTemp_Main@TempGO:	
  4004                           ; 1 bytes @ 0x4B
  4005                           
  4006                           
  4007                           ; 1 bytes @ 0x4B
  4008  006B                     	ds	1
  4009  006C                     setDelayOff_GO@sw:	
  4010  006C                     setDimmerLights_Dimming@lights:	
  4011                           ; 1 bytes @ 0x4C
  4012                           
  4013  006C                     setTemp_Main@AD:	
  4014                           ; 1 bytes @ 0x4C
  4015                           
  4016                           
  4017                           ; 2 bytes @ 0x4C
  4018  006C                     	ds	1
  4019  006D                     ?_setDimmerLights_OnOff:	
  4020  006D                     ??_setRFSW_Control:	
  4021                           ; 0 bytes @ 0x4D
  4022                           
  4023  006D                     setDimmerLights_OnOff@command:	
  4024                           ; 0 bytes @ 0x4D
  4025                           
  4026                           
  4027                           ; 1 bytes @ 0x4D
  4028  006D                     	ds	1
  4029  006E                     ??_setDimmerLights_OnOff:	
  4030  006E                     ??_Temp_Main:	
  4031                           ; 0 bytes @ 0x4E
  4032                           
  4033  006E                     setRFSW_Control@status:	
  4034                           ; 0 bytes @ 0x4E
  4035                           
  4036                           
  4037                           ; 1 bytes @ 0x4E
  4038  006E                     	ds	1
  4039  006F                     setRFSW_Control@sw:	
  4040                           
  4041                           ; 1 bytes @ 0x4F
  4042  006F                     	ds	1
  4043  0070                     ??_setDimmerLights_Main:	
  4044  0070                     ??_RF_Main:	
  4045                           ; 0 bytes @ 0x50
  4046                           
  4047  0070                     ??_setControl_Lights_Table:	
  4048                           ; 0 bytes @ 0x50
  4049                           
  4050  0070                     ??_DimmerLights_Main:	
  4051                           ; 0 bytes @ 0x50
  4052                           
  4053  0070                     ??_main:	
  4054                           ; 0 bytes @ 0x50
  4055                           
  4056                           
  4057                           	psect	maintext
  4058  1615                     __pmaintext:	
  4059                           ; 0 bytes @ 0x50
  4060 ;;
  4061 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4062 ;;
  4063 ;; *************** function _main *****************
  4064 ;; Defined at:
  4065 ;;		line 7 in file "../src/Main_B1.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;  argc            2    4[BANK1 ] int 
  4068 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;		None
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  2    4[BANK1 ] int 
  4073 ;; Registers used:
  4074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4075 ;; Tracked objects:
  4076 ;;		On entry : 17F/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4080 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;Total ram usage:        4 bytes
  4085 ;; Hardware stack levels required when called:   12
  4086 ;; This function calls:
  4087 ;;		_Buzzer_Initialization
  4088 ;;		_Buzzer_Main
  4089 ;;		_CC2500_PowerOnInitial
  4090 ;;		_DelayOff_Initialization
  4091 ;;		_DelayOff_Main
  4092 ;;		_DimmerLights_Initialization
  4093 ;;		_DimmerLights_Main
  4094 ;;		_Exception_Main
  4095 ;;		_Flash_Memory_Initialization
  4096 ;;		_Flash_Memory_Main
  4097 ;;		_LED_Initialization
  4098 ;;		_LED_Main
  4099 ;;		_Load_Initialization
  4100 ;;		_Load_Main
  4101 ;;		_Mcu_Initialization
  4102 ;;		_RF_Initialization
  4103 ;;		_RF_Main
  4104 ;;		_Switch_Initialization
  4105 ;;		_Switch_Main
  4106 ;;		_Temp_Initialization
  4107 ;;		_Temp_Main
  4108 ;;		_WDT_Main
  4109 ;;		_getLoad_AD
  4110 ;;		_getTemp_AD
  4111 ;;		_myMain_Initialization
  4112 ;;		_my_MainTimer
  4113 ;; This function is called by:
  4114 ;;		Startup code after reset
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           
  4119                           ;psect for function _main
  4120  1615                     _main:	
  4121                           
  4122                           ;Main_B1.c: 8: myMain_Initialization();
  4123                           
  4124                           ;incstack = 0
  4125                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4126  1615  319D  25A4  3196   	fcall	_myMain_Initialization
  4127                           
  4128                           ;Main_B1.c: 9: Mcu_Initialization();
  4129  1618  319D  2534  3196   	fcall	_Mcu_Initialization
  4130                           
  4131                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4132  161B  3184  2478  3196   	fcall	_Flash_Memory_Initialization
  4133                           
  4134                           ;Main_B1.c: 11: LED_Initialization();
  4135  161E  319B  2331  3196   	fcall	_LED_Initialization
  4136                           
  4137                           ;Main_B1.c: 12: Buzzer_Initialization();
  4138  1621  319B  2317  3196   	fcall	_Buzzer_Initialization
  4139                           
  4140                           ;Main_B1.c: 14: ;;
  4141                           ;Main_B1.c: 15: Temp_Initialization();
  4142  1624  319B  2323  3196   	fcall	_Temp_Initialization
  4143                           
  4144                           ;Main_B1.c: 16: Load_Initialization();
  4145  1627  319B  231A  3196   	fcall	_Load_Initialization
  4146                           
  4147                           ;Main_B1.c: 17: ;;
  4148                           ;Main_B1.c: 18: DelayOff_Initialization();
  4149  162A  319B  2329  3196   	fcall	_DelayOff_Initialization
  4150                           
  4151                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4152  162D  319B  2368  3196   	fcall	_DimmerLights_Initialization
  4153                           
  4154                           ;Main_B1.c: 21: ;;
  4155                           ;Main_B1.c: 22: ;;
  4156                           ;Main_B1.c: 23: ;;
  4157                           ;Main_B1.c: 24: Switch_Initialization();
  4158  1630  319B  234D  3196   	fcall	_Switch_Initialization
  4159                           
  4160                           ;Main_B1.c: 25: RF_Initialization();
  4161  1633  319B  231D  3196   	fcall	_RF_Initialization
  4162                           
  4163                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4164  1636  319D  25E0  3196   	fcall	_CC2500_PowerOnInitial
  4165  1639                     l8554:	
  4166                           ;Main_B1.c: 27: ;;
  4167                           ;Main_B1.c: 28: ;;
  4168                           ;Main_B1.c: 30: while (1) {
  4169                           
  4170                           
  4171                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4172  1639  0021               	movlb	1	; select bank1
  4173  163A  1C2E               	btfss	_myMain^(0+128),0
  4174  163B  2E44               	goto	l8558
  4175                           
  4176                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4177  163C  3005               	movlw	5
  4178  163D  318A  22BC  3196   	fcall	_getLoad_AD
  4179                           
  4180                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4181  1640  3009               	movlw	9
  4182  1641  3193  23A4  3196   	fcall	_getTemp_AD
  4183  1644                     l8558:	
  4184                           
  4185                           ;Main_B1.c: 57: }
  4186                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4187  1644  0022               	movlb	2	; select bank2
  4188  1645  1C3E               	btfss	_Timer1^(0+256),0
  4189  1646  2E39               	goto	l8554
  4190                           
  4191                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4192  1647  103E               	bcf	_Timer1^(0+256),0
  4193                           
  4194                           ;Main_B1.c: 96: my_MainTimer();
  4195  1648  3193  2328  3196   	fcall	_my_MainTimer
  4196                           
  4197                           ;Main_B1.c: 97: WDT_Main();
  4198  164B  319D  2546  3196   	fcall	_WDT_Main
  4199                           
  4200                           ;Main_B1.c: 98: ;;
  4201                           ;Main_B1.c: 99: ;;
  4202                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4203  164E  0021               	movlb	1	; select bank1
  4204  164F  1C2E               	btfss	_myMain^(0+128),0
  4205  1650  2E39               	goto	l8554
  4206                           
  4207                           ;Main_B1.c: 101: Flash_Memory_Main();
  4208  1651  3192  2213  3196   	fcall	_Flash_Memory_Main
  4209                           
  4210                           ;Main_B1.c: 103: LED_Main();
  4211  1654  319B  2335  3196   	fcall	_LED_Main
  4212                           
  4213                           ;Main_B1.c: 104: Buzzer_Main();
  4214  1657  3194  2428  3196   	fcall	_Buzzer_Main
  4215                           
  4216                           ;Main_B1.c: 106: ;;
  4217                           ;Main_B1.c: 107: Temp_Main();
  4218  165A  319B  2326  3196   	fcall	_Temp_Main
  4219                           
  4220                           ;Main_B1.c: 108: Load_Main();
  4221  165D  3180  204C  3196   	fcall	_Load_Main
  4222                           
  4223                           ;Main_B1.c: 109: ;;
  4224                           ;Main_B1.c: 111: ;;
  4225                           ;Main_B1.c: 112: DimmerLights_Main();
  4226  1660  319F  272F  3196   	fcall	_DimmerLights_Main
  4227                           
  4228                           ;Main_B1.c: 113: Switch_Main();
  4229  1663  319B  2376  3196   	fcall	_Switch_Main
  4230                           
  4231                           ;Main_B1.c: 114: ;;
  4232                           ;Main_B1.c: 115: ;;
  4233                           ;Main_B1.c: 117: RF_Main();
  4234  1666  319B  2320  3196   	fcall	_RF_Main
  4235                           
  4236                           ;Main_B1.c: 118: DelayOff_Main();
  4237  1669  319B  232D  3196   	fcall	_DelayOff_Main
  4238                           
  4239                           ;Main_B1.c: 119: ;;
  4240                           ;Main_B1.c: 120: ;;
  4241                           ;Main_B1.c: 121: Exception_Main();
  4242  166C  3186  263B  3196   	fcall	_Exception_Main
  4243  166F  2E39               	goto	l8554
  4244  1670                     __end_of_main:	
  4245                           ;Main_B1.c: 128: }
  4246                           ;Main_B1.c: 129: }
  4247                           ;Main_B1.c: 163: }
  4248                           ;Main_B1.c: 164: return (0);
  4249                           ;	Return value of _main is never used
  4250                           
  4251                           
  4252                           	psect	text1
  4253  1328                     __ptext1:	
  4254 ;; *************** function _my_MainTimer *****************
  4255 ;; Defined at:
  4256 ;;		line 185 in file "../src/Main_B1.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;		None               void
  4263 ;; Registers used:
  4264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4273 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4274 ;;Total ram usage:        1 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    6
  4277 ;; This function calls:
  4278 ;;		_setBuz
  4279 ;; This function is called by:
  4280 ;;		_main
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           
  4285                           ;psect for function _my_MainTimer
  4286  1328                     _my_MainTimer:	
  4287                           
  4288                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4289                           
  4290                           ;incstack = 0
  4291                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4292  1328  0021               	movlb	1	; select bank1
  4293  1329  182E               	btfsc	_myMain^(0+128),0
  4294  132A  2B42               	goto	l7754
  4295                           
  4296                           ;Main_B1.c: 188: myMain.PowerCount++;
  4297  132B  3001               	movlw	1
  4298  132C  0020               	movlb	0	; select bank0
  4299  132D  00AD               	movwf	??_my_MainTimer
  4300  132E  082D               	movf	??_my_MainTimer,w
  4301  132F  0021               	movlb	1	; select bank1
  4302  1330  07AF               	addwf	(_myMain^(0+128)+1),f
  4303                           
  4304                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4305  1331  082F               	movf	(_myMain^(0+128)+1),w
  4306  1332  3A4B               	xorlw	75
  4307  1333  1D03               	skipz
  4308  1334  0008               	return
  4309                           
  4310                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4311  1335  01AF               	clrf	(_myMain^(0+128)+1)
  4312                           
  4313                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4314  1336  142E               	bsf	_myMain^(0+128),0
  4315                           
  4316                           ;Main_B1.c: 196: setBuz(3, 50);
  4317  1337  3032               	movlw	50
  4318  1338  0020               	movlb	0	; select bank0
  4319  1339  00A9               	movwf	setBuz@time
  4320  133A  3000               	movlw	0
  4321  133B  00AA               	movwf	setBuz@time+1
  4322  133C  3003               	movlw	3
  4323  133D  3195  25BC         	fcall	_setBuz
  4324                           
  4325                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4326  133F  0021               	movlb	1	; select bank1
  4327  1340  162E               	bsf	_myMain^(0+128),4
  4328                           
  4329                           ;Main_B1.c: 206: }
  4330                           ;Main_B1.c: 207: } else {
  4331  1341  0008               	return
  4332  1342                     l7754:	
  4333                           
  4334                           ;Main_B1.c: 208: myMain.PowerCount++;
  4335  1342  3001               	movlw	1
  4336  1343  0020               	movlb	0	; select bank0
  4337  1344  00AD               	movwf	??_my_MainTimer
  4338  1345  082D               	movf	??_my_MainTimer,w
  4339  1346  0021               	movlb	1	; select bank1
  4340  1347  07AF               	addwf	(_myMain^(0+128)+1),f
  4341                           
  4342                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4343  1348  082F               	movf	(_myMain^(0+128)+1),w
  4344  1349  3A32               	xorlw	50
  4345  134A  1903               	btfsc	3,2
  4346                           
  4347                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4348  134B  01AF               	clrf	(_myMain^(0+128)+1)
  4349                           
  4350                           ;Main_B1.c: 226: }
  4351                           ;Main_B1.c: 228: myMain.Count1++;
  4352  134C  3001               	movlw	1
  4353  134D  07B2               	addwf	(_myMain^(0+128)+4),f
  4354  134E  3000               	movlw	0
  4355  134F  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4356                           
  4357                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4358  1350  3004               	movlw	4
  4359  1351  3EAE               	addlw	_myMain& (0+255)
  4360  1352  0086               	movwf	6
  4361  1353  0187               	clrf	7
  4362  1354  3F40               	moviw [0]fsr1
  4363  1355  3A32               	xorlw	50
  4364  1356  1D03               	skipz
  4365  1357  2B5A               	goto	u7775
  4366  1358  3F41               	moviw [1]fsr1
  4367  1359  3A00               	xorlw	0
  4368  135A                     u7775:	
  4369  135A  1D03               	skipz
  4370  135B  0008               	return
  4371                           
  4372                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4373  135C  01B2               	clrf	(_myMain^(0+128)+4)
  4374  135D  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4375                           
  4376                           ;Main_B1.c: 242: if (myMain.Flag) {
  4377  135E  1CAE               	btfss	_myMain^(0+128),1
  4378  135F  2B62               	goto	l1423
  4379                           
  4380                           ;Main_B1.c: 243: myMain.Flag = 0;
  4381  1360  10AE               	bcf	_myMain^(0+128),1
  4382                           
  4383                           ;Main_B1.c: 252: } else {
  4384  1361  0008               	return
  4385  1362                     l1423:	
  4386                           
  4387                           ;Main_B1.c: 253: myMain.Flag = 1;
  4388  1362  14AE               	bsf	_myMain^(0+128),1
  4389  1363  0008               	return
  4390  1364                     __end_of_my_MainTimer:	
  4391                           
  4392                           	psect	text2
  4393  1DA4                     __ptext2:	
  4394 ;; *************** function _myMain_Initialization *****************
  4395 ;; Defined at:
  4396 ;;		line 170 in file "../src/Main_B1.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;		None
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;		None
  4401 ;; Return value:  Size  Location     Type
  4402 ;;		None               void
  4403 ;; Registers used:
  4404 ;;		wreg, fsr1l, fsr1h
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;Total ram usage:        1 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    4
  4417 ;; This function calls:
  4418 ;;		Nothing
  4419 ;; This function is called by:
  4420 ;;		_main
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           
  4425                           ;psect for function _myMain_Initialization
  4426  1DA4                     _myMain_Initialization:	
  4427                           
  4428                           ;Main_B1.c: 173: product = &_product;
  4429                           
  4430                           ;incstack = 0
  4431                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4432  1DA4  3020               	movlw	__product& (0+255)
  4433  1DA5  0020               	movlb	0	; select bank0
  4434  1DA6  00A0               	movwf	??_myMain_Initialization
  4435  1DA7  0820               	movf	??_myMain_Initialization,w
  4436  1DA8  0021               	movlb	1	; select bank1
  4437  1DA9  00EE               	movwf	_product^(0+128)
  4438                           
  4439                           ;Main_B1.c: 174: product->Data[20] = 209;
  4440  1DAA  30D1               	movlw	209
  4441  1DAB  0020               	movlb	0	; select bank0
  4442  1DAC  00A0               	movwf	??_myMain_Initialization
  4443  1DAD  0021               	movlb	1	; select bank1
  4444  1DAE  086E               	movf	_product^(0+128),w
  4445  1DAF  3E14               	addlw	20
  4446  1DB0  0086               	movwf	6
  4447  1DB1  3002               	movlw	2	; select bank4/5
  4448  1DB2  0087               	movwf	7
  4449  1DB3  0020               	movlb	0	; select bank0
  4450  1DB4  0820               	movf	??_myMain_Initialization,w
  4451  1DB5  0081               	movwf	1
  4452  1DB6  0008               	return
  4453  1DB7                     __end_of_myMain_Initialization:	
  4454                           
  4455                           	psect	text3
  4456  13A4                     __ptext3:	
  4457 ;; *************** function _getTemp_AD *****************
  4458 ;; Defined at:
  4459 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  channel         1    wreg     unsigned char 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  channel         1    5[BANK0 ] unsigned char 
  4464 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4465 ;; Return value:  Size  Location     Type
  4466 ;;		None               void
  4467 ;; Registers used:
  4468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4478 ;;Total ram usage:        4 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    6
  4481 ;; This function calls:
  4482 ;;		_getAD
  4483 ;; This function is called by:
  4484 ;;		_main
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           
  4489                           ;psect for function _getTemp_AD
  4490  13A4                     _getTemp_AD:	
  4491                           
  4492                           ;incstack = 0
  4493                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4494                           ;getTemp_AD@channel stored from wreg
  4495  13A4  0020               	movlb	0	; select bank0
  4496  13A5  00A5               	movwf	getTemp_AD@channel
  4497                           
  4498                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4499  13A6  01A6               	clrf	getTemp_AD@ADRES
  4500  13A7  01A7               	clrf	getTemp_AD@ADRES+1
  4501                           
  4502                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4503  13A8  0021               	movlb	1	; select bank1
  4504  13A9  1D5C               	btfss	_Temp^(0+128),2
  4505  13AA  2BD4               	goto	l7738
  4506                           
  4507                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4508  13AB  30F0               	movlw	240
  4509  13AC  0020               	movlb	0	; select bank0
  4510  13AD  00A4               	movwf	??_getTemp_AD
  4511  13AE  0824               	movf	??_getTemp_AD,w
  4512  13AF  00A0               	movwf	getAD@adcon1
  4513  13B0  0825               	movf	getTemp_AD@channel,w
  4514  13B1  319F  27E0  3193   	fcall	_getAD
  4515  13B4  0020               	movlb	0	; select bank0
  4516  13B5  0821               	movf	?_getAD+1,w
  4517  13B6  01A7               	clrf	getTemp_AD@ADRES+1
  4518  13B7  07A7               	addwf	getTemp_AD@ADRES+1,f
  4519  13B8  0820               	movf	?_getAD,w
  4520  13B9  01A6               	clrf	getTemp_AD@ADRES
  4521  13BA  07A6               	addwf	getTemp_AD@ADRES,f
  4522                           
  4523                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4524  13BB  0827               	movf	getTemp_AD@ADRES+1,w
  4525  13BC  0426               	iorwf	getTemp_AD@ADRES,w
  4526  13BD  1903               	skipnz
  4527  13BE  2BD4               	goto	l7738
  4528                           
  4529                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4530  13BF  0827               	movf	getTemp_AD@ADRES+1,w
  4531  13C0  0021               	movlb	1	; select bank1
  4532  13C1  0265               	subwf	((_Temp+1)^(0+128)+8),w
  4533  13C2  1D03               	skipz
  4534  13C3  2BC8               	goto	u7735
  4535  13C4  0020               	movlb	0	; select bank0
  4536  13C5  0826               	movf	getTemp_AD@ADRES,w
  4537  13C6  0021               	movlb	1	; select bank1
  4538  13C7  0264               	subwf	(_Temp^(0+128)+8),w
  4539  13C8                     u7735:	
  4540  13C8  1803               	skipnc
  4541  13C9  2BD4               	goto	l7738
  4542                           
  4543                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4544  13CA  0020               	movlb	0	; select bank0
  4545  13CB  0827               	movf	getTemp_AD@ADRES+1,w
  4546  13CC  0021               	movlb	1	; select bank1
  4547  13CD  01E5               	clrf	((_Temp+1)^(0+128)+8)
  4548  13CE  07E5               	addwf	((_Temp+1)^(0+128)+8),f
  4549  13CF  0020               	movlb	0	; select bank0
  4550  13D0  0826               	movf	getTemp_AD@ADRES,w
  4551  13D1  0021               	movlb	1	; select bank1
  4552  13D2  01E4               	clrf	(_Temp^(0+128)+8)
  4553  13D3  07E4               	addwf	(_Temp^(0+128)+8),f
  4554  13D4                     l7738:	
  4555                           
  4556                           ;OverTemperature_B1.c: 32: }
  4557                           ;OverTemperature_B1.c: 33: }
  4558                           ;OverTemperature_B1.c: 34: }
  4559                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4560  13D4  30F0               	movlw	240
  4561  13D5  0020               	movlb	0	; select bank0
  4562  13D6  00A4               	movwf	??_getTemp_AD
  4563  13D7  0824               	movf	??_getTemp_AD,w
  4564  13D8  00A0               	movwf	getAD@adcon1
  4565  13D9  0825               	movf	getTemp_AD@channel,w
  4566  13DA  319F  27E0         	fcall	_getAD
  4567  13DC  0020               	movlb	0	; select bank0
  4568  13DD  0821               	movf	?_getAD+1,w
  4569  13DE  01A7               	clrf	getTemp_AD@ADRES+1
  4570  13DF  07A7               	addwf	getTemp_AD@ADRES+1,f
  4571  13E0  0820               	movf	?_getAD,w
  4572  13E1  01A6               	clrf	getTemp_AD@ADRES
  4573  13E2  07A6               	addwf	getTemp_AD@ADRES,f
  4574  13E3  0008               	return
  4575  13E4                     __end_of_getTemp_AD:	
  4576                           
  4577                           	psect	text4
  4578  0ABC                     __ptext4:	
  4579 ;; *************** function _getLoad_AD *****************
  4580 ;; Defined at:
  4581 ;;		line 15 in file "../src/OverLoad_B1.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;  channel         1    wreg     unsigned char 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  channel         1    6[BANK0 ] unsigned char 
  4586 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4587 ;;  i               1   11[BANK0 ] unsigned char 
  4588 ;;  j               1    8[BANK0 ] unsigned char 
  4589 ;;  k               1    7[BANK0 ] unsigned char 
  4590 ;; Return value:  Size  Location     Type
  4591 ;;		None               void
  4592 ;; Registers used:
  4593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4600 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4601 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4602 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;Total ram usage:        8 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    6
  4606 ;; This function calls:
  4607 ;;		_getAD
  4608 ;; This function is called by:
  4609 ;;		_main
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           
  4614                           ;psect for function _getLoad_AD
  4615  0ABC                     _getLoad_AD:	
  4616                           
  4617                           ;incstack = 0
  4618                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4619                           ;getLoad_AD@channel stored from wreg
  4620  0ABC  0020               	movlb	0	; select bank0
  4621  0ABD  00A6               	movwf	getLoad_AD@channel
  4622                           
  4623                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4624  0ABE  01AB               	clrf	getLoad_AD@i
  4625  0ABF  01A8               	clrf	getLoad_AD@j
  4626  0AC0  01A7               	clrf	getLoad_AD@k
  4627                           
  4628                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4629  0AC1  01A9               	clrf	getLoad_AD@ADRES
  4630  0AC2  01AA               	clrf	getLoad_AD@ADRES+1
  4631                           
  4632                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4633  0AC3  0022               	movlb	2	; select bank2
  4634  0AC4  1E48               	btfss	_Load^(0+256),4
  4635  0AC5  0008               	return
  4636                           
  4637                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4638  0AC6  30F3               	movlw	243
  4639  0AC7  0020               	movlb	0	; select bank0
  4640  0AC8  00A4               	movwf	??_getLoad_AD
  4641  0AC9  0824               	movf	??_getLoad_AD,w
  4642  0ACA  00A0               	movwf	getAD@adcon1
  4643  0ACB  0826               	movf	getLoad_AD@channel,w
  4644  0ACC  319F  27E0  318A   	fcall	_getAD
  4645  0ACF  0020               	movlb	0	; select bank0
  4646  0AD0  0821               	movf	?_getAD+1,w
  4647  0AD1  01AA               	clrf	getLoad_AD@ADRES+1
  4648  0AD2  07AA               	addwf	getLoad_AD@ADRES+1,f
  4649  0AD3  0820               	movf	?_getAD,w
  4650  0AD4  01A9               	clrf	getLoad_AD@ADRES
  4651  0AD5  07A9               	addwf	getLoad_AD@ADRES,f
  4652                           
  4653                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4654  0AD6  01AB               	clrf	getLoad_AD@i
  4655  0AD7  3004               	movlw	4
  4656  0AD8  022B               	subwf	getLoad_AD@i,w
  4657  0AD9  1803               	btfsc	3,0
  4658  0ADA  2B02               	goto	l7706
  4659  0ADB                     l7694:	
  4660                           
  4661                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4662  0ADB  352B               	lslf	getLoad_AD@i,w
  4663  0ADC  3E53               	addlw	(_Load+11)& (0+255)
  4664  0ADD  0086               	movwf	6
  4665  0ADE  3001               	movlw	1	; select bank2/3
  4666  0ADF  0087               	movwf	7
  4667  0AE0  3F40               	moviw [0]fsr1
  4668  0AE1  00A4               	movwf	??_getLoad_AD
  4669  0AE2  3F41               	moviw [1]fsr1
  4670  0AE3  00A5               	movwf	??_getLoad_AD+1
  4671  0AE4  082A               	movf	getLoad_AD@ADRES+1,w
  4672  0AE5  0225               	subwf	??_getLoad_AD+1,w
  4673  0AE6  1D03               	skipz
  4674  0AE7  2AEA               	goto	u7635
  4675  0AE8  0829               	movf	getLoad_AD@ADRES,w
  4676  0AE9  0224               	subwf	??_getLoad_AD,w
  4677  0AEA                     u7635:	
  4678  0AEA  1803               	skipnc
  4679  0AEB  2AFA               	goto	l7702
  4680  0AEC  08A8               	movf	getLoad_AD@j,f
  4681  0AED  1D03               	skipz
  4682  0AEE  2AFA               	goto	l7702
  4683                           
  4684                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4685  0AEF  352B               	lslf	getLoad_AD@i,w
  4686  0AF0  3E53               	addlw	(_Load+11)& (0+255)
  4687  0AF1  0086               	movwf	6
  4688  0AF2  3001               	movlw	1	; select bank2/3
  4689  0AF3  0087               	movwf	7
  4690  0AF4  0829               	movf	getLoad_AD@ADRES,w
  4691  0AF5  3FC0               	movwi [0]fsr1
  4692  0AF6  082A               	movf	getLoad_AD@ADRES+1,w
  4693  0AF7  3FC1               	movwi [1]fsr1
  4694                           
  4695                           ;OverLoad_B1.c: 24: j = 1;
  4696  0AF8  01A8               	clrf	getLoad_AD@j
  4697  0AF9  0AA8               	incf	getLoad_AD@j,f
  4698  0AFA                     l7702:	
  4699  0AFA  3001               	movlw	1
  4700  0AFB  00A4               	movwf	??_getLoad_AD
  4701  0AFC  0824               	movf	??_getLoad_AD,w
  4702  0AFD  07AB               	addwf	getLoad_AD@i,f
  4703  0AFE  3004               	movlw	4
  4704  0AFF  022B               	subwf	getLoad_AD@i,w
  4705  0B00  1C03               	skipc
  4706  0B01  2ADB               	goto	l7694
  4707  0B02                     l7706:	
  4708                           
  4709                           ;OverLoad_B1.c: 25: }
  4710                           ;OverLoad_B1.c: 26: }
  4711                           ;OverLoad_B1.c: 27: if (j == 0) {
  4712  0B02  08A8               	movf	getLoad_AD@j,f
  4713  0B03  1D03               	skipz
  4714  0B04  0008               	return
  4715                           
  4716                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4717  0B05  01AB               	clrf	getLoad_AD@i
  4718  0B06                     L1:	
  4719  0B06  3004               	movlw	4
  4720  0B07  022B               	subwf	getLoad_AD@i,w
  4721  0B08  1803               	btfsc	3,0
  4722  0B09  0008               	return
  4723                           
  4724                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4725  0B0A  352B               	lslf	getLoad_AD@i,w
  4726  0B0B  3E5D               	addlw	(_Load+21)& (0+255)
  4727  0B0C  0086               	movwf	6
  4728  0B0D  3001               	movlw	1	; select bank2/3
  4729  0B0E  0087               	movwf	7
  4730  0B0F  3F40               	moviw [0]fsr1
  4731  0B10  00A4               	movwf	??_getLoad_AD
  4732  0B11  3F41               	moviw [1]fsr1
  4733  0B12  00A5               	movwf	??_getLoad_AD+1
  4734  0B13  0825               	movf	??_getLoad_AD+1,w
  4735  0B14  022A               	subwf	getLoad_AD@ADRES+1,w
  4736  0B15  1D03               	skipz
  4737  0B16  2B19               	goto	u7685
  4738  0B17  0824               	movf	??_getLoad_AD,w
  4739  0B18  0229               	subwf	getLoad_AD@ADRES,w
  4740  0B19                     u7685:	
  4741  0B19  1803               	skipnc
  4742  0B1A  2B29               	goto	l7722
  4743  0B1B  08A7               	movf	getLoad_AD@k,f
  4744  0B1C  1D03               	skipz
  4745  0B1D  2B29               	goto	l7722
  4746                           
  4747                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4748  0B1E  352B               	lslf	getLoad_AD@i,w
  4749  0B1F  3E5D               	addlw	(_Load+21)& (0+255)
  4750  0B20  0086               	movwf	6
  4751  0B21  3001               	movlw	1	; select bank2/3
  4752  0B22  0087               	movwf	7
  4753  0B23  0829               	movf	getLoad_AD@ADRES,w
  4754  0B24  3FC0               	movwi [0]fsr1
  4755  0B25  082A               	movf	getLoad_AD@ADRES+1,w
  4756  0B26  3FC1               	movwi [1]fsr1
  4757                           
  4758                           ;OverLoad_B1.c: 31: k = 1;
  4759  0B27  01A7               	clrf	getLoad_AD@k
  4760  0B28  0AA7               	incf	getLoad_AD@k,f
  4761  0B29                     l7722:	
  4762  0B29  3001               	movlw	1
  4763  0B2A  00A4               	movwf	??_getLoad_AD
  4764  0B2B  0824               	movf	??_getLoad_AD,w
  4765  0B2C  07AB               	addwf	getLoad_AD@i,f
  4766  0B2D  2B06               	goto	L1
  4767  0B2E                     __end_of_getLoad_AD:	
  4768                           
  4769                           	psect	text5
  4770  1FE0                     __ptext5:	
  4771 ;; *************** function _getAD *****************
  4772 ;; Defined at:
  4773 ;;		line 459 in file "../src/MCU_B1.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;  adcon0          1    wreg     unsigned char 
  4776 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  2    0[BANK0 ] int 
  4781 ;; Registers used:
  4782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4788 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;Total ram usage:        4 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    5
  4795 ;; This function calls:
  4796 ;;		_Timeout_Counter
  4797 ;;		_set_TimeoutCleared
  4798 ;; This function is called by:
  4799 ;;		_getLoad_AD
  4800 ;;		_getTemp_AD
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           
  4805                           ;psect for function _getAD
  4806  1FE0                     _getAD:	
  4807                           
  4808                           ;incstack = 0
  4809                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4810                           ;getAD@adcon0 stored from wreg
  4811  1FE0  0020               	movlb	0	; select bank0
  4812  1FE1  00A3               	movwf	getAD@adcon0
  4813                           
  4814                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4815  1FE2  0823               	movf	getAD@adcon0,w
  4816  1FE3  0021               	movlb	1	; select bank1
  4817  1FE4  009D               	movwf	29	;volatile
  4818                           
  4819                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4820  1FE5  0020               	movlb	0	; select bank0
  4821  1FE6  0820               	movf	getAD@adcon1,w
  4822  1FE7  0021               	movlb	1	; select bank1
  4823  1FE8  009E               	movwf	30	;volatile
  4824                           
  4825                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4826  1FE9  149D               	bsf	29,1	;volatile
  4827                           
  4828                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4829  1FEA  2FEE               	goto	l7192
  4830  1FEB                     l7190:	
  4831                           
  4832                           ;MCU_B1.c: 464: Timeout_Counter();
  4833  1FEB  319D  25F5  319F   	fcall	_Timeout_Counter
  4834  1FEE                     l7192:	
  4835  1FEE  0021               	movlb	1	; select bank1
  4836  1FEF  1C9D               	btfss	29,1	;volatile
  4837  1FF0  2FF3               	goto	l7196
  4838  1FF1  1D38               	btfss	(_myMain^(0+128)+10),2
  4839  1FF2  2FEB               	goto	l7190
  4840  1FF3                     l7196:	
  4841                           
  4842                           ;MCU_B1.c: 465: };
  4843                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4844  1FF3  319B  2351         	fcall	_set_TimeoutCleared
  4845                           
  4846                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4847  1FF5  0021               	movlb	1	; select bank1
  4848  1FF6  081C               	movf	28,w	;volatile
  4849  1FF7  0020               	movlb	0	; select bank0
  4850  1FF8  01A1               	clrf	?_getAD+1
  4851  1FF9  07A1               	addwf	?_getAD+1,f
  4852  1FFA  0021               	movlb	1	; select bank1
  4853  1FFB  081B               	movf	27,w	;volatile
  4854  1FFC  0020               	movlb	0	; select bank0
  4855  1FFD  01A0               	clrf	?_getAD
  4856  1FFE  07A0               	addwf	?_getAD,f
  4857  1FFF  0008               	return
  4858  2000                     __end_of_getAD:	
  4859                           
  4860                           	psect	text6
  4861  1D46                     __ptext6:	
  4862 ;; *************** function _WDT_Main *****************
  4863 ;; Defined at:
  4864 ;;		line 1103 in file "../src/MCU_B1.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;		None
  4869 ;; Return value:  Size  Location     Type
  4870 ;;		None               void
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0, pclath, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4881 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;Total ram usage:        1 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    5
  4885 ;; This function calls:
  4886 ;;		_WDT_Clearing
  4887 ;; This function is called by:
  4888 ;;		_main
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           
  4893                           ;psect for function _WDT_Main
  4894  1D46                     _WDT_Main:	
  4895                           
  4896                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  4897                           
  4898                           ;incstack = 0
  4899                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4900  1D46  0022               	movlb	2	; select bank2
  4901  1D47  1C43               	btfss	_WDT^(0+256),0
  4902  1D48  0008               	return
  4903                           
  4904                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  4905  1D49  3001               	movlw	1
  4906  1D4A  02C4               	subwf	(_WDT^(0+256)+1),f
  4907  1D4B  0844               	movf	(_WDT^(0+256)+1),w
  4908  1D4C  3AFF               	xorlw	255
  4909  1D4D  1903               	skipnz
  4910  1D4E  0008               	return
  4911                           
  4912                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  4913  1D4F  3064               	movlw	100
  4914  1D50  0020               	movlb	0	; select bank0
  4915  1D51  00A0               	movwf	??_WDT_Main
  4916  1D52  0820               	movf	??_WDT_Main,w
  4917  1D53  0022               	movlb	2	; select bank2
  4918  1D54  00C4               	movwf	(_WDT^(0+256)+1)
  4919                           
  4920                           ;MCU_B1.c: 1107: WDT_Clearing();
  4921  1D55  3180  2002         	fcall	_WDT_Clearing
  4922  1D57  0008               	return
  4923  1D58                     __end_of_WDT_Main:	
  4924                           
  4925                           	psect	text7
  4926  0002                     __ptext7:	
  4927 ;; *************** function _WDT_Clearing *****************
  4928 ;; Defined at:
  4929 ;;		line 1113 in file "../src/MCU_B1.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;		None
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;		None               void
  4936 ;; Registers used:
  4937 ;;		None
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4947 ;;Total ram usage:        0 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:    4
  4950 ;; This function calls:
  4951 ;;		Nothing
  4952 ;; This function is called by:
  4953 ;;		_WDT_Main
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           
  4958                           ;psect for function _WDT_Clearing
  4959  0002                     _WDT_Clearing:	
  4960                           
  4961                           ;incstack = 0
  4962                           ; Regs used in _WDT_Clearing: []
  4963  0002  0064               	clrwdt	;# 
  4964  0003  0008               	return
  4965  0004                     __end_of_WDT_Clearing:	
  4966                           
  4967                           	psect	text8
  4968  1B26                     __ptext8:	
  4969 ;; *************** function _Temp_Main *****************
  4970 ;; Defined at:
  4971 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;		None
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;		None
  4976 ;; Return value:  Size  Location     Type
  4977 ;;		None               void
  4978 ;; Registers used:
  4979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;Total ram usage:        0 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    7
  4992 ;; This function calls:
  4993 ;;		_setTemp_Main
  4994 ;; This function is called by:
  4995 ;;		_main
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           
  5000                           ;psect for function _Temp_Main
  5001  1B26                     _Temp_Main:	
  5002                           
  5003                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5004                           
  5005                           ;incstack = 0
  5006                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5007  1B26  318D  25E0         	fcall	_setTemp_Main
  5008  1B28  0008               	return
  5009  1B29                     __end_of_Temp_Main:	
  5010                           
  5011                           	psect	text9
  5012  0DE0                     __ptext9:	
  5013 ;; *************** function _setTemp_Main *****************
  5014 ;; Defined at:
  5015 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;		None
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  AD              2   76[BANK0 ] unsigned int 
  5020 ;;  DangerValue     2   73[BANK0 ] unsigned int 
  5021 ;;  SafeValue       2   71[BANK0 ] unsigned int 
  5022 ;;  TempGO          1   75[BANK0 ] unsigned char 
  5023 ;;  error           1   70[BANK0 ] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;		None               void
  5026 ;; Registers used:
  5027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5037 ;;Total ram usage:        9 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    6
  5040 ;; This function calls:
  5041 ;;		_getMain_All_Error_Status
  5042 ;;		_getMain_All_LightsStatus
  5043 ;;		_setBuz
  5044 ;;		_setProductData
  5045 ;; This function is called by:
  5046 ;;		_Temp_Main
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           
  5051                           ;psect for function _setTemp_Main
  5052  0DE0                     _setTemp_Main:	
  5053                           
  5054                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5055                           
  5056                           ;incstack = 0
  5057                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5058  0DE0  3000               	movlw	0
  5059  0DE1  3191  2177  318D   	fcall	_getMain_All_Error_Status
  5060  0DE4  0020               	movlb	0	; select bank0
  5061  0DE5  00E5               	movwf	??_setTemp_Main
  5062  0DE6  0865               	movf	??_setTemp_Main,w
  5063  0DE7  00E6               	movwf	setTemp_Main@error
  5064                           
  5065                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5066  0DE8  01E7               	clrf	setTemp_Main@SafeValue
  5067  0DE9  01E8               	clrf	setTemp_Main@SafeValue+1
  5068  0DEA  01E9               	clrf	setTemp_Main@DangerValue
  5069  0DEB  01EA               	clrf	setTemp_Main@DangerValue+1
  5070                           
  5071                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5072  0DEC  319B  23B0  318D   	fcall	_getMain_All_LightsStatus
  5073  0DEF  0020               	movlb	0	; select bank0
  5074  0DF0  00E5               	movwf	??_setTemp_Main
  5075  0DF1  0865               	movf	??_setTemp_Main,w
  5076  0DF2  00EB               	movwf	setTemp_Main@TempGO
  5077                           
  5078                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5079  0DF3  0021               	movlb	1	; select bank1
  5080  0DF4  1C5C               	btfss	_Temp^(0+128),0
  5081  0DF5  2E8D               	goto	l1762
  5082                           
  5083                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5084  0DF6  195C               	btfsc	_Temp^(0+128),2
  5085  0DF7  2E15               	goto	l7270
  5086                           
  5087                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5088  0DF8  0020               	movlb	0	; select bank0
  5089  0DF9  086B               	movf	setTemp_Main@TempGO,w
  5090  0DFA  3A01               	xorlw	1
  5091  0DFB  1D03               	skipz
  5092  0DFC  2E00               	goto	l1768
  5093  0DFD  0021               	movlb	1	; select bank1
  5094  0DFE  1CDC               	btfss	_Temp^(0+128),1
  5095  0DFF  2E03               	goto	l7262
  5096  0E00                     l1768:	
  5097  0E00  0021               	movlb	1	; select bank1
  5098  0E01  1CDC               	btfss	_Temp^(0+128),1
  5099  0E02  2E12               	goto	l7268
  5100  0E03                     l7262:	
  5101                           
  5102                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5103  0E03  3001               	movlw	1
  5104  0E04  07DD               	addwf	(_Temp^(0+128)+1),f
  5105  0E05  3000               	movlw	0
  5106  0E06  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5107                           
  5108                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5109  0E07  3000               	movlw	0
  5110  0E08  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5111  0E09  30FA               	movlw	250
  5112  0E0A  1903               	skipnz
  5113  0E0B  025D               	subwf	(_Temp^(0+128)+1),w
  5114  0E0C  1C03               	skipc
  5115  0E0D  0008               	return
  5116                           
  5117                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5118  0E0E  01DD               	clrf	(_Temp^(0+128)+1)
  5119  0E0F  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5120                           
  5121                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5122  0E10  155C               	bsf	_Temp^(0+128),2
  5123                           
  5124                           ;OverTemperature_B1.c: 83: }
  5125                           ;OverTemperature_B1.c: 84: } else {
  5126  0E11  0008               	return
  5127  0E12                     l7268:	
  5128                           
  5129                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5130  0E12  01DD               	clrf	(_Temp^(0+128)+1)
  5131  0E13  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5132                           
  5133                           ;OverTemperature_B1.c: 86: }
  5134                           ;OverTemperature_B1.c: 87: } else {
  5135  0E14  0008               	return
  5136  0E15                     l7270:	
  5137                           
  5138                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5139  0E15  3001               	movlw	1
  5140  0E16  07DD               	addwf	(_Temp^(0+128)+1),f
  5141  0E17  3000               	movlw	0
  5142  0E18  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5143                           
  5144                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5145  0E19  3000               	movlw	0
  5146  0E1A  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5147  0E1B  3005               	movlw	5
  5148  0E1C  1903               	skipnz
  5149  0E1D  025D               	subwf	(_Temp^(0+128)+1),w
  5150  0E1E  1C03               	skipc
  5151  0E1F  0008               	return
  5152                           
  5153                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5154  0E20  01DD               	clrf	(_Temp^(0+128)+1)
  5155  0E21  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5156                           
  5157                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5158  0E22  3008               	movlw	8
  5159  0E23  3EDC               	addlw	_Temp& (0+255)
  5160  0E24  0086               	movwf	6
  5161  0E25  0187               	clrf	7
  5162  0E26  0016               	moviw fsr1++
  5163  0E27  0401               	iorwf	1,w
  5164  0E28  1903               	skipnz
  5165  0E29  2E85               	goto	l1773
  5166                           
  5167                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5168  0E2A  115C               	bcf	_Temp^(0+128),2
  5169                           
  5170                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5171  0E2B  0865               	movf	((_Temp+1)^(0+128)+8),w
  5172  0E2C  0020               	movlb	0	; select bank0
  5173  0E2D  01ED               	clrf	setTemp_Main@AD+1
  5174  0E2E  07ED               	addwf	setTemp_Main@AD+1,f
  5175  0E2F  0021               	movlb	1	; select bank1
  5176  0E30  0864               	movf	(_Temp^(0+128)+8),w
  5177  0E31  0020               	movlb	0	; select bank0
  5178  0E32  01EC               	clrf	setTemp_Main@AD
  5179  0E33  07EC               	addwf	setTemp_Main@AD,f
  5180                           
  5181                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5182  0E34  3090               	movlw	144
  5183  0E35  00E7               	movwf	setTemp_Main@SafeValue
  5184  0E36  3001               	movlw	1
  5185  0E37  00E8               	movwf	setTemp_Main@SafeValue+1
  5186                           
  5187                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5188  0E38  3059               	movlw	89
  5189  0E39  00E9               	movwf	setTemp_Main@DangerValue
  5190  0E3A  3001               	movlw	1
  5191  0E3B  00EA               	movwf	setTemp_Main@DangerValue+1
  5192                           
  5193                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5194  0E3C  0021               	movlb	1	; select bank1
  5195  0E3D  1CDC               	btfss	_Temp^(0+128),1
  5196  0E3E  2E5D               	goto	l7300
  5197                           
  5198                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5199  0E3F  0020               	movlb	0	; select bank0
  5200  0E40  0868               	movf	setTemp_Main@SafeValue+1,w
  5201  0E41  026D               	subwf	setTemp_Main@AD+1,w
  5202  0E42  1D03               	skipz
  5203  0E43  2E46               	goto	u6965
  5204  0E44  0867               	movf	setTemp_Main@SafeValue,w
  5205  0E45  026C               	subwf	setTemp_Main@AD,w
  5206  0E46                     u6965:	
  5207  0E46  1C03               	skipc
  5208  0E47  2E72               	goto	l7310
  5209                           
  5210                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5211  0E48  3001               	movlw	1
  5212  0E49  00E5               	movwf	??_setTemp_Main
  5213  0E4A  0865               	movf	??_setTemp_Main,w
  5214  0E4B  0021               	movlb	1	; select bank1
  5215  0E4C  07DF               	addwf	(_Temp^(0+128)+3),f
  5216                           
  5217                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5218  0E4D  3003               	movlw	3
  5219  0E4E  025F               	subwf	(_Temp^(0+128)+3),w
  5220  0E4F  1C03               	skipc
  5221  0E50  2E74               	goto	l7312
  5222                           
  5223                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5224  0E51  01DF               	clrf	(_Temp^(0+128)+3)
  5225                           
  5226                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5227  0E52  10DC               	bcf	_Temp^(0+128),1
  5228                           
  5229                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5230  0E53  3064               	movlw	100
  5231  0E54  0020               	movlb	0	; select bank0
  5232  0E55  00A9               	movwf	setBuz@time
  5233  0E56  3000               	movlw	0
  5234  0E57  00AA               	movwf	setBuz@time+1
  5235  0E58  3002               	movlw	2
  5236  0E59  3195  25BC  318D   	fcall	_setBuz
  5237                           
  5238                           ;OverTemperature_B1.c: 126: }
  5239                           ;OverTemperature_B1.c: 127: } else {
  5240  0E5C  2E74               	goto	l7312
  5241  0E5D                     l7300:	
  5242                           ;OverTemperature_B1.c: 129: }
  5243                           ;OverTemperature_B1.c: 130: } else {
  5244                           
  5245                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5246                           
  5247                           
  5248                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5249  0E5D  0020               	movlb	0	; select bank0
  5250  0E5E  086D               	movf	setTemp_Main@AD+1,w
  5251  0E5F  026A               	subwf	setTemp_Main@DangerValue+1,w
  5252  0E60  1D03               	skipz
  5253  0E61  2E64               	goto	u6985
  5254  0E62  086C               	movf	setTemp_Main@AD,w
  5255  0E63  0269               	subwf	setTemp_Main@DangerValue,w
  5256  0E64                     u6985:	
  5257  0E64  1C03               	skipc
  5258  0E65  2E72               	goto	l7310
  5259                           
  5260                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5261  0E66  3001               	movlw	1
  5262  0E67  00E5               	movwf	??_setTemp_Main
  5263  0E68  0865               	movf	??_setTemp_Main,w
  5264  0E69  0021               	movlb	1	; select bank1
  5265  0E6A  07DF               	addwf	(_Temp^(0+128)+3),f
  5266                           
  5267                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5268  0E6B  3003               	movlw	3
  5269  0E6C  025F               	subwf	(_Temp^(0+128)+3),w
  5270  0E6D  1C03               	skipc
  5271  0E6E  2E74               	goto	l7312
  5272                           
  5273                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5274  0E6F  01DF               	clrf	(_Temp^(0+128)+3)
  5275                           
  5276                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5277  0E70  14DC               	bsf	_Temp^(0+128),1
  5278                           
  5279                           ;OverTemperature_B1.c: 136: }
  5280                           ;OverTemperature_B1.c: 137: } else {
  5281  0E71  2E74               	goto	l7312
  5282  0E72                     l7310:	
  5283                           
  5284                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5285  0E72  0021               	movlb	1	; select bank1
  5286  0E73  01DF               	clrf	(_Temp^(0+128)+3)
  5287  0E74                     l7312:	
  5288                           
  5289                           ;OverTemperature_B1.c: 139: }
  5290                           ;OverTemperature_B1.c: 140: }
  5291                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5292  0E74  0020               	movlb	0	; select bank0
  5293  0E75  086D               	movf	setTemp_Main@AD+1,w
  5294  0E76  00E5               	movwf	??_setTemp_Main
  5295  0E77  0865               	movf	??_setTemp_Main,w
  5296  0E78  00E2               	movwf	setProductData@value
  5297  0E79  3018               	movlw	24
  5298  0E7A  319B  23F2  318D   	fcall	_setProductData
  5299                           
  5300                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5301  0E7D  0020               	movlb	0	; select bank0
  5302  0E7E  086C               	movf	setTemp_Main@AD,w
  5303  0E7F  00E5               	movwf	??_setTemp_Main
  5304  0E80  0865               	movf	??_setTemp_Main,w
  5305  0E81  00E2               	movwf	setProductData@value
  5306  0E82  3019               	movlw	25
  5307  0E83  319B  23F2         	fcall	_setProductData
  5308  0E85                     l1773:	
  5309                           
  5310                           ;OverTemperature_B1.c: 158: }
  5311                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5312  0E85  0021               	movlb	1	; select bank1
  5313  0E86  01E0               	clrf	(_Temp^(0+128)+4)
  5314  0E87  01E1               	clrf	((_Temp+1)^(0+128)+4)
  5315                           
  5316                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5317  0E88  01E2               	clrf	(_Temp^(0+128)+6)
  5318  0E89  01E3               	clrf	((_Temp+1)^(0+128)+6)
  5319                           
  5320                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5321  0E8A  01E4               	clrf	(_Temp^(0+128)+8)
  5322  0E8B  01E5               	clrf	((_Temp+1)^(0+128)+8)
  5323                           
  5324                           ;OverTemperature_B1.c: 162: }
  5325                           ;OverTemperature_B1.c: 163: }
  5326                           ;OverTemperature_B1.c: 166: } else {
  5327  0E8C  0008               	return
  5328  0E8D                     l1762:	
  5329                           
  5330                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5331  0E8D  1C2E               	btfss	_myMain^(0+128),0
  5332  0E8E  0008               	return
  5333                           
  5334                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5335  0E8F  145C               	bsf	_Temp^(0+128),0
  5336  0E90  0008               	return
  5337  0E91                     __end_of_setTemp_Main:	
  5338                           
  5339                           	psect	text10
  5340  1B23                     __ptext10:	
  5341 ;; *************** function _Temp_Initialization *****************
  5342 ;; Defined at:
  5343 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;		None
  5346 ;; Auto vars:     Size  Location     Type
  5347 ;;		None
  5348 ;; Return value:  Size  Location     Type
  5349 ;;		None               void
  5350 ;; Registers used:
  5351 ;;		status,2, status,0, pclath, cstack
  5352 ;; Tracked objects:
  5353 ;;		On entry : 0/0
  5354 ;;		On exit  : 0/0
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;Total ram usage:        0 bytes
  5362 ;; Hardware stack levels used:    1
  5363 ;; Hardware stack levels required when called:    5
  5364 ;; This function calls:
  5365 ;;		_setTemp_Initialization
  5366 ;; This function is called by:
  5367 ;;		_main
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371                           
  5372                           ;psect for function _Temp_Initialization
  5373  1B23                     _Temp_Initialization:	
  5374                           
  5375                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5376                           
  5377                           ;incstack = 0
  5378                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5379  1B23  3188  2000         	fcall	_setTemp_Initialization
  5380  1B25  0008               	return
  5381  1B26                     __end_of_Temp_Initialization:	
  5382                           
  5383                           	psect	text11
  5384  0800                     __ptext11:	
  5385 ;; *************** function _setTemp_Initialization *****************
  5386 ;; Defined at:
  5387 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5388 ;; Parameters:    Size  Location     Type
  5389 ;;		None
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;		None
  5392 ;; Return value:  Size  Location     Type
  5393 ;;		None               void
  5394 ;; Registers used:
  5395 ;;		None
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;Total ram usage:        0 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; Hardware stack levels required when called:    4
  5408 ;; This function calls:
  5409 ;;		Nothing
  5410 ;; This function is called by:
  5411 ;;		_Temp_Initialization
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           
  5416                           ;psect for function _setTemp_Initialization
  5417  0800                     _setTemp_Initialization:	
  5418                           
  5419                           ;incstack = 0
  5420                           ; Regs used in _setTemp_Initialization: []
  5421  0800  0008               	return
  5422  0801                     __end_of_setTemp_Initialization:	
  5423                           
  5424                           	psect	text12
  5425  1B76                     __ptext12:	
  5426 ;; *************** function _Switch_Main *****************
  5427 ;; Defined at:
  5428 ;;		line 76 in file "../src/Switch_B1.c"
  5429 ;; Parameters:    Size  Location     Type
  5430 ;;		None
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;		None
  5433 ;; Return value:  Size  Location     Type
  5434 ;;		None               void
  5435 ;; Registers used:
  5436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;Total ram usage:        0 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; Hardware stack levels required when called:    8
  5449 ;; This function calls:
  5450 ;;		_TouchPower
  5451 ;;		_setSw_Main
  5452 ;; This function is called by:
  5453 ;;		_main
  5454 ;; This function uses a non-reentrant model
  5455 ;;
  5456                           
  5457                           
  5458                           ;psect for function _Switch_Main
  5459  1B76                     _Switch_Main:	
  5460                           
  5461                           ;Switch_B1.c: 79: setSw_Main(1);
  5462                           
  5463                           ;incstack = 0
  5464                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5465  1B76  3001               	movlw	1
  5466  1B77  3181  21FE  319B   	fcall	_setSw_Main
  5467                           
  5468                           ;Switch_B1.c: 91: TouchPower();
  5469  1B7A  319E  260A         	fcall	_TouchPower
  5470  1B7C  0008               	return
  5471  1B7D                     __end_of_Switch_Main:	
  5472                           
  5473                           	psect	text13
  5474  01FE                     __ptext13:	
  5475 ;; *************** function _setSw_Main *****************
  5476 ;; Defined at:
  5477 ;;		line 117 in file "../src/Switch_B1.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  sw              1    wreg     unsigned char 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  sw              1   17[BANK0 ] unsigned char 
  5482 ;; Return value:  Size  Location     Type
  5483 ;;		None               void
  5484 ;; Registers used:
  5485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;Total ram usage:        3 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    7
  5498 ;; This function calls:
  5499 ;;		_SwPointSelect
  5500 ;;		_getMain_All_Error_Status
  5501 ;;		_getSw_KeyStatus
  5502 ;;		_setBuz
  5503 ;;		_setDimmerLights_DimmingOn
  5504 ;;		_setDimmerLights_SwOff
  5505 ;;		_setDimmerLights_SwOn
  5506 ;;		_setRF_Learn
  5507 ;; This function is called by:
  5508 ;;		_Switch_Main
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           
  5513                           ;psect for function _setSw_Main
  5514  01FE                     _setSw_Main:	
  5515                           
  5516                           ;incstack = 0
  5517                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5518                           ;setSw_Main@sw stored from wreg
  5519  01FE  0020               	movlb	0	; select bank0
  5520  01FF  00B1               	movwf	setSw_Main@sw
  5521                           
  5522                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5523  0200  0831               	movf	setSw_Main@sw,w
  5524  0201  319C  245E  3181   	fcall	_SwPointSelect
  5525                           
  5526                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5527  0204  0021               	movlb	1	; select bank1
  5528  0205  0856               	movf	_Sw^(0+128),w
  5529  0206  0086               	movwf	6
  5530  0207  3001               	movlw	1	; select bank2/3
  5531  0208  0087               	movwf	7
  5532  0209  1C01               	btfss	1,0
  5533  020A  2B7A               	goto	l2472
  5534                           
  5535                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5536  020B  3000               	movlw	0
  5537  020C  3191  2177  3181   	fcall	_getMain_All_Error_Status
  5538  020F  3800               	iorlw	0
  5539  0210  1D03               	skipz
  5540  0211  2A30               	goto	l7424
  5541                           
  5542                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5543  0212  0021               	movlb	1	; select bank1
  5544  0213  0A56               	incf	_Sw^(0+128),w
  5545  0214  0086               	movwf	6
  5546  0215  3001               	movlw	1	; select bank2/3
  5547  0216  0087               	movwf	7
  5548  0217  1081               	bcf	1,1
  5549                           
  5550                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5551  0218  0020               	movlb	0	; select bank0
  5552  0219  0831               	movf	setSw_Main@sw,w
  5553  021A  319C  24ED  3181   	fcall	_getSw_KeyStatus
  5554  021D  3A01               	xorlw	1
  5555  021E  3000               	movlw	0
  5556  021F  1903               	skipnz
  5557  0220  3001               	movlw	1
  5558  0221  0020               	movlb	0	; select bank0
  5559  0222  00AF               	movwf	??_setSw_Main
  5560  0223  0021               	movlb	1	; select bank1
  5561  0224  0856               	movf	_Sw^(0+128),w
  5562  0225  0086               	movwf	6
  5563  0226  3001               	movlw	1	; select bank2/3
  5564  0227  0087               	movwf	7
  5565  0228  0020               	movlb	0	; select bank0
  5566  0229  0DAF               	rlf	??_setSw_Main,f
  5567  022A  0801               	movf	1,w
  5568  022B  062F               	xorwf	??_setSw_Main,w
  5569  022C  39FD               	andlw	-3
  5570  022D  062F               	xorwf	??_setSw_Main,w
  5571  022E  0081               	movwf	1
  5572                           
  5573                           ;Switch_B1.c: 124: } else {
  5574  022F  2A46               	goto	l2474
  5575  0230                     l7424:	
  5576                           
  5577                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5578  0230  0021               	movlb	1	; select bank1
  5579  0231  0A56               	incf	_Sw^(0+128),w
  5580  0232  0086               	movwf	6
  5581  0233  3001               	movlw	1	; select bank2/3
  5582  0234  0087               	movwf	7
  5583  0235  1881               	btfsc	1,1
  5584  0236  2A46               	goto	l2474
  5585                           
  5586                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5587  0237  0A56               	incf	_Sw^(0+128),w
  5588  0238  0086               	movwf	6
  5589  0239  3001               	movlw	1	; select bank2/3
  5590  023A  0087               	movwf	7
  5591  023B  1481               	bsf	1,1
  5592                           
  5593                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5594  023C  0856               	movf	_Sw^(0+128),w
  5595  023D  0086               	movwf	6
  5596  023E  3001               	movlw	1	; select bank2/3
  5597  023F  0087               	movwf	7
  5598  0240  1081               	bcf	1,1
  5599                           
  5600                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5601  0241  0856               	movf	_Sw^(0+128),w
  5602  0242  0086               	movwf	6
  5603  0243  3001               	movlw	1	; select bank2/3
  5604  0244  0087               	movwf	7
  5605  0245  1501               	bsf	1,2
  5606  0246                     l2474:	
  5607                           
  5608                           ;Switch_B1.c: 130: }
  5609                           ;Switch_B1.c: 131: }
  5610                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5611  0246  0021               	movlb	1	; select bank1
  5612  0247  0856               	movf	_Sw^(0+128),w
  5613  0248  0086               	movwf	6
  5614  0249  3001               	movlw	1	; select bank2/3
  5615  024A  0087               	movwf	7
  5616  024B  1C81               	btfss	1,1
  5617  024C  2B22               	goto	l7474
  5618                           
  5619                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5620  024D  0856               	movf	_Sw^(0+128),w
  5621  024E  0086               	movwf	6
  5622  024F  3001               	movlw	1	; select bank2/3
  5623  0250  0087               	movwf	7
  5624  0251  1901               	btfsc	1,2
  5625  0252  2A79               	goto	l7440
  5626                           
  5627                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5628  0253  3001               	movlw	1
  5629  0254  0020               	movlb	0	; select bank0
  5630  0255  00AF               	movwf	??_setSw_Main
  5631  0256  0021               	movlb	1	; select bank1
  5632  0257  0856               	movf	_Sw^(0+128),w
  5633  0258  3E02               	addlw	2
  5634  0259  0086               	movwf	6
  5635  025A  3001               	movlw	1	; select bank2/3
  5636  025B  0087               	movwf	7
  5637  025C  0020               	movlb	0	; select bank0
  5638  025D  082F               	movf	??_setSw_Main,w
  5639  025E  0781               	addwf	1,f
  5640                           
  5641                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5642  025F  0021               	movlb	1	; select bank1
  5643  0260  0856               	movf	_Sw^(0+128),w
  5644  0261  3E02               	addlw	2
  5645  0262  0086               	movwf	6
  5646  0263  3001               	movlw	1	; select bank2/3
  5647  0264  0087               	movwf	7
  5648  0265  3003               	movlw	3
  5649  0266  0201               	subwf	1,w
  5650  0267  1C03               	skipc
  5651  0268  0008               	return
  5652                           
  5653                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5654  0269  0856               	movf	_Sw^(0+128),w
  5655  026A  3E02               	addlw	2
  5656  026B  0086               	movwf	6
  5657  026C  3001               	movlw	1	; select bank2/3
  5658  026D  0087               	movwf	7
  5659  026E  0181               	clrf	1
  5660                           
  5661                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5662  026F  0856               	movf	_Sw^(0+128),w
  5663  0270  0086               	movwf	6
  5664  0271  3001               	movlw	1	; select bank2/3
  5665  0272  0087               	movwf	7
  5666  0273  1501               	bsf	1,2
  5667                           
  5668                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5669  0274  0020               	movlb	0	; select bank0
  5670  0275  0831               	movf	setSw_Main@sw,w
  5671  0276  3191  21DE         	fcall	_setDimmerLights_SwOn
  5672                           
  5673                           ;Switch_B1.c: 146: }
  5674                           ;Switch_B1.c: 147: } else {
  5675  0278  0008               	return
  5676  0279                     l7440:	
  5677                           
  5678                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5679  0279  0021               	movlb	1	; select bank1
  5680  027A  0856               	movf	_Sw^(0+128),w
  5681  027B  0086               	movwf	6
  5682  027C  3001               	movlw	1	; select bank2/3
  5683  027D  0087               	movwf	7
  5684  027E  1981               	btfsc	1,3
  5685  027F  2AAE               	goto	l7450
  5686                           
  5687                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5688  0280  0856               	movf	_Sw^(0+128),w
  5689  0281  3E03               	addlw	3
  5690  0282  0086               	movwf	6
  5691  0283  3001               	movlw	1	; select bank2/3
  5692  0284  0087               	movwf	7
  5693  0285  3001               	movlw	1
  5694  0286  0781               	addwf	1,f
  5695  0287  3141               	addfsr 1,1
  5696  0288  1803               	skipnc
  5697  0289  0A81               	incf	1,f
  5698                           
  5699                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5700  028A  0856               	movf	_Sw^(0+128),w
  5701  028B  3E03               	addlw	3
  5702  028C  0086               	movwf	6
  5703  028D  3001               	movlw	1	; select bank2/3
  5704  028E  0087               	movwf	7
  5705  028F  3F40               	moviw [0]fsr1
  5706  0290  0020               	movlb	0	; select bank0
  5707  0291  00AF               	movwf	??_setSw_Main
  5708  0292  3F41               	moviw [1]fsr1
  5709  0293  00B0               	movwf	??_setSw_Main+1
  5710  0294  3000               	movlw	0
  5711  0295  0230               	subwf	??_setSw_Main+1,w
  5712  0296  304B               	movlw	75
  5713  0297  1903               	skipnz
  5714  0298  022F               	subwf	??_setSw_Main,w
  5715  0299  1C03               	skipc
  5716  029A  0008               	return
  5717                           
  5718                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5719  029B  0021               	movlb	1	; select bank1
  5720  029C  0856               	movf	_Sw^(0+128),w
  5721  029D  3E03               	addlw	3
  5722  029E  0086               	movwf	6
  5723  029F  3001               	movlw	1	; select bank2/3
  5724  02A0  0087               	movwf	7
  5725  02A1  3000               	movlw	0
  5726  02A2  3FC0               	movwi [0]fsr1
  5727  02A3  3FC1               	movwi [1]fsr1
  5728                           
  5729                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5730  02A4  0856               	movf	_Sw^(0+128),w
  5731  02A5  0086               	movwf	6
  5732  02A6  3001               	movlw	1	; select bank2/3
  5733  02A7  0087               	movwf	7
  5734  02A8  1581               	bsf	1,3
  5735                           
  5736                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5737  02A9  0020               	movlb	0	; select bank0
  5738  02AA  0831               	movf	setSw_Main@sw,w
  5739  02AB  3187  27D8         	fcall	_setDimmerLights_DimmingOn
  5740                           
  5741                           ;Switch_B1.c: 161: }
  5742                           ;Switch_B1.c: 162: } else {
  5743  02AD  0008               	return
  5744  02AE                     l7450:	
  5745                           
  5746                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5747  02AE  0021               	movlb	1	; select bank1
  5748  02AF  0856               	movf	_Sw^(0+128),w
  5749  02B0  0086               	movwf	6
  5750  02B1  3001               	movlw	1	; select bank2/3
  5751  02B2  0087               	movwf	7
  5752  02B3  1A01               	btfsc	1,4
  5753  02B4  2AEE               	goto	l7464
  5754                           
  5755                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5756  02B5  0856               	movf	_Sw^(0+128),w
  5757  02B6  3E05               	addlw	5
  5758  02B7  0086               	movwf	6
  5759  02B8  3001               	movlw	1	; select bank2/3
  5760  02B9  0087               	movwf	7
  5761  02BA  3001               	movlw	1
  5762  02BB  0781               	addwf	1,f
  5763  02BC  3141               	addfsr 1,1
  5764  02BD  1803               	skipnc
  5765  02BE  0A81               	incf	1,f
  5766                           
  5767                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5768  02BF  0856               	movf	_Sw^(0+128),w
  5769  02C0  3E05               	addlw	5
  5770  02C1  0086               	movwf	6
  5771  02C2  3001               	movlw	1	; select bank2/3
  5772  02C3  0087               	movwf	7
  5773  02C4  3F40               	moviw [0]fsr1
  5774  02C5  0020               	movlb	0	; select bank0
  5775  02C6  00AF               	movwf	??_setSw_Main
  5776  02C7  3F41               	moviw [1]fsr1
  5777  02C8  00B0               	movwf	??_setSw_Main+1
  5778  02C9  3000               	movlw	0
  5779  02CA  0230               	subwf	??_setSw_Main+1,w
  5780  02CB  304B               	movlw	75
  5781  02CC  1903               	skipnz
  5782  02CD  022F               	subwf	??_setSw_Main,w
  5783  02CE  1C03               	skipc
  5784  02CF  0008               	return
  5785                           
  5786                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5787  02D0  0021               	movlb	1	; select bank1
  5788  02D1  0856               	movf	_Sw^(0+128),w
  5789  02D2  3E05               	addlw	5
  5790  02D3  0086               	movwf	6
  5791  02D4  3001               	movlw	1	; select bank2/3
  5792  02D5  0087               	movwf	7
  5793  02D6  3000               	movlw	0
  5794  02D7  3FC0               	movwi [0]fsr1
  5795  02D8  3FC1               	movwi [1]fsr1
  5796                           
  5797                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5798  02D9  0856               	movf	_Sw^(0+128),w
  5799  02DA  0086               	movwf	6
  5800  02DB  3001               	movlw	1	; select bank2/3
  5801  02DC  0087               	movwf	7
  5802  02DD  1601               	bsf	1,4
  5803                           
  5804                           ;Switch_B1.c: 171: setRF_Learn(1);
  5805  02DE  3001               	movlw	1
  5806  02DF  319D  25B7  3181   	fcall	_setRF_Learn
  5807                           
  5808                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5809  02E2  0021               	movlb	1	; select bank1
  5810  02E3  1EAE               	btfss	_myMain^(0+128),5
  5811  02E4  0008               	return
  5812                           
  5813                           ;Switch_B1.c: 173: setBuz(2, 100);
  5814  02E5  3064               	movlw	100
  5815  02E6  0020               	movlb	0	; select bank0
  5816  02E7  00A9               	movwf	setBuz@time
  5817  02E8  3000               	movlw	0
  5818  02E9  00AA               	movwf	setBuz@time+1
  5819  02EA  3002               	movlw	2
  5820  02EB  3195  25BC         	fcall	_setBuz
  5821                           
  5822                           ;Switch_B1.c: 174: }
  5823                           ;Switch_B1.c: 178: }
  5824                           ;Switch_B1.c: 179: } else {
  5825  02ED  0008               	return
  5826  02EE                     l7464:	
  5827                           
  5828                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5829  02EE  0021               	movlb	1	; select bank1
  5830  02EF  0856               	movf	_Sw^(0+128),w
  5831  02F0  0086               	movwf	6
  5832  02F1  3001               	movlw	1	; select bank2/3
  5833  02F2  0087               	movwf	7
  5834  02F3  1A81               	btfsc	1,5
  5835  02F4  0008               	return
  5836                           
  5837                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5838  02F5  0856               	movf	_Sw^(0+128),w
  5839  02F6  3E07               	addlw	7
  5840  02F7  0086               	movwf	6
  5841  02F8  3001               	movlw	1	; select bank2/3
  5842  02F9  0087               	movwf	7
  5843  02FA  3001               	movlw	1
  5844  02FB  0781               	addwf	1,f
  5845  02FC  3141               	addfsr 1,1
  5846  02FD  1803               	skipnc
  5847  02FE  0A81               	incf	1,f
  5848                           
  5849                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5850  02FF  0856               	movf	_Sw^(0+128),w
  5851  0300  3E07               	addlw	7
  5852  0301  0086               	movwf	6
  5853  0302  3001               	movlw	1	; select bank2/3
  5854  0303  0087               	movwf	7
  5855  0304  3F40               	moviw [0]fsr1
  5856  0305  0020               	movlb	0	; select bank0
  5857  0306  00AF               	movwf	??_setSw_Main
  5858  0307  3F41               	moviw [1]fsr1
  5859  0308  00B0               	movwf	??_setSw_Main+1
  5860  0309  3000               	movlw	0
  5861  030A  0230               	subwf	??_setSw_Main+1,w
  5862  030B  3096               	movlw	150
  5863  030C  1903               	skipnz
  5864  030D  022F               	subwf	??_setSw_Main,w
  5865  030E  1C03               	skipc
  5866  030F  0008               	return
  5867                           
  5868                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5869  0310  0021               	movlb	1	; select bank1
  5870  0311  0856               	movf	_Sw^(0+128),w
  5871  0312  3E07               	addlw	7
  5872  0313  0086               	movwf	6
  5873  0314  3001               	movlw	1	; select bank2/3
  5874  0315  0087               	movwf	7
  5875  0316  3000               	movlw	0
  5876  0317  3FC0               	movwi [0]fsr1
  5877  0318  3FC1               	movwi [1]fsr1
  5878                           
  5879                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5880  0319  0856               	movf	_Sw^(0+128),w
  5881  031A  0086               	movwf	6
  5882  031B  3001               	movlw	1	; select bank2/3
  5883  031C  0087               	movwf	7
  5884  031D  1681               	bsf	1,5
  5885                           
  5886                           ;Switch_B1.c: 187: setRF_Learn(0);
  5887  031E  3000               	movlw	0
  5888  031F  319D  25B7         	fcall	_setRF_Learn
  5889                           
  5890                           ;Switch_B1.c: 190: }
  5891                           ;Switch_B1.c: 191: }
  5892                           ;Switch_B1.c: 192: }
  5893                           ;Switch_B1.c: 194: }
  5894                           ;Switch_B1.c: 195: }
  5895                           ;Switch_B1.c: 196: } else {
  5896  0321  0008               	return
  5897  0322                     l7474:	
  5898                           
  5899                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5900  0322  0021               	movlb	1	; select bank1
  5901  0323  0856               	movf	_Sw^(0+128),w
  5902  0324  0086               	movwf	6
  5903  0325  3001               	movlw	1	; select bank2/3
  5904  0326  0087               	movwf	7
  5905  0327  1D01               	btfss	1,2
  5906  0328  0008               	return
  5907                           
  5908                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5909  0329  3001               	movlw	1
  5910  032A  0020               	movlb	0	; select bank0
  5911  032B  00AF               	movwf	??_setSw_Main
  5912  032C  0021               	movlb	1	; select bank1
  5913  032D  0856               	movf	_Sw^(0+128),w
  5914  032E  3E02               	addlw	2
  5915  032F  0086               	movwf	6
  5916  0330  3001               	movlw	1	; select bank2/3
  5917  0331  0087               	movwf	7
  5918  0332  0020               	movlb	0	; select bank0
  5919  0333  082F               	movf	??_setSw_Main,w
  5920  0334  0781               	addwf	1,f
  5921                           
  5922                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5923  0335  0021               	movlb	1	; select bank1
  5924  0336  0856               	movf	_Sw^(0+128),w
  5925  0337  3E02               	addlw	2
  5926  0338  0086               	movwf	6
  5927  0339  3001               	movlw	1	; select bank2/3
  5928  033A  0087               	movwf	7
  5929  033B  3003               	movlw	3
  5930  033C  0201               	subwf	1,w
  5931  033D  1C03               	skipc
  5932  033E  0008               	return
  5933                           
  5934                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5935  033F  0856               	movf	_Sw^(0+128),w
  5936  0340  3E02               	addlw	2
  5937  0341  0086               	movwf	6
  5938  0342  3001               	movlw	1	; select bank2/3
  5939  0343  0087               	movwf	7
  5940  0344  0181               	clrf	1
  5941                           
  5942                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5943  0345  0856               	movf	_Sw^(0+128),w
  5944  0346  0086               	movwf	6
  5945  0347  3001               	movlw	1	; select bank2/3
  5946  0348  0087               	movwf	7
  5947  0349  1101               	bcf	1,2
  5948                           
  5949                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5950  034A  0856               	movf	_Sw^(0+128),w
  5951  034B  3E03               	addlw	3
  5952  034C  0086               	movwf	6
  5953  034D  3001               	movlw	1	; select bank2/3
  5954  034E  0087               	movwf	7
  5955  034F  3000               	movlw	0
  5956  0350  3FC0               	movwi [0]fsr1
  5957  0351  3FC1               	movwi [1]fsr1
  5958                           
  5959                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  5960  0352  0856               	movf	_Sw^(0+128),w
  5961  0353  0086               	movwf	6
  5962  0354  3001               	movlw	1	; select bank2/3
  5963  0355  0087               	movwf	7
  5964  0356  1181               	bcf	1,3
  5965                           
  5966                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  5967  0357  0856               	movf	_Sw^(0+128),w
  5968  0358  0086               	movwf	6
  5969  0359  3001               	movlw	1	; select bank2/3
  5970  035A  0087               	movwf	7
  5971  035B  1201               	bcf	1,4
  5972                           
  5973                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  5974  035C  0856               	movf	_Sw^(0+128),w
  5975  035D  0086               	movwf	6
  5976  035E  3001               	movlw	1	; select bank2/3
  5977  035F  0087               	movwf	7
  5978  0360  1281               	bcf	1,5
  5979                           
  5980                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  5981  0361  0856               	movf	_Sw^(0+128),w
  5982  0362  3E05               	addlw	5
  5983  0363  0086               	movwf	6
  5984  0364  3001               	movlw	1	; select bank2/3
  5985  0365  0087               	movwf	7
  5986  0366  3000               	movlw	0
  5987  0367  3FC0               	movwi [0]fsr1
  5988  0368  3FC1               	movwi [1]fsr1
  5989                           
  5990                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  5991  0369  0856               	movf	_Sw^(0+128),w
  5992  036A  3E07               	addlw	7
  5993  036B  0086               	movwf	6
  5994  036C  3001               	movlw	1	; select bank2/3
  5995  036D  0087               	movwf	7
  5996  036E  3000               	movlw	0
  5997  036F  3FC0               	movwi [0]fsr1
  5998  0370  3FC1               	movwi [1]fsr1
  5999                           
  6000                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6001  0371  0020               	movlb	0	; select bank0
  6002  0372  0831               	movf	setSw_Main@sw,w
  6003  0373  3192  22B6  3181   	fcall	_setDimmerLights_SwOff
  6004                           
  6005                           ;Switch_B1.c: 219: setRF_Learn(0);
  6006  0376  3000               	movlw	0
  6007  0377  319D  25B7         	fcall	_setRF_Learn
  6008                           
  6009                           ;Switch_B1.c: 221: }
  6010                           ;Switch_B1.c: 222: }
  6011                           ;Switch_B1.c: 223: }
  6012                           ;Switch_B1.c: 224: } else {
  6013  0379  0008               	return
  6014  037A                     l2472:	
  6015                           
  6016                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6017  037A  1C2E               	btfss	_myMain^(0+128),0
  6018  037B  0008               	return
  6019                           
  6020                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6021  037C  0856               	movf	_Sw^(0+128),w
  6022  037D  0086               	movwf	6
  6023  037E  3001               	movlw	1	; select bank2/3
  6024  037F  0087               	movwf	7
  6025  0380  1401               	bsf	1,0
  6026  0381  0008               	return
  6027  0382                     __end_of_setSw_Main:	
  6028                           
  6029                           	psect	text14
  6030  1DB7                     __ptext14:	
  6031 ;; *************** function _setRF_Learn *****************
  6032 ;; Defined at:
  6033 ;;		line 33 in file "../src/RF_Control_B1.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;  command         1    wreg     unsigned char 
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  command         1    1[BANK0 ] unsigned char 
  6038 ;; Return value:  Size  Location     Type
  6039 ;;		None               void
  6040 ;; Registers used:
  6041 ;;		wreg, status,2, status,0
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;Total ram usage:        2 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:    4
  6054 ;; This function calls:
  6055 ;;		Nothing
  6056 ;; This function is called by:
  6057 ;;		_setSw_Main
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           
  6062                           ;psect for function _setRF_Learn
  6063  1DB7                     _setRF_Learn:	
  6064                           
  6065                           ;incstack = 0
  6066                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6067                           ;setRF_Learn@command stored from wreg
  6068  1DB7  0020               	movlb	0	; select bank0
  6069  1DB8  00A1               	movwf	setRF_Learn@command
  6070                           
  6071                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6072  1DB9  0821               	movf	setRF_Learn@command,w
  6073  1DBA  3A01               	xorlw	1
  6074  1DBB  3000               	movlw	0
  6075  1DBC  1903               	skipnz
  6076  1DBD  3001               	movlw	1
  6077  1DBE  00A0               	movwf	??_setRF_Learn
  6078  1DBF  0EA0               	swapf	??_setRF_Learn,f
  6079  1DC0  0DA0               	rlf	??_setRF_Learn,f
  6080  1DC1  0DA0               	rlf	??_setRF_Learn,f
  6081  1DC2  0021               	movlb	1	; select bank1
  6082  1DC3  0820               	movf	_RF1^(0+128),w
  6083  1DC4  0020               	movlb	0	; select bank0
  6084  1DC5  0620               	xorwf	??_setRF_Learn,w
  6085  1DC6  39BF               	andlw	-65
  6086  1DC7  0620               	xorwf	??_setRF_Learn,w
  6087  1DC8  0021               	movlb	1	; select bank1
  6088  1DC9  00A0               	movwf	_RF1^(0+128)
  6089  1DCA  0008               	return
  6090  1DCB                     __end_of_setRF_Learn:	
  6091                           
  6092                           	psect	text15
  6093  07D8                     __ptext15:	
  6094 ;; *************** function _setDimmerLights_DimmingOn *****************
  6095 ;; Defined at:
  6096 ;;		line 715 in file "../src/Dimmer_B1.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;  sw              1    wreg     unsigned char 
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;  sw              1    2[BANK0 ] unsigned char 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;		None               void
  6103 ;; Registers used:
  6104 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6114 ;;Total ram usage:        1 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    5
  6117 ;; This function calls:
  6118 ;;		_DimmerLights_SelectPointer
  6119 ;; This function is called by:
  6120 ;;		_setSw_Main
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           
  6125                           ;psect for function _setDimmerLights_DimmingOn
  6126  07D8                     _setDimmerLights_DimmingOn:	
  6127                           
  6128                           ;incstack = 0
  6129                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6130                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6131  07D8  0020               	movlb	0	; select bank0
  6132  07D9  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6133                           
  6134                           ;Dimmer_B1.c: 721: DimmerLights_SelectPointer(sw);
  6135  07DA  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6136  07DB  319B  23E6  3187   	fcall	_DimmerLights_SelectPointer
  6137                           
  6138                           ;Dimmer_B1.c: 722: if (DimmerLights->Trigger == 0) {
  6139  07DE  0021               	movlb	1	; select bank1
  6140  07DF  0852               	movf	_DimmerLights^(0+128),w
  6141  07E0  0086               	movwf	6
  6142  07E1  3001               	movlw	1	; select bank2/3
  6143  07E2  0087               	movwf	7
  6144  07E3  1881               	btfsc	1,1
  6145  07E4  0008               	return
  6146                           
  6147                           ;Dimmer_B1.c: 723: if (DimmerLights->SwFlag == 1) {
  6148  07E5  0852               	movf	_DimmerLights^(0+128),w
  6149  07E6  0086               	movwf	6
  6150  07E7  3001               	movlw	1	; select bank2/3
  6151  07E8  0087               	movwf	7
  6152  07E9  1C01               	btfss	1,0
  6153  07EA  0008               	return
  6154                           
  6155                           ;Dimmer_B1.c: 724: DimmerLights->Status = 1;
  6156  07EB  0A52               	incf	_DimmerLights^(0+128),w
  6157  07EC  0086               	movwf	6
  6158  07ED  3001               	movlw	1	; select bank2/3
  6159  07EE  0087               	movwf	7
  6160  07EF  1401               	bsf	1,0
  6161                           
  6162                           ;Dimmer_B1.c: 726: DimmerLights->DimmingSwFlag = 1;
  6163  07F0  0852               	movf	_DimmerLights^(0+128),w
  6164  07F1  0086               	movwf	6
  6165  07F2  3001               	movlw	1	; select bank2/3
  6166  07F3  0087               	movwf	7
  6167  07F4  1581               	bsf	1,3
  6168                           
  6169                           ;Dimmer_B1.c: 727: DimmerLights->DimmingTrigger = 1;
  6170  07F5  0852               	movf	_DimmerLights^(0+128),w
  6171  07F6  0086               	movwf	6
  6172  07F7  3001               	movlw	1	; select bank2/3
  6173  07F8  0087               	movwf	7
  6174  07F9  1601               	bsf	1,4
  6175                           
  6176                           ;Dimmer_B1.c: 728: DimmerLights->DimmingSwitch = 1;
  6177  07FA  0852               	movf	_DimmerLights^(0+128),w
  6178  07FB  0086               	movwf	6
  6179  07FC  3001               	movlw	1	; select bank2/3
  6180  07FD  0087               	movwf	7
  6181  07FE  1681               	bsf	1,5
  6182  07FF  0008               	return
  6183  0800                     __end_of_setDimmerLights_DimmingOn:	
  6184                           
  6185                           	psect	text16
  6186  1CED                     __ptext16:	
  6187 ;; *************** function _getSw_KeyStatus *****************
  6188 ;; Defined at:
  6189 ;;		line 237 in file "../src/Switch_B1.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  sw              1    wreg     unsigned char 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;  sw              1    0[COMMON] unsigned char 
  6194 ;;  status          1    1[BANK0 ] unsigned char 
  6195 ;; Return value:  Size  Location     Type
  6196 ;;                  1    wreg      unsigned char 
  6197 ;; Registers used:
  6198 ;;		wreg, status,2
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;Total ram usage:        3 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    4
  6211 ;; This function calls:
  6212 ;;		Nothing
  6213 ;; This function is called by:
  6214 ;;		_setSw_Main
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           
  6219                           ;psect for function _getSw_KeyStatus
  6220  1CED                     _getSw_KeyStatus:	
  6221                           
  6222                           ;Switch_B1.c: 238: char status = 0;
  6223                           
  6224                           ;incstack = 0
  6225                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6226  1CED  0020               	movlb	0	; select bank0
  6227  1CEE  01A1               	clrf	getSw_KeyStatus@status
  6228                           
  6229                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6230  1CEF  01A2               	clrf	_getSw_KeyStatus$6074
  6231  1CF0  0AA2               	incf	_getSw_KeyStatus$6074,f
  6232  1CF1  1F0C               	btfss	12,6	;volatile
  6233  1CF2  1A0C               	btfsc	12,4	;volatile
  6234  1CF3  2CF8               	goto	l6882
  6235  1CF4  1C0C               	btfss	12,0	;volatile
  6236  1CF5  1B8C               	btfsc	12,7	;volatile
  6237  1CF6  2CF8               	goto	l6882
  6238  1CF7  01A2               	clrf	_getSw_KeyStatus$6074
  6239  1CF8                     l6882:	
  6240  1CF8  0822               	movf	_getSw_KeyStatus$6074,w
  6241  1CF9  00A0               	movwf	??_getSw_KeyStatus
  6242  1CFA  0820               	movf	??_getSw_KeyStatus,w
  6243  1CFB  00A1               	movwf	getSw_KeyStatus@status
  6244                           
  6245                           ;Switch_B1.c: 275: return status;
  6246  1CFC  0821               	movf	getSw_KeyStatus@status,w
  6247  1CFD  0008               	return
  6248  1CFE                     __end_of_getSw_KeyStatus:	
  6249                           
  6250                           	psect	text17
  6251  1C5E                     __ptext17:	
  6252 ;; *************** function _SwPointSelect *****************
  6253 ;; Defined at:
  6254 ;;		line 25 in file "../src/Switch_B1.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;  sw              1    wreg     unsigned char 
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;  sw              1    1[BANK0 ] unsigned char 
  6259 ;; Return value:  Size  Location     Type
  6260 ;;		None               void
  6261 ;; Registers used:
  6262 ;;		wreg
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;Total ram usage:        2 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    4
  6275 ;; This function calls:
  6276 ;;		Nothing
  6277 ;; This function is called by:
  6278 ;;		_setSw_Main
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           
  6283                           ;psect for function _SwPointSelect
  6284  1C5E                     _SwPointSelect:	
  6285                           
  6286                           ;incstack = 0
  6287                           ; Regs used in _SwPointSelect: [wreg]
  6288                           ;SwPointSelect@sw stored from wreg
  6289  1C5E  0020               	movlb	0	; select bank0
  6290  1C5F  00A1               	movwf	SwPointSelect@sw
  6291                           
  6292                           ;Switch_B1.c: 28: if (sw == 1) {
  6293  1C60  0821               	movf	SwPointSelect@sw,w
  6294  1C61  3A01               	xorlw	1
  6295  1C62  1D03               	skipz
  6296  1C63  0008               	return
  6297                           
  6298                           ;Switch_B1.c: 29: Sw = &Sw1;
  6299  1C64  30CA               	movlw	_Sw1& (0+255)
  6300  1C65  00A0               	movwf	??_SwPointSelect
  6301  1C66  0820               	movf	??_SwPointSelect,w
  6302  1C67  0021               	movlb	1	; select bank1
  6303  1C68  00D6               	movwf	_Sw^(0+128)
  6304  1C69  0008               	return
  6305  1C6A                     __end_of_SwPointSelect:	
  6306                           
  6307                           	psect	text18
  6308  1E0A                     __ptext18:	
  6309 ;; *************** function _TouchPower *****************
  6310 ;; Defined at:
  6311 ;;		line 10 in file "../src/Switch_B1.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;		None
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;		None
  6316 ;; Return value:  Size  Location     Type
  6317 ;;		None               void
  6318 ;; Registers used:
  6319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6320 ;; Tracked objects:
  6321 ;;		On entry : 0/0
  6322 ;;		On exit  : 0/0
  6323 ;;		Unchanged: 0/0
  6324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;Total ram usage:        0 bytes
  6330 ;; Hardware stack levels used:    1
  6331 ;; Hardware stack levels required when called:    5
  6332 ;; This function calls:
  6333 ;;		_Timeout_Counter
  6334 ;;		_set_TimeoutCleared
  6335 ;; This function is called by:
  6336 ;;		_Switch_Main
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           
  6341                           ;psect for function _TouchPower
  6342  1E0A                     _TouchPower:	
  6343                           
  6344                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6345                           
  6346                           ;incstack = 0
  6347                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6348  1E0A  0021               	movlb	1	; select bank1
  6349  1E0B  1C2E               	btfss	_myMain^(0+128),0
  6350  1E0C  0008               	return
  6351                           
  6352                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6353  1E0D  0020               	movlb	0	; select bank0
  6354  1E0E  180D               	btfsc	13,0	;volatile
  6355  1E0F  0008               	return
  6356  1E10  2E16               	goto	l7406
  6357  1E11                     l2452:	
  6358                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6359                           
  6360                           
  6361                           ;Switch_B1.c: 14: RB0 = 1;
  6362  1E11  0020               	movlb	0	; select bank0
  6363  1E12  140D               	bsf	13,0	;volatile
  6364                           
  6365                           ;Switch_B1.c: 15: Timeout_Counter();
  6366  1E13  319D  25F5  319E   	fcall	_Timeout_Counter
  6367  1E16                     l7406:	
  6368  1E16  0020               	movlb	0	; select bank0
  6369  1E17  180D               	btfsc	13,0	;volatile
  6370  1E18  2E1C               	goto	l7410
  6371  1E19  0021               	movlb	1	; select bank1
  6372  1E1A  1D38               	btfss	(_myMain^(0+128)+10),2
  6373  1E1B  2E11               	goto	l2452
  6374  1E1C                     l7410:	
  6375                           
  6376                           ;Switch_B1.c: 16: }
  6377                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6378  1E1C  319B  2351         	fcall	_set_TimeoutCleared
  6379  1E1E  0008               	return
  6380  1E1F                     __end_of_TouchPower:	
  6381                           
  6382                           	psect	text19
  6383  1B51                     __ptext19:	
  6384 ;; *************** function _set_TimeoutCleared *****************
  6385 ;; Defined at:
  6386 ;;		line 281 in file "../src/Main_B1.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;		None
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;		None
  6391 ;; Return value:  Size  Location     Type
  6392 ;;		None               void
  6393 ;; Registers used:
  6394 ;;		status,2
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;Total ram usage:        0 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:    4
  6407 ;; This function calls:
  6408 ;;		Nothing
  6409 ;; This function is called by:
  6410 ;;		_getAD
  6411 ;;		_TouchPower
  6412 ;; This function uses a non-reentrant model
  6413 ;;
  6414                           
  6415                           
  6416                           ;psect for function _set_TimeoutCleared
  6417  1B51                     _set_TimeoutCleared:	
  6418                           
  6419                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6420                           
  6421                           ;incstack = 0
  6422                           ; Regs used in _set_TimeoutCleared: [status,2]
  6423  1B51  0021               	movlb	1	; select bank1
  6424  1B52  1138               	bcf	(_myMain^(0+128)+10),2
  6425                           
  6426                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6427  1B53  01B9               	clrf	(_myMain^(0+128)+11)
  6428  1B54  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6429  1B55  0008               	return
  6430  1B56                     __end_of_set_TimeoutCleared:	
  6431                           
  6432                           	psect	text20
  6433  1DF5                     __ptext20:	
  6434 ;; *************** function _Timeout_Counter *****************
  6435 ;; Defined at:
  6436 ;;		line 272 in file "../src/Main_B1.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;		None
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;		None               void
  6443 ;; Registers used:
  6444 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;Total ram usage:        0 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    4
  6457 ;; This function calls:
  6458 ;;		Nothing
  6459 ;; This function is called by:
  6460 ;;		_getAD
  6461 ;;		_TouchPower
  6462 ;; This function uses a non-reentrant model
  6463 ;;
  6464                           
  6465                           
  6466                           ;psect for function _Timeout_Counter
  6467  1DF5                     _Timeout_Counter:	
  6468                           
  6469                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6470                           
  6471                           ;incstack = 0
  6472                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6473  1DF5  3001               	movlw	1
  6474  1DF6  0021               	movlb	1	; select bank1
  6475  1DF7  07B9               	addwf	(_myMain^(0+128)+11),f
  6476  1DF8  3000               	movlw	0
  6477  1DF9  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6478                           
  6479                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6480  1DFA  300B               	movlw	11
  6481  1DFB  3EAE               	addlw	_myMain& (0+255)
  6482  1DFC  0086               	movwf	6
  6483  1DFD  0187               	clrf	7
  6484  1DFE  3F40               	moviw [0]fsr1
  6485  1DFF  3AA8               	xorlw	168
  6486  1E00  1D03               	skipz
  6487  1E01  2E04               	goto	u5985
  6488  1E02  3F41               	moviw [1]fsr1
  6489  1E03  3A61               	xorlw	97
  6490  1E04                     u5985:	
  6491  1E04  1D03               	skipz
  6492  1E05  0008               	return
  6493                           
  6494                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6495  1E06  01B9               	clrf	(_myMain^(0+128)+11)
  6496  1E07  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6497                           
  6498                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6499  1E08  1538               	bsf	(_myMain^(0+128)+10),2
  6500  1E09  0008               	return
  6501  1E0A                     __end_of_Timeout_Counter:	
  6502                           
  6503                           	psect	text21
  6504  1B4D                     __ptext21:	
  6505 ;; *************** function _Switch_Initialization *****************
  6506 ;; Defined at:
  6507 ;;		line 46 in file "../src/Switch_B1.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;		None
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;		None
  6512 ;; Return value:  Size  Location     Type
  6513 ;;		None               void
  6514 ;; Registers used:
  6515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;Total ram usage:        0 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    7
  6528 ;; This function calls:
  6529 ;;		_setSw_Initialization
  6530 ;; This function is called by:
  6531 ;;		_main
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           
  6536                           ;psect for function _Switch_Initialization
  6537  1B4D                     _Switch_Initialization:	
  6538                           
  6539                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6540                           
  6541                           ;incstack = 0
  6542                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6543  1B4D  3001               	movlw	1
  6544  1B4E  319C  2488         	fcall	_setSw_Initialization
  6545  1B50  0008               	return
  6546  1B51                     __end_of_Switch_Initialization:	
  6547                           
  6548                           	psect	text22
  6549  1C88                     __ptext22:	
  6550 ;; *************** function _setSw_Initialization *****************
  6551 ;; Defined at:
  6552 ;;		line 66 in file "../src/Switch_B1.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;  sw              1    wreg     unsigned char 
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;  sw              1    4[BANK0 ] unsigned char 
  6557 ;; Return value:  Size  Location     Type
  6558 ;;		None               void
  6559 ;; Registers used:
  6560 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6561 ;; Tracked objects:
  6562 ;;		On entry : 0/0
  6563 ;;		On exit  : 0/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;Total ram usage:        1 bytes
  6571 ;; Hardware stack levels used:    1
  6572 ;; Hardware stack levels required when called:    6
  6573 ;; This function calls:
  6574 ;;		_setLED
  6575 ;; This function is called by:
  6576 ;;		_Switch_Initialization
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           
  6581                           ;psect for function _setSw_Initialization
  6582  1C88                     _setSw_Initialization:	
  6583                           
  6584                           ;incstack = 0
  6585                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6586                           ;setSw_Initialization@sw stored from wreg
  6587  1C88  0020               	movlb	0	; select bank0
  6588  1C89  00A4               	movwf	setSw_Initialization@sw
  6589                           
  6590                           ;Switch_B1.c: 68: setLED(sw, 1);
  6591  1C8A  01A2               	clrf	setLED@command
  6592  1C8B  0AA2               	incf	setLED@command,f
  6593  1C8C  0824               	movf	setSw_Initialization@sw,w
  6594  1C8D  3192  22EF  319C   	fcall	_setLED
  6595                           
  6596                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6597  1C90  0020               	movlb	0	; select bank0
  6598  1C91  01A2               	clrf	setLED@command
  6599  1C92  0AA2               	incf	setLED@command,f
  6600  1C93  0824               	movf	setSw_Initialization@sw,w
  6601  1C94  3E01               	addlw	1
  6602  1C95  3192  22EF         	fcall	_setLED
  6603  1C97  0008               	return
  6604  1C98                     __end_of_setSw_Initialization:	
  6605                           
  6606                           	psect	text23
  6607  1B20                     __ptext23:	
  6608 ;; *************** function _RF_Main *****************
  6609 ;; Defined at:
  6610 ;;		line 26 in file "../src/RF_Control_B1.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;		None               void
  6617 ;; Registers used:
  6618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;Total ram usage:        0 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:   11
  6631 ;; This function calls:
  6632 ;;		_setRF_Main
  6633 ;; This function is called by:
  6634 ;;		_main
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           
  6639                           ;psect for function _RF_Main
  6640  1B20                     _RF_Main:	
  6641                           
  6642                           ;RF_Control_B1.c: 28: setRF_Main();
  6643                           
  6644                           ;incstack = 0
  6645                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6646  1B20  3185  2566         	fcall	_setRF_Main
  6647  1B22  0008               	return
  6648  1B23                     __end_of_RF_Main:	
  6649                           
  6650                           	psect	text24
  6651  0566                     __ptext24:	
  6652 ;; *************** function _setRF_Main *****************
  6653 ;; Defined at:
  6654 ;;		line 53 in file "../src/RF_Control_B1.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;  error           1    3[BANK1 ] unsigned char 
  6659 ;; Return value:  Size  Location     Type
  6660 ;;		None               void
  6661 ;; Registers used:
  6662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;Total ram usage:        2 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:   10
  6675 ;; This function calls:
  6676 ;;		_CC2500_PowerOnInitial
  6677 ;;		_CC2500_RxData
  6678 ;;		_CC2500_TxData
  6679 ;;		_CC2500_WriteCommand
  6680 ;;		_RF_RxDisable
  6681 ;;		___lwdiv
  6682 ;;		_getBuz_GO
  6683 ;;		_getRF_KeyStatus
  6684 ;;		_getRxData
  6685 ;; This function is called by:
  6686 ;;		_RF_Main
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           
  6691                           ;psect for function _setRF_Main
  6692  0566                     _setRF_Main:	
  6693                           
  6694                           ;RF_Control_B1.c: 54: char error = 0;
  6695                           
  6696                           ;incstack = 0
  6697                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6698  0566  0021               	movlb	1	; select bank1
  6699  0567  01E9               	clrf	setRF_Main@error^(0+128)
  6700                           
  6701                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6702  0568  1C20               	btfss	_RF1^(0+128),0
  6703  0569  2E37               	goto	l2094
  6704                           
  6705                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6706  056A  319C  24CB  3185   	fcall	_getBuz_GO
  6707  056D  0020               	movlb	0	; select bank0
  6708  056E  0821               	movf	?_getBuz_GO+1,w
  6709  056F  0420               	iorwf	?_getBuz_GO,w
  6710  0570  1D03               	skipz
  6711  0571  2E18               	goto	l8490
  6712                           
  6713                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6714  0572  319C  24DC  3185   	fcall	_getRF_KeyStatus
  6715  0575  3A01               	xorlw	1
  6716  0576  3000               	movlw	0
  6717  0577  1903               	skipnz
  6718  0578  3001               	movlw	1
  6719  0579  0021               	movlb	1	; select bank1
  6720  057A  00E8               	movwf	??_setRF_Main^(0+128)
  6721  057B  0CE8               	rrf	??_setRF_Main^(0+128),f
  6722  057C  0CE8               	rrf	??_setRF_Main^(0+128),f
  6723  057D  0820               	movf	_RF1^(0+128),w
  6724  057E  0668               	xorwf	??_setRF_Main^(0+128),w
  6725  057F  397F               	andlw	-129
  6726  0580  0668               	xorwf	??_setRF_Main^(0+128),w
  6727  0581  00A0               	movwf	_RF1^(0+128)
  6728                           
  6729                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6730  0582  1FA0               	btfss	_RF1^(0+128),7
  6731  0583  2D86               	goto	l2098
  6732  0584  1F20               	btfss	_RF1^(0+128),6
  6733  0585  2E18               	goto	l8490
  6734  0586                     l2098:	
  6735                           
  6736                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6737  0586  1D20               	btfss	_RF1^(0+128),2
  6738  0587  2DD7               	goto	l2099
  6739                           
  6740                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6741  0588  1B20               	btfsc	_RF1^(0+128),6
  6742  0589  2DD2               	goto	l8462
  6743                           
  6744                           ;RF_Control_B1.c: 68: RF1.Count++;
  6745  058A  3001               	movlw	1
  6746  058B  07A2               	addwf	(_RF1^(0+128)+2),f
  6747  058C  3000               	movlw	0
  6748  058D  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6749                           
  6750                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6751  058E  3014               	movlw	20
  6752  058F  0020               	movlb	0	; select bank0
  6753  0590  00A0               	movwf	___lwdiv@divisor
  6754  0591  3000               	movlw	0
  6755  0592  00A1               	movwf	___lwdiv@divisor+1
  6756  0593  0021               	movlb	1	; select bank1
  6757  0594  0828               	movf	((_RF1+1)^(0+128)+7),w
  6758  0595  0020               	movlb	0	; select bank0
  6759  0596  01A3               	clrf	___lwdiv@dividend+1
  6760  0597  07A3               	addwf	___lwdiv@dividend+1,f
  6761  0598  0021               	movlb	1	; select bank1
  6762  0599  0827               	movf	(_RF1^(0+128)+7),w
  6763  059A  0020               	movlb	0	; select bank0
  6764  059B  01A2               	clrf	___lwdiv@dividend
  6765  059C  07A2               	addwf	___lwdiv@dividend,f
  6766  059D  3192  227F  3185   	fcall	___lwdiv
  6767  05A0  0020               	movlb	0	; select bank0
  6768  05A1  0821               	movf	?___lwdiv+1,w
  6769  05A2  0021               	movlb	1	; select bank1
  6770  05A3  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6771  05A4  1D03               	skipz
  6772  05A5  2DAA               	goto	u8775
  6773  05A6  0020               	movlb	0	; select bank0
  6774  05A7  0820               	movf	?___lwdiv,w
  6775  05A8  0021               	movlb	1	; select bank1
  6776  05A9  0222               	subwf	(_RF1^(0+128)+2),w
  6777  05AA                     u8775:	
  6778  05AA  1C03               	skipc
  6779  05AB  2E18               	goto	l8490
  6780                           
  6781                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6782  05AC  3014               	movlw	20
  6783  05AD  0020               	movlb	0	; select bank0
  6784  05AE  00A0               	movwf	___lwdiv@divisor
  6785  05AF  3000               	movlw	0
  6786  05B0  00A1               	movwf	___lwdiv@divisor+1
  6787  05B1  0021               	movlb	1	; select bank1
  6788  05B2  0828               	movf	((_RF1+1)^(0+128)+7),w
  6789  05B3  0020               	movlb	0	; select bank0
  6790  05B4  01A3               	clrf	___lwdiv@dividend+1
  6791  05B5  07A3               	addwf	___lwdiv@dividend+1,f
  6792  05B6  0021               	movlb	1	; select bank1
  6793  05B7  0827               	movf	(_RF1^(0+128)+7),w
  6794  05B8  0020               	movlb	0	; select bank0
  6795  05B9  01A2               	clrf	___lwdiv@dividend
  6796  05BA  07A2               	addwf	___lwdiv@dividend,f
  6797  05BB  3192  227F  3185   	fcall	___lwdiv
  6798  05BE  0020               	movlb	0	; select bank0
  6799  05BF  0821               	movf	?___lwdiv+1,w
  6800  05C0  0021               	movlb	1	; select bank1
  6801  05C1  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6802  05C2  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6803  05C3  0020               	movlb	0	; select bank0
  6804  05C4  0820               	movf	?___lwdiv,w
  6805  05C5  0021               	movlb	1	; select bank1
  6806  05C6  01A2               	clrf	(_RF1^(0+128)+2)
  6807  05C7  07A2               	addwf	(_RF1^(0+128)+2),f
  6808                           
  6809                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6810  05C8  1120               	bcf	_RF1^(0+128),2
  6811                           
  6812                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6813  05C9  01AA               	clrf	(_RF1^(0+128)+10)
  6814  05CA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6815                           
  6816                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6817  05CB  319C  2479  3185   	fcall	_RF_RxDisable
  6818                           
  6819                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6820  05CE  3188  20FD  3185   	fcall	_CC2500_TxData
  6821                           
  6822                           ;RF_Control_B1.c: 77: }
  6823                           ;RF_Control_B1.c: 78: } else {
  6824  05D1  2E18               	goto	l8490
  6825  05D2                     l8462:	
  6826                           
  6827                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6828  05D2  0021               	movlb	1	; select bank1
  6829  05D3  01A2               	clrf	(_RF1^(0+128)+2)
  6830  05D4  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6831                           
  6832                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6833  05D5  1120               	bcf	_RF1^(0+128),2
  6834                           
  6835                           ;RF_Control_B1.c: 81: }
  6836                           ;RF_Control_B1.c: 82: } else {
  6837  05D6  2E18               	goto	l8490
  6838  05D7                     l2099:	
  6839                           
  6840                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6841  05D7  1DA0               	btfss	_RF1^(0+128),3
  6842  05D8  2DE6               	goto	l8476
  6843                           
  6844                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6845  05D9  3188  2092  3185   	fcall	_CC2500_RxData
  6846                           
  6847                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6848  05DC  0021               	movlb	1	; select bank1
  6849  05DD  1CA0               	btfss	_RF1^(0+128),1
  6850  05DE  2E18               	goto	l8490
  6851                           
  6852                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6853  05DF  10A0               	bcf	_RF1^(0+128),1
  6854                           
  6855                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6856  05E0  01AA               	clrf	(_RF1^(0+128)+10)
  6857  05E1  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6858                           
  6859                           ;RF_Control_B1.c: 97: getRxData();
  6860  05E2  318A  224A  3185   	fcall	_getRxData
  6861                           
  6862                           ;RF_Control_B1.c: 100: }
  6863                           ;RF_Control_B1.c: 101: } else {
  6864  05E5  2E18               	goto	l8490
  6865  05E6                     l8476:	
  6866                           
  6867                           ;RF_Control_B1.c: 102: RF1.Count++;
  6868  05E6  3001               	movlw	1
  6869  05E7  0021               	movlb	1	; select bank1
  6870  05E8  07A2               	addwf	(_RF1^(0+128)+2),f
  6871  05E9  3000               	movlw	0
  6872  05EA  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6873                           
  6874                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6875  05EB  3014               	movlw	20
  6876  05EC  0020               	movlb	0	; select bank0
  6877  05ED  00A0               	movwf	___lwdiv@divisor
  6878  05EE  3000               	movlw	0
  6879  05EF  00A1               	movwf	___lwdiv@divisor+1
  6880  05F0  0021               	movlb	1	; select bank1
  6881  05F1  0828               	movf	((_RF1+1)^(0+128)+7),w
  6882  05F2  0020               	movlb	0	; select bank0
  6883  05F3  01A3               	clrf	___lwdiv@dividend+1
  6884  05F4  07A3               	addwf	___lwdiv@dividend+1,f
  6885  05F5  0021               	movlb	1	; select bank1
  6886  05F6  0827               	movf	(_RF1^(0+128)+7),w
  6887  05F7  0020               	movlb	0	; select bank0
  6888  05F8  01A2               	clrf	___lwdiv@dividend
  6889  05F9  07A2               	addwf	___lwdiv@dividend,f
  6890  05FA  3192  227F  3185   	fcall	___lwdiv
  6891  05FD  0020               	movlb	0	; select bank0
  6892  05FE  0821               	movf	?___lwdiv+1,w
  6893  05FF  0021               	movlb	1	; select bank1
  6894  0600  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6895  0601  1D03               	skipz
  6896  0602  2E07               	goto	u8805
  6897  0603  0020               	movlb	0	; select bank0
  6898  0604  0820               	movf	?___lwdiv,w
  6899  0605  0021               	movlb	1	; select bank1
  6900  0606  0222               	subwf	(_RF1^(0+128)+2),w
  6901  0607                     u8805:	
  6902  0607  1C03               	skipc
  6903  0608  2E18               	goto	l8490
  6904                           
  6905                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6906  0609  01A2               	clrf	(_RF1^(0+128)+2)
  6907  060A  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6908                           
  6909                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6910  060B  15A0               	bsf	_RF1^(0+128),3
  6911                           
  6912                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6913  060C  3036               	movlw	54
  6914  060D  319E  26FA  3185   	fcall	_CC2500_WriteCommand
  6915                           
  6916                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6917  0610  303A               	movlw	58
  6918  0611  319E  26FA  3185   	fcall	_CC2500_WriteCommand
  6919                           
  6920                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6921  0614  3034               	movlw	52
  6922  0615  319E  26FA  3185   	fcall	_CC2500_WriteCommand
  6923  0618                     l8490:	
  6924                           
  6925                           ;RF_Control_B1.c: 111: }
  6926                           ;RF_Control_B1.c: 112: }
  6927                           ;RF_Control_B1.c: 113: }
  6928                           ;RF_Control_B1.c: 114: }
  6929                           ;RF_Control_B1.c: 115: }
  6930                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6931  0618  3001               	movlw	1
  6932  0619  0021               	movlb	1	; select bank1
  6933  061A  07AA               	addwf	(_RF1^(0+128)+10),f
  6934  061B  3000               	movlw	0
  6935  061C  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6936                           
  6937                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6938  061D  300B               	movlw	11
  6939  061E  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6940  061F  30B9               	movlw	185
  6941  0620  1903               	skipnz
  6942  0621  022A               	subwf	(_RF1^(0+128)+10),w
  6943  0622  1C03               	skipc
  6944  0623  2E30               	goto	l8504
  6945                           
  6946                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6947  0624  01AA               	clrf	(_RF1^(0+128)+10)
  6948  0625  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6949                           
  6950                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6951  0626  11A0               	bcf	_RF1^(0+128),3
  6952                           
  6953                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6954  0627  10A0               	bcf	_RF1^(0+128),1
  6955                           
  6956                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6957  0628  3036               	movlw	54
  6958  0629  319E  26FA  3185   	fcall	_CC2500_WriteCommand
  6959                           
  6960                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6961  062C  303A               	movlw	58
  6962  062D  319E  26FA  3185   	fcall	_CC2500_WriteCommand
  6963  0630                     l8504:	
  6964                           
  6965                           ;RF_Control_B1.c: 125: }
  6966                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6967  0630  0021               	movlb	1	; select bank1
  6968  0631  1F21               	btfss	(_RF1^(0+128)+1),6
  6969  0632  0008               	return
  6970                           
  6971                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6972  0633  1321               	bcf	(_RF1^(0+128)+1),6
  6973                           
  6974                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6975  0634  319D  25E0         	fcall	_CC2500_PowerOnInitial
  6976                           
  6977                           ;RF_Control_B1.c: 130: }
  6978                           ;RF_Control_B1.c: 132: } else {
  6979  0636  0008               	return
  6980  0637                     l2094:	
  6981                           
  6982                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  6983  0637  1C2E               	btfss	_myMain^(0+128),0
  6984  0638  0008               	return
  6985                           
  6986                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  6987  0639  1420               	bsf	_RF1^(0+128),0
  6988  063A  0008               	return
  6989  063B                     __end_of_setRF_Main:	
  6990                           
  6991                           	psect	text25
  6992  0A4A                     __ptext25:	
  6993 ;; *************** function _getRxData *****************
  6994 ;; Defined at:
  6995 ;;		line 227 in file "../src/RF_Control_B1.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;		None
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  error           1    1[BANK1 ] unsigned char 
  7000 ;; Return value:  Size  Location     Type
  7001 ;;		None               void
  7002 ;; Registers used:
  7003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7010 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7011 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7012 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;Total ram usage:        2 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    9
  7016 ;; This function calls:
  7017 ;;		_getMain_All_Error_Status
  7018 ;;		_setControl_Lights_Table
  7019 ;;		_setLog_Code
  7020 ;;		_setTxData
  7021 ;; This function is called by:
  7022 ;;		_setRF_Main
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           
  7027                           ;psect for function _getRxData
  7028  0A4A                     _getRxData:	
  7029                           
  7030                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7031                           
  7032                           ;incstack = 0
  7033                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7034  0A4A  0022               	movlb	2	; select bank2
  7035  0A4B  0820               	movf	_RF_Data^(0+256),w
  7036  0A4C  3AAA               	xorlw	170
  7037  0A4D  1D03               	skipz
  7038  0A4E  2A60               	goto	l6828
  7039  0A4F  0821               	movf	(_RF_Data^(0+256)+1),w
  7040  0A50  3A01               	xorlw	1
  7041  0A51  1D03               	skipz
  7042  0A52  2A60               	goto	l6828
  7043                           
  7044                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7045  0A53  3055               	movlw	85
  7046  0A54  0021               	movlb	1	; select bank1
  7047  0A55  00E6               	movwf	??_getRxData^(0+128)
  7048  0A56  086E               	movf	_product^(0+128),w
  7049  0A57  3E02               	addlw	2
  7050  0A58  0086               	movwf	6
  7051  0A59  3002               	movlw	2	; select bank4/5
  7052  0A5A  0087               	movwf	7
  7053  0A5B  0866               	movf	??_getRxData^(0+128),w
  7054  0A5C  0081               	movwf	1
  7055                           
  7056                           ;RF_Control_B1.c: 231: setTxData();
  7057  0A5D  318F  2745         	fcall	_setTxData
  7058                           
  7059                           ;RF_Control_B1.c: 235: } else {
  7060  0A5F  0008               	return
  7061  0A60                     l6828:	
  7062                           
  7063                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7064  0A60  3000               	movlw	0
  7065  0A61  3191  2177  318A   	fcall	_getMain_All_Error_Status
  7066  0A64  0021               	movlb	1	; select bank1
  7067  0A65  00E6               	movwf	??_getRxData^(0+128)
  7068  0A66  0866               	movf	??_getRxData^(0+128),w
  7069  0A67  00E7               	movwf	getRxData@error^(0+128)
  7070                           
  7071                           ;RF_Control_B1.c: 237: if (error == 0) {
  7072  0A68  08E7               	movf	getRxData@error^(0+128),f
  7073  0A69  1D03               	skipz
  7074  0A6A  2ABA               	goto	l2139
  7075                           
  7076                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7077  0A6B  1F20               	btfss	_RF1^(0+128),6
  7078  0A6C  2A78               	goto	l6840
  7079                           
  7080                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7081  0A6D  0022               	movlb	2	; select bank2
  7082  0A6E  08A0               	movf	_RF_Data^(0+256),f
  7083  0A6F  1D03               	skipz
  7084  0A70  0008               	return
  7085  0A71  0821               	movf	(_RF_Data^(0+256)+1),w
  7086  0A72  3A64               	xorlw	100
  7087  0A73  1D03               	skipz
  7088  0A74  0008               	return
  7089                           
  7090                           ;RF_Control_B1.c: 241: setLog_Code();
  7091  0A75  3191  21AA         	fcall	_setLog_Code
  7092                           
  7093                           ;RF_Control_B1.c: 242: }
  7094                           ;RF_Control_B1.c: 243: } else {
  7095  0A77  0008               	return
  7096  0A78                     l6840:	
  7097                           
  7098                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7099  0A78  0022               	movlb	2	; select bank2
  7100  0A79  0834               	movf	(_RF_Data^(0+256)+20),w
  7101  0A7A  3AD1               	xorlw	209
  7102  0A7B  1903               	skipnz
  7103  0A7C  2A81               	goto	l6844
  7104  0A7D  0834               	movf	(_RF_Data^(0+256)+20),w
  7105  0A7E  3A0A               	xorlw	10
  7106  0A7F  1D03               	skipz
  7107  0A80  0008               	return
  7108  0A81                     l6844:	
  7109                           
  7110                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7111  0A81  08A0               	movf	_RF_Data^(0+256),f
  7112  0A82  1D03               	skipz
  7113  0A83  0008               	return
  7114  0A84  0821               	movf	(_RF_Data^(0+256)+1),w
  7115  0A85  3A02               	xorlw	2
  7116  0A86  1D03               	skipz
  7117  0A87  0008               	return
  7118                           
  7119                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7120  0A88  082C               	movf	(_RF_Data^(0+256)+12),w
  7121  0A89  3AFF               	xorlw	255
  7122  0A8A  1D03               	skipz
  7123  0A8B  2A96               	goto	l6856
  7124  0A8C  082D               	movf	(_RF_Data^(0+256)+13),w
  7125  0A8D  3AFF               	xorlw	255
  7126  0A8E  1D03               	skipz
  7127  0A8F  2A96               	goto	l6856
  7128  0A90  082E               	movf	(_RF_Data^(0+256)+14),w
  7129  0A91  3AFF               	xorlw	255
  7130  0A92  1D03               	skipz
  7131  0A93  2A96               	goto	l6856
  7132                           
  7133                           ;RF_Control_B1.c: 249: __nop();
  7134  0A94  0000               	nop
  7135                           
  7136                           ;RF_Control_B1.c: 250: } else {
  7137  0A95  0008               	return
  7138  0A96                     l6856:	
  7139                           
  7140                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7141  0A96  0021               	movlb	1	; select bank1
  7142  0A97  086E               	movf	_product^(0+128),w
  7143  0A98  3E0C               	addlw	12
  7144  0A99  0086               	movwf	6
  7145  0A9A  3002               	movlw	2	; select bank4/5
  7146  0A9B  0087               	movwf	7
  7147  0A9C  0022               	movlb	2	; select bank2
  7148  0A9D  082C               	movf	(_RF_Data^(0+256)+12),w
  7149  0A9E  0601               	xorwf	1,w
  7150  0A9F  1D03               	skipz
  7151  0AA0  0008               	return
  7152  0AA1  0021               	movlb	1	; select bank1
  7153  0AA2  086E               	movf	_product^(0+128),w
  7154  0AA3  3E0D               	addlw	13
  7155  0AA4  0086               	movwf	6
  7156  0AA5  3002               	movlw	2	; select bank4/5
  7157  0AA6  0087               	movwf	7
  7158  0AA7  0022               	movlb	2	; select bank2
  7159  0AA8  082D               	movf	(_RF_Data^(0+256)+13),w
  7160  0AA9  0601               	xorwf	1,w
  7161  0AAA  1D03               	skipz
  7162  0AAB  0008               	return
  7163  0AAC  0021               	movlb	1	; select bank1
  7164  0AAD  086E               	movf	_product^(0+128),w
  7165  0AAE  3E0E               	addlw	14
  7166  0AAF  0086               	movwf	6
  7167  0AB0  3002               	movlw	2	; select bank4/5
  7168  0AB1  0087               	movwf	7
  7169  0AB2  0022               	movlb	2	; select bank2
  7170  0AB3  082E               	movf	(_RF_Data^(0+256)+14),w
  7171  0AB4  0601               	xorwf	1,w
  7172  0AB5  1D03               	skipz
  7173  0AB6  0008               	return
  7174                           
  7175                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7176  0AB7  3189  21D8         	fcall	_setControl_Lights_Table
  7177                           
  7178                           ;RF_Control_B1.c: 253: }
  7179                           ;RF_Control_B1.c: 254: }
  7180                           ;RF_Control_B1.c: 256: }
  7181                           ;RF_Control_B1.c: 267: }
  7182                           ;RF_Control_B1.c: 268: }
  7183                           ;RF_Control_B1.c: 269: } else {
  7184  0AB9  0008               	return
  7185  0ABA                     l2139:	
  7186                           
  7187                           ;RF_Control_B1.c: 270: __nop();
  7188  0ABA  0000               	nop
  7189  0ABB  0008               	return
  7190  0ABC                     __end_of_getRxData:	
  7191                           
  7192                           	psect	text26
  7193  11AA                     __ptext26:	
  7194 ;; *************** function _setLog_Code *****************
  7195 ;; Defined at:
  7196 ;;		line 276 in file "../src/RF_Control_B1.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;		None
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;		None
  7201 ;; Return value:  Size  Location     Type
  7202 ;;		None               void
  7203 ;; Registers used:
  7204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;Total ram usage:        1 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; Hardware stack levels required when called:    6
  7217 ;; This function calls:
  7218 ;;		_setBuz
  7219 ;;		_setMemory_LoopSave
  7220 ;;		_setMemory_Modify
  7221 ;;		_setProductData
  7222 ;; This function is called by:
  7223 ;;		_getRxData
  7224 ;; This function uses a non-reentrant model
  7225 ;;
  7226                           
  7227                           
  7228                           ;psect for function _setLog_Code
  7229  11AA                     _setLog_Code:	
  7230                           
  7231                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7232                           
  7233                           ;incstack = 0
  7234                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7235  11AA  0021               	movlb	1	; select bank1
  7236  11AB  1320               	bcf	_RF1^(0+128),6
  7237                           
  7238                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7239  11AC  0022               	movlb	2	; select bank2
  7240  11AD  082C               	movf	(_RF_Data^(0+256)+12),w
  7241  11AE  0020               	movlb	0	; select bank0
  7242  11AF  00E5               	movwf	??_setLog_Code
  7243  11B0  0865               	movf	??_setLog_Code,w
  7244  11B1  00E2               	movwf	setProductData@value
  7245  11B2  300C               	movlw	12
  7246  11B3  319B  23F2  3191   	fcall	_setProductData
  7247                           
  7248                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7249  11B6  0022               	movlb	2	; select bank2
  7250  11B7  082D               	movf	(_RF_Data^(0+256)+13),w
  7251  11B8  0020               	movlb	0	; select bank0
  7252  11B9  00E5               	movwf	??_setLog_Code
  7253  11BA  0865               	movf	??_setLog_Code,w
  7254  11BB  00E2               	movwf	setProductData@value
  7255  11BC  300D               	movlw	13
  7256  11BD  319B  23F2  3191   	fcall	_setProductData
  7257                           
  7258                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7259  11C0  0022               	movlb	2	; select bank2
  7260  11C1  082E               	movf	(_RF_Data^(0+256)+14),w
  7261  11C2  0020               	movlb	0	; select bank0
  7262  11C3  00E5               	movwf	??_setLog_Code
  7263  11C4  0865               	movf	??_setLog_Code,w
  7264  11C5  00E2               	movwf	setProductData@value
  7265  11C6  300E               	movlw	14
  7266  11C7  319B  23F2  3191   	fcall	_setProductData
  7267                           
  7268                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7269  11CA  3064               	movlw	100
  7270  11CB  0020               	movlb	0	; select bank0
  7271  11CC  00A9               	movwf	setBuz@time
  7272  11CD  3000               	movlw	0
  7273  11CE  00AA               	movwf	setBuz@time+1
  7274  11CF  3001               	movlw	1
  7275  11D0  3195  25BC  3191   	fcall	_setBuz
  7276                           
  7277                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7278  11D3  0021               	movlb	1	; select bank1
  7279  11D4  1EAE               	btfss	_myMain^(0+128),5
  7280  11D5  29DA               	goto	l2154
  7281                           
  7282                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7283  11D6  3001               	movlw	1
  7284  11D7  319D  2591  3191   	fcall	_setMemory_LoopSave
  7285  11DA                     l2154:	
  7286                           
  7287                           ;RF_Control_B1.c: 284: }
  7288                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7289  11DA  3001               	movlw	1
  7290  11DB  319D  257E         	fcall	_setMemory_Modify
  7291  11DD  0008               	return
  7292  11DE                     __end_of_setLog_Code:	
  7293                           
  7294                           	psect	text27
  7295  1D91                     __ptext27:	
  7296 ;; *************** function _setMemory_LoopSave *****************
  7297 ;; Defined at:
  7298 ;;		line 1076 in file "../src/MCU_B1.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;  command         1    wreg     unsigned char 
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;  command         1    1[BANK0 ] unsigned char 
  7303 ;; Return value:  Size  Location     Type
  7304 ;;		None               void
  7305 ;; Registers used:
  7306 ;;		wreg, status,2, status,0
  7307 ;; Tracked objects:
  7308 ;;		On entry : 0/0
  7309 ;;		On exit  : 0/0
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;Total ram usage:        2 bytes
  7317 ;; Hardware stack levels used:    1
  7318 ;; Hardware stack levels required when called:    4
  7319 ;; This function calls:
  7320 ;;		Nothing
  7321 ;; This function is called by:
  7322 ;;		_setLog_Code
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326                           
  7327                           ;psect for function _setMemory_LoopSave
  7328  1D91                     _setMemory_LoopSave:	
  7329                           
  7330                           ;incstack = 0
  7331                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7332                           ;setMemory_LoopSave@command stored from wreg
  7333  1D91  0020               	movlb	0	; select bank0
  7334  1D92  00A1               	movwf	setMemory_LoopSave@command
  7335                           
  7336                           ;MCU_B1.c: 1077: Memory.LoopSave = command == 1 ? 1 : 0;
  7337  1D93  0821               	movf	setMemory_LoopSave@command,w
  7338  1D94  3A01               	xorlw	1
  7339  1D95  3000               	movlw	0
  7340  1D96  1903               	skipnz
  7341  1D97  3001               	movlw	1
  7342  1D98  00A0               	movwf	??_setMemory_LoopSave
  7343  1D99  0DA0               	rlf	??_setMemory_LoopSave,f
  7344  1D9A  0DA0               	rlf	??_setMemory_LoopSave,f
  7345  1D9B  0023               	movlb	3	; select bank3
  7346  1D9C  0849               	movf	(_Memory^(0+384)+36),w
  7347  1D9D  0020               	movlb	0	; select bank0
  7348  1D9E  0620               	xorwf	??_setMemory_LoopSave,w
  7349  1D9F  39FB               	andlw	-5
  7350  1DA0  0620               	xorwf	??_setMemory_LoopSave,w
  7351  1DA1  0023               	movlb	3	; select bank3
  7352  1DA2  00C9               	movwf	(_Memory^(0+384)+36)
  7353  1DA3  0008               	return
  7354  1DA4                     __end_of_setMemory_LoopSave:	
  7355                           
  7356                           	psect	text28
  7357  09D8                     __ptext28:	
  7358 ;; *************** function _setControl_Lights_Table *****************
  7359 ;; Defined at:
  7360 ;;		line 289 in file "../src/RF_Control_B1.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;		None
  7363 ;; Auto vars:     Size  Location     Type
  7364 ;;		None
  7365 ;; Return value:  Size  Location     Type
  7366 ;;		None               void
  7367 ;; Registers used:
  7368 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;Total ram usage:        0 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    8
  7381 ;; This function calls:
  7382 ;;		_getDimmerLights_Status
  7383 ;;		_getMain_All_LightsStatus
  7384 ;;		_setCmd_Status
  7385 ;;		_setDimmerLights_SwOff
  7386 ;;		_setDimmerLights_SwOn
  7387 ;;		_setProductData
  7388 ;;		_setRFSW_AdjControl
  7389 ;;		_setRFSW_Control
  7390 ;;		_setTxData
  7391 ;; This function is called by:
  7392 ;;		_getRxData
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           
  7397                           ;psect for function _setControl_Lights_Table
  7398  09D8                     _setControl_Lights_Table:	
  7399                           
  7400                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7401                           
  7402                           ;incstack = 0
  7403                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7404  09D8  2A3A               	goto	l6508
  7405  09D9                     l6490:	
  7406                           ;RF_Control_B1.c: 292: case 0x00:
  7407                           
  7408                           
  7409                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7410  09D9  319B  23B0  3189   	fcall	_getMain_All_LightsStatus
  7411  09DC  3A01               	xorlw	1
  7412  09DD  1D03               	skipz
  7413  09DE  29F5               	goto	l6498
  7414                           
  7415                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7416  09DF  3001               	movlw	1
  7417  09E0  319C  2498  3189   	fcall	_getDimmerLights_Status
  7418  09E3  3A01               	xorlw	1
  7419  09E4  1D03               	skipz
  7420  09E5  29EE               	goto	l6496
  7421                           
  7422                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7423  09E6  3001               	movlw	1
  7424  09E7  3191  21DE  3189   	fcall	_setDimmerLights_SwOn
  7425                           
  7426                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7427  09EA  3001               	movlw	1
  7428  09EB  3192  22B6  3189   	fcall	_setDimmerLights_SwOff
  7429  09EE                     l6496:	
  7430                           
  7431                           ;RF_Control_B1.c: 299: }
  7432                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7433  09EE  0020               	movlb	0	; select bank0
  7434  09EF  01A0               	clrf	setCmd_Status@cmd
  7435  09F0  0AA0               	incf	setCmd_Status@cmd,f
  7436  09F1  3001               	movlw	1
  7437  09F2  319E  2694         	fcall	_setCmd_Status
  7438                           
  7439                           ;RF_Control_B1.c: 315: } else {
  7440  09F4  0008               	return
  7441  09F5                     l6498:	
  7442                           
  7443                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7444  09F5  0020               	movlb	0	; select bank0
  7445  09F6  01E2               	clrf	setProductData@value
  7446  09F7  3009               	movlw	9
  7447  09F8  319B  23F2  3189   	fcall	_setProductData
  7448                           
  7449                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7450  09FB  0020               	movlb	0	; select bank0
  7451  09FC  01E2               	clrf	setProductData@value
  7452  09FD  300B               	movlw	11
  7453  09FE  319B  23F2  3189   	fcall	_setProductData
  7454                           
  7455                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7456  0A01  0020               	movlb	0	; select bank0
  7457  0A02  01E2               	clrf	setProductData@value
  7458  0A03  300F               	movlw	15
  7459  0A04  319B  23F2  3189   	fcall	_setProductData
  7460                           
  7461                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7462  0A07  0020               	movlb	0	; select bank0
  7463  0A08  01E2               	clrf	setProductData@value
  7464  0A09  3011               	movlw	17
  7465  0A0A  319B  23F2  3189   	fcall	_setProductData
  7466                           
  7467                           ;RF_Control_B1.c: 320: setTxData();
  7468  0A0D  318F  2745         	fcall	_setTxData
  7469                           
  7470                           ;RF_Control_B1.c: 321: }
  7471                           ;RF_Control_B1.c: 322: break;
  7472  0A0F  0008               	return
  7473  0A10                     l6500:	
  7474                           ;RF_Control_B1.c: 324: case 0x20:
  7475                           
  7476                           
  7477                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7478  0A10  0020               	movlb	0	; select bank0
  7479  0A11  01E2               	clrf	setProductData@value
  7480  0A12  3009               	movlw	9
  7481  0A13  319B  23F2  3189   	fcall	_setProductData
  7482                           
  7483                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7484  0A16  0020               	movlb	0	; select bank0
  7485  0A17  01E2               	clrf	setProductData@value
  7486  0A18  300B               	movlw	11
  7487  0A19  319B  23F2  3189   	fcall	_setProductData
  7488                           
  7489                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7490  0A1C  0021               	movlb	1	; select bank1
  7491  0A1D  086E               	movf	_product^(0+128),w
  7492  0A1E  0086               	movwf	6
  7493  0A1F  3002               	movlw	2	; select bank4/5
  7494  0A20  0087               	movwf	7
  7495  0A21  3002               	movlw	2	; select bank4/5
  7496  0A22  3F4F               	moviw [15]fsr1
  7497  0A23  0020               	movlb	0	; select bank0
  7498  0A24  00E2               	movwf	setProductData@value
  7499  0A25  300F               	movlw	15
  7500  0A26  319B  23F2  3189   	fcall	_setProductData
  7501                           
  7502                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7503  0A29  0020               	movlb	0	; select bank0
  7504  0A2A  01E2               	clrf	setProductData@value
  7505  0A2B  3011               	movlw	17
  7506  0A2C  319B  23F2  3189   	fcall	_setProductData
  7507                           
  7508                           ;RF_Control_B1.c: 329: setTxData();
  7509  0A2F  318F  2745         	fcall	_setTxData
  7510                           
  7511                           ;RF_Control_B1.c: 330: break;
  7512  0A31  0008               	return
  7513  0A32                     l6502:	
  7514                           ;RF_Control_B1.c: 333: case 0x01:
  7515                           
  7516                           
  7517                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7518  0A32  3001               	movlw	1
  7519  0A33  3193  2364         	fcall	_setRFSW_Control
  7520                           
  7521                           ;RF_Control_B1.c: 335: break;
  7522  0A35  0008               	return
  7523  0A36                     l6504:	
  7524                           ;RF_Control_B1.c: 339: case 0x11:
  7525                           
  7526                           
  7527                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7528  0A36  3001               	movlw	1
  7529  0A37  318B  23A4         	fcall	_setRFSW_AdjControl
  7530                           
  7531                           ;RF_Control_B1.c: 370: }
  7532                           
  7533                           ;RF_Control_B1.c: 341: break;
  7534  0A39  0008               	return
  7535  0A3A                     l6508:	
  7536  0A3A  0022               	movlb	2	; select bank2
  7537  0A3B  082F               	movf	(_RF_Data^(0+256)+15),w
  7538                           
  7539                           ; Switch size 1, requested type "space"
  7540                           ; Number of cases is 4, Range of values is 0 to 32
  7541                           ; switch strategies available:
  7542                           ; Name         Instructions Cycles
  7543                           ; simple_byte           13     7 (average)
  7544                           ; direct_byte           72     6 (fixed)
  7545                           ; jumptable            260     6 (fixed)
  7546                           ;	Chosen strategy is simple_byte
  7547  0A3C  3A00               	xorlw	0	; case 0
  7548  0A3D  1903               	skipnz
  7549  0A3E  29D9               	goto	l6490
  7550  0A3F  3A01               	xorlw	1	; case 1
  7551  0A40  1903               	skipnz
  7552  0A41  2A32               	goto	l6502
  7553  0A42  3A10               	xorlw	16	; case 17
  7554  0A43  1903               	skipnz
  7555  0A44  2A36               	goto	l6504
  7556  0A45  3A31               	xorlw	49	; case 32
  7557  0A46  1903               	skipnz
  7558  0A47  2A10               	goto	l6500
  7559  0A48  2A49               	goto	l2167
  7560  0A49                     l2167:	
  7561  0A49  0008               	return
  7562  0A4A                     __end_of_setControl_Lights_Table:	
  7563                           
  7564                           	psect	text29
  7565  1364                     __ptext29:	
  7566 ;; *************** function _setRFSW_Control *****************
  7567 ;; Defined at:
  7568 ;;		line 378 in file "../src/RF_Control_B1.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  sw              1    wreg     unsigned char 
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  sw              1   79[BANK0 ] unsigned char 
  7573 ;;  status          1   78[BANK0 ] unsigned char 
  7574 ;; Return value:  Size  Location     Type
  7575 ;;		None               void
  7576 ;; Registers used:
  7577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;Total ram usage:        3 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    7
  7590 ;; This function calls:
  7591 ;;		_getDimmerLights_Status
  7592 ;;		_setBuz
  7593 ;;		_setDelayOff_GO
  7594 ;;		_setDimmerLights_SwOff
  7595 ;;		_setDimmerLights_SwOn
  7596 ;;		_setRF_DimmerLights
  7597 ;;		_setTxData
  7598 ;; This function is called by:
  7599 ;;		_setControl_Lights_Table
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           
  7604                           ;psect for function _setRFSW_Control
  7605  1364                     _setRFSW_Control:	
  7606                           
  7607                           ;incstack = 0
  7608                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7609                           ;setRFSW_Control@sw stored from wreg
  7610  1364  0020               	movlb	0	; select bank0
  7611  1365  00EF               	movwf	setRFSW_Control@sw
  7612                           
  7613                           ;RF_Control_B1.c: 379: char status = 0;
  7614  1366  01EE               	clrf	setRFSW_Control@status
  7615                           
  7616                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7617  1367  0022               	movlb	2	; select bank2
  7618  1368  0830               	movf	(_RF_Data^(0+256)+16),w
  7619  1369  3A80               	xorlw	128
  7620  136A  1D03               	skipz
  7621  136B  2B97               	goto	l6234
  7622                           
  7623                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7624  136C  0020               	movlb	0	; select bank0
  7625  136D  01E5               	clrf	setDelayOff_GO@command
  7626  136E  0AE5               	incf	setDelayOff_GO@command,f
  7627  136F  0022               	movlb	2	; select bank2
  7628  1370  0831               	movf	(_RF_Data^(0+256)+17),w
  7629  1371  0020               	movlb	0	; select bank0
  7630  1372  00ED               	movwf	??_setRFSW_Control
  7631  1373  086D               	movf	??_setRFSW_Control,w
  7632  1374  00E6               	movwf	setDelayOff_GO@value
  7633  1375  086F               	movf	setRFSW_Control@sw,w
  7634  1376  318C  24AB  3193   	fcall	_setDelayOff_GO
  7635                           
  7636                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7637  1379  0020               	movlb	0	; select bank0
  7638  137A  086F               	movf	setRFSW_Control@sw,w
  7639  137B  319C  2498  3193   	fcall	_getDimmerLights_Status
  7640  137E  3A01               	xorlw	1
  7641  137F  1D03               	skipz
  7642  1380  2B97               	goto	l6234
  7643                           
  7644                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7645  1381  3064               	movlw	100
  7646  1382  0020               	movlb	0	; select bank0
  7647  1383  00A9               	movwf	setBuz@time
  7648  1384  3000               	movlw	0
  7649  1385  00AA               	movwf	setBuz@time+1
  7650  1386  3001               	movlw	1
  7651  1387  3195  25BC  3193   	fcall	_setBuz
  7652                           
  7653                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7654  138A  0020               	movlb	0	; select bank0
  7655  138B  01E5               	clrf	setRF_DimmerLights@on
  7656  138C  0AE5               	incf	setRF_DimmerLights@on,f
  7657  138D  086F               	movf	setRFSW_Control@sw,w
  7658  138E  3197  2736  3193   	fcall	_setRF_DimmerLights
  7659                           
  7660                           ;RF_Control_B1.c: 386: setTxData();
  7661  1391  318F  2745  3193   	fcall	_setTxData
  7662                           
  7663                           ;RF_Control_B1.c: 387: status = 1;
  7664  1394  0020               	movlb	0	; select bank0
  7665  1395  01EE               	clrf	setRFSW_Control@status
  7666  1396  0AEE               	incf	setRFSW_Control@status,f
  7667  1397                     l6234:	
  7668                           
  7669                           ;RF_Control_B1.c: 388: }
  7670                           ;RF_Control_B1.c: 389: }
  7671                           ;RF_Control_B1.c: 391: if (status == 0) {
  7672  1397  0020               	movlb	0	; select bank0
  7673  1398  08EE               	movf	setRFSW_Control@status,f
  7674  1399  1D03               	skipz
  7675  139A  0008               	return
  7676                           
  7677                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7678  139B  086F               	movf	setRFSW_Control@sw,w
  7679  139C  3191  21DE  3193   	fcall	_setDimmerLights_SwOn
  7680                           
  7681                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7682  139F  0020               	movlb	0	; select bank0
  7683  13A0  086F               	movf	setRFSW_Control@sw,w
  7684  13A1  3192  22B6         	fcall	_setDimmerLights_SwOff
  7685  13A3  0008               	return
  7686  13A4                     __end_of_setRFSW_Control:	
  7687                           
  7688                           	psect	text30
  7689  0BA4                     __ptext30:	
  7690 ;; *************** function _setRFSW_AdjControl *****************
  7691 ;; Defined at:
  7692 ;;		line 400 in file "../src/RF_Control_B1.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;  sw              1    wreg     unsigned char 
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;  sw              1   72[BANK0 ] unsigned char 
  7697 ;;  status          1   71[BANK0 ] unsigned char 
  7698 ;; Return value:  Size  Location     Type
  7699 ;;		None               void
  7700 ;; Registers used:
  7701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7702 ;; Tracked objects:
  7703 ;;		On entry : 0/0
  7704 ;;		On exit  : 0/0
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7711 ;;Total ram usage:        4 bytes
  7712 ;; Hardware stack levels used:    1
  7713 ;; Hardware stack levels required when called:    7
  7714 ;; This function calls:
  7715 ;;		_getDimmerLights_PercentToValue
  7716 ;;		_getDimmerLights_Status
  7717 ;;		_setDimmerIntr_Dimming_RF
  7718 ;;		_setDimmerIntr_MaxmumValue
  7719 ;;		_setDimmerLights_DimmingRun
  7720 ;;		_setDimmerLights_SwOff
  7721 ;;		_setDimmerLights_SwOn
  7722 ;;		_setMemory_Modify
  7723 ;;		_setProductData
  7724 ;;		_setTxData
  7725 ;; This function is called by:
  7726 ;;		_setControl_Lights_Table
  7727 ;; This function uses a non-reentrant model
  7728 ;;
  7729                           
  7730                           
  7731                           ;psect for function _setRFSW_AdjControl
  7732  0BA4                     _setRFSW_AdjControl:	
  7733                           
  7734                           ;incstack = 0
  7735                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7736                           ;setRFSW_AdjControl@sw stored from wreg
  7737  0BA4  0020               	movlb	0	; select bank0
  7738  0BA5  00E8               	movwf	setRFSW_AdjControl@sw
  7739                           
  7740                           ;RF_Control_B1.c: 401: char status = 0;
  7741  0BA6  01E7               	clrf	setRFSW_AdjControl@status
  7742                           
  7743                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7744  0BA7  0868               	movf	setRFSW_AdjControl@sw,w
  7745  0BA8  319C  2498  318B   	fcall	_getDimmerLights_Status
  7746  0BAB  0020               	movlb	0	; select bank0
  7747  0BAC  00E5               	movwf	??_setRFSW_AdjControl
  7748  0BAD  0865               	movf	??_setRFSW_AdjControl,w
  7749  0BAE  00E7               	movwf	setRFSW_AdjControl@status
  7750                           
  7751                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7752  0BAF  3065               	movlw	101
  7753  0BB0  0022               	movlb	2	; select bank2
  7754  0BB1  0229               	subwf	(_RF_Data^(0+256)+9),w
  7755  0BB2  1C03               	skipc
  7756  0BB3  2BBB               	goto	l6246
  7757                           
  7758                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7759  0BB4  3064               	movlw	100
  7760  0BB5  0020               	movlb	0	; select bank0
  7761  0BB6  00E5               	movwf	??_setRFSW_AdjControl
  7762  0BB7  0865               	movf	??_setRFSW_AdjControl,w
  7763  0BB8  0022               	movlb	2	; select bank2
  7764  0BB9  00A9               	movwf	(_RF_Data^(0+256)+9)
  7765                           
  7766                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7767  0BBA  2BC0               	goto	l6250
  7768  0BBB                     l6246:	
  7769  0BBB  08A9               	movf	(_RF_Data^(0+256)+9),f
  7770  0BBC  1D03               	skipz
  7771  0BBD  2BC0               	goto	l6250
  7772                           
  7773                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7774  0BBE  01A9               	clrf	(_RF_Data^(0+256)+9)
  7775  0BBF  0AA9               	incf	(_RF_Data^(0+256)+9),f
  7776  0BC0                     l6250:	
  7777                           
  7778                           ;RF_Control_B1.c: 409: }
  7779                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7780  0BC0  0829               	movf	(_RF_Data^(0+256)+9),w
  7781  0BC1  0020               	movlb	0	; select bank0
  7782  0BC2  00E5               	movwf	??_setRFSW_AdjControl
  7783  0BC3  0865               	movf	??_setRFSW_AdjControl,w
  7784  0BC4  00E2               	movwf	setProductData@value
  7785  0BC5  3009               	movlw	9
  7786  0BC6  319B  23F2  318B   	fcall	_setProductData
  7787                           
  7788                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7789  0BC9  0020               	movlb	0	; select bank0
  7790  0BCA  0868               	movf	setRFSW_AdjControl@sw,w
  7791  0BCB  00E5               	movwf	??_setRFSW_AdjControl
  7792  0BCC  0865               	movf	??_setRFSW_AdjControl,w
  7793  0BCD  00E2               	movwf	setProductData@value
  7794  0BCE  300B               	movlw	11
  7795  0BCF  319B  23F2  318B   	fcall	_setProductData
  7796                           
  7797                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7798  0BD2  0020               	movlb	0	; select bank0
  7799  0BD3  0868               	movf	setRFSW_AdjControl@sw,w
  7800  0BD4  3E1A               	addlw	26
  7801  0BD5  0021               	movlb	1	; select bank1
  7802  0BD6  076E               	addwf	_product^(0+128),w
  7803  0BD7  0020               	movlb	0	; select bank0
  7804  0BD8  00E5               	movwf	??_setRFSW_AdjControl
  7805  0BD9  0865               	movf	??_setRFSW_AdjControl,w
  7806  0BDA  0086               	movwf	6
  7807  0BDB  3002               	movlw	2	; select bank4/5
  7808  0BDC  0087               	movwf	7
  7809  0BDD  0801               	movf	1,w
  7810  0BDE  00E6               	movwf	??_setRFSW_AdjControl+1
  7811  0BDF  0866               	movf	??_setRFSW_AdjControl+1,w
  7812  0BE0  00E2               	movwf	setProductData@value
  7813  0BE1  3011               	movlw	17
  7814  0BE2  319B  23F2  318B   	fcall	_setProductData
  7815                           
  7816                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7817  0BE5  0022               	movlb	2	; select bank2
  7818  0BE6  0829               	movf	(_RF_Data^(0+256)+9),w
  7819  0BE7  0020               	movlb	0	; select bank0
  7820  0BE8  00E5               	movwf	??_setRFSW_AdjControl
  7821  0BE9  0865               	movf	??_setRFSW_AdjControl,w
  7822  0BEA  00E2               	movwf	setProductData@value
  7823  0BEB  0868               	movf	setRFSW_AdjControl@sw,w
  7824  0BEC  3E14               	addlw	20
  7825  0BED  319B  23F2  318B   	fcall	_setProductData
  7826                           
  7827                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7828  0BF0  3001               	movlw	1
  7829  0BF1  319D  257E  318B   	fcall	_setMemory_Modify
  7830                           
  7831                           ;RF_Control_B1.c: 416: if (status == 1) {
  7832  0BF4  0020               	movlb	0	; select bank0
  7833  0BF5  0867               	movf	setRFSW_AdjControl@status,w
  7834  0BF6  3A01               	xorlw	1
  7835  0BF7  1D03               	skipz
  7836  0BF8  2C10               	goto	l6260
  7837                           
  7838                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7839  0BF9  0022               	movlb	2	; select bank2
  7840  0BFA  0829               	movf	(_RF_Data^(0+256)+9),w
  7841  0BFB  3197  279B  318B   	fcall	_getDimmerLights_PercentToValue
  7842  0BFE  0020               	movlb	0	; select bank0
  7843  0BFF  00E5               	movwf	??_setRFSW_AdjControl
  7844  0C00  0865               	movf	??_setRFSW_AdjControl,w
  7845  0C01  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  7846  0C02  0868               	movf	setRFSW_AdjControl@sw,w
  7847  0C03  319B  23FE  318B   	fcall	_setDimmerIntr_MaxmumValue
  7848                           
  7849                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  7850  0C06  0020               	movlb	0	; select bank0
  7851  0C07  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  7852  0C08  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  7853  0C09  0868               	movf	setRFSW_AdjControl@sw,w
  7854  0C0A  319E  2663  318B   	fcall	_setDimmerIntr_Dimming_RF
  7855                           
  7856                           ;RF_Control_B1.c: 419: setTxData();
  7857  0C0D  318F  2745         	fcall	_setTxData
  7858                           
  7859                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  7860  0C0F  0008               	return
  7861  0C10                     l6260:	
  7862  0C10  0020               	movlb	0	; select bank0
  7863  0C11  08E7               	movf	setRFSW_AdjControl@status,f
  7864  0C12  1D03               	skipz
  7865  0C13  0008               	return
  7866                           
  7867                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  7868  0C14  01A2               	clrf	setDimmerLights_DimmingRun@command
  7869  0C15  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  7870  0C16  0868               	movf	setRFSW_AdjControl@sw,w
  7871  0C17  319F  2714  318B   	fcall	_setDimmerLights_DimmingRun
  7872                           
  7873                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7874  0C1A  0020               	movlb	0	; select bank0
  7875  0C1B  0868               	movf	setRFSW_AdjControl@sw,w
  7876  0C1C  3191  21DE  318B   	fcall	_setDimmerLights_SwOn
  7877                           
  7878                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7879  0C1F  0020               	movlb	0	; select bank0
  7880  0C20  0868               	movf	setRFSW_AdjControl@sw,w
  7881  0C21  3192  22B6         	fcall	_setDimmerLights_SwOff
  7882  0C23  0008               	return
  7883  0C24                     __end_of_setRFSW_AdjControl:	
  7884                           
  7885                           	psect	text31
  7886  1D7E                     __ptext31:	
  7887 ;; *************** function _setMemory_Modify *****************
  7888 ;; Defined at:
  7889 ;;		line 1070 in file "../src/MCU_B1.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;  command         1    wreg     unsigned char 
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;  command         1    1[BANK0 ] unsigned char 
  7894 ;; Return value:  Size  Location     Type
  7895 ;;		None               void
  7896 ;; Registers used:
  7897 ;;		wreg, status,2, status,0
  7898 ;; Tracked objects:
  7899 ;;		On entry : 0/0
  7900 ;;		On exit  : 0/0
  7901 ;;		Unchanged: 0/0
  7902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7905 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;Total ram usage:        2 bytes
  7908 ;; Hardware stack levels used:    1
  7909 ;; Hardware stack levels required when called:    4
  7910 ;; This function calls:
  7911 ;;		Nothing
  7912 ;; This function is called by:
  7913 ;;		_setLog_Code
  7914 ;;		_setRFSW_AdjControl
  7915 ;; This function uses a non-reentrant model
  7916 ;;
  7917                           
  7918                           
  7919                           ;psect for function _setMemory_Modify
  7920  1D7E                     _setMemory_Modify:	
  7921                           
  7922                           ;incstack = 0
  7923                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7924                           ;setMemory_Modify@command stored from wreg
  7925  1D7E  0020               	movlb	0	; select bank0
  7926  1D7F  00A1               	movwf	setMemory_Modify@command
  7927                           
  7928                           ;MCU_B1.c: 1071: Memory.Modify = command == 1 ? 1 : 0;
  7929  1D80  0821               	movf	setMemory_Modify@command,w
  7930  1D81  3A01               	xorlw	1
  7931  1D82  3000               	movlw	0
  7932  1D83  1903               	skipnz
  7933  1D84  3001               	movlw	1
  7934  1D85  00A0               	movwf	??_setMemory_Modify
  7935  1D86  0023               	movlb	3	; select bank3
  7936  1D87  0849               	movf	(_Memory^(0+384)+36),w
  7937  1D88  0020               	movlb	0	; select bank0
  7938  1D89  0620               	xorwf	??_setMemory_Modify,w
  7939  1D8A  39FE               	andlw	-2
  7940  1D8B  0620               	xorwf	??_setMemory_Modify,w
  7941  1D8C  0023               	movlb	3	; select bank3
  7942  1D8D  00C9               	movwf	(_Memory^(0+384)+36)
  7943                           
  7944                           ;MCU_B1.c: 1072: Memory.Time = 0;
  7945  1D8E  01C7               	clrf	(_Memory^(0+384)+34)
  7946  1D8F  01C8               	clrf	((_Memory+1)^(0+384)+34)
  7947  1D90  0008               	return
  7948  1D91                     __end_of_setMemory_Modify:	
  7949                           
  7950                           	psect	text32
  7951  1F14                     __ptext32:	
  7952 ;; *************** function _setDimmerLights_DimmingRun *****************
  7953 ;; Defined at:
  7954 ;;		line 1012 in file "../src/Dimmer_B1.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;  lights          1    wreg     unsigned char 
  7957 ;;  command         1    2[BANK0 ] unsigned char 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;  lights          1    4[BANK0 ] unsigned char 
  7960 ;; Return value:  Size  Location     Type
  7961 ;;		None               void
  7962 ;; Registers used:
  7963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7969 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;Total ram usage:        3 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    5
  7976 ;; This function calls:
  7977 ;;		_DimmerLights_SelectPointer
  7978 ;; This function is called by:
  7979 ;;		_setRFSW_AdjControl
  7980 ;; This function uses a non-reentrant model
  7981 ;;
  7982                           
  7983                           
  7984                           ;psect for function _setDimmerLights_DimmingRun
  7985  1F14                     _setDimmerLights_DimmingRun:	
  7986                           
  7987                           ;incstack = 0
  7988                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7989                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7990  1F14  0020               	movlb	0	; select bank0
  7991  1F15  00A4               	movwf	setDimmerLights_DimmingRun@lights
  7992                           
  7993                           ;Dimmer_B1.c: 1013: DimmerLights_SelectPointer(lights);
  7994  1F16  0824               	movf	setDimmerLights_DimmingRun@lights,w
  7995  1F17  319B  23E6         	fcall	_DimmerLights_SelectPointer
  7996                           
  7997                           ;Dimmer_B1.c: 1014: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7998  1F19  0020               	movlb	0	; select bank0
  7999  1F1A  0822               	movf	setDimmerLights_DimmingRun@command,w
  8000  1F1B  3A01               	xorlw	1
  8001  1F1C  3000               	movlw	0
  8002  1F1D  1903               	skipnz
  8003  1F1E  3001               	movlw	1
  8004  1F1F  00A3               	movwf	??_setDimmerLights_DimmingRun
  8005  1F20  0021               	movlb	1	; select bank1
  8006  1F21  0A52               	incf	_DimmerLights^(0+128),w
  8007  1F22  0086               	movwf	6
  8008  1F23  3001               	movlw	1	; select bank2/3
  8009  1F24  0087               	movwf	7
  8010  1F25  0020               	movlb	0	; select bank0
  8011  1F26  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8012  1F27  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8013  1F28  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8014  1F29  0801               	movf	1,w
  8015  1F2A  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8016  1F2B  39BF               	andlw	-65
  8017  1F2C  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8018  1F2D  0081               	movwf	1
  8019  1F2E  0008               	return
  8020  1F2F                     __end_of_setDimmerLights_DimmingRun:	
  8021                           
  8022                           	psect	text33
  8023  1CDC                     __ptext33:	
  8024 ;; *************** function _getRF_KeyStatus *****************
  8025 ;; Defined at:
  8026 ;;		line 166 in file "../src/RF_Control_B1.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;		None
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  key             1    1[BANK0 ] unsigned char 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      unsigned char 
  8033 ;; Registers used:
  8034 ;;		wreg, status,2
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;Total ram usage:        3 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    4
  8047 ;; This function calls:
  8048 ;;		Nothing
  8049 ;; This function is called by:
  8050 ;;		_setRF_Main
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           
  8055                           ;psect for function _getRF_KeyStatus
  8056  1CDC                     _getRF_KeyStatus:	
  8057                           
  8058                           ;RF_Control_B1.c: 167: char key = 0;
  8059                           
  8060                           ;incstack = 0
  8061                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8062  1CDC  0020               	movlb	0	; select bank0
  8063  1CDD  01A1               	clrf	getRF_KeyStatus@key
  8064                           
  8065                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8066  1CDE  01A2               	clrf	_getRF_KeyStatus$5086
  8067  1CDF  0AA2               	incf	_getRF_KeyStatus$5086,f
  8068  1CE0  1F0C               	btfss	12,6	;volatile
  8069  1CE1  1A0C               	btfsc	12,4	;volatile
  8070  1CE2  2CE7               	goto	l6808
  8071  1CE3  1C0C               	btfss	12,0	;volatile
  8072  1CE4  1B8C               	btfsc	12,7	;volatile
  8073  1CE5  2CE7               	goto	l6808
  8074  1CE6  01A2               	clrf	_getRF_KeyStatus$5086
  8075  1CE7                     l6808:	
  8076  1CE7  0822               	movf	_getRF_KeyStatus$5086,w
  8077  1CE8  00A0               	movwf	??_getRF_KeyStatus
  8078  1CE9  0820               	movf	??_getRF_KeyStatus,w
  8079  1CEA  00A1               	movwf	getRF_KeyStatus@key
  8080                           
  8081                           ;RF_Control_B1.c: 179: return key;
  8082  1CEB  0821               	movf	getRF_KeyStatus@key,w
  8083  1CEC  0008               	return
  8084  1CED                     __end_of_getRF_KeyStatus:	
  8085                           
  8086                           	psect	text34
  8087  1CCB                     __ptext34:	
  8088 ;; *************** function _getBuz_GO *****************
  8089 ;; Defined at:
  8090 ;;		line 82 in file "../src/Buzzer_B1.c"
  8091 ;; Parameters:    Size  Location     Type
  8092 ;;		None
  8093 ;; Auto vars:     Size  Location     Type
  8094 ;;  i               2    4[BANK0 ] int 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;                  2    0[BANK0 ] int 
  8097 ;; Registers used:
  8098 ;;		wreg, status,2, status,0
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8104 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;Total ram usage:        6 bytes
  8109 ;; Hardware stack levels used:    1
  8110 ;; Hardware stack levels required when called:    4
  8111 ;; This function calls:
  8112 ;;		Nothing
  8113 ;; This function is called by:
  8114 ;;		_setRF_Main
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           
  8119                           ;psect for function _getBuz_GO
  8120  1CCB                     _getBuz_GO:	
  8121                           
  8122                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8123                           
  8124                           ;incstack = 0
  8125                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8126  1CCB  0021               	movlb	1	; select bank1
  8127  1CCC  0C3B               	rrf	_Buz1^(0+128),w
  8128  1CCD  3901               	andlw	1
  8129  1CCE  0020               	movlb	0	; select bank0
  8130  1CCF  00A2               	movwf	??_getBuz_GO
  8131  1CD0  01A3               	clrf	??_getBuz_GO+1
  8132  1CD1  0822               	movf	??_getBuz_GO,w
  8133  1CD2  00A4               	movwf	getBuz_GO@i
  8134  1CD3  0823               	movf	??_getBuz_GO+1,w
  8135  1CD4  00A5               	movwf	getBuz_GO@i+1
  8136                           
  8137                           ;Buzzer_B1.c: 84: return i;
  8138  1CD5  0825               	movf	getBuz_GO@i+1,w
  8139  1CD6  01A1               	clrf	?_getBuz_GO+1
  8140  1CD7  07A1               	addwf	?_getBuz_GO+1,f
  8141  1CD8  0824               	movf	getBuz_GO@i,w
  8142  1CD9  01A0               	clrf	?_getBuz_GO
  8143  1CDA  07A0               	addwf	?_getBuz_GO,f
  8144  1CDB  0008               	return
  8145  1CDC                     __end_of_getBuz_GO:	
  8146                           
  8147                           	psect	text35
  8148  1C79                     __ptext35:	
  8149 ;; *************** function _RF_RxDisable *****************
  8150 ;; Defined at:
  8151 ;;		line 154 in file "../src/RF_Control_B1.c"
  8152 ;; Parameters:    Size  Location     Type
  8153 ;;		None
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;		None
  8156 ;; Return value:  Size  Location     Type
  8157 ;;		None               void
  8158 ;; Registers used:
  8159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;Total ram usage:        0 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; Hardware stack levels required when called:    6
  8172 ;; This function calls:
  8173 ;;		_CC2500_WriteCommand
  8174 ;; This function is called by:
  8175 ;;		_setRF_Main
  8176 ;; This function uses a non-reentrant model
  8177 ;;
  8178                           
  8179                           
  8180                           ;psect for function _RF_RxDisable
  8181  1C79                     _RF_RxDisable:	
  8182                           
  8183                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8184                           
  8185                           ;incstack = 0
  8186                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8187  1C79  0021               	movlb	1	; select bank1
  8188  1C7A  18A0               	btfsc	_RF1^(0+128),1
  8189  1C7B  2C7E               	goto	l2124
  8190  1C7C  1DA0               	btfss	_RF1^(0+128),3
  8191  1C7D  0008               	return
  8192  1C7E                     l2124:	
  8193                           
  8194                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8195  1C7E  11A0               	bcf	_RF1^(0+128),3
  8196                           
  8197                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8198  1C7F  10A0               	bcf	_RF1^(0+128),1
  8199                           
  8200                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8201  1C80  3036               	movlw	54
  8202  1C81  319E  26FA  319C   	fcall	_CC2500_WriteCommand
  8203                           
  8204                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8205  1C84  303A               	movlw	58
  8206  1C85  319E  26FA         	fcall	_CC2500_WriteCommand
  8207  1C87  0008               	return
  8208  1C88                     __end_of_RF_RxDisable:	
  8209                           
  8210                           	psect	text36
  8211  08FD                     __ptext36:	
  8212 ;; *************** function _CC2500_TxData *****************
  8213 ;; Defined at:
  8214 ;;		line 32 in file "../src/CC2500_B1.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;		None
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8219 ;; Return value:  Size  Location     Type
  8220 ;;		None               void
  8221 ;; Registers used:
  8222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;Total ram usage:        2 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    6
  8235 ;; This function calls:
  8236 ;;		_CC2500_WriteByte
  8237 ;;		_CC2500_WriteCommand
  8238 ;;		_RF_Timeout_Counter
  8239 ;;		_setRF_TimeoutCleared
  8240 ;; This function is called by:
  8241 ;;		_setRF_Main
  8242 ;; This function uses a non-reentrant model
  8243 ;;
  8244                           
  8245                           
  8246                           ;psect for function _CC2500_TxData
  8247  08FD                     _CC2500_TxData:	
  8248                           
  8249                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8250                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8251                           
  8252                           ;incstack = 0
  8253                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8254  08FD  3036               	movlw	54
  8255  08FE  319E  26FA  3188   	fcall	_CC2500_WriteCommand
  8256                           
  8257                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8258  0901  303B               	movlw	59
  8259  0902  319E  26FA  3188   	fcall	_CC2500_WriteCommand
  8260                           
  8261                           ;CC2500_B1.c: 38: RC0 = 0;
  8262  0905  0020               	movlb	0	; select bank0
  8263  0906  100E               	bcf	14,0	;volatile
  8264                           
  8265                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8266  0907  307F               	movlw	127
  8267  0908  00A4               	movwf	??_CC2500_TxData
  8268  0909  0824               	movf	??_CC2500_TxData,w
  8269  090A  0021               	movlb	1	; select bank1
  8270  090B  00D5               	movwf	_SPI0Buffer^(0+128)
  8271                           
  8272                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8273  090C  2910               	goto	l8330
  8274  090D                     l8328:	
  8275                           
  8276                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8277  090D  319D  25CB  3188   	fcall	_RF_Timeout_Counter
  8278  0910                     l8330:	
  8279  0910  0020               	movlb	0	; select bank0
  8280  0911  1E8E               	btfss	14,5	;volatile
  8281  0912  2916               	goto	l8334
  8282  0913  0021               	movlb	1	; select bank1
  8283  0914  1F21               	btfss	(_RF1^(0+128)+1),6
  8284  0915  290D               	goto	l8328
  8285  0916                     l8334:	
  8286                           
  8287                           ;CC2500_B1.c: 42: };
  8288                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8289  0916  319B  233D  3188   	fcall	_setRF_TimeoutCleared
  8290                           
  8291                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8292  0919  319E  26AD  3188   	fcall	_CC2500_WriteByte
  8293                           
  8294                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8295  091C  0021               	movlb	1	; select bank1
  8296  091D  0858               	movf	_Tx_Length^(0+128),w
  8297  091E  0020               	movlb	0	; select bank0
  8298  091F  00A4               	movwf	??_CC2500_TxData
  8299  0920  0824               	movf	??_CC2500_TxData,w
  8300  0921  0021               	movlb	1	; select bank1
  8301  0922  00D5               	movwf	_SPI0Buffer^(0+128)
  8302                           
  8303                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8304  0923  319E  26AD  3188   	fcall	_CC2500_WriteByte
  8305                           
  8306                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8307  0926  0020               	movlb	0	; select bank0
  8308  0927  01A5               	clrf	CC2500_TxData@loop_e
  8309  0928                     l8348:	
  8310  0928  0021               	movlb	1	; select bank1
  8311  0929  0858               	movf	_Tx_Length^(0+128),w
  8312  092A  0020               	movlb	0	; select bank0
  8313  092B  0225               	subwf	CC2500_TxData@loop_e,w
  8314  092C  1803               	btfsc	3,0
  8315  092D  2941               	goto	l235
  8316                           
  8317                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8318  092E  0825               	movf	CC2500_TxData@loop_e,w
  8319  092F  3E20               	addlw	_RF_Data& (0+255)
  8320  0930  0086               	movwf	6
  8321  0931  3001               	movlw	1	; select bank2/3
  8322  0932  0087               	movwf	7
  8323  0933  0801               	movf	1,w
  8324  0934  00A4               	movwf	??_CC2500_TxData
  8325  0935  0824               	movf	??_CC2500_TxData,w
  8326  0936  0021               	movlb	1	; select bank1
  8327  0937  00D5               	movwf	_SPI0Buffer^(0+128)
  8328                           
  8329                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8330  0938  319E  26AD  3188   	fcall	_CC2500_WriteByte
  8331  093B  3001               	movlw	1
  8332  093C  0020               	movlb	0	; select bank0
  8333  093D  00A4               	movwf	??_CC2500_TxData
  8334  093E  0824               	movf	??_CC2500_TxData,w
  8335  093F  07A5               	addwf	CC2500_TxData@loop_e,f
  8336  0940  2928               	goto	l8348
  8337  0941                     l235:	
  8338                           
  8339                           ;CC2500_B1.c: 51: }
  8340                           ;CC2500_B1.c: 52: RC0 = 1;
  8341  0941  140E               	bsf	14,0	;volatile
  8342                           
  8343                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8344  0942  3035               	movlw	53
  8345  0943  319E  26FA  3188   	fcall	_CC2500_WriteCommand
  8346                           
  8347                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8348  0946  294A               	goto	l8354
  8349  0947                     l8352:	
  8350                           
  8351                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8352  0947  319D  25CB  3188   	fcall	_RF_Timeout_Counter
  8353  094A                     l8354:	
  8354  094A  0020               	movlb	0	; select bank0
  8355  094B  188E               	btfsc	14,1	;volatile
  8356  094C  2950               	goto	l8358
  8357  094D  0021               	movlb	1	; select bank1
  8358  094E  1F21               	btfss	(_RF1^(0+128)+1),6
  8359  094F  2947               	goto	l8352
  8360  0950                     l8358:	
  8361                           
  8362                           ;CC2500_B1.c: 56: };
  8363                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8364  0950  319B  233D  3188   	fcall	_setRF_TimeoutCleared
  8365                           
  8366                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8367  0953  2957               	goto	l8362
  8368  0954                     l8360:	
  8369                           
  8370                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8371  0954  319D  25CB  3188   	fcall	_RF_Timeout_Counter
  8372  0957                     l8362:	
  8373  0957  0020               	movlb	0	; select bank0
  8374  0958  1C8E               	btfss	14,1	;volatile
  8375  0959  295D               	goto	l8366
  8376  095A  0021               	movlb	1	; select bank1
  8377  095B  1F21               	btfss	(_RF1^(0+128)+1),6
  8378  095C  2954               	goto	l8360
  8379  095D                     l8366:	
  8380                           
  8381                           ;CC2500_B1.c: 61: };
  8382                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8383  095D  319B  233D  3188   	fcall	_setRF_TimeoutCleared
  8384                           
  8385                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8386  0960  3036               	movlw	54
  8387  0961  319E  26FA  3188   	fcall	_CC2500_WriteCommand
  8388                           
  8389                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8390  0964  303B               	movlw	59
  8391  0965  319E  26FA         	fcall	_CC2500_WriteCommand
  8392                           
  8393                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8394  0967  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8395  0968  0008               	return
  8396  0969                     __end_of_CC2500_TxData:	
  8397                           
  8398                           	psect	text37
  8399  0892                     __ptext37:	
  8400 ;; *************** function _CC2500_RxData *****************
  8401 ;; Defined at:
  8402 ;;		line 73 in file "../src/CC2500_B1.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8407 ;; Return value:  Size  Location     Type
  8408 ;;		None               void
  8409 ;; Registers used:
  8410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;Total ram usage:        2 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    6
  8423 ;; This function calls:
  8424 ;;		_CC2500_ReadByte
  8425 ;;		_CC2500_ReadStatus
  8426 ;;		_CC2500_WriteByte
  8427 ;;		_CC2500_WriteCommand
  8428 ;;		_RF_Timeout_Counter
  8429 ;;		_setRF_TimeoutCleared
  8430 ;; This function is called by:
  8431 ;;		_setRF_Main
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           
  8436                           ;psect for function _CC2500_RxData
  8437  0892                     _CC2500_RxData:	
  8438                           
  8439                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8440                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8441                           
  8442                           ;incstack = 0
  8443                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8444  0892  0020               	movlb	0	; select bank0
  8445  0893  188E               	btfsc	14,1	;volatile
  8446  0894  0008               	return
  8447                           
  8448                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8449  0895  303B               	movlw	59
  8450  0896  3190  20F9  3188   	fcall	_CC2500_ReadStatus
  8451                           
  8452                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8453  0899  0021               	movlb	1	; select bank1
  8454  089A  085B               	movf	_s_data^(0+128),w
  8455  089B  1903               	btfsc	3,2
  8456  089C  0008               	return
  8457                           
  8458                           ;CC2500_B1.c: 90: RC0 = 0;
  8459  089D  0020               	movlb	0	; select bank0
  8460  089E  100E               	bcf	14,0	;volatile
  8461                           
  8462                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8463  089F  30FF               	movlw	255
  8464  08A0  00A4               	movwf	??_CC2500_RxData
  8465  08A1  0824               	movf	??_CC2500_RxData,w
  8466  08A2  0021               	movlb	1	; select bank1
  8467  08A3  00D5               	movwf	_SPI0Buffer^(0+128)
  8468                           
  8469                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8470  08A4  28A8               	goto	l8386
  8471  08A5                     l8384:	
  8472                           
  8473                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8474  08A5  319D  25CB  3188   	fcall	_RF_Timeout_Counter
  8475  08A8                     l8386:	
  8476  08A8  0020               	movlb	0	; select bank0
  8477  08A9  1E8E               	btfss	14,5	;volatile
  8478  08AA  28AE               	goto	l8390
  8479  08AB  0021               	movlb	1	; select bank1
  8480  08AC  1F21               	btfss	(_RF1^(0+128)+1),6
  8481  08AD  28A5               	goto	l8384
  8482  08AE                     l8390:	
  8483                           
  8484                           ;CC2500_B1.c: 95: };
  8485                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8486  08AE  319B  233D  3188   	fcall	_setRF_TimeoutCleared
  8487                           
  8488                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8489  08B1  319E  26AD  3188   	fcall	_CC2500_WriteByte
  8490                           
  8491                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8492  08B4  319F  2767  3188   	fcall	_CC2500_ReadByte
  8493                           
  8494                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8495  08B7  0021               	movlb	1	; select bank1
  8496  08B8  0855               	movf	_SPI0Buffer^(0+128),w
  8497  08B9  0020               	movlb	0	; select bank0
  8498  08BA  00A4               	movwf	??_CC2500_RxData
  8499  08BB  0824               	movf	??_CC2500_RxData,w
  8500  08BC  0021               	movlb	1	; select bank1
  8501  08BD  00D4               	movwf	_Rx_Length^(0+128)
  8502                           
  8503                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8504  08BE  0020               	movlb	0	; select bank0
  8505  08BF  01A5               	clrf	CC2500_RxData@loop_f
  8506  08C0                     l8406:	
  8507  08C0  0021               	movlb	1	; select bank1
  8508  08C1  0854               	movf	_Rx_Length^(0+128),w
  8509  08C2  0020               	movlb	0	; select bank0
  8510  08C3  0225               	subwf	CC2500_RxData@loop_f,w
  8511  08C4  1803               	btfsc	3,0
  8512  08C5  28D9               	goto	l8408
  8513                           
  8514                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8515  08C6  319F  2767  3188   	fcall	_CC2500_ReadByte
  8516                           
  8517                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8518  08C9  0021               	movlb	1	; select bank1
  8519  08CA  0855               	movf	_SPI0Buffer^(0+128),w
  8520  08CB  0020               	movlb	0	; select bank0
  8521  08CC  00A4               	movwf	??_CC2500_RxData
  8522  08CD  0825               	movf	CC2500_RxData@loop_f,w
  8523  08CE  3E20               	addlw	_RF_Data& (0+255)
  8524  08CF  0086               	movwf	6
  8525  08D0  3001               	movlw	1	; select bank2/3
  8526  08D1  0087               	movwf	7
  8527  08D2  0824               	movf	??_CC2500_RxData,w
  8528  08D3  0081               	movwf	1
  8529  08D4  3001               	movlw	1
  8530  08D5  00A4               	movwf	??_CC2500_RxData
  8531  08D6  0824               	movf	??_CC2500_RxData,w
  8532  08D7  07A5               	addwf	CC2500_RxData@loop_f,f
  8533  08D8  28C0               	goto	l8406
  8534  08D9                     l8408:	
  8535                           
  8536                           ;CC2500_B1.c: 104: }
  8537                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8538  08D9  319F  2767  3188   	fcall	_CC2500_ReadByte
  8539                           
  8540                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8541  08DC  0021               	movlb	1	; select bank1
  8542  08DD  0855               	movf	_SPI0Buffer^(0+128),w
  8543  08DE  0020               	movlb	0	; select bank0
  8544  08DF  00A4               	movwf	??_CC2500_RxData
  8545  08E0  0824               	movf	??_CC2500_RxData,w
  8546  08E1  0022               	movlb	2	; select bank2
  8547  08E2  00C7               	movwf	_RSSI^(0+256)
  8548                           
  8549                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8550  08E3  319F  2767  3188   	fcall	_CC2500_ReadByte
  8551                           
  8552                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8553  08E6  0021               	movlb	1	; select bank1
  8554  08E7  0855               	movf	_SPI0Buffer^(0+128),w
  8555  08E8  0020               	movlb	0	; select bank0
  8556  08E9  00A4               	movwf	??_CC2500_RxData
  8557  08EA  0824               	movf	??_CC2500_RxData,w
  8558  08EB  0021               	movlb	1	; select bank1
  8559  08EC  00CF               	movwf	_CRC^(0+128)
  8560                           
  8561                           ;CC2500_B1.c: 109: RC0 = 1;
  8562  08ED  0020               	movlb	0	; select bank0
  8563  08EE  140E               	bsf	14,0	;volatile
  8564                           
  8565                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8566  08EF  0021               	movlb	1	; select bank1
  8567  08F0  1BCF               	btfsc	_CRC^(0+128),7
  8568                           
  8569                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8570  08F1  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8571                           
  8572                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8573  08F2  11A0               	bcf	_RF1^(0+128),3
  8574                           
  8575                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8576  08F3  14A0               	bsf	_RF1^(0+128),1
  8577                           
  8578                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8579  08F4  3036               	movlw	54
  8580  08F5  319E  26FA  3188   	fcall	_CC2500_WriteCommand
  8581                           
  8582                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8583  08F8  303A               	movlw	58
  8584  08F9  319E  26FA         	fcall	_CC2500_WriteCommand
  8585  08FB  0021               	movlb	1	; select bank1
  8586  08FC  0008               	return
  8587  08FD                     __end_of_CC2500_RxData:	
  8588                           
  8589                           	psect	text38
  8590  10F9                     __ptext38:	
  8591 ;; *************** function _CC2500_ReadStatus *****************
  8592 ;; Defined at:
  8593 ;;		line 308 in file "../src/CC2500_B1.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  status_addr     1    wreg     unsigned char 
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8598 ;; Return value:  Size  Location     Type
  8599 ;;		None               void
  8600 ;; Registers used:
  8601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;Total ram usage:        2 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    5
  8614 ;; This function calls:
  8615 ;;		_CC2500_ReadByte
  8616 ;;		_CC2500_WriteByte
  8617 ;;		_RF_Timeout_Counter
  8618 ;;		_setRF_TimeoutCleared
  8619 ;; This function is called by:
  8620 ;;		_CC2500_RxData
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           
  8625                           ;psect for function _CC2500_ReadStatus
  8626  10F9                     _CC2500_ReadStatus:	
  8627                           
  8628                           ;incstack = 0
  8629                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8630                           ;CC2500_ReadStatus@status_addr stored from wreg
  8631  10F9  0020               	movlb	0	; select bank0
  8632  10FA  00A3               	movwf	CC2500_ReadStatus@status_addr
  8633                           
  8634                           ;CC2500_B1.c: 309: RC0 = 0;
  8635  10FB  100E               	bcf	14,0	;volatile
  8636                           
  8637                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8638  10FC  0823               	movf	CC2500_ReadStatus@status_addr,w
  8639  10FD  3EC0               	addlw	192
  8640  10FE  00A2               	movwf	??_CC2500_ReadStatus
  8641  10FF  0822               	movf	??_CC2500_ReadStatus,w
  8642  1100  0021               	movlb	1	; select bank1
  8643  1101  00D5               	movwf	_SPI0Buffer^(0+128)
  8644                           
  8645                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8646  1102  2906               	goto	l8236
  8647  1103                     l8234:	
  8648                           
  8649                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8650  1103  319D  25CB  3190   	fcall	_RF_Timeout_Counter
  8651  1106                     l8236:	
  8652  1106  0020               	movlb	0	; select bank0
  8653  1107  1E8E               	btfss	14,5	;volatile
  8654  1108  290C               	goto	l8240
  8655  1109  0021               	movlb	1	; select bank1
  8656  110A  1F21               	btfss	(_RF1^(0+128)+1),6
  8657  110B  2903               	goto	l8234
  8658  110C                     l8240:	
  8659                           
  8660                           ;CC2500_B1.c: 314: };
  8661                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8662  110C  319B  233D  3190   	fcall	_setRF_TimeoutCleared
  8663                           
  8664                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8665  110F  319E  26AD  3190   	fcall	_CC2500_WriteByte
  8666                           
  8667                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8668  1112  319F  2767         	fcall	_CC2500_ReadByte
  8669                           
  8670                           ;CC2500_B1.c: 319: RC0 = 1;
  8671  1114  0020               	movlb	0	; select bank0
  8672  1115  140E               	bsf	14,0	;volatile
  8673                           
  8674                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8675  1116  0021               	movlb	1	; select bank1
  8676  1117  0855               	movf	_SPI0Buffer^(0+128),w
  8677  1118  0020               	movlb	0	; select bank0
  8678  1119  00A2               	movwf	??_CC2500_ReadStatus
  8679  111A  0822               	movf	??_CC2500_ReadStatus,w
  8680  111B  0021               	movlb	1	; select bank1
  8681  111C  00DB               	movwf	_s_data^(0+128)
  8682  111D  0008               	return
  8683  111E                     __end_of_CC2500_ReadStatus:	
  8684                           
  8685                           	psect	text39
  8686  1F67                     __ptext39:	
  8687 ;; *************** function _CC2500_ReadByte *****************
  8688 ;; Defined at:
  8689 ;;		line 242 in file "../src/CC2500_B1.c"
  8690 ;; Parameters:    Size  Location     Type
  8691 ;;		None
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8694 ;; Return value:  Size  Location     Type
  8695 ;;		None               void
  8696 ;; Registers used:
  8697 ;;		wreg, status,2, status,0
  8698 ;; Tracked objects:
  8699 ;;		On entry : 0/0
  8700 ;;		On exit  : 0/0
  8701 ;;		Unchanged: 0/0
  8702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;Total ram usage:        2 bytes
  8708 ;; Hardware stack levels used:    1
  8709 ;; Hardware stack levels required when called:    4
  8710 ;; This function calls:
  8711 ;;		Nothing
  8712 ;; This function is called by:
  8713 ;;		_CC2500_RxData
  8714 ;;		_CC2500_ReadStatus
  8715 ;;		_CC2500_ReadREG
  8716 ;; This function uses a non-reentrant model
  8717 ;;
  8718                           
  8719                           
  8720                           ;psect for function _CC2500_ReadByte
  8721  1F67                     _CC2500_ReadByte:	
  8722                           
  8723                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8724                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8725                           
  8726                           ;incstack = 0
  8727                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8728  1F67  0020               	movlb	0	; select bank0
  8729  1F68  01A1               	clrf	CC2500_ReadByte@loop_b
  8730  1F69                     L2:	
  8731  1F69  3008               	movlw	8
  8732  1F6A  0221               	subwf	CC2500_ReadByte@loop_b,w
  8733  1F6B  1803               	btfsc	3,0
  8734  1F6C  0008               	return
  8735                           
  8736                           ;CC2500_B1.c: 245: RC3 = 1;
  8737  1F6D  158E               	bsf	14,3	;volatile
  8738                           
  8739                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8740  1F6E  1003               	clrc
  8741  1F6F  0021               	movlb	1	; select bank1
  8742  1F70  0DD5               	rlf	_SPI0Buffer^(0+128),f
  8743                           
  8744                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8745  1F71  0020               	movlb	0	; select bank0
  8746  1F72  1E8E               	btfss	14,5	;volatile
  8747  1F73  2F77               	goto	l8206
  8748                           
  8749                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8750  1F74  0021               	movlb	1	; select bank1
  8751  1F75  1455               	bsf	_SPI0Buffer^(0+128),0
  8752  1F76  2F7D               	goto	l8208
  8753  1F77                     l8206:	
  8754                           
  8755                           ;CC2500_B1.c: 249: else
  8756                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8757  1F77  30FE               	movlw	254
  8758  1F78  0020               	movlb	0	; select bank0
  8759  1F79  00A0               	movwf	??_CC2500_ReadByte
  8760  1F7A  0820               	movf	??_CC2500_ReadByte,w
  8761  1F7B  0021               	movlb	1	; select bank1
  8762  1F7C  05D5               	andwf	_SPI0Buffer^(0+128),f
  8763  1F7D                     l8208:	
  8764                           
  8765                           ;CC2500_B1.c: 251: RC3 = 0;
  8766  1F7D  0020               	movlb	0	; select bank0
  8767  1F7E  118E               	bcf	14,3	;volatile
  8768  1F7F  3001               	movlw	1
  8769  1F80  00A0               	movwf	??_CC2500_ReadByte
  8770  1F81  0820               	movf	??_CC2500_ReadByte,w
  8771  1F82  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8772  1F83  2F69               	goto	L2
  8773  1F84                     __end_of_CC2500_ReadByte:	
  8774                           
  8775                           	psect	text40
  8776  1DE0                     __ptext40:	
  8777 ;; *************** function _CC2500_PowerOnInitial *****************
  8778 ;; Defined at:
  8779 ;;		line 126 in file "../src/CC2500_B1.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;		None
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;		None               void
  8786 ;; Registers used:
  8787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;Total ram usage:        0 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    7
  8800 ;; This function calls:
  8801 ;;		_CC2500_ClearRXFIFO
  8802 ;;		_CC2500_ClearTXFIFO
  8803 ;;		_CC2500_FrequencyCabr
  8804 ;;		_CC2500_InitPATable
  8805 ;;		_CC2500_InitSetREG
  8806 ;;		_CC2500_PowerRST
  8807 ;;		_CC2500_SIDLEMode
  8808 ;; This function is called by:
  8809 ;;		_main
  8810 ;;		_setRF_Main
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           
  8815                           ;psect for function _CC2500_PowerOnInitial
  8816  1DE0                     _CC2500_PowerOnInitial:	
  8817                           
  8818                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8819                           
  8820                           ;incstack = 0
  8821                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8822  1DE0  3193  23E4  319D   	fcall	_CC2500_PowerRST
  8823                           
  8824                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8825  1DE3  3191  211E  319D   	fcall	_CC2500_InitSetREG
  8826                           
  8827                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8828  1DE6  319F  27C1  319D   	fcall	_CC2500_InitPATable
  8829                           
  8830                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8831  1DE9  319B  2345  319D   	fcall	_CC2500_ClearTXFIFO
  8832                           
  8833                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8834  1DEC  319B  2341  319D   	fcall	_CC2500_ClearRXFIFO
  8835                           
  8836                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8837  1DEF  319C  2452  319D   	fcall	_CC2500_FrequencyCabr
  8838                           
  8839                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8840  1DF2  319B  2349         	fcall	_CC2500_SIDLEMode
  8841  1DF4  0008               	return
  8842  1DF5                     __end_of_CC2500_PowerOnInitial:	
  8843                           
  8844                           	psect	text41
  8845  1B49                     __ptext41:	
  8846 ;; *************** function _CC2500_SIDLEMode *****************
  8847 ;; Defined at:
  8848 ;;		line 216 in file "../src/CC2500_B1.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;		None
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;		None
  8853 ;; Return value:  Size  Location     Type
  8854 ;;		None               void
  8855 ;; Registers used:
  8856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;Total ram usage:        0 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:    6
  8869 ;; This function calls:
  8870 ;;		_CC2500_WriteCommand
  8871 ;; This function is called by:
  8872 ;;		_CC2500_PowerOnInitial
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           
  8877                           ;psect for function _CC2500_SIDLEMode
  8878  1B49                     _CC2500_SIDLEMode:	
  8879                           
  8880                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8881                           
  8882                           ;incstack = 0
  8883                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8884  1B49  3036               	movlw	54
  8885  1B4A  319E  26FA         	fcall	_CC2500_WriteCommand
  8886  1B4C  0008               	return
  8887  1B4D                     __end_of_CC2500_SIDLEMode:	
  8888                           
  8889                           	psect	text42
  8890  13E4                     __ptext42:	
  8891 ;; *************** function _CC2500_PowerRST *****************
  8892 ;; Defined at:
  8893 ;;		line 139 in file "../src/CC2500_B1.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;		None
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;		None
  8898 ;; Return value:  Size  Location     Type
  8899 ;;		None               void
  8900 ;; Registers used:
  8901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8902 ;; Tracked objects:
  8903 ;;		On entry : 0/0
  8904 ;;		On exit  : 0/0
  8905 ;;		Unchanged: 0/0
  8906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;Total ram usage:        1 bytes
  8912 ;; Hardware stack levels used:    1
  8913 ;; Hardware stack levels required when called:    5
  8914 ;; This function calls:
  8915 ;;		_CC2500_WriteByte
  8916 ;;		_DelayTime_1us
  8917 ;;		_RF_Timeout_Counter
  8918 ;;		_setRF_TimeoutCleared
  8919 ;; This function is called by:
  8920 ;;		_CC2500_PowerOnInitial
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           
  8925                           ;psect for function _CC2500_PowerRST
  8926  13E4                     _CC2500_PowerRST:	
  8927                           
  8928                           ;CC2500_B1.c: 140: RC3 = 0;
  8929                           
  8930                           ;incstack = 0
  8931                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8932  13E4  0020               	movlb	0	; select bank0
  8933  13E5  118E               	bcf	14,3	;volatile
  8934                           
  8935                           ;CC2500_B1.c: 141: RC4 = 0;
  8936  13E6  120E               	bcf	14,4	;volatile
  8937                           
  8938                           ;CC2500_B1.c: 142: RC0 = 1;
  8939  13E7  140E               	bsf	14,0	;volatile
  8940                           
  8941                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8942  13E8  300A               	movlw	10
  8943  13E9  00A0               	movwf	DelayTime_1us@count
  8944  13EA  3000               	movlw	0
  8945  13EB  00A1               	movwf	DelayTime_1us@count+1
  8946  13EC  3188  2001  3193   	fcall	_DelayTime_1us
  8947                           
  8948                           ;CC2500_B1.c: 144: RC0 = 0;
  8949  13EF  0020               	movlb	0	; select bank0
  8950  13F0  100E               	bcf	14,0	;volatile
  8951                           
  8952                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8953  13F1  300A               	movlw	10
  8954  13F2  00A0               	movwf	DelayTime_1us@count
  8955  13F3  3000               	movlw	0
  8956  13F4  00A1               	movwf	DelayTime_1us@count+1
  8957  13F5  3188  2001  3193   	fcall	_DelayTime_1us
  8958                           
  8959                           ;CC2500_B1.c: 146: RC0 = 1;
  8960  13F8  0020               	movlb	0	; select bank0
  8961  13F9  140E               	bsf	14,0	;volatile
  8962                           
  8963                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8964  13FA  3028               	movlw	40
  8965  13FB  00A0               	movwf	DelayTime_1us@count
  8966  13FC  3000               	movlw	0
  8967  13FD  00A1               	movwf	DelayTime_1us@count+1
  8968  13FE  3188  2001  3193   	fcall	_DelayTime_1us
  8969                           
  8970                           ;CC2500_B1.c: 148: RC0 = 0;
  8971  1401  0020               	movlb	0	; select bank0
  8972  1402  100E               	bcf	14,0	;volatile
  8973                           
  8974                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8975  1403  3030               	movlw	48
  8976  1404  00A6               	movwf	??_CC2500_PowerRST
  8977  1405  0826               	movf	??_CC2500_PowerRST,w
  8978  1406  0021               	movlb	1	; select bank1
  8979  1407  00D5               	movwf	_SPI0Buffer^(0+128)
  8980                           
  8981                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  8982  1408  2C0C               	goto	l8264
  8983  1409                     l8262:	
  8984                           
  8985                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8986  1409  319D  25CB  3193   	fcall	_RF_Timeout_Counter
  8987  140C                     l8264:	
  8988  140C  0020               	movlb	0	; select bank0
  8989  140D  1E8E               	btfss	14,5	;volatile
  8990  140E  2C12               	goto	l8268
  8991  140F  0021               	movlb	1	; select bank1
  8992  1410  1F21               	btfss	(_RF1^(0+128)+1),6
  8993  1411  2C09               	goto	l8262
  8994  1412                     l8268:	
  8995                           
  8996                           ;CC2500_B1.c: 152: };
  8997                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8998  1412  319B  233D  3193   	fcall	_setRF_TimeoutCleared
  8999                           
  9000                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9001  1415  319E  26AD  3193   	fcall	_CC2500_WriteByte
  9002                           
  9003                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9004  1418  2C1C               	goto	l8274
  9005  1419                     l8272:	
  9006                           
  9007                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9008  1419  319D  25CB  3193   	fcall	_RF_Timeout_Counter
  9009  141C                     l8274:	
  9010  141C  0020               	movlb	0	; select bank0
  9011  141D  1E8E               	btfss	14,5	;volatile
  9012  141E  2C22               	goto	l8278
  9013  141F  0021               	movlb	1	; select bank1
  9014  1420  1F21               	btfss	(_RF1^(0+128)+1),6
  9015  1421  2C19               	goto	l8272
  9016  1422                     l8278:	
  9017                           
  9018                           ;CC2500_B1.c: 157: };
  9019                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9020  1422  319B  233D         	fcall	_setRF_TimeoutCleared
  9021                           
  9022                           ;CC2500_B1.c: 159: RC4 = 0;
  9023  1424  0020               	movlb	0	; select bank0
  9024  1425  120E               	bcf	14,4	;volatile
  9025                           
  9026                           ;CC2500_B1.c: 160: RC0 = 1;
  9027  1426  140E               	bsf	14,0	;volatile
  9028  1427  0008               	return
  9029  1428                     __end_of_CC2500_PowerRST:	
  9030                           
  9031                           	psect	text43
  9032  111E                     __ptext43:	
  9033 ;; *************** function _CC2500_InitSetREG *****************
  9034 ;; Defined at:
  9035 ;;		line 166 in file "../src/CC2500_B1.c"
  9036 ;; Parameters:    Size  Location     Type
  9037 ;;		None
  9038 ;; Auto vars:     Size  Location     Type
  9039 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9040 ;;  temp2           1    7[BANK0 ] unsigned char 
  9041 ;;  temp1           1    6[BANK0 ] unsigned char 
  9042 ;; Return value:  Size  Location     Type
  9043 ;;		None               void
  9044 ;; Registers used:
  9045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9046 ;; Tracked objects:
  9047 ;;		On entry : 0/0
  9048 ;;		On exit  : 0/0
  9049 ;;		Unchanged: 0/0
  9050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9053 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9054 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;Total ram usage:        4 bytes
  9056 ;; Hardware stack levels used:    1
  9057 ;; Hardware stack levels required when called:    6
  9058 ;; This function calls:
  9059 ;;		_CC2500_WriteREG
  9060 ;; This function is called by:
  9061 ;;		_CC2500_PowerOnInitial
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           
  9066                           ;psect for function _CC2500_InitSetREG
  9067  111E                     _CC2500_InitSetREG:	
  9068                           
  9069                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9070                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9071                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9075  111E  0020               	movlb	0	; select bank0
  9076  111F  01A8               	clrf	CC2500_InitSetREG@loop_c
  9077  1120                     L3:	
  9078  1120  302F               	movlw	47
  9079  1121  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9080  1122  1803               	btfsc	3,0
  9081  1123  0008               	return
  9082                           
  9083                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9084  1124  0828               	movf	CC2500_InitSetREG@loop_c,w
  9085  1125  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9086  1126  0084               	movwf	4
  9087  1127  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9088  1128  1803               	skipnc
  9089  1129  3E01               	addlw	1
  9090  112A  0085               	movwf	5
  9091  112B  0800               	movf	0,w	;code access
  9092  112C  00A5               	movwf	??_CC2500_InitSetREG
  9093  112D  0825               	movf	??_CC2500_InitSetREG,w
  9094  112E  00A6               	movwf	CC2500_InitSetREG@temp1
  9095                           
  9096                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9097  112F  0828               	movf	CC2500_InitSetREG@loop_c,w
  9098  1130  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9099  1131  0084               	movwf	4
  9100  1132  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9101  1133  1803               	skipnc
  9102  1134  3E01               	addlw	1
  9103  1135  0085               	movwf	5
  9104  1136  0800               	movf	0,w	;code access
  9105  1137  00A5               	movwf	??_CC2500_InitSetREG
  9106  1138  0825               	movf	??_CC2500_InitSetREG,w
  9107  1139  00A7               	movwf	CC2500_InitSetREG@temp2
  9108                           
  9109                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9110  113A  0827               	movf	CC2500_InitSetREG@temp2,w
  9111  113B  00A5               	movwf	??_CC2500_InitSetREG
  9112  113C  0825               	movf	??_CC2500_InitSetREG,w
  9113  113D  00A2               	movwf	CC2500_WriteREG@value
  9114  113E  0826               	movf	CC2500_InitSetREG@temp1,w
  9115  113F  3190  20D6  3191   	fcall	_CC2500_WriteREG
  9116  1142  3001               	movlw	1
  9117  1143  0020               	movlb	0	; select bank0
  9118  1144  00A5               	movwf	??_CC2500_InitSetREG
  9119  1145  0825               	movf	??_CC2500_InitSetREG,w
  9120  1146  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9121  1147  2920               	goto	L3
  9122  1148                     __end_of_CC2500_InitSetREG:	
  9123                           
  9124                           	psect	text44
  9125  1FC1                     __ptext44:	
  9126 ;; *************** function _CC2500_InitPATable *****************
  9127 ;; Defined at:
  9128 ;;		line 181 in file "../src/CC2500_B1.c"
  9129 ;; Parameters:    Size  Location     Type
  9130 ;;		None
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9133 ;;  temp            1    6[BANK0 ] unsigned char 
  9134 ;; Return value:  Size  Location     Type
  9135 ;;		None               void
  9136 ;; Registers used:
  9137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9138 ;; Tracked objects:
  9139 ;;		On entry : 0/0
  9140 ;;		On exit  : 0/0
  9141 ;;		Unchanged: 0/0
  9142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9144 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9146 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;Total ram usage:        3 bytes
  9148 ;; Hardware stack levels used:    1
  9149 ;; Hardware stack levels required when called:    6
  9150 ;; This function calls:
  9151 ;;		_CC2500_WriteREG
  9152 ;; This function is called by:
  9153 ;;		_CC2500_PowerOnInitial
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           
  9158                           ;psect for function _CC2500_InitPATable
  9159  1FC1                     _CC2500_InitPATable:	
  9160                           
  9161                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9162                           ;CC2500_B1.c: 183: unsigned char temp;
  9163                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9164                           
  9165                           ;incstack = 0
  9166                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9167  1FC1  0020               	movlb	0	; select bank0
  9168  1FC2  01A7               	clrf	CC2500_InitPATable@loop_d
  9169  1FC3                     L4:	
  9170  1FC3  3008               	movlw	8
  9171  1FC4  0227               	subwf	CC2500_InitPATable@loop_d,w
  9172  1FC5  1803               	btfsc	3,0
  9173  1FC6  0008               	return
  9174                           
  9175                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9176  1FC7  0827               	movf	CC2500_InitPATable@loop_d,w
  9177  1FC8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9178  1FC9  0084               	movwf	4
  9179  1FCA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9180  1FCB  1803               	skipnc
  9181  1FCC  3E01               	addlw	1
  9182  1FCD  0085               	movwf	5
  9183  1FCE  0800               	movf	0,w	;code access
  9184  1FCF  00A5               	movwf	??_CC2500_InitPATable
  9185  1FD0  0825               	movf	??_CC2500_InitPATable,w
  9186  1FD1  00A6               	movwf	CC2500_InitPATable@temp
  9187                           
  9188                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9189  1FD2  0826               	movf	CC2500_InitPATable@temp,w
  9190  1FD3  00A5               	movwf	??_CC2500_InitPATable
  9191  1FD4  0825               	movf	??_CC2500_InitPATable,w
  9192  1FD5  00A2               	movwf	CC2500_WriteREG@value
  9193  1FD6  303E               	movlw	62
  9194  1FD7  3190  20D6  319F   	fcall	_CC2500_WriteREG
  9195  1FDA  3001               	movlw	1
  9196  1FDB  0020               	movlb	0	; select bank0
  9197  1FDC  00A5               	movwf	??_CC2500_InitPATable
  9198  1FDD  0825               	movf	??_CC2500_InitPATable,w
  9199  1FDE  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9200  1FDF  2FC3               	goto	L4
  9201  1FE0                     __end_of_CC2500_InitPATable:	
  9202                           
  9203                           	psect	text45
  9204  10D6                     __ptext45:	
  9205 ;; *************** function _CC2500_WriteREG *****************
  9206 ;; Defined at:
  9207 ;;		line 258 in file "../src/CC2500_B1.c"
  9208 ;; Parameters:    Size  Location     Type
  9209 ;;  w_addr          1    wreg     unsigned char 
  9210 ;;  value           1    2[BANK0 ] unsigned char 
  9211 ;; Auto vars:     Size  Location     Type
  9212 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9213 ;; Return value:  Size  Location     Type
  9214 ;;		None               void
  9215 ;; Registers used:
  9216 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9217 ;; Tracked objects:
  9218 ;;		On entry : 0/0
  9219 ;;		On exit  : 0/0
  9220 ;;		Unchanged: 0/0
  9221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9222 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9224 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9225 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9226 ;;Total ram usage:        3 bytes
  9227 ;; Hardware stack levels used:    1
  9228 ;; Hardware stack levels required when called:    5
  9229 ;; This function calls:
  9230 ;;		_CC2500_WriteByte
  9231 ;;		_RF_Timeout_Counter
  9232 ;;		_setRF_TimeoutCleared
  9233 ;; This function is called by:
  9234 ;;		_CC2500_InitSetREG
  9235 ;;		_CC2500_InitPATable
  9236 ;; This function uses a non-reentrant model
  9237 ;;
  9238                           
  9239                           
  9240                           ;psect for function _CC2500_WriteREG
  9241  10D6                     _CC2500_WriteREG:	
  9242                           
  9243                           ;incstack = 0
  9244                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9245                           ;CC2500_WriteREG@w_addr stored from wreg
  9246  10D6  0020               	movlb	0	; select bank0
  9247  10D7  00A4               	movwf	CC2500_WriteREG@w_addr
  9248                           
  9249                           ;CC2500_B1.c: 259: RC0 = 0;
  9250  10D8  100E               	bcf	14,0	;volatile
  9251                           
  9252                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9253  10D9  0824               	movf	CC2500_WriteREG@w_addr,w
  9254  10DA  00A3               	movwf	??_CC2500_WriteREG
  9255  10DB  0823               	movf	??_CC2500_WriteREG,w
  9256  10DC  0021               	movlb	1	; select bank1
  9257  10DD  00D5               	movwf	_SPI0Buffer^(0+128)
  9258                           
  9259                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9260  10DE  28E2               	goto	l8218
  9261  10DF                     l8216:	
  9262                           
  9263                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9264  10DF  319D  25CB  3190   	fcall	_RF_Timeout_Counter
  9265  10E2                     l8218:	
  9266  10E2  0020               	movlb	0	; select bank0
  9267  10E3  1E8E               	btfss	14,5	;volatile
  9268  10E4  28E8               	goto	l8222
  9269  10E5  0021               	movlb	1	; select bank1
  9270  10E6  1F21               	btfss	(_RF1^(0+128)+1),6
  9271  10E7  28DF               	goto	l8216
  9272  10E8                     l8222:	
  9273                           
  9274                           ;CC2500_B1.c: 263: };
  9275                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9276  10E8  319B  233D  3190   	fcall	_setRF_TimeoutCleared
  9277                           
  9278                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9279  10EB  319E  26AD  3190   	fcall	_CC2500_WriteByte
  9280                           
  9281                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9282  10EE  0020               	movlb	0	; select bank0
  9283  10EF  0822               	movf	CC2500_WriteREG@value,w
  9284  10F0  00A3               	movwf	??_CC2500_WriteREG
  9285  10F1  0823               	movf	??_CC2500_WriteREG,w
  9286  10F2  0021               	movlb	1	; select bank1
  9287  10F3  00D5               	movwf	_SPI0Buffer^(0+128)
  9288                           
  9289                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9290  10F4  319E  26AD         	fcall	_CC2500_WriteByte
  9291                           
  9292                           ;CC2500_B1.c: 269: RC0 = 1;
  9293  10F6  0020               	movlb	0	; select bank0
  9294  10F7  140E               	bsf	14,0	;volatile
  9295  10F8  0008               	return
  9296  10F9                     __end_of_CC2500_WriteREG:	
  9297                           
  9298                           	psect	text46
  9299  1C52                     __ptext46:	
  9300 ;; *************** function _CC2500_FrequencyCabr *****************
  9301 ;; Defined at:
  9302 ;;		line 208 in file "../src/CC2500_B1.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;		None
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;		None
  9307 ;; Return value:  Size  Location     Type
  9308 ;;		None               void
  9309 ;; Registers used:
  9310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;Total ram usage:        0 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    6
  9323 ;; This function calls:
  9324 ;;		_CC2500_WriteCommand
  9325 ;;		_DelayTime_1us
  9326 ;; This function is called by:
  9327 ;;		_CC2500_PowerOnInitial
  9328 ;; This function uses a non-reentrant model
  9329 ;;
  9330                           
  9331                           
  9332                           ;psect for function _CC2500_FrequencyCabr
  9333  1C52                     _CC2500_FrequencyCabr:	
  9334                           
  9335                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9336                           
  9337                           ;incstack = 0
  9338                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9339  1C52  3033               	movlw	51
  9340  1C53  319E  26FA  319C   	fcall	_CC2500_WriteCommand
  9341                           
  9342                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9343  1C56  30E8               	movlw	232
  9344  1C57  0020               	movlb	0	; select bank0
  9345  1C58  00A0               	movwf	DelayTime_1us@count
  9346  1C59  3003               	movlw	3
  9347  1C5A  00A1               	movwf	DelayTime_1us@count+1
  9348  1C5B  3188  2001         	fcall	_DelayTime_1us
  9349  1C5D  0008               	return
  9350  1C5E                     __end_of_CC2500_FrequencyCabr:	
  9351                           
  9352                           	psect	text47
  9353  0801                     __ptext47:	
  9354 ;; *************** function _DelayTime_1us *****************
  9355 ;; Defined at:
  9356 ;;		line 327 in file "../src/CC2500_B1.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;  count           2    0[BANK0 ] int 
  9359 ;; Auto vars:     Size  Location     Type
  9360 ;;  j               2    4[BANK0 ] unsigned int 
  9361 ;;  i               2    2[BANK0 ] unsigned int 
  9362 ;; Return value:  Size  Location     Type
  9363 ;;		None               void
  9364 ;; Registers used:
  9365 ;;		wreg, status,2
  9366 ;; Tracked objects:
  9367 ;;		On entry : 0/0
  9368 ;;		On exit  : 0/0
  9369 ;;		Unchanged: 0/0
  9370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9371 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;Total ram usage:        6 bytes
  9376 ;; Hardware stack levels used:    1
  9377 ;; Hardware stack levels required when called:    4
  9378 ;; This function calls:
  9379 ;;		Nothing
  9380 ;; This function is called by:
  9381 ;;		_CC2500_PowerRST
  9382 ;;		_CC2500_FrequencyCabr
  9383 ;; This function uses a non-reentrant model
  9384 ;;
  9385                           
  9386                           
  9387                           ;psect for function _DelayTime_1us
  9388  0801                     _DelayTime_1us:	
  9389                           
  9390                           ;CC2500_B1.c: 328: unsigned int i, j;
  9391                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9392                           
  9393                           ;incstack = 0
  9394                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9395  0801  3001               	movlw	1
  9396  0802  0020               	movlb	0	; select bank0
  9397  0803  00A2               	movwf	DelayTime_1us@i
  9398  0804  3000               	movlw	0
  9399  0805  00A3               	movwf	DelayTime_1us@i+1
  9400  0806                     l347:	
  9401  0806  0821               	movf	DelayTime_1us@count+1,w
  9402  0807  0223               	subwf	DelayTime_1us@i+1,w
  9403  0808  1D03               	skipz
  9404  0809  280C               	goto	u5295
  9405  080A  0820               	movf	DelayTime_1us@count,w
  9406  080B  0222               	subwf	DelayTime_1us@i,w
  9407  080C                     u5295:	
  9408  080C  1803               	btfsc	3,0
  9409  080D  0008               	return
  9410                           
  9411                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9412  080E  01A4               	clrf	DelayTime_1us@j
  9413  080F  01A5               	clrf	DelayTime_1us@j+1
  9414  0810  3000               	movlw	0
  9415  0811  0225               	subwf	DelayTime_1us@j+1,w
  9416  0812  3002               	movlw	2
  9417  0813  1903               	skipnz
  9418  0814  0224               	subwf	DelayTime_1us@j,w
  9419  0815  1803               	btfsc	3,0
  9420  0816  2822               	goto	l6180
  9421  0817                     l6178:	
  9422  0817  3001               	movlw	1
  9423  0818  07A4               	addwf	DelayTime_1us@j,f
  9424  0819  3000               	movlw	0
  9425  081A  3DA5               	addwfc	DelayTime_1us@j+1,f
  9426  081B  3000               	movlw	0
  9427  081C  0225               	subwf	DelayTime_1us@j+1,w
  9428  081D  3002               	movlw	2
  9429  081E  1903               	skipnz
  9430  081F  0224               	subwf	DelayTime_1us@j,w
  9431  0820  1C03               	skipc
  9432  0821  2817               	goto	l6178
  9433  0822                     l6180:	
  9434  0822  3001               	movlw	1
  9435  0823  07A2               	addwf	DelayTime_1us@i,f
  9436  0824  3000               	movlw	0
  9437  0825  3DA3               	addwfc	DelayTime_1us@i+1,f
  9438  0826  2806               	goto	l347
  9439  0827                     __end_of_DelayTime_1us:	
  9440                           
  9441                           	psect	text48
  9442  1B45                     __ptext48:	
  9443 ;; *************** function _CC2500_ClearTXFIFO *****************
  9444 ;; Defined at:
  9445 ;;		line 194 in file "../src/CC2500_B1.c"
  9446 ;; Parameters:    Size  Location     Type
  9447 ;;		None
  9448 ;; Auto vars:     Size  Location     Type
  9449 ;;		None
  9450 ;; Return value:  Size  Location     Type
  9451 ;;		None               void
  9452 ;; Registers used:
  9453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9454 ;; Tracked objects:
  9455 ;;		On entry : 0/0
  9456 ;;		On exit  : 0/0
  9457 ;;		Unchanged: 0/0
  9458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;Total ram usage:        0 bytes
  9464 ;; Hardware stack levels used:    1
  9465 ;; Hardware stack levels required when called:    6
  9466 ;; This function calls:
  9467 ;;		_CC2500_WriteCommand
  9468 ;; This function is called by:
  9469 ;;		_CC2500_PowerOnInitial
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           
  9474                           ;psect for function _CC2500_ClearTXFIFO
  9475  1B45                     _CC2500_ClearTXFIFO:	
  9476                           
  9477                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9478                           
  9479                           ;incstack = 0
  9480                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9481  1B45  303B               	movlw	59
  9482  1B46  319E  26FA         	fcall	_CC2500_WriteCommand
  9483  1B48  0008               	return
  9484  1B49                     __end_of_CC2500_ClearTXFIFO:	
  9485                           
  9486                           	psect	text49
  9487  1B41                     __ptext49:	
  9488 ;; *************** function _CC2500_ClearRXFIFO *****************
  9489 ;; Defined at:
  9490 ;;		line 201 in file "../src/CC2500_B1.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;		None
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;		None
  9495 ;; Return value:  Size  Location     Type
  9496 ;;		None               void
  9497 ;; Registers used:
  9498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;Total ram usage:        0 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    6
  9511 ;; This function calls:
  9512 ;;		_CC2500_WriteCommand
  9513 ;; This function is called by:
  9514 ;;		_CC2500_PowerOnInitial
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           
  9519                           ;psect for function _CC2500_ClearRXFIFO
  9520  1B41                     _CC2500_ClearRXFIFO:	
  9521                           
  9522                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9523                           
  9524                           ;incstack = 0
  9525                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9526  1B41  303A               	movlw	58
  9527  1B42  319E  26FA         	fcall	_CC2500_WriteCommand
  9528  1B44  0008               	return
  9529  1B45                     __end_of_CC2500_ClearRXFIFO:	
  9530                           
  9531                           	psect	text50
  9532  1EFA                     __ptext50:	
  9533 ;; *************** function _CC2500_WriteCommand *****************
  9534 ;; Defined at:
  9535 ;;		line 292 in file "../src/CC2500_B1.c"
  9536 ;; Parameters:    Size  Location     Type
  9537 ;;  command         1    wreg     unsigned char 
  9538 ;; Auto vars:     Size  Location     Type
  9539 ;;  command         1    3[BANK0 ] unsigned char 
  9540 ;; Return value:  Size  Location     Type
  9541 ;;		None               void
  9542 ;; Registers used:
  9543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;Total ram usage:        2 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    5
  9556 ;; This function calls:
  9557 ;;		_CC2500_WriteByte
  9558 ;;		_RF_Timeout_Counter
  9559 ;;		_setRF_TimeoutCleared
  9560 ;; This function is called by:
  9561 ;;		_CC2500_TxData
  9562 ;;		_CC2500_RxData
  9563 ;;		_CC2500_ClearTXFIFO
  9564 ;;		_CC2500_ClearRXFIFO
  9565 ;;		_CC2500_FrequencyCabr
  9566 ;;		_CC2500_SIDLEMode
  9567 ;;		_setRF_Main
  9568 ;;		_RF_RxDisable
  9569 ;; This function uses a non-reentrant model
  9570 ;;
  9571                           
  9572                           
  9573                           ;psect for function _CC2500_WriteCommand
  9574  1EFA                     _CC2500_WriteCommand:	
  9575                           
  9576                           ;incstack = 0
  9577                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9578                           ;CC2500_WriteCommand@command stored from wreg
  9579  1EFA  0020               	movlb	0	; select bank0
  9580  1EFB  00A3               	movwf	CC2500_WriteCommand@command
  9581                           
  9582                           ;CC2500_B1.c: 293: RC0 = 0;
  9583  1EFC  100E               	bcf	14,0	;volatile
  9584                           
  9585                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9586  1EFD  0823               	movf	CC2500_WriteCommand@command,w
  9587  1EFE  00A2               	movwf	??_CC2500_WriteCommand
  9588  1EFF  0822               	movf	??_CC2500_WriteCommand,w
  9589  1F00  0021               	movlb	1	; select bank1
  9590  1F01  00D5               	movwf	_SPI0Buffer^(0+128)
  9591                           
  9592                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9593  1F02  2F06               	goto	l8184
  9594  1F03                     l8182:	
  9595                           
  9596                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9597  1F03  319D  25CB  319E   	fcall	_RF_Timeout_Counter
  9598  1F06                     l8184:	
  9599  1F06  0020               	movlb	0	; select bank0
  9600  1F07  1E8E               	btfss	14,5	;volatile
  9601  1F08  2F0C               	goto	l8188
  9602  1F09  0021               	movlb	1	; select bank1
  9603  1F0A  1F21               	btfss	(_RF1^(0+128)+1),6
  9604  1F0B  2F03               	goto	l8182
  9605  1F0C                     l8188:	
  9606                           
  9607                           ;CC2500_B1.c: 298: };
  9608                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9609  1F0C  319B  233D  319E   	fcall	_setRF_TimeoutCleared
  9610                           
  9611                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9612  1F0F  319E  26AD         	fcall	_CC2500_WriteByte
  9613                           
  9614                           ;CC2500_B1.c: 302: RC0 = 1;
  9615  1F11  0020               	movlb	0	; select bank0
  9616  1F12  140E               	bsf	14,0	;volatile
  9617  1F13  0008               	return
  9618  1F14                     __end_of_CC2500_WriteCommand:	
  9619                           
  9620                           	psect	text51
  9621  1B3D                     __ptext51:	
  9622 ;; *************** function _setRF_TimeoutCleared *****************
  9623 ;; Defined at:
  9624 ;;		line 149 in file "../src/RF_Control_B1.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;		None
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;		None
  9629 ;; Return value:  Size  Location     Type
  9630 ;;		None               void
  9631 ;; Registers used:
  9632 ;;		status,2
  9633 ;; Tracked objects:
  9634 ;;		On entry : 0/0
  9635 ;;		On exit  : 0/0
  9636 ;;		Unchanged: 0/0
  9637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;Total ram usage:        0 bytes
  9643 ;; Hardware stack levels used:    1
  9644 ;; Hardware stack levels required when called:    4
  9645 ;; This function calls:
  9646 ;;		Nothing
  9647 ;; This function is called by:
  9648 ;;		_CC2500_TxData
  9649 ;;		_CC2500_RxData
  9650 ;;		_CC2500_PowerRST
  9651 ;;		_CC2500_WriteREG
  9652 ;;		_CC2500_WriteCommand
  9653 ;;		_CC2500_ReadStatus
  9654 ;;		_CC2500_ReadREG
  9655 ;; This function uses a non-reentrant model
  9656 ;;
  9657                           
  9658                           
  9659                           ;psect for function _setRF_TimeoutCleared
  9660  1B3D                     _setRF_TimeoutCleared:	
  9661                           
  9662                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9663                           
  9664                           ;incstack = 0
  9665                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9666  1B3D  0021               	movlb	1	; select bank1
  9667  1B3E  01AC               	clrf	(_RF1^(0+128)+12)
  9668  1B3F  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9669  1B40  0008               	return
  9670  1B41                     __end_of_setRF_TimeoutCleared:	
  9671                           
  9672                           	psect	text52
  9673  1DCB                     __ptext52:	
  9674 ;; *************** function _RF_Timeout_Counter *****************
  9675 ;; Defined at:
  9676 ;;		line 141 in file "../src/RF_Control_B1.c"
  9677 ;; Parameters:    Size  Location     Type
  9678 ;;		None
  9679 ;; Auto vars:     Size  Location     Type
  9680 ;;		None
  9681 ;; Return value:  Size  Location     Type
  9682 ;;		None               void
  9683 ;; Registers used:
  9684 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9685 ;; Tracked objects:
  9686 ;;		On entry : 0/0
  9687 ;;		On exit  : 0/0
  9688 ;;		Unchanged: 0/0
  9689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9694 ;;Total ram usage:        0 bytes
  9695 ;; Hardware stack levels used:    1
  9696 ;; Hardware stack levels required when called:    4
  9697 ;; This function calls:
  9698 ;;		Nothing
  9699 ;; This function is called by:
  9700 ;;		_CC2500_TxData
  9701 ;;		_CC2500_RxData
  9702 ;;		_CC2500_PowerRST
  9703 ;;		_CC2500_WriteREG
  9704 ;;		_CC2500_WriteCommand
  9705 ;;		_CC2500_ReadStatus
  9706 ;;		_CC2500_ReadREG
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           
  9711                           ;psect for function _RF_Timeout_Counter
  9712  1DCB                     _RF_Timeout_Counter:	
  9713                           
  9714                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9715                           
  9716                           ;incstack = 0
  9717                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9718  1DCB  3001               	movlw	1
  9719  1DCC  0021               	movlb	1	; select bank1
  9720  1DCD  07AC               	addwf	(_RF1^(0+128)+12),f
  9721  1DCE  3000               	movlw	0
  9722  1DCF  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9723                           
  9724                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9725  1DD0  300C               	movlw	12
  9726  1DD1  3EA0               	addlw	_RF1& (0+255)
  9727  1DD2  0086               	movwf	6
  9728  1DD3  0187               	clrf	7
  9729  1DD4  3F40               	moviw [0]fsr1
  9730  1DD5  3AA8               	xorlw	168
  9731  1DD6  1D03               	skipz
  9732  1DD7  2DDA               	goto	u8355
  9733  1DD8  3F41               	moviw [1]fsr1
  9734  1DD9  3A61               	xorlw	97
  9735  1DDA                     u8355:	
  9736  1DDA  1D03               	skipz
  9737  1DDB  0008               	return
  9738                           
  9739                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9740  1DDC  01AC               	clrf	(_RF1^(0+128)+12)
  9741  1DDD  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9742                           
  9743                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9744  1DDE  1721               	bsf	(_RF1^(0+128)+1),6
  9745  1DDF  0008               	return
  9746  1DE0                     __end_of_RF_Timeout_Counter:	
  9747                           
  9748                           	psect	text53
  9749  1EAD                     __ptext53:	
  9750 ;; *************** function _CC2500_WriteByte *****************
  9751 ;; Defined at:
  9752 ;;		line 226 in file "../src/CC2500_B1.c"
  9753 ;; Parameters:    Size  Location     Type
  9754 ;;		None
  9755 ;; Auto vars:     Size  Location     Type
  9756 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9757 ;; Return value:  Size  Location     Type
  9758 ;;		None               void
  9759 ;; Registers used:
  9760 ;;		wreg, status,2, status,0
  9761 ;; Tracked objects:
  9762 ;;		On entry : 0/0
  9763 ;;		On exit  : 0/0
  9764 ;;		Unchanged: 0/0
  9765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;Total ram usage:        2 bytes
  9771 ;; Hardware stack levels used:    1
  9772 ;; Hardware stack levels required when called:    4
  9773 ;; This function calls:
  9774 ;;		Nothing
  9775 ;; This function is called by:
  9776 ;;		_CC2500_TxData
  9777 ;;		_CC2500_RxData
  9778 ;;		_CC2500_PowerRST
  9779 ;;		_CC2500_WriteREG
  9780 ;;		_CC2500_WriteCommand
  9781 ;;		_CC2500_ReadStatus
  9782 ;;		_CC2500_ReadREG
  9783 ;; This function uses a non-reentrant model
  9784 ;;
  9785                           
  9786                           
  9787                           ;psect for function _CC2500_WriteByte
  9788  1EAD                     _CC2500_WriteByte:	
  9789                           
  9790                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9791                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9792                           
  9793                           ;incstack = 0
  9794                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9795  1EAD  0020               	movlb	0	; select bank0
  9796  1EAE  01A1               	clrf	CC2500_WriteByte@loop_a
  9797  1EAF                     L5:	
  9798  1EAF  3008               	movlw	8
  9799  1EB0  0221               	subwf	CC2500_WriteByte@loop_a,w
  9800  1EB1  1803               	btfsc	3,0
  9801  1EB2  0008               	return
  9802                           
  9803                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9804  1EB3  0021               	movlb	1	; select bank1
  9805  1EB4  1FD5               	btfss	_SPI0Buffer^(0+128),7
  9806  1EB5  2EB9               	goto	l303
  9807                           
  9808                           ;CC2500_B1.c: 230: RC4 = 1;
  9809  1EB6  0020               	movlb	0	; select bank0
  9810  1EB7  160E               	bsf	14,4	;volatile
  9811  1EB8  2EBB               	goto	l304
  9812  1EB9                     l303:	
  9813                           
  9814                           ;CC2500_B1.c: 231: else
  9815                           ;CC2500_B1.c: 232: RC4 = 0;
  9816  1EB9  0020               	movlb	0	; select bank0
  9817  1EBA  120E               	bcf	14,4	;volatile
  9818  1EBB                     l304:	
  9819                           
  9820                           ;CC2500_B1.c: 233: RC3 = 1;
  9821  1EBB  158E               	bsf	14,3	;volatile
  9822                           
  9823                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9824  1EBC  1003               	clrc
  9825  1EBD  0021               	movlb	1	; select bank1
  9826  1EBE  0DD5               	rlf	_SPI0Buffer^(0+128),f
  9827                           
  9828                           ;CC2500_B1.c: 235: RC3 = 0;
  9829  1EBF  0020               	movlb	0	; select bank0
  9830  1EC0  118E               	bcf	14,3	;volatile
  9831  1EC1  3001               	movlw	1
  9832  1EC2  00A0               	movwf	??_CC2500_WriteByte
  9833  1EC3  0820               	movf	??_CC2500_WriteByte,w
  9834  1EC4  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9835  1EC5  2EAF               	goto	L5
  9836  1EC6                     __end_of_CC2500_WriteByte:	
  9837                           
  9838                           	psect	text54
  9839  1B1D                     __ptext54:	
  9840 ;; *************** function _RF_Initialization *****************
  9841 ;; Defined at:
  9842 ;;		line 9 in file "../src/RF_Control_B1.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;		None
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;		None
  9847 ;; Return value:  Size  Location     Type
  9848 ;;		None               void
  9849 ;; Registers used:
  9850 ;;		wreg, status,2, status,0, pclath, cstack
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;Total ram usage:        0 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:    5
  9863 ;; This function calls:
  9864 ;;		_setRF_Initialization
  9865 ;; This function is called by:
  9866 ;;		_main
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           
  9871                           ;psect for function _RF_Initialization
  9872  1B1D                     _RF_Initialization:	
  9873                           
  9874                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9875                           
  9876                           ;incstack = 0
  9877                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9878  1B1D  3190  2066         	fcall	_setRF_Initialization
  9879  1B1F  0008               	return
  9880  1B20                     __end_of_RF_Initialization:	
  9881                           
  9882                           	psect	text55
  9883  1066                     __ptext55:	
  9884 ;; *************** function _setRF_Initialization *****************
  9885 ;; Defined at:
  9886 ;;		line 17 in file "../src/RF_Control_B1.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;		None
  9889 ;; Auto vars:     Size  Location     Type
  9890 ;;		None
  9891 ;; Return value:  Size  Location     Type
  9892 ;;		None               void
  9893 ;; Registers used:
  9894 ;;		wreg
  9895 ;; Tracked objects:
  9896 ;;		On entry : 0/0
  9897 ;;		On exit  : 0/0
  9898 ;;		Unchanged: 0/0
  9899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;Total ram usage:        1 bytes
  9905 ;; Hardware stack levels used:    1
  9906 ;; Hardware stack levels required when called:    4
  9907 ;; This function calls:
  9908 ;;		Nothing
  9909 ;; This function is called by:
  9910 ;;		_RF_Initialization
  9911 ;; This function uses a non-reentrant model
  9912 ;;
  9913                           
  9914                           
  9915                           ;psect for function _setRF_Initialization
  9916  1066                     _setRF_Initialization:	
  9917                           
  9918                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9919                           
  9920                           ;incstack = 0
  9921                           ; Regs used in _setRF_Initialization: [wreg]
  9922  1066  3015               	movlw	21
  9923  1067  0020               	movlb	0	; select bank0
  9924  1068  00A0               	movwf	??_setRF_Initialization
  9925  1069  0820               	movf	??_setRF_Initialization,w
  9926  106A  0021               	movlb	1	; select bank1
  9927  106B  00D8               	movwf	_Tx_Length^(0+128)
  9928                           
  9929                           ;RF_Control_B1.c: 20: RF1.RunTime = 150;
  9930  106C  3096               	movlw	150
  9931  106D  00A7               	movwf	(_RF1^(0+128)+7)
  9932  106E  3000               	movlw	0
  9933  106F  00A8               	movwf	(_RF1^(0+128)+8)
  9934  1070  0008               	return
  9935  1071                     __end_of_setRF_Initialization:	
  9936                           
  9937                           	psect	text56
  9938  1D34                     __ptext56:	
  9939 ;; *************** function _Mcu_Initialization *****************
  9940 ;; Defined at:
  9941 ;;		line 30 in file "../src/MCU_B1.c"
  9942 ;; Parameters:    Size  Location     Type
  9943 ;;		None
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;		None
  9946 ;; Return value:  Size  Location     Type
  9947 ;;		None               void
  9948 ;; Registers used:
  9949 ;;		wreg, status,2, status,0, pclath, cstack
  9950 ;; Tracked objects:
  9951 ;;		On entry : 0/0
  9952 ;;		On exit  : 0/0
  9953 ;;		Unchanged: 0/0
  9954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9959 ;;Total ram usage:        0 bytes
  9960 ;; Hardware stack levels used:    1
  9961 ;; Hardware stack levels required when called:    5
  9962 ;; This function calls:
  9963 ;;		_ADC_Set
  9964 ;;		_Fosc_Set
  9965 ;;		_IOC_Set
  9966 ;;		_IO_Set
  9967 ;;		_TMR1_Set
  9968 ;;		_WDT_Set
  9969 ;; This function is called by:
  9970 ;;		_main
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           
  9975                           ;psect for function _Mcu_Initialization
  9976  1D34                     _Mcu_Initialization:	
  9977                           
  9978                           ;MCU_B1.c: 32: Fosc_Set();
  9979                           
  9980                           ;incstack = 0
  9981                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9982  1D34  319B  2339  319D   	fcall	_Fosc_Set
  9983                           
  9984                           ;MCU_B1.c: 34: IO_Set();
  9985  1D37  319E  26E0  319D   	fcall	_IO_Set
  9986                           
  9987                           ;MCU_B1.c: 36: ;;
  9988                           ;MCU_B1.c: 38: TMR1_Set();
  9989  1D3A  319C  243A  319D   	fcall	_TMR1_Set
  9990                           
  9991                           ;MCU_B1.c: 40: ADC_Set();
  9992  1D3D  319B  236F  319D   	fcall	_ADC_Set
  9993                           
  9994                           ;MCU_B1.c: 42: ;;
  9995                           ;MCU_B1.c: 44: ;;
  9996                           ;MCU_B1.c: 46: IOC_Set();
  9997  1D40  319B  23BA  319D   	fcall	_IOC_Set
  9998                           
  9999                           ;MCU_B1.c: 48: ;;
 10000                           ;MCU_B1.c: 50: ;;
 10001                           ;MCU_B1.c: 52: WDT_Set();
 10002  1D43  319C  2446         	fcall	_WDT_Set
 10003  1D45  0008               	return
 10004  1D46                     __end_of_Mcu_Initialization:	
 10005                           
 10006                           	psect	text57
 10007  1C46                     __ptext57:	
 10008 ;; *************** function _WDT_Set *****************
 10009 ;; Defined at:
 10010 ;;		line 1089 in file "../src/MCU_B1.c"
 10011 ;; Parameters:    Size  Location     Type
 10012 ;;		None
 10013 ;; Auto vars:     Size  Location     Type
 10014 ;;		None
 10015 ;; Return value:  Size  Location     Type
 10016 ;;		None               void
 10017 ;; Registers used:
 10018 ;;		wreg
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;Total ram usage:        1 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; Hardware stack levels required when called:    4
 10031 ;; This function calls:
 10032 ;;		Nothing
 10033 ;; This function is called by:
 10034 ;;		_Mcu_Initialization
 10035 ;; This function uses a non-reentrant model
 10036 ;;
 10037                           
 10038                           
 10039                           ;psect for function _WDT_Set
 10040  1C46                     _WDT_Set:	
 10041                           
 10042                           ;MCU_B1.c: 1096: WDTCON = 0b00010111;;
 10043                           
 10044                           ;incstack = 0
 10045                           ; Regs used in _WDT_Set: [wreg]
 10046  1C46  3017               	movlw	23
 10047  1C47  0021               	movlb	1	; select bank1
 10048  1C48  0097               	movwf	23	;volatile
 10049                           
 10050                           ;MCU_B1.c: 1098: WDT.Enable = 1;
 10051  1C49  0022               	movlb	2	; select bank2
 10052  1C4A  1443               	bsf	_WDT^(0+256),0
 10053                           
 10054                           ;MCU_B1.c: 1099: WDT.Timer = 10;
 10055  1C4B  300A               	movlw	10
 10056  1C4C  0020               	movlb	0	; select bank0
 10057  1C4D  00A0               	movwf	??_WDT_Set
 10058  1C4E  0820               	movf	??_WDT_Set,w
 10059  1C4F  0022               	movlb	2	; select bank2
 10060  1C50  00C4               	movwf	(_WDT^(0+256)+1)
 10061  1C51  0008               	return
 10062  1C52                     __end_of_WDT_Set:	
 10063                           
 10064                           	psect	text58
 10065  1C3A                     __ptext58:	
 10066 ;; *************** function _TMR1_Set *****************
 10067 ;; Defined at:
 10068 ;;		line 226 in file "../src/MCU_B1.c"
 10069 ;; Parameters:    Size  Location     Type
 10070 ;;		None
 10071 ;; Auto vars:     Size  Location     Type
 10072 ;;		None
 10073 ;; Return value:  Size  Location     Type
 10074 ;;		None               void
 10075 ;; Registers used:
 10076 ;;		wreg
 10077 ;; Tracked objects:
 10078 ;;		On entry : 0/0
 10079 ;;		On exit  : 0/0
 10080 ;;		Unchanged: 0/0
 10081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;Total ram usage:        0 bytes
 10087 ;; Hardware stack levels used:    1
 10088 ;; Hardware stack levels required when called:    4
 10089 ;; This function calls:
 10090 ;;		Nothing
 10091 ;; This function is called by:
 10092 ;;		_Mcu_Initialization
 10093 ;; This function uses a non-reentrant model
 10094 ;;
 10095                           
 10096                           
 10097                           ;psect for function _TMR1_Set
 10098  1C3A                     _TMR1_Set:	
 10099                           
 10100                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10101                           
 10102                           ;incstack = 0
 10103                           ; Regs used in _TMR1_Set: [wreg]
 10104  1C3A  3041               	movlw	65
 10105  1C3B  0020               	movlb	0	; select bank0
 10106  1C3C  0098               	movwf	24	;volatile
 10107                           
 10108                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10109  1C3D  30FA               	movlw	250
 10110  1C3E  0097               	movwf	23	;volatile
 10111                           
 10112                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10113  1C3F  3038               	movlw	56
 10114  1C40  0096               	movwf	22	;volatile
 10115                           
 10116                           ;MCU_B1.c: 230: TMR1IE = 1;
 10117  1C41  0021               	movlb	1	; select bank1
 10118  1C42  1411               	bsf	17,0	;volatile
 10119                           
 10120                           ;MCU_B1.c: 231: PEIE = 1;
 10121  1C43  170B               	bsf	11,6	;volatile
 10122                           
 10123                           ;MCU_B1.c: 232: GIE = 1;
 10124  1C44  178B               	bsf	11,7	;volatile
 10125  1C45  0008               	return
 10126  1C46                     __end_of_TMR1_Set:	
 10127                           
 10128                           	psect	text59
 10129  1EE0                     __ptext59:	
 10130 ;; *************** function _IO_Set *****************
 10131 ;; Defined at:
 10132 ;;		line 60 in file "../src/MCU_B1.c"
 10133 ;; Parameters:    Size  Location     Type
 10134 ;;		None
 10135 ;; Auto vars:     Size  Location     Type
 10136 ;;		None
 10137 ;; Return value:  Size  Location     Type
 10138 ;;		None               void
 10139 ;; Registers used:
 10140 ;;		wreg, status,2
 10141 ;; Tracked objects:
 10142 ;;		On entry : 0/0
 10143 ;;		On exit  : 0/0
 10144 ;;		Unchanged: 0/0
 10145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;Total ram usage:        0 bytes
 10151 ;; Hardware stack levels used:    1
 10152 ;; Hardware stack levels required when called:    4
 10153 ;; This function calls:
 10154 ;;		Nothing
 10155 ;; This function is called by:
 10156 ;;		_Mcu_Initialization
 10157 ;; This function uses a non-reentrant model
 10158 ;;
 10159                           
 10160                           
 10161                           ;psect for function _IO_Set
 10162  1EE0                     _IO_Set:	
 10163                           
 10164                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10165                           
 10166                           ;incstack = 0
 10167                           ; Regs used in _IO_Set: [wreg+status,2]
 10168  1EE0  30F7               	movlw	247
 10169  1EE1  0021               	movlb	1	; select bank1
 10170  1EE2  008C               	movwf	12	;volatile
 10171                           
 10172                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10173  1EE3  3004               	movlw	4
 10174  1EE4  008D               	movwf	13	;volatile
 10175                           
 10176                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10177  1EE5  3026               	movlw	38
 10178  1EE6  008E               	movwf	14	;volatile
 10179                           
 10180                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10181  1EE7  0022               	movlb	2	; select bank2
 10182  1EE8  018C               	clrf	12	;volatile
 10183                           
 10184                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10185  1EE9  018D               	clrf	13	;volatile
 10186                           
 10187                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10188  1EEA  018E               	clrf	14	;volatile
 10189                           
 10190                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10191  1EEB  300E               	movlw	14
 10192  1EEC  0023               	movlb	3	; select bank3
 10193  1EED  008C               	movwf	12	;volatile
 10194                           
 10195                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10196  1EEE  018D               	clrf	13	;volatile
 10197                           
 10198                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10199  1EEF  018E               	clrf	14	;volatile
 10200                           
 10201                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10202  1EF0  30F7               	movlw	247
 10203  1EF1  0020               	movlb	0	; select bank0
 10204  1EF2  008C               	movwf	12	;volatile
 10205                           
 10206                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10207  1EF3  3004               	movlw	4
 10208  1EF4  008D               	movwf	13	;volatile
 10209                           
 10210                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10211  1EF5  3026               	movlw	38
 10212  1EF6  008E               	movwf	14	;volatile
 10213                           
 10214                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10215  1EF7  0024               	movlb	4	; select bank4
 10216  1EF8  018D               	clrf	13	;volatile
 10217  1EF9  0008               	return
 10218  1EFA                     __end_of_IO_Set:	
 10219                           
 10220                           	psect	text60
 10221  1BBA                     __ptext60:	
 10222 ;; *************** function _IOC_Set *****************
 10223 ;; Defined at:
 10224 ;;		line 379 in file "../src/MCU_B1.c"
 10225 ;; Parameters:    Size  Location     Type
 10226 ;;		None
 10227 ;; Auto vars:     Size  Location     Type
 10228 ;;		None
 10229 ;; Return value:  Size  Location     Type
 10230 ;;		None               void
 10231 ;; Registers used:
 10232 ;;		wreg, status,2
 10233 ;; Tracked objects:
 10234 ;;		On entry : 0/0
 10235 ;;		On exit  : 0/0
 10236 ;;		Unchanged: 0/0
 10237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;Total ram usage:        0 bytes
 10243 ;; Hardware stack levels used:    1
 10244 ;; Hardware stack levels required when called:    4
 10245 ;; This function calls:
 10246 ;;		Nothing
 10247 ;; This function is called by:
 10248 ;;		_Mcu_Initialization
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           
 10253                           ;psect for function _IOC_Set
 10254  1BBA                     _IOC_Set:	
 10255                           
 10256                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10257                           
 10258                           ;incstack = 0
 10259                           ; Regs used in _IOC_Set: [wreg+status,2]
 10260  1BBA  3004               	movlw	4
 10261  1BBB  0027               	movlb	7	; select bank7
 10262  1BBC  0094               	movwf	20	;volatile
 10263                           
 10264                           ;MCU_B1.c: 382: IOCBN = 0b00000000;;
 10265  1BBD  0195               	clrf	21	;volatile
 10266                           
 10267                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10268  1BBE  0196               	clrf	22	;volatile
 10269                           
 10270                           ;MCU_B1.c: 386: IOCIE = 1;
 10271  1BBF  158B               	bsf	11,3	;volatile
 10272                           
 10273                           ;MCU_B1.c: 387: IOCIF = 0;
 10274  1BC0  100B               	bcf	11,0	;volatile
 10275                           
 10276                           ;MCU_B1.c: 388: PEIE = 1;
 10277  1BC1  170B               	bsf	11,6	;volatile
 10278                           
 10279                           ;MCU_B1.c: 389: GIE = 1;
 10280  1BC2  178B               	bsf	11,7	;volatile
 10281  1BC3  0008               	return
 10282  1BC4                     __end_of_IOC_Set:	
 10283                           
 10284                           	psect	text61
 10285  1B39                     __ptext61:	
 10286 ;; *************** function _Fosc_Set *****************
 10287 ;; Defined at:
 10288 ;;		line 56 in file "../src/MCU_B1.c"
 10289 ;; Parameters:    Size  Location     Type
 10290 ;;		None
 10291 ;; Auto vars:     Size  Location     Type
 10292 ;;		None
 10293 ;; Return value:  Size  Location     Type
 10294 ;;		None               void
 10295 ;; Registers used:
 10296 ;;		wreg
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;Total ram usage:        0 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:    4
 10309 ;; This function calls:
 10310 ;;		Nothing
 10311 ;; This function is called by:
 10312 ;;		_Mcu_Initialization
 10313 ;; This function uses a non-reentrant model
 10314 ;;
 10315                           
 10316                           
 10317                           ;psect for function _Fosc_Set
 10318  1B39                     _Fosc_Set:	
 10319                           
 10320                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10321                           
 10322                           ;incstack = 0
 10323                           ; Regs used in _Fosc_Set: [wreg]
 10324  1B39  3078               	movlw	120
 10325  1B3A  0021               	movlb	1	; select bank1
 10326  1B3B  0099               	movwf	25	;volatile
 10327  1B3C  0008               	return
 10328  1B3D                     __end_of_Fosc_Set:	
 10329                           
 10330                           	psect	text62
 10331  1B6F                     __ptext62:	
 10332 ;; *************** function _ADC_Set *****************
 10333 ;; Defined at:
 10334 ;;		line 425 in file "../src/MCU_B1.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;		None
 10337 ;; Auto vars:     Size  Location     Type
 10338 ;;		None
 10339 ;; Return value:  Size  Location     Type
 10340 ;;		None               void
 10341 ;; Registers used:
 10342 ;;		wreg
 10343 ;; Tracked objects:
 10344 ;;		On entry : 0/0
 10345 ;;		On exit  : 0/0
 10346 ;;		Unchanged: 0/0
 10347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;Total ram usage:        0 bytes
 10353 ;; Hardware stack levels used:    1
 10354 ;; Hardware stack levels required when called:    4
 10355 ;; This function calls:
 10356 ;;		Nothing
 10357 ;; This function is called by:
 10358 ;;		_Mcu_Initialization
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           
 10363                           ;psect for function _ADC_Set
 10364  1B6F                     _ADC_Set:	
 10365                           
 10366                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10367                           
 10368                           ;incstack = 0
 10369                           ; Regs used in _ADC_Set: [wreg]
 10370  1B6F  30F3               	movlw	243
 10371  1B70  0021               	movlb	1	; select bank1
 10372  1B71  009E               	movwf	30	;volatile
 10373                           
 10374                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10375  1B72  30C1               	movlw	193
 10376  1B73  0022               	movlb	2	; select bank2
 10377  1B74  0097               	movwf	23	;volatile
 10378  1B75  0008               	return
 10379  1B76                     __end_of_ADC_Set:	
 10380                           
 10381                           	psect	text63
 10382  004C                     __ptext63:	
 10383 ;; *************** function _Load_Main *****************
 10384 ;; Defined at:
 10385 ;;		line 39 in file "../src/OverLoad_B1.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;		None
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;  i               2   16[BANK0 ] int 
 10390 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10391 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10392 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10393 ;;  error           1   12[BANK0 ] unsigned char 
 10394 ;; Return value:  Size  Location     Type
 10395 ;;		None               void
 10396 ;; Registers used:
 10397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10398 ;; Tracked objects:
 10399 ;;		On entry : 0/0
 10400 ;;		On exit  : 0/0
 10401 ;;		Unchanged: 0/0
 10402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;Total ram usage:       10 bytes
 10408 ;; Hardware stack levels used:    1
 10409 ;; Hardware stack levels required when called:    5
 10410 ;; This function calls:
 10411 ;;		___lwdiv
 10412 ;;		___wmul
 10413 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10414 ;;		_getDimmer_LoadGO
 10415 ;;		_getDimmer_Load_Status
 10416 ;;		_getMain_All_Error_Status
 10417 ;;		_getMain_All_LightsStatus
 10418 ;;		_getMain_Lights_Count
 10419 ;;		_setLoad_AH_AL_Restore
 10420 ;; This function is called by:
 10421 ;;		_main
 10422 ;; This function uses a non-reentrant model
 10423 ;;
 10424                           
 10425                           
 10426                           ;psect for function _Load_Main
 10427  004C                     _Load_Main:	
 10428                           
 10429                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10430                           
 10431                           ;incstack = 0
 10432                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10433  004C  3000               	movlw	0
 10434  004D  3191  2177  3180   	fcall	_getMain_All_Error_Status
 10435  0050  0020               	movlb	0	; select bank0
 10436  0051  00A8               	movwf	??_Load_Main
 10437  0052  0828               	movf	??_Load_Main,w
 10438  0053  00AC               	movwf	Load_Main@error
 10439                           
 10440                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10441  0054  01AE               	clrf	Load_Main@Load_RunStatus
 10442  0055  01AD               	clrf	Load_Main@ErrorCountValue
 10443  0056  01AF               	clrf	Load_Main@LightsCount
 10444                           
 10445                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10446  0057  0022               	movlb	2	; select bank2
 10447  0058  1C48               	btfss	_Load^(0+256),0
 10448  0059  29F8               	goto	l1600
 10449                           
 10450                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10451  005A  319B  23B0  3180   	fcall	_getMain_All_LightsStatus
 10452  005D  3800               	iorlw	0
 10453  005E  1D03               	skipz
 10454  005F  2862               	goto	l7786
 10455                           
 10456                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10457  0060  0022               	movlb	2	; select bank2
 10458  0061  2883               	goto	l7804
 10459  0062                     l7786:	
 10460                           ;OverLoad_B1.c: 46: } else {
 10461                           
 10462                           
 10463                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10464  0062  0020               	movlb	0	; select bank0
 10465  0063  08AC               	movf	Load_Main@error,f
 10466  0064  1D03               	skipz
 10467  0065  2880               	goto	l1603
 10468  0066  319D  256B  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10469  0069  3800               	iorlw	0
 10470  006A  1D03               	skipz
 10471  006B  2880               	goto	l1603
 10472                           
 10473                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10474  006C  0022               	movlb	2	; select bank2
 10475  006D  14C8               	bsf	_Load^(0+256),1
 10476                           
 10477                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10478  006E  319B  2385  3180   	fcall	_getDimmer_LoadGO
 10479  0071  3A01               	xorlw	1
 10480  0072  1D03               	skipz
 10481  0073  287B               	goto	l1604
 10482                           
 10483                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10484  0074  0022               	movlb	2	; select bank2
 10485  0075  1DC8               	btfss	_Load^(0+256),3
 10486  0076  1BC8               	btfsc	_Load^(0+256),7
 10487  0077  2884               	goto	l1602
 10488                           
 10489                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10490  0078  15C8               	bsf	_Load^(0+256),3
 10491                           
 10492                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10493  0079  01ED               	clrf	(_Load^(0+256)+37)
 10494                           
 10495                           ;OverLoad_B1.c: 56: }
 10496                           ;OverLoad_B1.c: 57: } else {
 10497  007A  2884               	goto	l1602
 10498  007B                     l1604:	
 10499                           
 10500                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10501  007B  0022               	movlb	2	; select bank2
 10502  007C  1FC8               	btfss	_Load^(0+256),7
 10503  007D  2884               	goto	l1602
 10504                           
 10505                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10506  007E  13C8               	bcf	_Load^(0+256),7
 10507                           
 10508                           ;OverLoad_B1.c: 60: }
 10509                           ;OverLoad_B1.c: 61: }
 10510                           ;OverLoad_B1.c: 62: } else {
 10511  007F  2884               	goto	l1602
 10512  0080                     l1603:	
 10513                           
 10514                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10515  0080  0022               	movlb	2	; select bank2
 10516  0081  1CC8               	btfss	_Load^(0+256),1
 10517  0082  2884               	goto	l1602
 10518  0083                     l7804:	
 10519                           
 10520                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10521  0083  10C8               	bcf	_Load^(0+256),1
 10522  0084                     l1602:	
 10523                           
 10524                           ;OverLoad_B1.c: 65: }
 10525                           ;OverLoad_B1.c: 66: }
 10526                           ;OverLoad_B1.c: 88: }
 10527                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10528  0084  1CC8               	btfss	_Load^(0+256),1
 10529  0085  29D4               	goto	l1610
 10530                           
 10531                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10532  0086  1548               	bsf	_Load^(0+256),2
 10533                           
 10534                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10535  0087  1E48               	btfss	_Load^(0+256),4
 10536  0088  29D2               	goto	l1611
 10537                           
 10538                           ;OverLoad_B1.c: 95: Load.Time++;
 10539  0089  3001               	movlw	1
 10540  008A  07C9               	addwf	(_Load^(0+256)+1),f
 10541  008B  3000               	movlw	0
 10542  008C  3DCA               	addwfc	((_Load+1)^(0+256)+1),f
 10543                           
 10544                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10545  008D  3000               	movlw	0
 10546  008E  024A               	subwf	((_Load+1)^(0+256)+1),w
 10547  008F  3002               	movlw	2
 10548  0090  1903               	skipnz
 10549  0091  0249               	subwf	(_Load^(0+256)+1),w
 10550  0092  1C03               	skipc
 10551  0093  0008               	return
 10552                           
 10553                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10554  0094  01C9               	clrf	(_Load^(0+256)+1)
 10555  0095  01CA               	clrf	((_Load+1)^(0+256)+1)
 10556                           
 10557                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10558  0096  1248               	bcf	_Load^(0+256),4
 10559                           
 10560                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10561  0097  3001               	movlw	1
 10562  0098  0020               	movlb	0	; select bank0
 10563  0099  00B0               	movwf	Load_Main@i
 10564  009A  3000               	movlw	0
 10565  009B  00B1               	movwf	Load_Main@i+1
 10566  009C  0831               	movf	Load_Main@i+1,w
 10567  009D  3A80               	xorlw	128
 10568  009E  00A8               	movwf	??_Load_Main
 10569  009F  3080               	movlw	128
 10570  00A0  0228               	subwf	??_Load_Main,w
 10571  00A1  1D03               	skipz
 10572  00A2  28A5               	goto	u7915
 10573  00A3  3004               	movlw	4
 10574  00A4  0230               	subwf	Load_Main@i,w
 10575  00A5                     u7915:	
 10576  00A5  1803               	btfsc	3,0
 10577  00A6  28D9               	goto	l7826
 10578  00A7                     l7820:	
 10579                           
 10580                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10581  00A7  0020               	movlb	0	; select bank0
 10582  00A8  3530               	lslf	Load_Main@i,w
 10583  00A9  3E53               	addlw	(_Load+11)& (0+255)
 10584  00AA  0086               	movwf	6
 10585  00AB  3001               	movlw	1	; select bank2/3
 10586  00AC  0087               	movwf	7
 10587  00AD  3F40               	moviw [0]fsr1
 10588  00AE  00A8               	movwf	??_Load_Main
 10589  00AF  3F41               	moviw [1]fsr1
 10590  00B0  00A9               	movwf	??_Load_Main+1
 10591  00B1  0828               	movf	??_Load_Main,w
 10592  00B2  0022               	movlb	2	; select bank2
 10593  00B3  07CD               	addwf	(_Load^(0+256)+5),f
 10594  00B4  0020               	movlb	0	; select bank0
 10595  00B5  0829               	movf	??_Load_Main+1,w
 10596  00B6  0022               	movlb	2	; select bank2
 10597  00B7  3DCE               	addwfc	((_Load+1)^(0+256)+5),f
 10598                           
 10599                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10600  00B8  0020               	movlb	0	; select bank0
 10601  00B9  3530               	lslf	Load_Main@i,w
 10602  00BA  3E5D               	addlw	(_Load+21)& (0+255)
 10603  00BB  0086               	movwf	6
 10604  00BC  3001               	movlw	1	; select bank2/3
 10605  00BD  0087               	movwf	7
 10606  00BE  3F40               	moviw [0]fsr1
 10607  00BF  00A8               	movwf	??_Load_Main
 10608  00C0  3F41               	moviw [1]fsr1
 10609  00C1  00A9               	movwf	??_Load_Main+1
 10610  00C2  0828               	movf	??_Load_Main,w
 10611  00C3  0022               	movlb	2	; select bank2
 10612  00C4  07CF               	addwf	(_Load^(0+256)+7),f
 10613  00C5  0020               	movlb	0	; select bank0
 10614  00C6  0829               	movf	??_Load_Main+1,w
 10615  00C7  0022               	movlb	2	; select bank2
 10616  00C8  3DD0               	addwfc	((_Load+1)^(0+256)+7),f
 10617  00C9  3001               	movlw	1
 10618  00CA  0020               	movlb	0	; select bank0
 10619  00CB  07B0               	addwf	Load_Main@i,f
 10620  00CC  3000               	movlw	0
 10621  00CD  3DB1               	addwfc	Load_Main@i+1,f
 10622  00CE  0831               	movf	Load_Main@i+1,w
 10623  00CF  3A80               	xorlw	128
 10624  00D0  00A8               	movwf	??_Load_Main
 10625  00D1  3080               	movlw	128
 10626  00D2  0228               	subwf	??_Load_Main,w
 10627  00D3  1D03               	skipz
 10628  00D4  28D7               	goto	u7925
 10629  00D5  3004               	movlw	4
 10630  00D6  0230               	subwf	Load_Main@i,w
 10631  00D7                     u7925:	
 10632  00D7  1C03               	skipc
 10633  00D8  28A7               	goto	l7820
 10634  00D9                     l7826:	
 10635                           
 10636                           ;OverLoad_B1.c: 103: }
 10637                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10638  00D9  3003               	movlw	3
 10639  00DA  0020               	movlb	0	; select bank0
 10640  00DB  00A0               	movwf	___lwdiv@divisor
 10641  00DC  3000               	movlw	0
 10642  00DD  00A1               	movwf	___lwdiv@divisor+1
 10643  00DE  0022               	movlb	2	; select bank2
 10644  00DF  084E               	movf	((_Load+1)^(0+256)+5),w
 10645  00E0  0020               	movlb	0	; select bank0
 10646  00E1  01A3               	clrf	___lwdiv@dividend+1
 10647  00E2  07A3               	addwf	___lwdiv@dividend+1,f
 10648  00E3  0022               	movlb	2	; select bank2
 10649  00E4  084D               	movf	(_Load^(0+256)+5),w
 10650  00E5  0020               	movlb	0	; select bank0
 10651  00E6  01A2               	clrf	___lwdiv@dividend
 10652  00E7  07A2               	addwf	___lwdiv@dividend,f
 10653  00E8  3192  227F  3180   	fcall	___lwdiv
 10654  00EB  0020               	movlb	0	; select bank0
 10655  00EC  0821               	movf	?___lwdiv+1,w
 10656  00ED  0022               	movlb	2	; select bank2
 10657  00EE  01CE               	clrf	((_Load+1)^(0+256)+5)
 10658  00EF  07CE               	addwf	((_Load+1)^(0+256)+5),f
 10659  00F0  0020               	movlb	0	; select bank0
 10660  00F1  0820               	movf	?___lwdiv,w
 10661  00F2  0022               	movlb	2	; select bank2
 10662  00F3  01CD               	clrf	(_Load^(0+256)+5)
 10663  00F4  07CD               	addwf	(_Load^(0+256)+5),f
 10664                           
 10665                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10666  00F5  3003               	movlw	3
 10667  00F6  0020               	movlb	0	; select bank0
 10668  00F7  00A0               	movwf	___lwdiv@divisor
 10669  00F8  3000               	movlw	0
 10670  00F9  00A1               	movwf	___lwdiv@divisor+1
 10671  00FA  0022               	movlb	2	; select bank2
 10672  00FB  0850               	movf	((_Load+1)^(0+256)+7),w
 10673  00FC  0020               	movlb	0	; select bank0
 10674  00FD  01A3               	clrf	___lwdiv@dividend+1
 10675  00FE  07A3               	addwf	___lwdiv@dividend+1,f
 10676  00FF  0022               	movlb	2	; select bank2
 10677  0100  084F               	movf	(_Load^(0+256)+7),w
 10678  0101  0020               	movlb	0	; select bank0
 10679  0102  01A2               	clrf	___lwdiv@dividend
 10680  0103  07A2               	addwf	___lwdiv@dividend,f
 10681  0104  3192  227F  3180   	fcall	___lwdiv
 10682  0107  0020               	movlb	0	; select bank0
 10683  0108  0821               	movf	?___lwdiv+1,w
 10684  0109  0022               	movlb	2	; select bank2
 10685  010A  01D0               	clrf	((_Load+1)^(0+256)+7)
 10686  010B  07D0               	addwf	((_Load+1)^(0+256)+7),f
 10687  010C  0020               	movlb	0	; select bank0
 10688  010D  0820               	movf	?___lwdiv,w
 10689  010E  0022               	movlb	2	; select bank2
 10690  010F  01CF               	clrf	(_Load^(0+256)+7)
 10691  0110  07CF               	addwf	(_Load^(0+256)+7),f
 10692                           
 10693                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10694  0111  319F  274B  3180   	fcall	_setLoad_AH_AL_Restore
 10695                           
 10696                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10697  0114  0022               	movlb	2	; select bank2
 10698  0115  0850               	movf	((_Load+1)^(0+256)+7),w
 10699  0116  024E               	subwf	((_Load+1)^(0+256)+5),w
 10700  0117  1D03               	skipz
 10701  0118  291B               	goto	u7935
 10702  0119  084F               	movf	(_Load^(0+256)+7),w
 10703  011A  024D               	subwf	(_Load^(0+256)+5),w
 10704  011B                     u7935:	
 10705  011B  1C03               	skipc
 10706  011C  0008               	return
 10707                           
 10708                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10709  011D  3005               	movlw	5
 10710  011E  3E48               	addlw	_Load& (0+255)
 10711  011F  0086               	movwf	6
 10712  0120  3001               	movlw	1	; select bank2/3
 10713  0121  0087               	movwf	7
 10714  0122  094F               	comf	(_Load^(0+256)+7),w
 10715  0123  0020               	movlb	0	; select bank0
 10716  0124  00A8               	movwf	??_Load_Main
 10717  0125  0022               	movlb	2	; select bank2
 10718  0126  0950               	comf	((_Load+1)^(0+256)+7),w
 10719  0127  0020               	movlb	0	; select bank0
 10720  0128  00A9               	movwf	??_Load_Main+1
 10721  0129  0AA8               	incf	??_Load_Main,f
 10722  012A  1903               	skipnz
 10723  012B  0AA9               	incf	??_Load_Main+1,f
 10724  012C  3F40               	moviw [0]fsr1
 10725  012D  0728               	addwf	??_Load_Main,w
 10726  012E  0022               	movlb	2	; select bank2
 10727  012F  00E7               	movwf	(_Load^(0+256)+31)
 10728  0130  3F41               	moviw [1]fsr1
 10729  0131  0020               	movlb	0	; select bank0
 10730  0132  3D29               	addwfc	??_Load_Main+1,w
 10731  0133  0022               	movlb	2	; select bank2
 10732  0134  00E8               	movwf	(_Load^(0+256)+32)
 10733                           
 10734                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10735  0135  01CD               	clrf	(_Load^(0+256)+5)
 10736  0136  01CE               	clrf	((_Load+1)^(0+256)+5)
 10737                           
 10738                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10739  0137  01CF               	clrf	(_Load^(0+256)+7)
 10740  0138  01D0               	clrf	((_Load+1)^(0+256)+7)
 10741                           
 10742                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10743  0139  1DC8               	btfss	_Load^(0+256),3
 10744  013A  2994               	goto	l7866
 10745                           
 10746                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10747  013B  3002               	movlw	2
 10748  013C  026D               	subwf	(_Load^(0+256)+37),w
 10749  013D  1803               	skipnc
 10750  013E  2994               	goto	l7866
 10751                           
 10752                           ;OverLoad_B1.c: 115: Load.Count++;
 10753  013F  3001               	movlw	1
 10754  0140  0020               	movlb	0	; select bank0
 10755  0141  00A8               	movwf	??_Load_Main
 10756  0142  0828               	movf	??_Load_Main,w
 10757  0143  0022               	movlb	2	; select bank2
 10758  0144  07ED               	addwf	(_Load^(0+256)+37),f
 10759                           
 10760                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10761  0145  319B  238D  3180   	fcall	_getDimmer_Load_Status
 10762  0148  0020               	movlb	0	; select bank0
 10763  0149  00A8               	movwf	??_Load_Main
 10764  014A  0828               	movf	??_Load_Main,w
 10765  014B  00AE               	movwf	Load_Main@Load_RunStatus
 10766                           
 10767                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10768  014C  319B  23CF  3180   	fcall	_getMain_Lights_Count
 10769  014F  0020               	movlb	0	; select bank0
 10770  0150  00A8               	movwf	??_Load_Main
 10771  0151  0828               	movf	??_Load_Main,w
 10772  0152  00AF               	movwf	Load_Main@LightsCount
 10773                           
 10774                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10775  0153  0022               	movlb	2	; select bank2
 10776  0154  086D               	movf	(_Load^(0+256)+37),w
 10777  0155  3A01               	xorlw	1
 10778  0156  1D03               	skipz
 10779  0157  295C               	goto	l7852
 10780                           
 10781                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10782  0158  3074               	movlw	116
 10783  0159  00EB               	movwf	(_Load^(0+256)+35)
 10784  015A  3004               	movlw	4
 10785  015B  2969               	goto	L6
 10786  015C                     l7852:	
 10787                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10788                           
 10789  015C  086D               	movf	(_Load^(0+256)+37),w
 10790  015D  3A02               	xorlw	2
 10791  015E  1D03               	skipz
 10792  015F  2994               	goto	l7866
 10793                           
 10794                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10795  0160  0020               	movlb	0	; select bank0
 10796  0161  082F               	movf	Load_Main@LightsCount,w
 10797  0162  3A01               	xorlw	1
 10798  0163  1D03               	skipz
 10799  0164  296B               	goto	l7858
 10800                           
 10801                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.6*57);
 10802  0165  305B               	movlw	91
 10803  0166  0022               	movlb	2	; select bank2
 10804  0167  00EB               	movwf	(_Load^(0+256)+35)
 10805  0168  3000               	movlw	0
 10806  0169                     L6:	
 10807  0169  00EC               	movwf	(_Load^(0+256)+36)
 10808                           
 10809                           ;OverLoad_B1.c: 130: } else {
 10810  016A  2994               	goto	l7866
 10811  016B                     l7858:	
 10812                           
 10813                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10814  016B  0020               	movlb	0	; select bank0
 10815  016C  08AE               	movf	Load_Main@Load_RunStatus,f
 10816  016D  1D03               	skipz
 10817  016E  2988               	goto	l7862
 10818                           
 10819                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.6*57) * LightsCount;
 10820  016F  082F               	movf	Load_Main@LightsCount,w
 10821  0170  00A8               	movwf	??_Load_Main
 10822  0171  01A9               	clrf	??_Load_Main+1
 10823  0172  0828               	movf	??_Load_Main,w
 10824  0173  00A0               	movwf	___wmul@multiplier
 10825  0174  0829               	movf	??_Load_Main+1,w
 10826  0175  00A1               	movwf	___wmul@multiplier+1
 10827  0176  305B               	movlw	91
 10828  0177  00A2               	movwf	___wmul@multiplicand
 10829  0178  3000               	movlw	0
 10830  0179  00A3               	movwf	___wmul@multiplicand+1
 10831  017A  319F  2784  3180   	fcall	___wmul
 10832  017D  0020               	movlb	0	; select bank0
 10833  017E  0821               	movf	?___wmul+1,w
 10834  017F  0022               	movlb	2	; select bank2
 10835  0180  01EC               	clrf	((_Load+1)^(0+256)+35)
 10836  0181  07EC               	addwf	((_Load+1)^(0+256)+35),f
 10837  0182  0020               	movlb	0	; select bank0
 10838  0183  0820               	movf	?___wmul,w
 10839  0184  0022               	movlb	2	; select bank2
 10840  0185  01EB               	clrf	(_Load^(0+256)+35)
 10841  0186  07EB               	addwf	(_Load^(0+256)+35),f
 10842                           
 10843                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10844  0187  2994               	goto	l7866
 10845  0188                     l7862:	
 10846  0188  0020               	movlb	0	; select bank0
 10847  0189  082E               	movf	Load_Main@Load_RunStatus,w
 10848  018A  3A01               	xorlw	1
 10849  018B  1D03               	skipz
 10850  018C  2994               	goto	l7866
 10851                           
 10852                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.6*57) + Load.TotalLoad;
 10853  018D  0022               	movlb	2	; select bank2
 10854  018E  0851               	movf	(_Load^(0+256)+9),w
 10855  018F  3E5B               	addlw	91
 10856  0190  00EB               	movwf	(_Load^(0+256)+35)
 10857  0191  3000               	movlw	0
 10858  0192  3D52               	addwfc	((_Load+1)^(0+256)+9),w
 10859  0193  00EC               	movwf	((_Load+1)^(0+256)+35)
 10860  0194                     l7866:	
 10861                           
 10862                           ;OverLoad_B1.c: 135: }
 10863                           ;OverLoad_B1.c: 136: }
 10864                           ;OverLoad_B1.c: 137: }
 10865                           ;OverLoad_B1.c: 138: }
 10866                           ;OverLoad_B1.c: 139: }
 10867                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10868  0194  0022               	movlb	2	; select bank2
 10869  0195  086C               	movf	((_Load+1)^(0+256)+35),w
 10870  0196  0268               	subwf	((_Load+1)^(0+256)+31),w
 10871  0197  1D03               	skipz
 10872  0198  299B               	goto	u8015
 10873  0199  086B               	movf	(_Load^(0+256)+35),w
 10874  019A  0267               	subwf	(_Load^(0+256)+31),w
 10875  019B                     u8015:	
 10876  019B  1C03               	skipc
 10877  019C  29BA               	goto	l7882
 10878                           
 10879                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10880  019D  0020               	movlb	0	; select bank0
 10881  019E  082F               	movf	Load_Main@LightsCount,w
 10882  019F  3A01               	xorlw	1
 10883  01A0  1903               	skipnz
 10884  01A1  29A4               	goto	l7872
 10885  01A2  3003               	movlw	3
 10886  01A3  29A5               	goto	L7
 10887  01A4                     l7872:	
 10888  01A4  3002               	movlw	2
 10889  01A5                     L7:	
 10890  01A5  00AA               	movwf	_Load_Main$3756
 10891  01A6  3000               	movlw	0
 10892  01A7  00AB               	movwf	_Load_Main$3756+1
 10893  01A8  082A               	movf	_Load_Main$3756,w
 10894  01A9  00A8               	movwf	??_Load_Main
 10895  01AA  0828               	movf	??_Load_Main,w
 10896  01AB  00AD               	movwf	Load_Main@ErrorCountValue
 10897                           
 10898                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10899  01AC  3001               	movlw	1
 10900  01AD  00A8               	movwf	??_Load_Main
 10901  01AE  0828               	movf	??_Load_Main,w
 10902  01AF  0022               	movlb	2	; select bank2
 10903  01B0  07EE               	addwf	(_Load^(0+256)+38),f
 10904                           
 10905                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10906  01B1  086E               	movf	(_Load^(0+256)+38),w
 10907  01B2  0020               	movlb	0	; select bank0
 10908  01B3  022D               	subwf	Load_Main@ErrorCountValue,w
 10909  01B4  1803               	skipnc
 10910  01B5  0008               	return
 10911                           
 10912                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10913  01B6  0022               	movlb	2	; select bank2
 10914  01B7  01EE               	clrf	(_Load^(0+256)+38)
 10915                           
 10916                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10917  01B8  16C8               	bsf	_Load^(0+256),5
 10918                           
 10919                           ;OverLoad_B1.c: 168: }
 10920                           ;OverLoad_B1.c: 169: } else {
 10921  01B9  0008               	return
 10922  01BA                     l7882:	
 10923                           
 10924                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10925  01BA  01EE               	clrf	(_Load^(0+256)+38)
 10926                           
 10927                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10928  01BB  1DC8               	btfss	_Load^(0+256),3
 10929  01BC  0008               	return
 10930                           
 10931                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10932  01BD  3001               	movlw	1
 10933  01BE  0020               	movlb	0	; select bank0
 10934  01BF  00A8               	movwf	??_Load_Main
 10935  01C0  0828               	movf	??_Load_Main,w
 10936  01C1  0022               	movlb	2	; select bank2
 10937  01C2  07EF               	addwf	(_Load^(0+256)+39),f
 10938                           
 10939                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10940  01C3  3003               	movlw	3
 10941  01C4  026F               	subwf	(_Load^(0+256)+39),w
 10942  01C5  1C03               	skipc
 10943  01C6  0008               	return
 10944                           
 10945                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10946  01C7  01EF               	clrf	(_Load^(0+256)+39)
 10947                           
 10948                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10949  01C8  17C8               	bsf	_Load^(0+256),7
 10950                           
 10951                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10952  01C9  11C8               	bcf	_Load^(0+256),3
 10953                           
 10954                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10955  01CA  01ED               	clrf	(_Load^(0+256)+37)
 10956                           
 10957                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10958  01CB  0868               	movf	((_Load+1)^(0+256)+31),w
 10959  01CC  01D2               	clrf	((_Load+1)^(0+256)+9)
 10960  01CD  07D2               	addwf	((_Load+1)^(0+256)+9),f
 10961  01CE  0867               	movf	(_Load^(0+256)+31),w
 10962  01CF  01D1               	clrf	(_Load^(0+256)+9)
 10963  01D0  07D1               	addwf	(_Load^(0+256)+9),f
 10964                           
 10965                           ;OverLoad_B1.c: 182: }
 10966                           ;OverLoad_B1.c: 183: }
 10967                           ;OverLoad_B1.c: 206: }
 10968                           ;OverLoad_B1.c: 207: }
 10969                           ;OverLoad_B1.c: 208: }
 10970                           ;OverLoad_B1.c: 209: } else {
 10971  01D1  0008               	return
 10972  01D2                     l1611:	
 10973                           
 10974                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 10975  01D2  1648               	bsf	_Load^(0+256),4
 10976                           
 10977                           ;OverLoad_B1.c: 211: }
 10978                           ;OverLoad_B1.c: 212: } else {
 10979  01D3  0008               	return
 10980  01D4                     l1610:	
 10981                           
 10982                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 10983  01D4  1D48               	btfss	_Load^(0+256),2
 10984  01D5  29E7               	goto	l7918
 10985                           
 10986                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 10987  01D6  1148               	bcf	_Load^(0+256),2
 10988                           
 10989                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 10990  01D7  1248               	bcf	_Load^(0+256),4
 10991                           
 10992                           ;OverLoad_B1.c: 218: Load.Time = 0;
 10993  01D8  01C9               	clrf	(_Load^(0+256)+1)
 10994  01D9  01CA               	clrf	((_Load+1)^(0+256)+1)
 10995                           
 10996                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 10997  01DA  319F  274B  3180   	fcall	_setLoad_AH_AL_Restore
 10998                           
 10999                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11000  01DD  0022               	movlb	2	; select bank2
 11001  01DE  01EE               	clrf	(_Load^(0+256)+38)
 11002                           
 11003                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11004  01DF  01EF               	clrf	(_Load^(0+256)+39)
 11005                           
 11006                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11007  01E0  01CD               	clrf	(_Load^(0+256)+5)
 11008  01E1  01CE               	clrf	((_Load+1)^(0+256)+5)
 11009                           
 11010                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11011  01E2  01CF               	clrf	(_Load^(0+256)+7)
 11012  01E3  01D0               	clrf	((_Load+1)^(0+256)+7)
 11013                           
 11014                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11015  01E4  11C8               	bcf	_Load^(0+256),3
 11016                           
 11017                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11018  01E5  01ED               	clrf	(_Load^(0+256)+37)
 11019                           
 11020                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11021  01E6  13C8               	bcf	_Load^(0+256),7
 11022  01E7                     l7918:	
 11023                           
 11024                           ;OverLoad_B1.c: 255: }
 11025                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11026  01E7  1EC8               	btfss	_Load^(0+256),5
 11027  01E8  0008               	return
 11028                           
 11029                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11030  01E9  3001               	movlw	1
 11031  01EA  07CB               	addwf	(_Load^(0+256)+3),f
 11032  01EB  3000               	movlw	0
 11033  01EC  3DCC               	addwfc	((_Load+1)^(0+256)+3),f
 11034                           
 11035                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11036  01ED  3001               	movlw	1
 11037  01EE  024C               	subwf	((_Load+1)^(0+256)+3),w
 11038  01EF  30F4               	movlw	244
 11039  01F0  1903               	skipnz
 11040  01F1  024B               	subwf	(_Load^(0+256)+3),w
 11041  01F2  1C03               	skipc
 11042  01F3  0008               	return
 11043                           
 11044                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11045  01F4  01CB               	clrf	(_Load^(0+256)+3)
 11046  01F5  01CC               	clrf	((_Load+1)^(0+256)+3)
 11047                           
 11048                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11049  01F6  12C8               	bcf	_Load^(0+256),5
 11050                           
 11051                           ;OverLoad_B1.c: 261: }
 11052                           ;OverLoad_B1.c: 262: }
 11053                           ;OverLoad_B1.c: 263: }
 11054                           ;OverLoad_B1.c: 264: } else {
 11055  01F7  0008               	return
 11056  01F8                     l1600:	
 11057                           
 11058                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11059  01F8  0021               	movlb	1	; select bank1
 11060  01F9  1C2E               	btfss	_myMain^(0+128),0
 11061  01FA  0008               	return
 11062                           
 11063                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11064  01FB  0022               	movlb	2	; select bank2
 11065  01FC  1448               	bsf	_Load^(0+256),0
 11066  01FD  0008               	return
 11067  01FE                     __end_of_Load_Main:	
 11068                           
 11069                           	psect	text64
 11070  1BCF                     __ptext64:	
 11071 ;; *************** function _getMain_Lights_Count *****************
 11072 ;; Defined at:
 11073 ;;		line 459 in file "../src/Main_B1.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;		None
 11076 ;; Auto vars:     Size  Location     Type
 11077 ;;  status1         1    1[BANK0 ] unsigned char 
 11078 ;;  count           1    0[BANK0 ] unsigned char 
 11079 ;; Return value:  Size  Location     Type
 11080 ;;                  1    wreg      unsigned char 
 11081 ;; Registers used:
 11082 ;;		wreg, status,2
 11083 ;; Tracked objects:
 11084 ;;		On entry : 0/0
 11085 ;;		On exit  : 0/0
 11086 ;;		Unchanged: 0/0
 11087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;Total ram usage:        2 bytes
 11093 ;; Hardware stack levels used:    1
 11094 ;; Hardware stack levels required when called:    4
 11095 ;; This function calls:
 11096 ;;		Nothing
 11097 ;; This function is called by:
 11098 ;;		_Load_Main
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           
 11103                           ;psect for function _getMain_Lights_Count
 11104  1BCF                     _getMain_Lights_Count:	
 11105                           
 11106                           ;Main_B1.c: 460: char count = 0;
 11107                           
 11108                           ;incstack = 0
 11109                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11110  1BCF  0020               	movlb	0	; select bank0
 11111  1BD0  01A0               	clrf	getMain_Lights_Count@count
 11112                           
 11113                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11114  1BD1  3000               	movlw	0
 11115  1BD2  0021               	movlb	1	; select bank1
 11116  1BD3  19C7               	btfsc	_DimmerIntr1^(0+128),3
 11117  1BD4  3001               	movlw	1
 11118  1BD5  0020               	movlb	0	; select bank0
 11119  1BD6  00A1               	movwf	getMain_Lights_Count@status1
 11120                           
 11121                           ;Main_B1.c: 487: return count = status1;
 11122  1BD7  0821               	movf	getMain_Lights_Count@status1,w
 11123  1BD8  00A0               	movwf	getMain_Lights_Count@count
 11124  1BD9  0008               	return
 11125  1BDA                     __end_of_getMain_Lights_Count:	
 11126                           
 11127                           	psect	text65
 11128  1B8D                     __ptext65:	
 11129 ;; *************** function _getDimmer_Load_Status *****************
 11130 ;; Defined at:
 11131 ;;		line 1084 in file "../src/Dimmer_B1.c"
 11132 ;; Parameters:    Size  Location     Type
 11133 ;;		None
 11134 ;; Auto vars:     Size  Location     Type
 11135 ;;  status          1    0[BANK0 ] unsigned char 
 11136 ;; Return value:  Size  Location     Type
 11137 ;;                  1    wreg      unsigned char 
 11138 ;; Registers used:
 11139 ;;		wreg, status,2
 11140 ;; Tracked objects:
 11141 ;;		On entry : 0/0
 11142 ;;		On exit  : 0/0
 11143 ;;		Unchanged: 0/0
 11144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;Total ram usage:        1 bytes
 11150 ;; Hardware stack levels used:    1
 11151 ;; Hardware stack levels required when called:    4
 11152 ;; This function calls:
 11153 ;;		Nothing
 11154 ;; This function is called by:
 11155 ;;		_Load_Main
 11156 ;; This function uses a non-reentrant model
 11157 ;;
 11158                           
 11159                           
 11160                           ;psect for function _getDimmer_Load_Status
 11161  1B8D                     _getDimmer_Load_Status:	
 11162                           
 11163                           ;Dimmer_B1.c: 1085: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11164                           
 11165                           ;incstack = 0
 11166                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11167  1B8D  3000               	movlw	0
 11168  1B8E  0023               	movlb	3	; select bank3
 11169  1B8F  1920               	btfsc	_Dimmer^(0+384),2
 11170  1B90  3001               	movlw	1
 11171  1B91  0020               	movlb	0	; select bank0
 11172  1B92  00A0               	movwf	getDimmer_Load_Status@status
 11173                           
 11174                           ;Dimmer_B1.c: 1086: return status;
 11175  1B93  0820               	movf	getDimmer_Load_Status@status,w
 11176  1B94  0008               	return
 11177  1B95                     __end_of_getDimmer_Load_Status:	
 11178                           
 11179                           	psect	text66
 11180  1B85                     __ptext66:	
 11181 ;; *************** function _getDimmer_LoadGO *****************
 11182 ;; Defined at:
 11183 ;;		line 1078 in file "../src/Dimmer_B1.c"
 11184 ;; Parameters:    Size  Location     Type
 11185 ;;		None
 11186 ;; Auto vars:     Size  Location     Type
 11187 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11188 ;; Return value:  Size  Location     Type
 11189 ;;                  1    wreg      unsigned char 
 11190 ;; Registers used:
 11191 ;;		wreg, status,2
 11192 ;; Tracked objects:
 11193 ;;		On entry : 0/0
 11194 ;;		On exit  : 0/0
 11195 ;;		Unchanged: 0/0
 11196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11200 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11201 ;;Total ram usage:        1 bytes
 11202 ;; Hardware stack levels used:    1
 11203 ;; Hardware stack levels required when called:    4
 11204 ;; This function calls:
 11205 ;;		Nothing
 11206 ;; This function is called by:
 11207 ;;		_Load_Main
 11208 ;; This function uses a non-reentrant model
 11209 ;;
 11210                           
 11211                           
 11212                           ;psect for function _getDimmer_LoadGO
 11213  1B85                     _getDimmer_LoadGO:	
 11214                           
 11215                           ;Dimmer_B1.c: 1079: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11216                           
 11217                           ;incstack = 0
 11218                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11219  1B85  3000               	movlw	0
 11220  1B86  0023               	movlb	3	; select bank3
 11221  1B87  18A0               	btfsc	_Dimmer^(0+384),1
 11222  1B88  3001               	movlw	1
 11223  1B89  0020               	movlb	0	; select bank0
 11224  1B8A  00A0               	movwf	getDimmer_LoadGO@loadgo
 11225                           
 11226                           ;Dimmer_B1.c: 1080: return loadgo;
 11227  1B8B  0820               	movf	getDimmer_LoadGO@loadgo,w
 11228  1B8C  0008               	return
 11229  1B8D                     __end_of_getDimmer_LoadGO:	
 11230                           
 11231                           	psect	text67
 11232  1D6B                     __ptext67:	
 11233 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11234 ;; Defined at:
 11235 ;;		line 242 in file "../src/Dimmer_B1.c"
 11236 ;; Parameters:    Size  Location     Type
 11237 ;;		None
 11238 ;; Auto vars:     Size  Location     Type
 11239 ;;  status          1    0[BANK0 ] unsigned char 
 11240 ;; Return value:  Size  Location     Type
 11241 ;;                  1    wreg      unsigned char 
 11242 ;; Registers used:
 11243 ;;		wreg, status,2, status,0
 11244 ;; Tracked objects:
 11245 ;;		On entry : 0/0
 11246 ;;		On exit  : 0/0
 11247 ;;		Unchanged: 0/0
 11248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;Total ram usage:        1 bytes
 11254 ;; Hardware stack levels used:    1
 11255 ;; Hardware stack levels required when called:    4
 11256 ;; This function calls:
 11257 ;;		Nothing
 11258 ;; This function is called by:
 11259 ;;		_Load_Main
 11260 ;; This function uses a non-reentrant model
 11261 ;;
 11262                           
 11263                           
 11264                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11265  1D6B                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11266                           
 11267                           ;Dimmer_B1.c: 243: char status = 0;
 11268                           
 11269                           ;incstack = 0
 11270                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11271  1D6B  0020               	movlb	0	; select bank0
 11272  1D6C  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11273                           
 11274                           ;Dimmer_B1.c: 254: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11275  1D6D  3000               	movlw	0
 11276  1D6E  0021               	movlb	1	; select bank1
 11277  1D6F  1A47               	btfsc	_DimmerIntr1^(0+128),4
 11278  1D70  3001               	movlw	1
 11279  1D71  0020               	movlb	0	; select bank0
 11280  1D72  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11281                           
 11282                           ;Dimmer_B1.c: 258: if (status == 0) {
 11283  1D73  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11284  1D74  1D03               	skipz
 11285  1D75  2D7C               	goto	l6992
 11286                           
 11287                           ;Dimmer_B1.c: 268: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11288  1D76  3000               	movlw	0
 11289  1D77  0021               	movlb	1	; select bank1
 11290  1D78  1B47               	btfsc	_DimmerIntr1^(0+128),6
 11291  1D79  3001               	movlw	1
 11292  1D7A  0020               	movlb	0	; select bank0
 11293  1D7B  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11294  1D7C                     l6992:	
 11295                           
 11296                           ;Dimmer_B1.c: 270: }
 11297                           ;Dimmer_B1.c: 272: return status;
 11298  1D7C  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11299  1D7D  0008               	return
 11300  1D7E                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11301                           
 11302                           	psect	text68
 11303  1F84                     __ptext68:	
 11304 ;; *************** function ___wmul *****************
 11305 ;; Defined at:
 11306 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11307 ;; Parameters:    Size  Location     Type
 11308 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11309 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;  product         2    4[BANK0 ] unsigned int 
 11312 ;; Return value:  Size  Location     Type
 11313 ;;                  2    0[BANK0 ] unsigned int 
 11314 ;; Registers used:
 11315 ;;		wreg, status,2, status,0
 11316 ;; Tracked objects:
 11317 ;;		On entry : 0/0
 11318 ;;		On exit  : 0/0
 11319 ;;		Unchanged: 0/0
 11320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11321 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;Total ram usage:        6 bytes
 11326 ;; Hardware stack levels used:    1
 11327 ;; Hardware stack levels required when called:    4
 11328 ;; This function calls:
 11329 ;;		Nothing
 11330 ;; This function is called by:
 11331 ;;		_Load_Main
 11332 ;; This function uses a non-reentrant model
 11333 ;;
 11334                           
 11335                           
 11336                           ;psect for function ___wmul
 11337  1F84                     ___wmul:	
 11338                           
 11339                           ;incstack = 0
 11340                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11341  1F84  0020               	movlb	0	; select bank0
 11342  1F85  01A4               	clrf	___wmul@product
 11343  1F86  01A5               	clrf	___wmul@product+1
 11344  1F87                     l7504:	
 11345  1F87  1C20               	btfss	___wmul@multiplier,0
 11346  1F88  2F8D               	goto	l2651
 11347  1F89  0822               	movf	___wmul@multiplicand,w
 11348  1F8A  07A4               	addwf	___wmul@product,f
 11349  1F8B  0823               	movf	___wmul@multiplicand+1,w
 11350  1F8C  3DA5               	addwfc	___wmul@product+1,f
 11351  1F8D                     l2651:	
 11352  1F8D  3001               	movlw	1
 11353  1F8E                     u7355:	
 11354  1F8E  35A2               	lslf	___wmul@multiplicand,f
 11355  1F8F  0DA3               	rlf	___wmul@multiplicand+1,f
 11356  1F90  0B89               	decfsz	9,f
 11357  1F91  2F8E               	goto	u7355
 11358  1F92  3001               	movlw	1
 11359  1F93                     u7365:	
 11360  1F93  36A1               	lsrf	___wmul@multiplier+1,f
 11361  1F94  0CA0               	rrf	___wmul@multiplier,f
 11362  1F95  0B89               	decfsz	9,f
 11363  1F96  2F93               	goto	u7365
 11364  1F97  0821               	movf	___wmul@multiplier+1,w
 11365  1F98  0420               	iorwf	___wmul@multiplier,w
 11366  1F99  1D03               	skipz
 11367  1F9A  2F87               	goto	l7504
 11368  1F9B  0825               	movf	___wmul@product+1,w
 11369  1F9C  01A1               	clrf	?___wmul+1
 11370  1F9D  07A1               	addwf	?___wmul+1,f
 11371  1F9E  0824               	movf	___wmul@product,w
 11372  1F9F  01A0               	clrf	?___wmul
 11373  1FA0  07A0               	addwf	?___wmul,f
 11374  1FA1  0008               	return
 11375  1FA2                     __end_of___wmul:	
 11376                           
 11377                           	psect	text69
 11378  127F                     __ptext69:	
 11379 ;; *************** function ___lwdiv *****************
 11380 ;; Defined at:
 11381 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11382 ;; Parameters:    Size  Location     Type
 11383 ;;  divisor         2    0[BANK0 ] unsigned int 
 11384 ;;  dividend        2    2[BANK0 ] unsigned int 
 11385 ;; Auto vars:     Size  Location     Type
 11386 ;;  quotient        2    5[BANK0 ] unsigned int 
 11387 ;;  counter         1    7[BANK0 ] unsigned char 
 11388 ;; Return value:  Size  Location     Type
 11389 ;;                  2    0[BANK0 ] unsigned int 
 11390 ;; Registers used:
 11391 ;;		wreg, status,2, status,0
 11392 ;; Tracked objects:
 11393 ;;		On entry : 0/0
 11394 ;;		On exit  : 0/0
 11395 ;;		Unchanged: 0/0
 11396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11397 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11398 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11400 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11401 ;;Total ram usage:        8 bytes
 11402 ;; Hardware stack levels used:    1
 11403 ;; Hardware stack levels required when called:    4
 11404 ;; This function calls:
 11405 ;;		Nothing
 11406 ;; This function is called by:
 11407 ;;		_Load_Main
 11408 ;;		_setRF_Main
 11409 ;; This function uses a non-reentrant model
 11410 ;;
 11411                           
 11412                           
 11413                           ;psect for function ___lwdiv
 11414  127F                     ___lwdiv:	
 11415                           
 11416                           ;incstack = 0
 11417                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11418  127F  0020               	movlb	0	; select bank0
 11419  1280  01A5               	clrf	___lwdiv@quotient
 11420  1281  01A6               	clrf	___lwdiv@quotient+1
 11421  1282  0821               	movf	___lwdiv@divisor+1,w
 11422  1283  0420               	iorwf	___lwdiv@divisor,w
 11423  1284  1903               	skipnz
 11424  1285  2AAF               	goto	l6910
 11425  1286  01A7               	clrf	___lwdiv@counter
 11426  1287  0AA7               	incf	___lwdiv@counter,f
 11427  1288                     l6898:	
 11428  1288  1BA1               	btfsc	___lwdiv@divisor+1,7
 11429  1289  2A94               	goto	l6900
 11430  128A  3001               	movlw	1
 11431  128B                     u6295:	
 11432  128B  35A0               	lslf	___lwdiv@divisor,f
 11433  128C  0DA1               	rlf	___lwdiv@divisor+1,f
 11434  128D  0B89               	decfsz	9,f
 11435  128E  2A8B               	goto	u6295
 11436  128F  3001               	movlw	1
 11437  1290  00A4               	movwf	??___lwdiv
 11438  1291  0824               	movf	??___lwdiv,w
 11439  1292  07A7               	addwf	___lwdiv@counter,f
 11440  1293  2A88               	goto	l6898
 11441  1294                     l6900:	
 11442  1294  3001               	movlw	1
 11443  1295                     u6315:	
 11444  1295  35A5               	lslf	___lwdiv@quotient,f
 11445  1296  0DA6               	rlf	___lwdiv@quotient+1,f
 11446  1297  0B89               	decfsz	9,f
 11447  1298  2A95               	goto	u6315
 11448  1299  0821               	movf	___lwdiv@divisor+1,w
 11449  129A  0223               	subwf	___lwdiv@dividend+1,w
 11450  129B  1D03               	skipz
 11451  129C  2A9F               	goto	u6325
 11452  129D  0820               	movf	___lwdiv@divisor,w
 11453  129E  0222               	subwf	___lwdiv@dividend,w
 11454  129F                     u6325:	
 11455  129F  1C03               	skipc
 11456  12A0  2AA6               	goto	l6906
 11457  12A1  0820               	movf	___lwdiv@divisor,w
 11458  12A2  02A2               	subwf	___lwdiv@dividend,f
 11459  12A3  0821               	movf	___lwdiv@divisor+1,w
 11460  12A4  3BA3               	subwfb	___lwdiv@dividend+1,f
 11461  12A5  1425               	bsf	___lwdiv@quotient,0
 11462  12A6                     l6906:	
 11463  12A6  3001               	movlw	1
 11464  12A7                     u6335:	
 11465  12A7  36A1               	lsrf	___lwdiv@divisor+1,f
 11466  12A8  0CA0               	rrf	___lwdiv@divisor,f
 11467  12A9  0B89               	decfsz	9,f
 11468  12AA  2AA7               	goto	u6335
 11469  12AB  3001               	movlw	1
 11470  12AC  02A7               	subwf	___lwdiv@counter,f
 11471  12AD  1D03               	btfss	3,2
 11472  12AE  2A94               	goto	l6900
 11473  12AF                     l6910:	
 11474  12AF  0826               	movf	___lwdiv@quotient+1,w
 11475  12B0  01A1               	clrf	?___lwdiv+1
 11476  12B1  07A1               	addwf	?___lwdiv+1,f
 11477  12B2  0825               	movf	___lwdiv@quotient,w
 11478  12B3  01A0               	clrf	?___lwdiv
 11479  12B4  07A0               	addwf	?___lwdiv,f
 11480  12B5  0008               	return
 11481  12B6                     __end_of___lwdiv:	
 11482                           
 11483                           	psect	text70
 11484  1B1A                     __ptext70:	
 11485 ;; *************** function _Load_Initialization *****************
 11486 ;; Defined at:
 11487 ;;		line 9 in file "../src/OverLoad_B1.c"
 11488 ;; Parameters:    Size  Location     Type
 11489 ;;		None
 11490 ;; Auto vars:     Size  Location     Type
 11491 ;;		None
 11492 ;; Return value:  Size  Location     Type
 11493 ;;		None               void
 11494 ;; Registers used:
 11495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11496 ;; Tracked objects:
 11497 ;;		On entry : 0/0
 11498 ;;		On exit  : 0/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;Total ram usage:        0 bytes
 11506 ;; Hardware stack levels used:    1
 11507 ;; Hardware stack levels required when called:    5
 11508 ;; This function calls:
 11509 ;;		_setLoad_AH_AL_Restore
 11510 ;; This function is called by:
 11511 ;;		_main
 11512 ;; This function uses a non-reentrant model
 11513 ;;
 11514                           
 11515                           
 11516                           ;psect for function _Load_Initialization
 11517  1B1A                     _Load_Initialization:	
 11518                           
 11519                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11520                           
 11521                           ;incstack = 0
 11522                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11523  1B1A  319F  274B         	fcall	_setLoad_AH_AL_Restore
 11524  1B1C  0008               	return
 11525  1B1D                     __end_of_Load_Initialization:	
 11526                           
 11527                           	psect	text71
 11528  1F4B                     __ptext71:	
 11529 ;; *************** function _setLoad_AH_AL_Restore *****************
 11530 ;; Defined at:
 11531 ;;		line 292 in file "../src/OverLoad_B1.c"
 11532 ;; Parameters:    Size  Location     Type
 11533 ;;		None
 11534 ;; Auto vars:     Size  Location     Type
 11535 ;;  i               1    1[BANK0 ] unsigned char 
 11536 ;; Return value:  Size  Location     Type
 11537 ;;		None               void
 11538 ;; Registers used:
 11539 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11540 ;; Tracked objects:
 11541 ;;		On entry : 0/0
 11542 ;;		On exit  : 0/0
 11543 ;;		Unchanged: 0/0
 11544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;Total ram usage:        2 bytes
 11550 ;; Hardware stack levels used:    1
 11551 ;; Hardware stack levels required when called:    4
 11552 ;; This function calls:
 11553 ;;		Nothing
 11554 ;; This function is called by:
 11555 ;;		_Load_Initialization
 11556 ;;		_Load_Main
 11557 ;; This function uses a non-reentrant model
 11558 ;;
 11559                           
 11560                           
 11561                           ;psect for function _setLoad_AH_AL_Restore
 11562  1F4B                     _setLoad_AH_AL_Restore:	
 11563                           
 11564                           ;OverLoad_B1.c: 293: char i;
 11565                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11566                           
 11567                           ;incstack = 0
 11568                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11569  1F4B  0020               	movlb	0	; select bank0
 11570  1F4C  01A1               	clrf	setLoad_AH_AL_Restore@i
 11571  1F4D                     L8:	
 11572  1F4D  3005               	movlw	5
 11573  1F4E  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11574  1F4F  1803               	btfsc	3,0
 11575  1F50  0008               	return
 11576                           
 11577                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11578  1F51  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11579  1F52  3E53               	addlw	(_Load+11)& (0+255)
 11580  1F53  0086               	movwf	6
 11581  1F54  3001               	movlw	1	; select bank2/3
 11582  1F55  0087               	movwf	7
 11583  1F56  3000               	movlw	0
 11584  1F57  3FC0               	movwi [0]fsr1
 11585  1F58  3FC1               	movwi [1]fsr1
 11586                           
 11587                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11588  1F59  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11589  1F5A  3E5D               	addlw	(_Load+21)& (0+255)
 11590  1F5B  0086               	movwf	6
 11591  1F5C  3001               	movlw	1	; select bank2/3
 11592  1F5D  0087               	movwf	7
 11593  1F5E  30FF               	movlw	255
 11594  1F5F  3FC0               	movwi [0]fsr1
 11595  1F60  30FF               	movlw	255
 11596  1F61  3FC1               	movwi [1]fsr1
 11597  1F62  3001               	movlw	1
 11598  1F63  00A0               	movwf	??_setLoad_AH_AL_Restore
 11599  1F64  0820               	movf	??_setLoad_AH_AL_Restore,w
 11600  1F65  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11601  1F66  2F4D               	goto	L8
 11602  1F67                     __end_of_setLoad_AH_AL_Restore:	
 11603                           
 11604                           	psect	text72
 11605  1B35                     __ptext72:	
 11606 ;; *************** function _LED_Main *****************
 11607 ;; Defined at:
 11608 ;;		line 47 in file "../src/LED_B1.c"
 11609 ;; Parameters:    Size  Location     Type
 11610 ;;		None
 11611 ;; Auto vars:     Size  Location     Type
 11612 ;;		None
 11613 ;; Return value:  Size  Location     Type
 11614 ;;		None               void
 11615 ;; Registers used:
 11616 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11617 ;; Tracked objects:
 11618 ;;		On entry : 0/0
 11619 ;;		On exit  : 0/0
 11620 ;;		Unchanged: 0/0
 11621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;Total ram usage:        0 bytes
 11627 ;; Hardware stack levels used:    1
 11628 ;; Hardware stack levels required when called:    6
 11629 ;; This function calls:
 11630 ;;		_setLED_Main
 11631 ;; This function is called by:
 11632 ;;		_main
 11633 ;; This function uses a non-reentrant model
 11634 ;;
 11635                           
 11636                           
 11637                           ;psect for function _LED_Main
 11638  1B35                     _LED_Main:	
 11639                           
 11640                           ;LED_B1.c: 67: setLED_Main(99);
 11641                           
 11642                           ;incstack = 0
 11643                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11644  1B35  3063               	movlw	99
 11645  1B36  3192  2249         	fcall	_setLED_Main
 11646  1B38  0008               	return
 11647  1B39                     __end_of_LED_Main:	
 11648                           
 11649                           	psect	text73
 11650  1249                     __ptext73:	
 11651 ;; *************** function _setLED_Main *****************
 11652 ;; Defined at:
 11653 ;;		line 229 in file "../src/LED_B1.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;  led             1    wreg     unsigned char 
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;  led             1    4[BANK0 ] unsigned char 
 11658 ;; Return value:  Size  Location     Type
 11659 ;;		None               void
 11660 ;; Registers used:
 11661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;Total ram usage:        3 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; Hardware stack levels required when called:    5
 11674 ;; This function calls:
 11675 ;;		_LedPointSelect
 11676 ;; This function is called by:
 11677 ;;		_LED_Main
 11678 ;; This function uses a non-reentrant model
 11679 ;;
 11680                           
 11681                           
 11682                           ;psect for function _setLED_Main
 11683  1249                     _setLED_Main:	
 11684                           
 11685                           ;incstack = 0
 11686                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11687                           ;setLED_Main@led stored from wreg
 11688  1249  0020               	movlb	0	; select bank0
 11689  124A  00A4               	movwf	setLED_Main@led
 11690                           
 11691                           ;LED_B1.c: 230: LedPointSelect(led);
 11692  124B  0824               	movf	setLED_Main@led,w
 11693  124C  319C  2416  3192   	fcall	_LedPointSelect
 11694                           
 11695                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11696  124F  0021               	movlb	1	; select bank1
 11697  1250  0853               	movf	_LED^(0+128),w
 11698  1251  0086               	movwf	6
 11699  1252  3001               	movlw	1	; select bank2/3
 11700  1253  0087               	movwf	7
 11701  1254  1C81               	btfss	1,1
 11702  1255  0008               	return
 11703                           
 11704                           ;LED_B1.c: 232: LED->Time++;
 11705  1256  0A53               	incf	_LED^(0+128),w
 11706  1257  0086               	movwf	6
 11707  1258  3001               	movlw	1	; select bank2/3
 11708  1259  0087               	movwf	7
 11709  125A  3001               	movlw	1
 11710  125B  0781               	addwf	1,f
 11711  125C  3141               	addfsr 1,1
 11712  125D  1803               	skipnc
 11713  125E  0A81               	incf	1,f
 11714                           
 11715                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11716  125F  0A53               	incf	_LED^(0+128),w
 11717  1260  0086               	movwf	6
 11718  1261  3001               	movlw	1	; select bank2/3
 11719  1262  0087               	movwf	7
 11720  1263  3F40               	moviw [0]fsr1
 11721  1264  0020               	movlb	0	; select bank0
 11722  1265  00A2               	movwf	??_setLED_Main
 11723  1266  3F41               	moviw [1]fsr1
 11724  1267  00A3               	movwf	??_setLED_Main+1
 11725  1268  3000               	movlw	0
 11726  1269  0223               	subwf	??_setLED_Main+1,w
 11727  126A  3019               	movlw	25
 11728  126B  1903               	skipnz
 11729  126C  0222               	subwf	??_setLED_Main,w
 11730  126D  1C03               	skipc
 11731  126E  0008               	return
 11732                           
 11733                           ;LED_B1.c: 234: LED->Time = 0;
 11734  126F  0021               	movlb	1	; select bank1
 11735  1270  0A53               	incf	_LED^(0+128),w
 11736  1271  0086               	movwf	6
 11737  1272  3001               	movlw	1	; select bank2/3
 11738  1273  0087               	movwf	7
 11739  1274  3000               	movlw	0
 11740  1275  3FC0               	movwi [0]fsr1
 11741  1276  3FC1               	movwi [1]fsr1
 11742                           
 11743                           ;LED_B1.c: 252: if (led == 99) {
 11744  1277  0020               	movlb	0	; select bank0
 11745  1278  0824               	movf	setLED_Main@led,w
 11746  1279  3A63               	xorlw	99
 11747  127A  1D03               	skipz
 11748  127B  0008               	return
 11749                           
 11750                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11751  127C  3020               	movlw	32
 11752  127D  068D               	xorwf	13,f
 11753  127E  0008               	return
 11754  127F                     __end_of_setLED_Main:	
 11755                           
 11756                           	psect	text74
 11757  1B31                     __ptext74:	
 11758 ;; *************** function _LED_Initialization *****************
 11759 ;; Defined at:
 11760 ;;		line 31 in file "../src/LED_B1.c"
 11761 ;; Parameters:    Size  Location     Type
 11762 ;;		None
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;		None
 11765 ;; Return value:  Size  Location     Type
 11766 ;;		None               void
 11767 ;; Registers used:
 11768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11769 ;; Tracked objects:
 11770 ;;		On entry : 0/0
 11771 ;;		On exit  : 0/0
 11772 ;;		Unchanged: 0/0
 11773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;Total ram usage:        0 bytes
 11779 ;; Hardware stack levels used:    1
 11780 ;; Hardware stack levels required when called:    7
 11781 ;; This function calls:
 11782 ;;		_setLED_Initialization
 11783 ;; This function is called by:
 11784 ;;		_main
 11785 ;; This function uses a non-reentrant model
 11786 ;;
 11787                           
 11788                           
 11789                           ;psect for function _LED_Initialization
 11790  1B31                     _LED_Initialization:	
 11791                           
 11792                           ;LED_B1.c: 42: setLED_Initialization(99);
 11793                           
 11794                           ;incstack = 0
 11795                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11796  1B31  3063               	movlw	99
 11797  1B32  319D  2522         	fcall	_setLED_Initialization
 11798  1B34  0008               	return
 11799  1B35                     __end_of_LED_Initialization:	
 11800                           
 11801                           	psect	text75
 11802  1D22                     __ptext75:	
 11803 ;; *************** function _setLED_Initialization *****************
 11804 ;; Defined at:
 11805 ;;		line 74 in file "../src/LED_B1.c"
 11806 ;; Parameters:    Size  Location     Type
 11807 ;;  led             1    wreg     unsigned char 
 11808 ;; Auto vars:     Size  Location     Type
 11809 ;;  led             1    4[BANK0 ] unsigned char 
 11810 ;; Return value:  Size  Location     Type
 11811 ;;		None               void
 11812 ;; Registers used:
 11813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11814 ;; Tracked objects:
 11815 ;;		On entry : 0/0
 11816 ;;		On exit  : 0/0
 11817 ;;		Unchanged: 0/0
 11818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11823 ;;Total ram usage:        1 bytes
 11824 ;; Hardware stack levels used:    1
 11825 ;; Hardware stack levels required when called:    6
 11826 ;; This function calls:
 11827 ;;		_LedPointSelect
 11828 ;;		_setLED
 11829 ;; This function is called by:
 11830 ;;		_LED_Initialization
 11831 ;; This function uses a non-reentrant model
 11832 ;;
 11833                           
 11834                           
 11835                           ;psect for function _setLED_Initialization
 11836  1D22                     _setLED_Initialization:	
 11837                           
 11838                           ;incstack = 0
 11839                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11840                           ;setLED_Initialization@led stored from wreg
 11841  1D22  0020               	movlb	0	; select bank0
 11842  1D23  00A4               	movwf	setLED_Initialization@led
 11843                           
 11844                           ;LED_B1.c: 75: LedPointSelect(led);
 11845  1D24  0824               	movf	setLED_Initialization@led,w
 11846  1D25  319C  2416  319D   	fcall	_LedPointSelect
 11847                           
 11848                           ;LED_B1.c: 76: LED->Enable = 1;
 11849  1D28  0021               	movlb	1	; select bank1
 11850  1D29  0853               	movf	_LED^(0+128),w
 11851  1D2A  0086               	movwf	6
 11852  1D2B  3001               	movlw	1	; select bank2/3
 11853  1D2C  0087               	movwf	7
 11854  1D2D  1401               	bsf	1,0
 11855                           
 11856                           ;LED_B1.c: 77: setLED(led, 0);
 11857  1D2E  0020               	movlb	0	; select bank0
 11858  1D2F  01A2               	clrf	setLED@command
 11859  1D30  0824               	movf	setLED_Initialization@led,w
 11860  1D31  3192  22EF         	fcall	_setLED
 11861  1D33  0008               	return
 11862  1D34                     __end_of_setLED_Initialization:	
 11863                           
 11864                           	psect	text76
 11865  1213                     __ptext76:	
 11866 ;; *************** function _Flash_Memory_Main *****************
 11867 ;; Defined at:
 11868 ;;		line 971 in file "../src/MCU_B1.c"
 11869 ;; Parameters:    Size  Location     Type
 11870 ;;		None
 11871 ;; Auto vars:     Size  Location     Type
 11872 ;;		None
 11873 ;; Return value:  Size  Location     Type
 11874 ;;		None               void
 11875 ;; Registers used:
 11876 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11877 ;; Tracked objects:
 11878 ;;		On entry : 0/0
 11879 ;;		On exit  : 0/0
 11880 ;;		Unchanged: 0/0
 11881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11884 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11885 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11886 ;;Total ram usage:        1 bytes
 11887 ;; Hardware stack levels used:    1
 11888 ;; Hardware stack levels required when called:    7
 11889 ;; This function calls:
 11890 ;;		_Flash_Memory_Modify
 11891 ;;		_getMain_All_LightsStatus
 11892 ;; This function is called by:
 11893 ;;		_main
 11894 ;; This function uses a non-reentrant model
 11895 ;;
 11896                           
 11897                           
 11898                           ;psect for function _Flash_Memory_Main
 11899  1213                     _Flash_Memory_Main:	
 11900                           
 11901                           ;MCU_B1.c: 972: if (Memory.Modify == 1) {
 11902                           
 11903                           ;incstack = 0
 11904                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11905  1213  0023               	movlb	3	; select bank3
 11906  1214  1C49               	btfss	(_Memory^(0+384)+36),0
 11907  1215  0008               	return
 11908                           
 11909                           ;MCU_B1.c: 973: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11910  1216  319B  23B0  3192   	fcall	_getMain_All_LightsStatus
 11911  1219  3A00               	xorlw	0
 11912  121A  3000               	movlw	0
 11913  121B  1903               	skipnz
 11914  121C  3001               	movlw	1
 11915  121D  0020               	movlb	0	; select bank0
 11916  121E  00A6               	movwf	??_Flash_Memory_Main
 11917  121F  0DA6               	rlf	??_Flash_Memory_Main,f
 11918  1220  0023               	movlb	3	; select bank3
 11919  1221  0849               	movf	(_Memory^(0+384)+36),w
 11920  1222  0020               	movlb	0	; select bank0
 11921  1223  0626               	xorwf	??_Flash_Memory_Main,w
 11922  1224  39FD               	andlw	-3
 11923  1225  0626               	xorwf	??_Flash_Memory_Main,w
 11924  1226  0023               	movlb	3	; select bank3
 11925  1227  00C9               	movwf	(_Memory^(0+384)+36)
 11926                           
 11927                           ;MCU_B1.c: 974: if (Memory.GO == 1) {
 11928  1228  1CC9               	btfss	(_Memory^(0+384)+36),1
 11929  1229  2A43               	goto	l1223
 11930                           
 11931                           ;MCU_B1.c: 975: Memory.Runtime = 1;
 11932  122A  15C9               	bsf	(_Memory^(0+384)+36),3
 11933                           
 11934                           ;MCU_B1.c: 976: Memory.Time++;
 11935  122B  3001               	movlw	1
 11936  122C  07C7               	addwf	(_Memory^(0+384)+34),f
 11937  122D  3000               	movlw	0
 11938  122E  3DC8               	addwfc	((_Memory+1)^(0+384)+34),f
 11939                           
 11940                           ;MCU_B1.c: 977: if (Memory.Time == (200 / 20)) {
 11941  122F  3022               	movlw	34
 11942  1230  3EA5               	addlw	_Memory& (0+255)
 11943  1231  0086               	movwf	6
 11944  1232  3001               	movlw	1	; select bank3/4
 11945  1233  0087               	movwf	7
 11946  1234  3F40               	moviw [0]fsr1
 11947  1235  3A0A               	xorlw	10
 11948  1236  1D03               	skipz
 11949  1237  2A3A               	goto	u7575
 11950  1238  3F41               	moviw [1]fsr1
 11951  1239  3A00               	xorlw	0
 11952  123A                     u7575:	
 11953  123A  1D03               	skipz
 11954  123B  0008               	return
 11955                           
 11956                           ;MCU_B1.c: 978: Memory.Time = 0;
 11957  123C  01C7               	clrf	(_Memory^(0+384)+34)
 11958  123D  01C8               	clrf	((_Memory+1)^(0+384)+34)
 11959                           
 11960                           ;MCU_B1.c: 979: Memory.Modify = 0;
 11961  123E  1049               	bcf	(_Memory^(0+384)+36),0
 11962                           
 11963                           ;MCU_B1.c: 980: Memory.GO = 0;
 11964  123F  10C9               	bcf	(_Memory^(0+384)+36),1
 11965                           
 11966                           ;MCU_B1.c: 981: Flash_Memory_Modify();
 11967  1240  3194  24C3         	fcall	_Flash_Memory_Modify
 11968                           
 11969                           ;MCU_B1.c: 982: }
 11970                           ;MCU_B1.c: 983: } else {
 11971  1242  0008               	return
 11972  1243                     l1223:	
 11973                           
 11974                           ;MCU_B1.c: 984: if (Memory.Runtime == 1) {
 11975  1243  1DC9               	btfss	(_Memory^(0+384)+36),3
 11976  1244  0008               	return
 11977                           
 11978                           ;MCU_B1.c: 985: Memory.Runtime = 0;
 11979  1245  11C9               	bcf	(_Memory^(0+384)+36),3
 11980                           
 11981                           ;MCU_B1.c: 986: Memory.Time = 0;
 11982  1246  01C7               	clrf	(_Memory^(0+384)+34)
 11983  1247  01C8               	clrf	((_Memory+1)^(0+384)+34)
 11984  1248  0008               	return
 11985  1249                     __end_of_Flash_Memory_Main:	
 11986                           
 11987                           	psect	text77
 11988  14C3                     __ptext77:	
 11989 ;; *************** function _Flash_Memory_Modify *****************
 11990 ;; Defined at:
 11991 ;;		line 1044 in file "../src/MCU_B1.c"
 11992 ;; Parameters:    Size  Location     Type
 11993 ;;		None
 11994 ;; Auto vars:     Size  Location     Type
 11995 ;;  i               1    5[BANK0 ] unsigned char 
 11996 ;; Return value:  Size  Location     Type
 11997 ;;		None               void
 11998 ;; Registers used:
 11999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12000 ;; Tracked objects:
 12001 ;;		On entry : 0/0
 12002 ;;		On exit  : 0/0
 12003 ;;		Unchanged: 0/0
 12004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;Total ram usage:        2 bytes
 12010 ;; Hardware stack levels used:    1
 12011 ;; Hardware stack levels required when called:    6
 12012 ;; This function calls:
 12013 ;;		_Flash_Memory_Erasing
 12014 ;;		_Flash_Memory_Read
 12015 ;;		_Flash_Memory_Write
 12016 ;;		_setMemory_Data
 12017 ;; This function is called by:
 12018 ;;		_Flash_Memory_Main
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           
 12022                           
 12023                           ;psect for function _Flash_Memory_Modify
 12024  14C3                     _Flash_Memory_Modify:	
 12025                           
 12026                           ;MCU_B1.c: 1045: char i = 0;
 12027                           
 12028                           ;incstack = 0
 12029                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12030  14C3  0020               	movlb	0	; select bank0
 12031  14C4  01A5               	clrf	Flash_Memory_Modify@i
 12032                           
 12033                           ;MCU_B1.c: 1046: for (i = 0; i < 32; i++) {
 12034  14C5  01A5               	clrf	Flash_Memory_Modify@i
 12035  14C6  3020               	movlw	32
 12036  14C7  0225               	subwf	Flash_Memory_Modify@i,w
 12037  14C8  1803               	btfsc	3,0
 12038  14C9  2CDF               	goto	l7214
 12039  14CA                     l7208:	
 12040                           
 12041                           ;MCU_B1.c: 1047: Memory.Data[i] = Flash_Memory_Read(i);
 12042  14CA  0825               	movf	Flash_Memory_Modify@i,w
 12043  14CB  319E  26C6  3194   	fcall	_Flash_Memory_Read
 12044  14CE  0020               	movlb	0	; select bank0
 12045  14CF  00A4               	movwf	??_Flash_Memory_Modify
 12046  14D0  0825               	movf	Flash_Memory_Modify@i,w
 12047  14D1  3EA5               	addlw	_Memory& (0+255)
 12048  14D2  0086               	movwf	6
 12049  14D3  3001               	movlw	1	; select bank3/4
 12050  14D4  0087               	movwf	7
 12051  14D5  0824               	movf	??_Flash_Memory_Modify,w
 12052  14D6  0081               	movwf	1
 12053  14D7  3001               	movlw	1
 12054  14D8  00A4               	movwf	??_Flash_Memory_Modify
 12055  14D9  0824               	movf	??_Flash_Memory_Modify,w
 12056  14DA  07A5               	addwf	Flash_Memory_Modify@i,f
 12057  14DB  3020               	movlw	32
 12058  14DC  0225               	subwf	Flash_Memory_Modify@i,w
 12059  14DD  1C03               	skipc
 12060  14DE  2CCA               	goto	l7208
 12061  14DF                     l7214:	
 12062                           
 12063                           ;MCU_B1.c: 1048: }
 12064                           ;MCU_B1.c: 1049: setMemory_Data(0, product->Data[12]);
 12065  14DF  0021               	movlb	1	; select bank1
 12066  14E0  086E               	movf	_product^(0+128),w
 12067  14E1  0086               	movwf	6
 12068  14E2  3002               	movlw	2	; select bank4/5
 12069  14E3  0087               	movwf	7
 12070  14E4  3002               	movlw	2	; select bank4/5
 12071  14E5  3F4C               	moviw [12]fsr1
 12072  14E6  0020               	movlb	0	; select bank0
 12073  14E7  00A0               	movwf	setMemory_Data@data
 12074  14E8  3000               	movlw	0
 12075  14E9  319C  2422  3194   	fcall	_setMemory_Data
 12076                           
 12077                           ;MCU_B1.c: 1050: setMemory_Data(1, product->Data[13]);
 12078  14EC  0021               	movlb	1	; select bank1
 12079  14ED  086E               	movf	_product^(0+128),w
 12080  14EE  0086               	movwf	6
 12081  14EF  3002               	movlw	2	; select bank4/5
 12082  14F0  0087               	movwf	7
 12083  14F1  3002               	movlw	2	; select bank4/5
 12084  14F2  3F4D               	moviw [13]fsr1
 12085  14F3  0020               	movlb	0	; select bank0
 12086  14F4  00A0               	movwf	setMemory_Data@data
 12087  14F5  3001               	movlw	1
 12088  14F6  319C  2422  3194   	fcall	_setMemory_Data
 12089                           
 12090                           ;MCU_B1.c: 1051: setMemory_Data(2, product->Data[14]);
 12091  14F9  0021               	movlb	1	; select bank1
 12092  14FA  086E               	movf	_product^(0+128),w
 12093  14FB  0086               	movwf	6
 12094  14FC  3002               	movlw	2	; select bank4/5
 12095  14FD  0087               	movwf	7
 12096  14FE  3002               	movlw	2	; select bank4/5
 12097  14FF  3F4E               	moviw [14]fsr1
 12098  1500  0020               	movlb	0	; select bank0
 12099  1501  00A0               	movwf	setMemory_Data@data
 12100  1502  3002               	movlw	2
 12101  1503  319C  2422  3194   	fcall	_setMemory_Data
 12102                           
 12103                           ;MCU_B1.c: 1057: if (Memory.LoopSave == 1) {
 12104  1506  0023               	movlb	3	; select bank3
 12105  1507  1D49               	btfss	(_Memory^(0+384)+36),2
 12106  1508  2D0D               	goto	l1246
 12107                           
 12108                           ;MCU_B1.c: 1058: Memory.LoopSave = 0;
 12109  1509  1149               	bcf	(_Memory^(0+384)+36),2
 12110                           
 12111                           ;MCU_B1.c: 1059: myMain.FirstOpen = 0;
 12112  150A  0021               	movlb	1	; select bank1
 12113  150B  11AE               	bcf	_myMain^(0+128),3
 12114                           
 12115                           ;MCU_B1.c: 1060: myMain.First = 0;
 12116  150C  12AE               	bcf	_myMain^(0+128),5
 12117  150D                     l1246:	
 12118                           
 12119                           ;MCU_B1.c: 1062: }
 12120                           ;MCU_B1.c: 1063: GIE = 0;
 12121  150D  138B               	bcf	11,7	;volatile
 12122                           
 12123                           ;MCU_B1.c: 1064: Flash_Memory_Erasing();
 12124  150E  319C  242E  3194   	fcall	_Flash_Memory_Erasing
 12125                           
 12126                           ;MCU_B1.c: 1065: Flash_Memory_Write();
 12127  1511  3191  2148         	fcall	_Flash_Memory_Write
 12128                           
 12129                           ;MCU_B1.c: 1066: GIE = 1;
 12130  1513  178B               	bsf	11,7	;volatile
 12131  1514  0008               	return
 12132  1515                     __end_of_Flash_Memory_Modify:	
 12133                           
 12134                           	psect	text78
 12135  1C2E                     __ptext78:	
 12136 ;; *************** function _Flash_Memory_Erasing *****************
 12137 ;; Defined at:
 12138 ;;		line 1033 in file "../src/MCU_B1.c"
 12139 ;; Parameters:    Size  Location     Type
 12140 ;;		None
 12141 ;; Auto vars:     Size  Location     Type
 12142 ;;		None
 12143 ;; Return value:  Size  Location     Type
 12144 ;;		None               void
 12145 ;; Registers used:
 12146 ;;		wreg, status,2, status,0, pclath, cstack
 12147 ;; Tracked objects:
 12148 ;;		On entry : 0/0
 12149 ;;		On exit  : 0/0
 12150 ;;		Unchanged: 0/0
 12151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;Total ram usage:        0 bytes
 12157 ;; Hardware stack levels used:    1
 12158 ;; Hardware stack levels required when called:    5
 12159 ;; This function calls:
 12160 ;;		_Flash_Memory_Unlock
 12161 ;; This function is called by:
 12162 ;;		_Flash_Memory_Modify
 12163 ;; This function uses a non-reentrant model
 12164 ;;
 12165                           
 12166                           
 12167                           ;psect for function _Flash_Memory_Erasing
 12168  1C2E                     _Flash_Memory_Erasing:	
 12169                           
 12170                           ;MCU_B1.c: 1034: CFGS = 0;
 12171                           
 12172                           ;incstack = 0
 12173                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12174  1C2E  0023               	movlb	3	; select bank3
 12175  1C2F  1315               	bcf	21,6	;volatile
 12176                           
 12177                           ;MCU_B1.c: 1035: PMADRH = 0x30;
 12178  1C30  3030               	movlw	48
 12179  1C31  0092               	movwf	18	;volatile
 12180                           
 12181                           ;MCU_B1.c: 1036: PMADRL = 0x00;
 12182  1C32  0191               	clrf	17	;volatile
 12183                           
 12184                           ;MCU_B1.c: 1037: FREE = 1;
 12185  1C33  1615               	bsf	21,4	;volatile
 12186                           
 12187                           ;MCU_B1.c: 1038: WREN = 1;
 12188  1C34  1515               	bsf	21,2	;volatile
 12189                           
 12190                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
 12191  1C35  319B  23A7         	fcall	_Flash_Memory_Unlock
 12192                           
 12193                           ;MCU_B1.c: 1040: WREN = 0;
 12194  1C37  0023               	movlb	3	; select bank3
 12195  1C38  1115               	bcf	21,2	;volatile
 12196  1C39  0008               	return
 12197  1C3A                     __end_of_Flash_Memory_Erasing:	
 12198                           
 12199                           	psect	text79
 12200  0478                     __ptext79:	
 12201 ;; *************** function _Flash_Memory_Initialization *****************
 12202 ;; Defined at:
 12203 ;;		line 930 in file "../src/MCU_B1.c"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;		None
 12206 ;; Auto vars:     Size  Location     Type
 12207 ;;  i               1   67[BANK0 ] unsigned char 
 12208 ;; Return value:  Size  Location     Type
 12209 ;;		None               void
 12210 ;; Registers used:
 12211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12221 ;;Total ram usage:        2 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    7
 12224 ;; This function calls:
 12225 ;;		_Flash_Memory_Read
 12226 ;;		_Flash_Memory_Write
 12227 ;;		_getDimmerLights_ValueToPercent
 12228 ;;		_setMemory_Data
 12229 ;; This function is called by:
 12230 ;;		_main
 12231 ;; This function uses a non-reentrant model
 12232 ;;
 12233                           
 12234                           
 12235                           ;psect for function _Flash_Memory_Initialization
 12236  0478                     _Flash_Memory_Initialization:	
 12237                           
 12238                           ;MCU_B1.c: 931: char i = 0;
 12239                           
 12240                           ;incstack = 0
 12241                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12242  0478  0020               	movlb	0	; select bank0
 12243  0479  01E3               	clrf	Flash_Memory_Initialization@i
 12244                           
 12245                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12246  047A  301F               	movlw	31
 12247  047B  319E  26C6  3184   	fcall	_Flash_Memory_Read
 12248  047E  3AAA               	xorlw	170
 12249  047F  1D03               	skipz
 12250  0480  2CF6               	goto	l7606
 12251                           
 12252                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12253  0481  3000               	movlw	0
 12254  0482  319E  26C6  3184   	fcall	_Flash_Memory_Read
 12255  0485  0020               	movlb	0	; select bank0
 12256  0486  00E2               	movwf	??_Flash_Memory_Initialization
 12257  0487  0021               	movlb	1	; select bank1
 12258  0488  086E               	movf	_product^(0+128),w
 12259  0489  3E0C               	addlw	12
 12260  048A  0086               	movwf	6
 12261  048B  3002               	movlw	2	; select bank4/5
 12262  048C  0087               	movwf	7
 12263  048D  0020               	movlb	0	; select bank0
 12264  048E  0862               	movf	??_Flash_Memory_Initialization,w
 12265  048F  0081               	movwf	1
 12266                           
 12267                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12268  0490  3001               	movlw	1
 12269  0491  319E  26C6  3184   	fcall	_Flash_Memory_Read
 12270  0494  0020               	movlb	0	; select bank0
 12271  0495  00E2               	movwf	??_Flash_Memory_Initialization
 12272  0496  0021               	movlb	1	; select bank1
 12273  0497  086E               	movf	_product^(0+128),w
 12274  0498  3E0D               	addlw	13
 12275  0499  0086               	movwf	6
 12276  049A  3002               	movlw	2	; select bank4/5
 12277  049B  0087               	movwf	7
 12278  049C  0020               	movlb	0	; select bank0
 12279  049D  0862               	movf	??_Flash_Memory_Initialization,w
 12280  049E  0081               	movwf	1
 12281                           
 12282                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12283  049F  3002               	movlw	2
 12284  04A0  319E  26C6  3184   	fcall	_Flash_Memory_Read
 12285  04A3  0020               	movlb	0	; select bank0
 12286  04A4  00E2               	movwf	??_Flash_Memory_Initialization
 12287  04A5  0021               	movlb	1	; select bank1
 12288  04A6  086E               	movf	_product^(0+128),w
 12289  04A7  3E0E               	addlw	14
 12290  04A8  0086               	movwf	6
 12291  04A9  3002               	movlw	2	; select bank4/5
 12292  04AA  0087               	movwf	7
 12293  04AB  0020               	movlb	0	; select bank0
 12294  04AC  0862               	movf	??_Flash_Memory_Initialization,w
 12295  04AD  0081               	movwf	1
 12296                           
 12297                           ;MCU_B1.c: 941: i = getDimmerLights_ValueToPercent(((char)(60*0.8)));
 12298  04AE  3030               	movlw	48
 12299  04AF  3196  26D1  3184   	fcall	_getDimmerLights_ValueToPercent
 12300  04B2  0020               	movlb	0	; select bank0
 12301  04B3  00E2               	movwf	??_Flash_Memory_Initialization
 12302  04B4  0862               	movf	??_Flash_Memory_Initialization,w
 12303  04B5  00E3               	movwf	Flash_Memory_Initialization@i
 12304                           
 12305                           ;MCU_B1.c: 942: product->Data[21] = i;
 12306  04B6  0863               	movf	Flash_Memory_Initialization@i,w
 12307  04B7  00E2               	movwf	??_Flash_Memory_Initialization
 12308  04B8  0021               	movlb	1	; select bank1
 12309  04B9  086E               	movf	_product^(0+128),w
 12310  04BA  3E15               	addlw	21
 12311  04BB  0086               	movwf	6
 12312  04BC  3002               	movlw	2	; select bank4/5
 12313  04BD  0087               	movwf	7
 12314  04BE  0020               	movlb	0	; select bank0
 12315  04BF  0862               	movf	??_Flash_Memory_Initialization,w
 12316  04C0  0081               	movwf	1
 12317                           
 12318                           ;MCU_B1.c: 943: product->Data[22] = i;
 12319  04C1  0863               	movf	Flash_Memory_Initialization@i,w
 12320  04C2  00E2               	movwf	??_Flash_Memory_Initialization
 12321  04C3  0021               	movlb	1	; select bank1
 12322  04C4  086E               	movf	_product^(0+128),w
 12323  04C5  3E16               	addlw	22
 12324  04C6  0086               	movwf	6
 12325  04C7  3002               	movlw	2	; select bank4/5
 12326  04C8  0087               	movwf	7
 12327  04C9  0020               	movlb	0	; select bank0
 12328  04CA  0862               	movf	??_Flash_Memory_Initialization,w
 12329  04CB  0081               	movwf	1
 12330                           
 12331                           ;MCU_B1.c: 944: product->Data[23] = i;
 12332  04CC  0863               	movf	Flash_Memory_Initialization@i,w
 12333  04CD  00E2               	movwf	??_Flash_Memory_Initialization
 12334  04CE  0021               	movlb	1	; select bank1
 12335  04CF  086E               	movf	_product^(0+128),w
 12336  04D0  3E17               	addlw	23
 12337  04D1  0086               	movwf	6
 12338  04D2  3002               	movlw	2	; select bank4/5
 12339  04D3  0087               	movwf	7
 12340  04D4  0020               	movlb	0	; select bank0
 12341  04D5  0862               	movf	??_Flash_Memory_Initialization,w
 12342  04D6  0081               	movwf	1
 12343                           
 12344                           ;MCU_B1.c: 946: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12345  04D7  0021               	movlb	1	; select bank1
 12346  04D8  086E               	movf	_product^(0+128),w
 12347  04D9  3E0C               	addlw	12
 12348  04DA  0086               	movwf	6
 12349  04DB  3002               	movlw	2	; select bank4/5
 12350  04DC  0087               	movwf	7
 12351  04DD  0801               	movf	1,w
 12352  04DE  3AFF               	xorlw	255
 12353  04DF  1D03               	skipz
 12354  04E0  0008               	return
 12355  04E1  086E               	movf	_product^(0+128),w
 12356  04E2  3E0D               	addlw	13
 12357  04E3  0086               	movwf	6
 12358  04E4  3002               	movlw	2	; select bank4/5
 12359  04E5  0087               	movwf	7
 12360  04E6  0801               	movf	1,w
 12361  04E7  3AFF               	xorlw	255
 12362  04E8  1D03               	skipz
 12363  04E9  0008               	return
 12364  04EA  086E               	movf	_product^(0+128),w
 12365  04EB  3E0E               	addlw	14
 12366  04EC  0086               	movwf	6
 12367  04ED  3002               	movlw	2	; select bank4/5
 12368  04EE  0087               	movwf	7
 12369  04EF  0801               	movf	1,w
 12370  04F0  3AFF               	xorlw	255
 12371  04F1  1D03               	skipz
 12372  04F2  0008               	return
 12373                           
 12374                           ;MCU_B1.c: 947: myMain.FirstOpen = 1;
 12375  04F3  15AE               	bsf	_myMain^(0+128),3
 12376                           
 12377                           ;MCU_B1.c: 948: myMain.First = 1;
 12378  04F4  16AE               	bsf	_myMain^(0+128),5
 12379                           
 12380                           ;MCU_B1.c: 949: }
 12381                           ;MCU_B1.c: 950: } else {
 12382  04F5  0008               	return
 12383  04F6                     l7606:	
 12384                           
 12385                           ;MCU_B1.c: 951: i = getDimmerLights_ValueToPercent(((char)(60*0.8)));
 12386  04F6  3030               	movlw	48
 12387  04F7  3196  26D1  3184   	fcall	_getDimmerLights_ValueToPercent
 12388  04FA  0020               	movlb	0	; select bank0
 12389  04FB  00E2               	movwf	??_Flash_Memory_Initialization
 12390  04FC  0862               	movf	??_Flash_Memory_Initialization,w
 12391  04FD  00E3               	movwf	Flash_Memory_Initialization@i
 12392                           
 12393                           ;MCU_B1.c: 952: setMemory_Data(0, 0xff);
 12394  04FE  30FF               	movlw	255
 12395  04FF  00E2               	movwf	??_Flash_Memory_Initialization
 12396  0500  0862               	movf	??_Flash_Memory_Initialization,w
 12397  0501  00A0               	movwf	setMemory_Data@data
 12398  0502  3000               	movlw	0
 12399  0503  319C  2422  3184   	fcall	_setMemory_Data
 12400                           
 12401                           ;MCU_B1.c: 953: setMemory_Data(1, 0xff);
 12402  0506  30FF               	movlw	255
 12403  0507  0020               	movlb	0	; select bank0
 12404  0508  00E2               	movwf	??_Flash_Memory_Initialization
 12405  0509  0862               	movf	??_Flash_Memory_Initialization,w
 12406  050A  00A0               	movwf	setMemory_Data@data
 12407  050B  3001               	movlw	1
 12408  050C  319C  2422  3184   	fcall	_setMemory_Data
 12409                           
 12410                           ;MCU_B1.c: 954: setMemory_Data(2, 0xff);
 12411  050F  30FF               	movlw	255
 12412  0510  0020               	movlb	0	; select bank0
 12413  0511  00E2               	movwf	??_Flash_Memory_Initialization
 12414  0512  0862               	movf	??_Flash_Memory_Initialization,w
 12415  0513  00A0               	movwf	setMemory_Data@data
 12416  0514  3002               	movlw	2
 12417  0515  319C  2422  3184   	fcall	_setMemory_Data
 12418                           
 12419                           ;MCU_B1.c: 955: setMemory_Data(3, 0xff);
 12420  0518  30FF               	movlw	255
 12421  0519  0020               	movlb	0	; select bank0
 12422  051A  00E2               	movwf	??_Flash_Memory_Initialization
 12423  051B  0862               	movf	??_Flash_Memory_Initialization,w
 12424  051C  00A0               	movwf	setMemory_Data@data
 12425  051D  3003               	movlw	3
 12426  051E  319C  2422  3184   	fcall	_setMemory_Data
 12427                           
 12428                           ;MCU_B1.c: 956: setMemory_Data(4, 0xff);
 12429  0521  30FF               	movlw	255
 12430  0522  0020               	movlb	0	; select bank0
 12431  0523  00E2               	movwf	??_Flash_Memory_Initialization
 12432  0524  0862               	movf	??_Flash_Memory_Initialization,w
 12433  0525  00A0               	movwf	setMemory_Data@data
 12434  0526  3004               	movlw	4
 12435  0527  319C  2422  3184   	fcall	_setMemory_Data
 12436                           
 12437                           ;MCU_B1.c: 957: setMemory_Data(5, 0xff);
 12438  052A  30FF               	movlw	255
 12439  052B  0020               	movlb	0	; select bank0
 12440  052C  00E2               	movwf	??_Flash_Memory_Initialization
 12441  052D  0862               	movf	??_Flash_Memory_Initialization,w
 12442  052E  00A0               	movwf	setMemory_Data@data
 12443  052F  3005               	movlw	5
 12444  0530  319C  2422  3184   	fcall	_setMemory_Data
 12445                           
 12446                           ;MCU_B1.c: 958: setMemory_Data(31, 0xaa);
 12447  0533  30AA               	movlw	170
 12448  0534  0020               	movlb	0	; select bank0
 12449  0535  00E2               	movwf	??_Flash_Memory_Initialization
 12450  0536  0862               	movf	??_Flash_Memory_Initialization,w
 12451  0537  00A0               	movwf	setMemory_Data@data
 12452  0538  301F               	movlw	31
 12453  0539  319C  2422  3184   	fcall	_setMemory_Data
 12454                           
 12455                           ;MCU_B1.c: 959: product->Data[21] = i;
 12456  053C  0020               	movlb	0	; select bank0
 12457  053D  0863               	movf	Flash_Memory_Initialization@i,w
 12458  053E  00E2               	movwf	??_Flash_Memory_Initialization
 12459  053F  0021               	movlb	1	; select bank1
 12460  0540  086E               	movf	_product^(0+128),w
 12461  0541  3E15               	addlw	21
 12462  0542  0086               	movwf	6
 12463  0543  3002               	movlw	2	; select bank4/5
 12464  0544  0087               	movwf	7
 12465  0545  0020               	movlb	0	; select bank0
 12466  0546  0862               	movf	??_Flash_Memory_Initialization,w
 12467  0547  0081               	movwf	1
 12468                           
 12469                           ;MCU_B1.c: 960: product->Data[22] = i;
 12470  0548  0863               	movf	Flash_Memory_Initialization@i,w
 12471  0549  00E2               	movwf	??_Flash_Memory_Initialization
 12472  054A  0021               	movlb	1	; select bank1
 12473  054B  086E               	movf	_product^(0+128),w
 12474  054C  3E16               	addlw	22
 12475  054D  0086               	movwf	6
 12476  054E  3002               	movlw	2	; select bank4/5
 12477  054F  0087               	movwf	7
 12478  0550  0020               	movlb	0	; select bank0
 12479  0551  0862               	movf	??_Flash_Memory_Initialization,w
 12480  0552  0081               	movwf	1
 12481                           
 12482                           ;MCU_B1.c: 961: product->Data[23] = i;
 12483  0553  0863               	movf	Flash_Memory_Initialization@i,w
 12484  0554  00E2               	movwf	??_Flash_Memory_Initialization
 12485  0555  0021               	movlb	1	; select bank1
 12486  0556  086E               	movf	_product^(0+128),w
 12487  0557  3E17               	addlw	23
 12488  0558  0086               	movwf	6
 12489  0559  3002               	movlw	2	; select bank4/5
 12490  055A  0087               	movwf	7
 12491  055B  0020               	movlb	0	; select bank0
 12492  055C  0862               	movf	??_Flash_Memory_Initialization,w
 12493  055D  0081               	movwf	1
 12494                           
 12495                           ;MCU_B1.c: 962: GIE = 0;
 12496  055E  138B               	bcf	11,7	;volatile
 12497                           
 12498                           ;MCU_B1.c: 963: Flash_Memory_Write();
 12499  055F  3191  2148         	fcall	_Flash_Memory_Write
 12500                           
 12501                           ;MCU_B1.c: 964: GIE = 1;
 12502  0561  178B               	bsf	11,7	;volatile
 12503                           
 12504                           ;MCU_B1.c: 965: myMain.FirstOpen = 1;
 12505  0562  0021               	movlb	1	; select bank1
 12506  0563  15AE               	bsf	_myMain^(0+128),3
 12507                           
 12508                           ;MCU_B1.c: 966: myMain.First = 1;
 12509  0564  16AE               	bsf	_myMain^(0+128),5
 12510  0565  0008               	return
 12511  0566                     __end_of_Flash_Memory_Initialization:	
 12512                           
 12513                           	psect	text80
 12514  1C22                     __ptext80:	
 12515 ;; *************** function _setMemory_Data *****************
 12516 ;; Defined at:
 12517 ;;		line 1081 in file "../src/MCU_B1.c"
 12518 ;; Parameters:    Size  Location     Type
 12519 ;;  address         1    wreg     unsigned char 
 12520 ;;  data            1    0[BANK0 ] unsigned char 
 12521 ;; Auto vars:     Size  Location     Type
 12522 ;;  address         1    2[BANK0 ] unsigned char 
 12523 ;; Return value:  Size  Location     Type
 12524 ;;		None               void
 12525 ;; Registers used:
 12526 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12527 ;; Tracked objects:
 12528 ;;		On entry : 0/0
 12529 ;;		On exit  : 0/0
 12530 ;;		Unchanged: 0/0
 12531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12532 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12535 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12536 ;;Total ram usage:        3 bytes
 12537 ;; Hardware stack levels used:    1
 12538 ;; Hardware stack levels required when called:    4
 12539 ;; This function calls:
 12540 ;;		Nothing
 12541 ;; This function is called by:
 12542 ;;		_Flash_Memory_Initialization
 12543 ;;		_Flash_Memory_Modify
 12544 ;; This function uses a non-reentrant model
 12545 ;;
 12546                           
 12547                           
 12548                           ;psect for function _setMemory_Data
 12549  1C22                     _setMemory_Data:	
 12550                           
 12551                           ;incstack = 0
 12552                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12553                           ;setMemory_Data@address stored from wreg
 12554  1C22  0020               	movlb	0	; select bank0
 12555  1C23  00A2               	movwf	setMemory_Data@address
 12556                           
 12557                           ;MCU_B1.c: 1082: Memory.Data[address] = data;
 12558  1C24  0820               	movf	setMemory_Data@data,w
 12559  1C25  00A1               	movwf	??_setMemory_Data
 12560  1C26  0822               	movf	setMemory_Data@address,w
 12561  1C27  3EA5               	addlw	_Memory& (0+255)
 12562  1C28  0086               	movwf	6
 12563  1C29  3001               	movlw	1	; select bank3/4
 12564  1C2A  0087               	movwf	7
 12565  1C2B  0821               	movf	??_setMemory_Data,w
 12566  1C2C  0081               	movwf	1
 12567  1C2D  0008               	return
 12568  1C2E                     __end_of_setMemory_Data:	
 12569                           
 12570                           	psect	text81
 12571  1148                     __ptext81:	
 12572 ;; *************** function _Flash_Memory_Write *****************
 12573 ;; Defined at:
 12574 ;;		line 1014 in file "../src/MCU_B1.c"
 12575 ;; Parameters:    Size  Location     Type
 12576 ;;		None
 12577 ;; Auto vars:     Size  Location     Type
 12578 ;;  i               1    1[BANK0 ] unsigned char 
 12579 ;; Return value:  Size  Location     Type
 12580 ;;		None               void
 12581 ;; Registers used:
 12582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12583 ;; Tracked objects:
 12584 ;;		On entry : 0/0
 12585 ;;		On exit  : 0/0
 12586 ;;		Unchanged: 0/0
 12587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12589 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12591 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;Total ram usage:        2 bytes
 12593 ;; Hardware stack levels used:    1
 12594 ;; Hardware stack levels required when called:    5
 12595 ;; This function calls:
 12596 ;;		_Flash_Memory_Unlock
 12597 ;; This function is called by:
 12598 ;;		_Flash_Memory_Initialization
 12599 ;;		_Flash_Memory_Modify
 12600 ;; This function uses a non-reentrant model
 12601 ;;
 12602                           
 12603                           
 12604                           ;psect for function _Flash_Memory_Write
 12605  1148                     _Flash_Memory_Write:	
 12606                           
 12607                           ;MCU_B1.c: 1015: char i = 0;
 12608                           
 12609                           ;incstack = 0
 12610                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12611  1148  0020               	movlb	0	; select bank0
 12612  1149  01A1               	clrf	Flash_Memory_Write@i
 12613                           
 12614                           ;MCU_B1.c: 1016: CFGS = 0;
 12615  114A  0023               	movlb	3	; select bank3
 12616  114B  1315               	bcf	21,6	;volatile
 12617                           
 12618                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 12619  114C  3030               	movlw	48
 12620  114D  0092               	movwf	18	;volatile
 12621                           
 12622                           ;MCU_B1.c: 1018: PMDATH = 0;
 12623  114E  0194               	clrf	20	;volatile
 12624                           
 12625                           ;MCU_B1.c: 1019: FREE = 0;
 12626  114F  1215               	bcf	21,4	;volatile
 12627                           
 12628                           ;MCU_B1.c: 1020: LWLO = 1;
 12629  1150  1695               	bsf	21,5	;volatile
 12630                           
 12631                           ;MCU_B1.c: 1021: WREN = 1;
 12632  1151  1515               	bsf	21,2	;volatile
 12633                           
 12634                           ;MCU_B1.c: 1022: for (i = 0; i < 32; i++) {
 12635  1152  0020               	movlb	0	; select bank0
 12636  1153  01A1               	clrf	Flash_Memory_Write@i
 12637  1154  3020               	movlw	32
 12638  1155  0221               	subwf	Flash_Memory_Write@i,w
 12639  1156  1803               	btfsc	3,0
 12640  1157  2970               	goto	l1237
 12641  1158                     l6764:	
 12642                           
 12643                           ;MCU_B1.c: 1023: PMADRL = i;
 12644  1158  0821               	movf	Flash_Memory_Write@i,w
 12645  1159  0023               	movlb	3	; select bank3
 12646  115A  0091               	movwf	17	;volatile
 12647                           
 12648                           ;MCU_B1.c: 1024: PMDATL = Memory.Data[i];
 12649  115B  0020               	movlb	0	; select bank0
 12650  115C  0821               	movf	Flash_Memory_Write@i,w
 12651  115D  3EA5               	addlw	_Memory& (0+255)
 12652  115E  0086               	movwf	6
 12653  115F  3001               	movlw	1	; select bank3/4
 12654  1160  0087               	movwf	7
 12655  1161  0801               	movf	1,w
 12656  1162  0023               	movlb	3	; select bank3
 12657  1163  0093               	movwf	19	;volatile
 12658                           
 12659                           ;MCU_B1.c: 1025: Flash_Memory_Unlock();
 12660  1164  319B  23A7  3191   	fcall	_Flash_Memory_Unlock
 12661  1167  3001               	movlw	1
 12662  1168  0020               	movlb	0	; select bank0
 12663  1169  00A0               	movwf	??_Flash_Memory_Write
 12664  116A  0820               	movf	??_Flash_Memory_Write,w
 12665  116B  07A1               	addwf	Flash_Memory_Write@i,f
 12666  116C  3020               	movlw	32
 12667  116D  0221               	subwf	Flash_Memory_Write@i,w
 12668  116E  1C03               	skipc
 12669  116F  2958               	goto	l6764
 12670  1170                     l1237:	
 12671                           
 12672                           ;MCU_B1.c: 1026: }
 12673                           ;MCU_B1.c: 1027: LWLO = 0;
 12674  1170  0023               	movlb	3	; select bank3
 12675  1171  1295               	bcf	21,5	;volatile
 12676                           
 12677                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12678  1172  319B  23A7         	fcall	_Flash_Memory_Unlock
 12679                           
 12680                           ;MCU_B1.c: 1029: WREN = 0;
 12681  1174  0023               	movlb	3	; select bank3
 12682  1175  1115               	bcf	21,2	;volatile
 12683  1176  0008               	return
 12684  1177                     __end_of_Flash_Memory_Write:	
 12685                           
 12686                           	psect	text82
 12687  1BA7                     __ptext82:	
 12688 ;; *************** function _Flash_Memory_Unlock *****************
 12689 ;; Defined at:
 12690 ;;		line 993 in file "../src/MCU_B1.c"
 12691 ;; Parameters:    Size  Location     Type
 12692 ;;		None
 12693 ;; Auto vars:     Size  Location     Type
 12694 ;;		None
 12695 ;; Return value:  Size  Location     Type
 12696 ;;		None               void
 12697 ;; Registers used:
 12698 ;;		wreg
 12699 ;; Tracked objects:
 12700 ;;		On entry : 0/0
 12701 ;;		On exit  : 0/0
 12702 ;;		Unchanged: 0/0
 12703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12708 ;;Total ram usage:        0 bytes
 12709 ;; Hardware stack levels used:    1
 12710 ;; Hardware stack levels required when called:    4
 12711 ;; This function calls:
 12712 ;;		Nothing
 12713 ;; This function is called by:
 12714 ;;		_Flash_Memory_Write
 12715 ;;		_Flash_Memory_Erasing
 12716 ;; This function uses a non-reentrant model
 12717 ;;
 12718                           
 12719                           
 12720                           ;psect for function _Flash_Memory_Unlock
 12721  1BA7                     _Flash_Memory_Unlock:	
 12722                           
 12723                           ;MCU_B1.c: 994: PMCON2 = 0x55;
 12724                           
 12725                           ;incstack = 0
 12726                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12727  1BA7  3055               	movlw	85
 12728  1BA8  0023               	movlb	3	; select bank3
 12729  1BA9  0096               	movwf	22	;volatile
 12730                           
 12731                           ;MCU_B1.c: 995: PMCON2 = 0xaa;
 12732  1BAA  30AA               	movlw	170
 12733  1BAB  0096               	movwf	22	;volatile
 12734                           
 12735                           ;MCU_B1.c: 996: WR = 1;
 12736  1BAC  1495               	bsf	21,1	;volatile
 12737                           
 12738                           ;MCU_B1.c: 997: __nop();
 12739  1BAD  0000               	nop
 12740                           
 12741                           ;MCU_B1.c: 998: __nop();
 12742  1BAE  0000               	nop
 12743  1BAF  0008               	return
 12744  1BB0                     __end_of_Flash_Memory_Unlock:	
 12745                           
 12746                           	psect	text83
 12747  1EC6                     __ptext83:	
 12748 ;; *************** function _Flash_Memory_Read *****************
 12749 ;; Defined at:
 12750 ;;		line 1002 in file "../src/MCU_B1.c"
 12751 ;; Parameters:    Size  Location     Type
 12752 ;;  address         1    wreg     unsigned char 
 12753 ;; Auto vars:     Size  Location     Type
 12754 ;;  address         1    2[BANK0 ] unsigned char 
 12755 ;;  ret             1    3[BANK0 ] unsigned char 
 12756 ;;  i               1    1[BANK0 ] unsigned char 
 12757 ;; Return value:  Size  Location     Type
 12758 ;;                  1    wreg      unsigned char 
 12759 ;; Registers used:
 12760 ;;		wreg, status,2
 12761 ;; Tracked objects:
 12762 ;;		On entry : 0/0
 12763 ;;		On exit  : 0/0
 12764 ;;		Unchanged: 0/0
 12765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12769 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;Total ram usage:        4 bytes
 12771 ;; Hardware stack levels used:    1
 12772 ;; Hardware stack levels required when called:    4
 12773 ;; This function calls:
 12774 ;;		Nothing
 12775 ;; This function is called by:
 12776 ;;		_Flash_Memory_Initialization
 12777 ;;		_Flash_Memory_Modify
 12778 ;; This function uses a non-reentrant model
 12779 ;;
 12780                           
 12781                           
 12782                           ;psect for function _Flash_Memory_Read
 12783  1EC6                     _Flash_Memory_Read:	
 12784                           
 12785                           ;incstack = 0
 12786                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12787                           ;Flash_Memory_Read@address stored from wreg
 12788  1EC6  0020               	movlb	0	; select bank0
 12789  1EC7  00A2               	movwf	Flash_Memory_Read@address
 12790                           
 12791                           ;MCU_B1.c: 1003: char i = 0, ret = 0;
 12792  1EC8  01A1               	clrf	Flash_Memory_Read@i
 12793  1EC9  01A3               	clrf	Flash_Memory_Read@ret
 12794                           
 12795                           ;MCU_B1.c: 1004: PMADRH = 0x30;
 12796  1ECA  3030               	movlw	48
 12797  1ECB  0023               	movlb	3	; select bank3
 12798  1ECC  0092               	movwf	18	;volatile
 12799                           
 12800                           ;MCU_B1.c: 1005: PMADRL = address;
 12801  1ECD  0020               	movlb	0	; select bank0
 12802  1ECE  0822               	movf	Flash_Memory_Read@address,w
 12803  1ECF  0023               	movlb	3	; select bank3
 12804  1ED0  0091               	movwf	17	;volatile
 12805                           
 12806                           ;MCU_B1.c: 1006: CFGS = 0;
 12807  1ED1  1315               	bcf	21,6	;volatile
 12808                           
 12809                           ;MCU_B1.c: 1007: RD = 1;
 12810  1ED2  1415               	bsf	21,0	;volatile
 12811                           
 12812                           ;MCU_B1.c: 1008: i = PMDATH;
 12813  1ED3  0814               	movf	20,w	;volatile
 12814  1ED4  0020               	movlb	0	; select bank0
 12815  1ED5  00A0               	movwf	??_Flash_Memory_Read
 12816  1ED6  0820               	movf	??_Flash_Memory_Read,w
 12817  1ED7  00A1               	movwf	Flash_Memory_Read@i
 12818                           
 12819                           ;MCU_B1.c: 1009: ret = PMDATL;
 12820  1ED8  0023               	movlb	3	; select bank3
 12821  1ED9  0813               	movf	19,w	;volatile
 12822  1EDA  0020               	movlb	0	; select bank0
 12823  1EDB  00A0               	movwf	??_Flash_Memory_Read
 12824  1EDC  0820               	movf	??_Flash_Memory_Read,w
 12825  1EDD  00A3               	movwf	Flash_Memory_Read@ret
 12826                           
 12827                           ;MCU_B1.c: 1010: return ret;
 12828  1EDE  0823               	movf	Flash_Memory_Read@ret,w
 12829  1EDF  0008               	return
 12830  1EE0                     __end_of_Flash_Memory_Read:	
 12831                           
 12832                           	psect	text84
 12833  063B                     __ptext84:	
 12834 ;; *************** function _Exception_Main *****************
 12835 ;; Defined at:
 12836 ;;		line 499 in file "../src/Main_B1.c"
 12837 ;; Parameters:    Size  Location     Type
 12838 ;;		None
 12839 ;; Auto vars:     Size  Location     Type
 12840 ;;  i               2   18[BANK0 ] int 
 12841 ;;  i               2   16[BANK0 ] int 
 12842 ;;  error           1   21[BANK0 ] unsigned char 
 12843 ;;  lights          1   20[BANK0 ] unsigned char 
 12844 ;;  count           1   15[BANK0 ] unsigned char 
 12845 ;;  status          1   14[BANK0 ] unsigned char 
 12846 ;; Return value:  Size  Location     Type
 12847 ;;		None               void
 12848 ;; Registers used:
 12849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12850 ;; Tracked objects:
 12851 ;;		On entry : 0/0
 12852 ;;		On exit  : 0/0
 12853 ;;		Unchanged: 0/0
 12854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12856 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12858 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12859 ;;Total ram usage:        9 bytes
 12860 ;; Hardware stack levels used:    1
 12861 ;; Hardware stack levels required when called:    6
 12862 ;; This function calls:
 12863 ;;		_getDimmerLights_Line
 12864 ;;		_getDimmerLights_Status
 12865 ;;		_getMain_All_Error_Status
 12866 ;;		_getMain_All_LightsStatus
 12867 ;;		_setBuz
 12868 ;;		_setDimmerLights_SwOff
 12869 ;;		_setLED
 12870 ;; This function is called by:
 12871 ;;		_main
 12872 ;; This function uses a non-reentrant model
 12873 ;;
 12874                           
 12875                           
 12876                           ;psect for function _Exception_Main
 12877  063B                     _Exception_Main:	
 12878                           
 12879                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12880                           
 12881                           ;incstack = 0
 12882                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12883  063B  3000               	movlw	0
 12884  063C  3191  2177  3186   	fcall	_getMain_All_Error_Status
 12885  063F  0020               	movlb	0	; select bank0
 12886  0640  00AD               	movwf	??_Exception_Main
 12887  0641  082D               	movf	??_Exception_Main,w
 12888  0642  00B5               	movwf	Exception_Main@error
 12889                           
 12890                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12891  0643  01B4               	clrf	Exception_Main@lights
 12892  0644  01AF               	clrf	Exception_Main@count
 12893  0645  0AAF               	incf	Exception_Main@count,f
 12894                           
 12895                           ;Main_B1.c: 502: char status = 0;
 12896  0646  01AE               	clrf	Exception_Main@status
 12897                           
 12898                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12899  0647  0021               	movlb	1	; select bank1
 12900  0648  1DB8               	btfss	(_myMain^(0+128)+10),3
 12901  0649  2E59               	goto	l7948
 12902                           
 12903                           ;Main_B1.c: 505: if (error == 0) {
 12904  064A  0020               	movlb	0	; select bank0
 12905  064B  08B5               	movf	Exception_Main@error,f
 12906  064C  1D03               	skipz
 12907  064D  0008               	return
 12908                           
 12909                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12910  064E  0021               	movlb	1	; select bank1
 12911  064F  11B8               	bcf	(_myMain^(0+128)+10),3
 12912                           
 12913                           ;Main_B1.c: 511: setLED(error, 110);
 12914  0650  306E               	movlw	110
 12915  0651  0020               	movlb	0	; select bank0
 12916  0652  00AD               	movwf	??_Exception_Main
 12917  0653  082D               	movf	??_Exception_Main,w
 12918  0654  00A2               	movwf	setLED@command
 12919  0655  0835               	movf	Exception_Main@error,w
 12920  0656  3192  22EF         	fcall	_setLED
 12921                           
 12922                           ;Main_B1.c: 522: }
 12923                           ;Main_B1.c: 523: } else {
 12924  0658  0008               	return
 12925  0659                     l7948:	
 12926                           
 12927                           ;Main_B1.c: 524: if (error != 0) {
 12928  0659  0020               	movlb	0	; select bank0
 12929  065A  0835               	movf	Exception_Main@error,w
 12930  065B  1903               	btfsc	3,2
 12931  065C  0008               	return
 12932                           
 12933                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 12934  065D  0021               	movlb	1	; select bank1
 12935  065E  15B8               	bsf	(_myMain^(0+128)+10),3
 12936                           
 12937                           ;Main_B1.c: 529: setLED(error, 111);
 12938  065F  306F               	movlw	111
 12939  0660  0020               	movlb	0	; select bank0
 12940  0661  00AD               	movwf	??_Exception_Main
 12941  0662  082D               	movf	??_Exception_Main,w
 12942  0663  00A2               	movwf	setLED@command
 12943  0664  0835               	movf	Exception_Main@error,w
 12944  0665  3192  22EF  3186   	fcall	_setLED
 12945                           
 12946                           ;Main_B1.c: 538: switch (error) {
 12947  0668  2F05               	goto	l7996
 12948  0669                     l7954:	
 12949                           ;Main_B1.c: 539: case 2:
 12950                           
 12951                           
 12952                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 12953  0669  319B  23B0  3186   	fcall	_getMain_All_LightsStatus
 12954  066C  3A01               	xorlw	1
 12955  066D  1D03               	skipz
 12956  066E  2E78               	goto	l7958
 12957                           
 12958                           ;Main_B1.c: 547: setBuz(10, 300);
 12959  066F  302C               	movlw	44
 12960  0670  0020               	movlb	0	; select bank0
 12961  0671  00A9               	movwf	setBuz@time
 12962  0672  3001               	movlw	1
 12963  0673  00AA               	movwf	setBuz@time+1
 12964  0674  300A               	movlw	10
 12965  0675  3195  25BC  3186   	fcall	_setBuz
 12966  0678                     l7958:	
 12967                           
 12968                           ;Main_B1.c: 548: }
 12969                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 12970  0678  0020               	movlb	0	; select bank0
 12971  0679  01B0               	clrf	Exception_Main@i
 12972  067A  01B1               	clrf	Exception_Main@i+1
 12973  067B                     l7968:	
 12974  067B  0831               	movf	Exception_Main@i+1,w
 12975  067C  3A80               	xorlw	128
 12976  067D  00AD               	movwf	??_Exception_Main
 12977  067E  3080               	movlw	128
 12978  067F  022D               	subwf	??_Exception_Main,w
 12979  0680  1D03               	skipz
 12980  0681  2E84               	goto	u8155
 12981  0682  082F               	movf	Exception_Main@count,w
 12982  0683  0230               	subwf	Exception_Main@i,w
 12983  0684                     u8155:	
 12984  0684  1803               	btfsc	3,0
 12985  0685  2EA6               	goto	u8150
 12986                           
 12987                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 12988  0686  0020               	movlb	0	; select bank0
 12989  0687  0830               	movf	Exception_Main@i,w
 12990  0688  3E01               	addlw	1
 12991  0689  319C  2498  3186   	fcall	_getDimmerLights_Status
 12992  068C  3A01               	xorlw	1
 12993  068D  1D03               	skipz
 12994  068E  2EA0               	goto	l7966
 12995                           
 12996                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 12997  068F  0021               	movlb	1	; select bank1
 12998  0690  0852               	movf	_DimmerLights^(0+128),w
 12999  0691  0086               	movwf	6
 13000  0692  3001               	movlw	1	; select bank2/3
 13001  0693  0087               	movwf	7
 13002  0694  1401               	bsf	1,0
 13003                           
 13004                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13005  0695  0A52               	incf	_DimmerLights^(0+128),w
 13006  0696  0086               	movwf	6
 13007  0697  3001               	movlw	1	; select bank2/3
 13008  0698  0087               	movwf	7
 13009  0699  1001               	bcf	1,0
 13010                           
 13011                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13012  069A  0020               	movlb	0	; select bank0
 13013  069B  0830               	movf	Exception_Main@i,w
 13014  069C  3E01               	addlw	1
 13015  069D  3192  22B6  3186   	fcall	_setDimmerLights_SwOff
 13016  06A0                     l7966:	
 13017  06A0  3001               	movlw	1
 13018  06A1  0020               	movlb	0	; select bank0
 13019  06A2  07B0               	addwf	Exception_Main@i,f
 13020  06A3  3000               	movlw	0
 13021  06A4  3DB1               	addwfc	Exception_Main@i+1,f
 13022  06A5  2E7B               	goto	l7968
 13023  06A6                     u8150:	
 13024  06A6  0020               	movlb	0	; select bank0
 13025  06A7  0008               	return
 13026  06A8                     l7970:	
 13027                           ;Main_B1.c: 561: case 3:
 13028                           
 13029                           ;Main_B1.c: 556: }
 13030                           ;Main_B1.c: 557: }
 13031                           ;Main_B1.c: 560: break;
 13032                           
 13033                           
 13034                           ;Main_B1.c: 563: setBuz(5, 300);
 13035  06A8  302C               	movlw	44
 13036  06A9  0020               	movlb	0	; select bank0
 13037  06AA  00A9               	movwf	setBuz@time
 13038  06AB  3001               	movlw	1
 13039  06AC  00AA               	movwf	setBuz@time+1
 13040  06AD  3005               	movlw	5
 13041  06AE  3195  25BC  3186   	fcall	_setBuz
 13042                           
 13043                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13044  06B1  319B  23C4  3186   	fcall	_getDimmerLights_Line
 13045  06B4  0020               	movlb	0	; select bank0
 13046  06B5  00AD               	movwf	??_Exception_Main
 13047  06B6  082D               	movf	??_Exception_Main,w
 13048  06B7  00B4               	movwf	Exception_Main@lights
 13049                           
 13050                           ;Main_B1.c: 565: if (lights == 0) {
 13051  06B8  08B4               	movf	Exception_Main@lights,f
 13052  06B9  1D03               	skipz
 13053  06BA  2EEA               	goto	l7988
 13054                           
 13055                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13056  06BB  01B2               	clrf	Exception_Main@i_3413
 13057  06BC  01B3               	clrf	Exception_Main@i_3413+1
 13058  06BD                     l7986:	
 13059  06BD  0833               	movf	Exception_Main@i_3413+1,w
 13060  06BE  3A80               	xorlw	128
 13061  06BF  00AD               	movwf	??_Exception_Main
 13062  06C0  3080               	movlw	128
 13063  06C1  022D               	subwf	??_Exception_Main,w
 13064  06C2  1D03               	skipz
 13065  06C3  2EC6               	goto	u8185
 13066  06C4  082F               	movf	Exception_Main@count,w
 13067  06C5  0232               	subwf	Exception_Main@i_3413,w
 13068  06C6                     u8185:	
 13069  06C6  1803               	btfsc	3,0
 13070  06C7  2EE8               	goto	u8180
 13071                           
 13072                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13073  06C8  0020               	movlb	0	; select bank0
 13074  06C9  0832               	movf	Exception_Main@i_3413,w
 13075  06CA  3E01               	addlw	1
 13076  06CB  319C  2498  3186   	fcall	_getDimmerLights_Status
 13077  06CE  3A01               	xorlw	1
 13078  06CF  1D03               	skipz
 13079  06D0  2EE2               	goto	l7984
 13080                           
 13081                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13082  06D1  0021               	movlb	1	; select bank1
 13083  06D2  0852               	movf	_DimmerLights^(0+128),w
 13084  06D3  0086               	movwf	6
 13085  06D4  3001               	movlw	1	; select bank2/3
 13086  06D5  0087               	movwf	7
 13087  06D6  1401               	bsf	1,0
 13088                           
 13089                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13090  06D7  0A52               	incf	_DimmerLights^(0+128),w
 13091  06D8  0086               	movwf	6
 13092  06D9  3001               	movlw	1	; select bank2/3
 13093  06DA  0087               	movwf	7
 13094  06DB  1001               	bcf	1,0
 13095                           
 13096                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13097  06DC  0020               	movlb	0	; select bank0
 13098  06DD  0832               	movf	Exception_Main@i_3413,w
 13099  06DE  3E01               	addlw	1
 13100  06DF  3192  22B6  3186   	fcall	_setDimmerLights_SwOff
 13101  06E2                     l7984:	
 13102  06E2  3001               	movlw	1
 13103  06E3  0020               	movlb	0	; select bank0
 13104  06E4  07B2               	addwf	Exception_Main@i_3413,f
 13105  06E5  3000               	movlw	0
 13106  06E6  3DB3               	addwfc	Exception_Main@i_3413+1,f
 13107  06E7  2EBD               	goto	l7986
 13108  06E8                     u8180:	
 13109  06E8  0020               	movlb	0	; select bank0
 13110  06E9  0008               	return
 13111  06EA                     l7988:	
 13112                           ;Main_B1.c: 573: }
 13113                           ;Main_B1.c: 574: }
 13114                           ;Main_B1.c: 575: } else {
 13115                           
 13116                           
 13117                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13118  06EA  0020               	movlb	0	; select bank0
 13119  06EB  0834               	movf	Exception_Main@lights,w
 13120  06EC  319C  2498  3186   	fcall	_getDimmerLights_Status
 13121  06EF  3A01               	xorlw	1
 13122  06F0  1903               	btfsc	3,2
 13123  06F1  2EF4               	goto	l7990
 13124  06F2  0020               	movlb	0	; select bank0
 13125  06F3  0008               	return
 13126  06F4                     l7990:	
 13127                           
 13128                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13129  06F4  0021               	movlb	1	; select bank1
 13130  06F5  0852               	movf	_DimmerLights^(0+128),w
 13131  06F6  0086               	movwf	6
 13132  06F7  3001               	movlw	1	; select bank2/3
 13133  06F8  0087               	movwf	7
 13134  06F9  1401               	bsf	1,0
 13135                           
 13136                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13137  06FA  0A52               	incf	_DimmerLights^(0+128),w
 13138  06FB  0086               	movwf	6
 13139  06FC  3001               	movlw	1	; select bank2/3
 13140  06FD  0087               	movwf	7
 13141  06FE  1001               	bcf	1,0
 13142                           
 13143                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13144  06FF  0020               	movlb	0	; select bank0
 13145  0700  0834               	movf	Exception_Main@lights,w
 13146  0701  3192  22B6         	fcall	_setDimmerLights_SwOff
 13147  0703  0020               	movlb	0	; select bank0
 13148  0704  0008               	return
 13149  0705                     l7996:	
 13150                           ;Main_B1.c: 586: }
 13151                           
 13152                           ;Main_B1.c: 582: }
 13153                           ;Main_B1.c: 583: }
 13154                           ;Main_B1.c: 585: break;
 13155                           
 13156  0705  0020               	movlb	0	; select bank0
 13157  0706  0835               	movf	Exception_Main@error,w
 13158                           
 13159                           ; Switch size 1, requested type "space"
 13160                           ; Number of cases is 2, Range of values is 2 to 3
 13161                           ; switch strategies available:
 13162                           ; Name         Instructions Cycles
 13163                           ; simple_byte            7     4 (average)
 13164                           ; direct_byte           13     9 (fixed)
 13165                           ; jumptable            263     9 (fixed)
 13166                           ;	Chosen strategy is simple_byte
 13167  0707  3A02               	xorlw	2	; case 2
 13168  0708  1903               	skipnz
 13169  0709  2E69               	goto	l7954
 13170  070A  3A01               	xorlw	1	; case 3
 13171  070B  1903               	skipnz
 13172  070C  2EA8               	goto	l7970
 13173  070D  2F0F               	goto	l1478
 13174  070E  0008               	return
 13175  070F                     l1478:	
 13176  070F  0008               	return
 13177  0710                     __end_of_Exception_Main:	
 13178                           
 13179                           	psect	text85
 13180  1BC4                     __ptext85:	
 13181 ;; *************** function _getDimmerLights_Line *****************
 13182 ;; Defined at:
 13183 ;;		line 978 in file "../src/Dimmer_B1.c"
 13184 ;; Parameters:    Size  Location     Type
 13185 ;;		None
 13186 ;; Auto vars:     Size  Location     Type
 13187 ;;  line            1    0[BANK0 ] unsigned char 
 13188 ;; Return value:  Size  Location     Type
 13189 ;;                  1    wreg      unsigned char 
 13190 ;; Registers used:
 13191 ;;		wreg, status,2
 13192 ;; Tracked objects:
 13193 ;;		On entry : 0/0
 13194 ;;		On exit  : 0/0
 13195 ;;		Unchanged: 0/0
 13196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13201 ;;Total ram usage:        1 bytes
 13202 ;; Hardware stack levels used:    1
 13203 ;; Hardware stack levels required when called:    4
 13204 ;; This function calls:
 13205 ;;		Nothing
 13206 ;; This function is called by:
 13207 ;;		_Exception_Main
 13208 ;; This function uses a non-reentrant model
 13209 ;;
 13210                           
 13211                           
 13212                           ;psect for function _getDimmerLights_Line
 13213  1BC4                     _getDimmerLights_Line:	
 13214                           
 13215                           ;Dimmer_B1.c: 979: char line = 0;
 13216                           
 13217                           ;incstack = 0
 13218                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13219  1BC4  0020               	movlb	0	; select bank0
 13220  1BC5  01A0               	clrf	getDimmerLights_Line@line
 13221                           
 13222                           ;Dimmer_B1.c: 981: if (DimmerLights1.Line == 1) {
 13223  1BC6  0023               	movlb	3	; select bank3
 13224  1BC7  1CD4               	btfss	(_DimmerLights1^(0+384)+1),1
 13225  1BC8  2BCC               	goto	l7030
 13226                           
 13227                           ;Dimmer_B1.c: 982: line = 1;
 13228  1BC9  0020               	movlb	0	; select bank0
 13229  1BCA  01A0               	clrf	getDimmerLights_Line@line
 13230  1BCB  0AA0               	incf	getDimmerLights_Line@line,f
 13231  1BCC                     l7030:	
 13232                           
 13233                           ;Dimmer_B1.c: 983: }
 13234                           ;Dimmer_B1.c: 995: return line;
 13235  1BCC  0020               	movlb	0	; select bank0
 13236  1BCD  0820               	movf	getDimmerLights_Line@line,w
 13237  1BCE  0008               	return
 13238  1BCF                     __end_of_getDimmerLights_Line:	
 13239                           
 13240                           	psect	text86
 13241  1F2F                     __ptext86:	
 13242 ;; *************** function _DimmerLights_Main *****************
 13243 ;; Defined at:
 13244 ;;		line 736 in file "../src/Dimmer_B1.c"
 13245 ;; Parameters:    Size  Location     Type
 13246 ;;		None
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;		None
 13249 ;; Return value:  Size  Location     Type
 13250 ;;		None               void
 13251 ;; Registers used:
 13252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13253 ;; Tracked objects:
 13254 ;;		On entry : 0/0
 13255 ;;		On exit  : 0/0
 13256 ;;		Unchanged: 0/0
 13257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;Total ram usage:        0 bytes
 13263 ;; Hardware stack levels used:    1
 13264 ;; Hardware stack levels required when called:    9
 13265 ;; This function calls:
 13266 ;;		_getLoad_OK
 13267 ;;		_getMain_All_Error_Status
 13268 ;;		_getMain_All_LightsStatus
 13269 ;;		_setDimmerLights_Main
 13270 ;; This function is called by:
 13271 ;;		_main
 13272 ;; This function uses a non-reentrant model
 13273 ;;
 13274                           
 13275                           
 13276                           ;psect for function _DimmerLights_Main
 13277  1F2F                     _DimmerLights_Main:	
 13278                           
 13279                           ;Dimmer_B1.c: 739: if (Dimmer.LoadGO == 1) {
 13280                           
 13281                           ;incstack = 0
 13282                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13283  1F2F  0023               	movlb	3	; select bank3
 13284  1F30  1CA0               	btfss	_Dimmer^(0+384),1
 13285  1F31  2F47               	goto	l7558
 13286                           
 13287                           ;Dimmer_B1.c: 740: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13288  1F32  319B  237D  319F   	fcall	_getLoad_OK
 13289  1F35  3A01               	xorlw	1
 13290  1F36  1903               	skipnz
 13291  1F37  2F45               	goto	l752
 13292  1F38  3000               	movlw	0
 13293  1F39  3191  2177  319F   	fcall	_getMain_All_Error_Status
 13294  1F3C  3800               	iorlw	0
 13295  1F3D  1D03               	skipz
 13296  1F3E  2F45               	goto	l752
 13297  1F3F  319B  23B0  319F   	fcall	_getMain_All_LightsStatus
 13298  1F42  3800               	iorlw	0
 13299  1F43  1D03               	skipz
 13300  1F44  2F47               	goto	l7558
 13301  1F45                     l752:	
 13302                           
 13303                           ;Dimmer_B1.c: 741: Dimmer.LoadGO = 0;
 13304  1F45  0023               	movlb	3	; select bank3
 13305  1F46  10A0               	bcf	_Dimmer^(0+384),1
 13306  1F47                     l7558:	
 13307                           
 13308                           ;Dimmer_B1.c: 742: }
 13309                           ;Dimmer_B1.c: 743: }
 13310                           ;Dimmer_B1.c: 747: setDimmerLights_Main(1);
 13311  1F47  3001               	movlw	1
 13312  1F48  3188  2027         	fcall	_setDimmerLights_Main
 13313  1F4A  0008               	return
 13314  1F4B                     __end_of_DimmerLights_Main:	
 13315                           
 13316                           	psect	text87
 13317  0827                     __ptext87:	
 13318 ;; *************** function _setDimmerLights_Main *****************
 13319 ;; Defined at:
 13320 ;;		line 765 in file "../src/Dimmer_B1.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;  lights          1    wreg     unsigned char 
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;  lights          1    1[BANK1 ] unsigned char 
 13325 ;; Return value:  Size  Location     Type
 13326 ;;		None               void
 13327 ;; Registers used:
 13328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13329 ;; Tracked objects:
 13330 ;;		On entry : 0/0
 13331 ;;		On exit  : 0/0
 13332 ;;		Unchanged: 0/0
 13333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13337 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;Total ram usage:        1 bytes
 13339 ;; Hardware stack levels used:    1
 13340 ;; Hardware stack levels required when called:    8
 13341 ;; This function calls:
 13342 ;;		_DimmerLights_SelectPointer
 13343 ;;		_getDimmerLights_Allow_Condition
 13344 ;;		_getMain_All_LightsStatus
 13345 ;;		_setDimmerLights_Dimming
 13346 ;;		_setDimmerLights_OnOff
 13347 ;; This function is called by:
 13348 ;;		_DimmerLights_Main
 13349 ;; This function uses a non-reentrant model
 13350 ;;
 13351                           
 13352                           
 13353                           ;psect for function _setDimmerLights_Main
 13354  0827                     _setDimmerLights_Main:	
 13355                           
 13356                           ;incstack = 0
 13357                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13358                           ;setDimmerLights_Main@lights stored from wreg
 13359  0827  0021               	movlb	1	; select bank1
 13360  0828  00E7               	movwf	setDimmerLights_Main@lights^(0+128)
 13361                           
 13362                           ;Dimmer_B1.c: 767: DimmerLights_SelectPointer(lights);
 13363  0829  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13364  082A  319B  23E6  3188   	fcall	_DimmerLights_SelectPointer
 13365                           
 13366                           ;Dimmer_B1.c: 768: if (DimmerLights->Trigger == 1) {
 13367  082D  0021               	movlb	1	; select bank1
 13368  082E  0852               	movf	_DimmerLights^(0+128),w
 13369  082F  0086               	movwf	6
 13370  0830  3001               	movlw	1	; select bank2/3
 13371  0831  0087               	movwf	7
 13372  0832  1C81               	btfss	1,1
 13373  0833  2856               	goto	l7008
 13374                           
 13375                           ;Dimmer_B1.c: 769: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13376  0834  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13377  0835  319E  261F  3188   	fcall	_getDimmerLights_Allow_Condition
 13378  0838  3800               	iorlw	0
 13379  0839  1D03               	skipz
 13380  083A  0008               	return
 13381                           
 13382                           ;Dimmer_B1.c: 770: DimmerLights->Trigger = 0;
 13383  083B  0021               	movlb	1	; select bank1
 13384  083C  0852               	movf	_DimmerLights^(0+128),w
 13385  083D  0086               	movwf	6
 13386  083E  3001               	movlw	1	; select bank2/3
 13387  083F  0087               	movwf	7
 13388  0840  1081               	bcf	1,1
 13389                           
 13390                           ;Dimmer_B1.c: 771: if (DimmerLights->Switch == 1) {
 13391  0841  0852               	movf	_DimmerLights^(0+128),w
 13392  0842  0086               	movwf	6
 13393  0843  3001               	movlw	1	; select bank2/3
 13394  0844  0087               	movwf	7
 13395  0845  1D01               	btfss	1,2
 13396  0846  284F               	goto	l7006
 13397                           
 13398                           ;Dimmer_B1.c: 772: setDimmerLights_OnOff(lights, 1);
 13399  0847  0020               	movlb	0	; select bank0
 13400  0848  01ED               	clrf	setDimmerLights_OnOff@command
 13401  0849  0AED               	incf	setDimmerLights_OnOff@command,f
 13402  084A  0021               	movlb	1	; select bank1
 13403  084B  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13404  084C  3187  2710         	fcall	_setDimmerLights_OnOff
 13405                           
 13406                           ;Dimmer_B1.c: 773: } else {
 13407  084E  0008               	return
 13408  084F                     l7006:	
 13409                           
 13410                           ;Dimmer_B1.c: 774: setDimmerLights_OnOff(lights, 0);
 13411  084F  0020               	movlb	0	; select bank0
 13412  0850  01ED               	clrf	setDimmerLights_OnOff@command
 13413  0851  0021               	movlb	1	; select bank1
 13414  0852  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13415  0853  3187  2710         	fcall	_setDimmerLights_OnOff
 13416                           
 13417                           ;Dimmer_B1.c: 775: }
 13418                           ;Dimmer_B1.c: 776: }
 13419                           ;Dimmer_B1.c: 777: } else {
 13420  0855  0008               	return
 13421  0856                     l7008:	
 13422                           
 13423                           ;Dimmer_B1.c: 778: if (getMain_All_LightsStatus() == 1) {
 13424  0856  319B  23B0  3188   	fcall	_getMain_All_LightsStatus
 13425  0859  3A01               	xorlw	1
 13426  085A  1D03               	skipz
 13427  085B  2885               	goto	l7020
 13428                           
 13429                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingTrigger == 1) {
 13430  085C  0021               	movlb	1	; select bank1
 13431  085D  0852               	movf	_DimmerLights^(0+128),w
 13432  085E  0086               	movwf	6
 13433  085F  3001               	movlw	1	; select bank2/3
 13434  0860  0087               	movwf	7
 13435  0861  1E01               	btfss	1,4
 13436  0862  0008               	return
 13437                           
 13438                           ;Dimmer_B1.c: 780: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13439  0863  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13440  0864  319E  261F  3188   	fcall	_getDimmerLights_Allow_Condition
 13441  0867  3800               	iorlw	0
 13442  0868  1D03               	skipz
 13443  0869  0008               	return
 13444                           
 13445                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 0;
 13446  086A  0021               	movlb	1	; select bank1
 13447  086B  0852               	movf	_DimmerLights^(0+128),w
 13448  086C  0086               	movwf	6
 13449  086D  3001               	movlw	1	; select bank2/3
 13450  086E  0087               	movwf	7
 13451  086F  1201               	bcf	1,4
 13452                           
 13453                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingSwitch == 1) {
 13454  0870  0852               	movf	_DimmerLights^(0+128),w
 13455  0871  0086               	movwf	6
 13456  0872  3001               	movlw	1	; select bank2/3
 13457  0873  0087               	movwf	7
 13458  0874  1E81               	btfss	1,5
 13459  0875  287E               	goto	l7018
 13460                           
 13461                           ;Dimmer_B1.c: 783: setDimmerLights_Dimming(lights, 1);
 13462  0876  0020               	movlb	0	; select bank0
 13463  0877  01EA               	clrf	setDimmerLights_Dimming@status
 13464  0878  0AEA               	incf	setDimmerLights_Dimming@status,f
 13465  0879  0021               	movlb	1	; select bank1
 13466  087A  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13467  087B  3194  2472         	fcall	_setDimmerLights_Dimming
 13468                           
 13469                           ;Dimmer_B1.c: 784: } else {
 13470  087D  0008               	return
 13471  087E                     l7018:	
 13472                           
 13473                           ;Dimmer_B1.c: 785: setDimmerLights_Dimming(lights, 0);
 13474  087E  0020               	movlb	0	; select bank0
 13475  087F  01EA               	clrf	setDimmerLights_Dimming@status
 13476  0880  0021               	movlb	1	; select bank1
 13477  0881  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13478  0882  3194  2472         	fcall	_setDimmerLights_Dimming
 13479                           
 13480                           ;Dimmer_B1.c: 786: }
 13481                           ;Dimmer_B1.c: 787: }
 13482                           ;Dimmer_B1.c: 788: }
 13483                           ;Dimmer_B1.c: 789: } else {
 13484  0884  0008               	return
 13485  0885                     l7020:	
 13486                           
 13487                           ;Dimmer_B1.c: 790: if (DimmerLights->DimmingTrigger == 1) {
 13488  0885  0021               	movlb	1	; select bank1
 13489  0886  0852               	movf	_DimmerLights^(0+128),w
 13490  0887  0086               	movwf	6
 13491  0888  3001               	movlw	1	; select bank2/3
 13492  0889  0087               	movwf	7
 13493  088A  1E01               	btfss	1,4
 13494  088B  0008               	return
 13495                           
 13496                           ;Dimmer_B1.c: 791: DimmerLights->DimmingTrigger = 0;
 13497  088C  0852               	movf	_DimmerLights^(0+128),w
 13498  088D  0086               	movwf	6
 13499  088E  3001               	movlw	1	; select bank2/3
 13500  088F  0087               	movwf	7
 13501  0890  1201               	bcf	1,4
 13502  0891  0008               	return
 13503  0892                     __end_of_setDimmerLights_Main:	
 13504                           
 13505                           	psect	text88
 13506  0710                     __ptext88:	
 13507 ;; *************** function _setDimmerLights_OnOff *****************
 13508 ;; Defined at:
 13509 ;;		line 799 in file "../src/Dimmer_B1.c"
 13510 ;; Parameters:    Size  Location     Type
 13511 ;;  lights          1    wreg     unsigned char 
 13512 ;;  command         1   77[BANK0 ] unsigned char 
 13513 ;; Auto vars:     Size  Location     Type
 13514 ;;  lights          1    0[BANK1 ] unsigned char 
 13515 ;; Return value:  Size  Location     Type
 13516 ;;		None               void
 13517 ;; Registers used:
 13518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13519 ;; Tracked objects:
 13520 ;;		On entry : 0/0
 13521 ;;		On exit  : 0/0
 13522 ;;		Unchanged: 0/0
 13523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13524 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13525 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13526 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13527 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13528 ;;Total ram usage:        4 bytes
 13529 ;; Hardware stack levels used:    1
 13530 ;; Hardware stack levels required when called:    7
 13531 ;; This function calls:
 13532 ;;		_getCmd_Status
 13533 ;;		_getDelayOff_GO
 13534 ;;		_getDimmerLights_PercentToValue
 13535 ;;		_getDimmerLights_ValueToPercent
 13536 ;;		_getMain_All_LightsStatus
 13537 ;;		_setCmd_Status
 13538 ;;		_setDelayOff_GO
 13539 ;;		_setDimmerIntr_ControlStatus
 13540 ;;		_setDimmerIntr_DimmingValue
 13541 ;;		_setDimmerIntr_Dimming_RF
 13542 ;;		_setDimmerIntr_MaxmumValue
 13543 ;;		_setDimmerLights_Line
 13544 ;;		_setLED
 13545 ;;		_setProductData
 13546 ;;		_setRF_DimmerLights
 13547 ;;		_setTxData
 13548 ;; This function is called by:
 13549 ;;		_setDimmerLights_Main
 13550 ;; This function uses a non-reentrant model
 13551 ;;
 13552                           
 13553                           
 13554                           ;psect for function _setDimmerLights_OnOff
 13555  0710                     _setDimmerLights_OnOff:	
 13556                           
 13557                           ;incstack = 0
 13558                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13559                           ;setDimmerLights_OnOff@lights stored from wreg
 13560  0710  0021               	movlb	1	; select bank1
 13561  0711  00E6               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13562                           
 13563                           ;Dimmer_B1.c: 801: if (command == 1) {
 13564  0712  0020               	movlb	0	; select bank0
 13565  0713  086D               	movf	setDimmerLights_OnOff@command,w
 13566  0714  3A01               	xorlw	1
 13567  0715  1D03               	skipz
 13568  0716  2F7A               	goto	l6666
 13569                           
 13570                           ;Dimmer_B1.c: 802: setDimmerIntr_ControlStatus(lights, 1);
 13571  0717  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13572  0718  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13573  0719  0021               	movlb	1	; select bank1
 13574  071A  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13575  071B  319E  264B  3187   	fcall	_setDimmerIntr_ControlStatus
 13576                           
 13577                           ;Dimmer_B1.c: 805: Dimmer.Load_Status = 1;
 13578  071E  0023               	movlb	3	; select bank3
 13579  071F  1520               	bsf	_Dimmer^(0+384),2
 13580                           
 13581                           ;Dimmer_B1.c: 806: setDimmerLights_Line(lights);
 13582  0720  0021               	movlb	1	; select bank1
 13583  0721  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13584  0722  319C  24A9  3187   	fcall	_setDimmerLights_Line
 13585                           
 13586                           ;Dimmer_B1.c: 812: setLED(lights, 0);
 13587  0725  0020               	movlb	0	; select bank0
 13588  0726  01A2               	clrf	setLED@command
 13589  0727  0021               	movlb	1	; select bank1
 13590  0728  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13591  0729  3192  22EF  3187   	fcall	_setLED
 13592                           
 13593                           ;Dimmer_B1.c: 813: ;;
 13594                           ;Dimmer_B1.c: 818: setDimmerIntr_DimmingValue(lights, ((char)(60*0.8)));
 13595  072C  3030               	movlw	48
 13596  072D  0020               	movlb	0	; select bank0
 13597  072E  00EE               	movwf	??_setDimmerLights_OnOff
 13598  072F  086E               	movf	??_setDimmerLights_OnOff,w
 13599  0730  00A0               	movwf	setDimmerIntr_DimmingValue@value
 13600  0731  0021               	movlb	1	; select bank1
 13601  0732  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13602  0733  319C  240A  3187   	fcall	_setDimmerIntr_DimmingValue
 13603                           
 13604                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingRun == 1) {
 13605  0736  0021               	movlb	1	; select bank1
 13606  0737  0A52               	incf	_DimmerLights^(0+128),w
 13607  0738  0086               	movwf	6
 13608  0739  3001               	movlw	1	; select bank2/3
 13609  073A  0087               	movwf	7
 13610  073B  1F01               	btfss	1,6
 13611  073C  2F61               	goto	l6662
 13612                           
 13613                           ;Dimmer_B1.c: 821: DimmerLights->DimmingRun = 0;
 13614  073D  0A52               	incf	_DimmerLights^(0+128),w
 13615  073E  0086               	movwf	6
 13616  073F  3001               	movlw	1	; select bank2/3
 13617  0740  0087               	movwf	7
 13618  0741  1301               	bcf	1,6
 13619                           
 13620                           ;Dimmer_B1.c: 822: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13621  0742  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13622  0743  3E14               	addlw	20
 13623  0744  076E               	addwf	_product^(0+128),w
 13624  0745  0020               	movlb	0	; select bank0
 13625  0746  00EE               	movwf	??_setDimmerLights_OnOff
 13626  0747  086E               	movf	??_setDimmerLights_OnOff,w
 13627  0748  0086               	movwf	6
 13628  0749  3002               	movlw	2	; select bank4/5
 13629  074A  0087               	movwf	7
 13630  074B  0801               	movf	1,w
 13631  074C  3197  279B  3187   	fcall	_getDimmerLights_PercentToValue
 13632  074F  0020               	movlb	0	; select bank0
 13633  0750  00EF               	movwf	??_setDimmerLights_OnOff+1
 13634  0751  086F               	movf	??_setDimmerLights_OnOff+1,w
 13635  0752  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13636  0753  0021               	movlb	1	; select bank1
 13637  0754  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13638  0755  319B  23FE  3187   	fcall	_setDimmerIntr_MaxmumValue
 13639                           
 13640                           ;Dimmer_B1.c: 823: setDimmerIntr_Dimming_RF(lights, 1);
 13641  0758  0020               	movlb	0	; select bank0
 13642  0759  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13643  075A  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13644  075B  0021               	movlb	1	; select bank1
 13645  075C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13646  075D  319E  2663  3187   	fcall	_setDimmerIntr_Dimming_RF
 13647                           
 13648                           ;Dimmer_B1.c: 824: } else {
 13649  0760  2FA9               	goto	l6680
 13650  0761                     l6662:	
 13651                           
 13652                           ;Dimmer_B1.c: 825: setDimmerIntr_MaxmumValue(lights, ((char)(60*0.8)));
 13653  0761  3030               	movlw	48
 13654  0762  0020               	movlb	0	; select bank0
 13655  0763  00EE               	movwf	??_setDimmerLights_OnOff
 13656  0764  086E               	movf	??_setDimmerLights_OnOff,w
 13657  0765  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13658  0766  0021               	movlb	1	; select bank1
 13659  0767  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13660  0768  319B  23FE  3187   	fcall	_setDimmerIntr_MaxmumValue
 13661                           
 13662                           ;Dimmer_B1.c: 826: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          60*0.8))));
 13663  076B  3030               	movlw	48
 13664  076C  3196  26D1  3187   	fcall	_getDimmerLights_ValueToPercent
 13665  076F  0020               	movlb	0	; select bank0
 13666  0770  00EE               	movwf	??_setDimmerLights_OnOff
 13667  0771  086E               	movf	??_setDimmerLights_OnOff,w
 13668  0772  00E2               	movwf	setProductData@value
 13669  0773  0021               	movlb	1	; select bank1
 13670  0774  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13671  0775  3E14               	addlw	20
 13672  0776  319B  23F2  3187   	fcall	_setProductData
 13673                           
 13674                           ;Dimmer_B1.c: 827: }
 13675                           ;Dimmer_B1.c: 830: } else if (command == 0) {
 13676  0779  2FA9               	goto	l6680
 13677  077A                     l6666:	
 13678  077A  0020               	movlb	0	; select bank0
 13679  077B  08ED               	movf	setDimmerLights_OnOff@command,f
 13680  077C  1D03               	skipz
 13681  077D  2FA9               	goto	l6680
 13682                           
 13683                           ;Dimmer_B1.c: 831: setDimmerIntr_ControlStatus(lights, 0);
 13684  077E  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13685  077F  0021               	movlb	1	; select bank1
 13686  0780  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13687  0781  319E  264B  3187   	fcall	_setDimmerIntr_ControlStatus
 13688                           
 13689                           ;Dimmer_B1.c: 833: Dimmer.Load_Status = 0;
 13690  0784  0023               	movlb	3	; select bank3
 13691  0785  1120               	bcf	_Dimmer^(0+384),2
 13692                           
 13693                           ;Dimmer_B1.c: 834: setDimmerLights_Line(0);
 13694  0786  3000               	movlw	0
 13695  0787  319C  24A9  3187   	fcall	_setDimmerLights_Line
 13696                           
 13697                           ;Dimmer_B1.c: 838: if (getDelayOff_GO(lights) == 1) {
 13698  078A  0021               	movlb	1	; select bank1
 13699  078B  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13700  078C  319C  24BA  3187   	fcall	_getDelayOff_GO
 13701  078F  3A01               	xorlw	1
 13702  0790  1D03               	skipz
 13703  0791  2F9A               	goto	l776
 13704                           
 13705                           ;Dimmer_B1.c: 839: setDelayOff_GO(lights, 0, 0);
 13706  0792  0020               	movlb	0	; select bank0
 13707  0793  01E5               	clrf	setDelayOff_GO@command
 13708  0794  01E6               	clrf	setDelayOff_GO@value
 13709  0795  0021               	movlb	1	; select bank1
 13710  0796  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13711  0797  318C  24AB  3187   	fcall	_setDelayOff_GO
 13712  079A                     l776:	
 13713                           
 13714                           ;Dimmer_B1.c: 840: }
 13715                           ;Dimmer_B1.c: 845: setLED(lights, 1);
 13716  079A  0020               	movlb	0	; select bank0
 13717  079B  01A2               	clrf	setLED@command
 13718  079C  0AA2               	incf	setLED@command,f
 13719  079D  0021               	movlb	1	; select bank1
 13720  079E  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13721  079F  3192  22EF  3187   	fcall	_setLED
 13722                           
 13723                           ;Dimmer_B1.c: 846: ;;
 13724                           ;Dimmer_B1.c: 850: if (lights == 1) {
 13725  07A2  0021               	movlb	1	; select bank1
 13726  07A3  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13727  07A4  3A01               	xorlw	1
 13728  07A5  1D03               	skipz
 13729  07A6  2FA9               	goto	l6680
 13730                           
 13731                           ;Dimmer_B1.c: 851: RB1 = 0;
 13732  07A7  0020               	movlb	0	; select bank0
 13733  07A8  108D               	bcf	13,1	;volatile
 13734  07A9                     l6680:	
 13735                           
 13736                           ;Dimmer_B1.c: 853: }
 13737                           ;Dimmer_B1.c: 864: }
 13738                           ;Dimmer_B1.c: 867: setRF_DimmerLights(lights, command);
 13739  07A9  0020               	movlb	0	; select bank0
 13740  07AA  086D               	movf	setDimmerLights_OnOff@command,w
 13741  07AB  00EE               	movwf	??_setDimmerLights_OnOff
 13742  07AC  086E               	movf	??_setDimmerLights_OnOff,w
 13743  07AD  00E5               	movwf	setRF_DimmerLights@on
 13744  07AE  0021               	movlb	1	; select bank1
 13745  07AF  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13746  07B0  3197  2736  3187   	fcall	_setRF_DimmerLights
 13747                           
 13748                           ;Dimmer_B1.c: 869: if (getCmd_Status(1) == 1) {
 13749  07B3  3001               	movlw	1
 13750  07B4  319C  24FE  3187   	fcall	_getCmd_Status
 13751  07B7  3A01               	xorlw	1
 13752  07B8  1D03               	skipz
 13753  07B9  2FD5               	goto	l6694
 13754                           
 13755                           ;Dimmer_B1.c: 870: if (getMain_All_LightsStatus() == 0) {
 13756  07BA  319B  23B0  3187   	fcall	_getMain_All_LightsStatus
 13757  07BD  3800               	iorlw	0
 13758  07BE  1D03               	skipz
 13759  07BF  0008               	return
 13760                           
 13761                           ;Dimmer_B1.c: 871: setCmd_Status(1, 0);
 13762  07C0  0020               	movlb	0	; select bank0
 13763  07C1  01A0               	clrf	setCmd_Status@cmd
 13764  07C2  3001               	movlw	1
 13765  07C3  319E  2694  3187   	fcall	_setCmd_Status
 13766                           
 13767                           ;Dimmer_B1.c: 872: setProductData(11, 0);
 13768  07C6  0020               	movlb	0	; select bank0
 13769  07C7  01E2               	clrf	setProductData@value
 13770  07C8  300B               	movlw	11
 13771  07C9  319B  23F2  3187   	fcall	_setProductData
 13772                           
 13773                           ;Dimmer_B1.c: 873: setProductData(17, 0);
 13774  07CC  0020               	movlb	0	; select bank0
 13775  07CD  01E2               	clrf	setProductData@value
 13776  07CE  3011               	movlw	17
 13777  07CF  319B  23F2  3187   	fcall	_setProductData
 13778                           
 13779                           ;Dimmer_B1.c: 874: setTxData();
 13780  07D2  318F  2745         	fcall	_setTxData
 13781                           
 13782                           ;Dimmer_B1.c: 875: }
 13783                           ;Dimmer_B1.c: 876: } else {
 13784  07D4  0008               	return
 13785  07D5                     l6694:	
 13786                           
 13787                           ;Dimmer_B1.c: 877: setTxData();
 13788  07D5  318F  2745         	fcall	_setTxData
 13789  07D7  0008               	return
 13790  07D8                     __end_of_setDimmerLights_OnOff:	
 13791                           
 13792                           	psect	text89
 13793  12EF                     __ptext89:	
 13794 ;; *************** function _setLED *****************
 13795 ;; Defined at:
 13796 ;;		line 81 in file "../src/LED_B1.c"
 13797 ;; Parameters:    Size  Location     Type
 13798 ;;  led             1    wreg     unsigned char 
 13799 ;;  command         1    2[BANK0 ] unsigned char 
 13800 ;; Auto vars:     Size  Location     Type
 13801 ;;  led             1    3[BANK0 ] unsigned char 
 13802 ;; Return value:  Size  Location     Type
 13803 ;;		None               void
 13804 ;; Registers used:
 13805 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13806 ;; Tracked objects:
 13807 ;;		On entry : 0/0
 13808 ;;		On exit  : 0/0
 13809 ;;		Unchanged: 0/0
 13810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13811 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13815 ;;Total ram usage:        2 bytes
 13816 ;; Hardware stack levels used:    1
 13817 ;; Hardware stack levels required when called:    5
 13818 ;; This function calls:
 13819 ;;		_LedPointSelect
 13820 ;; This function is called by:
 13821 ;;		_setDimmerLights_OnOff
 13822 ;;		_setLED_Initialization
 13823 ;;		_Exception_Main
 13824 ;;		_setSw_Initialization
 13825 ;; This function uses a non-reentrant model
 13826 ;;
 13827                           
 13828                           
 13829                           ;psect for function _setLED
 13830  12EF                     _setLED:	
 13831                           
 13832                           ;incstack = 0
 13833                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13834                           ;setLED@led stored from wreg
 13835  12EF  0020               	movlb	0	; select bank0
 13836  12F0  00A3               	movwf	setLED@led
 13837                           
 13838                           ;LED_B1.c: 82: LedPointSelect(led);
 13839  12F1  0823               	movf	setLED@led,w
 13840  12F2  319C  2416  3192   	fcall	_LedPointSelect
 13841                           
 13842                           ;LED_B1.c: 83: if (command == 0) {
 13843  12F5  0020               	movlb	0	; select bank0
 13844  12F6  08A2               	movf	setLED@command,f
 13845  12F7  1D03               	skipz
 13846  12F8  2AFE               	goto	l6430
 13847                           
 13848                           ;LED_B1.c: 112: if (led == 99) {
 13849  12F9  0823               	movf	setLED@led,w
 13850  12FA  3A63               	xorlw	99
 13851  12FB  1D03               	skipz
 13852  12FC  2AFE               	goto	l6430
 13853                           
 13854                           ;LED_B1.c: 116: RB5 = 1;
 13855  12FD  168D               	bsf	13,5	;volatile
 13856  12FE                     l6430:	
 13857                           
 13858                           ;LED_B1.c: 118: }
 13859                           ;LED_B1.c: 120: }
 13860                           ;LED_B1.c: 121: if (command == 1) {
 13861  12FE  0822               	movf	setLED@command,w
 13862  12FF  3A01               	xorlw	1
 13863  1300  1D03               	skipz
 13864  1301  2B07               	goto	l6436
 13865                           
 13866                           ;LED_B1.c: 150: if (led == 99) {
 13867  1302  0823               	movf	setLED@led,w
 13868  1303  3A63               	xorlw	99
 13869  1304  1D03               	skipz
 13870  1305  2B07               	goto	l6436
 13871                           
 13872                           ;LED_B1.c: 154: RB5 = 0;
 13873  1306  128D               	bcf	13,5	;volatile
 13874  1307                     l6436:	
 13875                           
 13876                           ;LED_B1.c: 156: }
 13877                           ;LED_B1.c: 158: }
 13878                           ;LED_B1.c: 159: if (command == 10) {
 13879  1307  0822               	movf	setLED@command,w
 13880  1308  3A0A               	xorlw	10
 13881  1309  1D03               	skipz
 13882  130A  2B1D               	goto	l6444
 13883                           
 13884                           ;LED_B1.c: 160: LED->GO = 0;
 13885  130B  0021               	movlb	1	; select bank1
 13886  130C  0853               	movf	_LED^(0+128),w
 13887  130D  0086               	movwf	6
 13888  130E  3001               	movlw	1	; select bank2/3
 13889  130F  0087               	movwf	7
 13890  1310  1081               	bcf	1,1
 13891                           
 13892                           ;LED_B1.c: 161: LED->Time = 0;
 13893  1311  0A53               	incf	_LED^(0+128),w
 13894  1312  0086               	movwf	6
 13895  1313  3001               	movlw	1	; select bank2/3
 13896  1314  0087               	movwf	7
 13897  1315  3000               	movlw	0
 13898  1316  3FC0               	movwi [0]fsr1
 13899  1317  3FC1               	movwi [1]fsr1
 13900                           
 13901                           ;LED_B1.c: 190: if (led == 99) {
 13902  1318  0020               	movlb	0	; select bank0
 13903  1319  0823               	movf	setLED@led,w
 13904  131A  3A63               	xorlw	99
 13905  131B  1903               	btfsc	3,2
 13906                           
 13907                           ;LED_B1.c: 194: RB5 = 1;
 13908  131C  168D               	bsf	13,5	;volatile
 13909  131D                     l6444:	
 13910                           
 13911                           ;LED_B1.c: 196: }
 13912                           ;LED_B1.c: 198: }
 13913                           ;LED_B1.c: 199: if (command == 11) {
 13914  131D  0822               	movf	setLED@command,w
 13915  131E  3A0B               	xorlw	11
 13916  131F  1D03               	skipz
 13917  1320  0008               	return
 13918                           
 13919                           ;LED_B1.c: 200: LED->GO = 1;
 13920  1321  0021               	movlb	1	; select bank1
 13921  1322  0853               	movf	_LED^(0+128),w
 13922  1323  0086               	movwf	6
 13923  1324  3001               	movlw	1	; select bank2/3
 13924  1325  0087               	movwf	7
 13925  1326  1481               	bsf	1,1
 13926  1327  0008               	return
 13927  1328                     __end_of_setLED:	
 13928                           
 13929                           	psect	text90
 13930  1C16                     __ptext90:	
 13931 ;; *************** function _LedPointSelect *****************
 13932 ;; Defined at:
 13933 ;;		line 7 in file "../src/LED_B1.c"
 13934 ;; Parameters:    Size  Location     Type
 13935 ;;  led             1    wreg     unsigned char 
 13936 ;; Auto vars:     Size  Location     Type
 13937 ;;  led             1    1[BANK0 ] unsigned char 
 13938 ;; Return value:  Size  Location     Type
 13939 ;;		None               void
 13940 ;; Registers used:
 13941 ;;		wreg
 13942 ;; Tracked objects:
 13943 ;;		On entry : 0/0
 13944 ;;		On exit  : 0/0
 13945 ;;		Unchanged: 0/0
 13946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13950 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13951 ;;Total ram usage:        2 bytes
 13952 ;; Hardware stack levels used:    1
 13953 ;; Hardware stack levels required when called:    4
 13954 ;; This function calls:
 13955 ;;		Nothing
 13956 ;; This function is called by:
 13957 ;;		_setLED_Initialization
 13958 ;;		_setLED
 13959 ;;		_setLED_Main
 13960 ;; This function uses a non-reentrant model
 13961 ;;
 13962                           
 13963                           
 13964                           ;psect for function _LedPointSelect
 13965  1C16                     _LedPointSelect:	
 13966                           
 13967                           ;incstack = 0
 13968                           ; Regs used in _LedPointSelect: [wreg]
 13969                           ;LedPointSelect@led stored from wreg
 13970  1C16  0020               	movlb	0	; select bank0
 13971  1C17  00A1               	movwf	LedPointSelect@led
 13972                           
 13973                           ;LED_B1.c: 24: if (led == 99) {
 13974  1C18  0821               	movf	LedPointSelect@led,w
 13975  1C19  3A63               	xorlw	99
 13976  1C1A  1D03               	skipz
 13977  1C1B  0008               	return
 13978                           
 13979                           ;LED_B1.c: 25: LED = &VarErrLED;
 13980  1C1C  30E0               	movlw	_VarErrLED& (0+255)
 13981  1C1D  00A0               	movwf	??_LedPointSelect
 13982  1C1E  0820               	movf	??_LedPointSelect,w
 13983  1C1F  0021               	movlb	1	; select bank1
 13984  1C20  00D3               	movwf	_LED^(0+128)
 13985  1C21  0008               	return
 13986  1C22                     __end_of_LedPointSelect:	
 13987                           
 13988                           	psect	text91
 13989  1E63                     __ptext91:	
 13990 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 13991 ;; Defined at:
 13992 ;;		line 184 in file "../src/Dimmer_B1.c"
 13993 ;; Parameters:    Size  Location     Type
 13994 ;;  lights          1    wreg     unsigned char 
 13995 ;;  command         1    0[BANK0 ] unsigned char 
 13996 ;; Auto vars:     Size  Location     Type
 13997 ;;  lights          1    2[BANK0 ] unsigned char 
 13998 ;; Return value:  Size  Location     Type
 13999 ;;		None               void
 14000 ;; Registers used:
 14001 ;;		wreg, status,2, status,0
 14002 ;; Tracked objects:
 14003 ;;		On entry : 0/0
 14004 ;;		On exit  : 0/0
 14005 ;;		Unchanged: 0/0
 14006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14007 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;Total ram usage:        3 bytes
 14012 ;; Hardware stack levels used:    1
 14013 ;; Hardware stack levels required when called:    4
 14014 ;; This function calls:
 14015 ;;		Nothing
 14016 ;; This function is called by:
 14017 ;;		_setDimmerLights_OnOff
 14018 ;;		_setRFSW_AdjControl
 14019 ;; This function uses a non-reentrant model
 14020 ;;
 14021                           
 14022                           
 14023                           ;psect for function _setDimmerIntr_Dimming_RF
 14024  1E63                     _setDimmerIntr_Dimming_RF:	
 14025                           
 14026                           ;incstack = 0
 14027                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14028                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14029  1E63  0020               	movlb	0	; select bank0
 14030  1E64  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14031                           
 14032                           ;Dimmer_B1.c: 186: if (lights == 1) {
 14033  1E65  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14034  1E66  3A01               	xorlw	1
 14035  1E67  1D03               	skipz
 14036  1E68  0008               	return
 14037                           
 14038                           ;Dimmer_B1.c: 187: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14039  1E69  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14040  1E6A  3A01               	xorlw	1
 14041  1E6B  3000               	movlw	0
 14042  1E6C  1903               	skipnz
 14043  1E6D  3001               	movlw	1
 14044  1E6E  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14045  1E6F  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14046  1E70  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14047  1E71  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14048  1E72  0021               	movlb	1	; select bank1
 14049  1E73  0847               	movf	_DimmerIntr1^(0+128),w
 14050  1E74  0020               	movlb	0	; select bank0
 14051  1E75  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14052  1E76  39BF               	andlw	-65
 14053  1E77  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14054  1E78  0021               	movlb	1	; select bank1
 14055  1E79  00C7               	movwf	_DimmerIntr1^(0+128)
 14056  1E7A  0008               	return
 14057  1E7B                     __end_of_setDimmerIntr_Dimming_RF:	
 14058                           
 14059                           	psect	text92
 14060  1C0A                     __ptext92:	
 14061 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14062 ;; Defined at:
 14063 ;;		line 49 in file "../src/Dimmer_B1.c"
 14064 ;; Parameters:    Size  Location     Type
 14065 ;;  lights          1    wreg     unsigned char 
 14066 ;;  value           1    0[BANK0 ] unsigned char 
 14067 ;; Auto vars:     Size  Location     Type
 14068 ;;  lights          1    2[BANK0 ] unsigned char 
 14069 ;; Return value:  Size  Location     Type
 14070 ;;		None               void
 14071 ;; Registers used:
 14072 ;;		wreg
 14073 ;; Tracked objects:
 14074 ;;		On entry : 0/0
 14075 ;;		On exit  : 0/0
 14076 ;;		Unchanged: 0/0
 14077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14078 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14082 ;;Total ram usage:        3 bytes
 14083 ;; Hardware stack levels used:    1
 14084 ;; Hardware stack levels required when called:    4
 14085 ;; This function calls:
 14086 ;;		Nothing
 14087 ;; This function is called by:
 14088 ;;		_setDimmerLights_OnOff
 14089 ;; This function uses a non-reentrant model
 14090 ;;
 14091                           
 14092                           
 14093                           ;psect for function _setDimmerIntr_DimmingValue
 14094  1C0A                     _setDimmerIntr_DimmingValue:	
 14095                           
 14096                           ;incstack = 0
 14097                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14098                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14099  1C0A  0020               	movlb	0	; select bank0
 14100  1C0B  00A2               	movwf	setDimmerIntr_DimmingValue@lights
 14101                           
 14102                           ;Dimmer_B1.c: 51: if (lights == 1) {
 14103  1C0C  0822               	movf	setDimmerIntr_DimmingValue@lights,w
 14104  1C0D  3A01               	xorlw	1
 14105  1C0E  1D03               	skipz
 14106  1C0F  0008               	return
 14107                           
 14108                           ;Dimmer_B1.c: 52: DimmerIntr1.DimmingValue = value;
 14109  1C10  0820               	movf	setDimmerIntr_DimmingValue@value,w
 14110  1C11  00A1               	movwf	??_setDimmerIntr_DimmingValue
 14111  1C12  0821               	movf	??_setDimmerIntr_DimmingValue,w
 14112  1C13  0021               	movlb	1	; select bank1
 14113  1C14  00CB               	movwf	(_DimmerIntr1^(0+128)+4)
 14114  1C15  0008               	return
 14115  1C16                     __end_of_setDimmerIntr_DimmingValue:	
 14116                           
 14117                           	psect	text93
 14118  1E4B                     __ptext93:	
 14119 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14120 ;; Defined at:
 14121 ;;		line 31 in file "../src/Dimmer_B1.c"
 14122 ;; Parameters:    Size  Location     Type
 14123 ;;  lights          1    wreg     unsigned char 
 14124 ;;  command         1    0[BANK0 ] unsigned char 
 14125 ;; Auto vars:     Size  Location     Type
 14126 ;;  lights          1    2[BANK0 ] unsigned char 
 14127 ;; Return value:  Size  Location     Type
 14128 ;;		None               void
 14129 ;; Registers used:
 14130 ;;		wreg, status,2, status,0
 14131 ;; Tracked objects:
 14132 ;;		On entry : 0/0
 14133 ;;		On exit  : 0/0
 14134 ;;		Unchanged: 0/0
 14135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14136 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14140 ;;Total ram usage:        3 bytes
 14141 ;; Hardware stack levels used:    1
 14142 ;; Hardware stack levels required when called:    4
 14143 ;; This function calls:
 14144 ;;		Nothing
 14145 ;; This function is called by:
 14146 ;;		_setDimmerLights_OnOff
 14147 ;; This function uses a non-reentrant model
 14148 ;;
 14149                           
 14150                           
 14151                           ;psect for function _setDimmerIntr_ControlStatus
 14152  1E4B                     _setDimmerIntr_ControlStatus:	
 14153                           
 14154                           ;incstack = 0
 14155                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14156                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14157  1E4B  0020               	movlb	0	; select bank0
 14158  1E4C  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14159                           
 14160                           ;Dimmer_B1.c: 33: if (lights == 1) {
 14161  1E4D  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14162  1E4E  3A01               	xorlw	1
 14163  1E4F  1D03               	skipz
 14164  1E50  0008               	return
 14165                           
 14166                           ;Dimmer_B1.c: 34: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14167  1E51  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14168  1E52  3A01               	xorlw	1
 14169  1E53  3000               	movlw	0
 14170  1E54  1903               	skipnz
 14171  1E55  3001               	movlw	1
 14172  1E56  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14173  1E57  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14174  1E58  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14175  1E59  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14176  1E5A  0021               	movlb	1	; select bank1
 14177  1E5B  0847               	movf	_DimmerIntr1^(0+128),w
 14178  1E5C  0020               	movlb	0	; select bank0
 14179  1E5D  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14180  1E5E  39F7               	andlw	-9
 14181  1E5F  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14182  1E60  0021               	movlb	1	; select bank1
 14183  1E61  00C7               	movwf	_DimmerIntr1^(0+128)
 14184  1E62  0008               	return
 14185  1E63                     __end_of_setDimmerIntr_ControlStatus:	
 14186                           
 14187                           	psect	text94
 14188  0CAB                     __ptext94:	
 14189 ;; *************** function _setDelayOff_GO *****************
 14190 ;; Defined at:
 14191 ;;		line 87 in file "../src/DelayOff_B1.c"
 14192 ;; Parameters:    Size  Location     Type
 14193 ;;  sw              1    wreg     unsigned char 
 14194 ;;  command         1   69[BANK0 ] unsigned char 
 14195 ;;  value           1   70[BANK0 ] unsigned char 
 14196 ;; Auto vars:     Size  Location     Type
 14197 ;;  sw              1   76[BANK0 ] unsigned char 
 14198 ;;  k               1   75[BANK0 ] unsigned char 
 14199 ;;  j               1   74[BANK0 ] unsigned char 
 14200 ;;  i               1   73[BANK0 ] unsigned char 
 14201 ;; Return value:  Size  Location     Type
 14202 ;;		None               void
 14203 ;; Registers used:
 14204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14205 ;; Tracked objects:
 14206 ;;		On entry : 0/0
 14207 ;;		On exit  : 0/0
 14208 ;;		Unchanged: 0/0
 14209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14210 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14211 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14212 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14213 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;Total ram usage:        8 bytes
 14215 ;; Hardware stack levels used:    1
 14216 ;; Hardware stack levels required when called:    5
 14217 ;; This function calls:
 14218 ;;		_DelayOffPointSelect
 14219 ;;		___bmul
 14220 ;;		_setProductData
 14221 ;; This function is called by:
 14222 ;;		_setDimmerLights_OnOff
 14223 ;;		_setRFSW_Control
 14224 ;; This function uses a non-reentrant model
 14225 ;;
 14226                           
 14227                           
 14228                           ;psect for function _setDelayOff_GO
 14229  0CAB                     _setDelayOff_GO:	
 14230                           
 14231                           ;incstack = 0
 14232                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14233                           ;setDelayOff_GO@sw stored from wreg
 14234  0CAB  0020               	movlb	0	; select bank0
 14235  0CAC  00EC               	movwf	setDelayOff_GO@sw
 14236                           
 14237                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14238  0CAD  086C               	movf	setDelayOff_GO@sw,w
 14239  0CAE  319B  23DA  318C   	fcall	_DelayOffPointSelect
 14240                           
 14241                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14242  0CB1  0020               	movlb	0	; select bank0
 14243  0CB2  0865               	movf	setDelayOff_GO@command,w
 14244  0CB3  3A01               	xorlw	1
 14245  0CB4  3000               	movlw	0
 14246  0CB5  1903               	skipnz
 14247  0CB6  3001               	movlw	1
 14248  0CB7  00E7               	movwf	??_setDelayOff_GO
 14249  0CB8  0021               	movlb	1	; select bank1
 14250  0CB9  0851               	movf	_DelayOff^(0+128),w
 14251  0CBA  0086               	movwf	6
 14252  0CBB  3001               	movlw	1	; select bank2/3
 14253  0CBC  0087               	movwf	7
 14254  0CBD  0020               	movlb	0	; select bank0
 14255  0CBE  0DE7               	rlf	??_setDelayOff_GO,f
 14256  0CBF  0801               	movf	1,w
 14257  0CC0  0667               	xorwf	??_setDelayOff_GO,w
 14258  0CC1  39FD               	andlw	-3
 14259  0CC2  0667               	xorwf	??_setDelayOff_GO,w
 14260  0CC3  0081               	movwf	1
 14261                           
 14262                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14263  0CC4  0021               	movlb	1	; select bank1
 14264  0CC5  0851               	movf	_DelayOff^(0+128),w
 14265  0CC6  3E02               	addlw	2
 14266  0CC7  0086               	movwf	6
 14267  0CC8  3001               	movlw	1	; select bank2/3
 14268  0CC9  0087               	movwf	7
 14269  0CCA  3000               	movlw	0
 14270  0CCB  3FC0               	movwi [0]fsr1
 14271  0CCC  3FC1               	movwi [1]fsr1
 14272                           
 14273                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14274  0CCD  0851               	movf	_DelayOff^(0+128),w
 14275  0CCE  3E04               	addlw	4
 14276  0CCF  0086               	movwf	6
 14277  0CD0  3001               	movlw	1	; select bank2/3
 14278  0CD1  0087               	movwf	7
 14279  0CD2  0181               	clrf	1
 14280                           
 14281                           ;DelayOff_B1.c: 94: if (command == 1) {
 14282  0CD3  0020               	movlb	0	; select bank0
 14283  0CD4  0865               	movf	setDelayOff_GO@command,w
 14284  0CD5  3A01               	xorlw	1
 14285  0CD6  1D03               	skipz
 14286  0CD7  2D2D               	goto	l6046
 14287                           
 14288                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14289  0CD8  3005               	movlw	5
 14290  0CD9  00E7               	movwf	??_setDelayOff_GO
 14291  0CDA  0867               	movf	??_setDelayOff_GO,w
 14292  0CDB  00E9               	movwf	setDelayOff_GO@i
 14293  0CDC  01EA               	clrf	setDelayOff_GO@j
 14294  0CDD  01EB               	clrf	setDelayOff_GO@k
 14295                           
 14296                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14297  0CDE  300F               	movlw	15
 14298  0CDF  0566               	andwf	setDelayOff_GO@value,w
 14299  0CE0  00E7               	movwf	??_setDelayOff_GO
 14300  0CE1  0867               	movf	??_setDelayOff_GO,w
 14301  0CE2  3A05               	xorlw	5
 14302  0CE3  1903               	skipnz
 14303  0CE4  2CE9               	goto	l6032
 14304  0CE5  0866               	movf	setDelayOff_GO@value,w
 14305  0CE6  390F               	andlw	15
 14306  0CE7  1D03               	btfss	3,2
 14307  0CE8  2D19               	goto	l6042
 14308  0CE9                     l6032:	
 14309  0CE9  3031               	movlw	49
 14310  0CEA  0266               	subwf	setDelayOff_GO@value,w
 14311  0CEB  1803               	skipnc
 14312  0CEC  2D19               	goto	l6042
 14313                           
 14314                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14315  0CED  0866               	movf	setDelayOff_GO@value,w
 14316  0CEE  390F               	andlw	15
 14317  0CEF  00E7               	movwf	??_setDelayOff_GO
 14318  0CF0  0867               	movf	??_setDelayOff_GO,w
 14319  0CF1  00EA               	movwf	setDelayOff_GO@j
 14320                           
 14321                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14322  0CF2  0866               	movf	setDelayOff_GO@value,w
 14323  0CF3  00E7               	movwf	??_setDelayOff_GO
 14324  0CF4  3004               	movlw	4
 14325  0CF5                     u5155:	
 14326  0CF5  36E7               	lsrf	??_setDelayOff_GO,f
 14327  0CF6  0B89               	decfsz	9,f
 14328  0CF7  2CF5               	goto	u5155
 14329  0CF8  0867               	movf	??_setDelayOff_GO,w
 14330  0CF9  390F               	andlw	15
 14331  0CFA  00E8               	movwf	??_setDelayOff_GO+1
 14332  0CFB  0868               	movf	??_setDelayOff_GO+1,w
 14333  0CFC  00EB               	movwf	setDelayOff_GO@k
 14334                           
 14335                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14336  0CFD  300A               	movlw	10
 14337  0CFE  00E7               	movwf	??_setDelayOff_GO
 14338  0CFF  0867               	movf	??_setDelayOff_GO,w
 14339  0D00  00A0               	movwf	___bmul@multiplicand
 14340  0D01  086B               	movf	setDelayOff_GO@k,w
 14341  0D02  319D  2510  318C   	fcall	___bmul
 14342  0D05  0020               	movlb	0	; select bank0
 14343  0D06  076A               	addwf	setDelayOff_GO@j,w
 14344  0D07  00E8               	movwf	??_setDelayOff_GO+1
 14345  0D08  0021               	movlb	1	; select bank1
 14346  0D09  0A51               	incf	_DelayOff^(0+128),w
 14347  0D0A  0086               	movwf	6
 14348  0D0B  3001               	movlw	1	; select bank2/3
 14349  0D0C  0087               	movwf	7
 14350  0D0D  0020               	movlb	0	; select bank0
 14351  0D0E  0868               	movf	??_setDelayOff_GO+1,w
 14352  0D0F  0081               	movwf	1
 14353                           
 14354                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14355  0D10  0866               	movf	setDelayOff_GO@value,w
 14356  0D11  00E7               	movwf	??_setDelayOff_GO
 14357  0D12  0867               	movf	??_setDelayOff_GO,w
 14358  0D13  00E2               	movwf	setProductData@value
 14359  0D14  086C               	movf	setDelayOff_GO@sw,w
 14360  0D15  3E1A               	addlw	26
 14361  0D16  319B  23F2         	fcall	_setProductData
 14362                           
 14363                           ;DelayOff_B1.c: 103: } else {
 14364  0D18  0008               	return
 14365  0D19                     l6042:	
 14366                           
 14367                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14368  0D19  3005               	movlw	5
 14369  0D1A  0020               	movlb	0	; select bank0
 14370  0D1B  00E7               	movwf	??_setDelayOff_GO
 14371  0D1C  0021               	movlb	1	; select bank1
 14372  0D1D  0A51               	incf	_DelayOff^(0+128),w
 14373  0D1E  0086               	movwf	6
 14374  0D1F  3001               	movlw	1	; select bank2/3
 14375  0D20  0087               	movwf	7
 14376  0D21  0020               	movlb	0	; select bank0
 14377  0D22  0867               	movf	??_setDelayOff_GO,w
 14378  0D23  0081               	movwf	1
 14379                           
 14380                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14381  0D24  3005               	movlw	5
 14382  0D25  00E7               	movwf	??_setDelayOff_GO
 14383  0D26  0867               	movf	??_setDelayOff_GO,w
 14384  0D27  00E2               	movwf	setProductData@value
 14385  0D28  086C               	movf	setDelayOff_GO@sw,w
 14386  0D29  3E1A               	addlw	26
 14387  0D2A  319B  23F2         	fcall	_setProductData
 14388                           
 14389                           ;DelayOff_B1.c: 106: }
 14390                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14391  0D2C  0008               	return
 14392  0D2D                     l6046:	
 14393  0D2D  0020               	movlb	0	; select bank0
 14394  0D2E  08E5               	movf	setDelayOff_GO@command,f
 14395  0D2F  1D03               	skipz
 14396  0D30  0008               	return
 14397                           
 14398                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14399  0D31  01E2               	clrf	setProductData@value
 14400  0D32  086C               	movf	setDelayOff_GO@sw,w
 14401  0D33  3E1A               	addlw	26
 14402  0D34  319B  23F2         	fcall	_setProductData
 14403  0D36  0008               	return
 14404  0D37                     __end_of_setDelayOff_GO:	
 14405                           
 14406                           	psect	text95
 14407  1D10                     __ptext95:	
 14408 ;; *************** function ___bmul *****************
 14409 ;; Defined at:
 14410 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14411 ;; Parameters:    Size  Location     Type
 14412 ;;  multiplier      1    wreg     unsigned char 
 14413 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14414 ;; Auto vars:     Size  Location     Type
 14415 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14416 ;;  product         1    2[BANK0 ] unsigned char 
 14417 ;; Return value:  Size  Location     Type
 14418 ;;                  1    wreg      unsigned char 
 14419 ;; Registers used:
 14420 ;;		wreg, status,2, status,0
 14421 ;; Tracked objects:
 14422 ;;		On entry : 0/0
 14423 ;;		On exit  : 0/0
 14424 ;;		Unchanged: 0/0
 14425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14426 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14429 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14430 ;;Total ram usage:        4 bytes
 14431 ;; Hardware stack levels used:    1
 14432 ;; Hardware stack levels required when called:    4
 14433 ;; This function calls:
 14434 ;;		Nothing
 14435 ;; This function is called by:
 14436 ;;		_setDelayOff_GO
 14437 ;;		_DelayTimejudge
 14438 ;; This function uses a non-reentrant model
 14439 ;;
 14440                           
 14441                           
 14442                           ;psect for function ___bmul
 14443  1D10                     ___bmul:	
 14444                           
 14445                           ;incstack = 0
 14446                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14447                           ;___bmul@multiplier stored from wreg
 14448  1D10  0020               	movlb	0	; select bank0
 14449  1D11  00A3               	movwf	___bmul@multiplier
 14450  1D12  01A2               	clrf	___bmul@product
 14451  1D13                     l5710:	
 14452  1D13  1C23               	btfss	___bmul@multiplier,0
 14453  1D14  2D19               	goto	l5714
 14454  1D15  0820               	movf	___bmul@multiplicand,w
 14455  1D16  00A1               	movwf	??___bmul
 14456  1D17  0821               	movf	??___bmul,w
 14457  1D18  07A2               	addwf	___bmul@product,f
 14458  1D19                     l5714:	
 14459  1D19  1003               	clrc
 14460  1D1A  0DA0               	rlf	___bmul@multiplicand,f
 14461  1D1B  1003               	clrc
 14462  1D1C  0CA3               	rrf	___bmul@multiplier,f
 14463  1D1D  08A3               	movf	___bmul@multiplier,f
 14464  1D1E  1D03               	skipz
 14465  1D1F  2D13               	goto	l5710
 14466  1D20  0822               	movf	___bmul@product,w
 14467  1D21  0008               	return
 14468  1D22                     __end_of___bmul:	
 14469                           
 14470                           	psect	text96
 14471  1E94                     __ptext96:	
 14472 ;; *************** function _setCmd_Status *****************
 14473 ;; Defined at:
 14474 ;;		line 651 in file "../src/Main_B1.c"
 14475 ;; Parameters:    Size  Location     Type
 14476 ;;  number          1    wreg     unsigned char 
 14477 ;;  cmd             1    0[BANK0 ] unsigned char 
 14478 ;; Auto vars:     Size  Location     Type
 14479 ;;  number          1    2[BANK0 ] unsigned char 
 14480 ;; Return value:  Size  Location     Type
 14481 ;;		None               void
 14482 ;; Registers used:
 14483 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14484 ;; Tracked objects:
 14485 ;;		On entry : 0/0
 14486 ;;		On exit  : 0/0
 14487 ;;		Unchanged: 0/0
 14488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14489 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;Total ram usage:        3 bytes
 14494 ;; Hardware stack levels used:    1
 14495 ;; Hardware stack levels required when called:    4
 14496 ;; This function calls:
 14497 ;;		Nothing
 14498 ;; This function is called by:
 14499 ;;		_setDimmerLights_OnOff
 14500 ;;		_setControl_Lights_Table
 14501 ;; This function uses a non-reentrant model
 14502 ;;
 14503                           
 14504                           
 14505                           ;psect for function _setCmd_Status
 14506  1E94                     _setCmd_Status:	
 14507                           
 14508                           ;incstack = 0
 14509                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14510                           ;setCmd_Status@number stored from wreg
 14511  1E94  0020               	movlb	0	; select bank0
 14512  1E95  00A2               	movwf	setCmd_Status@number
 14513                           
 14514                           ;Main_B1.c: 652: switch (number) {
 14515  1E96  2EA6               	goto	l6212
 14516  1E97                     l6208:	
 14517                           ;Main_B1.c: 653: case 1:
 14518                           
 14519                           
 14520                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14521  1E97  0820               	movf	setCmd_Status@cmd,w
 14522  1E98  3A01               	xorlw	1
 14523  1E99  3000               	movlw	0
 14524  1E9A  1903               	skipnz
 14525  1E9B  3001               	movlw	1
 14526  1E9C  00A1               	movwf	??_setCmd_Status
 14527  1E9D  0021               	movlb	1	; select bank1
 14528  1E9E  0850               	movf	_Cmd^(0+128),w
 14529  1E9F  0020               	movlb	0	; select bank0
 14530  1EA0  0621               	xorwf	??_setCmd_Status,w
 14531  1EA1  39FE               	andlw	-2
 14532  1EA2  0621               	xorwf	??_setCmd_Status,w
 14533  1EA3  0021               	movlb	1	; select bank1
 14534  1EA4  00D0               	movwf	_Cmd^(0+128)
 14535                           
 14536                           ;Main_B1.c: 656: }
 14537                           
 14538                           ;Main_B1.c: 655: break;
 14539  1EA5  0008               	return
 14540  1EA6                     l6212:	
 14541  1EA6  0020               	movlb	0	; select bank0
 14542  1EA7  0822               	movf	setCmd_Status@number,w
 14543                           
 14544                           ; Switch size 1, requested type "space"
 14545                           ; Number of cases is 1, Range of values is 1 to 1
 14546                           ; switch strategies available:
 14547                           ; Name         Instructions Cycles
 14548                           ; simple_byte            4     3 (average)
 14549                           ; direct_byte           11     9 (fixed)
 14550                           ; jumptable            263     9 (fixed)
 14551                           ;	Chosen strategy is simple_byte
 14552  1EA8  3A01               	xorlw	1	; case 1
 14553  1EA9  1903               	skipnz
 14554  1EAA  2E97               	goto	l6208
 14555  1EAB  2EAC               	goto	l1487
 14556  1EAC                     l1487:	
 14557  1EAC  0008               	return
 14558  1EAD                     __end_of_setCmd_Status:	
 14559                           
 14560                           	psect	text97
 14561  1BB0                     __ptext97:	
 14562 ;; *************** function _getMain_All_LightsStatus *****************
 14563 ;; Defined at:
 14564 ;;		line 373 in file "../src/Main_B1.c"
 14565 ;; Parameters:    Size  Location     Type
 14566 ;;		None
 14567 ;; Auto vars:     Size  Location     Type
 14568 ;;  status          1    0[BANK0 ] unsigned char 
 14569 ;; Return value:  Size  Location     Type
 14570 ;;                  1    wreg      unsigned char 
 14571 ;; Registers used:
 14572 ;;		wreg, status,2
 14573 ;; Tracked objects:
 14574 ;;		On entry : 0/0
 14575 ;;		On exit  : 0/0
 14576 ;;		Unchanged: 0/0
 14577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;Total ram usage:        1 bytes
 14583 ;; Hardware stack levels used:    1
 14584 ;; Hardware stack levels required when called:    4
 14585 ;; This function calls:
 14586 ;;		Nothing
 14587 ;; This function is called by:
 14588 ;;		_DimmerLights_Main
 14589 ;;		_setDimmerLights_Main
 14590 ;;		_setDimmerLights_OnOff
 14591 ;;		_Flash_Memory_Main
 14592 ;;		_Exception_Main
 14593 ;;		_Load_Main
 14594 ;;		_setTemp_Main
 14595 ;;		_setControl_Lights_Table
 14596 ;; This function uses a non-reentrant model
 14597 ;;
 14598                           
 14599                           
 14600                           ;psect for function _getMain_All_LightsStatus
 14601  1BB0                     _getMain_All_LightsStatus:	
 14602                           
 14603                           ;Main_B1.c: 374: char status = 0;
 14604                           
 14605                           ;incstack = 0
 14606                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14607  1BB0  0020               	movlb	0	; select bank0
 14608  1BB1  01A0               	clrf	getMain_All_LightsStatus@status
 14609                           
 14610                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14611  1BB2  3000               	movlw	0
 14612  1BB3  0023               	movlb	3	; select bank3
 14613  1BB4  1854               	btfsc	(_DimmerLights1^(0+384)+1),0
 14614  1BB5  3001               	movlw	1
 14615  1BB6  0020               	movlb	0	; select bank0
 14616  1BB7  00A0               	movwf	getMain_All_LightsStatus@status
 14617                           
 14618                           ;Main_B1.c: 420: return status;
 14619  1BB8  0820               	movf	getMain_All_LightsStatus@status,w
 14620  1BB9  0008               	return
 14621  1BBA                     __end_of_getMain_All_LightsStatus:	
 14622                           
 14623                           	psect	text98
 14624  179B                     __ptext98:	
 14625 ;; *************** function _getDimmerLights_PercentToValue *****************
 14626 ;; Defined at:
 14627 ;;		line 1039 in file "../src/Dimmer_B1.c"
 14628 ;; Parameters:    Size  Location     Type
 14629 ;;  value           1    wreg     unsigned char 
 14630 ;; Auto vars:     Size  Location     Type
 14631 ;;  value           1   62[BANK0 ] unsigned char 
 14632 ;;  i               3   63[BANK0 ] float 
 14633 ;; Return value:  Size  Location     Type
 14634 ;;                  1    wreg      unsigned char 
 14635 ;; Registers used:
 14636 ;;		wreg, status,2, status,0, pclath, cstack
 14637 ;; Tracked objects:
 14638 ;;		On entry : 0/0
 14639 ;;		On exit  : 0/0
 14640 ;;		Unchanged: 0/0
 14641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14644 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14645 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14646 ;;Total ram usage:        6 bytes
 14647 ;; Hardware stack levels used:    1
 14648 ;; Hardware stack levels required when called:    6
 14649 ;; This function calls:
 14650 ;;		___awtoft
 14651 ;;		___ftadd
 14652 ;;		___ftdiv
 14653 ;;		___ftmul
 14654 ;;		___ftneg
 14655 ;;		___fttol
 14656 ;; This function is called by:
 14657 ;;		_setDimmerLights_OnOff
 14658 ;;		_setRFSW_AdjControl
 14659 ;; This function uses a non-reentrant model
 14660 ;;
 14661                           
 14662                           
 14663                           ;psect for function _getDimmerLights_PercentToValue
 14664  179B                     _getDimmerLights_PercentToValue:	
 14665                           
 14666                           ;incstack = 0
 14667                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14668                           ;getDimmerLights_PercentToValue@value stored from wreg
 14669  179B  0020               	movlb	0	; select bank0
 14670  179C  00DE               	movwf	getDimmerLights_PercentToValue@value
 14671                           
 14672                           ;Dimmer_B1.c: 1047: float i = ((char)(60*0.8)) - ((char)(30*0.8));
 14673  179D  3000               	movlw	0
 14674  179E  00DF               	movwf	getDimmerLights_PercentToValue@i
 14675  179F  30C0               	movlw	192
 14676  17A0  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 14677  17A1  3041               	movlw	65
 14678  17A2  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 14679                           
 14680                           ;Dimmer_B1.c: 1048: i /= 100;
 14681  17A3  3000               	movlw	0
 14682  17A4  00AE               	movwf	___ftdiv@f2
 14683  17A5  30C8               	movlw	200
 14684  17A6  00AF               	movwf	___ftdiv@f2+1
 14685  17A7  3042               	movlw	66
 14686  17A8  00B0               	movwf	___ftdiv@f2+2
 14687  17A9  085F               	movf	getDimmerLights_PercentToValue@i,w
 14688  17AA  00B1               	movwf	___ftdiv@f1
 14689  17AB  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 14690  17AC  00B2               	movwf	___ftdiv@f1+1
 14691  17AD  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 14692  17AE  00B3               	movwf	___ftdiv@f1+2
 14693  17AF  318D  2537  3197   	fcall	___ftdiv
 14694  17B2  0020               	movlb	0	; select bank0
 14695  17B3  082E               	movf	?___ftdiv,w
 14696  17B4  00DF               	movwf	getDimmerLights_PercentToValue@i
 14697  17B5  082F               	movf	?___ftdiv+1,w
 14698  17B6  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 14699  17B7  0830               	movf	?___ftdiv+2,w
 14700  17B8  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 14701                           
 14702                           ;Dimmer_B1.c: 1050: return (char) (((char)(60*0.8)) - ((100 - value) * i));
 14703  17B9  085E               	movf	getDimmerLights_PercentToValue@value,w
 14704  17BA  00DC               	movwf	??_getDimmerLights_PercentToValue
 14705  17BB  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 14706  17BC  09DC               	comf	??_getDimmerLights_PercentToValue,f
 14707  17BD  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 14708  17BE  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 14709  17BF  1903               	skipnz
 14710  17C0  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 14711  17C1  085C               	movf	??_getDimmerLights_PercentToValue,w
 14712  17C2  3E64               	addlw	100
 14713  17C3  00A8               	movwf	___awtoft@c
 14714  17C4  3000               	movlw	0
 14715  17C5  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14716  17C6  00A9               	movwf	___awtoft@c+1
 14717  17C7  3190  2091  3197   	fcall	___awtoft
 14718  17CA  0020               	movlb	0	; select bank0
 14719  17CB  0828               	movf	?___awtoft,w
 14720  17CC  00B1               	movwf	___ftmul@f2
 14721  17CD  0829               	movf	?___awtoft+1,w
 14722  17CE  00B2               	movwf	___ftmul@f2+1
 14723  17CF  082A               	movf	?___awtoft+2,w
 14724  17D0  00B3               	movwf	___ftmul@f2+2
 14725  17D1  085F               	movf	getDimmerLights_PercentToValue@i,w
 14726  17D2  00AE               	movwf	___ftmul@f1
 14727  17D3  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 14728  17D4  00AF               	movwf	___ftmul@f1+1
 14729  17D5  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 14730  17D6  00B0               	movwf	___ftmul@f1+2
 14731  17D7  318E  2691  3197   	fcall	___ftmul
 14732  17DA  0020               	movlb	0	; select bank0
 14733  17DB  082E               	movf	?___ftmul,w
 14734  17DC  00BE               	movwf	___ftneg@f1
 14735  17DD  082F               	movf	?___ftmul+1,w
 14736  17DE  00BF               	movwf	___ftneg@f1+1
 14737  17DF  0830               	movf	?___ftmul+2,w
 14738  17E0  00C0               	movwf	___ftneg@f1+2
 14739  17E1  319B  239E  3197   	fcall	___ftneg
 14740  17E4  0020               	movlb	0	; select bank0
 14741  17E5  083E               	movf	?___ftneg,w
 14742  17E6  00C4               	movwf	___ftadd@f2
 14743  17E7  083F               	movf	?___ftneg+1,w
 14744  17E8  00C5               	movwf	___ftadd@f2+1
 14745  17E9  0840               	movf	?___ftneg+2,w
 14746  17EA  00C6               	movwf	___ftadd@f2+2
 14747  17EB  3000               	movlw	0
 14748  17EC  00C1               	movwf	___ftadd@f1
 14749  17ED  3040               	movlw	64
 14750  17EE  00C2               	movwf	___ftadd@f1+1
 14751  17EF  3042               	movlw	66
 14752  17F0  00C3               	movwf	___ftadd@f1+2
 14753  17F1  3183  2382  3197   	fcall	___ftadd
 14754  17F4  0020               	movlb	0	; select bank0
 14755  17F5  0841               	movf	?___ftadd,w
 14756  17F6  00CE               	movwf	___fttol@f1
 14757  17F7  0842               	movf	?___ftadd+1,w
 14758  17F8  00CF               	movwf	___fttol@f1+1
 14759  17F9  0843               	movf	?___ftadd+2,w
 14760  17FA  00D0               	movwf	___fttol@f1+2
 14761  17FB  318C  2424         	fcall	___fttol
 14762  17FD  0020               	movlb	0	; select bank0
 14763  17FE  084E               	movf	?___fttol,w
 14764  17FF  0008               	return
 14765  1800                     __end_of_getDimmerLights_PercentToValue:	
 14766                           
 14767                           	psect	text99
 14768  0E91                     __ptext99:	
 14769 ;; *************** function ___ftmul *****************
 14770 ;; Defined at:
 14771 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14772 ;; Parameters:    Size  Location     Type
 14773 ;;  f1              3   14[BANK0 ] float 
 14774 ;;  f2              3   17[BANK0 ] float 
 14775 ;; Auto vars:     Size  Location     Type
 14776 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 14777 ;;  sign            1   29[BANK0 ] unsigned char 
 14778 ;;  cntr            1   28[BANK0 ] unsigned char 
 14779 ;;  exp             1   24[BANK0 ] unsigned char 
 14780 ;; Return value:  Size  Location     Type
 14781 ;;                  3   14[BANK0 ] float 
 14782 ;; Registers used:
 14783 ;;		wreg, status,2, status,0, pclath, cstack
 14784 ;; Tracked objects:
 14785 ;;		On entry : 0/0
 14786 ;;		On exit  : 0/0
 14787 ;;		Unchanged: 0/0
 14788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14789 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14790 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14791 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14792 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14793 ;;Total ram usage:       16 bytes
 14794 ;; Hardware stack levels used:    1
 14795 ;; Hardware stack levels required when called:    5
 14796 ;; This function calls:
 14797 ;;		___ftpack
 14798 ;; This function is called by:
 14799 ;;		_getDimmerLights_PercentToValue
 14800 ;; This function uses a non-reentrant model
 14801 ;;
 14802                           
 14803                           
 14804                           ;psect for function ___ftmul
 14805  0E91                     ___ftmul:	
 14806                           
 14807                           ;incstack = 0
 14808                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14809  0E91  0020               	movlb	0	; select bank0
 14810  0E92  082E               	movf	___ftmul@f1,w
 14811  0E93  00B4               	movwf	??___ftmul
 14812  0E94  082F               	movf	___ftmul@f1+1,w
 14813  0E95  00B5               	movwf	??___ftmul+1
 14814  0E96  0830               	movf	___ftmul@f1+2,w
 14815  0E97  00B6               	movwf	??___ftmul+2
 14816  0E98  1003               	clrc
 14817  0E99  0D35               	rlf	??___ftmul+1,w
 14818  0E9A  0D36               	rlf	??___ftmul+2,w
 14819  0E9B  00B7               	movwf	??___ftmul+3
 14820  0E9C  0837               	movf	??___ftmul+3,w
 14821  0E9D  00B8               	movwf	___ftmul@exp
 14822  0E9E  08B8               	movf	___ftmul@exp,f
 14823  0E9F  1D03               	skipz
 14824  0EA0  2EA8               	goto	l5856
 14825  0EA1  3000               	movlw	0
 14826  0EA2  00AE               	movwf	?___ftmul
 14827  0EA3  3000               	movlw	0
 14828  0EA4  00AF               	movwf	?___ftmul+1
 14829  0EA5  3000               	movlw	0
 14830  0EA6  00B0               	movwf	?___ftmul+2
 14831  0EA7  0008               	return
 14832  0EA8                     l5856:	
 14833  0EA8  0831               	movf	___ftmul@f2,w
 14834  0EA9  00B4               	movwf	??___ftmul
 14835  0EAA  0832               	movf	___ftmul@f2+1,w
 14836  0EAB  00B5               	movwf	??___ftmul+1
 14837  0EAC  0833               	movf	___ftmul@f2+2,w
 14838  0EAD  00B6               	movwf	??___ftmul+2
 14839  0EAE  1003               	clrc
 14840  0EAF  0D35               	rlf	??___ftmul+1,w
 14841  0EB0  0D36               	rlf	??___ftmul+2,w
 14842  0EB1  00B7               	movwf	??___ftmul+3
 14843  0EB2  0837               	movf	??___ftmul+3,w
 14844  0EB3  00BD               	movwf	___ftmul@sign
 14845  0EB4  08BD               	movf	___ftmul@sign,f
 14846  0EB5  1D03               	skipz
 14847  0EB6  2EBE               	goto	l5862
 14848  0EB7  3000               	movlw	0
 14849  0EB8  00AE               	movwf	?___ftmul
 14850  0EB9  3000               	movlw	0
 14851  0EBA  00AF               	movwf	?___ftmul+1
 14852  0EBB  3000               	movlw	0
 14853  0EBC  00B0               	movwf	?___ftmul+2
 14854  0EBD  0008               	return
 14855  0EBE                     l5862:	
 14856  0EBE  083D               	movf	___ftmul@sign,w
 14857  0EBF  3E7B               	addlw	123
 14858  0EC0  00B4               	movwf	??___ftmul
 14859  0EC1  0834               	movf	??___ftmul,w
 14860  0EC2  07B8               	addwf	___ftmul@exp,f
 14861  0EC3  082E               	movf	___ftmul@f1,w
 14862  0EC4  00B4               	movwf	??___ftmul
 14863  0EC5  082F               	movf	___ftmul@f1+1,w
 14864  0EC6  00B5               	movwf	??___ftmul+1
 14865  0EC7  0830               	movf	___ftmul@f1+2,w
 14866  0EC8  00B6               	movwf	??___ftmul+2
 14867  0EC9  3010               	movlw	16
 14868  0ECA                     u4815:	
 14869  0ECA  36B6               	lsrf	??___ftmul+2,f
 14870  0ECB  0CB5               	rrf	??___ftmul+1,f
 14871  0ECC  0CB4               	rrf	??___ftmul,f
 14872  0ECD  0B89               	decfsz	9,f
 14873  0ECE  2ECA               	goto	u4815
 14874  0ECF  0834               	movf	??___ftmul,w
 14875  0ED0  00B7               	movwf	??___ftmul+3
 14876  0ED1  0837               	movf	??___ftmul+3,w
 14877  0ED2  00BD               	movwf	___ftmul@sign
 14878  0ED3  0831               	movf	___ftmul@f2,w
 14879  0ED4  00B4               	movwf	??___ftmul
 14880  0ED5  0832               	movf	___ftmul@f2+1,w
 14881  0ED6  00B5               	movwf	??___ftmul+1
 14882  0ED7  0833               	movf	___ftmul@f2+2,w
 14883  0ED8  00B6               	movwf	??___ftmul+2
 14884  0ED9  3010               	movlw	16
 14885  0EDA                     u4825:	
 14886  0EDA  36B6               	lsrf	??___ftmul+2,f
 14887  0EDB  0CB5               	rrf	??___ftmul+1,f
 14888  0EDC  0CB4               	rrf	??___ftmul,f
 14889  0EDD  0B89               	decfsz	9,f
 14890  0EDE  2EDA               	goto	u4825
 14891  0EDF  0834               	movf	??___ftmul,w
 14892  0EE0  00B7               	movwf	??___ftmul+3
 14893  0EE1  0837               	movf	??___ftmul+3,w
 14894  0EE2  06BD               	xorwf	___ftmul@sign,f
 14895  0EE3  3080               	movlw	128
 14896  0EE4  00B4               	movwf	??___ftmul
 14897  0EE5  0834               	movf	??___ftmul,w
 14898  0EE6  05BD               	andwf	___ftmul@sign,f
 14899  0EE7  17AF               	bsf	___ftmul@f1+1,7
 14900  0EE8  17B2               	bsf	___ftmul@f2+1,7
 14901  0EE9  30FF               	movlw	255
 14902  0EEA  05B1               	andwf	___ftmul@f2,f
 14903  0EEB  30FF               	movlw	255
 14904  0EEC  05B2               	andwf	___ftmul@f2+1,f
 14905  0EED  3000               	movlw	0
 14906  0EEE  05B3               	andwf	___ftmul@f2+2,f
 14907  0EEF  3000               	movlw	0
 14908  0EF0  00B9               	movwf	___ftmul@f3_as_product
 14909  0EF1  3000               	movlw	0
 14910  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
 14911  0EF3  3000               	movlw	0
 14912  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
 14913  0EF5  3007               	movlw	7
 14914  0EF6  00B4               	movwf	??___ftmul
 14915  0EF7  0834               	movf	??___ftmul,w
 14916  0EF8  00BC               	movwf	___ftmul@cntr
 14917  0EF9                     l5874:	
 14918  0EF9  1C2E               	btfss	___ftmul@f1,0
 14919  0EFA  2F01               	goto	l5878
 14920  0EFB  0831               	movf	___ftmul@f2,w
 14921  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
 14922  0EFD  0832               	movf	___ftmul@f2+1,w
 14923  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 14924  0EFF  0833               	movf	___ftmul@f2+2,w
 14925  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 14926  0F01                     l5878:	
 14927  0F01  3001               	movlw	1
 14928  0F02                     u4845:	
 14929  0F02  36B0               	lsrf	___ftmul@f1+2,f
 14930  0F03  0CAF               	rrf	___ftmul@f1+1,f
 14931  0F04  0CAE               	rrf	___ftmul@f1,f
 14932  0F05  0B89               	decfsz	9,f
 14933  0F06  2F02               	goto	u4845
 14934  0F07  3001               	movlw	1
 14935  0F08                     u4855:	
 14936  0F08  35B1               	lslf	___ftmul@f2,f
 14937  0F09  0DB2               	rlf	___ftmul@f2+1,f
 14938  0F0A  0DB3               	rlf	___ftmul@f2+2,f
 14939  0F0B  0B89               	decfsz	9,f
 14940  0F0C  2F08               	goto	u4855
 14941  0F0D  3001               	movlw	1
 14942  0F0E  02BC               	subwf	___ftmul@cntr,f
 14943  0F0F  1D03               	btfss	3,2
 14944  0F10  2EF9               	goto	l5874
 14945  0F11  3009               	movlw	9
 14946  0F12  00B4               	movwf	??___ftmul
 14947  0F13  0834               	movf	??___ftmul,w
 14948  0F14  00BC               	movwf	___ftmul@cntr
 14949  0F15                     l5886:	
 14950  0F15  1C2E               	btfss	___ftmul@f1,0
 14951  0F16  2F1D               	goto	l5890
 14952  0F17  0831               	movf	___ftmul@f2,w
 14953  0F18  07B9               	addwf	___ftmul@f3_as_product,f
 14954  0F19  0832               	movf	___ftmul@f2+1,w
 14955  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 14956  0F1B  0833               	movf	___ftmul@f2+2,w
 14957  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 14958  0F1D                     l5890:	
 14959  0F1D  3001               	movlw	1
 14960  0F1E                     u4885:	
 14961  0F1E  36B0               	lsrf	___ftmul@f1+2,f
 14962  0F1F  0CAF               	rrf	___ftmul@f1+1,f
 14963  0F20  0CAE               	rrf	___ftmul@f1,f
 14964  0F21  0B89               	decfsz	9,f
 14965  0F22  2F1E               	goto	u4885
 14966  0F23  3001               	movlw	1
 14967  0F24                     u4895:	
 14968  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
 14969  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
 14970  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
 14971  0F27  0B89               	decfsz	9,f
 14972  0F28  2F24               	goto	u4895
 14973  0F29  3001               	movlw	1
 14974  0F2A  02BC               	subwf	___ftmul@cntr,f
 14975  0F2B  1D03               	btfss	3,2
 14976  0F2C  2F15               	goto	l5886
 14977  0F2D  0839               	movf	___ftmul@f3_as_product,w
 14978  0F2E  00A0               	movwf	___ftpack@arg
 14979  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
 14980  0F30  00A1               	movwf	___ftpack@arg+1
 14981  0F31  083B               	movf	___ftmul@f3_as_product+2,w
 14982  0F32  00A2               	movwf	___ftpack@arg+2
 14983  0F33  0838               	movf	___ftmul@exp,w
 14984  0F34  00B4               	movwf	??___ftmul
 14985  0F35  0834               	movf	??___ftmul,w
 14986  0F36  00A3               	movwf	___ftpack@exp
 14987  0F37  083D               	movf	___ftmul@sign,w
 14988  0F38  00B5               	movwf	??___ftmul+1
 14989  0F39  0835               	movf	??___ftmul+1,w
 14990  0F3A  00A4               	movwf	___ftpack@sign
 14991  0F3B  3196  2670         	fcall	___ftpack
 14992  0F3D  0020               	movlb	0	; select bank0
 14993  0F3E  0820               	movf	?___ftpack,w
 14994  0F3F  00AE               	movwf	?___ftmul
 14995  0F40  0821               	movf	?___ftpack+1,w
 14996  0F41  00AF               	movwf	?___ftmul+1
 14997  0F42  0822               	movf	?___ftpack+2,w
 14998  0F43  00B0               	movwf	?___ftmul+2
 14999  0F44  0008               	return
 15000  0F45                     __end_of___ftmul:	
 15001                           
 15002                           	psect	text100
 15003  1CBA                     __ptext100:	
 15004 ;; *************** function _getDelayOff_GO *****************
 15005 ;; Defined at:
 15006 ;;		line 114 in file "../src/DelayOff_B1.c"
 15007 ;; Parameters:    Size  Location     Type
 15008 ;;  sw              1    wreg     unsigned char 
 15009 ;; Auto vars:     Size  Location     Type
 15010 ;;  sw              1    2[BANK0 ] unsigned char 
 15011 ;;  go              1    3[BANK0 ] unsigned char 
 15012 ;; Return value:  Size  Location     Type
 15013 ;;                  1    wreg      unsigned char 
 15014 ;; Registers used:
 15015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15016 ;; Tracked objects:
 15017 ;;		On entry : 0/0
 15018 ;;		On exit  : 0/0
 15019 ;;		Unchanged: 0/0
 15020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;Total ram usage:        2 bytes
 15026 ;; Hardware stack levels used:    1
 15027 ;; Hardware stack levels required when called:    5
 15028 ;; This function calls:
 15029 ;;		_DelayOffPointSelect
 15030 ;; This function is called by:
 15031 ;;		_setDimmerLights_OnOff
 15032 ;; This function uses a non-reentrant model
 15033 ;;
 15034                           
 15035                           
 15036                           ;psect for function _getDelayOff_GO
 15037  1CBA                     _getDelayOff_GO:	
 15038                           
 15039                           ;incstack = 0
 15040                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15041                           ;getDelayOff_GO@sw stored from wreg
 15042  1CBA  0020               	movlb	0	; select bank0
 15043  1CBB  00A2               	movwf	getDelayOff_GO@sw
 15044                           
 15045                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15046  1CBC  0822               	movf	getDelayOff_GO@sw,w
 15047  1CBD  319B  23DA         	fcall	_DelayOffPointSelect
 15048                           
 15049                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15050  1CBF  0021               	movlb	1	; select bank1
 15051  1CC0  0851               	movf	_DelayOff^(0+128),w
 15052  1CC1  0086               	movwf	6
 15053  1CC2  3001               	movlw	1	; select bank2/3
 15054  1CC3  0087               	movwf	7
 15055  1CC4  3000               	movlw	0
 15056  1CC5  1881               	btfsc	1,1
 15057  1CC6  3001               	movlw	1
 15058  1CC7  0020               	movlb	0	; select bank0
 15059  1CC8  00A3               	movwf	getDelayOff_GO@go
 15060                           
 15061                           ;DelayOff_B1.c: 117: return go;
 15062  1CC9  0823               	movf	getDelayOff_GO@go,w
 15063  1CCA  0008               	return
 15064  1CCB                     __end_of_getDelayOff_GO:	
 15065                           
 15066                           	psect	text101
 15067  1CFE                     __ptext101:	
 15068 ;; *************** function _getCmd_Status *****************
 15069 ;; Defined at:
 15070 ;;		line 659 in file "../src/Main_B1.c"
 15071 ;; Parameters:    Size  Location     Type
 15072 ;;  number          1    wreg     unsigned char 
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;  number          1    0[BANK0 ] unsigned char 
 15075 ;;  cmd             1    1[BANK0 ] unsigned char 
 15076 ;; Return value:  Size  Location     Type
 15077 ;;                  1    wreg      unsigned char 
 15078 ;; Registers used:
 15079 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15080 ;; Tracked objects:
 15081 ;;		On entry : 0/0
 15082 ;;		On exit  : 0/0
 15083 ;;		Unchanged: 0/0
 15084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;Total ram usage:        2 bytes
 15090 ;; Hardware stack levels used:    1
 15091 ;; Hardware stack levels required when called:    4
 15092 ;; This function calls:
 15093 ;;		Nothing
 15094 ;; This function is called by:
 15095 ;;		_setDimmerLights_OnOff
 15096 ;; This function uses a non-reentrant model
 15097 ;;
 15098                           
 15099                           
 15100                           ;psect for function _getCmd_Status
 15101  1CFE                     _getCmd_Status:	
 15102                           
 15103                           ;incstack = 0
 15104                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15105                           ;getCmd_Status@number stored from wreg
 15106  1CFE  0020               	movlb	0	; select bank0
 15107  1CFF  00A0               	movwf	getCmd_Status@number
 15108                           
 15109                           ;Main_B1.c: 660: char cmd = 0;
 15110  1D00  01A1               	clrf	getCmd_Status@cmd
 15111                           
 15112                           ;Main_B1.c: 661: switch (number) {
 15113  1D01  2D09               	goto	l6462
 15114  1D02                     l6458:	
 15115                           ;Main_B1.c: 662: case 1:
 15116                           
 15117                           
 15118                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15119  1D02  3000               	movlw	0
 15120  1D03  0021               	movlb	1	; select bank1
 15121  1D04  1850               	btfsc	_Cmd^(0+128),0
 15122  1D05  3001               	movlw	1
 15123  1D06  0020               	movlb	0	; select bank0
 15124  1D07  00A1               	movwf	getCmd_Status@cmd
 15125                           
 15126                           ;Main_B1.c: 665: }
 15127                           
 15128                           ;Main_B1.c: 664: break;
 15129  1D08  2D0E               	goto	l6464
 15130  1D09                     l6462:	
 15131  1D09  0820               	movf	getCmd_Status@number,w
 15132                           
 15133                           ; Switch size 1, requested type "space"
 15134                           ; Number of cases is 1, Range of values is 1 to 1
 15135                           ; switch strategies available:
 15136                           ; Name         Instructions Cycles
 15137                           ; simple_byte            4     3 (average)
 15138                           ; direct_byte           11     9 (fixed)
 15139                           ; jumptable            263     9 (fixed)
 15140                           ;	Chosen strategy is simple_byte
 15141  1D0A  3A01               	xorlw	1	; case 1
 15142  1D0B  1903               	skipnz
 15143  1D0C  2D02               	goto	l6458
 15144  1D0D  2D0E               	goto	l6464
 15145  1D0E                     l6464:	
 15146                           
 15147                           ;Main_B1.c: 666: return cmd;
 15148  1D0E  0821               	movf	getCmd_Status@cmd,w
 15149  1D0F  0008               	return
 15150  1D10                     __end_of_getCmd_Status:	
 15151                           
 15152                           	psect	text102
 15153  1472                     __ptext102:	
 15154 ;; *************** function _setDimmerLights_Dimming *****************
 15155 ;; Defined at:
 15156 ;;		line 883 in file "../src/Dimmer_B1.c"
 15157 ;; Parameters:    Size  Location     Type
 15158 ;;  lights          1    wreg     unsigned char 
 15159 ;;  status          1   74[BANK0 ] unsigned char 
 15160 ;; Auto vars:     Size  Location     Type
 15161 ;;  lights          1   76[BANK0 ] unsigned char 
 15162 ;; Return value:  Size  Location     Type
 15163 ;;		None               void
 15164 ;; Registers used:
 15165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15166 ;; Tracked objects:
 15167 ;;		On entry : 0/0
 15168 ;;		On exit  : 0/0
 15169 ;;		Unchanged: 0/0
 15170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15171 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15174 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;Total ram usage:        3 bytes
 15176 ;; Hardware stack levels used:    1
 15177 ;; Hardware stack levels required when called:    7
 15178 ;; This function calls:
 15179 ;;		_getDimmerIntr_DimmingValue
 15180 ;;		_getDimmerLights_ValueToPercent
 15181 ;;		_setBuz
 15182 ;;		_setDimmerIntr_Dimming_Sw
 15183 ;;		_setDimmerIntr_MaxmumValue
 15184 ;;		_setDimmerLights_Line
 15185 ;;		_setProductData
 15186 ;;		_setRF_DimmerLights
 15187 ;;		_setRF_TransceiveGO
 15188 ;;		_setTxData
 15189 ;; This function is called by:
 15190 ;;		_setDimmerLights_Main
 15191 ;; This function uses a non-reentrant model
 15192 ;;
 15193                           
 15194                           
 15195                           ;psect for function _setDimmerLights_Dimming
 15196  1472                     _setDimmerLights_Dimming:	
 15197                           
 15198                           ;incstack = 0
 15199                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15200                           ;setDimmerLights_Dimming@lights stored from wreg
 15201  1472  0020               	movlb	0	; select bank0
 15202  1473  00EC               	movwf	setDimmerLights_Dimming@lights
 15203                           
 15204                           ;Dimmer_B1.c: 884: if (status == 1) {
 15205  1474  086A               	movf	setDimmerLights_Dimming@status,w
 15206  1475  3A01               	xorlw	1
 15207  1476  1D03               	skipz
 15208  1477  2C8B               	goto	l6700
 15209                           
 15210                           ;Dimmer_B1.c: 885: setDimmerIntr_Dimming_Sw(lights, 1);
 15211  1478  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15212  1479  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15213  147A  086C               	movf	setDimmerLights_Dimming@lights,w
 15214  147B  319E  2635  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15215                           
 15216                           ;Dimmer_B1.c: 888: setRF_TransceiveGO(0);
 15217  147E  3000               	movlw	0
 15218  147F  319D  2558  3194   	fcall	_setRF_TransceiveGO
 15219                           
 15220                           ;Dimmer_B1.c: 890: setBuz(1, 100);
 15221  1482  3064               	movlw	100
 15222  1483  0020               	movlb	0	; select bank0
 15223  1484  00A9               	movwf	setBuz@time
 15224  1485  3000               	movlw	0
 15225  1486  00AA               	movwf	setBuz@time+1
 15226  1487  3001               	movlw	1
 15227  1488  3195  25BC         	fcall	_setBuz
 15228                           
 15229                           ;Dimmer_B1.c: 891: } else if (status == 0) {
 15230  148A  0008               	return
 15231  148B                     l6700:	
 15232  148B  0020               	movlb	0	; select bank0
 15233  148C  08EA               	movf	setDimmerLights_Dimming@status,f
 15234  148D  1D03               	skipz
 15235  148E  0008               	return
 15236                           
 15237                           ;Dimmer_B1.c: 892: setDimmerIntr_Dimming_Sw(lights, 0);
 15238  148F  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15239  1490  086C               	movf	setDimmerLights_Dimming@lights,w
 15240  1491  319E  2635  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15241                           
 15242                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 15243  1494  0023               	movlb	3	; select bank3
 15244  1495  1120               	bcf	_Dimmer^(0+384),2
 15245                           
 15246                           ;Dimmer_B1.c: 896: setDimmerLights_Line(lights);
 15247  1496  0020               	movlb	0	; select bank0
 15248  1497  086C               	movf	setDimmerLights_Dimming@lights,w
 15249  1498  319C  24A9  3194   	fcall	_setDimmerLights_Line
 15250                           
 15251                           ;Dimmer_B1.c: 899: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15252  149B  0020               	movlb	0	; select bank0
 15253  149C  086C               	movf	setDimmerLights_Dimming@lights,w
 15254  149D  319C  246A  3194   	fcall	_getDimmerIntr_DimmingValue
 15255  14A0  0020               	movlb	0	; select bank0
 15256  14A1  00EB               	movwf	??_setDimmerLights_Dimming
 15257  14A2  086B               	movf	??_setDimmerLights_Dimming,w
 15258  14A3  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15259  14A4  086C               	movf	setDimmerLights_Dimming@lights,w
 15260  14A5  319B  23FE  3194   	fcall	_setDimmerIntr_MaxmumValue
 15261                           
 15262                           ;Dimmer_B1.c: 900: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15263  14A8  0020               	movlb	0	; select bank0
 15264  14A9  086C               	movf	setDimmerLights_Dimming@lights,w
 15265  14AA  319C  246A  3194   	fcall	_getDimmerIntr_DimmingValue
 15266  14AD  3196  26D1  3194   	fcall	_getDimmerLights_ValueToPercent
 15267  14B0  0020               	movlb	0	; select bank0
 15268  14B1  00EB               	movwf	??_setDimmerLights_Dimming
 15269  14B2  086B               	movf	??_setDimmerLights_Dimming,w
 15270  14B3  00E2               	movwf	setProductData@value
 15271  14B4  086C               	movf	setDimmerLights_Dimming@lights,w
 15272  14B5  3E14               	addlw	20
 15273  14B6  319B  23F2  3194   	fcall	_setProductData
 15274                           
 15275                           ;Dimmer_B1.c: 910: setRF_DimmerLights(lights, 1);
 15276  14B9  0020               	movlb	0	; select bank0
 15277  14BA  01E5               	clrf	setRF_DimmerLights@on
 15278  14BB  0AE5               	incf	setRF_DimmerLights@on,f
 15279  14BC  086C               	movf	setDimmerLights_Dimming@lights,w
 15280  14BD  3197  2736  3194   	fcall	_setRF_DimmerLights
 15281                           
 15282                           ;Dimmer_B1.c: 911: setTxData();
 15283  14C0  318F  2745         	fcall	_setTxData
 15284  14C2  0008               	return
 15285  14C3                     __end_of_setDimmerLights_Dimming:	
 15286                           
 15287                           	psect	text103
 15288  0F45                     __ptext103:	
 15289 ;; *************** function _setTxData *****************
 15290 ;; Defined at:
 15291 ;;		line 183 in file "../src/RF_Control_B1.c"
 15292 ;; Parameters:    Size  Location     Type
 15293 ;;		None
 15294 ;; Auto vars:     Size  Location     Type
 15295 ;;  i               1    0        unsigned char 
 15296 ;; Return value:  Size  Location     Type
 15297 ;;		None               void
 15298 ;; Registers used:
 15299 ;;		wreg, fsr1l, fsr1h, status,2
 15300 ;; Tracked objects:
 15301 ;;		On entry : 0/0
 15302 ;;		On exit  : 0/0
 15303 ;;		Unchanged: 0/0
 15304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15308 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15309 ;;Total ram usage:        1 bytes
 15310 ;; Hardware stack levels used:    1
 15311 ;; Hardware stack levels required when called:    4
 15312 ;; This function calls:
 15313 ;;		Nothing
 15314 ;; This function is called by:
 15315 ;;		_setDimmerLights_OnOff
 15316 ;;		_setDimmerLights_Dimming
 15317 ;;		_getRxData
 15318 ;;		_setControl_Lights_Table
 15319 ;;		_setRFSW_Control
 15320 ;;		_setRFSW_AdjControl
 15321 ;; This function uses a non-reentrant model
 15322 ;;
 15323                           
 15324                           
 15325                           ;psect for function _setTxData
 15326  0F45                     _setTxData:	
 15327                           
 15328                           ;RF_Control_B1.c: 184: char i;
 15329                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15330                           
 15331                           ;incstack = 0
 15332                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15333  0F45  0021               	movlb	1	; select bank1
 15334  0F46  1C20               	btfss	_RF1^(0+128),0
 15335  0F47  0008               	return
 15336                           
 15337                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15338  0F48  1520               	bsf	_RF1^(0+128),2
 15339                           
 15340                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15341  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15342  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15343                           
 15344                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15345  0F4B  3063               	movlw	99
 15346  0F4C  0020               	movlb	0	; select bank0
 15347  0F4D  00A0               	movwf	??_setTxData
 15348  0F4E  0820               	movf	??_setTxData,w
 15349  0F4F  0022               	movlb	2	; select bank2
 15350  0F50  00A0               	movwf	_RF_Data^(0+256)
 15351                           
 15352                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15353  0F51  3002               	movlw	2
 15354  0F52  0020               	movlb	0	; select bank0
 15355  0F53  00A0               	movwf	??_setTxData
 15356  0F54  0820               	movf	??_setTxData,w
 15357  0F55  0022               	movlb	2	; select bank2
 15358  0F56  00A1               	movwf	(_RF_Data^(0+256)+1)
 15359                           
 15360                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15361  0F57  0021               	movlb	1	; select bank1
 15362  0F58  086E               	movf	_product^(0+128),w
 15363  0F59  0086               	movwf	6
 15364  0F5A  3002               	movlw	2	; select bank4/5
 15365  0F5B  0087               	movwf	7
 15366  0F5C  3002               	movlw	2	; select bank4/5
 15367  0F5D  3F42               	moviw [2]fsr1
 15368  0F5E  0022               	movlb	2	; select bank2
 15369  0F5F  00A2               	movwf	(_RF_Data^(0+256)+2)
 15370                           
 15371                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15372  0F60  0021               	movlb	1	; select bank1
 15373  0F61  086E               	movf	_product^(0+128),w
 15374  0F62  0086               	movwf	6
 15375  0F63  3002               	movlw	2	; select bank4/5
 15376  0F64  0087               	movwf	7
 15377  0F65  3002               	movlw	2	; select bank4/5
 15378  0F66  3F43               	moviw [3]fsr1
 15379  0F67  0022               	movlb	2	; select bank2
 15380  0F68  00A3               	movwf	(_RF_Data^(0+256)+3)
 15381                           
 15382                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15383  0F69  0021               	movlb	1	; select bank1
 15384  0F6A  086E               	movf	_product^(0+128),w
 15385  0F6B  0086               	movwf	6
 15386  0F6C  3002               	movlw	2	; select bank4/5
 15387  0F6D  0087               	movwf	7
 15388  0F6E  3002               	movlw	2	; select bank4/5
 15389  0F6F  3F44               	moviw [4]fsr1
 15390  0F70  0022               	movlb	2	; select bank2
 15391  0F71  00A4               	movwf	(_RF_Data^(0+256)+4)
 15392                           
 15393                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15394  0F72  0021               	movlb	1	; select bank1
 15395  0F73  086E               	movf	_product^(0+128),w
 15396  0F74  0086               	movwf	6
 15397  0F75  3002               	movlw	2	; select bank4/5
 15398  0F76  0087               	movwf	7
 15399  0F77  3002               	movlw	2	; select bank4/5
 15400  0F78  3F45               	moviw [5]fsr1
 15401  0F79  0022               	movlb	2	; select bank2
 15402  0F7A  00A5               	movwf	(_RF_Data^(0+256)+5)
 15403                           
 15404                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15405  0F7B  0021               	movlb	1	; select bank1
 15406  0F7C  086E               	movf	_product^(0+128),w
 15407  0F7D  0086               	movwf	6
 15408  0F7E  3002               	movlw	2	; select bank4/5
 15409  0F7F  0087               	movwf	7
 15410  0F80  3002               	movlw	2	; select bank4/5
 15411  0F81  3F46               	moviw [6]fsr1
 15412  0F82  0022               	movlb	2	; select bank2
 15413  0F83  00A6               	movwf	(_RF_Data^(0+256)+6)
 15414                           
 15415                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15416  0F84  0021               	movlb	1	; select bank1
 15417  0F85  086E               	movf	_product^(0+128),w
 15418  0F86  0086               	movwf	6
 15419  0F87  3002               	movlw	2	; select bank4/5
 15420  0F88  0087               	movwf	7
 15421  0F89  3002               	movlw	2	; select bank4/5
 15422  0F8A  3F47               	moviw [7]fsr1
 15423  0F8B  0022               	movlb	2	; select bank2
 15424  0F8C  00A7               	movwf	(_RF_Data^(0+256)+7)
 15425                           
 15426                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15427  0F8D  0021               	movlb	1	; select bank1
 15428  0F8E  086E               	movf	_product^(0+128),w
 15429  0F8F  0086               	movwf	6
 15430  0F90  3002               	movlw	2	; select bank4/5
 15431  0F91  0087               	movwf	7
 15432  0F92  3002               	movlw	2	; select bank4/5
 15433  0F93  3F48               	moviw [8]fsr1
 15434  0F94  0022               	movlb	2	; select bank2
 15435  0F95  00A8               	movwf	(_RF_Data^(0+256)+8)
 15436                           
 15437                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15438  0F96  0021               	movlb	1	; select bank1
 15439  0F97  086E               	movf	_product^(0+128),w
 15440  0F98  0086               	movwf	6
 15441  0F99  3002               	movlw	2	; select bank4/5
 15442  0F9A  0087               	movwf	7
 15443  0F9B  3002               	movlw	2	; select bank4/5
 15444  0F9C  3F49               	moviw [9]fsr1
 15445  0F9D  0022               	movlb	2	; select bank2
 15446  0F9E  00A9               	movwf	(_RF_Data^(0+256)+9)
 15447                           
 15448                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15449  0F9F  0021               	movlb	1	; select bank1
 15450  0FA0  086E               	movf	_product^(0+128),w
 15451  0FA1  0086               	movwf	6
 15452  0FA2  3002               	movlw	2	; select bank4/5
 15453  0FA3  0087               	movwf	7
 15454  0FA4  3002               	movlw	2	; select bank4/5
 15455  0FA5  3F4A               	moviw [10]fsr1
 15456  0FA6  0022               	movlb	2	; select bank2
 15457  0FA7  00AA               	movwf	(_RF_Data^(0+256)+10)
 15458                           
 15459                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15460  0FA8  0021               	movlb	1	; select bank1
 15461  0FA9  086E               	movf	_product^(0+128),w
 15462  0FAA  0086               	movwf	6
 15463  0FAB  3002               	movlw	2	; select bank4/5
 15464  0FAC  0087               	movwf	7
 15465  0FAD  3002               	movlw	2	; select bank4/5
 15466  0FAE  3F4B               	moviw [11]fsr1
 15467  0FAF  0022               	movlb	2	; select bank2
 15468  0FB0  00AB               	movwf	(_RF_Data^(0+256)+11)
 15469                           
 15470                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15471  0FB1  0021               	movlb	1	; select bank1
 15472  0FB2  086E               	movf	_product^(0+128),w
 15473  0FB3  0086               	movwf	6
 15474  0FB4  3002               	movlw	2	; select bank4/5
 15475  0FB5  0087               	movwf	7
 15476  0FB6  3002               	movlw	2	; select bank4/5
 15477  0FB7  3F4C               	moviw [12]fsr1
 15478  0FB8  0022               	movlb	2	; select bank2
 15479  0FB9  00AC               	movwf	(_RF_Data^(0+256)+12)
 15480                           
 15481                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15482  0FBA  0021               	movlb	1	; select bank1
 15483  0FBB  086E               	movf	_product^(0+128),w
 15484  0FBC  0086               	movwf	6
 15485  0FBD  3002               	movlw	2	; select bank4/5
 15486  0FBE  0087               	movwf	7
 15487  0FBF  3002               	movlw	2	; select bank4/5
 15488  0FC0  3F4D               	moviw [13]fsr1
 15489  0FC1  0022               	movlb	2	; select bank2
 15490  0FC2  00AD               	movwf	(_RF_Data^(0+256)+13)
 15491                           
 15492                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15493  0FC3  0021               	movlb	1	; select bank1
 15494  0FC4  086E               	movf	_product^(0+128),w
 15495  0FC5  0086               	movwf	6
 15496  0FC6  3002               	movlw	2	; select bank4/5
 15497  0FC7  0087               	movwf	7
 15498  0FC8  3002               	movlw	2	; select bank4/5
 15499  0FC9  3F4E               	moviw [14]fsr1
 15500  0FCA  0022               	movlb	2	; select bank2
 15501  0FCB  00AE               	movwf	(_RF_Data^(0+256)+14)
 15502                           
 15503                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15504  0FCC  0021               	movlb	1	; select bank1
 15505  0FCD  086E               	movf	_product^(0+128),w
 15506  0FCE  0086               	movwf	6
 15507  0FCF  3002               	movlw	2	; select bank4/5
 15508  0FD0  0087               	movwf	7
 15509  0FD1  3002               	movlw	2	; select bank4/5
 15510  0FD2  3F4F               	moviw [15]fsr1
 15511  0FD3  0022               	movlb	2	; select bank2
 15512  0FD4  00AF               	movwf	(_RF_Data^(0+256)+15)
 15513                           
 15514                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15515  0FD5  0021               	movlb	1	; select bank1
 15516  0FD6  086E               	movf	_product^(0+128),w
 15517  0FD7  0086               	movwf	6
 15518  0FD8  3002               	movlw	2	; select bank4/5
 15519  0FD9  0087               	movwf	7
 15520  0FDA  3002               	movlw	2	; select bank4/5
 15521  0FDB  3F50               	moviw [16]fsr1
 15522  0FDC  0022               	movlb	2	; select bank2
 15523  0FDD  00B0               	movwf	(_RF_Data^(0+256)+16)
 15524                           
 15525                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15526  0FDE  0021               	movlb	1	; select bank1
 15527  0FDF  086E               	movf	_product^(0+128),w
 15528  0FE0  0086               	movwf	6
 15529  0FE1  3002               	movlw	2	; select bank4/5
 15530  0FE2  0087               	movwf	7
 15531  0FE3  3002               	movlw	2	; select bank4/5
 15532  0FE4  3F51               	moviw [17]fsr1
 15533  0FE5  0022               	movlb	2	; select bank2
 15534  0FE6  00B1               	movwf	(_RF_Data^(0+256)+17)
 15535                           
 15536                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15537  0FE7  0021               	movlb	1	; select bank1
 15538  0FE8  086E               	movf	_product^(0+128),w
 15539  0FE9  0086               	movwf	6
 15540  0FEA  3002               	movlw	2	; select bank4/5
 15541  0FEB  0087               	movwf	7
 15542  0FEC  3002               	movlw	2	; select bank4/5
 15543  0FED  3F52               	moviw [18]fsr1
 15544  0FEE  0022               	movlb	2	; select bank2
 15545  0FEF  00B2               	movwf	(_RF_Data^(0+256)+18)
 15546                           
 15547                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15548  0FF0  0021               	movlb	1	; select bank1
 15549  0FF1  086E               	movf	_product^(0+128),w
 15550  0FF2  0086               	movwf	6
 15551  0FF3  3002               	movlw	2	; select bank4/5
 15552  0FF4  0087               	movwf	7
 15553  0FF5  3002               	movlw	2	; select bank4/5
 15554  0FF6  3F53               	moviw [19]fsr1
 15555  0FF7  0022               	movlb	2	; select bank2
 15556  0FF8  00B3               	movwf	(_RF_Data^(0+256)+19)
 15557                           
 15558                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15559  0FF9  30D1               	movlw	209
 15560  0FFA  0020               	movlb	0	; select bank0
 15561  0FFB  00A0               	movwf	??_setTxData
 15562  0FFC  0820               	movf	??_setTxData,w
 15563  0FFD  0022               	movlb	2	; select bank2
 15564  0FFE  00B4               	movwf	(_RF_Data^(0+256)+20)
 15565  0FFF  0008               	return
 15566  1000                     __end_of_setTxData:	
 15567                           
 15568                           	psect	text104
 15569  1D58                     __ptext104:	
 15570 ;; *************** function _setRF_TransceiveGO *****************
 15571 ;; Defined at:
 15572 ;;		line 461 in file "../src/RF_Control_B1.c"
 15573 ;; Parameters:    Size  Location     Type
 15574 ;;  command         1    wreg     unsigned char 
 15575 ;; Auto vars:     Size  Location     Type
 15576 ;;  command         1    1[BANK0 ] unsigned char 
 15577 ;; Return value:  Size  Location     Type
 15578 ;;		None               void
 15579 ;; Registers used:
 15580 ;;		wreg, status,2, status,0
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15589 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15590 ;;Total ram usage:        2 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:    4
 15593 ;; This function calls:
 15594 ;;		Nothing
 15595 ;; This function is called by:
 15596 ;;		_setDimmerLights_Dimming
 15597 ;; This function uses a non-reentrant model
 15598 ;;
 15599                           
 15600                           
 15601                           ;psect for function _setRF_TransceiveGO
 15602  1D58                     _setRF_TransceiveGO:	
 15603                           
 15604                           ;incstack = 0
 15605                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15606                           ;setRF_TransceiveGO@command stored from wreg
 15607  1D58  0020               	movlb	0	; select bank0
 15608  1D59  00A1               	movwf	setRF_TransceiveGO@command
 15609                           
 15610                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15611  1D5A  0821               	movf	setRF_TransceiveGO@command,w
 15612  1D5B  3A01               	xorlw	1
 15613  1D5C  3000               	movlw	0
 15614  1D5D  1903               	skipnz
 15615  1D5E  3001               	movlw	1
 15616  1D5F  00A0               	movwf	??_setRF_TransceiveGO
 15617  1D60  0DA0               	rlf	??_setRF_TransceiveGO,f
 15618  1D61  0DA0               	rlf	??_setRF_TransceiveGO,f
 15619  1D62  0021               	movlb	1	; select bank1
 15620  1D63  0820               	movf	_RF1^(0+128),w
 15621  1D64  0020               	movlb	0	; select bank0
 15622  1D65  0620               	xorwf	??_setRF_TransceiveGO,w
 15623  1D66  39FB               	andlw	-5
 15624  1D67  0620               	xorwf	??_setRF_TransceiveGO,w
 15625  1D68  0021               	movlb	1	; select bank1
 15626  1D69  00A0               	movwf	_RF1^(0+128)
 15627  1D6A  0008               	return
 15628  1D6B                     __end_of_setRF_TransceiveGO:	
 15629                           
 15630                           	psect	text105
 15631  1736                     __ptext105:	
 15632 ;; *************** function _setRF_DimmerLights *****************
 15633 ;; Defined at:
 15634 ;;		line 446 in file "../src/RF_Control_B1.c"
 15635 ;; Parameters:    Size  Location     Type
 15636 ;;  lights          1    wreg     unsigned char 
 15637 ;;  on              1   69[BANK0 ] unsigned char 
 15638 ;; Auto vars:     Size  Location     Type
 15639 ;;  lights          1   73[BANK0 ] unsigned char 
 15640 ;;  status          1   72[BANK0 ] unsigned char 
 15641 ;; Return value:  Size  Location     Type
 15642 ;;		None               void
 15643 ;; Registers used:
 15644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15645 ;; Tracked objects:
 15646 ;;		On entry : 0/0
 15647 ;;		On exit  : 0/0
 15648 ;;		Unchanged: 0/0
 15649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15650 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15651 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;Total ram usage:        5 bytes
 15655 ;; Hardware stack levels used:    1
 15656 ;; Hardware stack levels required when called:    5
 15657 ;; This function calls:
 15658 ;;		_setProductData
 15659 ;; This function is called by:
 15660 ;;		_setDimmerLights_OnOff
 15661 ;;		_setDimmerLights_Dimming
 15662 ;;		_setRFSW_Control
 15663 ;; This function uses a non-reentrant model
 15664 ;;
 15665                           
 15666                           
 15667                           ;psect for function _setRF_DimmerLights
 15668  1736                     _setRF_DimmerLights:	
 15669                           
 15670                           ;incstack = 0
 15671                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15672                           ;setRF_DimmerLights@lights stored from wreg
 15673  1736  0020               	movlb	0	; select bank0
 15674  1737  00E9               	movwf	setRF_DimmerLights@lights
 15675                           
 15676                           ;RF_Control_B1.c: 447: char status = 1;
 15677  1738  01E8               	clrf	setRF_DimmerLights@status
 15678  1739  0AE8               	incf	setRF_DimmerLights@status,f
 15679                           
 15680                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 15681  173A  0869               	movf	setRF_DimmerLights@lights,w
 15682  173B  3EFF               	addlw	-1
 15683  173C  0A89               	incf	9,f
 15684  173D  2F40               	goto	u5190
 15685  173E                     u5195:	
 15686  173E  1003               	clrc
 15687  173F  0DE8               	rlf	setRF_DimmerLights@status,f
 15688  1740                     u5190:	
 15689  1740  3EFF               	addlw	-1
 15690  1741  1D03               	skipz
 15691  1742  2F3E               	goto	u5195
 15692                           
 15693                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 15694  1743  0869               	movf	setRF_DimmerLights@lights,w
 15695  1744  00E6               	movwf	??_setRF_DimmerLights
 15696  1745  0866               	movf	??_setRF_DimmerLights,w
 15697  1746  00E2               	movwf	setProductData@value
 15698  1747  300B               	movlw	11
 15699  1748  319B  23F2  3197   	fcall	_setProductData
 15700                           
 15701                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 15702  174B  0020               	movlb	0	; select bank0
 15703  174C  0869               	movf	setRF_DimmerLights@lights,w
 15704  174D  3E1A               	addlw	26
 15705  174E  0021               	movlb	1	; select bank1
 15706  174F  076E               	addwf	_product^(0+128),w
 15707  1750  0020               	movlb	0	; select bank0
 15708  1751  00E6               	movwf	??_setRF_DimmerLights
 15709  1752  0866               	movf	??_setRF_DimmerLights,w
 15710  1753  0086               	movwf	6
 15711  1754  3002               	movlw	2	; select bank4/5
 15712  1755  0087               	movwf	7
 15713  1756  0801               	movf	1,w
 15714  1757  00E7               	movwf	??_setRF_DimmerLights+1
 15715  1758  0867               	movf	??_setRF_DimmerLights+1,w
 15716  1759  00E2               	movwf	setProductData@value
 15717  175A  3011               	movlw	17
 15718  175B  319B  23F2  3197   	fcall	_setProductData
 15719                           
 15720                           ;RF_Control_B1.c: 451: if (on == 1) {
 15721  175E  0020               	movlb	0	; select bank0
 15722  175F  0865               	movf	setRF_DimmerLights@on,w
 15723  1760  3A01               	xorlw	1
 15724  1761  1D03               	skipz
 15725  1762  2F85               	goto	l6078
 15726                           
 15727                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 15728  1763  0869               	movf	setRF_DimmerLights@lights,w
 15729  1764  3E14               	addlw	20
 15730  1765  0021               	movlb	1	; select bank1
 15731  1766  076E               	addwf	_product^(0+128),w
 15732  1767  0020               	movlb	0	; select bank0
 15733  1768  00E6               	movwf	??_setRF_DimmerLights
 15734  1769  0866               	movf	??_setRF_DimmerLights,w
 15735  176A  0086               	movwf	6
 15736  176B  3002               	movlw	2	; select bank4/5
 15737  176C  0087               	movwf	7
 15738  176D  0801               	movf	1,w
 15739  176E  00E7               	movwf	??_setRF_DimmerLights+1
 15740  176F  0867               	movf	??_setRF_DimmerLights+1,w
 15741  1770  00E2               	movwf	setProductData@value
 15742  1771  3009               	movlw	9
 15743  1772  319B  23F2  3197   	fcall	_setProductData
 15744                           
 15745                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 15746  1775  0021               	movlb	1	; select bank1
 15747  1776  086E               	movf	_product^(0+128),w
 15748  1777  3E0F               	addlw	15
 15749  1778  0086               	movwf	6
 15750  1779  3002               	movlw	2	; select bank4/5
 15751  177A  0087               	movwf	7
 15752  177B  0801               	movf	1,w
 15753  177C  0020               	movlb	0	; select bank0
 15754  177D  0468               	iorwf	setRF_DimmerLights@status,w
 15755  177E  00E6               	movwf	??_setRF_DimmerLights
 15756  177F  0866               	movf	??_setRF_DimmerLights,w
 15757  1780  00E2               	movwf	setProductData@value
 15758  1781  300F               	movlw	15
 15759  1782  319B  23F2         	fcall	_setProductData
 15760                           
 15761                           ;RF_Control_B1.c: 454: } else {
 15762  1784  0008               	return
 15763  1785                     l6078:	
 15764                           
 15765                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 15766  1785  0020               	movlb	0	; select bank0
 15767  1786  01E2               	clrf	setProductData@value
 15768  1787  3009               	movlw	9
 15769  1788  319B  23F2  3197   	fcall	_setProductData
 15770                           
 15771                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 15772  178B  0021               	movlb	1	; select bank1
 15773  178C  086E               	movf	_product^(0+128),w
 15774  178D  3E0F               	addlw	15
 15775  178E  0086               	movwf	6
 15776  178F  3002               	movlw	2	; select bank4/5
 15777  1790  0087               	movwf	7
 15778  1791  0020               	movlb	0	; select bank0
 15779  1792  0968               	comf	setRF_DimmerLights@status,w
 15780  1793  0501               	andwf	1,w
 15781  1794  00E6               	movwf	??_setRF_DimmerLights
 15782  1795  0866               	movf	??_setRF_DimmerLights,w
 15783  1796  00E2               	movwf	setProductData@value
 15784  1797  300F               	movlw	15
 15785  1798  319B  23F2         	fcall	_setProductData
 15786  179A  0008               	return
 15787  179B                     __end_of_setRF_DimmerLights:	
 15788                           
 15789                           	psect	text106
 15790  1CA9                     __ptext106:	
 15791 ;; *************** function _setDimmerLights_Line *****************
 15792 ;; Defined at:
 15793 ;;		line 955 in file "../src/Dimmer_B1.c"
 15794 ;; Parameters:    Size  Location     Type
 15795 ;;  lights          1    wreg     unsigned char 
 15796 ;; Auto vars:     Size  Location     Type
 15797 ;;  lights          1    0[BANK0 ] unsigned char 
 15798 ;; Return value:  Size  Location     Type
 15799 ;;		None               void
 15800 ;; Registers used:
 15801 ;;		wreg
 15802 ;; Tracked objects:
 15803 ;;		On entry : 0/0
 15804 ;;		On exit  : 0/0
 15805 ;;		Unchanged: 0/0
 15806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15810 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15811 ;;Total ram usage:        1 bytes
 15812 ;; Hardware stack levels used:    1
 15813 ;; Hardware stack levels required when called:    4
 15814 ;; This function calls:
 15815 ;;		Nothing
 15816 ;; This function is called by:
 15817 ;;		_setDimmerLights_OnOff
 15818 ;;		_setDimmerLights_Dimming
 15819 ;; This function uses a non-reentrant model
 15820 ;;
 15821                           
 15822                           
 15823                           ;psect for function _setDimmerLights_Line
 15824  1CA9                     _setDimmerLights_Line:	
 15825                           
 15826                           ;incstack = 0
 15827                           ; Regs used in _setDimmerLights_Line: [wreg]
 15828                           ;setDimmerLights_Line@lights stored from wreg
 15829  1CA9  0020               	movlb	0	; select bank0
 15830  1CAA  00A0               	movwf	setDimmerLights_Line@lights
 15831                           
 15832                           ;Dimmer_B1.c: 956: Dimmer.LoadGO = 1;
 15833  1CAB  0023               	movlb	3	; select bank3
 15834  1CAC  14A0               	bsf	_Dimmer^(0+384),1
 15835                           
 15836                           ;Dimmer_B1.c: 958: DimmerLights1.Line = 0;
 15837  1CAD  10D4               	bcf	(_DimmerLights1^(0+384)+1),1
 15838                           
 15839                           ;Dimmer_B1.c: 959: if (lights == 1 && lights != 0) {
 15840  1CAE  0020               	movlb	0	; select bank0
 15841  1CAF  0820               	movf	setDimmerLights_Line@lights,w
 15842  1CB0  3A01               	xorlw	1
 15843  1CB1  1D03               	skipz
 15844  1CB2  0008               	return
 15845  1CB3  0820               	movf	setDimmerLights_Line@lights,w
 15846  1CB4  1903               	btfsc	3,2
 15847  1CB5  0008               	return
 15848                           
 15849                           ;Dimmer_B1.c: 960: DimmerLights1.Line = 1;
 15850  1CB6  0023               	movlb	3	; select bank3
 15851  1CB7  14D4               	bsf	(_DimmerLights1^(0+384)+1),1
 15852  1CB8  0020               	movlb	0	; select bank0
 15853  1CB9  0008               	return
 15854  1CBA                     __end_of_setDimmerLights_Line:	
 15855                           
 15856                           	psect	text107
 15857  1BFE                     __ptext107:	
 15858 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15859 ;; Defined at:
 15860 ;;		line 89 in file "../src/Dimmer_B1.c"
 15861 ;; Parameters:    Size  Location     Type
 15862 ;;  lights          1    wreg     unsigned char 
 15863 ;;  value           1   66[BANK0 ] unsigned char 
 15864 ;; Auto vars:     Size  Location     Type
 15865 ;;  lights          1   68[BANK0 ] unsigned char 
 15866 ;; Return value:  Size  Location     Type
 15867 ;;		None               void
 15868 ;; Registers used:
 15869 ;;		wreg
 15870 ;; Tracked objects:
 15871 ;;		On entry : 0/0
 15872 ;;		On exit  : 0/0
 15873 ;;		Unchanged: 0/0
 15874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15875 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15878 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;Total ram usage:        3 bytes
 15880 ;; Hardware stack levels used:    1
 15881 ;; Hardware stack levels required when called:    4
 15882 ;; This function calls:
 15883 ;;		Nothing
 15884 ;; This function is called by:
 15885 ;;		_setDimmerLights_OnOff
 15886 ;;		_setDimmerLights_Dimming
 15887 ;;		_setRFSW_AdjControl
 15888 ;; This function uses a non-reentrant model
 15889 ;;
 15890                           
 15891                           
 15892                           ;psect for function _setDimmerIntr_MaxmumValue
 15893  1BFE                     _setDimmerIntr_MaxmumValue:	
 15894                           
 15895                           ;incstack = 0
 15896                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15897                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15898  1BFE  0020               	movlb	0	; select bank0
 15899  1BFF  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 15900                           
 15901                           ;Dimmer_B1.c: 91: if (lights == 1) {
 15902  1C00  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 15903  1C01  3A01               	xorlw	1
 15904  1C02  1D03               	skipz
 15905  1C03  0008               	return
 15906                           
 15907                           ;Dimmer_B1.c: 92: DimmerIntr1.MaxmumValue = value;
 15908  1C04  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 15909  1C05  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 15910  1C06  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 15911  1C07  0021               	movlb	1	; select bank1
 15912  1C08  00CC               	movwf	(_DimmerIntr1^(0+128)+5)
 15913  1C09  0008               	return
 15914  1C0A                     __end_of_setDimmerIntr_MaxmumValue:	
 15915                           
 15916                           	psect	text108
 15917  1E35                     __ptext108:	
 15918 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15919 ;; Defined at:
 15920 ;;		line 166 in file "../src/Dimmer_B1.c"
 15921 ;; Parameters:    Size  Location     Type
 15922 ;;  lights          1    wreg     unsigned char 
 15923 ;;  command         1    0[BANK0 ] unsigned char 
 15924 ;; Auto vars:     Size  Location     Type
 15925 ;;  lights          1    2[BANK0 ] unsigned char 
 15926 ;; Return value:  Size  Location     Type
 15927 ;;		None               void
 15928 ;; Registers used:
 15929 ;;		wreg, status,2, status,0
 15930 ;; Tracked objects:
 15931 ;;		On entry : 0/0
 15932 ;;		On exit  : 0/0
 15933 ;;		Unchanged: 0/0
 15934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15935 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15936 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15938 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15939 ;;Total ram usage:        3 bytes
 15940 ;; Hardware stack levels used:    1
 15941 ;; Hardware stack levels required when called:    4
 15942 ;; This function calls:
 15943 ;;		Nothing
 15944 ;; This function is called by:
 15945 ;;		_setDimmerLights_Dimming
 15946 ;; This function uses a non-reentrant model
 15947 ;;
 15948                           
 15949                           
 15950                           ;psect for function _setDimmerIntr_Dimming_Sw
 15951  1E35                     _setDimmerIntr_Dimming_Sw:	
 15952                           
 15953                           ;incstack = 0
 15954                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15955                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15956  1E35  0020               	movlb	0	; select bank0
 15957  1E36  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 15958                           
 15959                           ;Dimmer_B1.c: 168: if (lights == 1) {
 15960  1E37  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15961  1E38  3A01               	xorlw	1
 15962  1E39  1D03               	skipz
 15963  1E3A  0008               	return
 15964                           
 15965                           ;Dimmer_B1.c: 169: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15966  1E3B  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 15967  1E3C  3A01               	xorlw	1
 15968  1E3D  3000               	movlw	0
 15969  1E3E  1903               	skipnz
 15970  1E3F  3001               	movlw	1
 15971  1E40  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 15972  1E41  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15973  1E42  0021               	movlb	1	; select bank1
 15974  1E43  0847               	movf	_DimmerIntr1^(0+128),w
 15975  1E44  0020               	movlb	0	; select bank0
 15976  1E45  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15977  1E46  39EF               	andlw	-17
 15978  1E47  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15979  1E48  0021               	movlb	1	; select bank1
 15980  1E49  00C7               	movwf	_DimmerIntr1^(0+128)
 15981  1E4A  0008               	return
 15982  1E4B                     __end_of_setDimmerIntr_Dimming_Sw:	
 15983                           
 15984                           	psect	text109
 15985  16D1                     __ptext109:	
 15986 ;; *************** function _getDimmerLights_ValueToPercent *****************
 15987 ;; Defined at:
 15988 ;;		line 1055 in file "../src/Dimmer_B1.c"
 15989 ;; Parameters:    Size  Location     Type
 15990 ;;  value           1    wreg     unsigned char 
 15991 ;; Auto vars:     Size  Location     Type
 15992 ;;  value           1   62[BANK0 ] unsigned char 
 15993 ;;  i               3   63[BANK0 ] float 
 15994 ;; Return value:  Size  Location     Type
 15995 ;;                  1    wreg      unsigned char 
 15996 ;; Registers used:
 15997 ;;		wreg, status,2, status,0, pclath, cstack
 15998 ;; Tracked objects:
 15999 ;;		On entry : 0/0
 16000 ;;		On exit  : 0/0
 16001 ;;		Unchanged: 0/0
 16002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16006 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;Total ram usage:        6 bytes
 16008 ;; Hardware stack levels used:    1
 16009 ;; Hardware stack levels required when called:    6
 16010 ;; This function calls:
 16011 ;;		___awtoft
 16012 ;;		___ftadd
 16013 ;;		___ftdiv
 16014 ;;		___ftneg
 16015 ;;		___fttol
 16016 ;; This function is called by:
 16017 ;;		_setDimmerLights_OnOff
 16018 ;;		_setDimmerLights_Dimming
 16019 ;;		_Flash_Memory_Initialization
 16020 ;; This function uses a non-reentrant model
 16021 ;;
 16022                           
 16023                           
 16024                           ;psect for function _getDimmerLights_ValueToPercent
 16025  16D1                     _getDimmerLights_ValueToPercent:	
 16026                           
 16027                           ;incstack = 0
 16028                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16029                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16030  16D1  0020               	movlb	0	; select bank0
 16031  16D2  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16032                           
 16033                           ;Dimmer_B1.c: 1063: float i = ((char)(60*0.8)) - ((char)(30*0.8));
 16034  16D3  3000               	movlw	0
 16035  16D4  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16036  16D5  30C0               	movlw	192
 16037  16D6  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16038  16D7  3041               	movlw	65
 16039  16D8  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16040                           
 16041                           ;Dimmer_B1.c: 1064: i /= 100;
 16042  16D9  3000               	movlw	0
 16043  16DA  00AE               	movwf	___ftdiv@f2
 16044  16DB  30C8               	movlw	200
 16045  16DC  00AF               	movwf	___ftdiv@f2+1
 16046  16DD  3042               	movlw	66
 16047  16DE  00B0               	movwf	___ftdiv@f2+2
 16048  16DF  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16049  16E0  00B1               	movwf	___ftdiv@f1
 16050  16E1  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16051  16E2  00B2               	movwf	___ftdiv@f1+1
 16052  16E3  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16053  16E4  00B3               	movwf	___ftdiv@f1+2
 16054  16E5  318D  2537  3196   	fcall	___ftdiv
 16055  16E8  0020               	movlb	0	; select bank0
 16056  16E9  082E               	movf	?___ftdiv,w
 16057  16EA  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16058  16EB  082F               	movf	?___ftdiv+1,w
 16059  16EC  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16060  16ED  0830               	movf	?___ftdiv+2,w
 16061  16EE  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16062                           
 16063                           ;Dimmer_B1.c: 1066: return (char) (100 - ((((char)(60*0.8)) - value) / i));
 16064  16EF  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16065  16F0  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16066  16F1  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16067  16F2  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16068  16F3  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16069  16F4  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16070  16F5  1903               	skipnz
 16071  16F6  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16072  16F7  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16073  16F8  3E30               	addlw	48
 16074  16F9  00A8               	movwf	___awtoft@c
 16075  16FA  3000               	movlw	0
 16076  16FB  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16077  16FC  00A9               	movwf	___awtoft@c+1
 16078  16FD  3190  2091  3196   	fcall	___awtoft
 16079  1700  0020               	movlb	0	; select bank0
 16080  1701  0828               	movf	?___awtoft,w
 16081  1702  00B1               	movwf	___ftdiv@f1
 16082  1703  0829               	movf	?___awtoft+1,w
 16083  1704  00B2               	movwf	___ftdiv@f1+1
 16084  1705  082A               	movf	?___awtoft+2,w
 16085  1706  00B3               	movwf	___ftdiv@f1+2
 16086  1707  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16087  1708  00AE               	movwf	___ftdiv@f2
 16088  1709  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16089  170A  00AF               	movwf	___ftdiv@f2+1
 16090  170B  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16091  170C  00B0               	movwf	___ftdiv@f2+2
 16092  170D  318D  2537  3196   	fcall	___ftdiv
 16093  1710  0020               	movlb	0	; select bank0
 16094  1711  082E               	movf	?___ftdiv,w
 16095  1712  00BE               	movwf	___ftneg@f1
 16096  1713  082F               	movf	?___ftdiv+1,w
 16097  1714  00BF               	movwf	___ftneg@f1+1
 16098  1715  0830               	movf	?___ftdiv+2,w
 16099  1716  00C0               	movwf	___ftneg@f1+2
 16100  1717  319B  239E  3196   	fcall	___ftneg
 16101  171A  0020               	movlb	0	; select bank0
 16102  171B  083E               	movf	?___ftneg,w
 16103  171C  00C4               	movwf	___ftadd@f2
 16104  171D  083F               	movf	?___ftneg+1,w
 16105  171E  00C5               	movwf	___ftadd@f2+1
 16106  171F  0840               	movf	?___ftneg+2,w
 16107  1720  00C6               	movwf	___ftadd@f2+2
 16108  1721  3000               	movlw	0
 16109  1722  00C1               	movwf	___ftadd@f1
 16110  1723  30C8               	movlw	200
 16111  1724  00C2               	movwf	___ftadd@f1+1
 16112  1725  3042               	movlw	66
 16113  1726  00C3               	movwf	___ftadd@f1+2
 16114  1727  3183  2382  3196   	fcall	___ftadd
 16115  172A  0020               	movlb	0	; select bank0
 16116  172B  0841               	movf	?___ftadd,w
 16117  172C  00CE               	movwf	___fttol@f1
 16118  172D  0842               	movf	?___ftadd+1,w
 16119  172E  00CF               	movwf	___fttol@f1+1
 16120  172F  0843               	movf	?___ftadd+2,w
 16121  1730  00D0               	movwf	___fttol@f1+2
 16122  1731  318C  2424         	fcall	___fttol
 16123  1733  0020               	movlb	0	; select bank0
 16124  1734  084E               	movf	?___fttol,w
 16125  1735  0008               	return
 16126  1736                     __end_of_getDimmerLights_ValueToPercent:	
 16127                           
 16128                           	psect	text110
 16129  0C24                     __ptext110:	
 16130 ;; *************** function ___fttol *****************
 16131 ;; Defined at:
 16132 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16133 ;; Parameters:    Size  Location     Type
 16134 ;;  f1              3   46[BANK0 ] float 
 16135 ;; Auto vars:     Size  Location     Type
 16136 ;;  lval            4   55[BANK0 ] unsigned long 
 16137 ;;  exp1            1   59[BANK0 ] unsigned char 
 16138 ;;  sign1           1   54[BANK0 ] unsigned char 
 16139 ;; Return value:  Size  Location     Type
 16140 ;;                  4   46[BANK0 ] long 
 16141 ;; Registers used:
 16142 ;;		wreg, status,2, status,0
 16143 ;; Tracked objects:
 16144 ;;		On entry : 0/0
 16145 ;;		On exit  : 0/0
 16146 ;;		Unchanged: 0/0
 16147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16148 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16149 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16150 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16151 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16152 ;;Total ram usage:       14 bytes
 16153 ;; Hardware stack levels used:    1
 16154 ;; Hardware stack levels required when called:    4
 16155 ;; This function calls:
 16156 ;;		Nothing
 16157 ;; This function is called by:
 16158 ;;		_getDimmerLights_PercentToValue
 16159 ;;		_getDimmerLights_ValueToPercent
 16160 ;; This function uses a non-reentrant model
 16161 ;;
 16162                           
 16163                           
 16164                           ;psect for function ___fttol
 16165  0C24                     ___fttol:	
 16166                           
 16167                           ;incstack = 0
 16168                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16169  0C24  0020               	movlb	0	; select bank0
 16170  0C25  084E               	movf	___fttol@f1,w
 16171  0C26  00D2               	movwf	??___fttol
 16172  0C27  084F               	movf	___fttol@f1+1,w
 16173  0C28  00D3               	movwf	??___fttol+1
 16174  0C29  0850               	movf	___fttol@f1+2,w
 16175  0C2A  00D4               	movwf	??___fttol+2
 16176  0C2B  1003               	clrc
 16177  0C2C  0D53               	rlf	??___fttol+1,w
 16178  0C2D  0D54               	rlf	??___fttol+2,w
 16179  0C2E  00D5               	movwf	??___fttol+3
 16180  0C2F  0855               	movf	??___fttol+3,w
 16181  0C30  00DB               	movwf	___fttol@exp1
 16182  0C31  08DB               	movf	___fttol@exp1,f
 16183  0C32  1D03               	skipz
 16184  0C33  2C3D               	goto	l5914
 16185  0C34  3000               	movlw	0
 16186  0C35  00D1               	movwf	?___fttol+3
 16187  0C36  3000               	movlw	0
 16188  0C37  00D0               	movwf	?___fttol+2
 16189  0C38  3000               	movlw	0
 16190  0C39  00CF               	movwf	?___fttol+1
 16191  0C3A  3000               	movlw	0
 16192  0C3B  00CE               	movwf	?___fttol
 16193  0C3C  0008               	return
 16194  0C3D                     l5914:	
 16195  0C3D  084E               	movf	___fttol@f1,w
 16196  0C3E  00D2               	movwf	??___fttol
 16197  0C3F  084F               	movf	___fttol@f1+1,w
 16198  0C40  00D3               	movwf	??___fttol+1
 16199  0C41  0850               	movf	___fttol@f1+2,w
 16200  0C42  00D4               	movwf	??___fttol+2
 16201  0C43  3017               	movlw	23
 16202  0C44                     u4935:	
 16203  0C44  36D4               	lsrf	??___fttol+2,f
 16204  0C45  0CD3               	rrf	??___fttol+1,f
 16205  0C46  0CD2               	rrf	??___fttol,f
 16206  0C47  0B89               	decfsz	9,f
 16207  0C48  2C44               	goto	u4935
 16208  0C49  0852               	movf	??___fttol,w
 16209  0C4A  00D5               	movwf	??___fttol+3
 16210  0C4B  0855               	movf	??___fttol+3,w
 16211  0C4C  00D6               	movwf	___fttol@sign1
 16212  0C4D  17CF               	bsf	___fttol@f1+1,7
 16213  0C4E  30FF               	movlw	255
 16214  0C4F  05CE               	andwf	___fttol@f1,f
 16215  0C50  30FF               	movlw	255
 16216  0C51  05CF               	andwf	___fttol@f1+1,f
 16217  0C52  3000               	movlw	0
 16218  0C53  05D0               	andwf	___fttol@f1+2,f
 16219  0C54  084E               	movf	___fttol@f1,w
 16220  0C55  00D7               	movwf	___fttol@lval
 16221  0C56  084F               	movf	___fttol@f1+1,w
 16222  0C57  00D8               	movwf	___fttol@lval+1
 16223  0C58  0850               	movf	___fttol@f1+2,w
 16224  0C59  00D9               	movwf	___fttol@lval+2
 16225  0C5A  01DA               	clrf	___fttol@lval+3
 16226  0C5B  308E               	movlw	142
 16227  0C5C  02DB               	subwf	___fttol@exp1,f
 16228  0C5D  1FDB               	btfss	___fttol@exp1,7
 16229  0C5E  2C7B               	goto	l5934
 16230  0C5F  085B               	movf	___fttol@exp1,w
 16231  0C60  3A80               	xorlw	128
 16232  0C61  3E8F               	addlw	143
 16233  0C62  1803               	skipnc
 16234  0C63  2C6D               	goto	l5932
 16235  0C64  3000               	movlw	0
 16236  0C65  00D1               	movwf	?___fttol+3
 16237  0C66  3000               	movlw	0
 16238  0C67  00D0               	movwf	?___fttol+2
 16239  0C68  3000               	movlw	0
 16240  0C69  00CF               	movwf	?___fttol+1
 16241  0C6A  3000               	movlw	0
 16242  0C6B  00CE               	movwf	?___fttol
 16243  0C6C  0008               	return
 16244  0C6D                     l5932:	
 16245  0C6D  3001               	movlw	1
 16246  0C6E                     u4965:	
 16247  0C6E  36DA               	lsrf	___fttol@lval+3,f
 16248  0C6F  0CD9               	rrf	___fttol@lval+2,f
 16249  0C70  0CD8               	rrf	___fttol@lval+1,f
 16250  0C71  0CD7               	rrf	___fttol@lval,f
 16251  0C72  0B89               	decfsz	9,f
 16252  0C73  2C6E               	goto	u4965
 16253  0C74  3001               	movlw	1
 16254  0C75  00D2               	movwf	??___fttol
 16255  0C76  0852               	movf	??___fttol,w
 16256  0C77  07DB               	addwf	___fttol@exp1,f
 16257  0C78  1903               	btfsc	3,2
 16258  0C79  2C94               	goto	l5944
 16259  0C7A  2C6D               	goto	l5932
 16260  0C7B                     l5934:	
 16261  0C7B  3018               	movlw	24
 16262  0C7C  025B               	subwf	___fttol@exp1,w
 16263  0C7D  1C03               	skipc
 16264  0C7E  2C91               	goto	l5942
 16265  0C7F  3000               	movlw	0
 16266  0C80  00D1               	movwf	?___fttol+3
 16267  0C81  3000               	movlw	0
 16268  0C82  00D0               	movwf	?___fttol+2
 16269  0C83  3000               	movlw	0
 16270  0C84  00CF               	movwf	?___fttol+1
 16271  0C85  3000               	movlw	0
 16272  0C86  00CE               	movwf	?___fttol
 16273  0C87  0008               	return
 16274  0C88                     l5940:	
 16275  0C88  3001               	movlw	1
 16276  0C89                     u4995:	
 16277  0C89  35D7               	lslf	___fttol@lval,f
 16278  0C8A  0DD8               	rlf	___fttol@lval+1,f
 16279  0C8B  0DD9               	rlf	___fttol@lval+2,f
 16280  0C8C  0DDA               	rlf	___fttol@lval+3,f
 16281  0C8D  0B89               	decfsz	9,f
 16282  0C8E  2C89               	goto	u4995
 16283  0C8F  3001               	movlw	1
 16284  0C90  02DB               	subwf	___fttol@exp1,f
 16285  0C91                     l5942:	
 16286  0C91  08DB               	movf	___fttol@exp1,f
 16287  0C92  1D03               	skipz
 16288  0C93  2C88               	goto	l5940
 16289  0C94                     l5944:	
 16290  0C94  0856               	movf	___fttol@sign1,w
 16291  0C95  1903               	btfsc	3,2
 16292  0C96  2CA2               	goto	l5948
 16293  0C97  09D7               	comf	___fttol@lval,f
 16294  0C98  09D8               	comf	___fttol@lval+1,f
 16295  0C99  09D9               	comf	___fttol@lval+2,f
 16296  0C9A  09DA               	comf	___fttol@lval+3,f
 16297  0C9B  0AD7               	incf	___fttol@lval,f
 16298  0C9C  1903               	skipnz
 16299  0C9D  0AD8               	incf	___fttol@lval+1,f
 16300  0C9E  1903               	skipnz
 16301  0C9F  0AD9               	incf	___fttol@lval+2,f
 16302  0CA0  1903               	skipnz
 16303  0CA1  0ADA               	incf	___fttol@lval+3,f
 16304  0CA2                     l5948:	
 16305  0CA2  085A               	movf	___fttol@lval+3,w
 16306  0CA3  00D1               	movwf	?___fttol+3
 16307  0CA4  0859               	movf	___fttol@lval+2,w
 16308  0CA5  00D0               	movwf	?___fttol+2
 16309  0CA6  0858               	movf	___fttol@lval+1,w
 16310  0CA7  00CF               	movwf	?___fttol+1
 16311  0CA8  0857               	movf	___fttol@lval,w
 16312  0CA9  00CE               	movwf	?___fttol
 16313  0CAA  0008               	return
 16314  0CAB                     __end_of___fttol:	
 16315                           
 16316                           	psect	text111
 16317  1B9E                     __ptext111:	
 16318 ;; *************** function ___ftneg *****************
 16319 ;; Defined at:
 16320 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16321 ;; Parameters:    Size  Location     Type
 16322 ;;  f1              3   30[BANK0 ] float 
 16323 ;; Auto vars:     Size  Location     Type
 16324 ;;		None
 16325 ;; Return value:  Size  Location     Type
 16326 ;;                  3   30[BANK0 ] float 
 16327 ;; Registers used:
 16328 ;;		wreg
 16329 ;; Tracked objects:
 16330 ;;		On entry : 0/0
 16331 ;;		On exit  : 0/0
 16332 ;;		Unchanged: 0/0
 16333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16334 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16337 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16338 ;;Total ram usage:        3 bytes
 16339 ;; Hardware stack levels used:    1
 16340 ;; Hardware stack levels required when called:    4
 16341 ;; This function calls:
 16342 ;;		Nothing
 16343 ;; This function is called by:
 16344 ;;		_getDimmerLights_PercentToValue
 16345 ;;		_getDimmerLights_ValueToPercent
 16346 ;; This function uses a non-reentrant model
 16347 ;;
 16348                           
 16349                           
 16350                           ;psect for function ___ftneg
 16351  1B9E                     ___ftneg:	
 16352                           
 16353                           ;incstack = 0
 16354                           ; Regs used in ___ftneg: [wreg]
 16355  1B9E  0020               	movlb	0	; select bank0
 16356  1B9F  0840               	movf	___ftneg@f1+2,w
 16357  1BA0  043F               	iorwf	___ftneg@f1+1,w
 16358  1BA1  043E               	iorwf	___ftneg@f1,w
 16359  1BA2  1903               	skipnz
 16360  1BA3  0008               	return
 16361  1BA4  3080               	movlw	128
 16362  1BA5  06C0               	xorwf	___ftneg@f1+2,f
 16363  1BA6  0008               	return
 16364  1BA7                     __end_of___ftneg:	
 16365                           
 16366                           	psect	text112
 16367  0D37                     __ptext112:	
 16368 ;; *************** function ___ftdiv *****************
 16369 ;; Defined at:
 16370 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16371 ;; Parameters:    Size  Location     Type
 16372 ;;  f2              3   14[BANK0 ] float 
 16373 ;;  f1              3   17[BANK0 ] float 
 16374 ;; Auto vars:     Size  Location     Type
 16375 ;;  f3              3   25[BANK0 ] float 
 16376 ;;  sign            1   29[BANK0 ] unsigned char 
 16377 ;;  exp             1   28[BANK0 ] unsigned char 
 16378 ;;  cntr            1   24[BANK0 ] unsigned char 
 16379 ;; Return value:  Size  Location     Type
 16380 ;;                  3   14[BANK0 ] float 
 16381 ;; Registers used:
 16382 ;;		wreg, status,2, status,0, pclath, cstack
 16383 ;; Tracked objects:
 16384 ;;		On entry : 0/0
 16385 ;;		On exit  : 0/0
 16386 ;;		Unchanged: 0/0
 16387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16388 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16389 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16390 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16391 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16392 ;;Total ram usage:       16 bytes
 16393 ;; Hardware stack levels used:    1
 16394 ;; Hardware stack levels required when called:    5
 16395 ;; This function calls:
 16396 ;;		___ftpack
 16397 ;; This function is called by:
 16398 ;;		_getDimmerLights_PercentToValue
 16399 ;;		_getDimmerLights_ValueToPercent
 16400 ;; This function uses a non-reentrant model
 16401 ;;
 16402                           
 16403                           
 16404                           ;psect for function ___ftdiv
 16405  0D37                     ___ftdiv:	
 16406                           
 16407                           ;incstack = 0
 16408                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16409  0D37  0020               	movlb	0	; select bank0
 16410  0D38  0831               	movf	___ftdiv@f1,w
 16411  0D39  00B4               	movwf	??___ftdiv
 16412  0D3A  0832               	movf	___ftdiv@f1+1,w
 16413  0D3B  00B5               	movwf	??___ftdiv+1
 16414  0D3C  0833               	movf	___ftdiv@f1+2,w
 16415  0D3D  00B6               	movwf	??___ftdiv+2
 16416  0D3E  1003               	clrc
 16417  0D3F  0D35               	rlf	??___ftdiv+1,w
 16418  0D40  0D36               	rlf	??___ftdiv+2,w
 16419  0D41  00B7               	movwf	??___ftdiv+3
 16420  0D42  0837               	movf	??___ftdiv+3,w
 16421  0D43  00BC               	movwf	___ftdiv@exp
 16422  0D44  08BC               	movf	___ftdiv@exp,f
 16423  0D45  1D03               	skipz
 16424  0D46  2D4E               	goto	l5814
 16425  0D47  3000               	movlw	0
 16426  0D48  00AE               	movwf	?___ftdiv
 16427  0D49  3000               	movlw	0
 16428  0D4A  00AF               	movwf	?___ftdiv+1
 16429  0D4B  3000               	movlw	0
 16430  0D4C  00B0               	movwf	?___ftdiv+2
 16431  0D4D  0008               	return
 16432  0D4E                     l5814:	
 16433  0D4E  082E               	movf	___ftdiv@f2,w
 16434  0D4F  00B4               	movwf	??___ftdiv
 16435  0D50  082F               	movf	___ftdiv@f2+1,w
 16436  0D51  00B5               	movwf	??___ftdiv+1
 16437  0D52  0830               	movf	___ftdiv@f2+2,w
 16438  0D53  00B6               	movwf	??___ftdiv+2
 16439  0D54  1003               	clrc
 16440  0D55  0D35               	rlf	??___ftdiv+1,w
 16441  0D56  0D36               	rlf	??___ftdiv+2,w
 16442  0D57  00B7               	movwf	??___ftdiv+3
 16443  0D58  0837               	movf	??___ftdiv+3,w
 16444  0D59  00BD               	movwf	___ftdiv@sign
 16445  0D5A  08BD               	movf	___ftdiv@sign,f
 16446  0D5B  1D03               	skipz
 16447  0D5C  2D64               	goto	l5820
 16448  0D5D  3000               	movlw	0
 16449  0D5E  00AE               	movwf	?___ftdiv
 16450  0D5F  3000               	movlw	0
 16451  0D60  00AF               	movwf	?___ftdiv+1
 16452  0D61  3000               	movlw	0
 16453  0D62  00B0               	movwf	?___ftdiv+2
 16454  0D63  0008               	return
 16455  0D64                     l5820:	
 16456  0D64  3000               	movlw	0
 16457  0D65  00B9               	movwf	___ftdiv@f3
 16458  0D66  3000               	movlw	0
 16459  0D67  00BA               	movwf	___ftdiv@f3+1
 16460  0D68  3000               	movlw	0
 16461  0D69  00BB               	movwf	___ftdiv@f3+2
 16462  0D6A  3089               	movlw	137
 16463  0D6B  073D               	addwf	___ftdiv@sign,w
 16464  0D6C  00B4               	movwf	??___ftdiv
 16465  0D6D  0834               	movf	??___ftdiv,w
 16466  0D6E  02BC               	subwf	___ftdiv@exp,f
 16467  0D6F  0831               	movf	___ftdiv@f1,w
 16468  0D70  00B4               	movwf	??___ftdiv
 16469  0D71  0832               	movf	___ftdiv@f1+1,w
 16470  0D72  00B5               	movwf	??___ftdiv+1
 16471  0D73  0833               	movf	___ftdiv@f1+2,w
 16472  0D74  00B6               	movwf	??___ftdiv+2
 16473  0D75  3010               	movlw	16
 16474  0D76                     u4735:	
 16475  0D76  36B6               	lsrf	??___ftdiv+2,f
 16476  0D77  0CB5               	rrf	??___ftdiv+1,f
 16477  0D78  0CB4               	rrf	??___ftdiv,f
 16478  0D79  0B89               	decfsz	9,f
 16479  0D7A  2D76               	goto	u4735
 16480  0D7B  0834               	movf	??___ftdiv,w
 16481  0D7C  00B7               	movwf	??___ftdiv+3
 16482  0D7D  0837               	movf	??___ftdiv+3,w
 16483  0D7E  00BD               	movwf	___ftdiv@sign
 16484  0D7F  082E               	movf	___ftdiv@f2,w
 16485  0D80  00B4               	movwf	??___ftdiv
 16486  0D81  082F               	movf	___ftdiv@f2+1,w
 16487  0D82  00B5               	movwf	??___ftdiv+1
 16488  0D83  0830               	movf	___ftdiv@f2+2,w
 16489  0D84  00B6               	movwf	??___ftdiv+2
 16490  0D85  3010               	movlw	16
 16491  0D86                     u4745:	
 16492  0D86  36B6               	lsrf	??___ftdiv+2,f
 16493  0D87  0CB5               	rrf	??___ftdiv+1,f
 16494  0D88  0CB4               	rrf	??___ftdiv,f
 16495  0D89  0B89               	decfsz	9,f
 16496  0D8A  2D86               	goto	u4745
 16497  0D8B  0834               	movf	??___ftdiv,w
 16498  0D8C  00B7               	movwf	??___ftdiv+3
 16499  0D8D  0837               	movf	??___ftdiv+3,w
 16500  0D8E  06BD               	xorwf	___ftdiv@sign,f
 16501  0D8F  3080               	movlw	128
 16502  0D90  00B4               	movwf	??___ftdiv
 16503  0D91  0834               	movf	??___ftdiv,w
 16504  0D92  05BD               	andwf	___ftdiv@sign,f
 16505  0D93  17B2               	bsf	___ftdiv@f1+1,7
 16506  0D94  30FF               	movlw	255
 16507  0D95  05B1               	andwf	___ftdiv@f1,f
 16508  0D96  30FF               	movlw	255
 16509  0D97  05B2               	andwf	___ftdiv@f1+1,f
 16510  0D98  3000               	movlw	0
 16511  0D99  05B3               	andwf	___ftdiv@f1+2,f
 16512  0D9A  17AF               	bsf	___ftdiv@f2+1,7
 16513  0D9B  30FF               	movlw	255
 16514  0D9C  05AE               	andwf	___ftdiv@f2,f
 16515  0D9D  30FF               	movlw	255
 16516  0D9E  05AF               	andwf	___ftdiv@f2+1,f
 16517  0D9F  3000               	movlw	0
 16518  0DA0  05B0               	andwf	___ftdiv@f2+2,f
 16519  0DA1  3018               	movlw	24
 16520  0DA2  00B4               	movwf	??___ftdiv
 16521  0DA3  0834               	movf	??___ftdiv,w
 16522  0DA4  00B8               	movwf	___ftdiv@cntr
 16523  0DA5                     l5834:	
 16524  0DA5  3001               	movlw	1
 16525  0DA6                     u4755:	
 16526  0DA6  35B9               	lslf	___ftdiv@f3,f
 16527  0DA7  0DBA               	rlf	___ftdiv@f3+1,f
 16528  0DA8  0DBB               	rlf	___ftdiv@f3+2,f
 16529  0DA9  0B89               	decfsz	9,f
 16530  0DAA  2DA6               	goto	u4755
 16531  0DAB  0830               	movf	___ftdiv@f2+2,w
 16532  0DAC  0233               	subwf	___ftdiv@f1+2,w
 16533  0DAD  1D03               	skipz
 16534  0DAE  2DB5               	goto	u4765
 16535  0DAF  082F               	movf	___ftdiv@f2+1,w
 16536  0DB0  0232               	subwf	___ftdiv@f1+1,w
 16537  0DB1  1D03               	skipz
 16538  0DB2  2DB5               	goto	u4765
 16539  0DB3  082E               	movf	___ftdiv@f2,w
 16540  0DB4  0231               	subwf	___ftdiv@f1,w
 16541  0DB5                     u4765:	
 16542  0DB5  1C03               	skipc
 16543  0DB6  2DBE               	goto	l5842
 16544  0DB7  082E               	movf	___ftdiv@f2,w
 16545  0DB8  02B1               	subwf	___ftdiv@f1,f
 16546  0DB9  082F               	movf	___ftdiv@f2+1,w
 16547  0DBA  3BB2               	subwfb	___ftdiv@f1+1,f
 16548  0DBB  0830               	movf	___ftdiv@f2+2,w
 16549  0DBC  3BB3               	subwfb	___ftdiv@f1+2,f
 16550  0DBD  1439               	bsf	___ftdiv@f3,0
 16551  0DBE                     l5842:	
 16552  0DBE  3001               	movlw	1
 16553  0DBF                     u4775:	
 16554  0DBF  35B1               	lslf	___ftdiv@f1,f
 16555  0DC0  0DB2               	rlf	___ftdiv@f1+1,f
 16556  0DC1  0DB3               	rlf	___ftdiv@f1+2,f
 16557  0DC2  0B89               	decfsz	9,f
 16558  0DC3  2DBF               	goto	u4775
 16559  0DC4  3001               	movlw	1
 16560  0DC5  02B8               	subwf	___ftdiv@cntr,f
 16561  0DC6  1D03               	btfss	3,2
 16562  0DC7  2DA5               	goto	l5834
 16563  0DC8  0839               	movf	___ftdiv@f3,w
 16564  0DC9  00A0               	movwf	___ftpack@arg
 16565  0DCA  083A               	movf	___ftdiv@f3+1,w
 16566  0DCB  00A1               	movwf	___ftpack@arg+1
 16567  0DCC  083B               	movf	___ftdiv@f3+2,w
 16568  0DCD  00A2               	movwf	___ftpack@arg+2
 16569  0DCE  083C               	movf	___ftdiv@exp,w
 16570  0DCF  00B4               	movwf	??___ftdiv
 16571  0DD0  0834               	movf	??___ftdiv,w
 16572  0DD1  00A3               	movwf	___ftpack@exp
 16573  0DD2  083D               	movf	___ftdiv@sign,w
 16574  0DD3  00B5               	movwf	??___ftdiv+1
 16575  0DD4  0835               	movf	??___ftdiv+1,w
 16576  0DD5  00A4               	movwf	___ftpack@sign
 16577  0DD6  3196  2670         	fcall	___ftpack
 16578  0DD8  0020               	movlb	0	; select bank0
 16579  0DD9  0820               	movf	?___ftpack,w
 16580  0DDA  00AE               	movwf	?___ftdiv
 16581  0DDB  0821               	movf	?___ftpack+1,w
 16582  0DDC  00AF               	movwf	?___ftdiv+1
 16583  0DDD  0822               	movf	?___ftpack+2,w
 16584  0DDE  00B0               	movwf	?___ftdiv+2
 16585  0DDF  0008               	return
 16586  0DE0                     __end_of___ftdiv:	
 16587                           
 16588                           	psect	text113
 16589  0382                     __ptext113:	
 16590 ;; *************** function ___ftadd *****************
 16591 ;; Defined at:
 16592 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16593 ;; Parameters:    Size  Location     Type
 16594 ;;  f1              3   33[BANK0 ] float 
 16595 ;;  f2              3   36[BANK0 ] float 
 16596 ;; Auto vars:     Size  Location     Type
 16597 ;;  exp1            1   45[BANK0 ] unsigned char 
 16598 ;;  exp2            1   44[BANK0 ] unsigned char 
 16599 ;;  sign            1   43[BANK0 ] unsigned char 
 16600 ;; Return value:  Size  Location     Type
 16601 ;;                  3   33[BANK0 ] float 
 16602 ;; Registers used:
 16603 ;;		wreg, status,2, status,0, pclath, cstack
 16604 ;; Tracked objects:
 16605 ;;		On entry : 0/0
 16606 ;;		On exit  : 0/0
 16607 ;;		Unchanged: 0/0
 16608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16609 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16613 ;;Total ram usage:       13 bytes
 16614 ;; Hardware stack levels used:    1
 16615 ;; Hardware stack levels required when called:    5
 16616 ;; This function calls:
 16617 ;;		___ftpack
 16618 ;; This function is called by:
 16619 ;;		_getDimmerLights_PercentToValue
 16620 ;;		_getDimmerLights_ValueToPercent
 16621 ;; This function uses a non-reentrant model
 16622 ;;
 16623                           
 16624                           
 16625                           ;psect for function ___ftadd
 16626  0382                     ___ftadd:	
 16627                           
 16628                           ;incstack = 0
 16629                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16630  0382  0020               	movlb	0	; select bank0
 16631  0383  0841               	movf	___ftadd@f1,w
 16632  0384  00C7               	movwf	??___ftadd
 16633  0385  0842               	movf	___ftadd@f1+1,w
 16634  0386  00C8               	movwf	??___ftadd+1
 16635  0387  0843               	movf	___ftadd@f1+2,w
 16636  0388  00C9               	movwf	??___ftadd+2
 16637  0389  1003               	clrc
 16638  038A  0D48               	rlf	??___ftadd+1,w
 16639  038B  0D49               	rlf	??___ftadd+2,w
 16640  038C  00CA               	movwf	??___ftadd+3
 16641  038D  084A               	movf	??___ftadd+3,w
 16642  038E  00CD               	movwf	___ftadd@exp1
 16643  038F  0844               	movf	___ftadd@f2,w
 16644  0390  00C7               	movwf	??___ftadd
 16645  0391  0845               	movf	___ftadd@f2+1,w
 16646  0392  00C8               	movwf	??___ftadd+1
 16647  0393  0846               	movf	___ftadd@f2+2,w
 16648  0394  00C9               	movwf	??___ftadd+2
 16649  0395  1003               	clrc
 16650  0396  0D48               	rlf	??___ftadd+1,w
 16651  0397  0D49               	rlf	??___ftadd+2,w
 16652  0398  00CA               	movwf	??___ftadd+3
 16653  0399  084A               	movf	??___ftadd+3,w
 16654  039A  00CC               	movwf	___ftadd@exp2
 16655  039B  084D               	movf	___ftadd@exp1,w
 16656  039C  1903               	btfsc	3,2
 16657  039D  2BAA               	goto	l5744
 16658  039E  084C               	movf	___ftadd@exp2,w
 16659  039F  024D               	subwf	___ftadd@exp1,w
 16660  03A0  1803               	skipnc
 16661  03A1  2BB1               	goto	l5748
 16662  03A2  034D               	decf	___ftadd@exp1,w
 16663  03A3  3AFF               	xorlw	255
 16664  03A4  074C               	addwf	___ftadd@exp2,w
 16665  03A5  00C7               	movwf	??___ftadd
 16666  03A6  3019               	movlw	25
 16667  03A7  0247               	subwf	??___ftadd,w
 16668  03A8  1C03               	skipc
 16669  03A9  2BB1               	goto	l5748
 16670  03AA                     l5744:	
 16671  03AA  0844               	movf	___ftadd@f2,w
 16672  03AB  00C1               	movwf	?___ftadd
 16673  03AC  0845               	movf	___ftadd@f2+1,w
 16674  03AD  00C2               	movwf	?___ftadd+1
 16675  03AE  0846               	movf	___ftadd@f2+2,w
 16676  03AF  00C3               	movwf	?___ftadd+2
 16677  03B0  0008               	return
 16678  03B1                     l5748:	
 16679  03B1  084C               	movf	___ftadd@exp2,w
 16680  03B2  1903               	btfsc	3,2
 16681  03B3  0008               	return
 16682  03B4  084D               	movf	___ftadd@exp1,w
 16683  03B5  024C               	subwf	___ftadd@exp2,w
 16684  03B6  1803               	skipnc
 16685  03B7  2BC0               	goto	l5754
 16686  03B8  034C               	decf	___ftadd@exp2,w
 16687  03B9  3AFF               	xorlw	255
 16688  03BA  074D               	addwf	___ftadd@exp1,w
 16689  03BB  00C7               	movwf	??___ftadd
 16690  03BC  3019               	movlw	25
 16691  03BD  0247               	subwf	??___ftadd,w
 16692  03BE  1803               	btfsc	3,0
 16693  03BF  0008               	return
 16694  03C0                     l5754:	
 16695  03C0  3006               	movlw	6
 16696  03C1  00C7               	movwf	??___ftadd
 16697  03C2  0847               	movf	??___ftadd,w
 16698  03C3  00CB               	movwf	___ftadd@sign
 16699  03C4  1BC3               	btfsc	___ftadd@f1+2,7
 16700  03C5  17CB               	bsf	___ftadd@sign,7
 16701  03C6  1BC6               	btfsc	___ftadd@f2+2,7
 16702  03C7  174B               	bsf	___ftadd@sign,6
 16703  03C8  17C2               	bsf	___ftadd@f1+1,7
 16704  03C9  30FF               	movlw	255
 16705  03CA  05C1               	andwf	___ftadd@f1,f
 16706  03CB  30FF               	movlw	255
 16707  03CC  05C2               	andwf	___ftadd@f1+1,f
 16708  03CD  3000               	movlw	0
 16709  03CE  05C3               	andwf	___ftadd@f1+2,f
 16710  03CF  17C5               	bsf	___ftadd@f2+1,7
 16711  03D0  30FF               	movlw	255
 16712  03D1  05C4               	andwf	___ftadd@f2,f
 16713  03D2  30FF               	movlw	255
 16714  03D3  05C5               	andwf	___ftadd@f2+1,f
 16715  03D4  3000               	movlw	0
 16716  03D5  05C6               	andwf	___ftadd@f2+2,f
 16717  03D6  084C               	movf	___ftadd@exp2,w
 16718  03D7  024D               	subwf	___ftadd@exp1,w
 16719  03D8  1803               	skipnc
 16720  03D9  2BFC               	goto	l5776
 16721  03DA                     l5766:	
 16722  03DA  3001               	movlw	1
 16723  03DB                     u4575:	
 16724  03DB  35C4               	lslf	___ftadd@f2,f
 16725  03DC  0DC5               	rlf	___ftadd@f2+1,f
 16726  03DD  0DC6               	rlf	___ftadd@f2+2,f
 16727  03DE  0B89               	decfsz	9,f
 16728  03DF  2BDB               	goto	u4575
 16729  03E0  3001               	movlw	1
 16730  03E1  02CC               	subwf	___ftadd@exp2,f
 16731  03E2  084C               	movf	___ftadd@exp2,w
 16732  03E3  064D               	xorwf	___ftadd@exp1,w
 16733  03E4  1903               	skipnz
 16734  03E5  2BF7               	goto	l5774
 16735  03E6  3001               	movlw	1
 16736  03E7  02CB               	subwf	___ftadd@sign,f
 16737  03E8  084B               	movf	___ftadd@sign,w
 16738  03E9  3907               	andlw	7
 16739  03EA  1903               	btfsc	3,2
 16740  03EB  2BF7               	goto	l5774
 16741  03EC  2BDA               	goto	l5766
 16742  03ED                     l5772:	
 16743  03ED  3001               	movlw	1
 16744  03EE                     u4605:	
 16745  03EE  36C3               	lsrf	___ftadd@f1+2,f
 16746  03EF  0CC2               	rrf	___ftadd@f1+1,f
 16747  03F0  0CC1               	rrf	___ftadd@f1,f
 16748  03F1  0B89               	decfsz	9,f
 16749  03F2  2BEE               	goto	u4605
 16750  03F3  3001               	movlw	1
 16751  03F4  00C7               	movwf	??___ftadd
 16752  03F5  0847               	movf	??___ftadd,w
 16753  03F6  07CD               	addwf	___ftadd@exp1,f
 16754  03F7                     l5774:	
 16755  03F7  084D               	movf	___ftadd@exp1,w
 16756  03F8  064C               	xorwf	___ftadd@exp2,w
 16757  03F9  1903               	btfsc	3,2
 16758  03FA  2C21               	goto	l2841
 16759  03FB  2BED               	goto	l5772
 16760  03FC                     l5776:	
 16761  03FC  084D               	movf	___ftadd@exp1,w
 16762  03FD  024C               	subwf	___ftadd@exp2,w
 16763  03FE  1803               	skipnc
 16764  03FF  2C21               	goto	l2841
 16765  0400                     l5778:	
 16766  0400  3001               	movlw	1
 16767  0401                     u4635:	
 16768  0401  35C1               	lslf	___ftadd@f1,f
 16769  0402  0DC2               	rlf	___ftadd@f1+1,f
 16770  0403  0DC3               	rlf	___ftadd@f1+2,f
 16771  0404  0B89               	decfsz	9,f
 16772  0405  2C01               	goto	u4635
 16773  0406  3001               	movlw	1
 16774  0407  02CD               	subwf	___ftadd@exp1,f
 16775  0408  084C               	movf	___ftadd@exp2,w
 16776  0409  064D               	xorwf	___ftadd@exp1,w
 16777  040A  1903               	skipnz
 16778  040B  2C1D               	goto	l5786
 16779  040C  3001               	movlw	1
 16780  040D  02CB               	subwf	___ftadd@sign,f
 16781  040E  084B               	movf	___ftadd@sign,w
 16782  040F  3907               	andlw	7
 16783  0410  1903               	btfsc	3,2
 16784  0411  2C1D               	goto	l5786
 16785  0412  2C00               	goto	l5778
 16786  0413                     l5784:	
 16787  0413  3001               	movlw	1
 16788  0414                     u4665:	
 16789  0414  36C6               	lsrf	___ftadd@f2+2,f
 16790  0415  0CC5               	rrf	___ftadd@f2+1,f
 16791  0416  0CC4               	rrf	___ftadd@f2,f
 16792  0417  0B89               	decfsz	9,f
 16793  0418  2C14               	goto	u4665
 16794  0419  3001               	movlw	1
 16795  041A  00C7               	movwf	??___ftadd
 16796  041B  0847               	movf	??___ftadd,w
 16797  041C  07CC               	addwf	___ftadd@exp2,f
 16798  041D                     l5786:	
 16799  041D  084D               	movf	___ftadd@exp1,w
 16800  041E  064C               	xorwf	___ftadd@exp2,w
 16801  041F  1D03               	skipz
 16802  0420  2C13               	goto	l5784
 16803  0421                     l2841:	
 16804  0421  1FCB               	btfss	___ftadd@sign,7
 16805  0422  2C33               	goto	l5790
 16806  0423  30FF               	movlw	255
 16807  0424  06C1               	xorwf	___ftadd@f1,f
 16808  0425  30FF               	movlw	255
 16809  0426  06C2               	xorwf	___ftadd@f1+1,f
 16810  0427  30FF               	movlw	255
 16811  0428  06C3               	xorwf	___ftadd@f1+2,f
 16812  0429  3001               	movlw	1
 16813  042A  07C1               	addwf	___ftadd@f1,f
 16814  042B  3000               	movlw	0
 16815  042C  1803               	skipnc
 16816  042D  3001               	movlw	1
 16817  042E  07C2               	addwf	___ftadd@f1+1,f
 16818  042F  3000               	movlw	0
 16819  0430  1803               	skipnc
 16820  0431  3001               	movlw	1
 16821  0432  07C3               	addwf	___ftadd@f1+2,f
 16822  0433                     l5790:	
 16823  0433  1F4B               	btfss	___ftadd@sign,6
 16824  0434  2C45               	goto	l5794
 16825  0435  30FF               	movlw	255
 16826  0436  06C4               	xorwf	___ftadd@f2,f
 16827  0437  30FF               	movlw	255
 16828  0438  06C5               	xorwf	___ftadd@f2+1,f
 16829  0439  30FF               	movlw	255
 16830  043A  06C6               	xorwf	___ftadd@f2+2,f
 16831  043B  3001               	movlw	1
 16832  043C  07C4               	addwf	___ftadd@f2,f
 16833  043D  3000               	movlw	0
 16834  043E  1803               	skipnc
 16835  043F  3001               	movlw	1
 16836  0440  07C5               	addwf	___ftadd@f2+1,f
 16837  0441  3000               	movlw	0
 16838  0442  1803               	skipnc
 16839  0443  3001               	movlw	1
 16840  0444  07C6               	addwf	___ftadd@f2+2,f
 16841  0445                     l5794:	
 16842  0445  01CB               	clrf	___ftadd@sign
 16843  0446  0841               	movf	___ftadd@f1,w
 16844  0447  07C4               	addwf	___ftadd@f2,f
 16845  0448  0842               	movf	___ftadd@f1+1,w
 16846  0449  3DC5               	addwfc	___ftadd@f2+1,f
 16847  044A  0843               	movf	___ftadd@f1+2,w
 16848  044B  3DC6               	addwfc	___ftadd@f2+2,f
 16849  044C  1FC6               	btfss	___ftadd@f2+2,7
 16850  044D  2C60               	goto	l5804
 16851  044E  30FF               	movlw	255
 16852  044F  06C4               	xorwf	___ftadd@f2,f
 16853  0450  30FF               	movlw	255
 16854  0451  06C5               	xorwf	___ftadd@f2+1,f
 16855  0452  30FF               	movlw	255
 16856  0453  06C6               	xorwf	___ftadd@f2+2,f
 16857  0454  3001               	movlw	1
 16858  0455  07C4               	addwf	___ftadd@f2,f
 16859  0456  3000               	movlw	0
 16860  0457  1803               	skipnc
 16861  0458  3001               	movlw	1
 16862  0459  07C5               	addwf	___ftadd@f2+1,f
 16863  045A  3000               	movlw	0
 16864  045B  1803               	skipnc
 16865  045C  3001               	movlw	1
 16866  045D  07C6               	addwf	___ftadd@f2+2,f
 16867  045E  01CB               	clrf	___ftadd@sign
 16868  045F  0ACB               	incf	___ftadd@sign,f
 16869  0460                     l5804:	
 16870  0460  0844               	movf	___ftadd@f2,w
 16871  0461  00A0               	movwf	___ftpack@arg
 16872  0462  0845               	movf	___ftadd@f2+1,w
 16873  0463  00A1               	movwf	___ftpack@arg+1
 16874  0464  0846               	movf	___ftadd@f2+2,w
 16875  0465  00A2               	movwf	___ftpack@arg+2
 16876  0466  084D               	movf	___ftadd@exp1,w
 16877  0467  00C7               	movwf	??___ftadd
 16878  0468  0847               	movf	??___ftadd,w
 16879  0469  00A3               	movwf	___ftpack@exp
 16880  046A  084B               	movf	___ftadd@sign,w
 16881  046B  00C8               	movwf	??___ftadd+1
 16882  046C  0848               	movf	??___ftadd+1,w
 16883  046D  00A4               	movwf	___ftpack@sign
 16884  046E  3196  2670         	fcall	___ftpack
 16885  0470  0020               	movlb	0	; select bank0
 16886  0471  0820               	movf	?___ftpack,w
 16887  0472  00C1               	movwf	?___ftadd
 16888  0473  0821               	movf	?___ftpack+1,w
 16889  0474  00C2               	movwf	?___ftadd+1
 16890  0475  0822               	movf	?___ftpack+2,w
 16891  0476  00C3               	movwf	?___ftadd+2
 16892  0477  0008               	return
 16893  0478                     __end_of___ftadd:	
 16894                           
 16895                           	psect	text114
 16896  1091                     __ptext114:	
 16897 ;; *************** function ___awtoft *****************
 16898 ;; Defined at:
 16899 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16900 ;; Parameters:    Size  Location     Type
 16901 ;;  c               2    8[BANK0 ] int 
 16902 ;; Auto vars:     Size  Location     Type
 16903 ;;  sign            1   13[BANK0 ] unsigned char 
 16904 ;; Return value:  Size  Location     Type
 16905 ;;                  3    8[BANK0 ] float 
 16906 ;; Registers used:
 16907 ;;		wreg, status,2, status,0, pclath, cstack
 16908 ;; Tracked objects:
 16909 ;;		On entry : 0/0
 16910 ;;		On exit  : 0/0
 16911 ;;		Unchanged: 0/0
 16912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16913 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16915 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16916 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16917 ;;Total ram usage:        6 bytes
 16918 ;; Hardware stack levels used:    1
 16919 ;; Hardware stack levels required when called:    5
 16920 ;; This function calls:
 16921 ;;		___ftpack
 16922 ;; This function is called by:
 16923 ;;		_getDimmerLights_PercentToValue
 16924 ;;		_getDimmerLights_ValueToPercent
 16925 ;; This function uses a non-reentrant model
 16926 ;;
 16927                           
 16928                           
 16929                           ;psect for function ___awtoft
 16930  1091                     ___awtoft:	
 16931                           
 16932                           ;incstack = 0
 16933                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16934  1091  0020               	movlb	0	; select bank0
 16935  1092  01AD               	clrf	___awtoft@sign
 16936  1093  1FA9               	btfss	___awtoft@c+1,7
 16937  1094  289C               	goto	l5732
 16938  1095  09A8               	comf	___awtoft@c,f
 16939  1096  09A9               	comf	___awtoft@c+1,f
 16940  1097  0AA8               	incf	___awtoft@c,f
 16941  1098  1903               	skipnz
 16942  1099  0AA9               	incf	___awtoft@c+1,f
 16943  109A  01AD               	clrf	___awtoft@sign
 16944  109B  0AAD               	incf	___awtoft@sign,f
 16945  109C                     l5732:	
 16946  109C  0828               	movf	___awtoft@c,w
 16947  109D  00A0               	movwf	___ftpack@arg
 16948  109E  0829               	movf	___awtoft@c+1,w
 16949  109F  00A1               	movwf	___ftpack@arg+1
 16950  10A0  01A2               	clrf	___ftpack@arg+2
 16951  10A1  308E               	movlw	142
 16952  10A2  00AB               	movwf	??___awtoft
 16953  10A3  082B               	movf	??___awtoft,w
 16954  10A4  00A3               	movwf	___ftpack@exp
 16955  10A5  082D               	movf	___awtoft@sign,w
 16956  10A6  00AC               	movwf	??___awtoft+1
 16957  10A7  082C               	movf	??___awtoft+1,w
 16958  10A8  00A4               	movwf	___ftpack@sign
 16959  10A9  3196  2670         	fcall	___ftpack
 16960  10AB  0020               	movlb	0	; select bank0
 16961  10AC  0820               	movf	?___ftpack,w
 16962  10AD  00A8               	movwf	?___awtoft
 16963  10AE  0821               	movf	?___ftpack+1,w
 16964  10AF  00A9               	movwf	?___awtoft+1
 16965  10B0  0822               	movf	?___ftpack+2,w
 16966  10B1  00AA               	movwf	?___awtoft+2
 16967  10B2  0008               	return
 16968  10B3                     __end_of___awtoft:	
 16969                           
 16970                           	psect	text115
 16971  1670                     __ptext115:	
 16972 ;; *************** function ___ftpack *****************
 16973 ;; Defined at:
 16974 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16975 ;; Parameters:    Size  Location     Type
 16976 ;;  arg             3    0[BANK0 ] unsigned um
 16977 ;;  exp             1    3[BANK0 ] unsigned char 
 16978 ;;  sign            1    4[BANK0 ] unsigned char 
 16979 ;; Auto vars:     Size  Location     Type
 16980 ;;		None
 16981 ;; Return value:  Size  Location     Type
 16982 ;;                  3    0[BANK0 ] float 
 16983 ;; Registers used:
 16984 ;;		wreg, status,2, status,0
 16985 ;; Tracked objects:
 16986 ;;		On entry : 0/0
 16987 ;;		On exit  : 0/0
 16988 ;;		Unchanged: 0/0
 16989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16990 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16992 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16993 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16994 ;;Total ram usage:        8 bytes
 16995 ;; Hardware stack levels used:    1
 16996 ;; Hardware stack levels required when called:    4
 16997 ;; This function calls:
 16998 ;;		Nothing
 16999 ;; This function is called by:
 17000 ;;		___awtoft
 17001 ;;		___ftadd
 17002 ;;		___ftdiv
 17003 ;;		___ftmul
 17004 ;; This function uses a non-reentrant model
 17005 ;;
 17006                           
 17007                           
 17008                           ;psect for function ___ftpack
 17009  1670                     ___ftpack:	
 17010                           
 17011                           ;incstack = 0
 17012                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17013  1670  0020               	movlb	0	; select bank0
 17014  1671  0823               	movf	___ftpack@exp,w
 17015  1672  1903               	btfsc	3,2
 17016  1673  2E79               	goto	l5600
 17017  1674  0822               	movf	___ftpack@arg+2,w
 17018  1675  0421               	iorwf	___ftpack@arg+1,w
 17019  1676  0420               	iorwf	___ftpack@arg,w
 17020  1677  1D03               	skipz
 17021  1678  2E8A               	goto	l5606
 17022  1679                     l5600:	
 17023  1679  3000               	movlw	0
 17024  167A  00A0               	movwf	?___ftpack
 17025  167B  3000               	movlw	0
 17026  167C  00A1               	movwf	?___ftpack+1
 17027  167D  3000               	movlw	0
 17028  167E  00A2               	movwf	?___ftpack+2
 17029  167F  0008               	return
 17030  1680                     l5604:	
 17031  1680  3001               	movlw	1
 17032  1681  00A5               	movwf	??___ftpack
 17033  1682  0825               	movf	??___ftpack,w
 17034  1683  07A3               	addwf	___ftpack@exp,f
 17035  1684  3001               	movlw	1
 17036  1685                     u4205:	
 17037  1685  36A2               	lsrf	___ftpack@arg+2,f
 17038  1686  0CA1               	rrf	___ftpack@arg+1,f
 17039  1687  0CA0               	rrf	___ftpack@arg,f
 17040  1688  0B89               	decfsz	9,f
 17041  1689  2E85               	goto	u4205
 17042  168A                     l5606:	
 17043  168A  30FE               	movlw	254
 17044  168B  0522               	andwf	___ftpack@arg+2,w
 17045  168C  1903               	btfsc	3,2
 17046  168D  2EA3               	goto	l2812
 17047  168E  2E80               	goto	l5604
 17048  168F                     l5608:	
 17049  168F  3001               	movlw	1
 17050  1690  00A5               	movwf	??___ftpack
 17051  1691  0825               	movf	??___ftpack,w
 17052  1692  07A3               	addwf	___ftpack@exp,f
 17053  1693  3001               	movlw	1
 17054  1694  07A0               	addwf	___ftpack@arg,f
 17055  1695  3000               	movlw	0
 17056  1696  1803               	skipnc
 17057  1697  3001               	movlw	1
 17058  1698  07A1               	addwf	___ftpack@arg+1,f
 17059  1699  3000               	movlw	0
 17060  169A  1803               	skipnc
 17061  169B  3001               	movlw	1
 17062  169C  07A2               	addwf	___ftpack@arg+2,f
 17063  169D  3001               	movlw	1
 17064  169E                     u4225:	
 17065  169E  36A2               	lsrf	___ftpack@arg+2,f
 17066  169F  0CA1               	rrf	___ftpack@arg+1,f
 17067  16A0  0CA0               	rrf	___ftpack@arg,f
 17068  16A1  0B89               	decfsz	9,f
 17069  16A2  2E9E               	goto	u4225
 17070  16A3                     l2812:	
 17071  16A3  30FF               	movlw	255
 17072  16A4  0522               	andwf	___ftpack@arg+2,w
 17073  16A5  1903               	btfsc	3,2
 17074  16A6  2EB0               	goto	l5616
 17075  16A7  2E8F               	goto	l5608
 17076  16A8                     l5614:	
 17077  16A8  3001               	movlw	1
 17078  16A9  02A3               	subwf	___ftpack@exp,f
 17079  16AA  3001               	movlw	1
 17080  16AB                     u4245:	
 17081  16AB  35A0               	lslf	___ftpack@arg,f
 17082  16AC  0DA1               	rlf	___ftpack@arg+1,f
 17083  16AD  0DA2               	rlf	___ftpack@arg+2,f
 17084  16AE  0B89               	decfsz	9,f
 17085  16AF  2EAB               	goto	u4245
 17086  16B0                     l5616:	
 17087  16B0  1FA1               	btfss	___ftpack@arg+1,7
 17088  16B1  2EA8               	goto	l5614
 17089  16B2  1823               	btfsc	___ftpack@exp,0
 17090  16B3  2EBA               	goto	l2818
 17091  16B4  30FF               	movlw	255
 17092  16B5  05A0               	andwf	___ftpack@arg,f
 17093  16B6  307F               	movlw	127
 17094  16B7  05A1               	andwf	___ftpack@arg+1,f
 17095  16B8  30FF               	movlw	255
 17096  16B9  05A2               	andwf	___ftpack@arg+2,f
 17097  16BA                     l2818:	
 17098  16BA  1003               	clrc
 17099  16BB  0CA3               	rrf	___ftpack@exp,f
 17100  16BC  0823               	movf	___ftpack@exp,w
 17101  16BD  00A5               	movwf	??___ftpack
 17102  16BE  01A6               	clrf	??___ftpack+1
 17103  16BF  01A7               	clrf	??___ftpack+2
 17104  16C0  3010               	movlw	16
 17105  16C1                     u4275:	
 17106  16C1  35A5               	lslf	??___ftpack,f
 17107  16C2  0DA6               	rlf	??___ftpack+1,f
 17108  16C3  0DA7               	rlf	??___ftpack+2,f
 17109  16C4  0B89               	decfsz	9,f
 17110  16C5  2EC1               	goto	u4275
 17111  16C6  0825               	movf	??___ftpack,w
 17112  16C7  04A0               	iorwf	___ftpack@arg,f
 17113  16C8  0826               	movf	??___ftpack+1,w
 17114  16C9  04A1               	iorwf	___ftpack@arg+1,f
 17115  16CA  0827               	movf	??___ftpack+2,w
 17116  16CB  04A2               	iorwf	___ftpack@arg+2,f
 17117  16CC  0824               	movf	___ftpack@sign,w
 17118  16CD  1903               	btfsc	3,2
 17119  16CE  0008               	return
 17120  16CF  17A2               	bsf	___ftpack@arg+2,7
 17121  16D0  0008               	return
 17122  16D1                     __end_of___ftpack:	
 17123                           
 17124                           	psect	text116
 17125  1C6A                     __ptext116:	
 17126 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17127 ;; Defined at:
 17128 ;;		line 67 in file "../src/Dimmer_B1.c"
 17129 ;; Parameters:    Size  Location     Type
 17130 ;;  lights          1    wreg     unsigned char 
 17131 ;; Auto vars:     Size  Location     Type
 17132 ;;  lights          1    1[BANK0 ] unsigned char 
 17133 ;;  value           1    2[BANK0 ] unsigned char 
 17134 ;; Return value:  Size  Location     Type
 17135 ;;                  1    wreg      unsigned char 
 17136 ;; Registers used:
 17137 ;;		wreg, status,2
 17138 ;; Tracked objects:
 17139 ;;		On entry : 0/0
 17140 ;;		On exit  : 0/0
 17141 ;;		Unchanged: 0/0
 17142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17144 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17146 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17147 ;;Total ram usage:        3 bytes
 17148 ;; Hardware stack levels used:    1
 17149 ;; Hardware stack levels required when called:    4
 17150 ;; This function calls:
 17151 ;;		Nothing
 17152 ;; This function is called by:
 17153 ;;		_setDimmerLights_Dimming
 17154 ;; This function uses a non-reentrant model
 17155 ;;
 17156                           
 17157                           
 17158                           ;psect for function _getDimmerIntr_DimmingValue
 17159  1C6A                     _getDimmerIntr_DimmingValue:	
 17160                           
 17161                           ;incstack = 0
 17162                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17163                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17164  1C6A  0020               	movlb	0	; select bank0
 17165  1C6B  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 17166                           
 17167                           ;Dimmer_B1.c: 68: char value = 0;
 17168  1C6C  01A2               	clrf	getDimmerIntr_DimmingValue@value
 17169                           
 17170                           ;Dimmer_B1.c: 70: if (lights == 1) {
 17171  1C6D  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 17172  1C6E  3A01               	xorlw	1
 17173  1C6F  1D03               	skipz
 17174  1C70  2C77               	goto	l683
 17175                           
 17176                           ;Dimmer_B1.c: 71: value = DimmerIntr1.DimmingValue;
 17177  1C71  0021               	movlb	1	; select bank1
 17178  1C72  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 17179  1C73  0020               	movlb	0	; select bank0
 17180  1C74  00A0               	movwf	??_getDimmerIntr_DimmingValue
 17181  1C75  0820               	movf	??_getDimmerIntr_DimmingValue,w
 17182  1C76  00A2               	movwf	getDimmerIntr_DimmingValue@value
 17183  1C77                     l683:	
 17184                           
 17185                           ;Dimmer_B1.c: 72: }
 17186                           ;Dimmer_B1.c: 84: return value;
 17187  1C77  0822               	movf	getDimmerIntr_DimmingValue@value,w
 17188  1C78  0008               	return
 17189  1C79                     __end_of_getDimmerIntr_DimmingValue:	
 17190                           
 17191                           	psect	text117
 17192  1E1F                     __ptext117:	
 17193 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17194 ;; Defined at:
 17195 ;;		line 916 in file "../src/Dimmer_B1.c"
 17196 ;; Parameters:    Size  Location     Type
 17197 ;;  lights          1    wreg     unsigned char 
 17198 ;; Auto vars:     Size  Location     Type
 17199 ;;  lights          1    0[COMMON] unsigned char 
 17200 ;;  allow           1    2[BANK0 ] unsigned char 
 17201 ;; Return value:  Size  Location     Type
 17202 ;;                  1    wreg      unsigned char 
 17203 ;; Registers used:
 17204 ;;		wreg, status,2, pclath, cstack
 17205 ;; Tracked objects:
 17206 ;;		On entry : 0/0
 17207 ;;		On exit  : 0/0
 17208 ;;		Unchanged: 0/0
 17209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17211 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17213 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17214 ;;Total ram usage:        3 bytes
 17215 ;; Hardware stack levels used:    1
 17216 ;; Hardware stack levels required when called:    5
 17217 ;; This function calls:
 17218 ;;		_getLoad_OK
 17219 ;; This function is called by:
 17220 ;;		_setDimmerLights_Main
 17221 ;; This function uses a non-reentrant model
 17222 ;;
 17223                           
 17224                           
 17225                           ;psect for function _getDimmerLights_Allow_Condition
 17226  1E1F                     _getDimmerLights_Allow_Condition:	
 17227                           
 17228                           ;Dimmer_B1.c: 917: char allow = 0;
 17229                           
 17230                           ;incstack = 0
 17231                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 17232  1E1F  0020               	movlb	0	; select bank0
 17233  1E20  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 17234                           
 17235                           ;Dimmer_B1.c: 923: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17236  1E21  01A3               	clrf	_getDimmerLights_Allow_Condition$2141
 17237  1E22  0AA3               	incf	_getDimmerLights_Allow_Condition$2141,f
 17238  1E23  319B  237D  319E   	fcall	_getLoad_OK
 17239  1E26  3800               	iorlw	0
 17240  1E27  1D03               	skipz
 17241  1E28  2E2E               	goto	l6638
 17242  1E29  0023               	movlb	3	; select bank3
 17243  1E2A  18A0               	btfsc	_Dimmer^(0+384),1
 17244  1E2B  2E2E               	goto	l6638
 17245  1E2C  0020               	movlb	0	; select bank0
 17246  1E2D  01A3               	clrf	_getDimmerLights_Allow_Condition$2141
 17247  1E2E                     l6638:	
 17248  1E2E  0020               	movlb	0	; select bank0
 17249  1E2F  0823               	movf	_getDimmerLights_Allow_Condition$2141,w
 17250  1E30  00A1               	movwf	??_getDimmerLights_Allow_Condition
 17251  1E31  0821               	movf	??_getDimmerLights_Allow_Condition,w
 17252  1E32  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 17253                           
 17254                           ;Dimmer_B1.c: 950: return allow;
 17255  1E33  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 17256  1E34  0008               	return
 17257  1E35                     __end_of_getDimmerLights_Allow_Condition:	
 17258                           
 17259                           	psect	text118
 17260  1B7D                     __ptext118:	
 17261 ;; *************** function _getLoad_OK *****************
 17262 ;; Defined at:
 17263 ;;		line 272 in file "../src/OverLoad_B1.c"
 17264 ;; Parameters:    Size  Location     Type
 17265 ;;		None
 17266 ;; Auto vars:     Size  Location     Type
 17267 ;;  ok              1    0[BANK0 ] unsigned char 
 17268 ;; Return value:  Size  Location     Type
 17269 ;;                  1    wreg      unsigned char 
 17270 ;; Registers used:
 17271 ;;		wreg, status,2
 17272 ;; Tracked objects:
 17273 ;;		On entry : 0/0
 17274 ;;		On exit  : 0/0
 17275 ;;		Unchanged: 0/0
 17276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17280 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17281 ;;Total ram usage:        1 bytes
 17282 ;; Hardware stack levels used:    1
 17283 ;; Hardware stack levels required when called:    4
 17284 ;; This function calls:
 17285 ;;		Nothing
 17286 ;; This function is called by:
 17287 ;;		_DimmerLights_Main
 17288 ;;		_getDimmerLights_Allow_Condition
 17289 ;; This function uses a non-reentrant model
 17290 ;;
 17291                           
 17292                           
 17293                           ;psect for function _getLoad_OK
 17294  1B7D                     _getLoad_OK:	
 17295                           
 17296                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 17297                           
 17298                           ;incstack = 0
 17299                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17300  1B7D  3000               	movlw	0
 17301  1B7E  0022               	movlb	2	; select bank2
 17302  1B7F  1BC8               	btfsc	_Load^(0+256),7
 17303  1B80  3001               	movlw	1
 17304  1B81  0020               	movlb	0	; select bank0
 17305  1B82  00A0               	movwf	getLoad_OK@ok
 17306                           
 17307                           ;OverLoad_B1.c: 274: return ok;
 17308  1B83  0820               	movf	getLoad_OK@ok,w
 17309  1B84  0008               	return
 17310  1B85                     __end_of_getLoad_OK:	
 17311                           
 17312                           	psect	text119
 17313  1177                     __ptext119:	
 17314 ;; *************** function _getMain_All_Error_Status *****************
 17315 ;; Defined at:
 17316 ;;		line 424 in file "../src/Main_B1.c"
 17317 ;; Parameters:    Size  Location     Type
 17318 ;;  command         1    wreg     unsigned char 
 17319 ;; Auto vars:     Size  Location     Type
 17320 ;;  command         1    5[BANK0 ] unsigned char 
 17321 ;;  status          1    6[BANK0 ] unsigned char 
 17322 ;; Return value:  Size  Location     Type
 17323 ;;                  1    wreg      unsigned char 
 17324 ;; Registers used:
 17325 ;;		wreg, status,2, status,0
 17326 ;; Tracked objects:
 17327 ;;		On entry : 0/0
 17328 ;;		On exit  : 0/0
 17329 ;;		Unchanged: 0/0
 17330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17332 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17334 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17335 ;;Total ram usage:        7 bytes
 17336 ;; Hardware stack levels used:    1
 17337 ;; Hardware stack levels required when called:    4
 17338 ;; This function calls:
 17339 ;;		Nothing
 17340 ;; This function is called by:
 17341 ;;		_DimmerLights_Main
 17342 ;;		_Exception_Main
 17343 ;;		_Load_Main
 17344 ;;		_setTemp_Main
 17345 ;;		_getRxData
 17346 ;;		_setSw_Main
 17347 ;; This function uses a non-reentrant model
 17348 ;;
 17349                           
 17350                           
 17351                           ;psect for function _getMain_All_Error_Status
 17352  1177                     _getMain_All_Error_Status:	
 17353                           
 17354                           ;incstack = 0
 17355                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17356                           ;getMain_All_Error_Status@command stored from wreg
 17357  1177  0020               	movlb	0	; select bank0
 17358  1178  00A5               	movwf	getMain_All_Error_Status@command
 17359                           
 17360                           ;Main_B1.c: 425: char status = 0;
 17361  1179  01A6               	clrf	getMain_All_Error_Status@status
 17362                           
 17363                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 17364  117A  08A6               	movf	getMain_All_Error_Status@status,f
 17365  117B  1D03               	skipz
 17366  117C  2991               	goto	l6402
 17367  117D  0825               	movf	getMain_All_Error_Status@command,w
 17368  117E  3A02               	xorlw	2
 17369  117F  1903               	skipnz
 17370  1180  2991               	goto	l6402
 17371                           
 17372                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17373  1181  0021               	movlb	1	; select bank1
 17374  1182  18DC               	btfsc	_Temp^(0+128),1
 17375  1183  2988               	goto	l6400
 17376  1184  0020               	movlb	0	; select bank0
 17377  1185  01A1               	clrf	_getMain_All_Error_Status$3401
 17378  1186  01A2               	clrf	_getMain_All_Error_Status$3401+1
 17379  1187  298D               	goto	l1446
 17380  1188                     l6400:	
 17381  1188  3002               	movlw	2
 17382  1189  0020               	movlb	0	; select bank0
 17383  118A  00A1               	movwf	_getMain_All_Error_Status$3401
 17384  118B  3000               	movlw	0
 17385  118C  00A2               	movwf	_getMain_All_Error_Status$3401+1
 17386  118D                     l1446:	
 17387  118D  0821               	movf	_getMain_All_Error_Status$3401,w
 17388  118E  00A0               	movwf	??_getMain_All_Error_Status
 17389  118F  0820               	movf	??_getMain_All_Error_Status,w
 17390  1190  00A6               	movwf	getMain_All_Error_Status@status
 17391  1191                     l6402:	
 17392                           
 17393                           ;Main_B1.c: 438: }
 17394                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 17395  1191  08A6               	movf	getMain_All_Error_Status@status,f
 17396  1192  1D03               	skipz
 17397  1193  29A8               	goto	l1447
 17398  1194  0825               	movf	getMain_All_Error_Status@command,w
 17399  1195  3A03               	xorlw	3
 17400  1196  1903               	skipnz
 17401  1197  29A8               	goto	l1447
 17402                           
 17403                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 17404  1198  0022               	movlb	2	; select bank2
 17405  1199  1AC8               	btfsc	_Load^(0+256),5
 17406  119A  299F               	goto	l6410
 17407  119B  0020               	movlb	0	; select bank0
 17408  119C  01A3               	clrf	_getMain_All_Error_Status$3402
 17409  119D  01A4               	clrf	_getMain_All_Error_Status$3402+1
 17410  119E  29A4               	goto	l1451
 17411  119F                     l6410:	
 17412  119F  3003               	movlw	3
 17413  11A0  0020               	movlb	0	; select bank0
 17414  11A1  00A3               	movwf	_getMain_All_Error_Status$3402
 17415  11A2  3000               	movlw	0
 17416  11A3  00A4               	movwf	_getMain_All_Error_Status$3402+1
 17417  11A4                     l1451:	
 17418  11A4  0823               	movf	_getMain_All_Error_Status$3402,w
 17419  11A5  00A0               	movwf	??_getMain_All_Error_Status
 17420  11A6  0820               	movf	??_getMain_All_Error_Status,w
 17421  11A7  00A6               	movwf	getMain_All_Error_Status@status
 17422  11A8                     l1447:	
 17423                           
 17424                           ;Main_B1.c: 445: }
 17425                           ;Main_B1.c: 455: return status;
 17426  11A8  0826               	movf	getMain_All_Error_Status@status,w
 17427  11A9  0008               	return
 17428  11AA                     __end_of_getMain_All_Error_Status:	
 17429                           
 17430                           	psect	text120
 17431  1B68                     __ptext120:	
 17432 ;; *************** function _DimmerLights_Initialization *****************
 17433 ;; Defined at:
 17434 ;;		line 597 in file "../src/Dimmer_B1.c"
 17435 ;; Parameters:    Size  Location     Type
 17436 ;;		None
 17437 ;; Auto vars:     Size  Location     Type
 17438 ;;		None
 17439 ;; Return value:  Size  Location     Type
 17440 ;;		None               void
 17441 ;; Registers used:
 17442 ;;		wreg, status,2, status,0, pclath, cstack
 17443 ;; Tracked objects:
 17444 ;;		On entry : 0/0
 17445 ;;		On exit  : 0/0
 17446 ;;		Unchanged: 0/0
 17447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17452 ;;Total ram usage:        0 bytes
 17453 ;; Hardware stack levels used:    1
 17454 ;; Hardware stack levels required when called:    5
 17455 ;; This function calls:
 17456 ;;		_DimmerIntr_Initialization
 17457 ;;		_setDimmerLights_Initialization
 17458 ;; This function is called by:
 17459 ;;		_main
 17460 ;; This function uses a non-reentrant model
 17461 ;;
 17462                           
 17463                           
 17464                           ;psect for function _DimmerLights_Initialization
 17465  1B68                     _DimmerLights_Initialization:	
 17466                           
 17467                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(1);
 17468                           
 17469                           ;incstack = 0
 17470                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17471  1B68  3001               	movlw	1
 17472  1B69  319B  2316  319B   	fcall	_setDimmerLights_Initialization
 17473                           
 17474                           ;Dimmer_B1.c: 609: DimmerIntr_Initialization();
 17475  1B6C  319E  267B         	fcall	_DimmerIntr_Initialization
 17476  1B6E  0008               	return
 17477  1B6F                     __end_of_DimmerLights_Initialization:	
 17478                           
 17479                           	psect	text121
 17480  1B16                     __ptext121:	
 17481 ;; *************** function _setDimmerLights_Initialization *****************
 17482 ;; Defined at:
 17483 ;;		line 613 in file "../src/Dimmer_B1.c"
 17484 ;; Parameters:    Size  Location     Type
 17485 ;;  lights          1    wreg     unsigned char 
 17486 ;; Auto vars:     Size  Location     Type
 17487 ;;  lights          1    0[COMMON] unsigned char 
 17488 ;; Return value:  Size  Location     Type
 17489 ;;		None               void
 17490 ;; Registers used:
 17491 ;;		wreg
 17492 ;; Tracked objects:
 17493 ;;		On entry : 0/0
 17494 ;;		On exit  : 0/0
 17495 ;;		Unchanged: 0/0
 17496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17501 ;;Total ram usage:        0 bytes
 17502 ;; Hardware stack levels used:    1
 17503 ;; Hardware stack levels required when called:    4
 17504 ;; This function calls:
 17505 ;;		Nothing
 17506 ;; This function is called by:
 17507 ;;		_DimmerLights_Initialization
 17508 ;; This function uses a non-reentrant model
 17509 ;;
 17510                           
 17511                           
 17512                           ;psect for function _setDimmerLights_Initialization
 17513  1B16                     _setDimmerLights_Initialization:	
 17514                           
 17515                           ;incstack = 0
 17516                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17517  1B16  0008               	return
 17518  1B17                     __end_of_setDimmerLights_Initialization:	
 17519                           
 17520                           	psect	text122
 17521  1E7B                     __ptext122:	
 17522 ;; *************** function _DimmerIntr_Initialization *****************
 17523 ;; Defined at:
 17524 ;;		line 7 in file "../src/Dimmer_B1.c"
 17525 ;; Parameters:    Size  Location     Type
 17526 ;;		None
 17527 ;; Auto vars:     Size  Location     Type
 17528 ;;		None
 17529 ;; Return value:  Size  Location     Type
 17530 ;;		None               void
 17531 ;; Registers used:
 17532 ;;		wreg
 17533 ;; Tracked objects:
 17534 ;;		On entry : 0/0
 17535 ;;		On exit  : 0/0
 17536 ;;		Unchanged: 0/0
 17537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17542 ;;Total ram usage:        1 bytes
 17543 ;; Hardware stack levels used:    1
 17544 ;; Hardware stack levels required when called:    4
 17545 ;; This function calls:
 17546 ;;		Nothing
 17547 ;; This function is called by:
 17548 ;;		_DimmerLights_Initialization
 17549 ;; This function uses a non-reentrant model
 17550 ;;
 17551                           
 17552                           
 17553                           ;psect for function _DimmerIntr_Initialization
 17554  1E7B                     _DimmerIntr_Initialization:	
 17555                           
 17556                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 17557                           
 17558                           ;incstack = 0
 17559                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17560  1E7B  3007               	movlw	7
 17561  1E7C  0020               	movlb	0	; select bank0
 17562  1E7D  00A0               	movwf	??_DimmerIntr_Initialization
 17563  1E7E  0820               	movf	??_DimmerIntr_Initialization,w
 17564  1E7F  0021               	movlb	1	; select bank1
 17565  1E80  00CA               	movwf	(_DimmerIntr1^(0+128)+3)
 17566                           
 17567                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(60*0.8));
 17568  1E81  3030               	movlw	48
 17569  1E82  0020               	movlb	0	; select bank0
 17570  1E83  00A0               	movwf	??_DimmerIntr_Initialization
 17571  1E84  0820               	movf	??_DimmerIntr_Initialization,w
 17572  1E85  0021               	movlb	1	; select bank1
 17573  1E86  00CC               	movwf	(_DimmerIntr1^(0+128)+5)
 17574                           
 17575                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(30*0.8));
 17576  1E87  3018               	movlw	24
 17577  1E88  0020               	movlb	0	; select bank0
 17578  1E89  00A0               	movwf	??_DimmerIntr_Initialization
 17579  1E8A  0820               	movf	??_DimmerIntr_Initialization,w
 17580  1E8B  0021               	movlb	1	; select bank1
 17581  1E8C  00CD               	movwf	(_DimmerIntr1^(0+128)+6)
 17582                           
 17583                           ;Dimmer_B1.c: 13: DimmerIntr1.DimmingValue = ((char)(60*0.8));
 17584  1E8D  3030               	movlw	48
 17585  1E8E  0020               	movlb	0	; select bank0
 17586  1E8F  00A0               	movwf	??_DimmerIntr_Initialization
 17587  1E90  0820               	movf	??_DimmerIntr_Initialization,w
 17588  1E91  0021               	movlb	1	; select bank1
 17589  1E92  00CB               	movwf	(_DimmerIntr1^(0+128)+4)
 17590  1E93  0008               	return
 17591  1E94                     __end_of_DimmerIntr_Initialization:	
 17592                           
 17593                           	psect	text123
 17594  1B2D                     __ptext123:	
 17595 ;; *************** function _DelayOff_Main *****************
 17596 ;; Defined at:
 17597 ;;		line 41 in file "../src/DelayOff_B1.c"
 17598 ;; Parameters:    Size  Location     Type
 17599 ;;		None
 17600 ;; Auto vars:     Size  Location     Type
 17601 ;;		None
 17602 ;; Return value:  Size  Location     Type
 17603 ;;		None               void
 17604 ;; Registers used:
 17605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17606 ;; Tracked objects:
 17607 ;;		On entry : 0/0
 17608 ;;		On exit  : 0/0
 17609 ;;		Unchanged: 0/0
 17610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17615 ;;Total ram usage:        0 bytes
 17616 ;; Hardware stack levels used:    1
 17617 ;; Hardware stack levels required when called:    8
 17618 ;; This function calls:
 17619 ;;		_DlyOff_Main
 17620 ;; This function is called by:
 17621 ;;		_main
 17622 ;; This function uses a non-reentrant model
 17623 ;;
 17624                           
 17625                           
 17626                           ;psect for function _DelayOff_Main
 17627  1B2D                     _DelayOff_Main:	
 17628                           
 17629                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17630                           
 17631                           ;incstack = 0
 17632                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17633  1B2D  3001               	movlw	1
 17634  1B2E  3189  2169         	fcall	_DlyOff_Main
 17635  1B30  0008               	return
 17636  1B31                     __end_of_DelayOff_Main:	
 17637                           
 17638                           	psect	text124
 17639  0969                     __ptext124:	
 17640 ;; *************** function _DlyOff_Main *****************
 17641 ;; Defined at:
 17642 ;;		line 61 in file "../src/DelayOff_B1.c"
 17643 ;; Parameters:    Size  Location     Type
 17644 ;;  sw              1    wreg     unsigned char 
 17645 ;; Auto vars:     Size  Location     Type
 17646 ;;  sw              1   71[BANK0 ] unsigned char 
 17647 ;; Return value:  Size  Location     Type
 17648 ;;		None               void
 17649 ;; Registers used:
 17650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17651 ;; Tracked objects:
 17652 ;;		On entry : 0/0
 17653 ;;		On exit  : 0/0
 17654 ;;		Unchanged: 0/0
 17655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17657 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17659 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17660 ;;Total ram usage:        3 bytes
 17661 ;; Hardware stack levels used:    1
 17662 ;; Hardware stack levels required when called:    7
 17663 ;; This function calls:
 17664 ;;		_DelayOffPointSelect
 17665 ;;		_getDimmerLights_Status
 17666 ;;		_setDimmerLights_SwOff
 17667 ;;		_setDimmerLights_SwOn
 17668 ;;		_setProductData
 17669 ;; This function is called by:
 17670 ;;		_DelayOff_Main
 17671 ;; This function uses a non-reentrant model
 17672 ;;
 17673                           
 17674                           
 17675                           ;psect for function _DlyOff_Main
 17676  0969                     _DlyOff_Main:	
 17677                           
 17678                           ;incstack = 0
 17679                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17680                           ;DlyOff_Main@sw stored from wreg
 17681  0969  0020               	movlb	0	; select bank0
 17682  096A  00E7               	movwf	DlyOff_Main@sw
 17683                           
 17684                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17685  096B  0867               	movf	DlyOff_Main@sw,w
 17686  096C  319B  23DA  3189   	fcall	_DelayOffPointSelect
 17687                           
 17688                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17689  096F  0021               	movlb	1	; select bank1
 17690  0970  0851               	movf	_DelayOff^(0+128),w
 17691  0971  0086               	movwf	6
 17692  0972  3001               	movlw	1	; select bank2/3
 17693  0973  0087               	movwf	7
 17694  0974  1C81               	btfss	1,1
 17695  0975  0008               	return
 17696                           
 17697                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17698  0976  0851               	movf	_DelayOff^(0+128),w
 17699  0977  3E02               	addlw	2
 17700  0978  0086               	movwf	6
 17701  0979  3001               	movlw	1	; select bank2/3
 17702  097A  0087               	movwf	7
 17703  097B  3001               	movlw	1
 17704  097C  0781               	addwf	1,f
 17705  097D  3141               	addfsr 1,1
 17706  097E  1803               	skipnc
 17707  097F  0A81               	incf	1,f
 17708                           
 17709                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17710  0980  0851               	movf	_DelayOff^(0+128),w
 17711  0981  3E02               	addlw	2
 17712  0982  0086               	movwf	6
 17713  0983  3001               	movlw	1	; select bank2/3
 17714  0984  0087               	movwf	7
 17715  0985  3F40               	moviw [0]fsr1
 17716  0986  0020               	movlb	0	; select bank0
 17717  0987  00E5               	movwf	??_DlyOff_Main
 17718  0988  3F41               	moviw [1]fsr1
 17719  0989  00E6               	movwf	??_DlyOff_Main+1
 17720  098A  300B               	movlw	11
 17721  098B  0266               	subwf	??_DlyOff_Main+1,w
 17722  098C  30B8               	movlw	184
 17723  098D  1903               	skipnz
 17724  098E  0265               	subwf	??_DlyOff_Main,w
 17725  098F  1C03               	skipc
 17726  0990  0008               	return
 17727                           
 17728                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17729  0991  0021               	movlb	1	; select bank1
 17730  0992  0851               	movf	_DelayOff^(0+128),w
 17731  0993  3E02               	addlw	2
 17732  0994  0086               	movwf	6
 17733  0995  3001               	movlw	1	; select bank2/3
 17734  0996  0087               	movwf	7
 17735  0997  3000               	movlw	0
 17736  0998  3FC0               	movwi [0]fsr1
 17737  0999  3FC1               	movwi [1]fsr1
 17738                           
 17739                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17740  099A  3001               	movlw	1
 17741  099B  0020               	movlb	0	; select bank0
 17742  099C  00E5               	movwf	??_DlyOff_Main
 17743  099D  0021               	movlb	1	; select bank1
 17744  099E  0851               	movf	_DelayOff^(0+128),w
 17745  099F  3E04               	addlw	4
 17746  09A0  0086               	movwf	6
 17747  09A1  3001               	movlw	1	; select bank2/3
 17748  09A2  0087               	movwf	7
 17749  09A3  0020               	movlb	0	; select bank0
 17750  09A4  0865               	movf	??_DlyOff_Main,w
 17751  09A5  0781               	addwf	1,f
 17752                           
 17753                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17754  09A6  0021               	movlb	1	; select bank1
 17755  09A7  0851               	movf	_DelayOff^(0+128),w
 17756  09A8  3E04               	addlw	4
 17757  09A9  0086               	movwf	6
 17758  09AA  3001               	movlw	1	; select bank2/3
 17759  09AB  0087               	movwf	7
 17760  09AC  0A51               	incf	_DelayOff^(0+128),w
 17761  09AD  0084               	movwf	4
 17762  09AE  3001               	movlw	1	; select bank2/3
 17763  09AF  0085               	movwf	5
 17764  09B0  0800               	movf	0,w
 17765  09B1  0201               	subwf	1,w
 17766  09B2  1C03               	skipc
 17767  09B3  0008               	return
 17768                           
 17769                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17770  09B4  0851               	movf	_DelayOff^(0+128),w
 17771  09B5  3E04               	addlw	4
 17772  09B6  0086               	movwf	6
 17773  09B7  3001               	movlw	1	; select bank2/3
 17774  09B8  0087               	movwf	7
 17775  09B9  0181               	clrf	1
 17776                           
 17777                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17778  09BA  0851               	movf	_DelayOff^(0+128),w
 17779  09BB  0086               	movwf	6
 17780  09BC  3001               	movlw	1	; select bank2/3
 17781  09BD  0087               	movwf	7
 17782  09BE  1081               	bcf	1,1
 17783                           
 17784                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17785  09BF  0020               	movlb	0	; select bank0
 17786  09C0  0867               	movf	DlyOff_Main@sw,w
 17787  09C1  319C  2498  3189   	fcall	_getDimmerLights_Status
 17788  09C4  3A01               	xorlw	1
 17789  09C5  1D03               	skipz
 17790  09C6  29D1               	goto	l531
 17791                           
 17792                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17793  09C7  0020               	movlb	0	; select bank0
 17794  09C8  0867               	movf	DlyOff_Main@sw,w
 17795  09C9  3191  21DE  3189   	fcall	_setDimmerLights_SwOn
 17796                           
 17797                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17798  09CC  0020               	movlb	0	; select bank0
 17799  09CD  0867               	movf	DlyOff_Main@sw,w
 17800  09CE  3192  22B6  3189   	fcall	_setDimmerLights_SwOff
 17801  09D1                     l531:	
 17802                           
 17803                           ;DelayOff_B1.c: 78: }
 17804                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17805  09D1  0020               	movlb	0	; select bank0
 17806  09D2  01E2               	clrf	setProductData@value
 17807  09D3  0867               	movf	DlyOff_Main@sw,w
 17808  09D4  3E1A               	addlw	26
 17809  09D5  319B  23F2         	fcall	_setProductData
 17810  09D7  0008               	return
 17811  09D8                     __end_of_DlyOff_Main:	
 17812                           
 17813                           	psect	text125
 17814  1BF2                     __ptext125:	
 17815 ;; *************** function _setProductData *****************
 17816 ;; Defined at:
 17817 ;;		line 645 in file "../src/Main_B1.c"
 17818 ;; Parameters:    Size  Location     Type
 17819 ;;  address         1    wreg     unsigned char 
 17820 ;;  value           1   66[BANK0 ] unsigned char 
 17821 ;; Auto vars:     Size  Location     Type
 17822 ;;  address         1   68[BANK0 ] unsigned char 
 17823 ;; Return value:  Size  Location     Type
 17824 ;;		None               void
 17825 ;; Registers used:
 17826 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17827 ;; Tracked objects:
 17828 ;;		On entry : 0/0
 17829 ;;		On exit  : 0/0
 17830 ;;		Unchanged: 0/0
 17831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17832 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17835 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17836 ;;Total ram usage:        3 bytes
 17837 ;; Hardware stack levels used:    1
 17838 ;; Hardware stack levels required when called:    4
 17839 ;; This function calls:
 17840 ;;		Nothing
 17841 ;; This function is called by:
 17842 ;;		_DlyOff_Main
 17843 ;;		_setDelayOff_GO
 17844 ;;		_setDimmerLights_OnOff
 17845 ;;		_setDimmerLights_Dimming
 17846 ;;		_setTemp_Main
 17847 ;;		_setLog_Code
 17848 ;;		_setControl_Lights_Table
 17849 ;;		_setRFSW_AdjControl
 17850 ;;		_setRF_DimmerLights
 17851 ;; This function uses a non-reentrant model
 17852 ;;
 17853                           
 17854                           
 17855                           ;psect for function _setProductData
 17856  1BF2                     _setProductData:	
 17857                           
 17858                           ;incstack = 0
 17859                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17860                           ;setProductData@address stored from wreg
 17861  1BF2  0020               	movlb	0	; select bank0
 17862  1BF3  00E4               	movwf	setProductData@address
 17863                           
 17864                           ;Main_B1.c: 646: _product.Data[address] = value;
 17865  1BF4  0862               	movf	setProductData@value,w
 17866  1BF5  00E3               	movwf	??_setProductData
 17867  1BF6  0864               	movf	setProductData@address,w
 17868  1BF7  3E20               	addlw	__product& (0+255)
 17869  1BF8  0086               	movwf	6
 17870  1BF9  3002               	movlw	2	; select bank4/5
 17871  1BFA  0087               	movwf	7
 17872  1BFB  0863               	movf	??_setProductData,w
 17873  1BFC  0081               	movwf	1
 17874  1BFD  0008               	return
 17875  1BFE                     __end_of_setProductData:	
 17876                           
 17877                           	psect	text126
 17878  11DE                     __ptext126:	
 17879 ;; *************** function _setDimmerLights_SwOn *****************
 17880 ;; Defined at:
 17881 ;;		line 653 in file "../src/Dimmer_B1.c"
 17882 ;; Parameters:    Size  Location     Type
 17883 ;;  sw              1    wreg     unsigned char 
 17884 ;; Auto vars:     Size  Location     Type
 17885 ;;  sw              1   13[BANK0 ] unsigned char 
 17886 ;;  idle            1   14[BANK0 ] unsigned char 
 17887 ;; Return value:  Size  Location     Type
 17888 ;;		None               void
 17889 ;; Registers used:
 17890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17891 ;; Tracked objects:
 17892 ;;		On entry : 0/0
 17893 ;;		On exit  : 0/0
 17894 ;;		Unchanged: 0/0
 17895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17897 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17899 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17900 ;;Total ram usage:        2 bytes
 17901 ;; Hardware stack levels used:    1
 17902 ;; Hardware stack levels required when called:    6
 17903 ;; This function calls:
 17904 ;;		_DimmerLights_SelectPointer
 17905 ;;		_setBuz
 17906 ;; This function is called by:
 17907 ;;		_DlyOff_Main
 17908 ;;		_setControl_Lights_Table
 17909 ;;		_setRFSW_Control
 17910 ;;		_setRFSW_AdjControl
 17911 ;;		_setSw_Main
 17912 ;; This function uses a non-reentrant model
 17913 ;;
 17914                           
 17915                           
 17916                           ;psect for function _setDimmerLights_SwOn
 17917  11DE                     _setDimmerLights_SwOn:	
 17918                           
 17919                           ;incstack = 0
 17920                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17921                           ;setDimmerLights_SwOn@sw stored from wreg
 17922  11DE  0020               	movlb	0	; select bank0
 17923  11DF  00AD               	movwf	setDimmerLights_SwOn@sw
 17924                           
 17925                           ;Dimmer_B1.c: 654: char idle = 0;
 17926  11E0  01AE               	clrf	setDimmerLights_SwOn@idle
 17927                           
 17928                           ;Dimmer_B1.c: 679: DimmerLights_SelectPointer(sw);
 17929  11E1  082D               	movf	setDimmerLights_SwOn@sw,w
 17930  11E2  319B  23E6  3191   	fcall	_DimmerLights_SelectPointer
 17931                           
 17932                           ;Dimmer_B1.c: 680: if (idle == 0) {
 17933  11E5  0020               	movlb	0	; select bank0
 17934  11E6  08AE               	movf	setDimmerLights_SwOn@idle,f
 17935  11E7  1D03               	skipz
 17936  11E8  0008               	return
 17937                           
 17938                           ;Dimmer_B1.c: 681: DimmerLights->SwFlag = 1;
 17939  11E9  0021               	movlb	1	; select bank1
 17940  11EA  0852               	movf	_DimmerLights^(0+128),w
 17941  11EB  0086               	movwf	6
 17942  11EC  3001               	movlw	1	; select bank2/3
 17943  11ED  0087               	movwf	7
 17944  11EE  1401               	bsf	1,0
 17945                           
 17946                           ;Dimmer_B1.c: 682: if (DimmerLights->Status == 0) {
 17947  11EF  0A52               	incf	_DimmerLights^(0+128),w
 17948  11F0  0086               	movwf	6
 17949  11F1  3001               	movlw	1	; select bank2/3
 17950  11F2  0087               	movwf	7
 17951  11F3  1801               	btfsc	1,0
 17952  11F4  2A05               	goto	l5996
 17953                           
 17954                           ;Dimmer_B1.c: 683: DimmerLights->Status = 1;
 17955  11F5  0A52               	incf	_DimmerLights^(0+128),w
 17956  11F6  0086               	movwf	6
 17957  11F7  3001               	movlw	1	; select bank2/3
 17958  11F8  0087               	movwf	7
 17959  11F9  1401               	bsf	1,0
 17960                           
 17961                           ;Dimmer_B1.c: 684: DimmerLights->Trigger = 1;
 17962  11FA  0852               	movf	_DimmerLights^(0+128),w
 17963  11FB  0086               	movwf	6
 17964  11FC  3001               	movlw	1	; select bank2/3
 17965  11FD  0087               	movwf	7
 17966  11FE  1481               	bsf	1,1
 17967                           
 17968                           ;Dimmer_B1.c: 685: DimmerLights->Switch = 1;
 17969  11FF  0852               	movf	_DimmerLights^(0+128),w
 17970  1200  0086               	movwf	6
 17971  1201  3001               	movlw	1	; select bank2/3
 17972  1202  0087               	movwf	7
 17973  1203  1501               	bsf	1,2
 17974                           
 17975                           ;Dimmer_B1.c: 686: } else {
 17976  1204  2A0A               	goto	l5998
 17977  1205                     l5996:	
 17978                           
 17979                           ;Dimmer_B1.c: 687: DimmerLights->Status = 0;
 17980  1205  0A52               	incf	_DimmerLights^(0+128),w
 17981  1206  0086               	movwf	6
 17982  1207  3001               	movlw	1	; select bank2/3
 17983  1208  0087               	movwf	7
 17984  1209  1001               	bcf	1,0
 17985  120A                     l5998:	
 17986                           
 17987                           ;Dimmer_B1.c: 688: }
 17988                           ;Dimmer_B1.c: 689: setBuz(1, 100);
 17989  120A  3064               	movlw	100
 17990  120B  0020               	movlb	0	; select bank0
 17991  120C  00A9               	movwf	setBuz@time
 17992  120D  3000               	movlw	0
 17993  120E  00AA               	movwf	setBuz@time+1
 17994  120F  3001               	movlw	1
 17995  1210  3195  25BC         	fcall	_setBuz
 17996  1212  0008               	return
 17997  1213                     __end_of_setDimmerLights_SwOn:	
 17998                           
 17999                           	psect	text127
 18000  15BC                     __ptext127:	
 18001 ;; *************** function _setBuz *****************
 18002 ;; Defined at:
 18003 ;;		line 22 in file "../src/Buzzer_B1.c"
 18004 ;; Parameters:    Size  Location     Type
 18005 ;;  count           1    wreg     unsigned char 
 18006 ;;  time            2    9[BANK0 ] int 
 18007 ;; Auto vars:     Size  Location     Type
 18008 ;;  count           1   12[BANK0 ] unsigned char 
 18009 ;; Return value:  Size  Location     Type
 18010 ;;		None               void
 18011 ;; Registers used:
 18012 ;;		wreg, status,2, status,0, pclath, cstack
 18013 ;; Tracked objects:
 18014 ;;		On entry : 0/0
 18015 ;;		On exit  : 0/0
 18016 ;;		Unchanged: 0/0
 18017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18018 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18021 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;Total ram usage:        4 bytes
 18023 ;; Hardware stack levels used:    1
 18024 ;; Hardware stack levels required when called:    5
 18025 ;; This function calls:
 18026 ;;		___awdiv
 18027 ;; This function is called by:
 18028 ;;		_setDimmerLights_SwOn
 18029 ;;		_setDimmerLights_Dimming
 18030 ;;		_my_MainTimer
 18031 ;;		_Exception_Main
 18032 ;;		_setTemp_Main
 18033 ;;		_setLog_Code
 18034 ;;		_setRFSW_Control
 18035 ;;		_setSw_Main
 18036 ;; This function uses a non-reentrant model
 18037 ;;
 18038                           
 18039                           
 18040                           ;psect for function _setBuz
 18041  15BC                     _setBuz:	
 18042                           
 18043                           ;incstack = 0
 18044                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18045                           ;setBuz@count stored from wreg
 18046  15BC  0020               	movlb	0	; select bank0
 18047  15BD  00AC               	movwf	setBuz@count
 18048                           
 18049                           ;Buzzer_B1.c: 23: time /= 20;
 18050  15BE  3014               	movlw	20
 18051  15BF  00A0               	movwf	___awdiv@divisor
 18052  15C0  3000               	movlw	0
 18053  15C1  00A1               	movwf	___awdiv@divisor+1
 18054  15C2  082A               	movf	setBuz@time+1,w
 18055  15C3  01A3               	clrf	___awdiv@dividend+1
 18056  15C4  07A3               	addwf	___awdiv@dividend+1,f
 18057  15C5  0829               	movf	setBuz@time,w
 18058  15C6  01A2               	clrf	___awdiv@dividend
 18059  15C7  07A2               	addwf	___awdiv@dividend,f
 18060  15C8  3195  2568  3195   	fcall	___awdiv
 18061  15CB  0020               	movlb	0	; select bank0
 18062  15CC  0821               	movf	?___awdiv+1,w
 18063  15CD  01AA               	clrf	setBuz@time+1
 18064  15CE  07AA               	addwf	setBuz@time+1,f
 18065  15CF  0820               	movf	?___awdiv,w
 18066  15D0  01A9               	clrf	setBuz@time
 18067  15D1  07A9               	addwf	setBuz@time,f
 18068                           
 18069                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18070  15D2  0021               	movlb	1	; select bank1
 18071  15D3  1C3B               	btfss	_Buz1^(0+128),0
 18072  15D4  0008               	return
 18073                           
 18074                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18075  15D5  18BB               	btfsc	_Buz1^(0+128),1
 18076  15D6  2DED               	goto	l86
 18077                           
 18078                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18079  15D7  14BB               	bsf	_Buz1^(0+128),1
 18080                           
 18081                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18082  15D8  01BC               	clrf	(_Buz1^(0+128)+1)
 18083  15D9  01BD               	clrf	((_Buz1+1)^(0+128)+1)
 18084                           
 18085                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18086  15DA  0020               	movlb	0	; select bank0
 18087  15DB  082C               	movf	setBuz@count,w
 18088  15DC  00AB               	movwf	??_setBuz
 18089  15DD  082B               	movf	??_setBuz,w
 18090  15DE  0021               	movlb	1	; select bank1
 18091  15DF  00BE               	movwf	(_Buz1^(0+128)+3)
 18092                           
 18093                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18094  15E0  0020               	movlb	0	; select bank0
 18095  15E1  082A               	movf	setBuz@time+1,w
 18096  15E2  0021               	movlb	1	; select bank1
 18097  15E3  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 18098  15E4  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 18099  15E5  0020               	movlb	0	; select bank0
 18100  15E6  0829               	movf	setBuz@time,w
 18101  15E7  0021               	movlb	1	; select bank1
 18102  15E8  01C1               	clrf	(_Buz1^(0+128)+6)
 18103  15E9  07C1               	addwf	(_Buz1^(0+128)+6),f
 18104                           
 18105                           ;Buzzer_B1.c: 30: RB3 = 1;
 18106  15EA  0020               	movlb	0	; select bank0
 18107  15EB  158D               	bsf	13,3	;volatile
 18108                           
 18109                           ;Buzzer_B1.c: 31: } else {
 18110  15EC  0008               	return
 18111  15ED                     l86:	
 18112                           
 18113                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18114  15ED  19BB               	btfsc	_Buz1^(0+128),3
 18115  15EE  2E01               	goto	l88
 18116                           
 18117                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18118  15EF  15BB               	bsf	_Buz1^(0+128),3
 18119                           
 18120                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18121  15F0  0020               	movlb	0	; select bank0
 18122  15F1  082C               	movf	setBuz@count,w
 18123  15F2  00AB               	movwf	??_setBuz
 18124  15F3  082B               	movf	??_setBuz,w
 18125  15F4  0021               	movlb	1	; select bank1
 18126  15F5  00BF               	movwf	(_Buz1^(0+128)+4)
 18127                           
 18128                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18129  15F6  0020               	movlb	0	; select bank0
 18130  15F7  082A               	movf	setBuz@time+1,w
 18131  15F8  0021               	movlb	1	; select bank1
 18132  15F9  01C4               	clrf	((_Buz1+1)^(0+128)+8)
 18133  15FA  07C4               	addwf	((_Buz1+1)^(0+128)+8),f
 18134  15FB  0020               	movlb	0	; select bank0
 18135  15FC  0829               	movf	setBuz@time,w
 18136  15FD  0021               	movlb	1	; select bank1
 18137  15FE  01C3               	clrf	(_Buz1^(0+128)+8)
 18138  15FF  07C3               	addwf	(_Buz1^(0+128)+8),f
 18139                           
 18140                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18141  1600  0008               	return
 18142  1601                     l88:	
 18143  1601  1A3B               	btfsc	_Buz1^(0+128),4
 18144  1602  0008               	return
 18145                           
 18146                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18147  1603  163B               	bsf	_Buz1^(0+128),4
 18148                           
 18149                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18150  1604  0020               	movlb	0	; select bank0
 18151  1605  082C               	movf	setBuz@count,w
 18152  1606  00AB               	movwf	??_setBuz
 18153  1607  082B               	movf	??_setBuz,w
 18154  1608  0021               	movlb	1	; select bank1
 18155  1609  00C0               	movwf	(_Buz1^(0+128)+5)
 18156                           
 18157                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18158  160A  0020               	movlb	0	; select bank0
 18159  160B  082A               	movf	setBuz@time+1,w
 18160  160C  0021               	movlb	1	; select bank1
 18161  160D  01C6               	clrf	((_Buz1+1)^(0+128)+10)
 18162  160E  07C6               	addwf	((_Buz1+1)^(0+128)+10),f
 18163  160F  0020               	movlb	0	; select bank0
 18164  1610  0829               	movf	setBuz@time,w
 18165  1611  0021               	movlb	1	; select bank1
 18166  1612  01C5               	clrf	(_Buz1^(0+128)+10)
 18167  1613  07C5               	addwf	(_Buz1^(0+128)+10),f
 18168  1614  0008               	return
 18169  1615                     __end_of_setBuz:	
 18170                           
 18171                           	psect	text128
 18172  1568                     __ptext128:	
 18173 ;; *************** function ___awdiv *****************
 18174 ;; Defined at:
 18175 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18176 ;; Parameters:    Size  Location     Type
 18177 ;;  divisor         2    0[BANK0 ] int 
 18178 ;;  dividend        2    2[BANK0 ] int 
 18179 ;; Auto vars:     Size  Location     Type
 18180 ;;  quotient        2    7[BANK0 ] int 
 18181 ;;  sign            1    6[BANK0 ] unsigned char 
 18182 ;;  counter         1    5[BANK0 ] unsigned char 
 18183 ;; Return value:  Size  Location     Type
 18184 ;;                  2    0[BANK0 ] int 
 18185 ;; Registers used:
 18186 ;;		wreg, status,2, status,0
 18187 ;; Tracked objects:
 18188 ;;		On entry : 0/0
 18189 ;;		On exit  : 0/0
 18190 ;;		Unchanged: 0/0
 18191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18192 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18193 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18194 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18195 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18196 ;;Total ram usage:        9 bytes
 18197 ;; Hardware stack levels used:    1
 18198 ;; Hardware stack levels required when called:    4
 18199 ;; This function calls:
 18200 ;;		Nothing
 18201 ;; This function is called by:
 18202 ;;		_setBuz
 18203 ;; This function uses a non-reentrant model
 18204 ;;
 18205                           
 18206                           
 18207                           ;psect for function ___awdiv
 18208  1568                     ___awdiv:	
 18209                           
 18210                           ;incstack = 0
 18211                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18212  1568  0020               	movlb	0	; select bank0
 18213  1569  01A6               	clrf	___awdiv@sign
 18214  156A  1FA1               	btfss	___awdiv@divisor+1,7
 18215  156B  2D73               	goto	l5634
 18216  156C  09A0               	comf	___awdiv@divisor,f
 18217  156D  09A1               	comf	___awdiv@divisor+1,f
 18218  156E  0AA0               	incf	___awdiv@divisor,f
 18219  156F  1903               	skipnz
 18220  1570  0AA1               	incf	___awdiv@divisor+1,f
 18221  1571  01A6               	clrf	___awdiv@sign
 18222  1572  0AA6               	incf	___awdiv@sign,f
 18223  1573                     l5634:	
 18224  1573  1FA3               	btfss	___awdiv@dividend+1,7
 18225  1574  2D7E               	goto	l5640
 18226  1575  09A2               	comf	___awdiv@dividend,f
 18227  1576  09A3               	comf	___awdiv@dividend+1,f
 18228  1577  0AA2               	incf	___awdiv@dividend,f
 18229  1578  1903               	skipnz
 18230  1579  0AA3               	incf	___awdiv@dividend+1,f
 18231  157A  3001               	movlw	1
 18232  157B  00A4               	movwf	??___awdiv
 18233  157C  0824               	movf	??___awdiv,w
 18234  157D  06A6               	xorwf	___awdiv@sign,f
 18235  157E                     l5640:	
 18236  157E  01A7               	clrf	___awdiv@quotient
 18237  157F  01A8               	clrf	___awdiv@quotient+1
 18238  1580  0821               	movf	___awdiv@divisor+1,w
 18239  1581  0420               	iorwf	___awdiv@divisor,w
 18240  1582  1903               	skipnz
 18241  1583  2DAD               	goto	l5662
 18242  1584  01A5               	clrf	___awdiv@counter
 18243  1585  0AA5               	incf	___awdiv@counter,f
 18244  1586                     l5650:	
 18245  1586  1BA1               	btfsc	___awdiv@divisor+1,7
 18246  1587  2D92               	goto	l5652
 18247  1588  3001               	movlw	1
 18248  1589                     u4325:	
 18249  1589  35A0               	lslf	___awdiv@divisor,f
 18250  158A  0DA1               	rlf	___awdiv@divisor+1,f
 18251  158B  0B89               	decfsz	9,f
 18252  158C  2D89               	goto	u4325
 18253  158D  3001               	movlw	1
 18254  158E  00A4               	movwf	??___awdiv
 18255  158F  0824               	movf	??___awdiv,w
 18256  1590  07A5               	addwf	___awdiv@counter,f
 18257  1591  2D86               	goto	l5650
 18258  1592                     l5652:	
 18259  1592  3001               	movlw	1
 18260  1593                     u4345:	
 18261  1593  35A7               	lslf	___awdiv@quotient,f
 18262  1594  0DA8               	rlf	___awdiv@quotient+1,f
 18263  1595  0B89               	decfsz	9,f
 18264  1596  2D93               	goto	u4345
 18265  1597  0821               	movf	___awdiv@divisor+1,w
 18266  1598  0223               	subwf	___awdiv@dividend+1,w
 18267  1599  1D03               	skipz
 18268  159A  2D9D               	goto	u4355
 18269  159B  0820               	movf	___awdiv@divisor,w
 18270  159C  0222               	subwf	___awdiv@dividend,w
 18271  159D                     u4355:	
 18272  159D  1C03               	skipc
 18273  159E  2DA4               	goto	l5658
 18274  159F  0820               	movf	___awdiv@divisor,w
 18275  15A0  02A2               	subwf	___awdiv@dividend,f
 18276  15A1  0821               	movf	___awdiv@divisor+1,w
 18277  15A2  3BA3               	subwfb	___awdiv@dividend+1,f
 18278  15A3  1427               	bsf	___awdiv@quotient,0
 18279  15A4                     l5658:	
 18280  15A4  3001               	movlw	1
 18281  15A5                     u4365:	
 18282  15A5  36A1               	lsrf	___awdiv@divisor+1,f
 18283  15A6  0CA0               	rrf	___awdiv@divisor,f
 18284  15A7  0B89               	decfsz	9,f
 18285  15A8  2DA5               	goto	u4365
 18286  15A9  3001               	movlw	1
 18287  15AA  02A5               	subwf	___awdiv@counter,f
 18288  15AB  1D03               	btfss	3,2
 18289  15AC  2D92               	goto	l5652
 18290  15AD                     l5662:	
 18291  15AD  0826               	movf	___awdiv@sign,w
 18292  15AE  1903               	btfsc	3,2
 18293  15AF  2DB5               	goto	l5666
 18294  15B0  09A7               	comf	___awdiv@quotient,f
 18295  15B1  09A8               	comf	___awdiv@quotient+1,f
 18296  15B2  0AA7               	incf	___awdiv@quotient,f
 18297  15B3  1903               	skipnz
 18298  15B4  0AA8               	incf	___awdiv@quotient+1,f
 18299  15B5                     l5666:	
 18300  15B5  0828               	movf	___awdiv@quotient+1,w
 18301  15B6  01A1               	clrf	?___awdiv+1
 18302  15B7  07A1               	addwf	?___awdiv+1,f
 18303  15B8  0827               	movf	___awdiv@quotient,w
 18304  15B9  01A0               	clrf	?___awdiv
 18305  15BA  07A0               	addwf	?___awdiv,f
 18306  15BB  0008               	return
 18307  15BC                     __end_of___awdiv:	
 18308                           
 18309                           	psect	text129
 18310  12B6                     __ptext129:	
 18311 ;; *************** function _setDimmerLights_SwOff *****************
 18312 ;; Defined at:
 18313 ;;		line 694 in file "../src/Dimmer_B1.c"
 18314 ;; Parameters:    Size  Location     Type
 18315 ;;  sw              1    wreg     unsigned char 
 18316 ;; Auto vars:     Size  Location     Type
 18317 ;;  sw              1    2[BANK0 ] unsigned char 
 18318 ;; Return value:  Size  Location     Type
 18319 ;;		None               void
 18320 ;; Registers used:
 18321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18322 ;; Tracked objects:
 18323 ;;		On entry : 0/0
 18324 ;;		On exit  : 0/0
 18325 ;;		Unchanged: 0/0
 18326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18330 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18331 ;;Total ram usage:        1 bytes
 18332 ;; Hardware stack levels used:    1
 18333 ;; Hardware stack levels required when called:    5
 18334 ;; This function calls:
 18335 ;;		_DimmerLights_SelectPointer
 18336 ;; This function is called by:
 18337 ;;		_DlyOff_Main
 18338 ;;		_Exception_Main
 18339 ;;		_setControl_Lights_Table
 18340 ;;		_setRFSW_Control
 18341 ;;		_setRFSW_AdjControl
 18342 ;;		_setSw_Main
 18343 ;; This function uses a non-reentrant model
 18344 ;;
 18345                           
 18346                           
 18347                           ;psect for function _setDimmerLights_SwOff
 18348  12B6                     _setDimmerLights_SwOff:	
 18349                           
 18350                           ;incstack = 0
 18351                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18352                           ;setDimmerLights_SwOff@sw stored from wreg
 18353  12B6  0020               	movlb	0	; select bank0
 18354  12B7  00A2               	movwf	setDimmerLights_SwOff@sw
 18355                           
 18356                           ;Dimmer_B1.c: 695: DimmerLights_SelectPointer(sw);
 18357  12B8  0822               	movf	setDimmerLights_SwOff@sw,w
 18358  12B9  319B  23E6  3192   	fcall	_DimmerLights_SelectPointer
 18359                           
 18360                           ;Dimmer_B1.c: 697: if (DimmerLights->SwFlag == 1) {
 18361  12BC  0021               	movlb	1	; select bank1
 18362  12BD  0852               	movf	_DimmerLights^(0+128),w
 18363  12BE  0086               	movwf	6
 18364  12BF  3001               	movlw	1	; select bank2/3
 18365  12C0  0087               	movwf	7
 18366  12C1  1C01               	btfss	1,0
 18367  12C2  0008               	return
 18368                           
 18369                           ;Dimmer_B1.c: 698: DimmerLights->SwFlag = 0;
 18370  12C3  0852               	movf	_DimmerLights^(0+128),w
 18371  12C4  0086               	movwf	6
 18372  12C5  3001               	movlw	1	; select bank2/3
 18373  12C6  0087               	movwf	7
 18374  12C7  1001               	bcf	1,0
 18375                           
 18376                           ;Dimmer_B1.c: 699: if (DimmerLights->Status == 1) {
 18377  12C8  0A52               	incf	_DimmerLights^(0+128),w
 18378  12C9  0086               	movwf	6
 18379  12CA  3001               	movlw	1	; select bank2/3
 18380  12CB  0087               	movwf	7
 18381  12CC  1C01               	btfss	1,0
 18382  12CD  2AE4               	goto	l6010
 18383                           
 18384                           ;Dimmer_B1.c: 700: if (DimmerLights->DimmingSwFlag == 1) {
 18385  12CE  0852               	movf	_DimmerLights^(0+128),w
 18386  12CF  0086               	movwf	6
 18387  12D0  3001               	movlw	1	; select bank2/3
 18388  12D1  0087               	movwf	7
 18389  12D2  1D81               	btfss	1,3
 18390  12D3  0008               	return
 18391                           
 18392                           ;Dimmer_B1.c: 701: DimmerLights->DimmingSwFlag = 0;
 18393  12D4  0852               	movf	_DimmerLights^(0+128),w
 18394  12D5  0086               	movwf	6
 18395  12D6  3001               	movlw	1	; select bank2/3
 18396  12D7  0087               	movwf	7
 18397  12D8  1181               	bcf	1,3
 18398                           
 18399                           ;Dimmer_B1.c: 703: DimmerLights->DimmingTrigger = 1;
 18400  12D9  0852               	movf	_DimmerLights^(0+128),w
 18401  12DA  0086               	movwf	6
 18402  12DB  3001               	movlw	1	; select bank2/3
 18403  12DC  0087               	movwf	7
 18404  12DD  1601               	bsf	1,4
 18405                           
 18406                           ;Dimmer_B1.c: 704: DimmerLights->DimmingSwitch = 0;
 18407  12DE  0852               	movf	_DimmerLights^(0+128),w
 18408  12DF  0086               	movwf	6
 18409  12E0  3001               	movlw	1	; select bank2/3
 18410  12E1  0087               	movwf	7
 18411  12E2  1281               	bcf	1,5
 18412                           
 18413                           ;Dimmer_B1.c: 705: }
 18414                           ;Dimmer_B1.c: 706: } else {
 18415  12E3  0008               	return
 18416  12E4                     l6010:	
 18417                           
 18418                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = 1;
 18419  12E4  0852               	movf	_DimmerLights^(0+128),w
 18420  12E5  0086               	movwf	6
 18421  12E6  3001               	movlw	1	; select bank2/3
 18422  12E7  0087               	movwf	7
 18423  12E8  1481               	bsf	1,1
 18424                           
 18425                           ;Dimmer_B1.c: 709: DimmerLights->Switch = 0;
 18426  12E9  0852               	movf	_DimmerLights^(0+128),w
 18427  12EA  0086               	movwf	6
 18428  12EB  3001               	movlw	1	; select bank2/3
 18429  12EC  0087               	movwf	7
 18430  12ED  1101               	bcf	1,2
 18431  12EE  0008               	return
 18432  12EF                     __end_of_setDimmerLights_SwOff:	
 18433                           
 18434                           	psect	text130
 18435  1C98                     __ptext130:	
 18436 ;; *************** function _getDimmerLights_Status *****************
 18437 ;; Defined at:
 18438 ;;		line 1006 in file "../src/Dimmer_B1.c"
 18439 ;; Parameters:    Size  Location     Type
 18440 ;;  lights          1    wreg     unsigned char 
 18441 ;; Auto vars:     Size  Location     Type
 18442 ;;  lights          1    2[BANK0 ] unsigned char 
 18443 ;;  status          1    3[BANK0 ] unsigned char 
 18444 ;; Return value:  Size  Location     Type
 18445 ;;                  1    wreg      unsigned char 
 18446 ;; Registers used:
 18447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18448 ;; Tracked objects:
 18449 ;;		On entry : 0/0
 18450 ;;		On exit  : 0/0
 18451 ;;		Unchanged: 0/0
 18452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18454 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18456 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18457 ;;Total ram usage:        2 bytes
 18458 ;; Hardware stack levels used:    1
 18459 ;; Hardware stack levels required when called:    5
 18460 ;; This function calls:
 18461 ;;		_DimmerLights_SelectPointer
 18462 ;; This function is called by:
 18463 ;;		_DlyOff_Main
 18464 ;;		_Exception_Main
 18465 ;;		_setControl_Lights_Table
 18466 ;;		_setRFSW_Control
 18467 ;;		_setRFSW_AdjControl
 18468 ;; This function uses a non-reentrant model
 18469 ;;
 18470                           
 18471                           
 18472                           ;psect for function _getDimmerLights_Status
 18473  1C98                     _getDimmerLights_Status:	
 18474                           
 18475                           ;incstack = 0
 18476                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18477                           ;getDimmerLights_Status@lights stored from wreg
 18478  1C98  0020               	movlb	0	; select bank0
 18479  1C99  00A2               	movwf	getDimmerLights_Status@lights
 18480                           
 18481                           ;Dimmer_B1.c: 1007: DimmerLights_SelectPointer(lights);
 18482  1C9A  0822               	movf	getDimmerLights_Status@lights,w
 18483  1C9B  319B  23E6         	fcall	_DimmerLights_SelectPointer
 18484                           
 18485                           ;Dimmer_B1.c: 1008: char status = DimmerLights->Status == 1 ? 1 : 0;
 18486  1C9D  0021               	movlb	1	; select bank1
 18487  1C9E  0A52               	incf	_DimmerLights^(0+128),w
 18488  1C9F  0086               	movwf	6
 18489  1CA0  3001               	movlw	1	; select bank2/3
 18490  1CA1  0087               	movwf	7
 18491  1CA2  3000               	movlw	0
 18492  1CA3  1801               	btfsc	1,0
 18493  1CA4  3001               	movlw	1
 18494  1CA5  0020               	movlb	0	; select bank0
 18495  1CA6  00A3               	movwf	getDimmerLights_Status@status
 18496                           
 18497                           ;Dimmer_B1.c: 1009: return status;
 18498  1CA7  0823               	movf	getDimmerLights_Status@status,w
 18499  1CA8  0008               	return
 18500  1CA9                     __end_of_getDimmerLights_Status:	
 18501                           
 18502                           	psect	text131
 18503  1BE6                     __ptext131:	
 18504 ;; *************** function _DimmerLights_SelectPointer *****************
 18505 ;; Defined at:
 18506 ;;		line 576 in file "../src/Dimmer_B1.c"
 18507 ;; Parameters:    Size  Location     Type
 18508 ;;  lights          1    wreg     unsigned char 
 18509 ;; Auto vars:     Size  Location     Type
 18510 ;;  lights          1    1[BANK0 ] unsigned char 
 18511 ;; Return value:  Size  Location     Type
 18512 ;;		None               void
 18513 ;; Registers used:
 18514 ;;		wreg
 18515 ;; Tracked objects:
 18516 ;;		On entry : 0/0
 18517 ;;		On exit  : 0/0
 18518 ;;		Unchanged: 0/0
 18519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18524 ;;Total ram usage:        2 bytes
 18525 ;; Hardware stack levels used:    1
 18526 ;; Hardware stack levels required when called:    4
 18527 ;; This function calls:
 18528 ;;		Nothing
 18529 ;; This function is called by:
 18530 ;;		_setDimmerLights_SwOn
 18531 ;;		_setDimmerLights_SwOff
 18532 ;;		_setDimmerLights_DimmingOn
 18533 ;;		_setDimmerLights_Main
 18534 ;;		_getDimmerLights_Status
 18535 ;;		_setDimmerLights_DimmingRun
 18536 ;;		_setDimmerLights_Status
 18537 ;; This function uses a non-reentrant model
 18538 ;;
 18539                           
 18540                           
 18541                           ;psect for function _DimmerLights_SelectPointer
 18542  1BE6                     _DimmerLights_SelectPointer:	
 18543                           
 18544                           ;incstack = 0
 18545                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18546                           ;DimmerLights_SelectPointer@lights stored from wreg
 18547  1BE6  0020               	movlb	0	; select bank0
 18548  1BE7  00A1               	movwf	DimmerLights_SelectPointer@lights
 18549                           
 18550                           ;Dimmer_B1.c: 578: if (lights == 1) {
 18551  1BE8  0821               	movf	DimmerLights_SelectPointer@lights,w
 18552  1BE9  3A01               	xorlw	1
 18553  1BEA  1D03               	skipz
 18554  1BEB  0008               	return
 18555                           
 18556                           ;Dimmer_B1.c: 579: DimmerLights = &DimmerLights1;
 18557  1BEC  30D3               	movlw	_DimmerLights1& (0+255)
 18558  1BED  00A0               	movwf	??_DimmerLights_SelectPointer
 18559  1BEE  0820               	movf	??_DimmerLights_SelectPointer,w
 18560  1BEF  0021               	movlb	1	; select bank1
 18561  1BF0  00D2               	movwf	_DimmerLights^(0+128)
 18562  1BF1  0008               	return
 18563  1BF2                     __end_of_DimmerLights_SelectPointer:	
 18564                           
 18565                           	psect	text132
 18566  1B29                     __ptext132:	
 18567 ;; *************** function _DelayOff_Initialization *****************
 18568 ;; Defined at:
 18569 ;;		line 26 in file "../src/DelayOff_B1.c"
 18570 ;; Parameters:    Size  Location     Type
 18571 ;;		None
 18572 ;; Auto vars:     Size  Location     Type
 18573 ;;		None
 18574 ;; Return value:  Size  Location     Type
 18575 ;;		None               void
 18576 ;; Registers used:
 18577 ;;		wreg, status,2, status,0, pclath, cstack
 18578 ;; Tracked objects:
 18579 ;;		On entry : 0/0
 18580 ;;		On exit  : 0/0
 18581 ;;		Unchanged: 0/0
 18582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18587 ;;Total ram usage:        0 bytes
 18588 ;; Hardware stack levels used:    1
 18589 ;; Hardware stack levels required when called:    6
 18590 ;; This function calls:
 18591 ;;		_DlyOff_Initialization
 18592 ;; This function is called by:
 18593 ;;		_main
 18594 ;; This function uses a non-reentrant model
 18595 ;;
 18596                           
 18597                           
 18598                           ;psect for function _DelayOff_Initialization
 18599  1B29                     _DelayOff_Initialization:	
 18600                           
 18601                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18602                           
 18603                           ;incstack = 0
 18604                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18605  1B29  3001               	movlw	1
 18606  1B2A  319B  2356         	fcall	_DlyOff_Initialization
 18607  1B2C  0008               	return
 18608  1B2D                     __end_of_DelayOff_Initialization:	
 18609                           
 18610                           	psect	text133
 18611  1B56                     __ptext133:	
 18612 ;; *************** function _DlyOff_Initialization *****************
 18613 ;; Defined at:
 18614 ;;		line 56 in file "../src/DelayOff_B1.c"
 18615 ;; Parameters:    Size  Location     Type
 18616 ;;  sw              1    wreg     unsigned char 
 18617 ;; Auto vars:     Size  Location     Type
 18618 ;;  sw              1    2[BANK0 ] unsigned char 
 18619 ;; Return value:  Size  Location     Type
 18620 ;;		None               void
 18621 ;; Registers used:
 18622 ;;		wreg, status,2, status,0, pclath, cstack
 18623 ;; Tracked objects:
 18624 ;;		On entry : 0/0
 18625 ;;		On exit  : 0/0
 18626 ;;		Unchanged: 0/0
 18627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18631 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18632 ;;Total ram usage:        1 bytes
 18633 ;; Hardware stack levels used:    1
 18634 ;; Hardware stack levels required when called:    5
 18635 ;; This function calls:
 18636 ;;		_DelayOffPointSelect
 18637 ;; This function is called by:
 18638 ;;		_DelayOff_Initialization
 18639 ;; This function uses a non-reentrant model
 18640 ;;
 18641                           
 18642                           
 18643                           ;psect for function _DlyOff_Initialization
 18644  1B56                     _DlyOff_Initialization:	
 18645                           
 18646                           ;incstack = 0
 18647                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18648                           ;DlyOff_Initialization@sw stored from wreg
 18649  1B56  0020               	movlb	0	; select bank0
 18650  1B57  00A2               	movwf	DlyOff_Initialization@sw
 18651                           
 18652                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18653  1B58  0822               	movf	DlyOff_Initialization@sw,w
 18654  1B59  319B  23DA         	fcall	_DelayOffPointSelect
 18655  1B5B  0008               	return
 18656  1B5C                     __end_of_DlyOff_Initialization:	
 18657                           
 18658                           	psect	text134
 18659  1BDA                     __ptext134:	
 18660 ;; *************** function _DelayOffPointSelect *****************
 18661 ;; Defined at:
 18662 ;;		line 7 in file "../src/DelayOff_B1.c"
 18663 ;; Parameters:    Size  Location     Type
 18664 ;;  sw              1    wreg     unsigned char 
 18665 ;; Auto vars:     Size  Location     Type
 18666 ;;  sw              1    1[BANK0 ] unsigned char 
 18667 ;; Return value:  Size  Location     Type
 18668 ;;		None               void
 18669 ;; Registers used:
 18670 ;;		wreg
 18671 ;; Tracked objects:
 18672 ;;		On entry : 0/0
 18673 ;;		On exit  : 0/0
 18674 ;;		Unchanged: 0/0
 18675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18680 ;;Total ram usage:        2 bytes
 18681 ;; Hardware stack levels used:    1
 18682 ;; Hardware stack levels required when called:    4
 18683 ;; This function calls:
 18684 ;;		Nothing
 18685 ;; This function is called by:
 18686 ;;		_DlyOff_Initialization
 18687 ;;		_DlyOff_Main
 18688 ;;		_setDelayOff_GO
 18689 ;;		_getDelayOff_GO
 18690 ;; This function uses a non-reentrant model
 18691 ;;
 18692                           
 18693                           
 18694                           ;psect for function _DelayOffPointSelect
 18695  1BDA                     _DelayOffPointSelect:	
 18696                           
 18697                           ;incstack = 0
 18698                           ; Regs used in _DelayOffPointSelect: [wreg]
 18699                           ;DelayOffPointSelect@sw stored from wreg
 18700  1BDA  0020               	movlb	0	; select bank0
 18701  1BDB  00A1               	movwf	DelayOffPointSelect@sw
 18702                           
 18703                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18704  1BDC  0821               	movf	DelayOffPointSelect@sw,w
 18705  1BDD  3A01               	xorlw	1
 18706  1BDE  1D03               	skipz
 18707  1BDF  0008               	return
 18708                           
 18709                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18710  1BE0  30DB               	movlw	_DlySw1& (0+255)
 18711  1BE1  00A0               	movwf	??_DelayOffPointSelect
 18712  1BE2  0820               	movf	??_DelayOffPointSelect,w
 18713  1BE3  0021               	movlb	1	; select bank1
 18714  1BE4  00D1               	movwf	_DelayOff^(0+128)
 18715  1BE5  0008               	return
 18716  1BE6                     __end_of_DelayOffPointSelect:	
 18717                           
 18718                           	psect	text135
 18719  1428                     __ptext135:	
 18720 ;; *************** function _Buzzer_Main *****************
 18721 ;; Defined at:
 18722 ;;		line 46 in file "../src/Buzzer_B1.c"
 18723 ;; Parameters:    Size  Location     Type
 18724 ;;		None
 18725 ;; Auto vars:     Size  Location     Type
 18726 ;;		None
 18727 ;; Return value:  Size  Location     Type
 18728 ;;		None               void
 18729 ;; Registers used:
 18730 ;;		wreg, status,2, status,0
 18731 ;; Tracked objects:
 18732 ;;		On entry : 0/0
 18733 ;;		On exit  : 0/0
 18734 ;;		Unchanged: 0/0
 18735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18739 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18740 ;;Total ram usage:        1 bytes
 18741 ;; Hardware stack levels used:    1
 18742 ;; Hardware stack levels required when called:    4
 18743 ;; This function calls:
 18744 ;;		Nothing
 18745 ;; This function is called by:
 18746 ;;		_main
 18747 ;; This function uses a non-reentrant model
 18748 ;;
 18749                           
 18750                           
 18751                           ;psect for function _Buzzer_Main
 18752  1428                     _Buzzer_Main:	
 18753                           
 18754                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18755                           
 18756                           ;incstack = 0
 18757                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18758  1428  0021               	movlb	1	; select bank1
 18759  1429  1CBB               	btfss	_Buz1^(0+128),1
 18760  142A  0008               	return
 18761                           
 18762                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18763  142B  3001               	movlw	1
 18764  142C  07BC               	addwf	(_Buz1^(0+128)+1),f
 18765  142D  3000               	movlw	0
 18766  142E  3DBD               	addwfc	((_Buz1+1)^(0+128)+1),f
 18767                           
 18768                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18769  142F  0842               	movf	((_Buz1+1)^(0+128)+6),w
 18770  1430  023D               	subwf	((_Buz1+1)^(0+128)+1),w
 18771  1431  1D03               	skipz
 18772  1432  2C35               	goto	u7395
 18773  1433  0841               	movf	(_Buz1^(0+128)+6),w
 18774  1434  023C               	subwf	(_Buz1^(0+128)+1),w
 18775  1435                     u7395:	
 18776  1435  1C03               	skipc
 18777  1436  0008               	return
 18778                           
 18779                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18780  1437  01BC               	clrf	(_Buz1^(0+128)+1)
 18781  1438  01BD               	clrf	((_Buz1+1)^(0+128)+1)
 18782                           
 18783                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18784  1439  12BB               	bcf	_Buz1^(0+128),5
 18785  143A  0020               	movlb	0	; select bank0
 18786  143B  1D8D               	btfss	13,3	;volatile
 18787  143C  2C3F               	goto	l7524
 18788  143D  0021               	movlb	1	; select bank1
 18789  143E  16BB               	bsf	_Buz1^(0+128),5
 18790  143F                     l7524:	
 18791                           
 18792                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18793  143F  0021               	movlb	1	; select bank1
 18794  1440  1ABB               	btfsc	_Buz1^(0+128),5
 18795  1441  2C6B               	goto	l96
 18796                           
 18797                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18798  1442  08BE               	movf	(_Buz1^(0+128)+3),f
 18799  1443  1D03               	skipz
 18800  1444  2C67               	goto	l97
 18801                           
 18802                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18803  1445  1DBB               	btfss	_Buz1^(0+128),3
 18804  1446  2C55               	goto	l98
 18805                           
 18806                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18807  1447  11BB               	bcf	_Buz1^(0+128),3
 18808                           
 18809                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18810  1448  083F               	movf	(_Buz1^(0+128)+4),w
 18811  1449  0020               	movlb	0	; select bank0
 18812  144A  00A0               	movwf	??_Buzzer_Main
 18813  144B  0820               	movf	??_Buzzer_Main,w
 18814  144C  0021               	movlb	1	; select bank1
 18815  144D  00BE               	movwf	(_Buz1^(0+128)+3)
 18816                           
 18817                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18818  144E  0844               	movf	((_Buz1+1)^(0+128)+8),w
 18819  144F  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 18820  1450  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 18821  1451  0843               	movf	(_Buz1^(0+128)+8),w
 18822  1452  01C1               	clrf	(_Buz1^(0+128)+6)
 18823  1453  07C1               	addwf	(_Buz1^(0+128)+6),f
 18824                           
 18825                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18826  1454  0008               	return
 18827  1455                     l98:	
 18828  1455  1E3B               	btfss	_Buz1^(0+128),4
 18829  1456  2C65               	goto	l100
 18830                           
 18831                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18832  1457  123B               	bcf	_Buz1^(0+128),4
 18833                           
 18834                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18835  1458  0840               	movf	(_Buz1^(0+128)+5),w
 18836  1459  0020               	movlb	0	; select bank0
 18837  145A  00A0               	movwf	??_Buzzer_Main
 18838  145B  0820               	movf	??_Buzzer_Main,w
 18839  145C  0021               	movlb	1	; select bank1
 18840  145D  00BE               	movwf	(_Buz1^(0+128)+3)
 18841                           
 18842                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18843  145E  0846               	movf	((_Buz1+1)^(0+128)+10),w
 18844  145F  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 18845  1460  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 18846  1461  0845               	movf	(_Buz1^(0+128)+10),w
 18847  1462  01C1               	clrf	(_Buz1^(0+128)+6)
 18848  1463  07C1               	addwf	(_Buz1^(0+128)+6),f
 18849                           
 18850                           ;Buzzer_B1.c: 62: } else {
 18851  1464  0008               	return
 18852  1465                     l100:	
 18853                           
 18854                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18855  1465  10BB               	bcf	_Buz1^(0+128),1
 18856                           
 18857                           ;Buzzer_B1.c: 64: }
 18858                           ;Buzzer_B1.c: 65: } else {
 18859  1466  0008               	return
 18860  1467                     l97:	
 18861                           
 18862                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18863  1467  16BB               	bsf	_Buz1^(0+128),5
 18864                           
 18865                           ;Buzzer_B1.c: 68: RB3 = 1;
 18866  1468  0020               	movlb	0	; select bank0
 18867  1469  158D               	bsf	13,3	;volatile
 18868                           
 18869                           ;Buzzer_B1.c: 69: }
 18870                           ;Buzzer_B1.c: 70: } else {
 18871  146A  0008               	return
 18872  146B                     l96:	
 18873                           
 18874                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18875  146B  12BB               	bcf	_Buz1^(0+128),5
 18876                           
 18877                           ;Buzzer_B1.c: 73: RB3 = 0;
 18878  146C  0020               	movlb	0	; select bank0
 18879  146D  118D               	bcf	13,3	;volatile
 18880                           
 18881                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18882  146E  3001               	movlw	1
 18883  146F  0021               	movlb	1	; select bank1
 18884  1470  02BE               	subwf	(_Buz1^(0+128)+3),f
 18885  1471  0008               	return
 18886  1472                     __end_of_Buzzer_Main:	
 18887                           
 18888                           	psect	text136
 18889  1B17                     __ptext136:	
 18890 ;; *************** function _Buzzer_Initialization *****************
 18891 ;; Defined at:
 18892 ;;		line 11 in file "../src/Buzzer_B1.c"
 18893 ;; Parameters:    Size  Location     Type
 18894 ;;		None
 18895 ;; Auto vars:     Size  Location     Type
 18896 ;;		None
 18897 ;; Return value:  Size  Location     Type
 18898 ;;		None               void
 18899 ;; Registers used:
 18900 ;;		None
 18901 ;; Tracked objects:
 18902 ;;		On entry : 0/0
 18903 ;;		On exit  : 0/0
 18904 ;;		Unchanged: 0/0
 18905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18910 ;;Total ram usage:        0 bytes
 18911 ;; Hardware stack levels used:    1
 18912 ;; Hardware stack levels required when called:    4
 18913 ;; This function calls:
 18914 ;;		Nothing
 18915 ;; This function is called by:
 18916 ;;		_main
 18917 ;; This function uses a non-reentrant model
 18918 ;;
 18919                           
 18920                           
 18921                           ;psect for function _Buzzer_Initialization
 18922  1B17                     _Buzzer_Initialization:	
 18923                           
 18924                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18925                           
 18926                           ;incstack = 0
 18927                           ; Regs used in _Buzzer_Initialization: []
 18928  1B17  0021               	movlb	1	; select bank1
 18929  1B18  143B               	bsf	_Buz1^(0+128),0
 18930  1B19  0008               	return
 18931  1B1A                     __end_of_Buzzer_Initialization:	
 18932                           
 18933                           	psect	intentry
 18934  0004                     __pintentry:	
 18935 ;; *************** function _ISR *****************
 18936 ;; Defined at:
 18937 ;;		line 116 in file "../src/MCU_B1.c"
 18938 ;; Parameters:    Size  Location     Type
 18939 ;;		None
 18940 ;; Auto vars:     Size  Location     Type
 18941 ;;		None
 18942 ;; Return value:  Size  Location     Type
 18943 ;;		None               void
 18944 ;; Registers used:
 18945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18946 ;; Tracked objects:
 18947 ;;		On entry : 0/0
 18948 ;;		On exit  : 0/0
 18949 ;;		Unchanged: 0/0
 18950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18953 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18954 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18955 ;;Total ram usage:        1 bytes
 18956 ;; Hardware stack levels used:    1
 18957 ;; Hardware stack levels required when called:    3
 18958 ;; This function calls:
 18959 ;;		_IOC_ISR
 18960 ;;		_TMR1_ISR
 18961 ;; This function is called by:
 18962 ;;		Interrupt level 1
 18963 ;; This function uses a non-reentrant model
 18964 ;;
 18965                           
 18966  0004                     _ISR:	
 18967                           
 18968                           ;incstack = 0
 18969                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18970  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18971  0005  3180               	pagesel	$
 18972  0006  0020               	movlb	0	; select bank0
 18973  0007  087F               	movf	127,w
 18974  0008  00FC               	movwf	??_ISR
 18975                           
 18976                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 18977  0009  0021               	movlb	1	; select bank1
 18978  000A  1C11               	btfss	17,0	;volatile
 18979  000B  2813               	goto	i1l1185
 18980  000C  0020               	movlb	0	; select bank0
 18981  000D  1C11               	btfss	17,0	;volatile
 18982  000E  2813               	goto	i1l1185
 18983                           
 18984                           ;MCU_B1.c: 126: TMR1_ISR();
 18985  000F  319F  27A2  3180   	fcall	_TMR1_ISR
 18986                           
 18987                           ;MCU_B1.c: 127: }
 18988  0012  281B               	goto	i1l1188
 18989  0013                     i1l1185:	
 18990                           
 18991                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18992  0013  198B               	btfsc	11,3	;volatile
 18993  0014  1C0B               	btfss	11,0	;volatile
 18994  0015  281B               	goto	i1l1188
 18995  0016  0027               	movlb	7	; select bank7
 18996  0017  1D16               	btfss	22,2	;volatile
 18997  0018  281B               	goto	i1l1188
 18998                           
 18999                           ;MCU_B1.c: 139: IOC_ISR();
 19000  0019  319B  2395         	fcall	_IOC_ISR
 19001  001B                     i1l1188:	
 19002                           ;MCU_B1.c: 140: }
 19003                           ;MCU_B1.c: 148: return;
 19004                           
 19005  001B  087C               	movf	??_ISR,w
 19006  001C  0020               	movlb	0	; select bank0
 19007  001D  00FF               	movwf	127
 19008  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19009  001F  0009               	retfie
 19010  0020                     __end_of_ISR:	
 19011                           
 19012                           	psect	text138
 19013  1FA2                     __ptext138:	
 19014 ;; *************** function _TMR1_ISR *****************
 19015 ;; Defined at:
 19016 ;;		line 236 in file "../src/MCU_B1.c"
 19017 ;; Parameters:    Size  Location     Type
 19018 ;;		None
 19019 ;; Auto vars:     Size  Location     Type
 19020 ;;		None
 19021 ;; Return value:  Size  Location     Type
 19022 ;;		None               void
 19023 ;; Registers used:
 19024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19025 ;; Tracked objects:
 19026 ;;		On entry : 0/0
 19027 ;;		On exit  : 0/0
 19028 ;;		Unchanged: 0/0
 19029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19034 ;;Total ram usage:        0 bytes
 19035 ;; Hardware stack levels used:    1
 19036 ;; Hardware stack levels required when called:    1
 19037 ;; This function calls:
 19038 ;;		_DimmerLights_TMR_1
 19039 ;; This function is called by:
 19040 ;;		_ISR
 19041 ;; This function uses a non-reentrant model
 19042 ;;
 19043                           
 19044                           
 19045                           ;psect for function _TMR1_ISR
 19046  1FA2                     _TMR1_ISR:	
 19047                           
 19048                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19049                           
 19050                           ;incstack = 0
 19051                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19052  1FA2  30FA               	movlw	250
 19053  1FA3  0020               	movlb	0	; select bank0
 19054  1FA4  0097               	movwf	23	;volatile
 19055                           
 19056                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19057  1FA5  3038               	movlw	56
 19058  1FA6  0096               	movwf	22	;volatile
 19059                           
 19060                           ;MCU_B1.c: 240: TMR1IF = 0;
 19061  1FA7  1011               	bcf	17,0	;volatile
 19062                           
 19063                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19064  1FA8  318B  232E  319F   	fcall	_DimmerLights_TMR_1
 19065                           
 19066                           ;MCU_B1.c: 271: Timer1.Count++;
 19067  1FAB  3001               	movlw	1
 19068  1FAC  0022               	movlb	2	; select bank2
 19069  1FAD  07BF               	addwf	(_Timer1^(0+256)+1),f
 19070  1FAE  3000               	movlw	0
 19071  1FAF  3DC0               	addwfc	((_Timer1+1)^(0+256)+1),f
 19072                           
 19073                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19074  1FB0  3001               	movlw	1
 19075  1FB1  3E3E               	addlw	_Timer1& (0+255)
 19076  1FB2  0086               	movwf	6
 19077  1FB3  3001               	movlw	1	; select bank2/3
 19078  1FB4  0087               	movwf	7
 19079  1FB5  3F40               	moviw [0]fsr1
 19080  1FB6  3AC8               	xorlw	200
 19081  1FB7  1D03               	skipz
 19082  1FB8  2FBB               	goto	u749_25
 19083  1FB9  3F41               	moviw [1]fsr1
 19084  1FBA  3A00               	xorlw	0
 19085  1FBB                     u749_25:	
 19086  1FBB  1D03               	skipz
 19087  1FBC  0008               	return
 19088                           
 19089                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19090  1FBD  01BF               	clrf	(_Timer1^(0+256)+1)
 19091  1FBE  01C0               	clrf	((_Timer1+1)^(0+256)+1)
 19092                           
 19093                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19094  1FBF  143E               	bsf	_Timer1^(0+256),0
 19095  1FC0  0008               	return
 19096  1FC1                     __end_of_TMR1_ISR:	
 19097                           
 19098                           	psect	text139
 19099  0B2E                     __ptext139:	
 19100 ;; *************** function _DimmerLights_TMR_1 *****************
 19101 ;; Defined at:
 19102 ;;		line 1307 in file "../src/Dimmer_B1.c"
 19103 ;; Parameters:    Size  Location     Type
 19104 ;;		None
 19105 ;; Auto vars:     Size  Location     Type
 19106 ;;  count           1    2[COMMON] unsigned char 
 19107 ;; Return value:  Size  Location     Type
 19108 ;;		None               void
 19109 ;; Registers used:
 19110 ;;		wreg, status,2, status,0
 19111 ;; Tracked objects:
 19112 ;;		On entry : 0/0
 19113 ;;		On exit  : 0/0
 19114 ;;		Unchanged: 0/0
 19115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19117 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19118 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19119 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19120 ;;Total ram usage:        3 bytes
 19121 ;; Hardware stack levels used:    1
 19122 ;; This function calls:
 19123 ;;		Nothing
 19124 ;; This function is called by:
 19125 ;;		_TMR1_ISR
 19126 ;; This function uses a non-reentrant model
 19127 ;;
 19128                           
 19129                           
 19130                           ;psect for function _DimmerLights_TMR_1
 19131  0B2E                     _DimmerLights_TMR_1:	
 19132                           
 19133                           ;Dimmer_B1.c: 1308: char count = 0;
 19134                           
 19135                           ;incstack = 0
 19136                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19137  0B2E  01F2               	clrf	DimmerLights_TMR_1@count
 19138                           
 19139                           ;Dimmer_B1.c: 1310: count = 80;
 19140  0B2F  3050               	movlw	80
 19141  0B30  00F0               	movwf	??_DimmerLights_TMR_1
 19142  0B31  0870               	movf	??_DimmerLights_TMR_1,w
 19143  0B32  00F2               	movwf	DimmerLights_TMR_1@count
 19144                           
 19145                           ;Dimmer_B1.c: 1315: DimmerIntr1.Count++;
 19146  0B33  3001               	movlw	1
 19147  0B34  00F0               	movwf	??_DimmerLights_TMR_1
 19148  0B35  0870               	movf	??_DimmerLights_TMR_1,w
 19149  0B36  0021               	movlb	1	; select bank1
 19150  0B37  07C8               	addwf	(_DimmerIntr1^(0+128)+1),f
 19151                           
 19152                           ;Dimmer_B1.c: 1316: if (DimmerIntr1.Count >= count - 1) {
 19153  0B38  0872               	movf	DimmerLights_TMR_1@count,w
 19154  0B39  3EFF               	addlw	255
 19155  0B3A  00F0               	movwf	??_DimmerLights_TMR_1
 19156  0B3B  30FF               	movlw	255
 19157  0B3C  1803               	skipnc
 19158  0B3D  3000               	movlw	0
 19159  0B3E  00F1               	movwf	??_DimmerLights_TMR_1+1
 19160  0B3F  0871               	movf	??_DimmerLights_TMR_1+1,w
 19161  0B40  3A80               	xorlw	128
 19162  0B41  3C80               	sublw	128
 19163  0B42  1D03               	skipz
 19164  0B43  2B46               	goto	u659_25
 19165  0B44  0870               	movf	??_DimmerLights_TMR_1,w
 19166  0B45  0248               	subwf	(_DimmerIntr1^(0+128)+1),w
 19167  0B46                     u659_25:	
 19168  0B46  1C03               	skipc
 19169  0B47  2B4B               	goto	i1l7058
 19170                           
 19171                           ;Dimmer_B1.c: 1317: DimmerIntr1.Count = 0;
 19172  0B48  0021               	movlb	1	; select bank1
 19173  0B49  01C8               	clrf	(_DimmerIntr1^(0+128)+1)
 19174                           
 19175                           ;Dimmer_B1.c: 1318: DimmerIntr1.Start = 0;
 19176  0B4A  1147               	bcf	_DimmerIntr1^(0+128),2
 19177  0B4B                     i1l7058:	
 19178                           
 19179                           ;Dimmer_B1.c: 1319: }
 19180                           ;Dimmer_B1.c: 1323: if (DimmerIntr1.Trigger == 1) {
 19181  0B4B  0021               	movlb	1	; select bank1
 19182  0B4C  1FC7               	btfss	_DimmerIntr1^(0+128),7
 19183  0B4D  2B5E               	goto	i1l831
 19184                           
 19185                           ;Dimmer_B1.c: 1324: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 19186  0B4E  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 19187  0B4F  0248               	subwf	(_DimmerIntr1^(0+128)+1),w
 19188  0B50  1C03               	skipc
 19189  0B51  2B5E               	goto	i1l831
 19190                           
 19191                           ;Dimmer_B1.c: 1325: DimmerIntr1.Trigger = 0;
 19192  0B52  13C7               	bcf	_DimmerIntr1^(0+128),7
 19193                           
 19194                           ;Dimmer_B1.c: 1326: DimmerIntr1.GO = 1;
 19195  0B53  1447               	bsf	_DimmerIntr1^(0+128),0
 19196                           
 19197                           ;Dimmer_B1.c: 1327: DimmerIntr1.DimmingValue = DimmerIntr1.DimmingValue+DimmerIntr1.Dimm
      +                          ingValue+DimmerIntr1.DimmingValue;
 19198  0B54  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 19199  0B55  074B               	addwf	(_DimmerIntr1^(0+128)+4),w
 19200  0B56  074B               	addwf	(_DimmerIntr1^(0+128)+4),w
 19201  0B57  00F0               	movwf	??_DimmerLights_TMR_1
 19202  0B58  0870               	movf	??_DimmerLights_TMR_1,w
 19203  0B59  00CB               	movwf	(_DimmerIntr1^(0+128)+4)
 19204                           
 19205                           ;Dimmer_B1.c: 1329: if (DimmerIntr1.ControlStatus == 1) {
 19206  0B5A  1DC7               	btfss	_DimmerIntr1^(0+128),3
 19207  0B5B  2B5E               	goto	i1l831
 19208                           
 19209                           ;Dimmer_B1.c: 1330: RB1 = 1;
 19210  0B5C  0020               	movlb	0	; select bank0
 19211  0B5D  148D               	bsf	13,1	;volatile
 19212  0B5E                     i1l831:	
 19213                           
 19214                           ;Dimmer_B1.c: 1332: }
 19215                           ;Dimmer_B1.c: 1333: }
 19216                           ;Dimmer_B1.c: 1334: }
 19217                           ;Dimmer_B1.c: 1337: if (DimmerIntr1.GO == 1) {
 19218  0B5E  0021               	movlb	1	; select bank1
 19219  0B5F  1C47               	btfss	_DimmerIntr1^(0+128),0
 19220  0B60  2B6C               	goto	i1l834
 19221                           
 19222                           ;Dimmer_B1.c: 1338: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 19223  0B61  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 19224  0B62  0248               	subwf	(_DimmerIntr1^(0+128)+1),w
 19225  0B63  1C03               	skipc
 19226  0B64  0008               	return
 19227                           
 19228                           ;Dimmer_B1.c: 1339: DimmerIntr1.GO = 0;
 19229  0B65  1047               	bcf	_DimmerIntr1^(0+128),0
 19230                           
 19231                           ;Dimmer_B1.c: 1340: DimmerIntr1.Tune = 1;
 19232  0B66  14C7               	bsf	_DimmerIntr1^(0+128),1
 19233                           
 19234                           ;Dimmer_B1.c: 1342: if (DimmerIntr1.ControlStatus == 1) {
 19235  0B67  1DC7               	btfss	_DimmerIntr1^(0+128),3
 19236  0B68  0008               	return
 19237                           
 19238                           ;Dimmer_B1.c: 1343: RB1 = 0;
 19239  0B69  0020               	movlb	0	; select bank0
 19240  0B6A  108D               	bcf	13,1	;volatile
 19241                           
 19242                           ;Dimmer_B1.c: 1345: }
 19243                           ;Dimmer_B1.c: 1346: }
 19244                           ;Dimmer_B1.c: 1347: } else {
 19245  0B6B  0008               	return
 19246  0B6C                     i1l834:	
 19247                           
 19248                           ;Dimmer_B1.c: 1348: if (DimmerIntr1.Tune == 1) {
 19249  0B6C  1CC7               	btfss	_DimmerIntr1^(0+128),1
 19250  0B6D  0008               	return
 19251                           
 19252                           ;Dimmer_B1.c: 1349: DimmerIntr1.Tune = 0;
 19253  0B6E  10C7               	bcf	_DimmerIntr1^(0+128),1
 19254                           
 19255                           ;Dimmer_B1.c: 1350: DimmerIntr1.TuneTime++;
 19256  0B6F  3001               	movlw	1
 19257  0B70  00F0               	movwf	??_DimmerLights_TMR_1
 19258  0B71  0870               	movf	??_DimmerLights_TMR_1,w
 19259  0B72  07C9               	addwf	(_DimmerIntr1^(0+128)+2),f
 19260                           
 19261                           ;Dimmer_B1.c: 1351: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19262  0B73  084A               	movf	(_DimmerIntr1^(0+128)+3),w
 19263  0B74  0249               	subwf	(_DimmerIntr1^(0+128)+2),w
 19264  0B75  1C03               	skipc
 19265  0B76  0008               	return
 19266                           
 19267                           ;Dimmer_B1.c: 1352: DimmerIntr1.TuneTime = 0;
 19268  0B77  01C9               	clrf	(_DimmerIntr1^(0+128)+2)
 19269                           
 19270                           ;Dimmer_B1.c: 1353: if (DimmerIntr1.Dimming_Sw == 1) {
 19271  0B78  1E47               	btfss	_DimmerIntr1^(0+128),4
 19272  0B79  2B90               	goto	i1l840
 19273                           
 19274                           ;Dimmer_B1.c: 1354: if (DimmerIntr1.Dimming_Status == 0) {
 19275  0B7A  1AC7               	btfsc	_DimmerIntr1^(0+128),5
 19276  0B7B  2B87               	goto	i1l7092
 19277                           
 19278                           ;Dimmer_B1.c: 1355: if (DimmerIntr1.DimmingValue < ((char)(60*0.8))) {
 19279  0B7C  3030               	movlw	48
 19280  0B7D  024B               	subwf	(_DimmerIntr1^(0+128)+4),w
 19281  0B7E  1803               	skipnc
 19282  0B7F  2B85               	goto	i1l842
 19283                           
 19284                           ;Dimmer_B1.c: 1356: DimmerIntr1.DimmingValue++;
 19285  0B80  3001               	movlw	1
 19286  0B81  00F0               	movwf	??_DimmerLights_TMR_1
 19287  0B82  0870               	movf	??_DimmerLights_TMR_1,w
 19288  0B83  07CB               	addwf	(_DimmerIntr1^(0+128)+4),f
 19289                           
 19290                           ;Dimmer_B1.c: 1357: } else {
 19291  0B84  0008               	return
 19292  0B85                     i1l842:	
 19293                           
 19294                           ;Dimmer_B1.c: 1358: DimmerIntr1.Dimming_Status = 1;
 19295  0B85  16C7               	bsf	_DimmerIntr1^(0+128),5
 19296                           
 19297                           ;Dimmer_B1.c: 1359: }
 19298                           ;Dimmer_B1.c: 1360: } else {
 19299  0B86  0008               	return
 19300  0B87                     i1l7092:	
 19301                           
 19302                           ;Dimmer_B1.c: 1361: if (DimmerIntr1.DimmingValue > ((char)(30*0.8))) {
 19303  0B87  3019               	movlw	25
 19304  0B88  024B               	subwf	(_DimmerIntr1^(0+128)+4),w
 19305  0B89  1C03               	skipc
 19306  0B8A  2B8E               	goto	i1l845
 19307                           
 19308                           ;Dimmer_B1.c: 1362: DimmerIntr1.DimmingValue--;
 19309  0B8B  3001               	movlw	1
 19310  0B8C  02CB               	subwf	(_DimmerIntr1^(0+128)+4),f
 19311                           
 19312                           ;Dimmer_B1.c: 1363: } else {
 19313  0B8D  0008               	return
 19314  0B8E                     i1l845:	
 19315                           
 19316                           ;Dimmer_B1.c: 1364: DimmerIntr1.Dimming_Status = 0;
 19317  0B8E  12C7               	bcf	_DimmerIntr1^(0+128),5
 19318                           
 19319                           ;Dimmer_B1.c: 1365: }
 19320                           ;Dimmer_B1.c: 1366: }
 19321                           ;Dimmer_B1.c: 1367: } else if (DimmerIntr1.Dimming_RF == 1) {
 19322  0B8F  0008               	return
 19323  0B90                     i1l840:	
 19324  0B90  1F47               	btfss	_DimmerIntr1^(0+128),6
 19325  0B91  0008               	return
 19326                           
 19327                           ;Dimmer_B1.c: 1368: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19328  0B92  084C               	movf	(_DimmerIntr1^(0+128)+5),w
 19329  0B93  024B               	subwf	(_DimmerIntr1^(0+128)+4),w
 19330  0B94  1803               	skipnc
 19331  0B95  2B9B               	goto	i1l7100
 19332                           
 19333                           ;Dimmer_B1.c: 1369: DimmerIntr1.DimmingValue++;
 19334  0B96  3001               	movlw	1
 19335  0B97  00F0               	movwf	??_DimmerLights_TMR_1
 19336  0B98  0870               	movf	??_DimmerLights_TMR_1,w
 19337  0B99  07CB               	addwf	(_DimmerIntr1^(0+128)+4),f
 19338                           
 19339                           ;Dimmer_B1.c: 1370: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19340  0B9A  0008               	return
 19341  0B9B                     i1l7100:	
 19342  0B9B  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 19343  0B9C  024C               	subwf	(_DimmerIntr1^(0+128)+5),w
 19344  0B9D  1803               	skipnc
 19345  0B9E  2BA2               	goto	i1l851
 19346                           
 19347                           ;Dimmer_B1.c: 1371: DimmerIntr1.DimmingValue--;
 19348  0B9F  3001               	movlw	1
 19349  0BA0  02CB               	subwf	(_DimmerIntr1^(0+128)+4),f
 19350                           
 19351                           ;Dimmer_B1.c: 1372: } else {
 19352  0BA1  0008               	return
 19353  0BA2                     i1l851:	
 19354                           
 19355                           ;Dimmer_B1.c: 1373: DimmerIntr1.Dimming_RF = 0;
 19356  0BA2  1347               	bcf	_DimmerIntr1^(0+128),6
 19357  0BA3  0008               	return
 19358  0BA4                     __end_of_DimmerLights_TMR_1:	
 19359                           
 19360                           	psect	text140
 19361  1B95                     __ptext140:	
 19362 ;; *************** function _IOC_ISR *****************
 19363 ;; Defined at:
 19364 ;;		line 394 in file "../src/MCU_B1.c"
 19365 ;; Parameters:    Size  Location     Type
 19366 ;;		None
 19367 ;; Auto vars:     Size  Location     Type
 19368 ;;		None
 19369 ;; Return value:  Size  Location     Type
 19370 ;;		None               void
 19371 ;; Registers used:
 19372 ;;		wreg, status,2, status,0, pclath, cstack
 19373 ;; Tracked objects:
 19374 ;;		On entry : 0/0
 19375 ;;		On exit  : 0/0
 19376 ;;		Unchanged: 0/0
 19377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19382 ;;Total ram usage:        0 bytes
 19383 ;; Hardware stack levels used:    1
 19384 ;; Hardware stack levels required when called:    2
 19385 ;; This function calls:
 19386 ;;		_DimmerLights_IOC_1
 19387 ;; This function is called by:
 19388 ;;		_ISR
 19389 ;; This function uses a non-reentrant model
 19390 ;;
 19391                           
 19392                           
 19393                           ;psect for function _IOC_ISR
 19394  1B95                     _IOC_ISR:	
 19395                           
 19396                           ;MCU_B1.c: 395: IOCBF2 = 0;
 19397                           
 19398                           ;incstack = 0
 19399                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19400  1B95  0027               	movlb	7	; select bank7
 19401  1B96  1116               	bcf	22,2	;volatile
 19402                           
 19403                           ;MCU_B1.c: 396: IOCIF = 0;
 19404  1B97  100B               	bcf	11,0	;volatile
 19405                           
 19406                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 19407  1B98  0021               	movlb	1	; select bank1
 19408  1B99  1C2E               	btfss	_myMain^(0+128),0
 19409  1B9A  0008               	return
 19410                           
 19411                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 19412  1B9B  3190  20B3         	fcall	_DimmerLights_IOC_1
 19413  1B9D  0008               	return
 19414  1B9E                     __end_of_IOC_ISR:	
 19415                           
 19416                           	psect	text141
 19417  10B3                     __ptext141:	
 19418 ;; *************** function _DimmerLights_IOC_1 *****************
 19419 ;; Defined at:
 19420 ;;		line 1381 in file "../src/Dimmer_B1.c"
 19421 ;; Parameters:    Size  Location     Type
 19422 ;;		None
 19423 ;; Auto vars:     Size  Location     Type
 19424 ;;		None
 19425 ;; Return value:  Size  Location     Type
 19426 ;;		None               void
 19427 ;; Registers used:
 19428 ;;		wreg, status,2, status,0, pclath, cstack
 19429 ;; Tracked objects:
 19430 ;;		On entry : 0/0
 19431 ;;		On exit  : 0/0
 19432 ;;		Unchanged: 0/0
 19433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19436 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19437 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19438 ;;Total ram usage:        3 bytes
 19439 ;; Hardware stack levels used:    1
 19440 ;; Hardware stack levels required when called:    1
 19441 ;; This function calls:
 19442 ;;		i1___awdiv
 19443 ;; This function is called by:
 19444 ;;		_IOC_ISR
 19445 ;; This function uses a non-reentrant model
 19446 ;;
 19447                           
 19448                           
 19449                           ;psect for function _DimmerLights_IOC_1
 19450  10B3                     _DimmerLights_IOC_1:	
 19451                           
 19452                           ;Dimmer_B1.c: 1383: if (RB2 == 1) {
 19453                           
 19454                           ;incstack = 0
 19455                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 19456  10B3  0020               	movlb	0	; select bank0
 19457  10B4  1D0D               	btfss	13,2	;volatile
 19458  10B5  0008               	return
 19459                           
 19460                           ;Dimmer_B1.c: 1384: DimmerIntr1.Start = 1;
 19461  10B6  0021               	movlb	1	; select bank1
 19462  10B7  1547               	bsf	_DimmerIntr1^(0+128),2
 19463                           
 19464                           ;Dimmer_B1.c: 1385: DimmerIntr1.Count=0;
 19465  10B8  01C8               	clrf	(_DimmerIntr1^(0+128)+1)
 19466                           
 19467                           ;Dimmer_B1.c: 1388: if (DimmerIntr1.ControlStatus == 1) {
 19468  10B9  1DC7               	btfss	_DimmerIntr1^(0+128),3
 19469  10BA  0008               	return
 19470                           
 19471                           ;Dimmer_B1.c: 1389: DimmerIntr1.Trigger = 1;
 19472  10BB  17C7               	bsf	_DimmerIntr1^(0+128),7
 19473                           
 19474                           ;Dimmer_B1.c: 1390: DimmerIntr1.TuneValue = DimmerIntr1.DimmingValue;
 19475  10BC  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 19476  10BD  00F9               	movwf	??_DimmerLights_IOC_1
 19477  10BE  0879               	movf	??_DimmerLights_IOC_1,w
 19478  10BF  00CE               	movwf	(_DimmerIntr1^(0+128)+7)
 19479                           
 19480                           ;Dimmer_B1.c: 1391: DimmerIntr1.DimmingValue = ((char)(80 / 2) - (char)(DimmerIntr1.Tune
      +                          Value / 2));
 19481  10C0  3002               	movlw	2
 19482  10C1  00F0               	movwf	i1___awdiv@divisor
 19483  10C2  3000               	movlw	0
 19484  10C3  00F1               	movwf	i1___awdiv@divisor+1
 19485  10C4  084E               	movf	(_DimmerIntr1^(0+128)+7),w
 19486  10C5  00F9               	movwf	??_DimmerLights_IOC_1
 19487  10C6  01FA               	clrf	??_DimmerLights_IOC_1+1
 19488  10C7  0879               	movf	??_DimmerLights_IOC_1,w
 19489  10C8  00F2               	movwf	i1___awdiv@dividend
 19490  10C9  087A               	movf	??_DimmerLights_IOC_1+1,w
 19491  10CA  00F3               	movwf	i1___awdiv@dividend+1
 19492  10CB  3195  2515         	fcall	i1___awdiv
 19493  10CD  0870               	movf	?i1___awdiv,w
 19494  10CE  3AFF               	xorlw	255
 19495  10CF  3E01               	addlw	1
 19496  10D0  3E28               	addlw	40
 19497  10D1  00FB               	movwf	??_DimmerLights_IOC_1+2
 19498  10D2  087B               	movf	??_DimmerLights_IOC_1+2,w
 19499  10D3  0021               	movlb	1	; select bank1
 19500  10D4  00CB               	movwf	(_DimmerIntr1^(0+128)+4)
 19501  10D5  0008               	return
 19502  10D6                     __end_of_DimmerLights_IOC_1:	
 19503                           
 19504                           	psect	text142
 19505  1515                     __ptext142:	
 19506 ;; *************** function i1___awdiv *****************
 19507 ;; Defined at:
 19508 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 19509 ;; Parameters:    Size  Location     Type
 19510 ;;  divisor         2    0[COMMON] int 
 19511 ;;  dividend        2    2[COMMON] int 
 19512 ;; Auto vars:     Size  Location     Type
 19513 ;;  __awdiv         2    7[COMMON] int 
 19514 ;;  __awdiv         1    6[COMMON] unsigned char 
 19515 ;;  __awdiv         1    5[COMMON] unsigned char 
 19516 ;; Return value:  Size  Location     Type
 19517 ;;                  2    0[COMMON] int 
 19518 ;; Registers used:
 19519 ;;		wreg, status,2, status,0
 19520 ;; Tracked objects:
 19521 ;;		On entry : 0/0
 19522 ;;		On exit  : 0/0
 19523 ;;		Unchanged: 0/0
 19524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19525 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19526 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19527 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19528 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19529 ;;Total ram usage:        9 bytes
 19530 ;; Hardware stack levels used:    1
 19531 ;; This function calls:
 19532 ;;		Nothing
 19533 ;; This function is called by:
 19534 ;;		_DimmerLights_IOC_1
 19535 ;; This function uses a non-reentrant model
 19536 ;;
 19537                           
 19538                           
 19539                           ;psect for function i1___awdiv
 19540  1515                     i1___awdiv:	
 19541                           
 19542                           ;incstack = 0
 19543                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 19544  1515  01F6               	clrf	i1___awdiv@sign
 19545  1516  1FF1               	btfss	i1___awdiv@divisor+1,7
 19546  1517  2D1F               	goto	i1l6922
 19547  1518  09F0               	comf	i1___awdiv@divisor,f
 19548  1519  09F1               	comf	i1___awdiv@divisor+1,f
 19549  151A  0AF0               	incf	i1___awdiv@divisor,f
 19550  151B  1903               	skipnz
 19551  151C  0AF1               	incf	i1___awdiv@divisor+1,f
 19552  151D  01F6               	clrf	i1___awdiv@sign
 19553  151E  0AF6               	incf	i1___awdiv@sign,f
 19554  151F                     i1l6922:	
 19555  151F  1FF3               	btfss	i1___awdiv@dividend+1,7
 19556  1520  2D2A               	goto	i1l6928
 19557  1521  09F2               	comf	i1___awdiv@dividend,f
 19558  1522  09F3               	comf	i1___awdiv@dividend+1,f
 19559  1523  0AF2               	incf	i1___awdiv@dividend,f
 19560  1524  1903               	skipnz
 19561  1525  0AF3               	incf	i1___awdiv@dividend+1,f
 19562  1526  3001               	movlw	1
 19563  1527  00F4               	movwf	??i1___awdiv
 19564  1528  0874               	movf	??i1___awdiv,w
 19565  1529  06F6               	xorwf	i1___awdiv@sign,f
 19566  152A                     i1l6928:	
 19567  152A  01F7               	clrf	i1___awdiv@quotient
 19568  152B  01F8               	clrf	i1___awdiv@quotient+1
 19569  152C  0871               	movf	i1___awdiv@divisor+1,w
 19570  152D  0470               	iorwf	i1___awdiv@divisor,w
 19571  152E  1903               	skipnz
 19572  152F  2D59               	goto	i1l6950
 19573  1530  01F5               	clrf	i1___awdiv@counter
 19574  1531  0AF5               	incf	i1___awdiv@counter,f
 19575  1532                     i1l6938:	
 19576  1532  1BF1               	btfsc	i1___awdiv@divisor+1,7
 19577  1533  2D3E               	goto	i1l6940
 19578  1534  3001               	movlw	1
 19579  1535                     u638_25:	
 19580  1535  35F0               	lslf	i1___awdiv@divisor,f
 19581  1536  0DF1               	rlf	i1___awdiv@divisor+1,f
 19582  1537  0B89               	decfsz	9,f
 19583  1538  2D35               	goto	u638_25
 19584  1539  3001               	movlw	1
 19585  153A  00F4               	movwf	??i1___awdiv
 19586  153B  0874               	movf	??i1___awdiv,w
 19587  153C  07F5               	addwf	i1___awdiv@counter,f
 19588  153D  2D32               	goto	i1l6938
 19589  153E                     i1l6940:	
 19590  153E  3001               	movlw	1
 19591  153F                     u640_25:	
 19592  153F  35F7               	lslf	i1___awdiv@quotient,f
 19593  1540  0DF8               	rlf	i1___awdiv@quotient+1,f
 19594  1541  0B89               	decfsz	9,f
 19595  1542  2D3F               	goto	u640_25
 19596  1543  0871               	movf	i1___awdiv@divisor+1,w
 19597  1544  0273               	subwf	i1___awdiv@dividend+1,w
 19598  1545  1D03               	skipz
 19599  1546  2D49               	goto	u641_25
 19600  1547  0870               	movf	i1___awdiv@divisor,w
 19601  1548  0272               	subwf	i1___awdiv@dividend,w
 19602  1549                     u641_25:	
 19603  1549  1C03               	skipc
 19604  154A  2D50               	goto	i1l6946
 19605  154B  0870               	movf	i1___awdiv@divisor,w
 19606  154C  02F2               	subwf	i1___awdiv@dividend,f
 19607  154D  0871               	movf	i1___awdiv@divisor+1,w
 19608  154E  3BF3               	subwfb	i1___awdiv@dividend+1,f
 19609  154F  1477               	bsf	i1___awdiv@quotient,0
 19610  1550                     i1l6946:	
 19611  1550  3001               	movlw	1
 19612  1551                     u642_25:	
 19613  1551  36F1               	lsrf	i1___awdiv@divisor+1,f
 19614  1552  0CF0               	rrf	i1___awdiv@divisor,f
 19615  1553  0B89               	decfsz	9,f
 19616  1554  2D51               	goto	u642_25
 19617  1555  3001               	movlw	1
 19618  1556  02F5               	subwf	i1___awdiv@counter,f
 19619  1557  1D03               	btfss	3,2
 19620  1558  2D3E               	goto	i1l6940
 19621  1559                     i1l6950:	
 19622  1559  0876               	movf	i1___awdiv@sign,w
 19623  155A  1903               	btfsc	3,2
 19624  155B  2D61               	goto	i1l6954
 19625  155C  09F7               	comf	i1___awdiv@quotient,f
 19626  155D  09F8               	comf	i1___awdiv@quotient+1,f
 19627  155E  0AF7               	incf	i1___awdiv@quotient,f
 19628  155F  1903               	skipnz
 19629  1560  0AF8               	incf	i1___awdiv@quotient+1,f
 19630  1561                     i1l6954:	
 19631  1561  0878               	movf	i1___awdiv@quotient+1,w
 19632  1562  01F1               	clrf	?i1___awdiv+1
 19633  1563  07F1               	addwf	?i1___awdiv+1,f
 19634  1564  0877               	movf	i1___awdiv@quotient,w
 19635  1565  01F0               	clrf	?i1___awdiv
 19636  1566  07F0               	addwf	?i1___awdiv,f
 19637  1567  0008               	return
 19638  1568                     __end_ofi1___awdiv:	
 19639  007E                     btemp	set	126	;btemp
 19640  007E                     pic14e$flags	set	126
 19641  007E                     wtemp	set	126
 19642  007E                     wtemp0	set	126
 19643  0080                     wtemp1	set	128
 19644  0082                     wtemp2	set	130
 19645  0084                     wtemp3	set	132
 19646  0086                     wtemp4	set	134
 19647  0088                     wtemp5	set	136
 19648  007F                     wtemp6	set	127
 19649  007E                     ttemp	set	126
 19650  007E                     ttemp0	set	126
 19651  0081                     ttemp1	set	129
 19652  0084                     ttemp2	set	132
 19653  0087                     ttemp3	set	135
 19654  007F                     ttemp4	set	127
 19655  007E                     ltemp	set	126
 19656  007E                     ltemp0	set	126
 19657  0082                     ltemp1	set	130
 19658  0086                     ltemp2	set	134
 19659  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         218
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      80
    BANK3            80      0      68
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK3[8]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1___awdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  144646
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1560
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4709
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    4709
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3638
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3638
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   44950
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   44950
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   40554
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4407
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35963
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10444
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20732
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1990
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1188
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3062
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   60480
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   60272
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   39509
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3786
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   20492
                                             74 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3226
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     400
                                             66 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4673
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4673
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2803
                                             66 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1627
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1560
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     604
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     376
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0      24
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  3     3      0      24
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     352
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  3     3      0     352
                                              9 COMMON     3     3      0
                          i1___awdiv
 ---------------------------------------------------------------------------------
 (12) i1___awdiv                                           9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1___awdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      44      11       85.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     162      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     162      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Jan 20 17:07:45 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1EAD  
                          ___bmul@product 0022                 getMain_Lights_Count@count 0020  
                                      l86 15ED                                        l96 146B  
                                      l88 1601                                        l97 1467  
                                      l98 1455                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10F9                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 00D6  
                          setTemp_Main@AD 006C                       ___wmul@multiplicand 0022  
                    _getDimmerLights_Line 1BC4                    __end_of_setDelayOff_GO 0D37  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0827  
                    _setDimmerLights_Line 1CA9                              ___ftadd@sign 004B  
                                     l100 1465                                       l303 1EB9  
                                     l304 1EBB                                       l235 0941  
                    _setDimmerLights_SwOn 11DE                                       l531 09D1  
                                     l347 0806                                       l752 1F45  
                                     l683 1C77                                       l776 079A  
                                     _GIE 005F                                       _CRC 00CF  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 0007                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00D3  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0143                                       _Cmd 00D0  
            getDimmerLights_Status@lights 0022                                       _Sw1 01CA  
              ??_setDimmerIntr_Dimming_RF 0021                ??_setDimmerIntr_Dimming_Sw 0021  
         setDimmerIntr_Dimming_RF@command 0020                  __end_of_CC2500_WriteByte 1EC6  
                   _Buzzer_Initialization 1B17                           __end_of_ADC_Set 1B76  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0023       __end_of_setDimmerIntr_ControlStatus 1E63  
             _setDimmerIntr_ControlStatus 1E4B                         ??_getSw_KeyStatus 0020  
                                    ?_ISR 0070                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1B9E                     _setDimmerLights_OnOff 0710  
        setDimmerLights_DimmingRun@lights 0024                                Load_Main@i 0030  
                            ___ftdiv@sign 003D                                      l1223 1243  
                                    l2124 1C7E                                      l1237 1170  
                                    l1246 150D                                      l1423 1362  
                                    l1600 01F8                                      l1610 01D4  
                                    l1602 0084                                      l2154 11DA  
                                    l1451 11A4                                      l1611 01D2  
                                    l1603 0080                                      l2139 0ABA  
                                    l1604 007B                                      l1446 118D  
                                    l2094 0637                                      l1447 11A8  
                                    l2167 0A49                                      l2098 0586  
                                    l2099 05D7                                      l2452 1E11  
                         __end_of_IOC_Set 1BC4                                      l1478 070F  
                                    l1487 1EAC                                      l2472 037A  
                                    l6010 12E4                                      l2474 0246  
                                    l1762 0E8D                                      l2651 1F8D  
                                    l2812 16A3                                      l1773 0E85  
                                    l6032 0CE9                                      l1768 0E00  
                                    l2841 0421                                      l2818 16BA  
                                    l6042 0D19                            _Load_Main$3756 002A  
                                    l6212 1EA6                                      l7020 0885  
                                    l6046 0D2D                                      l7006 084F  
                                    l7030 1BCC                                      l6400 1188  
                                    l5600 1679                                      l6208 1E97  
                                    l7008 0856                                      l6410 119F  
                                    l6402 1191                                      l7018 087E  
                                    l6250 0BC0                                      l6234 1397  
                                    l5604 1680                                      l6180 0822  
                                    l6260 0C10                                      l6500 0A10  
                                    l7300 0E5D                                      l5614 16A8  
                                    l5606 168A                                      l6078 1785  
                                    l5710 1D13                                      l6430 12FE  
                                    l7214 14DF                                      l6246 0BBB  
                                    l6502 0A32                                      l7310 0E72  
                                    l5640 157E                                      l5616 16B0  
                                    l5608 168F                                      l7208 14CA  
                                    l6504 0A36                                      l7312 0E74  
                                    l5650 1586                                      l5634 1573  
                                    l5714 1D19                                      l6178 0817  
                                    l7410 1E1C                                      l5652 1592  
                                    l5732 109C                                      l5804 0460  
                                    l5820 0D64                                      l6700 148B  
                                    l6444 131D                                      l6436 1307  
                                    l6508 0A3A                     _setDimmerLights_SwOff 12B6  
                                    l5662 15AD                                      l5814 0D4E  
                                    l6462 1D09                                      l8222 10E8  
                                    l8206 1F77                                      l7406 1E16  
                                    l7262 0E03                                      l7270 0E15  
                                    l7190 1FEB                                      l5744 03AA  
                                    l6464 1D0E                                      l7504 1F87  
                                    l8216 10DF                                      l8208 1F7D  
                                    l8240 110C                                      l7440 0279  
                                    l7424 0230                                      l7192 1FEE  
                                    l5666 15B5                                      l5658 15A4  
                                    l5754 03C0                                      l5842 0DBE  
                                    l5834 0DA5                                      l5914 0C3D  
                                    l6458 1D02                                      l8218 10E2  
                                    l8234 1103                                      l8330 0910  
                                    l6490 09D9                                      l7450 02AE  
                                    l7524 143F                                      l5772 03ED  
                                    l5748 03B1                                      l5940 0C88  
                                    l5932 0C6D                                      l6900 1294  
                                    l8236 1106                                      l7268 0E12  
                                    l7196 1FF3                                      l6638 1E2E  
                                    l5790 0433                                      l5774 03F7  
                                    l5766 03DA                                      l5942 0C91  
                                    l5934 0C7B                                      l5862 0EBE  
                                    l6662 0761                                      l7606 04F6  
                                    l6910 12AF                                      l8182 1F03  
                                    l8262 1409                                      l8406 08C0  
                                    l8334 0916                                      l7702 0AFA  
                                    l5784 0413                                      l5776 03FC  
                                    l5944 0C94                                      l5856 0EA8  
                                    l6680 07A9                                      l8184 1F06  
                                    l8272 1419                                      l8264 140C  
                                    l8408 08D9                                      l8360 0954  
                                    l8352 0947                                      l8328 090D  
                                    l6808 1CE7                                      l6496 09EE  
                                    l6840 0A78                                      l8504 0630  
                                    l7464 02EE                                      l5794 0445  
                                    l5786 041D                                      l5778 0400  
                                    l5890 0F1D                                      l5874 0EF9  
                                    l6666 077A                                      l6906 12A6  
                                    l8274 141C                                      l8362 0957  
                                    l8354 094A                                      l6498 09F5  
                                    l7474 0322                                      l7722 0B29  
                                    l7706 0B02                                      l5948 0CA2  
                                    l6764 1158                                      l7820 00A7  
                                    l7804 0083                                      l8188 1F0C  
                                    l8268 1412                                      l8348 0928  
                                    l6844 0A81                                      l6828 0A60  
                                    l5886 0F15                                      l5878 0F01  
                                    l6694 07D5                                      l7558 1F47  
                                    l8278 1422                                      l8390 08AE  
                                    l8366 095D                                      l8358 0950  
                                    l8462 05D2                                      l8384 08A5  
                                    l6856 0A96                                      l7826 00D9  
                                    l8386 08A8                                      l8490 0618  
                                    l6882 1CF8                                      l7738 13D4  
                                    l7754 1342                                      l8554 1639  
                                    l5996 1205                                      l7852 015C  
                                    l8476 05E6                     _myMain_Initialization 1DA4  
                                    l5998 120A                                      l7918 01E7  
                                    l7862 0188                                      l7694 0ADB  
                                    l8558 1644                                      l6992 1D7C  
                                    l7872 01A4                                      l7970 06A8  
                                    l7954 0669                                      l6898 1288  
                                    l7882 01BA                                      l7858 016B  
                                    l7866 0194                                      l7786 0062  
                                    l7948 0659                                      l7990 06F4  
                                    l7966 06A0                                      l7958 0678  
                                    l7984 06E2                                      l7968 067B  
                                    _CFGS 0CAE                                      l7986 06BD  
                                    l7988 06EA                                      l7996 0705  
                            __CFG_WDTE$ON 0000                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u4205 1685  
                                    u4225 169E                                      u4325 1589  
                                    u4245 16AB                                      u4345 1593  
                                    u4355 159D                                      u4275 16C1  
                                    u5155 0CF5                                      _PEIE 005E  
                                    u4365 15A5                                      u4605 03EE  
                                    u5190 1740                                      u4635 0401  
                                    u5195 173E                                      u6315 1295  
                                    u6325 129F                                      u4575 03DB  
                                    u4735 0D76                                      u4815 0ECA  
                                    u6335 12A7                                      u8015 019B  
                                    u5295 080C                                      u4665 0414  
                                    u4745 0D86                                      u4825 0EDA  
                                    u4755 0DA6                                      u4765 0DB5  
                                    u4845 0F02                                      u8150 06A6  
                                    u4775 0DBF                                      u4935 0C44  
                                    u4855 0F08                                      u6295 128B  
                                    u8155 0684                                      u7355 1F8E  
                                    u8180 06E8                                      u4965 0C6E  
                                    u4885 0F1E                                      u7365 1F93  
                                    u4895 0F24                                      u8185 06C6  
                                    u7395 1435                                      u4995 0C89  
                                    u8355 1DDA                                      u7635 0AEA  
                                    u7575 123A                                      u7735 13C8  
                                    u5985 1E04                                      u7915 00A5  
                                    u7925 00D7                                      u8805 0607  
                                    u6965 0E46                                      u7685 0B19  
                                    u7935 011B                                      u7775 135A  
                                    u6985 0E64                                      u8775 05AA  
                                    _LWLO 0CAD                                      _RSSI 0147  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1F2F                _setDimmerLights_DimmingRun 1F14  
                                    _Buz1 00BB                                      _Load 0148  
                                    _Temp 00DC                                      _main 1615  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 09D8  
                         __end_of_RF_Main 1B23                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1C52  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0C24  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2141 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1E35  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1E1F                    _getDimmerLights_Status 1C98  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 1B39  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 0145  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00EA                            i1___awdiv@sign 0076  
                         __end_of___awdiv 15BC                           __end_of___ftadd 0478  
                         __end_of___ftdiv 0DE0                           __end_of___ftneg 1BA7  
                         __end_of___ftmul 0F45                           ___awdiv@divisor 0020  
                                   _T1CON 0018                           __end_of___fttol 0CAB  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 12B6  
                                   i1l831 0B5E                                     i1l840 0B90  
                                   i1l842 0B85                                     i1l834 0B6C  
                                   i1l851 0BA2                                     i1l845 0B8E  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1E0A                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 1736   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 16D1                                     _Light 0146  
                        __end_of_TMR1_ISR 1FC1                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1C46  
                                   _getAD 1FE0                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1D58  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1BDA                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1D34                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        __size_ofi1___awdiv 0053  
                      _setRF_DimmerLights 1736               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0066               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0011                              __end_of_main 1670  
                     ?_setRF_DimmerLights 0065                          __end_of_Fosc_Set 1B3D  
          getMain_All_LightsStatus@status 0020                        ??_setMemory_Modify 0020  
            setDimmerLights_OnOff@command 006D                            _Exception_Main 063B  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                    _setSw_Initialization 1C88                                    ??_main 0070  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0020              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 09D8                            _setMemory_Data 1C22  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0778        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 1472                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00C7  
                _getMain_All_LightsStatus 1BB0                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1DCB                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0969  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1B8D  
                               ??_WDT_Set 0020                          __end_of___awtoft 10B3  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 16D1  
                _getMain_All_Error_Status 1177                                    _IOCBF2 1CB2  
                                  i1l1185 0013                                    i1l1188 001B  
                                  i1l7100 0B9B                                    i1l7058 0B4B  
                                  i1l7092 0B87                                    i1l6922 151F  
                                  i1l6940 153E                                    i1l6950 1559  
                                  i1l6928 152A                                    i1l6954 1561  
                                  i1l6946 1550                                    i1l6938 1532  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0022  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  u640_25 153F                                    u641_25 1549  
                                  _OSCCON 0099                                    u642_25 1551  
                      __size_of_Load_Main 01B2                                    u638_25 1535  
                                  u659_25 0B46                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    u749_25 1FBB  
                                  _IO_Set 1EE0                                    _WDTCON 0097  
                    Exception_Main@i_3413 0032                        DelayTime_1us@count 0020  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1DF5                                    _Dimmer 01A0  
                                  _DlySw1 01DB             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1D10                __end_of_Mcu_Initialization 1D46  
                     __end_of_Buzzer_Main 1472                                    _Memory 01A5  
                                  _Timer1 013E                                    ___bmul 1D10  
                  __end_of_Exception_Main 0710                      Exception_Main@lights 0034  
                                  ___wmul 1F84                                 ??___awdiv 0024  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 000C  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024                    ??_setDimmerLights_Main 0070  
                  ??_setDimmerLights_Line 0020                                    _r_data 00DA  
                    Exception_Main@status 002E   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1D7E  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013         ??_getAll_DimmerIntr_Dimming_Sw_RF 0020  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1D6B  
                                  _s_data 00DB                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 12EF                                    _myMain 00AE  
                    ??_RF_Timeout_Counter 0020                    __end_of_setMemory_Data 1C2E  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0027  
                                  _setBuz 15BC                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 002F               __end_of_Load_Initialization 1B1D  
        ??_setDimmerLights_Initialization 0020           ?_setDimmerLights_Initialization 0070  
        __end_of_setDimmerIntr_Dimming_RF 1E7B                   DimmerLights_TMR_1@count 0072  
        __end_of_setDimmerIntr_Dimming_Sw 1E4B                     ___ftmul@f3_as_product 0039  
                       __end_ofi1___awdiv 1568                 _setDimmerLights_DimmingOn 07D8  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1DA4               getMain_Lights_Count@status1 0021  
             __size_of_DimmerLights_IOC_1 0023                     __end_of_SwPointSelect 1C6A  
             __size_of_DimmerLights_TMR_1 0076              __size_of_Flash_Memory_Modify 0052  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 006B                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1E0A  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0048  
         getDimmerIntr_DimmingValue@value 0022           setDimmerIntr_DimmingValue@value 0020  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5086 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1071                             __end_of_getAD 2000  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
                      _LED_Initialization 1B31                           _getSw_KeyStatus 1CED  
               ??_setControl_Lights_Table 0070                        getRF_KeyStatus@key 0021  
                         ?_setMemory_Data 0020          ??_getDimmerLights_PercentToValue 005C  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 006B  
           ??_Flash_Memory_Initialization 0062                      _getMain_Lights_Count 1BCF  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01FE  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1BFE                __end_of_set_TimeoutCleared 1B56  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1BF2                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1B23                        ??_CC2500_WriteByte 0020  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 1428                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 1B29  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1B29                             ??_Switch_Main 0032  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00D2  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0020  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1615                            _getDelayOff_GO 1CBA  
                     _CC2500_WriteCommand 1EFA                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 1E94             ??_DimmerLights_Initialization 0021  
                                 ?___wmul 0020                                ??_TMR1_ISR 0073  
                           ?_setTemp_Main 0070                                _getLoad_AD 0ABC  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1B7D  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1B6F                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 13A4        __end_of_DimmerLights_SelectPointer 1BF2  
              _DimmerLights_SelectPointer 1BE6                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 1071                        _setRFSW_AdjControl 0BA4  
                  __end_of_setProductData 1BFE                        i1___awdiv@dividend 0072  
           setDimmerLights_Dimming@lights 006C                                   _IOC_ISR 1B95  
                                 _IOC_Set 1BBA                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006A     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 1213  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1EC6  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 0120  
                                 _RF_Main 1B20                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1C46  
         __end_of_setControl_Lights_Table 0A4A                           setRF_Main@error 00E9  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 14C3  
                 ??_setLoad_AH_AL_Restore 0020                       getCmd_Status@number 0020  
            __end_of_CC2500_FrequencyCabr 1C5E                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0022         __size_of_setDimmerIntr_Dimming_RF 0018  
       __size_of_setDimmerIntr_Dimming_Sw 0016                         __end_of_getBuz_GO 1CDC  
               ?_setDimmerIntr_Dimming_RF 0020                       ??_Flash_Memory_Main 0026  
               ?_setDimmerIntr_Dimming_Sw 0020                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1CCB            __end_of_getDimmerLights_Status 1CA9  
                       __end_of_getRxData 0ABC                   __end_of_getSw_KeyStatus 1CFE  
                _CC2500_registers_address 1000                        i1___awdiv@quotient 0077  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 1568  
                                 ___ftadd 0382                                   ___ftdiv 0D37  
                                 ___ftneg 1B9E                           __size_of___wmul 001E  
                                 ___ftmul 0E91                                   ___fttol 0C24  
                     __end_of_Switch_Main 1B7D                                   ___lwdiv 127F  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1CDC                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 1328                                   __ptext2 1DA4  
                                 __ptext3 13A4                                   __ptext4 0ABC  
                                 __ptext5 1FE0                                   __ptext6 1D46  
                                 __ptext7 0002                                   __ptext8 1B26  
                                 __ptext9 0DE0                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001C                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1249                 __end_of_Flash_Memory_Read 1EE0  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 0566  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1B2D  
                       _DimmerLights_Main 1F2F            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1B5C                __end_of_CC2500_ClearRXFIFO 1B45  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1B49  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00EE                            _LedPointSelect 1C16  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 1BDA  
                                 clrloop0 1B63            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 1B51                      end_of_initialization 0048  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 111E  
                           _DelayTime_1us 0801                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 1177        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1B5C                __end_of_setRF_TransceiveGO 1D6B  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 1B5D  
                              _setSw_Main 01FE                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 10F9  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1D22  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0892                             _CC2500_TxData 08FD  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 14C3  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                           _setCmd_Status 1E94                       _Flash_Memory_Unlock 1BA7  
                     ??_CC2500_ReadStatus 0022                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                   setTemp_Main@DangerValue 0069  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1F4B  
                      _Mcu_Initialization 1D34                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1B41                      __end_of_my_MainTimer 1364  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1C22                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0022  
        getDimmerIntr_DimmingValue@lights 0021                                 i1___awdiv 1515  
               __end_of_CC2500_InitSetREG 1148                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 111E  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 0800                          ??_Exception_Main 002D  
                          __end_of_IO_Set 1EFA                      _setRF_Initialization 1066  
                      _setMemory_LoopSave 1D91                               _Switch_Main 1B76  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1CED                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1DE0  
             ??_DimmerIntr_Initialization 0020                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1D22       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1FA2  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 1328  
                           __pbitbssBANK1 0778             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 0035                            __end_of_setBuz 1615  
              __end_of_DimmerLights_IOC_1 10D6                      _CC2500_FrequencyCabr 1C52  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0036  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 1364                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 0BA4                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 004C  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1B85                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___awdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1FE0  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 1800  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 179B  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1B51         __end_of_setDimmerIntr_MaxmumValue 1C0A  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 01E0                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0040                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 1B26  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00D4                     setProductData@address 0064  
                     Exception_Main@count 002F                       Exception_Main@error 0035  
                                ??___bmul 0021                                  ??___wmul 0024  
                  __size_of_SwPointSelect 000C          __end_of_getMain_All_LightsStatus 1BBA  
                               _Tx_Length 00D8                               __pdataBANK4 0220  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 0068  
                       ??_CC2500_ReadByte 0020               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 11AA                          _CC2500_SIDLEMode 1B49  
              __size_of_DimmerLights_Main 001C                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0022  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 002E  
                               ___latbits 0003                          _setMemory_Modify 1D7E  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E6                 setRF_TransceiveGO@command 0021  
                    ??_set_TimeoutCleared 0020                 _DimmerIntr_Initialization 1E7B  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0067                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0021                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0062               setDimmerLights_DimmingOn@sw 0022  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 01D3                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0065            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1F67  
                setRFSW_AdjControl@status 0067                           ??_CC2500_TxData 0024  
                               __pnvBANK1 00EE                            getRxData@error 00E7  
             __size_of_LED_Initialization 0004                      _setRF_TimeoutCleared 1B3D  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0030  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D5  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                           _getCmd_Status 1CFE                                setBuz@time 0029  
                         ??_setCmd_Status 0021                       setDelayOff_GO@value 0066  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002C                    _setTemp_Initialization 0800  
                               _getBuz_GO 1CCB                  ?_setDimmerLights_Dimming 006A  
     __end_of_Flash_Memory_Initialization 0566               _Flash_Memory_Initialization 0478  
                                ?___awdiv 0020                                 __ptext100 1CBA  
                               __ptext101 1CFE                                 __ptext110 0C24  
                               __ptext102 1472                                 __ptext111 1B9E  
                               __ptext103 0F45                                 __ptext120 1B68  
                               __ptext112 0D37                                 __ptext104 1D58  
                               __ptext121 1B16                                 __ptext113 0382  
                               __ptext105 1736                                 __ptext130 1C98  
                               __ptext122 1E7B                                 __ptext114 1091  
                               __ptext106 1CA9                                 __ptext131 1BE6  
                               __ptext123 1B2D                                 __ptext115 1670  
                               __ptext107 1BFE                                 __ptext140 1B95  
                               __ptext132 1B29                                 __ptext124 0969  
                               __ptext116 1C6A                                 __ptext108 1E35  
                               __ptext141 10B3                                 __ptext133 1B56  
                               __ptext125 1BF2                                 __ptext117 1E1F  
                               __ptext109 16D1                                  ?___ftadd 0041  
                               __ptext142 1515                                 __ptext134 1BDA  
                               __ptext126 11DE                                 __ptext118 1B7D  
                               __ptext135 1428                                 __ptext127 15BC  
                               __ptext119 1177                                 __ptext136 1B17  
                               __ptext128 1568                                 __ptext129 12B6  
                               __ptext138 1FA2                                 __ptext139 0B2E  
                               _getRxData 0A4A                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 13A4  
                        ??_setProductData 0063                         i1___awdiv@divisor 0070  
                       i1___awdiv@counter 0075             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1B1A  
                           ??_setLog_Code 0065                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1E1F                       __size_of_setSw_Main 0184  
            CC2500_ReadStatus@status_addr 0023        __end_of_getDimmerIntr_DimmingValue 1C79  
            ??_setDimmerIntr_DimmingValue 0021                _getDimmerIntr_DimmingValue 1C6A  
                  CC2500_WriteByte@loop_a 0021            __size_of_setDimmerLights_OnOff 00C8  
                               _r_address 00D9             __end_of_setDimmerLights_OnOff 07D8  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 12EF              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1DB7                               ??i1___awdiv 0074  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0025  
                           _SwPointSelect 1C5E                       __end_of_setLED_Main 127F  
                        ??_getDelayOff_GO 0022                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 1B26                         _CC2500_rfSettings 102F  
                          ___wmul@product 0024                                  _LED_Main 1B35  
                         SwPointSelect@sw 0021                                 clear_ram0 1B62  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 1328                                 _setTxData 0F45  
     __end_of_DimmerLights_Initialization 1B6F               _DimmerLights_Initialization 1B68  
                      _CC2500_ClearRXFIFO 1B41                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1B45                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1DCB  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 1148                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1FA2  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1C3A  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1D58                                  _RF_Count 0141  
                    __end_of_RF_RxDisable 1C88                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1F14                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1D46                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B1                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00D1  
                            setSw_Main@sw 0031                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000A              __end_of_Flash_Memory_Erasing 1C3A  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 11DE  
                   _DlyOff_Initialization 1B56         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1E63  
             setDimmerLights_OnOff@lights 00E6                  _setDimmerIntr_Dimming_Sw 1E35  
                                _Fosc_Set 1B39                          __size_of_WDT_Set 000C  
                   setRFSW_Control@status 006E                        __end_of_getLoad_AD 0B2E  
                      __end_of_getLoad_OK 1B85                     _Switch_Initialization 1B4D  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0020  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 13E4                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1EAD  
                       getLoad_AD@channel 0026       __size_of_DimmerLights_SelectPointer 000C  
                    ??_setRF_TransceiveGO 0020              Flash_Memory_Initialization@i 0063  
                                _SwDetect 00D7                               ??_Temp_Main 006E  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$3401 0021  
           _getMain_All_Error_Status$3402 0023                  __end_of_getDimmer_LoadGO 1B8D  
                     _Load_Initialization 1B1A          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
                            _setTemp_Main 0DE0                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 1091                          ??_LedPointSelect 0020  
                                ___ftpack 1670             __size_of_getMain_Lights_Count 000B  
                  getDimmer_LoadGO@loadgo 0020                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00E8                      CC2500_WriteREG@value 0022  
                             _setLED_Main 1249                __end_of_setRF_DimmerLights 179B  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 1B95                          setDelayOff_GO@sw 006C  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0027                                  __ptext10 1B23  
                                __ptext11 0800                                  __ptext20 1DF5  
                                __ptext12 1B76                                  __ptext21 1B4D  
                                __ptext13 01FE                                  __ptext30 0BA4  
                                __ptext22 1C88                                  __ptext14 1DB7  
                                __ptext31 1D7E                                  __ptext23 1B20  
                                __ptext15 07D8                                  __ptext40 1DE0  
                                __ptext32 1F14                                  __ptext24 0566  
                                __ptext16 1CED                                  __ptext41 1B49  
                                __ptext33 1CDC                                  __ptext25 0A4A  
                                __ptext17 1C5E                                  __ptext50 1EFA  
                                __ptext42 13E4                                  __ptext34 1CCB  
                                __ptext26 11AA                                  __ptext18 1E0A  
                                __ptext51 1B3D                                  __ptext43 111E  
                                __ptext35 1C79                                  __ptext27 1D91  
                                __ptext19 1B51                                  __ptext60 1BBA  
                                __ptext52 1DCB                                  __ptext44 1FC1  
                                __ptext36 08FD                                  __ptext28 09D8  
                                __ptext61 1B39                                  __ptext53 1EAD  
                                __ptext45 10D6                                  __ptext37 0892  
                                __ptext29 1364                                  __ptext70 1B1A  
                                __ptext62 1B6F                                  __ptext54 1B1D  
                                __ptext46 1C52                                  __ptext38 10F9  
                                __ptext71 1F4B                                  __ptext63 004C  
                                __ptext55 1066                                  __ptext47 0801  
                                __ptext39 1F67                                  __ptext80 1C22  
                                __ptext72 1B35                                  __ptext64 1BCF  
                                __ptext56 1D34                                  __ptext48 1B45  
                                __ptext81 1148                                  __ptext73 1249  
                                __ptext65 1B8D                                  __ptext57 1C46  
                                __ptext49 1B41                                  __ptext90 1C16  
                                __ptext82 1BA7                                  __ptext74 1B31  
                                __ptext66 1B85                                  __ptext58 1C3A  
                                __ptext91 1E63                                  __ptext83 1EC6  
                                __ptext75 1D22                                  __ptext67 1D6B  
                                __ptext59 1EE0                                  __ptext92 1C0A  
                                __ptext84 063B                                  __ptext76 1213  
                                __ptext68 1F84                                  __ptext93 1E4B  
                                __ptext85 1BC4                                  __ptext77 14C3  
                                __ptext69 127F                                  __ptext94 0CAB  
                                __ptext86 1F2F                                  __ptext78 1C2E  
                                __ptext95 1D10                                  __ptext87 0827  
                                __ptext79 0478                                  __ptext96 1E94  
                                __ptext88 0710                                  __ptext97 1BB0  
                                __ptext89 12EF                                  __ptext98 179B  
                                __ptext99 0E91                                  __product 0220  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1BCF              __end_of_setDimmerLights_Main 0892  
            __end_of_setDimmerLights_Line 1CBA                        _DimmerLights_IOC_1 10B3  
            __end_of_setDimmerLights_SwOn 1213                              ??_setSw_Main 002F  
                  ??_setRF_TimeoutCleared 0020              ??_setDimmerLights_DimmingRun 0023  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1DB7        __size_of_DimmerIntr_Initialization 0019  
                         ??_getCmd_Status 0020                        _DimmerLights_TMR_1 0B2E  
                __end_of_CC2500_SIDLEMode 1B4D                setDimmerLights_Main@lights 00E7  
             __end_of_DelayOffPointSelect 1BE6                CC2500_WriteCommand@command 0023  
                         _CC2500_ReadByte 1F67                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1FC1                  __end_of_setMemory_Modify 1D91  
                     ?_DimmerLights_IOC_1 0070                        __end_of_setRF_Main 063B  
                             ??_getBuz_GO 0022                       ?_DimmerLights_TMR_1 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 105E  
                             ??_getRxData 00E6                              getLoad_OK@ok 0020  
              __end_of_RF_Timeout_Counter 1DE0                                  main@argc 00EA  
                                main@argv 00EC                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6074 0022       getDimmerLights_ValueToPercent@value 005E  
                         _CC2500_PowerRST 13E4                  __size_of_getSw_KeyStatus 0011  
      __end_of_setDimmerIntr_DimmingValue 1C16                _setDimmerIntr_DimmingValue 1C0A  
             __end_of_Flash_Memory_Modify 1515                               _setLog_Code 11AA  
             __end_of_Flash_Memory_Unlock 1BB0                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 10D6                        __end_of_setSw_Main 0382  
                   ??_Load_Initialization 0022                      ??_DimmerLights_IOC_1 0079  
         getDimmerLights_PercentToValue@i 005F       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 03E8                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0067  
  __end_of_setDimmerLights_Initialization 1B17   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1B16                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1B1D  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1C2E  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D5  
                 __size_of_Exception_Main 00D5           __end_of_DelayOff_Initialization 1B2D  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1B31  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0CAB               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 0072          __size_of_setDimmerLights_Dimming 0051  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00EE  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0065  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 0827  
                 __end_of_CC2500_ReadByte 1F84              __end_of_setSw_Initialization 1C98  
                         _Timeout_Counter 1DF5           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 1C79  
              __end_of_LED_Initialization 1B35            __end_of_setTemp_Initialization 0801  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 1B20  
                   __end_of_CC2500_RxData 08FD                     __end_of_CC2500_TxData 0969  
                   _setLoad_AH_AL_Restore 1F4B                   __end_of_CC2500_PowerRST 1428  
