

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Apr 18 16:53:59 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	intentry,global,class=CODE,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	dabs	1,0x7E,2
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  0116                     	;# 
   202  0117                     	;# 
   203  011D                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  018E                     	;# 
   207  0191                     	;# 
   208  0191                     	;# 
   209  0192                     	;# 
   210  0193                     	;# 
   211  0193                     	;# 
   212  0194                     	;# 
   213  0195                     	;# 
   214  0196                     	;# 
   215  0197                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019C                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020D                     	;# 
   228  0210                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0216                     	;# 
   241  0216                     	;# 
   242  0217                     	;# 
   243  0217                     	;# 
   244  0291                     	;# 
   245  0291                     	;# 
   246  0292                     	;# 
   247  0293                     	;# 
   248  0298                     	;# 
   249  0298                     	;# 
   250  0299                     	;# 
   251  029A                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  0FE4                     	;# 
   256  0FE5                     	;# 
   257  0FE6                     	;# 
   258  0FE7                     	;# 
   259  0FE8                     	;# 
   260  0FE9                     	;# 
   261  0FEA                     	;# 
   262  0FEB                     	;# 
   263  0FED                     	;# 
   264  0FEE                     	;# 
   265  0FEF                     	;# 
   266  0000                     	;# 
   267  0001                     	;# 
   268  0002                     	;# 
   269  0003                     	;# 
   270  0004                     	;# 
   271  0005                     	;# 
   272  0006                     	;# 
   273  0007                     	;# 
   274  0008                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  0010                     	;# 
   282  0011                     	;# 
   283  0012                     	;# 
   284  0015                     	;# 
   285  0016                     	;# 
   286  0016                     	;# 
   287  0017                     	;# 
   288  0018                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  008C                     	;# 
   294  008D                     	;# 
   295  008E                     	;# 
   296  0090                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009B                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  0116                     	;# 
   313  0117                     	;# 
   314  011D                     	;# 
   315  018C                     	;# 
   316  018D                     	;# 
   317  018E                     	;# 
   318  0191                     	;# 
   319  0191                     	;# 
   320  0192                     	;# 
   321  0193                     	;# 
   322  0193                     	;# 
   323  0194                     	;# 
   324  0195                     	;# 
   325  0196                     	;# 
   326  0197                     	;# 
   327  0199                     	;# 
   328  019A                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019C                     	;# 
   334  019C                     	;# 
   335  019D                     	;# 
   336  019E                     	;# 
   337  019F                     	;# 
   338  020D                     	;# 
   339  0210                     	;# 
   340  0211                     	;# 
   341  0211                     	;# 
   342  0212                     	;# 
   343  0212                     	;# 
   344  0213                     	;# 
   345  0213                     	;# 
   346  0214                     	;# 
   347  0214                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0216                     	;# 
   352  0216                     	;# 
   353  0217                     	;# 
   354  0217                     	;# 
   355  0291                     	;# 
   356  0291                     	;# 
   357  0292                     	;# 
   358  0293                     	;# 
   359  0298                     	;# 
   360  0298                     	;# 
   361  0299                     	;# 
   362  029A                     	;# 
   363  0394                     	;# 
   364  0395                     	;# 
   365  0396                     	;# 
   366  0FE4                     	;# 
   367  0FE5                     	;# 
   368  0FE6                     	;# 
   369  0FE7                     	;# 
   370  0FE8                     	;# 
   371  0FE9                     	;# 
   372  0FEA                     	;# 
   373  0FEB                     	;# 
   374  0FED                     	;# 
   375  0FEE                     	;# 
   376  0FEF                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0008                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  0010                     	;# 
   393  0011                     	;# 
   394  0012                     	;# 
   395  0015                     	;# 
   396  0016                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001C                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  0090                     	;# 
   408  0091                     	;# 
   409  0092                     	;# 
   410  0095                     	;# 
   411  0096                     	;# 
   412  0097                     	;# 
   413  0099                     	;# 
   414  009A                     	;# 
   415  009B                     	;# 
   416  009B                     	;# 
   417  009C                     	;# 
   418  009D                     	;# 
   419  009E                     	;# 
   420  010C                     	;# 
   421  010D                     	;# 
   422  010E                     	;# 
   423  0116                     	;# 
   424  0117                     	;# 
   425  011D                     	;# 
   426  018C                     	;# 
   427  018D                     	;# 
   428  018E                     	;# 
   429  0191                     	;# 
   430  0191                     	;# 
   431  0192                     	;# 
   432  0193                     	;# 
   433  0193                     	;# 
   434  0194                     	;# 
   435  0195                     	;# 
   436  0196                     	;# 
   437  0197                     	;# 
   438  0199                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019C                     	;# 
   445  019C                     	;# 
   446  019D                     	;# 
   447  019E                     	;# 
   448  019F                     	;# 
   449  020D                     	;# 
   450  0210                     	;# 
   451  0211                     	;# 
   452  0211                     	;# 
   453  0212                     	;# 
   454  0212                     	;# 
   455  0213                     	;# 
   456  0213                     	;# 
   457  0214                     	;# 
   458  0214                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0216                     	;# 
   463  0216                     	;# 
   464  0217                     	;# 
   465  0217                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0298                     	;# 
   471  0298                     	;# 
   472  0299                     	;# 
   473  029A                     	;# 
   474  0394                     	;# 
   475  0395                     	;# 
   476  0396                     	;# 
   477  0FE4                     	;# 
   478  0FE5                     	;# 
   479  0FE6                     	;# 
   480  0FE7                     	;# 
   481  0FE8                     	;# 
   482  0FE9                     	;# 
   483  0FEA                     	;# 
   484  0FEB                     	;# 
   485  0FED                     	;# 
   486  0FEE                     	;# 
   487  0FEF                     	;# 
   488  0000                     	;# 
   489  0001                     	;# 
   490  0002                     	;# 
   491  0003                     	;# 
   492  0004                     	;# 
   493  0005                     	;# 
   494  0006                     	;# 
   495  0007                     	;# 
   496  0008                     	;# 
   497  0009                     	;# 
   498  000A                     	;# 
   499  000B                     	;# 
   500  000C                     	;# 
   501  000D                     	;# 
   502  000E                     	;# 
   503  0010                     	;# 
   504  0011                     	;# 
   505  0012                     	;# 
   506  0015                     	;# 
   507  0016                     	;# 
   508  0016                     	;# 
   509  0017                     	;# 
   510  0018                     	;# 
   511  0019                     	;# 
   512  001A                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  008C                     	;# 
   516  008D                     	;# 
   517  008E                     	;# 
   518  0090                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0095                     	;# 
   522  0096                     	;# 
   523  0097                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  010C                     	;# 
   532  010D                     	;# 
   533  010E                     	;# 
   534  0116                     	;# 
   535  0117                     	;# 
   536  011D                     	;# 
   537  018C                     	;# 
   538  018D                     	;# 
   539  018E                     	;# 
   540  0191                     	;# 
   541  0191                     	;# 
   542  0192                     	;# 
   543  0193                     	;# 
   544  0193                     	;# 
   545  0194                     	;# 
   546  0195                     	;# 
   547  0196                     	;# 
   548  0197                     	;# 
   549  0199                     	;# 
   550  019A                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019C                     	;# 
   556  019C                     	;# 
   557  019D                     	;# 
   558  019E                     	;# 
   559  019F                     	;# 
   560  020D                     	;# 
   561  0210                     	;# 
   562  0211                     	;# 
   563  0211                     	;# 
   564  0212                     	;# 
   565  0212                     	;# 
   566  0213                     	;# 
   567  0213                     	;# 
   568  0214                     	;# 
   569  0214                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0216                     	;# 
   574  0216                     	;# 
   575  0217                     	;# 
   576  0217                     	;# 
   577  0291                     	;# 
   578  0291                     	;# 
   579  0292                     	;# 
   580  0293                     	;# 
   581  0298                     	;# 
   582  0298                     	;# 
   583  0299                     	;# 
   584  029A                     	;# 
   585  0394                     	;# 
   586  0395                     	;# 
   587  0396                     	;# 
   588  0FE4                     	;# 
   589  0FE5                     	;# 
   590  0FE6                     	;# 
   591  0FE7                     	;# 
   592  0FE8                     	;# 
   593  0FE9                     	;# 
   594  0FEA                     	;# 
   595  0FEB                     	;# 
   596  0FED                     	;# 
   597  0FEE                     	;# 
   598  0FEF                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  0010                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0015                     	;# 
   618  0016                     	;# 
   619  0016                     	;# 
   620  0017                     	;# 
   621  0018                     	;# 
   622  0019                     	;# 
   623  001A                     	;# 
   624  001B                     	;# 
   625  001C                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0090                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0095                     	;# 
   633  0096                     	;# 
   634  0097                     	;# 
   635  0099                     	;# 
   636  009A                     	;# 
   637  009B                     	;# 
   638  009B                     	;# 
   639  009C                     	;# 
   640  009D                     	;# 
   641  009E                     	;# 
   642  010C                     	;# 
   643  010D                     	;# 
   644  010E                     	;# 
   645  0116                     	;# 
   646  0117                     	;# 
   647  011D                     	;# 
   648  018C                     	;# 
   649  018D                     	;# 
   650  018E                     	;# 
   651  0191                     	;# 
   652  0191                     	;# 
   653  0192                     	;# 
   654  0193                     	;# 
   655  0193                     	;# 
   656  0194                     	;# 
   657  0195                     	;# 
   658  0196                     	;# 
   659  0197                     	;# 
   660  0199                     	;# 
   661  019A                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019C                     	;# 
   667  019C                     	;# 
   668  019D                     	;# 
   669  019E                     	;# 
   670  019F                     	;# 
   671  020D                     	;# 
   672  0210                     	;# 
   673  0211                     	;# 
   674  0211                     	;# 
   675  0212                     	;# 
   676  0212                     	;# 
   677  0213                     	;# 
   678  0213                     	;# 
   679  0214                     	;# 
   680  0214                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0216                     	;# 
   685  0216                     	;# 
   686  0217                     	;# 
   687  0217                     	;# 
   688  0291                     	;# 
   689  0291                     	;# 
   690  0292                     	;# 
   691  0293                     	;# 
   692  0298                     	;# 
   693  0298                     	;# 
   694  0299                     	;# 
   695  029A                     	;# 
   696  0394                     	;# 
   697  0395                     	;# 
   698  0396                     	;# 
   699  0FE4                     	;# 
   700  0FE5                     	;# 
   701  0FE6                     	;# 
   702  0FE7                     	;# 
   703  0FE8                     	;# 
   704  0FE9                     	;# 
   705  0FEA                     	;# 
   706  0FEB                     	;# 
   707  0FED                     	;# 
   708  0FEE                     	;# 
   709  0FEF                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0008                     	;# 
   719  0009                     	;# 
   720  000A                     	;# 
   721  000B                     	;# 
   722  000C                     	;# 
   723  000D                     	;# 
   724  000E                     	;# 
   725  0010                     	;# 
   726  0011                     	;# 
   727  0012                     	;# 
   728  0015                     	;# 
   729  0016                     	;# 
   730  0016                     	;# 
   731  0017                     	;# 
   732  0018                     	;# 
   733  0019                     	;# 
   734  001A                     	;# 
   735  001B                     	;# 
   736  001C                     	;# 
   737  008C                     	;# 
   738  008D                     	;# 
   739  008E                     	;# 
   740  0090                     	;# 
   741  0091                     	;# 
   742  0092                     	;# 
   743  0095                     	;# 
   744  0096                     	;# 
   745  0097                     	;# 
   746  0099                     	;# 
   747  009A                     	;# 
   748  009B                     	;# 
   749  009B                     	;# 
   750  009C                     	;# 
   751  009D                     	;# 
   752  009E                     	;# 
   753  010C                     	;# 
   754  010D                     	;# 
   755  010E                     	;# 
   756  0116                     	;# 
   757  0117                     	;# 
   758  011D                     	;# 
   759  018C                     	;# 
   760  018D                     	;# 
   761  018E                     	;# 
   762  0191                     	;# 
   763  0191                     	;# 
   764  0192                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0197                     	;# 
   771  0199                     	;# 
   772  019A                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019C                     	;# 
   778  019C                     	;# 
   779  019D                     	;# 
   780  019E                     	;# 
   781  019F                     	;# 
   782  020D                     	;# 
   783  0210                     	;# 
   784  0211                     	;# 
   785  0211                     	;# 
   786  0212                     	;# 
   787  0212                     	;# 
   788  0213                     	;# 
   789  0213                     	;# 
   790  0214                     	;# 
   791  0214                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0216                     	;# 
   796  0216                     	;# 
   797  0217                     	;# 
   798  0217                     	;# 
   799  0291                     	;# 
   800  0291                     	;# 
   801  0292                     	;# 
   802  0293                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  0394                     	;# 
   808  0395                     	;# 
   809  0396                     	;# 
   810  0FE4                     	;# 
   811  0FE5                     	;# 
   812  0FE6                     	;# 
   813  0FE7                     	;# 
   814  0FE8                     	;# 
   815  0FE9                     	;# 
   816  0FEA                     	;# 
   817  0FEB                     	;# 
   818  0FED                     	;# 
   819  0FEE                     	;# 
   820  0FEF                     	;# 
   821  0000                     	;# 
   822  0001                     	;# 
   823  0002                     	;# 
   824  0003                     	;# 
   825  0004                     	;# 
   826  0005                     	;# 
   827  0006                     	;# 
   828  0007                     	;# 
   829  0008                     	;# 
   830  0009                     	;# 
   831  000A                     	;# 
   832  000B                     	;# 
   833  000C                     	;# 
   834  000D                     	;# 
   835  000E                     	;# 
   836  0010                     	;# 
   837  0011                     	;# 
   838  0012                     	;# 
   839  0015                     	;# 
   840  0016                     	;# 
   841  0016                     	;# 
   842  0017                     	;# 
   843  0018                     	;# 
   844  0019                     	;# 
   845  001A                     	;# 
   846  001B                     	;# 
   847  001C                     	;# 
   848  008C                     	;# 
   849  008D                     	;# 
   850  008E                     	;# 
   851  0090                     	;# 
   852  0091                     	;# 
   853  0092                     	;# 
   854  0095                     	;# 
   855  0096                     	;# 
   856  0097                     	;# 
   857  0099                     	;# 
   858  009A                     	;# 
   859  009B                     	;# 
   860  009B                     	;# 
   861  009C                     	;# 
   862  009D                     	;# 
   863  009E                     	;# 
   864  010C                     	;# 
   865  010D                     	;# 
   866  010E                     	;# 
   867  0116                     	;# 
   868  0117                     	;# 
   869  011D                     	;# 
   870  018C                     	;# 
   871  018D                     	;# 
   872  018E                     	;# 
   873  0191                     	;# 
   874  0191                     	;# 
   875  0192                     	;# 
   876  0193                     	;# 
   877  0193                     	;# 
   878  0194                     	;# 
   879  0195                     	;# 
   880  0196                     	;# 
   881  0197                     	;# 
   882  0199                     	;# 
   883  019A                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019C                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019E                     	;# 
   892  019F                     	;# 
   893  020D                     	;# 
   894  0210                     	;# 
   895  0211                     	;# 
   896  0211                     	;# 
   897  0212                     	;# 
   898  0212                     	;# 
   899  0213                     	;# 
   900  0213                     	;# 
   901  0214                     	;# 
   902  0214                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0216                     	;# 
   907  0216                     	;# 
   908  0217                     	;# 
   909  0217                     	;# 
   910  0291                     	;# 
   911  0291                     	;# 
   912  0292                     	;# 
   913  0293                     	;# 
   914  0298                     	;# 
   915  0298                     	;# 
   916  0299                     	;# 
   917  029A                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0010                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  010C                     	;# 
   976  010D                     	;# 
   977  010E                     	;# 
   978  0116                     	;# 
   979  0117                     	;# 
   980  011D                     	;# 
   981  018C                     	;# 
   982  018D                     	;# 
   983  018E                     	;# 
   984  0191                     	;# 
   985  0191                     	;# 
   986  0192                     	;# 
   987  0193                     	;# 
   988  0193                     	;# 
   989  0194                     	;# 
   990  0195                     	;# 
   991  0196                     	;# 
   992  0197                     	;# 
   993  0199                     	;# 
   994  019A                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019C                     	;# 
  1000  019C                     	;# 
  1001  019D                     	;# 
  1002  019E                     	;# 
  1003  019F                     	;# 
  1004  020D                     	;# 
  1005  0210                     	;# 
  1006  0211                     	;# 
  1007  0211                     	;# 
  1008  0212                     	;# 
  1009  0212                     	;# 
  1010  0213                     	;# 
  1011  0213                     	;# 
  1012  0214                     	;# 
  1013  0214                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0216                     	;# 
  1019  0217                     	;# 
  1020  0217                     	;# 
  1021  0291                     	;# 
  1022  0291                     	;# 
  1023  0292                     	;# 
  1024  0293                     	;# 
  1025  0298                     	;# 
  1026  0298                     	;# 
  1027  0299                     	;# 
  1028  029A                     	;# 
  1029  0394                     	;# 
  1030  0395                     	;# 
  1031  0396                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0015                     	;# 
  1062  0016                     	;# 
  1063  0016                     	;# 
  1064  0017                     	;# 
  1065  0018                     	;# 
  1066  0019                     	;# 
  1067  001A                     	;# 
  1068  001B                     	;# 
  1069  001C                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  008E                     	;# 
  1073  0090                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  010C                     	;# 
  1087  010D                     	;# 
  1088  010E                     	;# 
  1089  0116                     	;# 
  1090  0117                     	;# 
  1091  011D                     	;# 
  1092  018C                     	;# 
  1093  018D                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  019A                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019C                     	;# 
  1111  019C                     	;# 
  1112  019D                     	;# 
  1113  019E                     	;# 
  1114  019F                     	;# 
  1115  020D                     	;# 
  1116  0210                     	;# 
  1117  0211                     	;# 
  1118  0211                     	;# 
  1119  0212                     	;# 
  1120  0212                     	;# 
  1121  0213                     	;# 
  1122  0213                     	;# 
  1123  0214                     	;# 
  1124  0214                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0216                     	;# 
  1129  0216                     	;# 
  1130  0217                     	;# 
  1131  0217                     	;# 
  1132  0291                     	;# 
  1133  0291                     	;# 
  1134  0292                     	;# 
  1135  0293                     	;# 
  1136  0298                     	;# 
  1137  0298                     	;# 
  1138  0299                     	;# 
  1139  029A                     	;# 
  1140  0394                     	;# 
  1141  0395                     	;# 
  1142  0396                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0010                     	;# 
  1170  0011                     	;# 
  1171  0012                     	;# 
  1172  0015                     	;# 
  1173  0016                     	;# 
  1174  0016                     	;# 
  1175  0017                     	;# 
  1176  0018                     	;# 
  1177  0019                     	;# 
  1178  001A                     	;# 
  1179  001B                     	;# 
  1180  001C                     	;# 
  1181  008C                     	;# 
  1182  008D                     	;# 
  1183  008E                     	;# 
  1184  0090                     	;# 
  1185  0091                     	;# 
  1186  0092                     	;# 
  1187  0095                     	;# 
  1188  0096                     	;# 
  1189  0097                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009B                     	;# 
  1194  009C                     	;# 
  1195  009D                     	;# 
  1196  009E                     	;# 
  1197  010C                     	;# 
  1198  010D                     	;# 
  1199  010E                     	;# 
  1200  0116                     	;# 
  1201  0117                     	;# 
  1202  011D                     	;# 
  1203  018C                     	;# 
  1204  018D                     	;# 
  1205  018E                     	;# 
  1206  0191                     	;# 
  1207  0191                     	;# 
  1208  0192                     	;# 
  1209  0193                     	;# 
  1210  0193                     	;# 
  1211  0194                     	;# 
  1212  0195                     	;# 
  1213  0196                     	;# 
  1214  0197                     	;# 
  1215  0199                     	;# 
  1216  019A                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019C                     	;# 
  1222  019C                     	;# 
  1223  019D                     	;# 
  1224  019E                     	;# 
  1225  019F                     	;# 
  1226  020D                     	;# 
  1227  0210                     	;# 
  1228  0211                     	;# 
  1229  0211                     	;# 
  1230  0212                     	;# 
  1231  0212                     	;# 
  1232  0213                     	;# 
  1233  0213                     	;# 
  1234  0214                     	;# 
  1235  0214                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0216                     	;# 
  1240  0216                     	;# 
  1241  0217                     	;# 
  1242  0217                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0298                     	;# 
  1248  0298                     	;# 
  1249  0299                     	;# 
  1250  029A                     	;# 
  1251  0394                     	;# 
  1252  0395                     	;# 
  1253  0396                     	;# 
  1254  0FE4                     	;# 
  1255  0FE5                     	;# 
  1256  0FE6                     	;# 
  1257  0FE7                     	;# 
  1258  0FE8                     	;# 
  1259  0FE9                     	;# 
  1260  0FEA                     	;# 
  1261  0FEB                     	;# 
  1262  0FED                     	;# 
  1263  0FEE                     	;# 
  1264  0FEF                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0008                     	;# 
  1274  0009                     	;# 
  1275  000A                     	;# 
  1276  000B                     	;# 
  1277  000C                     	;# 
  1278  000D                     	;# 
  1279  000E                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0015                     	;# 
  1284  0016                     	;# 
  1285  0016                     	;# 
  1286  0017                     	;# 
  1287  0018                     	;# 
  1288  0019                     	;# 
  1289  001A                     	;# 
  1290  001B                     	;# 
  1291  001C                     	;# 
  1292  008C                     	;# 
  1293  008D                     	;# 
  1294  008E                     	;# 
  1295  0090                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0095                     	;# 
  1299  0096                     	;# 
  1300  0097                     	;# 
  1301  0099                     	;# 
  1302  009A                     	;# 
  1303  009B                     	;# 
  1304  009B                     	;# 
  1305  009C                     	;# 
  1306  009D                     	;# 
  1307  009E                     	;# 
  1308  010C                     	;# 
  1309  010D                     	;# 
  1310  010E                     	;# 
  1311  0116                     	;# 
  1312  0117                     	;# 
  1313  011D                     	;# 
  1314  018C                     	;# 
  1315  018D                     	;# 
  1316  018E                     	;# 
  1317  0191                     	;# 
  1318  0191                     	;# 
  1319  0192                     	;# 
  1320  0193                     	;# 
  1321  0193                     	;# 
  1322  0194                     	;# 
  1323  0195                     	;# 
  1324  0196                     	;# 
  1325  0197                     	;# 
  1326  0199                     	;# 
  1327  019A                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020D                     	;# 
  1338  0210                     	;# 
  1339  0211                     	;# 
  1340  0211                     	;# 
  1341  0212                     	;# 
  1342  0212                     	;# 
  1343  0213                     	;# 
  1344  0213                     	;# 
  1345  0214                     	;# 
  1346  0214                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0216                     	;# 
  1351  0216                     	;# 
  1352  0217                     	;# 
  1353  0217                     	;# 
  1354  0291                     	;# 
  1355  0291                     	;# 
  1356  0292                     	;# 
  1357  0293                     	;# 
  1358  0298                     	;# 
  1359  0298                     	;# 
  1360  0299                     	;# 
  1361  029A                     	;# 
  1362  0394                     	;# 
  1363  0395                     	;# 
  1364  0396                     	;# 
  1365  0FE4                     	;# 
  1366  0FE5                     	;# 
  1367  0FE6                     	;# 
  1368  0FE7                     	;# 
  1369  0FE8                     	;# 
  1370  0FE9                     	;# 
  1371  0FEA                     	;# 
  1372  0FEB                     	;# 
  1373  0FED                     	;# 
  1374  0FEE                     	;# 
  1375  0FEF                     	;# 
  1376  0000                     	;# 
  1377  0001                     	;# 
  1378  0002                     	;# 
  1379  0003                     	;# 
  1380  0004                     	;# 
  1381  0005                     	;# 
  1382  0006                     	;# 
  1383  0007                     	;# 
  1384  0008                     	;# 
  1385  0009                     	;# 
  1386  000A                     	;# 
  1387  000B                     	;# 
  1388  000C                     	;# 
  1389  000D                     	;# 
  1390  000E                     	;# 
  1391  0010                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0015                     	;# 
  1395  0016                     	;# 
  1396  0016                     	;# 
  1397  0017                     	;# 
  1398  0018                     	;# 
  1399  0019                     	;# 
  1400  001A                     	;# 
  1401  001B                     	;# 
  1402  001C                     	;# 
  1403  008C                     	;# 
  1404  008D                     	;# 
  1405  008E                     	;# 
  1406  0090                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0095                     	;# 
  1410  0096                     	;# 
  1411  0097                     	;# 
  1412  0099                     	;# 
  1413  009A                     	;# 
  1414  009B                     	;# 
  1415  009B                     	;# 
  1416  009C                     	;# 
  1417  009D                     	;# 
  1418  009E                     	;# 
  1419  010C                     	;# 
  1420  010D                     	;# 
  1421  010E                     	;# 
  1422  0116                     	;# 
  1423  0117                     	;# 
  1424  011D                     	;# 
  1425  018C                     	;# 
  1426  018D                     	;# 
  1427  018E                     	;# 
  1428  0191                     	;# 
  1429  0191                     	;# 
  1430  0192                     	;# 
  1431  0193                     	;# 
  1432  0193                     	;# 
  1433  0194                     	;# 
  1434  0195                     	;# 
  1435  0196                     	;# 
  1436  0197                     	;# 
  1437  0199                     	;# 
  1438  019A                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019C                     	;# 
  1444  019C                     	;# 
  1445  019D                     	;# 
  1446  019E                     	;# 
  1447  019F                     	;# 
  1448  020D                     	;# 
  1449  0210                     	;# 
  1450  0211                     	;# 
  1451  0211                     	;# 
  1452  0212                     	;# 
  1453  0212                     	;# 
  1454  0213                     	;# 
  1455  0213                     	;# 
  1456  0214                     	;# 
  1457  0214                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0216                     	;# 
  1462  0216                     	;# 
  1463  0217                     	;# 
  1464  0217                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0298                     	;# 
  1470  0298                     	;# 
  1471  0299                     	;# 
  1472  029A                     	;# 
  1473  0394                     	;# 
  1474  0395                     	;# 
  1475  0396                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0010                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0015                     	;# 
  1506  0016                     	;# 
  1507  0016                     	;# 
  1508  0017                     	;# 
  1509  0018                     	;# 
  1510  0019                     	;# 
  1511  001A                     	;# 
  1512  001B                     	;# 
  1513  001C                     	;# 
  1514  008C                     	;# 
  1515  008D                     	;# 
  1516  008E                     	;# 
  1517  0090                     	;# 
  1518  0091                     	;# 
  1519  0092                     	;# 
  1520  0095                     	;# 
  1521  0096                     	;# 
  1522  0097                     	;# 
  1523  0099                     	;# 
  1524  009A                     	;# 
  1525  009B                     	;# 
  1526  009B                     	;# 
  1527  009C                     	;# 
  1528  009D                     	;# 
  1529  009E                     	;# 
  1530  010C                     	;# 
  1531  010D                     	;# 
  1532  010E                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  011D                     	;# 
  1536  018C                     	;# 
  1537  018D                     	;# 
  1538  018E                     	;# 
  1539  0191                     	;# 
  1540  0191                     	;# 
  1541  0192                     	;# 
  1542  0193                     	;# 
  1543  0193                     	;# 
  1544  0194                     	;# 
  1545  0195                     	;# 
  1546  0196                     	;# 
  1547  0197                     	;# 
  1548  0199                     	;# 
  1549  019A                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019C                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020D                     	;# 
  1560  0210                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0298                     	;# 
  1581  0298                     	;# 
  1582  0299                     	;# 
  1583  029A                     	;# 
  1584  0394                     	;# 
  1585  0395                     	;# 
  1586  0396                     	;# 
  1587  0FE4                     	;# 
  1588  0FE5                     	;# 
  1589  0FE6                     	;# 
  1590  0FE7                     	;# 
  1591  0FE8                     	;# 
  1592  0FE9                     	;# 
  1593  0FEA                     	;# 
  1594  0FEB                     	;# 
  1595  0FED                     	;# 
  1596  0FEE                     	;# 
  1597  0FEF                     	;# 
  1598  0000                     	;# 
  1599  0001                     	;# 
  1600  0002                     	;# 
  1601  0003                     	;# 
  1602  0004                     	;# 
  1603  0005                     	;# 
  1604  0006                     	;# 
  1605  0007                     	;# 
  1606  0008                     	;# 
  1607  0009                     	;# 
  1608  000A                     	;# 
  1609  000B                     	;# 
  1610  000C                     	;# 
  1611  000D                     	;# 
  1612  000E                     	;# 
  1613  0010                     	;# 
  1614  0011                     	;# 
  1615  0012                     	;# 
  1616  0015                     	;# 
  1617  0016                     	;# 
  1618  0016                     	;# 
  1619  0017                     	;# 
  1620  0018                     	;# 
  1621  0019                     	;# 
  1622  001A                     	;# 
  1623  001B                     	;# 
  1624  001C                     	;# 
  1625  008C                     	;# 
  1626  008D                     	;# 
  1627  008E                     	;# 
  1628  0090                     	;# 
  1629  0091                     	;# 
  1630  0092                     	;# 
  1631  0095                     	;# 
  1632  0096                     	;# 
  1633  0097                     	;# 
  1634  0099                     	;# 
  1635  009A                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  010C                     	;# 
  1642  010D                     	;# 
  1643  010E                     	;# 
  1644  0116                     	;# 
  1645  0117                     	;# 
  1646  011D                     	;# 
  1647  018C                     	;# 
  1648  018D                     	;# 
  1649  018E                     	;# 
  1650  0191                     	;# 
  1651  0191                     	;# 
  1652  0192                     	;# 
  1653  0193                     	;# 
  1654  0193                     	;# 
  1655  0194                     	;# 
  1656  0195                     	;# 
  1657  0196                     	;# 
  1658  0197                     	;# 
  1659  0199                     	;# 
  1660  019A                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019C                     	;# 
  1666  019C                     	;# 
  1667  019D                     	;# 
  1668  019E                     	;# 
  1669  019F                     	;# 
  1670  020D                     	;# 
  1671  0210                     	;# 
  1672  0211                     	;# 
  1673  0211                     	;# 
  1674  0212                     	;# 
  1675  0212                     	;# 
  1676  0213                     	;# 
  1677  0213                     	;# 
  1678  0214                     	;# 
  1679  0214                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0216                     	;# 
  1684  0216                     	;# 
  1685  0217                     	;# 
  1686  0217                     	;# 
  1687  0291                     	;# 
  1688  0291                     	;# 
  1689  0292                     	;# 
  1690  0293                     	;# 
  1691  0298                     	;# 
  1692  0298                     	;# 
  1693  0299                     	;# 
  1694  029A                     	;# 
  1695  0394                     	;# 
  1696  0395                     	;# 
  1697  0396                     	;# 
  1698  0FE4                     	;# 
  1699  0FE5                     	;# 
  1700  0FE6                     	;# 
  1701  0FE7                     	;# 
  1702  0FE8                     	;# 
  1703  0FE9                     	;# 
  1704  0FEA                     	;# 
  1705  0FEB                     	;# 
  1706  0FED                     	;# 
  1707  0FEE                     	;# 
  1708  0FEF                     	;# 
  1709  0000                     	;# 
  1710  0001                     	;# 
  1711  0002                     	;# 
  1712  0003                     	;# 
  1713  0004                     	;# 
  1714  0005                     	;# 
  1715  0006                     	;# 
  1716  0007                     	;# 
  1717  0008                     	;# 
  1718  0009                     	;# 
  1719  000A                     	;# 
  1720  000B                     	;# 
  1721  000C                     	;# 
  1722  000D                     	;# 
  1723  000E                     	;# 
  1724  0010                     	;# 
  1725  0011                     	;# 
  1726  0012                     	;# 
  1727  0015                     	;# 
  1728  0016                     	;# 
  1729  0016                     	;# 
  1730  0017                     	;# 
  1731  0018                     	;# 
  1732  0019                     	;# 
  1733  001A                     	;# 
  1734  001B                     	;# 
  1735  001C                     	;# 
  1736  008C                     	;# 
  1737  008D                     	;# 
  1738  008E                     	;# 
  1739  0090                     	;# 
  1740  0091                     	;# 
  1741  0092                     	;# 
  1742  0095                     	;# 
  1743  0096                     	;# 
  1744  0097                     	;# 
  1745  0099                     	;# 
  1746  009A                     	;# 
  1747  009B                     	;# 
  1748  009B                     	;# 
  1749  009C                     	;# 
  1750  009D                     	;# 
  1751  009E                     	;# 
  1752  010C                     	;# 
  1753  010D                     	;# 
  1754  010E                     	;# 
  1755  0116                     	;# 
  1756  0117                     	;# 
  1757  011D                     	;# 
  1758  018C                     	;# 
  1759  018D                     	;# 
  1760  018E                     	;# 
  1761  0191                     	;# 
  1762  0191                     	;# 
  1763  0192                     	;# 
  1764  0193                     	;# 
  1765  0193                     	;# 
  1766  0194                     	;# 
  1767  0195                     	;# 
  1768  0196                     	;# 
  1769  0197                     	;# 
  1770  0199                     	;# 
  1771  019A                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019C                     	;# 
  1777  019C                     	;# 
  1778  019D                     	;# 
  1779  019E                     	;# 
  1780  019F                     	;# 
  1781  020D                     	;# 
  1782  0210                     	;# 
  1783  0211                     	;# 
  1784  0211                     	;# 
  1785  0212                     	;# 
  1786  0212                     	;# 
  1787  0213                     	;# 
  1788  0213                     	;# 
  1789  0214                     	;# 
  1790  0214                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0216                     	;# 
  1795  0216                     	;# 
  1796  0217                     	;# 
  1797  0217                     	;# 
  1798  0291                     	;# 
  1799  0291                     	;# 
  1800  0292                     	;# 
  1801  0293                     	;# 
  1802  0298                     	;# 
  1803  0298                     	;# 
  1804  0299                     	;# 
  1805  029A                     	;# 
  1806  0394                     	;# 
  1807  0395                     	;# 
  1808  0396                     	;# 
  1809  0FE4                     	;# 
  1810  0FE5                     	;# 
  1811  0FE6                     	;# 
  1812  0FE7                     	;# 
  1813  0FE8                     	;# 
  1814  0FE9                     	;# 
  1815  0FEA                     	;# 
  1816  0FEB                     	;# 
  1817  0FED                     	;# 
  1818  0FEE                     	;# 
  1819  0FEF                     	;# 
  1820  0000                     	;# 
  1821  0001                     	;# 
  1822  0002                     	;# 
  1823  0003                     	;# 
  1824  0004                     	;# 
  1825  0005                     	;# 
  1826  0006                     	;# 
  1827  0007                     	;# 
  1828  0008                     	;# 
  1829  0009                     	;# 
  1830  000A                     	;# 
  1831  000B                     	;# 
  1832  000C                     	;# 
  1833  000D                     	;# 
  1834  000E                     	;# 
  1835  0010                     	;# 
  1836  0011                     	;# 
  1837  0012                     	;# 
  1838  0015                     	;# 
  1839  0016                     	;# 
  1840  0016                     	;# 
  1841  0017                     	;# 
  1842  0018                     	;# 
  1843  0019                     	;# 
  1844  001A                     	;# 
  1845  001B                     	;# 
  1846  001C                     	;# 
  1847  008C                     	;# 
  1848  008D                     	;# 
  1849  008E                     	;# 
  1850  0090                     	;# 
  1851  0091                     	;# 
  1852  0092                     	;# 
  1853  0095                     	;# 
  1854  0096                     	;# 
  1855  0097                     	;# 
  1856  0099                     	;# 
  1857  009A                     	;# 
  1858  009B                     	;# 
  1859  009B                     	;# 
  1860  009C                     	;# 
  1861  009D                     	;# 
  1862  009E                     	;# 
  1863  010C                     	;# 
  1864  010D                     	;# 
  1865  010E                     	;# 
  1866  0116                     	;# 
  1867  0117                     	;# 
  1868  011D                     	;# 
  1869  018C                     	;# 
  1870  018D                     	;# 
  1871  018E                     	;# 
  1872  0191                     	;# 
  1873  0191                     	;# 
  1874  0192                     	;# 
  1875  0193                     	;# 
  1876  0193                     	;# 
  1877  0194                     	;# 
  1878  0195                     	;# 
  1879  0196                     	;# 
  1880  0197                     	;# 
  1881  0199                     	;# 
  1882  019A                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019C                     	;# 
  1888  019C                     	;# 
  1889  019D                     	;# 
  1890  019E                     	;# 
  1891  019F                     	;# 
  1892  020D                     	;# 
  1893  0210                     	;# 
  1894  0211                     	;# 
  1895  0211                     	;# 
  1896  0212                     	;# 
  1897  0212                     	;# 
  1898  0213                     	;# 
  1899  0213                     	;# 
  1900  0214                     	;# 
  1901  0214                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0216                     	;# 
  1906  0216                     	;# 
  1907  0217                     	;# 
  1908  0217                     	;# 
  1909  0291                     	;# 
  1910  0291                     	;# 
  1911  0292                     	;# 
  1912  0293                     	;# 
  1913  0298                     	;# 
  1914  0298                     	;# 
  1915  0299                     	;# 
  1916  029A                     	;# 
  1917  0394                     	;# 
  1918  0395                     	;# 
  1919  0396                     	;# 
  1920  0FE4                     	;# 
  1921  0FE5                     	;# 
  1922  0FE6                     	;# 
  1923  0FE7                     	;# 
  1924  0FE8                     	;# 
  1925  0FE9                     	;# 
  1926  0FEA                     	;# 
  1927  0FEB                     	;# 
  1928  0FED                     	;# 
  1929  0FEE                     	;# 
  1930  0FEF                     	;# 
  1931  0000                     	;# 
  1932  0001                     	;# 
  1933  0002                     	;# 
  1934  0003                     	;# 
  1935  0004                     	;# 
  1936  0005                     	;# 
  1937  0006                     	;# 
  1938  0007                     	;# 
  1939  0008                     	;# 
  1940  0009                     	;# 
  1941  000A                     	;# 
  1942  000B                     	;# 
  1943  000C                     	;# 
  1944  000D                     	;# 
  1945  000E                     	;# 
  1946  0010                     	;# 
  1947  0011                     	;# 
  1948  0012                     	;# 
  1949  0015                     	;# 
  1950  0016                     	;# 
  1951  0016                     	;# 
  1952  0017                     	;# 
  1953  0018                     	;# 
  1954  0019                     	;# 
  1955  001A                     	;# 
  1956  001B                     	;# 
  1957  001C                     	;# 
  1958  008C                     	;# 
  1959  008D                     	;# 
  1960  008E                     	;# 
  1961  0090                     	;# 
  1962  0091                     	;# 
  1963  0092                     	;# 
  1964  0095                     	;# 
  1965  0096                     	;# 
  1966  0097                     	;# 
  1967  0099                     	;# 
  1968  009A                     	;# 
  1969  009B                     	;# 
  1970  009B                     	;# 
  1971  009C                     	;# 
  1972  009D                     	;# 
  1973  009E                     	;# 
  1974  010C                     	;# 
  1975  010D                     	;# 
  1976  010E                     	;# 
  1977  0116                     	;# 
  1978  0117                     	;# 
  1979  011D                     	;# 
  1980  018C                     	;# 
  1981  018D                     	;# 
  1982  018E                     	;# 
  1983  0191                     	;# 
  1984  0191                     	;# 
  1985  0192                     	;# 
  1986  0193                     	;# 
  1987  0193                     	;# 
  1988  0194                     	;# 
  1989  0195                     	;# 
  1990  0196                     	;# 
  1991  0197                     	;# 
  1992  0199                     	;# 
  1993  019A                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019C                     	;# 
  1999  019C                     	;# 
  2000  019D                     	;# 
  2001  019E                     	;# 
  2002  019F                     	;# 
  2003  020D                     	;# 
  2004  0210                     	;# 
  2005  0211                     	;# 
  2006  0211                     	;# 
  2007  0212                     	;# 
  2008  0212                     	;# 
  2009  0213                     	;# 
  2010  0213                     	;# 
  2011  0214                     	;# 
  2012  0214                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0216                     	;# 
  2017  0216                     	;# 
  2018  0217                     	;# 
  2019  0217                     	;# 
  2020  0291                     	;# 
  2021  0291                     	;# 
  2022  0292                     	;# 
  2023  0293                     	;# 
  2024  0298                     	;# 
  2025  0298                     	;# 
  2026  0299                     	;# 
  2027  029A                     	;# 
  2028  0394                     	;# 
  2029  0395                     	;# 
  2030  0396                     	;# 
  2031  0FE4                     	;# 
  2032  0FE5                     	;# 
  2033  0FE6                     	;# 
  2034  0FE7                     	;# 
  2035  0FE8                     	;# 
  2036  0FE9                     	;# 
  2037  0FEA                     	;# 
  2038  0FEB                     	;# 
  2039  0FED                     	;# 
  2040  0FEE                     	;# 
  2041  0FEF                     	;# 
  2042  0000                     	;# 
  2043  0001                     	;# 
  2044  0002                     	;# 
  2045  0003                     	;# 
  2046  0004                     	;# 
  2047  0005                     	;# 
  2048  0006                     	;# 
  2049  0007                     	;# 
  2050  0008                     	;# 
  2051  0009                     	;# 
  2052  000A                     	;# 
  2053  000B                     	;# 
  2054  000C                     	;# 
  2055  000D                     	;# 
  2056  000E                     	;# 
  2057  0010                     	;# 
  2058  0011                     	;# 
  2059  0012                     	;# 
  2060  0015                     	;# 
  2061  0016                     	;# 
  2062  0016                     	;# 
  2063  0017                     	;# 
  2064  0018                     	;# 
  2065  0019                     	;# 
  2066  001A                     	;# 
  2067  001B                     	;# 
  2068  001C                     	;# 
  2069  008C                     	;# 
  2070  008D                     	;# 
  2071  008E                     	;# 
  2072  0090                     	;# 
  2073  0091                     	;# 
  2074  0092                     	;# 
  2075  0095                     	;# 
  2076  0096                     	;# 
  2077  0097                     	;# 
  2078  0099                     	;# 
  2079  009A                     	;# 
  2080  009B                     	;# 
  2081  009B                     	;# 
  2082  009C                     	;# 
  2083  009D                     	;# 
  2084  009E                     	;# 
  2085  010C                     	;# 
  2086  010D                     	;# 
  2087  010E                     	;# 
  2088  0116                     	;# 
  2089  0117                     	;# 
  2090  011D                     	;# 
  2091  018C                     	;# 
  2092  018D                     	;# 
  2093  018E                     	;# 
  2094  0191                     	;# 
  2095  0191                     	;# 
  2096  0192                     	;# 
  2097  0193                     	;# 
  2098  0193                     	;# 
  2099  0194                     	;# 
  2100  0195                     	;# 
  2101  0196                     	;# 
  2102  0197                     	;# 
  2103  0199                     	;# 
  2104  019A                     	;# 
  2105  019B                     	;# 
  2106  019B                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019C                     	;# 
  2110  019C                     	;# 
  2111  019D                     	;# 
  2112  019E                     	;# 
  2113  019F                     	;# 
  2114  020D                     	;# 
  2115  0210                     	;# 
  2116  0211                     	;# 
  2117  0211                     	;# 
  2118  0212                     	;# 
  2119  0212                     	;# 
  2120  0213                     	;# 
  2121  0213                     	;# 
  2122  0214                     	;# 
  2123  0214                     	;# 
  2124  0215                     	;# 
  2125  0215                     	;# 
  2126  0215                     	;# 
  2127  0216                     	;# 
  2128  0216                     	;# 
  2129  0217                     	;# 
  2130  0217                     	;# 
  2131  0291                     	;# 
  2132  0291                     	;# 
  2133  0292                     	;# 
  2134  0293                     	;# 
  2135  0298                     	;# 
  2136  0298                     	;# 
  2137  0299                     	;# 
  2138  029A                     	;# 
  2139  0394                     	;# 
  2140  0395                     	;# 
  2141  0396                     	;# 
  2142  0FE4                     	;# 
  2143  0FE5                     	;# 
  2144  0FE6                     	;# 
  2145  0FE7                     	;# 
  2146  0FE8                     	;# 
  2147  0FE9                     	;# 
  2148  0FEA                     	;# 
  2149  0FEB                     	;# 
  2150  0FED                     	;# 
  2151  0FEE                     	;# 
  2152  0FEF                     	;# 
  2153                           
  2154                           	psect	idataBANK3
  2155  1485                     __pidataBANK3:	
  2156                           
  2157                           ;initializer for __product
  2158  1485  3463               	retlw	99
  2159  1486  3402               	retlw	2
  2160  1487  3400               	retlw	0
  2161  1488  3400               	retlw	0
  2162  1489  3400               	retlw	0
  2163  148A  3400               	retlw	0
  2164  148B  3400               	retlw	0
  2165  148C  3400               	retlw	0
  2166  148D  3400               	retlw	0
  2167  148E  3400               	retlw	0
  2168  148F  3400               	retlw	0
  2169  1490  3400               	retlw	0
  2170  1491  34FF               	retlw	255
  2171  1492  34FF               	retlw	255
  2172  1493  34FF               	retlw	255
  2173  1494  3400               	retlw	0
  2174  1495  3400               	retlw	0
  2175  1496  3400               	retlw	0
  2176  1497  3400               	retlw	0
  2177  1498  3400               	retlw	0
  2178  1499  3400               	retlw	0
  2179  149A  3400               	retlw	0
  2180  149B  3400               	retlw	0
  2181  149C  3400               	retlw	0
  2182  149D  3400               	retlw	0
  2183  149E  3400               	retlw	0
  2184  149F  3400               	retlw	0
  2185  14A0  3400               	retlw	0
  2186  14A1  3400               	retlw	0
  2187  14A2  3400               	retlw	0
  2188  14A3  3400               	retlw	0
  2189  14A4  3400               	retlw	0
  2190                           
  2191                           	psect	stringtext
  2192  1000                     __pstringtext:	
  2193  1000                     _CC2500_registers_address:	
  2194  1000  3403               	retlw	3
  2195  1001  3416               	retlw	22
  2196  1002  3417               	retlw	23
  2197  1003  341E               	retlw	30
  2198  1004  341F               	retlw	31
  2199  1005  3420               	retlw	32
  2200  1006  342A               	retlw	42
  2201  1007  342B               	retlw	43
  2202  1008  340B               	retlw	11
  2203  1009  340C               	retlw	12
  2204  100A  340D               	retlw	13
  2205  100B  340E               	retlw	14
  2206  100C  340F               	retlw	15
  2207  100D  3410               	retlw	16
  2208  100E  3411               	retlw	17
  2209  100F  3412               	retlw	18
  2210  1010  3413               	retlw	19
  2211  1011  3414               	retlw	20
  2212  1012  340A               	retlw	10
  2213  1013  3415               	retlw	21
  2214  1014  3421               	retlw	33
  2215  1015  3422               	retlw	34
  2216  1016  3418               	retlw	24
  2217  1017  3419               	retlw	25
  2218  1018  341A               	retlw	26
  2219  1019  341B               	retlw	27
  2220  101A  341C               	retlw	28
  2221  101B  341D               	retlw	29
  2222  101C  3423               	retlw	35
  2223  101D  3424               	retlw	36
  2224  101E  3425               	retlw	37
  2225  101F  3426               	retlw	38
  2226  1020  3429               	retlw	41
  2227  1021  342C               	retlw	44
  2228  1022  342D               	retlw	45
  2229  1023  342E               	retlw	46
  2230  1024  3400               	retlw	0
  2231  1025  3401               	retlw	1
  2232  1026  3402               	retlw	2
  2233  1027  3407               	retlw	7
  2234  1028  3408               	retlw	8
  2235  1029  3409               	retlw	9
  2236  102A  3406               	retlw	6
  2237  102B  3404               	retlw	4
  2238  102C  3405               	retlw	5
  2239  102D  3427               	retlw	39
  2240  102E  3428               	retlw	40
  2241  102F                     __end_of_CC2500_registers_address:	
  2242  102F                     _CC2500_rfSettings:	
  2243  102F  3407               	retlw	7
  2244  1030  3407               	retlw	7
  2245  1031  3430               	retlw	48
  2246  1032  3487               	retlw	135
  2247  1033  346B               	retlw	107
  2248  1034  34F8               	retlw	248
  2249  1035  347F               	retlw	127
  2250  1036  343F               	retlw	63
  2251  1037  3409               	retlw	9
  2252  1038  3400               	retlw	0
  2253  1039  345C               	retlw	92
  2254  103A  34A7               	retlw	167
  2255  103B  3462               	retlw	98
  2256  103C  3486               	retlw	134
  2257  103D  3483               	retlw	131
  2258  103E  3403               	retlw	3
  2259  103F  3422               	retlw	34
  2260  1040  34F8               	retlw	248
  2261  1041  3400               	retlw	0
  2262  1042  3444               	retlw	68
  2263  1043  34B6               	retlw	182
  2264  1044  3410               	retlw	16
  2265  1045  3418               	retlw	24
  2266  1046  341D               	retlw	29
  2267  1047  341C               	retlw	28
  2268  1048  34C7               	retlw	199
  2269  1049  3400               	retlw	0
  2270  104A  34B2               	retlw	178
  2271  104B  34EA               	retlw	234
  2272  104C  340A               	retlw	10
  2273  104D  3400               	retlw	0
  2274  104E  3411               	retlw	17
  2275  104F  3459               	retlw	89
  2276  1050  3488               	retlw	136
  2277  1051  3431               	retlw	49
  2278  1052  340B               	retlw	11
  2279  1053  342F               	retlw	47
  2280  1054  342E               	retlw	46
  2281  1055  3406               	retlw	6
  2282  1056  3404               	retlw	4
  2283  1057  3405               	retlw	5
  2284  1058  3400               	retlw	0
  2285  1059  3430               	retlw	48
  2286  105A  34D3               	retlw	211
  2287  105B  3491               	retlw	145
  2288  105C  3441               	retlw	65
  2289  105D  3400               	retlw	0
  2290  105E                     __end_of_CC2500_rfSettings:	
  2291  105E                     _CC2500_patable_vaule:	
  2292  105E  34FE               	retlw	254
  2293  105F  34FE               	retlw	254
  2294  1060  34FE               	retlw	254
  2295  1061  34FE               	retlw	254
  2296  1062  34FE               	retlw	254
  2297  1063  34FE               	retlw	254
  2298  1064  34FE               	retlw	254
  2299  1065  34FE               	retlw	254
  2300  1066                     __end_of_CC2500_patable_vaule:	
  2301                           
  2302                           	psect	nvBANK0
  2303  006C                     __pnvBANK0:	
  2304  006C                     _product:	
  2305  006C                     	ds	1
  2306  000C                     _PORTA	set	12
  2307  000D                     _PORTB	set	13
  2308  000E                     _PORTC	set	14
  2309  0018                     _T1CON	set	24
  2310  0017                     _TMR1H	set	23
  2311  0016                     _TMR1L	set	22
  2312  005F                     _GIE	set	95
  2313  005B                     _IOCIE	set	91
  2314  0058                     _IOCIF	set	88
  2315  005E                     _PEIE	set	94
  2316  0060                     _RA0	set	96
  2317  0064                     _RA4	set	100
  2318  0066                     _RA6	set	102
  2319  0067                     _RA7	set	103
  2320  0068                     _RB0	set	104
  2321  0069                     _RB1	set	105
  2322  006A                     _RB2	set	106
  2323  006B                     _RB3	set	107
  2324  006D                     _RB5	set	109
  2325  0070                     _RC0	set	112
  2326  0071                     _RC1	set	113
  2327  0073                     _RC3	set	115
  2328  0074                     _RC4	set	116
  2329  0075                     _RC5	set	117
  2330  0088                     _TMR1IF	set	136
  2331  009D                     _ADCON0	set	157
  2332  009E                     _ADCON1	set	158
  2333  009C                     _ADRESH	set	156
  2334  009B                     _ADRESL	set	155
  2335  0099                     _OSCCON	set	153
  2336  008C                     _TRISA	set	140
  2337  008D                     _TRISB	set	141
  2338  008E                     _TRISC	set	142
  2339  0097                     _WDTCON	set	151
  2340  04E9                     _GO_nDONE	set	1257
  2341  0488                     _TMR1IE	set	1160
  2342  0117                     _FVRCON	set	279
  2343  010C                     _LATA	set	268
  2344  010D                     _LATB	set	269
  2345  010E                     _LATC	set	270
  2346  018C                     _ANSELA	set	396
  2347  018D                     _ANSELB	set	397
  2348  018E                     _ANSELC	set	398
  2349  0192                     _PMADRH	set	402
  2350  0191                     _PMADRL	set	401
  2351  0196                     _PMCON2	set	406
  2352  0194                     _PMDATH	set	404
  2353  0193                     _PMDATL	set	403
  2354  0CAE                     _CFGS	set	3246
  2355  0CAC                     _FREE	set	3244
  2356  0CAD                     _LWLO	set	3245
  2357  0CA8                     _RD	set	3240
  2358  0CA9                     _WR	set	3241
  2359  0CAA                     _WREN	set	3242
  2360  020D                     _WPUB	set	525
  2361  0396                     _IOCBF	set	918
  2362  0395                     _IOCBN	set	917
  2363  0394                     _IOCBP	set	916
  2364  1CB2                     _IOCBF2	set	7346
  2365                           
  2366                           ; #config settings
  2367  0000                     
  2368                           	psect	cinit
  2369  0021                     start_initialization:	
  2370  0021                     __initialization:	
  2371                           
  2372                           ; Clear objects allocated to BITCOMMON
  2373  0021  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2374                           
  2375                           ; Clear objects allocated to COMMON
  2376  0022  01FB               	clrf	__pbssCOMMON& (0+127)
  2377                           
  2378                           ; Clear objects allocated to BANK0
  2379  0023  01EA               	clrf	__pbssBANK0& (0+127)
  2380  0024  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  2381                           
  2382                           ; Clear objects allocated to BANK1
  2383  0025  30A0               	movlw	low __pbssBANK1
  2384  0026  0084               	movwf	4
  2385  0027  3000               	movlw	high __pbssBANK1
  2386  0028  0085               	movwf	5
  2387  0029  304C               	movlw	76
  2388  002A  3190  20FF  3180   	fcall	clear_ram0
  2389                           
  2390                           ; Clear objects allocated to BANK2
  2391  002D  3020               	movlw	low __pbssBANK2
  2392  002E  0084               	movwf	4
  2393  002F  3001               	movlw	high __pbssBANK2
  2394  0030  0085               	movwf	5
  2395  0031  304E               	movlw	78
  2396  0032  3190  20FF  3180   	fcall	clear_ram0
  2397                           
  2398                           ; Clear objects allocated to BANK3
  2399  0035  30A0               	movlw	low __pbssBANK3
  2400  0036  0084               	movwf	4
  2401  0037  3001               	movlw	high __pbssBANK3
  2402  0038  0085               	movwf	5
  2403  0039  3025               	movlw	37
  2404  003A  3190  20FF  3180   	fcall	clear_ram0
  2405                           
  2406                           ; Initialize objects allocated to BANK3
  2407  003D  3085               	movlw	low __pidataBANK3
  2408  003E  0084               	movwf	4
  2409  003F  3094               	movlw	(high __pidataBANK3)| (0+128)
  2410  0040  0085               	movwf	5
  2411  0041  30C5               	movlw	low __pdataBANK3
  2412  0042  0086               	movwf	6
  2413  0043  3001               	movlw	high __pdataBANK3
  2414  0044  0087               	movwf	7
  2415  0045  3020               	movlw	32
  2416  0046  3190  20F9         	fcall	init_ram
  2417  0048                     end_of_initialization:	
  2418                           ;End of C runtime variable initialization code
  2419                           
  2420  0048                     __end_of__initialization:	
  2421  0048  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2422  0049  0020               	movlb	0
  2423  004A  3188  2844         	ljmp	_main	;jump to C main() function
  2424                           
  2425                           	psect	bitbssCOMMON
  2426  03D0                     __pbitbssCOMMON:	
  2427  03D0                     _Receive_OK:	
  2428  03D0                     	ds	1
  2429  03D1                     _Transceive_OK:	
  2430  03D1                     	ds	1
  2431                           
  2432                           	psect	bssCOMMON
  2433  007B                     __pbssCOMMON:	
  2434  007B                     _DelayOff:	
  2435  007B                     	ds	1
  2436                           
  2437                           	psect	bssBANK0
  2438  006A                     __pbssBANK0:	
  2439  006A                     _DimmerLights:	
  2440  006A                     	ds	1
  2441  006B                     _Sw:	
  2442  006B                     	ds	1
  2443                           
  2444                           	psect	bssBANK1
  2445  00A0                     __pbssBANK1:	
  2446  00A0                     _DimmerIntr1:	
  2447  00A0                     	ds	16
  2448  00B0                     _RF1:	
  2449  00B0                     	ds	15
  2450  00BF                     _myMain:	
  2451  00BF                     	ds	13
  2452  00CC                     _Buz1:	
  2453  00CC                     	ds	12
  2454  00D8                     _Timer1:	
  2455  00D8                     	ds	3
  2456  00DB                     _RF_Count:	
  2457  00DB                     	ds	2
  2458  00DD                     _WDT:	
  2459  00DD                     	ds	2
  2460  00DF                     _CRC:	
  2461  00DF                     	ds	1
  2462  00E0                     _Cmd:	
  2463  00E0                     	ds	1
  2464  00E1                     _DimmerIntr:	
  2465  00E1                     	ds	1
  2466  00E2                     _LED:	
  2467  00E2                     	ds	1
  2468  00E3                     _Light:	
  2469  00E3                     	ds	1
  2470  00E4                     _RSSI:	
  2471  00E4                     	ds	1
  2472  00E5                     _Rx_Length:	
  2473  00E5                     	ds	1
  2474  00E6                     _SPI0Buffer:	
  2475  00E6                     	ds	1
  2476  00E7                     _SwDetect:	
  2477  00E7                     	ds	1
  2478  00E8                     _Tx_Length:	
  2479  00E8                     	ds	1
  2480  00E9                     _r_address:	
  2481  00E9                     	ds	1
  2482  00EA                     _r_data:	
  2483  00EA                     	ds	1
  2484  00EB                     _s_data:	
  2485  00EB                     	ds	1
  2486                           
  2487                           	psect	bssBANK2
  2488  0120                     __pbssBANK2:	
  2489  0120                     _RF_Data:	
  2490  0120                     	ds	30
  2491  013E                     _u1:	
  2492  013E                     	ds	16
  2493  014E                     _Dimmer:	
  2494  014E                     	ds	5
  2495  0153                     _DimmerLights1:	
  2496  0153                     	ds	9
  2497  015C                     _Sw1:	
  2498  015C                     	ds	9
  2499  0165                     _DlySw1:	
  2500  0165                     	ds	5
  2501  016A                     _VarErrLED:	
  2502  016A                     	ds	4
  2503                           
  2504                           	psect	bssBANK3
  2505  01A0                     __pbssBANK3:	
  2506  01A0                     _Memory:	
  2507  01A0                     	ds	37
  2508                           
  2509                           	psect	dataBANK3
  2510  01C5                     __pdataBANK3:	
  2511  01C5                     __product:	
  2512  01C5                     	ds	32
  2513                           
  2514                           	psect	clrtext
  2515  10FF                     clear_ram0:	
  2516                           ;	Called with FSR0 containing the base address, and
  2517                           ;	WREG with the size to clear
  2518                           
  2519  10FF  0064               	clrwdt	;clear the watchdog before getting into this loop
  2520  1100                     clrloop0:	
  2521  1100  0180               	clrf	0	;clear RAM location pointed to by FSR
  2522  1101  3101               	addfsr 0,1
  2523  1102  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2524  1103  2900               	goto	clrloop0	;have we reached the end yet?
  2525  1104  3400               	retlw	0	;all done for this memory range, return
  2526                           
  2527                           	psect	inittext
  2528  10F9                     init_ram:	
  2529  10F9  00FE               	movwf	126
  2530  10FA                     initloop:	
  2531  10FA  0012               	moviw fsr0++
  2532  10FB  001E               	movwi fsr1++
  2533  10FC  0BFE               	decfsz	126,f
  2534  10FD  28FA               	goto	initloop
  2535  10FE  3400               	retlw	0
  2536                           
  2537                           	psect	cstackBANK3
  2538  01E5                     __pcstackBANK3:	
  2539  01E5                     setRF_Main@error:	
  2540                           
  2541                           ; 1 bytes @ 0x0
  2542  01E5                     	ds	1
  2543  01E6                     setRF_Main@TX:	
  2544                           
  2545                           ; 1 bytes @ 0x1
  2546  01E6                     	ds	1
  2547  01E7                     setRF_Main@RX:	
  2548                           
  2549                           ; 1 bytes @ 0x2
  2550  01E7                     	ds	1
  2551  01E8                     setRF_Main@command:	
  2552                           
  2553                           ; 2 bytes @ 0x3
  2554  01E8                     	ds	2
  2555                           
  2556                           	psect	cstackBANK1
  2557  00EC                     __pcstackBANK1:	
  2558  00EC                     ?_main:	
  2559  00EC                     main@argc:	
  2560                           ; 2 bytes @ 0x0
  2561                           
  2562                           
  2563                           ; 2 bytes @ 0x0
  2564  00EC                     	ds	2
  2565  00EE                     main@argv:	
  2566                           
  2567                           ; 2 bytes @ 0x2
  2568  00EE                     	ds	2
  2569                           
  2570                           	psect	cstackCOMMON
  2571  0070                     __pcstackCOMMON:	
  2572  0070                     ?_CC2500_WriteCommand:	
  2573  0070                     ?_RF_Timeout_Counter:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_setRF_TimeoutCleared:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_CC2500_WriteByte:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_CC2500_ReadStatus:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_CC2500_ReadByte:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_CC2500_PowerRST:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_CC2500_InitSetREG:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_CC2500_InitPATable:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_CC2500_ClearTXFIFO:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_ClearRXFIFO:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_FrequencyCabr:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_SIDLEMode:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_DlyOff_Initialization:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_DlyOff_Main:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_setDimmerLights_SwOn:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_setDimmerLights_SwOff:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_setMemory_Modify:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_setDimmerLights_Initialization:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_setDimmerLights_Main:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_DimmerLights_DimmingFunction:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_DimmerIntr_ValueCalculate:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_setDimmerLights_DimmingClose:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setTxData:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setRF_TransceiveGO:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setLED_Initialization:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setLED_Main:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_Fosc_Set:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_IO_Set:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_TMR1_Set:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_ADC_Set:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_IOC_Set:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_WDT_Set:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_TMR1_ISR:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_IOC_ISR:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_Timeout_Counter:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_set_TimeoutCleared:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Flash_Memory_Write:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_Flash_Memory_Modify:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_WDT_Clearing:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_myMain_Initialization:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_Switch_Initialization:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_my_MainTimer:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Switch_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_RF_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Exception_Main:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_setRF_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_setRF_Main:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_getRxData:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_setData:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_setLog_Code:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_setControl_Lights_Table:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_setRFSW_Control:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_setRFSW_AdjControl:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_setRF_AdjControl:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setSw_Initialization:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setSw_Main:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_Buzzer_Initialization:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_Buzzer_Main:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_CC2500_TxData:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_CC2500_RxData:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_CC2500_PowerOnInitial:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_DelayOffPointSelect:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_DelayOff_Initialization:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_DelayOff_Main:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_DimmerIntr_Initialization:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_DimmerLights_SelectPointer:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_DimmerLights_Initialization:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_setDimmerLights_DimmingOn:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_DimmerLights_Main:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_DimmerLights_TMR_1:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ??_DimmerLights_TMR_1:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_DimmerLights_IOC_1:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ??_DimmerLights_IOC_1:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_LedPointSelect:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_LED_Initialization:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_LED_Main:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_Mcu_Initialization:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_ISR:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_Flash_Memory_Initialization:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_Flash_Memory_Main:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_Flash_Memory_Unlock:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_Flash_Memory_Erasing:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_setMemory_LoopSave:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_WDT_Main:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_RF_Initialization:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_setRF_Learn:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_TouchPower:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_SwPointSelect:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_getDimmerLights_Status:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_getDimmerLights_ValueToPercent:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0070                     ?_getDimmerLights_PercentToValue:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0070                     ?_getDimmerLights_Allow_Condition:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0070                     ?_getMain_All_LightsStatus:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0070                     ?_getCmd_Status:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0070                     ?_Flash_Memory_Read:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0070                     ?_getAll_Sw_KeyStatus:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0070                     ?_getRF_KeyStatus:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0070                     ?_getSw_KeyStatus:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0070                     ?_getDelayOff_GO:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0070                     ?_getDimmerIntr_DimmingValue:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ?_getMain_All_Error_Status:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     setDimmerLights_Initialization@lights:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     getDimmerLights_Allow_Condition@lights:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     getMain_All_Error_Status@command:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     getSw_KeyStatus@sw:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891                           
  2892                           ; 1 bytes @ 0x0
  2893  0070                     	ds	1
  2894  0071                     ??_TMR1_ISR:	
  2895  0071                     ??_IOC_ISR:	
  2896                           ; 0 bytes @ 0x1
  2897                           
  2898  0071                     ??_ISR:	
  2899                           ; 0 bytes @ 0x1
  2900                           
  2901                           
  2902                           ; 0 bytes @ 0x1
  2903  0071                     	ds	1
  2904  0072                     ??_RF_Timeout_Counter:	
  2905  0072                     ??_setRF_TimeoutCleared:	
  2906                           ; 0 bytes @ 0x2
  2907                           
  2908  0072                     ??_CC2500_WriteByte:	
  2909                           ; 0 bytes @ 0x2
  2910                           
  2911  0072                     ??_CC2500_ReadByte:	
  2912                           ; 0 bytes @ 0x2
  2913                           
  2914  0072                     ?_DelayTime_1us:	
  2915                           ; 0 bytes @ 0x2
  2916                           
  2917  0072                     ??_setMemory_Modify:	
  2918                           ; 0 bytes @ 0x2
  2919                           
  2920  0072                     ??_setDimmerLights_Initialization:	
  2921                           ; 0 bytes @ 0x2
  2922                           
  2923  0072                     ??_getDimmerLights_Allow_Condition:	
  2924                           ; 0 bytes @ 0x2
  2925                           
  2926  0072                     ??_getMain_All_LightsStatus:	
  2927                           ; 0 bytes @ 0x2
  2928                           
  2929  0072                     ??_getCmd_Status:	
  2930                           ; 0 bytes @ 0x2
  2931                           
  2932  0072                     ?_setCmd_Status:	
  2933                           ; 0 bytes @ 0x2
  2934                           
  2935  0072                     ??_setTxData:	
  2936                           ; 0 bytes @ 0x2
  2937                           
  2938  0072                     ??_setRF_TransceiveGO:	
  2939                           ; 0 bytes @ 0x2
  2940                           
  2941  0072                     ??_Fosc_Set:	
  2942                           ; 0 bytes @ 0x2
  2943                           
  2944  0072                     ??_IO_Set:	
  2945                           ; 0 bytes @ 0x2
  2946                           
  2947  0072                     ??_TMR1_Set:	
  2948                           ; 0 bytes @ 0x2
  2949                           
  2950  0072                     ??_ADC_Set:	
  2951                           ; 0 bytes @ 0x2
  2952                           
  2953  0072                     ??_IOC_Set:	
  2954                           ; 0 bytes @ 0x2
  2955                           
  2956  0072                     ??_WDT_Set:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959  0072                     ??_Timeout_Counter:	
  2960                           ; 0 bytes @ 0x2
  2961                           
  2962  0072                     ??_set_TimeoutCleared:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0072                     ??_Flash_Memory_Read:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0072                     ?_setMemory_Data:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0072                     ??_Flash_Memory_Write:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0072                     ??_getAll_Sw_KeyStatus:	
  2975                           ; 0 bytes @ 0x2
  2976                           
  2977  0072                     ??_WDT_Clearing:	
  2978                           ; 0 bytes @ 0x2
  2979                           
  2980  0072                     ??_myMain_Initialization:	
  2981                           ; 0 bytes @ 0x2
  2982                           
  2983  0072                     ??_setRF_Initialization:	
  2984                           ; 0 bytes @ 0x2
  2985                           
  2986  0072                     ??_getRF_KeyStatus:	
  2987                           ; 0 bytes @ 0x2
  2988                           
  2989  0072                     ??_setData:	
  2990                           ; 0 bytes @ 0x2
  2991                           
  2992  0072                     ??_getSw_KeyStatus:	
  2993                           ; 0 bytes @ 0x2
  2994                           
  2995  0072                     ??_Buzzer_Initialization:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998  0072                     ??_Buzzer_Main:	
  2999                           ; 0 bytes @ 0x2
  3000                           
  3001  0072                     ??_DelayOffPointSelect:	
  3002                           ; 0 bytes @ 0x2
  3003                           
  3004  0072                     ?_setDimmerIntr_ControlStatus:	
  3005                           ; 0 bytes @ 0x2
  3006                           
  3007  0072                     ??_getDimmerIntr_DimmingValue:	
  3008                           ; 0 bytes @ 0x2
  3009                           
  3010  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3011                           ; 0 bytes @ 0x2
  3012                           
  3013  0072                     ??_getDimmerIntr_Dimming_Sw:	
  3014                           ; 0 bytes @ 0x2
  3015                           
  3016  0072                     ?_setDimmerIntr_Dimming_RF:	
  3017                           ; 0 bytes @ 0x2
  3018                           
  3019  0072                     ??_DimmerLights_SelectPointer:	
  3020                           ; 0 bytes @ 0x2
  3021                           
  3022  0072                     ??_LedPointSelect:	
  3023                           ; 0 bytes @ 0x2
  3024                           
  3025  0072                     ??_Flash_Memory_Unlock:	
  3026                           ; 0 bytes @ 0x2
  3027                           
  3028  0072                     ??_Flash_Memory_Erasing:	
  3029                           ; 0 bytes @ 0x2
  3030                           
  3031  0072                     ??_setMemory_LoopSave:	
  3032                           ; 0 bytes @ 0x2
  3033                           
  3034  0072                     ??_WDT_Main:	
  3035                           ; 0 bytes @ 0x2
  3036                           
  3037  0072                     ??_getMain_All_Error_Status:	
  3038                           ; 0 bytes @ 0x2
  3039                           
  3040  0072                     ??_setRF_Learn:	
  3041                           ; 0 bytes @ 0x2
  3042                           
  3043  0072                     ??_TouchPower:	
  3044                           ; 0 bytes @ 0x2
  3045                           
  3046  0072                     ??_SwPointSelect:	
  3047                           ; 0 bytes @ 0x2
  3048                           
  3049  0072                     ?___bmul:	
  3050                           ; 0 bytes @ 0x2
  3051                           
  3052  0072                     ?___lbdiv:	
  3053                           ; 1 bytes @ 0x2
  3054                           
  3055  0072                     ?_getBuz_GO:	
  3056                           ; 1 bytes @ 0x2
  3057                           
  3058  0072                     ?___awdiv:	
  3059                           ; 2 bytes @ 0x2
  3060                           
  3061  0072                     ?___lwdiv:	
  3062                           ; 2 bytes @ 0x2
  3063                           
  3064  0072                     ?___ftpack:	
  3065                           ; 2 bytes @ 0x2
  3066                           
  3067  0072                     setDimmerIntr_ControlStatus@command:	
  3068                           ; 3 bytes @ 0x2
  3069                           
  3070  0072                     setDimmerIntr_Dimming_Sw@command:	
  3071                           ; 1 bytes @ 0x2
  3072                           
  3073  0072                     getDimmerIntr_Dimming_Sw@lights:	
  3074                           ; 1 bytes @ 0x2
  3075                           
  3076  0072                     setDimmerIntr_Dimming_RF@command:	
  3077                           ; 1 bytes @ 0x2
  3078                           
  3079  0072                     getDimmerLights_Allow_Condition@allow:	
  3080                           ; 1 bytes @ 0x2
  3081                           
  3082  0072                     setMemory_Data@data:	
  3083                           ; 1 bytes @ 0x2
  3084                           
  3085  0072                     getMain_All_LightsStatus@status:	
  3086                           ; 1 bytes @ 0x2
  3087                           
  3088  0072                     getMain_All_Error_Status@status:	
  3089                           ; 1 bytes @ 0x2
  3090                           
  3091  0072                     setCmd_Status@cmd:	
  3092                           ; 1 bytes @ 0x2
  3093                           
  3094  0072                     getCmd_Status@number:	
  3095                           ; 1 bytes @ 0x2
  3096                           
  3097  0072                     ___bmul@multiplicand:	
  3098                           ; 1 bytes @ 0x2
  3099                           
  3100  0072                     ___lbdiv@divisor:	
  3101                           ; 1 bytes @ 0x2
  3102                           
  3103  0072                     DelayTime_1us@count:	
  3104                           ; 1 bytes @ 0x2
  3105                           
  3106  0072                     ___awdiv@divisor:	
  3107                           ; 2 bytes @ 0x2
  3108                           
  3109  0072                     ___lwdiv@divisor:	
  3110                           ; 2 bytes @ 0x2
  3111                           
  3112  0072                     ___ftpack@arg:	
  3113                           ; 2 bytes @ 0x2
  3114                           
  3115                           
  3116                           ; 3 bytes @ 0x2
  3117  0072                     	ds	1
  3118  0073                     ??_setCmd_Status:	
  3119  0073                     ??_setMemory_Data:	
  3120                           ; 0 bytes @ 0x3
  3121                           
  3122  0073                     ??_setDimmerIntr_ControlStatus:	
  3123                           ; 0 bytes @ 0x3
  3124                           
  3125  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3126                           ; 0 bytes @ 0x3
  3127                           
  3128  0073                     ??_setDimmerIntr_Dimming_RF:	
  3129                           ; 0 bytes @ 0x3
  3130                           
  3131  0073                     ??_Mcu_Initialization:	
  3132                           ; 0 bytes @ 0x3
  3133                           
  3134  0073                     ??_RF_Initialization:	
  3135                           ; 0 bytes @ 0x3
  3136                           
  3137  0073                     ??___bmul:	
  3138                           ; 0 bytes @ 0x3
  3139                           
  3140  0073                     ??___lbdiv:	
  3141                           ; 0 bytes @ 0x3
  3142                           
  3143  0073                     CC2500_WriteByte@loop_a:	
  3144                           ; 0 bytes @ 0x3
  3145                           
  3146  0073                     CC2500_ReadByte@loop_b:	
  3147                           ; 1 bytes @ 0x3
  3148                           
  3149  0073                     DelayOffPointSelect@sw:	
  3150                           ; 1 bytes @ 0x3
  3151                           
  3152  0073                     getDimmerIntr_DimmingValue@lights:	
  3153                           ; 1 bytes @ 0x3
  3154                           
  3155  0073                     getDimmerIntr_Dimming_Sw@status:	
  3156                           ; 1 bytes @ 0x3
  3157                           
  3158  0073                     DimmerLights_SelectPointer@lights:	
  3159                           ; 1 bytes @ 0x3
  3160                           
  3161  0073                     LedPointSelect@led:	
  3162                           ; 1 bytes @ 0x3
  3163                           
  3164  0073                     Flash_Memory_Read@i:	
  3165                           ; 1 bytes @ 0x3
  3166                           
  3167  0073                     Flash_Memory_Write@i:	
  3168                           ; 1 bytes @ 0x3
  3169                           
  3170  0073                     setMemory_Modify@command:	
  3171                           ; 1 bytes @ 0x3
  3172                           
  3173  0073                     setMemory_LoopSave@command:	
  3174                           ; 1 bytes @ 0x3
  3175                           
  3176  0073                     getCmd_Status@cmd:	
  3177                           ; 1 bytes @ 0x3
  3178                           
  3179  0073                     setRF_Learn@command:	
  3180                           ; 1 bytes @ 0x3
  3181                           
  3182  0073                     getRF_KeyStatus@key:	
  3183                           ; 1 bytes @ 0x3
  3184                           
  3185  0073                     setRF_TransceiveGO@command:	
  3186                           ; 1 bytes @ 0x3
  3187                           
  3188  0073                     SwPointSelect@sw:	
  3189                           ; 1 bytes @ 0x3
  3190                           
  3191  0073                     getSw_KeyStatus@status:	
  3192                           ; 1 bytes @ 0x3
  3193                           
  3194  0073                     getAll_Sw_KeyStatus@status:	
  3195                           ; 1 bytes @ 0x3
  3196                           
  3197                           
  3198                           ; 1 bytes @ 0x3
  3199  0073                     	ds	1
  3200  0074                     ??_CC2500_WriteCommand:	
  3201  0074                     ??_CC2500_ReadStatus:	
  3202                           ; 0 bytes @ 0x4
  3203                           
  3204  0074                     ??_DelayTime_1us:	
  3205                           ; 0 bytes @ 0x4
  3206                           
  3207  0074                     ?_CC2500_WriteREG:	
  3208                           ; 0 bytes @ 0x4
  3209                           
  3210  0074                     ??_DlyOff_Initialization:	
  3211                           ; 0 bytes @ 0x4
  3212                           
  3213  0074                     ??_getDimmerLights_Status:	
  3214                           ; 0 bytes @ 0x4
  3215                           
  3216  0074                     ??_setDimmerLights_SwOff:	
  3217                           ; 0 bytes @ 0x4
  3218                           
  3219  0074                     ?_setLED:	
  3220                           ; 0 bytes @ 0x4
  3221                           
  3222  0074                     ??_setLED_Main:	
  3223                           ; 0 bytes @ 0x4
  3224                           
  3225  0074                     ??_getBuz_GO:	
  3226                           ; 0 bytes @ 0x4
  3227                           
  3228  0074                     ??_getDelayOff_GO:	
  3229                           ; 0 bytes @ 0x4
  3230                           
  3231  0074                     ??_setDimmerLights_DimmingOn:	
  3232                           ; 0 bytes @ 0x4
  3233                           
  3234  0074                     ?_setDimmerLights_DimmingRun:	
  3235                           ; 0 bytes @ 0x4
  3236                           
  3237  0074                     CC2500_WriteREG@value:	
  3238                           ; 0 bytes @ 0x4
  3239                           
  3240  0074                     DlyOff_Initialization@sw:	
  3241                           ; 1 bytes @ 0x4
  3242                           
  3243  0074                     getDelayOff_GO@sw:	
  3244                           ; 1 bytes @ 0x4
  3245                           
  3246  0074                     setDimmerIntr_ControlStatus@lights:	
  3247                           ; 1 bytes @ 0x4
  3248                           
  3249  0074                     getDimmerIntr_DimmingValue@value:	
  3250                           ; 1 bytes @ 0x4
  3251                           
  3252  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3253                           ; 1 bytes @ 0x4
  3254                           
  3255  0074                     setDimmerIntr_Dimming_RF@lights:	
  3256                           ; 1 bytes @ 0x4
  3257                           
  3258  0074                     setDimmerLights_SwOff@sw:	
  3259                           ; 1 bytes @ 0x4
  3260                           
  3261  0074                     setDimmerLights_DimmingOn@sw:	
  3262                           ; 1 bytes @ 0x4
  3263                           
  3264  0074                     getDimmerLights_Status@lights:	
  3265                           ; 1 bytes @ 0x4
  3266                           
  3267  0074                     setDimmerLights_DimmingRun@command:	
  3268                           ; 1 bytes @ 0x4
  3269                           
  3270  0074                     setLED@command:	
  3271                           ; 1 bytes @ 0x4
  3272                           
  3273  0074                     Flash_Memory_Read@address:	
  3274                           ; 1 bytes @ 0x4
  3275                           
  3276  0074                     setMemory_Data@address:	
  3277                           ; 1 bytes @ 0x4
  3278                           
  3279  0074                     setCmd_Status@number:	
  3280                           ; 1 bytes @ 0x4
  3281                           
  3282  0074                     _getRF_KeyStatus$5377:	
  3283                           ; 1 bytes @ 0x4
  3284                           
  3285  0074                     _getSw_KeyStatus$6445:	
  3286                           ; 1 bytes @ 0x4
  3287                           
  3288  0074                     _getAll_Sw_KeyStatus$6448:	
  3289                           ; 1 bytes @ 0x4
  3290                           
  3291  0074                     ___bmul@product:	
  3292                           ; 1 bytes @ 0x4
  3293                           
  3294  0074                     ___lbdiv@dividend:	
  3295                           ; 1 bytes @ 0x4
  3296                           
  3297  0074                     DelayTime_1us@i:	
  3298                           ; 1 bytes @ 0x4
  3299                           
  3300  0074                     ___awdiv@dividend:	
  3301                           ; 2 bytes @ 0x4
  3302                           
  3303  0074                     ___lwdiv@dividend:	
  3304                           ; 2 bytes @ 0x4
  3305                           
  3306                           
  3307                           ; 2 bytes @ 0x4
  3308  0074                     	ds	1
  3309  0075                     ??_CC2500_WriteREG:	
  3310  0075                     ??_setLED:	
  3311                           ; 0 bytes @ 0x5
  3312                           
  3313  0075                     ??_setDimmerLights_DimmingClose:	
  3314                           ; 0 bytes @ 0x5
  3315                           
  3316  0075                     ??_DelayOff_Initialization:	
  3317                           ; 0 bytes @ 0x5
  3318                           
  3319  0075                     ??_setDimmerLights_DimmingRun:	
  3320                           ; 0 bytes @ 0x5
  3321                           
  3322  0075                     CC2500_WriteCommand@command:	
  3323                           ; 0 bytes @ 0x5
  3324                           
  3325  0075                     CC2500_ReadStatus@status_addr:	
  3326                           ; 1 bytes @ 0x5
  3327                           
  3328  0075                     getDelayOff_GO@go:	
  3329                           ; 1 bytes @ 0x5
  3330                           
  3331  0075                     getDimmerLights_Status@status:	
  3332                           ; 1 bytes @ 0x5
  3333                           
  3334  0075                     setLED@led:	
  3335                           ; 1 bytes @ 0x5
  3336                           
  3337  0075                     Flash_Memory_Read@ret:	
  3338                           ; 1 bytes @ 0x5
  3339                           
  3340  0075                     ___bmul@multiplier:	
  3341                           ; 1 bytes @ 0x5
  3342                           
  3343  0075                     ___ftpack@exp:	
  3344                           ; 1 bytes @ 0x5
  3345                           
  3346  0075                     ___lbdiv@counter:	
  3347                           ; 1 bytes @ 0x5
  3348                           
  3349                           
  3350                           ; 1 bytes @ 0x5
  3351  0075                     	ds	1
  3352  0076                     ??_CC2500_ClearTXFIFO:	
  3353  0076                     ??_CC2500_ClearRXFIFO:	
  3354                           ; 0 bytes @ 0x6
  3355                           
  3356  0076                     ??_CC2500_SIDLEMode:	
  3357                           ; 0 bytes @ 0x6
  3358                           
  3359  0076                     ??_setLED_Initialization:	
  3360                           ; 0 bytes @ 0x6
  3361                           
  3362  0076                     ??_Flash_Memory_Modify:	
  3363                           ; 0 bytes @ 0x6
  3364                           
  3365  0076                     ??_Exception_Main:	
  3366                           ; 0 bytes @ 0x6
  3367                           
  3368  0076                     ??_setRF_AdjControl:	
  3369                           ; 0 bytes @ 0x6
  3370                           
  3371  0076                     ??_setSw_Initialization:	
  3372                           ; 0 bytes @ 0x6
  3373                           
  3374  0076                     ??_CC2500_TxData:	
  3375                           ; 0 bytes @ 0x6
  3376                           
  3377  0076                     ??_CC2500_RxData:	
  3378                           ; 0 bytes @ 0x6
  3379                           
  3380  0076                     ??_Flash_Memory_Initialization:	
  3381                           ; 0 bytes @ 0x6
  3382                           
  3383  0076                     ??___awdiv:	
  3384                           ; 0 bytes @ 0x6
  3385                           
  3386  0076                     ??___lwdiv:	
  3387                           ; 0 bytes @ 0x6
  3388                           
  3389  0076                     CC2500_WriteREG@w_addr:	
  3390                           ; 0 bytes @ 0x6
  3391                           
  3392  0076                     setDimmerLights_DimmingRun@lights:	
  3393                           ; 1 bytes @ 0x6
  3394                           
  3395  0076                     setLED_Initialization@led:	
  3396                           ; 1 bytes @ 0x6
  3397                           
  3398  0076                     setLED_Main@led:	
  3399                           ; 1 bytes @ 0x6
  3400                           
  3401  0076                     setSw_Initialization@sw:	
  3402                           ; 1 bytes @ 0x6
  3403                           
  3404  0076                     ___ftpack@sign:	
  3405                           ; 1 bytes @ 0x6
  3406                           
  3407  0076                     ___lbdiv@quotient:	
  3408                           ; 1 bytes @ 0x6
  3409                           
  3410  0076                     getBuz_GO@i:	
  3411                           ; 1 bytes @ 0x6
  3412                           
  3413  0076                     DelayTime_1us@j:	
  3414                           ; 2 bytes @ 0x6
  3415                           
  3416                           
  3417                           ; 2 bytes @ 0x6
  3418  0076                     	ds	1
  3419  0077                     ??_CC2500_InitSetREG:	
  3420  0077                     ??_CC2500_InitPATable:	
  3421                           ; 0 bytes @ 0x7
  3422                           
  3423  0077                     ??_Switch_Initialization:	
  3424                           ; 0 bytes @ 0x7
  3425                           
  3426  0077                     ??___ftpack:	
  3427                           ; 0 bytes @ 0x7
  3428                           
  3429  0077                     ??_setBuz:	
  3430                           ; 0 bytes @ 0x7
  3431                           
  3432  0077                     ??_LED_Initialization:	
  3433                           ; 0 bytes @ 0x7
  3434                           
  3435  0077                     ??_LED_Main:	
  3436                           ; 0 bytes @ 0x7
  3437                           
  3438  0077                     ?_Division:	
  3439                           ; 0 bytes @ 0x7
  3440                           
  3441  0077                     CC2500_TxData@loop_e:	
  3442                           ; 1 bytes @ 0x7
  3443                           
  3444  0077                     CC2500_RxData@loop_f:	
  3445                           ; 1 bytes @ 0x7
  3446                           
  3447  0077                     Division@num:	
  3448                           ; 1 bytes @ 0x7
  3449                           
  3450  0077                     Flash_Memory_Initialization@value:	
  3451                           ; 1 bytes @ 0x7
  3452                           
  3453  0077                     Flash_Memory_Modify@i:	
  3454                           ; 1 bytes @ 0x7
  3455                           
  3456  0077                     setRF_AdjControl@status:	
  3457                           ; 1 bytes @ 0x7
  3458                           
  3459  0077                     ___lwdiv@counter:	
  3460                           ; 1 bytes @ 0x7
  3461                           
  3462                           
  3463                           ; 1 bytes @ 0x7
  3464  0077                     	ds	1
  3465  0078                     ??_CC2500_PowerRST:	
  3466  0078                     ??_CC2500_FrequencyCabr:	
  3467                           ; 0 bytes @ 0x8
  3468                           
  3469  0078                     ??_Division:	
  3470                           ; 0 bytes @ 0x8
  3471                           
  3472  0078                     ??_Flash_Memory_Main:	
  3473                           ; 0 bytes @ 0x8
  3474                           
  3475  0078                     ?_RF_getCommand:	
  3476                           ; 0 bytes @ 0x8
  3477                           
  3478  0078                     setBuz@count:	
  3479                           ; 2 bytes @ 0x8
  3480                           
  3481  0078                     CC2500_InitPATable@temp:	
  3482                           ; 1 bytes @ 0x8
  3483                           
  3484  0078                     setRF_AdjControl@dimmingStatus:	
  3485                           ; 1 bytes @ 0x8
  3486                           
  3487  0078                     ___lwdiv@quotient:	
  3488                           ; 1 bytes @ 0x8
  3489                           
  3490                           
  3491                           ; 2 bytes @ 0x8
  3492  0078                     	ds	1
  3493  0079                     ??_setDimmerLights_SwOn:	
  3494  0079                     ??_my_MainTimer:	
  3495                           ; 0 bytes @ 0x9
  3496                           
  3497  0079                     CC2500_InitPATable@loop_d:	
  3498                           ; 0 bytes @ 0x9
  3499                           
  3500  0079                     setRF_AdjControl@sw:	
  3501                           ; 1 bytes @ 0x9
  3502                           
  3503                           
  3504                           ; 1 bytes @ 0x9
  3505  0079                     	ds	1
  3506  007A                     ??_setDimmerLights_Main:	
  3507  007A                     ??_Switch_Main:	
  3508                           ; 0 bytes @ 0xA
  3509                           
  3510  007A                     ??_RF_Main:	
  3511                           ; 0 bytes @ 0xA
  3512                           
  3513  007A                     ??_setRF_Main:	
  3514                           ; 0 bytes @ 0xA
  3515                           
  3516  007A                     ??_setControl_Lights_Table:	
  3517                           ; 0 bytes @ 0xA
  3518                           
  3519  007A                     ??_CC2500_PowerOnInitial:	
  3520                           ; 0 bytes @ 0xA
  3521                           
  3522  007A                     ??_DelayOff_Main:	
  3523                           ; 0 bytes @ 0xA
  3524                           
  3525  007A                     ??_DimmerLights_Initialization:	
  3526                           ; 0 bytes @ 0xA
  3527                           
  3528  007A                     ??_DimmerLights_Main:	
  3529                           ; 0 bytes @ 0xA
  3530                           
  3531  007A                     ??_main:	
  3532                           ; 0 bytes @ 0xA
  3533                           
  3534  007A                     ??_RF_getCommand:	
  3535                           ; 0 bytes @ 0xA
  3536                           
  3537  007A                     ??___ftneg:	
  3538                           ; 0 bytes @ 0xA
  3539                           
  3540                           
  3541                           	psect	cstackBANK0
  3542  0020                     __pcstackBANK0:	
  3543                           ; 0 bytes @ 0xA
  3544                           
  3545  0020                     ?___awtoft:	
  3546  0020                     CC2500_InitSetREG@temp1:	
  3547                           ; 3 bytes @ 0x0
  3548                           
  3549  0020                     Division@value:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552  0020                     Flash_Memory_Main@key_Status:	
  3553                           ; 1 bytes @ 0x0
  3554                           
  3555  0020                     Exception_Main@lights:	
  3556                           ; 1 bytes @ 0x0
  3557                           
  3558  0020                     ___awdiv@counter:	
  3559                           ; 1 bytes @ 0x0
  3560                           
  3561  0020                     RF_getCommand@command:	
  3562                           ; 1 bytes @ 0x0
  3563                           
  3564  0020                     ___awtoft@c:	
  3565                           ; 2 bytes @ 0x0
  3566                           
  3567                           
  3568                           ; 2 bytes @ 0x0
  3569  0020                     	ds	1
  3570  0021                     CC2500_InitSetREG@temp2:	
  3571  0021                     Division@result:	
  3572                           ; 1 bytes @ 0x1
  3573                           
  3574  0021                     _Flash_Memory_Main$3208:	
  3575                           ; 1 bytes @ 0x1
  3576                           
  3577  0021                     Exception_Main@count:	
  3578                           ; 1 bytes @ 0x1
  3579                           
  3580  0021                     ___awdiv@sign:	
  3581                           ; 1 bytes @ 0x1
  3582                           
  3583                           
  3584                           ; 1 bytes @ 0x1
  3585  0021                     	ds	1
  3586  0022                     ??_DimmerIntr_ValueCalculate:	
  3587  0022                     CC2500_InitSetREG@loop_c:	
  3588                           ; 0 bytes @ 0x2
  3589                           
  3590  0022                     Exception_Main@status:	
  3591                           ; 1 bytes @ 0x2
  3592                           
  3593  0022                     ___awdiv@quotient:	
  3594                           ; 1 bytes @ 0x2
  3595                           
  3596                           
  3597                           ; 2 bytes @ 0x2
  3598  0022                     	ds	1
  3599  0023                     ??___awtoft:	
  3600  0023                     Exception_Main@error:	
  3601                           ; 0 bytes @ 0x3
  3602                           
  3603                           
  3604                           ; 1 bytes @ 0x3
  3605  0023                     	ds	1
  3606  0024                     ?_setBuz:	
  3607  0024                     DimmerIntr_ValueCalculate@lights:	
  3608                           ; 0 bytes @ 0x4
  3609                           
  3610  0024                     setBuz@time:	
  3611                           ; 1 bytes @ 0x4
  3612                           
  3613                           
  3614                           ; 2 bytes @ 0x4
  3615  0024                     	ds	1
  3616  0025                     ??_DimmerLights_DimmingFunction:	
  3617  0025                     ___awtoft@sign:	
  3618                           ; 0 bytes @ 0x5
  3619                           
  3620                           
  3621                           ; 1 bytes @ 0x5
  3622  0025                     	ds	1
  3623  0026                     ?___ftdiv:	
  3624  0026                     ?___ftmul:	
  3625                           ; 3 bytes @ 0x6
  3626                           
  3627  0026                     setDimmerLights_SwOn@idle:	
  3628                           ; 3 bytes @ 0x6
  3629                           
  3630  0026                     DimmerLights_DimmingFunction@lights:	
  3631                           ; 1 bytes @ 0x6
  3632                           
  3633  0026                     ___ftdiv@f2:	
  3634                           ; 1 bytes @ 0x6
  3635                           
  3636  0026                     ___ftmul@f1:	
  3637                           ; 3 bytes @ 0x6
  3638                           
  3639                           
  3640                           ; 3 bytes @ 0x6
  3641  0026                     	ds	1
  3642  0027                     setDimmerLights_SwOn@dimmingStatus:	
  3643                           
  3644                           ; 1 bytes @ 0x7
  3645  0027                     	ds	1
  3646  0028                     setDimmerLights_SwOn@sw:	
  3647                           
  3648                           ; 1 bytes @ 0x8
  3649  0028                     	ds	1
  3650  0029                     ??_setSw_Main:	
  3651  0029                     ___ftdiv@f1:	
  3652                           ; 0 bytes @ 0x9
  3653                           
  3654  0029                     ___ftmul@f2:	
  3655                           ; 3 bytes @ 0x9
  3656                           
  3657                           
  3658                           ; 3 bytes @ 0x9
  3659  0029                     	ds	2
  3660  002B                     setSw_Main@sw:	
  3661                           
  3662                           ; 1 bytes @ 0xB
  3663  002B                     	ds	1
  3664  002C                     ??___ftdiv:	
  3665  002C                     ??___ftmul:	
  3666                           ; 0 bytes @ 0xC
  3667                           
  3668                           
  3669                           ; 0 bytes @ 0xC
  3670  002C                     	ds	4
  3671  0030                     ___ftdiv@cntr:	
  3672  0030                     ___ftmul@exp:	
  3673                           ; 1 bytes @ 0x10
  3674                           
  3675                           
  3676                           ; 1 bytes @ 0x10
  3677  0030                     	ds	1
  3678  0031                     ___ftdiv@f3:	
  3679  0031                     ___ftmul@f3_as_product:	
  3680                           ; 3 bytes @ 0x11
  3681                           
  3682                           
  3683                           ; 3 bytes @ 0x11
  3684  0031                     	ds	3
  3685  0034                     ___ftdiv@exp:	
  3686  0034                     ___ftmul@cntr:	
  3687                           ; 1 bytes @ 0x14
  3688                           
  3689                           
  3690                           ; 1 bytes @ 0x14
  3691  0034                     	ds	1
  3692  0035                     ___ftdiv@sign:	
  3693  0035                     ___ftmul@sign:	
  3694                           ; 1 bytes @ 0x15
  3695                           
  3696                           
  3697                           ; 1 bytes @ 0x15
  3698  0035                     	ds	1
  3699  0036                     ?___ftneg:	
  3700  0036                     ___ftneg@f1:	
  3701                           ; 3 bytes @ 0x16
  3702                           
  3703                           
  3704                           ; 3 bytes @ 0x16
  3705  0036                     	ds	3
  3706  0039                     ?___ftadd:	
  3707  0039                     ___ftadd@f1:	
  3708                           ; 3 bytes @ 0x19
  3709                           
  3710                           
  3711                           ; 3 bytes @ 0x19
  3712  0039                     	ds	3
  3713  003C                     ___ftadd@f2:	
  3714                           
  3715                           ; 3 bytes @ 0x1C
  3716  003C                     	ds	3
  3717  003F                     ??___ftadd:	
  3718                           
  3719                           ; 0 bytes @ 0x1F
  3720  003F                     	ds	4
  3721  0043                     ___ftadd@sign:	
  3722                           
  3723                           ; 1 bytes @ 0x23
  3724  0043                     	ds	1
  3725  0044                     ___ftadd@exp2:	
  3726                           
  3727                           ; 1 bytes @ 0x24
  3728  0044                     	ds	1
  3729  0045                     ___ftadd@exp1:	
  3730                           
  3731                           ; 1 bytes @ 0x25
  3732  0045                     	ds	1
  3733  0046                     ?___fttol:	
  3734  0046                     ___fttol@f1:	
  3735                           ; 4 bytes @ 0x26
  3736                           
  3737                           
  3738                           ; 3 bytes @ 0x26
  3739  0046                     	ds	4
  3740  004A                     ??___fttol:	
  3741                           
  3742                           ; 0 bytes @ 0x2A
  3743  004A                     	ds	4
  3744  004E                     ___fttol@sign1:	
  3745                           
  3746                           ; 1 bytes @ 0x2E
  3747  004E                     	ds	1
  3748  004F                     ___fttol@lval:	
  3749                           
  3750                           ; 4 bytes @ 0x2F
  3751  004F                     	ds	4
  3752  0053                     ___fttol@exp1:	
  3753                           
  3754                           ; 1 bytes @ 0x33
  3755  0053                     	ds	1
  3756  0054                     ??_getDimmerLights_ValueToPercent:	
  3757  0054                     ??_getDimmerLights_PercentToValue:	
  3758                           ; 0 bytes @ 0x34
  3759                           
  3760                           
  3761                           ; 0 bytes @ 0x34
  3762  0054                     	ds	2
  3763  0056                     getDimmerLights_PercentToValue@value:	
  3764  0056                     getDimmerLights_ValueToPercent@value:	
  3765                           ; 1 bytes @ 0x36
  3766                           
  3767                           
  3768                           ; 1 bytes @ 0x36
  3769  0056                     	ds	1
  3770  0057                     getDimmerLights_PercentToValue@i:	
  3771  0057                     getDimmerLights_ValueToPercent@i:	
  3772                           ; 3 bytes @ 0x37
  3773                           
  3774                           
  3775                           ; 3 bytes @ 0x37
  3776  0057                     	ds	3
  3777  005A                     ?_setProductData:	
  3778  005A                     ??_DimmerIntr_Initialization:	
  3779                           ; 0 bytes @ 0x3A
  3780                           
  3781  005A                     ?_setDimmerIntr_DimmingValue:	
  3782                           ; 0 bytes @ 0x3A
  3783                           
  3784  005A                     ?_setDimmerIntr_MaxmumValue:	
  3785                           ; 0 bytes @ 0x3A
  3786                           
  3787  005A                     setDimmerIntr_DimmingValue@value:	
  3788                           ; 0 bytes @ 0x3A
  3789                           
  3790  005A                     setDimmerIntr_MaxmumValue@value:	
  3791                           ; 1 bytes @ 0x3A
  3792                           
  3793  005A                     setProductData@value:	
  3794                           ; 1 bytes @ 0x3A
  3795                           
  3796                           
  3797                           ; 1 bytes @ 0x3A
  3798  005A                     	ds	1
  3799  005B                     ??_setProductData:	
  3800  005B                     ??_setDimmerIntr_DimmingValue:	
  3801                           ; 0 bytes @ 0x3B
  3802                           
  3803  005B                     ??_setDimmerIntr_MaxmumValue:	
  3804                           ; 0 bytes @ 0x3B
  3805                           
  3806                           
  3807                           ; 0 bytes @ 0x3B
  3808  005B                     	ds	1
  3809  005C                     setDimmerIntr_DimmingValue@lights:	
  3810  005C                     setDimmerIntr_MaxmumValue@lights:	
  3811                           ; 1 bytes @ 0x3C
  3812                           
  3813  005C                     setProductData@address:	
  3814                           ; 1 bytes @ 0x3C
  3815                           
  3816                           
  3817                           ; 1 bytes @ 0x3C
  3818  005C                     	ds	1
  3819  005D                     ??_DlyOff_Main:	
  3820  005D                     ?_setRF_DimmerLights:	
  3821                           ; 0 bytes @ 0x3D
  3822                           
  3823  005D                     ??_setLog_Code:	
  3824                           ; 0 bytes @ 0x3D
  3825                           
  3826  005D                     ??_setRFSW_AdjControl:	
  3827                           ; 0 bytes @ 0x3D
  3828                           
  3829  005D                     ?_setDelayOff_GO:	
  3830                           ; 0 bytes @ 0x3D
  3831                           
  3832  005D                     setDelayOff_GO@command:	
  3833                           ; 0 bytes @ 0x3D
  3834                           
  3835  005D                     setRF_DimmerLights@on:	
  3836                           ; 1 bytes @ 0x3D
  3837                           
  3838                           
  3839                           ; 1 bytes @ 0x3D
  3840  005D                     	ds	1
  3841  005E                     ??_setRF_DimmerLights:	
  3842  005E                     setDelayOff_GO@value:	
  3843                           ; 0 bytes @ 0x3E
  3844                           
  3845                           
  3846                           ; 1 bytes @ 0x3E
  3847  005E                     	ds	1
  3848  005F                     ??_setDelayOff_GO:	
  3849  005F                     DlyOff_Main@sw:	
  3850                           ; 0 bytes @ 0x3F
  3851                           
  3852  005F                     setRFSW_AdjControl@status:	
  3853                           ; 1 bytes @ 0x3F
  3854                           
  3855                           
  3856                           ; 1 bytes @ 0x3F
  3857  005F                     	ds	1
  3858  0060                     setRFSW_AdjControl@sw:	
  3859  0060                     setRF_DimmerLights@status:	
  3860                           ; 1 bytes @ 0x40
  3861                           
  3862                           
  3863                           ; 1 bytes @ 0x40
  3864  0060                     	ds	1
  3865  0061                     setDelayOff_GO@i:	
  3866  0061                     setRF_DimmerLights@lights:	
  3867                           ; 1 bytes @ 0x41
  3868                           
  3869                           
  3870                           ; 1 bytes @ 0x41
  3871  0061                     	ds	1
  3872  0062                     ?_setDimmerLights_Dimming:	
  3873  0062                     setDelayOff_GO@j:	
  3874                           ; 0 bytes @ 0x42
  3875                           
  3876  0062                     setDimmerLights_Dimming@status:	
  3877                           ; 1 bytes @ 0x42
  3878                           
  3879                           
  3880                           ; 1 bytes @ 0x42
  3881  0062                     	ds	1
  3882  0063                     ??_setDimmerLights_Dimming:	
  3883  0063                     setDelayOff_GO@k:	
  3884                           ; 0 bytes @ 0x43
  3885                           
  3886                           
  3887                           ; 1 bytes @ 0x43
  3888  0063                     	ds	1
  3889  0064                     setDelayOff_GO@sw:	
  3890  0064                     setDimmerLights_Dimming@value:	
  3891                           ; 1 bytes @ 0x44
  3892                           
  3893                           
  3894                           ; 1 bytes @ 0x44
  3895  0064                     	ds	1
  3896  0065                     ?_setDimmerLights_OnOff:	
  3897  0065                     ??_setRFSW_Control:	
  3898                           ; 0 bytes @ 0x45
  3899                           
  3900  0065                     setDimmerLights_OnOff@command:	
  3901                           ; 0 bytes @ 0x45
  3902                           
  3903  0065                     setDimmerLights_Dimming@lights:	
  3904                           ; 1 bytes @ 0x45
  3905                           
  3906                           
  3907                           ; 1 bytes @ 0x45
  3908  0065                     	ds	1
  3909  0066                     ??_setDimmerLights_OnOff:	
  3910  0066                     setRFSW_Control@status:	
  3911                           ; 0 bytes @ 0x46
  3912                           
  3913                           
  3914                           ; 1 bytes @ 0x46
  3915  0066                     	ds	1
  3916  0067                     setRFSW_Control@sw:	
  3917                           
  3918                           ; 1 bytes @ 0x47
  3919  0067                     	ds	1
  3920  0068                     ??_getRxData:	
  3921  0068                     setDimmerLights_OnOff@lights:	
  3922                           ; 0 bytes @ 0x48
  3923                           
  3924                           
  3925                           ; 1 bytes @ 0x48
  3926  0068                     	ds	1
  3927  0069                     setDimmerLights_Main@lights:	
  3928  0069                     getRxData@error:	
  3929                           ; 1 bytes @ 0x49
  3930                           
  3931                           
  3932                           ; 1 bytes @ 0x49
  3933  0069                     	ds	1
  3934                           
  3935                           	psect	maintext
  3936  0844                     __pmaintext:	
  3937 ;;
  3938 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3939 ;;
  3940 ;; *************** function _main *****************
  3941 ;; Defined at:
  3942 ;;		line 6 in file "../src/Main_B1.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  argc            2    0[BANK1 ] int 
  3945 ;;  argv            2    2[BANK1 ] PTR PTR unsigned char 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  2    0[BANK1 ] int 
  3950 ;; Registers used:
  3951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3952 ;; Tracked objects:
  3953 ;;		On entry : 17F/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3957 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3960 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3961 ;;Total ram usage:        4 bytes
  3962 ;; Hardware stack levels required when called:   11
  3963 ;; This function calls:
  3964 ;;		_Buzzer_Initialization
  3965 ;;		_Buzzer_Main
  3966 ;;		_DelayOff_Initialization
  3967 ;;		_DelayOff_Main
  3968 ;;		_DimmerLights_Initialization
  3969 ;;		_DimmerLights_Main
  3970 ;;		_Exception_Main
  3971 ;;		_Flash_Memory_Initialization
  3972 ;;		_Flash_Memory_Main
  3973 ;;		_LED_Initialization
  3974 ;;		_LED_Main
  3975 ;;		_Mcu_Initialization
  3976 ;;		_RF_Main
  3977 ;;		_Switch_Initialization
  3978 ;;		_Switch_Main
  3979 ;;		_WDT_Main
  3980 ;;		_myMain_Initialization
  3981 ;;		_my_MainTimer
  3982 ;; This function is called by:
  3983 ;;		Startup code after reset
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           
  3988                           ;psect for function _main
  3989  0844                     _main:	
  3990                           
  3991                           ;Main_B1.c: 7: myMain_Initialization();
  3992                           
  3993                           ;incstack = 0
  3994                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3995  0844  3192  222A  3188   	fcall	_myMain_Initialization
  3996                           
  3997                           ;Main_B1.c: 8: Mcu_Initialization();
  3998  0847  3192  22FE  3188   	fcall	_Mcu_Initialization
  3999                           
  4000                           ;Main_B1.c: 9: Flash_Memory_Initialization();
  4001  084A  3182  22B3  3188   	fcall	_Flash_Memory_Initialization
  4002                           
  4003                           ;Main_B1.c: 10: LED_Initialization();
  4004  084D  3190  20C5  3188   	fcall	_LED_Initialization
  4005                           
  4006                           ;Main_B1.c: 11: Buzzer_Initialization();
  4007  0850  3190  20AE  3188   	fcall	_Buzzer_Initialization
  4008                           
  4009                           ;Main_B1.c: 13: ;;
  4010                           ;Main_B1.c: 14: ;;
  4011                           ;Main_B1.c: 15: ;;
  4012                           ;Main_B1.c: 16: ;;
  4013                           ;Main_B1.c: 17: DelayOff_Initialization();
  4014  0853  3190  20BD  3188   	fcall	_DelayOff_Initialization
  4015                           
  4016                           ;Main_B1.c: 19: DimmerLights_Initialization();
  4017  0856  3191  2105  3188   	fcall	_DimmerLights_Initialization
  4018                           
  4019                           ;Main_B1.c: 20: ;;
  4020                           ;Main_B1.c: 21: ;;
  4021                           ;Main_B1.c: 22: ;;
  4022                           ;Main_B1.c: 23: Switch_Initialization();
  4023  0859  3190  20E1  3188   	fcall	_Switch_Initialization
  4024  085C                     l1418:	
  4025                           ;Main_B1.c: 25: ;;
  4026                           ;Main_B1.c: 26: ;;
  4027                           ;Main_B1.c: 28: while (1) {
  4028                           
  4029                           
  4030                           ;Main_B1.c: 55: }
  4031                           ;Main_B1.c: 91: if (Timer1.Timeout == 1) {
  4032  085C  0021               	movlb	1	; select bank1
  4033  085D  1C58               	btfss	_Timer1^(0+128),0
  4034  085E  285C               	goto	l1418
  4035                           
  4036                           ;Main_B1.c: 92: Timer1.Timeout = 0;
  4037  085F  1058               	bcf	_Timer1^(0+128),0
  4038                           
  4039                           ;Main_B1.c: 94: my_MainTimer();
  4040  0860  3197  27C8  3188   	fcall	_my_MainTimer
  4041                           
  4042                           ;Main_B1.c: 95: WDT_Main();
  4043  0863  3192  2299  3188   	fcall	_WDT_Main
  4044                           
  4045                           ;Main_B1.c: 96: ;;
  4046                           ;Main_B1.c: 97: ;;
  4047                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  4048  0866  0021               	movlb	1	; select bank1
  4049  0867  1C3F               	btfss	_myMain^(0+128),0
  4050  0868  285C               	goto	l1418
  4051                           
  4052                           ;Main_B1.c: 99: Flash_Memory_Main();
  4053  0869  3188  20C2  3188   	fcall	_Flash_Memory_Main
  4054                           
  4055                           ;Main_B1.c: 101: LED_Main();
  4056  086C  3190  20C9  3188   	fcall	_LED_Main
  4057                           
  4058                           ;Main_B1.c: 102: Buzzer_Main();
  4059  086F  3189  2147  3188   	fcall	_Buzzer_Main
  4060                           
  4061                           ;Main_B1.c: 104: ;;
  4062                           ;Main_B1.c: 105: ;;
  4063                           ;Main_B1.c: 106: ;;
  4064                           ;Main_B1.c: 107: ;;
  4065                           ;Main_B1.c: 109: ;;
  4066                           ;Main_B1.c: 110: DimmerLights_Main();
  4067  0872  3191  2122  3188   	fcall	_DimmerLights_Main
  4068                           
  4069                           ;Main_B1.c: 111: Switch_Main();
  4070  0875  3191  2113  3188   	fcall	_Switch_Main
  4071                           
  4072                           ;Main_B1.c: 112: ;;
  4073                           ;Main_B1.c: 113: ;;
  4074                           ;Main_B1.c: 115: RF_Main();
  4075  0878  3190  20BA  3188   	fcall	_RF_Main
  4076                           
  4077                           ;Main_B1.c: 116: DelayOff_Main();
  4078  087B  3190  20C1  3188   	fcall	_DelayOff_Main
  4079                           
  4080                           ;Main_B1.c: 117: ;;
  4081                           ;Main_B1.c: 118: ;;
  4082                           ;Main_B1.c: 119: Exception_Main();
  4083  087E  3196  26B6  3188   	fcall	_Exception_Main
  4084  0881  285C               	goto	l1418
  4085  0882                     __end_of_main:	
  4086                           ;Main_B1.c: 126: }
  4087                           ;Main_B1.c: 127: }
  4088                           ;Main_B1.c: 161: }
  4089                           ;Main_B1.c: 162: return (0);
  4090                           ;	Return value of _main is never used
  4091                           
  4092                           
  4093                           	psect	text1
  4094  17C8                     __ptext1:	
  4095 ;; *************** function _my_MainTimer *****************
  4096 ;; Defined at:
  4097 ;;		line 183 in file "../src/Main_B1.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;		None
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;		None
  4102 ;; Return value:  Size  Location     Type
  4103 ;;		None               void
  4104 ;; Registers used:
  4105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4114 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4115 ;;Total ram usage:        1 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; Hardware stack levels required when called:    5
  4118 ;; This function calls:
  4119 ;;		_setBuz
  4120 ;; This function is called by:
  4121 ;;		_main
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           
  4126                           ;psect for function _my_MainTimer
  4127  17C8                     _my_MainTimer:	
  4128                           
  4129                           ;Main_B1.c: 185: if (myMain.PowerON == 0) {
  4130                           
  4131                           ;incstack = 0
  4132                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4133  17C8  0021               	movlb	1	; select bank1
  4134  17C9  183F               	btfsc	_myMain^(0+128),0
  4135  17CA  2FE0               	goto	l9219
  4136                           
  4137                           ;Main_B1.c: 186: myMain.PowerCount++;
  4138  17CB  3001               	movlw	1
  4139  17CC  00F9               	movwf	??_my_MainTimer
  4140  17CD  0879               	movf	??_my_MainTimer,w
  4141  17CE  07C0               	addwf	(_myMain^(0+128)+1),f
  4142                           
  4143                           ;Main_B1.c: 187: if (myMain.PowerCount == (1500 / 20)) {
  4144  17CF  0840               	movf	(_myMain^(0+128)+1),w
  4145  17D0  3A4B               	xorlw	75
  4146  17D1  1D03               	skipz
  4147  17D2  0008               	return
  4148                           
  4149                           ;Main_B1.c: 188: myMain.PowerCount = 0;
  4150  17D3  01C0               	clrf	(_myMain^(0+128)+1)
  4151                           
  4152                           ;Main_B1.c: 189: myMain.PowerON = 1;
  4153  17D4  143F               	bsf	_myMain^(0+128),0
  4154                           
  4155                           ;Main_B1.c: 194: setBuz(3, 50);
  4156  17D5  3032               	movlw	50
  4157  17D6  0020               	movlb	0	; select bank0
  4158  17D7  00A4               	movwf	setBuz@time
  4159  17D8  3000               	movlw	0
  4160  17D9  00A5               	movwf	setBuz@time+1
  4161  17DA  3003               	movlw	3
  4162  17DB  318A  2227         	fcall	_setBuz
  4163                           
  4164                           ;Main_B1.c: 195: myMain.SelfTest = 1;
  4165  17DD  0021               	movlb	1	; select bank1
  4166  17DE  163F               	bsf	_myMain^(0+128),4
  4167                           
  4168                           ;Main_B1.c: 204: }
  4169                           ;Main_B1.c: 205: } else {
  4170  17DF  0008               	return
  4171  17E0                     l9219:	
  4172                           
  4173                           ;Main_B1.c: 206: myMain.PowerCount++;
  4174  17E0  3001               	movlw	1
  4175  17E1  00F9               	movwf	??_my_MainTimer
  4176  17E2  0879               	movf	??_my_MainTimer,w
  4177  17E3  07C0               	addwf	(_myMain^(0+128)+1),f
  4178                           
  4179                           ;Main_B1.c: 207: if (myMain.PowerCount == (1000 / 20)) {
  4180  17E4  0840               	movf	(_myMain^(0+128)+1),w
  4181  17E5  3A32               	xorlw	50
  4182  17E6  1903               	btfsc	3,2
  4183                           
  4184                           ;Main_B1.c: 208: myMain.PowerCount = 0;
  4185  17E7  01C0               	clrf	(_myMain^(0+128)+1)
  4186                           
  4187                           ;Main_B1.c: 230: }
  4188                           ;Main_B1.c: 232: myMain.Count1++;
  4189  17E8  3001               	movlw	1
  4190  17E9  07C3               	addwf	(_myMain^(0+128)+4),f
  4191  17EA  3000               	movlw	0
  4192  17EB  3DC4               	addwfc	((_myMain+1)^(0+128)+4),f
  4193                           
  4194                           ;Main_B1.c: 233: if (myMain.Count1 == (1000 / 20)) {
  4195  17EC  3004               	movlw	4
  4196  17ED  3EBF               	addlw	_myMain& (0+255)
  4197  17EE  0086               	movwf	6
  4198  17EF  0187               	clrf	7
  4199  17F0  3F40               	moviw [0]fsr1
  4200  17F1  3A32               	xorlw	50
  4201  17F2  1D03               	skipz
  4202  17F3  2FF6               	goto	u9765
  4203  17F4  3F41               	moviw [1]fsr1
  4204  17F5  3A00               	xorlw	0
  4205  17F6                     u9765:	
  4206  17F6  1D03               	skipz
  4207  17F7  0008               	return
  4208                           
  4209                           ;Main_B1.c: 234: myMain.Count1 = 0;
  4210  17F8  01C3               	clrf	(_myMain^(0+128)+4)
  4211  17F9  01C4               	clrf	((_myMain+1)^(0+128)+4)
  4212                           
  4213                           ;Main_B1.c: 246: if (myMain.Flag) {
  4214  17FA  1CBF               	btfss	_myMain^(0+128),1
  4215  17FB  2FFE               	goto	l1434
  4216                           
  4217                           ;Main_B1.c: 247: myMain.Flag = 0;
  4218  17FC  10BF               	bcf	_myMain^(0+128),1
  4219                           
  4220                           ;Main_B1.c: 256: } else {
  4221  17FD  0008               	return
  4222  17FE                     l1434:	
  4223                           
  4224                           ;Main_B1.c: 257: myMain.Flag = 1;
  4225  17FE  14BF               	bsf	_myMain^(0+128),1
  4226  17FF  0008               	return
  4227  1800                     __end_of_my_MainTimer:	
  4228                           
  4229                           	psect	text2
  4230  122A                     __ptext2:	
  4231 ;; *************** function _myMain_Initialization *****************
  4232 ;; Defined at:
  4233 ;;		line 168 in file "../src/Main_B1.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;		None               void
  4240 ;; Registers used:
  4241 ;;		wreg, fsr1l, fsr1h
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;Total ram usage:        1 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    3
  4254 ;; This function calls:
  4255 ;;		Nothing
  4256 ;; This function is called by:
  4257 ;;		_main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _myMain_Initialization
  4263  122A                     _myMain_Initialization:	
  4264                           
  4265                           ;Main_B1.c: 171: product = &_product;
  4266                           
  4267                           ;incstack = 0
  4268                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4269  122A  30C5               	movlw	__product& (0+255)
  4270  122B  00F2               	movwf	??_myMain_Initialization
  4271  122C  0872               	movf	??_myMain_Initialization,w
  4272  122D  0020               	movlb	0	; select bank0
  4273  122E  00EC               	movwf	_product
  4274                           
  4275                           ;Main_B1.c: 172: product->Data[20] = 209;
  4276  122F  30D1               	movlw	209
  4277  1230  00F2               	movwf	??_myMain_Initialization
  4278  1231  086C               	movf	_product,w
  4279  1232  3E14               	addlw	20
  4280  1233  0086               	movwf	6
  4281  1234  3001               	movlw	1	; select bank2/3
  4282  1235  0087               	movwf	7
  4283  1236  0872               	movf	??_myMain_Initialization,w
  4284  1237  0081               	movwf	1
  4285  1238  0008               	return
  4286  1239                     __end_of_myMain_Initialization:	
  4287                           
  4288                           	psect	text3
  4289  1299                     __ptext3:	
  4290 ;; *************** function _WDT_Main *****************
  4291 ;; Defined at:
  4292 ;;		line 1121 in file "../src/MCU_B1.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;		None
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;		None
  4297 ;; Return value:  Size  Location     Type
  4298 ;;		None               void
  4299 ;; Registers used:
  4300 ;;		wreg, status,2, status,0, pclath, cstack
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;Total ram usage:        1 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    4
  4313 ;; This function calls:
  4314 ;;		_WDT_Clearing
  4315 ;; This function is called by:
  4316 ;;		_main
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           
  4321                           ;psect for function _WDT_Main
  4322  1299                     _WDT_Main:	
  4323                           
  4324                           ;MCU_B1.c: 1122: if (WDT.Enable == 1) {
  4325                           
  4326                           ;incstack = 0
  4327                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4328  1299  0021               	movlb	1	; select bank1
  4329  129A  1C5D               	btfss	_WDT^(0+128),0
  4330  129B  0008               	return
  4331                           
  4332                           ;MCU_B1.c: 1123: if (WDT.Timer-- > 0) {
  4333  129C  3001               	movlw	1
  4334  129D  02DE               	subwf	(_WDT^(0+128)+1),f
  4335  129E  085E               	movf	(_WDT^(0+128)+1),w
  4336  129F  3AFF               	xorlw	255
  4337  12A0  1903               	skipnz
  4338  12A1  0008               	return
  4339                           
  4340                           ;MCU_B1.c: 1124: WDT.Timer = 100;
  4341  12A2  3064               	movlw	100
  4342  12A3  00F2               	movwf	??_WDT_Main
  4343  12A4  0872               	movf	??_WDT_Main,w
  4344  12A5  00DE               	movwf	(_WDT^(0+128)+1)
  4345                           
  4346                           ;MCU_B1.c: 1125: WDT_Clearing();
  4347  12A6  3187  27FE         	fcall	_WDT_Clearing
  4348  12A8  0008               	return
  4349  12A9                     __end_of_WDT_Main:	
  4350                           
  4351                           	psect	text4
  4352  07FE                     __ptext4:	
  4353 ;; *************** function _WDT_Clearing *****************
  4354 ;; Defined at:
  4355 ;;		line 1131 in file "../src/MCU_B1.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;		None               void
  4362 ;; Registers used:
  4363 ;;		None
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:        0 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    3
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_WDT_Main
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _WDT_Clearing
  4385  07FE                     _WDT_Clearing:	
  4386                           
  4387                           ;incstack = 0
  4388                           ; Regs used in _WDT_Clearing: []
  4389  07FE  0064               	clrwdt	;# 
  4390  07FF  0008               	return
  4391  0800                     __end_of_WDT_Clearing:	
  4392                           
  4393                           	psect	text5
  4394  1113                     __ptext5:	
  4395 ;; *************** function _Switch_Main *****************
  4396 ;; Defined at:
  4397 ;;		line 76 in file "../src/Switch_B1.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;		None
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;		None
  4402 ;; Return value:  Size  Location     Type
  4403 ;;		None               void
  4404 ;; Registers used:
  4405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;Total ram usage:        0 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    7
  4418 ;; This function calls:
  4419 ;;		_TouchPower
  4420 ;;		_setSw_Main
  4421 ;; This function is called by:
  4422 ;;		_main
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _Switch_Main
  4428  1113                     _Switch_Main:	
  4429                           
  4430                           ;Switch_B1.c: 79: setSw_Main(1);
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4434  1113  3001               	movlw	1
  4435  1114  3180  204C  3191   	fcall	_setSw_Main
  4436                           
  4437                           ;Switch_B1.c: 91: TouchPower();
  4438  1117  3193  23B5         	fcall	_TouchPower
  4439  1119  0008               	return
  4440  111A                     __end_of_Switch_Main:	
  4441                           
  4442                           	psect	text6
  4443  004C                     __ptext6:	
  4444 ;; *************** function _setSw_Main *****************
  4445 ;; Defined at:
  4446 ;;		line 117 in file "../src/Switch_B1.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;  sw              1    wreg     unsigned char 
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;  sw              1   11[BANK0 ] unsigned char 
  4451 ;; Return value:  Size  Location     Type
  4452 ;;		None               void
  4453 ;; Registers used:
  4454 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4462 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;Total ram usage:        3 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; Hardware stack levels required when called:    6
  4467 ;; This function calls:
  4468 ;;		_SwPointSelect
  4469 ;;		_getMain_All_Error_Status
  4470 ;;		_getSw_KeyStatus
  4471 ;;		_setBuz
  4472 ;;		_setDimmerLights_DimmingOn
  4473 ;;		_setDimmerLights_SwOff
  4474 ;;		_setDimmerLights_SwOn
  4475 ;;		_setRF_Learn
  4476 ;; This function is called by:
  4477 ;;		_Switch_Main
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           
  4482                           ;psect for function _setSw_Main
  4483  004C                     _setSw_Main:	
  4484                           
  4485                           ;incstack = 0
  4486                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4487                           ;setSw_Main@sw stored from wreg
  4488  004C  0020               	movlb	0	; select bank0
  4489  004D  00AB               	movwf	setSw_Main@sw
  4490                           
  4491                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4492  004E  082B               	movf	setSw_Main@sw,w
  4493  004F  3191  218F  3180   	fcall	_SwPointSelect
  4494                           
  4495                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4496  0052  0020               	movlb	0	; select bank0
  4497  0053  086B               	movf	_Sw,w
  4498  0054  0086               	movwf	6
  4499  0055  3001               	movlw	1	; select bank2/3
  4500  0056  0087               	movwf	7
  4501  0057  1C01               	btfss	1,0
  4502  0058  29B3               	goto	l2332
  4503                           
  4504                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  4505  0059  3000               	movlw	0
  4506  005A  3190  20B4  3180   	fcall	_getMain_All_Error_Status
  4507  005D  3800               	iorlw	0
  4508  005E  1D03               	skipz
  4509  005F  287B               	goto	l9047
  4510                           
  4511                           ;Switch_B1.c: 122: Sw->Detect = 0;
  4512  0060  0020               	movlb	0	; select bank0
  4513  0061  0A6B               	incf	_Sw,w
  4514  0062  0086               	movwf	6
  4515  0063  3001               	movlw	1	; select bank2/3
  4516  0064  0087               	movwf	7
  4517  0065  1081               	bcf	1,1
  4518                           
  4519                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4520  0066  082B               	movf	setSw_Main@sw,w
  4521  0067  3192  22DC  3180   	fcall	_getSw_KeyStatus
  4522  006A  3A01               	xorlw	1
  4523  006B  3000               	movlw	0
  4524  006C  1903               	skipnz
  4525  006D  3001               	movlw	1
  4526  006E  0020               	movlb	0	; select bank0
  4527  006F  00A9               	movwf	??_setSw_Main
  4528  0070  086B               	movf	_Sw,w
  4529  0071  0086               	movwf	6
  4530  0072  3001               	movlw	1	; select bank2/3
  4531  0073  0087               	movwf	7
  4532  0074  0DA9               	rlf	??_setSw_Main,f
  4533  0075  0801               	movf	1,w
  4534  0076  0629               	xorwf	??_setSw_Main,w
  4535  0077  39FD               	andlw	-3
  4536  0078  0629               	xorwf	??_setSw_Main,w
  4537  0079  0081               	movwf	1
  4538                           
  4539                           ;Switch_B1.c: 124: } else {
  4540  007A  2891               	goto	l2334
  4541  007B                     l9047:	
  4542                           
  4543                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  4544  007B  0020               	movlb	0	; select bank0
  4545  007C  0A6B               	incf	_Sw,w
  4546  007D  0086               	movwf	6
  4547  007E  3001               	movlw	1	; select bank2/3
  4548  007F  0087               	movwf	7
  4549  0080  1881               	btfsc	1,1
  4550  0081  2891               	goto	l2334
  4551                           
  4552                           ;Switch_B1.c: 126: Sw->Detect = 1;
  4553  0082  0A6B               	incf	_Sw,w
  4554  0083  0086               	movwf	6
  4555  0084  3001               	movlw	1	; select bank2/3
  4556  0085  0087               	movwf	7
  4557  0086  1481               	bsf	1,1
  4558                           
  4559                           ;Switch_B1.c: 128: Sw->Touch = 0;
  4560  0087  086B               	movf	_Sw,w
  4561  0088  0086               	movwf	6
  4562  0089  3001               	movlw	1	; select bank2/3
  4563  008A  0087               	movwf	7
  4564  008B  1081               	bcf	1,1
  4565                           
  4566                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  4567  008C  086B               	movf	_Sw,w
  4568  008D  0086               	movwf	6
  4569  008E  3001               	movlw	1	; select bank2/3
  4570  008F  0087               	movwf	7
  4571  0090  1501               	bsf	1,2
  4572  0091                     l2334:	
  4573                           
  4574                           ;Switch_B1.c: 130: }
  4575                           ;Switch_B1.c: 131: }
  4576                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  4577  0091  086B               	movf	_Sw,w
  4578  0092  0086               	movwf	6
  4579  0093  3001               	movlw	1	; select bank2/3
  4580  0094  0087               	movwf	7
  4581  0095  1C81               	btfss	1,1
  4582  0096  2960               	goto	l9097
  4583                           
  4584                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  4585  0097  086B               	movf	_Sw,w
  4586  0098  0086               	movwf	6
  4587  0099  3001               	movlw	1	; select bank2/3
  4588  009A  0087               	movwf	7
  4589  009B  1901               	btfsc	1,2
  4590  009C  28BE               	goto	l9063
  4591                           
  4592                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  4593  009D  3001               	movlw	1
  4594  009E  00A9               	movwf	??_setSw_Main
  4595  009F  086B               	movf	_Sw,w
  4596  00A0  3E02               	addlw	2
  4597  00A1  0086               	movwf	6
  4598  00A2  3001               	movlw	1	; select bank2/3
  4599  00A3  0087               	movwf	7
  4600  00A4  0829               	movf	??_setSw_Main,w
  4601  00A5  0781               	addwf	1,f
  4602                           
  4603                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (100 / 20)) {
  4604  00A6  086B               	movf	_Sw,w
  4605  00A7  3E02               	addlw	2
  4606  00A8  0086               	movwf	6
  4607  00A9  3001               	movlw	1	; select bank2/3
  4608  00AA  0087               	movwf	7
  4609  00AB  3005               	movlw	5
  4610  00AC  0201               	subwf	1,w
  4611  00AD  1C03               	skipc
  4612  00AE  0008               	return
  4613                           
  4614                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  4615  00AF  086B               	movf	_Sw,w
  4616  00B0  3E02               	addlw	2
  4617  00B1  0086               	movwf	6
  4618  00B2  3001               	movlw	1	; select bank2/3
  4619  00B3  0087               	movwf	7
  4620  00B4  0181               	clrf	1
  4621                           
  4622                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  4623  00B5  086B               	movf	_Sw,w
  4624  00B6  0086               	movwf	6
  4625  00B7  3001               	movlw	1	; select bank2/3
  4626  00B8  0087               	movwf	7
  4627  00B9  1501               	bsf	1,2
  4628                           
  4629                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  4630  00BA  082B               	movf	setSw_Main@sw,w
  4631  00BB  3189  218D         	fcall	_setDimmerLights_SwOn
  4632                           
  4633                           ;Switch_B1.c: 147: }
  4634                           ;Switch_B1.c: 148: } else {
  4635  00BD  0008               	return
  4636  00BE                     l9063:	
  4637                           
  4638                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  4639  00BE  0020               	movlb	0	; select bank0
  4640  00BF  086B               	movf	_Sw,w
  4641  00C0  0086               	movwf	6
  4642  00C1  3001               	movlw	1	; select bank2/3
  4643  00C2  0087               	movwf	7
  4644  00C3  1981               	btfsc	1,3
  4645  00C4  28F0               	goto	l9073
  4646                           
  4647                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  4648  00C5  086B               	movf	_Sw,w
  4649  00C6  3E03               	addlw	3
  4650  00C7  0086               	movwf	6
  4651  00C8  3001               	movlw	1	; select bank2/3
  4652  00C9  0087               	movwf	7
  4653  00CA  3001               	movlw	1
  4654  00CB  0781               	addwf	1,f
  4655  00CC  3141               	addfsr 1,1
  4656  00CD  1803               	skipnc
  4657  00CE  0A81               	incf	1,f
  4658                           
  4659                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  4660  00CF  086B               	movf	_Sw,w
  4661  00D0  3E03               	addlw	3
  4662  00D1  0086               	movwf	6
  4663  00D2  3001               	movlw	1	; select bank2/3
  4664  00D3  0087               	movwf	7
  4665  00D4  3F40               	moviw [0]fsr1
  4666  00D5  00A9               	movwf	??_setSw_Main
  4667  00D6  3F41               	moviw [1]fsr1
  4668  00D7  00AA               	movwf	??_setSw_Main+1
  4669  00D8  3000               	movlw	0
  4670  00D9  022A               	subwf	??_setSw_Main+1,w
  4671  00DA  304B               	movlw	75
  4672  00DB  1903               	skipnz
  4673  00DC  0229               	subwf	??_setSw_Main,w
  4674  00DD  1C03               	skipc
  4675  00DE  0008               	return
  4676                           
  4677                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  4678  00DF  086B               	movf	_Sw,w
  4679  00E0  3E03               	addlw	3
  4680  00E1  0086               	movwf	6
  4681  00E2  3001               	movlw	1	; select bank2/3
  4682  00E3  0087               	movwf	7
  4683  00E4  3000               	movlw	0
  4684  00E5  3FC0               	movwi [0]fsr1
  4685  00E6  3FC1               	movwi [1]fsr1
  4686                           
  4687                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  4688  00E7  086B               	movf	_Sw,w
  4689  00E8  0086               	movwf	6
  4690  00E9  3001               	movlw	1	; select bank2/3
  4691  00EA  0087               	movwf	7
  4692  00EB  1581               	bsf	1,3
  4693                           
  4694                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  4695  00EC  082B               	movf	setSw_Main@sw,w
  4696  00ED  3195  2578         	fcall	_setDimmerLights_DimmingOn
  4697                           
  4698                           ;Switch_B1.c: 162: }
  4699                           ;Switch_B1.c: 163: } else {
  4700  00EF  0008               	return
  4701  00F0                     l9073:	
  4702                           
  4703                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  4704  00F0  0020               	movlb	0	; select bank0
  4705  00F1  086B               	movf	_Sw,w
  4706  00F2  0086               	movwf	6
  4707  00F3  3001               	movlw	1	; select bank2/3
  4708  00F4  0087               	movwf	7
  4709  00F5  1A01               	btfsc	1,4
  4710  00F6  292E               	goto	l9087
  4711                           
  4712                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  4713  00F7  086B               	movf	_Sw,w
  4714  00F8  3E05               	addlw	5
  4715  00F9  0086               	movwf	6
  4716  00FA  3001               	movlw	1	; select bank2/3
  4717  00FB  0087               	movwf	7
  4718  00FC  3001               	movlw	1
  4719  00FD  0781               	addwf	1,f
  4720  00FE  3141               	addfsr 1,1
  4721  00FF  1803               	skipnc
  4722  0100  0A81               	incf	1,f
  4723                           
  4724                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  4725  0101  086B               	movf	_Sw,w
  4726  0102  3E05               	addlw	5
  4727  0103  0086               	movwf	6
  4728  0104  3001               	movlw	1	; select bank2/3
  4729  0105  0087               	movwf	7
  4730  0106  3F40               	moviw [0]fsr1
  4731  0107  00A9               	movwf	??_setSw_Main
  4732  0108  3F41               	moviw [1]fsr1
  4733  0109  00AA               	movwf	??_setSw_Main+1
  4734  010A  3000               	movlw	0
  4735  010B  022A               	subwf	??_setSw_Main+1,w
  4736  010C  304B               	movlw	75
  4737  010D  1903               	skipnz
  4738  010E  0229               	subwf	??_setSw_Main,w
  4739  010F  1C03               	skipc
  4740  0110  0008               	return
  4741                           
  4742                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  4743  0111  086B               	movf	_Sw,w
  4744  0112  3E05               	addlw	5
  4745  0113  0086               	movwf	6
  4746  0114  3001               	movlw	1	; select bank2/3
  4747  0115  0087               	movwf	7
  4748  0116  3000               	movlw	0
  4749  0117  3FC0               	movwi [0]fsr1
  4750  0118  3FC1               	movwi [1]fsr1
  4751                           
  4752                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  4753  0119  086B               	movf	_Sw,w
  4754  011A  0086               	movwf	6
  4755  011B  3001               	movlw	1	; select bank2/3
  4756  011C  0087               	movwf	7
  4757  011D  1601               	bsf	1,4
  4758                           
  4759                           ;Switch_B1.c: 172: setRF_Learn(1);
  4760  011E  3001               	movlw	1
  4761  011F  3192  22ED  3180   	fcall	_setRF_Learn
  4762                           
  4763                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  4764  0122  0021               	movlb	1	; select bank1
  4765  0123  1EBF               	btfss	_myMain^(0+128),5
  4766  0124  0008               	return
  4767                           
  4768                           ;Switch_B1.c: 174: setBuz(2, 100);
  4769  0125  3064               	movlw	100
  4770  0126  0020               	movlb	0	; select bank0
  4771  0127  00A4               	movwf	setBuz@time
  4772  0128  3000               	movlw	0
  4773  0129  00A5               	movwf	setBuz@time+1
  4774  012A  3002               	movlw	2
  4775  012B  318A  2227         	fcall	_setBuz
  4776                           
  4777                           ;Switch_B1.c: 175: }
  4778                           ;Switch_B1.c: 179: }
  4779                           ;Switch_B1.c: 180: } else {
  4780  012D  0008               	return
  4781  012E                     l9087:	
  4782                           
  4783                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  4784  012E  0020               	movlb	0	; select bank0
  4785  012F  086B               	movf	_Sw,w
  4786  0130  0086               	movwf	6
  4787  0131  3001               	movlw	1	; select bank2/3
  4788  0132  0087               	movwf	7
  4789  0133  1A81               	btfsc	1,5
  4790  0134  0008               	return
  4791                           
  4792                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  4793  0135  086B               	movf	_Sw,w
  4794  0136  3E07               	addlw	7
  4795  0137  0086               	movwf	6
  4796  0138  3001               	movlw	1	; select bank2/3
  4797  0139  0087               	movwf	7
  4798  013A  3001               	movlw	1
  4799  013B  0781               	addwf	1,f
  4800  013C  3141               	addfsr 1,1
  4801  013D  1803               	skipnc
  4802  013E  0A81               	incf	1,f
  4803                           
  4804                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  4805  013F  086B               	movf	_Sw,w
  4806  0140  3E07               	addlw	7
  4807  0141  0086               	movwf	6
  4808  0142  3001               	movlw	1	; select bank2/3
  4809  0143  0087               	movwf	7
  4810  0144  3F40               	moviw [0]fsr1
  4811  0145  00A9               	movwf	??_setSw_Main
  4812  0146  3F41               	moviw [1]fsr1
  4813  0147  00AA               	movwf	??_setSw_Main+1
  4814  0148  3000               	movlw	0
  4815  0149  022A               	subwf	??_setSw_Main+1,w
  4816  014A  3096               	movlw	150
  4817  014B  1903               	skipnz
  4818  014C  0229               	subwf	??_setSw_Main,w
  4819  014D  1C03               	skipc
  4820  014E  0008               	return
  4821                           
  4822                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  4823  014F  086B               	movf	_Sw,w
  4824  0150  3E07               	addlw	7
  4825  0151  0086               	movwf	6
  4826  0152  3001               	movlw	1	; select bank2/3
  4827  0153  0087               	movwf	7
  4828  0154  3000               	movlw	0
  4829  0155  3FC0               	movwi [0]fsr1
  4830  0156  3FC1               	movwi [1]fsr1
  4831                           
  4832                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  4833  0157  086B               	movf	_Sw,w
  4834  0158  0086               	movwf	6
  4835  0159  3001               	movlw	1	; select bank2/3
  4836  015A  0087               	movwf	7
  4837  015B  1681               	bsf	1,5
  4838                           
  4839                           ;Switch_B1.c: 188: setRF_Learn(0);
  4840  015C  3000               	movlw	0
  4841  015D  3192  22ED         	fcall	_setRF_Learn
  4842                           
  4843                           ;Switch_B1.c: 191: }
  4844                           ;Switch_B1.c: 192: }
  4845                           ;Switch_B1.c: 193: }
  4846                           ;Switch_B1.c: 195: }
  4847                           ;Switch_B1.c: 196: }
  4848                           ;Switch_B1.c: 197: } else {
  4849  015F  0008               	return
  4850  0160                     l9097:	
  4851                           
  4852                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  4853  0160  0020               	movlb	0	; select bank0
  4854  0161  086B               	movf	_Sw,w
  4855  0162  0086               	movwf	6
  4856  0163  3001               	movlw	1	; select bank2/3
  4857  0164  0087               	movwf	7
  4858  0165  1D01               	btfss	1,2
  4859  0166  0008               	return
  4860                           
  4861                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  4862  0167  3001               	movlw	1
  4863  0168  00A9               	movwf	??_setSw_Main
  4864  0169  086B               	movf	_Sw,w
  4865  016A  3E02               	addlw	2
  4866  016B  0086               	movwf	6
  4867  016C  3001               	movlw	1	; select bank2/3
  4868  016D  0087               	movwf	7
  4869  016E  0829               	movf	??_setSw_Main,w
  4870  016F  0781               	addwf	1,f
  4871                           
  4872                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (100 / 20)) {
  4873  0170  086B               	movf	_Sw,w
  4874  0171  3E02               	addlw	2
  4875  0172  0086               	movwf	6
  4876  0173  3001               	movlw	1	; select bank2/3
  4877  0174  0087               	movwf	7
  4878  0175  3005               	movlw	5
  4879  0176  0201               	subwf	1,w
  4880  0177  1C03               	skipc
  4881  0178  0008               	return
  4882                           
  4883                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  4884  0179  086B               	movf	_Sw,w
  4885  017A  3E02               	addlw	2
  4886  017B  0086               	movwf	6
  4887  017C  3001               	movlw	1	; select bank2/3
  4888  017D  0087               	movwf	7
  4889  017E  0181               	clrf	1
  4890                           
  4891                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  4892  017F  086B               	movf	_Sw,w
  4893  0180  0086               	movwf	6
  4894  0181  3001               	movlw	1	; select bank2/3
  4895  0182  0087               	movwf	7
  4896  0183  1101               	bcf	1,2
  4897                           
  4898                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  4899  0184  086B               	movf	_Sw,w
  4900  0185  3E03               	addlw	3
  4901  0186  0086               	movwf	6
  4902  0187  3001               	movlw	1	; select bank2/3
  4903  0188  0087               	movwf	7
  4904  0189  3000               	movlw	0
  4905  018A  3FC0               	movwi [0]fsr1
  4906  018B  3FC1               	movwi [1]fsr1
  4907                           
  4908                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  4909  018C  086B               	movf	_Sw,w
  4910  018D  0086               	movwf	6
  4911  018E  3001               	movlw	1	; select bank2/3
  4912  018F  0087               	movwf	7
  4913  0190  1181               	bcf	1,3
  4914                           
  4915                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  4916  0191  086B               	movf	_Sw,w
  4917  0192  0086               	movwf	6
  4918  0193  3001               	movlw	1	; select bank2/3
  4919  0194  0087               	movwf	7
  4920  0195  1201               	bcf	1,4
  4921                           
  4922                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  4923  0196  086B               	movf	_Sw,w
  4924  0197  0086               	movwf	6
  4925  0198  3001               	movlw	1	; select bank2/3
  4926  0199  0087               	movwf	7
  4927  019A  1281               	bcf	1,5
  4928                           
  4929                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  4930  019B  086B               	movf	_Sw,w
  4931  019C  3E05               	addlw	5
  4932  019D  0086               	movwf	6
  4933  019E  3001               	movlw	1	; select bank2/3
  4934  019F  0087               	movwf	7
  4935  01A0  3000               	movlw	0
  4936  01A1  3FC0               	movwi [0]fsr1
  4937  01A2  3FC1               	movwi [1]fsr1
  4938                           
  4939                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  4940  01A3  086B               	movf	_Sw,w
  4941  01A4  3E07               	addlw	7
  4942  01A5  0086               	movwf	6
  4943  01A6  3001               	movlw	1	; select bank2/3
  4944  01A7  0087               	movwf	7
  4945  01A8  3000               	movlw	0
  4946  01A9  3FC0               	movwi [0]fsr1
  4947  01AA  3FC1               	movwi [1]fsr1
  4948                           
  4949                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  4950  01AB  082B               	movf	setSw_Main@sw,w
  4951  01AC  3197  2790  3180   	fcall	_setDimmerLights_SwOff
  4952                           
  4953                           ;Switch_B1.c: 220: setRF_Learn(0);
  4954  01AF  3000               	movlw	0
  4955  01B0  3192  22ED         	fcall	_setRF_Learn
  4956                           
  4957                           ;Switch_B1.c: 222: }
  4958                           ;Switch_B1.c: 223: }
  4959                           ;Switch_B1.c: 224: }
  4960                           ;Switch_B1.c: 225: } else {
  4961  01B2  0008               	return
  4962  01B3                     l2332:	
  4963                           
  4964                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  4965  01B3  0021               	movlb	1	; select bank1
  4966  01B4  1C3F               	btfss	_myMain^(0+128),0
  4967  01B5  0008               	return
  4968                           
  4969                           ;Switch_B1.c: 227: Sw->Enable = 1;
  4970  01B6  0020               	movlb	0	; select bank0
  4971  01B7  086B               	movf	_Sw,w
  4972  01B8  0086               	movwf	6
  4973  01B9  3001               	movlw	1	; select bank2/3
  4974  01BA  0087               	movwf	7
  4975  01BB  1401               	bsf	1,0
  4976  01BC  0008               	return
  4977  01BD                     __end_of_setSw_Main:	
  4978                           
  4979                           	psect	text7
  4980  12ED                     __ptext7:	
  4981 ;; *************** function _setRF_Learn *****************
  4982 ;; Defined at:
  4983 ;;		line 33 in file "../src/RF_Control_B1.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  command         1    wreg     unsigned char 
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;  command         1    3[COMMON] unsigned char 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;		None               void
  4990 ;; Registers used:
  4991 ;;		wreg, status,2, status,0
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4998 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;Total ram usage:        2 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    3
  5004 ;; This function calls:
  5005 ;;		Nothing
  5006 ;; This function is called by:
  5007 ;;		_setSw_Main
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           
  5012                           ;psect for function _setRF_Learn
  5013  12ED                     _setRF_Learn:	
  5014                           
  5015                           ;incstack = 0
  5016                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5017                           ;setRF_Learn@command stored from wreg
  5018  12ED  00F3               	movwf	setRF_Learn@command
  5019                           
  5020                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  5021  12EE  0873               	movf	setRF_Learn@command,w
  5022  12EF  3A01               	xorlw	1
  5023  12F0  3000               	movlw	0
  5024  12F1  1903               	skipnz
  5025  12F2  3001               	movlw	1
  5026  12F3  00F2               	movwf	??_setRF_Learn
  5027  12F4  0EF2               	swapf	??_setRF_Learn,f
  5028  12F5  0DF2               	rlf	??_setRF_Learn,f
  5029  12F6  0DF2               	rlf	??_setRF_Learn,f
  5030  12F7  0021               	movlb	1	; select bank1
  5031  12F8  0830               	movf	_RF1^(0+128),w
  5032  12F9  0672               	xorwf	??_setRF_Learn,w
  5033  12FA  39BF               	andlw	-65
  5034  12FB  0672               	xorwf	??_setRF_Learn,w
  5035  12FC  00B0               	movwf	_RF1^(0+128)
  5036  12FD  0008               	return
  5037  12FE                     __end_of_setRF_Learn:	
  5038                           
  5039                           	psect	text8
  5040  1578                     __ptext8:	
  5041 ;; *************** function _setDimmerLights_DimmingOn *****************
  5042 ;; Defined at:
  5043 ;;		line 848 in file "../src/Dimmer_B1.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;  sw              1    wreg     unsigned char 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  sw              1    4[COMMON] unsigned char 
  5048 ;; Return value:  Size  Location     Type
  5049 ;;		None               void
  5050 ;; Registers used:
  5051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5060 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5061 ;;Total ram usage:        1 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; Hardware stack levels required when called:    4
  5064 ;; This function calls:
  5065 ;;		_DimmerLights_SelectPointer
  5066 ;; This function is called by:
  5067 ;;		_setSw_Main
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           
  5072                           ;psect for function _setDimmerLights_DimmingOn
  5073  1578                     _setDimmerLights_DimmingOn:	
  5074                           
  5075                           ;incstack = 0
  5076                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  5077                           ;setDimmerLights_DimmingOn@sw stored from wreg
  5078  1578  00F4               	movwf	setDimmerLights_DimmingOn@sw
  5079                           
  5080                           ;Dimmer_B1.c: 854: DimmerLights_SelectPointer(sw);
  5081  1579  0874               	movf	setDimmerLights_DimmingOn@sw,w
  5082  157A  3191  2158  3195   	fcall	_DimmerLights_SelectPointer
  5083                           
  5084                           ;Dimmer_B1.c: 855: if (DimmerLights->Trigger == 0) {
  5085  157D  0020               	movlb	0	; select bank0
  5086  157E  086A               	movf	_DimmerLights,w
  5087  157F  0086               	movwf	6
  5088  1580  3001               	movlw	1	; select bank2/3
  5089  1581  0087               	movwf	7
  5090  1582  1881               	btfsc	1,1
  5091  1583  0008               	return
  5092                           
  5093                           ;Dimmer_B1.c: 856: if (DimmerLights->SwFlag == 1) {
  5094  1584  086A               	movf	_DimmerLights,w
  5095  1585  0086               	movwf	6
  5096  1586  3001               	movlw	1	; select bank2/3
  5097  1587  0087               	movwf	7
  5098  1588  1C01               	btfss	1,0
  5099  1589  0008               	return
  5100                           
  5101                           ;Dimmer_B1.c: 857: DimmerLights->Status = 1;
  5102  158A  0A6A               	incf	_DimmerLights,w
  5103  158B  0086               	movwf	6
  5104  158C  3001               	movlw	1	; select bank2/3
  5105  158D  0087               	movwf	7
  5106  158E  1401               	bsf	1,0
  5107                           
  5108                           ;Dimmer_B1.c: 859: DimmerLights->DimmingSwFlag = 1;
  5109  158F  086A               	movf	_DimmerLights,w
  5110  1590  0086               	movwf	6
  5111  1591  3001               	movlw	1	; select bank2/3
  5112  1592  0087               	movwf	7
  5113  1593  1581               	bsf	1,3
  5114                           
  5115                           ;Dimmer_B1.c: 860: DimmerLights->DimmingTrigger = 1;
  5116  1594  086A               	movf	_DimmerLights,w
  5117  1595  0086               	movwf	6
  5118  1596  3001               	movlw	1	; select bank2/3
  5119  1597  0087               	movwf	7
  5120  1598  1601               	bsf	1,4
  5121                           
  5122                           ;Dimmer_B1.c: 861: DimmerLights->DimmingSwitch = 1;
  5123  1599  086A               	movf	_DimmerLights,w
  5124  159A  0086               	movwf	6
  5125  159B  3001               	movlw	1	; select bank2/3
  5126  159C  0087               	movwf	7
  5127  159D  1681               	bsf	1,5
  5128  159E  0008               	return
  5129  159F                     __end_of_setDimmerLights_DimmingOn:	
  5130                           
  5131                           	psect	text9
  5132  12DC                     __ptext9:	
  5133 ;; *************** function _getSw_KeyStatus *****************
  5134 ;; Defined at:
  5135 ;;		line 238 in file "../src/Switch_B1.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;  sw              1    wreg     unsigned char 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  sw              1    0[COMMON] unsigned char 
  5140 ;;  status          1    3[COMMON] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  1    wreg      unsigned char 
  5143 ;; Registers used:
  5144 ;;		wreg, status,2
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5151 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;Total ram usage:        3 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    3
  5157 ;; This function calls:
  5158 ;;		Nothing
  5159 ;; This function is called by:
  5160 ;;		_setSw_Main
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           
  5165                           ;psect for function _getSw_KeyStatus
  5166  12DC                     _getSw_KeyStatus:	
  5167                           
  5168                           ;Switch_B1.c: 239: char status = 0;
  5169                           
  5170                           ;incstack = 0
  5171                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5172  12DC  01F3               	clrf	getSw_KeyStatus@status
  5173                           
  5174                           ;Switch_B1.c: 279: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  5175  12DD  01F4               	clrf	_getSw_KeyStatus$6445
  5176  12DE  0AF4               	incf	_getSw_KeyStatus$6445,f
  5177  12DF  0020               	movlb	0	; select bank0
  5178  12E0  1F0C               	btfss	12,6	;volatile
  5179  12E1  1A0C               	btfsc	12,4	;volatile
  5180  12E2  2AE7               	goto	l6543
  5181  12E3  1C0C               	btfss	12,0	;volatile
  5182  12E4  1B8C               	btfsc	12,7	;volatile
  5183  12E5  2AE7               	goto	l6543
  5184  12E6  01F4               	clrf	_getSw_KeyStatus$6445
  5185  12E7                     l6543:	
  5186  12E7  0874               	movf	_getSw_KeyStatus$6445,w
  5187  12E8  00F2               	movwf	??_getSw_KeyStatus
  5188  12E9  0872               	movf	??_getSw_KeyStatus,w
  5189  12EA  00F3               	movwf	getSw_KeyStatus@status
  5190                           
  5191                           ;Switch_B1.c: 283: return status;
  5192  12EB  0873               	movf	getSw_KeyStatus@status,w
  5193  12EC  0008               	return
  5194  12ED                     __end_of_getSw_KeyStatus:	
  5195                           
  5196                           	psect	text10
  5197  118F                     __ptext10:	
  5198 ;; *************** function _SwPointSelect *****************
  5199 ;; Defined at:
  5200 ;;		line 25 in file "../src/Switch_B1.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;  sw              1    wreg     unsigned char 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  sw              1    3[COMMON] unsigned char 
  5205 ;; Return value:  Size  Location     Type
  5206 ;;		None               void
  5207 ;; Registers used:
  5208 ;;		wreg
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5216 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5217 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5218 ;;Total ram usage:        2 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    3
  5221 ;; This function calls:
  5222 ;;		Nothing
  5223 ;; This function is called by:
  5224 ;;		_setSw_Main
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           
  5229                           ;psect for function _SwPointSelect
  5230  118F                     _SwPointSelect:	
  5231                           
  5232                           ;incstack = 0
  5233                           ; Regs used in _SwPointSelect: [wreg]
  5234                           ;SwPointSelect@sw stored from wreg
  5235  118F  00F3               	movwf	SwPointSelect@sw
  5236                           
  5237                           ;Switch_B1.c: 28: if (sw == 1) {
  5238  1190  0873               	movf	SwPointSelect@sw,w
  5239  1191  3A01               	xorlw	1
  5240  1192  1D03               	skipz
  5241  1193  0008               	return
  5242                           
  5243                           ;Switch_B1.c: 29: Sw = &Sw1;
  5244  1194  305C               	movlw	_Sw1& (0+255)
  5245  1195  00F2               	movwf	??_SwPointSelect
  5246  1196  0872               	movf	??_SwPointSelect,w
  5247  1197  0020               	movlb	0	; select bank0
  5248  1198  00EB               	movwf	_Sw
  5249  1199  0008               	return
  5250  119A                     __end_of_SwPointSelect:	
  5251                           
  5252                           	psect	text11
  5253  13B5                     __ptext11:	
  5254 ;; *************** function _TouchPower *****************
  5255 ;; Defined at:
  5256 ;;		line 10 in file "../src/Switch_B1.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;		None
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;		None
  5261 ;; Return value:  Size  Location     Type
  5262 ;;		None               void
  5263 ;; Registers used:
  5264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5274 ;;Total ram usage:        0 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; Hardware stack levels required when called:    4
  5277 ;; This function calls:
  5278 ;;		_Timeout_Counter
  5279 ;;		_set_TimeoutCleared
  5280 ;; This function is called by:
  5281 ;;		_Switch_Main
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           
  5286                           ;psect for function _TouchPower
  5287  13B5                     _TouchPower:	
  5288                           
  5289                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  5290                           
  5291                           ;incstack = 0
  5292                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5293  13B5  0021               	movlb	1	; select bank1
  5294  13B6  1C3F               	btfss	_myMain^(0+128),0
  5295  13B7  0008               	return
  5296                           
  5297                           ;Switch_B1.c: 12: if (RB0 == 0) {
  5298  13B8  0020               	movlb	0	; select bank0
  5299  13B9  180D               	btfsc	13,0	;volatile
  5300  13BA  0008               	return
  5301  13BB  2BC1               	goto	l6937
  5302  13BC                     l2312:	
  5303                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  5304                           
  5305                           
  5306                           ;Switch_B1.c: 14: RB0 = 1;
  5307  13BC  0020               	movlb	0	; select bank0
  5308  13BD  140D               	bsf	13,0	;volatile
  5309                           
  5310                           ;Switch_B1.c: 15: Timeout_Counter();
  5311  13BE  3193  23A0  3193   	fcall	_Timeout_Counter
  5312  13C1                     l6937:	
  5313  13C1  0020               	movlb	0	; select bank0
  5314  13C2  180D               	btfsc	13,0	;volatile
  5315  13C3  2BC7               	goto	l6941
  5316  13C4  0021               	movlb	1	; select bank1
  5317  13C5  1D49               	btfss	(_myMain^(0+128)+10),2
  5318  13C6  2BBC               	goto	l2312
  5319  13C7                     l6941:	
  5320                           
  5321                           ;Switch_B1.c: 16: }
  5322                           ;Switch_B1.c: 17: set_TimeoutCleared();
  5323  13C7  3190  20F4         	fcall	_set_TimeoutCleared
  5324  13C9  0008               	return
  5325  13CA                     __end_of_TouchPower:	
  5326                           
  5327                           	psect	text12
  5328  10F4                     __ptext12:	
  5329 ;; *************** function _set_TimeoutCleared *****************
  5330 ;; Defined at:
  5331 ;;		line 285 in file "../src/Main_B1.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;		None
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;		None
  5336 ;; Return value:  Size  Location     Type
  5337 ;;		None               void
  5338 ;; Registers used:
  5339 ;;		status,2
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;Total ram usage:        0 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:    3
  5352 ;; This function calls:
  5353 ;;		Nothing
  5354 ;; This function is called by:
  5355 ;;		_TouchPower
  5356 ;;		_getAD
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           
  5361                           ;psect for function _set_TimeoutCleared
  5362  10F4                     _set_TimeoutCleared:	
  5363                           
  5364                           ;Main_B1.c: 286: myMain.Timeout = 0;
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _set_TimeoutCleared: [status,2]
  5368  10F4  0021               	movlb	1	; select bank1
  5369  10F5  1149               	bcf	(_myMain^(0+128)+10),2
  5370                           
  5371                           ;Main_B1.c: 287: myMain.Timeout_Counter = 0;
  5372  10F6  01CA               	clrf	(_myMain^(0+128)+11)
  5373  10F7  01CB               	clrf	((_myMain+1)^(0+128)+11)
  5374  10F8  0008               	return
  5375  10F9                     __end_of_set_TimeoutCleared:	
  5376                           
  5377                           	psect	text13
  5378  13A0                     __ptext13:	
  5379 ;; *************** function _Timeout_Counter *****************
  5380 ;; Defined at:
  5381 ;;		line 276 in file "../src/Main_B1.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;		None
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;		None
  5386 ;; Return value:  Size  Location     Type
  5387 ;;		None               void
  5388 ;; Registers used:
  5389 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5399 ;;Total ram usage:        0 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:    3
  5402 ;; This function calls:
  5403 ;;		Nothing
  5404 ;; This function is called by:
  5405 ;;		_TouchPower
  5406 ;;		_getAD
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           
  5411                           ;psect for function _Timeout_Counter
  5412  13A0                     _Timeout_Counter:	
  5413                           
  5414                           ;Main_B1.c: 277: myMain.Timeout_Counter++;
  5415                           
  5416                           ;incstack = 0
  5417                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  5418  13A0  3001               	movlw	1
  5419  13A1  0021               	movlb	1	; select bank1
  5420  13A2  07CA               	addwf	(_myMain^(0+128)+11),f
  5421  13A3  3000               	movlw	0
  5422  13A4  3DCB               	addwfc	((_myMain+1)^(0+128)+11),f
  5423                           
  5424                           ;Main_B1.c: 278: if (myMain.Timeout_Counter == 25000) {
  5425  13A5  300B               	movlw	11
  5426  13A6  3EBF               	addlw	_myMain& (0+255)
  5427  13A7  0086               	movwf	6
  5428  13A8  0187               	clrf	7
  5429  13A9  3F40               	moviw [0]fsr1
  5430  13AA  3AA8               	xorlw	168
  5431  13AB  1D03               	skipz
  5432  13AC  2BAF               	goto	u5335
  5433  13AD  3F41               	moviw [1]fsr1
  5434  13AE  3A61               	xorlw	97
  5435  13AF                     u5335:	
  5436  13AF  1D03               	skipz
  5437  13B0  0008               	return
  5438                           
  5439                           ;Main_B1.c: 279: myMain.Timeout_Counter = 0;
  5440  13B1  01CA               	clrf	(_myMain^(0+128)+11)
  5441  13B2  01CB               	clrf	((_myMain+1)^(0+128)+11)
  5442                           
  5443                           ;Main_B1.c: 280: myMain.Timeout = 1;
  5444  13B3  1549               	bsf	(_myMain^(0+128)+10),2
  5445  13B4  0008               	return
  5446  13B5                     __end_of_Timeout_Counter:	
  5447                           
  5448                           	psect	text14
  5449  10E1                     __ptext14:	
  5450 ;; *************** function _Switch_Initialization *****************
  5451 ;; Defined at:
  5452 ;;		line 46 in file "../src/Switch_B1.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;		None
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;		None
  5457 ;; Return value:  Size  Location     Type
  5458 ;;		None               void
  5459 ;; Registers used:
  5460 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5470 ;;Total ram usage:        0 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    6
  5473 ;; This function calls:
  5474 ;;		_setSw_Initialization
  5475 ;; This function is called by:
  5476 ;;		_main
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           
  5481                           ;psect for function _Switch_Initialization
  5482  10E1                     _Switch_Initialization:	
  5483                           
  5484                           ;Switch_B1.c: 52: setSw_Initialization(1);
  5485                           
  5486                           ;incstack = 0
  5487                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5488  10E1  3001               	movlw	1
  5489  10E2  3191  21FE         	fcall	_setSw_Initialization
  5490  10E4  0008               	return
  5491  10E5                     __end_of_Switch_Initialization:	
  5492                           
  5493                           	psect	text15
  5494  11FE                     __ptext15:	
  5495 ;; *************** function _setSw_Initialization *****************
  5496 ;; Defined at:
  5497 ;;		line 66 in file "../src/Switch_B1.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  sw              1    wreg     unsigned char 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  sw              1    6[COMMON] unsigned char 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;		None               void
  5504 ;; Registers used:
  5505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;Total ram usage:        1 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    5
  5518 ;; This function calls:
  5519 ;;		_setLED
  5520 ;; This function is called by:
  5521 ;;		_Switch_Initialization
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           
  5526                           ;psect for function _setSw_Initialization
  5527  11FE                     _setSw_Initialization:	
  5528                           
  5529                           ;incstack = 0
  5530                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5531                           ;setSw_Initialization@sw stored from wreg
  5532  11FE  00F6               	movwf	setSw_Initialization@sw
  5533                           
  5534                           ;Switch_B1.c: 68: setLED(sw, 1);
  5535  11FF  01F4               	clrf	setLED@command
  5536  1200  0AF4               	incf	setLED@command,f
  5537  1201  0876               	movf	setSw_Initialization@sw,w
  5538  1202  3188  200A  3191   	fcall	_setLED
  5539                           
  5540                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  5541  1205  01F4               	clrf	setLED@command
  5542  1206  0AF4               	incf	setLED@command,f
  5543  1207  0876               	movf	setSw_Initialization@sw,w
  5544  1208  3E01               	addlw	1
  5545  1209  3188  200A         	fcall	_setLED
  5546  120B  0008               	return
  5547  120C                     __end_of_setSw_Initialization:	
  5548                           
  5549                           	psect	text16
  5550  10BA                     __ptext16:	
  5551 ;; *************** function _RF_Main *****************
  5552 ;; Defined at:
  5553 ;;		line 26 in file "../src/RF_Control_B1.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;		None
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;		None
  5558 ;; Return value:  Size  Location     Type
  5559 ;;		None               void
  5560 ;; Registers used:
  5561 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5571 ;;Total ram usage:        0 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:   10
  5574 ;; This function calls:
  5575 ;;		_setRF_Main
  5576 ;; This function is called by:
  5577 ;;		_main
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           
  5582                           ;psect for function _RF_Main
  5583  10BA                     _RF_Main:	
  5584                           
  5585                           ;RF_Control_B1.c: 28: setRF_Main();
  5586                           
  5587                           ;incstack = 0
  5588                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5589  10BA  3185  2588         	fcall	_setRF_Main
  5590  10BC  0008               	return
  5591  10BD                     __end_of_RF_Main:	
  5592                           
  5593                           	psect	text17
  5594  0588                     __ptext17:	
  5595 ;; *************** function _setRF_Main *****************
  5596 ;; Defined at:
  5597 ;;		line 74 in file "../src/RF_Control_B1.c"
  5598 ;; Parameters:    Size  Location     Type
  5599 ;;		None
  5600 ;; Auto vars:     Size  Location     Type
  5601 ;;  command         2    3[BANK3 ] int 
  5602 ;;  RX              1    2[BANK3 ] unsigned char 
  5603 ;;  TX              1    1[BANK3 ] unsigned char 
  5604 ;;  error           1    0[BANK3 ] unsigned char 
  5605 ;; Return value:  Size  Location     Type
  5606 ;;		None               void
  5607 ;; Registers used:
  5608 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5615 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  5616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  5618 ;;Total ram usage:        5 bytes
  5619 ;; Hardware stack levels used:    1
  5620 ;; Hardware stack levels required when called:    9
  5621 ;; This function calls:
  5622 ;;		_CC2500_PowerOnInitial
  5623 ;;		_CC2500_RxData
  5624 ;;		_CC2500_TxData
  5625 ;;		_CC2500_WriteCommand
  5626 ;;		_RF_Initialization
  5627 ;;		_RF_getCommand
  5628 ;;		___lwdiv
  5629 ;;		_getRxData
  5630 ;;		_setData
  5631 ;; This function is called by:
  5632 ;;		_RF_Main
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           
  5637                           ;psect for function _setRF_Main
  5638  0588                     _setRF_Main:	
  5639                           
  5640                           ;RF_Control_B1.c: 75: char error = 0;
  5641                           
  5642                           ;incstack = 0
  5643                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5644  0588  0023               	movlb	3	; select bank3
  5645  0589  01E5               	clrf	setRF_Main@error^(0+384)
  5646                           
  5647                           ;RF_Control_B1.c: 76: char TX = 0;
  5648  058A  01E6               	clrf	setRF_Main@TX^(0+384)
  5649                           
  5650                           ;RF_Control_B1.c: 77: char RX = 0;
  5651  058B  01E7               	clrf	setRF_Main@RX^(0+384)
  5652                           
  5653                           ;RF_Control_B1.c: 78: int command = 0;
  5654  058C  01E8               	clrf	setRF_Main@command^(0+384)
  5655  058D  01E9               	clrf	(setRF_Main@command+1)^(0+384)
  5656                           
  5657                           ;RF_Control_B1.c: 80: if (RF1.Enable == 1) {
  5658  058E  0021               	movlb	1	; select bank1
  5659  058F  1C30               	btfss	_RF1^(0+128),0
  5660  0590  2E11               	goto	l1944
  5661                           
  5662                           ;RF_Control_B1.c: 82: if (RF1.debounce == 1) {
  5663  0591  1CB2               	btfss	(_RF1^(0+128)+2),1
  5664  0592  2DC4               	goto	l8995
  5665                           
  5666                           ;RF_Control_B1.c: 83: RF1.Count++;
  5667  0593  3001               	movlw	1
  5668  0594  07B3               	addwf	(_RF1^(0+128)+3),f
  5669  0595  3000               	movlw	0
  5670  0596  3DB4               	addwfc	((_RF1+1)^(0+128)+3),f
  5671                           
  5672                           ;RF_Control_B1.c: 84: if (RF1.Count >= (RF1.RunTime / 20)) {
  5673  0597  3014               	movlw	20
  5674  0598  00F2               	movwf	___lwdiv@divisor
  5675  0599  3000               	movlw	0
  5676  059A  00F3               	movwf	___lwdiv@divisor+1
  5677  059B  0839               	movf	((_RF1+1)^(0+128)+8),w
  5678  059C  01F5               	clrf	___lwdiv@dividend+1
  5679  059D  07F5               	addwf	___lwdiv@dividend+1,f
  5680  059E  0838               	movf	(_RF1^(0+128)+8),w
  5681  059F  01F4               	clrf	___lwdiv@dividend
  5682  05A0  07F4               	addwf	___lwdiv@dividend,f
  5683  05A1  3196  26EC  3185   	fcall	___lwdiv
  5684  05A4  0873               	movf	?___lwdiv+1,w
  5685  05A5  0021               	movlb	1	; select bank1
  5686  05A6  0234               	subwf	((_RF1+1)^(0+128)+3),w
  5687  05A7  1D03               	skipz
  5688  05A8  2DAB               	goto	u9415
  5689  05A9  0872               	movf	?___lwdiv,w
  5690  05AA  0233               	subwf	(_RF1^(0+128)+3),w
  5691  05AB                     u9415:	
  5692  05AB  1C03               	skipc
  5693  05AC  0008               	return
  5694                           
  5695                           ;RF_Control_B1.c: 85: RF1.Count = (RF1.RunTime / 20);
  5696  05AD  3014               	movlw	20
  5697  05AE  00F2               	movwf	___lwdiv@divisor
  5698  05AF  3000               	movlw	0
  5699  05B0  00F3               	movwf	___lwdiv@divisor+1
  5700  05B1  0839               	movf	((_RF1+1)^(0+128)+8),w
  5701  05B2  01F5               	clrf	___lwdiv@dividend+1
  5702  05B3  07F5               	addwf	___lwdiv@dividend+1,f
  5703  05B4  0838               	movf	(_RF1^(0+128)+8),w
  5704  05B5  01F4               	clrf	___lwdiv@dividend
  5705  05B6  07F4               	addwf	___lwdiv@dividend,f
  5706  05B7  3196  26EC         	fcall	___lwdiv
  5707  05B9  0873               	movf	?___lwdiv+1,w
  5708  05BA  0021               	movlb	1	; select bank1
  5709  05BB  01B4               	clrf	((_RF1+1)^(0+128)+3)
  5710  05BC  07B4               	addwf	((_RF1+1)^(0+128)+3),f
  5711  05BD  0872               	movf	?___lwdiv,w
  5712  05BE  01B3               	clrf	(_RF1^(0+128)+3)
  5713  05BF  07B3               	addwf	(_RF1^(0+128)+3),f
  5714                           
  5715                           ;RF_Control_B1.c: 86: RF1.Count = 0;
  5716  05C0  01B3               	clrf	(_RF1^(0+128)+3)
  5717  05C1  01B4               	clrf	((_RF1+1)^(0+128)+3)
  5718                           
  5719                           ;RF_Control_B1.c: 87: RF1.debounce = 0;
  5720  05C2  10B2               	bcf	(_RF1^(0+128)+2),1
  5721                           
  5722                           ;RF_Control_B1.c: 88: }
  5723                           ;RF_Control_B1.c: 89: } else {
  5724  05C3  0008               	return
  5725  05C4                     l8995:	
  5726                           
  5727                           ;RF_Control_B1.c: 90: command = RF_getCommand();
  5728  05C4  3195  2552  3185   	fcall	_RF_getCommand
  5729  05C7  0879               	movf	?_RF_getCommand+1,w
  5730  05C8  0023               	movlb	3	; select bank3
  5731  05C9  01E9               	clrf	(setRF_Main@command+1)^(0+384)
  5732  05CA  07E9               	addwf	(setRF_Main@command+1)^(0+384),f
  5733  05CB  0878               	movf	?_RF_getCommand,w
  5734  05CC  01E8               	clrf	setRF_Main@command^(0+384)
  5735  05CD  07E8               	addwf	setRF_Main@command^(0+384),f
  5736                           
  5737                           ;RF_Control_B1.c: 92: switch (command) {
  5738  05CE  2DFF               	goto	l9023
  5739  05CF                     l1951:	
  5740                           ;RF_Control_B1.c: 95: case 1:
  5741                           
  5742                           ;RF_Control_B1.c: 94: break;
  5743                           
  5744                           ;RF_Control_B1.c: 93: case 0:
  5745                           
  5746                           
  5747                           ;RF_Control_B1.c: 96: if (RF1.RxStatus == 0) {
  5748  05CF  0021               	movlb	1	; select bank1
  5749  05D0  19B0               	btfsc	_RF1^(0+128),3
  5750  05D1  2DDF               	goto	l9001
  5751                           
  5752                           ;RF_Control_B1.c: 97: RF1.RxStatus = 1;
  5753  05D2  15B0               	bsf	_RF1^(0+128),3
  5754                           
  5755                           ;RF_Control_B1.c: 98: CC2500_WriteCommand(0x36);
  5756  05D3  3036               	movlw	54
  5757  05D4  3194  2414  3185   	fcall	_CC2500_WriteCommand
  5758                           
  5759                           ;RF_Control_B1.c: 99: CC2500_WriteCommand(0x3A);
  5760  05D7  303A               	movlw	58
  5761  05D8  3194  2414  3185   	fcall	_CC2500_WriteCommand
  5762                           
  5763                           ;RF_Control_B1.c: 100: CC2500_WriteCommand(0x34);
  5764  05DB  3034               	movlw	52
  5765  05DC  3194  2414         	fcall	_CC2500_WriteCommand
  5766                           
  5767                           ;RF_Control_B1.c: 102: } else {
  5768  05DE  0008               	return
  5769  05DF                     l9001:	
  5770                           
  5771                           ;RF_Control_B1.c: 104: CC2500_RxData();
  5772  05DF  318B  23DB  3185   	fcall	_CC2500_RxData
  5773                           
  5774                           ;RF_Control_B1.c: 105: if (RF1.ReceiveGO == 1) {
  5775  05E2  0021               	movlb	1	; select bank1
  5776  05E3  1CB0               	btfss	_RF1^(0+128),1
  5777  05E4  0008               	return
  5778                           
  5779                           ;RF_Control_B1.c: 106: RF1.ReceiveGO = 0;
  5780  05E5  10B0               	bcf	_RF1^(0+128),1
  5781                           
  5782                           ;RF_Control_B1.c: 107: RF1.RxStatus = 0;
  5783  05E6  11B0               	bcf	_RF1^(0+128),3
  5784                           
  5785                           ;RF_Control_B1.c: 108: getRxData();
  5786  05E7  318D  256A         	fcall	_getRxData
  5787                           
  5788                           ;RF_Control_B1.c: 109: RF1.debounce = 1;
  5789  05E9  0021               	movlb	1	; select bank1
  5790  05EA  14B2               	bsf	(_RF1^(0+128)+2),1
  5791                           
  5792                           ;RF_Control_B1.c: 110: }
  5793                           ;RF_Control_B1.c: 111: }
  5794                           ;RF_Control_B1.c: 112: break;
  5795  05EB  0008               	return
  5796  05EC                     l1955:	
  5797                           ;RF_Control_B1.c: 113: case 2:
  5798                           
  5799                           
  5800                           ;RF_Control_B1.c: 114: if (RF1.TransceiveGO == 1) {
  5801  05EC  0021               	movlb	1	; select bank1
  5802  05ED  1D30               	btfss	_RF1^(0+128),2
  5803  05EE  0008               	return
  5804                           
  5805                           ;RF_Control_B1.c: 115: RF1.RxStatus = 0;
  5806  05EF  11B0               	bcf	_RF1^(0+128),3
  5807                           
  5808                           ;RF_Control_B1.c: 118: setData();
  5809  05F0  3189  21D7  3185   	fcall	_setData
  5810                           
  5811                           ;RF_Control_B1.c: 119: CC2500_TxData();
  5812  05F3  318E  269D  3185   	fcall	_CC2500_TxData
  5813                           
  5814                           ;RF_Control_B1.c: 120: RF1.debounce = 1;
  5815  05F6  0021               	movlb	1	; select bank1
  5816  05F7  14B2               	bsf	(_RF1^(0+128)+2),1
  5817                           
  5818                           ;RF_Control_B1.c: 121: if(RF1.again == 0){
  5819  05F8  1932               	btfsc	(_RF1^(0+128)+2),2
  5820  05F9  2DFC               	goto	l1957
  5821                           
  5822                           ;RF_Control_B1.c: 122: RF1.again = 1;
  5823  05FA  1532               	bsf	(_RF1^(0+128)+2),2
  5824                           
  5825                           ;RF_Control_B1.c: 123: }else{
  5826  05FB  0008               	return
  5827  05FC                     l1957:	
  5828                           
  5829                           ;RF_Control_B1.c: 124: RF1.again = 0;
  5830  05FC  1132               	bcf	(_RF1^(0+128)+2),2
  5831                           
  5832                           ;RF_Control_B1.c: 125: RF1.TransceiveGO = 0;
  5833  05FD  1130               	bcf	_RF1^(0+128),2
  5834                           
  5835                           ;RF_Control_B1.c: 129: };
  5836                           
  5837                           ;RF_Control_B1.c: 126: }
  5838                           ;RF_Control_B1.c: 127: }
  5839                           ;RF_Control_B1.c: 128: break;
  5840  05FE  0008               	return
  5841  05FF                     l9023:	
  5842                           
  5843                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5844                           ; Switch size 1, requested type "space"
  5845                           ; Number of cases is 1, Range of values is 0 to 0
  5846                           ; switch strategies available:
  5847                           ; Name         Instructions Cycles
  5848                           ; simple_byte            4     3 (average)
  5849                           ; direct_byte            8     6 (fixed)
  5850                           ; jumptable            260     6 (fixed)
  5851                           ;	Chosen strategy is simple_byte
  5852  05FF  0023               	movlb	3	; select bank3
  5853  0600  0869               	movf	(setRF_Main@command+1)^(0+384),w
  5854  0601  3A00               	xorlw	0	; case 0
  5855  0602  1903               	skipnz
  5856  0603  2E05               	goto	l9393
  5857  0604  2E1A               	goto	l1961
  5858  0605                     l9393:	
  5859                           
  5860                           ; Switch size 1, requested type "space"
  5861                           ; Number of cases is 3, Range of values is 0 to 2
  5862                           ; switch strategies available:
  5863                           ; Name         Instructions Cycles
  5864                           ; simple_byte           10     6 (average)
  5865                           ; direct_byte           12     6 (fixed)
  5866                           ; jumptable            260     6 (fixed)
  5867                           ;	Chosen strategy is simple_byte
  5868  0605  0868               	movf	setRF_Main@command^(0+384),w
  5869  0606  3A00               	xorlw	0	; case 0
  5870  0607  1903               	skipnz
  5871  0608  2E1A               	goto	l1961
  5872  0609  3A01               	xorlw	1	; case 1
  5873  060A  1903               	skipnz
  5874  060B  2DCF               	goto	l1951
  5875  060C  3A03               	xorlw	3	; case 2
  5876  060D  1903               	skipnz
  5877  060E  2DEC               	goto	l1955
  5878  060F  2E1A               	goto	l1961
  5879                           
  5880                           ;RF_Control_B1.c: 130: }
  5881                           ;RF_Control_B1.c: 212: } else {
  5882  0610  0008               	return
  5883  0611                     l1944:	
  5884                           
  5885                           ;RF_Control_B1.c: 213: if (myMain.PowerON == 1) {
  5886  0611  1C3F               	btfss	_myMain^(0+128),0
  5887  0612  0008               	return
  5888                           
  5889                           ;RF_Control_B1.c: 214: RF1.Enable = 1;
  5890  0613  1430               	bsf	_RF1^(0+128),0
  5891                           
  5892                           ;RF_Control_B1.c: 216: RF_Initialization();
  5893  0614  3190  20B7  3185   	fcall	_RF_Initialization
  5894                           
  5895                           ;RF_Control_B1.c: 217: CC2500_PowerOnInitial();
  5896  0617  3193  238B         	fcall	_CC2500_PowerOnInitial
  5897  0619  0008               	return
  5898  061A                     l1961:	
  5899  061A  0008               	return
  5900  061B                     __end_of_setRF_Main:	
  5901                           
  5902                           	psect	text18
  5903  09D7                     __ptext18:	
  5904 ;; *************** function _setData *****************
  5905 ;; Defined at:
  5906 ;;		line 271 in file "../src/RF_Control_B1.c"
  5907 ;; Parameters:    Size  Location     Type
  5908 ;;		None
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;		None
  5911 ;; Return value:  Size  Location     Type
  5912 ;;		None               void
  5913 ;; Registers used:
  5914 ;;		wreg, fsr1l, fsr1h, status,2
  5915 ;; Tracked objects:
  5916 ;;		On entry : 0/0
  5917 ;;		On exit  : 0/0
  5918 ;;		Unchanged: 0/0
  5919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5922 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5923 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5924 ;;Total ram usage:        1 bytes
  5925 ;; Hardware stack levels used:    1
  5926 ;; Hardware stack levels required when called:    3
  5927 ;; This function calls:
  5928 ;;		Nothing
  5929 ;; This function is called by:
  5930 ;;		_setRF_Main
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           
  5935                           ;psect for function _setData
  5936  09D7                     _setData:	
  5937                           
  5938                           ;RF_Control_B1.c: 295: RF_Data[0] = 0x63;
  5939                           
  5940                           ;incstack = 0
  5941                           ; Regs used in _setData: [wreg+fsr1l+fsr1h+status,2]
  5942  09D7  3063               	movlw	99
  5943  09D8  00F2               	movwf	??_setData
  5944  09D9  0872               	movf	??_setData,w
  5945  09DA  0022               	movlb	2	; select bank2
  5946  09DB  00A0               	movwf	_RF_Data^(0+256)
  5947                           
  5948                           ;RF_Control_B1.c: 296: RF_Data[1] = 0x02;
  5949  09DC  3002               	movlw	2
  5950  09DD  00F2               	movwf	??_setData
  5951  09DE  0872               	movf	??_setData,w
  5952  09DF  00A1               	movwf	(_RF_Data^(0+256)+1)
  5953                           
  5954                           ;RF_Control_B1.c: 298: RF_Data[2] = 0;
  5955  09E0  01A2               	clrf	(_RF_Data^(0+256)+2)
  5956                           
  5957                           ;RF_Control_B1.c: 299: RF_Data[3] = 0;
  5958  09E1  01A3               	clrf	(_RF_Data^(0+256)+3)
  5959                           
  5960                           ;RF_Control_B1.c: 300: RF_Data[4] = 0;
  5961  09E2  01A4               	clrf	(_RF_Data^(0+256)+4)
  5962                           
  5963                           ;RF_Control_B1.c: 301: RF_Data[5] = 0;
  5964  09E3  01A5               	clrf	(_RF_Data^(0+256)+5)
  5965                           
  5966                           ;RF_Control_B1.c: 302: RF_Data[6] = 0;
  5967  09E4  01A6               	clrf	(_RF_Data^(0+256)+6)
  5968                           
  5969                           ;RF_Control_B1.c: 303: RF_Data[7] = 0;
  5970  09E5  01A7               	clrf	(_RF_Data^(0+256)+7)
  5971                           
  5972                           ;RF_Control_B1.c: 304: RF_Data[8] = 0;
  5973  09E6  01A8               	clrf	(_RF_Data^(0+256)+8)
  5974                           
  5975                           ;RF_Control_B1.c: 305: RF_Data[9] = product->Data[9];
  5976  09E7  0020               	movlb	0	; select bank0
  5977  09E8  086C               	movf	_product,w
  5978  09E9  0086               	movwf	6
  5979  09EA  3001               	movlw	1	; select bank2/3
  5980  09EB  0087               	movwf	7
  5981  09EC  3001               	movlw	1	; select bank2/3
  5982  09ED  3F49               	moviw [9]fsr1
  5983  09EE  0022               	movlb	2	; select bank2
  5984  09EF  00A9               	movwf	(_RF_Data^(0+256)+9)
  5985                           
  5986                           ;RF_Control_B1.c: 306: RF_Data[10] = 0;
  5987  09F0  01AA               	clrf	(_RF_Data^(0+256)+10)
  5988                           
  5989                           ;RF_Control_B1.c: 307: RF_Data[11] = product->Data[11];
  5990  09F1  0020               	movlb	0	; select bank0
  5991  09F2  086C               	movf	_product,w
  5992  09F3  0086               	movwf	6
  5993  09F4  3001               	movlw	1	; select bank2/3
  5994  09F5  0087               	movwf	7
  5995  09F6  3001               	movlw	1	; select bank2/3
  5996  09F7  3F4B               	moviw [11]fsr1
  5997  09F8  0022               	movlb	2	; select bank2
  5998  09F9  00AB               	movwf	(_RF_Data^(0+256)+11)
  5999                           
  6000                           ;RF_Control_B1.c: 308: RF_Data[12] = product->Data[12];
  6001  09FA  0020               	movlb	0	; select bank0
  6002  09FB  086C               	movf	_product,w
  6003  09FC  0086               	movwf	6
  6004  09FD  3001               	movlw	1	; select bank2/3
  6005  09FE  0087               	movwf	7
  6006  09FF  3001               	movlw	1	; select bank2/3
  6007  0A00  3F4C               	moviw [12]fsr1
  6008  0A01  0022               	movlb	2	; select bank2
  6009  0A02  00AC               	movwf	(_RF_Data^(0+256)+12)
  6010                           
  6011                           ;RF_Control_B1.c: 309: RF_Data[13] = product->Data[13];
  6012  0A03  0020               	movlb	0	; select bank0
  6013  0A04  086C               	movf	_product,w
  6014  0A05  0086               	movwf	6
  6015  0A06  3001               	movlw	1	; select bank2/3
  6016  0A07  0087               	movwf	7
  6017  0A08  3001               	movlw	1	; select bank2/3
  6018  0A09  3F4D               	moviw [13]fsr1
  6019  0A0A  0022               	movlb	2	; select bank2
  6020  0A0B  00AD               	movwf	(_RF_Data^(0+256)+13)
  6021                           
  6022                           ;RF_Control_B1.c: 310: RF_Data[14] = product->Data[14];
  6023  0A0C  0020               	movlb	0	; select bank0
  6024  0A0D  086C               	movf	_product,w
  6025  0A0E  0086               	movwf	6
  6026  0A0F  3001               	movlw	1	; select bank2/3
  6027  0A10  0087               	movwf	7
  6028  0A11  3001               	movlw	1	; select bank2/3
  6029  0A12  3F4E               	moviw [14]fsr1
  6030  0A13  0022               	movlb	2	; select bank2
  6031  0A14  00AE               	movwf	(_RF_Data^(0+256)+14)
  6032                           
  6033                           ;RF_Control_B1.c: 311: RF_Data[15] = product->Data[15];
  6034  0A15  0020               	movlb	0	; select bank0
  6035  0A16  086C               	movf	_product,w
  6036  0A17  0086               	movwf	6
  6037  0A18  3001               	movlw	1	; select bank2/3
  6038  0A19  0087               	movwf	7
  6039  0A1A  3001               	movlw	1	; select bank2/3
  6040  0A1B  3F4F               	moviw [15]fsr1
  6041  0A1C  0022               	movlb	2	; select bank2
  6042  0A1D  00AF               	movwf	(_RF_Data^(0+256)+15)
  6043                           
  6044                           ;RF_Control_B1.c: 312: RF_Data[16] = 0;
  6045  0A1E  01B0               	clrf	(_RF_Data^(0+256)+16)
  6046                           
  6047                           ;RF_Control_B1.c: 313: RF_Data[17] = 0;
  6048  0A1F  01B1               	clrf	(_RF_Data^(0+256)+17)
  6049                           
  6050                           ;RF_Control_B1.c: 314: RF_Data[18] = 0;
  6051  0A20  01B2               	clrf	(_RF_Data^(0+256)+18)
  6052                           
  6053                           ;RF_Control_B1.c: 315: RF_Data[19] = 0;
  6054  0A21  01B3               	clrf	(_RF_Data^(0+256)+19)
  6055                           
  6056                           ;RF_Control_B1.c: 316: RF_Data[20] = 209;
  6057  0A22  30D1               	movlw	209
  6058  0A23  00F2               	movwf	??_setData
  6059  0A24  0872               	movf	??_setData,w
  6060  0A25  00B4               	movwf	(_RF_Data^(0+256)+20)
  6061  0A26  0008               	return
  6062  0A27                     __end_of_setData:	
  6063                           
  6064                           	psect	text19
  6065  0D6A                     __ptext19:	
  6066 ;; *************** function _getRxData *****************
  6067 ;; Defined at:
  6068 ;;		line 339 in file "../src/RF_Control_B1.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;		None
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  error           1   73[BANK0 ] unsigned char 
  6073 ;; Return value:  Size  Location     Type
  6074 ;;		None               void
  6075 ;; Registers used:
  6076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;Total ram usage:        2 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    8
  6089 ;; This function calls:
  6090 ;;		_getMain_All_Error_Status
  6091 ;;		_setControl_Lights_Table
  6092 ;;		_setLog_Code
  6093 ;;		_setTxData
  6094 ;; This function is called by:
  6095 ;;		_setRF_Main
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           
  6100                           ;psect for function _getRxData
  6101  0D6A                     _getRxData:	
  6102                           
  6103                           ;RF_Control_B1.c: 341: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6104                           
  6105                           ;incstack = 0
  6106                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6107  0D6A  0022               	movlb	2	; select bank2
  6108  0D6B  0820               	movf	_RF_Data^(0+256),w
  6109  0D6C  3AAA               	xorlw	170
  6110  0D6D  1D03               	skipz
  6111  0D6E  2D80               	goto	l8699
  6112  0D6F  0821               	movf	(_RF_Data^(0+256)+1),w
  6113  0D70  3A01               	xorlw	1
  6114  0D71  1D03               	skipz
  6115  0D72  2D80               	goto	l8699
  6116                           
  6117                           ;RF_Control_B1.c: 342: product->Data[2] = 0x55;
  6118  0D73  3055               	movlw	85
  6119  0D74  0020               	movlb	0	; select bank0
  6120  0D75  00E8               	movwf	??_getRxData
  6121  0D76  086C               	movf	_product,w
  6122  0D77  3E02               	addlw	2
  6123  0D78  0086               	movwf	6
  6124  0D79  3001               	movlw	1	; select bank2/3
  6125  0D7A  0087               	movwf	7
  6126  0D7B  0868               	movf	??_getRxData,w
  6127  0D7C  0081               	movwf	1
  6128                           
  6129                           ;RF_Control_B1.c: 343: setTxData();
  6130  0D7D  3190  20EA         	fcall	_setTxData
  6131                           
  6132                           ;RF_Control_B1.c: 347: } else {
  6133  0D7F  0008               	return
  6134  0D80                     l8699:	
  6135                           
  6136                           ;RF_Control_B1.c: 348: char error = getMain_All_Error_Status(0);
  6137  0D80  3000               	movlw	0
  6138  0D81  3190  20B4  318D   	fcall	_getMain_All_Error_Status
  6139  0D84  0020               	movlb	0	; select bank0
  6140  0D85  00E8               	movwf	??_getRxData
  6141  0D86  0868               	movf	??_getRxData,w
  6142  0D87  00E9               	movwf	getRxData@error
  6143                           
  6144                           ;RF_Control_B1.c: 349: if (error == 0) {
  6145  0D88  08E9               	movf	getRxData@error,f
  6146  0D89  1D03               	skipz
  6147  0D8A  2DCD               	goto	l1990
  6148                           
  6149                           ;RF_Control_B1.c: 350: if (RF1.Learn == 1) {
  6150  0D8B  0021               	movlb	1	; select bank1
  6151  0D8C  1F30               	btfss	_RF1^(0+128),6
  6152  0D8D  2D99               	goto	l8711
  6153                           
  6154                           ;RF_Control_B1.c: 352: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  6155  0D8E  0022               	movlb	2	; select bank2
  6156  0D8F  08A0               	movf	_RF_Data^(0+256),f
  6157  0D90  1D03               	skipz
  6158  0D91  0008               	return
  6159  0D92  0821               	movf	(_RF_Data^(0+256)+1),w
  6160  0D93  3A64               	xorlw	100
  6161  0D94  1D03               	skipz
  6162  0D95  0008               	return
  6163                           
  6164                           ;RF_Control_B1.c: 353: setLog_Code();
  6165  0D96  3196  2682         	fcall	_setLog_Code
  6166                           
  6167                           ;RF_Control_B1.c: 354: }
  6168                           ;RF_Control_B1.c: 372: } else {
  6169  0D98  0008               	return
  6170  0D99                     l8711:	
  6171                           
  6172                           ;RF_Control_B1.c: 373: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  6173  0D99  0022               	movlb	2	; select bank2
  6174  0D9A  0834               	movf	(_RF_Data^(0+256)+20),w
  6175  0D9B  3AD1               	xorlw	209
  6176  0D9C  1903               	skipnz
  6177  0D9D  2DA2               	goto	l8715
  6178  0D9E  0834               	movf	(_RF_Data^(0+256)+20),w
  6179  0D9F  3A0A               	xorlw	10
  6180  0DA0  1D03               	skipz
  6181  0DA1  0008               	return
  6182  0DA2                     l8715:	
  6183                           
  6184                           ;RF_Control_B1.c: 375: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6185  0DA2  08A0               	movf	_RF_Data^(0+256),f
  6186  0DA3  1D03               	skipz
  6187  0DA4  0008               	return
  6188  0DA5  0821               	movf	(_RF_Data^(0+256)+1),w
  6189  0DA6  3A02               	xorlw	2
  6190  0DA7  1D03               	skipz
  6191  0DA8  0008               	return
  6192                           
  6193                           ;RF_Control_B1.c: 377: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6194  0DA9  0020               	movlb	0	; select bank0
  6195  0DAA  086C               	movf	_product,w
  6196  0DAB  3E0C               	addlw	12
  6197  0DAC  0086               	movwf	6
  6198  0DAD  3001               	movlw	1	; select bank2/3
  6199  0DAE  0087               	movwf	7
  6200  0DAF  0022               	movlb	2	; select bank2
  6201  0DB0  082C               	movf	(_RF_Data^(0+256)+12),w
  6202  0DB1  0601               	xorwf	1,w
  6203  0DB2  1D03               	skipz
  6204  0DB3  0008               	return
  6205  0DB4  0020               	movlb	0	; select bank0
  6206  0DB5  086C               	movf	_product,w
  6207  0DB6  3E0D               	addlw	13
  6208  0DB7  0086               	movwf	6
  6209  0DB8  3001               	movlw	1	; select bank2/3
  6210  0DB9  0087               	movwf	7
  6211  0DBA  0022               	movlb	2	; select bank2
  6212  0DBB  082D               	movf	(_RF_Data^(0+256)+13),w
  6213  0DBC  0601               	xorwf	1,w
  6214  0DBD  1D03               	skipz
  6215  0DBE  0008               	return
  6216  0DBF  0020               	movlb	0	; select bank0
  6217  0DC0  086C               	movf	_product,w
  6218  0DC1  3E0E               	addlw	14
  6219  0DC2  0086               	movwf	6
  6220  0DC3  3001               	movlw	1	; select bank2/3
  6221  0DC4  0087               	movwf	7
  6222  0DC5  0022               	movlb	2	; select bank2
  6223  0DC6  082E               	movf	(_RF_Data^(0+256)+14),w
  6224  0DC7  0601               	xorwf	1,w
  6225  0DC8  1D03               	skipz
  6226  0DC9  0008               	return
  6227                           
  6228                           ;RF_Control_B1.c: 378: setControl_Lights_Table();
  6229  0DCA  318F  2705         	fcall	_setControl_Lights_Table
  6230                           
  6231                           ;RF_Control_B1.c: 379: }
  6232                           ;RF_Control_B1.c: 382: }
  6233                           ;RF_Control_B1.c: 393: }
  6234                           ;RF_Control_B1.c: 394: }
  6235                           ;RF_Control_B1.c: 395: } else {
  6236  0DCC  0008               	return
  6237  0DCD                     l1990:	
  6238                           
  6239                           ;RF_Control_B1.c: 396: __nop();
  6240  0DCD  0000               	nop
  6241  0DCE  0008               	return
  6242  0DCF                     __end_of_getRxData:	
  6243                           
  6244                           	psect	text20
  6245  1682                     __ptext20:	
  6246 ;; *************** function _setLog_Code *****************
  6247 ;; Defined at:
  6248 ;;		line 402 in file "../src/RF_Control_B1.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;		None
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;		None
  6253 ;; Return value:  Size  Location     Type
  6254 ;;		None               void
  6255 ;; Registers used:
  6256 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;Total ram usage:        1 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    5
  6269 ;; This function calls:
  6270 ;;		_setBuz
  6271 ;;		_setMemory_LoopSave
  6272 ;;		_setMemory_Modify
  6273 ;;		_setProductData
  6274 ;; This function is called by:
  6275 ;;		_getRxData
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           
  6280                           ;psect for function _setLog_Code
  6281  1682                     _setLog_Code:	
  6282                           
  6283                           ;RF_Control_B1.c: 403: RF1.Learn = 0;
  6284                           
  6285                           ;incstack = 0
  6286                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6287  1682  0021               	movlb	1	; select bank1
  6288  1683  1330               	bcf	_RF1^(0+128),6
  6289                           
  6290                           ;RF_Control_B1.c: 404: setProductData(12, RF_Data[12]);
  6291  1684  0022               	movlb	2	; select bank2
  6292  1685  082C               	movf	(_RF_Data^(0+256)+12),w
  6293  1686  0020               	movlb	0	; select bank0
  6294  1687  00DD               	movwf	??_setLog_Code
  6295  1688  085D               	movf	??_setLog_Code,w
  6296  1689  00DA               	movwf	setProductData@value
  6297  168A  300C               	movlw	12
  6298  168B  3191  219A  3196   	fcall	_setProductData
  6299                           
  6300                           ;RF_Control_B1.c: 405: setProductData(13, RF_Data[13]);
  6301  168E  0022               	movlb	2	; select bank2
  6302  168F  082D               	movf	(_RF_Data^(0+256)+13),w
  6303  1690  0020               	movlb	0	; select bank0
  6304  1691  00DD               	movwf	??_setLog_Code
  6305  1692  085D               	movf	??_setLog_Code,w
  6306  1693  00DA               	movwf	setProductData@value
  6307  1694  300D               	movlw	13
  6308  1695  3191  219A  3196   	fcall	_setProductData
  6309                           
  6310                           ;RF_Control_B1.c: 406: setProductData(14, RF_Data[14]);
  6311  1698  0022               	movlb	2	; select bank2
  6312  1699  082E               	movf	(_RF_Data^(0+256)+14),w
  6313  169A  0020               	movlb	0	; select bank0
  6314  169B  00DD               	movwf	??_setLog_Code
  6315  169C  085D               	movf	??_setLog_Code,w
  6316  169D  00DA               	movwf	setProductData@value
  6317  169E  300E               	movlw	14
  6318  169F  3191  219A  3196   	fcall	_setProductData
  6319                           
  6320                           ;RF_Control_B1.c: 407: setBuz(1, 100);
  6321  16A2  3064               	movlw	100
  6322  16A3  0020               	movlb	0	; select bank0
  6323  16A4  00A4               	movwf	setBuz@time
  6324  16A5  3000               	movlw	0
  6325  16A6  00A5               	movwf	setBuz@time+1
  6326  16A7  3001               	movlw	1
  6327  16A8  318A  2227  3196   	fcall	_setBuz
  6328                           
  6329                           ;RF_Control_B1.c: 408: if (myMain.First == 1) {
  6330  16AB  0021               	movlb	1	; select bank1
  6331  16AC  1EBF               	btfss	_myMain^(0+128),5
  6332  16AD  2EB2               	goto	l2003
  6333                           
  6334                           ;RF_Control_B1.c: 409: setMemory_LoopSave(1);
  6335  16AE  3001               	movlw	1
  6336  16AF  3192  2289  3196   	fcall	_setMemory_LoopSave
  6337  16B2                     l2003:	
  6338                           
  6339                           ;RF_Control_B1.c: 410: }
  6340                           ;RF_Control_B1.c: 411: setMemory_Modify(1);
  6341  16B2  3001               	movlw	1
  6342  16B3  3192  2239         	fcall	_setMemory_Modify
  6343  16B5  0008               	return
  6344  16B6                     __end_of_setLog_Code:	
  6345                           
  6346                           	psect	text21
  6347  1289                     __ptext21:	
  6348 ;; *************** function _setMemory_LoopSave *****************
  6349 ;; Defined at:
  6350 ;;		line 1094 in file "../src/MCU_B1.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  command         1    wreg     unsigned char 
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;  command         1    3[COMMON] unsigned char 
  6355 ;; Return value:  Size  Location     Type
  6356 ;;		None               void
  6357 ;; Registers used:
  6358 ;;		wreg, status,2, status,0
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6366 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6367 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;Total ram usage:        2 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    3
  6371 ;; This function calls:
  6372 ;;		Nothing
  6373 ;; This function is called by:
  6374 ;;		_setLog_Code
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           
  6379                           ;psect for function _setMemory_LoopSave
  6380  1289                     _setMemory_LoopSave:	
  6381                           
  6382                           ;incstack = 0
  6383                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  6384                           ;setMemory_LoopSave@command stored from wreg
  6385  1289  00F3               	movwf	setMemory_LoopSave@command
  6386                           
  6387                           ;MCU_B1.c: 1095: Memory.LoopSave = command == 1 ? 1 : 0;
  6388  128A  0873               	movf	setMemory_LoopSave@command,w
  6389  128B  3A01               	xorlw	1
  6390  128C  3000               	movlw	0
  6391  128D  1903               	skipnz
  6392  128E  3001               	movlw	1
  6393  128F  00F2               	movwf	??_setMemory_LoopSave
  6394  1290  0DF2               	rlf	??_setMemory_LoopSave,f
  6395  1291  0DF2               	rlf	??_setMemory_LoopSave,f
  6396  1292  0023               	movlb	3	; select bank3
  6397  1293  0844               	movf	(_Memory^(0+384)+36),w
  6398  1294  0672               	xorwf	??_setMemory_LoopSave,w
  6399  1295  39FB               	andlw	-5
  6400  1296  0672               	xorwf	??_setMemory_LoopSave,w
  6401  1297  00C4               	movwf	(_Memory^(0+384)+36)
  6402  1298  0008               	return
  6403  1299                     __end_of_setMemory_LoopSave:	
  6404                           
  6405                           	psect	text22
  6406  0F05                     __ptext22:	
  6407 ;; *************** function _setControl_Lights_Table *****************
  6408 ;; Defined at:
  6409 ;;		line 415 in file "../src/RF_Control_B1.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;		None
  6414 ;; Return value:  Size  Location     Type
  6415 ;;		None               void
  6416 ;; Registers used:
  6417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;Total ram usage:        0 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    7
  6430 ;; This function calls:
  6431 ;;		_getDimmerLights_Status
  6432 ;;		_getMain_All_LightsStatus
  6433 ;;		_setCmd_Status
  6434 ;;		_setDimmerLights_SwOff
  6435 ;;		_setDimmerLights_SwOn
  6436 ;;		_setProductData
  6437 ;;		_setRFSW_AdjControl
  6438 ;;		_setRFSW_Control
  6439 ;;		_setRF_AdjControl
  6440 ;;		_setTxData
  6441 ;; This function is called by:
  6442 ;;		_getRxData
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           
  6447                           ;psect for function _setControl_Lights_Table
  6448  0F05                     _setControl_Lights_Table:	
  6449                           
  6450                           ;RF_Control_B1.c: 417: switch (RF_Data[15]) {
  6451                           
  6452                           ;incstack = 0
  6453                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6454  0F05  2F69               	goto	l8415
  6455  0F06                     l8391:	
  6456                           ;RF_Control_B1.c: 419: case 0x00:
  6457                           
  6458                           
  6459                           ;RF_Control_B1.c: 420: if (getMain_All_LightsStatus() == 1) {
  6460  0F06  3191  211A  318F   	fcall	_getMain_All_LightsStatus
  6461  0F09  3A01               	xorlw	1
  6462  0F0A  1D03               	skipz
  6463  0F0B  2F21               	goto	l8399
  6464                           
  6465                           ;RF_Control_B1.c: 423: if (getDimmerLights_Status(1) == 1) {
  6466  0F0C  3001               	movlw	1
  6467  0F0D  3192  220C  318F   	fcall	_getDimmerLights_Status
  6468  0F10  3A01               	xorlw	1
  6469  0F11  1D03               	skipz
  6470  0F12  2F1B               	goto	l8397
  6471                           
  6472                           ;RF_Control_B1.c: 424: setDimmerLights_SwOn(1);
  6473  0F13  3001               	movlw	1
  6474  0F14  3189  218D  318F   	fcall	_setDimmerLights_SwOn
  6475                           
  6476                           ;RF_Control_B1.c: 425: setDimmerLights_SwOff(1);
  6477  0F17  3001               	movlw	1
  6478  0F18  3197  2790  318F   	fcall	_setDimmerLights_SwOff
  6479  0F1B                     l8397:	
  6480                           
  6481                           ;RF_Control_B1.c: 426: }
  6482                           ;RF_Control_B1.c: 441: setCmd_Status(1, 1);
  6483  0F1B  01F2               	clrf	setCmd_Status@cmd
  6484  0F1C  0AF2               	incf	setCmd_Status@cmd,f
  6485  0F1D  3001               	movlw	1
  6486  0F1E  3193  2337         	fcall	_setCmd_Status
  6487                           
  6488                           ;RF_Control_B1.c: 442: } else {
  6489  0F20  0008               	return
  6490  0F21                     l8399:	
  6491                           
  6492                           ;RF_Control_B1.c: 443: setProductData(9, 0);
  6493  0F21  0020               	movlb	0	; select bank0
  6494  0F22  01DA               	clrf	setProductData@value
  6495  0F23  3009               	movlw	9
  6496  0F24  3191  219A  318F   	fcall	_setProductData
  6497                           
  6498                           ;RF_Control_B1.c: 444: setProductData(11, 0);
  6499  0F27  0020               	movlb	0	; select bank0
  6500  0F28  01DA               	clrf	setProductData@value
  6501  0F29  300B               	movlw	11
  6502  0F2A  3191  219A  318F   	fcall	_setProductData
  6503                           
  6504                           ;RF_Control_B1.c: 445: setProductData(15, 0);
  6505  0F2D  0020               	movlb	0	; select bank0
  6506  0F2E  01DA               	clrf	setProductData@value
  6507  0F2F  300F               	movlw	15
  6508  0F30  3191  219A  318F   	fcall	_setProductData
  6509                           
  6510                           ;RF_Control_B1.c: 446: setProductData(17, 0);
  6511  0F33  0020               	movlb	0	; select bank0
  6512  0F34  01DA               	clrf	setProductData@value
  6513  0F35  3011               	movlw	17
  6514  0F36  3191  219A  318F   	fcall	_setProductData
  6515                           
  6516                           ;RF_Control_B1.c: 447: setTxData();
  6517  0F39  3190  20EA         	fcall	_setTxData
  6518                           
  6519                           ;RF_Control_B1.c: 448: }
  6520                           ;RF_Control_B1.c: 449: break;
  6521  0F3B  0008               	return
  6522  0F3C                     l8403:	
  6523                           ;RF_Control_B1.c: 451: case 0x20:
  6524                           
  6525                           
  6526                           ;RF_Control_B1.c: 452: setProductData(9, 0);
  6527  0F3C  0020               	movlb	0	; select bank0
  6528  0F3D  01DA               	clrf	setProductData@value
  6529  0F3E  3009               	movlw	9
  6530  0F3F  3191  219A  318F   	fcall	_setProductData
  6531                           
  6532                           ;RF_Control_B1.c: 453: setProductData(11, 0);
  6533  0F42  0020               	movlb	0	; select bank0
  6534  0F43  01DA               	clrf	setProductData@value
  6535  0F44  300B               	movlw	11
  6536  0F45  3191  219A  318F   	fcall	_setProductData
  6537                           
  6538                           ;RF_Control_B1.c: 454: setProductData(15, product->Data[15]);
  6539  0F48  0020               	movlb	0	; select bank0
  6540  0F49  086C               	movf	_product,w
  6541  0F4A  0086               	movwf	6
  6542  0F4B  3001               	movlw	1	; select bank2/3
  6543  0F4C  0087               	movwf	7
  6544  0F4D  3001               	movlw	1	; select bank2/3
  6545  0F4E  3F4F               	moviw [15]fsr1
  6546  0F4F  00DA               	movwf	setProductData@value
  6547  0F50  300F               	movlw	15
  6548  0F51  3191  219A  318F   	fcall	_setProductData
  6549                           
  6550                           ;RF_Control_B1.c: 455: setProductData(17, 0);
  6551  0F54  0020               	movlb	0	; select bank0
  6552  0F55  01DA               	clrf	setProductData@value
  6553  0F56  3011               	movlw	17
  6554  0F57  3191  219A  318F   	fcall	_setProductData
  6555                           
  6556                           ;RF_Control_B1.c: 456: setTxData();
  6557  0F5A  3190  20EA         	fcall	_setTxData
  6558                           
  6559                           ;RF_Control_B1.c: 457: break;
  6560  0F5C  0008               	return
  6561  0F5D                     l8407:	
  6562                           ;RF_Control_B1.c: 460: case 0x01:
  6563                           
  6564                           
  6565                           ;RF_Control_B1.c: 461: setRFSW_Control(1);
  6566  0F5D  3001               	movlw	1
  6567  0F5E  3188  2082         	fcall	_setRFSW_Control
  6568                           
  6569                           ;RF_Control_B1.c: 462: break;
  6570  0F60  0008               	return
  6571  0F61                     l8409:	
  6572                           ;RF_Control_B1.c: 466: case 0x11:
  6573                           
  6574                           
  6575                           ;RF_Control_B1.c: 467: setRFSW_AdjControl(1);
  6576  0F61  3001               	movlw	1
  6577  0F62  3186  26A4         	fcall	_setRFSW_AdjControl
  6578                           
  6579                           ;RF_Control_B1.c: 468: break;
  6580  0F64  0008               	return
  6581  0F65                     l8411:	
  6582                           ;RF_Control_B1.c: 470: case 0xd1:
  6583                           
  6584                           
  6585                           ;RF_Control_B1.c: 471: setRF_AdjControl(1);
  6586  0F65  3001               	movlw	1
  6587  0F66  3197  2722         	fcall	_setRF_AdjControl
  6588                           
  6589                           ;RF_Control_B1.c: 505: }
  6590                           
  6591                           ;RF_Control_B1.c: 472: break;
  6592  0F68  0008               	return
  6593  0F69                     l8415:	
  6594  0F69  0022               	movlb	2	; select bank2
  6595  0F6A  082F               	movf	(_RF_Data^(0+256)+15),w
  6596                           
  6597                           ; Switch size 1, requested type "space"
  6598                           ; Number of cases is 5, Range of values is 0 to 209
  6599                           ; switch strategies available:
  6600                           ; Name         Instructions Cycles
  6601                           ; simple_byte           16     9 (average)
  6602                           ; jumptable            260     6 (fixed)
  6603                           ;	Chosen strategy is simple_byte
  6604  0F6B  3A00               	xorlw	0	; case 0
  6605  0F6C  1903               	skipnz
  6606  0F6D  2F06               	goto	l8391
  6607  0F6E  3A01               	xorlw	1	; case 1
  6608  0F6F  1903               	skipnz
  6609  0F70  2F5D               	goto	l8407
  6610  0F71  3A10               	xorlw	16	; case 17
  6611  0F72  1903               	skipnz
  6612  0F73  2F61               	goto	l8409
  6613  0F74  3A31               	xorlw	49	; case 32
  6614  0F75  1903               	skipnz
  6615  0F76  2F3C               	goto	l8403
  6616  0F77  3AF1               	xorlw	241	; case 209
  6617  0F78  1903               	skipnz
  6618  0F79  2F65               	goto	l8411
  6619  0F7A  2F7B               	goto	l2017
  6620  0F7B                     l2017:	
  6621  0F7B  0008               	return
  6622  0F7C                     __end_of_setControl_Lights_Table:	
  6623                           
  6624                           	psect	text23
  6625  1722                     __ptext23:	
  6626 ;; *************** function _setRF_AdjControl *****************
  6627 ;; Defined at:
  6628 ;;		line 584 in file "../src/RF_Control_B1.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;  sw              1    wreg     unsigned char 
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;  sw              1    9[COMMON] unsigned char 
  6633 ;;  dimmingStatu    1    8[COMMON] unsigned char 
  6634 ;;  status          1    7[COMMON] unsigned char 
  6635 ;; Return value:  Size  Location     Type
  6636 ;;		None               void
  6637 ;; Registers used:
  6638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6639 ;; Tracked objects:
  6640 ;;		On entry : 0/0
  6641 ;;		On exit  : 0/0
  6642 ;;		Unchanged: 0/0
  6643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;Total ram usage:        4 bytes
  6649 ;; Hardware stack levels used:    1
  6650 ;; Hardware stack levels required when called:    5
  6651 ;; This function calls:
  6652 ;;		_DimmerLights_SelectPointer
  6653 ;;		_getDimmerIntr_Dimming_Sw
  6654 ;;		_getDimmerLights_Status
  6655 ;; This function is called by:
  6656 ;;		_setControl_Lights_Table
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           
  6661                           ;psect for function _setRF_AdjControl
  6662  1722                     _setRF_AdjControl:	
  6663                           
  6664                           ;incstack = 0
  6665                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6666                           ;setRF_AdjControl@sw stored from wreg
  6667  1722  00F9               	movwf	setRF_AdjControl@sw
  6668                           
  6669                           ;RF_Control_B1.c: 585: char status = 0;
  6670  1723  01F7               	clrf	setRF_AdjControl@status
  6671                           
  6672                           ;RF_Control_B1.c: 587: status = getDimmerLights_Status(sw);
  6673  1724  0879               	movf	setRF_AdjControl@sw,w
  6674  1725  3192  220C  3197   	fcall	_getDimmerLights_Status
  6675  1728  00F6               	movwf	??_setRF_AdjControl
  6676  1729  0876               	movf	??_setRF_AdjControl,w
  6677  172A  00F7               	movwf	setRF_AdjControl@status
  6678                           
  6679                           ;RF_Control_B1.c: 588: char dimmingStatus = 0;
  6680  172B  01F8               	clrf	setRF_AdjControl@dimmingStatus
  6681                           
  6682                           ;RF_Control_B1.c: 589: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  6683  172C  0879               	movf	setRF_AdjControl@sw,w
  6684  172D  3191  21D6  3197   	fcall	_getDimmerIntr_Dimming_Sw
  6685  1730  00F6               	movwf	??_setRF_AdjControl
  6686  1731  0876               	movf	??_setRF_AdjControl,w
  6687  1732  00F8               	movwf	setRF_AdjControl@dimmingStatus
  6688                           
  6689                           ;RF_Control_B1.c: 591: if (status == 1) {
  6690  1733  0877               	movf	setRF_AdjControl@status,w
  6691  1734  3A01               	xorlw	1
  6692  1735  1D03               	skipz
  6693  1736  0008               	return
  6694                           
  6695                           ;RF_Control_B1.c: 592: if (dimmingStatus == 0) {
  6696  1737  08F8               	movf	setRF_AdjControl@dimmingStatus,f
  6697  1738  1D03               	skipz
  6698  1739  2F49               	goto	l8187
  6699                           
  6700                           ;RF_Control_B1.c: 593: DimmerLights_SelectPointer(sw);
  6701  173A  0879               	movf	setRF_AdjControl@sw,w
  6702  173B  3191  2158         	fcall	_DimmerLights_SelectPointer
  6703                           
  6704                           ;RF_Control_B1.c: 594: DimmerLights->DimmingTrigger = 1;
  6705  173D  0020               	movlb	0	; select bank0
  6706  173E  086A               	movf	_DimmerLights,w
  6707  173F  0086               	movwf	6
  6708  1740  3001               	movlw	1	; select bank2/3
  6709  1741  0087               	movwf	7
  6710  1742  1601               	bsf	1,4
  6711                           
  6712                           ;RF_Control_B1.c: 595: DimmerLights->DimmingSwitch = 1;
  6713  1743  086A               	movf	_DimmerLights,w
  6714  1744  0086               	movwf	6
  6715  1745  3001               	movlw	1	; select bank2/3
  6716  1746  0087               	movwf	7
  6717  1747  1681               	bsf	1,5
  6718                           
  6719                           ;RF_Control_B1.c: 597: } else {
  6720  1748  0008               	return
  6721  1749                     l8187:	
  6722                           
  6723                           ;RF_Control_B1.c: 598: DimmerLights_SelectPointer(sw);
  6724  1749  0879               	movf	setRF_AdjControl@sw,w
  6725  174A  3191  2158         	fcall	_DimmerLights_SelectPointer
  6726                           
  6727                           ;RF_Control_B1.c: 599: DimmerLights->DimmingTrigger = 1;
  6728  174C  0020               	movlb	0	; select bank0
  6729  174D  086A               	movf	_DimmerLights,w
  6730  174E  0086               	movwf	6
  6731  174F  3001               	movlw	1	; select bank2/3
  6732  1750  0087               	movwf	7
  6733  1751  1601               	bsf	1,4
  6734                           
  6735                           ;RF_Control_B1.c: 600: DimmerLights->DimmingSwitch = 0;
  6736  1752  086A               	movf	_DimmerLights,w
  6737  1753  0086               	movwf	6
  6738  1754  3001               	movlw	1	; select bank2/3
  6739  1755  0087               	movwf	7
  6740  1756  1281               	bcf	1,5
  6741  1757  0008               	return
  6742  1758                     __end_of_setRF_AdjControl:	
  6743                           
  6744                           	psect	text24
  6745  0882                     __ptext24:	
  6746 ;; *************** function _setRFSW_Control *****************
  6747 ;; Defined at:
  6748 ;;		line 513 in file "../src/RF_Control_B1.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;  sw              1    wreg     unsigned char 
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;  sw              1   71[BANK0 ] unsigned char 
  6753 ;;  status          1   70[BANK0 ] unsigned char 
  6754 ;; Return value:  Size  Location     Type
  6755 ;;		None               void
  6756 ;; Registers used:
  6757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;Total ram usage:        3 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    6
  6770 ;; This function calls:
  6771 ;;		_getDimmerLights_Status
  6772 ;;		_setBuz
  6773 ;;		_setDelayOff_GO
  6774 ;;		_setDimmerLights_SwOff
  6775 ;;		_setDimmerLights_SwOn
  6776 ;;		_setRF_DimmerLights
  6777 ;;		_setTxData
  6778 ;; This function is called by:
  6779 ;;		_setControl_Lights_Table
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           
  6784                           ;psect for function _setRFSW_Control
  6785  0882                     _setRFSW_Control:	
  6786                           
  6787                           ;incstack = 0
  6788                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6789                           ;setRFSW_Control@sw stored from wreg
  6790  0882  0020               	movlb	0	; select bank0
  6791  0883  00E7               	movwf	setRFSW_Control@sw
  6792                           
  6793                           ;RF_Control_B1.c: 514: char status = 0;
  6794  0884  01E6               	clrf	setRFSW_Control@status
  6795                           
  6796                           ;RF_Control_B1.c: 516: if (RF_Data[16] == 0x80) {
  6797  0885  0022               	movlb	2	; select bank2
  6798  0886  0830               	movf	(_RF_Data^(0+256)+16),w
  6799  0887  3A80               	xorlw	128
  6800  0888  1D03               	skipz
  6801  0889  28B5               	goto	l8137
  6802                           
  6803                           ;RF_Control_B1.c: 517: setDelayOff_GO(sw, 1, RF_Data[17]);
  6804  088A  0020               	movlb	0	; select bank0
  6805  088B  01DD               	clrf	setDelayOff_GO@command
  6806  088C  0ADD               	incf	setDelayOff_GO@command,f
  6807  088D  0022               	movlb	2	; select bank2
  6808  088E  0831               	movf	(_RF_Data^(0+256)+17),w
  6809  088F  0020               	movlb	0	; select bank0
  6810  0890  00E5               	movwf	??_setRFSW_Control
  6811  0891  0865               	movf	??_setRFSW_Control,w
  6812  0892  00DE               	movwf	setDelayOff_GO@value
  6813  0893  0867               	movf	setRFSW_Control@sw,w
  6814  0894  318F  277C  3188   	fcall	_setDelayOff_GO
  6815                           
  6816                           ;RF_Control_B1.c: 518: if (getDimmerLights_Status(sw) == 1) {
  6817  0897  0020               	movlb	0	; select bank0
  6818  0898  0867               	movf	setRFSW_Control@sw,w
  6819  0899  3192  220C  3188   	fcall	_getDimmerLights_Status
  6820  089C  3A01               	xorlw	1
  6821  089D  1D03               	skipz
  6822  089E  28B5               	goto	l8137
  6823                           
  6824                           ;RF_Control_B1.c: 519: setBuz(1, 100);
  6825  089F  3064               	movlw	100
  6826  08A0  0020               	movlb	0	; select bank0
  6827  08A1  00A4               	movwf	setBuz@time
  6828  08A2  3000               	movlw	0
  6829  08A3  00A5               	movwf	setBuz@time+1
  6830  08A4  3001               	movlw	1
  6831  08A5  318A  2227  3188   	fcall	_setBuz
  6832                           
  6833                           ;RF_Control_B1.c: 520: setRF_DimmerLights(sw, 1);
  6834  08A8  0020               	movlb	0	; select bank0
  6835  08A9  01DD               	clrf	setRF_DimmerLights@on
  6836  08AA  0ADD               	incf	setRF_DimmerLights@on,f
  6837  08AB  0867               	movf	setRFSW_Control@sw,w
  6838  08AC  318D  25CF  3188   	fcall	_setRF_DimmerLights
  6839                           
  6840                           ;RF_Control_B1.c: 521: setTxData();
  6841  08AF  3190  20EA  3188   	fcall	_setTxData
  6842                           
  6843                           ;RF_Control_B1.c: 522: status = 1;
  6844  08B2  0020               	movlb	0	; select bank0
  6845  08B3  01E6               	clrf	setRFSW_Control@status
  6846  08B4  0AE6               	incf	setRFSW_Control@status,f
  6847  08B5                     l8137:	
  6848                           
  6849                           ;RF_Control_B1.c: 523: }
  6850                           ;RF_Control_B1.c: 524: }
  6851                           ;RF_Control_B1.c: 526: if (status == 0) {
  6852  08B5  0020               	movlb	0	; select bank0
  6853  08B6  08E6               	movf	setRFSW_Control@status,f
  6854  08B7  1D03               	skipz
  6855  08B8  0008               	return
  6856                           
  6857                           ;RF_Control_B1.c: 528: setDimmerLights_SwOn(sw);
  6858  08B9  0867               	movf	setRFSW_Control@sw,w
  6859  08BA  3189  218D  3188   	fcall	_setDimmerLights_SwOn
  6860                           
  6861                           ;RF_Control_B1.c: 529: setDimmerLights_SwOff(sw);
  6862  08BD  0020               	movlb	0	; select bank0
  6863  08BE  0867               	movf	setRFSW_Control@sw,w
  6864  08BF  3197  2790         	fcall	_setDimmerLights_SwOff
  6865  08C1  0008               	return
  6866  08C2                     __end_of_setRFSW_Control:	
  6867                           
  6868                           	psect	text25
  6869  06A4                     __ptext25:	
  6870 ;; *************** function _setRFSW_AdjControl *****************
  6871 ;; Defined at:
  6872 ;;		line 536 in file "../src/RF_Control_B1.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;  sw              1    wreg     unsigned char 
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;  sw              1   64[BANK0 ] unsigned char 
  6877 ;;  status          1   63[BANK0 ] unsigned char 
  6878 ;; Return value:  Size  Location     Type
  6879 ;;		None               void
  6880 ;; Registers used:
  6881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6882 ;; Tracked objects:
  6883 ;;		On entry : 0/0
  6884 ;;		On exit  : 0/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6889 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6890 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;Total ram usage:        4 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:    6
  6894 ;; This function calls:
  6895 ;;		_getDimmerLights_PercentToValue
  6896 ;;		_getDimmerLights_Status
  6897 ;;		_setBuz
  6898 ;;		_setDimmerIntr_Dimming_RF
  6899 ;;		_setDimmerIntr_MaxmumValue
  6900 ;;		_setDimmerLights_DimmingRun
  6901 ;;		_setDimmerLights_SwOff
  6902 ;;		_setDimmerLights_SwOn
  6903 ;;		_setMemory_Modify
  6904 ;;		_setProductData
  6905 ;;		_setTxData
  6906 ;; This function is called by:
  6907 ;;		_setControl_Lights_Table
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           
  6912                           ;psect for function _setRFSW_AdjControl
  6913  06A4                     _setRFSW_AdjControl:	
  6914                           
  6915                           ;incstack = 0
  6916                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6917                           ;setRFSW_AdjControl@sw stored from wreg
  6918  06A4  0020               	movlb	0	; select bank0
  6919  06A5  00E0               	movwf	setRFSW_AdjControl@sw
  6920                           
  6921                           ;RF_Control_B1.c: 537: char status = 0;
  6922  06A6  01DF               	clrf	setRFSW_AdjControl@status
  6923                           
  6924                           ;RF_Control_B1.c: 539: status = getDimmerLights_Status(sw);
  6925  06A7  0860               	movf	setRFSW_AdjControl@sw,w
  6926  06A8  3192  220C  3186   	fcall	_getDimmerLights_Status
  6927  06AB  0020               	movlb	0	; select bank0
  6928  06AC  00DD               	movwf	??_setRFSW_AdjControl
  6929  06AD  085D               	movf	??_setRFSW_AdjControl,w
  6930  06AE  00DF               	movwf	setRFSW_AdjControl@status
  6931                           
  6932                           ;RF_Control_B1.c: 541: if (RF_Data[9] > 0x64) {
  6933  06AF  3065               	movlw	101
  6934  06B0  0022               	movlb	2	; select bank2
  6935  06B1  0229               	subwf	(_RF_Data^(0+256)+9),w
  6936  06B2  1C03               	skipc
  6937  06B3  2EBB               	goto	l8149
  6938                           
  6939                           ;RF_Control_B1.c: 542: RF_Data[9] = 0x64;
  6940  06B4  3064               	movlw	100
  6941  06B5  0020               	movlb	0	; select bank0
  6942  06B6  00DD               	movwf	??_setRFSW_AdjControl
  6943  06B7  085D               	movf	??_setRFSW_AdjControl,w
  6944  06B8  0022               	movlb	2	; select bank2
  6945  06B9  00A9               	movwf	(_RF_Data^(0+256)+9)
  6946                           
  6947                           ;RF_Control_B1.c: 543: } else if (RF_Data[9] < 0x01) {
  6948  06BA  2EC0               	goto	l8153
  6949  06BB                     l8149:	
  6950  06BB  08A9               	movf	(_RF_Data^(0+256)+9),f
  6951  06BC  1D03               	skipz
  6952  06BD  2EC0               	goto	l8153
  6953                           
  6954                           ;RF_Control_B1.c: 544: RF_Data[9] = 0x01;
  6955  06BE  01A9               	clrf	(_RF_Data^(0+256)+9)
  6956  06BF  0AA9               	incf	(_RF_Data^(0+256)+9),f
  6957  06C0                     l8153:	
  6958                           
  6959                           ;RF_Control_B1.c: 545: }
  6960                           ;RF_Control_B1.c: 546: setProductData(9, RF_Data[9]);
  6961  06C0  0829               	movf	(_RF_Data^(0+256)+9),w
  6962  06C1  0020               	movlb	0	; select bank0
  6963  06C2  00DD               	movwf	??_setRFSW_AdjControl
  6964  06C3  085D               	movf	??_setRFSW_AdjControl,w
  6965  06C4  00DA               	movwf	setProductData@value
  6966  06C5  3009               	movlw	9
  6967  06C6  3191  219A  3186   	fcall	_setProductData
  6968                           
  6969                           ;RF_Control_B1.c: 547: setProductData(11, sw);
  6970  06C9  0020               	movlb	0	; select bank0
  6971  06CA  0860               	movf	setRFSW_AdjControl@sw,w
  6972  06CB  00DD               	movwf	??_setRFSW_AdjControl
  6973  06CC  085D               	movf	??_setRFSW_AdjControl,w
  6974  06CD  00DA               	movwf	setProductData@value
  6975  06CE  300B               	movlw	11
  6976  06CF  3191  219A  3186   	fcall	_setProductData
  6977                           
  6978                           ;RF_Control_B1.c: 548: setProductData(17, product->Data[26 + sw]);
  6979  06D2  0020               	movlb	0	; select bank0
  6980  06D3  0860               	movf	setRFSW_AdjControl@sw,w
  6981  06D4  3E1A               	addlw	26
  6982  06D5  076C               	addwf	_product,w
  6983  06D6  00DD               	movwf	??_setRFSW_AdjControl
  6984  06D7  085D               	movf	??_setRFSW_AdjControl,w
  6985  06D8  0086               	movwf	6
  6986  06D9  3001               	movlw	1	; select bank2/3
  6987  06DA  0087               	movwf	7
  6988  06DB  0801               	movf	1,w
  6989  06DC  00DE               	movwf	??_setRFSW_AdjControl+1
  6990  06DD  085E               	movf	??_setRFSW_AdjControl+1,w
  6991  06DE  00DA               	movwf	setProductData@value
  6992  06DF  3011               	movlw	17
  6993  06E0  3191  219A  3186   	fcall	_setProductData
  6994                           
  6995                           ;RF_Control_B1.c: 549: setProductData((20 + sw), RF_Data[9]);
  6996  06E3  0022               	movlb	2	; select bank2
  6997  06E4  0829               	movf	(_RF_Data^(0+256)+9),w
  6998  06E5  0020               	movlb	0	; select bank0
  6999  06E6  00DD               	movwf	??_setRFSW_AdjControl
  7000  06E7  085D               	movf	??_setRFSW_AdjControl,w
  7001  06E8  00DA               	movwf	setProductData@value
  7002  06E9  0860               	movf	setRFSW_AdjControl@sw,w
  7003  06EA  3E14               	addlw	20
  7004  06EB  3191  219A  3186   	fcall	_setProductData
  7005                           
  7006                           ;RF_Control_B1.c: 557: setMemory_Modify(1);
  7007  06EE  3001               	movlw	1
  7008  06EF  3192  2239  3186   	fcall	_setMemory_Modify
  7009                           
  7010                           ;RF_Control_B1.c: 561: if (status == 1) {
  7011  06F2  0020               	movlb	0	; select bank0
  7012  06F3  085F               	movf	setRFSW_AdjControl@status,w
  7013  06F4  3A01               	xorlw	1
  7014  06F5  1D03               	skipz
  7015  06F6  2F17               	goto	l8165
  7016                           
  7017                           ;RF_Control_B1.c: 563: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7018  06F7  0022               	movlb	2	; select bank2
  7019  06F8  0829               	movf	(_RF_Data^(0+256)+9),w
  7020  06F9  318C  243B  3186   	fcall	_getDimmerLights_PercentToValue
  7021  06FC  0020               	movlb	0	; select bank0
  7022  06FD  00DD               	movwf	??_setRFSW_AdjControl
  7023  06FE  085D               	movf	??_setRFSW_AdjControl,w
  7024  06FF  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  7025  0700  0860               	movf	setRFSW_AdjControl@sw,w
  7026  0701  3191  21A6  3186   	fcall	_setDimmerIntr_MaxmumValue
  7027                           
  7028                           ;RF_Control_B1.c: 564: setDimmerIntr_Dimming_RF(sw, 1);
  7029  0704  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  7030  0705  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  7031  0706  0020               	movlb	0	; select bank0
  7032  0707  0860               	movf	setRFSW_AdjControl@sw,w
  7033  0708  3193  2361  3186   	fcall	_setDimmerIntr_Dimming_RF
  7034                           
  7035                           ;RF_Control_B1.c: 566: setTxData();
  7036  070B  3190  20EA  3186   	fcall	_setTxData
  7037                           
  7038                           ;RF_Control_B1.c: 568: setBuz(1, 100);
  7039  070E  3064               	movlw	100
  7040  070F  0020               	movlb	0	; select bank0
  7041  0710  00A4               	movwf	setBuz@time
  7042  0711  3000               	movlw	0
  7043  0712  00A5               	movwf	setBuz@time+1
  7044  0713  3001               	movlw	1
  7045  0714  318A  2227         	fcall	_setBuz
  7046                           
  7047                           ;RF_Control_B1.c: 569: } else if (status == 0) {
  7048  0716  0008               	return
  7049  0717                     l8165:	
  7050  0717  0020               	movlb	0	; select bank0
  7051  0718  08DF               	movf	setRFSW_AdjControl@status,f
  7052  0719  1D03               	skipz
  7053  071A  0008               	return
  7054                           
  7055                           ;RF_Control_B1.c: 573: setDimmerLights_DimmingRun(sw, 1);
  7056  071B  01F4               	clrf	setDimmerLights_DimmingRun@command
  7057  071C  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  7058  071D  0860               	movf	setRFSW_AdjControl@sw,w
  7059  071E  3193  23E2  3186   	fcall	_setDimmerLights_DimmingRun
  7060                           
  7061                           ;RF_Control_B1.c: 574: setDimmerLights_SwOn(sw);
  7062  0721  0020               	movlb	0	; select bank0
  7063  0722  0860               	movf	setRFSW_AdjControl@sw,w
  7064  0723  3189  218D  3186   	fcall	_setDimmerLights_SwOn
  7065                           
  7066                           ;RF_Control_B1.c: 575: setDimmerLights_SwOff(sw);
  7067  0726  0020               	movlb	0	; select bank0
  7068  0727  0860               	movf	setRFSW_AdjControl@sw,w
  7069  0728  3197  2790         	fcall	_setDimmerLights_SwOff
  7070  072A  0008               	return
  7071  072B                     __end_of_setRFSW_AdjControl:	
  7072                           
  7073                           	psect	text26
  7074  13E2                     __ptext26:	
  7075 ;; *************** function _setDimmerLights_DimmingRun *****************
  7076 ;; Defined at:
  7077 ;;		line 1274 in file "../src/Dimmer_B1.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;  lights          1    wreg     unsigned char 
  7080 ;;  command         1    4[COMMON] unsigned char 
  7081 ;; Auto vars:     Size  Location     Type
  7082 ;;  lights          1    6[COMMON] unsigned char 
  7083 ;; Return value:  Size  Location     Type
  7084 ;;		None               void
  7085 ;; Registers used:
  7086 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7087 ;; Tracked objects:
  7088 ;;		On entry : 0/0
  7089 ;;		On exit  : 0/0
  7090 ;;		Unchanged: 0/0
  7091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7092 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;Total ram usage:        3 bytes
  7097 ;; Hardware stack levels used:    1
  7098 ;; Hardware stack levels required when called:    4
  7099 ;; This function calls:
  7100 ;;		_DimmerLights_SelectPointer
  7101 ;; This function is called by:
  7102 ;;		_setRFSW_AdjControl
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           
  7107                           ;psect for function _setDimmerLights_DimmingRun
  7108  13E2                     _setDimmerLights_DimmingRun:	
  7109                           
  7110                           ;incstack = 0
  7111                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7112                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7113  13E2  00F6               	movwf	setDimmerLights_DimmingRun@lights
  7114                           
  7115                           ;Dimmer_B1.c: 1275: DimmerLights_SelectPointer(lights);
  7116  13E3  0876               	movf	setDimmerLights_DimmingRun@lights,w
  7117  13E4  3191  2158         	fcall	_DimmerLights_SelectPointer
  7118                           
  7119                           ;Dimmer_B1.c: 1276: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7120  13E6  0874               	movf	setDimmerLights_DimmingRun@command,w
  7121  13E7  3A01               	xorlw	1
  7122  13E8  3000               	movlw	0
  7123  13E9  1903               	skipnz
  7124  13EA  3001               	movlw	1
  7125  13EB  00F5               	movwf	??_setDimmerLights_DimmingRun
  7126  13EC  0020               	movlb	0	; select bank0
  7127  13ED  0A6A               	incf	_DimmerLights,w
  7128  13EE  0086               	movwf	6
  7129  13EF  3001               	movlw	1	; select bank2/3
  7130  13F0  0087               	movwf	7
  7131  13F1  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  7132  13F2  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  7133  13F3  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  7134  13F4  0801               	movf	1,w
  7135  13F5  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  7136  13F6  39BF               	andlw	-65
  7137  13F7  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  7138  13F8  0081               	movwf	1
  7139  13F9  0008               	return
  7140  13FA                     __end_of_setDimmerLights_DimmingRun:	
  7141                           
  7142                           	psect	text27
  7143  16EC                     __ptext27:	
  7144 ;; *************** function ___lwdiv *****************
  7145 ;; Defined at:
  7146 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;  divisor         2    2[COMMON] unsigned int 
  7149 ;;  dividend        2    4[COMMON] unsigned int 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  quotient        2    8[COMMON] unsigned int 
  7152 ;;  counter         1    7[COMMON] unsigned char 
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  2    2[COMMON] unsigned int 
  7155 ;; Registers used:
  7156 ;;		wreg, status,2, status,0
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7162 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7163 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;Total ram usage:        8 bytes
  7167 ;; Hardware stack levels used:    1
  7168 ;; Hardware stack levels required when called:    3
  7169 ;; This function calls:
  7170 ;;		Nothing
  7171 ;; This function is called by:
  7172 ;;		_setRF_Main
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176                           
  7177                           ;psect for function ___lwdiv
  7178  16EC                     ___lwdiv:	
  7179                           
  7180                           ;incstack = 0
  7181                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7182  16EC  01F8               	clrf	___lwdiv@quotient
  7183  16ED  01F9               	clrf	___lwdiv@quotient+1
  7184  16EE  0873               	movf	___lwdiv@divisor+1,w
  7185  16EF  0472               	iorwf	___lwdiv@divisor,w
  7186  16F0  1903               	skipnz
  7187  16F1  2F1B               	goto	l8787
  7188  16F2  01F7               	clrf	___lwdiv@counter
  7189  16F3  0AF7               	incf	___lwdiv@counter,f
  7190  16F4                     l8775:	
  7191  16F4  1BF3               	btfsc	___lwdiv@divisor+1,7
  7192  16F5  2F00               	goto	l8777
  7193  16F6  3001               	movlw	1
  7194  16F7                     u8995:	
  7195  16F7  35F2               	lslf	___lwdiv@divisor,f
  7196  16F8  0DF3               	rlf	___lwdiv@divisor+1,f
  7197  16F9  0B89               	decfsz	9,f
  7198  16FA  2EF7               	goto	u8995
  7199  16FB  3001               	movlw	1
  7200  16FC  00F6               	movwf	??___lwdiv
  7201  16FD  0876               	movf	??___lwdiv,w
  7202  16FE  07F7               	addwf	___lwdiv@counter,f
  7203  16FF  2EF4               	goto	l8775
  7204  1700                     l8777:	
  7205  1700  3001               	movlw	1
  7206  1701                     u9015:	
  7207  1701  35F8               	lslf	___lwdiv@quotient,f
  7208  1702  0DF9               	rlf	___lwdiv@quotient+1,f
  7209  1703  0B89               	decfsz	9,f
  7210  1704  2F01               	goto	u9015
  7211  1705  0873               	movf	___lwdiv@divisor+1,w
  7212  1706  0275               	subwf	___lwdiv@dividend+1,w
  7213  1707  1D03               	skipz
  7214  1708  2F0B               	goto	u9025
  7215  1709  0872               	movf	___lwdiv@divisor,w
  7216  170A  0274               	subwf	___lwdiv@dividend,w
  7217  170B                     u9025:	
  7218  170B  1C03               	skipc
  7219  170C  2F12               	goto	l8783
  7220  170D  0872               	movf	___lwdiv@divisor,w
  7221  170E  02F4               	subwf	___lwdiv@dividend,f
  7222  170F  0873               	movf	___lwdiv@divisor+1,w
  7223  1710  3BF5               	subwfb	___lwdiv@dividend+1,f
  7224  1711  1478               	bsf	___lwdiv@quotient,0
  7225  1712                     l8783:	
  7226  1712  3001               	movlw	1
  7227  1713                     u9035:	
  7228  1713  36F3               	lsrf	___lwdiv@divisor+1,f
  7229  1714  0CF2               	rrf	___lwdiv@divisor,f
  7230  1715  0B89               	decfsz	9,f
  7231  1716  2F13               	goto	u9035
  7232  1717  3001               	movlw	1
  7233  1718  02F7               	subwf	___lwdiv@counter,f
  7234  1719  1D03               	btfss	3,2
  7235  171A  2F00               	goto	l8777
  7236  171B                     l8787:	
  7237  171B  0879               	movf	___lwdiv@quotient+1,w
  7238  171C  01F3               	clrf	?___lwdiv+1
  7239  171D  07F3               	addwf	?___lwdiv+1,f
  7240  171E  0878               	movf	___lwdiv@quotient,w
  7241  171F  01F2               	clrf	?___lwdiv
  7242  1720  07F2               	addwf	?___lwdiv,f
  7243  1721  0008               	return
  7244  1722                     __end_of___lwdiv:	
  7245                           
  7246                           	psect	text28
  7247  1552                     __ptext28:	
  7248 ;; *************** function _RF_getCommand *****************
  7249 ;; Defined at:
  7250 ;;		line 51 in file "../src/RF_Control_B1.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;		None
  7253 ;; Auto vars:     Size  Location     Type
  7254 ;;  command         2    0[BANK0 ] int 
  7255 ;; Return value:  Size  Location     Type
  7256 ;;                  2    8[COMMON] int 
  7257 ;; Registers used:
  7258 ;;		wreg, status,2, status,0, pclath, cstack
  7259 ;; Tracked objects:
  7260 ;;		On entry : 0/0
  7261 ;;		On exit  : 0/0
  7262 ;;		Unchanged: 0/0
  7263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7267 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7268 ;;Total ram usage:        4 bytes
  7269 ;; Hardware stack levels used:    1
  7270 ;; Hardware stack levels required when called:    4
  7271 ;; This function calls:
  7272 ;;		_getBuz_GO
  7273 ;;		_getRF_KeyStatus
  7274 ;; This function is called by:
  7275 ;;		_setRF_Main
  7276 ;; This function uses a non-reentrant model
  7277 ;;
  7278                           
  7279                           
  7280                           ;psect for function _RF_getCommand
  7281  1552                     _RF_getCommand:	
  7282                           
  7283                           ;RF_Control_B1.c: 55: int command = 0;
  7284                           
  7285                           ;incstack = 0
  7286                           ; Regs used in _RF_getCommand: [wreg+status,2+status,0+pclath+cstack]
  7287  1552  0020               	movlb	0	; select bank0
  7288  1553  01A0               	clrf	RF_getCommand@command
  7289  1554  01A1               	clrf	RF_getCommand@command+1
  7290                           
  7291                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7292  1555  3192  2279  3195   	fcall	_getBuz_GO
  7293  1558  0873               	movf	?_getBuz_GO+1,w
  7294  1559  0472               	iorwf	?_getBuz_GO,w
  7295  155A  1D03               	skipz
  7296  155B  2D70               	goto	l8687
  7297                           
  7298                           ;RF_Control_B1.c: 57: if (getRF_KeyStatus() == 1) {
  7299  155C  3192  22CB  3195   	fcall	_getRF_KeyStatus
  7300  155F  3A01               	xorlw	1
  7301  1560  1D03               	skipz
  7302  1561  2D66               	goto	l1936
  7303                           
  7304                           ;RF_Control_B1.c: 58: if (RF1.Learn == 1) {
  7305  1562  0021               	movlb	1	; select bank1
  7306  1563  1F30               	btfss	_RF1^(0+128),6
  7307  1564  2D70               	goto	l8687
  7308  1565  2D6B               	goto	l8685
  7309  1566                     l1936:	
  7310                           ;RF_Control_B1.c: 60: }
  7311                           ;RF_Control_B1.c: 61: } else {
  7312                           
  7313                           ;RF_Control_B1.c: 59: command = 1;
  7314                           
  7315                           
  7316                           ;RF_Control_B1.c: 62: if (RF1.TransceiveGO == 1) {
  7317  1566  0021               	movlb	1	; select bank1
  7318  1567  1D30               	btfss	_RF1^(0+128),2
  7319  1568  2D6B               	goto	l8685
  7320                           
  7321                           ;RF_Control_B1.c: 63: command = 2;
  7322  1569  3002               	movlw	2
  7323  156A  2D6C               	goto	L2
  7324  156B                     l8685:	
  7325                           ;RF_Control_B1.c: 64: } else {
  7326                           
  7327                           
  7328                           ;RF_Control_B1.c: 65: command = 1;
  7329  156B  3001               	movlw	1
  7330  156C                     L2:	
  7331  156C  0020               	movlb	0	; select bank0
  7332  156D  00A0               	movwf	RF_getCommand@command
  7333  156E  3000               	movlw	0
  7334  156F  00A1               	movwf	RF_getCommand@command+1
  7335  1570                     l8687:	
  7336                           
  7337                           ;RF_Control_B1.c: 66: }
  7338                           ;RF_Control_B1.c: 67: }
  7339                           ;RF_Control_B1.c: 68: }
  7340                           ;RF_Control_B1.c: 69: return command;
  7341  1570  0020               	movlb	0	; select bank0
  7342  1571  0821               	movf	RF_getCommand@command+1,w
  7343  1572  01F9               	clrf	?_RF_getCommand+1
  7344  1573  07F9               	addwf	?_RF_getCommand+1,f
  7345  1574  0820               	movf	RF_getCommand@command,w
  7346  1575  01F8               	clrf	?_RF_getCommand
  7347  1576  07F8               	addwf	?_RF_getCommand,f
  7348  1577  0008               	return
  7349  1578                     __end_of_RF_getCommand:	
  7350                           
  7351                           	psect	text29
  7352  12CB                     __ptext29:	
  7353 ;; *************** function _getRF_KeyStatus *****************
  7354 ;; Defined at:
  7355 ;;		line 250 in file "../src/RF_Control_B1.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;		None
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;  key             1    3[COMMON] unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      unsigned char 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;Total ram usage:        3 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    3
  7376 ;; This function calls:
  7377 ;;		Nothing
  7378 ;; This function is called by:
  7379 ;;		_RF_getCommand
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           
  7384                           ;psect for function _getRF_KeyStatus
  7385  12CB                     _getRF_KeyStatus:	
  7386                           
  7387                           ;RF_Control_B1.c: 251: char key = 0;
  7388                           
  7389                           ;incstack = 0
  7390                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  7391  12CB  01F3               	clrf	getRF_KeyStatus@key
  7392                           
  7393                           ;RF_Control_B1.c: 265: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  7394  12CC  01F4               	clrf	_getRF_KeyStatus$5377
  7395  12CD  0AF4               	incf	_getRF_KeyStatus$5377,f
  7396  12CE  0020               	movlb	0	; select bank0
  7397  12CF  1F0C               	btfss	12,6	;volatile
  7398  12D0  1A0C               	btfsc	12,4	;volatile
  7399  12D1  2AD6               	goto	l8373
  7400  12D2  1C0C               	btfss	12,0	;volatile
  7401  12D3  1B8C               	btfsc	12,7	;volatile
  7402  12D4  2AD6               	goto	l8373
  7403  12D5  01F4               	clrf	_getRF_KeyStatus$5377
  7404  12D6                     l8373:	
  7405  12D6  0874               	movf	_getRF_KeyStatus$5377,w
  7406  12D7  00F2               	movwf	??_getRF_KeyStatus
  7407  12D8  0872               	movf	??_getRF_KeyStatus,w
  7408  12D9  00F3               	movwf	getRF_KeyStatus@key
  7409                           
  7410                           ;RF_Control_B1.c: 267: return key;
  7411  12DA  0873               	movf	getRF_KeyStatus@key,w
  7412  12DB  0008               	return
  7413  12DC                     __end_of_getRF_KeyStatus:	
  7414                           
  7415                           	psect	text30
  7416  1279                     __ptext30:	
  7417 ;; *************** function _getBuz_GO *****************
  7418 ;; Defined at:
  7419 ;;		line 82 in file "../src/Buzzer_B1.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;		None
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;  i               2    6[COMMON] int 
  7424 ;; Return value:  Size  Location     Type
  7425 ;;                  2    2[COMMON] int 
  7426 ;; Registers used:
  7427 ;;		wreg, status,2, status,0
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7433 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7434 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;Total ram usage:        6 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; Hardware stack levels required when called:    3
  7440 ;; This function calls:
  7441 ;;		Nothing
  7442 ;; This function is called by:
  7443 ;;		_RF_getCommand
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           
  7448                           ;psect for function _getBuz_GO
  7449  1279                     _getBuz_GO:	
  7450                           
  7451                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  7452                           
  7453                           ;incstack = 0
  7454                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  7455  1279  0021               	movlb	1	; select bank1
  7456  127A  0C4C               	rrf	_Buz1^(0+128),w
  7457  127B  3901               	andlw	1
  7458  127C  00F4               	movwf	??_getBuz_GO
  7459  127D  01F5               	clrf	??_getBuz_GO+1
  7460  127E  0874               	movf	??_getBuz_GO,w
  7461  127F  00F6               	movwf	getBuz_GO@i
  7462  1280  0875               	movf	??_getBuz_GO+1,w
  7463  1281  00F7               	movwf	getBuz_GO@i+1
  7464                           
  7465                           ;Buzzer_B1.c: 84: return i;
  7466  1282  0877               	movf	getBuz_GO@i+1,w
  7467  1283  01F3               	clrf	?_getBuz_GO+1
  7468  1284  07F3               	addwf	?_getBuz_GO+1,f
  7469  1285  0876               	movf	getBuz_GO@i,w
  7470  1286  01F2               	clrf	?_getBuz_GO
  7471  1287  07F2               	addwf	?_getBuz_GO,f
  7472  1288  0008               	return
  7473  1289                     __end_of_getBuz_GO:	
  7474                           
  7475                           	psect	text31
  7476  10B7                     __ptext31:	
  7477 ;; *************** function _RF_Initialization *****************
  7478 ;; Defined at:
  7479 ;;		line 9 in file "../src/RF_Control_B1.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;		None
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;		None
  7484 ;; Return value:  Size  Location     Type
  7485 ;;		None               void
  7486 ;; Registers used:
  7487 ;;		wreg, status,2, status,0, pclath, cstack
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;Total ram usage:        0 bytes
  7498 ;; Hardware stack levels used:    1
  7499 ;; Hardware stack levels required when called:    4
  7500 ;; This function calls:
  7501 ;;		_setRF_Initialization
  7502 ;; This function is called by:
  7503 ;;		_setRF_Main
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           
  7508                           ;psect for function _RF_Initialization
  7509  10B7                     _RF_Initialization:	
  7510                           
  7511                           ;RF_Control_B1.c: 11: setRF_Initialization();
  7512                           
  7513                           ;incstack = 0
  7514                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7515  10B7  3188  2000         	fcall	_setRF_Initialization
  7516  10B9  0008               	return
  7517  10BA                     __end_of_RF_Initialization:	
  7518                           
  7519                           	psect	text32
  7520  0800                     __ptext32:	
  7521 ;; *************** function _setRF_Initialization *****************
  7522 ;; Defined at:
  7523 ;;		line 17 in file "../src/RF_Control_B1.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;		None
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;		None
  7528 ;; Return value:  Size  Location     Type
  7529 ;;		None               void
  7530 ;; Registers used:
  7531 ;;		wreg
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7539 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;Total ram usage:        1 bytes
  7542 ;; Hardware stack levels used:    1
  7543 ;; Hardware stack levels required when called:    3
  7544 ;; This function calls:
  7545 ;;		Nothing
  7546 ;; This function is called by:
  7547 ;;		_RF_Initialization
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           
  7552                           ;psect for function _setRF_Initialization
  7553  0800                     _setRF_Initialization:	
  7554                           
  7555                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  7556                           
  7557                           ;incstack = 0
  7558                           ; Regs used in _setRF_Initialization: [wreg]
  7559  0800  3015               	movlw	21
  7560  0801  00F2               	movwf	??_setRF_Initialization
  7561  0802  0872               	movf	??_setRF_Initialization,w
  7562  0803  0021               	movlb	1	; select bank1
  7563  0804  00E8               	movwf	_Tx_Length^(0+128)
  7564                           
  7565                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  7566  0805  30C8               	movlw	200
  7567  0806  00B8               	movwf	(_RF1^(0+128)+8)
  7568  0807  3000               	movlw	0
  7569  0808  00B9               	movwf	(_RF1^(0+128)+9)
  7570  0809  0008               	return
  7571  080A                     __end_of_setRF_Initialization:	
  7572                           
  7573                           	psect	text33
  7574  0E9D                     __ptext33:	
  7575 ;; *************** function _CC2500_TxData *****************
  7576 ;; Defined at:
  7577 ;;		line 32 in file "../src/CC2500_B1.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;		None
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;  loop_e          1    7[COMMON] unsigned char 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;		None               void
  7584 ;; Registers used:
  7585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;Total ram usage:        2 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    5
  7598 ;; This function calls:
  7599 ;;		_CC2500_WriteByte
  7600 ;;		_CC2500_WriteCommand
  7601 ;;		_RF_Timeout_Counter
  7602 ;;		_setRF_TimeoutCleared
  7603 ;; This function is called by:
  7604 ;;		_setRF_Main
  7605 ;; This function uses a non-reentrant model
  7606 ;;
  7607                           
  7608                           
  7609                           ;psect for function _CC2500_TxData
  7610  0E9D                     _CC2500_TxData:	
  7611                           
  7612                           ;CC2500_B1.c: 33: unsigned char loop_e;
  7613                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  7614                           
  7615                           ;incstack = 0
  7616                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7617  0E9D  3036               	movlw	54
  7618  0E9E  3194  2414  318E   	fcall	_CC2500_WriteCommand
  7619                           
  7620                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  7621  0EA1  303B               	movlw	59
  7622  0EA2  3194  2414  318E   	fcall	_CC2500_WriteCommand
  7623                           
  7624                           ;CC2500_B1.c: 38: RC0 = 0;
  7625  0EA5  0020               	movlb	0	; select bank0
  7626  0EA6  100E               	bcf	14,0	;volatile
  7627                           
  7628                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  7629  0EA7  307F               	movlw	127
  7630  0EA8  00F6               	movwf	??_CC2500_TxData
  7631  0EA9  0876               	movf	??_CC2500_TxData,w
  7632  0EAA  0021               	movlb	1	; select bank1
  7633  0EAB  00E6               	movwf	_SPI0Buffer^(0+128)
  7634                           
  7635                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  7636  0EAC  2EB0               	goto	l8425
  7637  0EAD                     l8423:	
  7638                           
  7639                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  7640  0EAD  3193  2376  318E   	fcall	_RF_Timeout_Counter
  7641  0EB0                     l8425:	
  7642  0EB0  0020               	movlb	0	; select bank0
  7643  0EB1  1E8E               	btfss	14,5	;volatile
  7644  0EB2  2EB6               	goto	l8429
  7645  0EB3  0021               	movlb	1	; select bank1
  7646  0EB4  1F31               	btfss	(_RF1^(0+128)+1),6
  7647  0EB5  2EAD               	goto	l8423
  7648  0EB6                     l8429:	
  7649                           
  7650                           ;CC2500_B1.c: 42: };
  7651                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  7652  0EB6  3190  20D1  318E   	fcall	_setRF_TimeoutCleared
  7653                           
  7654                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  7655  0EB9  3193  23CA  318E   	fcall	_CC2500_WriteByte
  7656                           
  7657                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  7658  0EBC  0021               	movlb	1	; select bank1
  7659  0EBD  0868               	movf	_Tx_Length^(0+128),w
  7660  0EBE  00F6               	movwf	??_CC2500_TxData
  7661  0EBF  0876               	movf	??_CC2500_TxData,w
  7662  0EC0  00E6               	movwf	_SPI0Buffer^(0+128)
  7663                           
  7664                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  7665  0EC1  3193  23CA  318E   	fcall	_CC2500_WriteByte
  7666                           
  7667                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  7668  0EC4  01F7               	clrf	CC2500_TxData@loop_e
  7669  0EC5                     l8443:	
  7670  0EC5  0021               	movlb	1	; select bank1
  7671  0EC6  0868               	movf	_Tx_Length^(0+128),w
  7672  0EC7  0277               	subwf	CC2500_TxData@loop_e,w
  7673  0EC8  1803               	btfsc	3,0
  7674  0EC9  2EDC               	goto	l231
  7675                           
  7676                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  7677  0ECA  0877               	movf	CC2500_TxData@loop_e,w
  7678  0ECB  3E20               	addlw	_RF_Data& (0+255)
  7679  0ECC  0086               	movwf	6
  7680  0ECD  3001               	movlw	1	; select bank2/3
  7681  0ECE  0087               	movwf	7
  7682  0ECF  0801               	movf	1,w
  7683  0ED0  00F6               	movwf	??_CC2500_TxData
  7684  0ED1  0876               	movf	??_CC2500_TxData,w
  7685  0ED2  0021               	movlb	1	; select bank1
  7686  0ED3  00E6               	movwf	_SPI0Buffer^(0+128)
  7687                           
  7688                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  7689  0ED4  3193  23CA  318E   	fcall	_CC2500_WriteByte
  7690  0ED7  3001               	movlw	1
  7691  0ED8  00F6               	movwf	??_CC2500_TxData
  7692  0ED9  0876               	movf	??_CC2500_TxData,w
  7693  0EDA  07F7               	addwf	CC2500_TxData@loop_e,f
  7694  0EDB  2EC5               	goto	l8443
  7695  0EDC                     l231:	
  7696                           
  7697                           ;CC2500_B1.c: 51: }
  7698                           ;CC2500_B1.c: 52: RC0 = 1;
  7699  0EDC  0020               	movlb	0	; select bank0
  7700  0EDD  140E               	bsf	14,0	;volatile
  7701                           
  7702                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  7703  0EDE  3035               	movlw	53
  7704  0EDF  3194  2414  318E   	fcall	_CC2500_WriteCommand
  7705                           
  7706                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  7707  0EE2  2EE6               	goto	l8449
  7708  0EE3                     l8447:	
  7709                           
  7710                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  7711  0EE3  3193  2376  318E   	fcall	_RF_Timeout_Counter
  7712  0EE6                     l8449:	
  7713  0EE6  0020               	movlb	0	; select bank0
  7714  0EE7  188E               	btfsc	14,1	;volatile
  7715  0EE8  2EEC               	goto	l8453
  7716  0EE9  0021               	movlb	1	; select bank1
  7717  0EEA  1F31               	btfss	(_RF1^(0+128)+1),6
  7718  0EEB  2EE3               	goto	l8447
  7719  0EEC                     l8453:	
  7720                           
  7721                           ;CC2500_B1.c: 56: };
  7722                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  7723  0EEC  3190  20D1  318E   	fcall	_setRF_TimeoutCleared
  7724                           
  7725                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  7726  0EEF  2EF3               	goto	l8457
  7727  0EF0                     l8455:	
  7728                           
  7729                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  7730  0EF0  3193  2376  318E   	fcall	_RF_Timeout_Counter
  7731  0EF3                     l8457:	
  7732  0EF3  0020               	movlb	0	; select bank0
  7733  0EF4  1C8E               	btfss	14,1	;volatile
  7734  0EF5  2EF9               	goto	l8461
  7735  0EF6  0021               	movlb	1	; select bank1
  7736  0EF7  1F31               	btfss	(_RF1^(0+128)+1),6
  7737  0EF8  2EF0               	goto	l8455
  7738  0EF9                     l8461:	
  7739                           
  7740                           ;CC2500_B1.c: 61: };
  7741                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  7742  0EF9  3190  20D1  318E   	fcall	_setRF_TimeoutCleared
  7743                           
  7744                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  7745  0EFC  3036               	movlw	54
  7746  0EFD  3194  2414  318E   	fcall	_CC2500_WriteCommand
  7747                           
  7748                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  7749  0F00  303B               	movlw	59
  7750  0F01  3194  2414         	fcall	_CC2500_WriteCommand
  7751                           
  7752                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  7753  0F03  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  7754  0F04  0008               	return
  7755  0F05                     __end_of_CC2500_TxData:	
  7756                           
  7757                           	psect	text34
  7758  0BDB                     __ptext34:	
  7759 ;; *************** function _CC2500_RxData *****************
  7760 ;; Defined at:
  7761 ;;		line 75 in file "../src/CC2500_B1.c"
  7762 ;; Parameters:    Size  Location     Type
  7763 ;;		None
  7764 ;; Auto vars:     Size  Location     Type
  7765 ;;  loop_f          1    7[COMMON] unsigned char 
  7766 ;; Return value:  Size  Location     Type
  7767 ;;		None               void
  7768 ;; Registers used:
  7769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7770 ;; Tracked objects:
  7771 ;;		On entry : 0/0
  7772 ;;		On exit  : 0/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;Total ram usage:        2 bytes
  7780 ;; Hardware stack levels used:    1
  7781 ;; Hardware stack levels required when called:    5
  7782 ;; This function calls:
  7783 ;;		_CC2500_ReadByte
  7784 ;;		_CC2500_ReadStatus
  7785 ;;		_CC2500_WriteByte
  7786 ;;		_CC2500_WriteCommand
  7787 ;;		_RF_Timeout_Counter
  7788 ;;		_setRF_TimeoutCleared
  7789 ;; This function is called by:
  7790 ;;		_setRF_Main
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           
  7795                           ;psect for function _CC2500_RxData
  7796  0BDB                     _CC2500_RxData:	
  7797                           
  7798                           ;CC2500_B1.c: 76: unsigned char loop_f;
  7799                           ;CC2500_B1.c: 80: if (RC1 == 0) {
  7800                           
  7801                           ;incstack = 0
  7802                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7803  0BDB  0020               	movlb	0	; select bank0
  7804  0BDC  188E               	btfsc	14,1	;volatile
  7805  0BDD  0008               	return
  7806                           
  7807                           ;CC2500_B1.c: 89: CC2500_ReadStatus(0x3B);
  7808  0BDE  303B               	movlw	59
  7809  0BDF  3195  250A  318B   	fcall	_CC2500_ReadStatus
  7810                           
  7811                           ;CC2500_B1.c: 91: if (s_data != 0) {
  7812  0BE2  0021               	movlb	1	; select bank1
  7813  0BE3  086B               	movf	_s_data^(0+128),w
  7814  0BE4  1903               	btfsc	3,2
  7815  0BE5  0008               	return
  7816                           
  7817                           ;CC2500_B1.c: 92: RC0 = 0;
  7818  0BE6  0020               	movlb	0	; select bank0
  7819  0BE7  100E               	bcf	14,0	;volatile
  7820                           
  7821                           ;CC2500_B1.c: 93: SPI0Buffer = 0x3F + 0xC0;
  7822  0BE8  30FF               	movlw	255
  7823  0BE9  00F6               	movwf	??_CC2500_RxData
  7824  0BEA  0876               	movf	??_CC2500_RxData,w
  7825  0BEB  0021               	movlb	1	; select bank1
  7826  0BEC  00E6               	movwf	_SPI0Buffer^(0+128)
  7827                           
  7828                           ;CC2500_B1.c: 95: while (RC5 == 1 && RF1.Timeout == 0) {
  7829  0BED  2BF1               	goto	l8481
  7830  0BEE                     l8479:	
  7831                           
  7832                           ;CC2500_B1.c: 96: RF_Timeout_Counter();
  7833  0BEE  3193  2376  318B   	fcall	_RF_Timeout_Counter
  7834  0BF1                     l8481:	
  7835  0BF1  0020               	movlb	0	; select bank0
  7836  0BF2  1E8E               	btfss	14,5	;volatile
  7837  0BF3  2BF7               	goto	l8485
  7838  0BF4  0021               	movlb	1	; select bank1
  7839  0BF5  1F31               	btfss	(_RF1^(0+128)+1),6
  7840  0BF6  2BEE               	goto	l8479
  7841  0BF7                     l8485:	
  7842                           
  7843                           ;CC2500_B1.c: 97: };
  7844                           ;CC2500_B1.c: 98: setRF_TimeoutCleared();
  7845  0BF7  3190  20D1  318B   	fcall	_setRF_TimeoutCleared
  7846                           
  7847                           ;CC2500_B1.c: 100: CC2500_WriteByte();
  7848  0BFA  3193  23CA  318B   	fcall	_CC2500_WriteByte
  7849                           
  7850                           ;CC2500_B1.c: 101: CC2500_ReadByte();
  7851  0BFD  3194  242E  318B   	fcall	_CC2500_ReadByte
  7852                           
  7853                           ;CC2500_B1.c: 102: Rx_Length = SPI0Buffer;
  7854  0C00  0021               	movlb	1	; select bank1
  7855  0C01  0866               	movf	_SPI0Buffer^(0+128),w
  7856  0C02  00F6               	movwf	??_CC2500_RxData
  7857  0C03  0876               	movf	??_CC2500_RxData,w
  7858  0C04  00E5               	movwf	_Rx_Length^(0+128)
  7859                           
  7860                           ;CC2500_B1.c: 103: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  7861  0C05  01F7               	clrf	CC2500_RxData@loop_f
  7862  0C06                     l8501:	
  7863  0C06  0865               	movf	_Rx_Length^(0+128),w
  7864  0C07  0277               	subwf	CC2500_RxData@loop_f,w
  7865  0C08  1803               	btfsc	3,0
  7866  0C09  2C1C               	goto	l8503
  7867                           
  7868                           ;CC2500_B1.c: 104: CC2500_ReadByte();
  7869  0C0A  3194  242E  318B   	fcall	_CC2500_ReadByte
  7870                           
  7871                           ;CC2500_B1.c: 105: RF_Data[loop_f] = SPI0Buffer;
  7872  0C0D  0021               	movlb	1	; select bank1
  7873  0C0E  0866               	movf	_SPI0Buffer^(0+128),w
  7874  0C0F  00F6               	movwf	??_CC2500_RxData
  7875  0C10  0877               	movf	CC2500_RxData@loop_f,w
  7876  0C11  3E20               	addlw	_RF_Data& (0+255)
  7877  0C12  0086               	movwf	6
  7878  0C13  3001               	movlw	1	; select bank2/3
  7879  0C14  0087               	movwf	7
  7880  0C15  0876               	movf	??_CC2500_RxData,w
  7881  0C16  0081               	movwf	1
  7882  0C17  3001               	movlw	1
  7883  0C18  00F6               	movwf	??_CC2500_RxData
  7884  0C19  0876               	movf	??_CC2500_RxData,w
  7885  0C1A  07F7               	addwf	CC2500_RxData@loop_f,f
  7886  0C1B  2C06               	goto	l8501
  7887  0C1C                     l8503:	
  7888                           
  7889                           ;CC2500_B1.c: 106: }
  7890                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  7891  0C1C  3194  242E  318B   	fcall	_CC2500_ReadByte
  7892                           
  7893                           ;CC2500_B1.c: 108: RSSI = SPI0Buffer;
  7894  0C1F  0021               	movlb	1	; select bank1
  7895  0C20  0866               	movf	_SPI0Buffer^(0+128),w
  7896  0C21  00F6               	movwf	??_CC2500_RxData
  7897  0C22  0876               	movf	??_CC2500_RxData,w
  7898  0C23  00E4               	movwf	_RSSI^(0+128)
  7899                           
  7900                           ;CC2500_B1.c: 109: CC2500_ReadByte();
  7901  0C24  3194  242E  318B   	fcall	_CC2500_ReadByte
  7902                           
  7903                           ;CC2500_B1.c: 110: CRC = SPI0Buffer;
  7904  0C27  0021               	movlb	1	; select bank1
  7905  0C28  0866               	movf	_SPI0Buffer^(0+128),w
  7906  0C29  00F6               	movwf	??_CC2500_RxData
  7907  0C2A  0876               	movf	??_CC2500_RxData,w
  7908  0C2B  00DF               	movwf	_CRC^(0+128)
  7909                           
  7910                           ;CC2500_B1.c: 111: RC0 = 1;
  7911  0C2C  0020               	movlb	0	; select bank0
  7912  0C2D  140E               	bsf	14,0	;volatile
  7913                           
  7914                           ;CC2500_B1.c: 112: if (CRC & 0x80)
  7915  0C2E  0021               	movlb	1	; select bank1
  7916  0C2F  1BDF               	btfsc	_CRC^(0+128),7
  7917                           
  7918                           ;CC2500_B1.c: 113: Receive_OK = 1;
  7919  0C30  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  7920                           
  7921                           ;CC2500_B1.c: 115: RF1.ReceiveGO = 1;
  7922  0C31  14B0               	bsf	_RF1^(0+128),1
  7923                           
  7924                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x36);
  7925  0C32  3036               	movlw	54
  7926  0C33  3194  2414  318B   	fcall	_CC2500_WriteCommand
  7927                           
  7928                           ;CC2500_B1.c: 117: CC2500_WriteCommand(0x3A);
  7929  0C36  303A               	movlw	58
  7930  0C37  3194  2414         	fcall	_CC2500_WriteCommand
  7931  0C39  0021               	movlb	1	; select bank1
  7932  0C3A  0008               	return
  7933  0C3B                     __end_of_CC2500_RxData:	
  7934                           
  7935                           	psect	text35
  7936  150A                     __ptext35:	
  7937 ;; *************** function _CC2500_ReadStatus *****************
  7938 ;; Defined at:
  7939 ;;		line 309 in file "../src/CC2500_B1.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;  status_addr     1    wreg     unsigned char 
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;  status_addr     1    5[COMMON] unsigned char 
  7944 ;; Return value:  Size  Location     Type
  7945 ;;		None               void
  7946 ;; Registers used:
  7947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7948 ;; Tracked objects:
  7949 ;;		On entry : 0/0
  7950 ;;		On exit  : 0/0
  7951 ;;		Unchanged: 0/0
  7952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;Total ram usage:        2 bytes
  7958 ;; Hardware stack levels used:    1
  7959 ;; Hardware stack levels required when called:    4
  7960 ;; This function calls:
  7961 ;;		_CC2500_ReadByte
  7962 ;;		_CC2500_WriteByte
  7963 ;;		_RF_Timeout_Counter
  7964 ;;		_setRF_TimeoutCleared
  7965 ;; This function is called by:
  7966 ;;		_CC2500_RxData
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           
  7971                           ;psect for function _CC2500_ReadStatus
  7972  150A                     _CC2500_ReadStatus:	
  7973                           
  7974                           ;incstack = 0
  7975                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7976                           ;CC2500_ReadStatus@status_addr stored from wreg
  7977  150A  00F5               	movwf	CC2500_ReadStatus@status_addr
  7978                           
  7979                           ;CC2500_B1.c: 310: RC0 = 0;
  7980  150B  0020               	movlb	0	; select bank0
  7981  150C  100E               	bcf	14,0	;volatile
  7982                           
  7983                           ;CC2500_B1.c: 311: SPI0Buffer = status_addr + 0xC0;
  7984  150D  0875               	movf	CC2500_ReadStatus@status_addr,w
  7985  150E  3EC0               	addlw	192
  7986  150F  00F4               	movwf	??_CC2500_ReadStatus
  7987  1510  0874               	movf	??_CC2500_ReadStatus,w
  7988  1511  0021               	movlb	1	; select bank1
  7989  1512  00E6               	movwf	_SPI0Buffer^(0+128)
  7990                           
  7991                           ;CC2500_B1.c: 313: while (RC5 == 1 && RF1.Timeout == 0) {
  7992  1513  2D17               	goto	l8203
  7993  1514                     l8201:	
  7994                           
  7995                           ;CC2500_B1.c: 314: RF_Timeout_Counter();
  7996  1514  3193  2376  3195   	fcall	_RF_Timeout_Counter
  7997  1517                     l8203:	
  7998  1517  0020               	movlb	0	; select bank0
  7999  1518  1E8E               	btfss	14,5	;volatile
  8000  1519  2D1D               	goto	l8207
  8001  151A  0021               	movlb	1	; select bank1
  8002  151B  1F31               	btfss	(_RF1^(0+128)+1),6
  8003  151C  2D14               	goto	l8201
  8004  151D                     l8207:	
  8005                           
  8006                           ;CC2500_B1.c: 315: };
  8007                           ;CC2500_B1.c: 316: setRF_TimeoutCleared();
  8008  151D  3190  20D1  3195   	fcall	_setRF_TimeoutCleared
  8009                           
  8010                           ;CC2500_B1.c: 318: CC2500_WriteByte();
  8011  1520  3193  23CA  3195   	fcall	_CC2500_WriteByte
  8012                           
  8013                           ;CC2500_B1.c: 319: CC2500_ReadByte();
  8014  1523  3194  242E         	fcall	_CC2500_ReadByte
  8015                           
  8016                           ;CC2500_B1.c: 320: RC0 = 1;
  8017  1525  0020               	movlb	0	; select bank0
  8018  1526  140E               	bsf	14,0	;volatile
  8019                           
  8020                           ;CC2500_B1.c: 322: s_data = SPI0Buffer;
  8021  1527  0021               	movlb	1	; select bank1
  8022  1528  0866               	movf	_SPI0Buffer^(0+128),w
  8023  1529  00F4               	movwf	??_CC2500_ReadStatus
  8024  152A  0874               	movf	??_CC2500_ReadStatus,w
  8025  152B  00EB               	movwf	_s_data^(0+128)
  8026  152C  0008               	return
  8027  152D                     __end_of_CC2500_ReadStatus:	
  8028                           
  8029                           	psect	text36
  8030  142E                     __ptext36:	
  8031 ;; *************** function _CC2500_ReadByte *****************
  8032 ;; Defined at:
  8033 ;;		line 243 in file "../src/CC2500_B1.c"
  8034 ;; Parameters:    Size  Location     Type
  8035 ;;		None
  8036 ;; Auto vars:     Size  Location     Type
  8037 ;;  loop_b          1    3[COMMON] unsigned char 
  8038 ;; Return value:  Size  Location     Type
  8039 ;;		None               void
  8040 ;; Registers used:
  8041 ;;		wreg, status,2, status,0
  8042 ;; Tracked objects:
  8043 ;;		On entry : 0/0
  8044 ;;		On exit  : 0/0
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;Total ram usage:        2 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; Hardware stack levels required when called:    3
  8054 ;; This function calls:
  8055 ;;		Nothing
  8056 ;; This function is called by:
  8057 ;;		_CC2500_RxData
  8058 ;;		_CC2500_ReadStatus
  8059 ;;		_CC2500_ReadREG
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           
  8064                           ;psect for function _CC2500_ReadByte
  8065  142E                     _CC2500_ReadByte:	
  8066                           
  8067                           ;CC2500_B1.c: 244: unsigned char loop_b;
  8068                           ;CC2500_B1.c: 245: for (loop_b = 0; loop_b < 8; loop_b++) {
  8069                           
  8070                           ;incstack = 0
  8071                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8072  142E  01F3               	clrf	CC2500_ReadByte@loop_b
  8073  142F                     L3:	
  8074  142F  3008               	movlw	8
  8075  1430  0273               	subwf	CC2500_ReadByte@loop_b,w
  8076  1431  1803               	btfsc	3,0
  8077  1432  0008               	return
  8078                           
  8079                           ;CC2500_B1.c: 246: RC3 = 1;
  8080  1433  0020               	movlb	0	; select bank0
  8081  1434  158E               	bsf	14,3	;volatile
  8082                           
  8083                           ;CC2500_B1.c: 247: SPI0Buffer <<= 1;
  8084  1435  1003               	clrc
  8085  1436  0021               	movlb	1	; select bank1
  8086  1437  0DE6               	rlf	_SPI0Buffer^(0+128),f
  8087                           
  8088                           ;CC2500_B1.c: 248: if (RC5 == 1)
  8089  1438  0020               	movlb	0	; select bank0
  8090  1439  1E8E               	btfss	14,5	;volatile
  8091  143A  2C3E               	goto	l8061
  8092                           
  8093                           ;CC2500_B1.c: 249: SPI0Buffer |= 0x01;
  8094  143B  0021               	movlb	1	; select bank1
  8095  143C  1466               	bsf	_SPI0Buffer^(0+128),0
  8096  143D  2C43               	goto	l8063
  8097  143E                     l8061:	
  8098                           
  8099                           ;CC2500_B1.c: 250: else
  8100                           ;CC2500_B1.c: 251: SPI0Buffer &= 0xFE;
  8101  143E  30FE               	movlw	254
  8102  143F  00F2               	movwf	??_CC2500_ReadByte
  8103  1440  0872               	movf	??_CC2500_ReadByte,w
  8104  1441  0021               	movlb	1	; select bank1
  8105  1442  05E6               	andwf	_SPI0Buffer^(0+128),f
  8106  1443                     l8063:	
  8107                           
  8108                           ;CC2500_B1.c: 252: RC3 = 0;
  8109  1443  0020               	movlb	0	; select bank0
  8110  1444  118E               	bcf	14,3	;volatile
  8111  1445  3001               	movlw	1
  8112  1446  00F2               	movwf	??_CC2500_ReadByte
  8113  1447  0872               	movf	??_CC2500_ReadByte,w
  8114  1448  07F3               	addwf	CC2500_ReadByte@loop_b,f
  8115  1449  2C2F               	goto	L3
  8116  144A                     __end_of_CC2500_ReadByte:	
  8117                           
  8118                           	psect	text37
  8119  138B                     __ptext37:	
  8120 ;; *************** function _CC2500_PowerOnInitial *****************
  8121 ;; Defined at:
  8122 ;;		line 127 in file "../src/CC2500_B1.c"
  8123 ;; Parameters:    Size  Location     Type
  8124 ;;		None
  8125 ;; Auto vars:     Size  Location     Type
  8126 ;;		None
  8127 ;; Return value:  Size  Location     Type
  8128 ;;		None               void
  8129 ;; Registers used:
  8130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8131 ;; Tracked objects:
  8132 ;;		On entry : 0/0
  8133 ;;		On exit  : 0/0
  8134 ;;		Unchanged: 0/0
  8135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8140 ;;Total ram usage:        0 bytes
  8141 ;; Hardware stack levels used:    1
  8142 ;; Hardware stack levels required when called:    6
  8143 ;; This function calls:
  8144 ;;		_CC2500_ClearRXFIFO
  8145 ;;		_CC2500_ClearTXFIFO
  8146 ;;		_CC2500_FrequencyCabr
  8147 ;;		_CC2500_InitPATable
  8148 ;;		_CC2500_InitSetREG
  8149 ;;		_CC2500_PowerRST
  8150 ;;		_CC2500_SIDLEMode
  8151 ;; This function is called by:
  8152 ;;		_setRF_Main
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           
  8157                           ;psect for function _CC2500_PowerOnInitial
  8158  138B                     _CC2500_PowerOnInitial:	
  8159                           
  8160                           ;CC2500_B1.c: 128: CC2500_PowerRST();
  8161                           
  8162                           ;incstack = 0
  8163                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8164  138B  3189  2103  3193   	fcall	_CC2500_PowerRST
  8165                           
  8166                           ;CC2500_B1.c: 129: CC2500_InitSetREG();
  8167  138E  3195  25C9  3193   	fcall	_CC2500_InitSetREG
  8168                           
  8169                           ;CC2500_B1.c: 130: CC2500_InitPATable();
  8170  1391  3194  244A  3193   	fcall	_CC2500_InitPATable
  8171                           
  8172                           ;CC2500_B1.c: 131: CC2500_ClearTXFIFO();
  8173  1394  3190  20D9  3193   	fcall	_CC2500_ClearTXFIFO
  8174                           
  8175                           ;CC2500_B1.c: 132: CC2500_ClearRXFIFO();
  8176  1397  3190  20D5  3193   	fcall	_CC2500_ClearRXFIFO
  8177                           
  8178                           ;CC2500_B1.c: 133: CC2500_FrequencyCabr();
  8179  139A  3191  2184  3193   	fcall	_CC2500_FrequencyCabr
  8180                           
  8181                           ;CC2500_B1.c: 134: CC2500_SIDLEMode();
  8182  139D  3190  20DD         	fcall	_CC2500_SIDLEMode
  8183  139F  0008               	return
  8184  13A0                     __end_of_CC2500_PowerOnInitial:	
  8185                           
  8186                           	psect	text38
  8187  10DD                     __ptext38:	
  8188 ;; *************** function _CC2500_SIDLEMode *****************
  8189 ;; Defined at:
  8190 ;;		line 217 in file "../src/CC2500_B1.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;		None
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;		None
  8195 ;; Return value:  Size  Location     Type
  8196 ;;		None               void
  8197 ;; Registers used:
  8198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;Total ram usage:        0 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    5
  8211 ;; This function calls:
  8212 ;;		_CC2500_WriteCommand
  8213 ;; This function is called by:
  8214 ;;		_CC2500_PowerOnInitial
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           
  8219                           ;psect for function _CC2500_SIDLEMode
  8220  10DD                     _CC2500_SIDLEMode:	
  8221                           
  8222                           ;CC2500_B1.c: 218: CC2500_WriteCommand(0x36);
  8223                           
  8224                           ;incstack = 0
  8225                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8226  10DD  3036               	movlw	54
  8227  10DE  3194  2414         	fcall	_CC2500_WriteCommand
  8228  10E0  0008               	return
  8229  10E1                     __end_of_CC2500_SIDLEMode:	
  8230                           
  8231                           	psect	text39
  8232  0903                     __ptext39:	
  8233 ;; *************** function _CC2500_PowerRST *****************
  8234 ;; Defined at:
  8235 ;;		line 140 in file "../src/CC2500_B1.c"
  8236 ;; Parameters:    Size  Location     Type
  8237 ;;		None
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;		None
  8240 ;; Return value:  Size  Location     Type
  8241 ;;		None               void
  8242 ;; Registers used:
  8243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8244 ;; Tracked objects:
  8245 ;;		On entry : 0/0
  8246 ;;		On exit  : 0/0
  8247 ;;		Unchanged: 0/0
  8248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;Total ram usage:        1 bytes
  8254 ;; Hardware stack levels used:    1
  8255 ;; Hardware stack levels required when called:    4
  8256 ;; This function calls:
  8257 ;;		_CC2500_WriteByte
  8258 ;;		_DelayTime_1us
  8259 ;;		_RF_Timeout_Counter
  8260 ;;		_setRF_TimeoutCleared
  8261 ;; This function is called by:
  8262 ;;		_CC2500_PowerOnInitial
  8263 ;; This function uses a non-reentrant model
  8264 ;;
  8265                           
  8266                           
  8267                           ;psect for function _CC2500_PowerRST
  8268  0903                     _CC2500_PowerRST:	
  8269                           
  8270                           ;CC2500_B1.c: 141: RC3 = 0;
  8271                           
  8272                           ;incstack = 0
  8273                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8274  0903  0020               	movlb	0	; select bank0
  8275  0904  118E               	bcf	14,3	;volatile
  8276                           
  8277                           ;CC2500_B1.c: 142: RC4 = 0;
  8278  0905  120E               	bcf	14,4	;volatile
  8279                           
  8280                           ;CC2500_B1.c: 143: RC0 = 1;
  8281  0906  140E               	bsf	14,0	;volatile
  8282                           
  8283                           ;CC2500_B1.c: 144: DelayTime_1us(10);
  8284  0907  300A               	movlw	10
  8285  0908  00F2               	movwf	DelayTime_1us@count
  8286  0909  3000               	movlw	0
  8287  090A  00F3               	movwf	DelayTime_1us@count+1
  8288  090B  3195  252D  3189   	fcall	_DelayTime_1us
  8289                           
  8290                           ;CC2500_B1.c: 145: RC0 = 0;
  8291  090E  0020               	movlb	0	; select bank0
  8292  090F  100E               	bcf	14,0	;volatile
  8293                           
  8294                           ;CC2500_B1.c: 146: DelayTime_1us(10);
  8295  0910  300A               	movlw	10
  8296  0911  00F2               	movwf	DelayTime_1us@count
  8297  0912  3000               	movlw	0
  8298  0913  00F3               	movwf	DelayTime_1us@count+1
  8299  0914  3195  252D  3189   	fcall	_DelayTime_1us
  8300                           
  8301                           ;CC2500_B1.c: 147: RC0 = 1;
  8302  0917  0020               	movlb	0	; select bank0
  8303  0918  140E               	bsf	14,0	;volatile
  8304                           
  8305                           ;CC2500_B1.c: 148: DelayTime_1us(40);
  8306  0919  3028               	movlw	40
  8307  091A  00F2               	movwf	DelayTime_1us@count
  8308  091B  3000               	movlw	0
  8309  091C  00F3               	movwf	DelayTime_1us@count+1
  8310  091D  3195  252D  3189   	fcall	_DelayTime_1us
  8311                           
  8312                           ;CC2500_B1.c: 149: RC0 = 0;
  8313  0920  0020               	movlb	0	; select bank0
  8314  0921  100E               	bcf	14,0	;volatile
  8315                           
  8316                           ;CC2500_B1.c: 150: SPI0Buffer = 0x30;
  8317  0922  3030               	movlw	48
  8318  0923  00F8               	movwf	??_CC2500_PowerRST
  8319  0924  0878               	movf	??_CC2500_PowerRST,w
  8320  0925  0021               	movlb	1	; select bank1
  8321  0926  00E6               	movwf	_SPI0Buffer^(0+128)
  8322                           
  8323                           ;CC2500_B1.c: 151: while (RC5 == 1 && RF1.Timeout == 0) {
  8324  0927  292B               	goto	l8231
  8325  0928                     l8229:	
  8326                           
  8327                           ;CC2500_B1.c: 152: RF_Timeout_Counter();
  8328  0928  3193  2376  3189   	fcall	_RF_Timeout_Counter
  8329  092B                     l8231:	
  8330  092B  0020               	movlb	0	; select bank0
  8331  092C  1E8E               	btfss	14,5	;volatile
  8332  092D  2931               	goto	l8235
  8333  092E  0021               	movlb	1	; select bank1
  8334  092F  1F31               	btfss	(_RF1^(0+128)+1),6
  8335  0930  2928               	goto	l8229
  8336  0931                     l8235:	
  8337                           
  8338                           ;CC2500_B1.c: 153: };
  8339                           ;CC2500_B1.c: 154: setRF_TimeoutCleared();
  8340  0931  3190  20D1  3189   	fcall	_setRF_TimeoutCleared
  8341                           
  8342                           ;CC2500_B1.c: 155: CC2500_WriteByte();
  8343  0934  3193  23CA  3189   	fcall	_CC2500_WriteByte
  8344                           
  8345                           ;CC2500_B1.c: 156: while (RC5 == 1 && RF1.Timeout == 0) {
  8346  0937  293B               	goto	l8241
  8347  0938                     l8239:	
  8348                           
  8349                           ;CC2500_B1.c: 157: RF_Timeout_Counter();
  8350  0938  3193  2376  3189   	fcall	_RF_Timeout_Counter
  8351  093B                     l8241:	
  8352  093B  0020               	movlb	0	; select bank0
  8353  093C  1E8E               	btfss	14,5	;volatile
  8354  093D  2941               	goto	l8245
  8355  093E  0021               	movlb	1	; select bank1
  8356  093F  1F31               	btfss	(_RF1^(0+128)+1),6
  8357  0940  2938               	goto	l8239
  8358  0941                     l8245:	
  8359                           
  8360                           ;CC2500_B1.c: 158: };
  8361                           ;CC2500_B1.c: 159: setRF_TimeoutCleared();
  8362  0941  3190  20D1         	fcall	_setRF_TimeoutCleared
  8363                           
  8364                           ;CC2500_B1.c: 160: RC4 = 0;
  8365  0943  0020               	movlb	0	; select bank0
  8366  0944  120E               	bcf	14,4	;volatile
  8367                           
  8368                           ;CC2500_B1.c: 161: RC0 = 1;
  8369  0945  140E               	bsf	14,0	;volatile
  8370  0946  0008               	return
  8371  0947                     __end_of_CC2500_PowerRST:	
  8372                           
  8373                           	psect	text40
  8374  15C9                     __ptext40:	
  8375 ;; *************** function _CC2500_InitSetREG *****************
  8376 ;; Defined at:
  8377 ;;		line 167 in file "../src/CC2500_B1.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;		None
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  loop_c          1    2[BANK0 ] unsigned char 
  8382 ;;  temp2           1    1[BANK0 ] unsigned char 
  8383 ;;  temp1           1    0[BANK0 ] unsigned char 
  8384 ;; Return value:  Size  Location     Type
  8385 ;;		None               void
  8386 ;; Registers used:
  8387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;Total ram usage:        4 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    5
  8400 ;; This function calls:
  8401 ;;		_CC2500_WriteREG
  8402 ;; This function is called by:
  8403 ;;		_CC2500_PowerOnInitial
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           
  8408                           ;psect for function _CC2500_InitSetREG
  8409  15C9                     _CC2500_InitSetREG:	
  8410                           
  8411                           ;CC2500_B1.c: 168: unsigned char loop_c;
  8412                           ;CC2500_B1.c: 169: unsigned char temp1, temp2;
  8413                           ;CC2500_B1.c: 171: for (loop_c = 0; loop_c < 47; loop_c++) {
  8414                           
  8415                           ;incstack = 0
  8416                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8417  15C9  0020               	movlb	0	; select bank0
  8418  15CA  01A2               	clrf	CC2500_InitSetREG@loop_c
  8419  15CB                     L4:	
  8420  15CB  302F               	movlw	47
  8421  15CC  0222               	subwf	CC2500_InitSetREG@loop_c,w
  8422  15CD  1803               	btfsc	3,0
  8423  15CE  0008               	return
  8424                           
  8425                           ;CC2500_B1.c: 172: temp1 = CC2500_registers_address[loop_c];
  8426  15CF  0822               	movf	CC2500_InitSetREG@loop_c,w
  8427  15D0  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  8428  15D1  0084               	movwf	4
  8429  15D2  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  8430  15D3  1803               	skipnc
  8431  15D4  3E01               	addlw	1
  8432  15D5  0085               	movwf	5
  8433  15D6  0800               	movf	0,w	;code access
  8434  15D7  00F7               	movwf	??_CC2500_InitSetREG
  8435  15D8  0877               	movf	??_CC2500_InitSetREG,w
  8436  15D9  00A0               	movwf	CC2500_InitSetREG@temp1
  8437                           
  8438                           ;CC2500_B1.c: 173: temp2 = CC2500_rfSettings[loop_c];
  8439  15DA  0822               	movf	CC2500_InitSetREG@loop_c,w
  8440  15DB  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  8441  15DC  0084               	movwf	4
  8442  15DD  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  8443  15DE  1803               	skipnc
  8444  15DF  3E01               	addlw	1
  8445  15E0  0085               	movwf	5
  8446  15E1  0800               	movf	0,w	;code access
  8447  15E2  00F7               	movwf	??_CC2500_InitSetREG
  8448  15E3  0877               	movf	??_CC2500_InitSetREG,w
  8449  15E4  00A1               	movwf	CC2500_InitSetREG@temp2
  8450                           
  8451                           ;CC2500_B1.c: 175: CC2500_WriteREG(temp1, temp2);
  8452  15E5  0821               	movf	CC2500_InitSetREG@temp2,w
  8453  15E6  00F7               	movwf	??_CC2500_InitSetREG
  8454  15E7  0877               	movf	??_CC2500_InitSetREG,w
  8455  15E8  00F4               	movwf	CC2500_WriteREG@value
  8456  15E9  0820               	movf	CC2500_InitSetREG@temp1,w
  8457  15EA  3194  24E8  3195   	fcall	_CC2500_WriteREG
  8458  15ED  3001               	movlw	1
  8459  15EE  00F7               	movwf	??_CC2500_InitSetREG
  8460  15EF  0877               	movf	??_CC2500_InitSetREG,w
  8461  15F0  0020               	movlb	0	; select bank0
  8462  15F1  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  8463  15F2  2DCB               	goto	L4
  8464  15F3                     __end_of_CC2500_InitSetREG:	
  8465                           
  8466                           	psect	text41
  8467  144A                     __ptext41:	
  8468 ;; *************** function _CC2500_InitPATable *****************
  8469 ;; Defined at:
  8470 ;;		line 182 in file "../src/CC2500_B1.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;		None
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;  loop_d          1    9[COMMON] unsigned char 
  8475 ;;  temp            1    8[COMMON] unsigned char 
  8476 ;; Return value:  Size  Location     Type
  8477 ;;		None               void
  8478 ;; Registers used:
  8479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8480 ;; Tracked objects:
  8481 ;;		On entry : 0/0
  8482 ;;		On exit  : 0/0
  8483 ;;		Unchanged: 0/0
  8484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;Total ram usage:        3 bytes
  8490 ;; Hardware stack levels used:    1
  8491 ;; Hardware stack levels required when called:    5
  8492 ;; This function calls:
  8493 ;;		_CC2500_WriteREG
  8494 ;; This function is called by:
  8495 ;;		_CC2500_PowerOnInitial
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           
  8500                           ;psect for function _CC2500_InitPATable
  8501  144A                     _CC2500_InitPATable:	
  8502                           
  8503                           ;CC2500_B1.c: 183: unsigned char loop_d;
  8504                           ;CC2500_B1.c: 184: unsigned char temp;
  8505                           ;CC2500_B1.c: 186: for (loop_d = 0; loop_d < 8; loop_d++) {
  8506                           
  8507                           ;incstack = 0
  8508                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8509  144A  01F9               	clrf	CC2500_InitPATable@loop_d
  8510  144B                     L5:	
  8511  144B  3008               	movlw	8
  8512  144C  0279               	subwf	CC2500_InitPATable@loop_d,w
  8513  144D  1803               	btfsc	3,0
  8514  144E  0008               	return
  8515                           
  8516                           ;CC2500_B1.c: 187: temp = CC2500_patable_vaule[loop_d];
  8517  144F  0879               	movf	CC2500_InitPATable@loop_d,w
  8518  1450  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  8519  1451  0084               	movwf	4
  8520  1452  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  8521  1453  1803               	skipnc
  8522  1454  3E01               	addlw	1
  8523  1455  0085               	movwf	5
  8524  1456  0800               	movf	0,w	;code access
  8525  1457  00F7               	movwf	??_CC2500_InitPATable
  8526  1458  0877               	movf	??_CC2500_InitPATable,w
  8527  1459  00F8               	movwf	CC2500_InitPATable@temp
  8528                           
  8529                           ;CC2500_B1.c: 188: CC2500_WriteREG(0x3E, temp);
  8530  145A  0878               	movf	CC2500_InitPATable@temp,w
  8531  145B  00F7               	movwf	??_CC2500_InitPATable
  8532  145C  0877               	movf	??_CC2500_InitPATable,w
  8533  145D  00F4               	movwf	CC2500_WriteREG@value
  8534  145E  303E               	movlw	62
  8535  145F  3194  24E8  3194   	fcall	_CC2500_WriteREG
  8536  1462  3001               	movlw	1
  8537  1463  00F7               	movwf	??_CC2500_InitPATable
  8538  1464  0877               	movf	??_CC2500_InitPATable,w
  8539  1465  07F9               	addwf	CC2500_InitPATable@loop_d,f
  8540  1466  2C4B               	goto	L5
  8541  1467                     __end_of_CC2500_InitPATable:	
  8542                           
  8543                           	psect	text42
  8544  14E8                     __ptext42:	
  8545 ;; *************** function _CC2500_WriteREG *****************
  8546 ;; Defined at:
  8547 ;;		line 259 in file "../src/CC2500_B1.c"
  8548 ;; Parameters:    Size  Location     Type
  8549 ;;  w_addr          1    wreg     unsigned char 
  8550 ;;  value           1    4[COMMON] unsigned char 
  8551 ;; Auto vars:     Size  Location     Type
  8552 ;;  w_addr          1    6[COMMON] unsigned char 
  8553 ;; Return value:  Size  Location     Type
  8554 ;;		None               void
  8555 ;; Registers used:
  8556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8557 ;; Tracked objects:
  8558 ;;		On entry : 0/0
  8559 ;;		On exit  : 0/0
  8560 ;;		Unchanged: 0/0
  8561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8562 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8563 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8564 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8565 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8566 ;;Total ram usage:        3 bytes
  8567 ;; Hardware stack levels used:    1
  8568 ;; Hardware stack levels required when called:    4
  8569 ;; This function calls:
  8570 ;;		_CC2500_WriteByte
  8571 ;;		_RF_Timeout_Counter
  8572 ;;		_setRF_TimeoutCleared
  8573 ;; This function is called by:
  8574 ;;		_CC2500_InitSetREG
  8575 ;;		_CC2500_InitPATable
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           
  8580                           ;psect for function _CC2500_WriteREG
  8581  14E8                     _CC2500_WriteREG:	
  8582                           
  8583                           ;incstack = 0
  8584                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8585                           ;CC2500_WriteREG@w_addr stored from wreg
  8586  14E8  00F6               	movwf	CC2500_WriteREG@w_addr
  8587                           
  8588                           ;CC2500_B1.c: 260: RC0 = 0;
  8589  14E9  0020               	movlb	0	; select bank0
  8590  14EA  100E               	bcf	14,0	;volatile
  8591                           
  8592                           ;CC2500_B1.c: 261: SPI0Buffer = w_addr;
  8593  14EB  0876               	movf	CC2500_WriteREG@w_addr,w
  8594  14EC  00F5               	movwf	??_CC2500_WriteREG
  8595  14ED  0875               	movf	??_CC2500_WriteREG,w
  8596  14EE  0021               	movlb	1	; select bank1
  8597  14EF  00E6               	movwf	_SPI0Buffer^(0+128)
  8598                           
  8599                           ;CC2500_B1.c: 262: while (RC5 == 1 && RF1.Timeout == 0) {
  8600  14F0  2CF4               	goto	l8085
  8601  14F1                     l8083:	
  8602                           
  8603                           ;CC2500_B1.c: 263: RF_Timeout_Counter();
  8604  14F1  3193  2376  3194   	fcall	_RF_Timeout_Counter
  8605  14F4                     l8085:	
  8606  14F4  0020               	movlb	0	; select bank0
  8607  14F5  1E8E               	btfss	14,5	;volatile
  8608  14F6  2CFA               	goto	l8089
  8609  14F7  0021               	movlb	1	; select bank1
  8610  14F8  1F31               	btfss	(_RF1^(0+128)+1),6
  8611  14F9  2CF1               	goto	l8083
  8612  14FA                     l8089:	
  8613                           
  8614                           ;CC2500_B1.c: 264: };
  8615                           ;CC2500_B1.c: 265: setRF_TimeoutCleared();
  8616  14FA  3190  20D1  3194   	fcall	_setRF_TimeoutCleared
  8617                           
  8618                           ;CC2500_B1.c: 267: CC2500_WriteByte();
  8619  14FD  3193  23CA  3194   	fcall	_CC2500_WriteByte
  8620                           
  8621                           ;CC2500_B1.c: 268: SPI0Buffer = value;
  8622  1500  0874               	movf	CC2500_WriteREG@value,w
  8623  1501  00F5               	movwf	??_CC2500_WriteREG
  8624  1502  0875               	movf	??_CC2500_WriteREG,w
  8625  1503  0021               	movlb	1	; select bank1
  8626  1504  00E6               	movwf	_SPI0Buffer^(0+128)
  8627                           
  8628                           ;CC2500_B1.c: 269: CC2500_WriteByte();
  8629  1505  3193  23CA         	fcall	_CC2500_WriteByte
  8630                           
  8631                           ;CC2500_B1.c: 270: RC0 = 1;
  8632  1507  0020               	movlb	0	; select bank0
  8633  1508  140E               	bsf	14,0	;volatile
  8634  1509  0008               	return
  8635  150A                     __end_of_CC2500_WriteREG:	
  8636                           
  8637                           	psect	text43
  8638  1184                     __ptext43:	
  8639 ;; *************** function _CC2500_FrequencyCabr *****************
  8640 ;; Defined at:
  8641 ;;		line 209 in file "../src/CC2500_B1.c"
  8642 ;; Parameters:    Size  Location     Type
  8643 ;;		None
  8644 ;; Auto vars:     Size  Location     Type
  8645 ;;		None
  8646 ;; Return value:  Size  Location     Type
  8647 ;;		None               void
  8648 ;; Registers used:
  8649 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8650 ;; Tracked objects:
  8651 ;;		On entry : 0/0
  8652 ;;		On exit  : 0/0
  8653 ;;		Unchanged: 0/0
  8654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;Total ram usage:        0 bytes
  8660 ;; Hardware stack levels used:    1
  8661 ;; Hardware stack levels required when called:    5
  8662 ;; This function calls:
  8663 ;;		_CC2500_WriteCommand
  8664 ;;		_DelayTime_1us
  8665 ;; This function is called by:
  8666 ;;		_CC2500_PowerOnInitial
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           
  8671                           ;psect for function _CC2500_FrequencyCabr
  8672  1184                     _CC2500_FrequencyCabr:	
  8673                           
  8674                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x33);
  8675                           
  8676                           ;incstack = 0
  8677                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8678  1184  3033               	movlw	51
  8679  1185  3194  2414  3191   	fcall	_CC2500_WriteCommand
  8680                           
  8681                           ;CC2500_B1.c: 211: DelayTime_1us(1000);
  8682  1188  30E8               	movlw	232
  8683  1189  00F2               	movwf	DelayTime_1us@count
  8684  118A  3003               	movlw	3
  8685  118B  00F3               	movwf	DelayTime_1us@count+1
  8686  118C  3195  252D         	fcall	_DelayTime_1us
  8687  118E  0008               	return
  8688  118F                     __end_of_CC2500_FrequencyCabr:	
  8689                           
  8690                           	psect	text44
  8691  152D                     __ptext44:	
  8692 ;; *************** function _DelayTime_1us *****************
  8693 ;; Defined at:
  8694 ;;		line 328 in file "../src/CC2500_B1.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  count           2    2[COMMON] int 
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;  j               2    6[COMMON] unsigned int 
  8699 ;;  i               2    4[COMMON] unsigned int 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;		None               void
  8702 ;; Registers used:
  8703 ;;		wreg, status,2
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:        6 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    3
  8716 ;; This function calls:
  8717 ;;		Nothing
  8718 ;; This function is called by:
  8719 ;;		_CC2500_PowerRST
  8720 ;;		_CC2500_FrequencyCabr
  8721 ;; This function uses a non-reentrant model
  8722 ;;
  8723                           
  8724                           
  8725                           ;psect for function _DelayTime_1us
  8726  152D                     _DelayTime_1us:	
  8727                           
  8728                           ;CC2500_B1.c: 329: unsigned int i, j;
  8729                           ;CC2500_B1.c: 330: for (i = 1; i < count; i++)
  8730                           
  8731                           ;incstack = 0
  8732                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  8733  152D  3001               	movlw	1
  8734  152E  00F4               	movwf	DelayTime_1us@i
  8735  152F  3000               	movlw	0
  8736  1530  00F5               	movwf	DelayTime_1us@i+1
  8737  1531                     l343:	
  8738  1531  0873               	movf	DelayTime_1us@count+1,w
  8739  1532  0275               	subwf	DelayTime_1us@i+1,w
  8740  1533  1D03               	skipz
  8741  1534  2D37               	goto	u8165
  8742  1535  0872               	movf	DelayTime_1us@count,w
  8743  1536  0274               	subwf	DelayTime_1us@i,w
  8744  1537                     u8165:	
  8745  1537  1803               	btfsc	3,0
  8746  1538  0008               	return
  8747                           
  8748                           ;CC2500_B1.c: 331: for (j = 0; j <= 1; j++);
  8749  1539  01F6               	clrf	DelayTime_1us@j
  8750  153A  01F7               	clrf	DelayTime_1us@j+1
  8751  153B  3000               	movlw	0
  8752  153C  0277               	subwf	DelayTime_1us@j+1,w
  8753  153D  3002               	movlw	2
  8754  153E  1903               	skipnz
  8755  153F  0276               	subwf	DelayTime_1us@j,w
  8756  1540  1803               	btfsc	3,0
  8757  1541  2D4D               	goto	l8077
  8758  1542                     l8075:	
  8759  1542  3001               	movlw	1
  8760  1543  07F6               	addwf	DelayTime_1us@j,f
  8761  1544  3000               	movlw	0
  8762  1545  3DF7               	addwfc	DelayTime_1us@j+1,f
  8763  1546  3000               	movlw	0
  8764  1547  0277               	subwf	DelayTime_1us@j+1,w
  8765  1548  3002               	movlw	2
  8766  1549  1903               	skipnz
  8767  154A  0276               	subwf	DelayTime_1us@j,w
  8768  154B  1C03               	skipc
  8769  154C  2D42               	goto	l8075
  8770  154D                     l8077:	
  8771  154D  3001               	movlw	1
  8772  154E  07F4               	addwf	DelayTime_1us@i,f
  8773  154F  3000               	movlw	0
  8774  1550  3DF5               	addwfc	DelayTime_1us@i+1,f
  8775  1551  2D31               	goto	l343
  8776  1552                     __end_of_DelayTime_1us:	
  8777                           
  8778                           	psect	text45
  8779  10D9                     __ptext45:	
  8780 ;; *************** function _CC2500_ClearTXFIFO *****************
  8781 ;; Defined at:
  8782 ;;		line 195 in file "../src/CC2500_B1.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;		None
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;		None
  8787 ;; Return value:  Size  Location     Type
  8788 ;;		None               void
  8789 ;; Registers used:
  8790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8791 ;; Tracked objects:
  8792 ;;		On entry : 0/0
  8793 ;;		On exit  : 0/0
  8794 ;;		Unchanged: 0/0
  8795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8800 ;;Total ram usage:        0 bytes
  8801 ;; Hardware stack levels used:    1
  8802 ;; Hardware stack levels required when called:    5
  8803 ;; This function calls:
  8804 ;;		_CC2500_WriteCommand
  8805 ;; This function is called by:
  8806 ;;		_CC2500_PowerOnInitial
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           
  8811                           ;psect for function _CC2500_ClearTXFIFO
  8812  10D9                     _CC2500_ClearTXFIFO:	
  8813                           
  8814                           ;CC2500_B1.c: 196: CC2500_WriteCommand(0x3B);
  8815                           
  8816                           ;incstack = 0
  8817                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8818  10D9  303B               	movlw	59
  8819  10DA  3194  2414         	fcall	_CC2500_WriteCommand
  8820  10DC  0008               	return
  8821  10DD                     __end_of_CC2500_ClearTXFIFO:	
  8822                           
  8823                           	psect	text46
  8824  10D5                     __ptext46:	
  8825 ;; *************** function _CC2500_ClearRXFIFO *****************
  8826 ;; Defined at:
  8827 ;;		line 202 in file "../src/CC2500_B1.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;		None
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;		None
  8832 ;; Return value:  Size  Location     Type
  8833 ;;		None               void
  8834 ;; Registers used:
  8835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;Total ram usage:        0 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    5
  8848 ;; This function calls:
  8849 ;;		_CC2500_WriteCommand
  8850 ;; This function is called by:
  8851 ;;		_CC2500_PowerOnInitial
  8852 ;; This function uses a non-reentrant model
  8853 ;;
  8854                           
  8855                           
  8856                           ;psect for function _CC2500_ClearRXFIFO
  8857  10D5                     _CC2500_ClearRXFIFO:	
  8858                           
  8859                           ;CC2500_B1.c: 203: CC2500_WriteCommand(0x3A);
  8860                           
  8861                           ;incstack = 0
  8862                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8863  10D5  303A               	movlw	58
  8864  10D6  3194  2414         	fcall	_CC2500_WriteCommand
  8865  10D8  0008               	return
  8866  10D9                     __end_of_CC2500_ClearRXFIFO:	
  8867                           
  8868                           	psect	text47
  8869  1414                     __ptext47:	
  8870 ;; *************** function _CC2500_WriteCommand *****************
  8871 ;; Defined at:
  8872 ;;		line 293 in file "../src/CC2500_B1.c"
  8873 ;; Parameters:    Size  Location     Type
  8874 ;;  command         1    wreg     unsigned char 
  8875 ;; Auto vars:     Size  Location     Type
  8876 ;;  command         1    5[COMMON] unsigned char 
  8877 ;; Return value:  Size  Location     Type
  8878 ;;		None               void
  8879 ;; Registers used:
  8880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8881 ;; Tracked objects:
  8882 ;;		On entry : 0/0
  8883 ;;		On exit  : 0/0
  8884 ;;		Unchanged: 0/0
  8885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8887 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;Total ram usage:        2 bytes
  8891 ;; Hardware stack levels used:    1
  8892 ;; Hardware stack levels required when called:    4
  8893 ;; This function calls:
  8894 ;;		_CC2500_WriteByte
  8895 ;;		_RF_Timeout_Counter
  8896 ;;		_setRF_TimeoutCleared
  8897 ;; This function is called by:
  8898 ;;		_CC2500_TxData
  8899 ;;		_CC2500_RxData
  8900 ;;		_CC2500_ClearTXFIFO
  8901 ;;		_CC2500_ClearRXFIFO
  8902 ;;		_CC2500_FrequencyCabr
  8903 ;;		_CC2500_SIDLEMode
  8904 ;;		_setRF_Main
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           
  8909                           ;psect for function _CC2500_WriteCommand
  8910  1414                     _CC2500_WriteCommand:	
  8911                           
  8912                           ;incstack = 0
  8913                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8914                           ;CC2500_WriteCommand@command stored from wreg
  8915  1414  00F5               	movwf	CC2500_WriteCommand@command
  8916                           
  8917                           ;CC2500_B1.c: 294: RC0 = 0;
  8918  1415  0020               	movlb	0	; select bank0
  8919  1416  100E               	bcf	14,0	;volatile
  8920                           
  8921                           ;CC2500_B1.c: 295: SPI0Buffer = command;
  8922  1417  0875               	movf	CC2500_WriteCommand@command,w
  8923  1418  00F4               	movwf	??_CC2500_WriteCommand
  8924  1419  0874               	movf	??_CC2500_WriteCommand,w
  8925  141A  0021               	movlb	1	; select bank1
  8926  141B  00E6               	movwf	_SPI0Buffer^(0+128)
  8927                           
  8928                           ;CC2500_B1.c: 297: while (RC5 == 1 && RF1.Timeout == 0) {
  8929  141C  2C20               	goto	l8039
  8930  141D                     l8037:	
  8931                           
  8932                           ;CC2500_B1.c: 298: RF_Timeout_Counter();
  8933  141D  3193  2376  3194   	fcall	_RF_Timeout_Counter
  8934  1420                     l8039:	
  8935  1420  0020               	movlb	0	; select bank0
  8936  1421  1E8E               	btfss	14,5	;volatile
  8937  1422  2C26               	goto	l8043
  8938  1423  0021               	movlb	1	; select bank1
  8939  1424  1F31               	btfss	(_RF1^(0+128)+1),6
  8940  1425  2C1D               	goto	l8037
  8941  1426                     l8043:	
  8942                           
  8943                           ;CC2500_B1.c: 299: };
  8944                           ;CC2500_B1.c: 300: setRF_TimeoutCleared();
  8945  1426  3190  20D1  3194   	fcall	_setRF_TimeoutCleared
  8946                           
  8947                           ;CC2500_B1.c: 302: CC2500_WriteByte();
  8948  1429  3193  23CA         	fcall	_CC2500_WriteByte
  8949                           
  8950                           ;CC2500_B1.c: 303: RC0 = 1;
  8951  142B  0020               	movlb	0	; select bank0
  8952  142C  140E               	bsf	14,0	;volatile
  8953  142D  0008               	return
  8954  142E                     __end_of_CC2500_WriteCommand:	
  8955                           
  8956                           	psect	text48
  8957  10D1                     __ptext48:	
  8958 ;; *************** function _setRF_TimeoutCleared *****************
  8959 ;; Defined at:
  8960 ;;		line 233 in file "../src/RF_Control_B1.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;		None
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;		None
  8965 ;; Return value:  Size  Location     Type
  8966 ;;		None               void
  8967 ;; Registers used:
  8968 ;;		status,2
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;Total ram usage:        0 bytes
  8979 ;; Hardware stack levels used:    1
  8980 ;; Hardware stack levels required when called:    3
  8981 ;; This function calls:
  8982 ;;		Nothing
  8983 ;; This function is called by:
  8984 ;;		_CC2500_TxData
  8985 ;;		_CC2500_RxData
  8986 ;;		_CC2500_PowerRST
  8987 ;;		_CC2500_WriteREG
  8988 ;;		_CC2500_WriteCommand
  8989 ;;		_CC2500_ReadStatus
  8990 ;;		_CC2500_ReadREG
  8991 ;; This function uses a non-reentrant model
  8992 ;;
  8993                           
  8994                           
  8995                           ;psect for function _setRF_TimeoutCleared
  8996  10D1                     _setRF_TimeoutCleared:	
  8997                           
  8998                           ;RF_Control_B1.c: 234: RF1.TimeoutCount = 0;
  8999                           
  9000                           ;incstack = 0
  9001                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9002  10D1  0021               	movlb	1	; select bank1
  9003  10D2  01BD               	clrf	(_RF1^(0+128)+13)
  9004  10D3  01BE               	clrf	((_RF1+1)^(0+128)+13)
  9005  10D4  0008               	return
  9006  10D5                     __end_of_setRF_TimeoutCleared:	
  9007                           
  9008                           	psect	text49
  9009  1376                     __ptext49:	
  9010 ;; *************** function _RF_Timeout_Counter *****************
  9011 ;; Defined at:
  9012 ;;		line 225 in file "../src/RF_Control_B1.c"
  9013 ;; Parameters:    Size  Location     Type
  9014 ;;		None
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;		None
  9017 ;; Return value:  Size  Location     Type
  9018 ;;		None               void
  9019 ;; Registers used:
  9020 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9021 ;; Tracked objects:
  9022 ;;		On entry : 0/0
  9023 ;;		On exit  : 0/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;Total ram usage:        0 bytes
  9031 ;; Hardware stack levels used:    1
  9032 ;; Hardware stack levels required when called:    3
  9033 ;; This function calls:
  9034 ;;		Nothing
  9035 ;; This function is called by:
  9036 ;;		_CC2500_TxData
  9037 ;;		_CC2500_RxData
  9038 ;;		_CC2500_PowerRST
  9039 ;;		_CC2500_WriteREG
  9040 ;;		_CC2500_WriteCommand
  9041 ;;		_CC2500_ReadStatus
  9042 ;;		_CC2500_ReadREG
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           
  9047                           ;psect for function _RF_Timeout_Counter
  9048  1376                     _RF_Timeout_Counter:	
  9049                           
  9050                           ;RF_Control_B1.c: 226: RF1.TimeoutCount++;
  9051                           
  9052                           ;incstack = 0
  9053                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9054  1376  3001               	movlw	1
  9055  1377  0021               	movlb	1	; select bank1
  9056  1378  07BD               	addwf	(_RF1^(0+128)+13),f
  9057  1379  3000               	movlw	0
  9058  137A  3DBE               	addwfc	((_RF1+1)^(0+128)+13),f
  9059                           
  9060                           ;RF_Control_B1.c: 227: if (RF1.TimeoutCount == 25000) {
  9061  137B  300D               	movlw	13
  9062  137C  3EB0               	addlw	_RF1& (0+255)
  9063  137D  0086               	movwf	6
  9064  137E  0187               	clrf	7
  9065  137F  3F40               	moviw [0]fsr1
  9066  1380  3AA8               	xorlw	168
  9067  1381  1D03               	skipz
  9068  1382  2B85               	goto	u7865
  9069  1383  3F41               	moviw [1]fsr1
  9070  1384  3A61               	xorlw	97
  9071  1385                     u7865:	
  9072  1385  1D03               	skipz
  9073  1386  0008               	return
  9074                           
  9075                           ;RF_Control_B1.c: 228: RF1.TimeoutCount = 0;
  9076  1387  01BD               	clrf	(_RF1^(0+128)+13)
  9077  1388  01BE               	clrf	((_RF1+1)^(0+128)+13)
  9078                           
  9079                           ;RF_Control_B1.c: 229: RF1.Timeout = 1;
  9080  1389  1731               	bsf	(_RF1^(0+128)+1),6
  9081  138A  0008               	return
  9082  138B                     __end_of_RF_Timeout_Counter:	
  9083                           
  9084                           	psect	text50
  9085  13CA                     __ptext50:	
  9086 ;; *************** function _CC2500_WriteByte *****************
  9087 ;; Defined at:
  9088 ;;		line 227 in file "../src/CC2500_B1.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;		None
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;  loop_a          1    3[COMMON] unsigned char 
  9093 ;; Return value:  Size  Location     Type
  9094 ;;		None               void
  9095 ;; Registers used:
  9096 ;;		wreg, status,2, status,0
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;Total ram usage:        2 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    3
  9109 ;; This function calls:
  9110 ;;		Nothing
  9111 ;; This function is called by:
  9112 ;;		_CC2500_TxData
  9113 ;;		_CC2500_RxData
  9114 ;;		_CC2500_PowerRST
  9115 ;;		_CC2500_WriteREG
  9116 ;;		_CC2500_WriteCommand
  9117 ;;		_CC2500_ReadStatus
  9118 ;;		_CC2500_ReadREG
  9119 ;; This function uses a non-reentrant model
  9120 ;;
  9121                           
  9122                           
  9123                           ;psect for function _CC2500_WriteByte
  9124  13CA                     _CC2500_WriteByte:	
  9125                           
  9126                           ;CC2500_B1.c: 228: unsigned char loop_a;
  9127                           ;CC2500_B1.c: 229: for (loop_a = 0; loop_a < 8; loop_a++) {
  9128                           
  9129                           ;incstack = 0
  9130                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9131  13CA  01F3               	clrf	CC2500_WriteByte@loop_a
  9132  13CB                     L6:	
  9133  13CB  3008               	movlw	8
  9134  13CC  0273               	subwf	CC2500_WriteByte@loop_a,w
  9135  13CD  1803               	btfsc	3,0
  9136  13CE  0008               	return
  9137                           
  9138                           ;CC2500_B1.c: 230: if (SPI0Buffer & 0x80)
  9139  13CF  0021               	movlb	1	; select bank1
  9140  13D0  1FE6               	btfss	_SPI0Buffer^(0+128),7
  9141  13D1  2BD5               	goto	l299
  9142                           
  9143                           ;CC2500_B1.c: 231: RC4 = 1;
  9144  13D2  0020               	movlb	0	; select bank0
  9145  13D3  160E               	bsf	14,4	;volatile
  9146  13D4  2BD7               	goto	l300
  9147  13D5                     l299:	
  9148                           
  9149                           ;CC2500_B1.c: 232: else
  9150                           ;CC2500_B1.c: 233: RC4 = 0;
  9151  13D5  0020               	movlb	0	; select bank0
  9152  13D6  120E               	bcf	14,4	;volatile
  9153  13D7                     l300:	
  9154                           
  9155                           ;CC2500_B1.c: 234: RC3 = 1;
  9156  13D7  158E               	bsf	14,3	;volatile
  9157                           
  9158                           ;CC2500_B1.c: 235: SPI0Buffer <<= 1;
  9159  13D8  1003               	clrc
  9160  13D9  0021               	movlb	1	; select bank1
  9161  13DA  0DE6               	rlf	_SPI0Buffer^(0+128),f
  9162                           
  9163                           ;CC2500_B1.c: 236: RC3 = 0;
  9164  13DB  0020               	movlb	0	; select bank0
  9165  13DC  118E               	bcf	14,3	;volatile
  9166  13DD  3001               	movlw	1
  9167  13DE  00F2               	movwf	??_CC2500_WriteByte
  9168  13DF  0872               	movf	??_CC2500_WriteByte,w
  9169  13E0  07F3               	addwf	CC2500_WriteByte@loop_a,f
  9170  13E1  2BCB               	goto	L6
  9171  13E2                     __end_of_CC2500_WriteByte:	
  9172                           
  9173                           	psect	text51
  9174  12FE                     __ptext51:	
  9175 ;; *************** function _Mcu_Initialization *****************
  9176 ;; Defined at:
  9177 ;;		line 30 in file "../src/MCU_B1.c"
  9178 ;; Parameters:    Size  Location     Type
  9179 ;;		None
  9180 ;; Auto vars:     Size  Location     Type
  9181 ;;		None
  9182 ;; Return value:  Size  Location     Type
  9183 ;;		None               void
  9184 ;; Registers used:
  9185 ;;		wreg, status,2, status,0, pclath, cstack
  9186 ;; Tracked objects:
  9187 ;;		On entry : 0/0
  9188 ;;		On exit  : 0/0
  9189 ;;		Unchanged: 0/0
  9190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;Total ram usage:        0 bytes
  9196 ;; Hardware stack levels used:    1
  9197 ;; Hardware stack levels required when called:    4
  9198 ;; This function calls:
  9199 ;;		_ADC_Set
  9200 ;;		_Fosc_Set
  9201 ;;		_IOC_Set
  9202 ;;		_IO_Set
  9203 ;;		_TMR1_Set
  9204 ;;		_WDT_Set
  9205 ;; This function is called by:
  9206 ;;		_main
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           
  9211                           ;psect for function _Mcu_Initialization
  9212  12FE                     _Mcu_Initialization:	
  9213                           
  9214                           ;MCU_B1.c: 32: Fosc_Set();
  9215                           
  9216                           ;incstack = 0
  9217                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9218  12FE  3190  20CD  3192   	fcall	_Fosc_Set
  9219                           
  9220                           ;MCU_B1.c: 34: IO_Set();
  9221  1301  3193  23FA  3192   	fcall	_IO_Set
  9222                           
  9223                           ;MCU_B1.c: 36: ;;
  9224                           ;MCU_B1.c: 38: TMR1_Set();
  9225  1304  3191  21CA  3192   	fcall	_TMR1_Set
  9226                           
  9227                           ;MCU_B1.c: 40: ADC_Set();
  9228  1307  3191  210C  3192   	fcall	_ADC_Set
  9229                           
  9230                           ;MCU_B1.c: 42: ;;
  9231                           ;MCU_B1.c: 44: ;;
  9232                           ;MCU_B1.c: 46: IOC_Set();
  9233  130A  3191  2179  3192   	fcall	_IOC_Set
  9234                           
  9235                           ;MCU_B1.c: 48: ;;
  9236                           ;MCU_B1.c: 50: ;;
  9237                           ;MCU_B1.c: 52: WDT_Set();
  9238  130D  3191  2145         	fcall	_WDT_Set
  9239  130F  0008               	return
  9240  1310                     __end_of_Mcu_Initialization:	
  9241                           
  9242                           	psect	text52
  9243  1145                     __ptext52:	
  9244 ;; *************** function _WDT_Set *****************
  9245 ;; Defined at:
  9246 ;;		line 1107 in file "../src/MCU_B1.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;		None
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;		None
  9251 ;; Return value:  Size  Location     Type
  9252 ;;		None               void
  9253 ;; Registers used:
  9254 ;;		wreg
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;Total ram usage:        1 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    3
  9267 ;; This function calls:
  9268 ;;		Nothing
  9269 ;; This function is called by:
  9270 ;;		_Mcu_Initialization
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           
  9275                           ;psect for function _WDT_Set
  9276  1145                     _WDT_Set:	
  9277                           
  9278                           ;MCU_B1.c: 1114: WDTCON = 0b00010111;;
  9279                           
  9280                           ;incstack = 0
  9281                           ; Regs used in _WDT_Set: [wreg]
  9282  1145  3017               	movlw	23
  9283  1146  0021               	movlb	1	; select bank1
  9284  1147  0097               	movwf	23	;volatile
  9285                           
  9286                           ;MCU_B1.c: 1116: WDT.Enable = 1;
  9287  1148  145D               	bsf	_WDT^(0+128),0
  9288                           
  9289                           ;MCU_B1.c: 1117: WDT.Timer = 10;
  9290  1149  300A               	movlw	10
  9291  114A  00F2               	movwf	??_WDT_Set
  9292  114B  0872               	movf	??_WDT_Set,w
  9293  114C  00DE               	movwf	(_WDT^(0+128)+1)
  9294  114D  0008               	return
  9295  114E                     __end_of_WDT_Set:	
  9296                           
  9297                           	psect	text53
  9298  11CA                     __ptext53:	
  9299 ;; *************** function _TMR1_Set *****************
  9300 ;; Defined at:
  9301 ;;		line 226 in file "../src/MCU_B1.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;		None
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;		None
  9306 ;; Return value:  Size  Location     Type
  9307 ;;		None               void
  9308 ;; Registers used:
  9309 ;;		wreg
  9310 ;; Tracked objects:
  9311 ;;		On entry : 0/0
  9312 ;;		On exit  : 0/0
  9313 ;;		Unchanged: 0/0
  9314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;Total ram usage:        0 bytes
  9320 ;; Hardware stack levels used:    1
  9321 ;; Hardware stack levels required when called:    3
  9322 ;; This function calls:
  9323 ;;		Nothing
  9324 ;; This function is called by:
  9325 ;;		_Mcu_Initialization
  9326 ;; This function uses a non-reentrant model
  9327 ;;
  9328                           
  9329                           
  9330                           ;psect for function _TMR1_Set
  9331  11CA                     _TMR1_Set:	
  9332                           
  9333                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  9334                           
  9335                           ;incstack = 0
  9336                           ; Regs used in _TMR1_Set: [wreg]
  9337  11CA  3041               	movlw	65
  9338  11CB  0020               	movlb	0	; select bank0
  9339  11CC  0098               	movwf	24	;volatile
  9340                           
  9341                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  9342  11CD  30FA               	movlw	250
  9343  11CE  0097               	movwf	23	;volatile
  9344                           
  9345                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  9346  11CF  3038               	movlw	56
  9347  11D0  0096               	movwf	22	;volatile
  9348                           
  9349                           ;MCU_B1.c: 230: TMR1IE = 1;
  9350  11D1  0021               	movlb	1	; select bank1
  9351  11D2  1411               	bsf	17,0	;volatile
  9352                           
  9353                           ;MCU_B1.c: 231: PEIE = 1;
  9354  11D3  170B               	bsf	11,6	;volatile
  9355                           
  9356                           ;MCU_B1.c: 232: GIE = 1;
  9357  11D4  178B               	bsf	11,7	;volatile
  9358  11D5  0008               	return
  9359  11D6                     __end_of_TMR1_Set:	
  9360                           
  9361                           	psect	text54
  9362  13FA                     __ptext54:	
  9363 ;; *************** function _IO_Set *****************
  9364 ;; Defined at:
  9365 ;;		line 60 in file "../src/MCU_B1.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;		None
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;		None
  9370 ;; Return value:  Size  Location     Type
  9371 ;;		None               void
  9372 ;; Registers used:
  9373 ;;		wreg, status,2
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;Total ram usage:        0 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    3
  9386 ;; This function calls:
  9387 ;;		Nothing
  9388 ;; This function is called by:
  9389 ;;		_Mcu_Initialization
  9390 ;; This function uses a non-reentrant model
  9391 ;;
  9392                           
  9393                           
  9394                           ;psect for function _IO_Set
  9395  13FA                     _IO_Set:	
  9396                           
  9397                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
  9398                           
  9399                           ;incstack = 0
  9400                           ; Regs used in _IO_Set: [wreg+status,2]
  9401  13FA  30F7               	movlw	247
  9402  13FB  0021               	movlb	1	; select bank1
  9403  13FC  008C               	movwf	12	;volatile
  9404                           
  9405                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
  9406  13FD  3004               	movlw	4
  9407  13FE  008D               	movwf	13	;volatile
  9408                           
  9409                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
  9410  13FF  3026               	movlw	38
  9411  1400  008E               	movwf	14	;volatile
  9412                           
  9413                           ;MCU_B1.c: 96: LATA = 0b00000000;;
  9414  1401  0022               	movlb	2	; select bank2
  9415  1402  018C               	clrf	12	;volatile
  9416                           
  9417                           ;MCU_B1.c: 97: LATB = 0b00000000;;
  9418  1403  018D               	clrf	13	;volatile
  9419                           
  9420                           ;MCU_B1.c: 98: LATC = 0b00000000;;
  9421  1404  018E               	clrf	14	;volatile
  9422                           
  9423                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
  9424  1405  300E               	movlw	14
  9425  1406  0023               	movlb	3	; select bank3
  9426  1407  008C               	movwf	12	;volatile
  9427                           
  9428                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
  9429  1408  018D               	clrf	13	;volatile
  9430                           
  9431                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
  9432  1409  018E               	clrf	14	;volatile
  9433                           
  9434                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
  9435  140A  30F7               	movlw	247
  9436  140B  0020               	movlb	0	; select bank0
  9437  140C  008C               	movwf	12	;volatile
  9438                           
  9439                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
  9440  140D  3004               	movlw	4
  9441  140E  008D               	movwf	13	;volatile
  9442                           
  9443                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
  9444  140F  3026               	movlw	38
  9445  1410  008E               	movwf	14	;volatile
  9446                           
  9447                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
  9448  1411  0024               	movlb	4	; select bank4
  9449  1412  018D               	clrf	13	;volatile
  9450  1413  0008               	return
  9451  1414                     __end_of_IO_Set:	
  9452                           
  9453                           	psect	text55
  9454  1179                     __ptext55:	
  9455 ;; *************** function _IOC_Set *****************
  9456 ;; Defined at:
  9457 ;;		line 381 in file "../src/MCU_B1.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;		None
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;		None
  9462 ;; Return value:  Size  Location     Type
  9463 ;;		None               void
  9464 ;; Registers used:
  9465 ;;		wreg, status,2
  9466 ;; Tracked objects:
  9467 ;;		On entry : 0/0
  9468 ;;		On exit  : 0/0
  9469 ;;		Unchanged: 0/0
  9470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;Total ram usage:        0 bytes
  9476 ;; Hardware stack levels used:    1
  9477 ;; Hardware stack levels required when called:    3
  9478 ;; This function calls:
  9479 ;;		Nothing
  9480 ;; This function is called by:
  9481 ;;		_Mcu_Initialization
  9482 ;; This function uses a non-reentrant model
  9483 ;;
  9484                           
  9485                           
  9486                           ;psect for function _IOC_Set
  9487  1179                     _IOC_Set:	
  9488                           
  9489                           ;MCU_B1.c: 383: IOCBP = 0b00000100;;
  9490                           
  9491                           ;incstack = 0
  9492                           ; Regs used in _IOC_Set: [wreg+status,2]
  9493  1179  3004               	movlw	4
  9494  117A  0027               	movlb	7	; select bank7
  9495  117B  0094               	movwf	20	;volatile
  9496                           
  9497                           ;MCU_B1.c: 384: IOCBN = 0b00000100;;
  9498  117C  3004               	movlw	4
  9499  117D  0095               	movwf	21	;volatile
  9500                           
  9501                           ;MCU_B1.c: 386: IOCBF = 0b00000000;
  9502  117E  0196               	clrf	22	;volatile
  9503                           
  9504                           ;MCU_B1.c: 388: IOCIE = 1;
  9505  117F  158B               	bsf	11,3	;volatile
  9506                           
  9507                           ;MCU_B1.c: 389: IOCIF = 0;
  9508  1180  100B               	bcf	11,0	;volatile
  9509                           
  9510                           ;MCU_B1.c: 390: PEIE = 1;
  9511  1181  170B               	bsf	11,6	;volatile
  9512                           
  9513                           ;MCU_B1.c: 391: GIE = 1;
  9514  1182  178B               	bsf	11,7	;volatile
  9515  1183  0008               	return
  9516  1184                     __end_of_IOC_Set:	
  9517                           
  9518                           	psect	text56
  9519  10CD                     __ptext56:	
  9520 ;; *************** function _Fosc_Set *****************
  9521 ;; Defined at:
  9522 ;;		line 56 in file "../src/MCU_B1.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;		None
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;		None
  9527 ;; Return value:  Size  Location     Type
  9528 ;;		None               void
  9529 ;; Registers used:
  9530 ;;		wreg
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9540 ;;Total ram usage:        0 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:    3
  9543 ;; This function calls:
  9544 ;;		Nothing
  9545 ;; This function is called by:
  9546 ;;		_Mcu_Initialization
  9547 ;; This function uses a non-reentrant model
  9548 ;;
  9549                           
  9550                           
  9551                           ;psect for function _Fosc_Set
  9552  10CD                     _Fosc_Set:	
  9553                           
  9554                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9555                           
  9556                           ;incstack = 0
  9557                           ; Regs used in _Fosc_Set: [wreg]
  9558  10CD  3078               	movlw	120
  9559  10CE  0021               	movlb	1	; select bank1
  9560  10CF  0099               	movwf	25	;volatile
  9561  10D0  0008               	return
  9562  10D1                     __end_of_Fosc_Set:	
  9563                           
  9564                           	psect	text57
  9565  110C                     __ptext57:	
  9566 ;; *************** function _ADC_Set *****************
  9567 ;; Defined at:
  9568 ;;		line 429 in file "../src/MCU_B1.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;		None
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;		None
  9573 ;; Return value:  Size  Location     Type
  9574 ;;		None               void
  9575 ;; Registers used:
  9576 ;;		wreg
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;Total ram usage:        0 bytes
  9587 ;; Hardware stack levels used:    1
  9588 ;; Hardware stack levels required when called:    3
  9589 ;; This function calls:
  9590 ;;		Nothing
  9591 ;; This function is called by:
  9592 ;;		_Mcu_Initialization
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596                           
  9597                           ;psect for function _ADC_Set
  9598  110C                     _ADC_Set:	
  9599                           
  9600                           ;MCU_B1.c: 430: ADCON1 = 0xf3;
  9601                           
  9602                           ;incstack = 0
  9603                           ; Regs used in _ADC_Set: [wreg]
  9604  110C  30F3               	movlw	243
  9605  110D  0021               	movlb	1	; select bank1
  9606  110E  009E               	movwf	30	;volatile
  9607                           
  9608                           ;MCU_B1.c: 431: FVRCON = 0xc1;
  9609  110F  30C1               	movlw	193
  9610  1110  0022               	movlb	2	; select bank2
  9611  1111  0097               	movwf	23	;volatile
  9612  1112  0008               	return
  9613  1113                     __end_of_ADC_Set:	
  9614                           
  9615                           	psect	text58
  9616  10C9                     __ptext58:	
  9617 ;; *************** function _LED_Main *****************
  9618 ;; Defined at:
  9619 ;;		line 47 in file "../src/LED_B1.c"
  9620 ;; Parameters:    Size  Location     Type
  9621 ;;		None
  9622 ;; Auto vars:     Size  Location     Type
  9623 ;;		None
  9624 ;; Return value:  Size  Location     Type
  9625 ;;		None               void
  9626 ;; Registers used:
  9627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9628 ;; Tracked objects:
  9629 ;;		On entry : 0/0
  9630 ;;		On exit  : 0/0
  9631 ;;		Unchanged: 0/0
  9632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;Total ram usage:        0 bytes
  9638 ;; Hardware stack levels used:    1
  9639 ;; Hardware stack levels required when called:    5
  9640 ;; This function calls:
  9641 ;;		_setLED_Main
  9642 ;; This function is called by:
  9643 ;;		_main
  9644 ;; This function uses a non-reentrant model
  9645 ;;
  9646                           
  9647                           
  9648                           ;psect for function _LED_Main
  9649  10C9                     _LED_Main:	
  9650                           
  9651                           ;LED_B1.c: 67: setLED_Main(99);
  9652                           
  9653                           ;incstack = 0
  9654                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9655  10C9  3063               	movlw	99
  9656  10CA  3196  264F         	fcall	_setLED_Main
  9657  10CC  0008               	return
  9658  10CD                     __end_of_LED_Main:	
  9659                           
  9660                           	psect	text59
  9661  164F                     __ptext59:	
  9662 ;; *************** function _setLED_Main *****************
  9663 ;; Defined at:
  9664 ;;		line 229 in file "../src/LED_B1.c"
  9665 ;; Parameters:    Size  Location     Type
  9666 ;;  led             1    wreg     unsigned char 
  9667 ;; Auto vars:     Size  Location     Type
  9668 ;;  led             1    6[COMMON] unsigned char 
  9669 ;; Return value:  Size  Location     Type
  9670 ;;		None               void
  9671 ;; Registers used:
  9672 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9673 ;; Tracked objects:
  9674 ;;		On entry : 0/0
  9675 ;;		On exit  : 0/0
  9676 ;;		Unchanged: 0/0
  9677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9682 ;;Total ram usage:        3 bytes
  9683 ;; Hardware stack levels used:    1
  9684 ;; Hardware stack levels required when called:    4
  9685 ;; This function calls:
  9686 ;;		_LedPointSelect
  9687 ;; This function is called by:
  9688 ;;		_LED_Main
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           
  9693                           ;psect for function _setLED_Main
  9694  164F                     _setLED_Main:	
  9695                           
  9696                           ;incstack = 0
  9697                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9698                           ;setLED_Main@led stored from wreg
  9699  164F  00F6               	movwf	setLED_Main@led
  9700                           
  9701                           ;LED_B1.c: 230: LedPointSelect(led);
  9702  1650  0876               	movf	setLED_Main@led,w
  9703  1651  3191  2163  3196   	fcall	_LedPointSelect
  9704                           
  9705                           ;LED_B1.c: 231: if (LED->GO == 1) {
  9706  1654  0021               	movlb	1	; select bank1
  9707  1655  0862               	movf	_LED^(0+128),w
  9708  1656  0086               	movwf	6
  9709  1657  3001               	movlw	1	; select bank2/3
  9710  1658  0087               	movwf	7
  9711  1659  1C81               	btfss	1,1
  9712  165A  0008               	return
  9713                           
  9714                           ;LED_B1.c: 232: LED->Time++;
  9715  165B  0A62               	incf	_LED^(0+128),w
  9716  165C  0086               	movwf	6
  9717  165D  3001               	movlw	1	; select bank2/3
  9718  165E  0087               	movwf	7
  9719  165F  3001               	movlw	1
  9720  1660  0781               	addwf	1,f
  9721  1661  3141               	addfsr 1,1
  9722  1662  1803               	skipnc
  9723  1663  0A81               	incf	1,f
  9724                           
  9725                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
  9726  1664  0A62               	incf	_LED^(0+128),w
  9727  1665  0086               	movwf	6
  9728  1666  3001               	movlw	1	; select bank2/3
  9729  1667  0087               	movwf	7
  9730  1668  3F40               	moviw [0]fsr1
  9731  1669  00F4               	movwf	??_setLED_Main
  9732  166A  3F41               	moviw [1]fsr1
  9733  166B  00F5               	movwf	??_setLED_Main+1
  9734  166C  3000               	movlw	0
  9735  166D  0275               	subwf	??_setLED_Main+1,w
  9736  166E  3019               	movlw	25
  9737  166F  1903               	skipnz
  9738  1670  0274               	subwf	??_setLED_Main,w
  9739  1671  1C03               	skipc
  9740  1672  0008               	return
  9741                           
  9742                           ;LED_B1.c: 234: LED->Time = 0;
  9743  1673  0A62               	incf	_LED^(0+128),w
  9744  1674  0086               	movwf	6
  9745  1675  3001               	movlw	1	; select bank2/3
  9746  1676  0087               	movwf	7
  9747  1677  3000               	movlw	0
  9748  1678  3FC0               	movwi [0]fsr1
  9749  1679  3FC1               	movwi [1]fsr1
  9750                           
  9751                           ;LED_B1.c: 252: if (led == 99) {
  9752  167A  0876               	movf	setLED_Main@led,w
  9753  167B  3A63               	xorlw	99
  9754  167C  1D03               	skipz
  9755  167D  0008               	return
  9756                           
  9757                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
  9758  167E  3020               	movlw	32
  9759  167F  0020               	movlb	0	; select bank0
  9760  1680  068D               	xorwf	13,f
  9761  1681  0008               	return
  9762  1682                     __end_of_setLED_Main:	
  9763                           
  9764                           	psect	text60
  9765  10C5                     __ptext60:	
  9766 ;; *************** function _LED_Initialization *****************
  9767 ;; Defined at:
  9768 ;;		line 31 in file "../src/LED_B1.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;		None
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;		None
  9773 ;; Return value:  Size  Location     Type
  9774 ;;		None               void
  9775 ;; Registers used:
  9776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9777 ;; Tracked objects:
  9778 ;;		On entry : 0/0
  9779 ;;		On exit  : 0/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;Total ram usage:        0 bytes
  9787 ;; Hardware stack levels used:    1
  9788 ;; Hardware stack levels required when called:    6
  9789 ;; This function calls:
  9790 ;;		_setLED_Initialization
  9791 ;; This function is called by:
  9792 ;;		_main
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           
  9797                           ;psect for function _LED_Initialization
  9798  10C5                     _LED_Initialization:	
  9799                           
  9800                           ;LED_B1.c: 42: setLED_Initialization(99);
  9801                           
  9802                           ;incstack = 0
  9803                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9804  10C5  3063               	movlw	99
  9805  10C6  3192  2269         	fcall	_setLED_Initialization
  9806  10C8  0008               	return
  9807  10C9                     __end_of_LED_Initialization:	
  9808                           
  9809                           	psect	text61
  9810  1269                     __ptext61:	
  9811 ;; *************** function _setLED_Initialization *****************
  9812 ;; Defined at:
  9813 ;;		line 74 in file "../src/LED_B1.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;  led             1    wreg     unsigned char 
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;  led             1    6[COMMON] unsigned char 
  9818 ;; Return value:  Size  Location     Type
  9819 ;;		None               void
  9820 ;; Registers used:
  9821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9822 ;; Tracked objects:
  9823 ;;		On entry : 0/0
  9824 ;;		On exit  : 0/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9828 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;Total ram usage:        1 bytes
  9832 ;; Hardware stack levels used:    1
  9833 ;; Hardware stack levels required when called:    5
  9834 ;; This function calls:
  9835 ;;		_LedPointSelect
  9836 ;;		_setLED
  9837 ;; This function is called by:
  9838 ;;		_LED_Initialization
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842                           
  9843                           ;psect for function _setLED_Initialization
  9844  1269                     _setLED_Initialization:	
  9845                           
  9846                           ;incstack = 0
  9847                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9848                           ;setLED_Initialization@led stored from wreg
  9849  1269  00F6               	movwf	setLED_Initialization@led
  9850                           
  9851                           ;LED_B1.c: 75: LedPointSelect(led);
  9852  126A  0876               	movf	setLED_Initialization@led,w
  9853  126B  3191  2163  3192   	fcall	_LedPointSelect
  9854                           
  9855                           ;LED_B1.c: 76: LED->Enable = 1;
  9856  126E  0021               	movlb	1	; select bank1
  9857  126F  0862               	movf	_LED^(0+128),w
  9858  1270  0086               	movwf	6
  9859  1271  3001               	movlw	1	; select bank2/3
  9860  1272  0087               	movwf	7
  9861  1273  1401               	bsf	1,0
  9862                           
  9863                           ;LED_B1.c: 77: setLED(led, 0);
  9864  1274  01F4               	clrf	setLED@command
  9865  1275  0876               	movf	setLED_Initialization@led,w
  9866  1276  3188  200A         	fcall	_setLED
  9867  1278  0008               	return
  9868  1279                     __end_of_setLED_Initialization:	
  9869                           
  9870                           	psect	text62
  9871  08C2                     __ptext62:	
  9872 ;; *************** function _Flash_Memory_Main *****************
  9873 ;; Defined at:
  9874 ;;		line 980 in file "../src/MCU_B1.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;		None
  9877 ;; Auto vars:     Size  Location     Type
  9878 ;;  key_Status      1    0[BANK0 ] unsigned char 
  9879 ;; Return value:  Size  Location     Type
  9880 ;;		None               void
  9881 ;; Registers used:
  9882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;Total ram usage:        3 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; Hardware stack levels required when called:    6
  9895 ;; This function calls:
  9896 ;;		_Flash_Memory_Modify
  9897 ;;		_getAll_Sw_KeyStatus
  9898 ;;		_getMain_All_LightsStatus
  9899 ;; This function is called by:
  9900 ;;		_main
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           
  9905                           ;psect for function _Flash_Memory_Main
  9906  08C2                     _Flash_Memory_Main:	
  9907                           
  9908                           ;MCU_B1.c: 981: char key_Status = 0;
  9909                           
  9910                           ;incstack = 0
  9911                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9912  08C2  0020               	movlb	0	; select bank0
  9913  08C3  01A0               	clrf	Flash_Memory_Main@key_Status
  9914                           
  9915                           ;MCU_B1.c: 983: key_Status = getAll_Sw_KeyStatus();
  9916  08C4  3192  22BA  3188   	fcall	_getAll_Sw_KeyStatus
  9917  08C7  00F8               	movwf	??_Flash_Memory_Main
  9918  08C8  0878               	movf	??_Flash_Memory_Main,w
  9919  08C9  0020               	movlb	0	; select bank0
  9920  08CA  00A0               	movwf	Flash_Memory_Main@key_Status
  9921                           
  9922                           ;MCU_B1.c: 985: if (Memory.Modify == 1) {
  9923  08CB  0023               	movlb	3	; select bank3
  9924  08CC  1C44               	btfss	(_Memory^(0+384)+36),0
  9925  08CD  0008               	return
  9926                           
  9927                           ;MCU_B1.c: 986: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
  9928  08CE  0020               	movlb	0	; select bank0
  9929  08CF  01A1               	clrf	_Flash_Memory_Main$3208
  9930  08D0  3191  211A  3188   	fcall	_getMain_All_LightsStatus
  9931  08D3  3800               	iorlw	0
  9932  08D4  1D03               	skipz
  9933  08D5  28DC               	goto	l9181
  9934  08D6  0020               	movlb	0	; select bank0
  9935  08D7  08A0               	movf	Flash_Memory_Main@key_Status,f
  9936  08D8  1D03               	skipz
  9937  08D9  28DC               	goto	l9181
  9938  08DA  01A1               	clrf	_Flash_Memory_Main$3208
  9939  08DB  0AA1               	incf	_Flash_Memory_Main$3208,f
  9940  08DC                     l9181:	
  9941  08DC  0020               	movlb	0	; select bank0
  9942  08DD  0821               	movf	_Flash_Memory_Main$3208,w
  9943  08DE  0023               	movlb	3	; select bank3
  9944  08DF  10C4               	bcf	(_Memory^(0+384)+36),1
  9945  08E0  1D03               	skipz
  9946  08E1  14C4               	bsf	(_Memory^(0+384)+36),1
  9947                           
  9948                           ;MCU_B1.c: 987: if (Memory.GO == 1) {
  9949  08E2  1CC4               	btfss	(_Memory^(0+384)+36),1
  9950  08E3  28FD               	goto	l1257
  9951                           
  9952                           ;MCU_B1.c: 988: Memory.Runtime = 1;
  9953  08E4  15C4               	bsf	(_Memory^(0+384)+36),3
  9954                           
  9955                           ;MCU_B1.c: 989: Memory.Time++;
  9956  08E5  3001               	movlw	1
  9957  08E6  07C2               	addwf	(_Memory^(0+384)+34),f
  9958  08E7  3000               	movlw	0
  9959  08E8  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9960                           
  9961                           ;MCU_B1.c: 990: if (Memory.Time == (200 / 20)) {
  9962  08E9  3022               	movlw	34
  9963  08EA  3EA0               	addlw	_Memory& (0+255)
  9964  08EB  0086               	movwf	6
  9965  08EC  3001               	movlw	1	; select bank3/4
  9966  08ED  0087               	movwf	7
  9967  08EE  3F40               	moviw [0]fsr1
  9968  08EF  3A0A               	xorlw	10
  9969  08F0  1D03               	skipz
  9970  08F1  28F4               	goto	u9715
  9971  08F2  3F41               	moviw [1]fsr1
  9972  08F3  3A00               	xorlw	0
  9973  08F4                     u9715:	
  9974  08F4  1D03               	skipz
  9975  08F5  0008               	return
  9976                           
  9977                           ;MCU_B1.c: 991: Memory.Time = 0;
  9978  08F6  01C2               	clrf	(_Memory^(0+384)+34)
  9979  08F7  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9980                           
  9981                           ;MCU_B1.c: 992: Memory.Modify = 0;
  9982  08F8  1044               	bcf	(_Memory^(0+384)+36),0
  9983                           
  9984                           ;MCU_B1.c: 993: Memory.GO = 0;
  9985  08F9  10C4               	bcf	(_Memory^(0+384)+36),1
  9986                           
  9987                           ;MCU_B1.c: 994: Flash_Memory_Modify();
  9988  08FA  3186  261B         	fcall	_Flash_Memory_Modify
  9989                           
  9990                           ;MCU_B1.c: 995: }
  9991                           ;MCU_B1.c: 996: } else {
  9992  08FC  0008               	return
  9993  08FD                     l1257:	
  9994                           
  9995                           ;MCU_B1.c: 997: if (Memory.Runtime == 1) {
  9996  08FD  1DC4               	btfss	(_Memory^(0+384)+36),3
  9997  08FE  0008               	return
  9998                           
  9999                           ;MCU_B1.c: 998: Memory.Runtime = 0;
 10000  08FF  11C4               	bcf	(_Memory^(0+384)+36),3
 10001                           
 10002                           ;MCU_B1.c: 999: Memory.Time = 0;
 10003  0900  01C2               	clrf	(_Memory^(0+384)+34)
 10004  0901  01C3               	clrf	((_Memory+1)^(0+384)+34)
 10005  0902  0008               	return
 10006  0903                     __end_of_Flash_Memory_Main:	
 10007                           
 10008                           	psect	text63
 10009  12BA                     __ptext63:	
 10010 ;; *************** function _getAll_Sw_KeyStatus *****************
 10011 ;; Defined at:
 10012 ;;		line 286 in file "../src/Switch_B1.c"
 10013 ;; Parameters:    Size  Location     Type
 10014 ;;		None
 10015 ;; Auto vars:     Size  Location     Type
 10016 ;;  status          1    3[COMMON] unsigned char 
 10017 ;; Return value:  Size  Location     Type
 10018 ;;                  1    wreg      unsigned char 
 10019 ;; Registers used:
 10020 ;;		wreg, status,2
 10021 ;; Tracked objects:
 10022 ;;		On entry : 0/0
 10023 ;;		On exit  : 0/0
 10024 ;;		Unchanged: 0/0
 10025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;Total ram usage:        3 bytes
 10031 ;; Hardware stack levels used:    1
 10032 ;; Hardware stack levels required when called:    3
 10033 ;; This function calls:
 10034 ;;		Nothing
 10035 ;; This function is called by:
 10036 ;;		_Flash_Memory_Main
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           
 10041                           ;psect for function _getAll_Sw_KeyStatus
 10042  12BA                     _getAll_Sw_KeyStatus:	
 10043                           
 10044                           ;Switch_B1.c: 287: char status = 0;
 10045                           
 10046                           ;incstack = 0
 10047                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 10048  12BA  01F3               	clrf	getAll_Sw_KeyStatus@status
 10049                           
 10050                           ;Switch_B1.c: 311: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 10051  12BB  01F4               	clrf	_getAll_Sw_KeyStatus$6448
 10052  12BC  0AF4               	incf	_getAll_Sw_KeyStatus$6448,f
 10053  12BD  0020               	movlb	0	; select bank0
 10054  12BE  1F0C               	btfss	12,6	;volatile
 10055  12BF  1A0C               	btfsc	12,4	;volatile
 10056  12C0  2AC5               	goto	l8943
 10057  12C1  1C0C               	btfss	12,0	;volatile
 10058  12C2  1B8C               	btfsc	12,7	;volatile
 10059  12C3  2AC5               	goto	l8943
 10060  12C4  01F4               	clrf	_getAll_Sw_KeyStatus$6448
 10061  12C5                     l8943:	
 10062  12C5  0874               	movf	_getAll_Sw_KeyStatus$6448,w
 10063  12C6  00F2               	movwf	??_getAll_Sw_KeyStatus
 10064  12C7  0872               	movf	??_getAll_Sw_KeyStatus,w
 10065  12C8  00F3               	movwf	getAll_Sw_KeyStatus@status
 10066                           
 10067                           ;Switch_B1.c: 315: return status;
 10068  12C9  0873               	movf	getAll_Sw_KeyStatus@status,w
 10069  12CA  0008               	return
 10070  12CB                     __end_of_getAll_Sw_KeyStatus:	
 10071                           
 10072                           	psect	text64
 10073  061B                     __ptext64:	
 10074 ;; *************** function _Flash_Memory_Modify *****************
 10075 ;; Defined at:
 10076 ;;		line 1057 in file "../src/MCU_B1.c"
 10077 ;; Parameters:    Size  Location     Type
 10078 ;;		None
 10079 ;; Auto vars:     Size  Location     Type
 10080 ;;  i               1    7[COMMON] unsigned char 
 10081 ;; Return value:  Size  Location     Type
 10082 ;;		None               void
 10083 ;; Registers used:
 10084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10085 ;; Tracked objects:
 10086 ;;		On entry : 0/0
 10087 ;;		On exit  : 0/0
 10088 ;;		Unchanged: 0/0
 10089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;Total ram usage:        2 bytes
 10095 ;; Hardware stack levels used:    1
 10096 ;; Hardware stack levels required when called:    5
 10097 ;; This function calls:
 10098 ;;		_Flash_Memory_Erasing
 10099 ;;		_Flash_Memory_Read
 10100 ;;		_Flash_Memory_Write
 10101 ;;		_setMemory_Data
 10102 ;; This function is called by:
 10103 ;;		_Flash_Memory_Main
 10104 ;; This function uses a non-reentrant model
 10105 ;;
 10106                           
 10107                           
 10108                           ;psect for function _Flash_Memory_Modify
 10109  061B                     _Flash_Memory_Modify:	
 10110                           
 10111                           ;MCU_B1.c: 1058: char i = 0;
 10112                           
 10113                           ;incstack = 0
 10114                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10115  061B  01F7               	clrf	Flash_Memory_Modify@i
 10116                           
 10117                           ;MCU_B1.c: 1059: for (i = 0; i < 32; i++) {
 10118  061C  01F7               	clrf	Flash_Memory_Modify@i
 10119  061D  3020               	movlw	32
 10120  061E  0277               	subwf	Flash_Memory_Modify@i,w
 10121  061F  1803               	btfsc	3,0
 10122  0620  2E35               	goto	l8961
 10123  0621                     l8955:	
 10124                           
 10125                           ;MCU_B1.c: 1060: Memory.Data[i] = Flash_Memory_Read(i);
 10126  0621  0877               	movf	Flash_Memory_Modify@i,w
 10127  0622  3193  2323  3186   	fcall	_Flash_Memory_Read
 10128  0625  00F6               	movwf	??_Flash_Memory_Modify
 10129  0626  0877               	movf	Flash_Memory_Modify@i,w
 10130  0627  3EA0               	addlw	_Memory& (0+255)
 10131  0628  0086               	movwf	6
 10132  0629  3001               	movlw	1	; select bank3/4
 10133  062A  0087               	movwf	7
 10134  062B  0876               	movf	??_Flash_Memory_Modify,w
 10135  062C  0081               	movwf	1
 10136  062D  3001               	movlw	1
 10137  062E  00F6               	movwf	??_Flash_Memory_Modify
 10138  062F  0876               	movf	??_Flash_Memory_Modify,w
 10139  0630  07F7               	addwf	Flash_Memory_Modify@i,f
 10140  0631  3020               	movlw	32
 10141  0632  0277               	subwf	Flash_Memory_Modify@i,w
 10142  0633  1C03               	skipc
 10143  0634  2E21               	goto	l8955
 10144  0635                     l8961:	
 10145                           
 10146                           ;MCU_B1.c: 1061: }
 10147                           ;MCU_B1.c: 1062: setMemory_Data(6, product->Data[11]);
 10148  0635  0020               	movlb	0	; select bank0
 10149  0636  086C               	movf	_product,w
 10150  0637  0086               	movwf	6
 10151  0638  3001               	movlw	1	; select bank2/3
 10152  0639  0087               	movwf	7
 10153  063A  3001               	movlw	1	; select bank2/3
 10154  063B  3F4B               	moviw [11]fsr1
 10155  063C  00F2               	movwf	setMemory_Data@data
 10156  063D  3006               	movlw	6
 10157  063E  3191  216E  3186   	fcall	_setMemory_Data
 10158                           
 10159                           ;MCU_B1.c: 1063: setMemory_Data(0, product->Data[12]);
 10160  0641  0020               	movlb	0	; select bank0
 10161  0642  086C               	movf	_product,w
 10162  0643  0086               	movwf	6
 10163  0644  3001               	movlw	1	; select bank2/3
 10164  0645  0087               	movwf	7
 10165  0646  3001               	movlw	1	; select bank2/3
 10166  0647  3F4C               	moviw [12]fsr1
 10167  0648  00F2               	movwf	setMemory_Data@data
 10168  0649  3000               	movlw	0
 10169  064A  3191  216E  3186   	fcall	_setMemory_Data
 10170                           
 10171                           ;MCU_B1.c: 1064: setMemory_Data(1, product->Data[13]);
 10172  064D  0020               	movlb	0	; select bank0
 10173  064E  086C               	movf	_product,w
 10174  064F  0086               	movwf	6
 10175  0650  3001               	movlw	1	; select bank2/3
 10176  0651  0087               	movwf	7
 10177  0652  3001               	movlw	1	; select bank2/3
 10178  0653  3F4D               	moviw [13]fsr1
 10179  0654  00F2               	movwf	setMemory_Data@data
 10180  0655  3001               	movlw	1
 10181  0656  3191  216E  3186   	fcall	_setMemory_Data
 10182                           
 10183                           ;MCU_B1.c: 1065: setMemory_Data(2, product->Data[14]);
 10184  0659  0020               	movlb	0	; select bank0
 10185  065A  086C               	movf	_product,w
 10186  065B  0086               	movwf	6
 10187  065C  3001               	movlw	1	; select bank2/3
 10188  065D  0087               	movwf	7
 10189  065E  3001               	movlw	1	; select bank2/3
 10190  065F  3F4E               	moviw [14]fsr1
 10191  0660  00F2               	movwf	setMemory_Data@data
 10192  0661  3002               	movlw	2
 10193  0662  3191  216E  3186   	fcall	_setMemory_Data
 10194                           
 10195                           ;MCU_B1.c: 1067: setMemory_Data(3, product->Data[21]);
 10196  0665  0020               	movlb	0	; select bank0
 10197  0666  086C               	movf	_product,w
 10198  0667  0086               	movwf	6
 10199  0668  3001               	movlw	1	; select bank2/3
 10200  0669  0087               	movwf	7
 10201  066A  3001               	movlw	1	; select bank2/3
 10202  066B  3F55               	moviw [21]fsr1
 10203  066C  00F2               	movwf	setMemory_Data@data
 10204  066D  3003               	movlw	3
 10205  066E  3191  216E  3186   	fcall	_setMemory_Data
 10206                           
 10207                           ;MCU_B1.c: 1068: setMemory_Data(4, product->Data[22]);
 10208  0671  0020               	movlb	0	; select bank0
 10209  0672  086C               	movf	_product,w
 10210  0673  0086               	movwf	6
 10211  0674  3001               	movlw	1	; select bank2/3
 10212  0675  0087               	movwf	7
 10213  0676  3001               	movlw	1	; select bank2/3
 10214  0677  3F56               	moviw [22]fsr1
 10215  0678  00F2               	movwf	setMemory_Data@data
 10216  0679  3004               	movlw	4
 10217  067A  3191  216E  3186   	fcall	_setMemory_Data
 10218                           
 10219                           ;MCU_B1.c: 1069: setMemory_Data(5, product->Data[23]);
 10220  067D  0020               	movlb	0	; select bank0
 10221  067E  086C               	movf	_product,w
 10222  067F  0086               	movwf	6
 10223  0680  3001               	movlw	1	; select bank2/3
 10224  0681  0087               	movwf	7
 10225  0682  3001               	movlw	1	; select bank2/3
 10226  0683  3F57               	moviw [23]fsr1
 10227  0684  00F2               	movwf	setMemory_Data@data
 10228  0685  3005               	movlw	5
 10229  0686  3191  216E  3186   	fcall	_setMemory_Data
 10230                           
 10231                           ;MCU_B1.c: 1070: if (myMain.SaveDimmer == 1) {
 10232  0689  0021               	movlb	1	; select bank1
 10233  068A  1EC9               	btfss	(_myMain^(0+128)+10),5
 10234  068B  2E95               	goto	l8969
 10235                           
 10236                           ;MCU_B1.c: 1071: myMain.SaveDimmer = 0;
 10237  068C  12C9               	bcf	(_myMain^(0+128)+10),5
 10238                           
 10239                           ;MCU_B1.c: 1072: setMemory_Data(30, 0xaa);
 10240  068D  30AA               	movlw	170
 10241  068E  00F6               	movwf	??_Flash_Memory_Modify
 10242  068F  0876               	movf	??_Flash_Memory_Modify,w
 10243  0690  00F2               	movwf	setMemory_Data@data
 10244  0691  301E               	movlw	30
 10245  0692  3191  216E  3186   	fcall	_setMemory_Data
 10246  0695                     l8969:	
 10247                           
 10248                           ;MCU_B1.c: 1073: }
 10249                           ;MCU_B1.c: 1075: if (Memory.LoopSave == 1) {
 10250  0695  0023               	movlb	3	; select bank3
 10251  0696  1D44               	btfss	(_Memory^(0+384)+36),2
 10252  0697  2E9C               	goto	l1281
 10253                           
 10254                           ;MCU_B1.c: 1076: Memory.LoopSave = 0;
 10255  0698  1144               	bcf	(_Memory^(0+384)+36),2
 10256                           
 10257                           ;MCU_B1.c: 1077: myMain.FirstOpen = 0;
 10258  0699  0021               	movlb	1	; select bank1
 10259  069A  11BF               	bcf	_myMain^(0+128),3
 10260                           
 10261                           ;MCU_B1.c: 1078: myMain.First = 0;
 10262  069B  12BF               	bcf	_myMain^(0+128),5
 10263  069C                     l1281:	
 10264                           
 10265                           ;MCU_B1.c: 1080: }
 10266                           ;MCU_B1.c: 1081: GIE = 0;
 10267  069C  138B               	bcf	11,7	;volatile
 10268                           
 10269                           ;MCU_B1.c: 1082: Flash_Memory_Erasing();
 10270  069D  3191  21BE  3186   	fcall	_Flash_Memory_Erasing
 10271                           
 10272                           ;MCU_B1.c: 1083: Flash_Memory_Write();
 10273  06A0  3195  259F         	fcall	_Flash_Memory_Write
 10274                           
 10275                           ;MCU_B1.c: 1084: GIE = 1;
 10276  06A2  178B               	bsf	11,7	;volatile
 10277  06A3  0008               	return
 10278  06A4                     __end_of_Flash_Memory_Modify:	
 10279                           
 10280                           	psect	text65
 10281  11BE                     __ptext65:	
 10282 ;; *************** function _Flash_Memory_Erasing *****************
 10283 ;; Defined at:
 10284 ;;		line 1046 in file "../src/MCU_B1.c"
 10285 ;; Parameters:    Size  Location     Type
 10286 ;;		None
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;		None
 10289 ;; Return value:  Size  Location     Type
 10290 ;;		None               void
 10291 ;; Registers used:
 10292 ;;		wreg, status,2, status,0, pclath, cstack
 10293 ;; Tracked objects:
 10294 ;;		On entry : 0/0
 10295 ;;		On exit  : 0/0
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;Total ram usage:        0 bytes
 10303 ;; Hardware stack levels used:    1
 10304 ;; Hardware stack levels required when called:    4
 10305 ;; This function calls:
 10306 ;;		_Flash_Memory_Unlock
 10307 ;; This function is called by:
 10308 ;;		_Flash_Memory_Modify
 10309 ;; This function uses a non-reentrant model
 10310 ;;
 10311                           
 10312                           
 10313                           ;psect for function _Flash_Memory_Erasing
 10314  11BE                     _Flash_Memory_Erasing:	
 10315                           
 10316                           ;MCU_B1.c: 1047: CFGS = 0;
 10317                           
 10318                           ;incstack = 0
 10319                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10320  11BE  0023               	movlb	3	; select bank3
 10321  11BF  1315               	bcf	21,6	;volatile
 10322                           
 10323                           ;MCU_B1.c: 1048: PMADRH = 0x30;
 10324  11C0  3030               	movlw	48
 10325  11C1  0092               	movwf	18	;volatile
 10326                           
 10327                           ;MCU_B1.c: 1049: PMADRL = 0x00;
 10328  11C2  0191               	clrf	17	;volatile
 10329                           
 10330                           ;MCU_B1.c: 1050: FREE = 1;
 10331  11C3  1615               	bsf	21,4	;volatile
 10332                           
 10333                           ;MCU_B1.c: 1051: WREN = 1;
 10334  11C4  1515               	bsf	21,2	;volatile
 10335                           
 10336                           ;MCU_B1.c: 1052: Flash_Memory_Unlock();
 10337  11C5  3191  213C         	fcall	_Flash_Memory_Unlock
 10338                           
 10339                           ;MCU_B1.c: 1053: WREN = 0;
 10340  11C7  0023               	movlb	3	; select bank3
 10341  11C8  1115               	bcf	21,2	;volatile
 10342  11C9  0008               	return
 10343  11CA                     __end_of_Flash_Memory_Erasing:	
 10344                           
 10345                           	psect	text66
 10346  02B3                     __ptext66:	
 10347 ;; *************** function _Flash_Memory_Initialization *****************
 10348 ;; Defined at:
 10349 ;;		line 934 in file "../src/MCU_B1.c"
 10350 ;; Parameters:    Size  Location     Type
 10351 ;;		None
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;  value           1    7[COMMON] unsigned char 
 10354 ;; Return value:  Size  Location     Type
 10355 ;;		None               void
 10356 ;; Registers used:
 10357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10358 ;; Tracked objects:
 10359 ;;		On entry : 0/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;Total ram usage:        2 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; Hardware stack levels required when called:    5
 10370 ;; This function calls:
 10371 ;;		_Flash_Memory_Read
 10372 ;;		_Flash_Memory_Write
 10373 ;;		_setMemory_Data
 10374 ;; This function is called by:
 10375 ;;		_main
 10376 ;; This function uses a non-reentrant model
 10377 ;;
 10378                           
 10379                           
 10380                           ;psect for function _Flash_Memory_Initialization
 10381  02B3                     _Flash_Memory_Initialization:	
 10382                           
 10383                           ;MCU_B1.c: 935: char value = 0;
 10384                           
 10385                           ;incstack = 0
 10386                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10387  02B3  01F7               	clrf	Flash_Memory_Initialization@value
 10388                           
 10389                           ;MCU_B1.c: 936: if (Flash_Memory_Read(31) == 0xaa) {
 10390  02B4  301F               	movlw	31
 10391  02B5  3193  2323  3182   	fcall	_Flash_Memory_Read
 10392  02B8  3AAA               	xorlw	170
 10393  02B9  1D03               	skipz
 10394  02BA  2B35               	goto	l9155
 10395                           
 10396                           ;MCU_B1.c: 937: product->Data[11] = Flash_Memory_Read(6);
 10397  02BB  3006               	movlw	6
 10398  02BC  3193  2323  3182   	fcall	_Flash_Memory_Read
 10399  02BF  00F6               	movwf	??_Flash_Memory_Initialization
 10400  02C0  0020               	movlb	0	; select bank0
 10401  02C1  086C               	movf	_product,w
 10402  02C2  3E0B               	addlw	11
 10403  02C3  0086               	movwf	6
 10404  02C4  3001               	movlw	1	; select bank2/3
 10405  02C5  0087               	movwf	7
 10406  02C6  0876               	movf	??_Flash_Memory_Initialization,w
 10407  02C7  0081               	movwf	1
 10408                           
 10409                           ;MCU_B1.c: 938: product->Data[12] = Flash_Memory_Read(0);
 10410  02C8  3000               	movlw	0
 10411  02C9  3193  2323  3182   	fcall	_Flash_Memory_Read
 10412  02CC  00F6               	movwf	??_Flash_Memory_Initialization
 10413  02CD  0020               	movlb	0	; select bank0
 10414  02CE  086C               	movf	_product,w
 10415  02CF  3E0C               	addlw	12
 10416  02D0  0086               	movwf	6
 10417  02D1  3001               	movlw	1	; select bank2/3
 10418  02D2  0087               	movwf	7
 10419  02D3  0876               	movf	??_Flash_Memory_Initialization,w
 10420  02D4  0081               	movwf	1
 10421                           
 10422                           ;MCU_B1.c: 939: product->Data[13] = Flash_Memory_Read(1);
 10423  02D5  3001               	movlw	1
 10424  02D6  3193  2323  3182   	fcall	_Flash_Memory_Read
 10425  02D9  00F6               	movwf	??_Flash_Memory_Initialization
 10426  02DA  0020               	movlb	0	; select bank0
 10427  02DB  086C               	movf	_product,w
 10428  02DC  3E0D               	addlw	13
 10429  02DD  0086               	movwf	6
 10430  02DE  3001               	movlw	1	; select bank2/3
 10431  02DF  0087               	movwf	7
 10432  02E0  0876               	movf	??_Flash_Memory_Initialization,w
 10433  02E1  0081               	movwf	1
 10434                           
 10435                           ;MCU_B1.c: 940: product->Data[14] = Flash_Memory_Read(2);
 10436  02E2  3002               	movlw	2
 10437  02E3  3193  2323  3182   	fcall	_Flash_Memory_Read
 10438  02E6  00F6               	movwf	??_Flash_Memory_Initialization
 10439  02E7  0020               	movlb	0	; select bank0
 10440  02E8  086C               	movf	_product,w
 10441  02E9  3E0E               	addlw	14
 10442  02EA  0086               	movwf	6
 10443  02EB  3001               	movlw	1	; select bank2/3
 10444  02EC  0087               	movwf	7
 10445  02ED  0876               	movf	??_Flash_Memory_Initialization,w
 10446  02EE  0081               	movwf	1
 10447                           
 10448                           ;MCU_B1.c: 943: product->Data[21] = Flash_Memory_Read(3);
 10449  02EF  3003               	movlw	3
 10450  02F0  3193  2323  3182   	fcall	_Flash_Memory_Read
 10451  02F3  00F6               	movwf	??_Flash_Memory_Initialization
 10452  02F4  0020               	movlb	0	; select bank0
 10453  02F5  086C               	movf	_product,w
 10454  02F6  3E15               	addlw	21
 10455  02F7  0086               	movwf	6
 10456  02F8  3001               	movlw	1	; select bank2/3
 10457  02F9  0087               	movwf	7
 10458  02FA  0876               	movf	??_Flash_Memory_Initialization,w
 10459  02FB  0081               	movwf	1
 10460                           
 10461                           ;MCU_B1.c: 944: product->Data[22] = Flash_Memory_Read(4);
 10462  02FC  3004               	movlw	4
 10463  02FD  3193  2323  3182   	fcall	_Flash_Memory_Read
 10464  0300  00F6               	movwf	??_Flash_Memory_Initialization
 10465  0301  0020               	movlb	0	; select bank0
 10466  0302  086C               	movf	_product,w
 10467  0303  3E16               	addlw	22
 10468  0304  0086               	movwf	6
 10469  0305  3001               	movlw	1	; select bank2/3
 10470  0306  0087               	movwf	7
 10471  0307  0876               	movf	??_Flash_Memory_Initialization,w
 10472  0308  0081               	movwf	1
 10473                           
 10474                           ;MCU_B1.c: 945: product->Data[23] = Flash_Memory_Read(5);
 10475  0309  3005               	movlw	5
 10476  030A  3193  2323  3182   	fcall	_Flash_Memory_Read
 10477  030D  00F6               	movwf	??_Flash_Memory_Initialization
 10478  030E  0020               	movlb	0	; select bank0
 10479  030F  086C               	movf	_product,w
 10480  0310  3E17               	addlw	23
 10481  0311  0086               	movwf	6
 10482  0312  3001               	movlw	1	; select bank2/3
 10483  0313  0087               	movwf	7
 10484  0314  0876               	movf	??_Flash_Memory_Initialization,w
 10485  0315  0081               	movwf	1
 10486                           
 10487                           ;MCU_B1.c: 952: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10488  0316  086C               	movf	_product,w
 10489  0317  3E0C               	addlw	12
 10490  0318  0086               	movwf	6
 10491  0319  3001               	movlw	1	; select bank2/3
 10492  031A  0087               	movwf	7
 10493  031B  0801               	movf	1,w
 10494  031C  3AFF               	xorlw	255
 10495  031D  1D03               	skipz
 10496  031E  0008               	return
 10497  031F  086C               	movf	_product,w
 10498  0320  3E0D               	addlw	13
 10499  0321  0086               	movwf	6
 10500  0322  3001               	movlw	1	; select bank2/3
 10501  0323  0087               	movwf	7
 10502  0324  0801               	movf	1,w
 10503  0325  3AFF               	xorlw	255
 10504  0326  1D03               	skipz
 10505  0327  0008               	return
 10506  0328  086C               	movf	_product,w
 10507  0329  3E0E               	addlw	14
 10508  032A  0086               	movwf	6
 10509  032B  3001               	movlw	1	; select bank2/3
 10510  032C  0087               	movwf	7
 10511  032D  0801               	movf	1,w
 10512  032E  3AFF               	xorlw	255
 10513  032F  1D03               	skipz
 10514  0330  0008               	return
 10515                           
 10516                           ;MCU_B1.c: 953: myMain.FirstOpen = 1;
 10517  0331  0021               	movlb	1	; select bank1
 10518  0332  15BF               	bsf	_myMain^(0+128),3
 10519                           
 10520                           ;MCU_B1.c: 954: myMain.First = 1;
 10521  0333  16BF               	bsf	_myMain^(0+128),5
 10522                           
 10523                           ;MCU_B1.c: 955: }
 10524                           ;MCU_B1.c: 956: } else {
 10525  0334  0008               	return
 10526  0335                     l9155:	
 10527                           
 10528                           ;MCU_B1.c: 958: setMemory_Data(0, 0xff);
 10529  0335  30FF               	movlw	255
 10530  0336  00F6               	movwf	??_Flash_Memory_Initialization
 10531  0337  0876               	movf	??_Flash_Memory_Initialization,w
 10532  0338  00F2               	movwf	setMemory_Data@data
 10533  0339  3000               	movlw	0
 10534  033A  3191  216E  3182   	fcall	_setMemory_Data
 10535                           
 10536                           ;MCU_B1.c: 959: setMemory_Data(1, 0xff);
 10537  033D  30FF               	movlw	255
 10538  033E  00F6               	movwf	??_Flash_Memory_Initialization
 10539  033F  0876               	movf	??_Flash_Memory_Initialization,w
 10540  0340  00F2               	movwf	setMemory_Data@data
 10541  0341  3001               	movlw	1
 10542  0342  3191  216E  3182   	fcall	_setMemory_Data
 10543                           
 10544                           ;MCU_B1.c: 960: setMemory_Data(2, 0xff);
 10545  0345  30FF               	movlw	255
 10546  0346  00F6               	movwf	??_Flash_Memory_Initialization
 10547  0347  0876               	movf	??_Flash_Memory_Initialization,w
 10548  0348  00F2               	movwf	setMemory_Data@data
 10549  0349  3002               	movlw	2
 10550  034A  3191  216E  3182   	fcall	_setMemory_Data
 10551                           
 10552                           ;MCU_B1.c: 961: setMemory_Data(3, 0xff);
 10553  034D  30FF               	movlw	255
 10554  034E  00F6               	movwf	??_Flash_Memory_Initialization
 10555  034F  0876               	movf	??_Flash_Memory_Initialization,w
 10556  0350  00F2               	movwf	setMemory_Data@data
 10557  0351  3003               	movlw	3
 10558  0352  3191  216E  3182   	fcall	_setMemory_Data
 10559                           
 10560                           ;MCU_B1.c: 962: setMemory_Data(4, 0xff);
 10561  0355  30FF               	movlw	255
 10562  0356  00F6               	movwf	??_Flash_Memory_Initialization
 10563  0357  0876               	movf	??_Flash_Memory_Initialization,w
 10564  0358  00F2               	movwf	setMemory_Data@data
 10565  0359  3004               	movlw	4
 10566  035A  3191  216E  3182   	fcall	_setMemory_Data
 10567                           
 10568                           ;MCU_B1.c: 963: setMemory_Data(5, 0xff);
 10569  035D  30FF               	movlw	255
 10570  035E  00F6               	movwf	??_Flash_Memory_Initialization
 10571  035F  0876               	movf	??_Flash_Memory_Initialization,w
 10572  0360  00F2               	movwf	setMemory_Data@data
 10573  0361  3005               	movlw	5
 10574  0362  3191  216E  3182   	fcall	_setMemory_Data
 10575                           
 10576                           ;MCU_B1.c: 964: setMemory_Data(6, 0xff);
 10577  0365  30FF               	movlw	255
 10578  0366  00F6               	movwf	??_Flash_Memory_Initialization
 10579  0367  0876               	movf	??_Flash_Memory_Initialization,w
 10580  0368  00F2               	movwf	setMemory_Data@data
 10581  0369  3006               	movlw	6
 10582  036A  3191  216E  3182   	fcall	_setMemory_Data
 10583                           
 10584                           ;MCU_B1.c: 965: setMemory_Data(31, 0xaa);
 10585  036D  30AA               	movlw	170
 10586  036E  00F6               	movwf	??_Flash_Memory_Initialization
 10587  036F  0876               	movf	??_Flash_Memory_Initialization,w
 10588  0370  00F2               	movwf	setMemory_Data@data
 10589  0371  301F               	movlw	31
 10590  0372  3191  216E  3182   	fcall	_setMemory_Data
 10591                           
 10592                           ;MCU_B1.c: 970: GIE = 0;
 10593  0375  138B               	bcf	11,7	;volatile
 10594                           
 10595                           ;MCU_B1.c: 971: Flash_Memory_Write();
 10596  0376  3195  259F         	fcall	_Flash_Memory_Write
 10597                           
 10598                           ;MCU_B1.c: 972: GIE = 1;
 10599  0378  178B               	bsf	11,7	;volatile
 10600                           
 10601                           ;MCU_B1.c: 973: myMain.FirstOpen = 1;
 10602  0379  0021               	movlb	1	; select bank1
 10603  037A  15BF               	bsf	_myMain^(0+128),3
 10604                           
 10605                           ;MCU_B1.c: 974: myMain.First = 1;
 10606  037B  16BF               	bsf	_myMain^(0+128),5
 10607                           
 10608                           ;MCU_B1.c: 975: myMain.InitDimmer = 1;
 10609  037C  1649               	bsf	(_myMain^(0+128)+10),4
 10610  037D  0008               	return
 10611  037E                     __end_of_Flash_Memory_Initialization:	
 10612                           
 10613                           	psect	text67
 10614  116E                     __ptext67:	
 10615 ;; *************** function _setMemory_Data *****************
 10616 ;; Defined at:
 10617 ;;		line 1099 in file "../src/MCU_B1.c"
 10618 ;; Parameters:    Size  Location     Type
 10619 ;;  address         1    wreg     unsigned char 
 10620 ;;  data            1    2[COMMON] unsigned char 
 10621 ;; Auto vars:     Size  Location     Type
 10622 ;;  address         1    4[COMMON] unsigned char 
 10623 ;; Return value:  Size  Location     Type
 10624 ;;		None               void
 10625 ;; Registers used:
 10626 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10627 ;; Tracked objects:
 10628 ;;		On entry : 0/0
 10629 ;;		On exit  : 0/0
 10630 ;;		Unchanged: 0/0
 10631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10632 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10634 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;Total ram usage:        3 bytes
 10637 ;; Hardware stack levels used:    1
 10638 ;; Hardware stack levels required when called:    3
 10639 ;; This function calls:
 10640 ;;		Nothing
 10641 ;; This function is called by:
 10642 ;;		_Flash_Memory_Initialization
 10643 ;;		_Flash_Memory_Modify
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647                           
 10648                           ;psect for function _setMemory_Data
 10649  116E                     _setMemory_Data:	
 10650                           
 10651                           ;incstack = 0
 10652                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 10653                           ;setMemory_Data@address stored from wreg
 10654  116E  00F4               	movwf	setMemory_Data@address
 10655                           
 10656                           ;MCU_B1.c: 1100: Memory.Data[address] = data;
 10657  116F  0872               	movf	setMemory_Data@data,w
 10658  1170  00F3               	movwf	??_setMemory_Data
 10659  1171  0874               	movf	setMemory_Data@address,w
 10660  1172  3EA0               	addlw	_Memory& (0+255)
 10661  1173  0086               	movwf	6
 10662  1174  3001               	movlw	1	; select bank3/4
 10663  1175  0087               	movwf	7
 10664  1176  0873               	movf	??_setMemory_Data,w
 10665  1177  0081               	movwf	1
 10666  1178  0008               	return
 10667  1179                     __end_of_setMemory_Data:	
 10668                           
 10669                           	psect	text68
 10670  159F                     __ptext68:	
 10671 ;; *************** function _Flash_Memory_Write *****************
 10672 ;; Defined at:
 10673 ;;		line 1027 in file "../src/MCU_B1.c"
 10674 ;; Parameters:    Size  Location     Type
 10675 ;;		None
 10676 ;; Auto vars:     Size  Location     Type
 10677 ;;  i               1    3[COMMON] unsigned char 
 10678 ;; Return value:  Size  Location     Type
 10679 ;;		None               void
 10680 ;; Registers used:
 10681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10682 ;; Tracked objects:
 10683 ;;		On entry : 0/0
 10684 ;;		On exit  : 0/0
 10685 ;;		Unchanged: 0/0
 10686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;Total ram usage:        2 bytes
 10692 ;; Hardware stack levels used:    1
 10693 ;; Hardware stack levels required when called:    4
 10694 ;; This function calls:
 10695 ;;		_Flash_Memory_Unlock
 10696 ;; This function is called by:
 10697 ;;		_Flash_Memory_Initialization
 10698 ;;		_Flash_Memory_Modify
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           
 10703                           ;psect for function _Flash_Memory_Write
 10704  159F                     _Flash_Memory_Write:	
 10705                           
 10706                           ;MCU_B1.c: 1028: char i = 0;
 10707                           
 10708                           ;incstack = 0
 10709                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10710  159F  01F3               	clrf	Flash_Memory_Write@i
 10711                           
 10712                           ;MCU_B1.c: 1029: CFGS = 0;
 10713  15A0  0023               	movlb	3	; select bank3
 10714  15A1  1315               	bcf	21,6	;volatile
 10715                           
 10716                           ;MCU_B1.c: 1030: PMADRH = 0x30;
 10717  15A2  3030               	movlw	48
 10718  15A3  0092               	movwf	18	;volatile
 10719                           
 10720                           ;MCU_B1.c: 1031: PMDATH = 0;
 10721  15A4  0194               	clrf	20	;volatile
 10722                           
 10723                           ;MCU_B1.c: 1032: FREE = 0;
 10724  15A5  1215               	bcf	21,4	;volatile
 10725                           
 10726                           ;MCU_B1.c: 1033: LWLO = 1;
 10727  15A6  1695               	bsf	21,5	;volatile
 10728                           
 10729                           ;MCU_B1.c: 1034: WREN = 1;
 10730  15A7  1515               	bsf	21,2	;volatile
 10731                           
 10732                           ;MCU_B1.c: 1035: for (i = 0; i < 32; i++) {
 10733  15A8  01F3               	clrf	Flash_Memory_Write@i
 10734  15A9  3020               	movlw	32
 10735  15AA  0273               	subwf	Flash_Memory_Write@i,w
 10736  15AB  1803               	btfsc	3,0
 10737  15AC  2DC2               	goto	l1271
 10738  15AD                     l8643:	
 10739                           
 10740                           ;MCU_B1.c: 1036: PMADRL = i;
 10741  15AD  0873               	movf	Flash_Memory_Write@i,w
 10742  15AE  0023               	movlb	3	; select bank3
 10743  15AF  0091               	movwf	17	;volatile
 10744                           
 10745                           ;MCU_B1.c: 1037: PMDATL = Memory.Data[i];
 10746  15B0  0873               	movf	Flash_Memory_Write@i,w
 10747  15B1  3EA0               	addlw	_Memory& (0+255)
 10748  15B2  0086               	movwf	6
 10749  15B3  3001               	movlw	1	; select bank3/4
 10750  15B4  0087               	movwf	7
 10751  15B5  0801               	movf	1,w
 10752  15B6  0093               	movwf	19	;volatile
 10753                           
 10754                           ;MCU_B1.c: 1038: Flash_Memory_Unlock();
 10755  15B7  3191  213C  3195   	fcall	_Flash_Memory_Unlock
 10756  15BA  3001               	movlw	1
 10757  15BB  00F2               	movwf	??_Flash_Memory_Write
 10758  15BC  0872               	movf	??_Flash_Memory_Write,w
 10759  15BD  07F3               	addwf	Flash_Memory_Write@i,f
 10760  15BE  3020               	movlw	32
 10761  15BF  0273               	subwf	Flash_Memory_Write@i,w
 10762  15C0  1C03               	skipc
 10763  15C1  2DAD               	goto	l8643
 10764  15C2                     l1271:	
 10765                           
 10766                           ;MCU_B1.c: 1039: }
 10767                           ;MCU_B1.c: 1040: LWLO = 0;
 10768  15C2  0023               	movlb	3	; select bank3
 10769  15C3  1295               	bcf	21,5	;volatile
 10770                           
 10771                           ;MCU_B1.c: 1041: Flash_Memory_Unlock();
 10772  15C4  3191  213C         	fcall	_Flash_Memory_Unlock
 10773                           
 10774                           ;MCU_B1.c: 1042: WREN = 0;
 10775  15C6  0023               	movlb	3	; select bank3
 10776  15C7  1115               	bcf	21,2	;volatile
 10777  15C8  0008               	return
 10778  15C9                     __end_of_Flash_Memory_Write:	
 10779                           
 10780                           	psect	text69
 10781  113C                     __ptext69:	
 10782 ;; *************** function _Flash_Memory_Unlock *****************
 10783 ;; Defined at:
 10784 ;;		line 1006 in file "../src/MCU_B1.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;		None
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;		None
 10789 ;; Return value:  Size  Location     Type
 10790 ;;		None               void
 10791 ;; Registers used:
 10792 ;;		wreg
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10802 ;;Total ram usage:        0 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; Hardware stack levels required when called:    3
 10805 ;; This function calls:
 10806 ;;		Nothing
 10807 ;; This function is called by:
 10808 ;;		_Flash_Memory_Write
 10809 ;;		_Flash_Memory_Erasing
 10810 ;; This function uses a non-reentrant model
 10811 ;;
 10812                           
 10813                           
 10814                           ;psect for function _Flash_Memory_Unlock
 10815  113C                     _Flash_Memory_Unlock:	
 10816                           
 10817                           ;MCU_B1.c: 1007: PMCON2 = 0x55;
 10818                           
 10819                           ;incstack = 0
 10820                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10821  113C  3055               	movlw	85
 10822  113D  0023               	movlb	3	; select bank3
 10823  113E  0096               	movwf	22	;volatile
 10824                           
 10825                           ;MCU_B1.c: 1008: PMCON2 = 0xaa;
 10826  113F  30AA               	movlw	170
 10827  1140  0096               	movwf	22	;volatile
 10828                           
 10829                           ;MCU_B1.c: 1009: WR = 1;
 10830  1141  1495               	bsf	21,1	;volatile
 10831                           
 10832                           ;MCU_B1.c: 1010: __nop();
 10833  1142  0000               	nop
 10834                           
 10835                           ;MCU_B1.c: 1011: __nop();
 10836  1143  0000               	nop
 10837  1144  0008               	return
 10838  1145                     __end_of_Flash_Memory_Unlock:	
 10839                           
 10840                           	psect	text70
 10841  1323                     __ptext70:	
 10842 ;; *************** function _Flash_Memory_Read *****************
 10843 ;; Defined at:
 10844 ;;		line 1015 in file "../src/MCU_B1.c"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;  address         1    wreg     unsigned char 
 10847 ;; Auto vars:     Size  Location     Type
 10848 ;;  address         1    4[COMMON] unsigned char 
 10849 ;;  ret             1    5[COMMON] unsigned char 
 10850 ;;  i               1    3[COMMON] unsigned char 
 10851 ;; Return value:  Size  Location     Type
 10852 ;;                  1    wreg      unsigned char 
 10853 ;; Registers used:
 10854 ;;		wreg, status,2
 10855 ;; Tracked objects:
 10856 ;;		On entry : 0/0
 10857 ;;		On exit  : 0/0
 10858 ;;		Unchanged: 0/0
 10859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10861 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10862 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10864 ;;Total ram usage:        4 bytes
 10865 ;; Hardware stack levels used:    1
 10866 ;; Hardware stack levels required when called:    3
 10867 ;; This function calls:
 10868 ;;		Nothing
 10869 ;; This function is called by:
 10870 ;;		_Flash_Memory_Initialization
 10871 ;;		_Flash_Memory_Modify
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           
 10876                           ;psect for function _Flash_Memory_Read
 10877  1323                     _Flash_Memory_Read:	
 10878                           
 10879                           ;incstack = 0
 10880                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10881                           ;Flash_Memory_Read@address stored from wreg
 10882  1323  00F4               	movwf	Flash_Memory_Read@address
 10883                           
 10884                           ;MCU_B1.c: 1016: char i = 0, ret = 0;
 10885  1324  01F3               	clrf	Flash_Memory_Read@i
 10886  1325  01F5               	clrf	Flash_Memory_Read@ret
 10887                           
 10888                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 10889  1326  3030               	movlw	48
 10890  1327  0023               	movlb	3	; select bank3
 10891  1328  0092               	movwf	18	;volatile
 10892                           
 10893                           ;MCU_B1.c: 1018: PMADRL = address;
 10894  1329  0874               	movf	Flash_Memory_Read@address,w
 10895  132A  0091               	movwf	17	;volatile
 10896                           
 10897                           ;MCU_B1.c: 1019: CFGS = 0;
 10898  132B  1315               	bcf	21,6	;volatile
 10899                           
 10900                           ;MCU_B1.c: 1020: RD = 1;
 10901  132C  1415               	bsf	21,0	;volatile
 10902                           
 10903                           ;MCU_B1.c: 1021: i = PMDATH;
 10904  132D  0814               	movf	20,w	;volatile
 10905  132E  00F2               	movwf	??_Flash_Memory_Read
 10906  132F  0872               	movf	??_Flash_Memory_Read,w
 10907  1330  00F3               	movwf	Flash_Memory_Read@i
 10908                           
 10909                           ;MCU_B1.c: 1022: ret = PMDATL;
 10910  1331  0813               	movf	19,w	;volatile
 10911  1332  00F2               	movwf	??_Flash_Memory_Read
 10912  1333  0872               	movf	??_Flash_Memory_Read,w
 10913  1334  00F5               	movwf	Flash_Memory_Read@ret
 10914                           
 10915                           ;MCU_B1.c: 1023: return ret;
 10916  1335  0875               	movf	Flash_Memory_Read@ret,w
 10917  1336  0008               	return
 10918  1337                     __end_of_Flash_Memory_Read:	
 10919                           
 10920                           	psect	text71
 10921  16B6                     __ptext71:	
 10922 ;; *************** function _Exception_Main *****************
 10923 ;; Defined at:
 10924 ;;		line 503 in file "../src/Main_B1.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;		None
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;  error           1    3[BANK0 ] unsigned char 
 10929 ;;  status          1    2[BANK0 ] unsigned char 
 10930 ;;  count           1    1[BANK0 ] unsigned char 
 10931 ;;  lights          1    0[BANK0 ] unsigned char 
 10932 ;; Return value:  Size  Location     Type
 10933 ;;		None               void
 10934 ;; Registers used:
 10935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10936 ;; Tracked objects:
 10937 ;;		On entry : 0/0
 10938 ;;		On exit  : 0/0
 10939 ;;		Unchanged: 0/0
 10940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;Total ram usage:        5 bytes
 10946 ;; Hardware stack levels used:    1
 10947 ;; Hardware stack levels required when called:    5
 10948 ;; This function calls:
 10949 ;;		_getMain_All_Error_Status
 10950 ;;		_setLED
 10951 ;; This function is called by:
 10952 ;;		_main
 10953 ;; This function uses a non-reentrant model
 10954 ;;
 10955                           
 10956                           
 10957                           ;psect for function _Exception_Main
 10958  16B6                     _Exception_Main:	
 10959                           
 10960                           ;Main_B1.c: 504: char error = getMain_All_Error_Status(0);
 10961                           
 10962                           ;incstack = 0
 10963                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10964  16B6  3000               	movlw	0
 10965  16B7  3190  20B4  3196   	fcall	_getMain_All_Error_Status
 10966  16BA  00F6               	movwf	??_Exception_Main
 10967  16BB  0876               	movf	??_Exception_Main,w
 10968  16BC  0020               	movlb	0	; select bank0
 10969  16BD  00A3               	movwf	Exception_Main@error
 10970                           
 10971                           ;Main_B1.c: 505: char lights = 0, count = 1;
 10972  16BE  01A0               	clrf	Exception_Main@lights
 10973  16BF  01A1               	clrf	Exception_Main@count
 10974  16C0  0AA1               	incf	Exception_Main@count,f
 10975                           
 10976                           ;Main_B1.c: 506: char status = 0;
 10977  16C1  01A2               	clrf	Exception_Main@status
 10978                           
 10979                           ;Main_B1.c: 508: if (myMain.Error_Run == 1) {
 10980  16C2  0021               	movlb	1	; select bank1
 10981  16C3  1DC9               	btfss	(_myMain^(0+128)+10),3
 10982  16C4  2ED3               	goto	l9255
 10983                           
 10984                           ;Main_B1.c: 509: if (error == 0) {
 10985  16C5  0020               	movlb	0	; select bank0
 10986  16C6  08A3               	movf	Exception_Main@error,f
 10987  16C7  1D03               	skipz
 10988  16C8  0008               	return
 10989                           
 10990                           ;Main_B1.c: 510: myMain.Error_Run = 0;
 10991  16C9  0021               	movlb	1	; select bank1
 10992  16CA  11C9               	bcf	(_myMain^(0+128)+10),3
 10993                           
 10994                           ;Main_B1.c: 513: setLED(99, 10);
 10995  16CB  300A               	movlw	10
 10996  16CC  00F6               	movwf	??_Exception_Main
 10997  16CD  0876               	movf	??_Exception_Main,w
 10998  16CE  00F4               	movwf	setLED@command
 10999  16CF  3063               	movlw	99
 11000  16D0  3188  200A         	fcall	_setLED
 11001                           
 11002                           ;Main_B1.c: 526: }
 11003                           ;Main_B1.c: 527: } else {
 11004  16D2  0008               	return
 11005  16D3                     l9255:	
 11006                           
 11007                           ;Main_B1.c: 528: if (error != 0) {
 11008  16D3  0020               	movlb	0	; select bank0
 11009  16D4  0823               	movf	Exception_Main@error,w
 11010  16D5  1903               	btfsc	3,2
 11011  16D6  0008               	return
 11012                           
 11013                           ;Main_B1.c: 529: myMain.Error_Run = 1;
 11014  16D7  0021               	movlb	1	; select bank1
 11015  16D8  15C9               	bsf	(_myMain^(0+128)+10),3
 11016                           
 11017                           ;Main_B1.c: 531: setLED(99, 11);
 11018  16D9  300B               	movlw	11
 11019  16DA  00F6               	movwf	??_Exception_Main
 11020  16DB  0876               	movf	??_Exception_Main,w
 11021  16DC  00F4               	movwf	setLED@command
 11022  16DD  3063               	movlw	99
 11023  16DE  3188  200A  3196   	fcall	_setLED
 11024                           
 11025                           ;Main_B1.c: 590: }
 11026                           
 11027                           ;Main_B1.c: 589: break;
 11028                           
 11029                           ;Main_B1.c: 565: case 3:
 11030                           
 11031                           ;Main_B1.c: 564: break;
 11032                           
 11033                           ;Main_B1.c: 543: case 2:
 11034                           
 11035                           ;Main_B1.c: 542: switch (error) {
 11036  16E1  0020               	movlb	0	; select bank0
 11037  16E2  0823               	movf	Exception_Main@error,w
 11038                           
 11039                           ; Switch size 1, requested type "space"
 11040                           ; Number of cases is 2, Range of values is 2 to 3
 11041                           ; switch strategies available:
 11042                           ; Name         Instructions Cycles
 11043                           ; simple_byte            7     4 (average)
 11044                           ; direct_byte           13     9 (fixed)
 11045                           ; jumptable            263     9 (fixed)
 11046                           ;	Chosen strategy is simple_byte
 11047  16E3  3A02               	xorlw	2	; case 2
 11048  16E4  1903               	skipnz
 11049  16E5  2EEB               	goto	l1466
 11050  16E6  3A01               	xorlw	1	; case 3
 11051  16E7  1903               	skipnz
 11052  16E8  2EEB               	goto	l1466
 11053  16E9  2EEB               	goto	l1466
 11054  16EA  0008               	return
 11055  16EB                     l1466:	
 11056  16EB  0008               	return
 11057  16EC                     __end_of_Exception_Main:	
 11058                           
 11059                           	psect	text72
 11060  10B4                     __ptext72:	
 11061 ;; *************** function _getMain_All_Error_Status *****************
 11062 ;; Defined at:
 11063 ;;		line 428 in file "../src/Main_B1.c"
 11064 ;; Parameters:    Size  Location     Type
 11065 ;;  command         1    wreg     unsigned char 
 11066 ;; Auto vars:     Size  Location     Type
 11067 ;;  command         1    0[COMMON] unsigned char 
 11068 ;;  status          1    2[COMMON] unsigned char 
 11069 ;; Return value:  Size  Location     Type
 11070 ;;                  1    wreg      unsigned char 
 11071 ;; Registers used:
 11072 ;;		wreg, status,2
 11073 ;; Tracked objects:
 11074 ;;		On entry : 0/0
 11075 ;;		On exit  : 0/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11082 ;;Total ram usage:        1 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; Hardware stack levels required when called:    3
 11085 ;; This function calls:
 11086 ;;		Nothing
 11087 ;; This function is called by:
 11088 ;;		_Exception_Main
 11089 ;;		_getRxData
 11090 ;;		_setSw_Main
 11091 ;; This function uses a non-reentrant model
 11092 ;;
 11093                           
 11094                           
 11095                           ;psect for function _getMain_All_Error_Status
 11096  10B4                     _getMain_All_Error_Status:	
 11097                           
 11098                           ;Main_B1.c: 429: char status = 0;
 11099                           
 11100                           ;incstack = 0
 11101                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
 11102  10B4  01F2               	clrf	getMain_All_Error_Status@status
 11103                           
 11104                           ;Main_B1.c: 459: return status;
 11105  10B5  0872               	movf	getMain_All_Error_Status@status,w
 11106  10B6  0008               	return
 11107  10B7                     __end_of_getMain_All_Error_Status:	
 11108                           
 11109                           	psect	text73
 11110  1122                     __ptext73:	
 11111 ;; *************** function _DimmerLights_Main *****************
 11112 ;; Defined at:
 11113 ;;		line 869 in file "../src/Dimmer_B1.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;		None
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;		None
 11118 ;; Return value:  Size  Location     Type
 11119 ;;		None               void
 11120 ;; Registers used:
 11121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11122 ;; Tracked objects:
 11123 ;;		On entry : 0/0
 11124 ;;		On exit  : 0/0
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;Total ram usage:        0 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; Hardware stack levels required when called:    8
 11134 ;; This function calls:
 11135 ;;		_DimmerLights_DimmingFunction
 11136 ;;		_setDimmerLights_Main
 11137 ;; This function is called by:
 11138 ;;		_main
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142                           
 11143                           ;psect for function _DimmerLights_Main
 11144  1122                     _DimmerLights_Main:	
 11145                           
 11146                           ;Dimmer_B1.c: 881: setDimmerLights_Main(1);
 11147                           
 11148                           ;incstack = 0
 11149                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11150  1122  3001               	movlw	1
 11151  1123  318D  2505  3191   	fcall	_setDimmerLights_Main
 11152                           
 11153                           ;Dimmer_B1.c: 884: DimmerLights_DimmingFunction(1);
 11154  1126  3001               	movlw	1
 11155  1127  318A  227A         	fcall	_DimmerLights_DimmingFunction
 11156  1129  0008               	return
 11157  112A                     __end_of_DimmerLights_Main:	
 11158                           
 11159                           	psect	text74
 11160  0D05                     __ptext74:	
 11161 ;; *************** function _setDimmerLights_Main *****************
 11162 ;; Defined at:
 11163 ;;		line 926 in file "../src/Dimmer_B1.c"
 11164 ;; Parameters:    Size  Location     Type
 11165 ;;  lights          1    wreg     unsigned char 
 11166 ;; Auto vars:     Size  Location     Type
 11167 ;;  lights          1   73[BANK0 ] unsigned char 
 11168 ;; Return value:  Size  Location     Type
 11169 ;;		None               void
 11170 ;; Registers used:
 11171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11172 ;; Tracked objects:
 11173 ;;		On entry : 0/0
 11174 ;;		On exit  : 0/0
 11175 ;;		Unchanged: 0/0
 11176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;Total ram usage:        1 bytes
 11182 ;; Hardware stack levels used:    1
 11183 ;; Hardware stack levels required when called:    7
 11184 ;; This function calls:
 11185 ;;		_DimmerLights_SelectPointer
 11186 ;;		_getDimmerLights_Allow_Condition
 11187 ;;		_getMain_All_LightsStatus
 11188 ;;		_setDimmerLights_Dimming
 11189 ;;		_setDimmerLights_OnOff
 11190 ;; This function is called by:
 11191 ;;		_DimmerLights_Main
 11192 ;; This function uses a non-reentrant model
 11193 ;;
 11194                           
 11195                           
 11196                           ;psect for function _setDimmerLights_Main
 11197  0D05                     _setDimmerLights_Main:	
 11198                           
 11199                           ;incstack = 0
 11200                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11201                           ;setDimmerLights_Main@lights stored from wreg
 11202  0D05  0020               	movlb	0	; select bank0
 11203  0D06  00E9               	movwf	setDimmerLights_Main@lights
 11204                           
 11205                           ;Dimmer_B1.c: 928: DimmerLights_SelectPointer(lights);
 11206  0D07  0869               	movf	setDimmerLights_Main@lights,w
 11207  0D08  3191  2158  318D   	fcall	_DimmerLights_SelectPointer
 11208                           
 11209                           ;Dimmer_B1.c: 929: if (DimmerLights->Trigger == 1) {
 11210  0D0B  0020               	movlb	0	; select bank0
 11211  0D0C  086A               	movf	_DimmerLights,w
 11212  0D0D  0086               	movwf	6
 11213  0D0E  3001               	movlw	1	; select bank2/3
 11214  0D0F  0087               	movwf	7
 11215  0D10  1C81               	btfss	1,1
 11216  0D11  2D31               	goto	l8851
 11217                           
 11218                           ;Dimmer_B1.c: 930: if (getDimmerLights_Allow_Condition(lights) == 0) {
 11219  0D12  0869               	movf	setDimmerLights_Main@lights,w
 11220  0D13  3190  20B1  318D   	fcall	_getDimmerLights_Allow_Condition
 11221  0D16  3800               	iorlw	0
 11222  0D17  1D03               	skipz
 11223  0D18  0008               	return
 11224                           
 11225                           ;Dimmer_B1.c: 931: DimmerLights->Trigger = 0;
 11226  0D19  0020               	movlb	0	; select bank0
 11227  0D1A  086A               	movf	_DimmerLights,w
 11228  0D1B  0086               	movwf	6
 11229  0D1C  3001               	movlw	1	; select bank2/3
 11230  0D1D  0087               	movwf	7
 11231  0D1E  1081               	bcf	1,1
 11232                           
 11233                           ;Dimmer_B1.c: 932: if (DimmerLights->Switch == 1) {
 11234  0D1F  086A               	movf	_DimmerLights,w
 11235  0D20  0086               	movwf	6
 11236  0D21  3001               	movlw	1	; select bank2/3
 11237  0D22  0087               	movwf	7
 11238  0D23  1D01               	btfss	1,2
 11239  0D24  2D2B               	goto	l8849
 11240                           
 11241                           ;Dimmer_B1.c: 933: setDimmerLights_OnOff(lights, 1);
 11242  0D25  01E5               	clrf	setDimmerLights_OnOff@command
 11243  0D26  0AE5               	incf	setDimmerLights_OnOff@command,f
 11244  0D27  0869               	movf	setDimmerLights_Main@lights,w
 11245  0D28  3184  2432         	fcall	_setDimmerLights_OnOff
 11246                           
 11247                           ;Dimmer_B1.c: 934: } else {
 11248  0D2A  0008               	return
 11249  0D2B                     l8849:	
 11250                           
 11251                           ;Dimmer_B1.c: 935: setDimmerLights_OnOff(lights, 0);
 11252  0D2B  0020               	movlb	0	; select bank0
 11253  0D2C  01E5               	clrf	setDimmerLights_OnOff@command
 11254  0D2D  0869               	movf	setDimmerLights_Main@lights,w
 11255  0D2E  3184  2432         	fcall	_setDimmerLights_OnOff
 11256                           
 11257                           ;Dimmer_B1.c: 936: }
 11258                           ;Dimmer_B1.c: 937: }
 11259                           ;Dimmer_B1.c: 938: } else {
 11260  0D30  0008               	return
 11261  0D31                     l8851:	
 11262                           
 11263                           ;Dimmer_B1.c: 939: if (getMain_All_LightsStatus() == 1) {
 11264  0D31  3191  211A  318D   	fcall	_getMain_All_LightsStatus
 11265  0D34  3A01               	xorlw	1
 11266  0D35  1D03               	skipz
 11267  0D36  2D5D               	goto	l8863
 11268                           
 11269                           ;Dimmer_B1.c: 940: if (DimmerLights->DimmingTrigger == 1) {
 11270  0D37  0020               	movlb	0	; select bank0
 11271  0D38  086A               	movf	_DimmerLights,w
 11272  0D39  0086               	movwf	6
 11273  0D3A  3001               	movlw	1	; select bank2/3
 11274  0D3B  0087               	movwf	7
 11275  0D3C  1E01               	btfss	1,4
 11276  0D3D  0008               	return
 11277                           
 11278                           ;Dimmer_B1.c: 941: if (getDimmerLights_Allow_Condition(lights) == 0) {
 11279  0D3E  0869               	movf	setDimmerLights_Main@lights,w
 11280  0D3F  3190  20B1  318D   	fcall	_getDimmerLights_Allow_Condition
 11281  0D42  3800               	iorlw	0
 11282  0D43  1D03               	skipz
 11283  0D44  0008               	return
 11284                           
 11285                           ;Dimmer_B1.c: 942: DimmerLights->DimmingTrigger = 0;
 11286  0D45  0020               	movlb	0	; select bank0
 11287  0D46  086A               	movf	_DimmerLights,w
 11288  0D47  0086               	movwf	6
 11289  0D48  3001               	movlw	1	; select bank2/3
 11290  0D49  0087               	movwf	7
 11291  0D4A  1201               	bcf	1,4
 11292                           
 11293                           ;Dimmer_B1.c: 943: if (DimmerLights->DimmingSwitch == 1) {
 11294  0D4B  086A               	movf	_DimmerLights,w
 11295  0D4C  0086               	movwf	6
 11296  0D4D  3001               	movlw	1	; select bank2/3
 11297  0D4E  0087               	movwf	7
 11298  0D4F  1E81               	btfss	1,5
 11299  0D50  2D57               	goto	l8861
 11300                           
 11301                           ;Dimmer_B1.c: 944: setDimmerLights_Dimming(lights, 1);
 11302  0D51  01E2               	clrf	setDimmerLights_Dimming@status
 11303  0D52  0AE2               	incf	setDimmerLights_Dimming@status,f
 11304  0D53  0869               	movf	setDimmerLights_Main@lights,w
 11305  0D54  3187  27B2         	fcall	_setDimmerLights_Dimming
 11306                           
 11307                           ;Dimmer_B1.c: 945: } else {
 11308  0D56  0008               	return
 11309  0D57                     l8861:	
 11310                           
 11311                           ;Dimmer_B1.c: 946: setDimmerLights_Dimming(lights, 0);
 11312  0D57  0020               	movlb	0	; select bank0
 11313  0D58  01E2               	clrf	setDimmerLights_Dimming@status
 11314  0D59  0869               	movf	setDimmerLights_Main@lights,w
 11315  0D5A  3187  27B2         	fcall	_setDimmerLights_Dimming
 11316                           
 11317                           ;Dimmer_B1.c: 947: }
 11318                           ;Dimmer_B1.c: 948: }
 11319                           ;Dimmer_B1.c: 949: }
 11320                           ;Dimmer_B1.c: 950: } else {
 11321  0D5C  0008               	return
 11322  0D5D                     l8863:	
 11323                           
 11324                           ;Dimmer_B1.c: 951: if (DimmerLights->DimmingTrigger == 1) {
 11325  0D5D  0020               	movlb	0	; select bank0
 11326  0D5E  086A               	movf	_DimmerLights,w
 11327  0D5F  0086               	movwf	6
 11328  0D60  3001               	movlw	1	; select bank2/3
 11329  0D61  0087               	movwf	7
 11330  0D62  1E01               	btfss	1,4
 11331  0D63  0008               	return
 11332                           
 11333                           ;Dimmer_B1.c: 952: DimmerLights->DimmingTrigger = 0;
 11334  0D64  086A               	movf	_DimmerLights,w
 11335  0D65  0086               	movwf	6
 11336  0D66  3001               	movlw	1	; select bank2/3
 11337  0D67  0087               	movwf	7
 11338  0D68  1201               	bcf	1,4
 11339  0D69  0008               	return
 11340  0D6A                     __end_of_setDimmerLights_Main:	
 11341                           
 11342                           	psect	text75
 11343  0432                     __ptext75:	
 11344 ;; *************** function _setDimmerLights_OnOff *****************
 11345 ;; Defined at:
 11346 ;;		line 1003 in file "../src/Dimmer_B1.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;  lights          1    wreg     unsigned char 
 11349 ;;  command         1   69[BANK0 ] unsigned char 
 11350 ;; Auto vars:     Size  Location     Type
 11351 ;;  lights          1   72[BANK0 ] unsigned char 
 11352 ;; Return value:  Size  Location     Type
 11353 ;;		None               void
 11354 ;; Registers used:
 11355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11356 ;; Tracked objects:
 11357 ;;		On entry : 0/0
 11358 ;;		On exit  : 0/0
 11359 ;;		Unchanged: 0/0
 11360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11361 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;Total ram usage:        4 bytes
 11366 ;; Hardware stack levels used:    1
 11367 ;; Hardware stack levels required when called:    6
 11368 ;; This function calls:
 11369 ;;		_DimmerIntr_ValueCalculate
 11370 ;;		_getCmd_Status
 11371 ;;		_getDelayOff_GO
 11372 ;;		_getDimmerLights_PercentToValue
 11373 ;;		_getMain_All_LightsStatus
 11374 ;;		_setCmd_Status
 11375 ;;		_setDelayOff_GO
 11376 ;;		_setDimmerIntr_ControlStatus
 11377 ;;		_setDimmerIntr_DimmingValue
 11378 ;;		_setDimmerIntr_Dimming_RF
 11379 ;;		_setDimmerIntr_MaxmumValue
 11380 ;;		_setDimmerLights_DimmingClose
 11381 ;;		_setLED
 11382 ;;		_setProductData
 11383 ;;		_setRF_DimmerLights
 11384 ;;		_setTxData
 11385 ;; This function is called by:
 11386 ;;		_setDimmerLights_Main
 11387 ;; This function uses a non-reentrant model
 11388 ;;
 11389                           
 11390                           
 11391                           ;psect for function _setDimmerLights_OnOff
 11392  0432                     _setDimmerLights_OnOff:	
 11393                           
 11394                           ;incstack = 0
 11395                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11396                           ;setDimmerLights_OnOff@lights stored from wreg
 11397  0432  0020               	movlb	0	; select bank0
 11398  0433  00E8               	movwf	setDimmerLights_OnOff@lights
 11399                           
 11400                           ;Dimmer_B1.c: 1005: if (command == 1) {
 11401  0434  0865               	movf	setDimmerLights_OnOff@command,w
 11402  0435  3A01               	xorlw	1
 11403  0436  1D03               	skipz
 11404  0437  2C8B               	goto	l8553
 11405                           
 11406                           ;Dimmer_B1.c: 1007: setDimmerIntr_ControlStatus(lights, 1);
 11407  0438  01F2               	clrf	setDimmerIntr_ControlStatus@command
 11408  0439  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 11409  043A  0868               	movf	setDimmerLights_OnOff@lights,w
 11410  043B  3193  234C  3184   	fcall	_setDimmerIntr_ControlStatus
 11411                           
 11412                           ;Dimmer_B1.c: 1017: setLED(lights, 0);
 11413  043E  01F4               	clrf	setLED@command
 11414  043F  0020               	movlb	0	; select bank0
 11415  0440  0868               	movf	setDimmerLights_OnOff@lights,w
 11416  0441  3188  200A  3184   	fcall	_setLED
 11417                           
 11418                           ;Dimmer_B1.c: 1018: ;;
 11419                           ;Dimmer_B1.c: 1038: if (DimmerLights->DimmingRun == 1) {
 11420  0444  0020               	movlb	0	; select bank0
 11421  0445  0A6A               	incf	_DimmerLights,w
 11422  0446  0086               	movwf	6
 11423  0447  3001               	movlw	1	; select bank2/3
 11424  0448  0087               	movwf	7
 11425  0449  1F01               	btfss	1,6
 11426  044A  2C6C               	goto	l8545
 11427                           
 11428                           ;Dimmer_B1.c: 1039: DimmerLights->DimmingRun = 0;
 11429  044B  0A6A               	incf	_DimmerLights,w
 11430  044C  0086               	movwf	6
 11431  044D  3001               	movlw	1	; select bank2/3
 11432  044E  0087               	movwf	7
 11433  044F  1301               	bcf	1,6
 11434                           
 11435                           ;Dimmer_B1.c: 1040: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 11436  0450  0868               	movf	setDimmerLights_OnOff@lights,w
 11437  0451  3E14               	addlw	20
 11438  0452  076C               	addwf	_product,w
 11439  0453  00E6               	movwf	??_setDimmerLights_OnOff
 11440  0454  0866               	movf	??_setDimmerLights_OnOff,w
 11441  0455  0086               	movwf	6
 11442  0456  3001               	movlw	1	; select bank2/3
 11443  0457  0087               	movwf	7
 11444  0458  0801               	movf	1,w
 11445  0459  318C  243B  3184   	fcall	_getDimmerLights_PercentToValue
 11446  045C  0020               	movlb	0	; select bank0
 11447  045D  00E7               	movwf	??_setDimmerLights_OnOff+1
 11448  045E  0867               	movf	??_setDimmerLights_OnOff+1,w
 11449  045F  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 11450  0460  0868               	movf	setDimmerLights_OnOff@lights,w
 11451  0461  3191  21A6  3184   	fcall	_setDimmerIntr_MaxmumValue
 11452                           
 11453                           ;Dimmer_B1.c: 1041: setDimmerIntr_Dimming_RF(lights, 1);
 11454  0464  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 11455  0465  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 11456  0466  0020               	movlb	0	; select bank0
 11457  0467  0868               	movf	setDimmerLights_OnOff@lights,w
 11458  0468  3193  2361  3184   	fcall	_setDimmerIntr_Dimming_RF
 11459                           
 11460                           ;Dimmer_B1.c: 1042: } else {
 11461  046B  2C81               	goto	l8547
 11462  046C                     l8545:	
 11463                           
 11464                           ;Dimmer_B1.c: 1045: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pr
      +                          oduct->Data[20 + lights]));
 11465  046C  0020               	movlb	0	; select bank0
 11466  046D  0868               	movf	setDimmerLights_OnOff@lights,w
 11467  046E  3E14               	addlw	20
 11468  046F  076C               	addwf	_product,w
 11469  0470  00E6               	movwf	??_setDimmerLights_OnOff
 11470  0471  0866               	movf	??_setDimmerLights_OnOff,w
 11471  0472  0086               	movwf	6
 11472  0473  3001               	movlw	1	; select bank2/3
 11473  0474  0087               	movwf	7
 11474  0475  0801               	movf	1,w
 11475  0476  318C  243B  3184   	fcall	_getDimmerLights_PercentToValue
 11476  0479  0020               	movlb	0	; select bank0
 11477  047A  00E7               	movwf	??_setDimmerLights_OnOff+1
 11478  047B  0867               	movf	??_setDimmerLights_OnOff+1,w
 11479  047C  00DA               	movwf	setDimmerIntr_DimmingValue@value
 11480  047D  0868               	movf	setDimmerLights_OnOff@lights,w
 11481  047E  3191  21B2  3184   	fcall	_setDimmerIntr_DimmingValue
 11482  0481                     l8547:	
 11483                           
 11484                           ;Dimmer_B1.c: 1051: }
 11485                           ;Dimmer_B1.c: 1053: if (lights == 1) {
 11486  0481  0020               	movlb	0	; select bank0
 11487  0482  0868               	movf	setDimmerLights_OnOff@lights,w
 11488  0483  3A01               	xorlw	1
 11489  0484  1D03               	skipz
 11490  0485  2CAF               	goto	l8565
 11491                           
 11492                           ;Dimmer_B1.c: 1056: DimmerIntr_ValueCalculate(1);
 11493  0486  3001               	movlw	1
 11494  0487  3195  25F3  3184   	fcall	_DimmerIntr_ValueCalculate
 11495                           
 11496                           ;Dimmer_B1.c: 1063: }
 11497                           ;Dimmer_B1.c: 1069: } else if (command == 0) {
 11498                           
 11499                           ;Dimmer_B1.c: 1058: } else if (lights == 2) {
 11500  048A  2CAF               	goto	l8565
 11501  048B                     l8553:	
 11502  048B  0020               	movlb	0	; select bank0
 11503  048C  08E5               	movf	setDimmerLights_OnOff@command,f
 11504  048D  1D03               	skipz
 11505  048E  2CAF               	goto	l8565
 11506                           
 11507                           ;Dimmer_B1.c: 1071: setDimmerIntr_ControlStatus(lights, 0);
 11508  048F  01F2               	clrf	setDimmerIntr_ControlStatus@command
 11509  0490  0868               	movf	setDimmerLights_OnOff@lights,w
 11510  0491  3193  234C  3184   	fcall	_setDimmerIntr_ControlStatus
 11511                           
 11512                           ;Dimmer_B1.c: 1078: if (getDelayOff_GO(lights) == 1) {
 11513  0494  0020               	movlb	0	; select bank0
 11514  0495  0868               	movf	setDimmerLights_OnOff@lights,w
 11515  0496  3191  21F0  3184   	fcall	_getDelayOff_GO
 11516  0499  3A01               	xorlw	1
 11517  049A  1D03               	skipz
 11518  049B  2CA3               	goto	l793
 11519                           
 11520                           ;Dimmer_B1.c: 1079: setDelayOff_GO(lights, 0, 0);
 11521  049C  0020               	movlb	0	; select bank0
 11522  049D  01DD               	clrf	setDelayOff_GO@command
 11523  049E  01DE               	clrf	setDelayOff_GO@value
 11524  049F  0868               	movf	setDimmerLights_OnOff@lights,w
 11525  04A0  318F  277C  3184   	fcall	_setDelayOff_GO
 11526  04A3                     l793:	
 11527                           
 11528                           ;Dimmer_B1.c: 1080: }
 11529                           ;Dimmer_B1.c: 1085: setLED(lights, 1);
 11530  04A3  01F4               	clrf	setLED@command
 11531  04A4  0AF4               	incf	setLED@command,f
 11532  04A5  0020               	movlb	0	; select bank0
 11533  04A6  0868               	movf	setDimmerLights_OnOff@lights,w
 11534  04A7  3188  200A  3184   	fcall	_setLED
 11535                           
 11536                           ;Dimmer_B1.c: 1086: ;;
 11537                           ;Dimmer_B1.c: 1090: if (lights == 1) {
 11538  04AA  0020               	movlb	0	; select bank0
 11539  04AB  0868               	movf	setDimmerLights_OnOff@lights,w
 11540  04AC  3A01               	xorlw	1
 11541  04AD  1903               	btfsc	3,2
 11542                           
 11543                           ;Dimmer_B1.c: 1092: RB1 = 0;
 11544  04AE  108D               	bcf	13,1	;volatile
 11545  04AF                     l8565:	
 11546                           
 11547                           ;Dimmer_B1.c: 1098: }
 11548                           ;Dimmer_B1.c: 1124: }
 11549                           ;Dimmer_B1.c: 1126: setDimmerLights_DimmingClose();
 11550  04AF  3190  20EF  3184   	fcall	_setDimmerLights_DimmingClose
 11551                           
 11552                           ;Dimmer_B1.c: 1128: setRF_DimmerLights(lights, command);
 11553  04B2  0020               	movlb	0	; select bank0
 11554  04B3  0865               	movf	setDimmerLights_OnOff@command,w
 11555  04B4  00E6               	movwf	??_setDimmerLights_OnOff
 11556  04B5  0866               	movf	??_setDimmerLights_OnOff,w
 11557  04B6  00DD               	movwf	setRF_DimmerLights@on
 11558  04B7  0868               	movf	setDimmerLights_OnOff@lights,w
 11559  04B8  318D  25CF  3184   	fcall	_setRF_DimmerLights
 11560                           
 11561                           ;Dimmer_B1.c: 1130: if (getCmd_Status(1) == 1) {
 11562  04BB  3001               	movlw	1
 11563  04BC  3192  2259  3184   	fcall	_getCmd_Status
 11564  04BF  3A01               	xorlw	1
 11565  04C0  1D03               	skipz
 11566  04C1  2CDC               	goto	l8581
 11567                           
 11568                           ;Dimmer_B1.c: 1131: if (getMain_All_LightsStatus() == 0) {
 11569  04C2  3191  211A  3184   	fcall	_getMain_All_LightsStatus
 11570  04C5  3800               	iorlw	0
 11571  04C6  1D03               	skipz
 11572  04C7  0008               	return
 11573                           
 11574                           ;Dimmer_B1.c: 1132: setCmd_Status(1, 0);
 11575  04C8  01F2               	clrf	setCmd_Status@cmd
 11576  04C9  3001               	movlw	1
 11577  04CA  3193  2337  3184   	fcall	_setCmd_Status
 11578                           
 11579                           ;Dimmer_B1.c: 1133: setProductData(11, 0);
 11580  04CD  0020               	movlb	0	; select bank0
 11581  04CE  01DA               	clrf	setProductData@value
 11582  04CF  300B               	movlw	11
 11583  04D0  3191  219A  3184   	fcall	_setProductData
 11584                           
 11585                           ;Dimmer_B1.c: 1134: setProductData(17, 0);
 11586  04D3  0020               	movlb	0	; select bank0
 11587  04D4  01DA               	clrf	setProductData@value
 11588  04D5  3011               	movlw	17
 11589  04D6  3191  219A  3184   	fcall	_setProductData
 11590                           
 11591                           ;Dimmer_B1.c: 1135: setTxData();
 11592  04D9  3190  20EA         	fcall	_setTxData
 11593                           
 11594                           ;Dimmer_B1.c: 1136: }
 11595                           ;Dimmer_B1.c: 1137: } else {
 11596  04DB  0008               	return
 11597  04DC                     l8581:	
 11598                           
 11599                           ;Dimmer_B1.c: 1138: setTxData();
 11600  04DC  3190  20EA         	fcall	_setTxData
 11601  04DE  0008               	return
 11602  04DF                     __end_of_setDimmerLights_OnOff:	
 11603                           
 11604                           	psect	text76
 11605  080A                     __ptext76:	
 11606 ;; *************** function _setLED *****************
 11607 ;; Defined at:
 11608 ;;		line 81 in file "../src/LED_B1.c"
 11609 ;; Parameters:    Size  Location     Type
 11610 ;;  led             1    wreg     unsigned char 
 11611 ;;  command         1    4[COMMON] unsigned char 
 11612 ;; Auto vars:     Size  Location     Type
 11613 ;;  led             1    5[COMMON] unsigned char 
 11614 ;; Return value:  Size  Location     Type
 11615 ;;		None               void
 11616 ;; Registers used:
 11617 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11618 ;; Tracked objects:
 11619 ;;		On entry : 0/0
 11620 ;;		On exit  : 0/0
 11621 ;;		Unchanged: 0/0
 11622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11623 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;Total ram usage:        2 bytes
 11628 ;; Hardware stack levels used:    1
 11629 ;; Hardware stack levels required when called:    4
 11630 ;; This function calls:
 11631 ;;		_LedPointSelect
 11632 ;; This function is called by:
 11633 ;;		_setDimmerLights_OnOff
 11634 ;;		_setLED_Initialization
 11635 ;;		_Exception_Main
 11636 ;;		_setSw_Initialization
 11637 ;; This function uses a non-reentrant model
 11638 ;;
 11639                           
 11640                           
 11641                           ;psect for function _setLED
 11642  080A                     _setLED:	
 11643                           
 11644                           ;incstack = 0
 11645                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11646                           ;setLED@led stored from wreg
 11647  080A  00F5               	movwf	setLED@led
 11648                           
 11649                           ;LED_B1.c: 82: LedPointSelect(led);
 11650  080B  0875               	movf	setLED@led,w
 11651  080C  3191  2163  3188   	fcall	_LedPointSelect
 11652                           
 11653                           ;LED_B1.c: 83: if (command == 0) {
 11654  080F  08F4               	movf	setLED@command,f
 11655  0810  1D03               	skipz
 11656  0811  2818               	goto	l8313
 11657                           
 11658                           ;LED_B1.c: 112: if (led == 99) {
 11659  0812  0875               	movf	setLED@led,w
 11660  0813  3A63               	xorlw	99
 11661  0814  1D03               	skipz
 11662  0815  2818               	goto	l8313
 11663                           
 11664                           ;LED_B1.c: 116: RB5 = 1;
 11665  0816  0020               	movlb	0	; select bank0
 11666  0817  168D               	bsf	13,5	;volatile
 11667  0818                     l8313:	
 11668                           
 11669                           ;LED_B1.c: 118: }
 11670                           ;LED_B1.c: 120: }
 11671                           ;LED_B1.c: 121: if (command == 1) {
 11672  0818  0874               	movf	setLED@command,w
 11673  0819  3A01               	xorlw	1
 11674  081A  1D03               	skipz
 11675  081B  2822               	goto	l8319
 11676                           
 11677                           ;LED_B1.c: 150: if (led == 99) {
 11678  081C  0875               	movf	setLED@led,w
 11679  081D  3A63               	xorlw	99
 11680  081E  1D03               	skipz
 11681  081F  2822               	goto	l8319
 11682                           
 11683                           ;LED_B1.c: 154: RB5 = 0;
 11684  0820  0020               	movlb	0	; select bank0
 11685  0821  128D               	bcf	13,5	;volatile
 11686  0822                     l8319:	
 11687                           
 11688                           ;LED_B1.c: 156: }
 11689                           ;LED_B1.c: 158: }
 11690                           ;LED_B1.c: 159: if (command == 10) {
 11691  0822  0874               	movf	setLED@command,w
 11692  0823  3A0A               	xorlw	10
 11693  0824  1D03               	skipz
 11694  0825  2839               	goto	l8327
 11695                           
 11696                           ;LED_B1.c: 160: LED->GO = 0;
 11697  0826  0021               	movlb	1	; select bank1
 11698  0827  0862               	movf	_LED^(0+128),w
 11699  0828  0086               	movwf	6
 11700  0829  3001               	movlw	1	; select bank2/3
 11701  082A  0087               	movwf	7
 11702  082B  1081               	bcf	1,1
 11703                           
 11704                           ;LED_B1.c: 161: LED->Time = 0;
 11705  082C  0A62               	incf	_LED^(0+128),w
 11706  082D  0086               	movwf	6
 11707  082E  3001               	movlw	1	; select bank2/3
 11708  082F  0087               	movwf	7
 11709  0830  3000               	movlw	0
 11710  0831  3FC0               	movwi [0]fsr1
 11711  0832  3FC1               	movwi [1]fsr1
 11712                           
 11713                           ;LED_B1.c: 190: if (led == 99) {
 11714  0833  0875               	movf	setLED@led,w
 11715  0834  3A63               	xorlw	99
 11716  0835  1D03               	skipz
 11717  0836  2839               	goto	l8327
 11718                           
 11719                           ;LED_B1.c: 194: RB5 = 1;
 11720  0837  0020               	movlb	0	; select bank0
 11721  0838  168D               	bsf	13,5	;volatile
 11722  0839                     l8327:	
 11723                           
 11724                           ;LED_B1.c: 196: }
 11725                           ;LED_B1.c: 198: }
 11726                           ;LED_B1.c: 199: if (command == 11) {
 11727  0839  0874               	movf	setLED@command,w
 11728  083A  3A0B               	xorlw	11
 11729  083B  1D03               	skipz
 11730  083C  0008               	return
 11731                           
 11732                           ;LED_B1.c: 200: LED->GO = 1;
 11733  083D  0021               	movlb	1	; select bank1
 11734  083E  0862               	movf	_LED^(0+128),w
 11735  083F  0086               	movwf	6
 11736  0840  3001               	movlw	1	; select bank2/3
 11737  0841  0087               	movwf	7
 11738  0842  1481               	bsf	1,1
 11739  0843  0008               	return
 11740  0844                     __end_of_setLED:	
 11741                           
 11742                           	psect	text77
 11743  1163                     __ptext77:	
 11744 ;; *************** function _LedPointSelect *****************
 11745 ;; Defined at:
 11746 ;;		line 7 in file "../src/LED_B1.c"
 11747 ;; Parameters:    Size  Location     Type
 11748 ;;  led             1    wreg     unsigned char 
 11749 ;; Auto vars:     Size  Location     Type
 11750 ;;  led             1    3[COMMON] unsigned char 
 11751 ;; Return value:  Size  Location     Type
 11752 ;;		None               void
 11753 ;; Registers used:
 11754 ;;		wreg
 11755 ;; Tracked objects:
 11756 ;;		On entry : 0/0
 11757 ;;		On exit  : 0/0
 11758 ;;		Unchanged: 0/0
 11759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;Total ram usage:        2 bytes
 11765 ;; Hardware stack levels used:    1
 11766 ;; Hardware stack levels required when called:    3
 11767 ;; This function calls:
 11768 ;;		Nothing
 11769 ;; This function is called by:
 11770 ;;		_setLED_Initialization
 11771 ;;		_setLED
 11772 ;;		_setLED_Main
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           
 11777                           ;psect for function _LedPointSelect
 11778  1163                     _LedPointSelect:	
 11779                           
 11780                           ;incstack = 0
 11781                           ; Regs used in _LedPointSelect: [wreg]
 11782                           ;LedPointSelect@led stored from wreg
 11783  1163  00F3               	movwf	LedPointSelect@led
 11784                           
 11785                           ;LED_B1.c: 24: if (led == 99) {
 11786  1164  0873               	movf	LedPointSelect@led,w
 11787  1165  3A63               	xorlw	99
 11788  1166  1D03               	skipz
 11789  1167  0008               	return
 11790                           
 11791                           ;LED_B1.c: 25: LED = &VarErrLED;
 11792  1168  306A               	movlw	_VarErrLED& (0+255)
 11793  1169  00F2               	movwf	??_LedPointSelect
 11794  116A  0872               	movf	??_LedPointSelect,w
 11795  116B  0021               	movlb	1	; select bank1
 11796  116C  00E2               	movwf	_LED^(0+128)
 11797  116D  0008               	return
 11798  116E                     __end_of_LedPointSelect:	
 11799                           
 11800                           	psect	text78
 11801  10EF                     __ptext78:	
 11802 ;; *************** function _setDimmerLights_DimmingClose *****************
 11803 ;; Defined at:
 11804 ;;		line 2042 in file "../src/Dimmer_B1.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;		None
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;		None
 11809 ;; Return value:  Size  Location     Type
 11810 ;;		None               void
 11811 ;; Registers used:
 11812 ;;		wreg, status,2, status,0, pclath, cstack
 11813 ;; Tracked objects:
 11814 ;;		On entry : 0/0
 11815 ;;		On exit  : 0/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;Total ram usage:        0 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    4
 11825 ;; This function calls:
 11826 ;;		_setDimmerIntr_Dimming_Sw
 11827 ;; This function is called by:
 11828 ;;		_setDimmerLights_OnOff
 11829 ;; This function uses a non-reentrant model
 11830 ;;
 11831                           
 11832                           
 11833                           ;psect for function _setDimmerLights_DimmingClose
 11834  10EF                     _setDimmerLights_DimmingClose:	
 11835                           
 11836                           ;Dimmer_B1.c: 2044: setDimmerIntr_Dimming_Sw(1, 0);
 11837                           
 11838                           ;incstack = 0
 11839                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 11840  10EF  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 11841  10F0  3001               	movlw	1
 11842  10F1  3193  2310         	fcall	_setDimmerIntr_Dimming_Sw
 11843  10F3  0008               	return
 11844  10F4                     __end_of_setDimmerLights_DimmingClose:	
 11845                           
 11846                           	psect	text79
 11847  1361                     __ptext79:	
 11848 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 11849 ;; Defined at:
 11850 ;;		line 292 in file "../src/Dimmer_B1.c"
 11851 ;; Parameters:    Size  Location     Type
 11852 ;;  lights          1    wreg     unsigned char 
 11853 ;;  command         1    2[COMMON] unsigned char 
 11854 ;; Auto vars:     Size  Location     Type
 11855 ;;  lights          1    4[COMMON] unsigned char 
 11856 ;; Return value:  Size  Location     Type
 11857 ;;		None               void
 11858 ;; Registers used:
 11859 ;;		wreg, status,2, status,0
 11860 ;; Tracked objects:
 11861 ;;		On entry : 0/0
 11862 ;;		On exit  : 0/0
 11863 ;;		Unchanged: 0/0
 11864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11865 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;Total ram usage:        3 bytes
 11870 ;; Hardware stack levels used:    1
 11871 ;; Hardware stack levels required when called:    3
 11872 ;; This function calls:
 11873 ;;		Nothing
 11874 ;; This function is called by:
 11875 ;;		_setDimmerLights_OnOff
 11876 ;;		_setRFSW_AdjControl
 11877 ;;		_DimmerLights_AssignationDimming
 11878 ;; This function uses a non-reentrant model
 11879 ;;
 11880                           
 11881                           
 11882                           ;psect for function _setDimmerIntr_Dimming_RF
 11883  1361                     _setDimmerIntr_Dimming_RF:	
 11884                           
 11885                           ;incstack = 0
 11886                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 11887                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 11888  1361  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 11889                           
 11890                           ;Dimmer_B1.c: 294: if (lights == 1) {
 11891  1362  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 11892  1363  3A01               	xorlw	1
 11893  1364  1D03               	skipz
 11894  1365  0008               	return
 11895                           
 11896                           ;Dimmer_B1.c: 295: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 11897  1366  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 11898  1367  3A01               	xorlw	1
 11899  1368  3000               	movlw	0
 11900  1369  1903               	skipnz
 11901  136A  3001               	movlw	1
 11902  136B  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 11903  136C  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 11904  136D  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 11905  136E  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 11906  136F  0021               	movlb	1	; select bank1
 11907  1370  0820               	movf	_DimmerIntr1^(0+128),w
 11908  1371  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 11909  1372  39BF               	andlw	-65
 11910  1373  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 11911  1374  00A0               	movwf	_DimmerIntr1^(0+128)
 11912  1375  0008               	return
 11913  1376                     __end_of_setDimmerIntr_Dimming_RF:	
 11914                           
 11915                           	psect	text80
 11916  11B2                     __ptext80:	
 11917 ;; *************** function _setDimmerIntr_DimmingValue *****************
 11918 ;; Defined at:
 11919 ;;		line 139 in file "../src/Dimmer_B1.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;  lights          1    wreg     unsigned char 
 11922 ;;  value           1   58[BANK0 ] unsigned char 
 11923 ;; Auto vars:     Size  Location     Type
 11924 ;;  lights          1   60[BANK0 ] unsigned char 
 11925 ;; Return value:  Size  Location     Type
 11926 ;;		None               void
 11927 ;; Registers used:
 11928 ;;		wreg
 11929 ;; Tracked objects:
 11930 ;;		On entry : 0/0
 11931 ;;		On exit  : 0/0
 11932 ;;		Unchanged: 0/0
 11933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11934 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;Total ram usage:        3 bytes
 11939 ;; Hardware stack levels used:    1
 11940 ;; Hardware stack levels required when called:    3
 11941 ;; This function calls:
 11942 ;;		Nothing
 11943 ;; This function is called by:
 11944 ;;		_setDimmerLights_OnOff
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           
 11949                           ;psect for function _setDimmerIntr_DimmingValue
 11950  11B2                     _setDimmerIntr_DimmingValue:	
 11951                           
 11952                           ;incstack = 0
 11953                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 11954                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 11955  11B2  0020               	movlb	0	; select bank0
 11956  11B3  00DC               	movwf	setDimmerIntr_DimmingValue@lights
 11957                           
 11958                           ;Dimmer_B1.c: 141: if (lights == 1) {
 11959  11B4  085C               	movf	setDimmerIntr_DimmingValue@lights,w
 11960  11B5  3A01               	xorlw	1
 11961  11B6  1D03               	skipz
 11962  11B7  0008               	return
 11963                           
 11964                           ;Dimmer_B1.c: 142: DimmerIntr1.DimmingValue = value;
 11965  11B8  085A               	movf	setDimmerIntr_DimmingValue@value,w
 11966  11B9  00DB               	movwf	??_setDimmerIntr_DimmingValue
 11967  11BA  085B               	movf	??_setDimmerIntr_DimmingValue,w
 11968  11BB  0021               	movlb	1	; select bank1
 11969  11BC  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 11970  11BD  0008               	return
 11971  11BE                     __end_of_setDimmerIntr_DimmingValue:	
 11972                           
 11973                           	psect	text81
 11974  134C                     __ptext81:	
 11975 ;; *************** function _setDimmerIntr_ControlStatus *****************
 11976 ;; Defined at:
 11977 ;;		line 121 in file "../src/Dimmer_B1.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;  lights          1    wreg     unsigned char 
 11980 ;;  command         1    2[COMMON] unsigned char 
 11981 ;; Auto vars:     Size  Location     Type
 11982 ;;  lights          1    4[COMMON] unsigned char 
 11983 ;; Return value:  Size  Location     Type
 11984 ;;		None               void
 11985 ;; Registers used:
 11986 ;;		wreg, status,2, status,0
 11987 ;; Tracked objects:
 11988 ;;		On entry : 0/0
 11989 ;;		On exit  : 0/0
 11990 ;;		Unchanged: 0/0
 11991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11992 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11993 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11994 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;Total ram usage:        3 bytes
 11997 ;; Hardware stack levels used:    1
 11998 ;; Hardware stack levels required when called:    3
 11999 ;; This function calls:
 12000 ;;		Nothing
 12001 ;; This function is called by:
 12002 ;;		_setDimmerLights_OnOff
 12003 ;; This function uses a non-reentrant model
 12004 ;;
 12005                           
 12006                           
 12007                           ;psect for function _setDimmerIntr_ControlStatus
 12008  134C                     _setDimmerIntr_ControlStatus:	
 12009                           
 12010                           ;incstack = 0
 12011                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 12012                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 12013  134C  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 12014                           
 12015                           ;Dimmer_B1.c: 123: if (lights == 1) {
 12016  134D  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 12017  134E  3A01               	xorlw	1
 12018  134F  1D03               	skipz
 12019  1350  0008               	return
 12020                           
 12021                           ;Dimmer_B1.c: 124: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 12022  1351  0872               	movf	setDimmerIntr_ControlStatus@command,w
 12023  1352  3A01               	xorlw	1
 12024  1353  3000               	movlw	0
 12025  1354  1903               	skipnz
 12026  1355  3001               	movlw	1
 12027  1356  00F3               	movwf	??_setDimmerIntr_ControlStatus
 12028  1357  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 12029  1358  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 12030  1359  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 12031  135A  0021               	movlb	1	; select bank1
 12032  135B  0820               	movf	_DimmerIntr1^(0+128),w
 12033  135C  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 12034  135D  39F7               	andlw	-9
 12035  135E  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 12036  135F  00A0               	movwf	_DimmerIntr1^(0+128)
 12037  1360  0008               	return
 12038  1361                     __end_of_setDimmerIntr_ControlStatus:	
 12039                           
 12040                           	psect	text82
 12041  0F7C                     __ptext82:	
 12042 ;; *************** function _setDelayOff_GO *****************
 12043 ;; Defined at:
 12044 ;;		line 87 in file "../src/DelayOff_B1.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;  sw              1    wreg     unsigned char 
 12047 ;;  command         1   61[BANK0 ] unsigned char 
 12048 ;;  value           1   62[BANK0 ] unsigned char 
 12049 ;; Auto vars:     Size  Location     Type
 12050 ;;  sw              1   68[BANK0 ] unsigned char 
 12051 ;;  k               1   67[BANK0 ] unsigned char 
 12052 ;;  j               1   66[BANK0 ] unsigned char 
 12053 ;;  i               1   65[BANK0 ] unsigned char 
 12054 ;; Return value:  Size  Location     Type
 12055 ;;		None               void
 12056 ;; Registers used:
 12057 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12058 ;; Tracked objects:
 12059 ;;		On entry : 0/0
 12060 ;;		On exit  : 0/0
 12061 ;;		Unchanged: 0/0
 12062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12063 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12064 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12066 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;Total ram usage:        8 bytes
 12068 ;; Hardware stack levels used:    1
 12069 ;; Hardware stack levels required when called:    4
 12070 ;; This function calls:
 12071 ;;		_DelayOffPointSelect
 12072 ;;		___bmul
 12073 ;;		_setProductData
 12074 ;; This function is called by:
 12075 ;;		_setDimmerLights_OnOff
 12076 ;;		_setRFSW_Control
 12077 ;; This function uses a non-reentrant model
 12078 ;;
 12079                           
 12080                           
 12081                           ;psect for function _setDelayOff_GO
 12082  0F7C                     _setDelayOff_GO:	
 12083                           
 12084                           ;incstack = 0
 12085                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12086                           ;setDelayOff_GO@sw stored from wreg
 12087  0F7C  0020               	movlb	0	; select bank0
 12088  0F7D  00E4               	movwf	setDelayOff_GO@sw
 12089                           
 12090                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 12091  0F7E  0864               	movf	setDelayOff_GO@sw,w
 12092  0F7F  3191  214E  318F   	fcall	_DelayOffPointSelect
 12093                           
 12094                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 12095  0F82  0020               	movlb	0	; select bank0
 12096  0F83  085D               	movf	setDelayOff_GO@command,w
 12097  0F84  3A01               	xorlw	1
 12098  0F85  3000               	movlw	0
 12099  0F86  1903               	skipnz
 12100  0F87  3001               	movlw	1
 12101  0F88  00DF               	movwf	??_setDelayOff_GO
 12102  0F89  087B               	movf	_DelayOff,w
 12103  0F8A  0086               	movwf	6
 12104  0F8B  3001               	movlw	1	; select bank2/3
 12105  0F8C  0087               	movwf	7
 12106  0F8D  0DDF               	rlf	??_setDelayOff_GO,f
 12107  0F8E  0801               	movf	1,w
 12108  0F8F  065F               	xorwf	??_setDelayOff_GO,w
 12109  0F90  39FD               	andlw	-3
 12110  0F91  065F               	xorwf	??_setDelayOff_GO,w
 12111  0F92  0081               	movwf	1
 12112                           
 12113                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 12114  0F93  087B               	movf	_DelayOff,w
 12115  0F94  3E02               	addlw	2
 12116  0F95  0086               	movwf	6
 12117  0F96  3001               	movlw	1	; select bank2/3
 12118  0F97  0087               	movwf	7
 12119  0F98  3000               	movlw	0
 12120  0F99  3FC0               	movwi [0]fsr1
 12121  0F9A  3FC1               	movwi [1]fsr1
 12122                           
 12123                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 12124  0F9B  087B               	movf	_DelayOff,w
 12125  0F9C  3E04               	addlw	4
 12126  0F9D  0086               	movwf	6
 12127  0F9E  3001               	movlw	1	; select bank2/3
 12128  0F9F  0087               	movwf	7
 12129  0FA0  0181               	clrf	1
 12130                           
 12131                           ;DelayOff_B1.c: 94: if (command == 1) {
 12132  0FA1  085D               	movf	setDelayOff_GO@command,w
 12133  0FA2  3A01               	xorlw	1
 12134  0FA3  1D03               	skipz
 12135  0FA4  2FF6               	goto	l7957
 12136                           
 12137                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 12138  0FA5  3005               	movlw	5
 12139  0FA6  00DF               	movwf	??_setDelayOff_GO
 12140  0FA7  085F               	movf	??_setDelayOff_GO,w
 12141  0FA8  00E1               	movwf	setDelayOff_GO@i
 12142  0FA9  01E2               	clrf	setDelayOff_GO@j
 12143  0FAA  01E3               	clrf	setDelayOff_GO@k
 12144                           
 12145                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 12146  0FAB  300F               	movlw	15
 12147  0FAC  055E               	andwf	setDelayOff_GO@value,w
 12148  0FAD  00DF               	movwf	??_setDelayOff_GO
 12149  0FAE  085F               	movf	??_setDelayOff_GO,w
 12150  0FAF  3A05               	xorlw	5
 12151  0FB0  1903               	skipnz
 12152  0FB1  2FB6               	goto	l7943
 12153  0FB2  085E               	movf	setDelayOff_GO@value,w
 12154  0FB3  390F               	andlw	15
 12155  0FB4  1D03               	btfss	3,2
 12156  0FB5  2FE4               	goto	l7953
 12157  0FB6                     l7943:	
 12158  0FB6  3031               	movlw	49
 12159  0FB7  025E               	subwf	setDelayOff_GO@value,w
 12160  0FB8  1803               	skipnc
 12161  0FB9  2FE4               	goto	l7953
 12162                           
 12163                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 12164  0FBA  085E               	movf	setDelayOff_GO@value,w
 12165  0FBB  390F               	andlw	15
 12166  0FBC  00DF               	movwf	??_setDelayOff_GO
 12167  0FBD  085F               	movf	??_setDelayOff_GO,w
 12168  0FBE  00E2               	movwf	setDelayOff_GO@j
 12169                           
 12170                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 12171  0FBF  085E               	movf	setDelayOff_GO@value,w
 12172  0FC0  00DF               	movwf	??_setDelayOff_GO
 12173  0FC1  3004               	movlw	4
 12174  0FC2                     u8005:	
 12175  0FC2  36DF               	lsrf	??_setDelayOff_GO,f
 12176  0FC3  0B89               	decfsz	9,f
 12177  0FC4  2FC2               	goto	u8005
 12178  0FC5  085F               	movf	??_setDelayOff_GO,w
 12179  0FC6  390F               	andlw	15
 12180  0FC7  00E0               	movwf	??_setDelayOff_GO+1
 12181  0FC8  0860               	movf	??_setDelayOff_GO+1,w
 12182  0FC9  00E3               	movwf	setDelayOff_GO@k
 12183                           
 12184                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 12185  0FCA  300A               	movlw	10
 12186  0FCB  00DF               	movwf	??_setDelayOff_GO
 12187  0FCC  085F               	movf	??_setDelayOff_GO,w
 12188  0FCD  00F2               	movwf	___bmul@multiplicand
 12189  0FCE  0863               	movf	setDelayOff_GO@k,w
 12190  0FCF  3192  22A9  318F   	fcall	___bmul
 12191  0FD2  0020               	movlb	0	; select bank0
 12192  0FD3  0762               	addwf	setDelayOff_GO@j,w
 12193  0FD4  00E0               	movwf	??_setDelayOff_GO+1
 12194  0FD5  0A7B               	incf	_DelayOff,w
 12195  0FD6  0086               	movwf	6
 12196  0FD7  3001               	movlw	1	; select bank2/3
 12197  0FD8  0087               	movwf	7
 12198  0FD9  0860               	movf	??_setDelayOff_GO+1,w
 12199  0FDA  0081               	movwf	1
 12200                           
 12201                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 12202  0FDB  085E               	movf	setDelayOff_GO@value,w
 12203  0FDC  00DF               	movwf	??_setDelayOff_GO
 12204  0FDD  085F               	movf	??_setDelayOff_GO,w
 12205  0FDE  00DA               	movwf	setProductData@value
 12206  0FDF  0864               	movf	setDelayOff_GO@sw,w
 12207  0FE0  3E1A               	addlw	26
 12208  0FE1  3191  219A         	fcall	_setProductData
 12209                           
 12210                           ;DelayOff_B1.c: 103: } else {
 12211  0FE3  0008               	return
 12212  0FE4                     l7953:	
 12213                           
 12214                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 12215  0FE4  3005               	movlw	5
 12216  0FE5  0020               	movlb	0	; select bank0
 12217  0FE6  00DF               	movwf	??_setDelayOff_GO
 12218  0FE7  0A7B               	incf	_DelayOff,w
 12219  0FE8  0086               	movwf	6
 12220  0FE9  3001               	movlw	1	; select bank2/3
 12221  0FEA  0087               	movwf	7
 12222  0FEB  085F               	movf	??_setDelayOff_GO,w
 12223  0FEC  0081               	movwf	1
 12224                           
 12225                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 12226  0FED  3005               	movlw	5
 12227  0FEE  00DF               	movwf	??_setDelayOff_GO
 12228  0FEF  085F               	movf	??_setDelayOff_GO,w
 12229  0FF0  00DA               	movwf	setProductData@value
 12230  0FF1  0864               	movf	setDelayOff_GO@sw,w
 12231  0FF2  3E1A               	addlw	26
 12232  0FF3  3191  219A         	fcall	_setProductData
 12233                           
 12234                           ;DelayOff_B1.c: 106: }
 12235                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 12236  0FF5  0008               	return
 12237  0FF6                     l7957:	
 12238  0FF6  0020               	movlb	0	; select bank0
 12239  0FF7  08DD               	movf	setDelayOff_GO@command,f
 12240  0FF8  1D03               	skipz
 12241  0FF9  0008               	return
 12242                           
 12243                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 12244  0FFA  01DA               	clrf	setProductData@value
 12245  0FFB  0864               	movf	setDelayOff_GO@sw,w
 12246  0FFC  3E1A               	addlw	26
 12247  0FFD  3191  219A         	fcall	_setProductData
 12248  0FFF  0008               	return
 12249  1000                     __end_of_setDelayOff_GO:	
 12250                           
 12251                           	psect	text83
 12252  12A9                     __ptext83:	
 12253 ;; *************** function ___bmul *****************
 12254 ;; Defined at:
 12255 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 12256 ;; Parameters:    Size  Location     Type
 12257 ;;  multiplier      1    wreg     unsigned char 
 12258 ;;  multiplicand    1    2[COMMON] unsigned char 
 12259 ;; Auto vars:     Size  Location     Type
 12260 ;;  multiplier      1    5[COMMON] unsigned char 
 12261 ;;  product         1    4[COMMON] unsigned char 
 12262 ;; Return value:  Size  Location     Type
 12263 ;;                  1    wreg      unsigned char 
 12264 ;; Registers used:
 12265 ;;		wreg, status,2, status,0
 12266 ;; Tracked objects:
 12267 ;;		On entry : 0/0
 12268 ;;		On exit  : 0/0
 12269 ;;		Unchanged: 0/0
 12270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12271 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12273 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12274 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12275 ;;Total ram usage:        4 bytes
 12276 ;; Hardware stack levels used:    1
 12277 ;; Hardware stack levels required when called:    3
 12278 ;; This function calls:
 12279 ;;		Nothing
 12280 ;; This function is called by:
 12281 ;;		_setDelayOff_GO
 12282 ;;		_DelayTimejudge
 12283 ;; This function uses a non-reentrant model
 12284 ;;
 12285                           
 12286                           
 12287                           ;psect for function ___bmul
 12288  12A9                     ___bmul:	
 12289                           
 12290                           ;incstack = 0
 12291                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12292                           ;___bmul@multiplier stored from wreg
 12293  12A9  00F5               	movwf	___bmul@multiplier
 12294  12AA  01F4               	clrf	___bmul@product
 12295  12AB                     l7617:	
 12296  12AB  1C75               	btfss	___bmul@multiplier,0
 12297  12AC  2AB1               	goto	l7621
 12298  12AD  0872               	movf	___bmul@multiplicand,w
 12299  12AE  00F3               	movwf	??___bmul
 12300  12AF  0873               	movf	??___bmul,w
 12301  12B0  07F4               	addwf	___bmul@product,f
 12302  12B1                     l7621:	
 12303  12B1  1003               	clrc
 12304  12B2  0DF2               	rlf	___bmul@multiplicand,f
 12305  12B3  1003               	clrc
 12306  12B4  0CF5               	rrf	___bmul@multiplier,f
 12307  12B5  08F5               	movf	___bmul@multiplier,f
 12308  12B6  1D03               	skipz
 12309  12B7  2AAB               	goto	l7617
 12310  12B8  0874               	movf	___bmul@product,w
 12311  12B9  0008               	return
 12312  12BA                     __end_of___bmul:	
 12313                           
 12314                           	psect	text84
 12315  1337                     __ptext84:	
 12316 ;; *************** function _setCmd_Status *****************
 12317 ;; Defined at:
 12318 ;;		line 655 in file "../src/Main_B1.c"
 12319 ;; Parameters:    Size  Location     Type
 12320 ;;  number          1    wreg     unsigned char 
 12321 ;;  cmd             1    2[COMMON] unsigned char 
 12322 ;; Auto vars:     Size  Location     Type
 12323 ;;  number          1    4[COMMON] unsigned char 
 12324 ;; Return value:  Size  Location     Type
 12325 ;;		None               void
 12326 ;; Registers used:
 12327 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12328 ;; Tracked objects:
 12329 ;;		On entry : 0/0
 12330 ;;		On exit  : 0/0
 12331 ;;		Unchanged: 0/0
 12332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12333 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12335 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12337 ;;Total ram usage:        3 bytes
 12338 ;; Hardware stack levels used:    1
 12339 ;; Hardware stack levels required when called:    3
 12340 ;; This function calls:
 12341 ;;		Nothing
 12342 ;; This function is called by:
 12343 ;;		_setDimmerLights_OnOff
 12344 ;;		_setControl_Lights_Table
 12345 ;; This function uses a non-reentrant model
 12346 ;;
 12347                           
 12348                           
 12349                           ;psect for function _setCmd_Status
 12350  1337                     _setCmd_Status:	
 12351                           
 12352                           ;incstack = 0
 12353                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 12354                           ;setCmd_Status@number stored from wreg
 12355  1337  00F4               	movwf	setCmd_Status@number
 12356                           
 12357                           ;Main_B1.c: 656: switch (number) {
 12358  1338  2B46               	goto	l8115
 12359  1339                     l8111:	
 12360                           ;Main_B1.c: 657: case 1:
 12361                           
 12362                           
 12363                           ;Main_B1.c: 658: Cmd.all_off = cmd == 1 ? 1 : 0;
 12364  1339  0872               	movf	setCmd_Status@cmd,w
 12365  133A  3A01               	xorlw	1
 12366  133B  3000               	movlw	0
 12367  133C  1903               	skipnz
 12368  133D  3001               	movlw	1
 12369  133E  00F3               	movwf	??_setCmd_Status
 12370  133F  0021               	movlb	1	; select bank1
 12371  1340  0860               	movf	_Cmd^(0+128),w
 12372  1341  0673               	xorwf	??_setCmd_Status,w
 12373  1342  39FE               	andlw	-2
 12374  1343  0673               	xorwf	??_setCmd_Status,w
 12375  1344  00E0               	movwf	_Cmd^(0+128)
 12376                           
 12377                           ;Main_B1.c: 660: }
 12378                           
 12379                           ;Main_B1.c: 659: break;
 12380  1345  0008               	return
 12381  1346                     l8115:	
 12382  1346  0874               	movf	setCmd_Status@number,w
 12383                           
 12384                           ; Switch size 1, requested type "space"
 12385                           ; Number of cases is 1, Range of values is 1 to 1
 12386                           ; switch strategies available:
 12387                           ; Name         Instructions Cycles
 12388                           ; simple_byte            4     3 (average)
 12389                           ; direct_byte           11     9 (fixed)
 12390                           ; jumptable            263     9 (fixed)
 12391                           ;	Chosen strategy is simple_byte
 12392  1347  3A01               	xorlw	1	; case 1
 12393  1348  1903               	skipnz
 12394  1349  2B39               	goto	l8111
 12395  134A  2B4B               	goto	l1475
 12396  134B                     l1475:	
 12397  134B  0008               	return
 12398  134C                     __end_of_setCmd_Status:	
 12399                           
 12400                           	psect	text85
 12401  111A                     __ptext85:	
 12402 ;; *************** function _getMain_All_LightsStatus *****************
 12403 ;; Defined at:
 12404 ;;		line 377 in file "../src/Main_B1.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;		None
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;  status          1    2[COMMON] unsigned char 
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  1    wreg      unsigned char 
 12411 ;; Registers used:
 12412 ;;		wreg, status,2
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;Total ram usage:        1 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    3
 12425 ;; This function calls:
 12426 ;;		Nothing
 12427 ;; This function is called by:
 12428 ;;		_setDimmerLights_Main
 12429 ;;		_setDimmerLights_OnOff
 12430 ;;		_Flash_Memory_Main
 12431 ;;		_setControl_Lights_Table
 12432 ;; This function uses a non-reentrant model
 12433 ;;
 12434                           
 12435                           
 12436                           ;psect for function _getMain_All_LightsStatus
 12437  111A                     _getMain_All_LightsStatus:	
 12438                           
 12439                           ;Main_B1.c: 378: char status = 0;
 12440                           
 12441                           ;incstack = 0
 12442                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 12443  111A  01F2               	clrf	getMain_All_LightsStatus@status
 12444                           
 12445                           ;Main_B1.c: 385: status = DimmerLights1.Status == 1 ? 1 : 0;
 12446  111B  3000               	movlw	0
 12447  111C  0022               	movlb	2	; select bank2
 12448  111D  1854               	btfsc	(_DimmerLights1^(0+256)+1),0
 12449  111E  3001               	movlw	1
 12450  111F  00F2               	movwf	getMain_All_LightsStatus@status
 12451                           
 12452                           ;Main_B1.c: 424: return status;
 12453  1120  0872               	movf	getMain_All_LightsStatus@status,w
 12454  1121  0008               	return
 12455  1122                     __end_of_getMain_All_LightsStatus:	
 12456                           
 12457                           	psect	text86
 12458  11F0                     __ptext86:	
 12459 ;; *************** function _getDelayOff_GO *****************
 12460 ;; Defined at:
 12461 ;;		line 114 in file "../src/DelayOff_B1.c"
 12462 ;; Parameters:    Size  Location     Type
 12463 ;;  sw              1    wreg     unsigned char 
 12464 ;; Auto vars:     Size  Location     Type
 12465 ;;  sw              1    4[COMMON] unsigned char 
 12466 ;;  go              1    5[COMMON] unsigned char 
 12467 ;; Return value:  Size  Location     Type
 12468 ;;                  1    wreg      unsigned char 
 12469 ;; Registers used:
 12470 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12471 ;; Tracked objects:
 12472 ;;		On entry : 0/0
 12473 ;;		On exit  : 0/0
 12474 ;;		Unchanged: 0/0
 12475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12479 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12480 ;;Total ram usage:        2 bytes
 12481 ;; Hardware stack levels used:    1
 12482 ;; Hardware stack levels required when called:    4
 12483 ;; This function calls:
 12484 ;;		_DelayOffPointSelect
 12485 ;; This function is called by:
 12486 ;;		_setDimmerLights_OnOff
 12487 ;; This function uses a non-reentrant model
 12488 ;;
 12489                           
 12490                           
 12491                           ;psect for function _getDelayOff_GO
 12492  11F0                     _getDelayOff_GO:	
 12493                           
 12494                           ;incstack = 0
 12495                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12496                           ;getDelayOff_GO@sw stored from wreg
 12497  11F0  00F4               	movwf	getDelayOff_GO@sw
 12498                           
 12499                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 12500  11F1  0874               	movf	getDelayOff_GO@sw,w
 12501  11F2  3191  214E         	fcall	_DelayOffPointSelect
 12502                           
 12503                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 12504  11F4  087B               	movf	_DelayOff,w
 12505  11F5  0086               	movwf	6
 12506  11F6  3001               	movlw	1	; select bank2/3
 12507  11F7  0087               	movwf	7
 12508  11F8  3000               	movlw	0
 12509  11F9  1881               	btfsc	1,1
 12510  11FA  3001               	movlw	1
 12511  11FB  00F5               	movwf	getDelayOff_GO@go
 12512                           
 12513                           ;DelayOff_B1.c: 117: return go;
 12514  11FC  0875               	movf	getDelayOff_GO@go,w
 12515  11FD  0008               	return
 12516  11FE                     __end_of_getDelayOff_GO:	
 12517                           
 12518                           	psect	text87
 12519  1259                     __ptext87:	
 12520 ;; *************** function _getCmd_Status *****************
 12521 ;; Defined at:
 12522 ;;		line 663 in file "../src/Main_B1.c"
 12523 ;; Parameters:    Size  Location     Type
 12524 ;;  number          1    wreg     unsigned char 
 12525 ;; Auto vars:     Size  Location     Type
 12526 ;;  number          1    2[COMMON] unsigned char 
 12527 ;;  cmd             1    3[COMMON] unsigned char 
 12528 ;; Return value:  Size  Location     Type
 12529 ;;                  1    wreg      unsigned char 
 12530 ;; Registers used:
 12531 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12532 ;; Tracked objects:
 12533 ;;		On entry : 0/0
 12534 ;;		On exit  : 0/0
 12535 ;;		Unchanged: 0/0
 12536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;Total ram usage:        2 bytes
 12542 ;; Hardware stack levels used:    1
 12543 ;; Hardware stack levels required when called:    3
 12544 ;; This function calls:
 12545 ;;		Nothing
 12546 ;; This function is called by:
 12547 ;;		_setDimmerLights_OnOff
 12548 ;; This function uses a non-reentrant model
 12549 ;;
 12550                           
 12551                           
 12552                           ;psect for function _getCmd_Status
 12553  1259                     _getCmd_Status:	
 12554                           
 12555                           ;incstack = 0
 12556                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 12557                           ;getCmd_Status@number stored from wreg
 12558  1259  00F2               	movwf	getCmd_Status@number
 12559                           
 12560                           ;Main_B1.c: 664: char cmd = 0;
 12561  125A  01F3               	clrf	getCmd_Status@cmd
 12562                           
 12563                           ;Main_B1.c: 665: switch (number) {
 12564  125B  2A62               	goto	l6075
 12565  125C                     l6071:	
 12566                           ;Main_B1.c: 666: case 1:
 12567                           
 12568                           
 12569                           ;Main_B1.c: 667: cmd = Cmd.all_off == 1 ? 1 : 0;
 12570  125C  3000               	movlw	0
 12571  125D  0021               	movlb	1	; select bank1
 12572  125E  1860               	btfsc	_Cmd^(0+128),0
 12573  125F  3001               	movlw	1
 12574  1260  00F3               	movwf	getCmd_Status@cmd
 12575                           
 12576                           ;Main_B1.c: 669: }
 12577                           
 12578                           ;Main_B1.c: 668: break;
 12579  1261  2A67               	goto	l6077
 12580  1262                     l6075:	
 12581  1262  0872               	movf	getCmd_Status@number,w
 12582                           
 12583                           ; Switch size 1, requested type "space"
 12584                           ; Number of cases is 1, Range of values is 1 to 1
 12585                           ; switch strategies available:
 12586                           ; Name         Instructions Cycles
 12587                           ; simple_byte            4     3 (average)
 12588                           ; direct_byte           11     9 (fixed)
 12589                           ; jumptable            263     9 (fixed)
 12590                           ;	Chosen strategy is simple_byte
 12591  1263  3A01               	xorlw	1	; case 1
 12592  1264  1903               	skipnz
 12593  1265  2A5C               	goto	l6071
 12594  1266  2A67               	goto	l6077
 12595  1267                     l6077:	
 12596                           
 12597                           ;Main_B1.c: 670: return cmd;
 12598  1267  0873               	movf	getCmd_Status@cmd,w
 12599  1268  0008               	return
 12600  1269                     __end_of_getCmd_Status:	
 12601                           
 12602                           	psect	text88
 12603  07B2                     __ptext88:	
 12604 ;; *************** function _setDimmerLights_Dimming *****************
 12605 ;; Defined at:
 12606 ;;		line 1144 in file "../src/Dimmer_B1.c"
 12607 ;; Parameters:    Size  Location     Type
 12608 ;;  lights          1    wreg     unsigned char 
 12609 ;;  status          1   66[BANK0 ] unsigned char 
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;  lights          1   69[BANK0 ] unsigned char 
 12612 ;;  value           1   68[BANK0 ] unsigned char 
 12613 ;; Return value:  Size  Location     Type
 12614 ;;		None               void
 12615 ;; Registers used:
 12616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12617 ;; Tracked objects:
 12618 ;;		On entry : 0/0
 12619 ;;		On exit  : 0/0
 12620 ;;		Unchanged: 0/0
 12621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12622 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12625 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12626 ;;Total ram usage:        4 bytes
 12627 ;; Hardware stack levels used:    1
 12628 ;; Hardware stack levels required when called:    6
 12629 ;; This function calls:
 12630 ;;		_getDimmerIntr_DimmingValue
 12631 ;;		_getDimmerLights_ValueToPercent
 12632 ;;		_setBuz
 12633 ;;		_setDimmerIntr_Dimming_Sw
 12634 ;;		_setDimmerIntr_MaxmumValue
 12635 ;;		_setMemory_Modify
 12636 ;;		_setProductData
 12637 ;;		_setRF_DimmerLights
 12638 ;;		_setRF_TransceiveGO
 12639 ;;		_setTxData
 12640 ;; This function is called by:
 12641 ;;		_setDimmerLights_Main
 12642 ;; This function uses a non-reentrant model
 12643 ;;
 12644                           
 12645                           
 12646                           ;psect for function _setDimmerLights_Dimming
 12647  07B2                     _setDimmerLights_Dimming:	
 12648                           
 12649                           ;incstack = 0
 12650                           ; Regs used in _setDimmerLights_Dimming: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12651                           ;setDimmerLights_Dimming@lights stored from wreg
 12652  07B2  0020               	movlb	0	; select bank0
 12653  07B3  00E5               	movwf	setDimmerLights_Dimming@lights
 12654                           
 12655                           ;Dimmer_B1.c: 1145: setDimmerIntr_Dimming_Sw(lights, status);
 12656  07B4  0862               	movf	setDimmerLights_Dimming@status,w
 12657  07B5  00E3               	movwf	??_setDimmerLights_Dimming
 12658  07B6  0863               	movf	??_setDimmerLights_Dimming,w
 12659  07B7  00F2               	movwf	setDimmerIntr_Dimming_Sw@command
 12660  07B8  0865               	movf	setDimmerLights_Dimming@lights,w
 12661  07B9  3193  2310  3187   	fcall	_setDimmerIntr_Dimming_Sw
 12662                           
 12663                           ;Dimmer_B1.c: 1146: if (status == 1) {
 12664  07BC  0020               	movlb	0	; select bank0
 12665  07BD  0862               	movf	setDimmerLights_Dimming@status,w
 12666  07BE  3A01               	xorlw	1
 12667  07BF  1D03               	skipz
 12668  07C0  2FCE               	goto	l8589
 12669                           
 12670                           ;Dimmer_B1.c: 1148: setRF_TransceiveGO(0);
 12671  07C1  3000               	movlw	0
 12672  07C2  3192  2249  3187   	fcall	_setRF_TransceiveGO
 12673                           
 12674                           ;Dimmer_B1.c: 1150: setBuz(1, 100);
 12675  07C5  3064               	movlw	100
 12676  07C6  0020               	movlb	0	; select bank0
 12677  07C7  00A4               	movwf	setBuz@time
 12678  07C8  3000               	movlw	0
 12679  07C9  00A5               	movwf	setBuz@time+1
 12680  07CA  3001               	movlw	1
 12681  07CB  318A  2227         	fcall	_setBuz
 12682                           
 12683                           ;Dimmer_B1.c: 1151: } else if (status == 0) {
 12684  07CD  0008               	return
 12685  07CE                     l8589:	
 12686  07CE  0020               	movlb	0	; select bank0
 12687  07CF  08E2               	movf	setDimmerLights_Dimming@status,f
 12688  07D0  1D03               	skipz
 12689  07D1  0008               	return
 12690                           
 12691                           ;Dimmer_B1.c: 1157: char value = getDimmerIntr_DimmingValue(lights);
 12692  07D2  0865               	movf	setDimmerLights_Dimming@lights,w
 12693  07D3  3191  21E3  3187   	fcall	_getDimmerIntr_DimmingValue
 12694  07D6  0020               	movlb	0	; select bank0
 12695  07D7  00E3               	movwf	??_setDimmerLights_Dimming
 12696  07D8  0863               	movf	??_setDimmerLights_Dimming,w
 12697  07D9  00E4               	movwf	setDimmerLights_Dimming@value
 12698                           
 12699                           ;Dimmer_B1.c: 1158: setDimmerIntr_MaxmumValue(lights, value);
 12700  07DA  0864               	movf	setDimmerLights_Dimming@value,w
 12701  07DB  00E3               	movwf	??_setDimmerLights_Dimming
 12702  07DC  0863               	movf	??_setDimmerLights_Dimming,w
 12703  07DD  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 12704  07DE  0865               	movf	setDimmerLights_Dimming@lights,w
 12705  07DF  3191  21A6  3187   	fcall	_setDimmerIntr_MaxmumValue
 12706                           
 12707                           ;Dimmer_B1.c: 1159: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 12708  07E2  0020               	movlb	0	; select bank0
 12709  07E3  0864               	movf	setDimmerLights_Dimming@value,w
 12710  07E4  318C  24A0  3187   	fcall	_getDimmerLights_ValueToPercent
 12711  07E7  0020               	movlb	0	; select bank0
 12712  07E8  00E3               	movwf	??_setDimmerLights_Dimming
 12713  07E9  0863               	movf	??_setDimmerLights_Dimming,w
 12714  07EA  00DA               	movwf	setProductData@value
 12715  07EB  0865               	movf	setDimmerLights_Dimming@lights,w
 12716  07EC  3E14               	addlw	20
 12717  07ED  3191  219A  3187   	fcall	_setProductData
 12718                           
 12719                           ;Dimmer_B1.c: 1166: setMemory_Modify(1);
 12720  07F0  3001               	movlw	1
 12721  07F1  3192  2239  3187   	fcall	_setMemory_Modify
 12722                           
 12723                           ;Dimmer_B1.c: 1170: setRF_DimmerLights(lights, 1);
 12724  07F4  0020               	movlb	0	; select bank0
 12725  07F5  01DD               	clrf	setRF_DimmerLights@on
 12726  07F6  0ADD               	incf	setRF_DimmerLights@on,f
 12727  07F7  0865               	movf	setDimmerLights_Dimming@lights,w
 12728  07F8  318D  25CF  3187   	fcall	_setRF_DimmerLights
 12729                           
 12730                           ;Dimmer_B1.c: 1171: setTxData();
 12731  07FB  3190  20EA         	fcall	_setTxData
 12732  07FD  0008               	return
 12733  07FE                     __end_of_setDimmerLights_Dimming:	
 12734                           
 12735                           	psect	text89
 12736  10EA                     __ptext89:	
 12737 ;; *************** function _setTxData *****************
 12738 ;; Defined at:
 12739 ;;		line 320 in file "../src/RF_Control_B1.c"
 12740 ;; Parameters:    Size  Location     Type
 12741 ;;		None
 12742 ;; Auto vars:     Size  Location     Type
 12743 ;;  i               1    0        unsigned char 
 12744 ;; Return value:  Size  Location     Type
 12745 ;;		None               void
 12746 ;; Registers used:
 12747 ;;		status,2
 12748 ;; Tracked objects:
 12749 ;;		On entry : 0/0
 12750 ;;		On exit  : 0/0
 12751 ;;		Unchanged: 0/0
 12752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;Total ram usage:        0 bytes
 12758 ;; Hardware stack levels used:    1
 12759 ;; Hardware stack levels required when called:    3
 12760 ;; This function calls:
 12761 ;;		Nothing
 12762 ;; This function is called by:
 12763 ;;		_setDimmerLights_OnOff
 12764 ;;		_setDimmerLights_Dimming
 12765 ;;		_getRxData
 12766 ;;		_setControl_Lights_Table
 12767 ;;		_setRFSW_Control
 12768 ;;		_setRFSW_AdjControl
 12769 ;; This function uses a non-reentrant model
 12770 ;;
 12771                           
 12772                           
 12773                           ;psect for function _setTxData
 12774  10EA                     _setTxData:	
 12775                           
 12776                           ;RF_Control_B1.c: 321: char i;
 12777                           ;RF_Control_B1.c: 324: RF1.TransceiveGO = 1;
 12778                           
 12779                           ;incstack = 0
 12780                           ; Regs used in _setTxData: [status,2]
 12781  10EA  0021               	movlb	1	; select bank1
 12782  10EB  1530               	bsf	_RF1^(0+128),2
 12783                           
 12784                           ;RF_Control_B1.c: 325: RF1.Count = 0;
 12785  10EC  01B3               	clrf	(_RF1^(0+128)+3)
 12786  10ED  01B4               	clrf	((_RF1+1)^(0+128)+3)
 12787  10EE  0008               	return
 12788  10EF                     __end_of_setTxData:	
 12789                           
 12790                           	psect	text90
 12791  1249                     __ptext90:	
 12792 ;; *************** function _setRF_TransceiveGO *****************
 12793 ;; Defined at:
 12794 ;;		line 660 in file "../src/RF_Control_B1.c"
 12795 ;; Parameters:    Size  Location     Type
 12796 ;;  command         1    wreg     unsigned char 
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;  command         1    3[COMMON] unsigned char 
 12799 ;; Return value:  Size  Location     Type
 12800 ;;		None               void
 12801 ;; Registers used:
 12802 ;;		wreg, status,2, status,0
 12803 ;; Tracked objects:
 12804 ;;		On entry : 0/0
 12805 ;;		On exit  : 0/0
 12806 ;;		Unchanged: 0/0
 12807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12809 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12810 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;Total ram usage:        2 bytes
 12813 ;; Hardware stack levels used:    1
 12814 ;; Hardware stack levels required when called:    3
 12815 ;; This function calls:
 12816 ;;		Nothing
 12817 ;; This function is called by:
 12818 ;;		_setDimmerLights_Dimming
 12819 ;; This function uses a non-reentrant model
 12820 ;;
 12821                           
 12822                           
 12823                           ;psect for function _setRF_TransceiveGO
 12824  1249                     _setRF_TransceiveGO:	
 12825                           
 12826                           ;incstack = 0
 12827                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 12828                           ;setRF_TransceiveGO@command stored from wreg
 12829  1249  00F3               	movwf	setRF_TransceiveGO@command
 12830                           
 12831                           ;RF_Control_B1.c: 661: RF1.TransceiveGO = command == 1 ? 1 : 0;
 12832  124A  0873               	movf	setRF_TransceiveGO@command,w
 12833  124B  3A01               	xorlw	1
 12834  124C  3000               	movlw	0
 12835  124D  1903               	skipnz
 12836  124E  3001               	movlw	1
 12837  124F  00F2               	movwf	??_setRF_TransceiveGO
 12838  1250  0DF2               	rlf	??_setRF_TransceiveGO,f
 12839  1251  0DF2               	rlf	??_setRF_TransceiveGO,f
 12840  1252  0021               	movlb	1	; select bank1
 12841  1253  0830               	movf	_RF1^(0+128),w
 12842  1254  0672               	xorwf	??_setRF_TransceiveGO,w
 12843  1255  39FB               	andlw	-5
 12844  1256  0672               	xorwf	??_setRF_TransceiveGO,w
 12845  1257  00B0               	movwf	_RF1^(0+128)
 12846  1258  0008               	return
 12847  1259                     __end_of_setRF_TransceiveGO:	
 12848                           
 12849                           	psect	text91
 12850  0DCF                     __ptext91:	
 12851 ;; *************** function _setRF_DimmerLights *****************
 12852 ;; Defined at:
 12853 ;;		line 635 in file "../src/RF_Control_B1.c"
 12854 ;; Parameters:    Size  Location     Type
 12855 ;;  lights          1    wreg     unsigned char 
 12856 ;;  on              1   61[BANK0 ] unsigned char 
 12857 ;; Auto vars:     Size  Location     Type
 12858 ;;  lights          1   65[BANK0 ] unsigned char 
 12859 ;;  status          1   64[BANK0 ] unsigned char 
 12860 ;; Return value:  Size  Location     Type
 12861 ;;		None               void
 12862 ;; Registers used:
 12863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12864 ;; Tracked objects:
 12865 ;;		On entry : 0/0
 12866 ;;		On exit  : 0/0
 12867 ;;		Unchanged: 0/0
 12868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12869 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12870 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12871 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12872 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12873 ;;Total ram usage:        5 bytes
 12874 ;; Hardware stack levels used:    1
 12875 ;; Hardware stack levels required when called:    4
 12876 ;; This function calls:
 12877 ;;		_setProductData
 12878 ;; This function is called by:
 12879 ;;		_setDimmerLights_OnOff
 12880 ;;		_setDimmerLights_Dimming
 12881 ;;		_setRFSW_Control
 12882 ;; This function uses a non-reentrant model
 12883 ;;
 12884                           
 12885                           
 12886                           ;psect for function _setRF_DimmerLights
 12887  0DCF                     _setRF_DimmerLights:	
 12888                           
 12889                           ;incstack = 0
 12890                           ; Regs used in _setRF_DimmerLights: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12891                           ;setRF_DimmerLights@lights stored from wreg
 12892  0DCF  0020               	movlb	0	; select bank0
 12893  0DD0  00E1               	movwf	setRF_DimmerLights@lights
 12894                           
 12895                           ;RF_Control_B1.c: 636: char status = 1;
 12896  0DD1  01E0               	clrf	setRF_DimmerLights@status
 12897  0DD2  0AE0               	incf	setRF_DimmerLights@status,f
 12898                           
 12899                           ;RF_Control_B1.c: 637: switch (lights) {
 12900  0DD3  2DDA               	goto	l7989
 12901  0DD4                     l7983:	
 12902                           ;RF_Control_B1.c: 638: case 2:
 12903                           
 12904  0DD4  2DD7               	goto	L7
 12905  0DD5                     l7985:	
 12906                           ;RF_Control_B1.c: 641: case 3:
 12907                           
 12908                           ;RF_Control_B1.c: 640: break;
 12909                           
 12910                           ;RF_Control_B1.c: 639: status <<= 1;
 12911                           
 12912                           
 12913                           ;RF_Control_B1.c: 642: status <<= 2;
 12914  0DD5  1003               	clrc
 12915  0DD6  0DE0               	rlf	setRF_DimmerLights@status,f
 12916  0DD7                     L7:	
 12917  0DD7  1003               	clrc
 12918  0DD8  0DE0               	rlf	setRF_DimmerLights@status,f
 12919                           
 12920                           ;RF_Control_B1.c: 644: }
 12921                           
 12922                           ;RF_Control_B1.c: 643: break;
 12923  0DD9  2DE2               	goto	l2049
 12924  0DDA                     l7989:	
 12925  0DDA  0861               	movf	setRF_DimmerLights@lights,w
 12926                           
 12927                           ; Switch size 1, requested type "space"
 12928                           ; Number of cases is 2, Range of values is 2 to 3
 12929                           ; switch strategies available:
 12930                           ; Name         Instructions Cycles
 12931                           ; simple_byte            7     4 (average)
 12932                           ; direct_byte           13     9 (fixed)
 12933                           ; jumptable            263     9 (fixed)
 12934                           ;	Chosen strategy is simple_byte
 12935  0DDB  3A02               	xorlw	2	; case 2
 12936  0DDC  1903               	skipnz
 12937  0DDD  2DD4               	goto	l7983
 12938  0DDE  3A01               	xorlw	1	; case 3
 12939  0DDF  1903               	skipnz
 12940  0DE0  2DD5               	goto	l7985
 12941  0DE1  2DE2               	goto	l2049
 12942  0DE2                     l2049:	
 12943                           
 12944                           ;RF_Control_B1.c: 645: status = ~status;
 12945  0DE2  09E0               	comf	setRF_DimmerLights@status,f
 12946                           
 12947                           ;RF_Control_B1.c: 647: setProductData(11, lights);
 12948  0DE3  0861               	movf	setRF_DimmerLights@lights,w
 12949  0DE4  00DE               	movwf	??_setRF_DimmerLights
 12950  0DE5  085E               	movf	??_setRF_DimmerLights,w
 12951  0DE6  00DA               	movwf	setProductData@value
 12952  0DE7  300B               	movlw	11
 12953  0DE8  3191  219A  318D   	fcall	_setProductData
 12954                           
 12955                           ;RF_Control_B1.c: 648: setProductData(17, product->Data[26 + lights]);
 12956  0DEB  0020               	movlb	0	; select bank0
 12957  0DEC  0861               	movf	setRF_DimmerLights@lights,w
 12958  0DED  3E1A               	addlw	26
 12959  0DEE  076C               	addwf	_product,w
 12960  0DEF  00DE               	movwf	??_setRF_DimmerLights
 12961  0DF0  085E               	movf	??_setRF_DimmerLights,w
 12962  0DF1  0086               	movwf	6
 12963  0DF2  3001               	movlw	1	; select bank2/3
 12964  0DF3  0087               	movwf	7
 12965  0DF4  0801               	movf	1,w
 12966  0DF5  00DF               	movwf	??_setRF_DimmerLights+1
 12967  0DF6  085F               	movf	??_setRF_DimmerLights+1,w
 12968  0DF7  00DA               	movwf	setProductData@value
 12969  0DF8  3011               	movlw	17
 12970  0DF9  3191  219A  318D   	fcall	_setProductData
 12971                           
 12972                           ;RF_Control_B1.c: 649: if (on == 1) {
 12973  0DFC  0020               	movlb	0	; select bank0
 12974  0DFD  085D               	movf	setRF_DimmerLights@on,w
 12975  0DFE  3A01               	xorlw	1
 12976  0DFF  1D03               	skipz
 12977  0E00  2E20               	goto	l7997
 12978                           
 12979                           ;RF_Control_B1.c: 650: setProductData(9, product->Data[20 + lights]);
 12980  0E01  0861               	movf	setRF_DimmerLights@lights,w
 12981  0E02  3E14               	addlw	20
 12982  0E03  076C               	addwf	_product,w
 12983  0E04  00DE               	movwf	??_setRF_DimmerLights
 12984  0E05  085E               	movf	??_setRF_DimmerLights,w
 12985  0E06  0086               	movwf	6
 12986  0E07  3001               	movlw	1	; select bank2/3
 12987  0E08  0087               	movwf	7
 12988  0E09  0801               	movf	1,w
 12989  0E0A  00DF               	movwf	??_setRF_DimmerLights+1
 12990  0E0B  085F               	movf	??_setRF_DimmerLights+1,w
 12991  0E0C  00DA               	movwf	setProductData@value
 12992  0E0D  3009               	movlw	9
 12993  0E0E  3191  219A  318D   	fcall	_setProductData
 12994                           
 12995                           ;RF_Control_B1.c: 651: setProductData(15, (product->Data[15] | lights));
 12996  0E11  0020               	movlb	0	; select bank0
 12997  0E12  086C               	movf	_product,w
 12998  0E13  3E0F               	addlw	15
 12999  0E14  0086               	movwf	6
 13000  0E15  3001               	movlw	1	; select bank2/3
 13001  0E16  0087               	movwf	7
 13002  0E17  0801               	movf	1,w
 13003  0E18  0461               	iorwf	setRF_DimmerLights@lights,w
 13004  0E19  00DE               	movwf	??_setRF_DimmerLights
 13005  0E1A  085E               	movf	??_setRF_DimmerLights,w
 13006  0E1B  00DA               	movwf	setProductData@value
 13007  0E1C  300F               	movlw	15
 13008  0E1D  3191  219A         	fcall	_setProductData
 13009                           
 13010                           ;RF_Control_B1.c: 652: } else {
 13011  0E1F  0008               	return
 13012  0E20                     l7997:	
 13013                           
 13014                           ;RF_Control_B1.c: 653: setProductData(9, 0x00);
 13015  0E20  0020               	movlb	0	; select bank0
 13016  0E21  01DA               	clrf	setProductData@value
 13017  0E22  3009               	movlw	9
 13018  0E23  3191  219A  318D   	fcall	_setProductData
 13019                           
 13020                           ;RF_Control_B1.c: 654: setProductData(15, (product->Data[15] & status));
 13021  0E26  0020               	movlb	0	; select bank0
 13022  0E27  086C               	movf	_product,w
 13023  0E28  3E0F               	addlw	15
 13024  0E29  0086               	movwf	6
 13025  0E2A  3001               	movlw	1	; select bank2/3
 13026  0E2B  0087               	movwf	7
 13027  0E2C  0801               	movf	1,w
 13028  0E2D  0560               	andwf	setRF_DimmerLights@status,w
 13029  0E2E  00DE               	movwf	??_setRF_DimmerLights
 13030  0E2F  085E               	movf	??_setRF_DimmerLights,w
 13031  0E30  00DA               	movwf	setProductData@value
 13032  0E31  300F               	movlw	15
 13033  0E32  3191  219A         	fcall	_setProductData
 13034  0E34  0008               	return
 13035  0E35                     __end_of_setRF_DimmerLights:	
 13036                           
 13037                           	psect	text92
 13038  11A6                     __ptext92:	
 13039 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 13040 ;; Defined at:
 13041 ;;		line 177 in file "../src/Dimmer_B1.c"
 13042 ;; Parameters:    Size  Location     Type
 13043 ;;  lights          1    wreg     unsigned char 
 13044 ;;  value           1   58[BANK0 ] unsigned char 
 13045 ;; Auto vars:     Size  Location     Type
 13046 ;;  lights          1   60[BANK0 ] unsigned char 
 13047 ;; Return value:  Size  Location     Type
 13048 ;;		None               void
 13049 ;; Registers used:
 13050 ;;		wreg
 13051 ;; Tracked objects:
 13052 ;;		On entry : 0/0
 13053 ;;		On exit  : 0/0
 13054 ;;		Unchanged: 0/0
 13055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13056 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;Total ram usage:        3 bytes
 13061 ;; Hardware stack levels used:    1
 13062 ;; Hardware stack levels required when called:    3
 13063 ;; This function calls:
 13064 ;;		Nothing
 13065 ;; This function is called by:
 13066 ;;		_setDimmerLights_OnOff
 13067 ;;		_setDimmerLights_Dimming
 13068 ;;		_setRFSW_AdjControl
 13069 ;;		_DimmerLights_AssignationDimming
 13070 ;; This function uses a non-reentrant model
 13071 ;;
 13072                           
 13073                           
 13074                           ;psect for function _setDimmerIntr_MaxmumValue
 13075  11A6                     _setDimmerIntr_MaxmumValue:	
 13076                           
 13077                           ;incstack = 0
 13078                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 13079                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 13080  11A6  0020               	movlb	0	; select bank0
 13081  11A7  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 13082                           
 13083                           ;Dimmer_B1.c: 179: if (lights == 1) {
 13084  11A8  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 13085  11A9  3A01               	xorlw	1
 13086  11AA  1D03               	skipz
 13087  11AB  0008               	return
 13088                           
 13089                           ;Dimmer_B1.c: 180: DimmerIntr1.MaxmumValue = value;
 13090  11AC  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 13091  11AD  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 13092  11AE  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 13093  11AF  0021               	movlb	1	; select bank1
 13094  11B0  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 13095  11B1  0008               	return
 13096  11B2                     __end_of_setDimmerIntr_MaxmumValue:	
 13097                           
 13098                           	psect	text93
 13099  1310                     __ptext93:	
 13100 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 13101 ;; Defined at:
 13102 ;;		line 253 in file "../src/Dimmer_B1.c"
 13103 ;; Parameters:    Size  Location     Type
 13104 ;;  lights          1    wreg     unsigned char 
 13105 ;;  command         1    2[COMMON] unsigned char 
 13106 ;; Auto vars:     Size  Location     Type
 13107 ;;  lights          1    4[COMMON] unsigned char 
 13108 ;; Return value:  Size  Location     Type
 13109 ;;		None               void
 13110 ;; Registers used:
 13111 ;;		wreg, status,2, status,0
 13112 ;; Tracked objects:
 13113 ;;		On entry : 0/0
 13114 ;;		On exit  : 0/0
 13115 ;;		Unchanged: 0/0
 13116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13117 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13119 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13120 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13121 ;;Total ram usage:        3 bytes
 13122 ;; Hardware stack levels used:    1
 13123 ;; Hardware stack levels required when called:    3
 13124 ;; This function calls:
 13125 ;;		Nothing
 13126 ;; This function is called by:
 13127 ;;		_setDimmerLights_Dimming
 13128 ;;		_setDimmerLights_DimmingClose
 13129 ;; This function uses a non-reentrant model
 13130 ;;
 13131                           
 13132                           
 13133                           ;psect for function _setDimmerIntr_Dimming_Sw
 13134  1310                     _setDimmerIntr_Dimming_Sw:	
 13135                           
 13136                           ;incstack = 0
 13137                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 13138                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 13139  1310  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 13140                           
 13141                           ;Dimmer_B1.c: 255: if (lights == 1) {
 13142  1311  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 13143  1312  3A01               	xorlw	1
 13144  1313  1D03               	skipz
 13145  1314  0008               	return
 13146                           
 13147                           ;Dimmer_B1.c: 256: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 13148  1315  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 13149  1316  3A01               	xorlw	1
 13150  1317  3000               	movlw	0
 13151  1318  1903               	skipnz
 13152  1319  3001               	movlw	1
 13153  131A  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 13154  131B  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 13155  131C  0021               	movlb	1	; select bank1
 13156  131D  0820               	movf	_DimmerIntr1^(0+128),w
 13157  131E  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 13158  131F  39EF               	andlw	-17
 13159  1320  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 13160  1321  00A0               	movwf	_DimmerIntr1^(0+128)
 13161  1322  0008               	return
 13162  1323                     __end_of_setDimmerIntr_Dimming_Sw:	
 13163                           
 13164                           	psect	text94
 13165  11E3                     __ptext94:	
 13166 ;; *************** function _getDimmerIntr_DimmingValue *****************
 13167 ;; Defined at:
 13168 ;;		line 157 in file "../src/Dimmer_B1.c"
 13169 ;; Parameters:    Size  Location     Type
 13170 ;;  lights          1    wreg     unsigned char 
 13171 ;; Auto vars:     Size  Location     Type
 13172 ;;  lights          1    3[COMMON] unsigned char 
 13173 ;;  value           1    4[COMMON] unsigned char 
 13174 ;; Return value:  Size  Location     Type
 13175 ;;                  1    wreg      unsigned char 
 13176 ;; Registers used:
 13177 ;;		wreg, status,2
 13178 ;; Tracked objects:
 13179 ;;		On entry : 0/0
 13180 ;;		On exit  : 0/0
 13181 ;;		Unchanged: 0/0
 13182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13184 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13185 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13186 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13187 ;;Total ram usage:        3 bytes
 13188 ;; Hardware stack levels used:    1
 13189 ;; Hardware stack levels required when called:    3
 13190 ;; This function calls:
 13191 ;;		Nothing
 13192 ;; This function is called by:
 13193 ;;		_setDimmerLights_Dimming
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           
 13198                           ;psect for function _getDimmerIntr_DimmingValue
 13199  11E3                     _getDimmerIntr_DimmingValue:	
 13200                           
 13201                           ;incstack = 0
 13202                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 13203                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 13204  11E3  00F3               	movwf	getDimmerIntr_DimmingValue@lights
 13205                           
 13206                           ;Dimmer_B1.c: 158: char value = 0;
 13207  11E4  01F4               	clrf	getDimmerIntr_DimmingValue@value
 13208                           
 13209                           ;Dimmer_B1.c: 160: if (lights == 1) {
 13210  11E5  0873               	movf	getDimmerIntr_DimmingValue@lights,w
 13211  11E6  3A01               	xorlw	1
 13212  11E7  1D03               	skipz
 13213  11E8  29EE               	goto	l682
 13214                           
 13215                           ;Dimmer_B1.c: 161: value = DimmerIntr1.DimmingValue;
 13216  11E9  0021               	movlb	1	; select bank1
 13217  11EA  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 13218  11EB  00F2               	movwf	??_getDimmerIntr_DimmingValue
 13219  11EC  0872               	movf	??_getDimmerIntr_DimmingValue,w
 13220  11ED  00F4               	movwf	getDimmerIntr_DimmingValue@value
 13221  11EE                     l682:	
 13222                           
 13223                           ;Dimmer_B1.c: 162: }
 13224                           ;Dimmer_B1.c: 174: return value;
 13225  11EE  0874               	movf	getDimmerIntr_DimmingValue@value,w
 13226  11EF  0008               	return
 13227  11F0                     __end_of_getDimmerIntr_DimmingValue:	
 13228                           
 13229                           	psect	text95
 13230  10B1                     __ptext95:	
 13231 ;; *************** function _getDimmerLights_Allow_Condition *****************
 13232 ;; Defined at:
 13233 ;;		line 1177 in file "../src/Dimmer_B1.c"
 13234 ;; Parameters:    Size  Location     Type
 13235 ;;  lights          1    wreg     unsigned char 
 13236 ;; Auto vars:     Size  Location     Type
 13237 ;;  lights          1    0[COMMON] unsigned char 
 13238 ;;  allow           1    2[COMMON] unsigned char 
 13239 ;; Return value:  Size  Location     Type
 13240 ;;                  1    wreg      unsigned char 
 13241 ;; Registers used:
 13242 ;;		wreg, status,2
 13243 ;; Tracked objects:
 13244 ;;		On entry : 0/0
 13245 ;;		On exit  : 0/0
 13246 ;;		Unchanged: 0/0
 13247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;Total ram usage:        1 bytes
 13253 ;; Hardware stack levels used:    1
 13254 ;; Hardware stack levels required when called:    3
 13255 ;; This function calls:
 13256 ;;		Nothing
 13257 ;; This function is called by:
 13258 ;;		_setDimmerLights_Main
 13259 ;; This function uses a non-reentrant model
 13260 ;;
 13261                           
 13262                           
 13263                           ;psect for function _getDimmerLights_Allow_Condition
 13264  10B1                     _getDimmerLights_Allow_Condition:	
 13265                           
 13266                           ;Dimmer_B1.c: 1178: char allow = 0;
 13267                           
 13268                           ;incstack = 0
 13269                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2]
 13270  10B1  01F2               	clrf	getDimmerLights_Allow_Condition@allow
 13271                           
 13272                           ;Dimmer_B1.c: 1212: return allow;
 13273  10B2  0872               	movf	getDimmerLights_Allow_Condition@allow,w
 13274  10B3  0008               	return
 13275  10B4                     __end_of_getDimmerLights_Allow_Condition:	
 13276                           
 13277                           	psect	text96
 13278  0A7A                     __ptext96:	
 13279 ;; *************** function _DimmerLights_DimmingFunction *****************
 13280 ;; Defined at:
 13281 ;;		line 2126 in file "../src/Dimmer_B1.c"
 13282 ;; Parameters:    Size  Location     Type
 13283 ;;  lights          1    wreg     unsigned char 
 13284 ;; Auto vars:     Size  Location     Type
 13285 ;;  lights          1    6[BANK0 ] unsigned char 
 13286 ;; Return value:  Size  Location     Type
 13287 ;;		None               void
 13288 ;; Registers used:
 13289 ;;		wreg, status,2, status,0, pclath, cstack
 13290 ;; Tracked objects:
 13291 ;;		On entry : 0/0
 13292 ;;		On exit  : 0/0
 13293 ;;		Unchanged: 0/0
 13294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;Total ram usage:        2 bytes
 13300 ;; Hardware stack levels used:    1
 13301 ;; Hardware stack levels required when called:    6
 13302 ;; This function calls:
 13303 ;;		_DimmerIntr_ValueCalculate
 13304 ;; This function is called by:
 13305 ;;		_DimmerLights_Main
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           
 13310                           ;psect for function _DimmerLights_DimmingFunction
 13311  0A7A                     _DimmerLights_DimmingFunction:	
 13312                           
 13313                           ;incstack = 0
 13314                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0+pclath+cstack]
 13315                           ;DimmerLights_DimmingFunction@lights stored from wreg
 13316  0A7A  0020               	movlb	0	; select bank0
 13317  0A7B  00A6               	movwf	DimmerLights_DimmingFunction@lights
 13318                           
 13319                           ;Dimmer_B1.c: 2128: if (lights == 1) {
 13320  0A7C  0826               	movf	DimmerLights_DimmingFunction@lights,w
 13321  0A7D  3A01               	xorlw	1
 13322  0A7E  1D03               	skipz
 13323  0A7F  0008               	return
 13324                           
 13325                           ;Dimmer_B1.c: 2129: if (DimmerIntr1.Tune == 1) {
 13326  0A80  0021               	movlb	1	; select bank1
 13327  0A81  1CA0               	btfss	_DimmerIntr1^(0+128),1
 13328  0A82  0008               	return
 13329                           
 13330                           ;Dimmer_B1.c: 2130: DimmerIntr1.Tune = 0;
 13331  0A83  10A0               	bcf	_DimmerIntr1^(0+128),1
 13332                           
 13333                           ;Dimmer_B1.c: 2131: DimmerIntr1.TuneTime++;
 13334  0A84  3001               	movlw	1
 13335  0A85  0020               	movlb	0	; select bank0
 13336  0A86  00A5               	movwf	??_DimmerLights_DimmingFunction
 13337  0A87  0825               	movf	??_DimmerLights_DimmingFunction,w
 13338  0A88  0021               	movlb	1	; select bank1
 13339  0A89  07A3               	addwf	(_DimmerIntr1^(0+128)+3),f
 13340                           
 13341                           ;Dimmer_B1.c: 2132: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 13342  0A8A  0824               	movf	(_DimmerIntr1^(0+128)+4),w
 13343  0A8B  0223               	subwf	(_DimmerIntr1^(0+128)+3),w
 13344  0A8C  1C03               	skipc
 13345  0A8D  0008               	return
 13346                           
 13347                           ;Dimmer_B1.c: 2133: DimmerIntr1.TuneTime = 0;
 13348  0A8E  01A3               	clrf	(_DimmerIntr1^(0+128)+3)
 13349                           
 13350                           ;Dimmer_B1.c: 2134: DimmerIntr1.TuneGO = 1;
 13351  0A8F  1721               	bsf	(_DimmerIntr1^(0+128)+1),6
 13352                           
 13353                           ;Dimmer_B1.c: 2135: if (DimmerIntr1.Dimming_Sw == 1) {
 13354  0A90  1E20               	btfss	_DimmerIntr1^(0+128),4
 13355  0A91  2AB0               	goto	l879
 13356                           
 13357                           ;Dimmer_B1.c: 2137: if (DimmerIntr1.Dimming_Status == 0) {
 13358  0A92  1AA0               	btfsc	_DimmerIntr1^(0+128),5
 13359  0A93  2AA4               	goto	l8891
 13360                           
 13361                           ;Dimmer_B1.c: 2138: if (DimmerIntr1.DimmingValue < ((char)(87*0.55))) {
 13362  0A94  302F               	movlw	47
 13363  0A95  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 13364  0A96  1803               	skipnc
 13365  0A97  2AA2               	goto	l881
 13366                           
 13367                           ;Dimmer_B1.c: 2139: DimmerIntr1.DimmingValue++;
 13368  0A98  3001               	movlw	1
 13369  0A99  0020               	movlb	0	; select bank0
 13370  0A9A  00A5               	movwf	??_DimmerLights_DimmingFunction
 13371  0A9B  0825               	movf	??_DimmerLights_DimmingFunction,w
 13372  0A9C  0021               	movlb	1	; select bank1
 13373  0A9D  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 13374                           
 13375                           ;Dimmer_B1.c: 2140: DimmerIntr_ValueCalculate(1);
 13376  0A9E  3001               	movlw	1
 13377  0A9F  3195  25F3         	fcall	_DimmerIntr_ValueCalculate
 13378                           
 13379                           ;Dimmer_B1.c: 2141: } else {
 13380  0AA1  0008               	return
 13381  0AA2                     l881:	
 13382                           
 13383                           ;Dimmer_B1.c: 2142: DimmerIntr1.Dimming_Status = 1;
 13384  0AA2  16A0               	bsf	_DimmerIntr1^(0+128),5
 13385                           
 13386                           ;Dimmer_B1.c: 2143: }
 13387                           ;Dimmer_B1.c: 2144: } else {
 13388  0AA3  0008               	return
 13389  0AA4                     l8891:	
 13390                           
 13391                           ;Dimmer_B1.c: 2145: if (DimmerIntr1.DimmingValue > ((char)(10*0.55))) {
 13392  0AA4  3006               	movlw	6
 13393  0AA5  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 13394  0AA6  1C03               	skipc
 13395  0AA7  2AAE               	goto	l884
 13396                           
 13397                           ;Dimmer_B1.c: 2146: DimmerIntr1.DimmingValue--;
 13398  0AA8  3001               	movlw	1
 13399  0AA9  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 13400                           
 13401                           ;Dimmer_B1.c: 2147: DimmerIntr_ValueCalculate(1);
 13402  0AAA  3001               	movlw	1
 13403  0AAB  3195  25F3         	fcall	_DimmerIntr_ValueCalculate
 13404                           
 13405                           ;Dimmer_B1.c: 2148: } else {
 13406  0AAD  0008               	return
 13407  0AAE                     l884:	
 13408                           
 13409                           ;Dimmer_B1.c: 2149: DimmerIntr1.Dimming_Status = 0;
 13410  0AAE  12A0               	bcf	_DimmerIntr1^(0+128),5
 13411                           
 13412                           ;Dimmer_B1.c: 2150: }
 13413                           ;Dimmer_B1.c: 2151: }
 13414                           ;Dimmer_B1.c: 2170: } else if (DimmerIntr1.Dimming_RF == 1) {
 13415  0AAF  0008               	return
 13416  0AB0                     l879:	
 13417  0AB0  1F20               	btfss	_DimmerIntr1^(0+128),6
 13418  0AB1  0008               	return
 13419                           
 13420                           ;Dimmer_B1.c: 2172: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 13421  0AB2  0826               	movf	(_DimmerIntr1^(0+128)+6),w
 13422  0AB3  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 13423  0AB4  1803               	skipnc
 13424  0AB5  2AC0               	goto	l8903
 13425                           
 13426                           ;Dimmer_B1.c: 2173: DimmerIntr1.DimmingValue++;
 13427  0AB6  3001               	movlw	1
 13428  0AB7  0020               	movlb	0	; select bank0
 13429  0AB8  00A5               	movwf	??_DimmerLights_DimmingFunction
 13430  0AB9  0825               	movf	??_DimmerLights_DimmingFunction,w
 13431  0ABA  0021               	movlb	1	; select bank1
 13432  0ABB  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 13433                           
 13434                           ;Dimmer_B1.c: 2174: DimmerIntr_ValueCalculate(1);
 13435  0ABC  3001               	movlw	1
 13436  0ABD  3195  25F3         	fcall	_DimmerIntr_ValueCalculate
 13437                           
 13438                           ;Dimmer_B1.c: 2175: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 13439  0ABF  0008               	return
 13440  0AC0                     l8903:	
 13441  0AC0  0021               	movlb	1	; select bank1
 13442  0AC1  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 13443  0AC2  0226               	subwf	(_DimmerIntr1^(0+128)+6),w
 13444  0AC3  1803               	skipnc
 13445  0AC4  2ACB               	goto	l890
 13446                           
 13447                           ;Dimmer_B1.c: 2176: DimmerIntr1.DimmingValue--;
 13448  0AC5  3001               	movlw	1
 13449  0AC6  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 13450                           
 13451                           ;Dimmer_B1.c: 2177: DimmerIntr_ValueCalculate(1);
 13452  0AC7  3001               	movlw	1
 13453  0AC8  3195  25F3         	fcall	_DimmerIntr_ValueCalculate
 13454                           
 13455                           ;Dimmer_B1.c: 2178: } else {
 13456  0ACA  0008               	return
 13457  0ACB                     l890:	
 13458                           
 13459                           ;Dimmer_B1.c: 2179: DimmerIntr1.Dimming_RF = 0;
 13460  0ACB  1320               	bcf	_DimmerIntr1^(0+128),6
 13461  0ACC  0008               	return
 13462  0ACD                     __end_of_DimmerLights_DimmingFunction:	
 13463                           
 13464                           	psect	text97
 13465  15F3                     __ptext97:	
 13466 ;; *************** function _DimmerIntr_ValueCalculate *****************
 13467 ;; Defined at:
 13468 ;;		line 2057 in file "../src/Dimmer_B1.c"
 13469 ;; Parameters:    Size  Location     Type
 13470 ;;  lights          1    wreg     unsigned char 
 13471 ;; Auto vars:     Size  Location     Type
 13472 ;;  lights          1    4[BANK0 ] unsigned char 
 13473 ;; Return value:  Size  Location     Type
 13474 ;;		None               void
 13475 ;; Registers used:
 13476 ;;		wreg, status,2, status,0, pclath, cstack
 13477 ;; Tracked objects:
 13478 ;;		On entry : 0/0
 13479 ;;		On exit  : 0/0
 13480 ;;		Unchanged: 0/0
 13481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13486 ;;Total ram usage:        3 bytes
 13487 ;; Hardware stack levels used:    1
 13488 ;; Hardware stack levels required when called:    5
 13489 ;; This function calls:
 13490 ;;		_Division
 13491 ;; This function is called by:
 13492 ;;		_setDimmerLights_OnOff
 13493 ;;		_DimmerLights_DimmingFunction
 13494 ;; This function uses a non-reentrant model
 13495 ;;
 13496                           
 13497                           
 13498                           ;psect for function _DimmerIntr_ValueCalculate
 13499  15F3                     _DimmerIntr_ValueCalculate:	
 13500                           
 13501                           ;incstack = 0
 13502                           ; Regs used in _DimmerIntr_ValueCalculate: [wreg+status,2+status,0+pclath+cstack]
 13503                           ;DimmerIntr_ValueCalculate@lights stored from wreg
 13504  15F3  0020               	movlb	0	; select bank0
 13505  15F4  00A4               	movwf	DimmerIntr_ValueCalculate@lights
 13506                           
 13507                           ;Dimmer_B1.c: 2059: if (lights == 1) {
 13508  15F5  0824               	movf	DimmerIntr_ValueCalculate@lights,w
 13509  15F6  3A01               	xorlw	1
 13510  15F7  1D03               	skipz
 13511  15F8  0008               	return
 13512                           
 13513                           ;Dimmer_B1.c: 2070: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 13514  15F9  3002               	movlw	2
 13515  15FA  00A2               	movwf	??_DimmerIntr_ValueCalculate
 13516  15FB  0822               	movf	??_DimmerIntr_ValueCalculate,w
 13517  15FC  00F7               	movwf	Division@num
 13518  15FD  0021               	movlb	1	; select bank1
 13519  15FE  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 13520  15FF  3192  221B         	fcall	_Division
 13521  1601  0020               	movlb	0	; select bank0
 13522  1602  00A3               	movwf	??_DimmerIntr_ValueCalculate+1
 13523  1603  0823               	movf	??_DimmerIntr_ValueCalculate+1,w
 13524  1604  0021               	movlb	1	; select bank1
 13525  1605  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 13526                           
 13527                           ;Dimmer_B1.c: 2071: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - DimmerIntr1.
      +                          DimmingValue);
 13528  1606  0325               	decf	(_DimmerIntr1^(0+128)+5),w
 13529  1607  3AFF               	xorlw	255
 13530  1608  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 13531  1609  3E37               	addlw	55
 13532  160A  0020               	movlb	0	; select bank0
 13533  160B  00A2               	movwf	??_DimmerIntr_ValueCalculate
 13534  160C  0822               	movf	??_DimmerIntr_ValueCalculate,w
 13535  160D  0021               	movlb	1	; select bank1
 13536  160E  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 13537                           
 13538                           ;Dimmer_B1.c: 2072: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 13539  160F  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 13540  1610  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 13541  1611  0020               	movlb	0	; select bank0
 13542  1612  00A2               	movwf	??_DimmerIntr_ValueCalculate
 13543  1613  0822               	movf	??_DimmerIntr_ValueCalculate,w
 13544  1614  0021               	movlb	1	; select bank1
 13545  1615  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 13546                           
 13547                           ;Dimmer_B1.c: 2073: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 5;
 13548  1616  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 13549  1617  3E05               	addlw	5
 13550  1618  0020               	movlb	0	; select bank0
 13551  1619  00A2               	movwf	??_DimmerIntr_ValueCalculate
 13552  161A  0822               	movf	??_DimmerIntr_ValueCalculate,w
 13553  161B  0021               	movlb	1	; select bank1
 13554  161C  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 13555                           
 13556                           ;Dimmer_B1.c: 2075: DimmerIntr1.Calculate = 1;
 13557  161D  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 13558  161E  0008               	return
 13559  161F                     __end_of_DimmerIntr_ValueCalculate:	
 13560                           
 13561                           	psect	text98
 13562  1105                     __ptext98:	
 13563 ;; *************** function _DimmerLights_Initialization *****************
 13564 ;; Defined at:
 13565 ;;		line 705 in file "../src/Dimmer_B1.c"
 13566 ;; Parameters:    Size  Location     Type
 13567 ;;		None
 13568 ;; Auto vars:     Size  Location     Type
 13569 ;;		None
 13570 ;; Return value:  Size  Location     Type
 13571 ;;		None               void
 13572 ;; Registers used:
 13573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13574 ;; Tracked objects:
 13575 ;;		On entry : 0/0
 13576 ;;		On exit  : 0/0
 13577 ;;		Unchanged: 0/0
 13578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13583 ;;Total ram usage:        0 bytes
 13584 ;; Hardware stack levels used:    1
 13585 ;; Hardware stack levels required when called:    7
 13586 ;; This function calls:
 13587 ;;		_DimmerIntr_Initialization
 13588 ;;		_setDimmerLights_Initialization
 13589 ;; This function is called by:
 13590 ;;		_main
 13591 ;; This function uses a non-reentrant model
 13592 ;;
 13593                           
 13594                           
 13595                           ;psect for function _DimmerLights_Initialization
 13596  1105                     _DimmerLights_Initialization:	
 13597                           
 13598                           ;Dimmer_B1.c: 707: setDimmerLights_Initialization(1);
 13599                           
 13600                           ;incstack = 0
 13601                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13602  1105  3001               	movlw	1
 13603  1106  3180  2003  3191   	fcall	_setDimmerLights_Initialization
 13604                           
 13605                           ;Dimmer_B1.c: 717: DimmerIntr_Initialization();
 13606  1109  318B  2321         	fcall	_DimmerIntr_Initialization
 13607  110B  0008               	return
 13608  110C                     __end_of_DimmerLights_Initialization:	
 13609                           
 13610                           	psect	text99
 13611  0003                     __ptext99:	
 13612 ;; *************** function _setDimmerLights_Initialization *****************
 13613 ;; Defined at:
 13614 ;;		line 721 in file "../src/Dimmer_B1.c"
 13615 ;; Parameters:    Size  Location     Type
 13616 ;;  lights          1    wreg     unsigned char 
 13617 ;; Auto vars:     Size  Location     Type
 13618 ;;  lights          1    0[COMMON] unsigned char 
 13619 ;; Return value:  Size  Location     Type
 13620 ;;		None               void
 13621 ;; Registers used:
 13622 ;;		wreg
 13623 ;; Tracked objects:
 13624 ;;		On entry : 0/0
 13625 ;;		On exit  : 0/0
 13626 ;;		Unchanged: 0/0
 13627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13632 ;;Total ram usage:        0 bytes
 13633 ;; Hardware stack levels used:    1
 13634 ;; Hardware stack levels required when called:    3
 13635 ;; This function calls:
 13636 ;;		Nothing
 13637 ;; This function is called by:
 13638 ;;		_DimmerLights_Initialization
 13639 ;; This function uses a non-reentrant model
 13640 ;;
 13641                           
 13642                           
 13643                           ;psect for function _setDimmerLights_Initialization
 13644  0003                     _setDimmerLights_Initialization:	
 13645                           
 13646                           ;incstack = 0
 13647                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 13648  0003  0008               	return
 13649  0004                     __end_of_setDimmerLights_Initialization:	
 13650                           
 13651                           	psect	text100
 13652  0B21                     __ptext100:	
 13653 ;; *************** function _DimmerIntr_Initialization *****************
 13654 ;; Defined at:
 13655 ;;		line 7 in file "../src/Dimmer_B1.c"
 13656 ;; Parameters:    Size  Location     Type
 13657 ;;		None
 13658 ;; Auto vars:     Size  Location     Type
 13659 ;;		None
 13660 ;; Return value:  Size  Location     Type
 13661 ;;		None               void
 13662 ;; Registers used:
 13663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13664 ;; Tracked objects:
 13665 ;;		On entry : 0/0
 13666 ;;		On exit  : 0/0
 13667 ;;		Unchanged: 0/0
 13668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13671 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;Total ram usage:        2 bytes
 13674 ;; Hardware stack levels used:    1
 13675 ;; Hardware stack levels required when called:    6
 13676 ;; This function calls:
 13677 ;;		_Division
 13678 ;;		_getDimmerLights_PercentToValue
 13679 ;;		_getDimmerLights_ValueToPercent
 13680 ;;		_setMemory_Modify
 13681 ;; This function is called by:
 13682 ;;		_DimmerLights_Initialization
 13683 ;; This function uses a non-reentrant model
 13684 ;;
 13685                           
 13686                           
 13687                           ;psect for function _DimmerIntr_Initialization
 13688  0B21                     _DimmerIntr_Initialization:	
 13689                           
 13690                           ;Dimmer_B1.c: 11: DimmerIntr1.TuneTimeValue = 3;
 13691                           
 13692                           ;incstack = 0
 13693                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 13694  0B21  3003               	movlw	3
 13695  0B22  0020               	movlb	0	; select bank0
 13696  0B23  00DA               	movwf	??_DimmerIntr_Initialization
 13697  0B24  085A               	movf	??_DimmerIntr_Initialization,w
 13698  0B25  0021               	movlb	1	; select bank1
 13699  0B26  00A4               	movwf	(_DimmerIntr1^(0+128)+4)
 13700                           
 13701                           ;Dimmer_B1.c: 12: DimmerIntr1.MaxmumValue = ((char)(87*0.55));
 13702  0B27  302F               	movlw	47
 13703  0B28  0020               	movlb	0	; select bank0
 13704  0B29  00DA               	movwf	??_DimmerIntr_Initialization
 13705  0B2A  085A               	movf	??_DimmerIntr_Initialization,w
 13706  0B2B  0021               	movlb	1	; select bank1
 13707  0B2C  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 13708                           
 13709                           ;Dimmer_B1.c: 13: DimmerIntr1.MinimumValue = ((char)(10*0.55));
 13710  0B2D  3005               	movlw	5
 13711  0B2E  0020               	movlb	0	; select bank0
 13712  0B2F  00DA               	movwf	??_DimmerIntr_Initialization
 13713  0B30  085A               	movf	??_DimmerIntr_Initialization,w
 13714  0B31  0021               	movlb	1	; select bank1
 13715  0B32  00A7               	movwf	(_DimmerIntr1^(0+128)+7)
 13716                           
 13717                           ;Dimmer_B1.c: 14: DimmerIntr1.Tune = 0;
 13718  0B33  10A0               	bcf	_DimmerIntr1^(0+128),1
 13719                           
 13720                           ;Dimmer_B1.c: 20: product->Data[21] = getDimmerLights_ValueToPercent(((char)(87*0.55)));
 13721  0B34  302F               	movlw	47
 13722  0B35  318C  24A0  318B   	fcall	_getDimmerLights_ValueToPercent
 13723  0B38  0020               	movlb	0	; select bank0
 13724  0B39  00DA               	movwf	??_DimmerIntr_Initialization
 13725  0B3A  086C               	movf	_product,w
 13726  0B3B  3E15               	addlw	21
 13727  0B3C  0086               	movwf	6
 13728  0B3D  3001               	movlw	1	; select bank2/3
 13729  0B3E  0087               	movwf	7
 13730  0B3F  085A               	movf	??_DimmerIntr_Initialization,w
 13731  0B40  0081               	movwf	1
 13732                           
 13733                           ;Dimmer_B1.c: 23: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 13734  0B41  086C               	movf	_product,w
 13735  0B42  3E15               	addlw	21
 13736  0B43  0086               	movwf	6
 13737  0B44  3001               	movlw	1	; select bank2/3
 13738  0B45  0087               	movwf	7
 13739  0B46  0801               	movf	1,w
 13740  0B47  318C  243B  318B   	fcall	_getDimmerLights_PercentToValue
 13741  0B4A  0020               	movlb	0	; select bank0
 13742  0B4B  00DA               	movwf	??_DimmerIntr_Initialization
 13743  0B4C  085A               	movf	??_DimmerIntr_Initialization,w
 13744  0B4D  0021               	movlb	1	; select bank1
 13745  0B4E  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 13746                           
 13747                           ;Dimmer_B1.c: 40: DimmerIntr1.TuneValue2 = Division(((char)(87*0.55)), 2);
 13748  0B4F  3002               	movlw	2
 13749  0B50  0020               	movlb	0	; select bank0
 13750  0B51  00DA               	movwf	??_DimmerIntr_Initialization
 13751  0B52  085A               	movf	??_DimmerIntr_Initialization,w
 13752  0B53  00F7               	movwf	Division@num
 13753  0B54  302F               	movlw	47
 13754  0B55  3192  221B  318B   	fcall	_Division
 13755  0B58  0020               	movlb	0	; select bank0
 13756  0B59  00DB               	movwf	??_DimmerIntr_Initialization+1
 13757  0B5A  085B               	movf	??_DimmerIntr_Initialization+1,w
 13758  0B5B  0021               	movlb	1	; select bank1
 13759  0B5C  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 13760                           
 13761                           ;Dimmer_B1.c: 41: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - ((char)(87*0.5
      +                          5)));
 13762  0B5D  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 13763  0B5E  3E08               	addlw	8
 13764  0B5F  0020               	movlb	0	; select bank0
 13765  0B60  00DA               	movwf	??_DimmerIntr_Initialization
 13766  0B61  085A               	movf	??_DimmerIntr_Initialization,w
 13767  0B62  0021               	movlb	1	; select bank1
 13768  0B63  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 13769                           
 13770                           ;Dimmer_B1.c: 42: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 13771  0B64  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 13772  0B65  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 13773  0B66  0020               	movlb	0	; select bank0
 13774  0B67  00DA               	movwf	??_DimmerIntr_Initialization
 13775  0B68  085A               	movf	??_DimmerIntr_Initialization,w
 13776  0B69  0021               	movlb	1	; select bank1
 13777  0B6A  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 13778                           
 13779                           ;Dimmer_B1.c: 43: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 13780  0B6B  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 13781  0B6C  3E01               	addlw	1
 13782  0B6D  0020               	movlb	0	; select bank0
 13783  0B6E  00DA               	movwf	??_DimmerIntr_Initialization
 13784  0B6F  085A               	movf	??_DimmerIntr_Initialization,w
 13785  0B70  0021               	movlb	1	; select bank1
 13786  0B71  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 13787                           
 13788                           ;Dimmer_B1.c: 44: DimmerIntr1.Calculate = 1;
 13789  0B72  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 13790                           
 13791                           ;Dimmer_B1.c: 113: if (myMain.InitDimmer == 1) {
 13792  0B73  1E49               	btfss	(_myMain^(0+128)+10),4
 13793  0B74  0008               	return
 13794                           
 13795                           ;Dimmer_B1.c: 114: myMain.InitDimmer = 0;
 13796  0B75  1249               	bcf	(_myMain^(0+128)+10),4
 13797                           
 13798                           ;Dimmer_B1.c: 115: myMain.SaveDimmer = 1;
 13799  0B76  16C9               	bsf	(_myMain^(0+128)+10),5
 13800                           
 13801                           ;Dimmer_B1.c: 116: setMemory_Modify(1);
 13802  0B77  3001               	movlw	1
 13803  0B78  3192  2239         	fcall	_setMemory_Modify
 13804  0B7A  0008               	return
 13805  0B7B                     __end_of_DimmerIntr_Initialization:	
 13806                           
 13807                           	psect	text101
 13808  1239                     __ptext101:	
 13809 ;; *************** function _setMemory_Modify *****************
 13810 ;; Defined at:
 13811 ;;		line 1088 in file "../src/MCU_B1.c"
 13812 ;; Parameters:    Size  Location     Type
 13813 ;;  command         1    wreg     unsigned char 
 13814 ;; Auto vars:     Size  Location     Type
 13815 ;;  command         1    3[COMMON] unsigned char 
 13816 ;; Return value:  Size  Location     Type
 13817 ;;		None               void
 13818 ;; Registers used:
 13819 ;;		wreg, status,2, status,0
 13820 ;; Tracked objects:
 13821 ;;		On entry : 0/0
 13822 ;;		On exit  : 0/0
 13823 ;;		Unchanged: 0/0
 13824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13829 ;;Total ram usage:        2 bytes
 13830 ;; Hardware stack levels used:    1
 13831 ;; Hardware stack levels required when called:    3
 13832 ;; This function calls:
 13833 ;;		Nothing
 13834 ;; This function is called by:
 13835 ;;		_DimmerIntr_Initialization
 13836 ;;		_setDimmerLights_Dimming
 13837 ;;		_setLog_Code
 13838 ;;		_setRFSW_AdjControl
 13839 ;;		_DimmerLights_AssignationDimming
 13840 ;; This function uses a non-reentrant model
 13841 ;;
 13842                           
 13843                           
 13844                           ;psect for function _setMemory_Modify
 13845  1239                     _setMemory_Modify:	
 13846                           
 13847                           ;incstack = 0
 13848                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 13849                           ;setMemory_Modify@command stored from wreg
 13850  1239  00F3               	movwf	setMemory_Modify@command
 13851                           
 13852                           ;MCU_B1.c: 1089: Memory.Modify = command == 1 ? 1 : 0;
 13853  123A  0873               	movf	setMemory_Modify@command,w
 13854  123B  3A01               	xorlw	1
 13855  123C  3000               	movlw	0
 13856  123D  1903               	skipnz
 13857  123E  3001               	movlw	1
 13858  123F  00F2               	movwf	??_setMemory_Modify
 13859  1240  0023               	movlb	3	; select bank3
 13860  1241  0844               	movf	(_Memory^(0+384)+36),w
 13861  1242  0672               	xorwf	??_setMemory_Modify,w
 13862  1243  39FE               	andlw	-2
 13863  1244  0672               	xorwf	??_setMemory_Modify,w
 13864  1245  00C4               	movwf	(_Memory^(0+384)+36)
 13865                           
 13866                           ;MCU_B1.c: 1090: Memory.Time = 0;
 13867  1246  01C2               	clrf	(_Memory^(0+384)+34)
 13868  1247  01C3               	clrf	((_Memory+1)^(0+384)+34)
 13869  1248  0008               	return
 13870  1249                     __end_of_setMemory_Modify:	
 13871                           
 13872                           	psect	text102
 13873  0CA0                     __ptext102:	
 13874 ;; *************** function _getDimmerLights_ValueToPercent *****************
 13875 ;; Defined at:
 13876 ;;		line 1317 in file "../src/Dimmer_B1.c"
 13877 ;; Parameters:    Size  Location     Type
 13878 ;;  value           1    wreg     unsigned char 
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;  value           1   54[BANK0 ] unsigned char 
 13881 ;;  i               3   55[BANK0 ] float 
 13882 ;; Return value:  Size  Location     Type
 13883 ;;                  1    wreg      unsigned char 
 13884 ;; Registers used:
 13885 ;;		wreg, status,2, status,0, pclath, cstack
 13886 ;; Tracked objects:
 13887 ;;		On entry : 0/0
 13888 ;;		On exit  : 0/0
 13889 ;;		Unchanged: 0/0
 13890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13895 ;;Total ram usage:        6 bytes
 13896 ;; Hardware stack levels used:    1
 13897 ;; Hardware stack levels required when called:    5
 13898 ;; This function calls:
 13899 ;;		___awtoft
 13900 ;;		___ftadd
 13901 ;;		___ftdiv
 13902 ;;		___ftneg
 13903 ;;		___fttol
 13904 ;; This function is called by:
 13905 ;;		_DimmerIntr_Initialization
 13906 ;;		_setDimmerLights_Dimming
 13907 ;; This function uses a non-reentrant model
 13908 ;;
 13909                           
 13910                           
 13911                           ;psect for function _getDimmerLights_ValueToPercent
 13912  0CA0                     _getDimmerLights_ValueToPercent:	
 13913                           
 13914                           ;incstack = 0
 13915                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 13916                           ;getDimmerLights_ValueToPercent@value stored from wreg
 13917  0CA0  0020               	movlb	0	; select bank0
 13918  0CA1  00D6               	movwf	getDimmerLights_ValueToPercent@value
 13919                           
 13920                           ;Dimmer_B1.c: 1325: float i = ((char)(87*0.55)) - ((char)(10*0.55));
 13921  0CA2  3000               	movlw	0
 13922  0CA3  00D7               	movwf	getDimmerLights_ValueToPercent@i
 13923  0CA4  3028               	movlw	40
 13924  0CA5  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 13925  0CA6  3042               	movlw	66
 13926  0CA7  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 13927                           
 13928                           ;Dimmer_B1.c: 1326: i /= 100;
 13929  0CA8  3000               	movlw	0
 13930  0CA9  00A6               	movwf	___ftdiv@f2
 13931  0CAA  30C8               	movlw	200
 13932  0CAB  00A7               	movwf	___ftdiv@f2+1
 13933  0CAC  3042               	movlw	66
 13934  0CAD  00A8               	movwf	___ftdiv@f2+2
 13935  0CAE  0857               	movf	getDimmerLights_ValueToPercent@i,w
 13936  0CAF  00A9               	movwf	___ftdiv@f1
 13937  0CB0  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 13938  0CB1  00AA               	movwf	___ftdiv@f1+1
 13939  0CB2  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 13940  0CB3  00AB               	movwf	___ftdiv@f1+2
 13941  0CB4  3184  24DF  318C   	fcall	___ftdiv
 13942  0CB7  0020               	movlb	0	; select bank0
 13943  0CB8  0826               	movf	?___ftdiv,w
 13944  0CB9  00D7               	movwf	getDimmerLights_ValueToPercent@i
 13945  0CBA  0827               	movf	?___ftdiv+1,w
 13946  0CBB  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 13947  0CBC  0828               	movf	?___ftdiv+2,w
 13948  0CBD  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 13949                           
 13950                           ;Dimmer_B1.c: 1328: return (char) (100 - ((((char)(87*0.55)) - value) / i));
 13951  0CBE  0856               	movf	getDimmerLights_ValueToPercent@value,w
 13952  0CBF  00D4               	movwf	??_getDimmerLights_ValueToPercent
 13953  0CC0  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 13954  0CC1  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 13955  0CC2  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 13956  0CC3  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 13957  0CC4  1903               	skipnz
 13958  0CC5  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 13959  0CC6  0854               	movf	??_getDimmerLights_ValueToPercent,w
 13960  0CC7  3E2F               	addlw	47
 13961  0CC8  00A0               	movwf	___awtoft@c
 13962  0CC9  3000               	movlw	0
 13963  0CCA  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 13964  0CCB  00A1               	movwf	___awtoft@c+1
 13965  0CCC  3194  24C6  318C   	fcall	___awtoft
 13966  0CCF  0020               	movlb	0	; select bank0
 13967  0CD0  0820               	movf	?___awtoft,w
 13968  0CD1  00A9               	movwf	___ftdiv@f1
 13969  0CD2  0821               	movf	?___awtoft+1,w
 13970  0CD3  00AA               	movwf	___ftdiv@f1+1
 13971  0CD4  0822               	movf	?___awtoft+2,w
 13972  0CD5  00AB               	movwf	___ftdiv@f1+2
 13973  0CD6  0857               	movf	getDimmerLights_ValueToPercent@i,w
 13974  0CD7  00A6               	movwf	___ftdiv@f2
 13975  0CD8  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 13976  0CD9  00A7               	movwf	___ftdiv@f2+1
 13977  0CDA  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 13978  0CDB  00A8               	movwf	___ftdiv@f2+2
 13979  0CDC  3184  24DF  318C   	fcall	___ftdiv
 13980  0CDF  0020               	movlb	0	; select bank0
 13981  0CE0  0826               	movf	?___ftdiv,w
 13982  0CE1  00B6               	movwf	___ftneg@f1
 13983  0CE2  0827               	movf	?___ftdiv+1,w
 13984  0CE3  00B7               	movwf	___ftneg@f1+1
 13985  0CE4  0828               	movf	?___ftdiv+2,w
 13986  0CE5  00B8               	movwf	___ftneg@f1+2
 13987  0CE6  3191  2133  318C   	fcall	___ftneg
 13988  0CE9  0020               	movlb	0	; select bank0
 13989  0CEA  0836               	movf	?___ftneg,w
 13990  0CEB  00BC               	movwf	___ftadd@f2
 13991  0CEC  0837               	movf	?___ftneg+1,w
 13992  0CED  00BD               	movwf	___ftadd@f2+1
 13993  0CEE  0838               	movf	?___ftneg+2,w
 13994  0CEF  00BE               	movwf	___ftadd@f2+2
 13995  0CF0  3000               	movlw	0
 13996  0CF1  00B9               	movwf	___ftadd@f1
 13997  0CF2  30C8               	movlw	200
 13998  0CF3  00BA               	movwf	___ftadd@f1+1
 13999  0CF4  3042               	movlw	66
 14000  0CF5  00BB               	movwf	___ftadd@f1+2
 14001  0CF6  3181  21BD  318C   	fcall	___ftadd
 14002  0CF9  0020               	movlb	0	; select bank0
 14003  0CFA  0839               	movf	?___ftadd,w
 14004  0CFB  00C6               	movwf	___fttol@f1
 14005  0CFC  083A               	movf	?___ftadd+1,w
 14006  0CFD  00C7               	movwf	___fttol@f1+1
 14007  0CFE  083B               	movf	?___ftadd+2,w
 14008  0CFF  00C8               	movwf	___fttol@f1+2
 14009  0D00  3187  272B         	fcall	___fttol
 14010  0D02  0020               	movlb	0	; select bank0
 14011  0D03  0846               	movf	?___fttol,w
 14012  0D04  0008               	return
 14013  0D05                     __end_of_getDimmerLights_ValueToPercent:	
 14014                           
 14015                           	psect	text103
 14016  0C3B                     __ptext103:	
 14017 ;; *************** function _getDimmerLights_PercentToValue *****************
 14018 ;; Defined at:
 14019 ;;		line 1301 in file "../src/Dimmer_B1.c"
 14020 ;; Parameters:    Size  Location     Type
 14021 ;;  value           1    wreg     unsigned char 
 14022 ;; Auto vars:     Size  Location     Type
 14023 ;;  value           1   54[BANK0 ] unsigned char 
 14024 ;;  i               3   55[BANK0 ] float 
 14025 ;; Return value:  Size  Location     Type
 14026 ;;                  1    wreg      unsigned char 
 14027 ;; Registers used:
 14028 ;;		wreg, status,2, status,0, pclath, cstack
 14029 ;; Tracked objects:
 14030 ;;		On entry : 0/0
 14031 ;;		On exit  : 0/0
 14032 ;;		Unchanged: 0/0
 14033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14035 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14036 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14037 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;Total ram usage:        6 bytes
 14039 ;; Hardware stack levels used:    1
 14040 ;; Hardware stack levels required when called:    5
 14041 ;; This function calls:
 14042 ;;		___awtoft
 14043 ;;		___ftadd
 14044 ;;		___ftdiv
 14045 ;;		___ftmul
 14046 ;;		___ftneg
 14047 ;;		___fttol
 14048 ;; This function is called by:
 14049 ;;		_DimmerIntr_Initialization
 14050 ;;		_setDimmerLights_OnOff
 14051 ;;		_setRFSW_AdjControl
 14052 ;;		_DimmerLights_AssignationDimming
 14053 ;; This function uses a non-reentrant model
 14054 ;;
 14055                           
 14056                           
 14057                           ;psect for function _getDimmerLights_PercentToValue
 14058  0C3B                     _getDimmerLights_PercentToValue:	
 14059                           
 14060                           ;incstack = 0
 14061                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14062                           ;getDimmerLights_PercentToValue@value stored from wreg
 14063  0C3B  0020               	movlb	0	; select bank0
 14064  0C3C  00D6               	movwf	getDimmerLights_PercentToValue@value
 14065                           
 14066                           ;Dimmer_B1.c: 1309: float i = ((char)(87*0.55)) - ((char)(10*0.55));
 14067  0C3D  3000               	movlw	0
 14068  0C3E  00D7               	movwf	getDimmerLights_PercentToValue@i
 14069  0C3F  3028               	movlw	40
 14070  0C40  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14071  0C41  3042               	movlw	66
 14072  0C42  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14073                           
 14074                           ;Dimmer_B1.c: 1310: i /= 100;
 14075  0C43  3000               	movlw	0
 14076  0C44  00A6               	movwf	___ftdiv@f2
 14077  0C45  30C8               	movlw	200
 14078  0C46  00A7               	movwf	___ftdiv@f2+1
 14079  0C47  3042               	movlw	66
 14080  0C48  00A8               	movwf	___ftdiv@f2+2
 14081  0C49  0857               	movf	getDimmerLights_PercentToValue@i,w
 14082  0C4A  00A9               	movwf	___ftdiv@f1
 14083  0C4B  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14084  0C4C  00AA               	movwf	___ftdiv@f1+1
 14085  0C4D  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14086  0C4E  00AB               	movwf	___ftdiv@f1+2
 14087  0C4F  3184  24DF  318C   	fcall	___ftdiv
 14088  0C52  0020               	movlb	0	; select bank0
 14089  0C53  0826               	movf	?___ftdiv,w
 14090  0C54  00D7               	movwf	getDimmerLights_PercentToValue@i
 14091  0C55  0827               	movf	?___ftdiv+1,w
 14092  0C56  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14093  0C57  0828               	movf	?___ftdiv+2,w
 14094  0C58  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14095                           
 14096                           ;Dimmer_B1.c: 1312: return (char) (((char)(87*0.55)) - ((100 - value) * i));
 14097  0C59  0856               	movf	getDimmerLights_PercentToValue@value,w
 14098  0C5A  00D4               	movwf	??_getDimmerLights_PercentToValue
 14099  0C5B  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 14100  0C5C  09D4               	comf	??_getDimmerLights_PercentToValue,f
 14101  0C5D  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 14102  0C5E  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 14103  0C5F  1903               	skipnz
 14104  0C60  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 14105  0C61  0854               	movf	??_getDimmerLights_PercentToValue,w
 14106  0C62  3E64               	addlw	100
 14107  0C63  00A0               	movwf	___awtoft@c
 14108  0C64  3000               	movlw	0
 14109  0C65  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14110  0C66  00A1               	movwf	___awtoft@c+1
 14111  0C67  3194  24C6  318C   	fcall	___awtoft
 14112  0C6A  0020               	movlb	0	; select bank0
 14113  0C6B  0820               	movf	?___awtoft,w
 14114  0C6C  00A9               	movwf	___ftmul@f2
 14115  0C6D  0821               	movf	?___awtoft+1,w
 14116  0C6E  00AA               	movwf	___ftmul@f2+1
 14117  0C6F  0822               	movf	?___awtoft+2,w
 14118  0C70  00AB               	movwf	___ftmul@f2+2
 14119  0C71  0857               	movf	getDimmerLights_PercentToValue@i,w
 14120  0C72  00A6               	movwf	___ftmul@f1
 14121  0C73  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14122  0C74  00A7               	movwf	___ftmul@f1+1
 14123  0C75  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14124  0C76  00A8               	movwf	___ftmul@f1+2
 14125  0C77  3183  237E  318C   	fcall	___ftmul
 14126  0C7A  0020               	movlb	0	; select bank0
 14127  0C7B  0826               	movf	?___ftmul,w
 14128  0C7C  00B6               	movwf	___ftneg@f1
 14129  0C7D  0827               	movf	?___ftmul+1,w
 14130  0C7E  00B7               	movwf	___ftneg@f1+1
 14131  0C7F  0828               	movf	?___ftmul+2,w
 14132  0C80  00B8               	movwf	___ftneg@f1+2
 14133  0C81  3191  2133  318C   	fcall	___ftneg
 14134  0C84  0020               	movlb	0	; select bank0
 14135  0C85  0836               	movf	?___ftneg,w
 14136  0C86  00BC               	movwf	___ftadd@f2
 14137  0C87  0837               	movf	?___ftneg+1,w
 14138  0C88  00BD               	movwf	___ftadd@f2+1
 14139  0C89  0838               	movf	?___ftneg+2,w
 14140  0C8A  00BE               	movwf	___ftadd@f2+2
 14141  0C8B  3000               	movlw	0
 14142  0C8C  00B9               	movwf	___ftadd@f1
 14143  0C8D  303C               	movlw	60
 14144  0C8E  00BA               	movwf	___ftadd@f1+1
 14145  0C8F  3042               	movlw	66
 14146  0C90  00BB               	movwf	___ftadd@f1+2
 14147  0C91  3181  21BD  318C   	fcall	___ftadd
 14148  0C94  0020               	movlb	0	; select bank0
 14149  0C95  0839               	movf	?___ftadd,w
 14150  0C96  00C6               	movwf	___fttol@f1
 14151  0C97  083A               	movf	?___ftadd+1,w
 14152  0C98  00C7               	movwf	___fttol@f1+1
 14153  0C99  083B               	movf	?___ftadd+2,w
 14154  0C9A  00C8               	movwf	___fttol@f1+2
 14155  0C9B  3187  272B         	fcall	___fttol
 14156  0C9D  0020               	movlb	0	; select bank0
 14157  0C9E  0846               	movf	?___fttol,w
 14158  0C9F  0008               	return
 14159  0CA0                     __end_of_getDimmerLights_PercentToValue:	
 14160                           
 14161                           	psect	text104
 14162  072B                     __ptext104:	
 14163 ;; *************** function ___fttol *****************
 14164 ;; Defined at:
 14165 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14166 ;; Parameters:    Size  Location     Type
 14167 ;;  f1              3   38[BANK0 ] float 
 14168 ;; Auto vars:     Size  Location     Type
 14169 ;;  lval            4   47[BANK0 ] unsigned long 
 14170 ;;  exp1            1   51[BANK0 ] unsigned char 
 14171 ;;  sign1           1   46[BANK0 ] unsigned char 
 14172 ;; Return value:  Size  Location     Type
 14173 ;;                  4   38[BANK0 ] long 
 14174 ;; Registers used:
 14175 ;;		wreg, status,2, status,0
 14176 ;; Tracked objects:
 14177 ;;		On entry : 0/0
 14178 ;;		On exit  : 0/0
 14179 ;;		Unchanged: 0/0
 14180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14181 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14182 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14183 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14184 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14185 ;;Total ram usage:       14 bytes
 14186 ;; Hardware stack levels used:    1
 14187 ;; Hardware stack levels required when called:    3
 14188 ;; This function calls:
 14189 ;;		Nothing
 14190 ;; This function is called by:
 14191 ;;		_getDimmerLights_PercentToValue
 14192 ;;		_getDimmerLights_ValueToPercent
 14193 ;; This function uses a non-reentrant model
 14194 ;;
 14195                           
 14196                           
 14197                           ;psect for function ___fttol
 14198  072B                     ___fttol:	
 14199                           
 14200                           ;incstack = 0
 14201                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14202  072B  0020               	movlb	0	; select bank0
 14203  072C  0846               	movf	___fttol@f1,w
 14204  072D  00CA               	movwf	??___fttol
 14205  072E  0847               	movf	___fttol@f1+1,w
 14206  072F  00CB               	movwf	??___fttol+1
 14207  0730  0848               	movf	___fttol@f1+2,w
 14208  0731  00CC               	movwf	??___fttol+2
 14209  0732  1003               	clrc
 14210  0733  0D4B               	rlf	??___fttol+1,w
 14211  0734  0D4C               	rlf	??___fttol+2,w
 14212  0735  00CD               	movwf	??___fttol+3
 14213  0736  084D               	movf	??___fttol+3,w
 14214  0737  00D3               	movwf	___fttol@exp1
 14215  0738  08D3               	movf	___fttol@exp1,f
 14216  0739  1D03               	skipz
 14217  073A  2F44               	goto	l7821
 14218  073B  3000               	movlw	0
 14219  073C  00C9               	movwf	?___fttol+3
 14220  073D  3000               	movlw	0
 14221  073E  00C8               	movwf	?___fttol+2
 14222  073F  3000               	movlw	0
 14223  0740  00C7               	movwf	?___fttol+1
 14224  0741  3000               	movlw	0
 14225  0742  00C6               	movwf	?___fttol
 14226  0743  0008               	return
 14227  0744                     l7821:	
 14228  0744  0846               	movf	___fttol@f1,w
 14229  0745  00CA               	movwf	??___fttol
 14230  0746  0847               	movf	___fttol@f1+1,w
 14231  0747  00CB               	movwf	??___fttol+1
 14232  0748  0848               	movf	___fttol@f1+2,w
 14233  0749  00CC               	movwf	??___fttol+2
 14234  074A  3017               	movlw	23
 14235  074B                     u7775:	
 14236  074B  36CC               	lsrf	??___fttol+2,f
 14237  074C  0CCB               	rrf	??___fttol+1,f
 14238  074D  0CCA               	rrf	??___fttol,f
 14239  074E  0B89               	decfsz	9,f
 14240  074F  2F4B               	goto	u7775
 14241  0750  084A               	movf	??___fttol,w
 14242  0751  00CD               	movwf	??___fttol+3
 14243  0752  084D               	movf	??___fttol+3,w
 14244  0753  00CE               	movwf	___fttol@sign1
 14245  0754  17C7               	bsf	___fttol@f1+1,7
 14246  0755  30FF               	movlw	255
 14247  0756  05C6               	andwf	___fttol@f1,f
 14248  0757  30FF               	movlw	255
 14249  0758  05C7               	andwf	___fttol@f1+1,f
 14250  0759  3000               	movlw	0
 14251  075A  05C8               	andwf	___fttol@f1+2,f
 14252  075B  0846               	movf	___fttol@f1,w
 14253  075C  00CF               	movwf	___fttol@lval
 14254  075D  0847               	movf	___fttol@f1+1,w
 14255  075E  00D0               	movwf	___fttol@lval+1
 14256  075F  0848               	movf	___fttol@f1+2,w
 14257  0760  00D1               	movwf	___fttol@lval+2
 14258  0761  01D2               	clrf	___fttol@lval+3
 14259  0762  308E               	movlw	142
 14260  0763  02D3               	subwf	___fttol@exp1,f
 14261  0764  1FD3               	btfss	___fttol@exp1,7
 14262  0765  2F82               	goto	l7841
 14263  0766  0853               	movf	___fttol@exp1,w
 14264  0767  3A80               	xorlw	128
 14265  0768  3E8F               	addlw	143
 14266  0769  1803               	skipnc
 14267  076A  2F74               	goto	l7839
 14268  076B  3000               	movlw	0
 14269  076C  00C9               	movwf	?___fttol+3
 14270  076D  3000               	movlw	0
 14271  076E  00C8               	movwf	?___fttol+2
 14272  076F  3000               	movlw	0
 14273  0770  00C7               	movwf	?___fttol+1
 14274  0771  3000               	movlw	0
 14275  0772  00C6               	movwf	?___fttol
 14276  0773  0008               	return
 14277  0774                     l7839:	
 14278  0774  3001               	movlw	1
 14279  0775                     u7805:	
 14280  0775  36D2               	lsrf	___fttol@lval+3,f
 14281  0776  0CD1               	rrf	___fttol@lval+2,f
 14282  0777  0CD0               	rrf	___fttol@lval+1,f
 14283  0778  0CCF               	rrf	___fttol@lval,f
 14284  0779  0B89               	decfsz	9,f
 14285  077A  2F75               	goto	u7805
 14286  077B  3001               	movlw	1
 14287  077C  00CA               	movwf	??___fttol
 14288  077D  084A               	movf	??___fttol,w
 14289  077E  07D3               	addwf	___fttol@exp1,f
 14290  077F  1903               	btfsc	3,2
 14291  0780  2F9B               	goto	l7851
 14292  0781  2F74               	goto	l7839
 14293  0782                     l7841:	
 14294  0782  3018               	movlw	24
 14295  0783  0253               	subwf	___fttol@exp1,w
 14296  0784  1C03               	skipc
 14297  0785  2F98               	goto	l7849
 14298  0786  3000               	movlw	0
 14299  0787  00C9               	movwf	?___fttol+3
 14300  0788  3000               	movlw	0
 14301  0789  00C8               	movwf	?___fttol+2
 14302  078A  3000               	movlw	0
 14303  078B  00C7               	movwf	?___fttol+1
 14304  078C  3000               	movlw	0
 14305  078D  00C6               	movwf	?___fttol
 14306  078E  0008               	return
 14307  078F                     l7847:	
 14308  078F  3001               	movlw	1
 14309  0790                     u7835:	
 14310  0790  35CF               	lslf	___fttol@lval,f
 14311  0791  0DD0               	rlf	___fttol@lval+1,f
 14312  0792  0DD1               	rlf	___fttol@lval+2,f
 14313  0793  0DD2               	rlf	___fttol@lval+3,f
 14314  0794  0B89               	decfsz	9,f
 14315  0795  2F90               	goto	u7835
 14316  0796  3001               	movlw	1
 14317  0797  02D3               	subwf	___fttol@exp1,f
 14318  0798                     l7849:	
 14319  0798  08D3               	movf	___fttol@exp1,f
 14320  0799  1D03               	skipz
 14321  079A  2F8F               	goto	l7847
 14322  079B                     l7851:	
 14323  079B  084E               	movf	___fttol@sign1,w
 14324  079C  1903               	btfsc	3,2
 14325  079D  2FA9               	goto	l7855
 14326  079E  09CF               	comf	___fttol@lval,f
 14327  079F  09D0               	comf	___fttol@lval+1,f
 14328  07A0  09D1               	comf	___fttol@lval+2,f
 14329  07A1  09D2               	comf	___fttol@lval+3,f
 14330  07A2  0ACF               	incf	___fttol@lval,f
 14331  07A3  1903               	skipnz
 14332  07A4  0AD0               	incf	___fttol@lval+1,f
 14333  07A5  1903               	skipnz
 14334  07A6  0AD1               	incf	___fttol@lval+2,f
 14335  07A7  1903               	skipnz
 14336  07A8  0AD2               	incf	___fttol@lval+3,f
 14337  07A9                     l7855:	
 14338  07A9  0852               	movf	___fttol@lval+3,w
 14339  07AA  00C9               	movwf	?___fttol+3
 14340  07AB  0851               	movf	___fttol@lval+2,w
 14341  07AC  00C8               	movwf	?___fttol+2
 14342  07AD  0850               	movf	___fttol@lval+1,w
 14343  07AE  00C7               	movwf	?___fttol+1
 14344  07AF  084F               	movf	___fttol@lval,w
 14345  07B0  00C6               	movwf	?___fttol
 14346  07B1  0008               	return
 14347  07B2                     __end_of___fttol:	
 14348                           
 14349                           	psect	text105
 14350  1133                     __ptext105:	
 14351 ;; *************** function ___ftneg *****************
 14352 ;; Defined at:
 14353 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 14354 ;; Parameters:    Size  Location     Type
 14355 ;;  f1              3   22[BANK0 ] float 
 14356 ;; Auto vars:     Size  Location     Type
 14357 ;;		None
 14358 ;; Return value:  Size  Location     Type
 14359 ;;                  3   22[BANK0 ] float 
 14360 ;; Registers used:
 14361 ;;		wreg
 14362 ;; Tracked objects:
 14363 ;;		On entry : 0/0
 14364 ;;		On exit  : 0/0
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14367 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;Total ram usage:        3 bytes
 14372 ;; Hardware stack levels used:    1
 14373 ;; Hardware stack levels required when called:    3
 14374 ;; This function calls:
 14375 ;;		Nothing
 14376 ;; This function is called by:
 14377 ;;		_getDimmerLights_PercentToValue
 14378 ;;		_getDimmerLights_ValueToPercent
 14379 ;; This function uses a non-reentrant model
 14380 ;;
 14381                           
 14382                           
 14383                           ;psect for function ___ftneg
 14384  1133                     ___ftneg:	
 14385                           
 14386                           ;incstack = 0
 14387                           ; Regs used in ___ftneg: [wreg]
 14388  1133  0020               	movlb	0	; select bank0
 14389  1134  0838               	movf	___ftneg@f1+2,w
 14390  1135  0437               	iorwf	___ftneg@f1+1,w
 14391  1136  0436               	iorwf	___ftneg@f1,w
 14392  1137  1903               	skipnz
 14393  1138  0008               	return
 14394  1139  3080               	movlw	128
 14395  113A  06B8               	xorwf	___ftneg@f1+2,f
 14396  113B  0008               	return
 14397  113C                     __end_of___ftneg:	
 14398                           
 14399                           	psect	text106
 14400  037E                     __ptext106:	
 14401 ;; *************** function ___ftmul *****************
 14402 ;; Defined at:
 14403 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14404 ;; Parameters:    Size  Location     Type
 14405 ;;  f1              3    6[BANK0 ] float 
 14406 ;;  f2              3    9[BANK0 ] float 
 14407 ;; Auto vars:     Size  Location     Type
 14408 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 14409 ;;  sign            1   21[BANK0 ] unsigned char 
 14410 ;;  cntr            1   20[BANK0 ] unsigned char 
 14411 ;;  exp             1   16[BANK0 ] unsigned char 
 14412 ;; Return value:  Size  Location     Type
 14413 ;;                  3    6[BANK0 ] float 
 14414 ;; Registers used:
 14415 ;;		wreg, status,2, status,0, pclath, cstack
 14416 ;; Tracked objects:
 14417 ;;		On entry : 0/0
 14418 ;;		On exit  : 0/0
 14419 ;;		Unchanged: 0/0
 14420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14421 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14422 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14423 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14424 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14425 ;;Total ram usage:       16 bytes
 14426 ;; Hardware stack levels used:    1
 14427 ;; Hardware stack levels required when called:    4
 14428 ;; This function calls:
 14429 ;;		___ftpack
 14430 ;; This function is called by:
 14431 ;;		_getDimmerLights_PercentToValue
 14432 ;; This function uses a non-reentrant model
 14433 ;;
 14434                           
 14435                           
 14436                           ;psect for function ___ftmul
 14437  037E                     ___ftmul:	
 14438                           
 14439                           ;incstack = 0
 14440                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14441  037E  0020               	movlb	0	; select bank0
 14442  037F  0826               	movf	___ftmul@f1,w
 14443  0380  00AC               	movwf	??___ftmul
 14444  0381  0827               	movf	___ftmul@f1+1,w
 14445  0382  00AD               	movwf	??___ftmul+1
 14446  0383  0828               	movf	___ftmul@f1+2,w
 14447  0384  00AE               	movwf	??___ftmul+2
 14448  0385  1003               	clrc
 14449  0386  0D2D               	rlf	??___ftmul+1,w
 14450  0387  0D2E               	rlf	??___ftmul+2,w
 14451  0388  00AF               	movwf	??___ftmul+3
 14452  0389  082F               	movf	??___ftmul+3,w
 14453  038A  00B0               	movwf	___ftmul@exp
 14454  038B  08B0               	movf	___ftmul@exp,f
 14455  038C  1D03               	skipz
 14456  038D  2B95               	goto	l7763
 14457  038E  3000               	movlw	0
 14458  038F  00A6               	movwf	?___ftmul
 14459  0390  3000               	movlw	0
 14460  0391  00A7               	movwf	?___ftmul+1
 14461  0392  3000               	movlw	0
 14462  0393  00A8               	movwf	?___ftmul+2
 14463  0394  0008               	return
 14464  0395                     l7763:	
 14465  0395  0829               	movf	___ftmul@f2,w
 14466  0396  00AC               	movwf	??___ftmul
 14467  0397  082A               	movf	___ftmul@f2+1,w
 14468  0398  00AD               	movwf	??___ftmul+1
 14469  0399  082B               	movf	___ftmul@f2+2,w
 14470  039A  00AE               	movwf	??___ftmul+2
 14471  039B  1003               	clrc
 14472  039C  0D2D               	rlf	??___ftmul+1,w
 14473  039D  0D2E               	rlf	??___ftmul+2,w
 14474  039E  00AF               	movwf	??___ftmul+3
 14475  039F  082F               	movf	??___ftmul+3,w
 14476  03A0  00B5               	movwf	___ftmul@sign
 14477  03A1  08B5               	movf	___ftmul@sign,f
 14478  03A2  1D03               	skipz
 14479  03A3  2BAB               	goto	l7769
 14480  03A4  3000               	movlw	0
 14481  03A5  00A6               	movwf	?___ftmul
 14482  03A6  3000               	movlw	0
 14483  03A7  00A7               	movwf	?___ftmul+1
 14484  03A8  3000               	movlw	0
 14485  03A9  00A8               	movwf	?___ftmul+2
 14486  03AA  0008               	return
 14487  03AB                     l7769:	
 14488  03AB  0835               	movf	___ftmul@sign,w
 14489  03AC  3E7B               	addlw	123
 14490  03AD  00AC               	movwf	??___ftmul
 14491  03AE  082C               	movf	??___ftmul,w
 14492  03AF  07B0               	addwf	___ftmul@exp,f
 14493  03B0  0826               	movf	___ftmul@f1,w
 14494  03B1  00AC               	movwf	??___ftmul
 14495  03B2  0827               	movf	___ftmul@f1+1,w
 14496  03B3  00AD               	movwf	??___ftmul+1
 14497  03B4  0828               	movf	___ftmul@f1+2,w
 14498  03B5  00AE               	movwf	??___ftmul+2
 14499  03B6  3010               	movlw	16
 14500  03B7                     u7655:	
 14501  03B7  36AE               	lsrf	??___ftmul+2,f
 14502  03B8  0CAD               	rrf	??___ftmul+1,f
 14503  03B9  0CAC               	rrf	??___ftmul,f
 14504  03BA  0B89               	decfsz	9,f
 14505  03BB  2BB7               	goto	u7655
 14506  03BC  082C               	movf	??___ftmul,w
 14507  03BD  00AF               	movwf	??___ftmul+3
 14508  03BE  082F               	movf	??___ftmul+3,w
 14509  03BF  00B5               	movwf	___ftmul@sign
 14510  03C0  0829               	movf	___ftmul@f2,w
 14511  03C1  00AC               	movwf	??___ftmul
 14512  03C2  082A               	movf	___ftmul@f2+1,w
 14513  03C3  00AD               	movwf	??___ftmul+1
 14514  03C4  082B               	movf	___ftmul@f2+2,w
 14515  03C5  00AE               	movwf	??___ftmul+2
 14516  03C6  3010               	movlw	16
 14517  03C7                     u7665:	
 14518  03C7  36AE               	lsrf	??___ftmul+2,f
 14519  03C8  0CAD               	rrf	??___ftmul+1,f
 14520  03C9  0CAC               	rrf	??___ftmul,f
 14521  03CA  0B89               	decfsz	9,f
 14522  03CB  2BC7               	goto	u7665
 14523  03CC  082C               	movf	??___ftmul,w
 14524  03CD  00AF               	movwf	??___ftmul+3
 14525  03CE  082F               	movf	??___ftmul+3,w
 14526  03CF  06B5               	xorwf	___ftmul@sign,f
 14527  03D0  3080               	movlw	128
 14528  03D1  00AC               	movwf	??___ftmul
 14529  03D2  082C               	movf	??___ftmul,w
 14530  03D3  05B5               	andwf	___ftmul@sign,f
 14531  03D4  17A7               	bsf	___ftmul@f1+1,7
 14532  03D5  17AA               	bsf	___ftmul@f2+1,7
 14533  03D6  30FF               	movlw	255
 14534  03D7  05A9               	andwf	___ftmul@f2,f
 14535  03D8  30FF               	movlw	255
 14536  03D9  05AA               	andwf	___ftmul@f2+1,f
 14537  03DA  3000               	movlw	0
 14538  03DB  05AB               	andwf	___ftmul@f2+2,f
 14539  03DC  3000               	movlw	0
 14540  03DD  00B1               	movwf	___ftmul@f3_as_product
 14541  03DE  3000               	movlw	0
 14542  03DF  00B2               	movwf	___ftmul@f3_as_product+1
 14543  03E0  3000               	movlw	0
 14544  03E1  00B3               	movwf	___ftmul@f3_as_product+2
 14545  03E2  3007               	movlw	7
 14546  03E3  00AC               	movwf	??___ftmul
 14547  03E4  082C               	movf	??___ftmul,w
 14548  03E5  00B4               	movwf	___ftmul@cntr
 14549  03E6                     l7781:	
 14550  03E6  1C26               	btfss	___ftmul@f1,0
 14551  03E7  2BEE               	goto	l7785
 14552  03E8  0829               	movf	___ftmul@f2,w
 14553  03E9  07B1               	addwf	___ftmul@f3_as_product,f
 14554  03EA  082A               	movf	___ftmul@f2+1,w
 14555  03EB  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 14556  03EC  082B               	movf	___ftmul@f2+2,w
 14557  03ED  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 14558  03EE                     l7785:	
 14559  03EE  3001               	movlw	1
 14560  03EF                     u7685:	
 14561  03EF  36A8               	lsrf	___ftmul@f1+2,f
 14562  03F0  0CA7               	rrf	___ftmul@f1+1,f
 14563  03F1  0CA6               	rrf	___ftmul@f1,f
 14564  03F2  0B89               	decfsz	9,f
 14565  03F3  2BEF               	goto	u7685
 14566  03F4  3001               	movlw	1
 14567  03F5                     u7695:	
 14568  03F5  35A9               	lslf	___ftmul@f2,f
 14569  03F6  0DAA               	rlf	___ftmul@f2+1,f
 14570  03F7  0DAB               	rlf	___ftmul@f2+2,f
 14571  03F8  0B89               	decfsz	9,f
 14572  03F9  2BF5               	goto	u7695
 14573  03FA  3001               	movlw	1
 14574  03FB  02B4               	subwf	___ftmul@cntr,f
 14575  03FC  1D03               	btfss	3,2
 14576  03FD  2BE6               	goto	l7781
 14577  03FE  3009               	movlw	9
 14578  03FF  00AC               	movwf	??___ftmul
 14579  0400  082C               	movf	??___ftmul,w
 14580  0401  00B4               	movwf	___ftmul@cntr
 14581  0402                     l7793:	
 14582  0402  1C26               	btfss	___ftmul@f1,0
 14583  0403  2C0A               	goto	l7797
 14584  0404  0829               	movf	___ftmul@f2,w
 14585  0405  07B1               	addwf	___ftmul@f3_as_product,f
 14586  0406  082A               	movf	___ftmul@f2+1,w
 14587  0407  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 14588  0408  082B               	movf	___ftmul@f2+2,w
 14589  0409  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 14590  040A                     l7797:	
 14591  040A  3001               	movlw	1
 14592  040B                     u7725:	
 14593  040B  36A8               	lsrf	___ftmul@f1+2,f
 14594  040C  0CA7               	rrf	___ftmul@f1+1,f
 14595  040D  0CA6               	rrf	___ftmul@f1,f
 14596  040E  0B89               	decfsz	9,f
 14597  040F  2C0B               	goto	u7725
 14598  0410  3001               	movlw	1
 14599  0411                     u7735:	
 14600  0411  36B3               	lsrf	___ftmul@f3_as_product+2,f
 14601  0412  0CB2               	rrf	___ftmul@f3_as_product+1,f
 14602  0413  0CB1               	rrf	___ftmul@f3_as_product,f
 14603  0414  0B89               	decfsz	9,f
 14604  0415  2C11               	goto	u7735
 14605  0416  3001               	movlw	1
 14606  0417  02B4               	subwf	___ftmul@cntr,f
 14607  0418  1D03               	btfss	3,2
 14608  0419  2C02               	goto	l7793
 14609  041A  0831               	movf	___ftmul@f3_as_product,w
 14610  041B  00F2               	movwf	___ftpack@arg
 14611  041C  0832               	movf	___ftmul@f3_as_product+1,w
 14612  041D  00F3               	movwf	___ftpack@arg+1
 14613  041E  0833               	movf	___ftmul@f3_as_product+2,w
 14614  041F  00F4               	movwf	___ftpack@arg+2
 14615  0420  0830               	movf	___ftmul@exp,w
 14616  0421  00AC               	movwf	??___ftmul
 14617  0422  082C               	movf	??___ftmul,w
 14618  0423  00F5               	movwf	___ftpack@exp
 14619  0424  0835               	movf	___ftmul@sign,w
 14620  0425  00AD               	movwf	??___ftmul+1
 14621  0426  082D               	movf	??___ftmul+1,w
 14622  0427  00F6               	movwf	___ftpack@sign
 14623  0428  318B  237B         	fcall	___ftpack
 14624  042A  0872               	movf	?___ftpack,w
 14625  042B  0020               	movlb	0	; select bank0
 14626  042C  00A6               	movwf	?___ftmul
 14627  042D  0873               	movf	?___ftpack+1,w
 14628  042E  00A7               	movwf	?___ftmul+1
 14629  042F  0874               	movf	?___ftpack+2,w
 14630  0430  00A8               	movwf	?___ftmul+2
 14631  0431  0008               	return
 14632  0432                     __end_of___ftmul:	
 14633                           
 14634                           	psect	text107
 14635  04DF                     __ptext107:	
 14636 ;; *************** function ___ftdiv *****************
 14637 ;; Defined at:
 14638 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14639 ;; Parameters:    Size  Location     Type
 14640 ;;  f2              3    6[BANK0 ] float 
 14641 ;;  f1              3    9[BANK0 ] float 
 14642 ;; Auto vars:     Size  Location     Type
 14643 ;;  f3              3   17[BANK0 ] float 
 14644 ;;  sign            1   21[BANK0 ] unsigned char 
 14645 ;;  exp             1   20[BANK0 ] unsigned char 
 14646 ;;  cntr            1   16[BANK0 ] unsigned char 
 14647 ;; Return value:  Size  Location     Type
 14648 ;;                  3    6[BANK0 ] float 
 14649 ;; Registers used:
 14650 ;;		wreg, status,2, status,0, pclath, cstack
 14651 ;; Tracked objects:
 14652 ;;		On entry : 0/0
 14653 ;;		On exit  : 0/0
 14654 ;;		Unchanged: 0/0
 14655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14656 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14657 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14658 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14659 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14660 ;;Total ram usage:       16 bytes
 14661 ;; Hardware stack levels used:    1
 14662 ;; Hardware stack levels required when called:    4
 14663 ;; This function calls:
 14664 ;;		___ftpack
 14665 ;; This function is called by:
 14666 ;;		_getDimmerLights_PercentToValue
 14667 ;;		_getDimmerLights_ValueToPercent
 14668 ;; This function uses a non-reentrant model
 14669 ;;
 14670                           
 14671                           
 14672                           ;psect for function ___ftdiv
 14673  04DF                     ___ftdiv:	
 14674                           
 14675                           ;incstack = 0
 14676                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14677  04DF  0020               	movlb	0	; select bank0
 14678  04E0  0829               	movf	___ftdiv@f1,w
 14679  04E1  00AC               	movwf	??___ftdiv
 14680  04E2  082A               	movf	___ftdiv@f1+1,w
 14681  04E3  00AD               	movwf	??___ftdiv+1
 14682  04E4  082B               	movf	___ftdiv@f1+2,w
 14683  04E5  00AE               	movwf	??___ftdiv+2
 14684  04E6  1003               	clrc
 14685  04E7  0D2D               	rlf	??___ftdiv+1,w
 14686  04E8  0D2E               	rlf	??___ftdiv+2,w
 14687  04E9  00AF               	movwf	??___ftdiv+3
 14688  04EA  082F               	movf	??___ftdiv+3,w
 14689  04EB  00B4               	movwf	___ftdiv@exp
 14690  04EC  08B4               	movf	___ftdiv@exp,f
 14691  04ED  1D03               	skipz
 14692  04EE  2CF6               	goto	l7721
 14693  04EF  3000               	movlw	0
 14694  04F0  00A6               	movwf	?___ftdiv
 14695  04F1  3000               	movlw	0
 14696  04F2  00A7               	movwf	?___ftdiv+1
 14697  04F3  3000               	movlw	0
 14698  04F4  00A8               	movwf	?___ftdiv+2
 14699  04F5  0008               	return
 14700  04F6                     l7721:	
 14701  04F6  0826               	movf	___ftdiv@f2,w
 14702  04F7  00AC               	movwf	??___ftdiv
 14703  04F8  0827               	movf	___ftdiv@f2+1,w
 14704  04F9  00AD               	movwf	??___ftdiv+1
 14705  04FA  0828               	movf	___ftdiv@f2+2,w
 14706  04FB  00AE               	movwf	??___ftdiv+2
 14707  04FC  1003               	clrc
 14708  04FD  0D2D               	rlf	??___ftdiv+1,w
 14709  04FE  0D2E               	rlf	??___ftdiv+2,w
 14710  04FF  00AF               	movwf	??___ftdiv+3
 14711  0500  082F               	movf	??___ftdiv+3,w
 14712  0501  00B5               	movwf	___ftdiv@sign
 14713  0502  08B5               	movf	___ftdiv@sign,f
 14714  0503  1D03               	skipz
 14715  0504  2D0C               	goto	l7727
 14716  0505  3000               	movlw	0
 14717  0506  00A6               	movwf	?___ftdiv
 14718  0507  3000               	movlw	0
 14719  0508  00A7               	movwf	?___ftdiv+1
 14720  0509  3000               	movlw	0
 14721  050A  00A8               	movwf	?___ftdiv+2
 14722  050B  0008               	return
 14723  050C                     l7727:	
 14724  050C  3000               	movlw	0
 14725  050D  00B1               	movwf	___ftdiv@f3
 14726  050E  3000               	movlw	0
 14727  050F  00B2               	movwf	___ftdiv@f3+1
 14728  0510  3000               	movlw	0
 14729  0511  00B3               	movwf	___ftdiv@f3+2
 14730  0512  3089               	movlw	137
 14731  0513  0735               	addwf	___ftdiv@sign,w
 14732  0514  00AC               	movwf	??___ftdiv
 14733  0515  082C               	movf	??___ftdiv,w
 14734  0516  02B4               	subwf	___ftdiv@exp,f
 14735  0517  0829               	movf	___ftdiv@f1,w
 14736  0518  00AC               	movwf	??___ftdiv
 14737  0519  082A               	movf	___ftdiv@f1+1,w
 14738  051A  00AD               	movwf	??___ftdiv+1
 14739  051B  082B               	movf	___ftdiv@f1+2,w
 14740  051C  00AE               	movwf	??___ftdiv+2
 14741  051D  3010               	movlw	16
 14742  051E                     u7575:	
 14743  051E  36AE               	lsrf	??___ftdiv+2,f
 14744  051F  0CAD               	rrf	??___ftdiv+1,f
 14745  0520  0CAC               	rrf	??___ftdiv,f
 14746  0521  0B89               	decfsz	9,f
 14747  0522  2D1E               	goto	u7575
 14748  0523  082C               	movf	??___ftdiv,w
 14749  0524  00AF               	movwf	??___ftdiv+3
 14750  0525  082F               	movf	??___ftdiv+3,w
 14751  0526  00B5               	movwf	___ftdiv@sign
 14752  0527  0826               	movf	___ftdiv@f2,w
 14753  0528  00AC               	movwf	??___ftdiv
 14754  0529  0827               	movf	___ftdiv@f2+1,w
 14755  052A  00AD               	movwf	??___ftdiv+1
 14756  052B  0828               	movf	___ftdiv@f2+2,w
 14757  052C  00AE               	movwf	??___ftdiv+2
 14758  052D  3010               	movlw	16
 14759  052E                     u7585:	
 14760  052E  36AE               	lsrf	??___ftdiv+2,f
 14761  052F  0CAD               	rrf	??___ftdiv+1,f
 14762  0530  0CAC               	rrf	??___ftdiv,f
 14763  0531  0B89               	decfsz	9,f
 14764  0532  2D2E               	goto	u7585
 14765  0533  082C               	movf	??___ftdiv,w
 14766  0534  00AF               	movwf	??___ftdiv+3
 14767  0535  082F               	movf	??___ftdiv+3,w
 14768  0536  06B5               	xorwf	___ftdiv@sign,f
 14769  0537  3080               	movlw	128
 14770  0538  00AC               	movwf	??___ftdiv
 14771  0539  082C               	movf	??___ftdiv,w
 14772  053A  05B5               	andwf	___ftdiv@sign,f
 14773  053B  17AA               	bsf	___ftdiv@f1+1,7
 14774  053C  30FF               	movlw	255
 14775  053D  05A9               	andwf	___ftdiv@f1,f
 14776  053E  30FF               	movlw	255
 14777  053F  05AA               	andwf	___ftdiv@f1+1,f
 14778  0540  3000               	movlw	0
 14779  0541  05AB               	andwf	___ftdiv@f1+2,f
 14780  0542  17A7               	bsf	___ftdiv@f2+1,7
 14781  0543  30FF               	movlw	255
 14782  0544  05A6               	andwf	___ftdiv@f2,f
 14783  0545  30FF               	movlw	255
 14784  0546  05A7               	andwf	___ftdiv@f2+1,f
 14785  0547  3000               	movlw	0
 14786  0548  05A8               	andwf	___ftdiv@f2+2,f
 14787  0549  3018               	movlw	24
 14788  054A  00AC               	movwf	??___ftdiv
 14789  054B  082C               	movf	??___ftdiv,w
 14790  054C  00B0               	movwf	___ftdiv@cntr
 14791  054D                     l7741:	
 14792  054D  3001               	movlw	1
 14793  054E                     u7595:	
 14794  054E  35B1               	lslf	___ftdiv@f3,f
 14795  054F  0DB2               	rlf	___ftdiv@f3+1,f
 14796  0550  0DB3               	rlf	___ftdiv@f3+2,f
 14797  0551  0B89               	decfsz	9,f
 14798  0552  2D4E               	goto	u7595
 14799  0553  0828               	movf	___ftdiv@f2+2,w
 14800  0554  022B               	subwf	___ftdiv@f1+2,w
 14801  0555  1D03               	skipz
 14802  0556  2D5D               	goto	u7605
 14803  0557  0827               	movf	___ftdiv@f2+1,w
 14804  0558  022A               	subwf	___ftdiv@f1+1,w
 14805  0559  1D03               	skipz
 14806  055A  2D5D               	goto	u7605
 14807  055B  0826               	movf	___ftdiv@f2,w
 14808  055C  0229               	subwf	___ftdiv@f1,w
 14809  055D                     u7605:	
 14810  055D  1C03               	skipc
 14811  055E  2D66               	goto	l7749
 14812  055F  0826               	movf	___ftdiv@f2,w
 14813  0560  02A9               	subwf	___ftdiv@f1,f
 14814  0561  0827               	movf	___ftdiv@f2+1,w
 14815  0562  3BAA               	subwfb	___ftdiv@f1+1,f
 14816  0563  0828               	movf	___ftdiv@f2+2,w
 14817  0564  3BAB               	subwfb	___ftdiv@f1+2,f
 14818  0565  1431               	bsf	___ftdiv@f3,0
 14819  0566                     l7749:	
 14820  0566  3001               	movlw	1
 14821  0567                     u7615:	
 14822  0567  35A9               	lslf	___ftdiv@f1,f
 14823  0568  0DAA               	rlf	___ftdiv@f1+1,f
 14824  0569  0DAB               	rlf	___ftdiv@f1+2,f
 14825  056A  0B89               	decfsz	9,f
 14826  056B  2D67               	goto	u7615
 14827  056C  3001               	movlw	1
 14828  056D  02B0               	subwf	___ftdiv@cntr,f
 14829  056E  1D03               	btfss	3,2
 14830  056F  2D4D               	goto	l7741
 14831  0570  0831               	movf	___ftdiv@f3,w
 14832  0571  00F2               	movwf	___ftpack@arg
 14833  0572  0832               	movf	___ftdiv@f3+1,w
 14834  0573  00F3               	movwf	___ftpack@arg+1
 14835  0574  0833               	movf	___ftdiv@f3+2,w
 14836  0575  00F4               	movwf	___ftpack@arg+2
 14837  0576  0834               	movf	___ftdiv@exp,w
 14838  0577  00AC               	movwf	??___ftdiv
 14839  0578  082C               	movf	??___ftdiv,w
 14840  0579  00F5               	movwf	___ftpack@exp
 14841  057A  0835               	movf	___ftdiv@sign,w
 14842  057B  00AD               	movwf	??___ftdiv+1
 14843  057C  082D               	movf	??___ftdiv+1,w
 14844  057D  00F6               	movwf	___ftpack@sign
 14845  057E  318B  237B         	fcall	___ftpack
 14846  0580  0872               	movf	?___ftpack,w
 14847  0581  0020               	movlb	0	; select bank0
 14848  0582  00A6               	movwf	?___ftdiv
 14849  0583  0873               	movf	?___ftpack+1,w
 14850  0584  00A7               	movwf	?___ftdiv+1
 14851  0585  0874               	movf	?___ftpack+2,w
 14852  0586  00A8               	movwf	?___ftdiv+2
 14853  0587  0008               	return
 14854  0588                     __end_of___ftdiv:	
 14855                           
 14856                           	psect	text108
 14857  01BD                     __ptext108:	
 14858 ;; *************** function ___ftadd *****************
 14859 ;; Defined at:
 14860 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14861 ;; Parameters:    Size  Location     Type
 14862 ;;  f1              3   25[BANK0 ] float 
 14863 ;;  f2              3   28[BANK0 ] float 
 14864 ;; Auto vars:     Size  Location     Type
 14865 ;;  exp1            1   37[BANK0 ] unsigned char 
 14866 ;;  exp2            1   36[BANK0 ] unsigned char 
 14867 ;;  sign            1   35[BANK0 ] unsigned char 
 14868 ;; Return value:  Size  Location     Type
 14869 ;;                  3   25[BANK0 ] float 
 14870 ;; Registers used:
 14871 ;;		wreg, status,2, status,0, pclath, cstack
 14872 ;; Tracked objects:
 14873 ;;		On entry : 0/0
 14874 ;;		On exit  : 0/0
 14875 ;;		Unchanged: 0/0
 14876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14877 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14878 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14879 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14880 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14881 ;;Total ram usage:       13 bytes
 14882 ;; Hardware stack levels used:    1
 14883 ;; Hardware stack levels required when called:    4
 14884 ;; This function calls:
 14885 ;;		___ftpack
 14886 ;; This function is called by:
 14887 ;;		_getDimmerLights_PercentToValue
 14888 ;;		_getDimmerLights_ValueToPercent
 14889 ;; This function uses a non-reentrant model
 14890 ;;
 14891                           
 14892                           
 14893                           ;psect for function ___ftadd
 14894  01BD                     ___ftadd:	
 14895                           
 14896                           ;incstack = 0
 14897                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14898  01BD  0020               	movlb	0	; select bank0
 14899  01BE  0839               	movf	___ftadd@f1,w
 14900  01BF  00BF               	movwf	??___ftadd
 14901  01C0  083A               	movf	___ftadd@f1+1,w
 14902  01C1  00C0               	movwf	??___ftadd+1
 14903  01C2  083B               	movf	___ftadd@f1+2,w
 14904  01C3  00C1               	movwf	??___ftadd+2
 14905  01C4  1003               	clrc
 14906  01C5  0D40               	rlf	??___ftadd+1,w
 14907  01C6  0D41               	rlf	??___ftadd+2,w
 14908  01C7  00C2               	movwf	??___ftadd+3
 14909  01C8  0842               	movf	??___ftadd+3,w
 14910  01C9  00C5               	movwf	___ftadd@exp1
 14911  01CA  083C               	movf	___ftadd@f2,w
 14912  01CB  00BF               	movwf	??___ftadd
 14913  01CC  083D               	movf	___ftadd@f2+1,w
 14914  01CD  00C0               	movwf	??___ftadd+1
 14915  01CE  083E               	movf	___ftadd@f2+2,w
 14916  01CF  00C1               	movwf	??___ftadd+2
 14917  01D0  1003               	clrc
 14918  01D1  0D40               	rlf	??___ftadd+1,w
 14919  01D2  0D41               	rlf	??___ftadd+2,w
 14920  01D3  00C2               	movwf	??___ftadd+3
 14921  01D4  0842               	movf	??___ftadd+3,w
 14922  01D5  00C4               	movwf	___ftadd@exp2
 14923  01D6  0845               	movf	___ftadd@exp1,w
 14924  01D7  1903               	btfsc	3,2
 14925  01D8  29E5               	goto	l7651
 14926  01D9  0844               	movf	___ftadd@exp2,w
 14927  01DA  0245               	subwf	___ftadd@exp1,w
 14928  01DB  1803               	skipnc
 14929  01DC  29EC               	goto	l7655
 14930  01DD  0345               	decf	___ftadd@exp1,w
 14931  01DE  3AFF               	xorlw	255
 14932  01DF  0744               	addwf	___ftadd@exp2,w
 14933  01E0  00BF               	movwf	??___ftadd
 14934  01E1  3019               	movlw	25
 14935  01E2  023F               	subwf	??___ftadd,w
 14936  01E3  1C03               	skipc
 14937  01E4  29EC               	goto	l7655
 14938  01E5                     l7651:	
 14939  01E5  083C               	movf	___ftadd@f2,w
 14940  01E6  00B9               	movwf	?___ftadd
 14941  01E7  083D               	movf	___ftadd@f2+1,w
 14942  01E8  00BA               	movwf	?___ftadd+1
 14943  01E9  083E               	movf	___ftadd@f2+2,w
 14944  01EA  00BB               	movwf	?___ftadd+2
 14945  01EB  0008               	return
 14946  01EC                     l7655:	
 14947  01EC  0844               	movf	___ftadd@exp2,w
 14948  01ED  1903               	btfsc	3,2
 14949  01EE  0008               	return
 14950  01EF  0845               	movf	___ftadd@exp1,w
 14951  01F0  0244               	subwf	___ftadd@exp2,w
 14952  01F1  1803               	skipnc
 14953  01F2  29FB               	goto	l7661
 14954  01F3  0344               	decf	___ftadd@exp2,w
 14955  01F4  3AFF               	xorlw	255
 14956  01F5  0745               	addwf	___ftadd@exp1,w
 14957  01F6  00BF               	movwf	??___ftadd
 14958  01F7  3019               	movlw	25
 14959  01F8  023F               	subwf	??___ftadd,w
 14960  01F9  1803               	btfsc	3,0
 14961  01FA  0008               	return
 14962  01FB                     l7661:	
 14963  01FB  3006               	movlw	6
 14964  01FC  00BF               	movwf	??___ftadd
 14965  01FD  083F               	movf	??___ftadd,w
 14966  01FE  00C3               	movwf	___ftadd@sign
 14967  01FF  1BBB               	btfsc	___ftadd@f1+2,7
 14968  0200  17C3               	bsf	___ftadd@sign,7
 14969  0201  1BBE               	btfsc	___ftadd@f2+2,7
 14970  0202  1743               	bsf	___ftadd@sign,6
 14971  0203  17BA               	bsf	___ftadd@f1+1,7
 14972  0204  30FF               	movlw	255
 14973  0205  05B9               	andwf	___ftadd@f1,f
 14974  0206  30FF               	movlw	255
 14975  0207  05BA               	andwf	___ftadd@f1+1,f
 14976  0208  3000               	movlw	0
 14977  0209  05BB               	andwf	___ftadd@f1+2,f
 14978  020A  17BD               	bsf	___ftadd@f2+1,7
 14979  020B  30FF               	movlw	255
 14980  020C  05BC               	andwf	___ftadd@f2,f
 14981  020D  30FF               	movlw	255
 14982  020E  05BD               	andwf	___ftadd@f2+1,f
 14983  020F  3000               	movlw	0
 14984  0210  05BE               	andwf	___ftadd@f2+2,f
 14985  0211  0844               	movf	___ftadd@exp2,w
 14986  0212  0245               	subwf	___ftadd@exp1,w
 14987  0213  1803               	skipnc
 14988  0214  2A37               	goto	l7683
 14989  0215                     l7673:	
 14990  0215  3001               	movlw	1
 14991  0216                     u7415:	
 14992  0216  35BC               	lslf	___ftadd@f2,f
 14993  0217  0DBD               	rlf	___ftadd@f2+1,f
 14994  0218  0DBE               	rlf	___ftadd@f2+2,f
 14995  0219  0B89               	decfsz	9,f
 14996  021A  2A16               	goto	u7415
 14997  021B  3001               	movlw	1
 14998  021C  02C4               	subwf	___ftadd@exp2,f
 14999  021D  0844               	movf	___ftadd@exp2,w
 15000  021E  0645               	xorwf	___ftadd@exp1,w
 15001  021F  1903               	skipnz
 15002  0220  2A32               	goto	l7681
 15003  0221  3001               	movlw	1
 15004  0222  02C3               	subwf	___ftadd@sign,f
 15005  0223  0843               	movf	___ftadd@sign,w
 15006  0224  3907               	andlw	7
 15007  0225  1903               	btfsc	3,2
 15008  0226  2A32               	goto	l7681
 15009  0227  2A15               	goto	l7673
 15010  0228                     l7679:	
 15011  0228  3001               	movlw	1
 15012  0229                     u7445:	
 15013  0229  36BB               	lsrf	___ftadd@f1+2,f
 15014  022A  0CBA               	rrf	___ftadd@f1+1,f
 15015  022B  0CB9               	rrf	___ftadd@f1,f
 15016  022C  0B89               	decfsz	9,f
 15017  022D  2A29               	goto	u7445
 15018  022E  3001               	movlw	1
 15019  022F  00BF               	movwf	??___ftadd
 15020  0230  083F               	movf	??___ftadd,w
 15021  0231  07C5               	addwf	___ftadd@exp1,f
 15022  0232                     l7681:	
 15023  0232  0845               	movf	___ftadd@exp1,w
 15024  0233  0644               	xorwf	___ftadd@exp2,w
 15025  0234  1903               	btfsc	3,2
 15026  0235  2A5C               	goto	l2702
 15027  0236  2A28               	goto	l7679
 15028  0237                     l7683:	
 15029  0237  0845               	movf	___ftadd@exp1,w
 15030  0238  0244               	subwf	___ftadd@exp2,w
 15031  0239  1803               	skipnc
 15032  023A  2A5C               	goto	l2702
 15033  023B                     l7685:	
 15034  023B  3001               	movlw	1
 15035  023C                     u7475:	
 15036  023C  35B9               	lslf	___ftadd@f1,f
 15037  023D  0DBA               	rlf	___ftadd@f1+1,f
 15038  023E  0DBB               	rlf	___ftadd@f1+2,f
 15039  023F  0B89               	decfsz	9,f
 15040  0240  2A3C               	goto	u7475
 15041  0241  3001               	movlw	1
 15042  0242  02C5               	subwf	___ftadd@exp1,f
 15043  0243  0844               	movf	___ftadd@exp2,w
 15044  0244  0645               	xorwf	___ftadd@exp1,w
 15045  0245  1903               	skipnz
 15046  0246  2A58               	goto	l7693
 15047  0247  3001               	movlw	1
 15048  0248  02C3               	subwf	___ftadd@sign,f
 15049  0249  0843               	movf	___ftadd@sign,w
 15050  024A  3907               	andlw	7
 15051  024B  1903               	btfsc	3,2
 15052  024C  2A58               	goto	l7693
 15053  024D  2A3B               	goto	l7685
 15054  024E                     l7691:	
 15055  024E  3001               	movlw	1
 15056  024F                     u7505:	
 15057  024F  36BE               	lsrf	___ftadd@f2+2,f
 15058  0250  0CBD               	rrf	___ftadd@f2+1,f
 15059  0251  0CBC               	rrf	___ftadd@f2,f
 15060  0252  0B89               	decfsz	9,f
 15061  0253  2A4F               	goto	u7505
 15062  0254  3001               	movlw	1
 15063  0255  00BF               	movwf	??___ftadd
 15064  0256  083F               	movf	??___ftadd,w
 15065  0257  07C4               	addwf	___ftadd@exp2,f
 15066  0258                     l7693:	
 15067  0258  0845               	movf	___ftadd@exp1,w
 15068  0259  0644               	xorwf	___ftadd@exp2,w
 15069  025A  1D03               	skipz
 15070  025B  2A4E               	goto	l7691
 15071  025C                     l2702:	
 15072  025C  1FC3               	btfss	___ftadd@sign,7
 15073  025D  2A6E               	goto	l7697
 15074  025E  30FF               	movlw	255
 15075  025F  06B9               	xorwf	___ftadd@f1,f
 15076  0260  30FF               	movlw	255
 15077  0261  06BA               	xorwf	___ftadd@f1+1,f
 15078  0262  30FF               	movlw	255
 15079  0263  06BB               	xorwf	___ftadd@f1+2,f
 15080  0264  3001               	movlw	1
 15081  0265  07B9               	addwf	___ftadd@f1,f
 15082  0266  3000               	movlw	0
 15083  0267  1803               	skipnc
 15084  0268  3001               	movlw	1
 15085  0269  07BA               	addwf	___ftadd@f1+1,f
 15086  026A  3000               	movlw	0
 15087  026B  1803               	skipnc
 15088  026C  3001               	movlw	1
 15089  026D  07BB               	addwf	___ftadd@f1+2,f
 15090  026E                     l7697:	
 15091  026E  1F43               	btfss	___ftadd@sign,6
 15092  026F  2A80               	goto	l7701
 15093  0270  30FF               	movlw	255
 15094  0271  06BC               	xorwf	___ftadd@f2,f
 15095  0272  30FF               	movlw	255
 15096  0273  06BD               	xorwf	___ftadd@f2+1,f
 15097  0274  30FF               	movlw	255
 15098  0275  06BE               	xorwf	___ftadd@f2+2,f
 15099  0276  3001               	movlw	1
 15100  0277  07BC               	addwf	___ftadd@f2,f
 15101  0278  3000               	movlw	0
 15102  0279  1803               	skipnc
 15103  027A  3001               	movlw	1
 15104  027B  07BD               	addwf	___ftadd@f2+1,f
 15105  027C  3000               	movlw	0
 15106  027D  1803               	skipnc
 15107  027E  3001               	movlw	1
 15108  027F  07BE               	addwf	___ftadd@f2+2,f
 15109  0280                     l7701:	
 15110  0280  01C3               	clrf	___ftadd@sign
 15111  0281  0839               	movf	___ftadd@f1,w
 15112  0282  07BC               	addwf	___ftadd@f2,f
 15113  0283  083A               	movf	___ftadd@f1+1,w
 15114  0284  3DBD               	addwfc	___ftadd@f2+1,f
 15115  0285  083B               	movf	___ftadd@f1+2,w
 15116  0286  3DBE               	addwfc	___ftadd@f2+2,f
 15117  0287  1FBE               	btfss	___ftadd@f2+2,7
 15118  0288  2A9B               	goto	l7711
 15119  0289  30FF               	movlw	255
 15120  028A  06BC               	xorwf	___ftadd@f2,f
 15121  028B  30FF               	movlw	255
 15122  028C  06BD               	xorwf	___ftadd@f2+1,f
 15123  028D  30FF               	movlw	255
 15124  028E  06BE               	xorwf	___ftadd@f2+2,f
 15125  028F  3001               	movlw	1
 15126  0290  07BC               	addwf	___ftadd@f2,f
 15127  0291  3000               	movlw	0
 15128  0292  1803               	skipnc
 15129  0293  3001               	movlw	1
 15130  0294  07BD               	addwf	___ftadd@f2+1,f
 15131  0295  3000               	movlw	0
 15132  0296  1803               	skipnc
 15133  0297  3001               	movlw	1
 15134  0298  07BE               	addwf	___ftadd@f2+2,f
 15135  0299  01C3               	clrf	___ftadd@sign
 15136  029A  0AC3               	incf	___ftadd@sign,f
 15137  029B                     l7711:	
 15138  029B  083C               	movf	___ftadd@f2,w
 15139  029C  00F2               	movwf	___ftpack@arg
 15140  029D  083D               	movf	___ftadd@f2+1,w
 15141  029E  00F3               	movwf	___ftpack@arg+1
 15142  029F  083E               	movf	___ftadd@f2+2,w
 15143  02A0  00F4               	movwf	___ftpack@arg+2
 15144  02A1  0845               	movf	___ftadd@exp1,w
 15145  02A2  00BF               	movwf	??___ftadd
 15146  02A3  083F               	movf	??___ftadd,w
 15147  02A4  00F5               	movwf	___ftpack@exp
 15148  02A5  0843               	movf	___ftadd@sign,w
 15149  02A6  00C0               	movwf	??___ftadd+1
 15150  02A7  0840               	movf	??___ftadd+1,w
 15151  02A8  00F6               	movwf	___ftpack@sign
 15152  02A9  318B  237B         	fcall	___ftpack
 15153  02AB  0872               	movf	?___ftpack,w
 15154  02AC  0020               	movlb	0	; select bank0
 15155  02AD  00B9               	movwf	?___ftadd
 15156  02AE  0873               	movf	?___ftpack+1,w
 15157  02AF  00BA               	movwf	?___ftadd+1
 15158  02B0  0874               	movf	?___ftpack+2,w
 15159  02B1  00BB               	movwf	?___ftadd+2
 15160  02B2  0008               	return
 15161  02B3                     __end_of___ftadd:	
 15162                           
 15163                           	psect	text109
 15164  14C6                     __ptext109:	
 15165 ;; *************** function ___awtoft *****************
 15166 ;; Defined at:
 15167 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;  c               2    0[BANK0 ] int 
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;  sign            1    5[BANK0 ] unsigned char 
 15172 ;; Return value:  Size  Location     Type
 15173 ;;                  3    0[BANK0 ] float 
 15174 ;; Registers used:
 15175 ;;		wreg, status,2, status,0, pclath, cstack
 15176 ;; Tracked objects:
 15177 ;;		On entry : 0/0
 15178 ;;		On exit  : 0/0
 15179 ;;		Unchanged: 0/0
 15180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15181 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;Total ram usage:        6 bytes
 15186 ;; Hardware stack levels used:    1
 15187 ;; Hardware stack levels required when called:    4
 15188 ;; This function calls:
 15189 ;;		___ftpack
 15190 ;; This function is called by:
 15191 ;;		_getDimmerLights_PercentToValue
 15192 ;;		_getDimmerLights_ValueToPercent
 15193 ;; This function uses a non-reentrant model
 15194 ;;
 15195                           
 15196                           
 15197                           ;psect for function ___awtoft
 15198  14C6                     ___awtoft:	
 15199                           
 15200                           ;incstack = 0
 15201                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15202  14C6  0020               	movlb	0	; select bank0
 15203  14C7  01A5               	clrf	___awtoft@sign
 15204  14C8  1FA1               	btfss	___awtoft@c+1,7
 15205  14C9  2CD1               	goto	l7639
 15206  14CA  09A0               	comf	___awtoft@c,f
 15207  14CB  09A1               	comf	___awtoft@c+1,f
 15208  14CC  0AA0               	incf	___awtoft@c,f
 15209  14CD  1903               	skipnz
 15210  14CE  0AA1               	incf	___awtoft@c+1,f
 15211  14CF  01A5               	clrf	___awtoft@sign
 15212  14D0  0AA5               	incf	___awtoft@sign,f
 15213  14D1                     l7639:	
 15214  14D1  0820               	movf	___awtoft@c,w
 15215  14D2  00F2               	movwf	___ftpack@arg
 15216  14D3  0821               	movf	___awtoft@c+1,w
 15217  14D4  00F3               	movwf	___ftpack@arg+1
 15218  14D5  01F4               	clrf	___ftpack@arg+2
 15219  14D6  308E               	movlw	142
 15220  14D7  00A3               	movwf	??___awtoft
 15221  14D8  0823               	movf	??___awtoft,w
 15222  14D9  00F5               	movwf	___ftpack@exp
 15223  14DA  0825               	movf	___awtoft@sign,w
 15224  14DB  00A4               	movwf	??___awtoft+1
 15225  14DC  0824               	movf	??___awtoft+1,w
 15226  14DD  00F6               	movwf	___ftpack@sign
 15227  14DE  318B  237B         	fcall	___ftpack
 15228  14E0  0872               	movf	?___ftpack,w
 15229  14E1  0020               	movlb	0	; select bank0
 15230  14E2  00A0               	movwf	?___awtoft
 15231  14E3  0873               	movf	?___ftpack+1,w
 15232  14E4  00A1               	movwf	?___awtoft+1
 15233  14E5  0874               	movf	?___ftpack+2,w
 15234  14E6  00A2               	movwf	?___awtoft+2
 15235  14E7  0008               	return
 15236  14E8                     __end_of___awtoft:	
 15237                           
 15238                           	psect	text110
 15239  0B7B                     __ptext110:	
 15240 ;; *************** function ___ftpack *****************
 15241 ;; Defined at:
 15242 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15243 ;; Parameters:    Size  Location     Type
 15244 ;;  arg             3    2[COMMON] unsigned um
 15245 ;;  exp             1    5[COMMON] unsigned char 
 15246 ;;  sign            1    6[COMMON] unsigned char 
 15247 ;; Auto vars:     Size  Location     Type
 15248 ;;		None
 15249 ;; Return value:  Size  Location     Type
 15250 ;;                  3    2[COMMON] float 
 15251 ;; Registers used:
 15252 ;;		wreg, status,2, status,0
 15253 ;; Tracked objects:
 15254 ;;		On entry : 0/0
 15255 ;;		On exit  : 0/0
 15256 ;;		Unchanged: 0/0
 15257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15258 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15262 ;;Total ram usage:        8 bytes
 15263 ;; Hardware stack levels used:    1
 15264 ;; Hardware stack levels required when called:    3
 15265 ;; This function calls:
 15266 ;;		Nothing
 15267 ;; This function is called by:
 15268 ;;		___awtoft
 15269 ;;		___ftadd
 15270 ;;		___ftdiv
 15271 ;;		___ftmul
 15272 ;; This function uses a non-reentrant model
 15273 ;;
 15274                           
 15275                           
 15276                           ;psect for function ___ftpack
 15277  0B7B                     ___ftpack:	
 15278                           
 15279                           ;incstack = 0
 15280                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15281  0B7B  0875               	movf	___ftpack@exp,w
 15282  0B7C  1903               	btfsc	3,2
 15283  0B7D  2B83               	goto	l7497
 15284  0B7E  0874               	movf	___ftpack@arg+2,w
 15285  0B7F  0473               	iorwf	___ftpack@arg+1,w
 15286  0B80  0472               	iorwf	___ftpack@arg,w
 15287  0B81  1D03               	skipz
 15288  0B82  2B94               	goto	l7503
 15289  0B83                     l7497:	
 15290  0B83  3000               	movlw	0
 15291  0B84  00F2               	movwf	?___ftpack
 15292  0B85  3000               	movlw	0
 15293  0B86  00F3               	movwf	?___ftpack+1
 15294  0B87  3000               	movlw	0
 15295  0B88  00F4               	movwf	?___ftpack+2
 15296  0B89  0008               	return
 15297  0B8A                     l7501:	
 15298  0B8A  3001               	movlw	1
 15299  0B8B  00F7               	movwf	??___ftpack
 15300  0B8C  0877               	movf	??___ftpack,w
 15301  0B8D  07F5               	addwf	___ftpack@exp,f
 15302  0B8E  3001               	movlw	1
 15303  0B8F                     u7035:	
 15304  0B8F  36F4               	lsrf	___ftpack@arg+2,f
 15305  0B90  0CF3               	rrf	___ftpack@arg+1,f
 15306  0B91  0CF2               	rrf	___ftpack@arg,f
 15307  0B92  0B89               	decfsz	9,f
 15308  0B93  2B8F               	goto	u7035
 15309  0B94                     l7503:	
 15310  0B94  30FE               	movlw	254
 15311  0B95  0574               	andwf	___ftpack@arg+2,w
 15312  0B96  1903               	btfsc	3,2
 15313  0B97  2BAD               	goto	l2673
 15314  0B98  2B8A               	goto	l7501
 15315  0B99                     l7505:	
 15316  0B99  3001               	movlw	1
 15317  0B9A  00F7               	movwf	??___ftpack
 15318  0B9B  0877               	movf	??___ftpack,w
 15319  0B9C  07F5               	addwf	___ftpack@exp,f
 15320  0B9D  3001               	movlw	1
 15321  0B9E  07F2               	addwf	___ftpack@arg,f
 15322  0B9F  3000               	movlw	0
 15323  0BA0  1803               	skipnc
 15324  0BA1  3001               	movlw	1
 15325  0BA2  07F3               	addwf	___ftpack@arg+1,f
 15326  0BA3  3000               	movlw	0
 15327  0BA4  1803               	skipnc
 15328  0BA5  3001               	movlw	1
 15329  0BA6  07F4               	addwf	___ftpack@arg+2,f
 15330  0BA7  3001               	movlw	1
 15331  0BA8                     u7055:	
 15332  0BA8  36F4               	lsrf	___ftpack@arg+2,f
 15333  0BA9  0CF3               	rrf	___ftpack@arg+1,f
 15334  0BAA  0CF2               	rrf	___ftpack@arg,f
 15335  0BAB  0B89               	decfsz	9,f
 15336  0BAC  2BA8               	goto	u7055
 15337  0BAD                     l2673:	
 15338  0BAD  30FF               	movlw	255
 15339  0BAE  0574               	andwf	___ftpack@arg+2,w
 15340  0BAF  1903               	btfsc	3,2
 15341  0BB0  2BBA               	goto	l7513
 15342  0BB1  2B99               	goto	l7505
 15343  0BB2                     l7511:	
 15344  0BB2  3001               	movlw	1
 15345  0BB3  02F5               	subwf	___ftpack@exp,f
 15346  0BB4  3001               	movlw	1
 15347  0BB5                     u7075:	
 15348  0BB5  35F2               	lslf	___ftpack@arg,f
 15349  0BB6  0DF3               	rlf	___ftpack@arg+1,f
 15350  0BB7  0DF4               	rlf	___ftpack@arg+2,f
 15351  0BB8  0B89               	decfsz	9,f
 15352  0BB9  2BB5               	goto	u7075
 15353  0BBA                     l7513:	
 15354  0BBA  1FF3               	btfss	___ftpack@arg+1,7
 15355  0BBB  2BB2               	goto	l7511
 15356  0BBC  1875               	btfsc	___ftpack@exp,0
 15357  0BBD  2BC4               	goto	l2679
 15358  0BBE  30FF               	movlw	255
 15359  0BBF  05F2               	andwf	___ftpack@arg,f
 15360  0BC0  307F               	movlw	127
 15361  0BC1  05F3               	andwf	___ftpack@arg+1,f
 15362  0BC2  30FF               	movlw	255
 15363  0BC3  05F4               	andwf	___ftpack@arg+2,f
 15364  0BC4                     l2679:	
 15365  0BC4  1003               	clrc
 15366  0BC5  0CF5               	rrf	___ftpack@exp,f
 15367  0BC6  0875               	movf	___ftpack@exp,w
 15368  0BC7  00F7               	movwf	??___ftpack
 15369  0BC8  01F8               	clrf	??___ftpack+1
 15370  0BC9  01F9               	clrf	??___ftpack+2
 15371  0BCA  3010               	movlw	16
 15372  0BCB                     u7105:	
 15373  0BCB  35F7               	lslf	??___ftpack,f
 15374  0BCC  0DF8               	rlf	??___ftpack+1,f
 15375  0BCD  0DF9               	rlf	??___ftpack+2,f
 15376  0BCE  0B89               	decfsz	9,f
 15377  0BCF  2BCB               	goto	u7105
 15378  0BD0  0877               	movf	??___ftpack,w
 15379  0BD1  04F2               	iorwf	___ftpack@arg,f
 15380  0BD2  0878               	movf	??___ftpack+1,w
 15381  0BD3  04F3               	iorwf	___ftpack@arg+1,f
 15382  0BD4  0879               	movf	??___ftpack+2,w
 15383  0BD5  04F4               	iorwf	___ftpack@arg+2,f
 15384  0BD6  0876               	movf	___ftpack@sign,w
 15385  0BD7  1903               	btfsc	3,2
 15386  0BD8  0008               	return
 15387  0BD9  17F4               	bsf	___ftpack@arg+2,7
 15388  0BDA  0008               	return
 15389  0BDB                     __end_of___ftpack:	
 15390                           
 15391                           	psect	text111
 15392  121B                     __ptext111:	
 15393 ;; *************** function _Division *****************
 15394 ;; Defined at:
 15395 ;;		line 2397 in file "../src/Dimmer_B1.c"
 15396 ;; Parameters:    Size  Location     Type
 15397 ;;  value           1    wreg     unsigned char 
 15398 ;;  num             1    7[COMMON] unsigned char 
 15399 ;; Auto vars:     Size  Location     Type
 15400 ;;  value           1    0[BANK0 ] unsigned char 
 15401 ;;  result          1    1[BANK0 ] unsigned char 
 15402 ;; Return value:  Size  Location     Type
 15403 ;;                  1    wreg      unsigned char 
 15404 ;; Registers used:
 15405 ;;		wreg, status,2, status,0, pclath, cstack
 15406 ;; Tracked objects:
 15407 ;;		On entry : 0/0
 15408 ;;		On exit  : 0/0
 15409 ;;		Unchanged: 0/0
 15410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15411 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15412 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15413 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15414 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15415 ;;Total ram usage:        5 bytes
 15416 ;; Hardware stack levels used:    1
 15417 ;; Hardware stack levels required when called:    4
 15418 ;; This function calls:
 15419 ;;		___lbdiv
 15420 ;; This function is called by:
 15421 ;;		_DimmerIntr_Initialization
 15422 ;;		_DimmerIntr_ValueCalculate
 15423 ;; This function uses a non-reentrant model
 15424 ;;
 15425                           
 15426                           
 15427                           ;psect for function _Division
 15428  121B                     _Division:	
 15429                           
 15430                           ;incstack = 0
 15431                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 15432                           ;Division@value stored from wreg
 15433  121B  0020               	movlb	0	; select bank0
 15434  121C  00A0               	movwf	Division@value
 15435                           
 15436                           ;Dimmer_B1.c: 2398: char result = (char) (value / num);
 15437  121D  0877               	movf	Division@num,w
 15438  121E  00F8               	movwf	??_Division
 15439  121F  0878               	movf	??_Division,w
 15440  1220  00F2               	movwf	___lbdiv@divisor
 15441  1221  0820               	movf	Division@value,w
 15442  1222  3194  24A5         	fcall	___lbdiv
 15443  1224  00F9               	movwf	??_Division+1
 15444  1225  0879               	movf	??_Division+1,w
 15445  1226  0020               	movlb	0	; select bank0
 15446  1227  00A1               	movwf	Division@result
 15447                           
 15448                           ;Dimmer_B1.c: 2399: return result;
 15449  1228  0821               	movf	Division@result,w
 15450  1229  0008               	return
 15451  122A                     __end_of_Division:	
 15452                           
 15453                           	psect	text112
 15454  14A5                     __ptext112:	
 15455 ;; *************** function ___lbdiv *****************
 15456 ;; Defined at:
 15457 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 15458 ;; Parameters:    Size  Location     Type
 15459 ;;  dividend        1    wreg     unsigned char 
 15460 ;;  divisor         1    2[COMMON] unsigned char 
 15461 ;; Auto vars:     Size  Location     Type
 15462 ;;  dividend        1    4[COMMON] unsigned char 
 15463 ;;  quotient        1    6[COMMON] unsigned char 
 15464 ;;  counter         1    5[COMMON] unsigned char 
 15465 ;; Return value:  Size  Location     Type
 15466 ;;                  1    wreg      unsigned char 
 15467 ;; Registers used:
 15468 ;;		wreg, status,2, status,0
 15469 ;; Tracked objects:
 15470 ;;		On entry : 0/0
 15471 ;;		On exit  : 0/0
 15472 ;;		Unchanged: 0/0
 15473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15474 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15475 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15476 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15477 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15478 ;;Total ram usage:        5 bytes
 15479 ;; Hardware stack levels used:    1
 15480 ;; Hardware stack levels required when called:    3
 15481 ;; This function calls:
 15482 ;;		Nothing
 15483 ;; This function is called by:
 15484 ;;		_Division
 15485 ;; This function uses a non-reentrant model
 15486 ;;
 15487                           
 15488                           
 15489                           ;psect for function ___lbdiv
 15490  14A5                     ___lbdiv:	
 15491                           
 15492                           ;incstack = 0
 15493                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 15494                           ;___lbdiv@dividend stored from wreg
 15495  14A5  00F4               	movwf	___lbdiv@dividend
 15496  14A6  01F6               	clrf	___lbdiv@quotient
 15497  14A7  0872               	movf	___lbdiv@divisor,w
 15498  14A8  1903               	btfsc	3,2
 15499  14A9  2CC4               	goto	l8029
 15500  14AA  01F5               	clrf	___lbdiv@counter
 15501  14AB  0AF5               	incf	___lbdiv@counter,f
 15502  14AC                     l8017:	
 15503  14AC  1BF2               	btfsc	___lbdiv@divisor,7
 15504  14AD  2CB5               	goto	l8019
 15505  14AE  1003               	clrc
 15506  14AF  0DF2               	rlf	___lbdiv@divisor,f
 15507  14B0  3001               	movlw	1
 15508  14B1  00F3               	movwf	??___lbdiv
 15509  14B2  0873               	movf	??___lbdiv,w
 15510  14B3  07F5               	addwf	___lbdiv@counter,f
 15511  14B4  2CAC               	goto	l8017
 15512  14B5                     l8019:	
 15513  14B5  1003               	clrc
 15514  14B6  0DF6               	rlf	___lbdiv@quotient,f
 15515  14B7  0872               	movf	___lbdiv@divisor,w
 15516  14B8  0274               	subwf	___lbdiv@dividend,w
 15517  14B9  1C03               	skipc
 15518  14BA  2CBF               	goto	L8
 15519  14BB  0872               	movf	___lbdiv@divisor,w
 15520  14BC  02F4               	subwf	___lbdiv@dividend,f
 15521  14BD  1476               	bsf	___lbdiv@quotient,0
 15522  14BE  1003               	clrc
 15523  14BF                     L8:	
 15524  14BF  0CF2               	rrf	___lbdiv@divisor,f
 15525  14C0  3001               	movlw	1
 15526  14C1  02F5               	subwf	___lbdiv@counter,f
 15527  14C2  1D03               	btfss	3,2
 15528  14C3  2CB5               	goto	l8019
 15529  14C4                     l8029:	
 15530  14C4  0876               	movf	___lbdiv@quotient,w
 15531  14C5  0008               	return
 15532  14C6                     __end_of___lbdiv:	
 15533                           
 15534                           	psect	text113
 15535  10C1                     __ptext113:	
 15536 ;; *************** function _DelayOff_Main *****************
 15537 ;; Defined at:
 15538 ;;		line 41 in file "../src/DelayOff_B1.c"
 15539 ;; Parameters:    Size  Location     Type
 15540 ;;		None
 15541 ;; Auto vars:     Size  Location     Type
 15542 ;;		None
 15543 ;; Return value:  Size  Location     Type
 15544 ;;		None               void
 15545 ;; Registers used:
 15546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15547 ;; Tracked objects:
 15548 ;;		On entry : 0/0
 15549 ;;		On exit  : 0/0
 15550 ;;		Unchanged: 0/0
 15551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15556 ;;Total ram usage:        0 bytes
 15557 ;; Hardware stack levels used:    1
 15558 ;; Hardware stack levels required when called:    7
 15559 ;; This function calls:
 15560 ;;		_DlyOff_Main
 15561 ;; This function is called by:
 15562 ;;		_main
 15563 ;; This function uses a non-reentrant model
 15564 ;;
 15565                           
 15566                           
 15567                           ;psect for function _DelayOff_Main
 15568  10C1                     _DelayOff_Main:	
 15569                           
 15570                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15571                           
 15572                           ;incstack = 0
 15573                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15574  10C1  3001               	movlw	1
 15575  10C2  318E  2635         	fcall	_DlyOff_Main
 15576  10C4  0008               	return
 15577  10C5                     __end_of_DelayOff_Main:	
 15578                           
 15579                           	psect	text114
 15580  0E35                     __ptext114:	
 15581 ;; *************** function _DlyOff_Main *****************
 15582 ;; Defined at:
 15583 ;;		line 61 in file "../src/DelayOff_B1.c"
 15584 ;; Parameters:    Size  Location     Type
 15585 ;;  sw              1    wreg     unsigned char 
 15586 ;; Auto vars:     Size  Location     Type
 15587 ;;  sw              1   63[BANK0 ] unsigned char 
 15588 ;; Return value:  Size  Location     Type
 15589 ;;		None               void
 15590 ;; Registers used:
 15591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15592 ;; Tracked objects:
 15593 ;;		On entry : 0/0
 15594 ;;		On exit  : 0/0
 15595 ;;		Unchanged: 0/0
 15596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15599 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15600 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;Total ram usage:        3 bytes
 15602 ;; Hardware stack levels used:    1
 15603 ;; Hardware stack levels required when called:    6
 15604 ;; This function calls:
 15605 ;;		_DelayOffPointSelect
 15606 ;;		_getDimmerLights_Status
 15607 ;;		_setDimmerLights_SwOff
 15608 ;;		_setDimmerLights_SwOn
 15609 ;;		_setProductData
 15610 ;; This function is called by:
 15611 ;;		_DelayOff_Main
 15612 ;; This function uses a non-reentrant model
 15613 ;;
 15614                           
 15615                           
 15616                           ;psect for function _DlyOff_Main
 15617  0E35                     _DlyOff_Main:	
 15618                           
 15619                           ;incstack = 0
 15620                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15621                           ;DlyOff_Main@sw stored from wreg
 15622  0E35  0020               	movlb	0	; select bank0
 15623  0E36  00DF               	movwf	DlyOff_Main@sw
 15624                           
 15625                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15626  0E37  085F               	movf	DlyOff_Main@sw,w
 15627  0E38  3191  214E  318E   	fcall	_DelayOffPointSelect
 15628                           
 15629                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15630  0E3B  087B               	movf	_DelayOff,w
 15631  0E3C  0086               	movwf	6
 15632  0E3D  3001               	movlw	1	; select bank2/3
 15633  0E3E  0087               	movwf	7
 15634  0E3F  1C81               	btfss	1,1
 15635  0E40  0008               	return
 15636                           
 15637                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15638  0E41  087B               	movf	_DelayOff,w
 15639  0E42  3E02               	addlw	2
 15640  0E43  0086               	movwf	6
 15641  0E44  3001               	movlw	1	; select bank2/3
 15642  0E45  0087               	movwf	7
 15643  0E46  3001               	movlw	1
 15644  0E47  0781               	addwf	1,f
 15645  0E48  3141               	addfsr 1,1
 15646  0E49  1803               	skipnc
 15647  0E4A  0A81               	incf	1,f
 15648                           
 15649                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= (60000-10000)/20) {
 15650  0E4B  087B               	movf	_DelayOff,w
 15651  0E4C  3E02               	addlw	2
 15652  0E4D  0086               	movwf	6
 15653  0E4E  3001               	movlw	1	; select bank2/3
 15654  0E4F  0087               	movwf	7
 15655  0E50  3F40               	moviw [0]fsr1
 15656  0E51  0020               	movlb	0	; select bank0
 15657  0E52  00DD               	movwf	??_DlyOff_Main
 15658  0E53  3F41               	moviw [1]fsr1
 15659  0E54  00DE               	movwf	??_DlyOff_Main+1
 15660  0E55  3009               	movlw	9
 15661  0E56  025E               	subwf	??_DlyOff_Main+1,w
 15662  0E57  30C4               	movlw	196
 15663  0E58  1903               	skipnz
 15664  0E59  025D               	subwf	??_DlyOff_Main,w
 15665  0E5A  1C03               	skipc
 15666  0E5B  0008               	return
 15667                           
 15668                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15669  0E5C  087B               	movf	_DelayOff,w
 15670  0E5D  3E02               	addlw	2
 15671  0E5E  0086               	movwf	6
 15672  0E5F  3001               	movlw	1	; select bank2/3
 15673  0E60  0087               	movwf	7
 15674  0E61  3000               	movlw	0
 15675  0E62  3FC0               	movwi [0]fsr1
 15676  0E63  3FC1               	movwi [1]fsr1
 15677                           
 15678                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15679  0E64  3001               	movlw	1
 15680  0E65  00DD               	movwf	??_DlyOff_Main
 15681  0E66  087B               	movf	_DelayOff,w
 15682  0E67  3E04               	addlw	4
 15683  0E68  0086               	movwf	6
 15684  0E69  3001               	movlw	1	; select bank2/3
 15685  0E6A  0087               	movwf	7
 15686  0E6B  085D               	movf	??_DlyOff_Main,w
 15687  0E6C  0781               	addwf	1,f
 15688                           
 15689                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15690  0E6D  087B               	movf	_DelayOff,w
 15691  0E6E  3E04               	addlw	4
 15692  0E6F  0086               	movwf	6
 15693  0E70  3001               	movlw	1	; select bank2/3
 15694  0E71  0087               	movwf	7
 15695  0E72  0A7B               	incf	_DelayOff,w
 15696  0E73  0084               	movwf	4
 15697  0E74  3001               	movlw	1	; select bank2/3
 15698  0E75  0085               	movwf	5
 15699  0E76  0800               	movf	0,w
 15700  0E77  0201               	subwf	1,w
 15701  0E78  1C03               	skipc
 15702  0E79  0008               	return
 15703                           
 15704                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15705  0E7A  087B               	movf	_DelayOff,w
 15706  0E7B  3E04               	addlw	4
 15707  0E7C  0086               	movwf	6
 15708  0E7D  3001               	movlw	1	; select bank2/3
 15709  0E7E  0087               	movwf	7
 15710  0E7F  0181               	clrf	1
 15711                           
 15712                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15713  0E80  087B               	movf	_DelayOff,w
 15714  0E81  0086               	movwf	6
 15715  0E82  3001               	movlw	1	; select bank2/3
 15716  0E83  0087               	movwf	7
 15717  0E84  1081               	bcf	1,1
 15718                           
 15719                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 15720  0E85  085F               	movf	DlyOff_Main@sw,w
 15721  0E86  3192  220C  318E   	fcall	_getDimmerLights_Status
 15722  0E89  3A01               	xorlw	1
 15723  0E8A  1D03               	skipz
 15724  0E8B  2E96               	goto	l523
 15725                           
 15726                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 15727  0E8C  0020               	movlb	0	; select bank0
 15728  0E8D  085F               	movf	DlyOff_Main@sw,w
 15729  0E8E  3189  218D  318E   	fcall	_setDimmerLights_SwOn
 15730                           
 15731                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 15732  0E91  0020               	movlb	0	; select bank0
 15733  0E92  085F               	movf	DlyOff_Main@sw,w
 15734  0E93  3197  2790  318E   	fcall	_setDimmerLights_SwOff
 15735  0E96                     l523:	
 15736                           
 15737                           ;DelayOff_B1.c: 78: }
 15738                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 15739  0E96  0020               	movlb	0	; select bank0
 15740  0E97  01DA               	clrf	setProductData@value
 15741  0E98  085F               	movf	DlyOff_Main@sw,w
 15742  0E99  3E1A               	addlw	26
 15743  0E9A  3191  219A         	fcall	_setProductData
 15744  0E9C  0008               	return
 15745  0E9D                     __end_of_DlyOff_Main:	
 15746                           
 15747                           	psect	text115
 15748  119A                     __ptext115:	
 15749 ;; *************** function _setProductData *****************
 15750 ;; Defined at:
 15751 ;;		line 649 in file "../src/Main_B1.c"
 15752 ;; Parameters:    Size  Location     Type
 15753 ;;  address         1    wreg     unsigned char 
 15754 ;;  value           1   58[BANK0 ] unsigned char 
 15755 ;; Auto vars:     Size  Location     Type
 15756 ;;  address         1   60[BANK0 ] unsigned char 
 15757 ;; Return value:  Size  Location     Type
 15758 ;;		None               void
 15759 ;; Registers used:
 15760 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15761 ;; Tracked objects:
 15762 ;;		On entry : 0/0
 15763 ;;		On exit  : 0/0
 15764 ;;		Unchanged: 0/0
 15765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15766 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15769 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15770 ;;Total ram usage:        3 bytes
 15771 ;; Hardware stack levels used:    1
 15772 ;; Hardware stack levels required when called:    3
 15773 ;; This function calls:
 15774 ;;		Nothing
 15775 ;; This function is called by:
 15776 ;;		_DlyOff_Main
 15777 ;;		_setDelayOff_GO
 15778 ;;		_setDimmerLights_OnOff
 15779 ;;		_setDimmerLights_Dimming
 15780 ;;		_setLog_Code
 15781 ;;		_setControl_Lights_Table
 15782 ;;		_setRFSW_AdjControl
 15783 ;;		_setRF_DimmerLights
 15784 ;; This function uses a non-reentrant model
 15785 ;;
 15786                           
 15787                           
 15788                           ;psect for function _setProductData
 15789  119A                     _setProductData:	
 15790                           
 15791                           ;incstack = 0
 15792                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 15793                           ;setProductData@address stored from wreg
 15794  119A  0020               	movlb	0	; select bank0
 15795  119B  00DC               	movwf	setProductData@address
 15796                           
 15797                           ;Main_B1.c: 650: _product.Data[address] = value;
 15798  119C  085A               	movf	setProductData@value,w
 15799  119D  00DB               	movwf	??_setProductData
 15800  119E  085C               	movf	setProductData@address,w
 15801  119F  3EC5               	addlw	__product& (0+255)
 15802  11A0  0086               	movwf	6
 15803  11A1  3001               	movlw	1	; select bank3/4
 15804  11A2  0087               	movwf	7
 15805  11A3  085B               	movf	??_setProductData,w
 15806  11A4  0081               	movwf	1
 15807  11A5  0008               	return
 15808  11A6                     __end_of_setProductData:	
 15809                           
 15810                           	psect	text116
 15811  098D                     __ptext116:	
 15812 ;; *************** function _setDimmerLights_SwOn *****************
 15813 ;; Defined at:
 15814 ;;		line 761 in file "../src/Dimmer_B1.c"
 15815 ;; Parameters:    Size  Location     Type
 15816 ;;  sw              1    wreg     unsigned char 
 15817 ;; Auto vars:     Size  Location     Type
 15818 ;;  sw              1    8[BANK0 ] unsigned char 
 15819 ;;  dimmingStatu    1    7[BANK0 ] unsigned char 
 15820 ;;  idle            1    6[BANK0 ] unsigned char 
 15821 ;; Return value:  Size  Location     Type
 15822 ;;		None               void
 15823 ;; Registers used:
 15824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15825 ;; Tracked objects:
 15826 ;;		On entry : 0/0
 15827 ;;		On exit  : 0/0
 15828 ;;		Unchanged: 0/0
 15829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15831 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15832 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15833 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15834 ;;Total ram usage:        4 bytes
 15835 ;; Hardware stack levels used:    1
 15836 ;; Hardware stack levels required when called:    5
 15837 ;; This function calls:
 15838 ;;		_DimmerLights_SelectPointer
 15839 ;;		_getDimmerIntr_Dimming_Sw
 15840 ;;		_setBuz
 15841 ;; This function is called by:
 15842 ;;		_DlyOff_Main
 15843 ;;		_setControl_Lights_Table
 15844 ;;		_setRFSW_Control
 15845 ;;		_setRFSW_AdjControl
 15846 ;;		_setSw_Main
 15847 ;; This function uses a non-reentrant model
 15848 ;;
 15849                           
 15850                           
 15851                           ;psect for function _setDimmerLights_SwOn
 15852  098D                     _setDimmerLights_SwOn:	
 15853                           
 15854                           ;incstack = 0
 15855                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15856                           ;setDimmerLights_SwOn@sw stored from wreg
 15857  098D  0020               	movlb	0	; select bank0
 15858  098E  00A8               	movwf	setDimmerLights_SwOn@sw
 15859                           
 15860                           ;Dimmer_B1.c: 762: char idle = 0;
 15861  098F  01A6               	clrf	setDimmerLights_SwOn@idle
 15862                           
 15863                           ;Dimmer_B1.c: 764: char dimmingStatus = 0;
 15864  0990  01A7               	clrf	setDimmerLights_SwOn@dimmingStatus
 15865                           
 15866                           ;Dimmer_B1.c: 765: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 15867  0991  0828               	movf	setDimmerLights_SwOn@sw,w
 15868  0992  3191  21D6  3189   	fcall	_getDimmerIntr_Dimming_Sw
 15869  0995  00F9               	movwf	??_setDimmerLights_SwOn
 15870  0996  0879               	movf	??_setDimmerLights_SwOn,w
 15871  0997  0020               	movlb	0	; select bank0
 15872  0998  00A7               	movwf	setDimmerLights_SwOn@dimmingStatus
 15873                           
 15874                           ;Dimmer_B1.c: 792: DimmerLights_SelectPointer(sw);
 15875  0999  0828               	movf	setDimmerLights_SwOn@sw,w
 15876  099A  3191  2158  3189   	fcall	_DimmerLights_SelectPointer
 15877                           
 15878                           ;Dimmer_B1.c: 793: if (idle == 0) {
 15879  099D  0020               	movlb	0	; select bank0
 15880  099E  08A6               	movf	setDimmerLights_SwOn@idle,f
 15881  099F  1D03               	skipz
 15882  09A0  0008               	return
 15883                           
 15884                           ;Dimmer_B1.c: 795: if (dimmingStatus == 0) {
 15885  09A1  08A7               	movf	setDimmerLights_SwOn@dimmingStatus,f
 15886  09A2  1D03               	skipz
 15887  09A3  29C5               	goto	l7907
 15888                           
 15889                           ;Dimmer_B1.c: 796: DimmerLights->SwFlag = 1;
 15890  09A4  086A               	movf	_DimmerLights,w
 15891  09A5  0086               	movwf	6
 15892  09A6  3001               	movlw	1	; select bank2/3
 15893  09A7  0087               	movwf	7
 15894  09A8  1401               	bsf	1,0
 15895                           
 15896                           ;Dimmer_B1.c: 797: if (DimmerLights->Status == 0) {
 15897  09A9  0A6A               	incf	_DimmerLights,w
 15898  09AA  0086               	movwf	6
 15899  09AB  3001               	movlw	1	; select bank2/3
 15900  09AC  0087               	movwf	7
 15901  09AD  1801               	btfsc	1,0
 15902  09AE  29BF               	goto	l7905
 15903                           
 15904                           ;Dimmer_B1.c: 798: DimmerLights->Status = 1;
 15905  09AF  0A6A               	incf	_DimmerLights,w
 15906  09B0  0086               	movwf	6
 15907  09B1  3001               	movlw	1	; select bank2/3
 15908  09B2  0087               	movwf	7
 15909  09B3  1401               	bsf	1,0
 15910                           
 15911                           ;Dimmer_B1.c: 801: DimmerLights->Trigger = 1;
 15912  09B4  086A               	movf	_DimmerLights,w
 15913  09B5  0086               	movwf	6
 15914  09B6  3001               	movlw	1	; select bank2/3
 15915  09B7  0087               	movwf	7
 15916  09B8  1481               	bsf	1,1
 15917                           
 15918                           ;Dimmer_B1.c: 802: DimmerLights->Switch = 1;
 15919  09B9  086A               	movf	_DimmerLights,w
 15920  09BA  0086               	movwf	6
 15921  09BB  3001               	movlw	1	; select bank2/3
 15922  09BC  0087               	movwf	7
 15923  09BD  1501               	bsf	1,2
 15924                           
 15925                           ;Dimmer_B1.c: 809: } else {
 15926  09BE  29CF               	goto	l7909
 15927  09BF                     l7905:	
 15928                           
 15929                           ;Dimmer_B1.c: 810: DimmerLights->Status = 0;
 15930  09BF  0A6A               	incf	_DimmerLights,w
 15931  09C0  0086               	movwf	6
 15932  09C1  3001               	movlw	1	; select bank2/3
 15933  09C2  0087               	movwf	7
 15934  09C3  1001               	bcf	1,0
 15935                           
 15936                           ;Dimmer_B1.c: 811: }
 15937                           ;Dimmer_B1.c: 812: } else {
 15938  09C4  29CF               	goto	l7909
 15939  09C5                     l7907:	
 15940                           
 15941                           ;Dimmer_B1.c: 813: DimmerLights->DimmingTrigger = 1;
 15942  09C5  086A               	movf	_DimmerLights,w
 15943  09C6  0086               	movwf	6
 15944  09C7  3001               	movlw	1	; select bank2/3
 15945  09C8  0087               	movwf	7
 15946  09C9  1601               	bsf	1,4
 15947                           
 15948                           ;Dimmer_B1.c: 814: DimmerLights->DimmingSwitch = 0;
 15949  09CA  086A               	movf	_DimmerLights,w
 15950  09CB  0086               	movwf	6
 15951  09CC  3001               	movlw	1	; select bank2/3
 15952  09CD  0087               	movwf	7
 15953  09CE  1281               	bcf	1,5
 15954  09CF                     l7909:	
 15955                           
 15956                           ;Dimmer_B1.c: 815: }
 15957                           ;Dimmer_B1.c: 816: setBuz(1, 100);
 15958  09CF  3064               	movlw	100
 15959  09D0  00A4               	movwf	setBuz@time
 15960  09D1  3000               	movlw	0
 15961  09D2  00A5               	movwf	setBuz@time+1
 15962  09D3  3001               	movlw	1
 15963  09D4  318A  2227         	fcall	_setBuz
 15964  09D6  0008               	return
 15965  09D7                     __end_of_setDimmerLights_SwOn:	
 15966                           
 15967                           	psect	text117
 15968  0A27                     __ptext117:	
 15969 ;; *************** function _setBuz *****************
 15970 ;; Defined at:
 15971 ;;		line 22 in file "../src/Buzzer_B1.c"
 15972 ;; Parameters:    Size  Location     Type
 15973 ;;  count           1    wreg     unsigned char 
 15974 ;;  time            2    4[BANK0 ] int 
 15975 ;; Auto vars:     Size  Location     Type
 15976 ;;  count           1    8[COMMON] unsigned char 
 15977 ;; Return value:  Size  Location     Type
 15978 ;;		None               void
 15979 ;; Registers used:
 15980 ;;		wreg, status,2, status,0, pclath, cstack
 15981 ;; Tracked objects:
 15982 ;;		On entry : 0/0
 15983 ;;		On exit  : 0/0
 15984 ;;		Unchanged: 0/0
 15985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15986 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15987 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15988 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15989 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15990 ;;Total ram usage:        4 bytes
 15991 ;; Hardware stack levels used:    1
 15992 ;; Hardware stack levels required when called:    4
 15993 ;; This function calls:
 15994 ;;		___awdiv
 15995 ;; This function is called by:
 15996 ;;		_setDimmerLights_SwOn
 15997 ;;		_setDimmerLights_Dimming
 15998 ;;		_my_MainTimer
 15999 ;;		_setLog_Code
 16000 ;;		_setRFSW_Control
 16001 ;;		_setRFSW_AdjControl
 16002 ;;		_setSw_Main
 16003 ;; This function uses a non-reentrant model
 16004 ;;
 16005                           
 16006                           
 16007                           ;psect for function _setBuz
 16008  0A27                     _setBuz:	
 16009                           
 16010                           ;incstack = 0
 16011                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16012                           ;setBuz@count stored from wreg
 16013  0A27  00F8               	movwf	setBuz@count
 16014                           
 16015                           ;Buzzer_B1.c: 23: time /= 20;
 16016  0A28  3014               	movlw	20
 16017  0A29  00F2               	movwf	___awdiv@divisor
 16018  0A2A  3000               	movlw	0
 16019  0A2B  00F3               	movwf	___awdiv@divisor+1
 16020  0A2C  0020               	movlb	0	; select bank0
 16021  0A2D  0825               	movf	setBuz@time+1,w
 16022  0A2E  01F5               	clrf	___awdiv@dividend+1
 16023  0A2F  07F5               	addwf	___awdiv@dividend+1,f
 16024  0A30  0824               	movf	setBuz@time,w
 16025  0A31  01F4               	clrf	___awdiv@dividend
 16026  0A32  07F4               	addwf	___awdiv@dividend,f
 16027  0A33  318A  22CD  318A   	fcall	___awdiv
 16028  0A36  0873               	movf	?___awdiv+1,w
 16029  0A37  0020               	movlb	0	; select bank0
 16030  0A38  01A5               	clrf	setBuz@time+1
 16031  0A39  07A5               	addwf	setBuz@time+1,f
 16032  0A3A  0872               	movf	?___awdiv,w
 16033  0A3B  01A4               	clrf	setBuz@time
 16034  0A3C  07A4               	addwf	setBuz@time,f
 16035                           
 16036                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16037  0A3D  0021               	movlb	1	; select bank1
 16038  0A3E  1C4C               	btfss	_Buz1^(0+128),0
 16039  0A3F  0008               	return
 16040                           
 16041                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16042  0A40  18CC               	btfsc	_Buz1^(0+128),1
 16043  0A41  2A56               	goto	l84
 16044                           
 16045                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16046  0A42  14CC               	bsf	_Buz1^(0+128),1
 16047                           
 16048                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16049  0A43  01CD               	clrf	(_Buz1^(0+128)+1)
 16050  0A44  01CE               	clrf	((_Buz1+1)^(0+128)+1)
 16051                           
 16052                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16053  0A45  0878               	movf	setBuz@count,w
 16054  0A46  00F7               	movwf	??_setBuz
 16055  0A47  0877               	movf	??_setBuz,w
 16056  0A48  00CF               	movwf	(_Buz1^(0+128)+3)
 16057                           
 16058                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16059  0A49  0020               	movlb	0	; select bank0
 16060  0A4A  0825               	movf	setBuz@time+1,w
 16061  0A4B  0021               	movlb	1	; select bank1
 16062  0A4C  01D3               	clrf	((_Buz1+1)^(0+128)+6)
 16063  0A4D  07D3               	addwf	((_Buz1+1)^(0+128)+6),f
 16064  0A4E  0020               	movlb	0	; select bank0
 16065  0A4F  0824               	movf	setBuz@time,w
 16066  0A50  0021               	movlb	1	; select bank1
 16067  0A51  01D2               	clrf	(_Buz1^(0+128)+6)
 16068  0A52  07D2               	addwf	(_Buz1^(0+128)+6),f
 16069                           
 16070                           ;Buzzer_B1.c: 30: RB3 = 1;
 16071  0A53  0020               	movlb	0	; select bank0
 16072  0A54  158D               	bsf	13,3	;volatile
 16073                           
 16074                           ;Buzzer_B1.c: 31: } else {
 16075  0A55  0008               	return
 16076  0A56                     l84:	
 16077                           
 16078                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16079  0A56  19CC               	btfsc	_Buz1^(0+128),3
 16080  0A57  2A68               	goto	l86
 16081                           
 16082                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16083  0A58  15CC               	bsf	_Buz1^(0+128),3
 16084                           
 16085                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16086  0A59  0878               	movf	setBuz@count,w
 16087  0A5A  00F7               	movwf	??_setBuz
 16088  0A5B  0877               	movf	??_setBuz,w
 16089  0A5C  00D0               	movwf	(_Buz1^(0+128)+4)
 16090                           
 16091                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16092  0A5D  0020               	movlb	0	; select bank0
 16093  0A5E  0825               	movf	setBuz@time+1,w
 16094  0A5F  0021               	movlb	1	; select bank1
 16095  0A60  01D5               	clrf	((_Buz1+1)^(0+128)+8)
 16096  0A61  07D5               	addwf	((_Buz1+1)^(0+128)+8),f
 16097  0A62  0020               	movlb	0	; select bank0
 16098  0A63  0824               	movf	setBuz@time,w
 16099  0A64  0021               	movlb	1	; select bank1
 16100  0A65  01D4               	clrf	(_Buz1^(0+128)+8)
 16101  0A66  07D4               	addwf	(_Buz1^(0+128)+8),f
 16102                           
 16103                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16104  0A67  0008               	return
 16105  0A68                     l86:	
 16106  0A68  1A4C               	btfsc	_Buz1^(0+128),4
 16107  0A69  0008               	return
 16108                           
 16109                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16110  0A6A  164C               	bsf	_Buz1^(0+128),4
 16111                           
 16112                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16113  0A6B  0878               	movf	setBuz@count,w
 16114  0A6C  00F7               	movwf	??_setBuz
 16115  0A6D  0877               	movf	??_setBuz,w
 16116  0A6E  00D1               	movwf	(_Buz1^(0+128)+5)
 16117                           
 16118                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16119  0A6F  0020               	movlb	0	; select bank0
 16120  0A70  0825               	movf	setBuz@time+1,w
 16121  0A71  0021               	movlb	1	; select bank1
 16122  0A72  01D7               	clrf	((_Buz1+1)^(0+128)+10)
 16123  0A73  07D7               	addwf	((_Buz1+1)^(0+128)+10),f
 16124  0A74  0020               	movlb	0	; select bank0
 16125  0A75  0824               	movf	setBuz@time,w
 16126  0A76  0021               	movlb	1	; select bank1
 16127  0A77  01D6               	clrf	(_Buz1^(0+128)+10)
 16128  0A78  07D6               	addwf	(_Buz1^(0+128)+10),f
 16129  0A79  0008               	return
 16130  0A7A                     __end_of_setBuz:	
 16131                           
 16132                           	psect	text118
 16133  0ACD                     __ptext118:	
 16134 ;; *************** function ___awdiv *****************
 16135 ;; Defined at:
 16136 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16137 ;; Parameters:    Size  Location     Type
 16138 ;;  divisor         2    2[COMMON] int 
 16139 ;;  dividend        2    4[COMMON] int 
 16140 ;; Auto vars:     Size  Location     Type
 16141 ;;  quotient        2    2[BANK0 ] int 
 16142 ;;  sign            1    1[BANK0 ] unsigned char 
 16143 ;;  counter         1    0[BANK0 ] unsigned char 
 16144 ;; Return value:  Size  Location     Type
 16145 ;;                  2    2[COMMON] int 
 16146 ;; Registers used:
 16147 ;;		wreg, status,2, status,0
 16148 ;; Tracked objects:
 16149 ;;		On entry : 0/0
 16150 ;;		On exit  : 0/0
 16151 ;;		Unchanged: 0/0
 16152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16153 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16154 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16155 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16156 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;Total ram usage:        9 bytes
 16158 ;; Hardware stack levels used:    1
 16159 ;; Hardware stack levels required when called:    3
 16160 ;; This function calls:
 16161 ;;		Nothing
 16162 ;; This function is called by:
 16163 ;;		_setBuz
 16164 ;; This function uses a non-reentrant model
 16165 ;;
 16166                           
 16167                           
 16168                           ;psect for function ___awdiv
 16169  0ACD                     ___awdiv:	
 16170                           
 16171                           ;incstack = 0
 16172                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16173  0ACD  0020               	movlb	0	; select bank0
 16174  0ACE  01A1               	clrf	___awdiv@sign
 16175  0ACF  1FF3               	btfss	___awdiv@divisor+1,7
 16176  0AD0  2AD8               	goto	l7531
 16177  0AD1  09F2               	comf	___awdiv@divisor,f
 16178  0AD2  09F3               	comf	___awdiv@divisor+1,f
 16179  0AD3  0AF2               	incf	___awdiv@divisor,f
 16180  0AD4  1903               	skipnz
 16181  0AD5  0AF3               	incf	___awdiv@divisor+1,f
 16182  0AD6  01A1               	clrf	___awdiv@sign
 16183  0AD7  0AA1               	incf	___awdiv@sign,f
 16184  0AD8                     l7531:	
 16185  0AD8  1FF5               	btfss	___awdiv@dividend+1,7
 16186  0AD9  2AE3               	goto	l7537
 16187  0ADA  09F4               	comf	___awdiv@dividend,f
 16188  0ADB  09F5               	comf	___awdiv@dividend+1,f
 16189  0ADC  0AF4               	incf	___awdiv@dividend,f
 16190  0ADD  1903               	skipnz
 16191  0ADE  0AF5               	incf	___awdiv@dividend+1,f
 16192  0ADF  3001               	movlw	1
 16193  0AE0  00F6               	movwf	??___awdiv
 16194  0AE1  0876               	movf	??___awdiv,w
 16195  0AE2  06A1               	xorwf	___awdiv@sign,f
 16196  0AE3                     l7537:	
 16197  0AE3  01A2               	clrf	___awdiv@quotient
 16198  0AE4  01A3               	clrf	___awdiv@quotient+1
 16199  0AE5  0873               	movf	___awdiv@divisor+1,w
 16200  0AE6  0472               	iorwf	___awdiv@divisor,w
 16201  0AE7  1903               	skipnz
 16202  0AE8  2B12               	goto	l7559
 16203  0AE9  01A0               	clrf	___awdiv@counter
 16204  0AEA  0AA0               	incf	___awdiv@counter,f
 16205  0AEB                     l7547:	
 16206  0AEB  1BF3               	btfsc	___awdiv@divisor+1,7
 16207  0AEC  2AF7               	goto	l7549
 16208  0AED  3001               	movlw	1
 16209  0AEE                     u7155:	
 16210  0AEE  35F2               	lslf	___awdiv@divisor,f
 16211  0AEF  0DF3               	rlf	___awdiv@divisor+1,f
 16212  0AF0  0B89               	decfsz	9,f
 16213  0AF1  2AEE               	goto	u7155
 16214  0AF2  3001               	movlw	1
 16215  0AF3  00F6               	movwf	??___awdiv
 16216  0AF4  0876               	movf	??___awdiv,w
 16217  0AF5  07A0               	addwf	___awdiv@counter,f
 16218  0AF6  2AEB               	goto	l7547
 16219  0AF7                     l7549:	
 16220  0AF7  3001               	movlw	1
 16221  0AF8                     u7175:	
 16222  0AF8  35A2               	lslf	___awdiv@quotient,f
 16223  0AF9  0DA3               	rlf	___awdiv@quotient+1,f
 16224  0AFA  0B89               	decfsz	9,f
 16225  0AFB  2AF8               	goto	u7175
 16226  0AFC  0873               	movf	___awdiv@divisor+1,w
 16227  0AFD  0275               	subwf	___awdiv@dividend+1,w
 16228  0AFE  1D03               	skipz
 16229  0AFF  2B02               	goto	u7185
 16230  0B00  0872               	movf	___awdiv@divisor,w
 16231  0B01  0274               	subwf	___awdiv@dividend,w
 16232  0B02                     u7185:	
 16233  0B02  1C03               	skipc
 16234  0B03  2B09               	goto	l7555
 16235  0B04  0872               	movf	___awdiv@divisor,w
 16236  0B05  02F4               	subwf	___awdiv@dividend,f
 16237  0B06  0873               	movf	___awdiv@divisor+1,w
 16238  0B07  3BF5               	subwfb	___awdiv@dividend+1,f
 16239  0B08  1422               	bsf	___awdiv@quotient,0
 16240  0B09                     l7555:	
 16241  0B09  3001               	movlw	1
 16242  0B0A                     u7195:	
 16243  0B0A  36F3               	lsrf	___awdiv@divisor+1,f
 16244  0B0B  0CF2               	rrf	___awdiv@divisor,f
 16245  0B0C  0B89               	decfsz	9,f
 16246  0B0D  2B0A               	goto	u7195
 16247  0B0E  3001               	movlw	1
 16248  0B0F  02A0               	subwf	___awdiv@counter,f
 16249  0B10  1D03               	btfss	3,2
 16250  0B11  2AF7               	goto	l7549
 16251  0B12                     l7559:	
 16252  0B12  0821               	movf	___awdiv@sign,w
 16253  0B13  1903               	btfsc	3,2
 16254  0B14  2B1A               	goto	l7563
 16255  0B15  09A2               	comf	___awdiv@quotient,f
 16256  0B16  09A3               	comf	___awdiv@quotient+1,f
 16257  0B17  0AA2               	incf	___awdiv@quotient,f
 16258  0B18  1903               	skipnz
 16259  0B19  0AA3               	incf	___awdiv@quotient+1,f
 16260  0B1A                     l7563:	
 16261  0B1A  0823               	movf	___awdiv@quotient+1,w
 16262  0B1B  01F3               	clrf	?___awdiv+1
 16263  0B1C  07F3               	addwf	?___awdiv+1,f
 16264  0B1D  0822               	movf	___awdiv@quotient,w
 16265  0B1E  01F2               	clrf	?___awdiv
 16266  0B1F  07F2               	addwf	?___awdiv,f
 16267  0B20  0008               	return
 16268  0B21                     __end_of___awdiv:	
 16269                           
 16270                           	psect	text119
 16271  11D6                     __ptext119:	
 16272 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 16273 ;; Defined at:
 16274 ;;		line 271 in file "../src/Dimmer_B1.c"
 16275 ;; Parameters:    Size  Location     Type
 16276 ;;  lights          1    wreg     unsigned char 
 16277 ;; Auto vars:     Size  Location     Type
 16278 ;;  lights          1    2[COMMON] unsigned char 
 16279 ;;  status          1    3[COMMON] unsigned char 
 16280 ;; Return value:  Size  Location     Type
 16281 ;;                  1    wreg      unsigned char 
 16282 ;; Registers used:
 16283 ;;		wreg, status,2
 16284 ;; Tracked objects:
 16285 ;;		On entry : 0/0
 16286 ;;		On exit  : 0/0
 16287 ;;		Unchanged: 0/0
 16288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16290 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16292 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;Total ram usage:        2 bytes
 16294 ;; Hardware stack levels used:    1
 16295 ;; Hardware stack levels required when called:    3
 16296 ;; This function calls:
 16297 ;;		Nothing
 16298 ;; This function is called by:
 16299 ;;		_setDimmerLights_SwOn
 16300 ;;		_setRF_AdjControl
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304                           
 16305                           ;psect for function _getDimmerIntr_Dimming_Sw
 16306  11D6                     _getDimmerIntr_Dimming_Sw:	
 16307                           
 16308                           ;incstack = 0
 16309                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 16310                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 16311  11D6  00F2               	movwf	getDimmerIntr_Dimming_Sw@lights
 16312                           
 16313                           ;Dimmer_B1.c: 272: char status = 0;
 16314  11D7  01F3               	clrf	getDimmerIntr_Dimming_Sw@status
 16315                           
 16316                           ;Dimmer_B1.c: 274: if (lights == 1) {
 16317  11D8  0872               	movf	getDimmerIntr_Dimming_Sw@lights,w
 16318  11D9  3A01               	xorlw	1
 16319  11DA  1D03               	skipz
 16320  11DB  29E1               	goto	l7607
 16321                           
 16322                           ;Dimmer_B1.c: 275: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 16323  11DC  3000               	movlw	0
 16324  11DD  0021               	movlb	1	; select bank1
 16325  11DE  1A20               	btfsc	_DimmerIntr1^(0+128),4
 16326  11DF  3001               	movlw	1
 16327  11E0  00F3               	movwf	getDimmerIntr_Dimming_Sw@status
 16328  11E1                     l7607:	
 16329                           
 16330                           ;Dimmer_B1.c: 276: }
 16331                           ;Dimmer_B1.c: 289: return status;
 16332  11E1  0873               	movf	getDimmerIntr_Dimming_Sw@status,w
 16333  11E2  0008               	return
 16334  11E3                     __end_of_getDimmerIntr_Dimming_Sw:	
 16335                           
 16336                           	psect	text120
 16337  1790                     __ptext120:	
 16338 ;; *************** function _setDimmerLights_SwOff *****************
 16339 ;; Defined at:
 16340 ;;		line 821 in file "../src/Dimmer_B1.c"
 16341 ;; Parameters:    Size  Location     Type
 16342 ;;  sw              1    wreg     unsigned char 
 16343 ;; Auto vars:     Size  Location     Type
 16344 ;;  sw              1    4[COMMON] unsigned char 
 16345 ;; Return value:  Size  Location     Type
 16346 ;;		None               void
 16347 ;; Registers used:
 16348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16349 ;; Tracked objects:
 16350 ;;		On entry : 0/0
 16351 ;;		On exit  : 0/0
 16352 ;;		Unchanged: 0/0
 16353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16357 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16358 ;;Total ram usage:        1 bytes
 16359 ;; Hardware stack levels used:    1
 16360 ;; Hardware stack levels required when called:    4
 16361 ;; This function calls:
 16362 ;;		_DimmerLights_SelectPointer
 16363 ;; This function is called by:
 16364 ;;		_DlyOff_Main
 16365 ;;		_setControl_Lights_Table
 16366 ;;		_setRFSW_Control
 16367 ;;		_setRFSW_AdjControl
 16368 ;;		_setSw_Main
 16369 ;; This function uses a non-reentrant model
 16370 ;;
 16371                           
 16372                           
 16373                           ;psect for function _setDimmerLights_SwOff
 16374  1790                     _setDimmerLights_SwOff:	
 16375                           
 16376                           ;incstack = 0
 16377                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16378                           ;setDimmerLights_SwOff@sw stored from wreg
 16379  1790  00F4               	movwf	setDimmerLights_SwOff@sw
 16380                           
 16381                           ;Dimmer_B1.c: 823: DimmerLights_SelectPointer(sw);
 16382  1791  0874               	movf	setDimmerLights_SwOff@sw,w
 16383  1792  3191  2158  3197   	fcall	_DimmerLights_SelectPointer
 16384                           
 16385                           ;Dimmer_B1.c: 825: if (DimmerLights->SwFlag == 1) {
 16386  1795  0020               	movlb	0	; select bank0
 16387  1796  086A               	movf	_DimmerLights,w
 16388  1797  0086               	movwf	6
 16389  1798  3001               	movlw	1	; select bank2/3
 16390  1799  0087               	movwf	7
 16391  179A  1C01               	btfss	1,0
 16392  179B  0008               	return
 16393                           
 16394                           ;Dimmer_B1.c: 826: DimmerLights->SwFlag = 0;
 16395  179C  086A               	movf	_DimmerLights,w
 16396  179D  0086               	movwf	6
 16397  179E  3001               	movlw	1	; select bank2/3
 16398  179F  0087               	movwf	7
 16399  17A0  1001               	bcf	1,0
 16400                           
 16401                           ;Dimmer_B1.c: 827: if (DimmerLights->Status == 1) {
 16402  17A1  0A6A               	incf	_DimmerLights,w
 16403  17A2  0086               	movwf	6
 16404  17A3  3001               	movlw	1	; select bank2/3
 16405  17A4  0087               	movwf	7
 16406  17A5  1C01               	btfss	1,0
 16407  17A6  2FBD               	goto	l7921
 16408                           
 16409                           ;Dimmer_B1.c: 828: if (DimmerLights->DimmingSwFlag == 1) {
 16410  17A7  086A               	movf	_DimmerLights,w
 16411  17A8  0086               	movwf	6
 16412  17A9  3001               	movlw	1	; select bank2/3
 16413  17AA  0087               	movwf	7
 16414  17AB  1D81               	btfss	1,3
 16415  17AC  0008               	return
 16416                           
 16417                           ;Dimmer_B1.c: 829: DimmerLights->DimmingSwFlag = 0;
 16418  17AD  086A               	movf	_DimmerLights,w
 16419  17AE  0086               	movwf	6
 16420  17AF  3001               	movlw	1	; select bank2/3
 16421  17B0  0087               	movwf	7
 16422  17B1  1181               	bcf	1,3
 16423                           
 16424                           ;Dimmer_B1.c: 831: DimmerLights->DimmingTrigger = 1;
 16425  17B2  086A               	movf	_DimmerLights,w
 16426  17B3  0086               	movwf	6
 16427  17B4  3001               	movlw	1	; select bank2/3
 16428  17B5  0087               	movwf	7
 16429  17B6  1601               	bsf	1,4
 16430                           
 16431                           ;Dimmer_B1.c: 832: DimmerLights->DimmingSwitch = 0;
 16432  17B7  086A               	movf	_DimmerLights,w
 16433  17B8  0086               	movwf	6
 16434  17B9  3001               	movlw	1	; select bank2/3
 16435  17BA  0087               	movwf	7
 16436  17BB  1281               	bcf	1,5
 16437                           
 16438                           ;Dimmer_B1.c: 833: }
 16439                           ;Dimmer_B1.c: 834: } else {
 16440  17BC  0008               	return
 16441  17BD                     l7921:	
 16442                           
 16443                           ;Dimmer_B1.c: 837: DimmerLights->Trigger = 1;
 16444  17BD  086A               	movf	_DimmerLights,w
 16445  17BE  0086               	movwf	6
 16446  17BF  3001               	movlw	1	; select bank2/3
 16447  17C0  0087               	movwf	7
 16448  17C1  1481               	bsf	1,1
 16449                           
 16450                           ;Dimmer_B1.c: 838: DimmerLights->Switch = 0;
 16451  17C2  086A               	movf	_DimmerLights,w
 16452  17C3  0086               	movwf	6
 16453  17C4  3001               	movlw	1	; select bank2/3
 16454  17C5  0087               	movwf	7
 16455  17C6  1101               	bcf	1,2
 16456  17C7  0008               	return
 16457  17C8                     __end_of_setDimmerLights_SwOff:	
 16458                           
 16459                           	psect	text121
 16460  120C                     __ptext121:	
 16461 ;; *************** function _getDimmerLights_Status *****************
 16462 ;; Defined at:
 16463 ;;		line 1268 in file "../src/Dimmer_B1.c"
 16464 ;; Parameters:    Size  Location     Type
 16465 ;;  lights          1    wreg     unsigned char 
 16466 ;; Auto vars:     Size  Location     Type
 16467 ;;  lights          1    4[COMMON] unsigned char 
 16468 ;;  status          1    5[COMMON] unsigned char 
 16469 ;; Return value:  Size  Location     Type
 16470 ;;                  1    wreg      unsigned char 
 16471 ;; Registers used:
 16472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16473 ;; Tracked objects:
 16474 ;;		On entry : 0/0
 16475 ;;		On exit  : 0/0
 16476 ;;		Unchanged: 0/0
 16477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16482 ;;Total ram usage:        2 bytes
 16483 ;; Hardware stack levels used:    1
 16484 ;; Hardware stack levels required when called:    4
 16485 ;; This function calls:
 16486 ;;		_DimmerLights_SelectPointer
 16487 ;; This function is called by:
 16488 ;;		_DlyOff_Main
 16489 ;;		_setControl_Lights_Table
 16490 ;;		_setRFSW_Control
 16491 ;;		_setRFSW_AdjControl
 16492 ;;		_setRF_AdjControl
 16493 ;;		_DimmerLights_AssignationDimming
 16494 ;; This function uses a non-reentrant model
 16495 ;;
 16496                           
 16497                           
 16498                           ;psect for function _getDimmerLights_Status
 16499  120C                     _getDimmerLights_Status:	
 16500                           
 16501                           ;incstack = 0
 16502                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16503                           ;getDimmerLights_Status@lights stored from wreg
 16504  120C  00F4               	movwf	getDimmerLights_Status@lights
 16505                           
 16506                           ;Dimmer_B1.c: 1269: DimmerLights_SelectPointer(lights);
 16507  120D  0874               	movf	getDimmerLights_Status@lights,w
 16508  120E  3191  2158         	fcall	_DimmerLights_SelectPointer
 16509                           
 16510                           ;Dimmer_B1.c: 1270: char status = DimmerLights->Status == 1 ? 1 : 0;
 16511  1210  0020               	movlb	0	; select bank0
 16512  1211  0A6A               	incf	_DimmerLights,w
 16513  1212  0086               	movwf	6
 16514  1213  3001               	movlw	1	; select bank2/3
 16515  1214  0087               	movwf	7
 16516  1215  3000               	movlw	0
 16517  1216  1801               	btfsc	1,0
 16518  1217  3001               	movlw	1
 16519  1218  00F5               	movwf	getDimmerLights_Status@status
 16520                           
 16521                           ;Dimmer_B1.c: 1271: return status;
 16522  1219  0875               	movf	getDimmerLights_Status@status,w
 16523  121A  0008               	return
 16524  121B                     __end_of_getDimmerLights_Status:	
 16525                           
 16526                           	psect	text122
 16527  1158                     __ptext122:	
 16528 ;; *************** function _DimmerLights_SelectPointer *****************
 16529 ;; Defined at:
 16530 ;;		line 684 in file "../src/Dimmer_B1.c"
 16531 ;; Parameters:    Size  Location     Type
 16532 ;;  lights          1    wreg     unsigned char 
 16533 ;; Auto vars:     Size  Location     Type
 16534 ;;  lights          1    3[COMMON] unsigned char 
 16535 ;; Return value:  Size  Location     Type
 16536 ;;		None               void
 16537 ;; Registers used:
 16538 ;;		wreg
 16539 ;; Tracked objects:
 16540 ;;		On entry : 0/0
 16541 ;;		On exit  : 0/0
 16542 ;;		Unchanged: 0/0
 16543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16545 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16547 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16548 ;;Total ram usage:        2 bytes
 16549 ;; Hardware stack levels used:    1
 16550 ;; Hardware stack levels required when called:    3
 16551 ;; This function calls:
 16552 ;;		Nothing
 16553 ;; This function is called by:
 16554 ;;		_setDimmerLights_SwOn
 16555 ;;		_setDimmerLights_SwOff
 16556 ;;		_setDimmerLights_DimmingOn
 16557 ;;		_setDimmerLights_Main
 16558 ;;		_getDimmerLights_Status
 16559 ;;		_setDimmerLights_DimmingRun
 16560 ;;		_setRF_AdjControl
 16561 ;;		_DimmerLights_TwoPhase_Main
 16562 ;;		_setDimmerLights_Status
 16563 ;; This function uses a non-reentrant model
 16564 ;;
 16565                           
 16566                           
 16567                           ;psect for function _DimmerLights_SelectPointer
 16568  1158                     _DimmerLights_SelectPointer:	
 16569                           
 16570                           ;incstack = 0
 16571                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 16572                           ;DimmerLights_SelectPointer@lights stored from wreg
 16573  1158  00F3               	movwf	DimmerLights_SelectPointer@lights
 16574                           
 16575                           ;Dimmer_B1.c: 686: if (lights == 1) {
 16576  1159  0873               	movf	DimmerLights_SelectPointer@lights,w
 16577  115A  3A01               	xorlw	1
 16578  115B  1D03               	skipz
 16579  115C  0008               	return
 16580                           
 16581                           ;Dimmer_B1.c: 687: DimmerLights = &DimmerLights1;
 16582  115D  3053               	movlw	_DimmerLights1& (0+255)
 16583  115E  00F2               	movwf	??_DimmerLights_SelectPointer
 16584  115F  0872               	movf	??_DimmerLights_SelectPointer,w
 16585  1160  0020               	movlb	0	; select bank0
 16586  1161  00EA               	movwf	_DimmerLights
 16587  1162  0008               	return
 16588  1163                     __end_of_DimmerLights_SelectPointer:	
 16589                           
 16590                           	psect	text123
 16591  10BD                     __ptext123:	
 16592 ;; *************** function _DelayOff_Initialization *****************
 16593 ;; Defined at:
 16594 ;;		line 26 in file "../src/DelayOff_B1.c"
 16595 ;; Parameters:    Size  Location     Type
 16596 ;;		None
 16597 ;; Auto vars:     Size  Location     Type
 16598 ;;		None
 16599 ;; Return value:  Size  Location     Type
 16600 ;;		None               void
 16601 ;; Registers used:
 16602 ;;		wreg, status,2, status,0, pclath, cstack
 16603 ;; Tracked objects:
 16604 ;;		On entry : 0/0
 16605 ;;		On exit  : 0/0
 16606 ;;		Unchanged: 0/0
 16607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;Total ram usage:        0 bytes
 16613 ;; Hardware stack levels used:    1
 16614 ;; Hardware stack levels required when called:    5
 16615 ;; This function calls:
 16616 ;;		_DlyOff_Initialization
 16617 ;; This function is called by:
 16618 ;;		_main
 16619 ;; This function uses a non-reentrant model
 16620 ;;
 16621                           
 16622                           
 16623                           ;psect for function _DelayOff_Initialization
 16624  10BD                     _DelayOff_Initialization:	
 16625                           
 16626                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16627                           
 16628                           ;incstack = 0
 16629                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16630  10BD  3001               	movlw	1
 16631  10BE  3190  20E5         	fcall	_DlyOff_Initialization
 16632  10C0  0008               	return
 16633  10C1                     __end_of_DelayOff_Initialization:	
 16634                           
 16635                           	psect	text124
 16636  10E5                     __ptext124:	
 16637 ;; *************** function _DlyOff_Initialization *****************
 16638 ;; Defined at:
 16639 ;;		line 56 in file "../src/DelayOff_B1.c"
 16640 ;; Parameters:    Size  Location     Type
 16641 ;;  sw              1    wreg     unsigned char 
 16642 ;; Auto vars:     Size  Location     Type
 16643 ;;  sw              1    4[COMMON] unsigned char 
 16644 ;; Return value:  Size  Location     Type
 16645 ;;		None               void
 16646 ;; Registers used:
 16647 ;;		wreg, status,2, status,0, pclath, cstack
 16648 ;; Tracked objects:
 16649 ;;		On entry : 0/0
 16650 ;;		On exit  : 0/0
 16651 ;;		Unchanged: 0/0
 16652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16654 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16656 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;Total ram usage:        1 bytes
 16658 ;; Hardware stack levels used:    1
 16659 ;; Hardware stack levels required when called:    4
 16660 ;; This function calls:
 16661 ;;		_DelayOffPointSelect
 16662 ;; This function is called by:
 16663 ;;		_DelayOff_Initialization
 16664 ;; This function uses a non-reentrant model
 16665 ;;
 16666                           
 16667                           
 16668                           ;psect for function _DlyOff_Initialization
 16669  10E5                     _DlyOff_Initialization:	
 16670                           
 16671                           ;incstack = 0
 16672                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16673                           ;DlyOff_Initialization@sw stored from wreg
 16674  10E5  00F4               	movwf	DlyOff_Initialization@sw
 16675                           
 16676                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16677  10E6  0874               	movf	DlyOff_Initialization@sw,w
 16678  10E7  3191  214E         	fcall	_DelayOffPointSelect
 16679  10E9  0008               	return
 16680  10EA                     __end_of_DlyOff_Initialization:	
 16681                           
 16682                           	psect	text125
 16683  114E                     __ptext125:	
 16684 ;; *************** function _DelayOffPointSelect *****************
 16685 ;; Defined at:
 16686 ;;		line 7 in file "../src/DelayOff_B1.c"
 16687 ;; Parameters:    Size  Location     Type
 16688 ;;  sw              1    wreg     unsigned char 
 16689 ;; Auto vars:     Size  Location     Type
 16690 ;;  sw              1    3[COMMON] unsigned char 
 16691 ;; Return value:  Size  Location     Type
 16692 ;;		None               void
 16693 ;; Registers used:
 16694 ;;		wreg
 16695 ;; Tracked objects:
 16696 ;;		On entry : 0/0
 16697 ;;		On exit  : 0/0
 16698 ;;		Unchanged: 0/0
 16699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16702 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16703 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16704 ;;Total ram usage:        2 bytes
 16705 ;; Hardware stack levels used:    1
 16706 ;; Hardware stack levels required when called:    3
 16707 ;; This function calls:
 16708 ;;		Nothing
 16709 ;; This function is called by:
 16710 ;;		_DlyOff_Initialization
 16711 ;;		_DlyOff_Main
 16712 ;;		_setDelayOff_GO
 16713 ;;		_getDelayOff_GO
 16714 ;; This function uses a non-reentrant model
 16715 ;;
 16716                           
 16717                           
 16718                           ;psect for function _DelayOffPointSelect
 16719  114E                     _DelayOffPointSelect:	
 16720                           
 16721                           ;incstack = 0
 16722                           ; Regs used in _DelayOffPointSelect: [wreg]
 16723                           ;DelayOffPointSelect@sw stored from wreg
 16724  114E  00F3               	movwf	DelayOffPointSelect@sw
 16725                           
 16726                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16727  114F  0873               	movf	DelayOffPointSelect@sw,w
 16728  1150  3A01               	xorlw	1
 16729  1151  1D03               	skipz
 16730  1152  0008               	return
 16731                           
 16732                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16733  1153  3065               	movlw	_DlySw1& (0+255)
 16734  1154  00F2               	movwf	??_DelayOffPointSelect
 16735  1155  0872               	movf	??_DelayOffPointSelect,w
 16736  1156  00FB               	movwf	_DelayOff
 16737  1157  0008               	return
 16738  1158                     __end_of_DelayOffPointSelect:	
 16739                           
 16740                           	psect	text126
 16741  0947                     __ptext126:	
 16742 ;; *************** function _Buzzer_Main *****************
 16743 ;; Defined at:
 16744 ;;		line 46 in file "../src/Buzzer_B1.c"
 16745 ;; Parameters:    Size  Location     Type
 16746 ;;		None
 16747 ;; Auto vars:     Size  Location     Type
 16748 ;;		None
 16749 ;; Return value:  Size  Location     Type
 16750 ;;		None               void
 16751 ;; Registers used:
 16752 ;;		wreg, status,2, status,0
 16753 ;; Tracked objects:
 16754 ;;		On entry : 0/0
 16755 ;;		On exit  : 0/0
 16756 ;;		Unchanged: 0/0
 16757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;Total ram usage:        1 bytes
 16763 ;; Hardware stack levels used:    1
 16764 ;; Hardware stack levels required when called:    3
 16765 ;; This function calls:
 16766 ;;		Nothing
 16767 ;; This function is called by:
 16768 ;;		_main
 16769 ;; This function uses a non-reentrant model
 16770 ;;
 16771                           
 16772                           
 16773                           ;psect for function _Buzzer_Main
 16774  0947                     _Buzzer_Main:	
 16775                           
 16776                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16777                           
 16778                           ;incstack = 0
 16779                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16780  0947  0021               	movlb	1	; select bank1
 16781  0948  1CCC               	btfss	_Buz1^(0+128),1
 16782  0949  0008               	return
 16783                           
 16784                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16785  094A  3001               	movlw	1
 16786  094B  07CD               	addwf	(_Buz1^(0+128)+1),f
 16787  094C  3000               	movlw	0
 16788  094D  3DCE               	addwfc	((_Buz1+1)^(0+128)+1),f
 16789                           
 16790                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16791  094E  0853               	movf	((_Buz1+1)^(0+128)+6),w
 16792  094F  024E               	subwf	((_Buz1+1)^(0+128)+1),w
 16793  0950  1D03               	skipz
 16794  0951  2954               	goto	u6465
 16795  0952  0852               	movf	(_Buz1^(0+128)+6),w
 16796  0953  024D               	subwf	(_Buz1^(0+128)+1),w
 16797  0954                     u6465:	
 16798  0954  1C03               	skipc
 16799  0955  0008               	return
 16800                           
 16801                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16802  0956  01CD               	clrf	(_Buz1^(0+128)+1)
 16803  0957  01CE               	clrf	((_Buz1+1)^(0+128)+1)
 16804                           
 16805                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16806  0958  12CC               	bcf	_Buz1^(0+128),5
 16807  0959  0020               	movlb	0	; select bank0
 16808  095A  1D8D               	btfss	13,3	;volatile
 16809  095B  295E               	goto	l7043
 16810  095C  0021               	movlb	1	; select bank1
 16811  095D  16CC               	bsf	_Buz1^(0+128),5
 16812  095E                     l7043:	
 16813                           
 16814                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16815  095E  0021               	movlb	1	; select bank1
 16816  095F  1ACC               	btfsc	_Buz1^(0+128),5
 16817  0960  2986               	goto	l94
 16818                           
 16819                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16820  0961  08CF               	movf	(_Buz1^(0+128)+3),f
 16821  0962  1D03               	skipz
 16822  0963  2982               	goto	l95
 16823                           
 16824                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16825  0964  1DCC               	btfss	_Buz1^(0+128),3
 16826  0965  2972               	goto	l96
 16827                           
 16828                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16829  0966  11CC               	bcf	_Buz1^(0+128),3
 16830                           
 16831                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16832  0967  0850               	movf	(_Buz1^(0+128)+4),w
 16833  0968  00F2               	movwf	??_Buzzer_Main
 16834  0969  0872               	movf	??_Buzzer_Main,w
 16835  096A  00CF               	movwf	(_Buz1^(0+128)+3)
 16836                           
 16837                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16838  096B  0855               	movf	((_Buz1+1)^(0+128)+8),w
 16839  096C  01D3               	clrf	((_Buz1+1)^(0+128)+6)
 16840  096D  07D3               	addwf	((_Buz1+1)^(0+128)+6),f
 16841  096E  0854               	movf	(_Buz1^(0+128)+8),w
 16842  096F  01D2               	clrf	(_Buz1^(0+128)+6)
 16843  0970  07D2               	addwf	(_Buz1^(0+128)+6),f
 16844                           
 16845                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16846  0971  0008               	return
 16847  0972                     l96:	
 16848  0972  1E4C               	btfss	_Buz1^(0+128),4
 16849  0973  2980               	goto	l98
 16850                           
 16851                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16852  0974  124C               	bcf	_Buz1^(0+128),4
 16853                           
 16854                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16855  0975  0851               	movf	(_Buz1^(0+128)+5),w
 16856  0976  00F2               	movwf	??_Buzzer_Main
 16857  0977  0872               	movf	??_Buzzer_Main,w
 16858  0978  00CF               	movwf	(_Buz1^(0+128)+3)
 16859                           
 16860                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16861  0979  0857               	movf	((_Buz1+1)^(0+128)+10),w
 16862  097A  01D3               	clrf	((_Buz1+1)^(0+128)+6)
 16863  097B  07D3               	addwf	((_Buz1+1)^(0+128)+6),f
 16864  097C  0856               	movf	(_Buz1^(0+128)+10),w
 16865  097D  01D2               	clrf	(_Buz1^(0+128)+6)
 16866  097E  07D2               	addwf	(_Buz1^(0+128)+6),f
 16867                           
 16868                           ;Buzzer_B1.c: 62: } else {
 16869  097F  0008               	return
 16870  0980                     l98:	
 16871                           
 16872                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16873  0980  10CC               	bcf	_Buz1^(0+128),1
 16874                           
 16875                           ;Buzzer_B1.c: 64: }
 16876                           ;Buzzer_B1.c: 65: } else {
 16877  0981  0008               	return
 16878  0982                     l95:	
 16879                           
 16880                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16881  0982  16CC               	bsf	_Buz1^(0+128),5
 16882                           
 16883                           ;Buzzer_B1.c: 68: RB3 = 1;
 16884  0983  0020               	movlb	0	; select bank0
 16885  0984  158D               	bsf	13,3	;volatile
 16886                           
 16887                           ;Buzzer_B1.c: 69: }
 16888                           ;Buzzer_B1.c: 70: } else {
 16889  0985  0008               	return
 16890  0986                     l94:	
 16891                           
 16892                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 16893  0986  12CC               	bcf	_Buz1^(0+128),5
 16894                           
 16895                           ;Buzzer_B1.c: 73: RB3 = 0;
 16896  0987  0020               	movlb	0	; select bank0
 16897  0988  118D               	bcf	13,3	;volatile
 16898                           
 16899                           ;Buzzer_B1.c: 75: Buz1.Count--;
 16900  0989  3001               	movlw	1
 16901  098A  0021               	movlb	1	; select bank1
 16902  098B  02CF               	subwf	(_Buz1^(0+128)+3),f
 16903  098C  0008               	return
 16904  098D                     __end_of_Buzzer_Main:	
 16905                           
 16906                           	psect	text127
 16907  10AE                     __ptext127:	
 16908 ;; *************** function _Buzzer_Initialization *****************
 16909 ;; Defined at:
 16910 ;;		line 11 in file "../src/Buzzer_B1.c"
 16911 ;; Parameters:    Size  Location     Type
 16912 ;;		None
 16913 ;; Auto vars:     Size  Location     Type
 16914 ;;		None
 16915 ;; Return value:  Size  Location     Type
 16916 ;;		None               void
 16917 ;; Registers used:
 16918 ;;		None
 16919 ;; Tracked objects:
 16920 ;;		On entry : 0/0
 16921 ;;		On exit  : 0/0
 16922 ;;		Unchanged: 0/0
 16923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16928 ;;Total ram usage:        0 bytes
 16929 ;; Hardware stack levels used:    1
 16930 ;; Hardware stack levels required when called:    3
 16931 ;; This function calls:
 16932 ;;		Nothing
 16933 ;; This function is called by:
 16934 ;;		_main
 16935 ;; This function uses a non-reentrant model
 16936 ;;
 16937                           
 16938                           
 16939                           ;psect for function _Buzzer_Initialization
 16940  10AE                     _Buzzer_Initialization:	
 16941                           
 16942                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16943                           
 16944                           ;incstack = 0
 16945                           ; Regs used in _Buzzer_Initialization: []
 16946  10AE  0021               	movlb	1	; select bank1
 16947  10AF  144C               	bsf	_Buz1^(0+128),0
 16948  10B0  0008               	return
 16949  10B1                     __end_of_Buzzer_Initialization:	
 16950                           
 16951                           	psect	intentry
 16952  0004                     __pintentry:	
 16953 ;; *************** function _ISR *****************
 16954 ;; Defined at:
 16955 ;;		line 116 in file "../src/MCU_B1.c"
 16956 ;; Parameters:    Size  Location     Type
 16957 ;;		None
 16958 ;; Auto vars:     Size  Location     Type
 16959 ;;		None
 16960 ;; Return value:  Size  Location     Type
 16961 ;;		None               void
 16962 ;; Registers used:
 16963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16964 ;; Tracked objects:
 16965 ;;		On entry : 0/0
 16966 ;;		On exit  : 0/0
 16967 ;;		Unchanged: 0/0
 16968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16972 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16973 ;;Total ram usage:        1 bytes
 16974 ;; Hardware stack levels used:    1
 16975 ;; Hardware stack levels required when called:    2
 16976 ;; This function calls:
 16977 ;;		_IOC_ISR
 16978 ;;		_TMR1_ISR
 16979 ;; This function is called by:
 16980 ;;		Interrupt level 1
 16981 ;; This function uses a non-reentrant model
 16982 ;;
 16983                           
 16984  0004                     _ISR:	
 16985                           
 16986                           ;incstack = 0
 16987                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16988  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16989  0005  3180               	pagesel	$
 16990  0006  0020               	movlb	0	; select bank0
 16991  0007  087F               	movf	127,w
 16992  0008  00F1               	movwf	??_ISR
 16993                           
 16994                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 16995  0009  0021               	movlb	1	; select bank1
 16996  000A  1C11               	btfss	17,0	;volatile
 16997  000B  2812               	goto	i1l7387
 16998  000C  0020               	movlb	0	; select bank0
 16999  000D  1C11               	btfss	17,0	;volatile
 17000  000E  2812               	goto	i1l7387
 17001                           
 17002                           ;MCU_B1.c: 126: TMR1_ISR();
 17003  000F  3194  2467  3180   	fcall	_TMR1_ISR
 17004  0012                     i1l7387:	
 17005                           
 17006                           ;MCU_B1.c: 127: }
 17007                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 17008  0012  198B               	btfsc	11,3	;volatile
 17009  0013  1C0B               	btfss	11,0	;volatile
 17010  0014  281A               	goto	i1l1220
 17011  0015  0027               	movlb	7	; select bank7
 17012  0016  1D16               	btfss	22,2	;volatile
 17013  0017  281A               	goto	i1l1220
 17014                           
 17015                           ;MCU_B1.c: 139: IOC_ISR();
 17016  0018  3191  212A         	fcall	_IOC_ISR
 17017  001A                     i1l1220:	
 17018                           ;MCU_B1.c: 140: }
 17019                           ;MCU_B1.c: 148: return;
 17020                           
 17021  001A  0871               	movf	??_ISR,w
 17022  001B  0020               	movlb	0	; select bank0
 17023  001C  00FF               	movwf	127
 17024  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 17025  001E  0009               	retfie
 17026  001F                     __end_of_ISR:	
 17027                           
 17028                           	psect	text129
 17029  1467                     __ptext129:	
 17030 ;; *************** function _TMR1_ISR *****************
 17031 ;; Defined at:
 17032 ;;		line 236 in file "../src/MCU_B1.c"
 17033 ;; Parameters:    Size  Location     Type
 17034 ;;		None
 17035 ;; Auto vars:     Size  Location     Type
 17036 ;;		None
 17037 ;; Return value:  Size  Location     Type
 17038 ;;		None               void
 17039 ;; Registers used:
 17040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17041 ;; Tracked objects:
 17042 ;;		On entry : 0/0
 17043 ;;		On exit  : 0/0
 17044 ;;		Unchanged: 0/0
 17045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17050 ;;Total ram usage:        0 bytes
 17051 ;; Hardware stack levels used:    1
 17052 ;; Hardware stack levels required when called:    1
 17053 ;; This function calls:
 17054 ;;		_DimmerLights_TMR_1
 17055 ;; This function is called by:
 17056 ;;		_ISR
 17057 ;; This function uses a non-reentrant model
 17058 ;;
 17059                           
 17060                           
 17061                           ;psect for function _TMR1_ISR
 17062  1467                     _TMR1_ISR:	
 17063                           
 17064                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 17065                           
 17066                           ;incstack = 0
 17067                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17068  1467  3197  2758  3194   	fcall	_DimmerLights_TMR_1
 17069                           
 17070                           ;MCU_B1.c: 269: Timer1.Count++;
 17071  146A  3001               	movlw	1
 17072  146B  0021               	movlb	1	; select bank1
 17073  146C  07D9               	addwf	(_Timer1^(0+128)+1),f
 17074  146D  3000               	movlw	0
 17075  146E  3DDA               	addwfc	((_Timer1+1)^(0+128)+1),f
 17076                           
 17077                           ;MCU_B1.c: 270: if (Timer1.Count == (int)(20*10)) {
 17078  146F  3001               	movlw	1
 17079  1470  3ED8               	addlw	_Timer1& (0+255)
 17080  1471  0086               	movwf	6
 17081  1472  0187               	clrf	7
 17082  1473  3F40               	moviw [0]fsr1
 17083  1474  3AC8               	xorlw	200
 17084  1475  1D03               	skipz
 17085  1476  2C79               	goto	u652_25
 17086  1477  3F41               	moviw [1]fsr1
 17087  1478  3A00               	xorlw	0
 17088  1479                     u652_25:	
 17089  1479  1D03               	skipz
 17090  147A  2C7E               	goto	i1l7091
 17091                           
 17092                           ;MCU_B1.c: 271: Timer1.Count = 0;
 17093  147B  01D9               	clrf	(_Timer1^(0+128)+1)
 17094  147C  01DA               	clrf	((_Timer1+1)^(0+128)+1)
 17095                           
 17096                           ;MCU_B1.c: 272: Timer1.Timeout = 1;
 17097  147D  1458               	bsf	_Timer1^(0+128),0
 17098  147E                     i1l7091:	
 17099                           
 17100                           ;MCU_B1.c: 273: }
 17101                           ;MCU_B1.c: 275: TMR1H = (int)((65536-1480)/256);
 17102  147E  30FA               	movlw	250
 17103  147F  0020               	movlb	0	; select bank0
 17104  1480  0097               	movwf	23	;volatile
 17105                           
 17106                           ;MCU_B1.c: 276: TMR1L = (int)((65536-1480)%256);
 17107  1481  3038               	movlw	56
 17108  1482  0096               	movwf	22	;volatile
 17109                           
 17110                           ;MCU_B1.c: 277: TMR1IF = 0;
 17111  1483  1011               	bcf	17,0	;volatile
 17112  1484  0008               	return
 17113  1485                     __end_of_TMR1_ISR:	
 17114                           
 17115                           	psect	text130
 17116  1758                     __ptext130:	
 17117 ;; *************** function _DimmerLights_TMR_1 *****************
 17118 ;; Defined at:
 17119 ;;		line 1730 in file "../src/Dimmer_B1.c"
 17120 ;; Parameters:    Size  Location     Type
 17121 ;;		None
 17122 ;; Auto vars:     Size  Location     Type
 17123 ;;		None
 17124 ;; Return value:  Size  Location     Type
 17125 ;;		None               void
 17126 ;; Registers used:
 17127 ;;		wreg, status,2, status,0
 17128 ;; Tracked objects:
 17129 ;;		On entry : 0/0
 17130 ;;		On exit  : 0/0
 17131 ;;		Unchanged: 0/0
 17132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17136 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17137 ;;Total ram usage:        1 bytes
 17138 ;; Hardware stack levels used:    1
 17139 ;; This function calls:
 17140 ;;		Nothing
 17141 ;; This function is called by:
 17142 ;;		_TMR1_ISR
 17143 ;; This function uses a non-reentrant model
 17144 ;;
 17145                           
 17146                           
 17147                           ;psect for function _DimmerLights_TMR_1
 17148  1758                     _DimmerLights_TMR_1:	
 17149                           
 17150                           ;Dimmer_B1.c: 1733: if (DimmerIntr1.Start == 1) {
 17151                           
 17152                           ;incstack = 0
 17153                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 17154  1758  0021               	movlb	1	; select bank1
 17155  1759  1D20               	btfss	_DimmerIntr1^(0+128),2
 17156  175A  2F7E               	goto	i1l845
 17157                           
 17158                           ;Dimmer_B1.c: 1734: DimmerIntr1.Count++;
 17159  175B  3001               	movlw	1
 17160  175C  00F0               	movwf	??_DimmerLights_TMR_1
 17161  175D  0870               	movf	??_DimmerLights_TMR_1,w
 17162  175E  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 17163                           
 17164                           ;Dimmer_B1.c: 1736: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd_Value) {
 17165  175F  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 17166  1760  062F               	xorwf	(_DimmerIntr1^(0+128)+15),w
 17167  1761  1D03               	skipz
 17168  1762  2F65               	goto	i1l6703
 17169                           
 17170                           ;Dimmer_B1.c: 1737: DimmerIntr1.Count = 0;
 17171  1763  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 17172                           
 17173                           ;Dimmer_B1.c: 1738: DimmerIntr1.Start = 0;
 17174  1764  1120               	bcf	_DimmerIntr1^(0+128),2
 17175  1765                     i1l6703:	
 17176                           
 17177                           ;Dimmer_B1.c: 1739: }
 17178                           ;Dimmer_B1.c: 1743: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2_Value) {
 17179  1765  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 17180  1766  062C               	xorwf	(_DimmerIntr1^(0+128)+12),w
 17181  1767  1903               	btfsc	3,2
 17182                           
 17183                           ;Dimmer_B1.c: 1744: if (DimmerIntr1.ControlStatus == 1) {
 17184  1768  1DA0               	btfss	_DimmerIntr1^(0+128),3
 17185  1769  2F6C               	goto	i1l6709
 17186                           
 17187                           ;Dimmer_B1.c: 1745: RB1 = 0;
 17188  176A  0020               	movlb	0	; select bank0
 17189  176B  108D               	bcf	13,1	;volatile
 17190  176C                     i1l6709:	
 17191                           
 17192                           ;Dimmer_B1.c: 1746: }
 17193                           ;Dimmer_B1.c: 1747: }
 17194                           ;Dimmer_B1.c: 1750: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3_Value) {
 17195  176C  0021               	movlb	1	; select bank1
 17196  176D  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 17197  176E  062D               	xorwf	(_DimmerIntr1^(0+128)+13),w
 17198  176F  1903               	btfsc	3,2
 17199                           
 17200                           ;Dimmer_B1.c: 1751: if (DimmerIntr1.ControlStatus == 1) {
 17201  1770  1DA0               	btfss	_DimmerIntr1^(0+128),3
 17202  1771  2F74               	goto	i1l6715
 17203                           
 17204                           ;Dimmer_B1.c: 1752: RB1 = 1;
 17205  1772  0020               	movlb	0	; select bank0
 17206  1773  148D               	bsf	13,1	;volatile
 17207  1774                     i1l6715:	
 17208                           
 17209                           ;Dimmer_B1.c: 1753: }
 17210                           ;Dimmer_B1.c: 1754: }
 17211                           ;Dimmer_B1.c: 1757: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4_Value) {
 17212  1774  0021               	movlb	1	; select bank1
 17213  1775  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 17214  1776  062E               	xorwf	(_DimmerIntr1^(0+128)+14),w
 17215  1777  1D03               	skipz
 17216  1778  0008               	return
 17217                           
 17218                           ;Dimmer_B1.c: 1758: if (DimmerIntr1.ControlStatus == 1) {
 17219  1779  1DA0               	btfss	_DimmerIntr1^(0+128),3
 17220  177A  0008               	return
 17221                           
 17222                           ;Dimmer_B1.c: 1759: RB1 = 0;
 17223  177B  0020               	movlb	0	; select bank0
 17224  177C  108D               	bcf	13,1	;volatile
 17225                           
 17226                           ;Dimmer_B1.c: 1760: }
 17227                           ;Dimmer_B1.c: 1763: }
 17228                           ;Dimmer_B1.c: 1765: } else {
 17229  177D  0008               	return
 17230  177E                     i1l845:	
 17231                           
 17232                           ;Dimmer_B1.c: 1766: if (DimmerIntr1.GO == 1) {
 17233  177E  1C20               	btfss	_DimmerIntr1^(0+128),0
 17234  177F  0008               	return
 17235                           
 17236                           ;Dimmer_B1.c: 1767: DimmerIntr1.Count++;
 17237  1780  3001               	movlw	1
 17238  1781  00F0               	movwf	??_DimmerLights_TMR_1
 17239  1782  0870               	movf	??_DimmerLights_TMR_1,w
 17240  1783  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 17241                           
 17242                           ;Dimmer_B1.c: 1768: if (DimmerIntr1.Count == 7) {
 17243  1784  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 17244  1785  3A07               	xorlw	7
 17245  1786  1D03               	skipz
 17246  1787  0008               	return
 17247                           
 17248                           ;Dimmer_B1.c: 1769: DimmerIntr1.Count = 0;
 17249  1788  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 17250                           
 17251                           ;Dimmer_B1.c: 1770: DimmerIntr1.GO = 0;
 17252  1789  1020               	bcf	_DimmerIntr1^(0+128),0
 17253                           
 17254                           ;Dimmer_B1.c: 1771: DimmerIntr1.Start = 1;
 17255  178A  1520               	bsf	_DimmerIntr1^(0+128),2
 17256                           
 17257                           ;Dimmer_B1.c: 1773: if (DimmerIntr1.ControlStatus == 1) {
 17258  178B  1DA0               	btfss	_DimmerIntr1^(0+128),3
 17259  178C  0008               	return
 17260                           
 17261                           ;Dimmer_B1.c: 1774: RB1 = 1;
 17262  178D  0020               	movlb	0	; select bank0
 17263  178E  148D               	bsf	13,1	;volatile
 17264  178F  0008               	return
 17265  1790                     __end_of_DimmerLights_TMR_1:	
 17266                           
 17267                           	psect	text131
 17268  112A                     __ptext131:	
 17269 ;; *************** function _IOC_ISR *****************
 17270 ;; Defined at:
 17271 ;;		line 396 in file "../src/MCU_B1.c"
 17272 ;; Parameters:    Size  Location     Type
 17273 ;;		None
 17274 ;; Auto vars:     Size  Location     Type
 17275 ;;		None
 17276 ;; Return value:  Size  Location     Type
 17277 ;;		None               void
 17278 ;; Registers used:
 17279 ;;		wreg, status,2, status,0, pclath, cstack
 17280 ;; Tracked objects:
 17281 ;;		On entry : 0/0
 17282 ;;		On exit  : 0/0
 17283 ;;		Unchanged: 0/0
 17284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17289 ;;Total ram usage:        0 bytes
 17290 ;; Hardware stack levels used:    1
 17291 ;; Hardware stack levels required when called:    1
 17292 ;; This function calls:
 17293 ;;		_DimmerLights_IOC_1
 17294 ;; This function is called by:
 17295 ;;		_ISR
 17296 ;; This function uses a non-reentrant model
 17297 ;;
 17298                           
 17299                           
 17300                           ;psect for function _IOC_ISR
 17301  112A                     _IOC_ISR:	
 17302                           
 17303                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 17304                           
 17305                           ;incstack = 0
 17306                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 17307  112A  0021               	movlb	1	; select bank1
 17308  112B  1C3F               	btfss	_myMain^(0+128),0
 17309  112C  292F               	goto	i1l7101
 17310                           
 17311                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 17312  112D  3196  261F         	fcall	_DimmerLights_IOC_1
 17313  112F                     i1l7101:	
 17314                           
 17315                           ;MCU_B1.c: 418: }
 17316                           ;MCU_B1.c: 420: IOCBF2 = 0;
 17317  112F  0027               	movlb	7	; select bank7
 17318  1130  1116               	bcf	22,2	;volatile
 17319                           
 17320                           ;MCU_B1.c: 421: IOCIF = 0;
 17321  1131  100B               	bcf	11,0	;volatile
 17322  1132  0008               	return
 17323  1133                     __end_of_IOC_ISR:	
 17324                           
 17325                           	psect	text132
 17326  161F                     __ptext132:	
 17327 ;; *************** function _DimmerLights_IOC_1 *****************
 17328 ;; Defined at:
 17329 ;;		line 1816 in file "../src/Dimmer_B1.c"
 17330 ;; Parameters:    Size  Location     Type
 17331 ;;		None
 17332 ;; Auto vars:     Size  Location     Type
 17333 ;;		None
 17334 ;; Return value:  Size  Location     Type
 17335 ;;		None               void
 17336 ;; Registers used:
 17337 ;;		wreg, status,2, status,0
 17338 ;; Tracked objects:
 17339 ;;		On entry : 0/0
 17340 ;;		On exit  : 0/0
 17341 ;;		Unchanged: 0/0
 17342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17345 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17346 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17347 ;;Total ram usage:        1 bytes
 17348 ;; Hardware stack levels used:    1
 17349 ;; This function calls:
 17350 ;;		Nothing
 17351 ;; This function is called by:
 17352 ;;		_IOC_ISR
 17353 ;; This function uses a non-reentrant model
 17354 ;;
 17355                           
 17356                           
 17357                           ;psect for function _DimmerLights_IOC_1
 17358  161F                     _DimmerLights_IOC_1:	
 17359                           
 17360                           ;Dimmer_B1.c: 1830: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 17361                           
 17362                           ;incstack = 0
 17363                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0]
 17364  161F  0021               	movlb	1	; select bank1
 17365  1620  1920               	btfsc	_DimmerIntr1^(0+128),2
 17366  1621  0008               	return
 17367  1622  1820               	btfsc	_DimmerIntr1^(0+128),0
 17368  1623  0008               	return
 17369                           
 17370                           ;Dimmer_B1.c: 1832: if (RB2 != DimmerIntr1.Status) {
 17371  1624  0E21               	swapf	(_DimmerIntr1^(0+128)+1),w
 17372  1625  0C89               	rrf	9,f
 17373  1626  3901               	andlw	1
 17374  1627  00F0               	movwf	??_DimmerLights_IOC_1
 17375  1628  3000               	movlw	0
 17376  1629  0020               	movlb	0	; select bank0
 17377  162A  190D               	btfsc	13,2	;volatile
 17378  162B  3001               	movlw	1
 17379  162C  0670               	xorwf	??_DimmerLights_IOC_1,w
 17380  162D  1903               	skipnz
 17381  162E  0008               	return
 17382                           
 17383                           ;Dimmer_B1.c: 1835: DimmerIntr1.Count = 0;
 17384  162F  0021               	movlb	1	; select bank1
 17385  1630  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 17386                           
 17387                           ;Dimmer_B1.c: 1836: DimmerIntr1.GO = 1;
 17388  1631  1420               	bsf	_DimmerIntr1^(0+128),0
 17389                           
 17390                           ;Dimmer_B1.c: 1838: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 17391  1632  1E20               	btfss	_DimmerIntr1^(0+128),4
 17392  1633  1B20               	btfsc	_DimmerIntr1^(0+128),6
 17393                           
 17394                           ;Dimmer_B1.c: 1839: DimmerIntr1.Tune = 1;
 17395  1634  14A0               	bsf	_DimmerIntr1^(0+128),1
 17396                           
 17397                           ;Dimmer_B1.c: 1840: }
 17398                           ;Dimmer_B1.c: 1842: if (DimmerIntr1.Calculate == 1) {
 17399  1635  1FA1               	btfss	(_DimmerIntr1^(0+128)+1),7
 17400  1636  2E48               	goto	i1l6753
 17401                           
 17402                           ;Dimmer_B1.c: 1843: DimmerIntr1.Calculate = 0;
 17403  1637  13A1               	bcf	(_DimmerIntr1^(0+128)+1),7
 17404                           
 17405                           ;Dimmer_B1.c: 1844: DimmerIntr1.TuneEnd_Value = DimmerIntr1.TuneEnd;
 17406  1638  082B               	movf	(_DimmerIntr1^(0+128)+11),w
 17407  1639  00F0               	movwf	??_DimmerLights_IOC_1
 17408  163A  0870               	movf	??_DimmerLights_IOC_1,w
 17409  163B  00AF               	movwf	(_DimmerIntr1^(0+128)+15)
 17410                           
 17411                           ;Dimmer_B1.c: 1845: DimmerIntr1.TuneValue2_Value = DimmerIntr1.TuneValue2;
 17412  163C  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 17413  163D  00F0               	movwf	??_DimmerLights_IOC_1
 17414  163E  0870               	movf	??_DimmerLights_IOC_1,w
 17415  163F  00AC               	movwf	(_DimmerIntr1^(0+128)+12)
 17416                           
 17417                           ;Dimmer_B1.c: 1846: DimmerIntr1.TuneValue3_Value = DimmerIntr1.TuneValue3;
 17418  1640  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 17419  1641  00F0               	movwf	??_DimmerLights_IOC_1
 17420  1642  0870               	movf	??_DimmerLights_IOC_1,w
 17421  1643  00AD               	movwf	(_DimmerIntr1^(0+128)+13)
 17422                           
 17423                           ;Dimmer_B1.c: 1847: DimmerIntr1.TuneValue4_Value = DimmerIntr1.TuneValue4;
 17424  1644  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 17425  1645  00F0               	movwf	??_DimmerLights_IOC_1
 17426  1646  0870               	movf	??_DimmerLights_IOC_1,w
 17427  1647  00AE               	movwf	(_DimmerIntr1^(0+128)+14)
 17428  1648                     i1l6753:	
 17429                           
 17430                           ;Dimmer_B1.c: 1848: }
 17431                           ;Dimmer_B1.c: 1853: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 17432  1648  12A1               	bcf	(_DimmerIntr1^(0+128)+1),5
 17433  1649  0020               	movlb	0	; select bank0
 17434  164A  1D0D               	btfss	13,2	;volatile
 17435  164B  0008               	return
 17436  164C  0021               	movlb	1	; select bank1
 17437  164D  16A1               	bsf	(_DimmerIntr1^(0+128)+1),5
 17438  164E  0008               	return
 17439  164F                     __end_of_DimmerLights_IOC_1:	
 17440  007E                     btemp	set	126	;btemp
 17441  007E                     pic14e$flags	set	126
 17442  007E                     wtemp	set	126
 17443  007E                     wtemp0	set	126
 17444  0080                     wtemp1	set	128
 17445  0082                     wtemp2	set	130
 17446  0084                     wtemp3	set	132
 17447  0086                     wtemp4	set	134
 17448  0088                     wtemp5	set	136
 17449  007F                     wtemp6	set	127
 17450  007E                     ttemp	set	126
 17451  007E                     ttemp0	set	126
 17452  0081                     ttemp1	set	129
 17453  0084                     ttemp2	set	132
 17454  0087                     ttemp3	set	135
 17455  007F                     ttemp4	set	127
 17456  007E                     ltemp	set	126
 17457  007E                     ltemp0	set	126
 17458  0082                     ltemp1	set	130
 17459  0086                     ltemp2	set	134
 17460  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         194
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     74      77
    BANK1            80      4      80
    BANK2            80      0      78
    BANK3            80      5      74
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights1(BANK2[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_RF_getCommand
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setControl_Lights_Table->_setRF_AdjControl
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_getCommand->_getBuz_GO
    _RF_Initialization->_setRF_Initialization
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setLED
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _getDelayOff_GO->_DelayOffPointSelect
    _DimmerIntr_ValueCalculate->_Division
    _DimmerIntr_Initialization->_Division
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _DimmerLights_DimmingFunction->_DimmerIntr_ValueCalculate
    _DimmerIntr_ValueCalculate->_Division
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  161300
                                              0 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1601
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3839
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3839
                                              9 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      62
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1069
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1069
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   52308
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           5     5      0   52308
                                              0 BANK3      5     5      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                  _RF_Initialization
                      _RF_getCommand
                            ___lwdiv
                          _getRxData
                            _setData
 ---------------------------------------------------------------------------------
 (3) _setData                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   48075
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4637
                                             61 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   43370
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     393
                                              6 COMMON     4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11575
                                             69 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   26130
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
                             _setBuz
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     197
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     657
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RF_getCommand                                        4     2      2     151
                                              8 COMMON     2     0      2
                                              0 BANK0      2     2      0
                          _getBuz_GO
                    _getRF_KeyStatus
 ---------------------------------------------------------------------------------
 (4) _getRF_KeyStatus                                      3     3      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _getBuz_GO                                            6     4      2      34
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (4) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     620
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     552
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1100
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1100
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2251
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    2066
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1936
                                              6 COMMON     2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1726
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       5     5      0    1146
                                              6 COMMON     1     1      0
                                              0 BANK0      4     4      0
           _getMain_All_Error_Status
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             2     2      0      34
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   57810
       _DimmerLights_DimmingFunction
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   57099
                                             73 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   33233
                                             69 BANK0      4     3      1
          _DimmerIntr_ValueCalculate
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1007
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     222
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     374
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             58 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4245
                                             61 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     344
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     270
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _getMain_All_LightsStatus                             1     1      0      37
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   23558
                                             66 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3546
                                             61 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     478
                                             58 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      2     2      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0     711
                                              5 BANK0      2     2      0
          _DimmerIntr_ValueCalculate
 ---------------------------------------------------------------------------------
 (4) _DimmerIntr_ValueCalculate                            3     3      0     680
                                              2 BANK0      3     3      0
                           _Division
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   32934
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   32934
                                             58 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   14117
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   18137
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     579
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     273
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4020
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    4368
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    5133
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3665
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3324
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (5) _Division                                             5     4      1     649
                                              7 COMMON     3     2      1
                                              0 BANK0      2     2      0
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (6) ___lbdiv                                              5     4      1     345
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5151
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5151
                                             61 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setProductData                                       3     2      1    2974
                                             58 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 4     4      0    1833
                                              9 COMMON     1     1      0
                                              6 BANK0      3     3      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1601
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      62
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
       _DimmerIntr_ValueCalculate
         _Division
           ___lbdiv
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _DimmerIntr_ValueCalculate
           _Division
             ___lbdiv
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_Initialization
         _setRF_Initialization
       _RF_getCommand
         _getBuz_GO
         _getRF_KeyStatus
       ___lwdiv
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      4D       5       96.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      5      4A      11       92.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     141      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     141      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Apr 18 16:53:59 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 07FE  
                   __end_of_setCmd_Status 134C                            ___bmul@product 0074  
                                      l84 0A56                                        l94 0986  
                                      l86 0A68                                        l95 0982  
                                      l96 0972                                        l98 0980  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 150A  
                                      _WR 0CA9                              ___awdiv@sign 0021  
                                      _u1 013E                                        _Sw 006B  
                  __end_of_setDelayOff_GO 1000                              ___ftadd@exp1 0045  
                            ___ftadd@exp2 0044                    setRF_AdjControl@status 0077  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0D05  
                            ___ftadd@sign 0043                                       l300 13D7  
                                     l231 0EDC                      _setDimmerLights_SwOn 098D  
                                     l343 1531                                       l523 0E96  
                                     l299 13D5                                       l682 11EE  
                                     l881 0AA2                                       l793 04A3  
                                     l890 0ACB                                       l884 0AAE  
                                     l879 0AB0                                       _GIE 005F  
                                     _CRC 00DF                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00E2                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00B0  
                                     _ISR 0004                                       _WDT 00DD  
                                     _Cmd 00E0              getDimmerLights_Status@lights 0074  
                                     _Sw1 015C                ??_setDimmerIntr_Dimming_RF 0073  
              ??_setDimmerIntr_Dimming_Sw 0073           setDimmerIntr_Dimming_RF@command 0072  
                __end_of_CC2500_WriteByte 13E2                    __size_of_RF_getCommand 0026  
                   _Buzzer_Initialization 10AE                           __end_of_ADC_Set 1113  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0075       __end_of_setDimmerIntr_ControlStatus 1361  
             _setDimmerIntr_ControlStatus 134C                         ??_getSw_KeyStatus 0072  
                                    ?_ISR 0070                              ___ftdiv@cntr 0030  
                         __end_of_IOC_ISR 1133                     _setDimmerLights_OnOff 0432  
        setDimmerLights_DimmingRun@lights 0076                              ___ftdiv@sign 0035  
                                    l2003 16B2                                      l2017 0F7B  
                                    l1271 15C2                                      l2312 13BC  
                                    l2049 0DE2                                      l1281 069C  
                                    l1257 08FD                                      l1434 17FE  
                                    l1418 085C                                      l2332 01B3  
                                    l2334 0091                                      l1466 16EB  
                                    l1475 134B                           __end_of_IOC_Set 1184  
                                    l2702 025C                                      l1951 05CF  
                                    l1936 1566                                      l1944 0611  
                                    l2673 0BAD                                      l1961 061A  
                                    l1955 05EC                                      l1957 05FC  
                                    l1990 0DCD                                      l2679 0BC4  
                                    l6071 125C                                      l7043 095E  
                                    l6075 1262                                      l6077 1267  
                                    l8111 1339                                      l8017 14AC  
                                    l8201 1514                                      l9001 05DF  
                                    l8019 14B5                                      l8115 1346  
                                    l8043 1426                                      l8203 1517  
                   _setDimmerLights_SwOff 1790                                      l8029 14C4  
                                    l7501 0B8A                                      l8037 141D  
                                    l8061 143E                                      l7511 0BB2  
                                    l7503 0B94                                      l8039 1420  
                                    l8231 092B                                      l8063 1443  
                                    l8207 151D                                      l9023 05FF  
                                    l6543 12E7                                      l7513 0BBA  
                                    l7505 0B99                                      l8313 0818  
                                    l8241 093B                                      l8153 06C0  
                                    l8137 08B5                                      l7531 0AD8  
                                    l8075 1542                                      l8083 14F1  
                                    l8235 0931                                      l8411 0F65  
                                    l8403 0F3C                                      l7701 0280  
                                    l7621 12B1                                      l8077 154D  
                                    l8085 14F4                                      l8245 0941  
                                    l8229 0928                                      l8501 0C06  
                                    l8165 0717                                      l8149 06BB  
                                    l7607 11E1                                      l7711 029B  
                                    l8327 0839                                      l8319 0822  
                                    l8239 0938                                      l8503 0C1C  
                                    l8423 0EAD                                      l8407 0F5D  
                                    l8415 0F69                                      l9063 00BE  
                                    l9047 007B                                      l7537 0AE3  
                                    l7721 04F6                                      l7617 12AB  
                                    l8089 14FA                                      l8425 0EB0  
                                    l8409 0F61                                      l9073 00F0  
                                    l7563 0B1A                                      l7555 0B09  
                                    l7547 0AEB                                      l7651 01E5  
                                    l9155 0335                                      l8443 0EC5  
                                    l8187 1749                                      l9219 17E0  
                                    l7549 0AF7                                      l7661 01FB  
                                    l7741 054D                                      l7821 0744  
                                    l9181 08DC                                      l8461 0EF9  
                                    l8453 0EEC                                      l8429 0EB6  
                                    l8373 12D6                                      l6941 13C7  
                                    l7559 0B12                                      l7639 14D1  
                                    l7655 01EC                                      l7727 050C  
                                    l9255 16D3                                      l8455 0EF0  
                                    l8447 0EE3                                      l8391 0F06  
                                    l8711 0D99                                      l9087 012E  
                                    l7921 17BD                                      l7905 09BF  
                                    l7497 0B83                                      l7681 0232  
                                    l7673 0215                                      l7841 0782  
                                    l8545 046C                                      l8553 048B  
                                    l8481 0BF1                                      l8457 0EF3  
                                    l8449 0EE6                                      l6937 13C1  
                                    l9097 0160                                      l7907 09C5  
                                    l7691 024E                                      l7683 0237  
                                    l7763 0395                                      l7851 079B  
                                    l8547 0481                                      l8643 15AD  
                                    l8715 0DA2                                      l7909 09CF  
                                    l7693 0258                                      l7685 023B  
                                    l7749 0566                                      l7781 03E6  
                                    l8581 04DC                                      l8565 04AF  
                                    l8485 0BF7                                      l8397 0F1B  
                   _myMain_Initialization 122A                                      l7679 0228  
                                    l7855 07A9                                      l7847 078F  
                                    l7839 0774                                      l8903 0AC0  
                                    l7943 0FB6                                      l8479 0BEE  
                                    l8399 0F21                                      l7697 026E  
                                    l7793 0402                                      l7785 03EE  
                                    l7769 03AB                                      l7849 0798  
                                    l7953 0FE4                                      l9393 0605  
                                    l8851 0D31                                      l7797 040A  
                                    l8589 07CE                                      l7957 0FF6  
                                    l8861 0D57                                      l8685 156B  
                                    l7983 0DD4                                      l8863 0D5D  
                                    l8943 12C5                                      l8687 1570  
                                    l8783 1712                                      l8775 16F4  
                                    l7985 0DD5                                      l8849 0D2B  
                                    l8961 0635                                      l8777 1700  
                                    _CFGS 0CAE                                      l8891 0AA4  
                                    l8955 0621                                      l8787 171B  
                                    l8699 0D80                                      l7997 0E20  
                                    l7989 0DDA                              __CFG_WDTE$ON 0000  
                                    l8969 0695                                      l8995 05C4  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u5335 13AF  
                                    u7105 0BCB                                      u7035 0B8F  
                                    u8005 0FC2                                      u7055 0BA8  
                                    u7155 0AEE                                      u7075 0BB5  
                                    u7175 0AF8                                      u7415 0216  
                                    u9015 1701                                      u6465 0954  
                                    u7185 0B02                                      u7505 024F  
                                    u9025 170B                                      u7195 0B0A  
                                    u9035 1713                                      u7445 0229  
                                    u7605 055D                                      u8165 1537  
                                    u7615 0567                                      u7475 023C  
                                    u7725 040B                                      u7805 0775  
                                    u7575 051E                                      u7735 0411  
                                    u7655 03B7                                      u9415 05AB  
                                    u7585 052E                                      u7665 03C7  
                                    u7595 054E                                      u7835 0790  
                                    u7685 03EF                                      u7695 03F5  
                                    u7775 074B                                      u7865 1385  
                                    u9715 08F4                                      _LWLO 0CAD  
                                    u9765 17F6                                      u8995 16F7  
                                    _RSSI 00E4                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 13FA  
              _setDimmerLights_DimmingRun 13E2                                      _Buz1 00CC  
                                    _main 0844                              ___ftpack@arg 0072  
                     __end_of_DlyOff_Main 0E9D                           __end_of_RF_Main 10BD  
                            ___ftpack@exp 0075                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 114E                                      ltemp 007E  
           __size_of_setRF_Initialization 000A                                      start 001F  
                                    ttemp 007E                                      wtemp 007E  
       setDimmerLights_SwOn@dimmingStatus 0027      __end_of_DimmerLights_DimmingFunction 0ACD  
   __size_of_DimmerLights_DimmingFunction 0053              _DimmerLights_DimmingFunction 0A7A  
              __end_of_setRFSW_AdjControl 072B                         ___bmul@multiplier 0075  
                            ___ftmul@cntr 0034                              ___ftmul@sign 0035  
                                   ??_ISR 0071                              ___fttol@exp1 0053  
              ?_DimmerIntr_ValueCalculate 0070                              ___fttol@lval 004F  
       setDimmerLights_DimmingRun@command 0074   __end_of_getDimmerLights_Allow_Condition 10B4  
__size_of_getDimmerLights_Allow_Condition 0003         ??_getDimmerLights_Allow_Condition 0072  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 10B1  
                  _getDimmerLights_Status 120C                          __end_of_LED_Main 10CD  
                              _DimmerIntr 00E1                     ?_setDimmerLights_Main 0070  
                         ?_setDelayOff_GO 005D                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00EC                           __end_of___awdiv 0B21  
                         __end_of___lbdiv 14C6                           __end_of___ftadd 02B3  
                         __end_of___ftdiv 0588                           __end_of___ftneg 113C  
                         __end_of___ftmul 0432                           ___awdiv@divisor 0072  
                                   _T1CON 0018                           __end_of___fttol 07B2  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 1722  
                                   i1l845 177E                           ___awdiv@counter 0020  
           __size_of_CC2500_FrequencyCabr 000B                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0073  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 13B5  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 0D05  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 0CA0  
                                   _Light 00E3                          __end_of_TMR1_ISR 1485  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 11D6        DimmerLights_DimmingFunction@lights 0026  
                           ___awtoft@sign 0025                             ___ftpack@sign 0076  
                         __end_of_setData 0A27               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0072                          __end_of_WDT_Main 12A9  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0077  
                          __pbitbssCOMMON 03D0                            __CFG_BOREN$OFF 0000  
                      Flash_Memory_Read@i 0073                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0010             __end_of_setLED_Initialization 1279  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                     _getAll_Sw_KeyStatus 12BA                        _setRF_DimmerLights 0DCF  
                         ___lbdiv@divisor 0072               __size_of_Flash_Memory_Write 002A  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0075  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                           _RF_getCommand 1552               __size_of_setRF_TransceiveGO 0010  
                  ??_Flash_Memory_Erasing 0072               ??_setDimmerLights_DimmingOn 0074  
                      ??_CC2500_SIDLEMode 0076                           __initialization 0021  
                        ?_CC2500_PowerRST 0070             ?_DimmerLights_DimmingFunction 0070  
                       ?_setMemory_Modify 0070                          __end_of_Division 122A  
                 __size_of_getDelayOff_GO 000E                              __end_of_main 0882  
                     ?_setRF_DimmerLights 005D                          __end_of_Fosc_Set 10D1  
          getMain_All_LightsStatus@status 0072                        ??_setMemory_Modify 0072  
            setDimmerLights_OnOff@command 0065                            _Exception_Main 16B6  
                        ?_CC2500_WriteREG 0074         __end_of_DimmerIntr_ValueCalculate 161F  
                               ??_ADC_Set 0072                      _setSw_Initialization 11FE  
                                  ??_main 007A                             ___fttol@sign1 004E  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 005A              ??_DimmerLights_SelectPointer 0072  
                 _setControl_Lights_Table 0F05                            _setMemory_Data 116E  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0074  
                              _Receive_OK 03D0        setDimmerIntr_ControlStatus@command 0072  
                 _setDimmerLights_Dimming 07B2                                 ??_IOC_ISR 0071  
                               ??_IOC_Set 0072                               _DimmerIntr1 00A0  
                _getMain_All_LightsStatus 111A                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1376                   ??_Switch_Initialization 0077  
                  ?_setDimmerLights_OnOff 0065                      ??_setRF_DimmerLights 005E  
                       ??_getRF_KeyStatus 0072                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0E35                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
        __end_of_getDimmerIntr_Dimming_Sw 11E3                                 ??_RF_Main 007A  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                                 ??_WDT_Set 0072  
                        __end_of___awtoft 14E8                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0BDB                  _getMain_All_Error_Status 10B4  
                                  _IOCBF2 1CB2                                    i1l1220 001A  
                                  i1l7101 112F                                    i1l7091 147E  
                                  i1l6703 1765                                    i1l6715 1774  
                                  i1l6709 176C                                    i1l6753 1648  
                                  i1l7387 0012                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0072                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                                  u652_25 1479                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 13FA  
                                  _WDTCON 0097      __end_of_setDimmerLights_DimmingClose 10F4  
   __size_of_setDimmerLights_DimmingClose 0005              _setDimmerLights_DimmingClose 10EF  
                      DelayTime_1us@count 0072                        setRF_AdjControl@sw 0079  
                          ?_RF_getCommand 0078            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 005B             __end_of_CC2500_PowerOnInitial 13A0  
                                  _Dimmer 014E                                    _DlySw1 0165  
                        _setRF_AdjControl 1722             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1269                __end_of_Mcu_Initialization 1310  
                     __end_of_Buzzer_Main 098D                                    _Memory 01A0  
                                  _Timer1 00D8                                    ___bmul 12A9  
                  __end_of_Exception_Main 16EC                      Exception_Main@lights 0020  
                               ??___awdiv 0076                                 ??___lbdiv 0073  
                               ??___ftadd 003F              __size_of_DelayOffPointSelect 000A  
                               ??___ftdiv 002C                                 ??___ftneg 007A  
                               ??___ftmul 002C                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                                 ??___lwdiv 0076  
                  ??_setDimmerLights_Main 007A                                    _r_data 00EA  
                    Exception_Main@status 0022                                    _s_data 00EB  
                  ??_setDimmerLights_SwOn 0079                                    _setLED 080A  
                                  _myMain 00BF                      ??_RF_Timeout_Counter 0072  
                  __end_of_setMemory_Data 1179                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0022                                    _setBuz 0A27  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0072          __end_of_setDimmerIntr_Dimming_RF 1376  
        __end_of_setDimmerIntr_Dimming_Sw 1323                     ___ftmul@f3_as_product 0031  
               _setDimmerLights_DimmingOn 1578                                 ??_setData 0072  
                Flash_Memory_Read@address 0074                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1299               __size_of_DimmerLights_IOC_1 0030  
                   __end_of_SwPointSelect 119A               __size_of_DimmerLights_TMR_1 0038  
            __size_of_Flash_Memory_Modify 0089                   __size_of_LedPointSelect 000B  
         setDimmerIntr_Dimming_Sw@command 0072                          ___lbdiv@dividend 0074  
                     Flash_Memory_Write@i 0073              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 13B5               __size_of_CC2500_InitPATable 001D  
                     CC2500_TxData@loop_e 0077          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 0048           setDimmerIntr_DimmingValue@value 005A  
         getDimmerIntr_DimmingValue@value 0074                                 ?_LED_Main 0070  
                              ___ftadd@f1 0039                                ___ftadd@f2 003C  
                    _getRF_KeyStatus$5377 0074                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 0026  
                              ___ftdiv@f3 0031             ?_setDimmerLights_DimmingClose 0070  
                              ___ftneg@f1 0036                                ___awtoft@c 0020  
                     ___bmul@multiplicand 0072              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 0026                                ___ftmul@f2 0029  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 0046  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK3 1485                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                 setMemory_LoopSave@command 0073  
                      _LED_Initialization 10C5                           _getSw_KeyStatus 12DC  
               ??_setControl_Lights_Table 007A                        getRF_KeyStatus@key 0073  
                         ?_setMemory_Data 0072            ??_DimmerLights_DimmingFunction 0025  
        ??_getDimmerLights_PercentToValue 0054           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 0063             ??_Flash_Memory_Initialization 0076  
                        ___lbdiv@quotient 0076                                 ?_WDT_Main 0070  
       setDimmerIntr_ControlStatus@lights 0074                        __size_of_getBuz_GO 0010  
               _setDimmerIntr_MaxmumValue 11A6                __end_of_set_TimeoutCleared 10F9  
         setDimmerIntr_MaxmumValue@lights 005C                        __size_of_getRxData 0065  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 119A                      __size_of_setLED_Main 0033  
                      ??_CC2500_WriteByte 0072                                 ?_Division 0077  
                              __pbssBANK0 006A                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 0947  
                         ??_RF_getCommand 007A                         ??_setRFSW_Control 0065  
             ?_setDimmerLights_DimmingRun 0074                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 10BD  
                           ??_Switch_Main 007A                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0077  
                            _DimmerLights 006A                         LedPointSelect@led 0073  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0011  
                             setBuz@count 0078                   ?_getDimmerLights_Status 0070  
                              __pmaintext 0844                            _getDelayOff_GO 11F0  
                     _CC2500_WriteCommand 1414                                   ?___bmul 0072  
                        ??_setDelayOff_GO 005F         __end_of_DimmerIntr_Initialization 0B7B  
           ??_DimmerLights_Initialization 007A                                ??_TMR1_ISR 0071  
       __size_of_getDimmerIntr_Dimming_Sw 000D                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
               ?_getDimmerIntr_Dimming_Sw 0070                        __size_of_setTxData 0005  
             ??_DimmerIntr_ValueCalculate 0022                                   ?_setLED 0074  
                  __size_of_DelayTime_1us 0025                                   _ADC_Set 110C  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072        __end_of_DimmerLights_SelectPointer 1163  
              _DimmerLights_SelectPointer 1158                                ??_WDT_Main 0072  
            __end_of_setRF_Initialization 080A                        _setRFSW_AdjControl 06A4  
                  __end_of_setProductData 11A6             setDimmerLights_Dimming@lights 0065  
                                 _IOC_ISR 112A                                   _IOC_Set 1179  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 0062  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 08C2                         _Flash_Memory_Read 1323  
                  __size_of_CC2500_RxData 0060                    __size_of_CC2500_TxData 0068  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 0120  
                                 _RF_Main 10BA                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0078  
                                 _WDT_Set 1145           __end_of_setControl_Lights_Table 0F7C  
                         setRF_Main@error 01E5                    __size_of_setCmd_Status 0015  
                              ??_Fosc_Set 0072                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 07FE                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 118F                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0015  
       __size_of_setDimmerIntr_Dimming_Sw 0013                         __end_of_getBuz_GO 1289  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 11FE            __end_of_getDimmerLights_Status 121B  
                       __end_of_getRxData 0DCF                   __end_of_getSw_KeyStatus 12ED  
                _CC2500_registers_address 1000                      ??_setRFSW_AdjControl 005D  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 0ACD            ??_setDimmerLights_DimmingClose 0075  
                                 ___lbdiv 14A5                                   ___ftadd 01BD  
                                 ___ftdiv 04DF                                   ___ftneg 1133  
                                 ___ftmul 037E                                   ___fttol 072B  
                     __end_of_Switch_Main 111A                                   ___lwdiv 16EC  
              ??_getMain_All_LightsStatus 0072                   ??_Buzzer_Initialization 0072  
                         _getRF_KeyStatus 12CB                                ??___awtoft 0023  
                              ??___ftpack 0077                           __size_of_setLED 003A  
                    setRFSW_AdjControl@sw 0060           DimmerIntr_ValueCalculate@lights 0024  
                         __size_of_setBuz 0053                                   __ptext1 17C8  
                                 __ptext2 122A                                   __ptext3 1299  
                                 __ptext4 07FE                                   __ptext5 1113  
                                 __ptext6 004C                                   __ptext7 12ED  
                                 __ptext8 1578                                   __ptext9 12DC  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001B  
              ??_getMain_All_Error_Status 0072                   ??_setDimmerLights_OnOff 0066  
                         ?_setProductData 005A                 __end_of_Flash_Memory_Main 0903  
               __end_of_Flash_Memory_Read 1337                   ??_setDimmerLights_SwOff 0074  
                              _setRF_Main 0588                   ??_myMain_Initialization 0072  
                           _DelayOff_Main 10C1                  __end_of_setRF_AdjControl 1758  
                       _DimmerLights_Main 1122                                   _setData 09D7  
          __size_of_DlyOff_Initialization 0005                     ??_CC2500_WriteCommand 0074  
               __size_of_setMemory_Modify 0010             __end_of_DlyOff_Initialization 10EA  
              __end_of_CC2500_ClearRXFIFO 10D9                __end_of_CC2500_ClearTXFIFO 10DD  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 006C                            _LedPointSelect 1163  
               getAll_Sw_KeyStatus@status 0073                       _DelayOffPointSelect 114E  
                                 clrloop0 1100            __size_of_Switch_Initialization 0004  
               _DimmerIntr_ValueCalculate 15F3             __end_of_Switch_Initialization 10E5  
                    end_of_initialization 0048                 ??_DelayOff_Initialization 0075  
                       _CC2500_InitSetREG 15C9                             _DelayTime_1us 152D  
                       __end_of_setTxData 10EF                __end_of_Flash_Memory_Write 15C9  
      __size_of_setDimmerLights_DimmingOn 0027                                   init_ram 10F9  
              __end_of_setRF_TransceiveGO 1259                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 007A                      Flash_Memory_Read@ret 0075  
                                 initloop 10FA                                _setSw_Main 004C  
                   CC2500_ReadByte@loop_b 0073                    setDimmerLights_SwOn@sw 0028  
                       _CC2500_ReadStatus 150A                      Flash_Memory_Modify@i 0077  
                   _setLED_Initialization 1269                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0076                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001C                             _CC2500_RxData 0BDB  
                           _CC2500_TxData 0E9D                       ??_CC2500_InitSetREG 0077  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 061B                              __pstringtext 1000  
                           _setCmd_Status 1337                       _Flash_Memory_Unlock 113C  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0076  
                  setSw_Initialization@sw 0076                 __end_of_DimmerLights_Main 112A  
                      _Mcu_Initialization 12FE                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 10D5                      __end_of_my_MainTimer 1800  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 116E                  __size_of_CC2500_WriteREG 0022  
        setDimmerIntr_DimmingValue@lights 005C          getDimmerIntr_DimmingValue@lights 0073  
               __end_of_CC2500_InitSetREG 15F3                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0066  
                       setRF_Main@command 01E8                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000C  
               __end_of_CC2500_ReadStatus 152D            setDimmerIntr_Dimming_RF@lights 0074  
         getMain_All_Error_Status@command 0070                               ___ftdiv@exp 0034  
       __end_of_setDimmerLights_DimmingOn 159F                          ??_Exception_Main 0076  
                          __end_of_IO_Set 1414                      _setRF_Initialization 0800  
                      _setMemory_LoopSave 1289                               _Switch_Main 1113  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 12DC                          ??_setMemory_Data 0073  
                             ___ftmul@exp 0030                     _CC2500_PowerOnInitial 138B  
             ??_DimmerIntr_Initialization 005A                      ??_Mcu_Initialization 0073  
             __end_of_getAll_Sw_KeyStatus 12CB                     ??_DelayOffPointSelect 0072  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0072  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 12BA  
     __size_of_getDimmerIntr_DimmingValue 000D                      setRF_DimmerLights@on 005D  
                            setRF_Main@RX 01E7                              setRF_Main@TX 01E6  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001E          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0065  
                          __end_of_setLED 0844             __size_of_setDimmerLights_SwOn 004A  
                          __end_of_setBuz 0A7A                __end_of_DimmerLights_IOC_1 164F  
                    _CC2500_FrequencyCabr 1184                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 0014                               ?_setRF_Main 0070  
                         _setRFSW_Control 0882                         __size_of_WDT_Main 0010  
              __end_of_DimmerLights_TMR_1 1790                       start_initialization 0021  
                         ?_LedPointSelect 0070                               __end_of_ISR 001F  
                  __size_of_getCmd_Status 0010                     ??_Flash_Memory_Modify 0076  
            ?_setDimmerIntr_ControlStatus 0072                __end_of_CC2500_InitPATable 1467  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
  __end_of_getDimmerLights_PercentToValue 0CA0   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 0C3B                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 0056             setRF_AdjControl@dimmingStatus 0078  
                      _set_TimeoutCleared 10F4         __end_of_setDimmerIntr_MaxmumValue 11B2  
                                ??_IO_Set 0072                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 016A                         __size_of_Division 000F  
                             ?_setSw_Main 0070                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0018                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00E5  
                   setProductData@address 005C                       Exception_Main@count 0021  
                     Exception_Main@error 0023                                  ??___bmul 0073  
                  __size_of_SwPointSelect 000B          __end_of_getMain_All_LightsStatus 1122  
                               _Tx_Length 00E8                               __pdataBANK3 01C5  
                                ??_setLED 0075                                  ?_ADC_Set 0070  
                                ??_setBuz 0077                           ??_DelayOff_Main 007A  
                       ??_CC2500_ReadByte 0072               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 10B7                          _CC2500_SIDLEMode 10DD  
              __size_of_DimmerLights_Main 0008                        setMemory_Data@data 0072  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0074  
          getDimmerIntr_Dimming_Sw@lights 0072                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                               __pbssCOMMON 007B  
                                ?_IOC_Set 0070            getDimmerIntr_Dimming_Sw@status 0073  
                               ___latbits 0003                          _setMemory_Modify 1239  
                           __pcstackBANK0 0020                             __pcstackBANK1 00EC  
               setRF_TransceiveGO@command 0073                             __pcstackBANK3 01E5  
                    ??_set_TimeoutCleared 0072                 _DimmerIntr_Initialization 0B21  
                         ??_DelayTime_1us 0074                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 005F                         ??_CC2500_PowerRST 0078  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0073                              ??_TouchPower 0072  
                    __size_of_DlyOff_Main 0068                __size_of_CC2500_ReadStatus 0023  
          setDimmerIntr_MaxmumValue@value 005A               setDimmerLights_DimmingOn@sw 0074  
                       ??_CC2500_WriteREG 0075                             ??_setRF_Learn 0072  
                           _DimmerLights1 0153                     CC2500_WriteREG@w_addr 0076  
                   setDelayOff_GO@command 005D                     __end_of_RF_getCommand 1578  
                         ??_CC2500_RxData 0076                  setRFSW_AdjControl@status 005F  
                         ??_CC2500_TxData 0076                                 __pnvBANK0 006C  
                          getRxData@error 0069               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 10D1                    ?_CC2500_PowerOnInitial 0070  
      __size_of_DimmerIntr_ValueCalculate 002C                       __size_of_setRF_Main 0093  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                           _getCmd_Status 1259                                setBuz@time 0024  
                         ??_setCmd_Status 0073                       setDelayOff_GO@value 005E  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                               _getBuz_GO 1279                  ?_setDimmerLights_Dimming 0062  
     __end_of_Flash_Memory_Initialization 037E               _Flash_Memory_Initialization 02B3  
                                ?___awdiv 0072                                 __ptext100 0B21  
                               __ptext101 1239                                  ?___lbdiv 0072  
                               __ptext110 0B7B                                 __ptext102 0CA0  
                               __ptext111 121B                                 __ptext103 0C3B  
                               __ptext120 1790                                 __ptext112 14A5  
                               __ptext104 072B                                 __ptext121 120C  
                               __ptext113 10C1                                 __ptext105 1133  
                               __ptext130 1758                                 __ptext122 1158  
                               __ptext114 0E35                                 __ptext106 037E  
                               __ptext131 112A                                 __ptext123 10BD  
                               __ptext115 119A                                 __ptext107 04DF  
                               __ptext132 161F                                 __ptext124 10E5  
                               __ptext116 098D                                 __ptext108 01BD  
                               __ptext125 114E                                 __ptext117 0A27  
                               __ptext109 14C6                                  ?___ftadd 0039  
                               __ptext126 0947                                 __ptext118 0ACD  
                               __ptext127 10AE                                 __ptext119 11D6  
                               __ptext129 1467                                 _getRxData 0D6A  
                                ?___ftdiv 0026                                  ?___ftneg 0036  
                                ?___ftmul 0026                                  ?___fttol 0046  
                   __size_of_my_MainTimer 0038                                  ?___lwdiv 0072  
                 __end_of_setRFSW_Control 08C2                          ??_setProductData 005B  
           __size_of_setSw_Initialization 000E            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 10B1                             ??_setLog_Code 005D  
                      __end_of_TouchPower 13CA                       __size_of_setSw_Main 0171  
            CC2500_ReadStatus@status_addr 0075        __end_of_getDimmerIntr_DimmingValue 11F0  
            ??_setDimmerIntr_DimmingValue 005B                _getDimmerIntr_DimmingValue 11E3  
                  CC2500_WriteByte@loop_a 0073                                  ?_setData 0070  
          __size_of_setDimmerLights_OnOff 00AD                         ?_setRF_AdjControl 0070  
                               _r_address 00E9             __end_of_setDimmerLights_OnOff 04DF  
          __size_of_setDimmerLights_SwOff 0038            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 17C8              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1239                          ___lwdiv@quotient 0078  
                      ??_setRF_AdjControl 0076                             _SwPointSelect 118F  
                     __end_of_setLED_Main 1682                          ??_getDelayOff_GO 0074  
                  ??_setRF_Initialization 0072                         _CC2500_rfSettings 102F  
                                _LED_Main 10C9                           SwPointSelect@sw 0073  
                               clear_ram0 10FF                  CC2500_InitPATable@loop_d 0079  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 17C8  
                               _setTxData 10EA       __end_of_DimmerLights_Initialization 110C  
             _DimmerLights_Initialization 1105                    _Flash_Memory_Main$3208 0021  
                      _CC2500_ClearRXFIFO 10D5                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 10D9                  _getDimmerIntr_Dimming_Sw 11D6  
                setRF_DimmerLights@lights 0061                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 12FE                         ??_Timeout_Counter 0072  
                              ?_getBuz_GO 0072                  setRF_DimmerLights@status 0060  
    __size_of_setDimmerIntr_ControlStatus 0015               __size_of_setRFSW_AdjControl 0087  
     __size_of_setDimmerIntr_DimmingValue 000C                        _Flash_Memory_Write 159F  
                              ?_getRxData 0070                                  _TMR1_ISR 1467  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                                _TMR1_Set 11CA                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1249  
                                _RF_Count 00DB               __end_of_CC2500_WriteCommand 142E  
                  ??_CC2500_FrequencyCabr 0078                                  _WDT_Main 1299  
                 DlyOff_Initialization@sw 0074                     getSw_KeyStatus@status 0073  
                        __size_of_ADC_Set 0007                       ?_Flash_Memory_Write 0070  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 0084  
                                _DelayOff 007B                              setSw_Main@sw 002B  
                        __size_of_IOC_ISR 0009                      RF_getCommand@command 0020  
          getMain_All_Error_Status@status 0072                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 11CA                            ?_SwPointSelect 0070  
                          setLED_Main@led 0076                      __end_of_WDT_Clearing 0800  
                     __end_of_setLog_Code 16B6                     _DlyOff_Initialization 10E5  
       __size_of_getMain_All_LightsStatus 0008                      ??_CC2500_ClearRXFIFO 0076  
                                _Division 121B                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0076                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1361  
             setDimmerLights_OnOff@lights 0068                  _setDimmerIntr_Dimming_Sw 1310  
                                _Fosc_Set 10CD                          __size_of_WDT_Set 0009  
                   setRFSW_Control@status 0066                     _Switch_Initialization 10E1  
       __size_of_getMain_All_Error_Status 0003                      ??_Flash_Memory_Write 0072  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 0046  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 13CA       __size_of_DimmerLights_SelectPointer 000B  
                    ??_setRF_TransceiveGO 0072                                  _SwDetect 00E7  
                        getCmd_Status@cmd 0073                          setCmd_Status@cmd 0072  
                       setRFSW_Control@sw 0067          ??_getDimmerLights_ValueToPercent 0054  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0075  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0036                  setDimmerLights_SwOn@idle 0026  
                                ___awtoft 14C6                          ??_LedPointSelect 0072  
                                ___ftpack 0B7B                              ??_setRF_Main 007A  
                    CC2500_WriteREG@value 0074                               _setLED_Main 164F  
              __end_of_setRF_DimmerLights 0E35                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
                        setDelayOff_GO@sw 0064                           ___lwdiv@divisor 0072  
                        __size_of_setData 0050                           ___lwdiv@counter 0077  
                                __ptext10 118F                                  __ptext11 13B5  
                                __ptext20 1682                                  __ptext12 10F4  
                                __ptext21 1289                                  __ptext13 13A0  
                                __ptext30 1279                                  __ptext22 0F05  
                                __ptext14 10E1                                  __ptext31 10B7  
                                __ptext23 1722                                  __ptext15 11FE  
                                __ptext40 15C9                                  __ptext32 0800  
                                __ptext24 0882                                  __ptext16 10BA  
                                __ptext41 144A                                  __ptext33 0E9D  
                                __ptext25 06A4                                  __ptext17 0588  
                                __ptext50 13CA                                  __ptext42 14E8  
                                __ptext34 0BDB                                  __ptext26 13E2  
                                __ptext18 09D7                                  __ptext51 12FE  
                                __ptext43 1184                                  __ptext35 150A  
                                __ptext27 16EC                                  __ptext19 0D6A  
                                __ptext60 10C5                                  __ptext52 1145  
                                __ptext44 152D                                  __ptext36 142E  
                                __ptext28 1552                                  __ptext61 1269  
                                __ptext53 11CA                                  __ptext45 10D9  
                                __ptext37 138B                                  __ptext29 12CB  
                                __ptext70 1323                                  __ptext62 08C2  
                                __ptext54 13FA                                  __ptext46 10D5  
                                __ptext38 10DD                                  __ptext71 16B6  
                                __ptext63 12BA                                  __ptext55 1179  
                                __ptext47 1414                                  __ptext39 0903  
                                __ptext80 11B2                                  __ptext72 10B4  
                                __ptext64 061B                                  __ptext56 10CD  
                                __ptext48 10D1                                  __ptext81 134C  
                                __ptext73 1122                                  __ptext65 11BE  
                                __ptext57 110C                                  __ptext49 1376  
                                __ptext90 1249                                  __ptext82 0F7C  
                                __ptext74 0D05                                  __ptext66 02B3  
                                __ptext58 10C9                                  __ptext91 0DCF  
                                __ptext83 12A9                                  __ptext75 0432  
                                __ptext67 116E                                  __ptext59 164F  
                                __ptext92 11A6                                  __ptext84 1337  
                                __ptext76 080A                                  __ptext68 159F  
                                __ptext93 1310                                  __ptext85 111A  
                                __ptext77 1163                                  __ptext69 113C  
                                __ptext94 11E3                                  __ptext86 11F0  
                                __ptext78 10EF                                  __ptext95 10B1  
                                __ptext87 1259                                  __ptext79 1361  
                                __ptext96 0A7A                                  __ptext88 07B2  
                                __ptext97 15F3                                  __ptext89 10EA  
                                __ptext98 1105                                  __ptext99 0003  
                                __product 01C5                   ??_setLED_Initialization 0076  
                ??_getDimmerLights_Status 0074              __end_of_setDimmerLights_Main 0D6A  
                      _DimmerLights_IOC_1 161F              __end_of_setDimmerLights_SwOn 09D7  
                            ??_setSw_Main 0029                    ??_setRF_TimeoutCleared 0072  
            ??_setDimmerLights_DimmingRun 0075                             setLED@command 0074  
                           __size_of_main 003E                               _setRF_Learn 12ED  
      __size_of_DimmerIntr_Initialization 005A                           ??_getCmd_Status 0072  
                      _DimmerLights_TMR_1 1758                  __end_of_CC2500_SIDLEMode 10E1  
              setDimmerLights_Main@lights 0069               __end_of_DelayOffPointSelect 1158  
              CC2500_WriteCommand@command 0075                           _CC2500_ReadByte 142E  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 144A  
                __end_of_setMemory_Modify 1249                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 061B                               ??_getBuz_GO 0074  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 105E                               ??_getRxData 0068  
              __end_of_RF_Timeout_Counter 138B               Flash_Memory_Main@key_Status 0020  
                _getAll_Sw_KeyStatus$6448 0074                                  main@argc 00EC  
                                main@argv 00EE                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6445 0074       getDimmerLights_ValueToPercent@value 0056  
                         _CC2500_PowerRST 0903                  __size_of_getSw_KeyStatus 0011  
            setDimmerLights_Dimming@value 0064        __end_of_setDimmerIntr_DimmingValue 11BE  
              _setDimmerIntr_DimmingValue 11B2               __end_of_Flash_Memory_Modify 06A4  
            __size_of_getAll_Sw_KeyStatus 0011                               _setLog_Code 1682  
             __end_of_Flash_Memory_Unlock 1145                           ??_SwPointSelect 0072  
                         _CC2500_WriteREG 14E8                        __end_of_setSw_Main 01BD  
                    ??_DimmerLights_IOC_1 0070           getDimmerLights_PercentToValue@i 0057  
     __size_of_setDimmerLights_DimmingRun 0018                             _Transceive_OK 03D1  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0021                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0061                           setDelayOff_GO@j 0062  
                         setDelayOff_GO@k 0063                   ??_CC2500_PowerOnInitial 007A  
  __end_of_setDimmerLights_Initialization 0004   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 0003                ?_setDimmerIntr_MaxmumValue 005A  
                             ??_setTxData 0072                    CC2500_InitPATable@temp 0078  
                       _RF_Initialization 10B7                      _Flash_Memory_Erasing 11BE  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00E6  
                 __size_of_Exception_Main 0036                             Division@value 0020  
         __end_of_DelayOff_Initialization 10C1                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 10C5                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0F7C  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0077  
        __size_of_setDimmerLights_Dimming 004C      __size_of_Flash_Memory_Initialization 00CB  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 005D  
                   setMemory_Data@address 0074                     __end_of_DelayTime_1us 1552  
              ??_getDimmerIntr_Dimming_Sw 0072                   __end_of_CC2500_ReadByte 144A  
            __end_of_setSw_Initialization 120C                           _Timeout_Counter 13A0  
         __size_of_getDimmerLights_Status 000F           getDimmerLights_ValueToPercent@i 0057  
        Flash_Memory_Initialization@value 0077                __end_of_LED_Initialization 10C9  
                             Division@num 0077                   setMemory_Modify@command 0073  
               __end_of_RF_Initialization 10BA                 __size_of_setRF_AdjControl 0036  
                   __end_of_CC2500_RxData 0C3B                     __end_of_CC2500_TxData 0F05  
                 __end_of_CC2500_PowerRST 0947  
