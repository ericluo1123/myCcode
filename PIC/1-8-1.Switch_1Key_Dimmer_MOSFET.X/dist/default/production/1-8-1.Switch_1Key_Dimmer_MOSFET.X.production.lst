

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Jan 21 16:32:41 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	psect	text93,local,class=CODE,merge=1,delta=2
   117                           	psect	text94,local,class=CODE,merge=1,delta=2
   118                           	psect	text95,local,class=CODE,merge=1,delta=2
   119                           	psect	text96,local,class=CODE,merge=1,delta=2
   120                           	psect	text97,local,class=CODE,merge=1,delta=2
   121                           	psect	text98,local,class=CODE,merge=1,delta=2
   122                           	psect	text99,local,class=CODE,merge=1,delta=2
   123                           	psect	text100,local,class=CODE,merge=1,delta=2
   124                           	psect	text101,local,class=CODE,merge=1,delta=2
   125                           	psect	text102,local,class=CODE,merge=1,delta=2
   126                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text106,local,class=CODE,merge=1,delta=2
   130                           	psect	text107,local,class=CODE,merge=1,delta=2
   131                           	psect	text108,local,class=CODE,merge=1,delta=2
   132                           	psect	text109,local,class=CODE,merge=1,delta=2
   133                           	psect	text110,local,class=CODE,merge=1,delta=2
   134                           	psect	text111,local,class=CODE,merge=1,delta=2
   135                           	psect	text112,local,class=CODE,merge=1,delta=2
   136                           	psect	text113,local,class=CODE,merge=1,delta=2
   137                           	psect	text114,local,class=CODE,merge=1,delta=2
   138                           	psect	text115,local,class=CODE,merge=1,delta=2
   139                           	psect	text116,local,class=CODE,merge=1,delta=2
   140                           	psect	text117,local,class=CODE,merge=1,delta=2
   141                           	psect	text118,local,class=CODE,merge=1,delta=2
   142                           	psect	text119,local,class=CODE,merge=1,delta=2
   143                           	psect	text120,local,class=CODE,merge=1,delta=2
   144                           	psect	text121,local,class=CODE,merge=1,delta=2
   145                           	psect	text122,local,class=CODE,merge=1,delta=2
   146                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text124,local,class=CODE,merge=1,delta=2
   148                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text126,local,class=CODE,merge=1,delta=2
   150                           	psect	text127,local,class=CODE,merge=1,delta=2
   151                           	psect	text128,local,class=CODE,merge=1,delta=2
   152                           	psect	text129,local,class=CODE,merge=1,delta=2
   153                           	psect	text130,local,class=CODE,merge=1,delta=2
   154                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text133,local,class=CODE,merge=1,delta=2
   157                           	psect	text134,local,class=CODE,merge=1,delta=2
   158                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	intentry,global,class=CODE,delta=2
   161                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text140,local,class=CODE,merge=1,delta=2
   164                           	psect	text141,local,class=CODE,merge=1,delta=2
   165                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055  0000                     	;# 
  2056  0001                     	;# 
  2057  0002                     	;# 
  2058  0003                     	;# 
  2059  0004                     	;# 
  2060  0005                     	;# 
  2061  0006                     	;# 
  2062  0007                     	;# 
  2063  0008                     	;# 
  2064  0009                     	;# 
  2065  000A                     	;# 
  2066  000B                     	;# 
  2067  000C                     	;# 
  2068  000D                     	;# 
  2069  000E                     	;# 
  2070  0010                     	;# 
  2071  0011                     	;# 
  2072  0012                     	;# 
  2073  0015                     	;# 
  2074  0016                     	;# 
  2075  0016                     	;# 
  2076  0017                     	;# 
  2077  0018                     	;# 
  2078  0019                     	;# 
  2079  001A                     	;# 
  2080  001B                     	;# 
  2081  001C                     	;# 
  2082  008C                     	;# 
  2083  008D                     	;# 
  2084  008E                     	;# 
  2085  0090                     	;# 
  2086  0091                     	;# 
  2087  0092                     	;# 
  2088  0095                     	;# 
  2089  0096                     	;# 
  2090  0097                     	;# 
  2091  0099                     	;# 
  2092  009A                     	;# 
  2093  009B                     	;# 
  2094  009B                     	;# 
  2095  009C                     	;# 
  2096  009D                     	;# 
  2097  009E                     	;# 
  2098  010C                     	;# 
  2099  010D                     	;# 
  2100  010E                     	;# 
  2101  0116                     	;# 
  2102  0117                     	;# 
  2103  011D                     	;# 
  2104  018C                     	;# 
  2105  018D                     	;# 
  2106  018E                     	;# 
  2107  0191                     	;# 
  2108  0191                     	;# 
  2109  0192                     	;# 
  2110  0193                     	;# 
  2111  0193                     	;# 
  2112  0194                     	;# 
  2113  0195                     	;# 
  2114  0196                     	;# 
  2115  0197                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019C                     	;# 
  2123  019C                     	;# 
  2124  019D                     	;# 
  2125  019E                     	;# 
  2126  019F                     	;# 
  2127  020D                     	;# 
  2128  0210                     	;# 
  2129  0211                     	;# 
  2130  0211                     	;# 
  2131  0212                     	;# 
  2132  0212                     	;# 
  2133  0213                     	;# 
  2134  0213                     	;# 
  2135  0214                     	;# 
  2136  0214                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0215                     	;# 
  2140  0216                     	;# 
  2141  0216                     	;# 
  2142  0217                     	;# 
  2143  0217                     	;# 
  2144  0291                     	;# 
  2145  0291                     	;# 
  2146  0292                     	;# 
  2147  0293                     	;# 
  2148  0298                     	;# 
  2149  0298                     	;# 
  2150  0299                     	;# 
  2151  029A                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166                           
  2167                           	psect	idataBANK4
  2168  105E                     __pidataBANK4:	
  2169                           
  2170                           ;initializer for __product
  2171  105E  3463               	retlw	99
  2172  105F  3402               	retlw	2
  2173  1060  3400               	retlw	0
  2174  1061  3400               	retlw	0
  2175  1062  3400               	retlw	0
  2176  1063  3400               	retlw	0
  2177  1064  3400               	retlw	0
  2178  1065  3400               	retlw	0
  2179  1066  3400               	retlw	0
  2180  1067  3400               	retlw	0
  2181  1068  3400               	retlw	0
  2182  1069  3400               	retlw	0
  2183  106A  34FF               	retlw	255
  2184  106B  34FF               	retlw	255
  2185  106C  34FF               	retlw	255
  2186  106D  3400               	retlw	0
  2187  106E  3400               	retlw	0
  2188  106F  3400               	retlw	0
  2189  1070  3400               	retlw	0
  2190  1071  3400               	retlw	0
  2191  1072  3400               	retlw	0
  2192  1073  3400               	retlw	0
  2193  1074  3400               	retlw	0
  2194  1075  3400               	retlw	0
  2195  1076  3400               	retlw	0
  2196  1077  3400               	retlw	0
  2197  1078  3400               	retlw	0
  2198  1079  3400               	retlw	0
  2199  107A  3400               	retlw	0
  2200  107B  3400               	retlw	0
  2201  107C  3400               	retlw	0
  2202  107D  3400               	retlw	0
  2203                           
  2204                           	psect	stringtext
  2205  1800                     __pstringtext:	
  2206  1800                     _CC2500_registers_address:	
  2207  1800  3403               	retlw	3
  2208  1801  3416               	retlw	22
  2209  1802  3417               	retlw	23
  2210  1803  341E               	retlw	30
  2211  1804  341F               	retlw	31
  2212  1805  3420               	retlw	32
  2213  1806  342A               	retlw	42
  2214  1807  342B               	retlw	43
  2215  1808  340B               	retlw	11
  2216  1809  340C               	retlw	12
  2217  180A  340D               	retlw	13
  2218  180B  340E               	retlw	14
  2219  180C  340F               	retlw	15
  2220  180D  3410               	retlw	16
  2221  180E  3411               	retlw	17
  2222  180F  3412               	retlw	18
  2223  1810  3413               	retlw	19
  2224  1811  3414               	retlw	20
  2225  1812  340A               	retlw	10
  2226  1813  3415               	retlw	21
  2227  1814  3421               	retlw	33
  2228  1815  3422               	retlw	34
  2229  1816  3418               	retlw	24
  2230  1817  3419               	retlw	25
  2231  1818  341A               	retlw	26
  2232  1819  341B               	retlw	27
  2233  181A  341C               	retlw	28
  2234  181B  341D               	retlw	29
  2235  181C  3423               	retlw	35
  2236  181D  3424               	retlw	36
  2237  181E  3425               	retlw	37
  2238  181F  3426               	retlw	38
  2239  1820  3429               	retlw	41
  2240  1821  342C               	retlw	44
  2241  1822  342D               	retlw	45
  2242  1823  342E               	retlw	46
  2243  1824  3400               	retlw	0
  2244  1825  3401               	retlw	1
  2245  1826  3402               	retlw	2
  2246  1827  3407               	retlw	7
  2247  1828  3408               	retlw	8
  2248  1829  3409               	retlw	9
  2249  182A  3406               	retlw	6
  2250  182B  3404               	retlw	4
  2251  182C  3405               	retlw	5
  2252  182D  3427               	retlw	39
  2253  182E  3428               	retlw	40
  2254  182F                     __end_of_CC2500_registers_address:	
  2255  182F                     _CC2500_rfSettings:	
  2256  182F  3407               	retlw	7
  2257  1830  3407               	retlw	7
  2258  1831  3430               	retlw	48
  2259  1832  3487               	retlw	135
  2260  1833  346B               	retlw	107
  2261  1834  34F8               	retlw	248
  2262  1835  347F               	retlw	127
  2263  1836  343F               	retlw	63
  2264  1837  3409               	retlw	9
  2265  1838  3400               	retlw	0
  2266  1839  345C               	retlw	92
  2267  183A  34A7               	retlw	167
  2268  183B  3462               	retlw	98
  2269  183C  3486               	retlw	134
  2270  183D  3483               	retlw	131
  2271  183E  3403               	retlw	3
  2272  183F  3422               	retlw	34
  2273  1840  34F8               	retlw	248
  2274  1841  3400               	retlw	0
  2275  1842  3444               	retlw	68
  2276  1843  34B6               	retlw	182
  2277  1844  3410               	retlw	16
  2278  1845  3418               	retlw	24
  2279  1846  341D               	retlw	29
  2280  1847  341C               	retlw	28
  2281  1848  34C7               	retlw	199
  2282  1849  3400               	retlw	0
  2283  184A  34B2               	retlw	178
  2284  184B  34EA               	retlw	234
  2285  184C  340A               	retlw	10
  2286  184D  3400               	retlw	0
  2287  184E  3411               	retlw	17
  2288  184F  3459               	retlw	89
  2289  1850  3488               	retlw	136
  2290  1851  3431               	retlw	49
  2291  1852  340B               	retlw	11
  2292  1853  342F               	retlw	47
  2293  1854  342E               	retlw	46
  2294  1855  3406               	retlw	6
  2295  1856  3404               	retlw	4
  2296  1857  3405               	retlw	5
  2297  1858  3400               	retlw	0
  2298  1859  3430               	retlw	48
  2299  185A  34D3               	retlw	211
  2300  185B  3491               	retlw	145
  2301  185C  3441               	retlw	65
  2302  185D  3400               	retlw	0
  2303  185E                     __end_of_CC2500_rfSettings:	
  2304  185E                     _CC2500_patable_vaule:	
  2305  185E  34FE               	retlw	254
  2306  185F  34FE               	retlw	254
  2307  1860  34FE               	retlw	254
  2308  1861  34FE               	retlw	254
  2309  1862  34FE               	retlw	254
  2310  1863  34FE               	retlw	254
  2311  1864  34FE               	retlw	254
  2312  1865  34FE               	retlw	254
  2313  1866                     __end_of_CC2500_patable_vaule:	
  2314                           
  2315                           	psect	nvBANK1
  2316  00EF                     __pnvBANK1:	
  2317  00EF                     _product:	
  2318  00EF                     	ds	1
  2319  000C                     _PORTA	set	12
  2320  000D                     _PORTB	set	13
  2321  000E                     _PORTC	set	14
  2322  0018                     _T1CON	set	24
  2323  0017                     _TMR1H	set	23
  2324  0016                     _TMR1L	set	22
  2325  005F                     _GIE	set	95
  2326  005B                     _IOCIE	set	91
  2327  0058                     _IOCIF	set	88
  2328  005E                     _PEIE	set	94
  2329  0060                     _RA0	set	96
  2330  0064                     _RA4	set	100
  2331  0066                     _RA6	set	102
  2332  0067                     _RA7	set	103
  2333  0068                     _RB0	set	104
  2334  0069                     _RB1	set	105
  2335  006A                     _RB2	set	106
  2336  006B                     _RB3	set	107
  2337  006D                     _RB5	set	109
  2338  0070                     _RC0	set	112
  2339  0071                     _RC1	set	113
  2340  0073                     _RC3	set	115
  2341  0074                     _RC4	set	116
  2342  0075                     _RC5	set	117
  2343  0088                     _TMR1IF	set	136
  2344  009D                     _ADCON0	set	157
  2345  009E                     _ADCON1	set	158
  2346  009C                     _ADRESH	set	156
  2347  009B                     _ADRESL	set	155
  2348  0099                     _OSCCON	set	153
  2349  008C                     _TRISA	set	140
  2350  008D                     _TRISB	set	141
  2351  008E                     _TRISC	set	142
  2352  0097                     _WDTCON	set	151
  2353  04E9                     _GO_nDONE	set	1257
  2354  0488                     _TMR1IE	set	1160
  2355  0117                     _FVRCON	set	279
  2356  010C                     _LATA	set	268
  2357  010D                     _LATB	set	269
  2358  010E                     _LATC	set	270
  2359  018C                     _ANSELA	set	396
  2360  018D                     _ANSELB	set	397
  2361  018E                     _ANSELC	set	398
  2362  0192                     _PMADRH	set	402
  2363  0191                     _PMADRL	set	401
  2364  0196                     _PMCON2	set	406
  2365  0194                     _PMDATH	set	404
  2366  0193                     _PMDATL	set	403
  2367  0CAE                     _CFGS	set	3246
  2368  0CAC                     _FREE	set	3244
  2369  0CAD                     _LWLO	set	3245
  2370  0CA8                     _RD	set	3240
  2371  0CA9                     _WR	set	3241
  2372  0CAA                     _WREN	set	3242
  2373  020D                     _WPUB	set	525
  2374  0396                     _IOCBF	set	918
  2375  0395                     _IOCBN	set	917
  2376  0394                     _IOCBP	set	916
  2377  1CB2                     _IOCBF2	set	7346
  2378                           
  2379                           ; #config settings
  2380  0000                     
  2381                           	psect	cinit
  2382  0022                     start_initialization:	
  2383  0022                     __initialization:	
  2384                           
  2385                           ; Clear objects allocated to BITCOMMON
  2386  0022  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BITBANK0
  2389  0023  01E9               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BANK0
  2392  0024  01E3               	clrf	__pbssBANK0& (0+127)
  2393  0025  01E4               	clrf	(__pbssBANK0+1)& (0+127)
  2394  0026  01E5               	clrf	(__pbssBANK0+2)& (0+127)
  2395  0027  01E6               	clrf	(__pbssBANK0+3)& (0+127)
  2396  0028  01E7               	clrf	(__pbssBANK0+4)& (0+127)
  2397  0029  01E8               	clrf	(__pbssBANK0+5)& (0+127)
  2398                           
  2399                           ; Clear objects allocated to BANK1
  2400  002A  30A0               	movlw	low __pbssBANK1
  2401  002B  0084               	movwf	4
  2402  002C  3000               	movlw	high __pbssBANK1
  2403  002D  0085               	movwf	5
  2404  002E  303B               	movlw	59
  2405  002F  319B  23CA  3180   	fcall	clear_ram0
  2406                           
  2407                           ; Clear objects allocated to BANK2
  2408  0032  3020               	movlw	low __pbssBANK2
  2409  0033  0084               	movwf	4
  2410  0034  3001               	movlw	high __pbssBANK2
  2411  0035  0085               	movwf	5
  2412  0036  304E               	movlw	78
  2413  0037  319B  23CA  3180   	fcall	clear_ram0
  2414                           
  2415                           ; Clear objects allocated to BANK3
  2416  003A  30A0               	movlw	low __pbssBANK3
  2417  003B  0084               	movwf	4
  2418  003C  3001               	movlw	high __pbssBANK3
  2419  003D  0085               	movwf	5
  2420  003E  304C               	movlw	76
  2421  003F  319B  23CA  3180   	fcall	clear_ram0
  2422                           
  2423                           ; Initialize objects allocated to BANK4
  2424  0042  305E               	movlw	low __pidataBANK4
  2425  0043  0084               	movwf	4
  2426  0044  3090               	movlw	(high __pidataBANK4)| (0+128)
  2427  0045  0085               	movwf	5
  2428  0046  3020               	movlw	low __pdataBANK4
  2429  0047  0086               	movwf	6
  2430  0048  3002               	movlw	high __pdataBANK4
  2431  0049  0087               	movwf	7
  2432  004A  3020               	movlw	32
  2433  004B  319B  23C4         	fcall	init_ram
  2434  004D                     end_of_initialization:	
  2435                           ;End of C runtime variable initialization code
  2436                           
  2437  004D                     __end_of__initialization:	
  2438  004D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2439  004E  0020               	movlb	0
  2440  004F  3195  2DA9         	ljmp	_main	;jump to C main() function
  2441                           
  2442                           	psect	bitbssCOMMON
  2443  03E8                     __pbitbssCOMMON:	
  2444  03E8                     _Transceive_OK:	
  2445  03E8                     	ds	1
  2446                           
  2447                           	psect	bitbssBANK0
  2448  0348                     __pbitbssBANK0:	
  2449  0348                     _Receive_OK:	
  2450  0348                     	ds	1
  2451                           
  2452                           	psect	bssBANK0
  2453  0063                     __pbssBANK0:	
  2454  0063                     _DelayOff:	
  2455  0063                     	ds	1
  2456  0064                     _DimmerLights:	
  2457  0064                     	ds	1
  2458  0065                     _LED:	
  2459  0065                     	ds	1
  2460  0066                     _SPI0Buffer:	
  2461  0066                     	ds	1
  2462  0067                     _Sw:	
  2463  0067                     	ds	1
  2464  0068                     _Tx_Length:	
  2465  0068                     	ds	1
  2466                           
  2467                           	psect	bssBANK1
  2468  00A0                     __pbssBANK1:	
  2469  00A0                     _RF1:	
  2470  00A0                     	ds	14
  2471  00AE                     _Buz1:	
  2472  00AE                     	ds	12
  2473  00BA                     _DimmerIntr1:	
  2474  00BA                     	ds	9
  2475  00C3                     _RF_Count:	
  2476  00C3                     	ds	2
  2477  00C5                     _WDT:	
  2478  00C5                     	ds	2
  2479  00C7                     _CRC:	
  2480  00C7                     	ds	1
  2481  00C8                     _Cmd:	
  2482  00C8                     	ds	1
  2483  00C9                     _DimmerIntr:	
  2484  00C9                     	ds	1
  2485  00CA                     _Light:	
  2486  00CA                     	ds	1
  2487  00CB                     _RSSI:	
  2488  00CB                     	ds	1
  2489  00CC                     _Rx_Length:	
  2490  00CC                     	ds	1
  2491  00CD                     _SwDetect:	
  2492  00CD                     	ds	1
  2493  00CE                     _r_address:	
  2494  00CE                     	ds	1
  2495  00CF                     _r_data:	
  2496  00CF                     	ds	1
  2497  00D0                     _s_data:	
  2498  00D0                     	ds	1
  2499  00D1                     _Temp:	
  2500  00D1                     	ds	10
  2501                           
  2502                           	psect	bssBANK2
  2503  0120                     __pbssBANK2:	
  2504  0120                     _myMain:	
  2505  0120                     	ds	13
  2506  012D                     _Dimmer:	
  2507  012D                     	ds	5
  2508  0132                     _Timer1:	
  2509  0132                     	ds	3
  2510  0135                     _Load:	
  2511  0135                     	ds	40
  2512  015D                     _DimmerLights1:	
  2513  015D                     	ds	8
  2514  0165                     _DlySw1:	
  2515  0165                     	ds	5
  2516  016A                     _VarErrLED:	
  2517  016A                     	ds	4
  2518                           
  2519                           	psect	bssBANK3
  2520  01A0                     __pbssBANK3:	
  2521  01A0                     _RF_Data:	
  2522  01A0                     	ds	30
  2523  01BE                     _Memory:	
  2524  01BE                     	ds	37
  2525  01E3                     _Sw1:	
  2526  01E3                     	ds	9
  2527                           
  2528                           	psect	dataBANK4
  2529  0220                     __pdataBANK4:	
  2530  0220                     __product:	
  2531  0220                     	ds	32
  2532                           
  2533                           	psect	clrtext
  2534  1BCA                     clear_ram0:	
  2535                           ;	Called with FSR0 containing the base address, and
  2536                           ;	WREG with the size to clear
  2537                           
  2538  1BCA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2539  1BCB                     clrloop0:	
  2540  1BCB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2541  1BCC  3101               	addfsr 0,1
  2542  1BCD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2543  1BCE  2BCB               	goto	clrloop0	;have we reached the end yet?
  2544  1BCF  3400               	retlw	0	;all done for this memory range, return
  2545                           
  2546                           	psect	inittext
  2547  1BC4                     init_ram:	
  2548  1BC4  00FE               	movwf	126
  2549  1BC5                     initloop:	
  2550  1BC5  0012               	moviw fsr0++
  2551  1BC6  001E               	movwi fsr1++
  2552  1BC7  0BFE               	decfsz	126,f
  2553  1BC8  2BC5               	goto	initloop
  2554  1BC9  3400               	retlw	0
  2555                           
  2556                           	psect	cstackBANK4
  2557  0240                     __pcstackBANK4:	
  2558  0240                     ?_main:	
  2559  0240                     main@argc:	
  2560                           ; 2 bytes @ 0x0
  2561                           
  2562                           
  2563                           ; 2 bytes @ 0x0
  2564  0240                     	ds	2
  2565  0242                     main@argv:	
  2566                           
  2567                           ; 2 bytes @ 0x2
  2568  0242                     	ds	2
  2569                           
  2570                           	psect	cstackBANK3
  2571  01EC                     __pcstackBANK3:	
  2572  01EC                     setRF_Main@error:	
  2573                           
  2574                           ; 1 bytes @ 0x0
  2575  01EC                     	ds	1
  2576                           
  2577                           	psect	cstackBANK2
  2578  016E                     __pcstackBANK2:	
  2579  016E                     setDimmerLights_Main@lights:	
  2580  016E                     getRxData@error:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583                           
  2584                           ; 1 bytes @ 0x0
  2585  016E                     	ds	1
  2586  016F                     ??_setRF_Main:	
  2587                           
  2588                           ; 0 bytes @ 0x1
  2589  016F                     	ds	1
  2590                           
  2591                           	psect	cstackBANK1
  2592  00DB                     __pcstackBANK1:	
  2593  00DB                     ??_getDimmerLights_PercentToValue:	
  2594  00DB                     ??_getDimmerLights_ValueToPercent:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597                           
  2598                           ; 0 bytes @ 0x0
  2599  00DB                     	ds	2
  2600  00DD                     getDimmerLights_PercentToValue@value:	
  2601  00DD                     getDimmerLights_ValueToPercent@value:	
  2602                           ; 1 bytes @ 0x2
  2603                           
  2604                           
  2605                           ; 1 bytes @ 0x2
  2606  00DD                     	ds	1
  2607  00DE                     getDimmerLights_PercentToValue@i:	
  2608  00DE                     getDimmerLights_ValueToPercent@i:	
  2609                           ; 3 bytes @ 0x3
  2610                           
  2611                           
  2612                           ; 3 bytes @ 0x3
  2613  00DE                     	ds	3
  2614  00E1                     ?_setProductData:	
  2615  00E1                     ?_setDimmerIntr_MaxmumValue:	
  2616                           ; 0 bytes @ 0x6
  2617                           
  2618  00E1                     setDimmerIntr_MaxmumValue@value:	
  2619                           ; 0 bytes @ 0x6
  2620                           
  2621  00E1                     Flash_Memory_Initialization@i:	
  2622                           ; 1 bytes @ 0x6
  2623                           
  2624  00E1                     setProductData@value:	
  2625                           ; 1 bytes @ 0x6
  2626                           
  2627                           
  2628                           ; 1 bytes @ 0x6
  2629  00E1                     	ds	1
  2630  00E2                     setDimmerIntr_MaxmumValue@lights:	
  2631  00E2                     setProductData@address:	
  2632                           ; 1 bytes @ 0x7
  2633                           
  2634                           
  2635                           ; 1 bytes @ 0x7
  2636  00E2                     	ds	1
  2637  00E3                     ??_DlyOff_Main:	
  2638  00E3                     ?_setRF_DimmerLights:	
  2639                           ; 0 bytes @ 0x8
  2640                           
  2641  00E3                     ??_setTemp_Main:	
  2642                           ; 0 bytes @ 0x8
  2643                           
  2644  00E3                     ??_setLog_Code:	
  2645                           ; 0 bytes @ 0x8
  2646                           
  2647  00E3                     ??_setRFSW_AdjControl:	
  2648                           ; 0 bytes @ 0x8
  2649                           
  2650  00E3                     ?_setDelayOff_GO:	
  2651                           ; 0 bytes @ 0x8
  2652                           
  2653  00E3                     setDelayOff_GO@command:	
  2654                           ; 0 bytes @ 0x8
  2655                           
  2656  00E3                     setRF_DimmerLights@on:	
  2657                           ; 1 bytes @ 0x8
  2658                           
  2659                           
  2660                           ; 1 bytes @ 0x8
  2661  00E3                     	ds	1
  2662  00E4                     ??_setRF_DimmerLights:	
  2663  00E4                     setDelayOff_GO@value:	
  2664                           ; 0 bytes @ 0x9
  2665                           
  2666  00E4                     setTemp_Main@error:	
  2667                           ; 1 bytes @ 0x9
  2668                           
  2669                           
  2670                           ; 1 bytes @ 0x9
  2671  00E4                     	ds	1
  2672  00E5                     ??_setDelayOff_GO:	
  2673  00E5                     DlyOff_Main@sw:	
  2674                           ; 0 bytes @ 0xA
  2675                           
  2676  00E5                     setTemp_Main@TempGO:	
  2677                           ; 1 bytes @ 0xA
  2678                           
  2679  00E5                     setRFSW_AdjControl@status:	
  2680                           ; 1 bytes @ 0xA
  2681                           
  2682                           
  2683                           ; 1 bytes @ 0xA
  2684  00E5                     	ds	1
  2685  00E6                     setRFSW_AdjControl@sw:	
  2686  00E6                     setRF_DimmerLights@status:	
  2687                           ; 1 bytes @ 0xB
  2688                           
  2689  00E6                     setTemp_Main@SafeValue:	
  2690                           ; 1 bytes @ 0xB
  2691                           
  2692                           
  2693                           ; 2 bytes @ 0xB
  2694  00E6                     	ds	1
  2695  00E7                     setDelayOff_GO@i:	
  2696  00E7                     setRF_DimmerLights@lights:	
  2697                           ; 1 bytes @ 0xC
  2698                           
  2699                           
  2700                           ; 1 bytes @ 0xC
  2701  00E7                     	ds	1
  2702  00E8                     ?_setDimmerLights_Dimming:	
  2703  00E8                     setDelayOff_GO@j:	
  2704                           ; 0 bytes @ 0xD
  2705                           
  2706  00E8                     setDimmerLights_Dimming@status:	
  2707                           ; 1 bytes @ 0xD
  2708                           
  2709  00E8                     setTemp_Main@DangerValue:	
  2710                           ; 1 bytes @ 0xD
  2711                           
  2712                           
  2713                           ; 2 bytes @ 0xD
  2714  00E8                     	ds	1
  2715  00E9                     ??_setDimmerLights_Dimming:	
  2716  00E9                     setDelayOff_GO@k:	
  2717                           ; 0 bytes @ 0xE
  2718                           
  2719                           
  2720                           ; 1 bytes @ 0xE
  2721  00E9                     	ds	1
  2722  00EA                     setDelayOff_GO@sw:	
  2723  00EA                     setDimmerLights_Dimming@lights:	
  2724                           ; 1 bytes @ 0xF
  2725                           
  2726  00EA                     setTemp_Main@AD:	
  2727                           ; 1 bytes @ 0xF
  2728                           
  2729                           
  2730                           ; 2 bytes @ 0xF
  2731  00EA                     	ds	1
  2732  00EB                     ?_setDimmerLights_OnOff:	
  2733  00EB                     ??_setRFSW_Control:	
  2734                           ; 0 bytes @ 0x10
  2735                           
  2736  00EB                     setDimmerLights_OnOff@command:	
  2737                           ; 0 bytes @ 0x10
  2738                           
  2739                           
  2740                           ; 1 bytes @ 0x10
  2741  00EB                     	ds	1
  2742  00EC                     ??_setDimmerLights_OnOff:	
  2743  00EC                     setRFSW_Control@status:	
  2744                           ; 0 bytes @ 0x11
  2745                           
  2746                           
  2747                           ; 1 bytes @ 0x11
  2748  00EC                     	ds	1
  2749  00ED                     setRFSW_Control@sw:	
  2750                           
  2751                           ; 1 bytes @ 0x12
  2752  00ED                     	ds	1
  2753  00EE                     ??_getRxData:	
  2754  00EE                     setDimmerLights_OnOff@lights:	
  2755                           ; 0 bytes @ 0x13
  2756                           
  2757                           
  2758                           ; 1 bytes @ 0x13
  2759  00EE                     	ds	1
  2760                           
  2761                           	psect	cstackCOMMON
  2762  0070                     __pcstackCOMMON:	
  2763  0070                     ?_CC2500_WriteCommand:	
  2764  0070                     ?_RF_Timeout_Counter:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setRF_TimeoutCleared:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_CC2500_WriteByte:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_CC2500_ReadStatus:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_CC2500_ReadByte:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_CC2500_PowerRST:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_CC2500_InitSetREG:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_CC2500_InitPATable:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_CC2500_ClearTXFIFO:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_CC2500_ClearRXFIFO:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_CC2500_FrequencyCabr:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_CC2500_SIDLEMode:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_DlyOff_Initialization:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_DlyOff_Main:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setDimmerLights_SwOn:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_setDimmerLights_SwOff:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_setDimmerLights_Initialization:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_setDimmerLights_Main:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_setDimmerLights_Line:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_setTxData:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_setRF_TransceiveGO:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setLED_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_setLED_Main:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_Fosc_Set:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_IO_Set:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_TMR1_Set:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_ADC_Set:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_IOC_Set:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_WDT_Set:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_TMR1_ISR:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_IOC_ISR:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ??_IOC_ISR:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Timeout_Counter:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_set_TimeoutCleared:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Flash_Memory_Write:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Modify:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_WDT_Clearing:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_myMain_Initialization:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Temp_Initialization:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_Load_Initialization:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_Switch_Initialization:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_RF_Initialization:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_getLoad_AD:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_getTemp_AD:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_my_MainTimer:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_Temp_Main:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_Load_Main:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0070                     ?_Switch_Main:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0070                     ?_RF_Main:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0070                     ?_Exception_Main:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0070                     ?_setLoad_AH_AL_Restore:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0070                     ?_setTemp_Initialization:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0070                     ?_setTemp_Main:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0070                     ?_setRF_Initialization:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0070                     ?_setRF_Main:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0070                     ?_RF_RxDisable:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0070                     ?_getRxData:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0070                     ?_setLog_Code:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0070                     ?_setControl_Lights_Table:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0070                     ?_setRFSW_Control:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0070                     ?_setRFSW_AdjControl:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0070                     ?_setSw_Initialization:	
  2948                           ; 0 bytes @ 0x0
  2949                           
  2950  0070                     ?_setSw_Main:	
  2951                           ; 0 bytes @ 0x0
  2952                           
  2953  0070                     ?_Buzzer_Initialization:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0070                     ?_Buzzer_Main:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0070                     ?_CC2500_TxData:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0070                     ?_CC2500_RxData:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0070                     ?_CC2500_PowerOnInitial:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0070                     ?_DelayOffPointSelect:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0070                     ?_DelayOff_Initialization:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0070                     ?_DelayOff_Main:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0070                     ?_DimmerIntr_Initialization:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0070                     ?_DimmerLights_SelectPointer:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0070                     ?_DimmerLights_Initialization:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0070                     ?_setDimmerLights_DimmingOn:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0070                     ?_DimmerLights_Main:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0070                     ?_DimmerLights_TMR_1:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0070                     ?_DimmerLights_IOC_1:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0070                     ??_DimmerLights_IOC_1:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0070                     ?_LedPointSelect:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0070                     ?_LED_Initialization:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0070                     ?_LED_Main:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0070                     ?_Mcu_Initialization:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0070                     ?_ISR:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0070                     ?_Flash_Memory_Initialization:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0070                     ?_Flash_Memory_Main:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0070                     ?_Flash_Memory_Unlock:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0070                     ?_Flash_Memory_Erasing:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0070                     ?_setMemory_Modify:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0070                     ?_setMemory_LoopSave:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0070                     ?_WDT_Main:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0070                     ?_setRF_Learn:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0070                     ?_TouchPower:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0070                     ?_SwPointSelect:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0070                     ?_getDimmerLights_Status:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0070                     ?_getLoad_OK:	
  3050                           ; 1 bytes @ 0x0
  3051                           
  3052  0070                     ?_getMain_All_Error_Status:	
  3053                           ; 1 bytes @ 0x0
  3054                           
  3055  0070                     ?_getMain_All_LightsStatus:	
  3056                           ; 1 bytes @ 0x0
  3057                           
  3058  0070                     ?_getDimmerLights_Allow_Condition:	
  3059                           ; 1 bytes @ 0x0
  3060                           
  3061  0070                     ?_getDimmerLights_PercentToValue:	
  3062                           ; 1 bytes @ 0x0
  3063                           
  3064  0070                     ?_getDimmerLights_ValueToPercent:	
  3065                           ; 1 bytes @ 0x0
  3066                           
  3067  0070                     ?_getCmd_Status:	
  3068                           ; 1 bytes @ 0x0
  3069                           
  3070  0070                     ?_Flash_Memory_Read:	
  3071                           ; 1 bytes @ 0x0
  3072                           
  3073  0070                     ?_getRF_KeyStatus:	
  3074                           ; 1 bytes @ 0x0
  3075                           
  3076  0070                     ?_getSw_KeyStatus:	
  3077                           ; 1 bytes @ 0x0
  3078                           
  3079  0070                     ?_getDelayOff_GO:	
  3080                           ; 1 bytes @ 0x0
  3081                           
  3082  0070                     ?_getDimmerIntr_DimmingValue:	
  3083                           ; 1 bytes @ 0x0
  3084                           
  3085  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0070                     ?_getDimmerLights_Line:	
  3089                           ; 1 bytes @ 0x0
  3090                           
  3091  0070                     ?_getDimmer_LoadGO:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0070                     ?_getDimmer_Load_Status:	
  3095                           ; 1 bytes @ 0x0
  3096                           
  3097  0070                     ?_getMain_Lights_Count:	
  3098                           ; 1 bytes @ 0x0
  3099                           
  3100  0070                     ?___lbdiv:	
  3101                           ; 1 bytes @ 0x0
  3102                           
  3103  0070                     setDimmerLights_Initialization@lights:	
  3104                           ; 1 bytes @ 0x0
  3105                           
  3106  0070                     getDimmerLights_Allow_Condition@lights:	
  3107                           ; 1 bytes @ 0x0
  3108                           
  3109  0070                     getSw_KeyStatus@sw:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0070                     ___lbdiv@divisor:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115                           
  3116                           ; 1 bytes @ 0x0
  3117  0070                     	ds	1
  3118  0071                     ??___lbdiv:	
  3119                           
  3120                           ; 0 bytes @ 0x1
  3121  0071                     	ds	1
  3122  0072                     ___lbdiv@dividend:	
  3123                           
  3124                           ; 1 bytes @ 0x2
  3125  0072                     	ds	1
  3126  0073                     ___lbdiv@counter:	
  3127                           
  3128                           ; 1 bytes @ 0x3
  3129  0073                     	ds	1
  3130  0074                     ___lbdiv@quotient:	
  3131                           
  3132                           ; 1 bytes @ 0x4
  3133  0074                     	ds	1
  3134  0075                     ?_Division:	
  3135  0075                     Division@num:	
  3136                           ; 1 bytes @ 0x5
  3137                           
  3138                           
  3139                           ; 1 bytes @ 0x5
  3140  0075                     	ds	1
  3141  0076                     ??_Division:	
  3142                           
  3143                           ; 0 bytes @ 0x6
  3144  0076                     	ds	2
  3145  0078                     Division@value:	
  3146                           
  3147                           ; 1 bytes @ 0x8
  3148  0078                     	ds	1
  3149  0079                     Division@result:	
  3150                           
  3151                           ; 1 bytes @ 0x9
  3152  0079                     	ds	1
  3153  007A                     ??_DimmerLights_TMR_1:	
  3154                           
  3155                           ; 0 bytes @ 0xA
  3156  007A                     	ds	2
  3157  007C                     ??_TMR1_ISR:	
  3158  007C                     ??_ISR:	
  3159                           ; 0 bytes @ 0xC
  3160                           
  3161                           
  3162                           ; 0 bytes @ 0xC
  3163  007C                     	ds	1
  3164                           
  3165                           	psect	cstackBANK0
  3166  0020                     __pcstackBANK0:	
  3167  0020                     DimmerLights_TMR_1@TuneValue4:	
  3168                           
  3169                           ; 1 bytes @ 0x0
  3170  0020                     	ds	1
  3171  0021                     DimmerLights_TMR_1@dimming:	
  3172                           
  3173                           ; 1 bytes @ 0x1
  3174  0021                     	ds	1
  3175  0022                     DimmerLights_TMR_1@TuneValue1:	
  3176                           
  3177                           ; 1 bytes @ 0x2
  3178  0022                     	ds	1
  3179  0023                     DimmerLights_TMR_1@TuneValue2:	
  3180                           
  3181                           ; 1 bytes @ 0x3
  3182  0023                     	ds	1
  3183  0024                     DimmerLights_TMR_1@TuneValue3:	
  3184                           
  3185                           ; 1 bytes @ 0x4
  3186  0024                     	ds	1
  3187  0025                     DimmerLights_TMR_1@count:	
  3188                           
  3189                           ; 1 bytes @ 0x5
  3190  0025                     	ds	1
  3191  0026                     ??_RF_Timeout_Counter:	
  3192  0026                     ??_setRF_TimeoutCleared:	
  3193                           ; 0 bytes @ 0x6
  3194                           
  3195  0026                     ??_CC2500_WriteByte:	
  3196                           ; 0 bytes @ 0x6
  3197                           
  3198  0026                     ??_CC2500_ReadByte:	
  3199                           ; 0 bytes @ 0x6
  3200                           
  3201  0026                     ?_DelayTime_1us:	
  3202                           ; 0 bytes @ 0x6
  3203                           
  3204  0026                     ??_setDimmerLights_Initialization:	
  3205                           ; 0 bytes @ 0x6
  3206                           
  3207  0026                     ??_getLoad_OK:	
  3208                           ; 0 bytes @ 0x6
  3209                           
  3210  0026                     ??_getMain_All_Error_Status:	
  3211                           ; 0 bytes @ 0x6
  3212                           
  3213  0026                     ??_getMain_All_LightsStatus:	
  3214                           ; 0 bytes @ 0x6
  3215                           
  3216  0026                     ??_setDimmerLights_Line:	
  3217                           ; 0 bytes @ 0x6
  3218                           
  3219  0026                     ??_getCmd_Status:	
  3220                           ; 0 bytes @ 0x6
  3221                           
  3222  0026                     ?_setCmd_Status:	
  3223                           ; 0 bytes @ 0x6
  3224                           
  3225  0026                     ??_setTxData:	
  3226                           ; 0 bytes @ 0x6
  3227                           
  3228  0026                     ??_setRF_TransceiveGO:	
  3229                           ; 0 bytes @ 0x6
  3230                           
  3231  0026                     ??_Fosc_Set:	
  3232                           ; 0 bytes @ 0x6
  3233                           
  3234  0026                     ??_IO_Set:	
  3235                           ; 0 bytes @ 0x6
  3236                           
  3237  0026                     ??_TMR1_Set:	
  3238                           ; 0 bytes @ 0x6
  3239                           
  3240  0026                     ??_ADC_Set:	
  3241                           ; 0 bytes @ 0x6
  3242                           
  3243  0026                     ??_IOC_Set:	
  3244                           ; 0 bytes @ 0x6
  3245                           
  3246  0026                     ??_WDT_Set:	
  3247                           ; 0 bytes @ 0x6
  3248                           
  3249  0026                     ??_Timeout_Counter:	
  3250                           ; 0 bytes @ 0x6
  3251                           
  3252  0026                     ??_set_TimeoutCleared:	
  3253                           ; 0 bytes @ 0x6
  3254                           
  3255  0026                     ??_Flash_Memory_Read:	
  3256                           ; 0 bytes @ 0x6
  3257                           
  3258  0026                     ?_setMemory_Data:	
  3259                           ; 0 bytes @ 0x6
  3260                           
  3261  0026                     ??_Flash_Memory_Write:	
  3262                           ; 0 bytes @ 0x6
  3263                           
  3264  0026                     ??_WDT_Clearing:	
  3265                           ; 0 bytes @ 0x6
  3266                           
  3267  0026                     ??_myMain_Initialization:	
  3268                           ; 0 bytes @ 0x6
  3269                           
  3270  0026                     ??_Temp_Initialization:	
  3271                           ; 0 bytes @ 0x6
  3272                           
  3273  0026                     ??_setLoad_AH_AL_Restore:	
  3274                           ; 0 bytes @ 0x6
  3275                           
  3276  0026                     ??_setTemp_Initialization:	
  3277                           ; 0 bytes @ 0x6
  3278                           
  3279  0026                     ??_setRF_Initialization:	
  3280                           ; 0 bytes @ 0x6
  3281                           
  3282  0026                     ??_getRF_KeyStatus:	
  3283                           ; 0 bytes @ 0x6
  3284                           
  3285  0026                     ??_getSw_KeyStatus:	
  3286                           ; 0 bytes @ 0x6
  3287                           
  3288  0026                     ??_Buzzer_Initialization:	
  3289                           ; 0 bytes @ 0x6
  3290                           
  3291  0026                     ??_Buzzer_Main:	
  3292                           ; 0 bytes @ 0x6
  3293                           
  3294  0026                     ??_DelayOffPointSelect:	
  3295                           ; 0 bytes @ 0x6
  3296                           
  3297  0026                     ??_DimmerIntr_Initialization:	
  3298                           ; 0 bytes @ 0x6
  3299                           
  3300  0026                     ?_setDimmerIntr_ControlStatus:	
  3301                           ; 0 bytes @ 0x6
  3302                           
  3303  0026                     ?_setDimmerIntr_DimmingValue:	
  3304                           ; 0 bytes @ 0x6
  3305                           
  3306  0026                     ??_getDimmerIntr_DimmingValue:	
  3307                           ; 0 bytes @ 0x6
  3308                           
  3309  0026                     ?_setDimmerIntr_Dimming_Sw:	
  3310                           ; 0 bytes @ 0x6
  3311                           
  3312  0026                     ?_setDimmerIntr_Dimming_RF:	
  3313                           ; 0 bytes @ 0x6
  3314                           
  3315  0026                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3316                           ; 0 bytes @ 0x6
  3317                           
  3318  0026                     ??_DimmerLights_SelectPointer:	
  3319                           ; 0 bytes @ 0x6
  3320                           
  3321  0026                     ??_getDimmerLights_Line:	
  3322                           ; 0 bytes @ 0x6
  3323                           
  3324  0026                     ??_getDimmer_LoadGO:	
  3325                           ; 0 bytes @ 0x6
  3326                           
  3327  0026                     ??_getDimmer_Load_Status:	
  3328                           ; 0 bytes @ 0x6
  3329                           
  3330  0026                     ??_LedPointSelect:	
  3331                           ; 0 bytes @ 0x6
  3332                           
  3333  0026                     ??_Flash_Memory_Unlock:	
  3334                           ; 0 bytes @ 0x6
  3335                           
  3336  0026                     ??_Flash_Memory_Erasing:	
  3337                           ; 0 bytes @ 0x6
  3338                           
  3339  0026                     ??_setMemory_Modify:	
  3340                           ; 0 bytes @ 0x6
  3341                           
  3342  0026                     ??_setMemory_LoopSave:	
  3343                           ; 0 bytes @ 0x6
  3344                           
  3345  0026                     ??_WDT_Main:	
  3346                           ; 0 bytes @ 0x6
  3347                           
  3348  0026                     ??_getMain_Lights_Count:	
  3349                           ; 0 bytes @ 0x6
  3350                           
  3351  0026                     ??_setRF_Learn:	
  3352                           ; 0 bytes @ 0x6
  3353                           
  3354  0026                     ??_TouchPower:	
  3355                           ; 0 bytes @ 0x6
  3356                           
  3357  0026                     ??_SwPointSelect:	
  3358                           ; 0 bytes @ 0x6
  3359                           
  3360  0026                     ?___bmul:	
  3361                           ; 0 bytes @ 0x6
  3362                           
  3363  0026                     ?_getBuz_GO:	
  3364                           ; 1 bytes @ 0x6
  3365                           
  3366  0026                     ?_getAD:	
  3367                           ; 2 bytes @ 0x6
  3368                           
  3369  0026                     ?___wmul:	
  3370                           ; 2 bytes @ 0x6
  3371                           
  3372  0026                     ?___awdiv:	
  3373                           ; 2 bytes @ 0x6
  3374                           
  3375  0026                     ?___lwdiv:	
  3376                           ; 2 bytes @ 0x6
  3377                           
  3378  0026                     ?___ftpack:	
  3379                           ; 2 bytes @ 0x6
  3380                           
  3381  0026                     setDimmerIntr_ControlStatus@command:	
  3382                           ; 3 bytes @ 0x6
  3383                           
  3384  0026                     setDimmerIntr_DimmingValue@value:	
  3385                           ; 1 bytes @ 0x6
  3386                           
  3387  0026                     setDimmerIntr_Dimming_Sw@command:	
  3388                           ; 1 bytes @ 0x6
  3389                           
  3390  0026                     setDimmerIntr_Dimming_RF@command:	
  3391                           ; 1 bytes @ 0x6
  3392                           
  3393  0026                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3394                           ; 1 bytes @ 0x6
  3395                           
  3396  0026                     setDimmerLights_Line@lights:	
  3397                           ; 1 bytes @ 0x6
  3398                           
  3399  0026                     getDimmerLights_Line@line:	
  3400                           ; 1 bytes @ 0x6
  3401                           
  3402  0026                     getDimmer_LoadGO@loadgo:	
  3403                           ; 1 bytes @ 0x6
  3404                           
  3405  0026                     getDimmer_Load_Status@status:	
  3406                           ; 1 bytes @ 0x6
  3407                           
  3408  0026                     getAD@adcon1:	
  3409                           ; 1 bytes @ 0x6
  3410                           
  3411  0026                     setMemory_Data@data:	
  3412                           ; 1 bytes @ 0x6
  3413                           
  3414  0026                     getMain_All_LightsStatus@status:	
  3415                           ; 1 bytes @ 0x6
  3416                           
  3417  0026                     getMain_Lights_Count@count:	
  3418                           ; 1 bytes @ 0x6
  3419                           
  3420  0026                     setCmd_Status@cmd:	
  3421                           ; 1 bytes @ 0x6
  3422                           
  3423  0026                     getCmd_Status@number:	
  3424                           ; 1 bytes @ 0x6
  3425                           
  3426  0026                     getLoad_OK@ok:	
  3427                           ; 1 bytes @ 0x6
  3428                           
  3429  0026                     ___bmul@multiplicand:	
  3430                           ; 1 bytes @ 0x6
  3431                           
  3432  0026                     DelayTime_1us@count:	
  3433                           ; 1 bytes @ 0x6
  3434                           
  3435  0026                     ___wmul@multiplier:	
  3436                           ; 2 bytes @ 0x6
  3437                           
  3438  0026                     ___awdiv@divisor:	
  3439                           ; 2 bytes @ 0x6
  3440                           
  3441  0026                     ___lwdiv@divisor:	
  3442                           ; 2 bytes @ 0x6
  3443                           
  3444  0026                     ___ftpack@arg:	
  3445                           ; 2 bytes @ 0x6
  3446                           
  3447                           
  3448                           ; 3 bytes @ 0x6
  3449  0026                     	ds	1
  3450  0027                     ??_getDimmerLights_Allow_Condition:	
  3451  0027                     ??_setCmd_Status:	
  3452                           ; 0 bytes @ 0x7
  3453                           
  3454  0027                     ??_setMemory_Data:	
  3455                           ; 0 bytes @ 0x7
  3456                           
  3457  0027                     ??_RF_Initialization:	
  3458                           ; 0 bytes @ 0x7
  3459                           
  3460  0027                     ??_setDimmerIntr_ControlStatus:	
  3461                           ; 0 bytes @ 0x7
  3462                           
  3463  0027                     ??_setDimmerIntr_DimmingValue:	
  3464                           ; 0 bytes @ 0x7
  3465                           
  3466  0027                     ??_setDimmerIntr_Dimming_Sw:	
  3467                           ; 0 bytes @ 0x7
  3468                           
  3469  0027                     ??_setDimmerIntr_Dimming_RF:	
  3470                           ; 0 bytes @ 0x7
  3471                           
  3472  0027                     ??_DimmerLights_Initialization:	
  3473                           ; 0 bytes @ 0x7
  3474                           
  3475  0027                     ??_Mcu_Initialization:	
  3476                           ; 0 bytes @ 0x7
  3477                           
  3478  0027                     ??___bmul:	
  3479                           ; 0 bytes @ 0x7
  3480                           
  3481  0027                     CC2500_WriteByte@loop_a:	
  3482                           ; 0 bytes @ 0x7
  3483                           
  3484  0027                     CC2500_ReadByte@loop_b:	
  3485                           ; 1 bytes @ 0x7
  3486                           
  3487  0027                     DelayOffPointSelect@sw:	
  3488                           ; 1 bytes @ 0x7
  3489                           
  3490  0027                     getDimmerIntr_DimmingValue@lights:	
  3491                           ; 1 bytes @ 0x7
  3492                           
  3493  0027                     DimmerLights_SelectPointer@lights:	
  3494                           ; 1 bytes @ 0x7
  3495                           
  3496  0027                     LedPointSelect@led:	
  3497                           ; 1 bytes @ 0x7
  3498                           
  3499  0027                     Flash_Memory_Read@i:	
  3500                           ; 1 bytes @ 0x7
  3501                           
  3502  0027                     Flash_Memory_Write@i:	
  3503                           ; 1 bytes @ 0x7
  3504                           
  3505  0027                     setMemory_Modify@command:	
  3506                           ; 1 bytes @ 0x7
  3507                           
  3508  0027                     setMemory_LoopSave@command:	
  3509                           ; 1 bytes @ 0x7
  3510                           
  3511  0027                     getMain_Lights_Count@status1:	
  3512                           ; 1 bytes @ 0x7
  3513                           
  3514  0027                     getCmd_Status@cmd:	
  3515                           ; 1 bytes @ 0x7
  3516                           
  3517  0027                     setLoad_AH_AL_Restore@i:	
  3518                           ; 1 bytes @ 0x7
  3519                           
  3520  0027                     setRF_Learn@command:	
  3521                           ; 1 bytes @ 0x7
  3522                           
  3523  0027                     getRF_KeyStatus@key:	
  3524                           ; 1 bytes @ 0x7
  3525                           
  3526  0027                     setRF_TransceiveGO@command:	
  3527                           ; 1 bytes @ 0x7
  3528                           
  3529  0027                     SwPointSelect@sw:	
  3530                           ; 1 bytes @ 0x7
  3531                           
  3532  0027                     getSw_KeyStatus@status:	
  3533                           ; 1 bytes @ 0x7
  3534                           
  3535  0027                     _getMain_All_Error_Status$3505:	
  3536                           ; 1 bytes @ 0x7
  3537                           
  3538                           
  3539                           ; 2 bytes @ 0x7
  3540  0027                     	ds	1
  3541  0028                     ??_CC2500_WriteCommand:	
  3542  0028                     ??_CC2500_ReadStatus:	
  3543                           ; 0 bytes @ 0x8
  3544                           
  3545  0028                     ??_DelayTime_1us:	
  3546                           ; 0 bytes @ 0x8
  3547                           
  3548  0028                     ?_CC2500_WriteREG:	
  3549                           ; 0 bytes @ 0x8
  3550                           
  3551  0028                     ??_DlyOff_Initialization:	
  3552                           ; 0 bytes @ 0x8
  3553                           
  3554  0028                     ??_getDimmerLights_Status:	
  3555                           ; 0 bytes @ 0x8
  3556                           
  3557  0028                     ??_setDimmerLights_SwOff:	
  3558                           ; 0 bytes @ 0x8
  3559                           
  3560  0028                     ?_setLED:	
  3561                           ; 0 bytes @ 0x8
  3562                           
  3563  0028                     ??_setLED_Main:	
  3564                           ; 0 bytes @ 0x8
  3565                           
  3566  0028                     ??_Load_Initialization:	
  3567                           ; 0 bytes @ 0x8
  3568                           
  3569  0028                     ??_getBuz_GO:	
  3570                           ; 0 bytes @ 0x8
  3571                           
  3572  0028                     ??_getDelayOff_GO:	
  3573                           ; 0 bytes @ 0x8
  3574                           
  3575  0028                     ??_setDimmerLights_DimmingOn:	
  3576                           ; 0 bytes @ 0x8
  3577                           
  3578  0028                     ?_setDimmerLights_DimmingRun:	
  3579                           ; 0 bytes @ 0x8
  3580                           
  3581  0028                     CC2500_WriteREG@value:	
  3582                           ; 0 bytes @ 0x8
  3583                           
  3584  0028                     DlyOff_Initialization@sw:	
  3585                           ; 1 bytes @ 0x8
  3586                           
  3587  0028                     getDelayOff_GO@sw:	
  3588                           ; 1 bytes @ 0x8
  3589                           
  3590  0028                     setDimmerIntr_ControlStatus@lights:	
  3591                           ; 1 bytes @ 0x8
  3592                           
  3593  0028                     setDimmerIntr_DimmingValue@lights:	
  3594                           ; 1 bytes @ 0x8
  3595                           
  3596  0028                     getDimmerIntr_DimmingValue@value:	
  3597                           ; 1 bytes @ 0x8
  3598                           
  3599  0028                     setDimmerIntr_Dimming_Sw@lights:	
  3600                           ; 1 bytes @ 0x8
  3601                           
  3602  0028                     setDimmerIntr_Dimming_RF@lights:	
  3603                           ; 1 bytes @ 0x8
  3604                           
  3605  0028                     setDimmerLights_SwOff@sw:	
  3606                           ; 1 bytes @ 0x8
  3607                           
  3608  0028                     setDimmerLights_DimmingOn@sw:	
  3609                           ; 1 bytes @ 0x8
  3610                           
  3611  0028                     getDimmerLights_Allow_Condition@allow:	
  3612                           ; 1 bytes @ 0x8
  3613                           
  3614  0028                     getDimmerLights_Status@lights:	
  3615                           ; 1 bytes @ 0x8
  3616                           
  3617  0028                     setDimmerLights_DimmingRun@command:	
  3618                           ; 1 bytes @ 0x8
  3619                           
  3620  0028                     setLED@command:	
  3621                           ; 1 bytes @ 0x8
  3622                           
  3623  0028                     Flash_Memory_Read@address:	
  3624                           ; 1 bytes @ 0x8
  3625                           
  3626  0028                     setMemory_Data@address:	
  3627                           ; 1 bytes @ 0x8
  3628                           
  3629  0028                     setCmd_Status@number:	
  3630                           ; 1 bytes @ 0x8
  3631                           
  3632  0028                     _getRF_KeyStatus$5240:	
  3633                           ; 1 bytes @ 0x8
  3634                           
  3635  0028                     _getSw_KeyStatus$6258:	
  3636                           ; 1 bytes @ 0x8
  3637                           
  3638  0028                     ___bmul@product:	
  3639                           ; 1 bytes @ 0x8
  3640                           
  3641  0028                     DelayTime_1us@i:	
  3642                           ; 1 bytes @ 0x8
  3643                           
  3644  0028                     ___wmul@multiplicand:	
  3645                           ; 2 bytes @ 0x8
  3646                           
  3647  0028                     ___awdiv@dividend:	
  3648                           ; 2 bytes @ 0x8
  3649                           
  3650  0028                     ___lwdiv@dividend:	
  3651                           ; 2 bytes @ 0x8
  3652                           
  3653                           
  3654                           ; 2 bytes @ 0x8
  3655  0028                     	ds	1
  3656  0029                     ??_CC2500_WriteREG:	
  3657  0029                     ??_setLED:	
  3658                           ; 0 bytes @ 0x9
  3659                           
  3660  0029                     ??_DelayOff_Initialization:	
  3661                           ; 0 bytes @ 0x9
  3662                           
  3663  0029                     ??_setDimmerLights_DimmingRun:	
  3664                           ; 0 bytes @ 0x9
  3665                           
  3666  0029                     ??_getAD:	
  3667                           ; 0 bytes @ 0x9
  3668                           
  3669  0029                     CC2500_WriteCommand@command:	
  3670                           ; 0 bytes @ 0x9
  3671                           
  3672  0029                     CC2500_ReadStatus@status_addr:	
  3673                           ; 1 bytes @ 0x9
  3674                           
  3675  0029                     getDelayOff_GO@go:	
  3676                           ; 1 bytes @ 0x9
  3677                           
  3678  0029                     _getDimmerLights_Allow_Condition$2199:	
  3679                           ; 1 bytes @ 0x9
  3680                           
  3681  0029                     getDimmerLights_Status@status:	
  3682                           ; 1 bytes @ 0x9
  3683                           
  3684  0029                     setLED@led:	
  3685                           ; 1 bytes @ 0x9
  3686                           
  3687  0029                     getAD@adcon0:	
  3688                           ; 1 bytes @ 0x9
  3689                           
  3690  0029                     Flash_Memory_Read@ret:	
  3691                           ; 1 bytes @ 0x9
  3692                           
  3693  0029                     ___bmul@multiplier:	
  3694                           ; 1 bytes @ 0x9
  3695                           
  3696  0029                     ___ftpack@exp:	
  3697                           ; 1 bytes @ 0x9
  3698                           
  3699  0029                     _getMain_All_Error_Status$3506:	
  3700                           ; 1 bytes @ 0x9
  3701                           
  3702                           
  3703                           ; 2 bytes @ 0x9
  3704  0029                     	ds	1
  3705  002A                     ??_CC2500_ClearTXFIFO:	
  3706  002A                     ??_CC2500_ClearRXFIFO:	
  3707                           ; 0 bytes @ 0xA
  3708                           
  3709  002A                     ??_CC2500_SIDLEMode:	
  3710                           ; 0 bytes @ 0xA
  3711                           
  3712  002A                     ??_setLED_Initialization:	
  3713                           ; 0 bytes @ 0xA
  3714                           
  3715  002A                     ??_Flash_Memory_Modify:	
  3716                           ; 0 bytes @ 0xA
  3717                           
  3718  002A                     ??_getLoad_AD:	
  3719                           ; 0 bytes @ 0xA
  3720                           
  3721  002A                     ??_getTemp_AD:	
  3722                           ; 0 bytes @ 0xA
  3723                           
  3724  002A                     ??_RF_RxDisable:	
  3725                           ; 0 bytes @ 0xA
  3726                           
  3727  002A                     ??_setSw_Initialization:	
  3728                           ; 0 bytes @ 0xA
  3729                           
  3730  002A                     ??_CC2500_TxData:	
  3731                           ; 0 bytes @ 0xA
  3732                           
  3733  002A                     ??_CC2500_RxData:	
  3734                           ; 0 bytes @ 0xA
  3735                           
  3736  002A                     ??___wmul:	
  3737                           ; 0 bytes @ 0xA
  3738                           
  3739  002A                     ??___awdiv:	
  3740                           ; 0 bytes @ 0xA
  3741                           
  3742  002A                     ??___lwdiv:	
  3743                           ; 0 bytes @ 0xA
  3744                           
  3745  002A                     CC2500_WriteREG@w_addr:	
  3746                           ; 0 bytes @ 0xA
  3747                           
  3748  002A                     setDimmerLights_DimmingRun@lights:	
  3749                           ; 1 bytes @ 0xA
  3750                           
  3751  002A                     setLED_Initialization@led:	
  3752                           ; 1 bytes @ 0xA
  3753                           
  3754  002A                     setLED_Main@led:	
  3755                           ; 1 bytes @ 0xA
  3756                           
  3757  002A                     setSw_Initialization@sw:	
  3758                           ; 1 bytes @ 0xA
  3759                           
  3760  002A                     ___ftpack@sign:	
  3761                           ; 1 bytes @ 0xA
  3762                           
  3763  002A                     getBuz_GO@i:	
  3764                           ; 1 bytes @ 0xA
  3765                           
  3766  002A                     DelayTime_1us@j:	
  3767                           ; 2 bytes @ 0xA
  3768                           
  3769  002A                     ___wmul@product:	
  3770                           ; 2 bytes @ 0xA
  3771                           
  3772                           
  3773                           ; 2 bytes @ 0xA
  3774  002A                     	ds	1
  3775  002B                     ??_CC2500_InitSetREG:	
  3776  002B                     ??_CC2500_InitPATable:	
  3777                           ; 0 bytes @ 0xB
  3778                           
  3779  002B                     ??_Switch_Initialization:	
  3780                           ; 0 bytes @ 0xB
  3781                           
  3782  002B                     ??___ftpack:	
  3783                           ; 0 bytes @ 0xB
  3784                           
  3785  002B                     ??_LED_Initialization:	
  3786                           ; 0 bytes @ 0xB
  3787                           
  3788  002B                     ??_LED_Main:	
  3789                           ; 0 bytes @ 0xB
  3790                           
  3791  002B                     CC2500_TxData@loop_e:	
  3792                           ; 0 bytes @ 0xB
  3793                           
  3794  002B                     CC2500_RxData@loop_f:	
  3795                           ; 1 bytes @ 0xB
  3796                           
  3797  002B                     Flash_Memory_Modify@i:	
  3798                           ; 1 bytes @ 0xB
  3799                           
  3800  002B                     getMain_All_Error_Status@command:	
  3801                           ; 1 bytes @ 0xB
  3802                           
  3803  002B                     getTemp_AD@channel:	
  3804                           ; 1 bytes @ 0xB
  3805                           
  3806  002B                     ___awdiv@counter:	
  3807                           ; 1 bytes @ 0xB
  3808                           
  3809  002B                     ___lwdiv@counter:	
  3810                           ; 1 bytes @ 0xB
  3811                           
  3812                           
  3813                           ; 1 bytes @ 0xB
  3814  002B                     	ds	1
  3815  002C                     ??_CC2500_PowerRST:	
  3816  002C                     ??_CC2500_FrequencyCabr:	
  3817                           ; 0 bytes @ 0xC
  3818                           
  3819  002C                     ??_Flash_Memory_Main:	
  3820                           ; 0 bytes @ 0xC
  3821                           
  3822  002C                     CC2500_InitSetREG@temp1:	
  3823                           ; 0 bytes @ 0xC
  3824                           
  3825  002C                     CC2500_InitPATable@temp:	
  3826                           ; 1 bytes @ 0xC
  3827                           
  3828  002C                     getMain_All_Error_Status@status:	
  3829                           ; 1 bytes @ 0xC
  3830                           
  3831  002C                     getLoad_AD@channel:	
  3832                           ; 1 bytes @ 0xC
  3833                           
  3834  002C                     ___awdiv@sign:	
  3835                           ; 1 bytes @ 0xC
  3836                           
  3837  002C                     getTemp_AD@ADRES:	
  3838                           ; 1 bytes @ 0xC
  3839                           
  3840  002C                     ___lwdiv@quotient:	
  3841                           ; 2 bytes @ 0xC
  3842                           
  3843                           
  3844                           ; 2 bytes @ 0xC
  3845  002C                     	ds	1
  3846  002D                     CC2500_InitSetREG@temp2:	
  3847  002D                     CC2500_InitPATable@loop_d:	
  3848                           ; 1 bytes @ 0xD
  3849                           
  3850  002D                     getLoad_AD@k:	
  3851                           ; 1 bytes @ 0xD
  3852                           
  3853  002D                     ___awdiv@quotient:	
  3854                           ; 1 bytes @ 0xD
  3855                           
  3856                           
  3857                           ; 2 bytes @ 0xD
  3858  002D                     	ds	1
  3859  002E                     ??_Load_Main:	
  3860  002E                     ?___awtoft:	
  3861                           ; 0 bytes @ 0xE
  3862                           
  3863  002E                     CC2500_InitSetREG@loop_c:	
  3864                           ; 3 bytes @ 0xE
  3865                           
  3866  002E                     getLoad_AD@j:	
  3867                           ; 1 bytes @ 0xE
  3868                           
  3869  002E                     ___awtoft@c:	
  3870                           ; 1 bytes @ 0xE
  3871                           
  3872                           
  3873                           ; 2 bytes @ 0xE
  3874  002E                     	ds	1
  3875  002F                     ?_setBuz:	
  3876  002F                     ??_CC2500_PowerOnInitial:	
  3877                           ; 0 bytes @ 0xF
  3878                           
  3879  002F                     setBuz@time:	
  3880                           ; 0 bytes @ 0xF
  3881                           
  3882  002F                     getLoad_AD@ADRES:	
  3883                           ; 2 bytes @ 0xF
  3884                           
  3885                           
  3886                           ; 2 bytes @ 0xF
  3887  002F                     	ds	1
  3888  0030                     Load_Main@error:	
  3889                           
  3890                           ; 1 bytes @ 0x10
  3891  0030                     	ds	1
  3892  0031                     ??_setBuz:	
  3893  0031                     ??___awtoft:	
  3894                           ; 0 bytes @ 0x11
  3895                           
  3896  0031                     getLoad_AD@i:	
  3897                           ; 0 bytes @ 0x11
  3898                           
  3899  0031                     _Load_Main$3870:	
  3900                           ; 1 bytes @ 0x11
  3901                           
  3902                           
  3903                           ; 2 bytes @ 0x11
  3904  0031                     	ds	1
  3905  0032                     setBuz@count:	
  3906                           
  3907                           ; 1 bytes @ 0x12
  3908  0032                     	ds	1
  3909  0033                     ??_setDimmerLights_SwOn:	
  3910  0033                     ??_my_MainTimer:	
  3911                           ; 0 bytes @ 0x13
  3912                           
  3913  0033                     ??_Exception_Main:	
  3914                           ; 0 bytes @ 0x13
  3915                           
  3916  0033                     setDimmerLights_SwOn@sw:	
  3917                           ; 0 bytes @ 0x13
  3918                           
  3919  0033                     Load_Main@ErrorCountValue:	
  3920                           ; 1 bytes @ 0x13
  3921                           
  3922  0033                     ___awtoft@sign:	
  3923                           ; 1 bytes @ 0x13
  3924                           
  3925                           
  3926                           ; 1 bytes @ 0x13
  3927  0033                     	ds	1
  3928  0034                     ?___ftdiv:	
  3929  0034                     ?___ftmul:	
  3930                           ; 3 bytes @ 0x14
  3931                           
  3932  0034                     setDimmerLights_SwOn@idle:	
  3933                           ; 3 bytes @ 0x14
  3934                           
  3935  0034                     Exception_Main@status:	
  3936                           ; 1 bytes @ 0x14
  3937                           
  3938  0034                     Load_Main@Load_RunStatus:	
  3939                           ; 1 bytes @ 0x14
  3940                           
  3941  0034                     ___ftdiv@f2:	
  3942                           ; 1 bytes @ 0x14
  3943                           
  3944  0034                     ___ftmul@f1:	
  3945                           ; 3 bytes @ 0x14
  3946                           
  3947                           
  3948                           ; 3 bytes @ 0x14
  3949  0034                     	ds	1
  3950  0035                     ??_setSw_Main:	
  3951  0035                     Exception_Main@count:	
  3952                           ; 0 bytes @ 0x15
  3953                           
  3954  0035                     Load_Main@LightsCount:	
  3955                           ; 1 bytes @ 0x15
  3956                           
  3957                           
  3958                           ; 1 bytes @ 0x15
  3959  0035                     	ds	1
  3960  0036                     Exception_Main@i:	
  3961  0036                     Load_Main@i:	
  3962                           ; 2 bytes @ 0x16
  3963                           
  3964                           
  3965                           ; 2 bytes @ 0x16
  3966  0036                     	ds	1
  3967  0037                     setSw_Main@sw:	
  3968  0037                     ___ftdiv@f1:	
  3969                           ; 1 bytes @ 0x17
  3970                           
  3971  0037                     ___ftmul@f2:	
  3972                           ; 3 bytes @ 0x17
  3973                           
  3974                           
  3975                           ; 3 bytes @ 0x17
  3976  0037                     	ds	1
  3977  0038                     ??_Switch_Main:	
  3978  0038                     Exception_Main@i_3517:	
  3979                           ; 0 bytes @ 0x18
  3980                           
  3981                           
  3982                           ; 2 bytes @ 0x18
  3983  0038                     	ds	2
  3984  003A                     ??___ftdiv:	
  3985  003A                     ??___ftmul:	
  3986                           ; 0 bytes @ 0x1A
  3987                           
  3988  003A                     Exception_Main@lights:	
  3989                           ; 0 bytes @ 0x1A
  3990                           
  3991                           
  3992                           ; 1 bytes @ 0x1A
  3993  003A                     	ds	1
  3994  003B                     Exception_Main@error:	
  3995                           
  3996                           ; 1 bytes @ 0x1B
  3997  003B                     	ds	3
  3998  003E                     ___ftdiv@cntr:	
  3999  003E                     ___ftmul@exp:	
  4000                           ; 1 bytes @ 0x1E
  4001                           
  4002                           
  4003                           ; 1 bytes @ 0x1E
  4004  003E                     	ds	1
  4005  003F                     ___ftdiv@exp:	
  4006  003F                     ___ftmul@f3_as_product:	
  4007                           ; 1 bytes @ 0x1F
  4008                           
  4009                           
  4010                           ; 3 bytes @ 0x1F
  4011  003F                     	ds	1
  4012  0040                     ___ftdiv@f3:	
  4013                           
  4014                           ; 3 bytes @ 0x20
  4015  0040                     	ds	2
  4016  0042                     ___ftmul@cntr:	
  4017                           
  4018                           ; 1 bytes @ 0x22
  4019  0042                     	ds	1
  4020  0043                     ___ftdiv@sign:	
  4021  0043                     ___ftmul@sign:	
  4022                           ; 1 bytes @ 0x23
  4023                           
  4024                           
  4025                           ; 1 bytes @ 0x23
  4026  0043                     	ds	1
  4027  0044                     ?___ftneg:	
  4028  0044                     ___ftneg@f1:	
  4029                           ; 3 bytes @ 0x24
  4030                           
  4031                           
  4032                           ; 3 bytes @ 0x24
  4033  0044                     	ds	3
  4034  0047                     ??___ftneg:	
  4035  0047                     ?___ftadd:	
  4036                           ; 0 bytes @ 0x27
  4037                           
  4038  0047                     ___ftadd@f1:	
  4039                           ; 3 bytes @ 0x27
  4040                           
  4041                           
  4042                           ; 3 bytes @ 0x27
  4043  0047                     	ds	3
  4044  004A                     ___ftadd@f2:	
  4045                           
  4046                           ; 3 bytes @ 0x2A
  4047  004A                     	ds	3
  4048  004D                     ??___ftadd:	
  4049                           
  4050                           ; 0 bytes @ 0x2D
  4051  004D                     	ds	4
  4052  0051                     ___ftadd@sign:	
  4053                           
  4054                           ; 1 bytes @ 0x31
  4055  0051                     	ds	1
  4056  0052                     ___ftadd@exp2:	
  4057                           
  4058                           ; 1 bytes @ 0x32
  4059  0052                     	ds	1
  4060  0053                     ___ftadd@exp1:	
  4061                           
  4062                           ; 1 bytes @ 0x33
  4063  0053                     	ds	1
  4064  0054                     ?___fttol:	
  4065  0054                     ___fttol@f1:	
  4066                           ; 4 bytes @ 0x34
  4067                           
  4068                           
  4069                           ; 3 bytes @ 0x34
  4070  0054                     	ds	4
  4071  0058                     ??___fttol:	
  4072                           
  4073                           ; 0 bytes @ 0x38
  4074  0058                     	ds	4
  4075  005C                     ___fttol@sign1:	
  4076                           
  4077                           ; 1 bytes @ 0x3C
  4078  005C                     	ds	1
  4079  005D                     ___fttol@lval:	
  4080                           
  4081                           ; 4 bytes @ 0x3D
  4082  005D                     	ds	4
  4083  0061                     ___fttol@exp1:	
  4084                           
  4085                           ; 1 bytes @ 0x41
  4086  0061                     	ds	1
  4087  0062                     ??_setProductData:	
  4088  0062                     ??_setDimmerIntr_MaxmumValue:	
  4089                           ; 0 bytes @ 0x42
  4090                           
  4091  0062                     ??_Flash_Memory_Initialization:	
  4092                           ; 0 bytes @ 0x42
  4093                           
  4094                           
  4095                           ; 0 bytes @ 0x42
  4096  0062                     	ds	1
  4097  0063                     ??_setDimmerLights_Main:	
  4098  0063                     ??_Temp_Main:	
  4099                           ; 0 bytes @ 0x43
  4100                           
  4101  0063                     ??_RF_Main:	
  4102                           ; 0 bytes @ 0x43
  4103                           
  4104  0063                     ??_setControl_Lights_Table:	
  4105                           ; 0 bytes @ 0x43
  4106                           
  4107  0063                     ??_DelayOff_Main:	
  4108                           ; 0 bytes @ 0x43
  4109                           
  4110  0063                     ??_DimmerLights_Main:	
  4111                           ; 0 bytes @ 0x43
  4112                           
  4113  0063                     ??_main:	
  4114                           ; 0 bytes @ 0x43
  4115                           
  4116                           
  4117                           	psect	maintext
  4118  15A9                     __pmaintext:	
  4119                           ; 0 bytes @ 0x43
  4120 ;;
  4121 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4122 ;;
  4123 ;; *************** function _main *****************
  4124 ;; Defined at:
  4125 ;;		line 7 in file "../src/Main_B1.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;  argc            2    0[BANK4 ] int 
  4128 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;		None
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  2    0[BANK4 ] int 
  4133 ;; Registers used:
  4134 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4135 ;; Tracked objects:
  4136 ;;		On entry : 17F/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4140 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4143 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4144 ;;Total ram usage:        4 bytes
  4145 ;; Hardware stack levels required when called:   13
  4146 ;; This function calls:
  4147 ;;		_Buzzer_Initialization
  4148 ;;		_Buzzer_Main
  4149 ;;		_CC2500_PowerOnInitial
  4150 ;;		_DelayOff_Initialization
  4151 ;;		_DelayOff_Main
  4152 ;;		_DimmerLights_Initialization
  4153 ;;		_DimmerLights_Main
  4154 ;;		_Exception_Main
  4155 ;;		_Flash_Memory_Initialization
  4156 ;;		_Flash_Memory_Main
  4157 ;;		_LED_Initialization
  4158 ;;		_LED_Main
  4159 ;;		_Load_Initialization
  4160 ;;		_Load_Main
  4161 ;;		_Mcu_Initialization
  4162 ;;		_RF_Initialization
  4163 ;;		_RF_Main
  4164 ;;		_Switch_Initialization
  4165 ;;		_Switch_Main
  4166 ;;		_Temp_Initialization
  4167 ;;		_Temp_Main
  4168 ;;		_WDT_Main
  4169 ;;		_getLoad_AD
  4170 ;;		_getTemp_AD
  4171 ;;		_myMain_Initialization
  4172 ;;		_my_MainTimer
  4173 ;; This function is called by:
  4174 ;;		Startup code after reset
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           
  4179                           ;psect for function _main
  4180  15A9                     _main:	
  4181                           
  4182                           ;Main_B1.c: 8: myMain_Initialization();
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4186  15A9  319E  262D  3195   	fcall	_myMain_Initialization
  4187                           
  4188                           ;Main_B1.c: 9: Mcu_Initialization();
  4189  15AC  319D  25BD  3195   	fcall	_Mcu_Initialization
  4190                           
  4191                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4192  15AF  3183  2372  3195   	fcall	_Flash_Memory_Initialization
  4193                           
  4194                           ;Main_B1.c: 11: LED_Initialization();
  4195  15B2  319B  2399  3195   	fcall	_LED_Initialization
  4196                           
  4197                           ;Main_B1.c: 12: Buzzer_Initialization();
  4198  15B5  319B  237F  3195   	fcall	_Buzzer_Initialization
  4199                           
  4200                           ;Main_B1.c: 14: ;;
  4201                           ;Main_B1.c: 15: Temp_Initialization();
  4202  15B8  319B  238B  3195   	fcall	_Temp_Initialization
  4203                           
  4204                           ;Main_B1.c: 16: Load_Initialization();
  4205  15BB  319B  2382  3195   	fcall	_Load_Initialization
  4206                           
  4207                           ;Main_B1.c: 17: ;;
  4208                           ;Main_B1.c: 18: DelayOff_Initialization();
  4209  15BE  319B  2391  3195   	fcall	_DelayOff_Initialization
  4210                           
  4211                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4212  15C1  319B  23D0  3195   	fcall	_DimmerLights_Initialization
  4213                           
  4214                           ;Main_B1.c: 21: ;;
  4215                           ;Main_B1.c: 22: ;;
  4216                           ;Main_B1.c: 23: ;;
  4217                           ;Main_B1.c: 24: Switch_Initialization();
  4218  15C4  319B  23B5  3195   	fcall	_Switch_Initialization
  4219                           
  4220                           ;Main_B1.c: 25: RF_Initialization();
  4221  15C7  319B  2385  3195   	fcall	_RF_Initialization
  4222                           
  4223                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4224  15CA  319E  267D  3195   	fcall	_CC2500_PowerOnInitial
  4225  15CD                     l12043:	
  4226                           ;Main_B1.c: 27: ;;
  4227                           ;Main_B1.c: 28: ;;
  4228                           ;Main_B1.c: 30: while (1) {
  4229                           
  4230                           
  4231                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4232  15CD  0022               	movlb	2	; select bank2
  4233  15CE  1C20               	btfss	_myMain^(0+256),0
  4234  15CF  2DD8               	goto	l12047
  4235                           
  4236                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4237  15D0  3005               	movlw	5
  4238  15D1  3189  2122  3195   	fcall	_getLoad_AD
  4239                           
  4240                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4241  15D4  3009               	movlw	9
  4242  15D5  3188  2002  3195   	fcall	_getTemp_AD
  4243  15D8                     l12047:	
  4244                           
  4245                           ;Main_B1.c: 57: }
  4246                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4247  15D8  0022               	movlb	2	; select bank2
  4248  15D9  1C32               	btfss	_Timer1^(0+256),0
  4249  15DA  2DCD               	goto	l12043
  4250                           
  4251                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4252  15DB  1032               	bcf	_Timer1^(0+256),0
  4253                           
  4254                           ;Main_B1.c: 96: my_MainTimer();
  4255  15DC  3193  234B  3195   	fcall	_my_MainTimer
  4256                           
  4257                           ;Main_B1.c: 97: WDT_Main();
  4258  15DF  319D  25CF  3195   	fcall	_WDT_Main
  4259                           
  4260                           ;Main_B1.c: 98: ;;
  4261                           ;Main_B1.c: 99: ;;
  4262                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4263  15E2  0022               	movlb	2	; select bank2
  4264  15E3  1C20               	btfss	_myMain^(0+256),0
  4265  15E4  2DCD               	goto	l12043
  4266                           
  4267                           ;Main_B1.c: 101: Flash_Memory_Main();
  4268  15E5  3192  22A5  3195   	fcall	_Flash_Memory_Main
  4269                           
  4270                           ;Main_B1.c: 103: LED_Main();
  4271  15E8  319B  239D  3195   	fcall	_LED_Main
  4272                           
  4273                           ;Main_B1.c: 104: Buzzer_Main();
  4274  15EB  3194  240B  3195   	fcall	_Buzzer_Main
  4275                           
  4276                           ;Main_B1.c: 106: ;;
  4277                           ;Main_B1.c: 107: Temp_Main();
  4278  15EE  319B  238E  3195   	fcall	_Temp_Main
  4279                           
  4280                           ;Main_B1.c: 108: Load_Main();
  4281  15F1  3180  2051  3195   	fcall	_Load_Main
  4282                           
  4283                           ;Main_B1.c: 109: ;;
  4284                           ;Main_B1.c: 111: ;;
  4285                           ;Main_B1.c: 112: DimmerLights_Main();
  4286  15F4  319F  27C8  3195   	fcall	_DimmerLights_Main
  4287                           
  4288                           ;Main_B1.c: 113: Switch_Main();
  4289  15F7  319B  23DE  3195   	fcall	_Switch_Main
  4290                           
  4291                           ;Main_B1.c: 114: ;;
  4292                           ;Main_B1.c: 115: ;;
  4293                           ;Main_B1.c: 117: RF_Main();
  4294  15FA  319B  2388  3195   	fcall	_RF_Main
  4295                           
  4296                           ;Main_B1.c: 118: DelayOff_Main();
  4297  15FD  319B  2395  3195   	fcall	_DelayOff_Main
  4298                           
  4299                           ;Main_B1.c: 119: ;;
  4300                           ;Main_B1.c: 120: ;;
  4301                           ;Main_B1.c: 121: Exception_Main();
  4302  1600  3186  263F  3195   	fcall	_Exception_Main
  4303  1603  2DCD               	goto	l12043
  4304  1604                     __end_of_main:	
  4305                           ;Main_B1.c: 128: }
  4306                           ;Main_B1.c: 129: }
  4307                           ;Main_B1.c: 163: }
  4308                           ;Main_B1.c: 164: return (0);
  4309                           ;	Return value of _main is never used
  4310                           
  4311                           
  4312                           	psect	text1
  4313  134B                     __ptext1:	
  4314 ;; *************** function _my_MainTimer *****************
  4315 ;; Defined at:
  4316 ;;		line 185 in file "../src/Main_B1.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;		None               void
  4323 ;; Registers used:
  4324 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4334 ;;Total ram usage:        1 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    7
  4337 ;; This function calls:
  4338 ;;		_setBuz
  4339 ;; This function is called by:
  4340 ;;		_main
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           
  4345                           ;psect for function _my_MainTimer
  4346  134B                     _my_MainTimer:	
  4347                           
  4348                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4349                           
  4350                           ;incstack = 0
  4351                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4352  134B  0022               	movlb	2	; select bank2
  4353  134C  1820               	btfsc	_myMain^(0+256),0
  4354  134D  2B65               	goto	l11741
  4355                           
  4356                           ;Main_B1.c: 188: myMain.PowerCount++;
  4357  134E  3001               	movlw	1
  4358  134F  0020               	movlb	0	; select bank0
  4359  1350  00B3               	movwf	??_my_MainTimer
  4360  1351  0833               	movf	??_my_MainTimer,w
  4361  1352  0022               	movlb	2	; select bank2
  4362  1353  07A1               	addwf	(_myMain^(0+256)+1),f
  4363                           
  4364                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4365  1354  0821               	movf	(_myMain^(0+256)+1),w
  4366  1355  3A4B               	xorlw	75
  4367  1356  1D03               	skipz
  4368  1357  0008               	return
  4369                           
  4370                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4371  1358  01A1               	clrf	(_myMain^(0+256)+1)
  4372                           
  4373                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4374  1359  1420               	bsf	_myMain^(0+256),0
  4375                           
  4376                           ;Main_B1.c: 196: setBuz(3, 50);
  4377  135A  3032               	movlw	50
  4378  135B  0020               	movlb	0	; select bank0
  4379  135C  00AF               	movwf	setBuz@time
  4380  135D  3000               	movlw	0
  4381  135E  00B0               	movwf	setBuz@time+1
  4382  135F  3003               	movlw	3
  4383  1360  3195  2550         	fcall	_setBuz
  4384                           
  4385                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4386  1362  0022               	movlb	2	; select bank2
  4387  1363  1620               	bsf	_myMain^(0+256),4
  4388                           
  4389                           ;Main_B1.c: 206: }
  4390                           ;Main_B1.c: 207: } else {
  4391  1364  0008               	return
  4392  1365                     l11741:	
  4393                           
  4394                           ;Main_B1.c: 208: myMain.PowerCount++;
  4395  1365  3001               	movlw	1
  4396  1366  0020               	movlb	0	; select bank0
  4397  1367  00B3               	movwf	??_my_MainTimer
  4398  1368  0833               	movf	??_my_MainTimer,w
  4399  1369  0022               	movlb	2	; select bank2
  4400  136A  07A1               	addwf	(_myMain^(0+256)+1),f
  4401                           
  4402                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4403  136B  0821               	movf	(_myMain^(0+256)+1),w
  4404  136C  3A32               	xorlw	50
  4405  136D  1903               	btfsc	3,2
  4406                           
  4407                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4408  136E  01A1               	clrf	(_myMain^(0+256)+1)
  4409                           
  4410                           ;Main_B1.c: 226: }
  4411                           ;Main_B1.c: 228: myMain.Count1++;
  4412  136F  3001               	movlw	1
  4413  1370  07A4               	addwf	(_myMain^(0+256)+4),f
  4414  1371  3000               	movlw	0
  4415  1372  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4416                           
  4417                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4418  1373  3004               	movlw	4
  4419  1374  3E20               	addlw	_myMain& (0+255)
  4420  1375  0086               	movwf	6
  4421  1376  3001               	movlw	1	; select bank2/3
  4422  1377  0087               	movwf	7
  4423  1378  3F40               	moviw [0]fsr1
  4424  1379  3A32               	xorlw	50
  4425  137A  1D03               	skipz
  4426  137B  2B7E               	goto	u14395
  4427  137C  3F41               	moviw [1]fsr1
  4428  137D  3A00               	xorlw	0
  4429  137E                     u14395:	
  4430  137E  1D03               	skipz
  4431  137F  0008               	return
  4432                           
  4433                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4434  1380  01A4               	clrf	(_myMain^(0+256)+4)
  4435  1381  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4436                           
  4437                           ;Main_B1.c: 242: if (myMain.Flag) {
  4438  1382  1CA0               	btfss	_myMain^(0+256),1
  4439  1383  2B86               	goto	l1432
  4440                           
  4441                           ;Main_B1.c: 243: myMain.Flag = 0;
  4442  1384  10A0               	bcf	_myMain^(0+256),1
  4443                           
  4444                           ;Main_B1.c: 252: } else {
  4445  1385  0008               	return
  4446  1386                     l1432:	
  4447                           
  4448                           ;Main_B1.c: 253: myMain.Flag = 1;
  4449  1386  14A0               	bsf	_myMain^(0+256),1
  4450  1387  0008               	return
  4451  1388                     __end_of_my_MainTimer:	
  4452                           
  4453                           	psect	text2
  4454  1E2D                     __ptext2:	
  4455 ;; *************** function _myMain_Initialization *****************
  4456 ;; Defined at:
  4457 ;;		line 170 in file "../src/Main_B1.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;		None
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;		None
  4462 ;; Return value:  Size  Location     Type
  4463 ;;		None               void
  4464 ;; Registers used:
  4465 ;;		wreg, fsr1l, fsr1h
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;Total ram usage:        1 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    5
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_main
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           
  4486                           ;psect for function _myMain_Initialization
  4487  1E2D                     _myMain_Initialization:	
  4488                           
  4489                           ;Main_B1.c: 173: product = &_product;
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4493  1E2D  3020               	movlw	__product& (0+255)
  4494  1E2E  0020               	movlb	0	; select bank0
  4495  1E2F  00A6               	movwf	??_myMain_Initialization
  4496  1E30  0826               	movf	??_myMain_Initialization,w
  4497  1E31  0021               	movlb	1	; select bank1
  4498  1E32  00EF               	movwf	_product^(0+128)
  4499                           
  4500                           ;Main_B1.c: 174: product->Data[20] = 209;
  4501  1E33  30D1               	movlw	209
  4502  1E34  0020               	movlb	0	; select bank0
  4503  1E35  00A6               	movwf	??_myMain_Initialization
  4504  1E36  0021               	movlb	1	; select bank1
  4505  1E37  086F               	movf	_product^(0+128),w
  4506  1E38  3E14               	addlw	20
  4507  1E39  0086               	movwf	6
  4508  1E3A  3002               	movlw	2	; select bank4/5
  4509  1E3B  0087               	movwf	7
  4510  1E3C  0020               	movlb	0	; select bank0
  4511  1E3D  0826               	movf	??_myMain_Initialization,w
  4512  1E3E  0081               	movwf	1
  4513  1E3F  0008               	return
  4514  1E40                     __end_of_myMain_Initialization:	
  4515                           
  4516                           	psect	text3
  4517  0802                     __ptext3:	
  4518 ;; *************** function _getTemp_AD *****************
  4519 ;; Defined at:
  4520 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;  channel         1    wreg     unsigned char 
  4523 ;; Auto vars:     Size  Location     Type
  4524 ;;  channel         1   11[BANK0 ] unsigned char 
  4525 ;;  ADRES           2   12[BANK0 ] unsigned int 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;		None               void
  4528 ;; Registers used:
  4529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;Total ram usage:        4 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    7
  4542 ;; This function calls:
  4543 ;;		_getAD
  4544 ;; This function is called by:
  4545 ;;		_main
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           
  4550                           ;psect for function _getTemp_AD
  4551  0802                     _getTemp_AD:	
  4552                           
  4553                           ;incstack = 0
  4554                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4555                           ;getTemp_AD@channel stored from wreg
  4556  0802  0020               	movlb	0	; select bank0
  4557  0803  00AB               	movwf	getTemp_AD@channel
  4558                           
  4559                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4560  0804  01AC               	clrf	getTemp_AD@ADRES
  4561  0805  01AD               	clrf	getTemp_AD@ADRES+1
  4562                           
  4563                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4564  0806  0021               	movlb	1	; select bank1
  4565  0807  1D51               	btfss	_Temp^(0+128),2
  4566  0808  2832               	goto	l7759
  4567                           
  4568                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4569  0809  30F0               	movlw	240
  4570  080A  0020               	movlb	0	; select bank0
  4571  080B  00AA               	movwf	??_getTemp_AD
  4572  080C  082A               	movf	??_getTemp_AD,w
  4573  080D  00A6               	movwf	getAD@adcon1
  4574  080E  082B               	movf	getTemp_AD@channel,w
  4575  080F  3190  20C0  3188   	fcall	_getAD
  4576  0812  0020               	movlb	0	; select bank0
  4577  0813  0827               	movf	?_getAD+1,w
  4578  0814  01AD               	clrf	getTemp_AD@ADRES+1
  4579  0815  07AD               	addwf	getTemp_AD@ADRES+1,f
  4580  0816  0826               	movf	?_getAD,w
  4581  0817  01AC               	clrf	getTemp_AD@ADRES
  4582  0818  07AC               	addwf	getTemp_AD@ADRES,f
  4583                           
  4584                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4585  0819  082D               	movf	getTemp_AD@ADRES+1,w
  4586  081A  042C               	iorwf	getTemp_AD@ADRES,w
  4587  081B  1903               	skipnz
  4588  081C  2832               	goto	l7759
  4589                           
  4590                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4591  081D  082D               	movf	getTemp_AD@ADRES+1,w
  4592  081E  0021               	movlb	1	; select bank1
  4593  081F  025A               	subwf	((_Temp+1)^(0+128)+8),w
  4594  0820  1D03               	skipz
  4595  0821  2826               	goto	u7775
  4596  0822  0020               	movlb	0	; select bank0
  4597  0823  082C               	movf	getTemp_AD@ADRES,w
  4598  0824  0021               	movlb	1	; select bank1
  4599  0825  0259               	subwf	(_Temp^(0+128)+8),w
  4600  0826                     u7775:	
  4601  0826  1803               	skipnc
  4602  0827  2832               	goto	l7759
  4603                           
  4604                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4605  0828  0020               	movlb	0	; select bank0
  4606  0829  082D               	movf	getTemp_AD@ADRES+1,w
  4607  082A  0021               	movlb	1	; select bank1
  4608  082B  01DA               	clrf	((_Temp+1)^(0+128)+8)
  4609  082C  07DA               	addwf	((_Temp+1)^(0+128)+8),f
  4610  082D  0020               	movlb	0	; select bank0
  4611  082E  082C               	movf	getTemp_AD@ADRES,w
  4612  082F  0021               	movlb	1	; select bank1
  4613  0830  01D9               	clrf	(_Temp^(0+128)+8)
  4614  0831  07D9               	addwf	(_Temp^(0+128)+8),f
  4615  0832                     l7759:	
  4616                           
  4617                           ;OverTemperature_B1.c: 32: }
  4618                           ;OverTemperature_B1.c: 33: }
  4619                           ;OverTemperature_B1.c: 34: }
  4620                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4621  0832  30F0               	movlw	240
  4622  0833  0020               	movlb	0	; select bank0
  4623  0834  00AA               	movwf	??_getTemp_AD
  4624  0835  082A               	movf	??_getTemp_AD,w
  4625  0836  00A6               	movwf	getAD@adcon1
  4626  0837  082B               	movf	getTemp_AD@channel,w
  4627  0838  3190  20C0         	fcall	_getAD
  4628  083A  0020               	movlb	0	; select bank0
  4629  083B  0827               	movf	?_getAD+1,w
  4630  083C  01AD               	clrf	getTemp_AD@ADRES+1
  4631  083D  07AD               	addwf	getTemp_AD@ADRES+1,f
  4632  083E  0826               	movf	?_getAD,w
  4633  083F  01AC               	clrf	getTemp_AD@ADRES
  4634  0840  07AC               	addwf	getTemp_AD@ADRES,f
  4635  0841  0008               	return
  4636  0842                     __end_of_getTemp_AD:	
  4637                           
  4638                           	psect	text4
  4639  0922                     __ptext4:	
  4640 ;; *************** function _getLoad_AD *****************
  4641 ;; Defined at:
  4642 ;;		line 15 in file "../src/OverLoad_B1.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;  channel         1    wreg     unsigned char 
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  channel         1   12[BANK0 ] unsigned char 
  4647 ;;  ADRES           2   15[BANK0 ] unsigned int 
  4648 ;;  i               1   17[BANK0 ] unsigned char 
  4649 ;;  j               1   14[BANK0 ] unsigned char 
  4650 ;;  k               1   13[BANK0 ] unsigned char 
  4651 ;; Return value:  Size  Location     Type
  4652 ;;		None               void
  4653 ;; Registers used:
  4654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4661 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;Total ram usage:        8 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; Hardware stack levels required when called:    7
  4667 ;; This function calls:
  4668 ;;		_getAD
  4669 ;; This function is called by:
  4670 ;;		_main
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           
  4675                           ;psect for function _getLoad_AD
  4676  0922                     _getLoad_AD:	
  4677                           
  4678                           ;incstack = 0
  4679                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4680                           ;getLoad_AD@channel stored from wreg
  4681  0922  0020               	movlb	0	; select bank0
  4682  0923  00AC               	movwf	getLoad_AD@channel
  4683                           
  4684                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4685  0924  01B1               	clrf	getLoad_AD@i
  4686  0925  01AE               	clrf	getLoad_AD@j
  4687  0926  01AD               	clrf	getLoad_AD@k
  4688                           
  4689                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4690  0927  01AF               	clrf	getLoad_AD@ADRES
  4691  0928  01B0               	clrf	getLoad_AD@ADRES+1
  4692                           
  4693                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4694  0929  0022               	movlb	2	; select bank2
  4695  092A  1E35               	btfss	_Load^(0+256),4
  4696  092B  0008               	return
  4697                           
  4698                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4699  092C  30F3               	movlw	243
  4700  092D  0020               	movlb	0	; select bank0
  4701  092E  00AA               	movwf	??_getLoad_AD
  4702  092F  082A               	movf	??_getLoad_AD,w
  4703  0930  00A6               	movwf	getAD@adcon1
  4704  0931  082C               	movf	getLoad_AD@channel,w
  4705  0932  3190  20C0  3189   	fcall	_getAD
  4706  0935  0020               	movlb	0	; select bank0
  4707  0936  0827               	movf	?_getAD+1,w
  4708  0937  01B0               	clrf	getLoad_AD@ADRES+1
  4709  0938  07B0               	addwf	getLoad_AD@ADRES+1,f
  4710  0939  0826               	movf	?_getAD,w
  4711  093A  01AF               	clrf	getLoad_AD@ADRES
  4712  093B  07AF               	addwf	getLoad_AD@ADRES,f
  4713                           
  4714                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4715  093C  01B1               	clrf	getLoad_AD@i
  4716  093D  3004               	movlw	4
  4717  093E  0231               	subwf	getLoad_AD@i,w
  4718  093F  1803               	btfsc	3,0
  4719  0940  2968               	goto	l7727
  4720  0941                     l7715:	
  4721                           
  4722                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4723  0941  3531               	lslf	getLoad_AD@i,w
  4724  0942  3E40               	addlw	(_Load+11)& (0+255)
  4725  0943  0086               	movwf	6
  4726  0944  3001               	movlw	1	; select bank2/3
  4727  0945  0087               	movwf	7
  4728  0946  3F40               	moviw [0]fsr1
  4729  0947  00AA               	movwf	??_getLoad_AD
  4730  0948  3F41               	moviw [1]fsr1
  4731  0949  00AB               	movwf	??_getLoad_AD+1
  4732  094A  0830               	movf	getLoad_AD@ADRES+1,w
  4733  094B  022B               	subwf	??_getLoad_AD+1,w
  4734  094C  1D03               	skipz
  4735  094D  2950               	goto	u7675
  4736  094E  082F               	movf	getLoad_AD@ADRES,w
  4737  094F  022A               	subwf	??_getLoad_AD,w
  4738  0950                     u7675:	
  4739  0950  1803               	skipnc
  4740  0951  2960               	goto	l7723
  4741  0952  08AE               	movf	getLoad_AD@j,f
  4742  0953  1D03               	skipz
  4743  0954  2960               	goto	l7723
  4744                           
  4745                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4746  0955  3531               	lslf	getLoad_AD@i,w
  4747  0956  3E40               	addlw	(_Load+11)& (0+255)
  4748  0957  0086               	movwf	6
  4749  0958  3001               	movlw	1	; select bank2/3
  4750  0959  0087               	movwf	7
  4751  095A  082F               	movf	getLoad_AD@ADRES,w
  4752  095B  3FC0               	movwi [0]fsr1
  4753  095C  0830               	movf	getLoad_AD@ADRES+1,w
  4754  095D  3FC1               	movwi [1]fsr1
  4755                           
  4756                           ;OverLoad_B1.c: 24: j = 1;
  4757  095E  01AE               	clrf	getLoad_AD@j
  4758  095F  0AAE               	incf	getLoad_AD@j,f
  4759  0960                     l7723:	
  4760  0960  3001               	movlw	1
  4761  0961  00AA               	movwf	??_getLoad_AD
  4762  0962  082A               	movf	??_getLoad_AD,w
  4763  0963  07B1               	addwf	getLoad_AD@i,f
  4764  0964  3004               	movlw	4
  4765  0965  0231               	subwf	getLoad_AD@i,w
  4766  0966  1C03               	skipc
  4767  0967  2941               	goto	l7715
  4768  0968                     l7727:	
  4769                           
  4770                           ;OverLoad_B1.c: 25: }
  4771                           ;OverLoad_B1.c: 26: }
  4772                           ;OverLoad_B1.c: 27: if (j == 0) {
  4773  0968  08AE               	movf	getLoad_AD@j,f
  4774  0969  1D03               	skipz
  4775  096A  0008               	return
  4776                           
  4777                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4778  096B  01B1               	clrf	getLoad_AD@i
  4779  096C                     L1:	
  4780  096C  3004               	movlw	4
  4781  096D  0231               	subwf	getLoad_AD@i,w
  4782  096E  1803               	btfsc	3,0
  4783  096F  0008               	return
  4784                           
  4785                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4786  0970  3531               	lslf	getLoad_AD@i,w
  4787  0971  3E4A               	addlw	(_Load+21)& (0+255)
  4788  0972  0086               	movwf	6
  4789  0973  3001               	movlw	1	; select bank2/3
  4790  0974  0087               	movwf	7
  4791  0975  3F40               	moviw [0]fsr1
  4792  0976  00AA               	movwf	??_getLoad_AD
  4793  0977  3F41               	moviw [1]fsr1
  4794  0978  00AB               	movwf	??_getLoad_AD+1
  4795  0979  082B               	movf	??_getLoad_AD+1,w
  4796  097A  0230               	subwf	getLoad_AD@ADRES+1,w
  4797  097B  1D03               	skipz
  4798  097C  297F               	goto	u7725
  4799  097D  082A               	movf	??_getLoad_AD,w
  4800  097E  022F               	subwf	getLoad_AD@ADRES,w
  4801  097F                     u7725:	
  4802  097F  1803               	skipnc
  4803  0980  298F               	goto	l7743
  4804  0981  08AD               	movf	getLoad_AD@k,f
  4805  0982  1D03               	skipz
  4806  0983  298F               	goto	l7743
  4807                           
  4808                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4809  0984  3531               	lslf	getLoad_AD@i,w
  4810  0985  3E4A               	addlw	(_Load+21)& (0+255)
  4811  0986  0086               	movwf	6
  4812  0987  3001               	movlw	1	; select bank2/3
  4813  0988  0087               	movwf	7
  4814  0989  082F               	movf	getLoad_AD@ADRES,w
  4815  098A  3FC0               	movwi [0]fsr1
  4816  098B  0830               	movf	getLoad_AD@ADRES+1,w
  4817  098C  3FC1               	movwi [1]fsr1
  4818                           
  4819                           ;OverLoad_B1.c: 31: k = 1;
  4820  098D  01AD               	clrf	getLoad_AD@k
  4821  098E  0AAD               	incf	getLoad_AD@k,f
  4822  098F                     l7743:	
  4823  098F  3001               	movlw	1
  4824  0990  00AA               	movwf	??_getLoad_AD
  4825  0991  082A               	movf	??_getLoad_AD,w
  4826  0992  07B1               	addwf	getLoad_AD@i,f
  4827  0993  296C               	goto	L1
  4828  0994                     __end_of_getLoad_AD:	
  4829                           
  4830                           	psect	text5
  4831  10C0                     __ptext5:	
  4832 ;; *************** function _getAD *****************
  4833 ;; Defined at:
  4834 ;;		line 459 in file "../src/MCU_B1.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  adcon0          1    wreg     unsigned char 
  4837 ;;  adcon1          1    6[BANK0 ] unsigned char 
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;  adcon0          1    9[BANK0 ] unsigned char 
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  2    6[BANK0 ] int 
  4842 ;; Registers used:
  4843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4849 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4853 ;;Total ram usage:        4 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; Hardware stack levels required when called:    6
  4856 ;; This function calls:
  4857 ;;		_Timeout_Counter
  4858 ;;		_set_TimeoutCleared
  4859 ;; This function is called by:
  4860 ;;		_getLoad_AD
  4861 ;;		_getTemp_AD
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           
  4866                           ;psect for function _getAD
  4867  10C0                     _getAD:	
  4868                           
  4869                           ;incstack = 0
  4870                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4871                           ;getAD@adcon0 stored from wreg
  4872  10C0  0020               	movlb	0	; select bank0
  4873  10C1  00A9               	movwf	getAD@adcon0
  4874                           
  4875                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4876  10C2  0829               	movf	getAD@adcon0,w
  4877  10C3  0021               	movlb	1	; select bank1
  4878  10C4  009D               	movwf	29	;volatile
  4879                           
  4880                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4881  10C5  0020               	movlb	0	; select bank0
  4882  10C6  0826               	movf	getAD@adcon1,w
  4883  10C7  0021               	movlb	1	; select bank1
  4884  10C8  009E               	movwf	30	;volatile
  4885                           
  4886                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4887  10C9  149D               	bsf	29,1	;volatile
  4888                           
  4889                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4890  10CA  28CE               	goto	l7213
  4891  10CB                     l7211:	
  4892                           
  4893                           ;MCU_B1.c: 464: Timeout_Counter();
  4894  10CB  319E  26D3  3190   	fcall	_Timeout_Counter
  4895  10CE                     l7213:	
  4896  10CE  0021               	movlb	1	; select bank1
  4897  10CF  1C9D               	btfss	29,1	;volatile
  4898  10D0  28D4               	goto	l7217
  4899  10D1  0022               	movlb	2	; select bank2
  4900  10D2  1D2A               	btfss	(_myMain^(0+256)+10),2
  4901  10D3  28CB               	goto	l7211
  4902  10D4                     l7217:	
  4903                           
  4904                           ;MCU_B1.c: 465: };
  4905                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4906  10D4  319B  23B9         	fcall	_set_TimeoutCleared
  4907                           
  4908                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4909  10D6  0021               	movlb	1	; select bank1
  4910  10D7  081C               	movf	28,w	;volatile
  4911  10D8  0020               	movlb	0	; select bank0
  4912  10D9  01A7               	clrf	?_getAD+1
  4913  10DA  07A7               	addwf	?_getAD+1,f
  4914  10DB  0021               	movlb	1	; select bank1
  4915  10DC  081B               	movf	27,w	;volatile
  4916  10DD  0020               	movlb	0	; select bank0
  4917  10DE  01A6               	clrf	?_getAD
  4918  10DF  07A6               	addwf	?_getAD,f
  4919  10E0  0008               	return
  4920  10E1                     __end_of_getAD:	
  4921                           
  4922                           	psect	text6
  4923  1DCF                     __ptext6:	
  4924 ;; *************** function _WDT_Main *****************
  4925 ;; Defined at:
  4926 ;;		line 1103 in file "../src/MCU_B1.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;		None               void
  4933 ;; Registers used:
  4934 ;;		wreg, status,2, status,0, pclath, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;Total ram usage:        1 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    6
  4947 ;; This function calls:
  4948 ;;		_WDT_Clearing
  4949 ;; This function is called by:
  4950 ;;		_main
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           
  4955                           ;psect for function _WDT_Main
  4956  1DCF                     _WDT_Main:	
  4957                           
  4958                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  4959                           
  4960                           ;incstack = 0
  4961                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4962  1DCF  0021               	movlb	1	; select bank1
  4963  1DD0  1C45               	btfss	_WDT^(0+128),0
  4964  1DD1  0008               	return
  4965                           
  4966                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  4967  1DD2  3001               	movlw	1
  4968  1DD3  02C6               	subwf	(_WDT^(0+128)+1),f
  4969  1DD4  0846               	movf	(_WDT^(0+128)+1),w
  4970  1DD5  3AFF               	xorlw	255
  4971  1DD6  1903               	skipnz
  4972  1DD7  0008               	return
  4973                           
  4974                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  4975  1DD8  3064               	movlw	100
  4976  1DD9  0020               	movlb	0	; select bank0
  4977  1DDA  00A6               	movwf	??_WDT_Main
  4978  1DDB  0826               	movf	??_WDT_Main,w
  4979  1DDC  0021               	movlb	1	; select bank1
  4980  1DDD  00C6               	movwf	(_WDT^(0+128)+1)
  4981                           
  4982                           ;MCU_B1.c: 1107: WDT_Clearing();
  4983  1DDE  3180  2002         	fcall	_WDT_Clearing
  4984  1DE0  0008               	return
  4985  1DE1                     __end_of_WDT_Main:	
  4986                           
  4987                           	psect	text7
  4988  0002                     __ptext7:	
  4989 ;; *************** function _WDT_Clearing *****************
  4990 ;; Defined at:
  4991 ;;		line 1113 in file "../src/MCU_B1.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;		None
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;		None
  4996 ;; Return value:  Size  Location     Type
  4997 ;;		None               void
  4998 ;; Registers used:
  4999 ;;		None
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5009 ;;Total ram usage:        0 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    5
  5012 ;; This function calls:
  5013 ;;		Nothing
  5014 ;; This function is called by:
  5015 ;;		_WDT_Main
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           
  5020                           ;psect for function _WDT_Clearing
  5021  0002                     _WDT_Clearing:	
  5022                           
  5023                           ;incstack = 0
  5024                           ; Regs used in _WDT_Clearing: []
  5025  0002  0064               	clrwdt	;# 
  5026  0003  0008               	return
  5027  0004                     __end_of_WDT_Clearing:	
  5028                           
  5029                           	psect	text8
  5030  1B8E                     __ptext8:	
  5031 ;; *************** function _Temp_Main *****************
  5032 ;; Defined at:
  5033 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;		None
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;		None
  5038 ;; Return value:  Size  Location     Type
  5039 ;;		None               void
  5040 ;; Registers used:
  5041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;Total ram usage:        0 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    8
  5054 ;; This function calls:
  5055 ;;		_setTemp_Main
  5056 ;; This function is called by:
  5057 ;;		_main
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           
  5062                           ;psect for function _Temp_Main
  5063  1B8E                     _Temp_Main:	
  5064                           
  5065                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5066                           
  5067                           ;incstack = 0
  5068                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5069  1B8E  318C  2492         	fcall	_setTemp_Main
  5070  1B90  0008               	return
  5071  1B91                     __end_of_Temp_Main:	
  5072                           
  5073                           	psect	text9
  5074  0C92                     __ptext9:	
  5075 ;; *************** function _setTemp_Main *****************
  5076 ;; Defined at:
  5077 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;		None
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;  AD              2   15[BANK1 ] unsigned int 
  5082 ;;  DangerValue     2   13[BANK1 ] unsigned int 
  5083 ;;  SafeValue       2   11[BANK1 ] unsigned int 
  5084 ;;  TempGO          1   10[BANK1 ] unsigned char 
  5085 ;;  error           1    9[BANK1 ] unsigned char 
  5086 ;; Return value:  Size  Location     Type
  5087 ;;		None               void
  5088 ;; Registers used:
  5089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;Total ram usage:        9 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    7
  5102 ;; This function calls:
  5103 ;;		_getMain_All_Error_Status
  5104 ;;		_getMain_All_LightsStatus
  5105 ;;		_setBuz
  5106 ;;		_setProductData
  5107 ;; This function is called by:
  5108 ;;		_Temp_Main
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           
  5113                           ;psect for function _setTemp_Main
  5114  0C92                     _setTemp_Main:	
  5115                           
  5116                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5117                           
  5118                           ;incstack = 0
  5119                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5120  0C92  3000               	movlw	0
  5121  0C93  3191  21D5  318C   	fcall	_getMain_All_Error_Status
  5122  0C96  0021               	movlb	1	; select bank1
  5123  0C97  00E3               	movwf	??_setTemp_Main^(0+128)
  5124  0C98  0863               	movf	??_setTemp_Main^(0+128),w
  5125  0C99  00E4               	movwf	setTemp_Main@error^(0+128)
  5126                           
  5127                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5128  0C9A  01E6               	clrf	setTemp_Main@SafeValue^(0+128)
  5129  0C9B  01E7               	clrf	(setTemp_Main@SafeValue+1)^(0+128)
  5130  0C9C  01E8               	clrf	setTemp_Main@DangerValue^(0+128)
  5131  0C9D  01E9               	clrf	(setTemp_Main@DangerValue+1)^(0+128)
  5132                           
  5133                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5134  0C9E  319C  2418  318C   	fcall	_getMain_All_LightsStatus
  5135  0CA1  0021               	movlb	1	; select bank1
  5136  0CA2  00E3               	movwf	??_setTemp_Main^(0+128)
  5137  0CA3  0863               	movf	??_setTemp_Main^(0+128),w
  5138  0CA4  00E5               	movwf	setTemp_Main@TempGO^(0+128)
  5139                           
  5140                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5141  0CA5  1C51               	btfss	_Temp^(0+128),0
  5142  0CA6  2D34               	goto	l1771
  5143                           
  5144                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5145  0CA7  1951               	btfsc	_Temp^(0+128),2
  5146  0CA8  2CC3               	goto	l11413
  5147                           
  5148                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5149  0CA9  0865               	movf	setTemp_Main@TempGO^(0+128),w
  5150  0CAA  3A01               	xorlw	1
  5151  0CAB  1D03               	skipz
  5152  0CAC  2CAF               	goto	l1777
  5153  0CAD  1CD1               	btfss	_Temp^(0+128),1
  5154  0CAE  2CB1               	goto	l11405
  5155  0CAF                     l1777:	
  5156  0CAF  1CD1               	btfss	_Temp^(0+128),1
  5157  0CB0  2CC0               	goto	l11411
  5158  0CB1                     l11405:	
  5159                           
  5160                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5161  0CB1  3001               	movlw	1
  5162  0CB2  07D2               	addwf	(_Temp^(0+128)+1),f
  5163  0CB3  3000               	movlw	0
  5164  0CB4  3DD3               	addwfc	((_Temp+1)^(0+128)+1),f
  5165                           
  5166                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5167  0CB5  3000               	movlw	0
  5168  0CB6  0253               	subwf	((_Temp+1)^(0+128)+1),w
  5169  0CB7  30FA               	movlw	250
  5170  0CB8  1903               	skipnz
  5171  0CB9  0252               	subwf	(_Temp^(0+128)+1),w
  5172  0CBA  1C03               	skipc
  5173  0CBB  0008               	return
  5174                           
  5175                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5176  0CBC  01D2               	clrf	(_Temp^(0+128)+1)
  5177  0CBD  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5178                           
  5179                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5180  0CBE  1551               	bsf	_Temp^(0+128),2
  5181                           
  5182                           ;OverTemperature_B1.c: 83: }
  5183                           ;OverTemperature_B1.c: 84: } else {
  5184  0CBF  0008               	return
  5185  0CC0                     l11411:	
  5186                           
  5187                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5188  0CC0  01D2               	clrf	(_Temp^(0+128)+1)
  5189  0CC1  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5190                           
  5191                           ;OverTemperature_B1.c: 86: }
  5192                           ;OverTemperature_B1.c: 87: } else {
  5193  0CC2  0008               	return
  5194  0CC3                     l11413:	
  5195                           
  5196                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5197  0CC3  3001               	movlw	1
  5198  0CC4  07D2               	addwf	(_Temp^(0+128)+1),f
  5199  0CC5  3000               	movlw	0
  5200  0CC6  3DD3               	addwfc	((_Temp+1)^(0+128)+1),f
  5201                           
  5202                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5203  0CC7  3000               	movlw	0
  5204  0CC8  0253               	subwf	((_Temp+1)^(0+128)+1),w
  5205  0CC9  3005               	movlw	5
  5206  0CCA  1903               	skipnz
  5207  0CCB  0252               	subwf	(_Temp^(0+128)+1),w
  5208  0CCC  1C03               	skipc
  5209  0CCD  0008               	return
  5210                           
  5211                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5212  0CCE  01D2               	clrf	(_Temp^(0+128)+1)
  5213  0CCF  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5214                           
  5215                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5216  0CD0  3008               	movlw	8
  5217  0CD1  3ED1               	addlw	_Temp& (0+255)
  5218  0CD2  0086               	movwf	6
  5219  0CD3  0187               	clrf	7
  5220  0CD4  0016               	moviw fsr1++
  5221  0CD5  0401               	iorwf	1,w
  5222  0CD6  1903               	skipnz
  5223  0CD7  2D2C               	goto	l1782
  5224                           
  5225                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5226  0CD8  1151               	bcf	_Temp^(0+128),2
  5227                           
  5228                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5229  0CD9  085A               	movf	((_Temp+1)^(0+128)+8),w
  5230  0CDA  01EB               	clrf	(setTemp_Main@AD+1)^(0+128)
  5231  0CDB  07EB               	addwf	(setTemp_Main@AD+1)^(0+128),f
  5232  0CDC  0859               	movf	(_Temp^(0+128)+8),w
  5233  0CDD  01EA               	clrf	setTemp_Main@AD^(0+128)
  5234  0CDE  07EA               	addwf	setTemp_Main@AD^(0+128),f
  5235                           
  5236                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5237  0CDF  3090               	movlw	144
  5238  0CE0  00E6               	movwf	setTemp_Main@SafeValue^(0+128)
  5239  0CE1  3001               	movlw	1
  5240  0CE2  00E7               	movwf	(setTemp_Main@SafeValue^(0+128)+1)
  5241                           
  5242                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5243  0CE3  3059               	movlw	89
  5244  0CE4  00E8               	movwf	setTemp_Main@DangerValue^(0+128)
  5245  0CE5  3001               	movlw	1
  5246  0CE6  00E9               	movwf	(setTemp_Main@DangerValue^(0+128)+1)
  5247                           
  5248                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5249  0CE7  1CD1               	btfss	_Temp^(0+128),1
  5250  0CE8  2D07               	goto	l11443
  5251                           
  5252                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5253  0CE9  0867               	movf	(setTemp_Main@SafeValue+1)^(0+128),w
  5254  0CEA  026B               	subwf	(setTemp_Main@AD+1)^(0+128),w
  5255  0CEB  1D03               	skipz
  5256  0CEC  2CEF               	goto	u13905
  5257  0CED  0866               	movf	setTemp_Main@SafeValue^(0+128),w
  5258  0CEE  026A               	subwf	setTemp_Main@AD^(0+128),w
  5259  0CEF                     u13905:	
  5260  0CEF  1C03               	skipc
  5261  0CF0  2D05               	goto	l11441
  5262                           
  5263                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5264  0CF1  3001               	movlw	1
  5265  0CF2  00E3               	movwf	??_setTemp_Main^(0+128)
  5266  0CF3  0863               	movf	??_setTemp_Main^(0+128),w
  5267  0CF4  07D4               	addwf	(_Temp^(0+128)+3),f
  5268                           
  5269                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5270  0CF5  3003               	movlw	3
  5271  0CF6  0254               	subwf	(_Temp^(0+128)+3),w
  5272  0CF7  1C03               	skipc
  5273  0CF8  2D1B               	goto	l11455
  5274                           
  5275                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5276  0CF9  01D4               	clrf	(_Temp^(0+128)+3)
  5277                           
  5278                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5279  0CFA  10D1               	bcf	_Temp^(0+128),1
  5280                           
  5281                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5282  0CFB  3064               	movlw	100
  5283  0CFC  0020               	movlb	0	; select bank0
  5284  0CFD  00AF               	movwf	setBuz@time
  5285  0CFE  3000               	movlw	0
  5286  0CFF  00B0               	movwf	setBuz@time+1
  5287  0D00  3002               	movlw	2
  5288  0D01  3195  2550  318C   	fcall	_setBuz
  5289                           
  5290                           ;OverTemperature_B1.c: 126: }
  5291                           ;OverTemperature_B1.c: 127: } else {
  5292  0D04  2D1B               	goto	l11455
  5293  0D05                     l11441:	
  5294                           
  5295                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5296  0D05  0021               	movlb	1	; select bank1
  5297  0D06  2D1A               	goto	l11453
  5298  0D07                     l11443:	
  5299                           ;OverTemperature_B1.c: 129: }
  5300                           ;OverTemperature_B1.c: 130: } else {
  5301                           
  5302                           
  5303                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5304  0D07  086B               	movf	(setTemp_Main@AD+1)^(0+128),w
  5305  0D08  0269               	subwf	(setTemp_Main@DangerValue+1)^(0+128),w
  5306  0D09  1D03               	skipz
  5307  0D0A  2D0D               	goto	u13925
  5308  0D0B  086A               	movf	setTemp_Main@AD^(0+128),w
  5309  0D0C  0268               	subwf	setTemp_Main@DangerValue^(0+128),w
  5310  0D0D                     u13925:	
  5311  0D0D  1C03               	skipc
  5312  0D0E  2D1A               	goto	l11453
  5313                           
  5314                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5315  0D0F  3001               	movlw	1
  5316  0D10  00E3               	movwf	??_setTemp_Main^(0+128)
  5317  0D11  0863               	movf	??_setTemp_Main^(0+128),w
  5318  0D12  07D4               	addwf	(_Temp^(0+128)+3),f
  5319                           
  5320                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5321  0D13  3003               	movlw	3
  5322  0D14  0254               	subwf	(_Temp^(0+128)+3),w
  5323  0D15  1C03               	skipc
  5324  0D16  2D1B               	goto	l11455
  5325                           
  5326                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5327  0D17  01D4               	clrf	(_Temp^(0+128)+3)
  5328                           
  5329                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5330  0D18  14D1               	bsf	_Temp^(0+128),1
  5331                           
  5332                           ;OverTemperature_B1.c: 136: }
  5333                           ;OverTemperature_B1.c: 137: } else {
  5334  0D19  2D1B               	goto	l11455
  5335  0D1A                     l11453:	
  5336                           
  5337                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5338  0D1A  01D4               	clrf	(_Temp^(0+128)+3)
  5339  0D1B                     l11455:	
  5340                           
  5341                           ;OverTemperature_B1.c: 139: }
  5342                           ;OverTemperature_B1.c: 140: }
  5343                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5344  0D1B  0021               	movlb	1	; select bank1
  5345  0D1C  086B               	movf	(setTemp_Main@AD+1)^(0+128),w
  5346  0D1D  00E3               	movwf	??_setTemp_Main^(0+128)
  5347  0D1E  0863               	movf	??_setTemp_Main^(0+128),w
  5348  0D1F  00E1               	movwf	setProductData@value^(0+128)
  5349  0D20  3018               	movlw	24
  5350  0D21  319C  24E7  318C   	fcall	_setProductData
  5351                           
  5352                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5353  0D24  0021               	movlb	1	; select bank1
  5354  0D25  086A               	movf	setTemp_Main@AD^(0+128),w
  5355  0D26  00E3               	movwf	??_setTemp_Main^(0+128)
  5356  0D27  0863               	movf	??_setTemp_Main^(0+128),w
  5357  0D28  00E1               	movwf	setProductData@value^(0+128)
  5358  0D29  3019               	movlw	25
  5359  0D2A  319C  24E7         	fcall	_setProductData
  5360  0D2C                     l1782:	
  5361                           
  5362                           ;OverTemperature_B1.c: 158: }
  5363                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5364  0D2C  0021               	movlb	1	; select bank1
  5365  0D2D  01D5               	clrf	(_Temp^(0+128)+4)
  5366  0D2E  01D6               	clrf	((_Temp+1)^(0+128)+4)
  5367                           
  5368                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5369  0D2F  01D7               	clrf	(_Temp^(0+128)+6)
  5370  0D30  01D8               	clrf	((_Temp+1)^(0+128)+6)
  5371                           
  5372                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5373  0D31  01D9               	clrf	(_Temp^(0+128)+8)
  5374  0D32  01DA               	clrf	((_Temp+1)^(0+128)+8)
  5375                           
  5376                           ;OverTemperature_B1.c: 162: }
  5377                           ;OverTemperature_B1.c: 163: }
  5378                           ;OverTemperature_B1.c: 166: } else {
  5379  0D33  0008               	return
  5380  0D34                     l1771:	
  5381                           
  5382                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5383  0D34  0022               	movlb	2	; select bank2
  5384  0D35  1C20               	btfss	_myMain^(0+256),0
  5385  0D36  0008               	return
  5386                           
  5387                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5388  0D37  0021               	movlb	1	; select bank1
  5389  0D38  1451               	bsf	_Temp^(0+128),0
  5390  0D39  0008               	return
  5391  0D3A                     __end_of_setTemp_Main:	
  5392                           
  5393                           	psect	text10
  5394  1B8B                     __ptext10:	
  5395 ;; *************** function _Temp_Initialization *****************
  5396 ;; Defined at:
  5397 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;		None
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;		None
  5402 ;; Return value:  Size  Location     Type
  5403 ;;		None               void
  5404 ;; Registers used:
  5405 ;;		status,2, status,0, pclath, cstack
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;Total ram usage:        0 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    6
  5418 ;; This function calls:
  5419 ;;		_setTemp_Initialization
  5420 ;; This function is called by:
  5421 ;;		_main
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           
  5426                           ;psect for function _Temp_Initialization
  5427  1B8B                     _Temp_Initialization:	
  5428                           
  5429                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5430                           
  5431                           ;incstack = 0
  5432                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5433  1B8B  3188  2001         	fcall	_setTemp_Initialization
  5434  1B8D  0008               	return
  5435  1B8E                     __end_of_Temp_Initialization:	
  5436                           
  5437                           	psect	text11
  5438  0801                     __ptext11:	
  5439 ;; *************** function _setTemp_Initialization *****************
  5440 ;; Defined at:
  5441 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;		None
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;		None
  5446 ;; Return value:  Size  Location     Type
  5447 ;;		None               void
  5448 ;; Registers used:
  5449 ;;		None
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;Total ram usage:        0 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; Hardware stack levels required when called:    5
  5462 ;; This function calls:
  5463 ;;		Nothing
  5464 ;; This function is called by:
  5465 ;;		_Temp_Initialization
  5466 ;; This function uses a non-reentrant model
  5467 ;;
  5468                           
  5469                           
  5470                           ;psect for function _setTemp_Initialization
  5471  0801                     _setTemp_Initialization:	
  5472                           
  5473                           ;incstack = 0
  5474                           ; Regs used in _setTemp_Initialization: []
  5475  0801  0008               	return
  5476  0802                     __end_of_setTemp_Initialization:	
  5477                           
  5478                           	psect	text12
  5479  1BDE                     __ptext12:	
  5480 ;; *************** function _Switch_Main *****************
  5481 ;; Defined at:
  5482 ;;		line 76 in file "../src/Switch_B1.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;		None
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;		None
  5487 ;; Return value:  Size  Location     Type
  5488 ;;		None               void
  5489 ;; Registers used:
  5490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;Total ram usage:        0 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:    9
  5503 ;; This function calls:
  5504 ;;		_TouchPower
  5505 ;;		_setSw_Main
  5506 ;; This function is called by:
  5507 ;;		_main
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function _Switch_Main
  5513  1BDE                     _Switch_Main:	
  5514                           
  5515                           ;Switch_B1.c: 79: setSw_Main(1);
  5516                           
  5517                           ;incstack = 0
  5518                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5519  1BDE  3001               	movlw	1
  5520  1BDF  3182  2201  319B   	fcall	_setSw_Main
  5521                           
  5522                           ;Switch_B1.c: 91: TouchPower();
  5523  1BE2  319E  2692         	fcall	_TouchPower
  5524  1BE4  0008               	return
  5525  1BE5                     __end_of_Switch_Main:	
  5526                           
  5527                           	psect	text13
  5528  0201                     __ptext13:	
  5529 ;; *************** function _setSw_Main *****************
  5530 ;; Defined at:
  5531 ;;		line 117 in file "../src/Switch_B1.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  sw              1    wreg     unsigned char 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  sw              1   23[BANK0 ] unsigned char 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;		None               void
  5538 ;; Registers used:
  5539 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;Total ram usage:        3 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    8
  5552 ;; This function calls:
  5553 ;;		_SwPointSelect
  5554 ;;		_getMain_All_Error_Status
  5555 ;;		_getSw_KeyStatus
  5556 ;;		_setBuz
  5557 ;;		_setDimmerLights_DimmingOn
  5558 ;;		_setDimmerLights_SwOff
  5559 ;;		_setDimmerLights_SwOn
  5560 ;;		_setRF_Learn
  5561 ;; This function is called by:
  5562 ;;		_Switch_Main
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           
  5567                           ;psect for function _setSw_Main
  5568  0201                     _setSw_Main:	
  5569                           
  5570                           ;incstack = 0
  5571                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5572                           ;setSw_Main@sw stored from wreg
  5573  0201  0020               	movlb	0	; select bank0
  5574  0202  00B7               	movwf	setSw_Main@sw
  5575                           
  5576                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5577  0203  0837               	movf	setSw_Main@sw,w
  5578  0204  319C  2479  3182   	fcall	_SwPointSelect
  5579                           
  5580                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5581  0207  0020               	movlb	0	; select bank0
  5582  0208  0867               	movf	_Sw,w
  5583  0209  0086               	movwf	6
  5584  020A  3001               	movlw	1	; select bank2/3
  5585  020B  0087               	movwf	7
  5586  020C  1C01               	btfss	1,0
  5587  020D  2B68               	goto	l2481
  5588                           
  5589                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5590  020E  3000               	movlw	0
  5591  020F  3191  21D5  3182   	fcall	_getMain_All_Error_Status
  5592  0212  3800               	iorlw	0
  5593  0213  1D03               	skipz
  5594  0214  2A30               	goto	l11551
  5595                           
  5596                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5597  0215  0020               	movlb	0	; select bank0
  5598  0216  0A67               	incf	_Sw,w
  5599  0217  0086               	movwf	6
  5600  0218  3001               	movlw	1	; select bank2/3
  5601  0219  0087               	movwf	7
  5602  021A  1081               	bcf	1,1
  5603                           
  5604                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5605  021B  0837               	movf	setSw_Main@sw,w
  5606  021C  319D  2588  3182   	fcall	_getSw_KeyStatus
  5607  021F  3A01               	xorlw	1
  5608  0220  3000               	movlw	0
  5609  0221  1903               	skipnz
  5610  0222  3001               	movlw	1
  5611  0223  0020               	movlb	0	; select bank0
  5612  0224  00B5               	movwf	??_setSw_Main
  5613  0225  0867               	movf	_Sw,w
  5614  0226  0086               	movwf	6
  5615  0227  3001               	movlw	1	; select bank2/3
  5616  0228  0087               	movwf	7
  5617  0229  0DB5               	rlf	??_setSw_Main,f
  5618  022A  0801               	movf	1,w
  5619  022B  0635               	xorwf	??_setSw_Main,w
  5620  022C  39FD               	andlw	-3
  5621  022D  0635               	xorwf	??_setSw_Main,w
  5622  022E  0081               	movwf	1
  5623                           
  5624                           ;Switch_B1.c: 124: } else {
  5625  022F  2A46               	goto	l2483
  5626  0230                     l11551:	
  5627                           
  5628                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5629  0230  0020               	movlb	0	; select bank0
  5630  0231  0A67               	incf	_Sw,w
  5631  0232  0086               	movwf	6
  5632  0233  3001               	movlw	1	; select bank2/3
  5633  0234  0087               	movwf	7
  5634  0235  1881               	btfsc	1,1
  5635  0236  2A46               	goto	l2483
  5636                           
  5637                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5638  0237  0A67               	incf	_Sw,w
  5639  0238  0086               	movwf	6
  5640  0239  3001               	movlw	1	; select bank2/3
  5641  023A  0087               	movwf	7
  5642  023B  1481               	bsf	1,1
  5643                           
  5644                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5645  023C  0867               	movf	_Sw,w
  5646  023D  0086               	movwf	6
  5647  023E  3001               	movlw	1	; select bank2/3
  5648  023F  0087               	movwf	7
  5649  0240  1081               	bcf	1,1
  5650                           
  5651                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5652  0241  0867               	movf	_Sw,w
  5653  0242  0086               	movwf	6
  5654  0243  3001               	movlw	1	; select bank2/3
  5655  0244  0087               	movwf	7
  5656  0245  1501               	bsf	1,2
  5657  0246                     l2483:	
  5658                           
  5659                           ;Switch_B1.c: 130: }
  5660                           ;Switch_B1.c: 131: }
  5661                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5662  0246  0867               	movf	_Sw,w
  5663  0247  0086               	movwf	6
  5664  0248  3001               	movlw	1	; select bank2/3
  5665  0249  0087               	movwf	7
  5666  024A  1C81               	btfss	1,1
  5667  024B  2B15               	goto	l11601
  5668                           
  5669                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5670  024C  0867               	movf	_Sw,w
  5671  024D  0086               	movwf	6
  5672  024E  3001               	movlw	1	; select bank2/3
  5673  024F  0087               	movwf	7
  5674  0250  1901               	btfsc	1,2
  5675  0251  2A73               	goto	l11567
  5676                           
  5677                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5678  0252  3001               	movlw	1
  5679  0253  00B5               	movwf	??_setSw_Main
  5680  0254  0867               	movf	_Sw,w
  5681  0255  3E02               	addlw	2
  5682  0256  0086               	movwf	6
  5683  0257  3001               	movlw	1	; select bank2/3
  5684  0258  0087               	movwf	7
  5685  0259  0835               	movf	??_setSw_Main,w
  5686  025A  0781               	addwf	1,f
  5687                           
  5688                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5689  025B  0867               	movf	_Sw,w
  5690  025C  3E02               	addlw	2
  5691  025D  0086               	movwf	6
  5692  025E  3001               	movlw	1	; select bank2/3
  5693  025F  0087               	movwf	7
  5694  0260  3003               	movlw	3
  5695  0261  0201               	subwf	1,w
  5696  0262  1C03               	skipc
  5697  0263  0008               	return
  5698                           
  5699                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5700  0264  0867               	movf	_Sw,w
  5701  0265  3E02               	addlw	2
  5702  0266  0086               	movwf	6
  5703  0267  3001               	movlw	1	; select bank2/3
  5704  0268  0087               	movwf	7
  5705  0269  0181               	clrf	1
  5706                           
  5707                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5708  026A  0867               	movf	_Sw,w
  5709  026B  0086               	movwf	6
  5710  026C  3001               	movlw	1	; select bank2/3
  5711  026D  0087               	movwf	7
  5712  026E  1501               	bsf	1,2
  5713                           
  5714                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5715  026F  0837               	movf	setSw_Main@sw,w
  5716  0270  3191  21A2         	fcall	_setDimmerLights_SwOn
  5717                           
  5718                           ;Switch_B1.c: 146: }
  5719                           ;Switch_B1.c: 147: } else {
  5720  0272  0008               	return
  5721  0273                     l11567:	
  5722                           
  5723                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5724  0273  0020               	movlb	0	; select bank0
  5725  0274  0867               	movf	_Sw,w
  5726  0275  0086               	movwf	6
  5727  0276  3001               	movlw	1	; select bank2/3
  5728  0277  0087               	movwf	7
  5729  0278  1981               	btfsc	1,3
  5730  0279  2AA5               	goto	l11577
  5731                           
  5732                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5733  027A  0867               	movf	_Sw,w
  5734  027B  3E03               	addlw	3
  5735  027C  0086               	movwf	6
  5736  027D  3001               	movlw	1	; select bank2/3
  5737  027E  0087               	movwf	7
  5738  027F  3001               	movlw	1
  5739  0280  0781               	addwf	1,f
  5740  0281  3141               	addfsr 1,1
  5741  0282  1803               	skipnc
  5742  0283  0A81               	incf	1,f
  5743                           
  5744                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5745  0284  0867               	movf	_Sw,w
  5746  0285  3E03               	addlw	3
  5747  0286  0086               	movwf	6
  5748  0287  3001               	movlw	1	; select bank2/3
  5749  0288  0087               	movwf	7
  5750  0289  3F40               	moviw [0]fsr1
  5751  028A  00B5               	movwf	??_setSw_Main
  5752  028B  3F41               	moviw [1]fsr1
  5753  028C  00B6               	movwf	??_setSw_Main+1
  5754  028D  3000               	movlw	0
  5755  028E  0236               	subwf	??_setSw_Main+1,w
  5756  028F  304B               	movlw	75
  5757  0290  1903               	skipnz
  5758  0291  0235               	subwf	??_setSw_Main,w
  5759  0292  1C03               	skipc
  5760  0293  0008               	return
  5761                           
  5762                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5763  0294  0867               	movf	_Sw,w
  5764  0295  3E03               	addlw	3
  5765  0296  0086               	movwf	6
  5766  0297  3001               	movlw	1	; select bank2/3
  5767  0298  0087               	movwf	7
  5768  0299  3000               	movlw	0
  5769  029A  3FC0               	movwi [0]fsr1
  5770  029B  3FC1               	movwi [1]fsr1
  5771                           
  5772                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5773  029C  0867               	movf	_Sw,w
  5774  029D  0086               	movwf	6
  5775  029E  3001               	movlw	1	; select bank2/3
  5776  029F  0087               	movwf	7
  5777  02A0  1581               	bsf	1,3
  5778                           
  5779                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5780  02A1  0837               	movf	setSw_Main@sw,w
  5781  02A2  3191  214B         	fcall	_setDimmerLights_DimmingOn
  5782                           
  5783                           ;Switch_B1.c: 161: }
  5784                           ;Switch_B1.c: 162: } else {
  5785  02A4  0008               	return
  5786  02A5                     l11577:	
  5787                           
  5788                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5789  02A5  0020               	movlb	0	; select bank0
  5790  02A6  0867               	movf	_Sw,w
  5791  02A7  0086               	movwf	6
  5792  02A8  3001               	movlw	1	; select bank2/3
  5793  02A9  0087               	movwf	7
  5794  02AA  1A01               	btfsc	1,4
  5795  02AB  2AE3               	goto	l11591
  5796                           
  5797                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5798  02AC  0867               	movf	_Sw,w
  5799  02AD  3E05               	addlw	5
  5800  02AE  0086               	movwf	6
  5801  02AF  3001               	movlw	1	; select bank2/3
  5802  02B0  0087               	movwf	7
  5803  02B1  3001               	movlw	1
  5804  02B2  0781               	addwf	1,f
  5805  02B3  3141               	addfsr 1,1
  5806  02B4  1803               	skipnc
  5807  02B5  0A81               	incf	1,f
  5808                           
  5809                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5810  02B6  0867               	movf	_Sw,w
  5811  02B7  3E05               	addlw	5
  5812  02B8  0086               	movwf	6
  5813  02B9  3001               	movlw	1	; select bank2/3
  5814  02BA  0087               	movwf	7
  5815  02BB  3F40               	moviw [0]fsr1
  5816  02BC  00B5               	movwf	??_setSw_Main
  5817  02BD  3F41               	moviw [1]fsr1
  5818  02BE  00B6               	movwf	??_setSw_Main+1
  5819  02BF  3000               	movlw	0
  5820  02C0  0236               	subwf	??_setSw_Main+1,w
  5821  02C1  304B               	movlw	75
  5822  02C2  1903               	skipnz
  5823  02C3  0235               	subwf	??_setSw_Main,w
  5824  02C4  1C03               	skipc
  5825  02C5  0008               	return
  5826                           
  5827                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5828  02C6  0867               	movf	_Sw,w
  5829  02C7  3E05               	addlw	5
  5830  02C8  0086               	movwf	6
  5831  02C9  3001               	movlw	1	; select bank2/3
  5832  02CA  0087               	movwf	7
  5833  02CB  3000               	movlw	0
  5834  02CC  3FC0               	movwi [0]fsr1
  5835  02CD  3FC1               	movwi [1]fsr1
  5836                           
  5837                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5838  02CE  0867               	movf	_Sw,w
  5839  02CF  0086               	movwf	6
  5840  02D0  3001               	movlw	1	; select bank2/3
  5841  02D1  0087               	movwf	7
  5842  02D2  1601               	bsf	1,4
  5843                           
  5844                           ;Switch_B1.c: 171: setRF_Learn(1);
  5845  02D3  3001               	movlw	1
  5846  02D4  319E  2654  3182   	fcall	_setRF_Learn
  5847                           
  5848                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5849  02D7  0022               	movlb	2	; select bank2
  5850  02D8  1EA0               	btfss	_myMain^(0+256),5
  5851  02D9  0008               	return
  5852                           
  5853                           ;Switch_B1.c: 173: setBuz(2, 100);
  5854  02DA  3064               	movlw	100
  5855  02DB  0020               	movlb	0	; select bank0
  5856  02DC  00AF               	movwf	setBuz@time
  5857  02DD  3000               	movlw	0
  5858  02DE  00B0               	movwf	setBuz@time+1
  5859  02DF  3002               	movlw	2
  5860  02E0  3195  2550         	fcall	_setBuz
  5861                           
  5862                           ;Switch_B1.c: 174: }
  5863                           ;Switch_B1.c: 178: }
  5864                           ;Switch_B1.c: 179: } else {
  5865  02E2  0008               	return
  5866  02E3                     l11591:	
  5867                           
  5868                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5869  02E3  0020               	movlb	0	; select bank0
  5870  02E4  0867               	movf	_Sw,w
  5871  02E5  0086               	movwf	6
  5872  02E6  3001               	movlw	1	; select bank2/3
  5873  02E7  0087               	movwf	7
  5874  02E8  1A81               	btfsc	1,5
  5875  02E9  0008               	return
  5876                           
  5877                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5878  02EA  0867               	movf	_Sw,w
  5879  02EB  3E07               	addlw	7
  5880  02EC  0086               	movwf	6
  5881  02ED  3001               	movlw	1	; select bank2/3
  5882  02EE  0087               	movwf	7
  5883  02EF  3001               	movlw	1
  5884  02F0  0781               	addwf	1,f
  5885  02F1  3141               	addfsr 1,1
  5886  02F2  1803               	skipnc
  5887  02F3  0A81               	incf	1,f
  5888                           
  5889                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5890  02F4  0867               	movf	_Sw,w
  5891  02F5  3E07               	addlw	7
  5892  02F6  0086               	movwf	6
  5893  02F7  3001               	movlw	1	; select bank2/3
  5894  02F8  0087               	movwf	7
  5895  02F9  3F40               	moviw [0]fsr1
  5896  02FA  00B5               	movwf	??_setSw_Main
  5897  02FB  3F41               	moviw [1]fsr1
  5898  02FC  00B6               	movwf	??_setSw_Main+1
  5899  02FD  3000               	movlw	0
  5900  02FE  0236               	subwf	??_setSw_Main+1,w
  5901  02FF  3096               	movlw	150
  5902  0300  1903               	skipnz
  5903  0301  0235               	subwf	??_setSw_Main,w
  5904  0302  1C03               	skipc
  5905  0303  0008               	return
  5906                           
  5907                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5908  0304  0867               	movf	_Sw,w
  5909  0305  3E07               	addlw	7
  5910  0306  0086               	movwf	6
  5911  0307  3001               	movlw	1	; select bank2/3
  5912  0308  0087               	movwf	7
  5913  0309  3000               	movlw	0
  5914  030A  3FC0               	movwi [0]fsr1
  5915  030B  3FC1               	movwi [1]fsr1
  5916                           
  5917                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5918  030C  0867               	movf	_Sw,w
  5919  030D  0086               	movwf	6
  5920  030E  3001               	movlw	1	; select bank2/3
  5921  030F  0087               	movwf	7
  5922  0310  1681               	bsf	1,5
  5923                           
  5924                           ;Switch_B1.c: 187: setRF_Learn(0);
  5925  0311  3000               	movlw	0
  5926  0312  319E  2654         	fcall	_setRF_Learn
  5927                           
  5928                           ;Switch_B1.c: 190: }
  5929                           ;Switch_B1.c: 191: }
  5930                           ;Switch_B1.c: 192: }
  5931                           ;Switch_B1.c: 194: }
  5932                           ;Switch_B1.c: 195: }
  5933                           ;Switch_B1.c: 196: } else {
  5934  0314  0008               	return
  5935  0315                     l11601:	
  5936                           
  5937                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5938  0315  0020               	movlb	0	; select bank0
  5939  0316  0867               	movf	_Sw,w
  5940  0317  0086               	movwf	6
  5941  0318  3001               	movlw	1	; select bank2/3
  5942  0319  0087               	movwf	7
  5943  031A  1D01               	btfss	1,2
  5944  031B  0008               	return
  5945                           
  5946                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5947  031C  3001               	movlw	1
  5948  031D  00B5               	movwf	??_setSw_Main
  5949  031E  0867               	movf	_Sw,w
  5950  031F  3E02               	addlw	2
  5951  0320  0086               	movwf	6
  5952  0321  3001               	movlw	1	; select bank2/3
  5953  0322  0087               	movwf	7
  5954  0323  0835               	movf	??_setSw_Main,w
  5955  0324  0781               	addwf	1,f
  5956                           
  5957                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5958  0325  0867               	movf	_Sw,w
  5959  0326  3E02               	addlw	2
  5960  0327  0086               	movwf	6
  5961  0328  3001               	movlw	1	; select bank2/3
  5962  0329  0087               	movwf	7
  5963  032A  3003               	movlw	3
  5964  032B  0201               	subwf	1,w
  5965  032C  1C03               	skipc
  5966  032D  0008               	return
  5967                           
  5968                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5969  032E  0867               	movf	_Sw,w
  5970  032F  3E02               	addlw	2
  5971  0330  0086               	movwf	6
  5972  0331  3001               	movlw	1	; select bank2/3
  5973  0332  0087               	movwf	7
  5974  0333  0181               	clrf	1
  5975                           
  5976                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5977  0334  0867               	movf	_Sw,w
  5978  0335  0086               	movwf	6
  5979  0336  3001               	movlw	1	; select bank2/3
  5980  0337  0087               	movwf	7
  5981  0338  1101               	bcf	1,2
  5982                           
  5983                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5984  0339  0867               	movf	_Sw,w
  5985  033A  3E03               	addlw	3
  5986  033B  0086               	movwf	6
  5987  033C  3001               	movlw	1	; select bank2/3
  5988  033D  0087               	movwf	7
  5989  033E  3000               	movlw	0
  5990  033F  3FC0               	movwi [0]fsr1
  5991  0340  3FC1               	movwi [1]fsr1
  5992                           
  5993                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  5994  0341  0867               	movf	_Sw,w
  5995  0342  0086               	movwf	6
  5996  0343  3001               	movlw	1	; select bank2/3
  5997  0344  0087               	movwf	7
  5998  0345  1181               	bcf	1,3
  5999                           
  6000                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6001  0346  0867               	movf	_Sw,w
  6002  0347  0086               	movwf	6
  6003  0348  3001               	movlw	1	; select bank2/3
  6004  0349  0087               	movwf	7
  6005  034A  1201               	bcf	1,4
  6006                           
  6007                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6008  034B  0867               	movf	_Sw,w
  6009  034C  0086               	movwf	6
  6010  034D  3001               	movlw	1	; select bank2/3
  6011  034E  0087               	movwf	7
  6012  034F  1281               	bcf	1,5
  6013                           
  6014                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6015  0350  0867               	movf	_Sw,w
  6016  0351  3E05               	addlw	5
  6017  0352  0086               	movwf	6
  6018  0353  3001               	movlw	1	; select bank2/3
  6019  0354  0087               	movwf	7
  6020  0355  3000               	movlw	0
  6021  0356  3FC0               	movwi [0]fsr1
  6022  0357  3FC1               	movwi [1]fsr1
  6023                           
  6024                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6025  0358  0867               	movf	_Sw,w
  6026  0359  3E07               	addlw	7
  6027  035A  0086               	movwf	6
  6028  035B  3001               	movlw	1	; select bank2/3
  6029  035C  0087               	movwf	7
  6030  035D  3000               	movlw	0
  6031  035E  3FC0               	movwi [0]fsr1
  6032  035F  3FC1               	movwi [1]fsr1
  6033                           
  6034                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6035  0360  0837               	movf	setSw_Main@sw,w
  6036  0361  3193  2312  3182   	fcall	_setDimmerLights_SwOff
  6037                           
  6038                           ;Switch_B1.c: 219: setRF_Learn(0);
  6039  0364  3000               	movlw	0
  6040  0365  319E  2654         	fcall	_setRF_Learn
  6041                           
  6042                           ;Switch_B1.c: 221: }
  6043                           ;Switch_B1.c: 222: }
  6044                           ;Switch_B1.c: 223: }
  6045                           ;Switch_B1.c: 224: } else {
  6046  0367  0008               	return
  6047  0368                     l2481:	
  6048                           
  6049                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6050  0368  0022               	movlb	2	; select bank2
  6051  0369  1C20               	btfss	_myMain^(0+256),0
  6052  036A  0008               	return
  6053                           
  6054                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6055  036B  0020               	movlb	0	; select bank0
  6056  036C  0867               	movf	_Sw,w
  6057  036D  0086               	movwf	6
  6058  036E  3001               	movlw	1	; select bank2/3
  6059  036F  0087               	movwf	7
  6060  0370  1401               	bsf	1,0
  6061  0371  0008               	return
  6062  0372                     __end_of_setSw_Main:	
  6063                           
  6064                           	psect	text14
  6065  1E54                     __ptext14:	
  6066 ;; *************** function _setRF_Learn *****************
  6067 ;; Defined at:
  6068 ;;		line 33 in file "../src/RF_Control_B1.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  command         1    wreg     unsigned char 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  command         1    7[BANK0 ] unsigned char 
  6073 ;; Return value:  Size  Location     Type
  6074 ;;		None               void
  6075 ;; Registers used:
  6076 ;;		wreg, status,2, status,0
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;Total ram usage:        2 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    5
  6089 ;; This function calls:
  6090 ;;		Nothing
  6091 ;; This function is called by:
  6092 ;;		_setSw_Main
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           
  6097                           ;psect for function _setRF_Learn
  6098  1E54                     _setRF_Learn:	
  6099                           
  6100                           ;incstack = 0
  6101                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6102                           ;setRF_Learn@command stored from wreg
  6103  1E54  0020               	movlb	0	; select bank0
  6104  1E55  00A7               	movwf	setRF_Learn@command
  6105                           
  6106                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6107  1E56  0827               	movf	setRF_Learn@command,w
  6108  1E57  3A01               	xorlw	1
  6109  1E58  3000               	movlw	0
  6110  1E59  1903               	skipnz
  6111  1E5A  3001               	movlw	1
  6112  1E5B  00A6               	movwf	??_setRF_Learn
  6113  1E5C  0EA6               	swapf	??_setRF_Learn,f
  6114  1E5D  0DA6               	rlf	??_setRF_Learn,f
  6115  1E5E  0DA6               	rlf	??_setRF_Learn,f
  6116  1E5F  0021               	movlb	1	; select bank1
  6117  1E60  0820               	movf	_RF1^(0+128),w
  6118  1E61  0020               	movlb	0	; select bank0
  6119  1E62  0626               	xorwf	??_setRF_Learn,w
  6120  1E63  39BF               	andlw	-65
  6121  1E64  0626               	xorwf	??_setRF_Learn,w
  6122  1E65  0021               	movlb	1	; select bank1
  6123  1E66  00A0               	movwf	_RF1^(0+128)
  6124  1E67  0008               	return
  6125  1E68                     __end_of_setRF_Learn:	
  6126                           
  6127                           	psect	text15
  6128  114B                     __ptext15:	
  6129 ;; *************** function _setDimmerLights_DimmingOn *****************
  6130 ;; Defined at:
  6131 ;;		line 715 in file "../src/Dimmer_B1.c"
  6132 ;; Parameters:    Size  Location     Type
  6133 ;;  sw              1    wreg     unsigned char 
  6134 ;; Auto vars:     Size  Location     Type
  6135 ;;  sw              1    8[BANK0 ] unsigned char 
  6136 ;; Return value:  Size  Location     Type
  6137 ;;		None               void
  6138 ;; Registers used:
  6139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;Total ram usage:        1 bytes
  6150 ;; Hardware stack levels used:    1
  6151 ;; Hardware stack levels required when called:    6
  6152 ;; This function calls:
  6153 ;;		_DimmerLights_SelectPointer
  6154 ;; This function is called by:
  6155 ;;		_setSw_Main
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           
  6160                           ;psect for function _setDimmerLights_DimmingOn
  6161  114B                     _setDimmerLights_DimmingOn:	
  6162                           
  6163                           ;incstack = 0
  6164                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6165                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6166  114B  0020               	movlb	0	; select bank0
  6167  114C  00A8               	movwf	setDimmerLights_DimmingOn@sw
  6168                           
  6169                           ;Dimmer_B1.c: 721: DimmerLights_SelectPointer(sw);
  6170  114D  0828               	movf	setDimmerLights_DimmingOn@sw,w
  6171  114E  319C  2437  3191   	fcall	_DimmerLights_SelectPointer
  6172                           
  6173                           ;Dimmer_B1.c: 722: if (DimmerLights->Trigger == 0) {
  6174  1151  0020               	movlb	0	; select bank0
  6175  1152  0864               	movf	_DimmerLights,w
  6176  1153  0086               	movwf	6
  6177  1154  3001               	movlw	1	; select bank2/3
  6178  1155  0087               	movwf	7
  6179  1156  1881               	btfsc	1,1
  6180  1157  0008               	return
  6181                           
  6182                           ;Dimmer_B1.c: 723: if (DimmerLights->SwFlag == 1) {
  6183  1158  0864               	movf	_DimmerLights,w
  6184  1159  0086               	movwf	6
  6185  115A  3001               	movlw	1	; select bank2/3
  6186  115B  0087               	movwf	7
  6187  115C  1C01               	btfss	1,0
  6188  115D  0008               	return
  6189                           
  6190                           ;Dimmer_B1.c: 724: DimmerLights->Status = 1;
  6191  115E  0A64               	incf	_DimmerLights,w
  6192  115F  0086               	movwf	6
  6193  1160  3001               	movlw	1	; select bank2/3
  6194  1161  0087               	movwf	7
  6195  1162  1401               	bsf	1,0
  6196                           
  6197                           ;Dimmer_B1.c: 726: DimmerLights->DimmingSwFlag = 1;
  6198  1163  0864               	movf	_DimmerLights,w
  6199  1164  0086               	movwf	6
  6200  1165  3001               	movlw	1	; select bank2/3
  6201  1166  0087               	movwf	7
  6202  1167  1581               	bsf	1,3
  6203                           
  6204                           ;Dimmer_B1.c: 727: DimmerLights->DimmingTrigger = 1;
  6205  1168  0864               	movf	_DimmerLights,w
  6206  1169  0086               	movwf	6
  6207  116A  3001               	movlw	1	; select bank2/3
  6208  116B  0087               	movwf	7
  6209  116C  1601               	bsf	1,4
  6210                           
  6211                           ;Dimmer_B1.c: 728: DimmerLights->DimmingSwitch = 1;
  6212  116D  0864               	movf	_DimmerLights,w
  6213  116E  0086               	movwf	6
  6214  116F  3001               	movlw	1	; select bank2/3
  6215  1170  0087               	movwf	7
  6216  1171  1681               	bsf	1,5
  6217  1172  0008               	return
  6218  1173                     __end_of_setDimmerLights_DimmingOn:	
  6219                           
  6220                           	psect	text16
  6221  1D88                     __ptext16:	
  6222 ;; *************** function _getSw_KeyStatus *****************
  6223 ;; Defined at:
  6224 ;;		line 237 in file "../src/Switch_B1.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  sw              1    wreg     unsigned char 
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;  sw              1    0[COMMON] unsigned char 
  6229 ;;  status          1    7[BANK0 ] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1    wreg      unsigned char 
  6232 ;; Registers used:
  6233 ;;		wreg, status,2
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6240 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;Total ram usage:        3 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    5
  6246 ;; This function calls:
  6247 ;;		Nothing
  6248 ;; This function is called by:
  6249 ;;		_setSw_Main
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           
  6254                           ;psect for function _getSw_KeyStatus
  6255  1D88                     _getSw_KeyStatus:	
  6256                           
  6257                           ;Switch_B1.c: 238: char status = 0;
  6258                           
  6259                           ;incstack = 0
  6260                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6261  1D88  0020               	movlb	0	; select bank0
  6262  1D89  01A7               	clrf	getSw_KeyStatus@status
  6263                           
  6264                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6265  1D8A  01A8               	clrf	_getSw_KeyStatus$6258
  6266  1D8B  0AA8               	incf	_getSw_KeyStatus$6258,f
  6267  1D8C  1F0C               	btfss	12,6	;volatile
  6268  1D8D  1A0C               	btfsc	12,4	;volatile
  6269  1D8E  2D93               	goto	l6929
  6270  1D8F  1C0C               	btfss	12,0	;volatile
  6271  1D90  1B8C               	btfsc	12,7	;volatile
  6272  1D91  2D93               	goto	l6929
  6273  1D92  01A8               	clrf	_getSw_KeyStatus$6258
  6274  1D93                     l6929:	
  6275  1D93  0828               	movf	_getSw_KeyStatus$6258,w
  6276  1D94  00A6               	movwf	??_getSw_KeyStatus
  6277  1D95  0826               	movf	??_getSw_KeyStatus,w
  6278  1D96  00A7               	movwf	getSw_KeyStatus@status
  6279                           
  6280                           ;Switch_B1.c: 275: return status;
  6281  1D97  0827               	movf	getSw_KeyStatus@status,w
  6282  1D98  0008               	return
  6283  1D99                     __end_of_getSw_KeyStatus:	
  6284                           
  6285                           	psect	text17
  6286  1C79                     __ptext17:	
  6287 ;; *************** function _SwPointSelect *****************
  6288 ;; Defined at:
  6289 ;;		line 25 in file "../src/Switch_B1.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;  sw              1    wreg     unsigned char 
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;  sw              1    7[BANK0 ] unsigned char 
  6294 ;; Return value:  Size  Location     Type
  6295 ;;		None               void
  6296 ;; Registers used:
  6297 ;;		wreg
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;Total ram usage:        2 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    5
  6310 ;; This function calls:
  6311 ;;		Nothing
  6312 ;; This function is called by:
  6313 ;;		_setSw_Main
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           
  6318                           ;psect for function _SwPointSelect
  6319  1C79                     _SwPointSelect:	
  6320                           
  6321                           ;incstack = 0
  6322                           ; Regs used in _SwPointSelect: [wreg]
  6323                           ;SwPointSelect@sw stored from wreg
  6324  1C79  0020               	movlb	0	; select bank0
  6325  1C7A  00A7               	movwf	SwPointSelect@sw
  6326                           
  6327                           ;Switch_B1.c: 28: if (sw == 1) {
  6328  1C7B  0827               	movf	SwPointSelect@sw,w
  6329  1C7C  3A01               	xorlw	1
  6330  1C7D  1D03               	skipz
  6331  1C7E  0008               	return
  6332                           
  6333                           ;Switch_B1.c: 29: Sw = &Sw1;
  6334  1C7F  30E3               	movlw	_Sw1& (0+255)
  6335  1C80  00A6               	movwf	??_SwPointSelect
  6336  1C81  0826               	movf	??_SwPointSelect,w
  6337  1C82  00E7               	movwf	_Sw
  6338  1C83  0008               	return
  6339  1C84                     __end_of_SwPointSelect:	
  6340                           
  6341                           	psect	text18
  6342  1E92                     __ptext18:	
  6343 ;; *************** function _TouchPower *****************
  6344 ;; Defined at:
  6345 ;;		line 10 in file "../src/Switch_B1.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;		None
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;		None
  6350 ;; Return value:  Size  Location     Type
  6351 ;;		None               void
  6352 ;; Registers used:
  6353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;Total ram usage:        0 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    6
  6366 ;; This function calls:
  6367 ;;		_Timeout_Counter
  6368 ;;		_set_TimeoutCleared
  6369 ;; This function is called by:
  6370 ;;		_Switch_Main
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           
  6375                           ;psect for function _TouchPower
  6376  1E92                     _TouchPower:	
  6377                           
  6378                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6379                           
  6380                           ;incstack = 0
  6381                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6382  1E92  0022               	movlb	2	; select bank2
  6383  1E93  1C20               	btfss	_myMain^(0+256),0
  6384  1E94  0008               	return
  6385                           
  6386                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6387  1E95  0020               	movlb	0	; select bank0
  6388  1E96  180D               	btfsc	13,0	;volatile
  6389  1E97  0008               	return
  6390  1E98  2E9E               	goto	l7427
  6391  1E99                     l2461:	
  6392                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6393                           
  6394                           
  6395                           ;Switch_B1.c: 14: RB0 = 1;
  6396  1E99  0020               	movlb	0	; select bank0
  6397  1E9A  140D               	bsf	13,0	;volatile
  6398                           
  6399                           ;Switch_B1.c: 15: Timeout_Counter();
  6400  1E9B  319E  26D3  319E   	fcall	_Timeout_Counter
  6401  1E9E                     l7427:	
  6402  1E9E  0020               	movlb	0	; select bank0
  6403  1E9F  180D               	btfsc	13,0	;volatile
  6404  1EA0  2EA4               	goto	l7431
  6405  1EA1  0022               	movlb	2	; select bank2
  6406  1EA2  1D2A               	btfss	(_myMain^(0+256)+10),2
  6407  1EA3  2E99               	goto	l2461
  6408  1EA4                     l7431:	
  6409                           
  6410                           ;Switch_B1.c: 16: }
  6411                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6412  1EA4  319B  23B9         	fcall	_set_TimeoutCleared
  6413  1EA6  0008               	return
  6414  1EA7                     __end_of_TouchPower:	
  6415                           
  6416                           	psect	text19
  6417  1BB9                     __ptext19:	
  6418 ;; *************** function _set_TimeoutCleared *****************
  6419 ;; Defined at:
  6420 ;;		line 281 in file "../src/Main_B1.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;		None
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;		None
  6425 ;; Return value:  Size  Location     Type
  6426 ;;		None               void
  6427 ;; Registers used:
  6428 ;;		status,2
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;Total ram usage:        0 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; Hardware stack levels required when called:    5
  6441 ;; This function calls:
  6442 ;;		Nothing
  6443 ;; This function is called by:
  6444 ;;		_getAD
  6445 ;;		_TouchPower
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           
  6450                           ;psect for function _set_TimeoutCleared
  6451  1BB9                     _set_TimeoutCleared:	
  6452                           
  6453                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6454                           
  6455                           ;incstack = 0
  6456                           ; Regs used in _set_TimeoutCleared: [status,2]
  6457  1BB9  0022               	movlb	2	; select bank2
  6458  1BBA  112A               	bcf	(_myMain^(0+256)+10),2
  6459                           
  6460                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6461  1BBB  01AB               	clrf	(_myMain^(0+256)+11)
  6462  1BBC  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6463  1BBD  0008               	return
  6464  1BBE                     __end_of_set_TimeoutCleared:	
  6465                           
  6466                           	psect	text20
  6467  1ED3                     __ptext20:	
  6468 ;; *************** function _Timeout_Counter *****************
  6469 ;; Defined at:
  6470 ;;		line 272 in file "../src/Main_B1.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;		None
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;		None
  6475 ;; Return value:  Size  Location     Type
  6476 ;;		None               void
  6477 ;; Registers used:
  6478 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;Total ram usage:        0 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    5
  6491 ;; This function calls:
  6492 ;;		Nothing
  6493 ;; This function is called by:
  6494 ;;		_getAD
  6495 ;;		_TouchPower
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           
  6500                           ;psect for function _Timeout_Counter
  6501  1ED3                     _Timeout_Counter:	
  6502                           
  6503                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6504                           
  6505                           ;incstack = 0
  6506                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6507  1ED3  3001               	movlw	1
  6508  1ED4  0022               	movlb	2	; select bank2
  6509  1ED5  07AB               	addwf	(_myMain^(0+256)+11),f
  6510  1ED6  3000               	movlw	0
  6511  1ED7  3DAC               	addwfc	((_myMain+1)^(0+256)+11),f
  6512                           
  6513                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6514  1ED8  300B               	movlw	11
  6515  1ED9  3E20               	addlw	_myMain& (0+255)
  6516  1EDA  0086               	movwf	6
  6517  1EDB  3001               	movlw	1	; select bank2/3
  6518  1EDC  0087               	movwf	7
  6519  1EDD  3F40               	moviw [0]fsr1
  6520  1EDE  3AA8               	xorlw	168
  6521  1EDF  1D03               	skipz
  6522  1EE0  2EE3               	goto	u6045
  6523  1EE1  3F41               	moviw [1]fsr1
  6524  1EE2  3A61               	xorlw	97
  6525  1EE3                     u6045:	
  6526  1EE3  1D03               	skipz
  6527  1EE4  0008               	return
  6528                           
  6529                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6530  1EE5  01AB               	clrf	(_myMain^(0+256)+11)
  6531  1EE6  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6532                           
  6533                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6534  1EE7  152A               	bsf	(_myMain^(0+256)+10),2
  6535  1EE8  0008               	return
  6536  1EE9                     __end_of_Timeout_Counter:	
  6537                           
  6538                           	psect	text21
  6539  1BB5                     __ptext21:	
  6540 ;; *************** function _Switch_Initialization *****************
  6541 ;; Defined at:
  6542 ;;		line 46 in file "../src/Switch_B1.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;		None
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;		None
  6547 ;; Return value:  Size  Location     Type
  6548 ;;		None               void
  6549 ;; Registers used:
  6550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;Total ram usage:        0 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    8
  6563 ;; This function calls:
  6564 ;;		_setSw_Initialization
  6565 ;; This function is called by:
  6566 ;;		_main
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           
  6571                           ;psect for function _Switch_Initialization
  6572  1BB5                     _Switch_Initialization:	
  6573                           
  6574                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6575                           
  6576                           ;incstack = 0
  6577                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6578  1BB5  3001               	movlw	1
  6579  1BB6  319D  2534         	fcall	_setSw_Initialization
  6580  1BB8  0008               	return
  6581  1BB9                     __end_of_Switch_Initialization:	
  6582                           
  6583                           	psect	text22
  6584  1D34                     __ptext22:	
  6585 ;; *************** function _setSw_Initialization *****************
  6586 ;; Defined at:
  6587 ;;		line 66 in file "../src/Switch_B1.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;  sw              1    wreg     unsigned char 
  6590 ;; Auto vars:     Size  Location     Type
  6591 ;;  sw              1   10[BANK0 ] unsigned char 
  6592 ;; Return value:  Size  Location     Type
  6593 ;;		None               void
  6594 ;; Registers used:
  6595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6596 ;; Tracked objects:
  6597 ;;		On entry : 0/0
  6598 ;;		On exit  : 0/0
  6599 ;;		Unchanged: 0/0
  6600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;Total ram usage:        1 bytes
  6606 ;; Hardware stack levels used:    1
  6607 ;; Hardware stack levels required when called:    7
  6608 ;; This function calls:
  6609 ;;		_setLED
  6610 ;; This function is called by:
  6611 ;;		_Switch_Initialization
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           
  6616                           ;psect for function _setSw_Initialization
  6617  1D34                     _setSw_Initialization:	
  6618                           
  6619                           ;incstack = 0
  6620                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6621                           ;setSw_Initialization@sw stored from wreg
  6622  1D34  0020               	movlb	0	; select bank0
  6623  1D35  00AA               	movwf	setSw_Initialization@sw
  6624                           
  6625                           ;Switch_B1.c: 68: setLED(sw, 1);
  6626  1D36  01A8               	clrf	setLED@command
  6627  1D37  0AA8               	incf	setLED@command,f
  6628  1D38  082A               	movf	setSw_Initialization@sw,w
  6629  1D39  3192  226F  319D   	fcall	_setLED
  6630                           
  6631                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6632  1D3C  0020               	movlb	0	; select bank0
  6633  1D3D  01A8               	clrf	setLED@command
  6634  1D3E  0AA8               	incf	setLED@command,f
  6635  1D3F  082A               	movf	setSw_Initialization@sw,w
  6636  1D40  3E01               	addlw	1
  6637  1D41  3192  226F         	fcall	_setLED
  6638  1D43  0008               	return
  6639  1D44                     __end_of_setSw_Initialization:	
  6640                           
  6641                           	psect	text23
  6642  1B88                     __ptext23:	
  6643 ;; *************** function _RF_Main *****************
  6644 ;; Defined at:
  6645 ;;		line 26 in file "../src/RF_Control_B1.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;		None
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;		None
  6650 ;; Return value:  Size  Location     Type
  6651 ;;		None               void
  6652 ;; Registers used:
  6653 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;Total ram usage:        0 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:   12
  6666 ;; This function calls:
  6667 ;;		_setRF_Main
  6668 ;; This function is called by:
  6669 ;;		_main
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           
  6674                           ;psect for function _RF_Main
  6675  1B88                     _RF_Main:	
  6676                           
  6677                           ;RF_Control_B1.c: 28: setRF_Main();
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6681  1B88  3185  2564         	fcall	_setRF_Main
  6682  1B8A  0008               	return
  6683  1B8B                     __end_of_RF_Main:	
  6684                           
  6685                           	psect	text24
  6686  0564                     __ptext24:	
  6687 ;; *************** function _setRF_Main *****************
  6688 ;; Defined at:
  6689 ;;		line 53 in file "../src/RF_Control_B1.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;		None
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;  error           1    0[BANK3 ] unsigned char 
  6694 ;; Return value:  Size  Location     Type
  6695 ;;		None               void
  6696 ;; Registers used:
  6697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;      Totals:         0       0       0       1       1       0       0       0       0       0       0       0       
      +0       0
  6707 ;;Total ram usage:        2 bytes
  6708 ;; Hardware stack levels used:    1
  6709 ;; Hardware stack levels required when called:   11
  6710 ;; This function calls:
  6711 ;;		_CC2500_PowerOnInitial
  6712 ;;		_CC2500_RxData
  6713 ;;		_CC2500_TxData
  6714 ;;		_CC2500_WriteCommand
  6715 ;;		_RF_RxDisable
  6716 ;;		___lwdiv
  6717 ;;		_getBuz_GO
  6718 ;;		_getRF_KeyStatus
  6719 ;;		_getRxData
  6720 ;; This function is called by:
  6721 ;;		_RF_Main
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           
  6726                           ;psect for function _setRF_Main
  6727  0564                     _setRF_Main:	
  6728                           
  6729                           ;RF_Control_B1.c: 54: char error = 0;
  6730                           
  6731                           ;incstack = 0
  6732                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6733  0564  0023               	movlb	3	; select bank3
  6734  0565  01EC               	clrf	setRF_Main@error^(0+384)
  6735                           
  6736                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6737  0566  0021               	movlb	1	; select bank1
  6738  0567  1C20               	btfss	_RF1^(0+128),0
  6739  0568  2E39               	goto	l2103
  6740                           
  6741                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6742  0569  319D  2566  3185   	fcall	_getBuz_GO
  6743  056C  0020               	movlb	0	; select bank0
  6744  056D  0827               	movf	?_getBuz_GO+1,w
  6745  056E  0426               	iorwf	?_getBuz_GO,w
  6746  056F  1D03               	skipz
  6747  0570  2E1A               	goto	l11517
  6748                           
  6749                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6750  0571  319D  2577  3185   	fcall	_getRF_KeyStatus
  6751  0574  3A01               	xorlw	1
  6752  0575  3000               	movlw	0
  6753  0576  1903               	skipnz
  6754  0577  3001               	movlw	1
  6755  0578  0022               	movlb	2	; select bank2
  6756  0579  00EF               	movwf	??_setRF_Main^(0+256)
  6757  057A  0CEF               	rrf	??_setRF_Main^(0+256),f
  6758  057B  0CEF               	rrf	??_setRF_Main^(0+256),f
  6759  057C  0021               	movlb	1	; select bank1
  6760  057D  0820               	movf	_RF1^(0+128),w
  6761  057E  0022               	movlb	2	; select bank2
  6762  057F  066F               	xorwf	??_setRF_Main^(0+256),w
  6763  0580  397F               	andlw	-129
  6764  0581  066F               	xorwf	??_setRF_Main^(0+256),w
  6765  0582  0021               	movlb	1	; select bank1
  6766  0583  00A0               	movwf	_RF1^(0+128)
  6767                           
  6768                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6769  0584  1FA0               	btfss	_RF1^(0+128),7
  6770  0585  2D88               	goto	l2107
  6771  0586  1F20               	btfss	_RF1^(0+128),6
  6772  0587  2E1A               	goto	l11517
  6773  0588                     l2107:	
  6774                           
  6775                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6776  0588  1D20               	btfss	_RF1^(0+128),2
  6777  0589  2DD9               	goto	l2108
  6778                           
  6779                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6780  058A  1B20               	btfsc	_RF1^(0+128),6
  6781  058B  2DD4               	goto	l11489
  6782                           
  6783                           ;RF_Control_B1.c: 68: RF1.Count++;
  6784  058C  3001               	movlw	1
  6785  058D  07A2               	addwf	(_RF1^(0+128)+2),f
  6786  058E  3000               	movlw	0
  6787  058F  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6788                           
  6789                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6790  0590  3014               	movlw	20
  6791  0591  0020               	movlb	0	; select bank0
  6792  0592  00A6               	movwf	___lwdiv@divisor
  6793  0593  3000               	movlw	0
  6794  0594  00A7               	movwf	___lwdiv@divisor+1
  6795  0595  0021               	movlb	1	; select bank1
  6796  0596  0828               	movf	((_RF1+1)^(0+128)+7),w
  6797  0597  0020               	movlb	0	; select bank0
  6798  0598  01A9               	clrf	___lwdiv@dividend+1
  6799  0599  07A9               	addwf	___lwdiv@dividend+1,f
  6800  059A  0021               	movlb	1	; select bank1
  6801  059B  0827               	movf	(_RF1^(0+128)+7),w
  6802  059C  0020               	movlb	0	; select bank0
  6803  059D  01A8               	clrf	___lwdiv@dividend
  6804  059E  07A8               	addwf	___lwdiv@dividend,f
  6805  059F  3192  22DB  3185   	fcall	___lwdiv
  6806  05A2  0020               	movlb	0	; select bank0
  6807  05A3  0827               	movf	?___lwdiv+1,w
  6808  05A4  0021               	movlb	1	; select bank1
  6809  05A5  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6810  05A6  1D03               	skipz
  6811  05A7  2DAC               	goto	u14015
  6812  05A8  0020               	movlb	0	; select bank0
  6813  05A9  0826               	movf	?___lwdiv,w
  6814  05AA  0021               	movlb	1	; select bank1
  6815  05AB  0222               	subwf	(_RF1^(0+128)+2),w
  6816  05AC                     u14015:	
  6817  05AC  1C03               	skipc
  6818  05AD  2E1A               	goto	l11517
  6819                           
  6820                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6821  05AE  3014               	movlw	20
  6822  05AF  0020               	movlb	0	; select bank0
  6823  05B0  00A6               	movwf	___lwdiv@divisor
  6824  05B1  3000               	movlw	0
  6825  05B2  00A7               	movwf	___lwdiv@divisor+1
  6826  05B3  0021               	movlb	1	; select bank1
  6827  05B4  0828               	movf	((_RF1+1)^(0+128)+7),w
  6828  05B5  0020               	movlb	0	; select bank0
  6829  05B6  01A9               	clrf	___lwdiv@dividend+1
  6830  05B7  07A9               	addwf	___lwdiv@dividend+1,f
  6831  05B8  0021               	movlb	1	; select bank1
  6832  05B9  0827               	movf	(_RF1^(0+128)+7),w
  6833  05BA  0020               	movlb	0	; select bank0
  6834  05BB  01A8               	clrf	___lwdiv@dividend
  6835  05BC  07A8               	addwf	___lwdiv@dividend,f
  6836  05BD  3192  22DB  3185   	fcall	___lwdiv
  6837  05C0  0020               	movlb	0	; select bank0
  6838  05C1  0827               	movf	?___lwdiv+1,w
  6839  05C2  0021               	movlb	1	; select bank1
  6840  05C3  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6841  05C4  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6842  05C5  0020               	movlb	0	; select bank0
  6843  05C6  0826               	movf	?___lwdiv,w
  6844  05C7  0021               	movlb	1	; select bank1
  6845  05C8  01A2               	clrf	(_RF1^(0+128)+2)
  6846  05C9  07A2               	addwf	(_RF1^(0+128)+2),f
  6847                           
  6848                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6849  05CA  1120               	bcf	_RF1^(0+128),2
  6850                           
  6851                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6852  05CB  01AA               	clrf	(_RF1^(0+128)+10)
  6853  05CC  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6854                           
  6855                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6856  05CD  319D  2505  3185   	fcall	_RF_RxDisable
  6857                           
  6858                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6859  05D0  3196  26C4  3185   	fcall	_CC2500_TxData
  6860                           
  6861                           ;RF_Control_B1.c: 77: }
  6862                           ;RF_Control_B1.c: 78: } else {
  6863  05D3  2E1A               	goto	l11517
  6864  05D4                     l11489:	
  6865                           
  6866                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6867  05D4  0021               	movlb	1	; select bank1
  6868  05D5  01A2               	clrf	(_RF1^(0+128)+2)
  6869  05D6  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6870                           
  6871                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6872  05D7  1120               	bcf	_RF1^(0+128),2
  6873                           
  6874                           ;RF_Control_B1.c: 81: }
  6875                           ;RF_Control_B1.c: 82: } else {
  6876  05D8  2E1A               	goto	l11517
  6877  05D9                     l2108:	
  6878                           
  6879                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6880  05D9  1DA0               	btfss	_RF1^(0+128),3
  6881  05DA  2DE8               	goto	l11503
  6882                           
  6883                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6884  05DB  3197  272A  3185   	fcall	_CC2500_RxData
  6885                           
  6886                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6887  05DE  0021               	movlb	1	; select bank1
  6888  05DF  1CA0               	btfss	_RF1^(0+128),1
  6889  05E0  2E1A               	goto	l11517
  6890                           
  6891                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6892  05E1  10A0               	bcf	_RF1^(0+128),1
  6893                           
  6894                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6895  05E2  01AA               	clrf	(_RF1^(0+128)+10)
  6896  05E3  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6897                           
  6898                           ;RF_Control_B1.c: 97: getRxData();
  6899  05E4  3189  2194  3185   	fcall	_getRxData
  6900                           
  6901                           ;RF_Control_B1.c: 100: }
  6902                           ;RF_Control_B1.c: 101: } else {
  6903  05E7  2E1A               	goto	l11517
  6904  05E8                     l11503:	
  6905                           
  6906                           ;RF_Control_B1.c: 102: RF1.Count++;
  6907  05E8  3001               	movlw	1
  6908  05E9  0021               	movlb	1	; select bank1
  6909  05EA  07A2               	addwf	(_RF1^(0+128)+2),f
  6910  05EB  3000               	movlw	0
  6911  05EC  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6912                           
  6913                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6914  05ED  3014               	movlw	20
  6915  05EE  0020               	movlb	0	; select bank0
  6916  05EF  00A6               	movwf	___lwdiv@divisor
  6917  05F0  3000               	movlw	0
  6918  05F1  00A7               	movwf	___lwdiv@divisor+1
  6919  05F2  0021               	movlb	1	; select bank1
  6920  05F3  0828               	movf	((_RF1+1)^(0+128)+7),w
  6921  05F4  0020               	movlb	0	; select bank0
  6922  05F5  01A9               	clrf	___lwdiv@dividend+1
  6923  05F6  07A9               	addwf	___lwdiv@dividend+1,f
  6924  05F7  0021               	movlb	1	; select bank1
  6925  05F8  0827               	movf	(_RF1^(0+128)+7),w
  6926  05F9  0020               	movlb	0	; select bank0
  6927  05FA  01A8               	clrf	___lwdiv@dividend
  6928  05FB  07A8               	addwf	___lwdiv@dividend,f
  6929  05FC  3192  22DB  3185   	fcall	___lwdiv
  6930  05FF  0020               	movlb	0	; select bank0
  6931  0600  0827               	movf	?___lwdiv+1,w
  6932  0601  0021               	movlb	1	; select bank1
  6933  0602  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6934  0603  1D03               	skipz
  6935  0604  2E09               	goto	u14045
  6936  0605  0020               	movlb	0	; select bank0
  6937  0606  0826               	movf	?___lwdiv,w
  6938  0607  0021               	movlb	1	; select bank1
  6939  0608  0222               	subwf	(_RF1^(0+128)+2),w
  6940  0609                     u14045:	
  6941  0609  1C03               	skipc
  6942  060A  2E1A               	goto	l11517
  6943                           
  6944                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6945  060B  01A2               	clrf	(_RF1^(0+128)+2)
  6946  060C  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6947                           
  6948                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6949  060D  15A0               	bsf	_RF1^(0+128),3
  6950                           
  6951                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6952  060E  3036               	movlw	54
  6953  060F  319F  2762  3185   	fcall	_CC2500_WriteCommand
  6954                           
  6955                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6956  0612  303A               	movlw	58
  6957  0613  319F  2762  3185   	fcall	_CC2500_WriteCommand
  6958                           
  6959                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6960  0616  3034               	movlw	52
  6961  0617  319F  2762  3185   	fcall	_CC2500_WriteCommand
  6962  061A                     l11517:	
  6963                           
  6964                           ;RF_Control_B1.c: 111: }
  6965                           ;RF_Control_B1.c: 112: }
  6966                           ;RF_Control_B1.c: 113: }
  6967                           ;RF_Control_B1.c: 114: }
  6968                           ;RF_Control_B1.c: 115: }
  6969                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6970  061A  3001               	movlw	1
  6971  061B  0021               	movlb	1	; select bank1
  6972  061C  07AA               	addwf	(_RF1^(0+128)+10),f
  6973  061D  3000               	movlw	0
  6974  061E  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6975                           
  6976                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6977  061F  300B               	movlw	11
  6978  0620  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6979  0621  30B9               	movlw	185
  6980  0622  1903               	skipnz
  6981  0623  022A               	subwf	(_RF1^(0+128)+10),w
  6982  0624  1C03               	skipc
  6983  0625  2E32               	goto	l11531
  6984                           
  6985                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6986  0626  01AA               	clrf	(_RF1^(0+128)+10)
  6987  0627  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6988                           
  6989                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6990  0628  11A0               	bcf	_RF1^(0+128),3
  6991                           
  6992                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6993  0629  10A0               	bcf	_RF1^(0+128),1
  6994                           
  6995                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6996  062A  3036               	movlw	54
  6997  062B  319F  2762  3185   	fcall	_CC2500_WriteCommand
  6998                           
  6999                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7000  062E  303A               	movlw	58
  7001  062F  319F  2762  3185   	fcall	_CC2500_WriteCommand
  7002  0632                     l11531:	
  7003                           
  7004                           ;RF_Control_B1.c: 125: }
  7005                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7006  0632  0021               	movlb	1	; select bank1
  7007  0633  1F21               	btfss	(_RF1^(0+128)+1),6
  7008  0634  0008               	return
  7009                           
  7010                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7011  0635  1321               	bcf	(_RF1^(0+128)+1),6
  7012                           
  7013                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7014  0636  319E  267D         	fcall	_CC2500_PowerOnInitial
  7015                           
  7016                           ;RF_Control_B1.c: 130: }
  7017                           ;RF_Control_B1.c: 132: } else {
  7018  0638  0008               	return
  7019  0639                     l2103:	
  7020                           
  7021                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7022  0639  0022               	movlb	2	; select bank2
  7023  063A  1C20               	btfss	_myMain^(0+256),0
  7024  063B  0008               	return
  7025                           
  7026                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7027  063C  0021               	movlb	1	; select bank1
  7028  063D  1420               	bsf	_RF1^(0+128),0
  7029  063E  0008               	return
  7030  063F                     __end_of_setRF_Main:	
  7031                           
  7032                           	psect	text25
  7033  0994                     __ptext25:	
  7034 ;; *************** function _getRxData *****************
  7035 ;; Defined at:
  7036 ;;		line 227 in file "../src/RF_Control_B1.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;		None
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;  error           1    0[BANK2 ] unsigned char 
  7041 ;; Return value:  Size  Location     Type
  7042 ;;		None               void
  7043 ;; Registers used:
  7044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7051 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  7052 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7053 ;;      Totals:         0       0       1       1       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;Total ram usage:        2 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:   10
  7057 ;; This function calls:
  7058 ;;		_getMain_All_Error_Status
  7059 ;;		_setControl_Lights_Table
  7060 ;;		_setLog_Code
  7061 ;;		_setTxData
  7062 ;; This function is called by:
  7063 ;;		_setRF_Main
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           
  7068                           ;psect for function _getRxData
  7069  0994                     _getRxData:	
  7070                           
  7071                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7072                           
  7073                           ;incstack = 0
  7074                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7075  0994  0023               	movlb	3	; select bank3
  7076  0995  0820               	movf	_RF_Data^(0+384),w
  7077  0996  3AAA               	xorlw	170
  7078  0997  1D03               	skipz
  7079  0998  29AA               	goto	l11255
  7080  0999  0821               	movf	(_RF_Data^(0+384)+1),w
  7081  099A  3A01               	xorlw	1
  7082  099B  1D03               	skipz
  7083  099C  29AA               	goto	l11255
  7084                           
  7085                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7086  099D  3055               	movlw	85
  7087  099E  0021               	movlb	1	; select bank1
  7088  099F  00EE               	movwf	??_getRxData^(0+128)
  7089  09A0  086F               	movf	_product^(0+128),w
  7090  09A1  3E02               	addlw	2
  7091  09A2  0086               	movwf	6
  7092  09A3  3002               	movlw	2	; select bank4/5
  7093  09A4  0087               	movwf	7
  7094  09A5  086E               	movf	??_getRxData^(0+128),w
  7095  09A6  0081               	movwf	1
  7096                           
  7097                           ;RF_Control_B1.c: 231: setTxData();
  7098  09A7  318F  2745         	fcall	_setTxData
  7099                           
  7100                           ;RF_Control_B1.c: 235: } else {
  7101  09A9  0008               	return
  7102  09AA                     l11255:	
  7103                           
  7104                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7105  09AA  3000               	movlw	0
  7106  09AB  3191  21D5  3189   	fcall	_getMain_All_Error_Status
  7107  09AE  0021               	movlb	1	; select bank1
  7108  09AF  00EE               	movwf	??_getRxData^(0+128)
  7109  09B0  086E               	movf	??_getRxData^(0+128),w
  7110  09B1  0022               	movlb	2	; select bank2
  7111  09B2  00EE               	movwf	getRxData@error^(0+256)
  7112                           
  7113                           ;RF_Control_B1.c: 237: if (error == 0) {
  7114  09B3  08EE               	movf	getRxData@error^(0+256),f
  7115  09B4  1D03               	skipz
  7116  09B5  2A06               	goto	l2148
  7117                           
  7118                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7119  09B6  0021               	movlb	1	; select bank1
  7120  09B7  1F20               	btfss	_RF1^(0+128),6
  7121  09B8  29C4               	goto	l11267
  7122                           
  7123                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7124  09B9  0023               	movlb	3	; select bank3
  7125  09BA  08A0               	movf	_RF_Data^(0+384),f
  7126  09BB  1D03               	skipz
  7127  09BC  0008               	return
  7128  09BD  0821               	movf	(_RF_Data^(0+384)+1),w
  7129  09BE  3A64               	xorlw	100
  7130  09BF  1D03               	skipz
  7131  09C0  0008               	return
  7132                           
  7133                           ;RF_Control_B1.c: 241: setLog_Code();
  7134  09C1  3192  223B         	fcall	_setLog_Code
  7135                           
  7136                           ;RF_Control_B1.c: 242: }
  7137                           ;RF_Control_B1.c: 243: } else {
  7138  09C3  0008               	return
  7139  09C4                     l11267:	
  7140                           
  7141                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7142  09C4  0023               	movlb	3	; select bank3
  7143  09C5  0834               	movf	(_RF_Data^(0+384)+20),w
  7144  09C6  3AD1               	xorlw	209
  7145  09C7  1903               	skipnz
  7146  09C8  29CD               	goto	l11271
  7147  09C9  0834               	movf	(_RF_Data^(0+384)+20),w
  7148  09CA  3A0A               	xorlw	10
  7149  09CB  1D03               	skipz
  7150  09CC  0008               	return
  7151  09CD                     l11271:	
  7152                           
  7153                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7154  09CD  08A0               	movf	_RF_Data^(0+384),f
  7155  09CE  1D03               	skipz
  7156  09CF  0008               	return
  7157  09D0  0821               	movf	(_RF_Data^(0+384)+1),w
  7158  09D1  3A02               	xorlw	2
  7159  09D2  1D03               	skipz
  7160  09D3  0008               	return
  7161                           
  7162                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7163  09D4  082C               	movf	(_RF_Data^(0+384)+12),w
  7164  09D5  3AFF               	xorlw	255
  7165  09D6  1D03               	skipz
  7166  09D7  29E2               	goto	l11283
  7167  09D8  082D               	movf	(_RF_Data^(0+384)+13),w
  7168  09D9  3AFF               	xorlw	255
  7169  09DA  1D03               	skipz
  7170  09DB  29E2               	goto	l11283
  7171  09DC  082E               	movf	(_RF_Data^(0+384)+14),w
  7172  09DD  3AFF               	xorlw	255
  7173  09DE  1D03               	skipz
  7174  09DF  29E2               	goto	l11283
  7175                           
  7176                           ;RF_Control_B1.c: 249: __nop();
  7177  09E0  0000               	nop
  7178                           
  7179                           ;RF_Control_B1.c: 250: } else {
  7180  09E1  0008               	return
  7181  09E2                     l11283:	
  7182                           
  7183                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7184  09E2  0021               	movlb	1	; select bank1
  7185  09E3  086F               	movf	_product^(0+128),w
  7186  09E4  3E0C               	addlw	12
  7187  09E5  0086               	movwf	6
  7188  09E6  3002               	movlw	2	; select bank4/5
  7189  09E7  0087               	movwf	7
  7190  09E8  0023               	movlb	3	; select bank3
  7191  09E9  082C               	movf	(_RF_Data^(0+384)+12),w
  7192  09EA  0601               	xorwf	1,w
  7193  09EB  1D03               	skipz
  7194  09EC  0008               	return
  7195  09ED  0021               	movlb	1	; select bank1
  7196  09EE  086F               	movf	_product^(0+128),w
  7197  09EF  3E0D               	addlw	13
  7198  09F0  0086               	movwf	6
  7199  09F1  3002               	movlw	2	; select bank4/5
  7200  09F2  0087               	movwf	7
  7201  09F3  0023               	movlb	3	; select bank3
  7202  09F4  082D               	movf	(_RF_Data^(0+384)+13),w
  7203  09F5  0601               	xorwf	1,w
  7204  09F6  1D03               	skipz
  7205  09F7  0008               	return
  7206  09F8  0021               	movlb	1	; select bank1
  7207  09F9  086F               	movf	_product^(0+128),w
  7208  09FA  3E0E               	addlw	14
  7209  09FB  0086               	movwf	6
  7210  09FC  3002               	movlw	2	; select bank4/5
  7211  09FD  0087               	movwf	7
  7212  09FE  0023               	movlb	3	; select bank3
  7213  09FF  082E               	movf	(_RF_Data^(0+384)+14),w
  7214  0A00  0601               	xorwf	1,w
  7215  0A01  1D03               	skipz
  7216  0A02  0008               	return
  7217                           
  7218                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7219  0A03  3188  20B1         	fcall	_setControl_Lights_Table
  7220                           
  7221                           ;RF_Control_B1.c: 253: }
  7222                           ;RF_Control_B1.c: 254: }
  7223                           ;RF_Control_B1.c: 256: }
  7224                           ;RF_Control_B1.c: 267: }
  7225                           ;RF_Control_B1.c: 268: }
  7226                           ;RF_Control_B1.c: 269: } else {
  7227  0A05  0008               	return
  7228  0A06                     l2148:	
  7229                           
  7230                           ;RF_Control_B1.c: 270: __nop();
  7231  0A06  0000               	nop
  7232  0A07  0008               	return
  7233  0A08                     __end_of_getRxData:	
  7234                           
  7235                           	psect	text26
  7236  123B                     __ptext26:	
  7237 ;; *************** function _setLog_Code *****************
  7238 ;; Defined at:
  7239 ;;		line 276 in file "../src/RF_Control_B1.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;		None
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;		None
  7244 ;; Return value:  Size  Location     Type
  7245 ;;		None               void
  7246 ;; Registers used:
  7247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;Total ram usage:        1 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    7
  7260 ;; This function calls:
  7261 ;;		_setBuz
  7262 ;;		_setMemory_LoopSave
  7263 ;;		_setMemory_Modify
  7264 ;;		_setProductData
  7265 ;; This function is called by:
  7266 ;;		_getRxData
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           
  7271                           ;psect for function _setLog_Code
  7272  123B                     _setLog_Code:	
  7273                           
  7274                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7275                           
  7276                           ;incstack = 0
  7277                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7278  123B  0021               	movlb	1	; select bank1
  7279  123C  1320               	bcf	_RF1^(0+128),6
  7280                           
  7281                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7282  123D  0023               	movlb	3	; select bank3
  7283  123E  082C               	movf	(_RF_Data^(0+384)+12),w
  7284  123F  0021               	movlb	1	; select bank1
  7285  1240  00E3               	movwf	??_setLog_Code^(0+128)
  7286  1241  0863               	movf	??_setLog_Code^(0+128),w
  7287  1242  00E1               	movwf	setProductData@value^(0+128)
  7288  1243  300C               	movlw	12
  7289  1244  319C  24E7  3192   	fcall	_setProductData
  7290                           
  7291                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7292  1247  0023               	movlb	3	; select bank3
  7293  1248  082D               	movf	(_RF_Data^(0+384)+13),w
  7294  1249  0021               	movlb	1	; select bank1
  7295  124A  00E3               	movwf	??_setLog_Code^(0+128)
  7296  124B  0863               	movf	??_setLog_Code^(0+128),w
  7297  124C  00E1               	movwf	setProductData@value^(0+128)
  7298  124D  300D               	movlw	13
  7299  124E  319C  24E7  3192   	fcall	_setProductData
  7300                           
  7301                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7302  1251  0023               	movlb	3	; select bank3
  7303  1252  082E               	movf	(_RF_Data^(0+384)+14),w
  7304  1253  0021               	movlb	1	; select bank1
  7305  1254  00E3               	movwf	??_setLog_Code^(0+128)
  7306  1255  0863               	movf	??_setLog_Code^(0+128),w
  7307  1256  00E1               	movwf	setProductData@value^(0+128)
  7308  1257  300E               	movlw	14
  7309  1258  319C  24E7  3192   	fcall	_setProductData
  7310                           
  7311                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7312  125B  3064               	movlw	100
  7313  125C  0020               	movlb	0	; select bank0
  7314  125D  00AF               	movwf	setBuz@time
  7315  125E  3000               	movlw	0
  7316  125F  00B0               	movwf	setBuz@time+1
  7317  1260  3001               	movlw	1
  7318  1261  3195  2550  3192   	fcall	_setBuz
  7319                           
  7320                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7321  1264  0022               	movlb	2	; select bank2
  7322  1265  1EA0               	btfss	_myMain^(0+256),5
  7323  1266  2A6B               	goto	l2163
  7324                           
  7325                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7326  1267  3001               	movlw	1
  7327  1268  319E  261A  3192   	fcall	_setMemory_LoopSave
  7328  126B                     l2163:	
  7329                           
  7330                           ;RF_Control_B1.c: 284: }
  7331                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7332  126B  3001               	movlw	1
  7333  126C  319E  2607         	fcall	_setMemory_Modify
  7334  126E  0008               	return
  7335  126F                     __end_of_setLog_Code:	
  7336                           
  7337                           	psect	text27
  7338  1E1A                     __ptext27:	
  7339 ;; *************** function _setMemory_LoopSave *****************
  7340 ;; Defined at:
  7341 ;;		line 1076 in file "../src/MCU_B1.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;  command         1    wreg     unsigned char 
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  command         1    7[BANK0 ] unsigned char 
  7346 ;; Return value:  Size  Location     Type
  7347 ;;		None               void
  7348 ;; Registers used:
  7349 ;;		wreg, status,2, status,0
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;Total ram usage:        2 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; Hardware stack levels required when called:    5
  7362 ;; This function calls:
  7363 ;;		Nothing
  7364 ;; This function is called by:
  7365 ;;		_setLog_Code
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           
  7370                           ;psect for function _setMemory_LoopSave
  7371  1E1A                     _setMemory_LoopSave:	
  7372                           
  7373                           ;incstack = 0
  7374                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7375                           ;setMemory_LoopSave@command stored from wreg
  7376  1E1A  0020               	movlb	0	; select bank0
  7377  1E1B  00A7               	movwf	setMemory_LoopSave@command
  7378                           
  7379                           ;MCU_B1.c: 1077: Memory.LoopSave = command == 1 ? 1 : 0;
  7380  1E1C  0827               	movf	setMemory_LoopSave@command,w
  7381  1E1D  3A01               	xorlw	1
  7382  1E1E  3000               	movlw	0
  7383  1E1F  1903               	skipnz
  7384  1E20  3001               	movlw	1
  7385  1E21  00A6               	movwf	??_setMemory_LoopSave
  7386  1E22  0DA6               	rlf	??_setMemory_LoopSave,f
  7387  1E23  0DA6               	rlf	??_setMemory_LoopSave,f
  7388  1E24  0023               	movlb	3	; select bank3
  7389  1E25  0862               	movf	(_Memory^(0+384)+36),w
  7390  1E26  0020               	movlb	0	; select bank0
  7391  1E27  0626               	xorwf	??_setMemory_LoopSave,w
  7392  1E28  39FB               	andlw	-5
  7393  1E29  0626               	xorwf	??_setMemory_LoopSave,w
  7394  1E2A  0023               	movlb	3	; select bank3
  7395  1E2B  00E2               	movwf	(_Memory^(0+384)+36)
  7396  1E2C  0008               	return
  7397  1E2D                     __end_of_setMemory_LoopSave:	
  7398                           
  7399                           	psect	text28
  7400  08B1                     __ptext28:	
  7401 ;; *************** function _setControl_Lights_Table *****************
  7402 ;; Defined at:
  7403 ;;		line 289 in file "../src/RF_Control_B1.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;		None
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;		None
  7408 ;; Return value:  Size  Location     Type
  7409 ;;		None               void
  7410 ;; Registers used:
  7411 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;Total ram usage:        0 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    9
  7424 ;; This function calls:
  7425 ;;		_getDimmerLights_Status
  7426 ;;		_getMain_All_LightsStatus
  7427 ;;		_setCmd_Status
  7428 ;;		_setDimmerLights_SwOff
  7429 ;;		_setDimmerLights_SwOn
  7430 ;;		_setProductData
  7431 ;;		_setRFSW_AdjControl
  7432 ;;		_setRFSW_Control
  7433 ;;		_setTxData
  7434 ;; This function is called by:
  7435 ;;		_getRxData
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           
  7440                           ;psect for function _setControl_Lights_Table
  7441  08B1                     _setControl_Lights_Table:	
  7442                           
  7443                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7444                           
  7445                           ;incstack = 0
  7446                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7447  08B1  2912               	goto	l11017
  7448  08B2                     l10999:	
  7449                           ;RF_Control_B1.c: 292: case 0x00:
  7450                           
  7451                           
  7452                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7453  08B2  319C  2418  3188   	fcall	_getMain_All_LightsStatus
  7454  08B5  3A01               	xorlw	1
  7455  08B6  1D03               	skipz
  7456  08B7  28CE               	goto	l11007
  7457                           
  7458                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7459  08B8  3001               	movlw	1
  7460  08B9  319D  2514  3188   	fcall	_getDimmerLights_Status
  7461  08BC  3A01               	xorlw	1
  7462  08BD  1D03               	skipz
  7463  08BE  28C7               	goto	l11005
  7464                           
  7465                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7466  08BF  3001               	movlw	1
  7467  08C0  3191  21A2  3188   	fcall	_setDimmerLights_SwOn
  7468                           
  7469                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7470  08C3  3001               	movlw	1
  7471  08C4  3193  2312  3188   	fcall	_setDimmerLights_SwOff
  7472  08C7                     l11005:	
  7473                           
  7474                           ;RF_Control_B1.c: 299: }
  7475                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7476  08C7  0020               	movlb	0	; select bank0
  7477  08C8  01A6               	clrf	setCmd_Status@cmd
  7478  08C9  0AA6               	incf	setCmd_Status@cmd,f
  7479  08CA  3001               	movlw	1
  7480  08CB  319F  2749         	fcall	_setCmd_Status
  7481                           
  7482                           ;RF_Control_B1.c: 315: } else {
  7483  08CD  0008               	return
  7484  08CE                     l11007:	
  7485                           
  7486                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7487  08CE  0021               	movlb	1	; select bank1
  7488  08CF  01E1               	clrf	setProductData@value^(0+128)
  7489  08D0  3009               	movlw	9
  7490  08D1  319C  24E7  3188   	fcall	_setProductData
  7491                           
  7492                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7493  08D4  0021               	movlb	1	; select bank1
  7494  08D5  01E1               	clrf	setProductData@value^(0+128)
  7495  08D6  300B               	movlw	11
  7496  08D7  319C  24E7  3188   	fcall	_setProductData
  7497                           
  7498                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7499  08DA  0021               	movlb	1	; select bank1
  7500  08DB  01E1               	clrf	setProductData@value^(0+128)
  7501  08DC  300F               	movlw	15
  7502  08DD  319C  24E7  3188   	fcall	_setProductData
  7503                           
  7504                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7505  08E0  0021               	movlb	1	; select bank1
  7506  08E1  01E1               	clrf	setProductData@value^(0+128)
  7507  08E2  3011               	movlw	17
  7508  08E3  319C  24E7  3188   	fcall	_setProductData
  7509                           
  7510                           ;RF_Control_B1.c: 320: setTxData();
  7511  08E6  318F  2745         	fcall	_setTxData
  7512                           
  7513                           ;RF_Control_B1.c: 321: }
  7514                           ;RF_Control_B1.c: 322: break;
  7515  08E8  0008               	return
  7516  08E9                     l11009:	
  7517                           ;RF_Control_B1.c: 324: case 0x20:
  7518                           
  7519                           
  7520                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7521  08E9  0021               	movlb	1	; select bank1
  7522  08EA  01E1               	clrf	setProductData@value^(0+128)
  7523  08EB  3009               	movlw	9
  7524  08EC  319C  24E7  3188   	fcall	_setProductData
  7525                           
  7526                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7527  08EF  0021               	movlb	1	; select bank1
  7528  08F0  01E1               	clrf	setProductData@value^(0+128)
  7529  08F1  300B               	movlw	11
  7530  08F2  319C  24E7  3188   	fcall	_setProductData
  7531                           
  7532                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7533  08F5  0021               	movlb	1	; select bank1
  7534  08F6  086F               	movf	_product^(0+128),w
  7535  08F7  0086               	movwf	6
  7536  08F8  3002               	movlw	2	; select bank4/5
  7537  08F9  0087               	movwf	7
  7538  08FA  3002               	movlw	2	; select bank4/5
  7539  08FB  3F4F               	moviw [15]fsr1
  7540  08FC  00E1               	movwf	setProductData@value^(0+128)
  7541  08FD  300F               	movlw	15
  7542  08FE  319C  24E7  3188   	fcall	_setProductData
  7543                           
  7544                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7545  0901  0021               	movlb	1	; select bank1
  7546  0902  01E1               	clrf	setProductData@value^(0+128)
  7547  0903  3011               	movlw	17
  7548  0904  319C  24E7  3188   	fcall	_setProductData
  7549                           
  7550                           ;RF_Control_B1.c: 329: setTxData();
  7551  0907  318F  2745         	fcall	_setTxData
  7552                           
  7553                           ;RF_Control_B1.c: 330: break;
  7554  0909  0008               	return
  7555  090A                     l11011:	
  7556                           ;RF_Control_B1.c: 333: case 0x01:
  7557                           
  7558                           
  7559                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7560  090A  3001               	movlw	1
  7561  090B  3193  2388         	fcall	_setRFSW_Control
  7562                           
  7563                           ;RF_Control_B1.c: 335: break;
  7564  090D  0008               	return
  7565  090E                     l11013:	
  7566                           ;RF_Control_B1.c: 339: case 0x11:
  7567                           
  7568                           
  7569                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7570  090E  3001               	movlw	1
  7571  090F  318A  22FC         	fcall	_setRFSW_AdjControl
  7572                           
  7573                           ;RF_Control_B1.c: 370: }
  7574                           
  7575                           ;RF_Control_B1.c: 341: break;
  7576  0911  0008               	return
  7577  0912                     l11017:	
  7578  0912  0023               	movlb	3	; select bank3
  7579  0913  082F               	movf	(_RF_Data^(0+384)+15),w
  7580                           
  7581                           ; Switch size 1, requested type "space"
  7582                           ; Number of cases is 4, Range of values is 0 to 32
  7583                           ; switch strategies available:
  7584                           ; Name         Instructions Cycles
  7585                           ; simple_byte           13     7 (average)
  7586                           ; direct_byte           72     6 (fixed)
  7587                           ; jumptable            260     6 (fixed)
  7588                           ;	Chosen strategy is simple_byte
  7589  0914  3A00               	xorlw	0	; case 0
  7590  0915  1903               	skipnz
  7591  0916  28B2               	goto	l10999
  7592  0917  3A01               	xorlw	1	; case 1
  7593  0918  1903               	skipnz
  7594  0919  290A               	goto	l11011
  7595  091A  3A10               	xorlw	16	; case 17
  7596  091B  1903               	skipnz
  7597  091C  290E               	goto	l11013
  7598  091D  3A31               	xorlw	49	; case 32
  7599  091E  1903               	skipnz
  7600  091F  28E9               	goto	l11009
  7601  0920  2921               	goto	l2176
  7602  0921                     l2176:	
  7603  0921  0008               	return
  7604  0922                     __end_of_setControl_Lights_Table:	
  7605                           
  7606                           	psect	text29
  7607  1388                     __ptext29:	
  7608 ;; *************** function _setRFSW_Control *****************
  7609 ;; Defined at:
  7610 ;;		line 378 in file "../src/RF_Control_B1.c"
  7611 ;; Parameters:    Size  Location     Type
  7612 ;;  sw              1    wreg     unsigned char 
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;  sw              1   18[BANK1 ] unsigned char 
  7615 ;;  status          1   17[BANK1 ] unsigned char 
  7616 ;; Return value:  Size  Location     Type
  7617 ;;		None               void
  7618 ;; Registers used:
  7619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7620 ;; Tracked objects:
  7621 ;;		On entry : 0/0
  7622 ;;		On exit  : 0/0
  7623 ;;		Unchanged: 0/0
  7624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7626 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7627 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7628 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7629 ;;Total ram usage:        3 bytes
  7630 ;; Hardware stack levels used:    1
  7631 ;; Hardware stack levels required when called:    8
  7632 ;; This function calls:
  7633 ;;		_getDimmerLights_Status
  7634 ;;		_setBuz
  7635 ;;		_setDelayOff_GO
  7636 ;;		_setDimmerLights_SwOff
  7637 ;;		_setDimmerLights_SwOn
  7638 ;;		_setRF_DimmerLights
  7639 ;;		_setTxData
  7640 ;; This function is called by:
  7641 ;;		_setControl_Lights_Table
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           
  7646                           ;psect for function _setRFSW_Control
  7647  1388                     _setRFSW_Control:	
  7648                           
  7649                           ;incstack = 0
  7650                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7651                           ;setRFSW_Control@sw stored from wreg
  7652  1388  0021               	movlb	1	; select bank1
  7653  1389  00ED               	movwf	setRFSW_Control@sw^(0+128)
  7654                           
  7655                           ;RF_Control_B1.c: 379: char status = 0;
  7656  138A  01EC               	clrf	setRFSW_Control@status^(0+128)
  7657                           
  7658                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7659  138B  0023               	movlb	3	; select bank3
  7660  138C  0830               	movf	(_RF_Data^(0+384)+16),w
  7661  138D  3A80               	xorlw	128
  7662  138E  1D03               	skipz
  7663  138F  2BBB               	goto	l10751
  7664                           
  7665                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7666  1390  0021               	movlb	1	; select bank1
  7667  1391  01E3               	clrf	setDelayOff_GO@command^(0+128)
  7668  1392  0AE3               	incf	setDelayOff_GO@command^(0+128),f
  7669  1393  0023               	movlb	3	; select bank3
  7670  1394  0831               	movf	(_RF_Data^(0+384)+17),w
  7671  1395  0021               	movlb	1	; select bank1
  7672  1396  00EB               	movwf	??_setRFSW_Control^(0+128)
  7673  1397  086B               	movf	??_setRFSW_Control^(0+128),w
  7674  1398  00E4               	movwf	setDelayOff_GO@value^(0+128)
  7675  1399  086D               	movf	setRFSW_Control@sw^(0+128),w
  7676  139A  318C  2404  3193   	fcall	_setDelayOff_GO
  7677                           
  7678                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7679  139D  0021               	movlb	1	; select bank1
  7680  139E  086D               	movf	setRFSW_Control@sw^(0+128),w
  7681  139F  319D  2514  3193   	fcall	_getDimmerLights_Status
  7682  13A2  3A01               	xorlw	1
  7683  13A3  1D03               	skipz
  7684  13A4  2BBB               	goto	l10751
  7685                           
  7686                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7687  13A5  3064               	movlw	100
  7688  13A6  0020               	movlb	0	; select bank0
  7689  13A7  00AF               	movwf	setBuz@time
  7690  13A8  3000               	movlw	0
  7691  13A9  00B0               	movwf	setBuz@time+1
  7692  13AA  3001               	movlw	1
  7693  13AB  3195  2550  3193   	fcall	_setBuz
  7694                           
  7695                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7696  13AE  0021               	movlb	1	; select bank1
  7697  13AF  01E3               	clrf	setRF_DimmerLights@on^(0+128)
  7698  13B0  0AE3               	incf	setRF_DimmerLights@on^(0+128),f
  7699  13B1  086D               	movf	setRFSW_Control@sw^(0+128),w
  7700  13B2  3196  2604  3193   	fcall	_setRF_DimmerLights
  7701                           
  7702                           ;RF_Control_B1.c: 386: setTxData();
  7703  13B5  318F  2745  3193   	fcall	_setTxData
  7704                           
  7705                           ;RF_Control_B1.c: 387: status = 1;
  7706  13B8  0021               	movlb	1	; select bank1
  7707  13B9  01EC               	clrf	setRFSW_Control@status^(0+128)
  7708  13BA  0AEC               	incf	setRFSW_Control@status^(0+128),f
  7709  13BB                     l10751:	
  7710                           
  7711                           ;RF_Control_B1.c: 388: }
  7712                           ;RF_Control_B1.c: 389: }
  7713                           ;RF_Control_B1.c: 391: if (status == 0) {
  7714  13BB  0021               	movlb	1	; select bank1
  7715  13BC  08EC               	movf	setRFSW_Control@status^(0+128),f
  7716  13BD  1D03               	skipz
  7717  13BE  0008               	return
  7718                           
  7719                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7720  13BF  086D               	movf	setRFSW_Control@sw^(0+128),w
  7721  13C0  3191  21A2  3193   	fcall	_setDimmerLights_SwOn
  7722                           
  7723                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7724  13C3  0021               	movlb	1	; select bank1
  7725  13C4  086D               	movf	setRFSW_Control@sw^(0+128),w
  7726  13C5  3193  2312         	fcall	_setDimmerLights_SwOff
  7727  13C7  0008               	return
  7728  13C8                     __end_of_setRFSW_Control:	
  7729                           
  7730                           	psect	text30
  7731  0AFC                     __ptext30:	
  7732 ;; *************** function _setRFSW_AdjControl *****************
  7733 ;; Defined at:
  7734 ;;		line 400 in file "../src/RF_Control_B1.c"
  7735 ;; Parameters:    Size  Location     Type
  7736 ;;  sw              1    wreg     unsigned char 
  7737 ;; Auto vars:     Size  Location     Type
  7738 ;;  sw              1   11[BANK1 ] unsigned char 
  7739 ;;  status          1   10[BANK1 ] unsigned char 
  7740 ;; Return value:  Size  Location     Type
  7741 ;;		None               void
  7742 ;; Registers used:
  7743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;Total ram usage:        4 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:    8
  7756 ;; This function calls:
  7757 ;;		_getDimmerLights_PercentToValue
  7758 ;;		_getDimmerLights_Status
  7759 ;;		_setDimmerIntr_Dimming_RF
  7760 ;;		_setDimmerIntr_MaxmumValue
  7761 ;;		_setDimmerLights_DimmingRun
  7762 ;;		_setDimmerLights_SwOff
  7763 ;;		_setDimmerLights_SwOn
  7764 ;;		_setMemory_Modify
  7765 ;;		_setProductData
  7766 ;;		_setTxData
  7767 ;; This function is called by:
  7768 ;;		_setControl_Lights_Table
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           
  7773                           ;psect for function _setRFSW_AdjControl
  7774  0AFC                     _setRFSW_AdjControl:	
  7775                           
  7776                           ;incstack = 0
  7777                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7778                           ;setRFSW_AdjControl@sw stored from wreg
  7779  0AFC  0021               	movlb	1	; select bank1
  7780  0AFD  00E6               	movwf	setRFSW_AdjControl@sw^(0+128)
  7781                           
  7782                           ;RF_Control_B1.c: 401: char status = 0;
  7783  0AFE  01E5               	clrf	setRFSW_AdjControl@status^(0+128)
  7784                           
  7785                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7786  0AFF  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7787  0B00  319D  2514  318A   	fcall	_getDimmerLights_Status
  7788  0B03  0021               	movlb	1	; select bank1
  7789  0B04  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7790  0B05  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7791  0B06  00E5               	movwf	setRFSW_AdjControl@status^(0+128)
  7792                           
  7793                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7794  0B07  3065               	movlw	101
  7795  0B08  0023               	movlb	3	; select bank3
  7796  0B09  0229               	subwf	(_RF_Data^(0+384)+9),w
  7797  0B0A  1C03               	skipc
  7798  0B0B  2B13               	goto	l10763
  7799                           
  7800                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7801  0B0C  3064               	movlw	100
  7802  0B0D  0021               	movlb	1	; select bank1
  7803  0B0E  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7804  0B0F  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7805  0B10  0023               	movlb	3	; select bank3
  7806  0B11  00A9               	movwf	(_RF_Data^(0+384)+9)
  7807                           
  7808                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7809  0B12  2B18               	goto	l10767
  7810  0B13                     l10763:	
  7811  0B13  08A9               	movf	(_RF_Data^(0+384)+9),f
  7812  0B14  1D03               	skipz
  7813  0B15  2B18               	goto	l10767
  7814                           
  7815                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7816  0B16  01A9               	clrf	(_RF_Data^(0+384)+9)
  7817  0B17  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7818  0B18                     l10767:	
  7819                           
  7820                           ;RF_Control_B1.c: 409: }
  7821                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7822  0B18  0829               	movf	(_RF_Data^(0+384)+9),w
  7823  0B19  0021               	movlb	1	; select bank1
  7824  0B1A  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7825  0B1B  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7826  0B1C  00E1               	movwf	setProductData@value^(0+128)
  7827  0B1D  3009               	movlw	9
  7828  0B1E  319C  24E7  318A   	fcall	_setProductData
  7829                           
  7830                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7831  0B21  0021               	movlb	1	; select bank1
  7832  0B22  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7833  0B23  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7834  0B24  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7835  0B25  00E1               	movwf	setProductData@value^(0+128)
  7836  0B26  300B               	movlw	11
  7837  0B27  319C  24E7  318A   	fcall	_setProductData
  7838                           
  7839                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7840  0B2A  0021               	movlb	1	; select bank1
  7841  0B2B  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7842  0B2C  3E1A               	addlw	26
  7843  0B2D  076F               	addwf	_product^(0+128),w
  7844  0B2E  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7845  0B2F  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7846  0B30  0086               	movwf	6
  7847  0B31  3002               	movlw	2	; select bank4/5
  7848  0B32  0087               	movwf	7
  7849  0B33  0801               	movf	1,w
  7850  0B34  00E4               	movwf	(??_setRFSW_AdjControl+1)^(0+128)
  7851  0B35  0864               	movf	(??_setRFSW_AdjControl+1)^(0+128),w
  7852  0B36  00E1               	movwf	setProductData@value^(0+128)
  7853  0B37  3011               	movlw	17
  7854  0B38  319C  24E7  318A   	fcall	_setProductData
  7855                           
  7856                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7857  0B3B  0023               	movlb	3	; select bank3
  7858  0B3C  0829               	movf	(_RF_Data^(0+384)+9),w
  7859  0B3D  0021               	movlb	1	; select bank1
  7860  0B3E  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7861  0B3F  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7862  0B40  00E1               	movwf	setProductData@value^(0+128)
  7863  0B41  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7864  0B42  3E14               	addlw	20
  7865  0B43  319C  24E7  318A   	fcall	_setProductData
  7866                           
  7867                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7868  0B46  3001               	movlw	1
  7869  0B47  319E  2607  318A   	fcall	_setMemory_Modify
  7870                           
  7871                           ;RF_Control_B1.c: 416: if (status == 1) {
  7872  0B4A  0021               	movlb	1	; select bank1
  7873  0B4B  0865               	movf	setRFSW_AdjControl@status^(0+128),w
  7874  0B4C  3A01               	xorlw	1
  7875  0B4D  1D03               	skipz
  7876  0B4E  2B67               	goto	l10777
  7877                           
  7878                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7879  0B4F  0023               	movlb	3	; select bank3
  7880  0B50  0829               	movf	(_RF_Data^(0+384)+9),w
  7881  0B51  318A  2282  318A   	fcall	_getDimmerLights_PercentToValue
  7882  0B54  0021               	movlb	1	; select bank1
  7883  0B55  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7884  0B56  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7885  0B57  00E1               	movwf	setDimmerIntr_MaxmumValue@value^(0+128)
  7886  0B58  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7887  0B59  319C  24DA  318A   	fcall	_setDimmerIntr_MaxmumValue
  7888                           
  7889                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  7890  0B5C  0020               	movlb	0	; select bank0
  7891  0B5D  01A6               	clrf	setDimmerIntr_Dimming_RF@command
  7892  0B5E  0AA6               	incf	setDimmerIntr_Dimming_RF@command,f
  7893  0B5F  0021               	movlb	1	; select bank1
  7894  0B60  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7895  0B61  319F  2718  318A   	fcall	_setDimmerIntr_Dimming_RF
  7896                           
  7897                           ;RF_Control_B1.c: 419: setTxData();
  7898  0B64  318F  2745         	fcall	_setTxData
  7899                           
  7900                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  7901  0B66  0008               	return
  7902  0B67                     l10777:	
  7903  0B67  0021               	movlb	1	; select bank1
  7904  0B68  08E5               	movf	setRFSW_AdjControl@status^(0+128),f
  7905  0B69  1D03               	skipz
  7906  0B6A  0008               	return
  7907                           
  7908                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  7909  0B6B  0020               	movlb	0	; select bank0
  7910  0B6C  01A8               	clrf	setDimmerLights_DimmingRun@command
  7911  0B6D  0AA8               	incf	setDimmerLights_DimmingRun@command,f
  7912  0B6E  0021               	movlb	1	; select bank1
  7913  0B6F  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7914  0B70  319F  277B  318A   	fcall	_setDimmerLights_DimmingRun
  7915                           
  7916                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7917  0B73  0021               	movlb	1	; select bank1
  7918  0B74  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7919  0B75  3191  21A2  318A   	fcall	_setDimmerLights_SwOn
  7920                           
  7921                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7922  0B78  0021               	movlb	1	; select bank1
  7923  0B79  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7924  0B7A  3193  2312         	fcall	_setDimmerLights_SwOff
  7925  0B7C  0008               	return
  7926  0B7D                     __end_of_setRFSW_AdjControl:	
  7927                           
  7928                           	psect	text31
  7929  1E07                     __ptext31:	
  7930 ;; *************** function _setMemory_Modify *****************
  7931 ;; Defined at:
  7932 ;;		line 1070 in file "../src/MCU_B1.c"
  7933 ;; Parameters:    Size  Location     Type
  7934 ;;  command         1    wreg     unsigned char 
  7935 ;; Auto vars:     Size  Location     Type
  7936 ;;  command         1    7[BANK0 ] unsigned char 
  7937 ;; Return value:  Size  Location     Type
  7938 ;;		None               void
  7939 ;; Registers used:
  7940 ;;		wreg, status,2, status,0
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;Total ram usage:        2 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; Hardware stack levels required when called:    5
  7953 ;; This function calls:
  7954 ;;		Nothing
  7955 ;; This function is called by:
  7956 ;;		_setLog_Code
  7957 ;;		_setRFSW_AdjControl
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961                           
  7962                           ;psect for function _setMemory_Modify
  7963  1E07                     _setMemory_Modify:	
  7964                           
  7965                           ;incstack = 0
  7966                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7967                           ;setMemory_Modify@command stored from wreg
  7968  1E07  0020               	movlb	0	; select bank0
  7969  1E08  00A7               	movwf	setMemory_Modify@command
  7970                           
  7971                           ;MCU_B1.c: 1071: Memory.Modify = command == 1 ? 1 : 0;
  7972  1E09  0827               	movf	setMemory_Modify@command,w
  7973  1E0A  3A01               	xorlw	1
  7974  1E0B  3000               	movlw	0
  7975  1E0C  1903               	skipnz
  7976  1E0D  3001               	movlw	1
  7977  1E0E  00A6               	movwf	??_setMemory_Modify
  7978  1E0F  0023               	movlb	3	; select bank3
  7979  1E10  0862               	movf	(_Memory^(0+384)+36),w
  7980  1E11  0020               	movlb	0	; select bank0
  7981  1E12  0626               	xorwf	??_setMemory_Modify,w
  7982  1E13  39FE               	andlw	-2
  7983  1E14  0626               	xorwf	??_setMemory_Modify,w
  7984  1E15  0023               	movlb	3	; select bank3
  7985  1E16  00E2               	movwf	(_Memory^(0+384)+36)
  7986                           
  7987                           ;MCU_B1.c: 1072: Memory.Time = 0;
  7988  1E17  01E0               	clrf	(_Memory^(0+384)+34)
  7989  1E18  01E1               	clrf	((_Memory+1)^(0+384)+34)
  7990  1E19  0008               	return
  7991  1E1A                     __end_of_setMemory_Modify:	
  7992                           
  7993                           	psect	text32
  7994  1F7B                     __ptext32:	
  7995 ;; *************** function _setDimmerLights_DimmingRun *****************
  7996 ;; Defined at:
  7997 ;;		line 1012 in file "../src/Dimmer_B1.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;  lights          1    wreg     unsigned char 
  8000 ;;  command         1    8[BANK0 ] unsigned char 
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;  lights          1   10[BANK0 ] unsigned char 
  8003 ;; Return value:  Size  Location     Type
  8004 ;;		None               void
  8005 ;; Registers used:
  8006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8012 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;Total ram usage:        3 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    6
  8019 ;; This function calls:
  8020 ;;		_DimmerLights_SelectPointer
  8021 ;; This function is called by:
  8022 ;;		_setRFSW_AdjControl
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026                           
  8027                           ;psect for function _setDimmerLights_DimmingRun
  8028  1F7B                     _setDimmerLights_DimmingRun:	
  8029                           
  8030                           ;incstack = 0
  8031                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8032                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8033  1F7B  0020               	movlb	0	; select bank0
  8034  1F7C  00AA               	movwf	setDimmerLights_DimmingRun@lights
  8035                           
  8036                           ;Dimmer_B1.c: 1013: DimmerLights_SelectPointer(lights);
  8037  1F7D  082A               	movf	setDimmerLights_DimmingRun@lights,w
  8038  1F7E  319C  2437         	fcall	_DimmerLights_SelectPointer
  8039                           
  8040                           ;Dimmer_B1.c: 1014: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8041  1F80  0020               	movlb	0	; select bank0
  8042  1F81  0828               	movf	setDimmerLights_DimmingRun@command,w
  8043  1F82  3A01               	xorlw	1
  8044  1F83  3000               	movlw	0
  8045  1F84  1903               	skipnz
  8046  1F85  3001               	movlw	1
  8047  1F86  00A9               	movwf	??_setDimmerLights_DimmingRun
  8048  1F87  0A64               	incf	_DimmerLights,w
  8049  1F88  0086               	movwf	6
  8050  1F89  3001               	movlw	1	; select bank2/3
  8051  1F8A  0087               	movwf	7
  8052  1F8B  0EA9               	swapf	??_setDimmerLights_DimmingRun,f
  8053  1F8C  0DA9               	rlf	??_setDimmerLights_DimmingRun,f
  8054  1F8D  0DA9               	rlf	??_setDimmerLights_DimmingRun,f
  8055  1F8E  0801               	movf	1,w
  8056  1F8F  0629               	xorwf	??_setDimmerLights_DimmingRun,w
  8057  1F90  39BF               	andlw	-65
  8058  1F91  0629               	xorwf	??_setDimmerLights_DimmingRun,w
  8059  1F92  0081               	movwf	1
  8060  1F93  0008               	return
  8061  1F94                     __end_of_setDimmerLights_DimmingRun:	
  8062                           
  8063                           	psect	text33
  8064  1D77                     __ptext33:	
  8065 ;; *************** function _getRF_KeyStatus *****************
  8066 ;; Defined at:
  8067 ;;		line 166 in file "../src/RF_Control_B1.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  key             1    7[BANK0 ] unsigned char 
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1    wreg      unsigned char 
  8074 ;; Registers used:
  8075 ;;		wreg, status,2
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8083 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8084 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;Total ram usage:        3 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    5
  8088 ;; This function calls:
  8089 ;;		Nothing
  8090 ;; This function is called by:
  8091 ;;		_setRF_Main
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           
  8096                           ;psect for function _getRF_KeyStatus
  8097  1D77                     _getRF_KeyStatus:	
  8098                           
  8099                           ;RF_Control_B1.c: 167: char key = 0;
  8100                           
  8101                           ;incstack = 0
  8102                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8103  1D77  0020               	movlb	0	; select bank0
  8104  1D78  01A7               	clrf	getRF_KeyStatus@key
  8105                           
  8106                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8107  1D79  01A8               	clrf	_getRF_KeyStatus$5240
  8108  1D7A  0AA8               	incf	_getRF_KeyStatus$5240,f
  8109  1D7B  1F0C               	btfss	12,6	;volatile
  8110  1D7C  1A0C               	btfsc	12,4	;volatile
  8111  1D7D  2D82               	goto	l11235
  8112  1D7E  1C0C               	btfss	12,0	;volatile
  8113  1D7F  1B8C               	btfsc	12,7	;volatile
  8114  1D80  2D82               	goto	l11235
  8115  1D81  01A8               	clrf	_getRF_KeyStatus$5240
  8116  1D82                     l11235:	
  8117  1D82  0828               	movf	_getRF_KeyStatus$5240,w
  8118  1D83  00A6               	movwf	??_getRF_KeyStatus
  8119  1D84  0826               	movf	??_getRF_KeyStatus,w
  8120  1D85  00A7               	movwf	getRF_KeyStatus@key
  8121                           
  8122                           ;RF_Control_B1.c: 179: return key;
  8123  1D86  0827               	movf	getRF_KeyStatus@key,w
  8124  1D87  0008               	return
  8125  1D88                     __end_of_getRF_KeyStatus:	
  8126                           
  8127                           	psect	text34
  8128  1D66                     __ptext34:	
  8129 ;; *************** function _getBuz_GO *****************
  8130 ;; Defined at:
  8131 ;;		line 82 in file "../src/Buzzer_B1.c"
  8132 ;; Parameters:    Size  Location     Type
  8133 ;;		None
  8134 ;; Auto vars:     Size  Location     Type
  8135 ;;  i               2   10[BANK0 ] int 
  8136 ;; Return value:  Size  Location     Type
  8137 ;;                  2    6[BANK0 ] int 
  8138 ;; Registers used:
  8139 ;;		wreg, status,2, status,0
  8140 ;; Tracked objects:
  8141 ;;		On entry : 0/0
  8142 ;;		On exit  : 0/0
  8143 ;;		Unchanged: 0/0
  8144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8145 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8149 ;;Total ram usage:        6 bytes
  8150 ;; Hardware stack levels used:    1
  8151 ;; Hardware stack levels required when called:    5
  8152 ;; This function calls:
  8153 ;;		Nothing
  8154 ;; This function is called by:
  8155 ;;		_setRF_Main
  8156 ;; This function uses a non-reentrant model
  8157 ;;
  8158                           
  8159                           
  8160                           ;psect for function _getBuz_GO
  8161  1D66                     _getBuz_GO:	
  8162                           
  8163                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8164                           
  8165                           ;incstack = 0
  8166                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8167  1D66  0021               	movlb	1	; select bank1
  8168  1D67  0C2E               	rrf	_Buz1^(0+128),w
  8169  1D68  3901               	andlw	1
  8170  1D69  0020               	movlb	0	; select bank0
  8171  1D6A  00A8               	movwf	??_getBuz_GO
  8172  1D6B  01A9               	clrf	??_getBuz_GO+1
  8173  1D6C  0828               	movf	??_getBuz_GO,w
  8174  1D6D  00AA               	movwf	getBuz_GO@i
  8175  1D6E  0829               	movf	??_getBuz_GO+1,w
  8176  1D6F  00AB               	movwf	getBuz_GO@i+1
  8177                           
  8178                           ;Buzzer_B1.c: 84: return i;
  8179  1D70  082B               	movf	getBuz_GO@i+1,w
  8180  1D71  01A7               	clrf	?_getBuz_GO+1
  8181  1D72  07A7               	addwf	?_getBuz_GO+1,f
  8182  1D73  082A               	movf	getBuz_GO@i,w
  8183  1D74  01A6               	clrf	?_getBuz_GO
  8184  1D75  07A6               	addwf	?_getBuz_GO,f
  8185  1D76  0008               	return
  8186  1D77                     __end_of_getBuz_GO:	
  8187                           
  8188                           	psect	text35
  8189  1D05                     __ptext35:	
  8190 ;; *************** function _RF_RxDisable *****************
  8191 ;; Defined at:
  8192 ;;		line 154 in file "../src/RF_Control_B1.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;		None
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;		None
  8197 ;; Return value:  Size  Location     Type
  8198 ;;		None               void
  8199 ;; Registers used:
  8200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;Total ram usage:        0 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    7
  8213 ;; This function calls:
  8214 ;;		_CC2500_WriteCommand
  8215 ;; This function is called by:
  8216 ;;		_setRF_Main
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           
  8221                           ;psect for function _RF_RxDisable
  8222  1D05                     _RF_RxDisable:	
  8223                           
  8224                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8225                           
  8226                           ;incstack = 0
  8227                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8228  1D05  0021               	movlb	1	; select bank1
  8229  1D06  18A0               	btfsc	_RF1^(0+128),1
  8230  1D07  2D0A               	goto	l2133
  8231  1D08  1DA0               	btfss	_RF1^(0+128),3
  8232  1D09  0008               	return
  8233  1D0A                     l2133:	
  8234                           
  8235                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8236  1D0A  11A0               	bcf	_RF1^(0+128),3
  8237                           
  8238                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8239  1D0B  10A0               	bcf	_RF1^(0+128),1
  8240                           
  8241                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8242  1D0C  3036               	movlw	54
  8243  1D0D  319F  2762  319D   	fcall	_CC2500_WriteCommand
  8244                           
  8245                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8246  1D10  303A               	movlw	58
  8247  1D11  319F  2762         	fcall	_CC2500_WriteCommand
  8248  1D13  0008               	return
  8249  1D14                     __end_of_RF_RxDisable:	
  8250                           
  8251                           	psect	text36
  8252  16C4                     __ptext36:	
  8253 ;; *************** function _CC2500_TxData *****************
  8254 ;; Defined at:
  8255 ;;		line 32 in file "../src/CC2500_B1.c"
  8256 ;; Parameters:    Size  Location     Type
  8257 ;;		None
  8258 ;; Auto vars:     Size  Location     Type
  8259 ;;  loop_e          1   11[BANK0 ] unsigned char 
  8260 ;; Return value:  Size  Location     Type
  8261 ;;		None               void
  8262 ;; Registers used:
  8263 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;Total ram usage:        2 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; Hardware stack levels required when called:    7
  8276 ;; This function calls:
  8277 ;;		_CC2500_WriteByte
  8278 ;;		_CC2500_WriteCommand
  8279 ;;		_RF_Timeout_Counter
  8280 ;;		_setRF_TimeoutCleared
  8281 ;; This function is called by:
  8282 ;;		_setRF_Main
  8283 ;; This function uses a non-reentrant model
  8284 ;;
  8285                           
  8286                           
  8287                           ;psect for function _CC2500_TxData
  8288  16C4                     _CC2500_TxData:	
  8289                           
  8290                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8291                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8292                           
  8293                           ;incstack = 0
  8294                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8295  16C4  3036               	movlw	54
  8296  16C5  319F  2762  3196   	fcall	_CC2500_WriteCommand
  8297                           
  8298                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8299  16C8  303B               	movlw	59
  8300  16C9  319F  2762  3196   	fcall	_CC2500_WriteCommand
  8301                           
  8302                           ;CC2500_B1.c: 38: RC0 = 0;
  8303  16CC  0020               	movlb	0	; select bank0
  8304  16CD  100E               	bcf	14,0	;volatile
  8305                           
  8306                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8307  16CE  307F               	movlw	127
  8308  16CF  00AA               	movwf	??_CC2500_TxData
  8309  16D0  082A               	movf	??_CC2500_TxData,w
  8310  16D1  00E6               	movwf	_SPI0Buffer
  8311                           
  8312                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8313  16D2  2ED6               	goto	l11031
  8314  16D3                     l11029:	
  8315                           
  8316                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8317  16D3  319E  2668  3196   	fcall	_RF_Timeout_Counter
  8318  16D6                     l11031:	
  8319  16D6  0020               	movlb	0	; select bank0
  8320  16D7  1E8E               	btfss	14,5	;volatile
  8321  16D8  2EDC               	goto	l11035
  8322  16D9  0021               	movlb	1	; select bank1
  8323  16DA  1F21               	btfss	(_RF1^(0+128)+1),6
  8324  16DB  2ED3               	goto	l11029
  8325  16DC                     l11035:	
  8326                           
  8327                           ;CC2500_B1.c: 42: };
  8328                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8329  16DC  319B  23A5  3196   	fcall	_setRF_TimeoutCleared
  8330                           
  8331                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8332  16DF  319E  2640  3196   	fcall	_CC2500_WriteByte
  8333                           
  8334                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8335  16E2  0020               	movlb	0	; select bank0
  8336  16E3  0868               	movf	_Tx_Length,w
  8337  16E4  00AA               	movwf	??_CC2500_TxData
  8338  16E5  082A               	movf	??_CC2500_TxData,w
  8339  16E6  00E6               	movwf	_SPI0Buffer
  8340                           
  8341                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8342  16E7  319E  2640  3196   	fcall	_CC2500_WriteByte
  8343                           
  8344                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8345  16EA  0020               	movlb	0	; select bank0
  8346  16EB  01AB               	clrf	CC2500_TxData@loop_e
  8347  16EC                     l11049:	
  8348  16EC  0868               	movf	_Tx_Length,w
  8349  16ED  022B               	subwf	CC2500_TxData@loop_e,w
  8350  16EE  1803               	btfsc	3,0
  8351  16EF  2F02               	goto	l235
  8352                           
  8353                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8354  16F0  082B               	movf	CC2500_TxData@loop_e,w
  8355  16F1  3EA0               	addlw	_RF_Data& (0+255)
  8356  16F2  0086               	movwf	6
  8357  16F3  3001               	movlw	1	; select bank3/4
  8358  16F4  0087               	movwf	7
  8359  16F5  0801               	movf	1,w
  8360  16F6  00AA               	movwf	??_CC2500_TxData
  8361  16F7  082A               	movf	??_CC2500_TxData,w
  8362  16F8  00E6               	movwf	_SPI0Buffer
  8363                           
  8364                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8365  16F9  319E  2640  3196   	fcall	_CC2500_WriteByte
  8366  16FC  3001               	movlw	1
  8367  16FD  0020               	movlb	0	; select bank0
  8368  16FE  00AA               	movwf	??_CC2500_TxData
  8369  16FF  082A               	movf	??_CC2500_TxData,w
  8370  1700  07AB               	addwf	CC2500_TxData@loop_e,f
  8371  1701  2EEC               	goto	l11049
  8372  1702                     l235:	
  8373                           
  8374                           ;CC2500_B1.c: 51: }
  8375                           ;CC2500_B1.c: 52: RC0 = 1;
  8376  1702  140E               	bsf	14,0	;volatile
  8377                           
  8378                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8379  1703  3035               	movlw	53
  8380  1704  319F  2762  3196   	fcall	_CC2500_WriteCommand
  8381                           
  8382                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8383  1707  2F0B               	goto	l11055
  8384  1708                     l11053:	
  8385                           
  8386                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8387  1708  319E  2668  3196   	fcall	_RF_Timeout_Counter
  8388  170B                     l11055:	
  8389  170B  0020               	movlb	0	; select bank0
  8390  170C  188E               	btfsc	14,1	;volatile
  8391  170D  2F11               	goto	l11059
  8392  170E  0021               	movlb	1	; select bank1
  8393  170F  1F21               	btfss	(_RF1^(0+128)+1),6
  8394  1710  2F08               	goto	l11053
  8395  1711                     l11059:	
  8396                           
  8397                           ;CC2500_B1.c: 56: };
  8398                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8399  1711  319B  23A5  3196   	fcall	_setRF_TimeoutCleared
  8400                           
  8401                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8402  1714  2F18               	goto	l11063
  8403  1715                     l11061:	
  8404                           
  8405                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8406  1715  319E  2668  3196   	fcall	_RF_Timeout_Counter
  8407  1718                     l11063:	
  8408  1718  0020               	movlb	0	; select bank0
  8409  1719  1C8E               	btfss	14,1	;volatile
  8410  171A  2F1E               	goto	l11067
  8411  171B  0021               	movlb	1	; select bank1
  8412  171C  1F21               	btfss	(_RF1^(0+128)+1),6
  8413  171D  2F15               	goto	l11061
  8414  171E                     l11067:	
  8415                           
  8416                           ;CC2500_B1.c: 61: };
  8417                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8418  171E  319B  23A5  3196   	fcall	_setRF_TimeoutCleared
  8419                           
  8420                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8421  1721  3036               	movlw	54
  8422  1722  319F  2762  3196   	fcall	_CC2500_WriteCommand
  8423                           
  8424                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8425  1725  303B               	movlw	59
  8426  1726  319F  2762         	fcall	_CC2500_WriteCommand
  8427                           
  8428                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8429  1728  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8430  1729  0008               	return
  8431  172A                     __end_of_CC2500_TxData:	
  8432                           
  8433                           	psect	text37
  8434  172A                     __ptext37:	
  8435 ;; *************** function _CC2500_RxData *****************
  8436 ;; Defined at:
  8437 ;;		line 73 in file "../src/CC2500_B1.c"
  8438 ;; Parameters:    Size  Location     Type
  8439 ;;		None
  8440 ;; Auto vars:     Size  Location     Type
  8441 ;;  loop_f          1   11[BANK0 ] unsigned char 
  8442 ;; Return value:  Size  Location     Type
  8443 ;;		None               void
  8444 ;; Registers used:
  8445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8446 ;; Tracked objects:
  8447 ;;		On entry : 0/0
  8448 ;;		On exit  : 0/0
  8449 ;;		Unchanged: 0/0
  8450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8455 ;;Total ram usage:        2 bytes
  8456 ;; Hardware stack levels used:    1
  8457 ;; Hardware stack levels required when called:    7
  8458 ;; This function calls:
  8459 ;;		_CC2500_ReadByte
  8460 ;;		_CC2500_ReadStatus
  8461 ;;		_CC2500_WriteByte
  8462 ;;		_CC2500_WriteCommand
  8463 ;;		_RF_Timeout_Counter
  8464 ;;		_setRF_TimeoutCleared
  8465 ;; This function is called by:
  8466 ;;		_setRF_Main
  8467 ;; This function uses a non-reentrant model
  8468 ;;
  8469                           
  8470                           
  8471                           ;psect for function _CC2500_RxData
  8472  172A                     _CC2500_RxData:	
  8473                           
  8474                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8475                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8476                           
  8477                           ;incstack = 0
  8478                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8479  172A  0020               	movlb	0	; select bank0
  8480  172B  188E               	btfsc	14,1	;volatile
  8481  172C  0008               	return
  8482                           
  8483                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8484  172D  303B               	movlw	59
  8485  172E  3191  2103  3197   	fcall	_CC2500_ReadStatus
  8486                           
  8487                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8488  1731  0021               	movlb	1	; select bank1
  8489  1732  0850               	movf	_s_data^(0+128),w
  8490  1733  1903               	btfsc	3,2
  8491  1734  0008               	return
  8492                           
  8493                           ;CC2500_B1.c: 90: RC0 = 0;
  8494  1735  0020               	movlb	0	; select bank0
  8495  1736  100E               	bcf	14,0	;volatile
  8496                           
  8497                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8498  1737  30FF               	movlw	255
  8499  1738  00AA               	movwf	??_CC2500_RxData
  8500  1739  082A               	movf	??_CC2500_RxData,w
  8501  173A  00E6               	movwf	_SPI0Buffer
  8502                           
  8503                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8504  173B  2F3F               	goto	l11087
  8505  173C                     l11085:	
  8506                           
  8507                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8508  173C  319E  2668  3197   	fcall	_RF_Timeout_Counter
  8509  173F                     l11087:	
  8510  173F  0020               	movlb	0	; select bank0
  8511  1740  1E8E               	btfss	14,5	;volatile
  8512  1741  2F45               	goto	l11091
  8513  1742  0021               	movlb	1	; select bank1
  8514  1743  1F21               	btfss	(_RF1^(0+128)+1),6
  8515  1744  2F3C               	goto	l11085
  8516  1745                     l11091:	
  8517                           
  8518                           ;CC2500_B1.c: 95: };
  8519                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8520  1745  319B  23A5  3197   	fcall	_setRF_TimeoutCleared
  8521                           
  8522                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8523  1748  319E  2640  3197   	fcall	_CC2500_WriteByte
  8524                           
  8525                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8526  174B  319E  26E9  3197   	fcall	_CC2500_ReadByte
  8527                           
  8528                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8529  174E  0020               	movlb	0	; select bank0
  8530  174F  0866               	movf	_SPI0Buffer,w
  8531  1750  00AA               	movwf	??_CC2500_RxData
  8532  1751  082A               	movf	??_CC2500_RxData,w
  8533  1752  0021               	movlb	1	; select bank1
  8534  1753  00CC               	movwf	_Rx_Length^(0+128)
  8535                           
  8536                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8537  1754  0020               	movlb	0	; select bank0
  8538  1755  01AB               	clrf	CC2500_RxData@loop_f
  8539  1756                     l11107:	
  8540  1756  0021               	movlb	1	; select bank1
  8541  1757  084C               	movf	_Rx_Length^(0+128),w
  8542  1758  0020               	movlb	0	; select bank0
  8543  1759  022B               	subwf	CC2500_RxData@loop_f,w
  8544  175A  1803               	btfsc	3,0
  8545  175B  2F6E               	goto	l11109
  8546                           
  8547                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8548  175C  319E  26E9  3197   	fcall	_CC2500_ReadByte
  8549                           
  8550                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8551  175F  0020               	movlb	0	; select bank0
  8552  1760  0866               	movf	_SPI0Buffer,w
  8553  1761  00AA               	movwf	??_CC2500_RxData
  8554  1762  082B               	movf	CC2500_RxData@loop_f,w
  8555  1763  3EA0               	addlw	_RF_Data& (0+255)
  8556  1764  0086               	movwf	6
  8557  1765  3001               	movlw	1	; select bank3/4
  8558  1766  0087               	movwf	7
  8559  1767  082A               	movf	??_CC2500_RxData,w
  8560  1768  0081               	movwf	1
  8561  1769  3001               	movlw	1
  8562  176A  00AA               	movwf	??_CC2500_RxData
  8563  176B  082A               	movf	??_CC2500_RxData,w
  8564  176C  07AB               	addwf	CC2500_RxData@loop_f,f
  8565  176D  2F56               	goto	l11107
  8566  176E                     l11109:	
  8567                           
  8568                           ;CC2500_B1.c: 104: }
  8569                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8570  176E  319E  26E9  3197   	fcall	_CC2500_ReadByte
  8571                           
  8572                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8573  1771  0020               	movlb	0	; select bank0
  8574  1772  0866               	movf	_SPI0Buffer,w
  8575  1773  00AA               	movwf	??_CC2500_RxData
  8576  1774  082A               	movf	??_CC2500_RxData,w
  8577  1775  0021               	movlb	1	; select bank1
  8578  1776  00CB               	movwf	_RSSI^(0+128)
  8579                           
  8580                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8581  1777  319E  26E9  3197   	fcall	_CC2500_ReadByte
  8582                           
  8583                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8584  177A  0020               	movlb	0	; select bank0
  8585  177B  0866               	movf	_SPI0Buffer,w
  8586  177C  00AA               	movwf	??_CC2500_RxData
  8587  177D  082A               	movf	??_CC2500_RxData,w
  8588  177E  0021               	movlb	1	; select bank1
  8589  177F  00C7               	movwf	_CRC^(0+128)
  8590                           
  8591                           ;CC2500_B1.c: 109: RC0 = 1;
  8592  1780  0020               	movlb	0	; select bank0
  8593  1781  140E               	bsf	14,0	;volatile
  8594                           
  8595                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8596  1782  0021               	movlb	1	; select bank1
  8597  1783  1FC7               	btfss	_CRC^(0+128),7
  8598  1784  2F87               	goto	l259
  8599                           
  8600                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8601  1785  0020               	movlb	0	; select bank0
  8602  1786  1469               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8603  1787                     l259:	
  8604                           
  8605                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8606  1787  0021               	movlb	1	; select bank1
  8607  1788  11A0               	bcf	_RF1^(0+128),3
  8608                           
  8609                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8610  1789  14A0               	bsf	_RF1^(0+128),1
  8611                           
  8612                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8613  178A  3036               	movlw	54
  8614  178B  319F  2762  3197   	fcall	_CC2500_WriteCommand
  8615                           
  8616                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8617  178E  303A               	movlw	58
  8618  178F  319F  2762         	fcall	_CC2500_WriteCommand
  8619  1791  0021               	movlb	1	; select bank1
  8620  1792  0008               	return
  8621  1793                     __end_of_CC2500_RxData:	
  8622                           
  8623                           	psect	text38
  8624  1103                     __ptext38:	
  8625 ;; *************** function _CC2500_ReadStatus *****************
  8626 ;; Defined at:
  8627 ;;		line 308 in file "../src/CC2500_B1.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;  status_addr     1    wreg     unsigned char 
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;  status_addr     1    9[BANK0 ] unsigned char 
  8632 ;; Return value:  Size  Location     Type
  8633 ;;		None               void
  8634 ;; Registers used:
  8635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;Total ram usage:        2 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; Hardware stack levels required when called:    6
  8648 ;; This function calls:
  8649 ;;		_CC2500_ReadByte
  8650 ;;		_CC2500_WriteByte
  8651 ;;		_RF_Timeout_Counter
  8652 ;;		_setRF_TimeoutCleared
  8653 ;; This function is called by:
  8654 ;;		_CC2500_RxData
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           
  8659                           ;psect for function _CC2500_ReadStatus
  8660  1103                     _CC2500_ReadStatus:	
  8661                           
  8662                           ;incstack = 0
  8663                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8664                           ;CC2500_ReadStatus@status_addr stored from wreg
  8665  1103  0020               	movlb	0	; select bank0
  8666  1104  00A9               	movwf	CC2500_ReadStatus@status_addr
  8667                           
  8668                           ;CC2500_B1.c: 309: RC0 = 0;
  8669  1105  100E               	bcf	14,0	;volatile
  8670                           
  8671                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8672  1106  0829               	movf	CC2500_ReadStatus@status_addr,w
  8673  1107  3EC0               	addlw	192
  8674  1108  00A8               	movwf	??_CC2500_ReadStatus
  8675  1109  0828               	movf	??_CC2500_ReadStatus,w
  8676  110A  00E6               	movwf	_SPI0Buffer
  8677                           
  8678                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8679  110B  290F               	goto	l10787
  8680  110C                     l10785:	
  8681                           
  8682                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8683  110C  319E  2668  3191   	fcall	_RF_Timeout_Counter
  8684  110F                     l10787:	
  8685  110F  0020               	movlb	0	; select bank0
  8686  1110  1E8E               	btfss	14,5	;volatile
  8687  1111  2915               	goto	l10791
  8688  1112  0021               	movlb	1	; select bank1
  8689  1113  1F21               	btfss	(_RF1^(0+128)+1),6
  8690  1114  290C               	goto	l10785
  8691  1115                     l10791:	
  8692                           
  8693                           ;CC2500_B1.c: 314: };
  8694                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8695  1115  319B  23A5  3191   	fcall	_setRF_TimeoutCleared
  8696                           
  8697                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8698  1118  319E  2640  3191   	fcall	_CC2500_WriteByte
  8699                           
  8700                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8701  111B  319E  26E9         	fcall	_CC2500_ReadByte
  8702                           
  8703                           ;CC2500_B1.c: 319: RC0 = 1;
  8704  111D  0020               	movlb	0	; select bank0
  8705  111E  140E               	bsf	14,0	;volatile
  8706                           
  8707                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8708  111F  0866               	movf	_SPI0Buffer,w
  8709  1120  00A8               	movwf	??_CC2500_ReadStatus
  8710  1121  0828               	movf	??_CC2500_ReadStatus,w
  8711  1122  0021               	movlb	1	; select bank1
  8712  1123  00D0               	movwf	_s_data^(0+128)
  8713  1124  0008               	return
  8714  1125                     __end_of_CC2500_ReadStatus:	
  8715                           
  8716                           	psect	text39
  8717  1EE9                     __ptext39:	
  8718 ;; *************** function _CC2500_ReadByte *****************
  8719 ;; Defined at:
  8720 ;;		line 242 in file "../src/CC2500_B1.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;		None
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;  loop_b          1    7[BANK0 ] unsigned char 
  8725 ;; Return value:  Size  Location     Type
  8726 ;;		None               void
  8727 ;; Registers used:
  8728 ;;		wreg, status,2, status,0
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;Total ram usage:        2 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    5
  8741 ;; This function calls:
  8742 ;;		Nothing
  8743 ;; This function is called by:
  8744 ;;		_CC2500_RxData
  8745 ;;		_CC2500_ReadStatus
  8746 ;;		_CC2500_ReadREG
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           
  8751                           ;psect for function _CC2500_ReadByte
  8752  1EE9                     _CC2500_ReadByte:	
  8753                           
  8754                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8755                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8756                           
  8757                           ;incstack = 0
  8758                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8759  1EE9  0020               	movlb	0	; select bank0
  8760  1EEA  01A7               	clrf	CC2500_ReadByte@loop_b
  8761  1EEB                     L2:	
  8762  1EEB  3008               	movlw	8
  8763  1EEC  0227               	subwf	CC2500_ReadByte@loop_b,w
  8764  1EED  1803               	btfsc	3,0
  8765  1EEE  0008               	return
  8766                           
  8767                           ;CC2500_B1.c: 245: RC3 = 1;
  8768  1EEF  158E               	bsf	14,3	;volatile
  8769                           
  8770                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8771  1EF0  1003               	clrc
  8772  1EF1  0DE6               	rlf	_SPI0Buffer,f
  8773                           
  8774                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8775  1EF2  1E8E               	btfss	14,5	;volatile
  8776  1EF3  2EF6               	goto	l10681
  8777                           
  8778                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8779  1EF4  1466               	bsf	_SPI0Buffer,0
  8780  1EF5  2EFA               	goto	l10683
  8781  1EF6                     l10681:	
  8782                           
  8783                           ;CC2500_B1.c: 249: else
  8784                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8785  1EF6  30FE               	movlw	254
  8786  1EF7  00A6               	movwf	??_CC2500_ReadByte
  8787  1EF8  0826               	movf	??_CC2500_ReadByte,w
  8788  1EF9  05E6               	andwf	_SPI0Buffer,f
  8789  1EFA                     l10683:	
  8790                           
  8791                           ;CC2500_B1.c: 251: RC3 = 0;
  8792  1EFA  118E               	bcf	14,3	;volatile
  8793  1EFB  3001               	movlw	1
  8794  1EFC  00A6               	movwf	??_CC2500_ReadByte
  8795  1EFD  0826               	movf	??_CC2500_ReadByte,w
  8796  1EFE  07A7               	addwf	CC2500_ReadByte@loop_b,f
  8797  1EFF  2EEB               	goto	L2
  8798  1F00                     __end_of_CC2500_ReadByte:	
  8799                           
  8800                           	psect	text40
  8801  1E7D                     __ptext40:	
  8802 ;; *************** function _CC2500_PowerOnInitial *****************
  8803 ;; Defined at:
  8804 ;;		line 126 in file "../src/CC2500_B1.c"
  8805 ;; Parameters:    Size  Location     Type
  8806 ;;		None
  8807 ;; Auto vars:     Size  Location     Type
  8808 ;;		None
  8809 ;; Return value:  Size  Location     Type
  8810 ;;		None               void
  8811 ;; Registers used:
  8812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8813 ;; Tracked objects:
  8814 ;;		On entry : 0/0
  8815 ;;		On exit  : 0/0
  8816 ;;		Unchanged: 0/0
  8817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;Total ram usage:        0 bytes
  8823 ;; Hardware stack levels used:    1
  8824 ;; Hardware stack levels required when called:    8
  8825 ;; This function calls:
  8826 ;;		_CC2500_ClearRXFIFO
  8827 ;;		_CC2500_ClearTXFIFO
  8828 ;;		_CC2500_FrequencyCabr
  8829 ;;		_CC2500_InitPATable
  8830 ;;		_CC2500_InitSetREG
  8831 ;;		_CC2500_PowerRST
  8832 ;;		_CC2500_SIDLEMode
  8833 ;; This function is called by:
  8834 ;;		_main
  8835 ;;		_setRF_Main
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           
  8840                           ;psect for function _CC2500_PowerOnInitial
  8841  1E7D                     _CC2500_PowerOnInitial:	
  8842                           
  8843                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8844                           
  8845                           ;incstack = 0
  8846                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8847  1E7D  3193  23C8  319E   	fcall	_CC2500_PowerRST
  8848                           
  8849                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8850  1E80  3187  27D6  319E   	fcall	_CC2500_InitSetREG
  8851                           
  8852                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8853  1E83  3190  203F  319E   	fcall	_CC2500_InitPATable
  8854                           
  8855                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8856  1E86  319B  23AD  319E   	fcall	_CC2500_ClearTXFIFO
  8857                           
  8858                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8859  1E89  319B  23A9  319E   	fcall	_CC2500_ClearRXFIFO
  8860                           
  8861                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8862  1E8C  319C  24B4  319E   	fcall	_CC2500_FrequencyCabr
  8863                           
  8864                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8865  1E8F  319B  23B1         	fcall	_CC2500_SIDLEMode
  8866  1E91  0008               	return
  8867  1E92                     __end_of_CC2500_PowerOnInitial:	
  8868                           
  8869                           	psect	text41
  8870  1BB1                     __ptext41:	
  8871 ;; *************** function _CC2500_SIDLEMode *****************
  8872 ;; Defined at:
  8873 ;;		line 216 in file "../src/CC2500_B1.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;		None               void
  8880 ;; Registers used:
  8881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;Total ram usage:        0 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    7
  8894 ;; This function calls:
  8895 ;;		_CC2500_WriteCommand
  8896 ;; This function is called by:
  8897 ;;		_CC2500_PowerOnInitial
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           
  8902                           ;psect for function _CC2500_SIDLEMode
  8903  1BB1                     _CC2500_SIDLEMode:	
  8904                           
  8905                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8906                           
  8907                           ;incstack = 0
  8908                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8909  1BB1  3036               	movlw	54
  8910  1BB2  319F  2762         	fcall	_CC2500_WriteCommand
  8911  1BB4  0008               	return
  8912  1BB5                     __end_of_CC2500_SIDLEMode:	
  8913                           
  8914                           	psect	text42
  8915  13C8                     __ptext42:	
  8916 ;; *************** function _CC2500_PowerRST *****************
  8917 ;; Defined at:
  8918 ;;		line 139 in file "../src/CC2500_B1.c"
  8919 ;; Parameters:    Size  Location     Type
  8920 ;;		None
  8921 ;; Auto vars:     Size  Location     Type
  8922 ;;		None
  8923 ;; Return value:  Size  Location     Type
  8924 ;;		None               void
  8925 ;; Registers used:
  8926 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8927 ;; Tracked objects:
  8928 ;;		On entry : 0/0
  8929 ;;		On exit  : 0/0
  8930 ;;		Unchanged: 0/0
  8931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8935 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8936 ;;Total ram usage:        1 bytes
  8937 ;; Hardware stack levels used:    1
  8938 ;; Hardware stack levels required when called:    6
  8939 ;; This function calls:
  8940 ;;		_CC2500_WriteByte
  8941 ;;		_DelayTime_1us
  8942 ;;		_RF_Timeout_Counter
  8943 ;;		_setRF_TimeoutCleared
  8944 ;; This function is called by:
  8945 ;;		_CC2500_PowerOnInitial
  8946 ;; This function uses a non-reentrant model
  8947 ;;
  8948                           
  8949                           
  8950                           ;psect for function _CC2500_PowerRST
  8951  13C8                     _CC2500_PowerRST:	
  8952                           
  8953                           ;CC2500_B1.c: 140: RC3 = 0;
  8954                           
  8955                           ;incstack = 0
  8956                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8957  13C8  0020               	movlb	0	; select bank0
  8958  13C9  118E               	bcf	14,3	;volatile
  8959                           
  8960                           ;CC2500_B1.c: 141: RC4 = 0;
  8961  13CA  120E               	bcf	14,4	;volatile
  8962                           
  8963                           ;CC2500_B1.c: 142: RC0 = 1;
  8964  13CB  140E               	bsf	14,0	;volatile
  8965                           
  8966                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8967  13CC  300A               	movlw	10
  8968  13CD  00A6               	movwf	DelayTime_1us@count
  8969  13CE  3000               	movlw	0
  8970  13CF  00A7               	movwf	DelayTime_1us@count+1
  8971  13D0  3191  2125  3193   	fcall	_DelayTime_1us
  8972                           
  8973                           ;CC2500_B1.c: 144: RC0 = 0;
  8974  13D3  0020               	movlb	0	; select bank0
  8975  13D4  100E               	bcf	14,0	;volatile
  8976                           
  8977                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8978  13D5  300A               	movlw	10
  8979  13D6  00A6               	movwf	DelayTime_1us@count
  8980  13D7  3000               	movlw	0
  8981  13D8  00A7               	movwf	DelayTime_1us@count+1
  8982  13D9  3191  2125  3193   	fcall	_DelayTime_1us
  8983                           
  8984                           ;CC2500_B1.c: 146: RC0 = 1;
  8985  13DC  0020               	movlb	0	; select bank0
  8986  13DD  140E               	bsf	14,0	;volatile
  8987                           
  8988                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8989  13DE  3028               	movlw	40
  8990  13DF  00A6               	movwf	DelayTime_1us@count
  8991  13E0  3000               	movlw	0
  8992  13E1  00A7               	movwf	DelayTime_1us@count+1
  8993  13E2  3191  2125  3193   	fcall	_DelayTime_1us
  8994                           
  8995                           ;CC2500_B1.c: 148: RC0 = 0;
  8996  13E5  0020               	movlb	0	; select bank0
  8997  13E6  100E               	bcf	14,0	;volatile
  8998                           
  8999                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9000  13E7  3030               	movlw	48
  9001  13E8  00AC               	movwf	??_CC2500_PowerRST
  9002  13E9  082C               	movf	??_CC2500_PowerRST,w
  9003  13EA  00E6               	movwf	_SPI0Buffer
  9004                           
  9005                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9006  13EB  2BEF               	goto	l10815
  9007  13EC                     l10813:	
  9008                           
  9009                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9010  13EC  319E  2668  3193   	fcall	_RF_Timeout_Counter
  9011  13EF                     l10815:	
  9012  13EF  0020               	movlb	0	; select bank0
  9013  13F0  1E8E               	btfss	14,5	;volatile
  9014  13F1  2BF5               	goto	l10819
  9015  13F2  0021               	movlb	1	; select bank1
  9016  13F3  1F21               	btfss	(_RF1^(0+128)+1),6
  9017  13F4  2BEC               	goto	l10813
  9018  13F5                     l10819:	
  9019                           
  9020                           ;CC2500_B1.c: 152: };
  9021                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9022  13F5  319B  23A5  3193   	fcall	_setRF_TimeoutCleared
  9023                           
  9024                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9025  13F8  319E  2640  3193   	fcall	_CC2500_WriteByte
  9026                           
  9027                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9028  13FB  2BFF               	goto	l10825
  9029  13FC                     l10823:	
  9030                           
  9031                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9032  13FC  319E  2668  3193   	fcall	_RF_Timeout_Counter
  9033  13FF                     l10825:	
  9034  13FF  0020               	movlb	0	; select bank0
  9035  1400  1E8E               	btfss	14,5	;volatile
  9036  1401  2C05               	goto	l10829
  9037  1402  0021               	movlb	1	; select bank1
  9038  1403  1F21               	btfss	(_RF1^(0+128)+1),6
  9039  1404  2BFC               	goto	l10823
  9040  1405                     l10829:	
  9041                           
  9042                           ;CC2500_B1.c: 157: };
  9043                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9044  1405  319B  23A5         	fcall	_setRF_TimeoutCleared
  9045                           
  9046                           ;CC2500_B1.c: 159: RC4 = 0;
  9047  1407  0020               	movlb	0	; select bank0
  9048  1408  120E               	bcf	14,4	;volatile
  9049                           
  9050                           ;CC2500_B1.c: 160: RC0 = 1;
  9051  1409  140E               	bsf	14,0	;volatile
  9052  140A  0008               	return
  9053  140B                     __end_of_CC2500_PowerRST:	
  9054                           
  9055                           	psect	text43
  9056  07D6                     __ptext43:	
  9057 ;; *************** function _CC2500_InitSetREG *****************
  9058 ;; Defined at:
  9059 ;;		line 166 in file "../src/CC2500_B1.c"
  9060 ;; Parameters:    Size  Location     Type
  9061 ;;		None
  9062 ;; Auto vars:     Size  Location     Type
  9063 ;;  loop_c          1   14[BANK0 ] unsigned char 
  9064 ;;  temp2           1   13[BANK0 ] unsigned char 
  9065 ;;  temp1           1   12[BANK0 ] unsigned char 
  9066 ;; Return value:  Size  Location     Type
  9067 ;;		None               void
  9068 ;; Registers used:
  9069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9070 ;; Tracked objects:
  9071 ;;		On entry : 0/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;Total ram usage:        4 bytes
  9080 ;; Hardware stack levels used:    1
  9081 ;; Hardware stack levels required when called:    7
  9082 ;; This function calls:
  9083 ;;		_CC2500_WriteREG
  9084 ;; This function is called by:
  9085 ;;		_CC2500_PowerOnInitial
  9086 ;; This function uses a non-reentrant model
  9087 ;;
  9088                           
  9089                           
  9090                           ;psect for function _CC2500_InitSetREG
  9091  07D6                     _CC2500_InitSetREG:	
  9092                           
  9093                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9094                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9095                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9096                           
  9097                           ;incstack = 0
  9098                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9099  07D6  0020               	movlb	0	; select bank0
  9100  07D7  01AE               	clrf	CC2500_InitSetREG@loop_c
  9101  07D8                     L3:	
  9102  07D8  302F               	movlw	47
  9103  07D9  022E               	subwf	CC2500_InitSetREG@loop_c,w
  9104  07DA  1803               	btfsc	3,0
  9105  07DB  0008               	return
  9106                           
  9107                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9108  07DC  082E               	movf	CC2500_InitSetREG@loop_c,w
  9109  07DD  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9110  07DE  0084               	movwf	4
  9111  07DF  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9112  07E0  1803               	skipnc
  9113  07E1  3E01               	addlw	1
  9114  07E2  0085               	movwf	5
  9115  07E3  0800               	movf	0,w	;code access
  9116  07E4  00AB               	movwf	??_CC2500_InitSetREG
  9117  07E5  082B               	movf	??_CC2500_InitSetREG,w
  9118  07E6  00AC               	movwf	CC2500_InitSetREG@temp1
  9119                           
  9120                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9121  07E7  082E               	movf	CC2500_InitSetREG@loop_c,w
  9122  07E8  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9123  07E9  0084               	movwf	4
  9124  07EA  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9125  07EB  1803               	skipnc
  9126  07EC  3E01               	addlw	1
  9127  07ED  0085               	movwf	5
  9128  07EE  0800               	movf	0,w	;code access
  9129  07EF  00AB               	movwf	??_CC2500_InitSetREG
  9130  07F0  082B               	movf	??_CC2500_InitSetREG,w
  9131  07F1  00AD               	movwf	CC2500_InitSetREG@temp2
  9132                           
  9133                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9134  07F2  082D               	movf	CC2500_InitSetREG@temp2,w
  9135  07F3  00AB               	movwf	??_CC2500_InitSetREG
  9136  07F4  082B               	movf	??_CC2500_InitSetREG,w
  9137  07F5  00A8               	movwf	CC2500_WriteREG@value
  9138  07F6  082C               	movf	CC2500_InitSetREG@temp1,w
  9139  07F7  3190  209F  3187   	fcall	_CC2500_WriteREG
  9140  07FA  3001               	movlw	1
  9141  07FB  0020               	movlb	0	; select bank0
  9142  07FC  00AB               	movwf	??_CC2500_InitSetREG
  9143  07FD  082B               	movf	??_CC2500_InitSetREG,w
  9144  07FE  07AE               	addwf	CC2500_InitSetREG@loop_c,f
  9145  07FF  2FD8               	goto	L3
  9146  0800                     __end_of_CC2500_InitSetREG:	
  9147                           
  9148                           	psect	text44
  9149  103F                     __ptext44:	
  9150 ;; *************** function _CC2500_InitPATable *****************
  9151 ;; Defined at:
  9152 ;;		line 181 in file "../src/CC2500_B1.c"
  9153 ;; Parameters:    Size  Location     Type
  9154 ;;		None
  9155 ;; Auto vars:     Size  Location     Type
  9156 ;;  loop_d          1   13[BANK0 ] unsigned char 
  9157 ;;  temp            1   12[BANK0 ] unsigned char 
  9158 ;; Return value:  Size  Location     Type
  9159 ;;		None               void
  9160 ;; Registers used:
  9161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9162 ;; Tracked objects:
  9163 ;;		On entry : 0/0
  9164 ;;		On exit  : 0/0
  9165 ;;		Unchanged: 0/0
  9166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;Total ram usage:        3 bytes
  9172 ;; Hardware stack levels used:    1
  9173 ;; Hardware stack levels required when called:    7
  9174 ;; This function calls:
  9175 ;;		_CC2500_WriteREG
  9176 ;; This function is called by:
  9177 ;;		_CC2500_PowerOnInitial
  9178 ;; This function uses a non-reentrant model
  9179 ;;
  9180                           
  9181                           
  9182                           ;psect for function _CC2500_InitPATable
  9183  103F                     _CC2500_InitPATable:	
  9184                           
  9185                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9186                           ;CC2500_B1.c: 183: unsigned char temp;
  9187                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9188                           
  9189                           ;incstack = 0
  9190                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9191  103F  0020               	movlb	0	; select bank0
  9192  1040  01AD               	clrf	CC2500_InitPATable@loop_d
  9193  1041                     L4:	
  9194  1041  3008               	movlw	8
  9195  1042  022D               	subwf	CC2500_InitPATable@loop_d,w
  9196  1043  1803               	btfsc	3,0
  9197  1044  0008               	return
  9198                           
  9199                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9200  1045  082D               	movf	CC2500_InitPATable@loop_d,w
  9201  1046  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9202  1047  0084               	movwf	4
  9203  1048  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9204  1049  1803               	skipnc
  9205  104A  3E01               	addlw	1
  9206  104B  0085               	movwf	5
  9207  104C  0800               	movf	0,w	;code access
  9208  104D  00AB               	movwf	??_CC2500_InitPATable
  9209  104E  082B               	movf	??_CC2500_InitPATable,w
  9210  104F  00AC               	movwf	CC2500_InitPATable@temp
  9211                           
  9212                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9213  1050  082C               	movf	CC2500_InitPATable@temp,w
  9214  1051  00AB               	movwf	??_CC2500_InitPATable
  9215  1052  082B               	movf	??_CC2500_InitPATable,w
  9216  1053  00A8               	movwf	CC2500_WriteREG@value
  9217  1054  303E               	movlw	62
  9218  1055  3190  209F  3190   	fcall	_CC2500_WriteREG
  9219  1058  3001               	movlw	1
  9220  1059  0020               	movlb	0	; select bank0
  9221  105A  00AB               	movwf	??_CC2500_InitPATable
  9222  105B  082B               	movf	??_CC2500_InitPATable,w
  9223  105C  07AD               	addwf	CC2500_InitPATable@loop_d,f
  9224  105D  2841               	goto	L4
  9225  105E                     __end_of_CC2500_InitPATable:	
  9226                           
  9227                           	psect	text45
  9228  109F                     __ptext45:	
  9229 ;; *************** function _CC2500_WriteREG *****************
  9230 ;; Defined at:
  9231 ;;		line 258 in file "../src/CC2500_B1.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;  w_addr          1    wreg     unsigned char 
  9234 ;;  value           1    8[BANK0 ] unsigned char 
  9235 ;; Auto vars:     Size  Location     Type
  9236 ;;  w_addr          1   10[BANK0 ] unsigned char 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;		None               void
  9239 ;; Registers used:
  9240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/0
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9246 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;Total ram usage:        3 bytes
  9251 ;; Hardware stack levels used:    1
  9252 ;; Hardware stack levels required when called:    6
  9253 ;; This function calls:
  9254 ;;		_CC2500_WriteByte
  9255 ;;		_RF_Timeout_Counter
  9256 ;;		_setRF_TimeoutCleared
  9257 ;; This function is called by:
  9258 ;;		_CC2500_InitSetREG
  9259 ;;		_CC2500_InitPATable
  9260 ;; This function uses a non-reentrant model
  9261 ;;
  9262                           
  9263                           
  9264                           ;psect for function _CC2500_WriteREG
  9265  109F                     _CC2500_WriteREG:	
  9266                           
  9267                           ;incstack = 0
  9268                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9269                           ;CC2500_WriteREG@w_addr stored from wreg
  9270  109F  0020               	movlb	0	; select bank0
  9271  10A0  00AA               	movwf	CC2500_WriteREG@w_addr
  9272                           
  9273                           ;CC2500_B1.c: 259: RC0 = 0;
  9274  10A1  100E               	bcf	14,0	;volatile
  9275                           
  9276                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9277  10A2  082A               	movf	CC2500_WriteREG@w_addr,w
  9278  10A3  00A9               	movwf	??_CC2500_WriteREG
  9279  10A4  0829               	movf	??_CC2500_WriteREG,w
  9280  10A5  00E6               	movwf	_SPI0Buffer
  9281                           
  9282                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9283  10A6  28AA               	goto	l10705
  9284  10A7                     l10703:	
  9285                           
  9286                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9287  10A7  319E  2668  3190   	fcall	_RF_Timeout_Counter
  9288  10AA                     l10705:	
  9289  10AA  0020               	movlb	0	; select bank0
  9290  10AB  1E8E               	btfss	14,5	;volatile
  9291  10AC  28B0               	goto	l10709
  9292  10AD  0021               	movlb	1	; select bank1
  9293  10AE  1F21               	btfss	(_RF1^(0+128)+1),6
  9294  10AF  28A7               	goto	l10703
  9295  10B0                     l10709:	
  9296                           
  9297                           ;CC2500_B1.c: 263: };
  9298                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9299  10B0  319B  23A5  3190   	fcall	_setRF_TimeoutCleared
  9300                           
  9301                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9302  10B3  319E  2640  3190   	fcall	_CC2500_WriteByte
  9303                           
  9304                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9305  10B6  0020               	movlb	0	; select bank0
  9306  10B7  0828               	movf	CC2500_WriteREG@value,w
  9307  10B8  00A9               	movwf	??_CC2500_WriteREG
  9308  10B9  0829               	movf	??_CC2500_WriteREG,w
  9309  10BA  00E6               	movwf	_SPI0Buffer
  9310                           
  9311                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9312  10BB  319E  2640         	fcall	_CC2500_WriteByte
  9313                           
  9314                           ;CC2500_B1.c: 269: RC0 = 1;
  9315  10BD  0020               	movlb	0	; select bank0
  9316  10BE  140E               	bsf	14,0	;volatile
  9317  10BF  0008               	return
  9318  10C0                     __end_of_CC2500_WriteREG:	
  9319                           
  9320                           	psect	text46
  9321  1CB4                     __ptext46:	
  9322 ;; *************** function _CC2500_FrequencyCabr *****************
  9323 ;; Defined at:
  9324 ;;		line 208 in file "../src/CC2500_B1.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;		None
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;		None
  9329 ;; Return value:  Size  Location     Type
  9330 ;;		None               void
  9331 ;; Registers used:
  9332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;Total ram usage:        0 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; Hardware stack levels required when called:    7
  9345 ;; This function calls:
  9346 ;;		_CC2500_WriteCommand
  9347 ;;		_DelayTime_1us
  9348 ;; This function is called by:
  9349 ;;		_CC2500_PowerOnInitial
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function _CC2500_FrequencyCabr
  9355  1CB4                     _CC2500_FrequencyCabr:	
  9356                           
  9357                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9358                           
  9359                           ;incstack = 0
  9360                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9361  1CB4  3033               	movlw	51
  9362  1CB5  319F  2762  319C   	fcall	_CC2500_WriteCommand
  9363                           
  9364                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9365  1CB8  30E8               	movlw	232
  9366  1CB9  0020               	movlb	0	; select bank0
  9367  1CBA  00A6               	movwf	DelayTime_1us@count
  9368  1CBB  3003               	movlw	3
  9369  1CBC  00A7               	movwf	DelayTime_1us@count+1
  9370  1CBD  3191  2125         	fcall	_DelayTime_1us
  9371  1CBF  0008               	return
  9372  1CC0                     __end_of_CC2500_FrequencyCabr:	
  9373                           
  9374                           	psect	text47
  9375  1125                     __ptext47:	
  9376 ;; *************** function _DelayTime_1us *****************
  9377 ;; Defined at:
  9378 ;;		line 327 in file "../src/CC2500_B1.c"
  9379 ;; Parameters:    Size  Location     Type
  9380 ;;  count           2    6[BANK0 ] int 
  9381 ;; Auto vars:     Size  Location     Type
  9382 ;;  j               2   10[BANK0 ] unsigned int 
  9383 ;;  i               2    8[BANK0 ] unsigned int 
  9384 ;; Return value:  Size  Location     Type
  9385 ;;		None               void
  9386 ;; Registers used:
  9387 ;;		wreg, status,2
  9388 ;; Tracked objects:
  9389 ;;		On entry : 0/0
  9390 ;;		On exit  : 0/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9393 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9396 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9397 ;;Total ram usage:        6 bytes
  9398 ;; Hardware stack levels used:    1
  9399 ;; Hardware stack levels required when called:    5
  9400 ;; This function calls:
  9401 ;;		Nothing
  9402 ;; This function is called by:
  9403 ;;		_CC2500_PowerRST
  9404 ;;		_CC2500_FrequencyCabr
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           
  9409                           ;psect for function _DelayTime_1us
  9410  1125                     _DelayTime_1us:	
  9411                           
  9412                           ;CC2500_B1.c: 328: unsigned int i, j;
  9413                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9414                           
  9415                           ;incstack = 0
  9416                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9417  1125  3001               	movlw	1
  9418  1126  0020               	movlb	0	; select bank0
  9419  1127  00A8               	movwf	DelayTime_1us@i
  9420  1128  3000               	movlw	0
  9421  1129  00A9               	movwf	DelayTime_1us@i+1
  9422  112A                     l347:	
  9423  112A  0827               	movf	DelayTime_1us@count+1,w
  9424  112B  0229               	subwf	DelayTime_1us@i+1,w
  9425  112C  1D03               	skipz
  9426  112D  2930               	goto	u12685
  9427  112E  0826               	movf	DelayTime_1us@count,w
  9428  112F  0228               	subwf	DelayTime_1us@i,w
  9429  1130                     u12685:	
  9430  1130  1803               	btfsc	3,0
  9431  1131  0008               	return
  9432                           
  9433                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9434  1132  01AA               	clrf	DelayTime_1us@j
  9435  1133  01AB               	clrf	DelayTime_1us@j+1
  9436  1134  3000               	movlw	0
  9437  1135  022B               	subwf	DelayTime_1us@j+1,w
  9438  1136  3002               	movlw	2
  9439  1137  1903               	skipnz
  9440  1138  022A               	subwf	DelayTime_1us@j,w
  9441  1139  1803               	btfsc	3,0
  9442  113A  2946               	goto	l10697
  9443  113B                     l10695:	
  9444  113B  3001               	movlw	1
  9445  113C  07AA               	addwf	DelayTime_1us@j,f
  9446  113D  3000               	movlw	0
  9447  113E  3DAB               	addwfc	DelayTime_1us@j+1,f
  9448  113F  3000               	movlw	0
  9449  1140  022B               	subwf	DelayTime_1us@j+1,w
  9450  1141  3002               	movlw	2
  9451  1142  1903               	skipnz
  9452  1143  022A               	subwf	DelayTime_1us@j,w
  9453  1144  1C03               	skipc
  9454  1145  293B               	goto	l10695
  9455  1146                     l10697:	
  9456  1146  3001               	movlw	1
  9457  1147  07A8               	addwf	DelayTime_1us@i,f
  9458  1148  3000               	movlw	0
  9459  1149  3DA9               	addwfc	DelayTime_1us@i+1,f
  9460  114A  292A               	goto	l347
  9461  114B                     __end_of_DelayTime_1us:	
  9462                           
  9463                           	psect	text48
  9464  1BAD                     __ptext48:	
  9465 ;; *************** function _CC2500_ClearTXFIFO *****************
  9466 ;; Defined at:
  9467 ;;		line 194 in file "../src/CC2500_B1.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;		None
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;		None
  9472 ;; Return value:  Size  Location     Type
  9473 ;;		None               void
  9474 ;; Registers used:
  9475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;Total ram usage:        0 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    7
  9488 ;; This function calls:
  9489 ;;		_CC2500_WriteCommand
  9490 ;; This function is called by:
  9491 ;;		_CC2500_PowerOnInitial
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           
  9496                           ;psect for function _CC2500_ClearTXFIFO
  9497  1BAD                     _CC2500_ClearTXFIFO:	
  9498                           
  9499                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9500                           
  9501                           ;incstack = 0
  9502                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9503  1BAD  303B               	movlw	59
  9504  1BAE  319F  2762         	fcall	_CC2500_WriteCommand
  9505  1BB0  0008               	return
  9506  1BB1                     __end_of_CC2500_ClearTXFIFO:	
  9507                           
  9508                           	psect	text49
  9509  1BA9                     __ptext49:	
  9510 ;; *************** function _CC2500_ClearRXFIFO *****************
  9511 ;; Defined at:
  9512 ;;		line 201 in file "../src/CC2500_B1.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;		None
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;		None
  9517 ;; Return value:  Size  Location     Type
  9518 ;;		None               void
  9519 ;; Registers used:
  9520 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;Total ram usage:        0 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; Hardware stack levels required when called:    7
  9533 ;; This function calls:
  9534 ;;		_CC2500_WriteCommand
  9535 ;; This function is called by:
  9536 ;;		_CC2500_PowerOnInitial
  9537 ;; This function uses a non-reentrant model
  9538 ;;
  9539                           
  9540                           
  9541                           ;psect for function _CC2500_ClearRXFIFO
  9542  1BA9                     _CC2500_ClearRXFIFO:	
  9543                           
  9544                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9545                           
  9546                           ;incstack = 0
  9547                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9548  1BA9  303A               	movlw	58
  9549  1BAA  319F  2762         	fcall	_CC2500_WriteCommand
  9550  1BAC  0008               	return
  9551  1BAD                     __end_of_CC2500_ClearRXFIFO:	
  9552                           
  9553                           	psect	text50
  9554  1F62                     __ptext50:	
  9555 ;; *************** function _CC2500_WriteCommand *****************
  9556 ;; Defined at:
  9557 ;;		line 292 in file "../src/CC2500_B1.c"
  9558 ;; Parameters:    Size  Location     Type
  9559 ;;  command         1    wreg     unsigned char 
  9560 ;; Auto vars:     Size  Location     Type
  9561 ;;  command         1    9[BANK0 ] unsigned char 
  9562 ;; Return value:  Size  Location     Type
  9563 ;;		None               void
  9564 ;; Registers used:
  9565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9566 ;; Tracked objects:
  9567 ;;		On entry : 0/0
  9568 ;;		On exit  : 0/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;Total ram usage:        2 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:    6
  9578 ;; This function calls:
  9579 ;;		_CC2500_WriteByte
  9580 ;;		_RF_Timeout_Counter
  9581 ;;		_setRF_TimeoutCleared
  9582 ;; This function is called by:
  9583 ;;		_CC2500_TxData
  9584 ;;		_CC2500_RxData
  9585 ;;		_CC2500_ClearTXFIFO
  9586 ;;		_CC2500_ClearRXFIFO
  9587 ;;		_CC2500_FrequencyCabr
  9588 ;;		_CC2500_SIDLEMode
  9589 ;;		_setRF_Main
  9590 ;;		_RF_RxDisable
  9591 ;; This function uses a non-reentrant model
  9592 ;;
  9593                           
  9594                           
  9595                           ;psect for function _CC2500_WriteCommand
  9596  1F62                     _CC2500_WriteCommand:	
  9597                           
  9598                           ;incstack = 0
  9599                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9600                           ;CC2500_WriteCommand@command stored from wreg
  9601  1F62  0020               	movlb	0	; select bank0
  9602  1F63  00A9               	movwf	CC2500_WriteCommand@command
  9603                           
  9604                           ;CC2500_B1.c: 293: RC0 = 0;
  9605  1F64  100E               	bcf	14,0	;volatile
  9606                           
  9607                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9608  1F65  0829               	movf	CC2500_WriteCommand@command,w
  9609  1F66  00A8               	movwf	??_CC2500_WriteCommand
  9610  1F67  0828               	movf	??_CC2500_WriteCommand,w
  9611  1F68  00E6               	movwf	_SPI0Buffer
  9612                           
  9613                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9614  1F69  2F6D               	goto	l10659
  9615  1F6A                     l10657:	
  9616                           
  9617                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9618  1F6A  319E  2668  319F   	fcall	_RF_Timeout_Counter
  9619  1F6D                     l10659:	
  9620  1F6D  0020               	movlb	0	; select bank0
  9621  1F6E  1E8E               	btfss	14,5	;volatile
  9622  1F6F  2F73               	goto	l10663
  9623  1F70  0021               	movlb	1	; select bank1
  9624  1F71  1F21               	btfss	(_RF1^(0+128)+1),6
  9625  1F72  2F6A               	goto	l10657
  9626  1F73                     l10663:	
  9627                           
  9628                           ;CC2500_B1.c: 298: };
  9629                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9630  1F73  319B  23A5  319F   	fcall	_setRF_TimeoutCleared
  9631                           
  9632                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9633  1F76  319E  2640         	fcall	_CC2500_WriteByte
  9634                           
  9635                           ;CC2500_B1.c: 302: RC0 = 1;
  9636  1F78  0020               	movlb	0	; select bank0
  9637  1F79  140E               	bsf	14,0	;volatile
  9638  1F7A  0008               	return
  9639  1F7B                     __end_of_CC2500_WriteCommand:	
  9640                           
  9641                           	psect	text51
  9642  1BA5                     __ptext51:	
  9643 ;; *************** function _setRF_TimeoutCleared *****************
  9644 ;; Defined at:
  9645 ;;		line 149 in file "../src/RF_Control_B1.c"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;		None
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;		None
  9650 ;; Return value:  Size  Location     Type
  9651 ;;		None               void
  9652 ;; Registers used:
  9653 ;;		status,2
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;Total ram usage:        0 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    5
  9666 ;; This function calls:
  9667 ;;		Nothing
  9668 ;; This function is called by:
  9669 ;;		_CC2500_TxData
  9670 ;;		_CC2500_RxData
  9671 ;;		_CC2500_PowerRST
  9672 ;;		_CC2500_WriteREG
  9673 ;;		_CC2500_WriteCommand
  9674 ;;		_CC2500_ReadStatus
  9675 ;;		_CC2500_ReadREG
  9676 ;; This function uses a non-reentrant model
  9677 ;;
  9678                           
  9679                           
  9680                           ;psect for function _setRF_TimeoutCleared
  9681  1BA5                     _setRF_TimeoutCleared:	
  9682                           
  9683                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9684                           
  9685                           ;incstack = 0
  9686                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9687  1BA5  0021               	movlb	1	; select bank1
  9688  1BA6  01AC               	clrf	(_RF1^(0+128)+12)
  9689  1BA7  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9690  1BA8  0008               	return
  9691  1BA9                     __end_of_setRF_TimeoutCleared:	
  9692                           
  9693                           	psect	text52
  9694  1E68                     __ptext52:	
  9695 ;; *************** function _RF_Timeout_Counter *****************
  9696 ;; Defined at:
  9697 ;;		line 141 in file "../src/RF_Control_B1.c"
  9698 ;; Parameters:    Size  Location     Type
  9699 ;;		None
  9700 ;; Auto vars:     Size  Location     Type
  9701 ;;		None
  9702 ;; Return value:  Size  Location     Type
  9703 ;;		None               void
  9704 ;; Registers used:
  9705 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9706 ;; Tracked objects:
  9707 ;;		On entry : 0/0
  9708 ;;		On exit  : 0/0
  9709 ;;		Unchanged: 0/0
  9710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9715 ;;Total ram usage:        0 bytes
  9716 ;; Hardware stack levels used:    1
  9717 ;; Hardware stack levels required when called:    5
  9718 ;; This function calls:
  9719 ;;		Nothing
  9720 ;; This function is called by:
  9721 ;;		_CC2500_TxData
  9722 ;;		_CC2500_RxData
  9723 ;;		_CC2500_PowerRST
  9724 ;;		_CC2500_WriteREG
  9725 ;;		_CC2500_WriteCommand
  9726 ;;		_CC2500_ReadStatus
  9727 ;;		_CC2500_ReadREG
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731                           
  9732                           ;psect for function _RF_Timeout_Counter
  9733  1E68                     _RF_Timeout_Counter:	
  9734                           
  9735                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9736                           
  9737                           ;incstack = 0
  9738                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9739  1E68  3001               	movlw	1
  9740  1E69  0021               	movlb	1	; select bank1
  9741  1E6A  07AC               	addwf	(_RF1^(0+128)+12),f
  9742  1E6B  3000               	movlw	0
  9743  1E6C  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9744                           
  9745                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9746  1E6D  300C               	movlw	12
  9747  1E6E  3EA0               	addlw	_RF1& (0+255)
  9748  1E6F  0086               	movwf	6
  9749  1E70  0187               	clrf	7
  9750  1E71  3F40               	moviw [0]fsr1
  9751  1E72  3AA8               	xorlw	168
  9752  1E73  1D03               	skipz
  9753  1E74  2E77               	goto	u12415
  9754  1E75  3F41               	moviw [1]fsr1
  9755  1E76  3A61               	xorlw	97
  9756  1E77                     u12415:	
  9757  1E77  1D03               	skipz
  9758  1E78  0008               	return
  9759                           
  9760                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9761  1E79  01AC               	clrf	(_RF1^(0+128)+12)
  9762  1E7A  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9763                           
  9764                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9765  1E7B  1721               	bsf	(_RF1^(0+128)+1),6
  9766  1E7C  0008               	return
  9767  1E7D                     __end_of_RF_Timeout_Counter:	
  9768                           
  9769                           	psect	text53
  9770  1E40                     __ptext53:	
  9771 ;; *************** function _CC2500_WriteByte *****************
  9772 ;; Defined at:
  9773 ;;		line 226 in file "../src/CC2500_B1.c"
  9774 ;; Parameters:    Size  Location     Type
  9775 ;;		None
  9776 ;; Auto vars:     Size  Location     Type
  9777 ;;  loop_a          1    7[BANK0 ] unsigned char 
  9778 ;; Return value:  Size  Location     Type
  9779 ;;		None               void
  9780 ;; Registers used:
  9781 ;;		wreg, status,2, status,0
  9782 ;; Tracked objects:
  9783 ;;		On entry : 0/0
  9784 ;;		On exit  : 0/0
  9785 ;;		Unchanged: 0/0
  9786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;Total ram usage:        2 bytes
  9792 ;; Hardware stack levels used:    1
  9793 ;; Hardware stack levels required when called:    5
  9794 ;; This function calls:
  9795 ;;		Nothing
  9796 ;; This function is called by:
  9797 ;;		_CC2500_TxData
  9798 ;;		_CC2500_RxData
  9799 ;;		_CC2500_PowerRST
  9800 ;;		_CC2500_WriteREG
  9801 ;;		_CC2500_WriteCommand
  9802 ;;		_CC2500_ReadStatus
  9803 ;;		_CC2500_ReadREG
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           
  9808                           ;psect for function _CC2500_WriteByte
  9809  1E40                     _CC2500_WriteByte:	
  9810                           
  9811                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9812                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9813                           
  9814                           ;incstack = 0
  9815                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9816  1E40  0020               	movlb	0	; select bank0
  9817  1E41  01A7               	clrf	CC2500_WriteByte@loop_a
  9818  1E42                     L5:	
  9819  1E42  3008               	movlw	8
  9820  1E43  0227               	subwf	CC2500_WriteByte@loop_a,w
  9821  1E44  1803               	btfsc	3,0
  9822  1E45  0008               	return
  9823                           
  9824                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9825  1E46  1FE6               	btfss	_SPI0Buffer,7
  9826  1E47  2E4A               	goto	l303
  9827                           
  9828                           ;CC2500_B1.c: 230: RC4 = 1;
  9829  1E48  160E               	bsf	14,4	;volatile
  9830  1E49  2E4B               	goto	l304
  9831  1E4A                     l303:	
  9832                           
  9833                           ;CC2500_B1.c: 231: else
  9834                           ;CC2500_B1.c: 232: RC4 = 0;
  9835  1E4A  120E               	bcf	14,4	;volatile
  9836  1E4B                     l304:	
  9837                           
  9838                           ;CC2500_B1.c: 233: RC3 = 1;
  9839  1E4B  158E               	bsf	14,3	;volatile
  9840                           
  9841                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9842  1E4C  1003               	clrc
  9843  1E4D  0DE6               	rlf	_SPI0Buffer,f
  9844                           
  9845                           ;CC2500_B1.c: 235: RC3 = 0;
  9846  1E4E  118E               	bcf	14,3	;volatile
  9847  1E4F  3001               	movlw	1
  9848  1E50  00A6               	movwf	??_CC2500_WriteByte
  9849  1E51  0826               	movf	??_CC2500_WriteByte,w
  9850  1E52  07A7               	addwf	CC2500_WriteByte@loop_a,f
  9851  1E53  2E42               	goto	L5
  9852  1E54                     __end_of_CC2500_WriteByte:	
  9853                           
  9854                           	psect	text54
  9855  1B85                     __ptext54:	
  9856 ;; *************** function _RF_Initialization *****************
  9857 ;; Defined at:
  9858 ;;		line 9 in file "../src/RF_Control_B1.c"
  9859 ;; Parameters:    Size  Location     Type
  9860 ;;		None
  9861 ;; Auto vars:     Size  Location     Type
  9862 ;;		None
  9863 ;; Return value:  Size  Location     Type
  9864 ;;		None               void
  9865 ;; Registers used:
  9866 ;;		wreg, status,2, status,0, pclath, cstack
  9867 ;; Tracked objects:
  9868 ;;		On entry : 0/0
  9869 ;;		On exit  : 0/0
  9870 ;;		Unchanged: 0/0
  9871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9876 ;;Total ram usage:        0 bytes
  9877 ;; Hardware stack levels used:    1
  9878 ;; Hardware stack levels required when called:    6
  9879 ;; This function calls:
  9880 ;;		_setRF_Initialization
  9881 ;; This function is called by:
  9882 ;;		_main
  9883 ;; This function uses a non-reentrant model
  9884 ;;
  9885                           
  9886                           
  9887                           ;psect for function _RF_Initialization
  9888  1B85                     _RF_Initialization:	
  9889                           
  9890                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9891                           
  9892                           ;incstack = 0
  9893                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9894  1B85  319C  246E         	fcall	_setRF_Initialization
  9895  1B87  0008               	return
  9896  1B88                     __end_of_RF_Initialization:	
  9897                           
  9898                           	psect	text55
  9899  1C6E                     __ptext55:	
  9900 ;; *************** function _setRF_Initialization *****************
  9901 ;; Defined at:
  9902 ;;		line 17 in file "../src/RF_Control_B1.c"
  9903 ;; Parameters:    Size  Location     Type
  9904 ;;		None
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;		None
  9907 ;; Return value:  Size  Location     Type
  9908 ;;		None               void
  9909 ;; Registers used:
  9910 ;;		wreg
  9911 ;; Tracked objects:
  9912 ;;		On entry : 0/0
  9913 ;;		On exit  : 0/0
  9914 ;;		Unchanged: 0/0
  9915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9918 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;Total ram usage:        1 bytes
  9921 ;; Hardware stack levels used:    1
  9922 ;; Hardware stack levels required when called:    5
  9923 ;; This function calls:
  9924 ;;		Nothing
  9925 ;; This function is called by:
  9926 ;;		_RF_Initialization
  9927 ;; This function uses a non-reentrant model
  9928 ;;
  9929                           
  9930                           
  9931                           ;psect for function _setRF_Initialization
  9932  1C6E                     _setRF_Initialization:	
  9933                           
  9934                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9935                           
  9936                           ;incstack = 0
  9937                           ; Regs used in _setRF_Initialization: [wreg]
  9938  1C6E  3015               	movlw	21
  9939  1C6F  0020               	movlb	0	; select bank0
  9940  1C70  00A6               	movwf	??_setRF_Initialization
  9941  1C71  0826               	movf	??_setRF_Initialization,w
  9942  1C72  00E8               	movwf	_Tx_Length
  9943                           
  9944                           ;RF_Control_B1.c: 20: RF1.RunTime = 150;
  9945  1C73  3096               	movlw	150
  9946  1C74  0021               	movlb	1	; select bank1
  9947  1C75  00A7               	movwf	(_RF1^(0+128)+7)
  9948  1C76  3000               	movlw	0
  9949  1C77  00A8               	movwf	(_RF1^(0+128)+8)
  9950  1C78  0008               	return
  9951  1C79                     __end_of_setRF_Initialization:	
  9952                           
  9953                           	psect	text56
  9954  1DBD                     __ptext56:	
  9955 ;; *************** function _Mcu_Initialization *****************
  9956 ;; Defined at:
  9957 ;;		line 30 in file "../src/MCU_B1.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;		None
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;		None
  9962 ;; Return value:  Size  Location     Type
  9963 ;;		None               void
  9964 ;; Registers used:
  9965 ;;		wreg, status,2, status,0, pclath, cstack
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;Total ram usage:        0 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:    6
  9978 ;; This function calls:
  9979 ;;		_ADC_Set
  9980 ;;		_Fosc_Set
  9981 ;;		_IOC_Set
  9982 ;;		_IO_Set
  9983 ;;		_TMR1_Set
  9984 ;;		_WDT_Set
  9985 ;; This function is called by:
  9986 ;;		_main
  9987 ;; This function uses a non-reentrant model
  9988 ;;
  9989                           
  9990                           
  9991                           ;psect for function _Mcu_Initialization
  9992  1DBD                     _Mcu_Initialization:	
  9993                           
  9994                           ;MCU_B1.c: 32: Fosc_Set();
  9995                           
  9996                           ;incstack = 0
  9997                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9998  1DBD  319B  23A1  319D   	fcall	_Fosc_Set
  9999                           
 10000                           ;MCU_B1.c: 34: IO_Set();
 10001  1DC0  319F  27AE  319D   	fcall	_IO_Set
 10002                           
 10003                           ;MCU_B1.c: 36: ;;
 10004                           ;MCU_B1.c: 38: TMR1_Set();
 10005  1DC3  319C  24A8  319D   	fcall	_TMR1_Set
 10006                           
 10007                           ;MCU_B1.c: 40: ADC_Set();
 10008  1DC6  319B  23D7  319D   	fcall	_ADC_Set
 10009                           
 10010                           ;MCU_B1.c: 42: ;;
 10011                           ;MCU_B1.c: 44: ;;
 10012                           ;MCU_B1.c: 46: IOC_Set();
 10013  1DC9  319C  2422  319D   	fcall	_IOC_Set
 10014                           
 10015                           ;MCU_B1.c: 48: ;;
 10016                           ;MCU_B1.c: 50: ;;
 10017                           ;MCU_B1.c: 52: WDT_Set();
 10018  1DCC  319C  2463         	fcall	_WDT_Set
 10019  1DCE  0008               	return
 10020  1DCF                     __end_of_Mcu_Initialization:	
 10021                           
 10022                           	psect	text57
 10023  1C63                     __ptext57:	
 10024 ;; *************** function _WDT_Set *****************
 10025 ;; Defined at:
 10026 ;;		line 1089 in file "../src/MCU_B1.c"
 10027 ;; Parameters:    Size  Location     Type
 10028 ;;		None
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;		None
 10031 ;; Return value:  Size  Location     Type
 10032 ;;		None               void
 10033 ;; Registers used:
 10034 ;;		wreg
 10035 ;; Tracked objects:
 10036 ;;		On entry : 0/0
 10037 ;;		On exit  : 0/0
 10038 ;;		Unchanged: 0/0
 10039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;Total ram usage:        1 bytes
 10045 ;; Hardware stack levels used:    1
 10046 ;; Hardware stack levels required when called:    5
 10047 ;; This function calls:
 10048 ;;		Nothing
 10049 ;; This function is called by:
 10050 ;;		_Mcu_Initialization
 10051 ;; This function uses a non-reentrant model
 10052 ;;
 10053                           
 10054                           
 10055                           ;psect for function _WDT_Set
 10056  1C63                     _WDT_Set:	
 10057                           
 10058                           ;MCU_B1.c: 1096: WDTCON = 0b00010111;;
 10059                           
 10060                           ;incstack = 0
 10061                           ; Regs used in _WDT_Set: [wreg]
 10062  1C63  3017               	movlw	23
 10063  1C64  0021               	movlb	1	; select bank1
 10064  1C65  0097               	movwf	23	;volatile
 10065                           
 10066                           ;MCU_B1.c: 1098: WDT.Enable = 1;
 10067  1C66  1445               	bsf	_WDT^(0+128),0
 10068                           
 10069                           ;MCU_B1.c: 1099: WDT.Timer = 10;
 10070  1C67  300A               	movlw	10
 10071  1C68  0020               	movlb	0	; select bank0
 10072  1C69  00A6               	movwf	??_WDT_Set
 10073  1C6A  0826               	movf	??_WDT_Set,w
 10074  1C6B  0021               	movlb	1	; select bank1
 10075  1C6C  00C6               	movwf	(_WDT^(0+128)+1)
 10076  1C6D  0008               	return
 10077  1C6E                     __end_of_WDT_Set:	
 10078                           
 10079                           	psect	text58
 10080  1CA8                     __ptext58:	
 10081 ;; *************** function _TMR1_Set *****************
 10082 ;; Defined at:
 10083 ;;		line 226 in file "../src/MCU_B1.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;		None
 10086 ;; Auto vars:     Size  Location     Type
 10087 ;;		None
 10088 ;; Return value:  Size  Location     Type
 10089 ;;		None               void
 10090 ;; Registers used:
 10091 ;;		wreg
 10092 ;; Tracked objects:
 10093 ;;		On entry : 0/0
 10094 ;;		On exit  : 0/0
 10095 ;;		Unchanged: 0/0
 10096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;Total ram usage:        0 bytes
 10102 ;; Hardware stack levels used:    1
 10103 ;; Hardware stack levels required when called:    5
 10104 ;; This function calls:
 10105 ;;		Nothing
 10106 ;; This function is called by:
 10107 ;;		_Mcu_Initialization
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           
 10112                           ;psect for function _TMR1_Set
 10113  1CA8                     _TMR1_Set:	
 10114                           
 10115                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10116                           
 10117                           ;incstack = 0
 10118                           ; Regs used in _TMR1_Set: [wreg]
 10119  1CA8  3041               	movlw	65
 10120  1CA9  0020               	movlb	0	; select bank0
 10121  1CAA  0098               	movwf	24	;volatile
 10122                           
 10123                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10124  1CAB  30FA               	movlw	250
 10125  1CAC  0097               	movwf	23	;volatile
 10126                           
 10127                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10128  1CAD  3038               	movlw	56
 10129  1CAE  0096               	movwf	22	;volatile
 10130                           
 10131                           ;MCU_B1.c: 230: TMR1IE = 1;
 10132  1CAF  0021               	movlb	1	; select bank1
 10133  1CB0  1411               	bsf	17,0	;volatile
 10134                           
 10135                           ;MCU_B1.c: 231: PEIE = 1;
 10136  1CB1  170B               	bsf	11,6	;volatile
 10137                           
 10138                           ;MCU_B1.c: 232: GIE = 1;
 10139  1CB2  178B               	bsf	11,7	;volatile
 10140  1CB3  0008               	return
 10141  1CB4                     __end_of_TMR1_Set:	
 10142                           
 10143                           	psect	text59
 10144  1FAE                     __ptext59:	
 10145 ;; *************** function _IO_Set *****************
 10146 ;; Defined at:
 10147 ;;		line 60 in file "../src/MCU_B1.c"
 10148 ;; Parameters:    Size  Location     Type
 10149 ;;		None
 10150 ;; Auto vars:     Size  Location     Type
 10151 ;;		None
 10152 ;; Return value:  Size  Location     Type
 10153 ;;		None               void
 10154 ;; Registers used:
 10155 ;;		wreg, status,2
 10156 ;; Tracked objects:
 10157 ;;		On entry : 0/0
 10158 ;;		On exit  : 0/0
 10159 ;;		Unchanged: 0/0
 10160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10165 ;;Total ram usage:        0 bytes
 10166 ;; Hardware stack levels used:    1
 10167 ;; Hardware stack levels required when called:    5
 10168 ;; This function calls:
 10169 ;;		Nothing
 10170 ;; This function is called by:
 10171 ;;		_Mcu_Initialization
 10172 ;; This function uses a non-reentrant model
 10173 ;;
 10174                           
 10175                           
 10176                           ;psect for function _IO_Set
 10177  1FAE                     _IO_Set:	
 10178                           
 10179                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10180                           
 10181                           ;incstack = 0
 10182                           ; Regs used in _IO_Set: [wreg+status,2]
 10183  1FAE  30F7               	movlw	247
 10184  1FAF  0021               	movlb	1	; select bank1
 10185  1FB0  008C               	movwf	12	;volatile
 10186                           
 10187                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10188  1FB1  3004               	movlw	4
 10189  1FB2  008D               	movwf	13	;volatile
 10190                           
 10191                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10192  1FB3  3026               	movlw	38
 10193  1FB4  008E               	movwf	14	;volatile
 10194                           
 10195                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10196  1FB5  0022               	movlb	2	; select bank2
 10197  1FB6  018C               	clrf	12	;volatile
 10198                           
 10199                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10200  1FB7  018D               	clrf	13	;volatile
 10201                           
 10202                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10203  1FB8  018E               	clrf	14	;volatile
 10204                           
 10205                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10206  1FB9  300E               	movlw	14
 10207  1FBA  0023               	movlb	3	; select bank3
 10208  1FBB  008C               	movwf	12	;volatile
 10209                           
 10210                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10211  1FBC  018D               	clrf	13	;volatile
 10212                           
 10213                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10214  1FBD  018E               	clrf	14	;volatile
 10215                           
 10216                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10217  1FBE  30F7               	movlw	247
 10218  1FBF  0020               	movlb	0	; select bank0
 10219  1FC0  008C               	movwf	12	;volatile
 10220                           
 10221                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10222  1FC1  3004               	movlw	4
 10223  1FC2  008D               	movwf	13	;volatile
 10224                           
 10225                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10226  1FC3  3026               	movlw	38
 10227  1FC4  008E               	movwf	14	;volatile
 10228                           
 10229                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10230  1FC5  0024               	movlb	4	; select bank4
 10231  1FC6  018D               	clrf	13	;volatile
 10232  1FC7  0008               	return
 10233  1FC8                     __end_of_IO_Set:	
 10234                           
 10235                           	psect	text60
 10236  1C22                     __ptext60:	
 10237 ;; *************** function _IOC_Set *****************
 10238 ;; Defined at:
 10239 ;;		line 379 in file "../src/MCU_B1.c"
 10240 ;; Parameters:    Size  Location     Type
 10241 ;;		None
 10242 ;; Auto vars:     Size  Location     Type
 10243 ;;		None
 10244 ;; Return value:  Size  Location     Type
 10245 ;;		None               void
 10246 ;; Registers used:
 10247 ;;		wreg, status,2
 10248 ;; Tracked objects:
 10249 ;;		On entry : 0/0
 10250 ;;		On exit  : 0/0
 10251 ;;		Unchanged: 0/0
 10252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;Total ram usage:        0 bytes
 10258 ;; Hardware stack levels used:    1
 10259 ;; Hardware stack levels required when called:    5
 10260 ;; This function calls:
 10261 ;;		Nothing
 10262 ;; This function is called by:
 10263 ;;		_Mcu_Initialization
 10264 ;; This function uses a non-reentrant model
 10265 ;;
 10266                           
 10267                           
 10268                           ;psect for function _IOC_Set
 10269  1C22                     _IOC_Set:	
 10270                           
 10271                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10272                           
 10273                           ;incstack = 0
 10274                           ; Regs used in _IOC_Set: [wreg+status,2]
 10275  1C22  3004               	movlw	4
 10276  1C23  0027               	movlb	7	; select bank7
 10277  1C24  0094               	movwf	20	;volatile
 10278                           
 10279                           ;MCU_B1.c: 382: IOCBN = 0b00000000;;
 10280  1C25  0195               	clrf	21	;volatile
 10281                           
 10282                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10283  1C26  0196               	clrf	22	;volatile
 10284                           
 10285                           ;MCU_B1.c: 386: IOCIE = 1;
 10286  1C27  158B               	bsf	11,3	;volatile
 10287                           
 10288                           ;MCU_B1.c: 387: IOCIF = 0;
 10289  1C28  100B               	bcf	11,0	;volatile
 10290                           
 10291                           ;MCU_B1.c: 388: PEIE = 1;
 10292  1C29  170B               	bsf	11,6	;volatile
 10293                           
 10294                           ;MCU_B1.c: 389: GIE = 1;
 10295  1C2A  178B               	bsf	11,7	;volatile
 10296  1C2B  0008               	return
 10297  1C2C                     __end_of_IOC_Set:	
 10298                           
 10299                           	psect	text61
 10300  1BA1                     __ptext61:	
 10301 ;; *************** function _Fosc_Set *****************
 10302 ;; Defined at:
 10303 ;;		line 56 in file "../src/MCU_B1.c"
 10304 ;; Parameters:    Size  Location     Type
 10305 ;;		None
 10306 ;; Auto vars:     Size  Location     Type
 10307 ;;		None
 10308 ;; Return value:  Size  Location     Type
 10309 ;;		None               void
 10310 ;; Registers used:
 10311 ;;		wreg
 10312 ;; Tracked objects:
 10313 ;;		On entry : 0/0
 10314 ;;		On exit  : 0/0
 10315 ;;		Unchanged: 0/0
 10316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;Total ram usage:        0 bytes
 10322 ;; Hardware stack levels used:    1
 10323 ;; Hardware stack levels required when called:    5
 10324 ;; This function calls:
 10325 ;;		Nothing
 10326 ;; This function is called by:
 10327 ;;		_Mcu_Initialization
 10328 ;; This function uses a non-reentrant model
 10329 ;;
 10330                           
 10331                           
 10332                           ;psect for function _Fosc_Set
 10333  1BA1                     _Fosc_Set:	
 10334                           
 10335                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10336                           
 10337                           ;incstack = 0
 10338                           ; Regs used in _Fosc_Set: [wreg]
 10339  1BA1  3078               	movlw	120
 10340  1BA2  0021               	movlb	1	; select bank1
 10341  1BA3  0099               	movwf	25	;volatile
 10342  1BA4  0008               	return
 10343  1BA5                     __end_of_Fosc_Set:	
 10344                           
 10345                           	psect	text62
 10346  1BD7                     __ptext62:	
 10347 ;; *************** function _ADC_Set *****************
 10348 ;; Defined at:
 10349 ;;		line 425 in file "../src/MCU_B1.c"
 10350 ;; Parameters:    Size  Location     Type
 10351 ;;		None
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;		None
 10354 ;; Return value:  Size  Location     Type
 10355 ;;		None               void
 10356 ;; Registers used:
 10357 ;;		wreg
 10358 ;; Tracked objects:
 10359 ;;		On entry : 0/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;Total ram usage:        0 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; Hardware stack levels required when called:    5
 10370 ;; This function calls:
 10371 ;;		Nothing
 10372 ;; This function is called by:
 10373 ;;		_Mcu_Initialization
 10374 ;; This function uses a non-reentrant model
 10375 ;;
 10376                           
 10377                           
 10378                           ;psect for function _ADC_Set
 10379  1BD7                     _ADC_Set:	
 10380                           
 10381                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10382                           
 10383                           ;incstack = 0
 10384                           ; Regs used in _ADC_Set: [wreg]
 10385  1BD7  30F3               	movlw	243
 10386  1BD8  0021               	movlb	1	; select bank1
 10387  1BD9  009E               	movwf	30	;volatile
 10388                           
 10389                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10390  1BDA  30C1               	movlw	193
 10391  1BDB  0022               	movlb	2	; select bank2
 10392  1BDC  0097               	movwf	23	;volatile
 10393  1BDD  0008               	return
 10394  1BDE                     __end_of_ADC_Set:	
 10395                           
 10396                           	psect	text63
 10397  0051                     __ptext63:	
 10398 ;; *************** function _Load_Main *****************
 10399 ;; Defined at:
 10400 ;;		line 39 in file "../src/OverLoad_B1.c"
 10401 ;; Parameters:    Size  Location     Type
 10402 ;;		None
 10403 ;; Auto vars:     Size  Location     Type
 10404 ;;  i               2   22[BANK0 ] int 
 10405 ;;  LightsCount     1   21[BANK0 ] unsigned char 
 10406 ;;  Load_RunStat    1   20[BANK0 ] unsigned char 
 10407 ;;  ErrorCountVa    1   19[BANK0 ] unsigned char 
 10408 ;;  error           1   16[BANK0 ] unsigned char 
 10409 ;; Return value:  Size  Location     Type
 10410 ;;		None               void
 10411 ;; Registers used:
 10412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;Total ram usage:       10 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:    6
 10425 ;; This function calls:
 10426 ;;		___lwdiv
 10427 ;;		___wmul
 10428 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10429 ;;		_getDimmer_LoadGO
 10430 ;;		_getDimmer_Load_Status
 10431 ;;		_getMain_All_Error_Status
 10432 ;;		_getMain_All_LightsStatus
 10433 ;;		_getMain_Lights_Count
 10434 ;;		_setLoad_AH_AL_Restore
 10435 ;; This function is called by:
 10436 ;;		_main
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           
 10441                           ;psect for function _Load_Main
 10442  0051                     _Load_Main:	
 10443                           
 10444                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10445                           
 10446                           ;incstack = 0
 10447                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10448  0051  3000               	movlw	0
 10449  0052  3191  21D5  3180   	fcall	_getMain_All_Error_Status
 10450  0055  0020               	movlb	0	; select bank0
 10451  0056  00AE               	movwf	??_Load_Main
 10452  0057  082E               	movf	??_Load_Main,w
 10453  0058  00B0               	movwf	Load_Main@error
 10454                           
 10455                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10456  0059  01B4               	clrf	Load_Main@Load_RunStatus
 10457  005A  01B3               	clrf	Load_Main@ErrorCountValue
 10458  005B  01B5               	clrf	Load_Main@LightsCount
 10459                           
 10460                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10461  005C  0022               	movlb	2	; select bank2
 10462  005D  1C35               	btfss	_Load^(0+256),0
 10463  005E  29FD               	goto	l1609
 10464                           
 10465                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10466  005F  319C  2418  3180   	fcall	_getMain_All_LightsStatus
 10467  0062  3800               	iorlw	0
 10468  0063  1D03               	skipz
 10469  0064  2867               	goto	l11773
 10470                           
 10471                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10472  0065  0022               	movlb	2	; select bank2
 10473  0066  2888               	goto	l11791
 10474  0067                     l11773:	
 10475                           ;OverLoad_B1.c: 46: } else {
 10476                           
 10477                           
 10478                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10479  0067  0020               	movlb	0	; select bank0
 10480  0068  08B0               	movf	Load_Main@error,f
 10481  0069  1D03               	skipz
 10482  006A  2885               	goto	l1612
 10483  006B  319D  25F4  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10484  006E  3800               	iorlw	0
 10485  006F  1D03               	skipz
 10486  0070  2885               	goto	l1612
 10487                           
 10488                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10489  0071  0022               	movlb	2	; select bank2
 10490  0072  14B5               	bsf	_Load^(0+256),1
 10491                           
 10492                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10493  0073  319B  23ED  3180   	fcall	_getDimmer_LoadGO
 10494  0076  3A01               	xorlw	1
 10495  0077  1D03               	skipz
 10496  0078  2880               	goto	l1613
 10497                           
 10498                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10499  0079  0022               	movlb	2	; select bank2
 10500  007A  1DB5               	btfss	_Load^(0+256),3
 10501  007B  1BB5               	btfsc	_Load^(0+256),7
 10502  007C  2889               	goto	l1611
 10503                           
 10504                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10505  007D  15B5               	bsf	_Load^(0+256),3
 10506                           
 10507                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10508  007E  01DA               	clrf	(_Load^(0+256)+37)
 10509                           
 10510                           ;OverLoad_B1.c: 56: }
 10511                           ;OverLoad_B1.c: 57: } else {
 10512  007F  2889               	goto	l1611
 10513  0080                     l1613:	
 10514                           
 10515                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10516  0080  0022               	movlb	2	; select bank2
 10517  0081  1FB5               	btfss	_Load^(0+256),7
 10518  0082  2889               	goto	l1611
 10519                           
 10520                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10521  0083  13B5               	bcf	_Load^(0+256),7
 10522                           
 10523                           ;OverLoad_B1.c: 60: }
 10524                           ;OverLoad_B1.c: 61: }
 10525                           ;OverLoad_B1.c: 62: } else {
 10526  0084  2889               	goto	l1611
 10527  0085                     l1612:	
 10528                           
 10529                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10530  0085  0022               	movlb	2	; select bank2
 10531  0086  1CB5               	btfss	_Load^(0+256),1
 10532  0087  2889               	goto	l1611
 10533  0088                     l11791:	
 10534                           
 10535                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10536  0088  10B5               	bcf	_Load^(0+256),1
 10537  0089                     l1611:	
 10538                           
 10539                           ;OverLoad_B1.c: 65: }
 10540                           ;OverLoad_B1.c: 66: }
 10541                           ;OverLoad_B1.c: 88: }
 10542                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10543  0089  1CB5               	btfss	_Load^(0+256),1
 10544  008A  29D9               	goto	l1619
 10545                           
 10546                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10547  008B  1535               	bsf	_Load^(0+256),2
 10548                           
 10549                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10550  008C  1E35               	btfss	_Load^(0+256),4
 10551  008D  29D7               	goto	l1620
 10552                           
 10553                           ;OverLoad_B1.c: 95: Load.Time++;
 10554  008E  3001               	movlw	1
 10555  008F  07B6               	addwf	(_Load^(0+256)+1),f
 10556  0090  3000               	movlw	0
 10557  0091  3DB7               	addwfc	((_Load+1)^(0+256)+1),f
 10558                           
 10559                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10560  0092  3000               	movlw	0
 10561  0093  0237               	subwf	((_Load+1)^(0+256)+1),w
 10562  0094  3002               	movlw	2
 10563  0095  1903               	skipnz
 10564  0096  0236               	subwf	(_Load^(0+256)+1),w
 10565  0097  1C03               	skipc
 10566  0098  0008               	return
 10567                           
 10568                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10569  0099  01B6               	clrf	(_Load^(0+256)+1)
 10570  009A  01B7               	clrf	((_Load+1)^(0+256)+1)
 10571                           
 10572                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10573  009B  1235               	bcf	_Load^(0+256),4
 10574                           
 10575                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10576  009C  3001               	movlw	1
 10577  009D  0020               	movlb	0	; select bank0
 10578  009E  00B6               	movwf	Load_Main@i
 10579  009F  3000               	movlw	0
 10580  00A0  00B7               	movwf	Load_Main@i+1
 10581  00A1  0837               	movf	Load_Main@i+1,w
 10582  00A2  3A80               	xorlw	128
 10583  00A3  00AE               	movwf	??_Load_Main
 10584  00A4  3080               	movlw	128
 10585  00A5  022E               	subwf	??_Load_Main,w
 10586  00A6  1D03               	skipz
 10587  00A7  28AA               	goto	u14535
 10588  00A8  3004               	movlw	4
 10589  00A9  0236               	subwf	Load_Main@i,w
 10590  00AA                     u14535:	
 10591  00AA  1803               	btfsc	3,0
 10592  00AB  28DE               	goto	l11813
 10593  00AC                     l11807:	
 10594                           
 10595                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10596  00AC  0020               	movlb	0	; select bank0
 10597  00AD  3536               	lslf	Load_Main@i,w
 10598  00AE  3E40               	addlw	(_Load+11)& (0+255)
 10599  00AF  0086               	movwf	6
 10600  00B0  3001               	movlw	1	; select bank2/3
 10601  00B1  0087               	movwf	7
 10602  00B2  3F40               	moviw [0]fsr1
 10603  00B3  00AE               	movwf	??_Load_Main
 10604  00B4  3F41               	moviw [1]fsr1
 10605  00B5  00AF               	movwf	??_Load_Main+1
 10606  00B6  082E               	movf	??_Load_Main,w
 10607  00B7  0022               	movlb	2	; select bank2
 10608  00B8  07BA               	addwf	(_Load^(0+256)+5),f
 10609  00B9  0020               	movlb	0	; select bank0
 10610  00BA  082F               	movf	??_Load_Main+1,w
 10611  00BB  0022               	movlb	2	; select bank2
 10612  00BC  3DBB               	addwfc	((_Load+1)^(0+256)+5),f
 10613                           
 10614                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10615  00BD  0020               	movlb	0	; select bank0
 10616  00BE  3536               	lslf	Load_Main@i,w
 10617  00BF  3E4A               	addlw	(_Load+21)& (0+255)
 10618  00C0  0086               	movwf	6
 10619  00C1  3001               	movlw	1	; select bank2/3
 10620  00C2  0087               	movwf	7
 10621  00C3  3F40               	moviw [0]fsr1
 10622  00C4  00AE               	movwf	??_Load_Main
 10623  00C5  3F41               	moviw [1]fsr1
 10624  00C6  00AF               	movwf	??_Load_Main+1
 10625  00C7  082E               	movf	??_Load_Main,w
 10626  00C8  0022               	movlb	2	; select bank2
 10627  00C9  07BC               	addwf	(_Load^(0+256)+7),f
 10628  00CA  0020               	movlb	0	; select bank0
 10629  00CB  082F               	movf	??_Load_Main+1,w
 10630  00CC  0022               	movlb	2	; select bank2
 10631  00CD  3DBD               	addwfc	((_Load+1)^(0+256)+7),f
 10632  00CE  3001               	movlw	1
 10633  00CF  0020               	movlb	0	; select bank0
 10634  00D0  07B6               	addwf	Load_Main@i,f
 10635  00D1  3000               	movlw	0
 10636  00D2  3DB7               	addwfc	Load_Main@i+1,f
 10637  00D3  0837               	movf	Load_Main@i+1,w
 10638  00D4  3A80               	xorlw	128
 10639  00D5  00AE               	movwf	??_Load_Main
 10640  00D6  3080               	movlw	128
 10641  00D7  022E               	subwf	??_Load_Main,w
 10642  00D8  1D03               	skipz
 10643  00D9  28DC               	goto	u14545
 10644  00DA  3004               	movlw	4
 10645  00DB  0236               	subwf	Load_Main@i,w
 10646  00DC                     u14545:	
 10647  00DC  1C03               	skipc
 10648  00DD  28AC               	goto	l11807
 10649  00DE                     l11813:	
 10650                           
 10651                           ;OverLoad_B1.c: 103: }
 10652                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10653  00DE  3003               	movlw	3
 10654  00DF  0020               	movlb	0	; select bank0
 10655  00E0  00A6               	movwf	___lwdiv@divisor
 10656  00E1  3000               	movlw	0
 10657  00E2  00A7               	movwf	___lwdiv@divisor+1
 10658  00E3  0022               	movlb	2	; select bank2
 10659  00E4  083B               	movf	((_Load+1)^(0+256)+5),w
 10660  00E5  0020               	movlb	0	; select bank0
 10661  00E6  01A9               	clrf	___lwdiv@dividend+1
 10662  00E7  07A9               	addwf	___lwdiv@dividend+1,f
 10663  00E8  0022               	movlb	2	; select bank2
 10664  00E9  083A               	movf	(_Load^(0+256)+5),w
 10665  00EA  0020               	movlb	0	; select bank0
 10666  00EB  01A8               	clrf	___lwdiv@dividend
 10667  00EC  07A8               	addwf	___lwdiv@dividend,f
 10668  00ED  3192  22DB  3180   	fcall	___lwdiv
 10669  00F0  0020               	movlb	0	; select bank0
 10670  00F1  0827               	movf	?___lwdiv+1,w
 10671  00F2  0022               	movlb	2	; select bank2
 10672  00F3  01BB               	clrf	((_Load+1)^(0+256)+5)
 10673  00F4  07BB               	addwf	((_Load+1)^(0+256)+5),f
 10674  00F5  0020               	movlb	0	; select bank0
 10675  00F6  0826               	movf	?___lwdiv,w
 10676  00F7  0022               	movlb	2	; select bank2
 10677  00F8  01BA               	clrf	(_Load^(0+256)+5)
 10678  00F9  07BA               	addwf	(_Load^(0+256)+5),f
 10679                           
 10680                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10681  00FA  3003               	movlw	3
 10682  00FB  0020               	movlb	0	; select bank0
 10683  00FC  00A6               	movwf	___lwdiv@divisor
 10684  00FD  3000               	movlw	0
 10685  00FE  00A7               	movwf	___lwdiv@divisor+1
 10686  00FF  0022               	movlb	2	; select bank2
 10687  0100  083D               	movf	((_Load+1)^(0+256)+7),w
 10688  0101  0020               	movlb	0	; select bank0
 10689  0102  01A9               	clrf	___lwdiv@dividend+1
 10690  0103  07A9               	addwf	___lwdiv@dividend+1,f
 10691  0104  0022               	movlb	2	; select bank2
 10692  0105  083C               	movf	(_Load^(0+256)+7),w
 10693  0106  0020               	movlb	0	; select bank0
 10694  0107  01A8               	clrf	___lwdiv@dividend
 10695  0108  07A8               	addwf	___lwdiv@dividend,f
 10696  0109  3192  22DB  3180   	fcall	___lwdiv
 10697  010C  0020               	movlb	0	; select bank0
 10698  010D  0827               	movf	?___lwdiv+1,w
 10699  010E  0022               	movlb	2	; select bank2
 10700  010F  01BD               	clrf	((_Load+1)^(0+256)+7)
 10701  0110  07BD               	addwf	((_Load+1)^(0+256)+7),f
 10702  0111  0020               	movlb	0	; select bank0
 10703  0112  0826               	movf	?___lwdiv,w
 10704  0113  0022               	movlb	2	; select bank2
 10705  0114  01BC               	clrf	(_Load^(0+256)+7)
 10706  0115  07BC               	addwf	(_Load^(0+256)+7),f
 10707                           
 10708                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10709  0116  319F  27E4  3180   	fcall	_setLoad_AH_AL_Restore
 10710                           
 10711                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10712  0119  0022               	movlb	2	; select bank2
 10713  011A  083D               	movf	((_Load+1)^(0+256)+7),w
 10714  011B  023B               	subwf	((_Load+1)^(0+256)+5),w
 10715  011C  1D03               	skipz
 10716  011D  2920               	goto	u14555
 10717  011E  083C               	movf	(_Load^(0+256)+7),w
 10718  011F  023A               	subwf	(_Load^(0+256)+5),w
 10719  0120                     u14555:	
 10720  0120  1C03               	skipc
 10721  0121  0008               	return
 10722                           
 10723                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10724  0122  3005               	movlw	5
 10725  0123  3E35               	addlw	_Load& (0+255)
 10726  0124  0086               	movwf	6
 10727  0125  3001               	movlw	1	; select bank2/3
 10728  0126  0087               	movwf	7
 10729  0127  093C               	comf	(_Load^(0+256)+7),w
 10730  0128  0020               	movlb	0	; select bank0
 10731  0129  00AE               	movwf	??_Load_Main
 10732  012A  0022               	movlb	2	; select bank2
 10733  012B  093D               	comf	((_Load+1)^(0+256)+7),w
 10734  012C  0020               	movlb	0	; select bank0
 10735  012D  00AF               	movwf	??_Load_Main+1
 10736  012E  0AAE               	incf	??_Load_Main,f
 10737  012F  1903               	skipnz
 10738  0130  0AAF               	incf	??_Load_Main+1,f
 10739  0131  3F40               	moviw [0]fsr1
 10740  0132  072E               	addwf	??_Load_Main,w
 10741  0133  0022               	movlb	2	; select bank2
 10742  0134  00D4               	movwf	(_Load^(0+256)+31)
 10743  0135  3F41               	moviw [1]fsr1
 10744  0136  0020               	movlb	0	; select bank0
 10745  0137  3D2F               	addwfc	??_Load_Main+1,w
 10746  0138  0022               	movlb	2	; select bank2
 10747  0139  00D5               	movwf	(_Load^(0+256)+32)
 10748                           
 10749                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10750  013A  01BA               	clrf	(_Load^(0+256)+5)
 10751  013B  01BB               	clrf	((_Load+1)^(0+256)+5)
 10752                           
 10753                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10754  013C  01BC               	clrf	(_Load^(0+256)+7)
 10755  013D  01BD               	clrf	((_Load+1)^(0+256)+7)
 10756                           
 10757                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10758  013E  1DB5               	btfss	_Load^(0+256),3
 10759  013F  2999               	goto	l11853
 10760                           
 10761                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10762  0140  3002               	movlw	2
 10763  0141  025A               	subwf	(_Load^(0+256)+37),w
 10764  0142  1803               	skipnc
 10765  0143  2999               	goto	l11853
 10766                           
 10767                           ;OverLoad_B1.c: 115: Load.Count++;
 10768  0144  3001               	movlw	1
 10769  0145  0020               	movlb	0	; select bank0
 10770  0146  00AE               	movwf	??_Load_Main
 10771  0147  082E               	movf	??_Load_Main,w
 10772  0148  0022               	movlb	2	; select bank2
 10773  0149  07DA               	addwf	(_Load^(0+256)+37),f
 10774                           
 10775                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10776  014A  319B  23F5  3180   	fcall	_getDimmer_Load_Status
 10777  014D  0020               	movlb	0	; select bank0
 10778  014E  00AE               	movwf	??_Load_Main
 10779  014F  082E               	movf	??_Load_Main,w
 10780  0150  00B4               	movwf	Load_Main@Load_RunStatus
 10781                           
 10782                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10783  0151  319C  2458  3180   	fcall	_getMain_Lights_Count
 10784  0154  0020               	movlb	0	; select bank0
 10785  0155  00AE               	movwf	??_Load_Main
 10786  0156  082E               	movf	??_Load_Main,w
 10787  0157  00B5               	movwf	Load_Main@LightsCount
 10788                           
 10789                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10790  0158  0022               	movlb	2	; select bank2
 10791  0159  085A               	movf	(_Load^(0+256)+37),w
 10792  015A  3A01               	xorlw	1
 10793  015B  1D03               	skipz
 10794  015C  2961               	goto	l11839
 10795                           
 10796                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10797  015D  3074               	movlw	116
 10798  015E  00D8               	movwf	(_Load^(0+256)+35)
 10799  015F  3004               	movlw	4
 10800  0160  296E               	goto	L6
 10801  0161                     l11839:	
 10802                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10803                           
 10804  0161  085A               	movf	(_Load^(0+256)+37),w
 10805  0162  3A02               	xorlw	2
 10806  0163  1D03               	skipz
 10807  0164  2999               	goto	l11853
 10808                           
 10809                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10810  0165  0020               	movlb	0	; select bank0
 10811  0166  0835               	movf	Load_Main@LightsCount,w
 10812  0167  3A01               	xorlw	1
 10813  0168  1D03               	skipz
 10814  0169  2970               	goto	l11845
 10815                           
 10816                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.8*57);
 10817  016A  3066               	movlw	102
 10818  016B  0022               	movlb	2	; select bank2
 10819  016C  00D8               	movwf	(_Load^(0+256)+35)
 10820  016D  3000               	movlw	0
 10821  016E                     L6:	
 10822  016E  00D9               	movwf	(_Load^(0+256)+36)
 10823                           
 10824                           ;OverLoad_B1.c: 130: } else {
 10825  016F  2999               	goto	l11853
 10826  0170                     l11845:	
 10827                           
 10828                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10829  0170  0020               	movlb	0	; select bank0
 10830  0171  08B4               	movf	Load_Main@Load_RunStatus,f
 10831  0172  1D03               	skipz
 10832  0173  298D               	goto	l11849
 10833                           
 10834                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.8*57) * LightsCount;
 10835  0174  0835               	movf	Load_Main@LightsCount,w
 10836  0175  00AE               	movwf	??_Load_Main
 10837  0176  01AF               	clrf	??_Load_Main+1
 10838  0177  082E               	movf	??_Load_Main,w
 10839  0178  00A6               	movwf	___wmul@multiplier
 10840  0179  082F               	movf	??_Load_Main+1,w
 10841  017A  00A7               	movwf	___wmul@multiplier+1
 10842  017B  3066               	movlw	102
 10843  017C  00A8               	movwf	___wmul@multiplicand
 10844  017D  3000               	movlw	0
 10845  017E  00A9               	movwf	___wmul@multiplicand+1
 10846  017F  3190  2002  3180   	fcall	___wmul
 10847  0182  0020               	movlb	0	; select bank0
 10848  0183  0827               	movf	?___wmul+1,w
 10849  0184  0022               	movlb	2	; select bank2
 10850  0185  01D9               	clrf	((_Load+1)^(0+256)+35)
 10851  0186  07D9               	addwf	((_Load+1)^(0+256)+35),f
 10852  0187  0020               	movlb	0	; select bank0
 10853  0188  0826               	movf	?___wmul,w
 10854  0189  0022               	movlb	2	; select bank2
 10855  018A  01D8               	clrf	(_Load^(0+256)+35)
 10856  018B  07D8               	addwf	(_Load^(0+256)+35),f
 10857                           
 10858                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10859  018C  2999               	goto	l11853
 10860  018D                     l11849:	
 10861  018D  0020               	movlb	0	; select bank0
 10862  018E  0834               	movf	Load_Main@Load_RunStatus,w
 10863  018F  3A01               	xorlw	1
 10864  0190  1D03               	skipz
 10865  0191  2999               	goto	l11853
 10866                           
 10867                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10868  0192  0022               	movlb	2	; select bank2
 10869  0193  083E               	movf	(_Load^(0+256)+9),w
 10870  0194  3E66               	addlw	102
 10871  0195  00D8               	movwf	(_Load^(0+256)+35)
 10872  0196  3000               	movlw	0
 10873  0197  3D3F               	addwfc	((_Load+1)^(0+256)+9),w
 10874  0198  00D9               	movwf	((_Load+1)^(0+256)+35)
 10875  0199                     l11853:	
 10876                           
 10877                           ;OverLoad_B1.c: 135: }
 10878                           ;OverLoad_B1.c: 136: }
 10879                           ;OverLoad_B1.c: 137: }
 10880                           ;OverLoad_B1.c: 138: }
 10881                           ;OverLoad_B1.c: 139: }
 10882                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10883  0199  0022               	movlb	2	; select bank2
 10884  019A  0859               	movf	((_Load+1)^(0+256)+35),w
 10885  019B  0255               	subwf	((_Load+1)^(0+256)+31),w
 10886  019C  1D03               	skipz
 10887  019D  29A0               	goto	u14635
 10888  019E  0858               	movf	(_Load^(0+256)+35),w
 10889  019F  0254               	subwf	(_Load^(0+256)+31),w
 10890  01A0                     u14635:	
 10891  01A0  1C03               	skipc
 10892  01A1  29BF               	goto	l11869
 10893                           
 10894                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10895  01A2  0020               	movlb	0	; select bank0
 10896  01A3  0835               	movf	Load_Main@LightsCount,w
 10897  01A4  3A01               	xorlw	1
 10898  01A5  1903               	skipnz
 10899  01A6  29A9               	goto	l11859
 10900  01A7  3003               	movlw	3
 10901  01A8  29AA               	goto	L7
 10902  01A9                     l11859:	
 10903  01A9  3002               	movlw	2
 10904  01AA                     L7:	
 10905  01AA  00B1               	movwf	_Load_Main$3870
 10906  01AB  3000               	movlw	0
 10907  01AC  00B2               	movwf	_Load_Main$3870+1
 10908  01AD  0831               	movf	_Load_Main$3870,w
 10909  01AE  00AE               	movwf	??_Load_Main
 10910  01AF  082E               	movf	??_Load_Main,w
 10911  01B0  00B3               	movwf	Load_Main@ErrorCountValue
 10912                           
 10913                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10914  01B1  3001               	movlw	1
 10915  01B2  00AE               	movwf	??_Load_Main
 10916  01B3  082E               	movf	??_Load_Main,w
 10917  01B4  0022               	movlb	2	; select bank2
 10918  01B5  07DB               	addwf	(_Load^(0+256)+38),f
 10919                           
 10920                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10921  01B6  085B               	movf	(_Load^(0+256)+38),w
 10922  01B7  0020               	movlb	0	; select bank0
 10923  01B8  0233               	subwf	Load_Main@ErrorCountValue,w
 10924  01B9  1803               	skipnc
 10925  01BA  0008               	return
 10926                           
 10927                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10928  01BB  0022               	movlb	2	; select bank2
 10929  01BC  01DB               	clrf	(_Load^(0+256)+38)
 10930                           
 10931                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10932  01BD  16B5               	bsf	_Load^(0+256),5
 10933                           
 10934                           ;OverLoad_B1.c: 168: }
 10935                           ;OverLoad_B1.c: 169: } else {
 10936  01BE  0008               	return
 10937  01BF                     l11869:	
 10938                           
 10939                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10940  01BF  01DB               	clrf	(_Load^(0+256)+38)
 10941                           
 10942                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10943  01C0  1DB5               	btfss	_Load^(0+256),3
 10944  01C1  0008               	return
 10945                           
 10946                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10947  01C2  3001               	movlw	1
 10948  01C3  0020               	movlb	0	; select bank0
 10949  01C4  00AE               	movwf	??_Load_Main
 10950  01C5  082E               	movf	??_Load_Main,w
 10951  01C6  0022               	movlb	2	; select bank2
 10952  01C7  07DC               	addwf	(_Load^(0+256)+39),f
 10953                           
 10954                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10955  01C8  3003               	movlw	3
 10956  01C9  025C               	subwf	(_Load^(0+256)+39),w
 10957  01CA  1C03               	skipc
 10958  01CB  0008               	return
 10959                           
 10960                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10961  01CC  01DC               	clrf	(_Load^(0+256)+39)
 10962                           
 10963                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10964  01CD  17B5               	bsf	_Load^(0+256),7
 10965                           
 10966                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10967  01CE  11B5               	bcf	_Load^(0+256),3
 10968                           
 10969                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10970  01CF  01DA               	clrf	(_Load^(0+256)+37)
 10971                           
 10972                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10973  01D0  0855               	movf	((_Load+1)^(0+256)+31),w
 10974  01D1  01BF               	clrf	((_Load+1)^(0+256)+9)
 10975  01D2  07BF               	addwf	((_Load+1)^(0+256)+9),f
 10976  01D3  0854               	movf	(_Load^(0+256)+31),w
 10977  01D4  01BE               	clrf	(_Load^(0+256)+9)
 10978  01D5  07BE               	addwf	(_Load^(0+256)+9),f
 10979                           
 10980                           ;OverLoad_B1.c: 182: }
 10981                           ;OverLoad_B1.c: 183: }
 10982                           ;OverLoad_B1.c: 206: }
 10983                           ;OverLoad_B1.c: 207: }
 10984                           ;OverLoad_B1.c: 208: }
 10985                           ;OverLoad_B1.c: 209: } else {
 10986  01D6  0008               	return
 10987  01D7                     l1620:	
 10988                           
 10989                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 10990  01D7  1635               	bsf	_Load^(0+256),4
 10991                           
 10992                           ;OverLoad_B1.c: 211: }
 10993                           ;OverLoad_B1.c: 212: } else {
 10994  01D8  0008               	return
 10995  01D9                     l1619:	
 10996                           
 10997                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 10998  01D9  1D35               	btfss	_Load^(0+256),2
 10999  01DA  29EC               	goto	l11905
 11000                           
 11001                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 11002  01DB  1135               	bcf	_Load^(0+256),2
 11003                           
 11004                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 11005  01DC  1235               	bcf	_Load^(0+256),4
 11006                           
 11007                           ;OverLoad_B1.c: 218: Load.Time = 0;
 11008  01DD  01B6               	clrf	(_Load^(0+256)+1)
 11009  01DE  01B7               	clrf	((_Load+1)^(0+256)+1)
 11010                           
 11011                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 11012  01DF  319F  27E4  3180   	fcall	_setLoad_AH_AL_Restore
 11013                           
 11014                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11015  01E2  0022               	movlb	2	; select bank2
 11016  01E3  01DB               	clrf	(_Load^(0+256)+38)
 11017                           
 11018                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11019  01E4  01DC               	clrf	(_Load^(0+256)+39)
 11020                           
 11021                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11022  01E5  01BA               	clrf	(_Load^(0+256)+5)
 11023  01E6  01BB               	clrf	((_Load+1)^(0+256)+5)
 11024                           
 11025                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11026  01E7  01BC               	clrf	(_Load^(0+256)+7)
 11027  01E8  01BD               	clrf	((_Load+1)^(0+256)+7)
 11028                           
 11029                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11030  01E9  11B5               	bcf	_Load^(0+256),3
 11031                           
 11032                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11033  01EA  01DA               	clrf	(_Load^(0+256)+37)
 11034                           
 11035                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11036  01EB  13B5               	bcf	_Load^(0+256),7
 11037  01EC                     l11905:	
 11038                           
 11039                           ;OverLoad_B1.c: 255: }
 11040                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11041  01EC  1EB5               	btfss	_Load^(0+256),5
 11042  01ED  0008               	return
 11043                           
 11044                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11045  01EE  3001               	movlw	1
 11046  01EF  07B8               	addwf	(_Load^(0+256)+3),f
 11047  01F0  3000               	movlw	0
 11048  01F1  3DB9               	addwfc	((_Load+1)^(0+256)+3),f
 11049                           
 11050                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11051  01F2  3001               	movlw	1
 11052  01F3  0239               	subwf	((_Load+1)^(0+256)+3),w
 11053  01F4  30F4               	movlw	244
 11054  01F5  1903               	skipnz
 11055  01F6  0238               	subwf	(_Load^(0+256)+3),w
 11056  01F7  1C03               	skipc
 11057  01F8  0008               	return
 11058                           
 11059                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11060  01F9  01B8               	clrf	(_Load^(0+256)+3)
 11061  01FA  01B9               	clrf	((_Load+1)^(0+256)+3)
 11062                           
 11063                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11064  01FB  12B5               	bcf	_Load^(0+256),5
 11065                           
 11066                           ;OverLoad_B1.c: 261: }
 11067                           ;OverLoad_B1.c: 262: }
 11068                           ;OverLoad_B1.c: 263: }
 11069                           ;OverLoad_B1.c: 264: } else {
 11070  01FC  0008               	return
 11071  01FD                     l1609:	
 11072                           
 11073                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11074  01FD  1C20               	btfss	_myMain^(0+256),0
 11075  01FE  0008               	return
 11076                           
 11077                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11078  01FF  1435               	bsf	_Load^(0+256),0
 11079  0200  0008               	return
 11080  0201                     __end_of_Load_Main:	
 11081                           
 11082                           	psect	text64
 11083  1C58                     __ptext64:	
 11084 ;; *************** function _getMain_Lights_Count *****************
 11085 ;; Defined at:
 11086 ;;		line 459 in file "../src/Main_B1.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;		None
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;  status1         1    7[BANK0 ] unsigned char 
 11091 ;;  count           1    6[BANK0 ] unsigned char 
 11092 ;; Return value:  Size  Location     Type
 11093 ;;                  1    wreg      unsigned char 
 11094 ;; Registers used:
 11095 ;;		wreg, status,2
 11096 ;; Tracked objects:
 11097 ;;		On entry : 0/0
 11098 ;;		On exit  : 0/0
 11099 ;;		Unchanged: 0/0
 11100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11104 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11105 ;;Total ram usage:        2 bytes
 11106 ;; Hardware stack levels used:    1
 11107 ;; Hardware stack levels required when called:    5
 11108 ;; This function calls:
 11109 ;;		Nothing
 11110 ;; This function is called by:
 11111 ;;		_Load_Main
 11112 ;; This function uses a non-reentrant model
 11113 ;;
 11114                           
 11115                           
 11116                           ;psect for function _getMain_Lights_Count
 11117  1C58                     _getMain_Lights_Count:	
 11118                           
 11119                           ;Main_B1.c: 460: char count = 0;
 11120                           
 11121                           ;incstack = 0
 11122                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11123  1C58  0020               	movlb	0	; select bank0
 11124  1C59  01A6               	clrf	getMain_Lights_Count@count
 11125                           
 11126                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11127  1C5A  3000               	movlw	0
 11128  1C5B  0021               	movlb	1	; select bank1
 11129  1C5C  19BA               	btfsc	_DimmerIntr1^(0+128),3
 11130  1C5D  3001               	movlw	1
 11131  1C5E  0020               	movlb	0	; select bank0
 11132  1C5F  00A7               	movwf	getMain_Lights_Count@status1
 11133                           
 11134                           ;Main_B1.c: 487: return count = status1;
 11135  1C60  0827               	movf	getMain_Lights_Count@status1,w
 11136  1C61  00A6               	movwf	getMain_Lights_Count@count
 11137  1C62  0008               	return
 11138  1C63                     __end_of_getMain_Lights_Count:	
 11139                           
 11140                           	psect	text65
 11141  1BF5                     __ptext65:	
 11142 ;; *************** function _getDimmer_Load_Status *****************
 11143 ;; Defined at:
 11144 ;;		line 1084 in file "../src/Dimmer_B1.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;		None
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;  status          1    6[BANK0 ] unsigned char 
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  1    wreg      unsigned char 
 11151 ;; Registers used:
 11152 ;;		wreg, status,2
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;Total ram usage:        1 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    5
 11165 ;; This function calls:
 11166 ;;		Nothing
 11167 ;; This function is called by:
 11168 ;;		_Load_Main
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           
 11173                           ;psect for function _getDimmer_Load_Status
 11174  1BF5                     _getDimmer_Load_Status:	
 11175                           
 11176                           ;Dimmer_B1.c: 1085: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11177                           
 11178                           ;incstack = 0
 11179                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11180  1BF5  3000               	movlw	0
 11181  1BF6  0022               	movlb	2	; select bank2
 11182  1BF7  192D               	btfsc	_Dimmer^(0+256),2
 11183  1BF8  3001               	movlw	1
 11184  1BF9  0020               	movlb	0	; select bank0
 11185  1BFA  00A6               	movwf	getDimmer_Load_Status@status
 11186                           
 11187                           ;Dimmer_B1.c: 1086: return status;
 11188  1BFB  0826               	movf	getDimmer_Load_Status@status,w
 11189  1BFC  0008               	return
 11190  1BFD                     __end_of_getDimmer_Load_Status:	
 11191                           
 11192                           	psect	text66
 11193  1BED                     __ptext66:	
 11194 ;; *************** function _getDimmer_LoadGO *****************
 11195 ;; Defined at:
 11196 ;;		line 1078 in file "../src/Dimmer_B1.c"
 11197 ;; Parameters:    Size  Location     Type
 11198 ;;		None
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;  loadgo          1    6[BANK0 ] unsigned char 
 11201 ;; Return value:  Size  Location     Type
 11202 ;;                  1    wreg      unsigned char 
 11203 ;; Registers used:
 11204 ;;		wreg, status,2
 11205 ;; Tracked objects:
 11206 ;;		On entry : 0/0
 11207 ;;		On exit  : 0/0
 11208 ;;		Unchanged: 0/0
 11209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;Total ram usage:        1 bytes
 11215 ;; Hardware stack levels used:    1
 11216 ;; Hardware stack levels required when called:    5
 11217 ;; This function calls:
 11218 ;;		Nothing
 11219 ;; This function is called by:
 11220 ;;		_Load_Main
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           
 11225                           ;psect for function _getDimmer_LoadGO
 11226  1BED                     _getDimmer_LoadGO:	
 11227                           
 11228                           ;Dimmer_B1.c: 1079: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11229                           
 11230                           ;incstack = 0
 11231                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11232  1BED  3000               	movlw	0
 11233  1BEE  0022               	movlb	2	; select bank2
 11234  1BEF  18AD               	btfsc	_Dimmer^(0+256),1
 11235  1BF0  3001               	movlw	1
 11236  1BF1  0020               	movlb	0	; select bank0
 11237  1BF2  00A6               	movwf	getDimmer_LoadGO@loadgo
 11238                           
 11239                           ;Dimmer_B1.c: 1080: return loadgo;
 11240  1BF3  0826               	movf	getDimmer_LoadGO@loadgo,w
 11241  1BF4  0008               	return
 11242  1BF5                     __end_of_getDimmer_LoadGO:	
 11243                           
 11244                           	psect	text67
 11245  1DF4                     __ptext67:	
 11246 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11247 ;; Defined at:
 11248 ;;		line 242 in file "../src/Dimmer_B1.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;		None
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;  status          1    6[BANK0 ] unsigned char 
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  1    wreg      unsigned char 
 11255 ;; Registers used:
 11256 ;;		wreg, status,2, status,0
 11257 ;; Tracked objects:
 11258 ;;		On entry : 0/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;Total ram usage:        1 bytes
 11267 ;; Hardware stack levels used:    1
 11268 ;; Hardware stack levels required when called:    5
 11269 ;; This function calls:
 11270 ;;		Nothing
 11271 ;; This function is called by:
 11272 ;;		_Load_Main
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           
 11277                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11278  1DF4                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11279                           
 11280                           ;Dimmer_B1.c: 243: char status = 0;
 11281                           
 11282                           ;incstack = 0
 11283                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11284  1DF4  0020               	movlb	0	; select bank0
 11285  1DF5  01A6               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11286                           
 11287                           ;Dimmer_B1.c: 254: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11288  1DF6  3000               	movlw	0
 11289  1DF7  0021               	movlb	1	; select bank1
 11290  1DF8  1A3A               	btfsc	_DimmerIntr1^(0+128),4
 11291  1DF9  3001               	movlw	1
 11292  1DFA  0020               	movlb	0	; select bank0
 11293  1DFB  00A6               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11294                           
 11295                           ;Dimmer_B1.c: 258: if (status == 0) {
 11296  1DFC  08A6               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11297  1DFD  1D03               	skipz
 11298  1DFE  2E05               	goto	l6995
 11299                           
 11300                           ;Dimmer_B1.c: 268: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11301  1DFF  3000               	movlw	0
 11302  1E00  0021               	movlb	1	; select bank1
 11303  1E01  1B3A               	btfsc	_DimmerIntr1^(0+128),6
 11304  1E02  3001               	movlw	1
 11305  1E03  0020               	movlb	0	; select bank0
 11306  1E04  00A6               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11307  1E05                     l6995:	
 11308                           
 11309                           ;Dimmer_B1.c: 270: }
 11310                           ;Dimmer_B1.c: 272: return status;
 11311  1E05  0826               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11312  1E06  0008               	return
 11313  1E07                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11314                           
 11315                           	psect	text68
 11316  1002                     __ptext68:	
 11317 ;; *************** function ___wmul *****************
 11318 ;; Defined at:
 11319 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11320 ;; Parameters:    Size  Location     Type
 11321 ;;  multiplier      2    6[BANK0 ] unsigned int 
 11322 ;;  multiplicand    2    8[BANK0 ] unsigned int 
 11323 ;; Auto vars:     Size  Location     Type
 11324 ;;  product         2   10[BANK0 ] unsigned int 
 11325 ;; Return value:  Size  Location     Type
 11326 ;;                  2    6[BANK0 ] unsigned int 
 11327 ;; Registers used:
 11328 ;;		wreg, status,2, status,0
 11329 ;; Tracked objects:
 11330 ;;		On entry : 0/0
 11331 ;;		On exit  : 0/0
 11332 ;;		Unchanged: 0/0
 11333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11334 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11337 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11338 ;;Total ram usage:        6 bytes
 11339 ;; Hardware stack levels used:    1
 11340 ;; Hardware stack levels required when called:    5
 11341 ;; This function calls:
 11342 ;;		Nothing
 11343 ;; This function is called by:
 11344 ;;		_Load_Main
 11345 ;; This function uses a non-reentrant model
 11346 ;;
 11347                           
 11348                           
 11349                           ;psect for function ___wmul
 11350  1002                     ___wmul:	
 11351                           
 11352                           ;incstack = 0
 11353                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11354  1002  0020               	movlb	0	; select bank0
 11355  1003  01AA               	clrf	___wmul@product
 11356  1004  01AB               	clrf	___wmul@product+1
 11357  1005                     l7525:	
 11358  1005  1C26               	btfss	___wmul@multiplier,0
 11359  1006  280B               	goto	l2660
 11360  1007  0828               	movf	___wmul@multiplicand,w
 11361  1008  07AA               	addwf	___wmul@product,f
 11362  1009  0829               	movf	___wmul@multiplicand+1,w
 11363  100A  3DAB               	addwfc	___wmul@product+1,f
 11364  100B                     l2660:	
 11365  100B  3001               	movlw	1
 11366  100C                     u7395:	
 11367  100C  35A8               	lslf	___wmul@multiplicand,f
 11368  100D  0DA9               	rlf	___wmul@multiplicand+1,f
 11369  100E  0B89               	decfsz	9,f
 11370  100F  280C               	goto	u7395
 11371  1010  3001               	movlw	1
 11372  1011                     u7405:	
 11373  1011  36A7               	lsrf	___wmul@multiplier+1,f
 11374  1012  0CA6               	rrf	___wmul@multiplier,f
 11375  1013  0B89               	decfsz	9,f
 11376  1014  2811               	goto	u7405
 11377  1015  0827               	movf	___wmul@multiplier+1,w
 11378  1016  0426               	iorwf	___wmul@multiplier,w
 11379  1017  1D03               	skipz
 11380  1018  2805               	goto	l7525
 11381  1019  082B               	movf	___wmul@product+1,w
 11382  101A  01A7               	clrf	?___wmul+1
 11383  101B  07A7               	addwf	?___wmul+1,f
 11384  101C  082A               	movf	___wmul@product,w
 11385  101D  01A6               	clrf	?___wmul
 11386  101E  07A6               	addwf	?___wmul,f
 11387  101F  0008               	return
 11388  1020                     __end_of___wmul:	
 11389                           
 11390                           	psect	text69
 11391  12DB                     __ptext69:	
 11392 ;; *************** function ___lwdiv *****************
 11393 ;; Defined at:
 11394 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11395 ;; Parameters:    Size  Location     Type
 11396 ;;  divisor         2    6[BANK0 ] unsigned int 
 11397 ;;  dividend        2    8[BANK0 ] unsigned int 
 11398 ;; Auto vars:     Size  Location     Type
 11399 ;;  quotient        2   12[BANK0 ] unsigned int 
 11400 ;;  counter         1   11[BANK0 ] unsigned char 
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  2    6[BANK0 ] unsigned int 
 11403 ;; Registers used:
 11404 ;;		wreg, status,2, status,0
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11410 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11411 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;Total ram usage:        8 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    5
 11417 ;; This function calls:
 11418 ;;		Nothing
 11419 ;; This function is called by:
 11420 ;;		_Load_Main
 11421 ;;		_setRF_Main
 11422 ;; This function uses a non-reentrant model
 11423 ;;
 11424                           
 11425                           
 11426                           ;psect for function ___lwdiv
 11427  12DB                     ___lwdiv:	
 11428                           
 11429                           ;incstack = 0
 11430                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11431  12DB  0020               	movlb	0	; select bank0
 11432  12DC  01AC               	clrf	___lwdiv@quotient
 11433  12DD  01AD               	clrf	___lwdiv@quotient+1
 11434  12DE  0827               	movf	___lwdiv@divisor+1,w
 11435  12DF  0426               	iorwf	___lwdiv@divisor,w
 11436  12E0  1903               	skipnz
 11437  12E1  2B0B               	goto	l11313
 11438  12E2  01AB               	clrf	___lwdiv@counter
 11439  12E3  0AAB               	incf	___lwdiv@counter,f
 11440  12E4                     l11301:	
 11441  12E4  1BA7               	btfsc	___lwdiv@divisor+1,7
 11442  12E5  2AF0               	goto	l11303
 11443  12E6  3001               	movlw	1
 11444  12E7                     u13605:	
 11445  12E7  35A6               	lslf	___lwdiv@divisor,f
 11446  12E8  0DA7               	rlf	___lwdiv@divisor+1,f
 11447  12E9  0B89               	decfsz	9,f
 11448  12EA  2AE7               	goto	u13605
 11449  12EB  3001               	movlw	1
 11450  12EC  00AA               	movwf	??___lwdiv
 11451  12ED  082A               	movf	??___lwdiv,w
 11452  12EE  07AB               	addwf	___lwdiv@counter,f
 11453  12EF  2AE4               	goto	l11301
 11454  12F0                     l11303:	
 11455  12F0  3001               	movlw	1
 11456  12F1                     u13625:	
 11457  12F1  35AC               	lslf	___lwdiv@quotient,f
 11458  12F2  0DAD               	rlf	___lwdiv@quotient+1,f
 11459  12F3  0B89               	decfsz	9,f
 11460  12F4  2AF1               	goto	u13625
 11461  12F5  0827               	movf	___lwdiv@divisor+1,w
 11462  12F6  0229               	subwf	___lwdiv@dividend+1,w
 11463  12F7  1D03               	skipz
 11464  12F8  2AFB               	goto	u13635
 11465  12F9  0826               	movf	___lwdiv@divisor,w
 11466  12FA  0228               	subwf	___lwdiv@dividend,w
 11467  12FB                     u13635:	
 11468  12FB  1C03               	skipc
 11469  12FC  2B02               	goto	l11309
 11470  12FD  0826               	movf	___lwdiv@divisor,w
 11471  12FE  02A8               	subwf	___lwdiv@dividend,f
 11472  12FF  0827               	movf	___lwdiv@divisor+1,w
 11473  1300  3BA9               	subwfb	___lwdiv@dividend+1,f
 11474  1301  142C               	bsf	___lwdiv@quotient,0
 11475  1302                     l11309:	
 11476  1302  3001               	movlw	1
 11477  1303                     u13645:	
 11478  1303  36A7               	lsrf	___lwdiv@divisor+1,f
 11479  1304  0CA6               	rrf	___lwdiv@divisor,f
 11480  1305  0B89               	decfsz	9,f
 11481  1306  2B03               	goto	u13645
 11482  1307  3001               	movlw	1
 11483  1308  02AB               	subwf	___lwdiv@counter,f
 11484  1309  1D03               	btfss	3,2
 11485  130A  2AF0               	goto	l11303
 11486  130B                     l11313:	
 11487  130B  082D               	movf	___lwdiv@quotient+1,w
 11488  130C  01A7               	clrf	?___lwdiv+1
 11489  130D  07A7               	addwf	?___lwdiv+1,f
 11490  130E  082C               	movf	___lwdiv@quotient,w
 11491  130F  01A6               	clrf	?___lwdiv
 11492  1310  07A6               	addwf	?___lwdiv,f
 11493  1311  0008               	return
 11494  1312                     __end_of___lwdiv:	
 11495                           
 11496                           	psect	text70
 11497  1B82                     __ptext70:	
 11498 ;; *************** function _Load_Initialization *****************
 11499 ;; Defined at:
 11500 ;;		line 9 in file "../src/OverLoad_B1.c"
 11501 ;; Parameters:    Size  Location     Type
 11502 ;;		None
 11503 ;; Auto vars:     Size  Location     Type
 11504 ;;		None
 11505 ;; Return value:  Size  Location     Type
 11506 ;;		None               void
 11507 ;; Registers used:
 11508 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11509 ;; Tracked objects:
 11510 ;;		On entry : 0/0
 11511 ;;		On exit  : 0/0
 11512 ;;		Unchanged: 0/0
 11513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11518 ;;Total ram usage:        0 bytes
 11519 ;; Hardware stack levels used:    1
 11520 ;; Hardware stack levels required when called:    6
 11521 ;; This function calls:
 11522 ;;		_setLoad_AH_AL_Restore
 11523 ;; This function is called by:
 11524 ;;		_main
 11525 ;; This function uses a non-reentrant model
 11526 ;;
 11527                           
 11528                           
 11529                           ;psect for function _Load_Initialization
 11530  1B82                     _Load_Initialization:	
 11531                           
 11532                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11533                           
 11534                           ;incstack = 0
 11535                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11536  1B82  319F  27E4         	fcall	_setLoad_AH_AL_Restore
 11537  1B84  0008               	return
 11538  1B85                     __end_of_Load_Initialization:	
 11539                           
 11540                           	psect	text71
 11541  1FE4                     __ptext71:	
 11542 ;; *************** function _setLoad_AH_AL_Restore *****************
 11543 ;; Defined at:
 11544 ;;		line 292 in file "../src/OverLoad_B1.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;		None
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;  i               1    7[BANK0 ] unsigned char 
 11549 ;; Return value:  Size  Location     Type
 11550 ;;		None               void
 11551 ;; Registers used:
 11552 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11553 ;; Tracked objects:
 11554 ;;		On entry : 0/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: 0/0
 11557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;Total ram usage:        2 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; Hardware stack levels required when called:    5
 11565 ;; This function calls:
 11566 ;;		Nothing
 11567 ;; This function is called by:
 11568 ;;		_Load_Initialization
 11569 ;;		_Load_Main
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           
 11574                           ;psect for function _setLoad_AH_AL_Restore
 11575  1FE4                     _setLoad_AH_AL_Restore:	
 11576                           
 11577                           ;OverLoad_B1.c: 293: char i;
 11578                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11579                           
 11580                           ;incstack = 0
 11581                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11582  1FE4  0020               	movlb	0	; select bank0
 11583  1FE5  01A7               	clrf	setLoad_AH_AL_Restore@i
 11584  1FE6                     L8:	
 11585  1FE6  3005               	movlw	5
 11586  1FE7  0227               	subwf	setLoad_AH_AL_Restore@i,w
 11587  1FE8  1803               	btfsc	3,0
 11588  1FE9  0008               	return
 11589                           
 11590                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11591  1FEA  3527               	lslf	setLoad_AH_AL_Restore@i,w
 11592  1FEB  3E40               	addlw	(_Load+11)& (0+255)
 11593  1FEC  0086               	movwf	6
 11594  1FED  3001               	movlw	1	; select bank2/3
 11595  1FEE  0087               	movwf	7
 11596  1FEF  3000               	movlw	0
 11597  1FF0  3FC0               	movwi [0]fsr1
 11598  1FF1  3FC1               	movwi [1]fsr1
 11599                           
 11600                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11601  1FF2  3527               	lslf	setLoad_AH_AL_Restore@i,w
 11602  1FF3  3E4A               	addlw	(_Load+21)& (0+255)
 11603  1FF4  0086               	movwf	6
 11604  1FF5  3001               	movlw	1	; select bank2/3
 11605  1FF6  0087               	movwf	7
 11606  1FF7  30FF               	movlw	255
 11607  1FF8  3FC0               	movwi [0]fsr1
 11608  1FF9  30FF               	movlw	255
 11609  1FFA  3FC1               	movwi [1]fsr1
 11610  1FFB  3001               	movlw	1
 11611  1FFC  00A6               	movwf	??_setLoad_AH_AL_Restore
 11612  1FFD  0826               	movf	??_setLoad_AH_AL_Restore,w
 11613  1FFE  07A7               	addwf	setLoad_AH_AL_Restore@i,f
 11614  1FFF  2FE6               	goto	L8
 11615  2000                     __end_of_setLoad_AH_AL_Restore:	
 11616                           
 11617                           	psect	text72
 11618  1B9D                     __ptext72:	
 11619 ;; *************** function _LED_Main *****************
 11620 ;; Defined at:
 11621 ;;		line 47 in file "../src/LED_B1.c"
 11622 ;; Parameters:    Size  Location     Type
 11623 ;;		None
 11624 ;; Auto vars:     Size  Location     Type
 11625 ;;		None
 11626 ;; Return value:  Size  Location     Type
 11627 ;;		None               void
 11628 ;; Registers used:
 11629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11630 ;; Tracked objects:
 11631 ;;		On entry : 0/0
 11632 ;;		On exit  : 0/0
 11633 ;;		Unchanged: 0/0
 11634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;Total ram usage:        0 bytes
 11640 ;; Hardware stack levels used:    1
 11641 ;; Hardware stack levels required when called:    7
 11642 ;; This function calls:
 11643 ;;		_setLED_Main
 11644 ;; This function is called by:
 11645 ;;		_main
 11646 ;; This function uses a non-reentrant model
 11647 ;;
 11648                           
 11649                           
 11650                           ;psect for function _LED_Main
 11651  1B9D                     _LED_Main:	
 11652                           
 11653                           ;LED_B1.c: 67: setLED_Main(99);
 11654                           
 11655                           ;incstack = 0
 11656                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11657  1B9D  3063               	movlw	99
 11658  1B9E  3192  2208         	fcall	_setLED_Main
 11659  1BA0  0008               	return
 11660  1BA1                     __end_of_LED_Main:	
 11661                           
 11662                           	psect	text73
 11663  1208                     __ptext73:	
 11664 ;; *************** function _setLED_Main *****************
 11665 ;; Defined at:
 11666 ;;		line 229 in file "../src/LED_B1.c"
 11667 ;; Parameters:    Size  Location     Type
 11668 ;;  led             1    wreg     unsigned char 
 11669 ;; Auto vars:     Size  Location     Type
 11670 ;;  led             1   10[BANK0 ] unsigned char 
 11671 ;; Return value:  Size  Location     Type
 11672 ;;		None               void
 11673 ;; Registers used:
 11674 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11675 ;; Tracked objects:
 11676 ;;		On entry : 0/0
 11677 ;;		On exit  : 0/0
 11678 ;;		Unchanged: 0/0
 11679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11683 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;Total ram usage:        3 bytes
 11685 ;; Hardware stack levels used:    1
 11686 ;; Hardware stack levels required when called:    6
 11687 ;; This function calls:
 11688 ;;		_LedPointSelect
 11689 ;; This function is called by:
 11690 ;;		_LED_Main
 11691 ;; This function uses a non-reentrant model
 11692 ;;
 11693                           
 11694                           
 11695                           ;psect for function _setLED_Main
 11696  1208                     _setLED_Main:	
 11697                           
 11698                           ;incstack = 0
 11699                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11700                           ;setLED_Main@led stored from wreg
 11701  1208  0020               	movlb	0	; select bank0
 11702  1209  00AA               	movwf	setLED_Main@led
 11703                           
 11704                           ;LED_B1.c: 230: LedPointSelect(led);
 11705  120A  082A               	movf	setLED_Main@led,w
 11706  120B  319C  2442  3192   	fcall	_LedPointSelect
 11707                           
 11708                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11709  120E  0020               	movlb	0	; select bank0
 11710  120F  0865               	movf	_LED,w
 11711  1210  0086               	movwf	6
 11712  1211  3001               	movlw	1	; select bank2/3
 11713  1212  0087               	movwf	7
 11714  1213  1C81               	btfss	1,1
 11715  1214  0008               	return
 11716                           
 11717                           ;LED_B1.c: 232: LED->Time++;
 11718  1215  0A65               	incf	_LED,w
 11719  1216  0086               	movwf	6
 11720  1217  3001               	movlw	1	; select bank2/3
 11721  1218  0087               	movwf	7
 11722  1219  3001               	movlw	1
 11723  121A  0781               	addwf	1,f
 11724  121B  3141               	addfsr 1,1
 11725  121C  1803               	skipnc
 11726  121D  0A81               	incf	1,f
 11727                           
 11728                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11729  121E  0A65               	incf	_LED,w
 11730  121F  0086               	movwf	6
 11731  1220  3001               	movlw	1	; select bank2/3
 11732  1221  0087               	movwf	7
 11733  1222  3F40               	moviw [0]fsr1
 11734  1223  00A8               	movwf	??_setLED_Main
 11735  1224  3F41               	moviw [1]fsr1
 11736  1225  00A9               	movwf	??_setLED_Main+1
 11737  1226  3000               	movlw	0
 11738  1227  0229               	subwf	??_setLED_Main+1,w
 11739  1228  3019               	movlw	25
 11740  1229  1903               	skipnz
 11741  122A  0228               	subwf	??_setLED_Main,w
 11742  122B  1C03               	skipc
 11743  122C  0008               	return
 11744                           
 11745                           ;LED_B1.c: 234: LED->Time = 0;
 11746  122D  0A65               	incf	_LED,w
 11747  122E  0086               	movwf	6
 11748  122F  3001               	movlw	1	; select bank2/3
 11749  1230  0087               	movwf	7
 11750  1231  3000               	movlw	0
 11751  1232  3FC0               	movwi [0]fsr1
 11752  1233  3FC1               	movwi [1]fsr1
 11753                           
 11754                           ;LED_B1.c: 252: if (led == 99) {
 11755  1234  082A               	movf	setLED_Main@led,w
 11756  1235  3A63               	xorlw	99
 11757  1236  1D03               	skipz
 11758  1237  0008               	return
 11759                           
 11760                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11761  1238  3020               	movlw	32
 11762  1239  068D               	xorwf	13,f
 11763  123A  0008               	return
 11764  123B                     __end_of_setLED_Main:	
 11765                           
 11766                           	psect	text74
 11767  1B99                     __ptext74:	
 11768 ;; *************** function _LED_Initialization *****************
 11769 ;; Defined at:
 11770 ;;		line 31 in file "../src/LED_B1.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;		None
 11773 ;; Auto vars:     Size  Location     Type
 11774 ;;		None
 11775 ;; Return value:  Size  Location     Type
 11776 ;;		None               void
 11777 ;; Registers used:
 11778 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11779 ;; Tracked objects:
 11780 ;;		On entry : 0/0
 11781 ;;		On exit  : 0/0
 11782 ;;		Unchanged: 0/0
 11783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;Total ram usage:        0 bytes
 11789 ;; Hardware stack levels used:    1
 11790 ;; Hardware stack levels required when called:    8
 11791 ;; This function calls:
 11792 ;;		_setLED_Initialization
 11793 ;; This function is called by:
 11794 ;;		_main
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           
 11799                           ;psect for function _LED_Initialization
 11800  1B99                     _LED_Initialization:	
 11801                           
 11802                           ;LED_B1.c: 42: setLED_Initialization(99);
 11803                           
 11804                           ;incstack = 0
 11805                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11806  1B99  3063               	movlw	99
 11807  1B9A  319D  2555         	fcall	_setLED_Initialization
 11808  1B9C  0008               	return
 11809  1B9D                     __end_of_LED_Initialization:	
 11810                           
 11811                           	psect	text75
 11812  1D55                     __ptext75:	
 11813 ;; *************** function _setLED_Initialization *****************
 11814 ;; Defined at:
 11815 ;;		line 74 in file "../src/LED_B1.c"
 11816 ;; Parameters:    Size  Location     Type
 11817 ;;  led             1    wreg     unsigned char 
 11818 ;; Auto vars:     Size  Location     Type
 11819 ;;  led             1   10[BANK0 ] unsigned char 
 11820 ;; Return value:  Size  Location     Type
 11821 ;;		None               void
 11822 ;; Registers used:
 11823 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11824 ;; Tracked objects:
 11825 ;;		On entry : 0/0
 11826 ;;		On exit  : 0/0
 11827 ;;		Unchanged: 0/0
 11828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;Total ram usage:        1 bytes
 11834 ;; Hardware stack levels used:    1
 11835 ;; Hardware stack levels required when called:    7
 11836 ;; This function calls:
 11837 ;;		_LedPointSelect
 11838 ;;		_setLED
 11839 ;; This function is called by:
 11840 ;;		_LED_Initialization
 11841 ;; This function uses a non-reentrant model
 11842 ;;
 11843                           
 11844                           
 11845                           ;psect for function _setLED_Initialization
 11846  1D55                     _setLED_Initialization:	
 11847                           
 11848                           ;incstack = 0
 11849                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11850                           ;setLED_Initialization@led stored from wreg
 11851  1D55  0020               	movlb	0	; select bank0
 11852  1D56  00AA               	movwf	setLED_Initialization@led
 11853                           
 11854                           ;LED_B1.c: 75: LedPointSelect(led);
 11855  1D57  082A               	movf	setLED_Initialization@led,w
 11856  1D58  319C  2442  319D   	fcall	_LedPointSelect
 11857                           
 11858                           ;LED_B1.c: 76: LED->Enable = 1;
 11859  1D5B  0020               	movlb	0	; select bank0
 11860  1D5C  0865               	movf	_LED,w
 11861  1D5D  0086               	movwf	6
 11862  1D5E  3001               	movlw	1	; select bank2/3
 11863  1D5F  0087               	movwf	7
 11864  1D60  1401               	bsf	1,0
 11865                           
 11866                           ;LED_B1.c: 77: setLED(led, 0);
 11867  1D61  01A8               	clrf	setLED@command
 11868  1D62  082A               	movf	setLED_Initialization@led,w
 11869  1D63  3192  226F         	fcall	_setLED
 11870  1D65  0008               	return
 11871  1D66                     __end_of_setLED_Initialization:	
 11872                           
 11873                           	psect	text76
 11874  12A5                     __ptext76:	
 11875 ;; *************** function _Flash_Memory_Main *****************
 11876 ;; Defined at:
 11877 ;;		line 971 in file "../src/MCU_B1.c"
 11878 ;; Parameters:    Size  Location     Type
 11879 ;;		None
 11880 ;; Auto vars:     Size  Location     Type
 11881 ;;		None
 11882 ;; Return value:  Size  Location     Type
 11883 ;;		None               void
 11884 ;; Registers used:
 11885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11886 ;; Tracked objects:
 11887 ;;		On entry : 0/0
 11888 ;;		On exit  : 0/0
 11889 ;;		Unchanged: 0/0
 11890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11894 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11895 ;;Total ram usage:        1 bytes
 11896 ;; Hardware stack levels used:    1
 11897 ;; Hardware stack levels required when called:    8
 11898 ;; This function calls:
 11899 ;;		_Flash_Memory_Modify
 11900 ;;		_getMain_All_LightsStatus
 11901 ;; This function is called by:
 11902 ;;		_main
 11903 ;; This function uses a non-reentrant model
 11904 ;;
 11905                           
 11906                           
 11907                           ;psect for function _Flash_Memory_Main
 11908  12A5                     _Flash_Memory_Main:	
 11909                           
 11910                           ;MCU_B1.c: 972: if (Memory.Modify == 1) {
 11911                           
 11912                           ;incstack = 0
 11913                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11914  12A5  0023               	movlb	3	; select bank3
 11915  12A6  1C62               	btfss	(_Memory^(0+384)+36),0
 11916  12A7  0008               	return
 11917                           
 11918                           ;MCU_B1.c: 973: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11919  12A8  319C  2418  3192   	fcall	_getMain_All_LightsStatus
 11920  12AB  3A00               	xorlw	0
 11921  12AC  3000               	movlw	0
 11922  12AD  1903               	skipnz
 11923  12AE  3001               	movlw	1
 11924  12AF  0020               	movlb	0	; select bank0
 11925  12B0  00AC               	movwf	??_Flash_Memory_Main
 11926  12B1  0DAC               	rlf	??_Flash_Memory_Main,f
 11927  12B2  0023               	movlb	3	; select bank3
 11928  12B3  0862               	movf	(_Memory^(0+384)+36),w
 11929  12B4  0020               	movlb	0	; select bank0
 11930  12B5  062C               	xorwf	??_Flash_Memory_Main,w
 11931  12B6  39FD               	andlw	-3
 11932  12B7  062C               	xorwf	??_Flash_Memory_Main,w
 11933  12B8  0023               	movlb	3	; select bank3
 11934  12B9  00E2               	movwf	(_Memory^(0+384)+36)
 11935                           
 11936                           ;MCU_B1.c: 974: if (Memory.GO == 1) {
 11937  12BA  1CE2               	btfss	(_Memory^(0+384)+36),1
 11938  12BB  2AD5               	goto	l1232
 11939                           
 11940                           ;MCU_B1.c: 975: Memory.Runtime = 1;
 11941  12BC  15E2               	bsf	(_Memory^(0+384)+36),3
 11942                           
 11943                           ;MCU_B1.c: 976: Memory.Time++;
 11944  12BD  3001               	movlw	1
 11945  12BE  07E0               	addwf	(_Memory^(0+384)+34),f
 11946  12BF  3000               	movlw	0
 11947  12C0  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11948                           
 11949                           ;MCU_B1.c: 977: if (Memory.Time == (200 / 20)) {
 11950  12C1  3022               	movlw	34
 11951  12C2  3EBE               	addlw	_Memory& (0+255)
 11952  12C3  0086               	movwf	6
 11953  12C4  3001               	movlw	1	; select bank3/4
 11954  12C5  0087               	movwf	7
 11955  12C6  3F40               	moviw [0]fsr1
 11956  12C7  3A0A               	xorlw	10
 11957  12C8  1D03               	skipz
 11958  12C9  2ACC               	goto	u14345
 11959  12CA  3F41               	moviw [1]fsr1
 11960  12CB  3A00               	xorlw	0
 11961  12CC                     u14345:	
 11962  12CC  1D03               	skipz
 11963  12CD  0008               	return
 11964                           
 11965                           ;MCU_B1.c: 978: Memory.Time = 0;
 11966  12CE  01E0               	clrf	(_Memory^(0+384)+34)
 11967  12CF  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11968                           
 11969                           ;MCU_B1.c: 979: Memory.Modify = 0;
 11970  12D0  1062               	bcf	(_Memory^(0+384)+36),0
 11971                           
 11972                           ;MCU_B1.c: 980: Memory.GO = 0;
 11973  12D1  10E2               	bcf	(_Memory^(0+384)+36),1
 11974                           
 11975                           ;MCU_B1.c: 981: Flash_Memory_Modify();
 11976  12D2  3194  2455         	fcall	_Flash_Memory_Modify
 11977                           
 11978                           ;MCU_B1.c: 982: }
 11979                           ;MCU_B1.c: 983: } else {
 11980  12D4  0008               	return
 11981  12D5                     l1232:	
 11982                           
 11983                           ;MCU_B1.c: 984: if (Memory.Runtime == 1) {
 11984  12D5  1DE2               	btfss	(_Memory^(0+384)+36),3
 11985  12D6  0008               	return
 11986                           
 11987                           ;MCU_B1.c: 985: Memory.Runtime = 0;
 11988  12D7  11E2               	bcf	(_Memory^(0+384)+36),3
 11989                           
 11990                           ;MCU_B1.c: 986: Memory.Time = 0;
 11991  12D8  01E0               	clrf	(_Memory^(0+384)+34)
 11992  12D9  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11993  12DA  0008               	return
 11994  12DB                     __end_of_Flash_Memory_Main:	
 11995                           
 11996                           	psect	text77
 11997  1455                     __ptext77:	
 11998 ;; *************** function _Flash_Memory_Modify *****************
 11999 ;; Defined at:
 12000 ;;		line 1044 in file "../src/MCU_B1.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;		None
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;  i               1   11[BANK0 ] unsigned char 
 12005 ;; Return value:  Size  Location     Type
 12006 ;;		None               void
 12007 ;; Registers used:
 12008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12009 ;; Tracked objects:
 12010 ;;		On entry : 0/0
 12011 ;;		On exit  : 0/0
 12012 ;;		Unchanged: 0/0
 12013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;Total ram usage:        2 bytes
 12019 ;; Hardware stack levels used:    1
 12020 ;; Hardware stack levels required when called:    7
 12021 ;; This function calls:
 12022 ;;		_Flash_Memory_Erasing
 12023 ;;		_Flash_Memory_Read
 12024 ;;		_Flash_Memory_Write
 12025 ;;		_setMemory_Data
 12026 ;; This function is called by:
 12027 ;;		_Flash_Memory_Main
 12028 ;; This function uses a non-reentrant model
 12029 ;;
 12030                           
 12031                           
 12032                           ;psect for function _Flash_Memory_Modify
 12033  1455                     _Flash_Memory_Modify:	
 12034                           
 12035                           ;MCU_B1.c: 1045: char i = 0;
 12036                           
 12037                           ;incstack = 0
 12038                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12039  1455  0020               	movlb	0	; select bank0
 12040  1456  01AB               	clrf	Flash_Memory_Modify@i
 12041                           
 12042                           ;MCU_B1.c: 1046: for (i = 0; i < 32; i++) {
 12043  1457  01AB               	clrf	Flash_Memory_Modify@i
 12044  1458  3020               	movlw	32
 12045  1459  022B               	subwf	Flash_Memory_Modify@i,w
 12046  145A  1803               	btfsc	3,0
 12047  145B  2C71               	goto	l9423
 12048  145C                     l9417:	
 12049                           
 12050                           ;MCU_B1.c: 1047: Memory.Data[i] = Flash_Memory_Read(i);
 12051  145C  082B               	movf	Flash_Memory_Modify@i,w
 12052  145D  319F  2794  3194   	fcall	_Flash_Memory_Read
 12053  1460  0020               	movlb	0	; select bank0
 12054  1461  00AA               	movwf	??_Flash_Memory_Modify
 12055  1462  082B               	movf	Flash_Memory_Modify@i,w
 12056  1463  3EBE               	addlw	_Memory& (0+255)
 12057  1464  0086               	movwf	6
 12058  1465  3001               	movlw	1	; select bank3/4
 12059  1466  0087               	movwf	7
 12060  1467  082A               	movf	??_Flash_Memory_Modify,w
 12061  1468  0081               	movwf	1
 12062  1469  3001               	movlw	1
 12063  146A  00AA               	movwf	??_Flash_Memory_Modify
 12064  146B  082A               	movf	??_Flash_Memory_Modify,w
 12065  146C  07AB               	addwf	Flash_Memory_Modify@i,f
 12066  146D  3020               	movlw	32
 12067  146E  022B               	subwf	Flash_Memory_Modify@i,w
 12068  146F  1C03               	skipc
 12069  1470  2C5C               	goto	l9417
 12070  1471                     l9423:	
 12071                           
 12072                           ;MCU_B1.c: 1048: }
 12073                           ;MCU_B1.c: 1049: setMemory_Data(0, product->Data[12]);
 12074  1471  0021               	movlb	1	; select bank1
 12075  1472  086F               	movf	_product^(0+128),w
 12076  1473  0086               	movwf	6
 12077  1474  3002               	movlw	2	; select bank4/5
 12078  1475  0087               	movwf	7
 12079  1476  3002               	movlw	2	; select bank4/5
 12080  1477  3F4C               	moviw [12]fsr1
 12081  1478  0020               	movlb	0	; select bank0
 12082  1479  00A6               	movwf	setMemory_Data@data
 12083  147A  3000               	movlw	0
 12084  147B  319C  2490  3194   	fcall	_setMemory_Data
 12085                           
 12086                           ;MCU_B1.c: 1050: setMemory_Data(1, product->Data[13]);
 12087  147E  0021               	movlb	1	; select bank1
 12088  147F  086F               	movf	_product^(0+128),w
 12089  1480  0086               	movwf	6
 12090  1481  3002               	movlw	2	; select bank4/5
 12091  1482  0087               	movwf	7
 12092  1483  3002               	movlw	2	; select bank4/5
 12093  1484  3F4D               	moviw [13]fsr1
 12094  1485  0020               	movlb	0	; select bank0
 12095  1486  00A6               	movwf	setMemory_Data@data
 12096  1487  3001               	movlw	1
 12097  1488  319C  2490  3194   	fcall	_setMemory_Data
 12098                           
 12099                           ;MCU_B1.c: 1051: setMemory_Data(2, product->Data[14]);
 12100  148B  0021               	movlb	1	; select bank1
 12101  148C  086F               	movf	_product^(0+128),w
 12102  148D  0086               	movwf	6
 12103  148E  3002               	movlw	2	; select bank4/5
 12104  148F  0087               	movwf	7
 12105  1490  3002               	movlw	2	; select bank4/5
 12106  1491  3F4E               	moviw [14]fsr1
 12107  1492  0020               	movlb	0	; select bank0
 12108  1493  00A6               	movwf	setMemory_Data@data
 12109  1494  3002               	movlw	2
 12110  1495  319C  2490  3194   	fcall	_setMemory_Data
 12111                           
 12112                           ;MCU_B1.c: 1057: if (Memory.LoopSave == 1) {
 12113  1498  0023               	movlb	3	; select bank3
 12114  1499  1D62               	btfss	(_Memory^(0+384)+36),2
 12115  149A  2C9F               	goto	l1255
 12116                           
 12117                           ;MCU_B1.c: 1058: Memory.LoopSave = 0;
 12118  149B  1162               	bcf	(_Memory^(0+384)+36),2
 12119                           
 12120                           ;MCU_B1.c: 1059: myMain.FirstOpen = 0;
 12121  149C  0022               	movlb	2	; select bank2
 12122  149D  11A0               	bcf	_myMain^(0+256),3
 12123                           
 12124                           ;MCU_B1.c: 1060: myMain.First = 0;
 12125  149E  12A0               	bcf	_myMain^(0+256),5
 12126  149F                     l1255:	
 12127                           
 12128                           ;MCU_B1.c: 1062: }
 12129                           ;MCU_B1.c: 1063: GIE = 0;
 12130  149F  138B               	bcf	11,7	;volatile
 12131                           
 12132                           ;MCU_B1.c: 1064: Flash_Memory_Erasing();
 12133  14A0  319C  249C  3194   	fcall	_Flash_Memory_Erasing
 12134                           
 12135                           ;MCU_B1.c: 1065: Flash_Memory_Write();
 12136  14A3  3191  2173         	fcall	_Flash_Memory_Write
 12137                           
 12138                           ;MCU_B1.c: 1066: GIE = 1;
 12139  14A5  178B               	bsf	11,7	;volatile
 12140  14A6  0008               	return
 12141  14A7                     __end_of_Flash_Memory_Modify:	
 12142                           
 12143                           	psect	text78
 12144  1C9C                     __ptext78:	
 12145 ;; *************** function _Flash_Memory_Erasing *****************
 12146 ;; Defined at:
 12147 ;;		line 1033 in file "../src/MCU_B1.c"
 12148 ;; Parameters:    Size  Location     Type
 12149 ;;		None
 12150 ;; Auto vars:     Size  Location     Type
 12151 ;;		None
 12152 ;; Return value:  Size  Location     Type
 12153 ;;		None               void
 12154 ;; Registers used:
 12155 ;;		wreg, status,2, status,0, pclath, cstack
 12156 ;; Tracked objects:
 12157 ;;		On entry : 0/0
 12158 ;;		On exit  : 0/0
 12159 ;;		Unchanged: 0/0
 12160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12165 ;;Total ram usage:        0 bytes
 12166 ;; Hardware stack levels used:    1
 12167 ;; Hardware stack levels required when called:    6
 12168 ;; This function calls:
 12169 ;;		_Flash_Memory_Unlock
 12170 ;; This function is called by:
 12171 ;;		_Flash_Memory_Modify
 12172 ;; This function uses a non-reentrant model
 12173 ;;
 12174                           
 12175                           
 12176                           ;psect for function _Flash_Memory_Erasing
 12177  1C9C                     _Flash_Memory_Erasing:	
 12178                           
 12179                           ;MCU_B1.c: 1034: CFGS = 0;
 12180                           
 12181                           ;incstack = 0
 12182                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12183  1C9C  0023               	movlb	3	; select bank3
 12184  1C9D  1315               	bcf	21,6	;volatile
 12185                           
 12186                           ;MCU_B1.c: 1035: PMADRH = 0x30;
 12187  1C9E  3030               	movlw	48
 12188  1C9F  0092               	movwf	18	;volatile
 12189                           
 12190                           ;MCU_B1.c: 1036: PMADRL = 0x00;
 12191  1CA0  0191               	clrf	17	;volatile
 12192                           
 12193                           ;MCU_B1.c: 1037: FREE = 1;
 12194  1CA1  1615               	bsf	21,4	;volatile
 12195                           
 12196                           ;MCU_B1.c: 1038: WREN = 1;
 12197  1CA2  1515               	bsf	21,2	;volatile
 12198                           
 12199                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
 12200  1CA3  319C  240F         	fcall	_Flash_Memory_Unlock
 12201                           
 12202                           ;MCU_B1.c: 1040: WREN = 0;
 12203  1CA5  0023               	movlb	3	; select bank3
 12204  1CA6  1115               	bcf	21,2	;volatile
 12205  1CA7  0008               	return
 12206  1CA8                     __end_of_Flash_Memory_Erasing:	
 12207                           
 12208                           	psect	text79
 12209  0372                     __ptext79:	
 12210 ;; *************** function _Flash_Memory_Initialization *****************
 12211 ;; Defined at:
 12212 ;;		line 930 in file "../src/MCU_B1.c"
 12213 ;; Parameters:    Size  Location     Type
 12214 ;;		None
 12215 ;; Auto vars:     Size  Location     Type
 12216 ;;  i               1    6[BANK1 ] unsigned char 
 12217 ;; Return value:  Size  Location     Type
 12218 ;;		None               void
 12219 ;; Registers used:
 12220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12221 ;; Tracked objects:
 12222 ;;		On entry : 0/0
 12223 ;;		On exit  : 0/0
 12224 ;;		Unchanged: 0/0
 12225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12230 ;;Total ram usage:        2 bytes
 12231 ;; Hardware stack levels used:    1
 12232 ;; Hardware stack levels required when called:    8
 12233 ;; This function calls:
 12234 ;;		_Flash_Memory_Read
 12235 ;;		_Flash_Memory_Write
 12236 ;;		_getDimmerLights_ValueToPercent
 12237 ;;		_setMemory_Data
 12238 ;; This function is called by:
 12239 ;;		_main
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           
 12244                           ;psect for function _Flash_Memory_Initialization
 12245  0372                     _Flash_Memory_Initialization:	
 12246                           
 12247                           ;MCU_B1.c: 931: char i = 0;
 12248                           
 12249                           ;incstack = 0
 12250                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12251  0372  0021               	movlb	1	; select bank1
 12252  0373  01E1               	clrf	Flash_Memory_Initialization@i^(0+128)
 12253                           
 12254                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12255  0374  301F               	movlw	31
 12256  0375  319F  2794  3183   	fcall	_Flash_Memory_Read
 12257  0378  3AAA               	xorlw	170
 12258  0379  1D03               	skipz
 12259  037A  2BF7               	goto	l11669
 12260                           
 12261                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12262  037B  3000               	movlw	0
 12263  037C  319F  2794  3183   	fcall	_Flash_Memory_Read
 12264  037F  0020               	movlb	0	; select bank0
 12265  0380  00E2               	movwf	??_Flash_Memory_Initialization
 12266  0381  0021               	movlb	1	; select bank1
 12267  0382  086F               	movf	_product^(0+128),w
 12268  0383  3E0C               	addlw	12
 12269  0384  0086               	movwf	6
 12270  0385  3002               	movlw	2	; select bank4/5
 12271  0386  0087               	movwf	7
 12272  0387  0020               	movlb	0	; select bank0
 12273  0388  0862               	movf	??_Flash_Memory_Initialization,w
 12274  0389  0081               	movwf	1
 12275                           
 12276                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12277  038A  3001               	movlw	1
 12278  038B  319F  2794  3183   	fcall	_Flash_Memory_Read
 12279  038E  0020               	movlb	0	; select bank0
 12280  038F  00E2               	movwf	??_Flash_Memory_Initialization
 12281  0390  0021               	movlb	1	; select bank1
 12282  0391  086F               	movf	_product^(0+128),w
 12283  0392  3E0D               	addlw	13
 12284  0393  0086               	movwf	6
 12285  0394  3002               	movlw	2	; select bank4/5
 12286  0395  0087               	movwf	7
 12287  0396  0020               	movlb	0	; select bank0
 12288  0397  0862               	movf	??_Flash_Memory_Initialization,w
 12289  0398  0081               	movwf	1
 12290                           
 12291                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12292  0399  3002               	movlw	2
 12293  039A  319F  2794  3183   	fcall	_Flash_Memory_Read
 12294  039D  0020               	movlb	0	; select bank0
 12295  039E  00E2               	movwf	??_Flash_Memory_Initialization
 12296  039F  0021               	movlb	1	; select bank1
 12297  03A0  086F               	movf	_product^(0+128),w
 12298  03A1  3E0E               	addlw	14
 12299  03A2  0086               	movwf	6
 12300  03A3  3002               	movlw	2	; select bank4/5
 12301  03A4  0087               	movwf	7
 12302  03A5  0020               	movlb	0	; select bank0
 12303  03A6  0862               	movf	??_Flash_Memory_Initialization,w
 12304  03A7  0081               	movwf	1
 12305                           
 12306                           ;MCU_B1.c: 941: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12307  03A8  3034               	movlw	52
 12308  03A9  318A  2208  3183   	fcall	_getDimmerLights_ValueToPercent
 12309  03AC  0020               	movlb	0	; select bank0
 12310  03AD  00E2               	movwf	??_Flash_Memory_Initialization
 12311  03AE  0862               	movf	??_Flash_Memory_Initialization,w
 12312  03AF  0021               	movlb	1	; select bank1
 12313  03B0  00E1               	movwf	Flash_Memory_Initialization@i^(0+128)
 12314                           
 12315                           ;MCU_B1.c: 942: product->Data[21] = i;
 12316  03B1  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12317  03B2  0020               	movlb	0	; select bank0
 12318  03B3  00E2               	movwf	??_Flash_Memory_Initialization
 12319  03B4  0021               	movlb	1	; select bank1
 12320  03B5  086F               	movf	_product^(0+128),w
 12321  03B6  3E15               	addlw	21
 12322  03B7  0086               	movwf	6
 12323  03B8  3002               	movlw	2	; select bank4/5
 12324  03B9  0087               	movwf	7
 12325  03BA  0020               	movlb	0	; select bank0
 12326  03BB  0862               	movf	??_Flash_Memory_Initialization,w
 12327  03BC  0081               	movwf	1
 12328                           
 12329                           ;MCU_B1.c: 943: product->Data[22] = i;
 12330  03BD  0021               	movlb	1	; select bank1
 12331  03BE  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12332  03BF  0020               	movlb	0	; select bank0
 12333  03C0  00E2               	movwf	??_Flash_Memory_Initialization
 12334  03C1  0021               	movlb	1	; select bank1
 12335  03C2  086F               	movf	_product^(0+128),w
 12336  03C3  3E16               	addlw	22
 12337  03C4  0086               	movwf	6
 12338  03C5  3002               	movlw	2	; select bank4/5
 12339  03C6  0087               	movwf	7
 12340  03C7  0020               	movlb	0	; select bank0
 12341  03C8  0862               	movf	??_Flash_Memory_Initialization,w
 12342  03C9  0081               	movwf	1
 12343                           
 12344                           ;MCU_B1.c: 944: product->Data[23] = i;
 12345  03CA  0021               	movlb	1	; select bank1
 12346  03CB  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12347  03CC  0020               	movlb	0	; select bank0
 12348  03CD  00E2               	movwf	??_Flash_Memory_Initialization
 12349  03CE  0021               	movlb	1	; select bank1
 12350  03CF  086F               	movf	_product^(0+128),w
 12351  03D0  3E17               	addlw	23
 12352  03D1  0086               	movwf	6
 12353  03D2  3002               	movlw	2	; select bank4/5
 12354  03D3  0087               	movwf	7
 12355  03D4  0020               	movlb	0	; select bank0
 12356  03D5  0862               	movf	??_Flash_Memory_Initialization,w
 12357  03D6  0081               	movwf	1
 12358                           
 12359                           ;MCU_B1.c: 946: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12360  03D7  0021               	movlb	1	; select bank1
 12361  03D8  086F               	movf	_product^(0+128),w
 12362  03D9  3E0C               	addlw	12
 12363  03DA  0086               	movwf	6
 12364  03DB  3002               	movlw	2	; select bank4/5
 12365  03DC  0087               	movwf	7
 12366  03DD  0801               	movf	1,w
 12367  03DE  3AFF               	xorlw	255
 12368  03DF  1D03               	skipz
 12369  03E0  0008               	return
 12370  03E1  086F               	movf	_product^(0+128),w
 12371  03E2  3E0D               	addlw	13
 12372  03E3  0086               	movwf	6
 12373  03E4  3002               	movlw	2	; select bank4/5
 12374  03E5  0087               	movwf	7
 12375  03E6  0801               	movf	1,w
 12376  03E7  3AFF               	xorlw	255
 12377  03E8  1D03               	skipz
 12378  03E9  0008               	return
 12379  03EA  086F               	movf	_product^(0+128),w
 12380  03EB  3E0E               	addlw	14
 12381  03EC  0086               	movwf	6
 12382  03ED  3002               	movlw	2	; select bank4/5
 12383  03EE  0087               	movwf	7
 12384  03EF  0801               	movf	1,w
 12385  03F0  3AFF               	xorlw	255
 12386  03F1  1D03               	skipz
 12387  03F2  0008               	return
 12388                           
 12389                           ;MCU_B1.c: 947: myMain.FirstOpen = 1;
 12390  03F3  0022               	movlb	2	; select bank2
 12391  03F4  15A0               	bsf	_myMain^(0+256),3
 12392                           
 12393                           ;MCU_B1.c: 948: myMain.First = 1;
 12394  03F5  16A0               	bsf	_myMain^(0+256),5
 12395                           
 12396                           ;MCU_B1.c: 949: }
 12397                           ;MCU_B1.c: 950: } else {
 12398  03F6  0008               	return
 12399  03F7                     l11669:	
 12400                           
 12401                           ;MCU_B1.c: 951: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12402  03F7  3034               	movlw	52
 12403  03F8  318A  2208  3183   	fcall	_getDimmerLights_ValueToPercent
 12404  03FB  0020               	movlb	0	; select bank0
 12405  03FC  00E2               	movwf	??_Flash_Memory_Initialization
 12406  03FD  0862               	movf	??_Flash_Memory_Initialization,w
 12407  03FE  0021               	movlb	1	; select bank1
 12408  03FF  00E1               	movwf	Flash_Memory_Initialization@i^(0+128)
 12409                           
 12410                           ;MCU_B1.c: 952: setMemory_Data(0, 0xff);
 12411  0400  30FF               	movlw	255
 12412  0401  0020               	movlb	0	; select bank0
 12413  0402  00E2               	movwf	??_Flash_Memory_Initialization
 12414  0403  0862               	movf	??_Flash_Memory_Initialization,w
 12415  0404  00A6               	movwf	setMemory_Data@data
 12416  0405  3000               	movlw	0
 12417  0406  319C  2490  3183   	fcall	_setMemory_Data
 12418                           
 12419                           ;MCU_B1.c: 953: setMemory_Data(1, 0xff);
 12420  0409  30FF               	movlw	255
 12421  040A  0020               	movlb	0	; select bank0
 12422  040B  00E2               	movwf	??_Flash_Memory_Initialization
 12423  040C  0862               	movf	??_Flash_Memory_Initialization,w
 12424  040D  00A6               	movwf	setMemory_Data@data
 12425  040E  3001               	movlw	1
 12426  040F  319C  2490  3183   	fcall	_setMemory_Data
 12427                           
 12428                           ;MCU_B1.c: 954: setMemory_Data(2, 0xff);
 12429  0412  30FF               	movlw	255
 12430  0413  0020               	movlb	0	; select bank0
 12431  0414  00E2               	movwf	??_Flash_Memory_Initialization
 12432  0415  0862               	movf	??_Flash_Memory_Initialization,w
 12433  0416  00A6               	movwf	setMemory_Data@data
 12434  0417  3002               	movlw	2
 12435  0418  319C  2490  3183   	fcall	_setMemory_Data
 12436                           
 12437                           ;MCU_B1.c: 955: setMemory_Data(3, 0xff);
 12438  041B  30FF               	movlw	255
 12439  041C  0020               	movlb	0	; select bank0
 12440  041D  00E2               	movwf	??_Flash_Memory_Initialization
 12441  041E  0862               	movf	??_Flash_Memory_Initialization,w
 12442  041F  00A6               	movwf	setMemory_Data@data
 12443  0420  3003               	movlw	3
 12444  0421  319C  2490  3183   	fcall	_setMemory_Data
 12445                           
 12446                           ;MCU_B1.c: 956: setMemory_Data(4, 0xff);
 12447  0424  30FF               	movlw	255
 12448  0425  0020               	movlb	0	; select bank0
 12449  0426  00E2               	movwf	??_Flash_Memory_Initialization
 12450  0427  0862               	movf	??_Flash_Memory_Initialization,w
 12451  0428  00A6               	movwf	setMemory_Data@data
 12452  0429  3004               	movlw	4
 12453  042A  319C  2490  3183   	fcall	_setMemory_Data
 12454                           
 12455                           ;MCU_B1.c: 957: setMemory_Data(5, 0xff);
 12456  042D  30FF               	movlw	255
 12457  042E  0020               	movlb	0	; select bank0
 12458  042F  00E2               	movwf	??_Flash_Memory_Initialization
 12459  0430  0862               	movf	??_Flash_Memory_Initialization,w
 12460  0431  00A6               	movwf	setMemory_Data@data
 12461  0432  3005               	movlw	5
 12462  0433  319C  2490  3183   	fcall	_setMemory_Data
 12463                           
 12464                           ;MCU_B1.c: 958: setMemory_Data(31, 0xaa);
 12465  0436  30AA               	movlw	170
 12466  0437  0020               	movlb	0	; select bank0
 12467  0438  00E2               	movwf	??_Flash_Memory_Initialization
 12468  0439  0862               	movf	??_Flash_Memory_Initialization,w
 12469  043A  00A6               	movwf	setMemory_Data@data
 12470  043B  301F               	movlw	31
 12471  043C  319C  2490  3183   	fcall	_setMemory_Data
 12472                           
 12473                           ;MCU_B1.c: 959: product->Data[21] = i;
 12474  043F  0021               	movlb	1	; select bank1
 12475  0440  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12476  0441  0020               	movlb	0	; select bank0
 12477  0442  00E2               	movwf	??_Flash_Memory_Initialization
 12478  0443  0021               	movlb	1	; select bank1
 12479  0444  086F               	movf	_product^(0+128),w
 12480  0445  3E15               	addlw	21
 12481  0446  0086               	movwf	6
 12482  0447  3002               	movlw	2	; select bank4/5
 12483  0448  0087               	movwf	7
 12484  0449  0020               	movlb	0	; select bank0
 12485  044A  0862               	movf	??_Flash_Memory_Initialization,w
 12486  044B  0081               	movwf	1
 12487                           
 12488                           ;MCU_B1.c: 960: product->Data[22] = i;
 12489  044C  0021               	movlb	1	; select bank1
 12490  044D  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12491  044E  0020               	movlb	0	; select bank0
 12492  044F  00E2               	movwf	??_Flash_Memory_Initialization
 12493  0450  0021               	movlb	1	; select bank1
 12494  0451  086F               	movf	_product^(0+128),w
 12495  0452  3E16               	addlw	22
 12496  0453  0086               	movwf	6
 12497  0454  3002               	movlw	2	; select bank4/5
 12498  0455  0087               	movwf	7
 12499  0456  0020               	movlb	0	; select bank0
 12500  0457  0862               	movf	??_Flash_Memory_Initialization,w
 12501  0458  0081               	movwf	1
 12502                           
 12503                           ;MCU_B1.c: 961: product->Data[23] = i;
 12504  0459  0021               	movlb	1	; select bank1
 12505  045A  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12506  045B  0020               	movlb	0	; select bank0
 12507  045C  00E2               	movwf	??_Flash_Memory_Initialization
 12508  045D  0021               	movlb	1	; select bank1
 12509  045E  086F               	movf	_product^(0+128),w
 12510  045F  3E17               	addlw	23
 12511  0460  0086               	movwf	6
 12512  0461  3002               	movlw	2	; select bank4/5
 12513  0462  0087               	movwf	7
 12514  0463  0020               	movlb	0	; select bank0
 12515  0464  0862               	movf	??_Flash_Memory_Initialization,w
 12516  0465  0081               	movwf	1
 12517                           
 12518                           ;MCU_B1.c: 962: GIE = 0;
 12519  0466  138B               	bcf	11,7	;volatile
 12520                           
 12521                           ;MCU_B1.c: 963: Flash_Memory_Write();
 12522  0467  3191  2173         	fcall	_Flash_Memory_Write
 12523                           
 12524                           ;MCU_B1.c: 964: GIE = 1;
 12525  0469  178B               	bsf	11,7	;volatile
 12526                           
 12527                           ;MCU_B1.c: 965: myMain.FirstOpen = 1;
 12528  046A  0022               	movlb	2	; select bank2
 12529  046B  15A0               	bsf	_myMain^(0+256),3
 12530                           
 12531                           ;MCU_B1.c: 966: myMain.First = 1;
 12532  046C  16A0               	bsf	_myMain^(0+256),5
 12533  046D  0008               	return
 12534  046E                     __end_of_Flash_Memory_Initialization:	
 12535                           
 12536                           	psect	text80
 12537  1C90                     __ptext80:	
 12538 ;; *************** function _setMemory_Data *****************
 12539 ;; Defined at:
 12540 ;;		line 1081 in file "../src/MCU_B1.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;  address         1    wreg     unsigned char 
 12543 ;;  data            1    6[BANK0 ] unsigned char 
 12544 ;; Auto vars:     Size  Location     Type
 12545 ;;  address         1    8[BANK0 ] unsigned char 
 12546 ;; Return value:  Size  Location     Type
 12547 ;;		None               void
 12548 ;; Registers used:
 12549 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12550 ;; Tracked objects:
 12551 ;;		On entry : 0/0
 12552 ;;		On exit  : 0/0
 12553 ;;		Unchanged: 0/0
 12554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12555 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;Total ram usage:        3 bytes
 12560 ;; Hardware stack levels used:    1
 12561 ;; Hardware stack levels required when called:    5
 12562 ;; This function calls:
 12563 ;;		Nothing
 12564 ;; This function is called by:
 12565 ;;		_Flash_Memory_Initialization
 12566 ;;		_Flash_Memory_Modify
 12567 ;; This function uses a non-reentrant model
 12568 ;;
 12569                           
 12570                           
 12571                           ;psect for function _setMemory_Data
 12572  1C90                     _setMemory_Data:	
 12573                           
 12574                           ;incstack = 0
 12575                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12576                           ;setMemory_Data@address stored from wreg
 12577  1C90  0020               	movlb	0	; select bank0
 12578  1C91  00A8               	movwf	setMemory_Data@address
 12579                           
 12580                           ;MCU_B1.c: 1082: Memory.Data[address] = data;
 12581  1C92  0826               	movf	setMemory_Data@data,w
 12582  1C93  00A7               	movwf	??_setMemory_Data
 12583  1C94  0828               	movf	setMemory_Data@address,w
 12584  1C95  3EBE               	addlw	_Memory& (0+255)
 12585  1C96  0086               	movwf	6
 12586  1C97  3001               	movlw	1	; select bank3/4
 12587  1C98  0087               	movwf	7
 12588  1C99  0827               	movf	??_setMemory_Data,w
 12589  1C9A  0081               	movwf	1
 12590  1C9B  0008               	return
 12591  1C9C                     __end_of_setMemory_Data:	
 12592                           
 12593                           	psect	text81
 12594  1173                     __ptext81:	
 12595 ;; *************** function _Flash_Memory_Write *****************
 12596 ;; Defined at:
 12597 ;;		line 1014 in file "../src/MCU_B1.c"
 12598 ;; Parameters:    Size  Location     Type
 12599 ;;		None
 12600 ;; Auto vars:     Size  Location     Type
 12601 ;;  i               1    7[BANK0 ] unsigned char 
 12602 ;; Return value:  Size  Location     Type
 12603 ;;		None               void
 12604 ;; Registers used:
 12605 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12606 ;; Tracked objects:
 12607 ;;		On entry : 0/0
 12608 ;;		On exit  : 0/0
 12609 ;;		Unchanged: 0/0
 12610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12615 ;;Total ram usage:        2 bytes
 12616 ;; Hardware stack levels used:    1
 12617 ;; Hardware stack levels required when called:    6
 12618 ;; This function calls:
 12619 ;;		_Flash_Memory_Unlock
 12620 ;; This function is called by:
 12621 ;;		_Flash_Memory_Initialization
 12622 ;;		_Flash_Memory_Modify
 12623 ;; This function uses a non-reentrant model
 12624 ;;
 12625                           
 12626                           
 12627                           ;psect for function _Flash_Memory_Write
 12628  1173                     _Flash_Memory_Write:	
 12629                           
 12630                           ;MCU_B1.c: 1015: char i = 0;
 12631                           
 12632                           ;incstack = 0
 12633                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12634  1173  0020               	movlb	0	; select bank0
 12635  1174  01A7               	clrf	Flash_Memory_Write@i
 12636                           
 12637                           ;MCU_B1.c: 1016: CFGS = 0;
 12638  1175  0023               	movlb	3	; select bank3
 12639  1176  1315               	bcf	21,6	;volatile
 12640                           
 12641                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 12642  1177  3030               	movlw	48
 12643  1178  0092               	movwf	18	;volatile
 12644                           
 12645                           ;MCU_B1.c: 1018: PMDATH = 0;
 12646  1179  0194               	clrf	20	;volatile
 12647                           
 12648                           ;MCU_B1.c: 1019: FREE = 0;
 12649  117A  1215               	bcf	21,4	;volatile
 12650                           
 12651                           ;MCU_B1.c: 1020: LWLO = 1;
 12652  117B  1695               	bsf	21,5	;volatile
 12653                           
 12654                           ;MCU_B1.c: 1021: WREN = 1;
 12655  117C  1515               	bsf	21,2	;volatile
 12656                           
 12657                           ;MCU_B1.c: 1022: for (i = 0; i < 32; i++) {
 12658  117D  0020               	movlb	0	; select bank0
 12659  117E  01A7               	clrf	Flash_Memory_Write@i
 12660  117F  3020               	movlw	32
 12661  1180  0227               	subwf	Flash_Memory_Write@i,w
 12662  1181  1803               	btfsc	3,0
 12663  1182  299B               	goto	l1246
 12664  1183                     l9235:	
 12665                           
 12666                           ;MCU_B1.c: 1023: PMADRL = i;
 12667  1183  0827               	movf	Flash_Memory_Write@i,w
 12668  1184  0023               	movlb	3	; select bank3
 12669  1185  0091               	movwf	17	;volatile
 12670                           
 12671                           ;MCU_B1.c: 1024: PMDATL = Memory.Data[i];
 12672  1186  0020               	movlb	0	; select bank0
 12673  1187  0827               	movf	Flash_Memory_Write@i,w
 12674  1188  3EBE               	addlw	_Memory& (0+255)
 12675  1189  0086               	movwf	6
 12676  118A  3001               	movlw	1	; select bank3/4
 12677  118B  0087               	movwf	7
 12678  118C  0801               	movf	1,w
 12679  118D  0023               	movlb	3	; select bank3
 12680  118E  0093               	movwf	19	;volatile
 12681                           
 12682                           ;MCU_B1.c: 1025: Flash_Memory_Unlock();
 12683  118F  319C  240F  3191   	fcall	_Flash_Memory_Unlock
 12684  1192  3001               	movlw	1
 12685  1193  0020               	movlb	0	; select bank0
 12686  1194  00A6               	movwf	??_Flash_Memory_Write
 12687  1195  0826               	movf	??_Flash_Memory_Write,w
 12688  1196  07A7               	addwf	Flash_Memory_Write@i,f
 12689  1197  3020               	movlw	32
 12690  1198  0227               	subwf	Flash_Memory_Write@i,w
 12691  1199  1C03               	skipc
 12692  119A  2983               	goto	l9235
 12693  119B                     l1246:	
 12694                           
 12695                           ;MCU_B1.c: 1026: }
 12696                           ;MCU_B1.c: 1027: LWLO = 0;
 12697  119B  0023               	movlb	3	; select bank3
 12698  119C  1295               	bcf	21,5	;volatile
 12699                           
 12700                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12701  119D  319C  240F         	fcall	_Flash_Memory_Unlock
 12702                           
 12703                           ;MCU_B1.c: 1029: WREN = 0;
 12704  119F  0023               	movlb	3	; select bank3
 12705  11A0  1115               	bcf	21,2	;volatile
 12706  11A1  0008               	return
 12707  11A2                     __end_of_Flash_Memory_Write:	
 12708                           
 12709                           	psect	text82
 12710  1C0F                     __ptext82:	
 12711 ;; *************** function _Flash_Memory_Unlock *****************
 12712 ;; Defined at:
 12713 ;;		line 993 in file "../src/MCU_B1.c"
 12714 ;; Parameters:    Size  Location     Type
 12715 ;;		None
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;		None
 12718 ;; Return value:  Size  Location     Type
 12719 ;;		None               void
 12720 ;; Registers used:
 12721 ;;		wreg
 12722 ;; Tracked objects:
 12723 ;;		On entry : 0/0
 12724 ;;		On exit  : 0/0
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;Total ram usage:        0 bytes
 12732 ;; Hardware stack levels used:    1
 12733 ;; Hardware stack levels required when called:    5
 12734 ;; This function calls:
 12735 ;;		Nothing
 12736 ;; This function is called by:
 12737 ;;		_Flash_Memory_Write
 12738 ;;		_Flash_Memory_Erasing
 12739 ;; This function uses a non-reentrant model
 12740 ;;
 12741                           
 12742                           
 12743                           ;psect for function _Flash_Memory_Unlock
 12744  1C0F                     _Flash_Memory_Unlock:	
 12745                           
 12746                           ;MCU_B1.c: 994: PMCON2 = 0x55;
 12747                           
 12748                           ;incstack = 0
 12749                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12750  1C0F  3055               	movlw	85
 12751  1C10  0023               	movlb	3	; select bank3
 12752  1C11  0096               	movwf	22	;volatile
 12753                           
 12754                           ;MCU_B1.c: 995: PMCON2 = 0xaa;
 12755  1C12  30AA               	movlw	170
 12756  1C13  0096               	movwf	22	;volatile
 12757                           
 12758                           ;MCU_B1.c: 996: WR = 1;
 12759  1C14  1495               	bsf	21,1	;volatile
 12760                           
 12761                           ;MCU_B1.c: 997: __nop();
 12762  1C15  0000               	nop
 12763                           
 12764                           ;MCU_B1.c: 998: __nop();
 12765  1C16  0000               	nop
 12766  1C17  0008               	return
 12767  1C18                     __end_of_Flash_Memory_Unlock:	
 12768                           
 12769                           	psect	text83
 12770  1F94                     __ptext83:	
 12771 ;; *************** function _Flash_Memory_Read *****************
 12772 ;; Defined at:
 12773 ;;		line 1002 in file "../src/MCU_B1.c"
 12774 ;; Parameters:    Size  Location     Type
 12775 ;;  address         1    wreg     unsigned char 
 12776 ;; Auto vars:     Size  Location     Type
 12777 ;;  address         1    8[BANK0 ] unsigned char 
 12778 ;;  ret             1    9[BANK0 ] unsigned char 
 12779 ;;  i               1    7[BANK0 ] unsigned char 
 12780 ;; Return value:  Size  Location     Type
 12781 ;;                  1    wreg      unsigned char 
 12782 ;; Registers used:
 12783 ;;		wreg, status,2
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/0
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;Total ram usage:        4 bytes
 12794 ;; Hardware stack levels used:    1
 12795 ;; Hardware stack levels required when called:    5
 12796 ;; This function calls:
 12797 ;;		Nothing
 12798 ;; This function is called by:
 12799 ;;		_Flash_Memory_Initialization
 12800 ;;		_Flash_Memory_Modify
 12801 ;; This function uses a non-reentrant model
 12802 ;;
 12803                           
 12804                           
 12805                           ;psect for function _Flash_Memory_Read
 12806  1F94                     _Flash_Memory_Read:	
 12807                           
 12808                           ;incstack = 0
 12809                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12810                           ;Flash_Memory_Read@address stored from wreg
 12811  1F94  0020               	movlb	0	; select bank0
 12812  1F95  00A8               	movwf	Flash_Memory_Read@address
 12813                           
 12814                           ;MCU_B1.c: 1003: char i = 0, ret = 0;
 12815  1F96  01A7               	clrf	Flash_Memory_Read@i
 12816  1F97  01A9               	clrf	Flash_Memory_Read@ret
 12817                           
 12818                           ;MCU_B1.c: 1004: PMADRH = 0x30;
 12819  1F98  3030               	movlw	48
 12820  1F99  0023               	movlb	3	; select bank3
 12821  1F9A  0092               	movwf	18	;volatile
 12822                           
 12823                           ;MCU_B1.c: 1005: PMADRL = address;
 12824  1F9B  0020               	movlb	0	; select bank0
 12825  1F9C  0828               	movf	Flash_Memory_Read@address,w
 12826  1F9D  0023               	movlb	3	; select bank3
 12827  1F9E  0091               	movwf	17	;volatile
 12828                           
 12829                           ;MCU_B1.c: 1006: CFGS = 0;
 12830  1F9F  1315               	bcf	21,6	;volatile
 12831                           
 12832                           ;MCU_B1.c: 1007: RD = 1;
 12833  1FA0  1415               	bsf	21,0	;volatile
 12834                           
 12835                           ;MCU_B1.c: 1008: i = PMDATH;
 12836  1FA1  0814               	movf	20,w	;volatile
 12837  1FA2  0020               	movlb	0	; select bank0
 12838  1FA3  00A6               	movwf	??_Flash_Memory_Read
 12839  1FA4  0826               	movf	??_Flash_Memory_Read,w
 12840  1FA5  00A7               	movwf	Flash_Memory_Read@i
 12841                           
 12842                           ;MCU_B1.c: 1009: ret = PMDATL;
 12843  1FA6  0023               	movlb	3	; select bank3
 12844  1FA7  0813               	movf	19,w	;volatile
 12845  1FA8  0020               	movlb	0	; select bank0
 12846  1FA9  00A6               	movwf	??_Flash_Memory_Read
 12847  1FAA  0826               	movf	??_Flash_Memory_Read,w
 12848  1FAB  00A9               	movwf	Flash_Memory_Read@ret
 12849                           
 12850                           ;MCU_B1.c: 1010: return ret;
 12851  1FAC  0829               	movf	Flash_Memory_Read@ret,w
 12852  1FAD  0008               	return
 12853  1FAE                     __end_of_Flash_Memory_Read:	
 12854                           
 12855                           	psect	text84
 12856  063F                     __ptext84:	
 12857 ;; *************** function _Exception_Main *****************
 12858 ;; Defined at:
 12859 ;;		line 499 in file "../src/Main_B1.c"
 12860 ;; Parameters:    Size  Location     Type
 12861 ;;		None
 12862 ;; Auto vars:     Size  Location     Type
 12863 ;;  i               2   24[BANK0 ] int 
 12864 ;;  i               2   22[BANK0 ] int 
 12865 ;;  error           1   27[BANK0 ] unsigned char 
 12866 ;;  lights          1   26[BANK0 ] unsigned char 
 12867 ;;  count           1   21[BANK0 ] unsigned char 
 12868 ;;  status          1   20[BANK0 ] unsigned char 
 12869 ;; Return value:  Size  Location     Type
 12870 ;;		None               void
 12871 ;; Registers used:
 12872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12873 ;; Tracked objects:
 12874 ;;		On entry : 0/0
 12875 ;;		On exit  : 0/0
 12876 ;;		Unchanged: 0/0
 12877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12879 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12881 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12882 ;;Total ram usage:        9 bytes
 12883 ;; Hardware stack levels used:    1
 12884 ;; Hardware stack levels required when called:    7
 12885 ;; This function calls:
 12886 ;;		_getDimmerLights_Line
 12887 ;;		_getDimmerLights_Status
 12888 ;;		_getMain_All_Error_Status
 12889 ;;		_getMain_All_LightsStatus
 12890 ;;		_setBuz
 12891 ;;		_setDimmerLights_SwOff
 12892 ;;		_setLED
 12893 ;; This function is called by:
 12894 ;;		_main
 12895 ;; This function uses a non-reentrant model
 12896 ;;
 12897                           
 12898                           
 12899                           ;psect for function _Exception_Main
 12900  063F                     _Exception_Main:	
 12901                           
 12902                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12903                           
 12904                           ;incstack = 0
 12905                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12906  063F  3000               	movlw	0
 12907  0640  3191  21D5  3186   	fcall	_getMain_All_Error_Status
 12908  0643  0020               	movlb	0	; select bank0
 12909  0644  00B3               	movwf	??_Exception_Main
 12910  0645  0833               	movf	??_Exception_Main,w
 12911  0646  00BB               	movwf	Exception_Main@error
 12912                           
 12913                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12914  0647  01BA               	clrf	Exception_Main@lights
 12915  0648  01B5               	clrf	Exception_Main@count
 12916  0649  0AB5               	incf	Exception_Main@count,f
 12917                           
 12918                           ;Main_B1.c: 502: char status = 0;
 12919  064A  01B4               	clrf	Exception_Main@status
 12920                           
 12921                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12922  064B  0022               	movlb	2	; select bank2
 12923  064C  1DAA               	btfss	(_myMain^(0+256)+10),3
 12924  064D  2E5D               	goto	l11935
 12925                           
 12926                           ;Main_B1.c: 505: if (error == 0) {
 12927  064E  0020               	movlb	0	; select bank0
 12928  064F  08BB               	movf	Exception_Main@error,f
 12929  0650  1D03               	skipz
 12930  0651  0008               	return
 12931                           
 12932                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12933  0652  0022               	movlb	2	; select bank2
 12934  0653  11AA               	bcf	(_myMain^(0+256)+10),3
 12935                           
 12936                           ;Main_B1.c: 511: setLED(error, 110);
 12937  0654  306E               	movlw	110
 12938  0655  0020               	movlb	0	; select bank0
 12939  0656  00B3               	movwf	??_Exception_Main
 12940  0657  0833               	movf	??_Exception_Main,w
 12941  0658  00A8               	movwf	setLED@command
 12942  0659  083B               	movf	Exception_Main@error,w
 12943  065A  3192  226F         	fcall	_setLED
 12944                           
 12945                           ;Main_B1.c: 522: }
 12946                           ;Main_B1.c: 523: } else {
 12947  065C  0008               	return
 12948  065D                     l11935:	
 12949                           
 12950                           ;Main_B1.c: 524: if (error != 0) {
 12951  065D  0020               	movlb	0	; select bank0
 12952  065E  083B               	movf	Exception_Main@error,w
 12953  065F  1903               	btfsc	3,2
 12954  0660  0008               	return
 12955                           
 12956                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 12957  0661  0022               	movlb	2	; select bank2
 12958  0662  15AA               	bsf	(_myMain^(0+256)+10),3
 12959                           
 12960                           ;Main_B1.c: 529: setLED(error, 111);
 12961  0663  306F               	movlw	111
 12962  0664  0020               	movlb	0	; select bank0
 12963  0665  00B3               	movwf	??_Exception_Main
 12964  0666  0833               	movf	??_Exception_Main,w
 12965  0667  00A8               	movwf	setLED@command
 12966  0668  083B               	movf	Exception_Main@error,w
 12967  0669  3192  226F  3186   	fcall	_setLED
 12968                           
 12969                           ;Main_B1.c: 538: switch (error) {
 12970  066C  2F06               	goto	l11983
 12971  066D                     l11941:	
 12972                           ;Main_B1.c: 539: case 2:
 12973                           
 12974                           
 12975                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 12976  066D  319C  2418  3186   	fcall	_getMain_All_LightsStatus
 12977  0670  3A01               	xorlw	1
 12978  0671  1D03               	skipz
 12979  0672  2E7C               	goto	l11945
 12980                           
 12981                           ;Main_B1.c: 547: setBuz(10, 300);
 12982  0673  302C               	movlw	44
 12983  0674  0020               	movlb	0	; select bank0
 12984  0675  00AF               	movwf	setBuz@time
 12985  0676  3001               	movlw	1
 12986  0677  00B0               	movwf	setBuz@time+1
 12987  0678  300A               	movlw	10
 12988  0679  3195  2550  3186   	fcall	_setBuz
 12989  067C                     l11945:	
 12990                           
 12991                           ;Main_B1.c: 548: }
 12992                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 12993  067C  0020               	movlb	0	; select bank0
 12994  067D  01B6               	clrf	Exception_Main@i
 12995  067E  01B7               	clrf	Exception_Main@i+1
 12996  067F                     l11955:	
 12997  067F  0837               	movf	Exception_Main@i+1,w
 12998  0680  3A80               	xorlw	128
 12999  0681  00B3               	movwf	??_Exception_Main
 13000  0682  3080               	movlw	128
 13001  0683  0233               	subwf	??_Exception_Main,w
 13002  0684  1D03               	skipz
 13003  0685  2E88               	goto	u14775
 13004  0686  0835               	movf	Exception_Main@count,w
 13005  0687  0236               	subwf	Exception_Main@i,w
 13006  0688                     u14775:	
 13007  0688  1803               	btfsc	3,0
 13008  0689  2EA9               	goto	u14770
 13009                           
 13010                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13011  068A  0020               	movlb	0	; select bank0
 13012  068B  0836               	movf	Exception_Main@i,w
 13013  068C  3E01               	addlw	1
 13014  068D  319D  2514  3186   	fcall	_getDimmerLights_Status
 13015  0690  3A01               	xorlw	1
 13016  0691  1D03               	skipz
 13017  0692  2EA3               	goto	l11953
 13018                           
 13019                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13020  0693  0020               	movlb	0	; select bank0
 13021  0694  0864               	movf	_DimmerLights,w
 13022  0695  0086               	movwf	6
 13023  0696  3001               	movlw	1	; select bank2/3
 13024  0697  0087               	movwf	7
 13025  0698  1401               	bsf	1,0
 13026                           
 13027                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13028  0699  0A64               	incf	_DimmerLights,w
 13029  069A  0086               	movwf	6
 13030  069B  3001               	movlw	1	; select bank2/3
 13031  069C  0087               	movwf	7
 13032  069D  1001               	bcf	1,0
 13033                           
 13034                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13035  069E  0836               	movf	Exception_Main@i,w
 13036  069F  3E01               	addlw	1
 13037  06A0  3193  2312  3186   	fcall	_setDimmerLights_SwOff
 13038  06A3                     l11953:	
 13039  06A3  3001               	movlw	1
 13040  06A4  0020               	movlb	0	; select bank0
 13041  06A5  07B6               	addwf	Exception_Main@i,f
 13042  06A6  3000               	movlw	0
 13043  06A7  3DB7               	addwfc	Exception_Main@i+1,f
 13044  06A8  2E7F               	goto	l11955
 13045  06A9                     u14770:	
 13046  06A9  0020               	movlb	0	; select bank0
 13047  06AA  0008               	return
 13048  06AB                     l11957:	
 13049                           ;Main_B1.c: 561: case 3:
 13050                           
 13051                           ;Main_B1.c: 556: }
 13052                           ;Main_B1.c: 557: }
 13053                           ;Main_B1.c: 560: break;
 13054                           
 13055                           
 13056                           ;Main_B1.c: 563: setBuz(5, 300);
 13057  06AB  302C               	movlw	44
 13058  06AC  0020               	movlb	0	; select bank0
 13059  06AD  00AF               	movwf	setBuz@time
 13060  06AE  3001               	movlw	1
 13061  06AF  00B0               	movwf	setBuz@time+1
 13062  06B0  3005               	movlw	5
 13063  06B1  3195  2550  3186   	fcall	_setBuz
 13064                           
 13065                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13066  06B4  319C  244D  3186   	fcall	_getDimmerLights_Line
 13067  06B7  0020               	movlb	0	; select bank0
 13068  06B8  00B3               	movwf	??_Exception_Main
 13069  06B9  0833               	movf	??_Exception_Main,w
 13070  06BA  00BA               	movwf	Exception_Main@lights
 13071                           
 13072                           ;Main_B1.c: 565: if (lights == 0) {
 13073  06BB  08BA               	movf	Exception_Main@lights,f
 13074  06BC  1D03               	skipz
 13075  06BD  2EEC               	goto	l11975
 13076                           
 13077                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13078  06BE  01B8               	clrf	Exception_Main@i_3517
 13079  06BF  01B9               	clrf	Exception_Main@i_3517+1
 13080  06C0                     l11973:	
 13081  06C0  0839               	movf	Exception_Main@i_3517+1,w
 13082  06C1  3A80               	xorlw	128
 13083  06C2  00B3               	movwf	??_Exception_Main
 13084  06C3  3080               	movlw	128
 13085  06C4  0233               	subwf	??_Exception_Main,w
 13086  06C5  1D03               	skipz
 13087  06C6  2EC9               	goto	u14805
 13088  06C7  0835               	movf	Exception_Main@count,w
 13089  06C8  0238               	subwf	Exception_Main@i_3517,w
 13090  06C9                     u14805:	
 13091  06C9  1803               	btfsc	3,0
 13092  06CA  2EEA               	goto	u14800
 13093                           
 13094                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13095  06CB  0020               	movlb	0	; select bank0
 13096  06CC  0838               	movf	Exception_Main@i_3517,w
 13097  06CD  3E01               	addlw	1
 13098  06CE  319D  2514  3186   	fcall	_getDimmerLights_Status
 13099  06D1  3A01               	xorlw	1
 13100  06D2  1D03               	skipz
 13101  06D3  2EE4               	goto	l11971
 13102                           
 13103                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13104  06D4  0020               	movlb	0	; select bank0
 13105  06D5  0864               	movf	_DimmerLights,w
 13106  06D6  0086               	movwf	6
 13107  06D7  3001               	movlw	1	; select bank2/3
 13108  06D8  0087               	movwf	7
 13109  06D9  1401               	bsf	1,0
 13110                           
 13111                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13112  06DA  0A64               	incf	_DimmerLights,w
 13113  06DB  0086               	movwf	6
 13114  06DC  3001               	movlw	1	; select bank2/3
 13115  06DD  0087               	movwf	7
 13116  06DE  1001               	bcf	1,0
 13117                           
 13118                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13119  06DF  0838               	movf	Exception_Main@i_3517,w
 13120  06E0  3E01               	addlw	1
 13121  06E1  3193  2312  3186   	fcall	_setDimmerLights_SwOff
 13122  06E4                     l11971:	
 13123  06E4  3001               	movlw	1
 13124  06E5  0020               	movlb	0	; select bank0
 13125  06E6  07B8               	addwf	Exception_Main@i_3517,f
 13126  06E7  3000               	movlw	0
 13127  06E8  3DB9               	addwfc	Exception_Main@i_3517+1,f
 13128  06E9  2EC0               	goto	l11973
 13129  06EA                     u14800:	
 13130  06EA  0020               	movlb	0	; select bank0
 13131  06EB  0008               	return
 13132  06EC                     l11975:	
 13133                           ;Main_B1.c: 573: }
 13134                           ;Main_B1.c: 574: }
 13135                           ;Main_B1.c: 575: } else {
 13136                           
 13137                           
 13138                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13139  06EC  0020               	movlb	0	; select bank0
 13140  06ED  083A               	movf	Exception_Main@lights,w
 13141  06EE  319D  2514  3186   	fcall	_getDimmerLights_Status
 13142  06F1  3A01               	xorlw	1
 13143  06F2  1903               	btfsc	3,2
 13144  06F3  2EF6               	goto	l11977
 13145  06F4  0020               	movlb	0	; select bank0
 13146  06F5  0008               	return
 13147  06F6                     l11977:	
 13148                           
 13149                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13150  06F6  0020               	movlb	0	; select bank0
 13151  06F7  0864               	movf	_DimmerLights,w
 13152  06F8  0086               	movwf	6
 13153  06F9  3001               	movlw	1	; select bank2/3
 13154  06FA  0087               	movwf	7
 13155  06FB  1401               	bsf	1,0
 13156                           
 13157                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13158  06FC  0A64               	incf	_DimmerLights,w
 13159  06FD  0086               	movwf	6
 13160  06FE  3001               	movlw	1	; select bank2/3
 13161  06FF  0087               	movwf	7
 13162  0700  1001               	bcf	1,0
 13163                           
 13164                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13165  0701  083A               	movf	Exception_Main@lights,w
 13166  0702  3193  2312         	fcall	_setDimmerLights_SwOff
 13167  0704  0020               	movlb	0	; select bank0
 13168  0705  0008               	return
 13169  0706                     l11983:	
 13170                           ;Main_B1.c: 586: }
 13171                           
 13172                           ;Main_B1.c: 582: }
 13173                           ;Main_B1.c: 583: }
 13174                           ;Main_B1.c: 585: break;
 13175                           
 13176  0706  0020               	movlb	0	; select bank0
 13177  0707  083B               	movf	Exception_Main@error,w
 13178                           
 13179                           ; Switch size 1, requested type "space"
 13180                           ; Number of cases is 2, Range of values is 2 to 3
 13181                           ; switch strategies available:
 13182                           ; Name         Instructions Cycles
 13183                           ; simple_byte            7     4 (average)
 13184                           ; direct_byte           13     9 (fixed)
 13185                           ; jumptable            263     9 (fixed)
 13186                           ;	Chosen strategy is simple_byte
 13187  0708  3A02               	xorlw	2	; case 2
 13188  0709  1903               	skipnz
 13189  070A  2E6D               	goto	l11941
 13190  070B  3A01               	xorlw	1	; case 3
 13191  070C  1903               	skipnz
 13192  070D  2EAB               	goto	l11957
 13193  070E  2F10               	goto	l1487
 13194  070F  0008               	return
 13195  0710                     l1487:	
 13196  0710  0008               	return
 13197  0711                     __end_of_Exception_Main:	
 13198                           
 13199                           	psect	text85
 13200  1C4D                     __ptext85:	
 13201 ;; *************** function _getDimmerLights_Line *****************
 13202 ;; Defined at:
 13203 ;;		line 978 in file "../src/Dimmer_B1.c"
 13204 ;; Parameters:    Size  Location     Type
 13205 ;;		None
 13206 ;; Auto vars:     Size  Location     Type
 13207 ;;  line            1    6[BANK0 ] unsigned char 
 13208 ;; Return value:  Size  Location     Type
 13209 ;;                  1    wreg      unsigned char 
 13210 ;; Registers used:
 13211 ;;		wreg, status,2
 13212 ;; Tracked objects:
 13213 ;;		On entry : 0/0
 13214 ;;		On exit  : 0/0
 13215 ;;		Unchanged: 0/0
 13216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13220 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13221 ;;Total ram usage:        1 bytes
 13222 ;; Hardware stack levels used:    1
 13223 ;; Hardware stack levels required when called:    5
 13224 ;; This function calls:
 13225 ;;		Nothing
 13226 ;; This function is called by:
 13227 ;;		_Exception_Main
 13228 ;; This function uses a non-reentrant model
 13229 ;;
 13230                           
 13231                           
 13232                           ;psect for function _getDimmerLights_Line
 13233  1C4D                     _getDimmerLights_Line:	
 13234                           
 13235                           ;Dimmer_B1.c: 979: char line = 0;
 13236                           
 13237                           ;incstack = 0
 13238                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13239  1C4D  0020               	movlb	0	; select bank0
 13240  1C4E  01A6               	clrf	getDimmerLights_Line@line
 13241                           
 13242                           ;Dimmer_B1.c: 981: if (DimmerLights1.Line == 1) {
 13243  1C4F  0022               	movlb	2	; select bank2
 13244  1C50  1CDE               	btfss	(_DimmerLights1^(0+256)+1),1
 13245  1C51  2C55               	goto	l7033
 13246                           
 13247                           ;Dimmer_B1.c: 982: line = 1;
 13248  1C52  0020               	movlb	0	; select bank0
 13249  1C53  01A6               	clrf	getDimmerLights_Line@line
 13250  1C54  0AA6               	incf	getDimmerLights_Line@line,f
 13251  1C55                     l7033:	
 13252                           
 13253                           ;Dimmer_B1.c: 983: }
 13254                           ;Dimmer_B1.c: 995: return line;
 13255  1C55  0020               	movlb	0	; select bank0
 13256  1C56  0826               	movf	getDimmerLights_Line@line,w
 13257  1C57  0008               	return
 13258  1C58                     __end_of_getDimmerLights_Line:	
 13259                           
 13260                           	psect	text86
 13261  1FC8                     __ptext86:	
 13262 ;; *************** function _DimmerLights_Main *****************
 13263 ;; Defined at:
 13264 ;;		line 736 in file "../src/Dimmer_B1.c"
 13265 ;; Parameters:    Size  Location     Type
 13266 ;;		None
 13267 ;; Auto vars:     Size  Location     Type
 13268 ;;		None
 13269 ;; Return value:  Size  Location     Type
 13270 ;;		None               void
 13271 ;; Registers used:
 13272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13273 ;; Tracked objects:
 13274 ;;		On entry : 0/0
 13275 ;;		On exit  : 0/0
 13276 ;;		Unchanged: 0/0
 13277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13282 ;;Total ram usage:        0 bytes
 13283 ;; Hardware stack levels used:    1
 13284 ;; Hardware stack levels required when called:   10
 13285 ;; This function calls:
 13286 ;;		_getLoad_OK
 13287 ;;		_getMain_All_Error_Status
 13288 ;;		_getMain_All_LightsStatus
 13289 ;;		_setDimmerLights_Main
 13290 ;; This function is called by:
 13291 ;;		_main
 13292 ;; This function uses a non-reentrant model
 13293 ;;
 13294                           
 13295                           
 13296                           ;psect for function _DimmerLights_Main
 13297  1FC8                     _DimmerLights_Main:	
 13298                           
 13299                           ;Dimmer_B1.c: 739: if (Dimmer.LoadGO == 1) {
 13300                           
 13301                           ;incstack = 0
 13302                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13303  1FC8  0022               	movlb	2	; select bank2
 13304  1FC9  1CAD               	btfss	_Dimmer^(0+256),1
 13305  1FCA  2FE0               	goto	l11641
 13306                           
 13307                           ;Dimmer_B1.c: 740: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13308  1FCB  319B  23E5  319F   	fcall	_getLoad_OK
 13309  1FCE  3A01               	xorlw	1
 13310  1FCF  1903               	skipnz
 13311  1FD0  2FDE               	goto	l752
 13312  1FD1  3000               	movlw	0
 13313  1FD2  3191  21D5  319F   	fcall	_getMain_All_Error_Status
 13314  1FD5  3800               	iorlw	0
 13315  1FD6  1D03               	skipz
 13316  1FD7  2FDE               	goto	l752
 13317  1FD8  319C  2418  319F   	fcall	_getMain_All_LightsStatus
 13318  1FDB  3800               	iorlw	0
 13319  1FDC  1D03               	skipz
 13320  1FDD  2FE0               	goto	l11641
 13321  1FDE                     l752:	
 13322                           
 13323                           ;Dimmer_B1.c: 741: Dimmer.LoadGO = 0;
 13324  1FDE  0022               	movlb	2	; select bank2
 13325  1FDF  10AD               	bcf	_Dimmer^(0+256),1
 13326  1FE0                     l11641:	
 13327                           
 13328                           ;Dimmer_B1.c: 742: }
 13329                           ;Dimmer_B1.c: 743: }
 13330                           ;Dimmer_B1.c: 747: setDimmerLights_Main(1);
 13331  1FE0  3001               	movlw	1
 13332  1FE1  3197  2793         	fcall	_setDimmerLights_Main
 13333  1FE3  0008               	return
 13334  1FE4                     __end_of_DimmerLights_Main:	
 13335                           
 13336                           	psect	text87
 13337  1793                     __ptext87:	
 13338 ;; *************** function _setDimmerLights_Main *****************
 13339 ;; Defined at:
 13340 ;;		line 765 in file "../src/Dimmer_B1.c"
 13341 ;; Parameters:    Size  Location     Type
 13342 ;;  lights          1    wreg     unsigned char 
 13343 ;; Auto vars:     Size  Location     Type
 13344 ;;  lights          1    0[BANK2 ] unsigned char 
 13345 ;; Return value:  Size  Location     Type
 13346 ;;		None               void
 13347 ;; Registers used:
 13348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13349 ;; Tracked objects:
 13350 ;;		On entry : 0/0
 13351 ;;		On exit  : 0/0
 13352 ;;		Unchanged: 0/0
 13353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13355 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
 13356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13357 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
 13358 ;;Total ram usage:        1 bytes
 13359 ;; Hardware stack levels used:    1
 13360 ;; Hardware stack levels required when called:    9
 13361 ;; This function calls:
 13362 ;;		_DimmerLights_SelectPointer
 13363 ;;		_getDimmerLights_Allow_Condition
 13364 ;;		_getMain_All_LightsStatus
 13365 ;;		_setDimmerLights_Dimming
 13366 ;;		_setDimmerLights_OnOff
 13367 ;; This function is called by:
 13368 ;;		_DimmerLights_Main
 13369 ;; This function uses a non-reentrant model
 13370 ;;
 13371                           
 13372                           
 13373                           ;psect for function _setDimmerLights_Main
 13374  1793                     _setDimmerLights_Main:	
 13375                           
 13376                           ;incstack = 0
 13377                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13378                           ;setDimmerLights_Main@lights stored from wreg
 13379  1793  0022               	movlb	2	; select bank2
 13380  1794  00EE               	movwf	setDimmerLights_Main@lights^(0+256)
 13381                           
 13382                           ;Dimmer_B1.c: 767: DimmerLights_SelectPointer(lights);
 13383  1795  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13384  1796  319C  2437  3197   	fcall	_DimmerLights_SelectPointer
 13385                           
 13386                           ;Dimmer_B1.c: 768: if (DimmerLights->Trigger == 1) {
 13387  1799  0020               	movlb	0	; select bank0
 13388  179A  0864               	movf	_DimmerLights,w
 13389  179B  0086               	movwf	6
 13390  179C  3001               	movlw	1	; select bank2/3
 13391  179D  0087               	movwf	7
 13392  179E  1C81               	btfss	1,1
 13393  179F  2FC3               	goto	l11353
 13394                           
 13395                           ;Dimmer_B1.c: 769: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13396  17A0  0022               	movlb	2	; select bank2
 13397  17A1  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13398  17A2  319E  26A7  3197   	fcall	_getDimmerLights_Allow_Condition
 13399  17A5  3800               	iorlw	0
 13400  17A6  1D03               	skipz
 13401  17A7  0008               	return
 13402                           
 13403                           ;Dimmer_B1.c: 770: DimmerLights->Trigger = 0;
 13404  17A8  0020               	movlb	0	; select bank0
 13405  17A9  0864               	movf	_DimmerLights,w
 13406  17AA  0086               	movwf	6
 13407  17AB  3001               	movlw	1	; select bank2/3
 13408  17AC  0087               	movwf	7
 13409  17AD  1081               	bcf	1,1
 13410                           
 13411                           ;Dimmer_B1.c: 771: if (DimmerLights->Switch == 1) {
 13412  17AE  0864               	movf	_DimmerLights,w
 13413  17AF  0086               	movwf	6
 13414  17B0  3001               	movlw	1	; select bank2/3
 13415  17B1  0087               	movwf	7
 13416  17B2  1D01               	btfss	1,2
 13417  17B3  2FBC               	goto	l11351
 13418                           
 13419                           ;Dimmer_B1.c: 772: setDimmerLights_OnOff(lights, 1);
 13420  17B4  0021               	movlb	1	; select bank1
 13421  17B5  01EB               	clrf	setDimmerLights_OnOff@command^(0+128)
 13422  17B6  0AEB               	incf	setDimmerLights_OnOff@command^(0+128),f
 13423  17B7  0022               	movlb	2	; select bank2
 13424  17B8  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13425  17B9  3187  2711         	fcall	_setDimmerLights_OnOff
 13426                           
 13427                           ;Dimmer_B1.c: 773: } else {
 13428  17BB  0008               	return
 13429  17BC                     l11351:	
 13430                           
 13431                           ;Dimmer_B1.c: 774: setDimmerLights_OnOff(lights, 0);
 13432  17BC  0021               	movlb	1	; select bank1
 13433  17BD  01EB               	clrf	setDimmerLights_OnOff@command^(0+128)
 13434  17BE  0022               	movlb	2	; select bank2
 13435  17BF  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13436  17C0  3187  2711         	fcall	_setDimmerLights_OnOff
 13437                           
 13438                           ;Dimmer_B1.c: 775: }
 13439                           ;Dimmer_B1.c: 776: }
 13440                           ;Dimmer_B1.c: 777: } else {
 13441  17C2  0008               	return
 13442  17C3                     l11353:	
 13443                           
 13444                           ;Dimmer_B1.c: 778: if (getMain_All_LightsStatus() == 1) {
 13445  17C3  319C  2418  3197   	fcall	_getMain_All_LightsStatus
 13446  17C6  3A01               	xorlw	1
 13447  17C7  1D03               	skipz
 13448  17C8  2FF3               	goto	l11365
 13449                           
 13450                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingTrigger == 1) {
 13451  17C9  0020               	movlb	0	; select bank0
 13452  17CA  0864               	movf	_DimmerLights,w
 13453  17CB  0086               	movwf	6
 13454  17CC  3001               	movlw	1	; select bank2/3
 13455  17CD  0087               	movwf	7
 13456  17CE  1E01               	btfss	1,4
 13457  17CF  0008               	return
 13458                           
 13459                           ;Dimmer_B1.c: 780: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13460  17D0  0022               	movlb	2	; select bank2
 13461  17D1  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13462  17D2  319E  26A7  3197   	fcall	_getDimmerLights_Allow_Condition
 13463  17D5  3800               	iorlw	0
 13464  17D6  1D03               	skipz
 13465  17D7  0008               	return
 13466                           
 13467                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 0;
 13468  17D8  0020               	movlb	0	; select bank0
 13469  17D9  0864               	movf	_DimmerLights,w
 13470  17DA  0086               	movwf	6
 13471  17DB  3001               	movlw	1	; select bank2/3
 13472  17DC  0087               	movwf	7
 13473  17DD  1201               	bcf	1,4
 13474                           
 13475                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingSwitch == 1) {
 13476  17DE  0864               	movf	_DimmerLights,w
 13477  17DF  0086               	movwf	6
 13478  17E0  3001               	movlw	1	; select bank2/3
 13479  17E1  0087               	movwf	7
 13480  17E2  1E81               	btfss	1,5
 13481  17E3  2FEC               	goto	l11363
 13482                           
 13483                           ;Dimmer_B1.c: 783: setDimmerLights_Dimming(lights, 1);
 13484  17E4  0021               	movlb	1	; select bank1
 13485  17E5  01E8               	clrf	setDimmerLights_Dimming@status^(0+128)
 13486  17E6  0AE8               	incf	setDimmerLights_Dimming@status^(0+128),f
 13487  17E7  0022               	movlb	2	; select bank2
 13488  17E8  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13489  17E9  3194  24FB         	fcall	_setDimmerLights_Dimming
 13490                           
 13491                           ;Dimmer_B1.c: 784: } else {
 13492  17EB  0008               	return
 13493  17EC                     l11363:	
 13494                           
 13495                           ;Dimmer_B1.c: 785: setDimmerLights_Dimming(lights, 0);
 13496  17EC  0021               	movlb	1	; select bank1
 13497  17ED  01E8               	clrf	setDimmerLights_Dimming@status^(0+128)
 13498  17EE  0022               	movlb	2	; select bank2
 13499  17EF  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13500  17F0  3194  24FB         	fcall	_setDimmerLights_Dimming
 13501                           
 13502                           ;Dimmer_B1.c: 786: }
 13503                           ;Dimmer_B1.c: 787: }
 13504                           ;Dimmer_B1.c: 788: }
 13505                           ;Dimmer_B1.c: 789: } else {
 13506  17F2  0008               	return
 13507  17F3                     l11365:	
 13508                           
 13509                           ;Dimmer_B1.c: 790: if (DimmerLights->DimmingTrigger == 1) {
 13510  17F3  0020               	movlb	0	; select bank0
 13511  17F4  0864               	movf	_DimmerLights,w
 13512  17F5  0086               	movwf	6
 13513  17F6  3001               	movlw	1	; select bank2/3
 13514  17F7  0087               	movwf	7
 13515  17F8  1E01               	btfss	1,4
 13516  17F9  0008               	return
 13517                           
 13518                           ;Dimmer_B1.c: 791: DimmerLights->DimmingTrigger = 0;
 13519  17FA  0864               	movf	_DimmerLights,w
 13520  17FB  0086               	movwf	6
 13521  17FC  3001               	movlw	1	; select bank2/3
 13522  17FD  0087               	movwf	7
 13523  17FE  1201               	bcf	1,4
 13524  17FF  0008               	return
 13525  1800                     __end_of_setDimmerLights_Main:	
 13526                           
 13527                           	psect	text88
 13528  0711                     __ptext88:	
 13529 ;; *************** function _setDimmerLights_OnOff *****************
 13530 ;; Defined at:
 13531 ;;		line 799 in file "../src/Dimmer_B1.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;  lights          1    wreg     unsigned char 
 13534 ;;  command         1   16[BANK1 ] unsigned char 
 13535 ;; Auto vars:     Size  Location     Type
 13536 ;;  lights          1   19[BANK1 ] unsigned char 
 13537 ;; Return value:  Size  Location     Type
 13538 ;;		None               void
 13539 ;; Registers used:
 13540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13541 ;; Tracked objects:
 13542 ;;		On entry : 0/0
 13543 ;;		On exit  : 0/0
 13544 ;;		Unchanged: 0/0
 13545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13546 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13547 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13548 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13549 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13550 ;;Total ram usage:        4 bytes
 13551 ;; Hardware stack levels used:    1
 13552 ;; Hardware stack levels required when called:    8
 13553 ;; This function calls:
 13554 ;;		_getCmd_Status
 13555 ;;		_getDelayOff_GO
 13556 ;;		_getDimmerLights_PercentToValue
 13557 ;;		_getDimmerLights_ValueToPercent
 13558 ;;		_getMain_All_LightsStatus
 13559 ;;		_setCmd_Status
 13560 ;;		_setDelayOff_GO
 13561 ;;		_setDimmerIntr_ControlStatus
 13562 ;;		_setDimmerIntr_DimmingValue
 13563 ;;		_setDimmerIntr_Dimming_RF
 13564 ;;		_setDimmerIntr_MaxmumValue
 13565 ;;		_setDimmerLights_Line
 13566 ;;		_setLED
 13567 ;;		_setProductData
 13568 ;;		_setRF_DimmerLights
 13569 ;;		_setTxData
 13570 ;; This function is called by:
 13571 ;;		_setDimmerLights_Main
 13572 ;; This function uses a non-reentrant model
 13573 ;;
 13574                           
 13575                           
 13576                           ;psect for function _setDimmerLights_OnOff
 13577  0711                     _setDimmerLights_OnOff:	
 13578                           
 13579                           ;incstack = 0
 13580                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13581                           ;setDimmerLights_OnOff@lights stored from wreg
 13582  0711  0021               	movlb	1	; select bank1
 13583  0712  00EE               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13584                           
 13585                           ;Dimmer_B1.c: 801: if (command == 1) {
 13586  0713  086B               	movf	setDimmerLights_OnOff@command^(0+128),w
 13587  0714  3A01               	xorlw	1
 13588  0715  1D03               	skipz
 13589  0716  2F79               	goto	l11175
 13590                           
 13591                           ;Dimmer_B1.c: 802: setDimmerIntr_ControlStatus(lights, 1);
 13592  0717  0020               	movlb	0	; select bank0
 13593  0718  01A6               	clrf	setDimmerIntr_ControlStatus@command
 13594  0719  0AA6               	incf	setDimmerIntr_ControlStatus@command,f
 13595  071A  0021               	movlb	1	; select bank1
 13596  071B  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13597  071C  319F  2700  3187   	fcall	_setDimmerIntr_ControlStatus
 13598                           
 13599                           ;Dimmer_B1.c: 805: Dimmer.Load_Status = 1;
 13600  071F  0022               	movlb	2	; select bank2
 13601  0720  152D               	bsf	_Dimmer^(0+256),2
 13602                           
 13603                           ;Dimmer_B1.c: 806: setDimmerLights_Line(lights);
 13604  0721  0021               	movlb	1	; select bank1
 13605  0722  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13606  0723  319D  2544  3187   	fcall	_setDimmerLights_Line
 13607                           
 13608                           ;Dimmer_B1.c: 812: setLED(lights, 0);
 13609  0726  0020               	movlb	0	; select bank0
 13610  0727  01A8               	clrf	setLED@command
 13611  0728  0021               	movlb	1	; select bank1
 13612  0729  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13613  072A  3192  226F  3187   	fcall	_setLED
 13614                           
 13615                           ;Dimmer_B1.c: 813: ;;
 13616                           ;Dimmer_B1.c: 818: setDimmerIntr_DimmingValue(lights, ((char)(65*0.8)));
 13617  072D  3034               	movlw	52
 13618  072E  0021               	movlb	1	; select bank1
 13619  072F  00EC               	movwf	??_setDimmerLights_OnOff^(0+128)
 13620  0730  086C               	movf	??_setDimmerLights_OnOff^(0+128),w
 13621  0731  0020               	movlb	0	; select bank0
 13622  0732  00A6               	movwf	setDimmerIntr_DimmingValue@value
 13623  0733  0021               	movlb	1	; select bank1
 13624  0734  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13625  0735  319C  2484  3187   	fcall	_setDimmerIntr_DimmingValue
 13626                           
 13627                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingRun == 1) {
 13628  0738  0020               	movlb	0	; select bank0
 13629  0739  0A64               	incf	_DimmerLights,w
 13630  073A  0086               	movwf	6
 13631  073B  3001               	movlw	1	; select bank2/3
 13632  073C  0087               	movwf	7
 13633  073D  1F01               	btfss	1,6
 13634  073E  2F62               	goto	l11171
 13635                           
 13636                           ;Dimmer_B1.c: 821: DimmerLights->DimmingRun = 0;
 13637  073F  0A64               	incf	_DimmerLights,w
 13638  0740  0086               	movwf	6
 13639  0741  3001               	movlw	1	; select bank2/3
 13640  0742  0087               	movwf	7
 13641  0743  1301               	bcf	1,6
 13642                           
 13643                           ;Dimmer_B1.c: 822: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13644  0744  0021               	movlb	1	; select bank1
 13645  0745  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13646  0746  3E14               	addlw	20
 13647  0747  076F               	addwf	_product^(0+128),w
 13648  0748  00EC               	movwf	??_setDimmerLights_OnOff^(0+128)
 13649  0749  086C               	movf	??_setDimmerLights_OnOff^(0+128),w
 13650  074A  0086               	movwf	6
 13651  074B  3002               	movlw	2	; select bank4/5
 13652  074C  0087               	movwf	7
 13653  074D  0801               	movf	1,w
 13654  074E  318A  2282  3187   	fcall	_getDimmerLights_PercentToValue
 13655  0751  0021               	movlb	1	; select bank1
 13656  0752  00ED               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13657  0753  086D               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13658  0754  00E1               	movwf	setDimmerIntr_MaxmumValue@value^(0+128)
 13659  0755  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13660  0756  319C  24DA  3187   	fcall	_setDimmerIntr_MaxmumValue
 13661                           
 13662                           ;Dimmer_B1.c: 823: setDimmerIntr_Dimming_RF(lights, 1);
 13663  0759  0020               	movlb	0	; select bank0
 13664  075A  01A6               	clrf	setDimmerIntr_Dimming_RF@command
 13665  075B  0AA6               	incf	setDimmerIntr_Dimming_RF@command,f
 13666  075C  0021               	movlb	1	; select bank1
 13667  075D  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13668  075E  319F  2718  3187   	fcall	_setDimmerIntr_Dimming_RF
 13669                           
 13670                           ;Dimmer_B1.c: 824: } else {
 13671  0761  2FA8               	goto	l11189
 13672  0762                     l11171:	
 13673                           
 13674                           ;Dimmer_B1.c: 825: setDimmerIntr_MaxmumValue(lights, ((char)(65*0.8)));
 13675  0762  3034               	movlw	52
 13676  0763  0021               	movlb	1	; select bank1
 13677  0764  00EC               	movwf	??_setDimmerLights_OnOff^(0+128)
 13678  0765  086C               	movf	??_setDimmerLights_OnOff^(0+128),w
 13679  0766  00E1               	movwf	setDimmerIntr_MaxmumValue@value^(0+128)
 13680  0767  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13681  0768  319C  24DA  3187   	fcall	_setDimmerIntr_MaxmumValue
 13682                           
 13683                           ;Dimmer_B1.c: 826: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          65*0.8))));
 13684  076B  3034               	movlw	52
 13685  076C  318A  2208  3187   	fcall	_getDimmerLights_ValueToPercent
 13686  076F  0021               	movlb	1	; select bank1
 13687  0770  00EC               	movwf	??_setDimmerLights_OnOff^(0+128)
 13688  0771  086C               	movf	??_setDimmerLights_OnOff^(0+128),w
 13689  0772  00E1               	movwf	setProductData@value^(0+128)
 13690  0773  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13691  0774  3E14               	addlw	20
 13692  0775  319C  24E7  3187   	fcall	_setProductData
 13693                           
 13694                           ;Dimmer_B1.c: 827: }
 13695                           ;Dimmer_B1.c: 830: } else if (command == 0) {
 13696  0778  2FA8               	goto	l11189
 13697  0779                     l11175:	
 13698  0779  0021               	movlb	1	; select bank1
 13699  077A  08EB               	movf	setDimmerLights_OnOff@command^(0+128),f
 13700  077B  1D03               	skipz
 13701  077C  2FA8               	goto	l11189
 13702                           
 13703                           ;Dimmer_B1.c: 831: setDimmerIntr_ControlStatus(lights, 0);
 13704  077D  0020               	movlb	0	; select bank0
 13705  077E  01A6               	clrf	setDimmerIntr_ControlStatus@command
 13706  077F  0021               	movlb	1	; select bank1
 13707  0780  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13708  0781  319F  2700  3187   	fcall	_setDimmerIntr_ControlStatus
 13709                           
 13710                           ;Dimmer_B1.c: 833: Dimmer.Load_Status = 0;
 13711  0784  0022               	movlb	2	; select bank2
 13712  0785  112D               	bcf	_Dimmer^(0+256),2
 13713                           
 13714                           ;Dimmer_B1.c: 834: setDimmerLights_Line(0);
 13715  0786  3000               	movlw	0
 13716  0787  319D  2544  3187   	fcall	_setDimmerLights_Line
 13717                           
 13718                           ;Dimmer_B1.c: 838: if (getDelayOff_GO(lights) == 1) {
 13719  078A  0021               	movlb	1	; select bank1
 13720  078B  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13721  078C  319D  2524  3187   	fcall	_getDelayOff_GO
 13722  078F  3A01               	xorlw	1
 13723  0790  1D03               	skipz
 13724  0791  2F99               	goto	l776
 13725                           
 13726                           ;Dimmer_B1.c: 839: setDelayOff_GO(lights, 0, 0);
 13727  0792  0021               	movlb	1	; select bank1
 13728  0793  01E3               	clrf	setDelayOff_GO@command^(0+128)
 13729  0794  01E4               	clrf	setDelayOff_GO@value^(0+128)
 13730  0795  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13731  0796  318C  2404  3187   	fcall	_setDelayOff_GO
 13732  0799                     l776:	
 13733                           
 13734                           ;Dimmer_B1.c: 840: }
 13735                           ;Dimmer_B1.c: 845: setLED(lights, 1);
 13736  0799  0020               	movlb	0	; select bank0
 13737  079A  01A8               	clrf	setLED@command
 13738  079B  0AA8               	incf	setLED@command,f
 13739  079C  0021               	movlb	1	; select bank1
 13740  079D  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13741  079E  3192  226F  3187   	fcall	_setLED
 13742                           
 13743                           ;Dimmer_B1.c: 846: ;;
 13744                           ;Dimmer_B1.c: 850: if (lights == 1) {
 13745  07A1  0021               	movlb	1	; select bank1
 13746  07A2  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13747  07A3  3A01               	xorlw	1
 13748  07A4  1D03               	skipz
 13749  07A5  2FA8               	goto	l11189
 13750                           
 13751                           ;Dimmer_B1.c: 851: RB1 = 0;
 13752  07A6  0020               	movlb	0	; select bank0
 13753  07A7  108D               	bcf	13,1	;volatile
 13754  07A8                     l11189:	
 13755                           
 13756                           ;Dimmer_B1.c: 853: }
 13757                           ;Dimmer_B1.c: 864: }
 13758                           ;Dimmer_B1.c: 867: setRF_DimmerLights(lights, command);
 13759  07A8  0021               	movlb	1	; select bank1
 13760  07A9  086B               	movf	setDimmerLights_OnOff@command^(0+128),w
 13761  07AA  00EC               	movwf	??_setDimmerLights_OnOff^(0+128)
 13762  07AB  086C               	movf	??_setDimmerLights_OnOff^(0+128),w
 13763  07AC  00E3               	movwf	setRF_DimmerLights@on^(0+128)
 13764  07AD  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13765  07AE  3196  2604  3187   	fcall	_setRF_DimmerLights
 13766                           
 13767                           ;Dimmer_B1.c: 869: if (getCmd_Status(1) == 1) {
 13768  07B1  3001               	movlw	1
 13769  07B2  319D  2599  3187   	fcall	_getCmd_Status
 13770  07B5  3A01               	xorlw	1
 13771  07B6  1D03               	skipz
 13772  07B7  2FD3               	goto	l11203
 13773                           
 13774                           ;Dimmer_B1.c: 870: if (getMain_All_LightsStatus() == 0) {
 13775  07B8  319C  2418  3187   	fcall	_getMain_All_LightsStatus
 13776  07BB  3800               	iorlw	0
 13777  07BC  1D03               	skipz
 13778  07BD  0008               	return
 13779                           
 13780                           ;Dimmer_B1.c: 871: setCmd_Status(1, 0);
 13781  07BE  0020               	movlb	0	; select bank0
 13782  07BF  01A6               	clrf	setCmd_Status@cmd
 13783  07C0  3001               	movlw	1
 13784  07C1  319F  2749  3187   	fcall	_setCmd_Status
 13785                           
 13786                           ;Dimmer_B1.c: 872: setProductData(11, 0);
 13787  07C4  0021               	movlb	1	; select bank1
 13788  07C5  01E1               	clrf	setProductData@value^(0+128)
 13789  07C6  300B               	movlw	11
 13790  07C7  319C  24E7  3187   	fcall	_setProductData
 13791                           
 13792                           ;Dimmer_B1.c: 873: setProductData(17, 0);
 13793  07CA  0021               	movlb	1	; select bank1
 13794  07CB  01E1               	clrf	setProductData@value^(0+128)
 13795  07CC  3011               	movlw	17
 13796  07CD  319C  24E7  3187   	fcall	_setProductData
 13797                           
 13798                           ;Dimmer_B1.c: 874: setTxData();
 13799  07D0  318F  2745         	fcall	_setTxData
 13800                           
 13801                           ;Dimmer_B1.c: 875: }
 13802                           ;Dimmer_B1.c: 876: } else {
 13803  07D2  0008               	return
 13804  07D3                     l11203:	
 13805                           
 13806                           ;Dimmer_B1.c: 877: setTxData();
 13807  07D3  318F  2745         	fcall	_setTxData
 13808  07D5  0008               	return
 13809  07D6                     __end_of_setDimmerLights_OnOff:	
 13810                           
 13811                           	psect	text89
 13812  126F                     __ptext89:	
 13813 ;; *************** function _setLED *****************
 13814 ;; Defined at:
 13815 ;;		line 81 in file "../src/LED_B1.c"
 13816 ;; Parameters:    Size  Location     Type
 13817 ;;  led             1    wreg     unsigned char 
 13818 ;;  command         1    8[BANK0 ] unsigned char 
 13819 ;; Auto vars:     Size  Location     Type
 13820 ;;  led             1    9[BANK0 ] unsigned char 
 13821 ;; Return value:  Size  Location     Type
 13822 ;;		None               void
 13823 ;; Registers used:
 13824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13825 ;; Tracked objects:
 13826 ;;		On entry : 0/0
 13827 ;;		On exit  : 0/0
 13828 ;;		Unchanged: 0/0
 13829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13830 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13834 ;;Total ram usage:        2 bytes
 13835 ;; Hardware stack levels used:    1
 13836 ;; Hardware stack levels required when called:    6
 13837 ;; This function calls:
 13838 ;;		_LedPointSelect
 13839 ;; This function is called by:
 13840 ;;		_setDimmerLights_OnOff
 13841 ;;		_setLED_Initialization
 13842 ;;		_Exception_Main
 13843 ;;		_setSw_Initialization
 13844 ;; This function uses a non-reentrant model
 13845 ;;
 13846                           
 13847                           
 13848                           ;psect for function _setLED
 13849  126F                     _setLED:	
 13850                           
 13851                           ;incstack = 0
 13852                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13853                           ;setLED@led stored from wreg
 13854  126F  0020               	movlb	0	; select bank0
 13855  1270  00A9               	movwf	setLED@led
 13856                           
 13857                           ;LED_B1.c: 82: LedPointSelect(led);
 13858  1271  0829               	movf	setLED@led,w
 13859  1272  319C  2442  3192   	fcall	_LedPointSelect
 13860                           
 13861                           ;LED_B1.c: 83: if (command == 0) {
 13862  1275  0020               	movlb	0	; select bank0
 13863  1276  08A8               	movf	setLED@command,f
 13864  1277  1D03               	skipz
 13865  1278  2A7E               	goto	l10947
 13866                           
 13867                           ;LED_B1.c: 112: if (led == 99) {
 13868  1279  0829               	movf	setLED@led,w
 13869  127A  3A63               	xorlw	99
 13870  127B  1D03               	skipz
 13871  127C  2A7E               	goto	l10947
 13872                           
 13873                           ;LED_B1.c: 116: RB5 = 1;
 13874  127D  168D               	bsf	13,5	;volatile
 13875  127E                     l10947:	
 13876                           
 13877                           ;LED_B1.c: 118: }
 13878                           ;LED_B1.c: 120: }
 13879                           ;LED_B1.c: 121: if (command == 1) {
 13880  127E  0828               	movf	setLED@command,w
 13881  127F  3A01               	xorlw	1
 13882  1280  1D03               	skipz
 13883  1281  2A87               	goto	l10953
 13884                           
 13885                           ;LED_B1.c: 150: if (led == 99) {
 13886  1282  0829               	movf	setLED@led,w
 13887  1283  3A63               	xorlw	99
 13888  1284  1D03               	skipz
 13889  1285  2A87               	goto	l10953
 13890                           
 13891                           ;LED_B1.c: 154: RB5 = 0;
 13892  1286  128D               	bcf	13,5	;volatile
 13893  1287                     l10953:	
 13894                           
 13895                           ;LED_B1.c: 156: }
 13896                           ;LED_B1.c: 158: }
 13897                           ;LED_B1.c: 159: if (command == 10) {
 13898  1287  0828               	movf	setLED@command,w
 13899  1288  3A0A               	xorlw	10
 13900  1289  1D03               	skipz
 13901  128A  2A9B               	goto	l10961
 13902                           
 13903                           ;LED_B1.c: 160: LED->GO = 0;
 13904  128B  0865               	movf	_LED,w
 13905  128C  0086               	movwf	6
 13906  128D  3001               	movlw	1	; select bank2/3
 13907  128E  0087               	movwf	7
 13908  128F  1081               	bcf	1,1
 13909                           
 13910                           ;LED_B1.c: 161: LED->Time = 0;
 13911  1290  0A65               	incf	_LED,w
 13912  1291  0086               	movwf	6
 13913  1292  3001               	movlw	1	; select bank2/3
 13914  1293  0087               	movwf	7
 13915  1294  3000               	movlw	0
 13916  1295  3FC0               	movwi [0]fsr1
 13917  1296  3FC1               	movwi [1]fsr1
 13918                           
 13919                           ;LED_B1.c: 190: if (led == 99) {
 13920  1297  0829               	movf	setLED@led,w
 13921  1298  3A63               	xorlw	99
 13922  1299  1903               	btfsc	3,2
 13923                           
 13924                           ;LED_B1.c: 194: RB5 = 1;
 13925  129A  168D               	bsf	13,5	;volatile
 13926  129B                     l10961:	
 13927                           
 13928                           ;LED_B1.c: 196: }
 13929                           ;LED_B1.c: 198: }
 13930                           ;LED_B1.c: 199: if (command == 11) {
 13931  129B  0828               	movf	setLED@command,w
 13932  129C  3A0B               	xorlw	11
 13933  129D  1D03               	skipz
 13934  129E  0008               	return
 13935                           
 13936                           ;LED_B1.c: 200: LED->GO = 1;
 13937  129F  0865               	movf	_LED,w
 13938  12A0  0086               	movwf	6
 13939  12A1  3001               	movlw	1	; select bank2/3
 13940  12A2  0087               	movwf	7
 13941  12A3  1481               	bsf	1,1
 13942  12A4  0008               	return
 13943  12A5                     __end_of_setLED:	
 13944                           
 13945                           	psect	text90
 13946  1C42                     __ptext90:	
 13947 ;; *************** function _LedPointSelect *****************
 13948 ;; Defined at:
 13949 ;;		line 7 in file "../src/LED_B1.c"
 13950 ;; Parameters:    Size  Location     Type
 13951 ;;  led             1    wreg     unsigned char 
 13952 ;; Auto vars:     Size  Location     Type
 13953 ;;  led             1    7[BANK0 ] unsigned char 
 13954 ;; Return value:  Size  Location     Type
 13955 ;;		None               void
 13956 ;; Registers used:
 13957 ;;		wreg
 13958 ;; Tracked objects:
 13959 ;;		On entry : 0/0
 13960 ;;		On exit  : 0/0
 13961 ;;		Unchanged: 0/0
 13962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13966 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;Total ram usage:        2 bytes
 13968 ;; Hardware stack levels used:    1
 13969 ;; Hardware stack levels required when called:    5
 13970 ;; This function calls:
 13971 ;;		Nothing
 13972 ;; This function is called by:
 13973 ;;		_setLED_Initialization
 13974 ;;		_setLED
 13975 ;;		_setLED_Main
 13976 ;; This function uses a non-reentrant model
 13977 ;;
 13978                           
 13979                           
 13980                           ;psect for function _LedPointSelect
 13981  1C42                     _LedPointSelect:	
 13982                           
 13983                           ;incstack = 0
 13984                           ; Regs used in _LedPointSelect: [wreg]
 13985                           ;LedPointSelect@led stored from wreg
 13986  1C42  0020               	movlb	0	; select bank0
 13987  1C43  00A7               	movwf	LedPointSelect@led
 13988                           
 13989                           ;LED_B1.c: 24: if (led == 99) {
 13990  1C44  0827               	movf	LedPointSelect@led,w
 13991  1C45  3A63               	xorlw	99
 13992  1C46  1D03               	skipz
 13993  1C47  0008               	return
 13994                           
 13995                           ;LED_B1.c: 25: LED = &VarErrLED;
 13996  1C48  306A               	movlw	_VarErrLED& (0+255)
 13997  1C49  00A6               	movwf	??_LedPointSelect
 13998  1C4A  0826               	movf	??_LedPointSelect,w
 13999  1C4B  00E5               	movwf	_LED
 14000  1C4C  0008               	return
 14001  1C4D                     __end_of_LedPointSelect:	
 14002                           
 14003                           	psect	text91
 14004  1F18                     __ptext91:	
 14005 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14006 ;; Defined at:
 14007 ;;		line 184 in file "../src/Dimmer_B1.c"
 14008 ;; Parameters:    Size  Location     Type
 14009 ;;  lights          1    wreg     unsigned char 
 14010 ;;  command         1    6[BANK0 ] unsigned char 
 14011 ;; Auto vars:     Size  Location     Type
 14012 ;;  lights          1    8[BANK0 ] unsigned char 
 14013 ;; Return value:  Size  Location     Type
 14014 ;;		None               void
 14015 ;; Registers used:
 14016 ;;		wreg, status,2, status,0
 14017 ;; Tracked objects:
 14018 ;;		On entry : 0/0
 14019 ;;		On exit  : 0/0
 14020 ;;		Unchanged: 0/0
 14021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14022 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14025 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14026 ;;Total ram usage:        3 bytes
 14027 ;; Hardware stack levels used:    1
 14028 ;; Hardware stack levels required when called:    5
 14029 ;; This function calls:
 14030 ;;		Nothing
 14031 ;; This function is called by:
 14032 ;;		_setDimmerLights_OnOff
 14033 ;;		_setRFSW_AdjControl
 14034 ;; This function uses a non-reentrant model
 14035 ;;
 14036                           
 14037                           
 14038                           ;psect for function _setDimmerIntr_Dimming_RF
 14039  1F18                     _setDimmerIntr_Dimming_RF:	
 14040                           
 14041                           ;incstack = 0
 14042                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14043                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14044  1F18  0020               	movlb	0	; select bank0
 14045  1F19  00A8               	movwf	setDimmerIntr_Dimming_RF@lights
 14046                           
 14047                           ;Dimmer_B1.c: 186: if (lights == 1) {
 14048  1F1A  0828               	movf	setDimmerIntr_Dimming_RF@lights,w
 14049  1F1B  3A01               	xorlw	1
 14050  1F1C  1D03               	skipz
 14051  1F1D  0008               	return
 14052                           
 14053                           ;Dimmer_B1.c: 187: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14054  1F1E  0826               	movf	setDimmerIntr_Dimming_RF@command,w
 14055  1F1F  3A01               	xorlw	1
 14056  1F20  3000               	movlw	0
 14057  1F21  1903               	skipnz
 14058  1F22  3001               	movlw	1
 14059  1F23  00A7               	movwf	??_setDimmerIntr_Dimming_RF
 14060  1F24  0EA7               	swapf	??_setDimmerIntr_Dimming_RF,f
 14061  1F25  0DA7               	rlf	??_setDimmerIntr_Dimming_RF,f
 14062  1F26  0DA7               	rlf	??_setDimmerIntr_Dimming_RF,f
 14063  1F27  0021               	movlb	1	; select bank1
 14064  1F28  083A               	movf	_DimmerIntr1^(0+128),w
 14065  1F29  0020               	movlb	0	; select bank0
 14066  1F2A  0627               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14067  1F2B  39BF               	andlw	-65
 14068  1F2C  0627               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14069  1F2D  0021               	movlb	1	; select bank1
 14070  1F2E  00BA               	movwf	_DimmerIntr1^(0+128)
 14071  1F2F  0008               	return
 14072  1F30                     __end_of_setDimmerIntr_Dimming_RF:	
 14073                           
 14074                           	psect	text92
 14075  1C84                     __ptext92:	
 14076 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14077 ;; Defined at:
 14078 ;;		line 49 in file "../src/Dimmer_B1.c"
 14079 ;; Parameters:    Size  Location     Type
 14080 ;;  lights          1    wreg     unsigned char 
 14081 ;;  value           1    6[BANK0 ] unsigned char 
 14082 ;; Auto vars:     Size  Location     Type
 14083 ;;  lights          1    8[BANK0 ] unsigned char 
 14084 ;; Return value:  Size  Location     Type
 14085 ;;		None               void
 14086 ;; Registers used:
 14087 ;;		wreg
 14088 ;; Tracked objects:
 14089 ;;		On entry : 0/0
 14090 ;;		On exit  : 0/0
 14091 ;;		Unchanged: 0/0
 14092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14093 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14097 ;;Total ram usage:        3 bytes
 14098 ;; Hardware stack levels used:    1
 14099 ;; Hardware stack levels required when called:    5
 14100 ;; This function calls:
 14101 ;;		Nothing
 14102 ;; This function is called by:
 14103 ;;		_setDimmerLights_OnOff
 14104 ;; This function uses a non-reentrant model
 14105 ;;
 14106                           
 14107                           
 14108                           ;psect for function _setDimmerIntr_DimmingValue
 14109  1C84                     _setDimmerIntr_DimmingValue:	
 14110                           
 14111                           ;incstack = 0
 14112                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14113                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14114  1C84  0020               	movlb	0	; select bank0
 14115  1C85  00A8               	movwf	setDimmerIntr_DimmingValue@lights
 14116                           
 14117                           ;Dimmer_B1.c: 51: if (lights == 1) {
 14118  1C86  0828               	movf	setDimmerIntr_DimmingValue@lights,w
 14119  1C87  3A01               	xorlw	1
 14120  1C88  1D03               	skipz
 14121  1C89  0008               	return
 14122                           
 14123                           ;Dimmer_B1.c: 52: DimmerIntr1.DimmingValue = value;
 14124  1C8A  0826               	movf	setDimmerIntr_DimmingValue@value,w
 14125  1C8B  00A7               	movwf	??_setDimmerIntr_DimmingValue
 14126  1C8C  0827               	movf	??_setDimmerIntr_DimmingValue,w
 14127  1C8D  0021               	movlb	1	; select bank1
 14128  1C8E  00BF               	movwf	(_DimmerIntr1^(0+128)+5)
 14129  1C8F  0008               	return
 14130  1C90                     __end_of_setDimmerIntr_DimmingValue:	
 14131                           
 14132                           	psect	text93
 14133  1F00                     __ptext93:	
 14134 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14135 ;; Defined at:
 14136 ;;		line 31 in file "../src/Dimmer_B1.c"
 14137 ;; Parameters:    Size  Location     Type
 14138 ;;  lights          1    wreg     unsigned char 
 14139 ;;  command         1    6[BANK0 ] unsigned char 
 14140 ;; Auto vars:     Size  Location     Type
 14141 ;;  lights          1    8[BANK0 ] unsigned char 
 14142 ;; Return value:  Size  Location     Type
 14143 ;;		None               void
 14144 ;; Registers used:
 14145 ;;		wreg, status,2, status,0
 14146 ;; Tracked objects:
 14147 ;;		On entry : 0/0
 14148 ;;		On exit  : 0/0
 14149 ;;		Unchanged: 0/0
 14150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14151 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14154 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14155 ;;Total ram usage:        3 bytes
 14156 ;; Hardware stack levels used:    1
 14157 ;; Hardware stack levels required when called:    5
 14158 ;; This function calls:
 14159 ;;		Nothing
 14160 ;; This function is called by:
 14161 ;;		_setDimmerLights_OnOff
 14162 ;; This function uses a non-reentrant model
 14163 ;;
 14164                           
 14165                           
 14166                           ;psect for function _setDimmerIntr_ControlStatus
 14167  1F00                     _setDimmerIntr_ControlStatus:	
 14168                           
 14169                           ;incstack = 0
 14170                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14171                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14172  1F00  0020               	movlb	0	; select bank0
 14173  1F01  00A8               	movwf	setDimmerIntr_ControlStatus@lights
 14174                           
 14175                           ;Dimmer_B1.c: 33: if (lights == 1) {
 14176  1F02  0828               	movf	setDimmerIntr_ControlStatus@lights,w
 14177  1F03  3A01               	xorlw	1
 14178  1F04  1D03               	skipz
 14179  1F05  0008               	return
 14180                           
 14181                           ;Dimmer_B1.c: 34: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14182  1F06  0826               	movf	setDimmerIntr_ControlStatus@command,w
 14183  1F07  3A01               	xorlw	1
 14184  1F08  3000               	movlw	0
 14185  1F09  1903               	skipnz
 14186  1F0A  3001               	movlw	1
 14187  1F0B  00A7               	movwf	??_setDimmerIntr_ControlStatus
 14188  1F0C  0DA7               	rlf	??_setDimmerIntr_ControlStatus,f
 14189  1F0D  0DA7               	rlf	??_setDimmerIntr_ControlStatus,f
 14190  1F0E  0DA7               	rlf	??_setDimmerIntr_ControlStatus,f
 14191  1F0F  0021               	movlb	1	; select bank1
 14192  1F10  083A               	movf	_DimmerIntr1^(0+128),w
 14193  1F11  0020               	movlb	0	; select bank0
 14194  1F12  0627               	xorwf	??_setDimmerIntr_ControlStatus,w
 14195  1F13  39F7               	andlw	-9
 14196  1F14  0627               	xorwf	??_setDimmerIntr_ControlStatus,w
 14197  1F15  0021               	movlb	1	; select bank1
 14198  1F16  00BA               	movwf	_DimmerIntr1^(0+128)
 14199  1F17  0008               	return
 14200  1F18                     __end_of_setDimmerIntr_ControlStatus:	
 14201                           
 14202                           	psect	text94
 14203  0C04                     __ptext94:	
 14204 ;; *************** function _setDelayOff_GO *****************
 14205 ;; Defined at:
 14206 ;;		line 87 in file "../src/DelayOff_B1.c"
 14207 ;; Parameters:    Size  Location     Type
 14208 ;;  sw              1    wreg     unsigned char 
 14209 ;;  command         1    8[BANK1 ] unsigned char 
 14210 ;;  value           1    9[BANK1 ] unsigned char 
 14211 ;; Auto vars:     Size  Location     Type
 14212 ;;  sw              1   15[BANK1 ] unsigned char 
 14213 ;;  k               1   14[BANK1 ] unsigned char 
 14214 ;;  j               1   13[BANK1 ] unsigned char 
 14215 ;;  i               1   12[BANK1 ] unsigned char 
 14216 ;; Return value:  Size  Location     Type
 14217 ;;		None               void
 14218 ;; Registers used:
 14219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14220 ;; Tracked objects:
 14221 ;;		On entry : 0/0
 14222 ;;		On exit  : 0/0
 14223 ;;		Unchanged: 0/0
 14224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14225 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 14226 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 14227 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 14228 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14229 ;;Total ram usage:        8 bytes
 14230 ;; Hardware stack levels used:    1
 14231 ;; Hardware stack levels required when called:    6
 14232 ;; This function calls:
 14233 ;;		_DelayOffPointSelect
 14234 ;;		___bmul
 14235 ;;		_setProductData
 14236 ;; This function is called by:
 14237 ;;		_setDimmerLights_OnOff
 14238 ;;		_setRFSW_Control
 14239 ;; This function uses a non-reentrant model
 14240 ;;
 14241                           
 14242                           
 14243                           ;psect for function _setDelayOff_GO
 14244  0C04                     _setDelayOff_GO:	
 14245                           
 14246                           ;incstack = 0
 14247                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14248                           ;setDelayOff_GO@sw stored from wreg
 14249  0C04  0021               	movlb	1	; select bank1
 14250  0C05  00EA               	movwf	setDelayOff_GO@sw^(0+128)
 14251                           
 14252                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14253  0C06  086A               	movf	setDelayOff_GO@sw^(0+128),w
 14254  0C07  319C  242C  318C   	fcall	_DelayOffPointSelect
 14255                           
 14256                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14257  0C0A  0021               	movlb	1	; select bank1
 14258  0C0B  0863               	movf	setDelayOff_GO@command^(0+128),w
 14259  0C0C  3A01               	xorlw	1
 14260  0C0D  3000               	movlw	0
 14261  0C0E  1903               	skipnz
 14262  0C0F  3001               	movlw	1
 14263  0C10  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14264  0C11  0020               	movlb	0	; select bank0
 14265  0C12  0863               	movf	_DelayOff,w
 14266  0C13  0086               	movwf	6
 14267  0C14  3001               	movlw	1	; select bank2/3
 14268  0C15  0087               	movwf	7
 14269  0C16  0021               	movlb	1	; select bank1
 14270  0C17  0DE5               	rlf	??_setDelayOff_GO^(0+128),f
 14271  0C18  0801               	movf	1,w
 14272  0C19  0665               	xorwf	??_setDelayOff_GO^(0+128),w
 14273  0C1A  39FD               	andlw	-3
 14274  0C1B  0665               	xorwf	??_setDelayOff_GO^(0+128),w
 14275  0C1C  0081               	movwf	1
 14276                           
 14277                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14278  0C1D  0020               	movlb	0	; select bank0
 14279  0C1E  0863               	movf	_DelayOff,w
 14280  0C1F  3E02               	addlw	2
 14281  0C20  0086               	movwf	6
 14282  0C21  3001               	movlw	1	; select bank2/3
 14283  0C22  0087               	movwf	7
 14284  0C23  3000               	movlw	0
 14285  0C24  3FC0               	movwi [0]fsr1
 14286  0C25  3FC1               	movwi [1]fsr1
 14287                           
 14288                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14289  0C26  0863               	movf	_DelayOff,w
 14290  0C27  3E04               	addlw	4
 14291  0C28  0086               	movwf	6
 14292  0C29  3001               	movlw	1	; select bank2/3
 14293  0C2A  0087               	movwf	7
 14294  0C2B  0181               	clrf	1
 14295                           
 14296                           ;DelayOff_B1.c: 94: if (command == 1) {
 14297  0C2C  0021               	movlb	1	; select bank1
 14298  0C2D  0863               	movf	setDelayOff_GO@command^(0+128),w
 14299  0C2E  3A01               	xorlw	1
 14300  0C2F  1D03               	skipz
 14301  0C30  2C88               	goto	l10563
 14302                           
 14303                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14304  0C31  3005               	movlw	5
 14305  0C32  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14306  0C33  0865               	movf	??_setDelayOff_GO^(0+128),w
 14307  0C34  00E7               	movwf	setDelayOff_GO@i^(0+128)
 14308  0C35  01E8               	clrf	setDelayOff_GO@j^(0+128)
 14309  0C36  01E9               	clrf	setDelayOff_GO@k^(0+128)
 14310                           
 14311                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14312  0C37  300F               	movlw	15
 14313  0C38  0564               	andwf	setDelayOff_GO@value^(0+128),w
 14314  0C39  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14315  0C3A  0865               	movf	??_setDelayOff_GO^(0+128),w
 14316  0C3B  3A05               	xorlw	5
 14317  0C3C  1903               	skipnz
 14318  0C3D  2C42               	goto	l10549
 14319  0C3E  0864               	movf	setDelayOff_GO@value^(0+128),w
 14320  0C3F  390F               	andlw	15
 14321  0C40  1D03               	btfss	3,2
 14322  0C41  2C74               	goto	l10559
 14323  0C42                     l10549:	
 14324  0C42  3031               	movlw	49
 14325  0C43  0264               	subwf	setDelayOff_GO@value^(0+128),w
 14326  0C44  1803               	skipnc
 14327  0C45  2C74               	goto	l10559
 14328                           
 14329                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14330  0C46  0864               	movf	setDelayOff_GO@value^(0+128),w
 14331  0C47  390F               	andlw	15
 14332  0C48  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14333  0C49  0865               	movf	??_setDelayOff_GO^(0+128),w
 14334  0C4A  00E8               	movwf	setDelayOff_GO@j^(0+128)
 14335                           
 14336                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14337  0C4B  0864               	movf	setDelayOff_GO@value^(0+128),w
 14338  0C4C  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14339  0C4D  3004               	movlw	4
 14340  0C4E                     u12545:	
 14341  0C4E  36E5               	lsrf	??_setDelayOff_GO^(0+128),f
 14342  0C4F  0B89               	decfsz	9,f
 14343  0C50  2C4E               	goto	u12545
 14344  0C51  0865               	movf	??_setDelayOff_GO^(0+128),w
 14345  0C52  390F               	andlw	15
 14346  0C53  00E6               	movwf	(??_setDelayOff_GO+1)^(0+128)
 14347  0C54  0866               	movf	(??_setDelayOff_GO+1)^(0+128),w
 14348  0C55  00E9               	movwf	setDelayOff_GO@k^(0+128)
 14349                           
 14350                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14351  0C56  300A               	movlw	10
 14352  0C57  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14353  0C58  0865               	movf	??_setDelayOff_GO^(0+128),w
 14354  0C59  0020               	movlb	0	; select bank0
 14355  0C5A  00A6               	movwf	___bmul@multiplicand
 14356  0C5B  0021               	movlb	1	; select bank1
 14357  0C5C  0869               	movf	setDelayOff_GO@k^(0+128),w
 14358  0C5D  319D  25AB  318C   	fcall	___bmul
 14359  0C60  0021               	movlb	1	; select bank1
 14360  0C61  0768               	addwf	setDelayOff_GO@j^(0+128),w
 14361  0C62  00E6               	movwf	(??_setDelayOff_GO+1)^(0+128)
 14362  0C63  0020               	movlb	0	; select bank0
 14363  0C64  0A63               	incf	_DelayOff,w
 14364  0C65  0086               	movwf	6
 14365  0C66  3001               	movlw	1	; select bank2/3
 14366  0C67  0087               	movwf	7
 14367  0C68  0021               	movlb	1	; select bank1
 14368  0C69  0866               	movf	(??_setDelayOff_GO+1)^(0+128),w
 14369  0C6A  0081               	movwf	1
 14370                           
 14371                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14372  0C6B  0864               	movf	setDelayOff_GO@value^(0+128),w
 14373  0C6C  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14374  0C6D  0865               	movf	??_setDelayOff_GO^(0+128),w
 14375  0C6E  00E1               	movwf	setProductData@value^(0+128)
 14376  0C6F  086A               	movf	setDelayOff_GO@sw^(0+128),w
 14377  0C70  3E1A               	addlw	26
 14378  0C71  319C  24E7         	fcall	_setProductData
 14379                           
 14380                           ;DelayOff_B1.c: 103: } else {
 14381  0C73  0008               	return
 14382  0C74                     l10559:	
 14383                           
 14384                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14385  0C74  3005               	movlw	5
 14386  0C75  0021               	movlb	1	; select bank1
 14387  0C76  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14388  0C77  0020               	movlb	0	; select bank0
 14389  0C78  0A63               	incf	_DelayOff,w
 14390  0C79  0086               	movwf	6
 14391  0C7A  3001               	movlw	1	; select bank2/3
 14392  0C7B  0087               	movwf	7
 14393  0C7C  0021               	movlb	1	; select bank1
 14394  0C7D  0865               	movf	??_setDelayOff_GO^(0+128),w
 14395  0C7E  0081               	movwf	1
 14396                           
 14397                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14398  0C7F  3005               	movlw	5
 14399  0C80  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14400  0C81  0865               	movf	??_setDelayOff_GO^(0+128),w
 14401  0C82  00E1               	movwf	setProductData@value^(0+128)
 14402  0C83  086A               	movf	setDelayOff_GO@sw^(0+128),w
 14403  0C84  3E1A               	addlw	26
 14404  0C85  319C  24E7         	fcall	_setProductData
 14405                           
 14406                           ;DelayOff_B1.c: 106: }
 14407                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14408  0C87  0008               	return
 14409  0C88                     l10563:	
 14410  0C88  0021               	movlb	1	; select bank1
 14411  0C89  08E3               	movf	setDelayOff_GO@command^(0+128),f
 14412  0C8A  1D03               	skipz
 14413  0C8B  0008               	return
 14414                           
 14415                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14416  0C8C  01E1               	clrf	setProductData@value^(0+128)
 14417  0C8D  086A               	movf	setDelayOff_GO@sw^(0+128),w
 14418  0C8E  3E1A               	addlw	26
 14419  0C8F  319C  24E7         	fcall	_setProductData
 14420  0C91  0008               	return
 14421  0C92                     __end_of_setDelayOff_GO:	
 14422                           
 14423                           	psect	text95
 14424  1DAB                     __ptext95:	
 14425 ;; *************** function ___bmul *****************
 14426 ;; Defined at:
 14427 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14428 ;; Parameters:    Size  Location     Type
 14429 ;;  multiplier      1    wreg     unsigned char 
 14430 ;;  multiplicand    1    6[BANK0 ] unsigned char 
 14431 ;; Auto vars:     Size  Location     Type
 14432 ;;  multiplier      1    9[BANK0 ] unsigned char 
 14433 ;;  product         1    8[BANK0 ] unsigned char 
 14434 ;; Return value:  Size  Location     Type
 14435 ;;                  1    wreg      unsigned char 
 14436 ;; Registers used:
 14437 ;;		wreg, status,2, status,0
 14438 ;; Tracked objects:
 14439 ;;		On entry : 0/0
 14440 ;;		On exit  : 0/0
 14441 ;;		Unchanged: 0/0
 14442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14443 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;Total ram usage:        4 bytes
 14448 ;; Hardware stack levels used:    1
 14449 ;; Hardware stack levels required when called:    5
 14450 ;; This function calls:
 14451 ;;		Nothing
 14452 ;; This function is called by:
 14453 ;;		_setDelayOff_GO
 14454 ;;		_DelayTimejudge
 14455 ;; This function uses a non-reentrant model
 14456 ;;
 14457                           
 14458                           
 14459                           ;psect for function ___bmul
 14460  1DAB                     ___bmul:	
 14461                           
 14462                           ;incstack = 0
 14463                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14464                           ;___bmul@multiplier stored from wreg
 14465  1DAB  0020               	movlb	0	; select bank0
 14466  1DAC  00A9               	movwf	___bmul@multiplier
 14467  1DAD  01A8               	clrf	___bmul@product
 14468  1DAE                     l10227:	
 14469  1DAE  1C29               	btfss	___bmul@multiplier,0
 14470  1DAF  2DB4               	goto	l10231
 14471  1DB0  0826               	movf	___bmul@multiplicand,w
 14472  1DB1  00A7               	movwf	??___bmul
 14473  1DB2  0827               	movf	??___bmul,w
 14474  1DB3  07A8               	addwf	___bmul@product,f
 14475  1DB4                     l10231:	
 14476  1DB4  1003               	clrc
 14477  1DB5  0DA6               	rlf	___bmul@multiplicand,f
 14478  1DB6  1003               	clrc
 14479  1DB7  0CA9               	rrf	___bmul@multiplier,f
 14480  1DB8  08A9               	movf	___bmul@multiplier,f
 14481  1DB9  1D03               	skipz
 14482  1DBA  2DAE               	goto	l10227
 14483  1DBB  0828               	movf	___bmul@product,w
 14484  1DBC  0008               	return
 14485  1DBD                     __end_of___bmul:	
 14486                           
 14487                           	psect	text96
 14488  1F49                     __ptext96:	
 14489 ;; *************** function _setCmd_Status *****************
 14490 ;; Defined at:
 14491 ;;		line 651 in file "../src/Main_B1.c"
 14492 ;; Parameters:    Size  Location     Type
 14493 ;;  number          1    wreg     unsigned char 
 14494 ;;  cmd             1    6[BANK0 ] unsigned char 
 14495 ;; Auto vars:     Size  Location     Type
 14496 ;;  number          1    8[BANK0 ] unsigned char 
 14497 ;; Return value:  Size  Location     Type
 14498 ;;		None               void
 14499 ;; Registers used:
 14500 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14501 ;; Tracked objects:
 14502 ;;		On entry : 0/0
 14503 ;;		On exit  : 0/0
 14504 ;;		Unchanged: 0/0
 14505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14506 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14509 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;Total ram usage:        3 bytes
 14511 ;; Hardware stack levels used:    1
 14512 ;; Hardware stack levels required when called:    5
 14513 ;; This function calls:
 14514 ;;		Nothing
 14515 ;; This function is called by:
 14516 ;;		_setDimmerLights_OnOff
 14517 ;;		_setControl_Lights_Table
 14518 ;; This function uses a non-reentrant model
 14519 ;;
 14520                           
 14521                           
 14522                           ;psect for function _setCmd_Status
 14523  1F49                     _setCmd_Status:	
 14524                           
 14525                           ;incstack = 0
 14526                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14527                           ;setCmd_Status@number stored from wreg
 14528  1F49  0020               	movlb	0	; select bank0
 14529  1F4A  00A8               	movwf	setCmd_Status@number
 14530                           
 14531                           ;Main_B1.c: 652: switch (number) {
 14532  1F4B  2F5B               	goto	l10729
 14533  1F4C                     l10725:	
 14534                           ;Main_B1.c: 653: case 1:
 14535                           
 14536                           
 14537                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14538  1F4C  0826               	movf	setCmd_Status@cmd,w
 14539  1F4D  3A01               	xorlw	1
 14540  1F4E  3000               	movlw	0
 14541  1F4F  1903               	skipnz
 14542  1F50  3001               	movlw	1
 14543  1F51  00A7               	movwf	??_setCmd_Status
 14544  1F52  0021               	movlb	1	; select bank1
 14545  1F53  0848               	movf	_Cmd^(0+128),w
 14546  1F54  0020               	movlb	0	; select bank0
 14547  1F55  0627               	xorwf	??_setCmd_Status,w
 14548  1F56  39FE               	andlw	-2
 14549  1F57  0627               	xorwf	??_setCmd_Status,w
 14550  1F58  0021               	movlb	1	; select bank1
 14551  1F59  00C8               	movwf	_Cmd^(0+128)
 14552                           
 14553                           ;Main_B1.c: 656: }
 14554                           
 14555                           ;Main_B1.c: 655: break;
 14556  1F5A  0008               	return
 14557  1F5B                     l10729:	
 14558  1F5B  0020               	movlb	0	; select bank0
 14559  1F5C  0828               	movf	setCmd_Status@number,w
 14560                           
 14561                           ; Switch size 1, requested type "space"
 14562                           ; Number of cases is 1, Range of values is 1 to 1
 14563                           ; switch strategies available:
 14564                           ; Name         Instructions Cycles
 14565                           ; simple_byte            4     3 (average)
 14566                           ; direct_byte           11     9 (fixed)
 14567                           ; jumptable            263     9 (fixed)
 14568                           ;	Chosen strategy is simple_byte
 14569  1F5D  3A01               	xorlw	1	; case 1
 14570  1F5E  1903               	skipnz
 14571  1F5F  2F4C               	goto	l10725
 14572  1F60  2F61               	goto	l1496
 14573  1F61                     l1496:	
 14574  1F61  0008               	return
 14575  1F62                     __end_of_setCmd_Status:	
 14576                           
 14577                           	psect	text97
 14578  1C18                     __ptext97:	
 14579 ;; *************** function _getMain_All_LightsStatus *****************
 14580 ;; Defined at:
 14581 ;;		line 373 in file "../src/Main_B1.c"
 14582 ;; Parameters:    Size  Location     Type
 14583 ;;		None
 14584 ;; Auto vars:     Size  Location     Type
 14585 ;;  status          1    6[BANK0 ] unsigned char 
 14586 ;; Return value:  Size  Location     Type
 14587 ;;                  1    wreg      unsigned char 
 14588 ;; Registers used:
 14589 ;;		wreg, status,2
 14590 ;; Tracked objects:
 14591 ;;		On entry : 0/0
 14592 ;;		On exit  : 0/0
 14593 ;;		Unchanged: 0/0
 14594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14599 ;;Total ram usage:        1 bytes
 14600 ;; Hardware stack levels used:    1
 14601 ;; Hardware stack levels required when called:    5
 14602 ;; This function calls:
 14603 ;;		Nothing
 14604 ;; This function is called by:
 14605 ;;		_DimmerLights_Main
 14606 ;;		_setDimmerLights_Main
 14607 ;;		_setDimmerLights_OnOff
 14608 ;;		_Flash_Memory_Main
 14609 ;;		_Exception_Main
 14610 ;;		_Load_Main
 14611 ;;		_setTemp_Main
 14612 ;;		_setControl_Lights_Table
 14613 ;; This function uses a non-reentrant model
 14614 ;;
 14615                           
 14616                           
 14617                           ;psect for function _getMain_All_LightsStatus
 14618  1C18                     _getMain_All_LightsStatus:	
 14619                           
 14620                           ;Main_B1.c: 374: char status = 0;
 14621                           
 14622                           ;incstack = 0
 14623                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14624  1C18  0020               	movlb	0	; select bank0
 14625  1C19  01A6               	clrf	getMain_All_LightsStatus@status
 14626                           
 14627                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14628  1C1A  3000               	movlw	0
 14629  1C1B  0022               	movlb	2	; select bank2
 14630  1C1C  185E               	btfsc	(_DimmerLights1^(0+256)+1),0
 14631  1C1D  3001               	movlw	1
 14632  1C1E  0020               	movlb	0	; select bank0
 14633  1C1F  00A6               	movwf	getMain_All_LightsStatus@status
 14634                           
 14635                           ;Main_B1.c: 420: return status;
 14636  1C20  0826               	movf	getMain_All_LightsStatus@status,w
 14637  1C21  0008               	return
 14638  1C22                     __end_of_getMain_All_LightsStatus:	
 14639                           
 14640                           	psect	text98
 14641  0A82                     __ptext98:	
 14642 ;; *************** function _getDimmerLights_PercentToValue *****************
 14643 ;; Defined at:
 14644 ;;		line 1039 in file "../src/Dimmer_B1.c"
 14645 ;; Parameters:    Size  Location     Type
 14646 ;;  value           1    wreg     unsigned char 
 14647 ;; Auto vars:     Size  Location     Type
 14648 ;;  value           1    2[BANK1 ] unsigned char 
 14649 ;;  i               3    3[BANK1 ] float 
 14650 ;; Return value:  Size  Location     Type
 14651 ;;                  1    wreg      unsigned char 
 14652 ;; Registers used:
 14653 ;;		wreg, status,2, status,0, pclath, cstack
 14654 ;; Tracked objects:
 14655 ;;		On entry : 0/0
 14656 ;;		On exit  : 0/0
 14657 ;;		Unchanged: 0/0
 14658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14660 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 14661 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 14662 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 14663 ;;Total ram usage:        6 bytes
 14664 ;; Hardware stack levels used:    1
 14665 ;; Hardware stack levels required when called:    7
 14666 ;; This function calls:
 14667 ;;		___awtoft
 14668 ;;		___ftadd
 14669 ;;		___ftdiv
 14670 ;;		___ftmul
 14671 ;;		___ftneg
 14672 ;;		___fttol
 14673 ;; This function is called by:
 14674 ;;		_setDimmerLights_OnOff
 14675 ;;		_setRFSW_AdjControl
 14676 ;; This function uses a non-reentrant model
 14677 ;;
 14678                           
 14679                           
 14680                           ;psect for function _getDimmerLights_PercentToValue
 14681  0A82                     _getDimmerLights_PercentToValue:	
 14682                           
 14683                           ;incstack = 0
 14684                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14685                           ;getDimmerLights_PercentToValue@value stored from wreg
 14686  0A82  0021               	movlb	1	; select bank1
 14687  0A83  00DD               	movwf	getDimmerLights_PercentToValue@value^(0+128)
 14688                           
 14689                           ;Dimmer_B1.c: 1047: float i = ((char)(65*0.8)) - ((char)(10*0.8));
 14690  0A84  3000               	movlw	0
 14691  0A85  00DE               	movwf	getDimmerLights_PercentToValue@i^(0+128)
 14692  0A86  3030               	movlw	48
 14693  0A87  00DF               	movwf	(getDimmerLights_PercentToValue@i+1)^(0+128)
 14694  0A88  3042               	movlw	66
 14695  0A89  00E0               	movwf	(getDimmerLights_PercentToValue@i+2)^(0+128)
 14696                           
 14697                           ;Dimmer_B1.c: 1048: i /= 100;
 14698  0A8A  3000               	movlw	0
 14699  0A8B  0020               	movlb	0	; select bank0
 14700  0A8C  00B4               	movwf	___ftdiv@f2
 14701  0A8D  30C8               	movlw	200
 14702  0A8E  00B5               	movwf	___ftdiv@f2+1
 14703  0A8F  3042               	movlw	66
 14704  0A90  00B6               	movwf	___ftdiv@f2+2
 14705  0A91  0021               	movlb	1	; select bank1
 14706  0A92  085E               	movf	getDimmerLights_PercentToValue@i^(0+128),w
 14707  0A93  0020               	movlb	0	; select bank0
 14708  0A94  00B7               	movwf	___ftdiv@f1
 14709  0A95  0021               	movlb	1	; select bank1
 14710  0A96  085F               	movf	(getDimmerLights_PercentToValue@i+1)^(0+128),w
 14711  0A97  0020               	movlb	0	; select bank0
 14712  0A98  00B8               	movwf	___ftdiv@f1+1
 14713  0A99  0021               	movlb	1	; select bank1
 14714  0A9A  0860               	movf	(getDimmerLights_PercentToValue@i+2)^(0+128),w
 14715  0A9B  0020               	movlb	0	; select bank0
 14716  0A9C  00B9               	movwf	___ftdiv@f1+2
 14717  0A9D  318D  253A  318A   	fcall	___ftdiv
 14718  0AA0  0020               	movlb	0	; select bank0
 14719  0AA1  0834               	movf	?___ftdiv,w
 14720  0AA2  0021               	movlb	1	; select bank1
 14721  0AA3  00DE               	movwf	getDimmerLights_PercentToValue@i^(0+128)
 14722  0AA4  0020               	movlb	0	; select bank0
 14723  0AA5  0835               	movf	?___ftdiv+1,w
 14724  0AA6  0021               	movlb	1	; select bank1
 14725  0AA7  00DF               	movwf	(getDimmerLights_PercentToValue@i+1)^(0+128)
 14726  0AA8  0020               	movlb	0	; select bank0
 14727  0AA9  0836               	movf	?___ftdiv+2,w
 14728  0AAA  0021               	movlb	1	; select bank1
 14729  0AAB  00E0               	movwf	(getDimmerLights_PercentToValue@i+2)^(0+128)
 14730                           
 14731                           ;Dimmer_B1.c: 1050: return (char) (((char)(65*0.8)) - ((100 - value) * i));
 14732  0AAC  085D               	movf	getDimmerLights_PercentToValue@value^(0+128),w
 14733  0AAD  00DB               	movwf	??_getDimmerLights_PercentToValue^(0+128)
 14734  0AAE  01DC               	clrf	(??_getDimmerLights_PercentToValue^(0+128)+1)
 14735  0AAF  09DB               	comf	??_getDimmerLights_PercentToValue^(0+128),f
 14736  0AB0  09DC               	comf	(??_getDimmerLights_PercentToValue^(0+128)+1),f
 14737  0AB1  0ADB               	incf	??_getDimmerLights_PercentToValue^(0+128),f
 14738  0AB2  1903               	skipnz
 14739  0AB3  0ADC               	incf	(??_getDimmerLights_PercentToValue^(0+128)+1),f
 14740  0AB4  085B               	movf	??_getDimmerLights_PercentToValue^(0+128),w
 14741  0AB5  3E64               	addlw	100
 14742  0AB6  0020               	movlb	0	; select bank0
 14743  0AB7  00AE               	movwf	___awtoft@c
 14744  0AB8  3000               	movlw	0
 14745  0AB9  0021               	movlb	1	; select bank1
 14746  0ABA  3D5C               	addwfc	(??_getDimmerLights_PercentToValue+1)^(0+128),w
 14747  0ABB  0020               	movlb	0	; select bank0
 14748  0ABC  00AF               	movwf	___awtoft@c+1
 14749  0ABD  3190  20E1  318A   	fcall	___awtoft
 14750  0AC0  0020               	movlb	0	; select bank0
 14751  0AC1  082E               	movf	?___awtoft,w
 14752  0AC2  00B7               	movwf	___ftmul@f2
 14753  0AC3  082F               	movf	?___awtoft+1,w
 14754  0AC4  00B8               	movwf	___ftmul@f2+1
 14755  0AC5  0830               	movf	?___awtoft+2,w
 14756  0AC6  00B9               	movwf	___ftmul@f2+2
 14757  0AC7  0021               	movlb	1	; select bank1
 14758  0AC8  085E               	movf	getDimmerLights_PercentToValue@i^(0+128),w
 14759  0AC9  0020               	movlb	0	; select bank0
 14760  0ACA  00B4               	movwf	___ftmul@f1
 14761  0ACB  0021               	movlb	1	; select bank1
 14762  0ACC  085F               	movf	(getDimmerLights_PercentToValue@i+1)^(0+128),w
 14763  0ACD  0020               	movlb	0	; select bank0
 14764  0ACE  00B5               	movwf	___ftmul@f1+1
 14765  0ACF  0021               	movlb	1	; select bank1
 14766  0AD0  0860               	movf	(getDimmerLights_PercentToValue@i+2)^(0+128),w
 14767  0AD1  0020               	movlb	0	; select bank0
 14768  0AD2  00B6               	movwf	___ftmul@f1+2
 14769  0AD3  318E  2691  318A   	fcall	___ftmul
 14770  0AD6  0020               	movlb	0	; select bank0
 14771  0AD7  0834               	movf	?___ftmul,w
 14772  0AD8  00C4               	movwf	___ftneg@f1
 14773  0AD9  0835               	movf	?___ftmul+1,w
 14774  0ADA  00C5               	movwf	___ftneg@f1+1
 14775  0ADB  0836               	movf	?___ftmul+2,w
 14776  0ADC  00C6               	movwf	___ftneg@f1+2
 14777  0ADD  319C  2406  318A   	fcall	___ftneg
 14778  0AE0  0020               	movlb	0	; select bank0
 14779  0AE1  0844               	movf	?___ftneg,w
 14780  0AE2  00CA               	movwf	___ftadd@f2
 14781  0AE3  0845               	movf	?___ftneg+1,w
 14782  0AE4  00CB               	movwf	___ftadd@f2+1
 14783  0AE5  0846               	movf	?___ftneg+2,w
 14784  0AE6  00CC               	movwf	___ftadd@f2+2
 14785  0AE7  3000               	movlw	0
 14786  0AE8  00C7               	movwf	___ftadd@f1
 14787  0AE9  3050               	movlw	80
 14788  0AEA  00C8               	movwf	___ftadd@f1+1
 14789  0AEB  3042               	movlw	66
 14790  0AEC  00C9               	movwf	___ftadd@f1+2
 14791  0AED  3184  246E  318A   	fcall	___ftadd
 14792  0AF0  0020               	movlb	0	; select bank0
 14793  0AF1  0847               	movf	?___ftadd,w
 14794  0AF2  00D4               	movwf	___fttol@f1
 14795  0AF3  0848               	movf	?___ftadd+1,w
 14796  0AF4  00D5               	movwf	___fttol@f1+1
 14797  0AF5  0849               	movf	?___ftadd+2,w
 14798  0AF6  00D6               	movwf	___fttol@f1+2
 14799  0AF7  318B  237D         	fcall	___fttol
 14800  0AF9  0020               	movlb	0	; select bank0
 14801  0AFA  0854               	movf	?___fttol,w
 14802  0AFB  0008               	return
 14803  0AFC                     __end_of_getDimmerLights_PercentToValue:	
 14804                           
 14805                           	psect	text99
 14806  0E91                     __ptext99:	
 14807 ;; *************** function ___ftmul *****************
 14808 ;; Defined at:
 14809 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14810 ;; Parameters:    Size  Location     Type
 14811 ;;  f1              3   20[BANK0 ] float 
 14812 ;;  f2              3   23[BANK0 ] float 
 14813 ;; Auto vars:     Size  Location     Type
 14814 ;;  f3_as_produc    3   31[BANK0 ] unsigned um
 14815 ;;  sign            1   35[BANK0 ] unsigned char 
 14816 ;;  cntr            1   34[BANK0 ] unsigned char 
 14817 ;;  exp             1   30[BANK0 ] unsigned char 
 14818 ;; Return value:  Size  Location     Type
 14819 ;;                  3   20[BANK0 ] float 
 14820 ;; Registers used:
 14821 ;;		wreg, status,2, status,0, pclath, cstack
 14822 ;; Tracked objects:
 14823 ;;		On entry : 0/0
 14824 ;;		On exit  : 0/0
 14825 ;;		Unchanged: 0/0
 14826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14827 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14828 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14829 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;Total ram usage:       16 bytes
 14832 ;; Hardware stack levels used:    1
 14833 ;; Hardware stack levels required when called:    6
 14834 ;; This function calls:
 14835 ;;		___ftpack
 14836 ;; This function is called by:
 14837 ;;		_getDimmerLights_PercentToValue
 14838 ;; This function uses a non-reentrant model
 14839 ;;
 14840                           
 14841                           
 14842                           ;psect for function ___ftmul
 14843  0E91                     ___ftmul:	
 14844                           
 14845                           ;incstack = 0
 14846                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14847  0E91  0020               	movlb	0	; select bank0
 14848  0E92  0834               	movf	___ftmul@f1,w
 14849  0E93  00BA               	movwf	??___ftmul
 14850  0E94  0835               	movf	___ftmul@f1+1,w
 14851  0E95  00BB               	movwf	??___ftmul+1
 14852  0E96  0836               	movf	___ftmul@f1+2,w
 14853  0E97  00BC               	movwf	??___ftmul+2
 14854  0E98  1003               	clrc
 14855  0E99  0D3B               	rlf	??___ftmul+1,w
 14856  0E9A  0D3C               	rlf	??___ftmul+2,w
 14857  0E9B  00BD               	movwf	??___ftmul+3
 14858  0E9C  083D               	movf	??___ftmul+3,w
 14859  0E9D  00BE               	movwf	___ftmul@exp
 14860  0E9E  08BE               	movf	___ftmul@exp,f
 14861  0E9F  1D03               	skipz
 14862  0EA0  2EA8               	goto	l10373
 14863  0EA1  3000               	movlw	0
 14864  0EA2  00B4               	movwf	?___ftmul
 14865  0EA3  3000               	movlw	0
 14866  0EA4  00B5               	movwf	?___ftmul+1
 14867  0EA5  3000               	movlw	0
 14868  0EA6  00B6               	movwf	?___ftmul+2
 14869  0EA7  0008               	return
 14870  0EA8                     l10373:	
 14871  0EA8  0837               	movf	___ftmul@f2,w
 14872  0EA9  00BA               	movwf	??___ftmul
 14873  0EAA  0838               	movf	___ftmul@f2+1,w
 14874  0EAB  00BB               	movwf	??___ftmul+1
 14875  0EAC  0839               	movf	___ftmul@f2+2,w
 14876  0EAD  00BC               	movwf	??___ftmul+2
 14877  0EAE  1003               	clrc
 14878  0EAF  0D3B               	rlf	??___ftmul+1,w
 14879  0EB0  0D3C               	rlf	??___ftmul+2,w
 14880  0EB1  00BD               	movwf	??___ftmul+3
 14881  0EB2  083D               	movf	??___ftmul+3,w
 14882  0EB3  00C3               	movwf	___ftmul@sign
 14883  0EB4  08C3               	movf	___ftmul@sign,f
 14884  0EB5  1D03               	skipz
 14885  0EB6  2EBE               	goto	l10379
 14886  0EB7  3000               	movlw	0
 14887  0EB8  00B4               	movwf	?___ftmul
 14888  0EB9  3000               	movlw	0
 14889  0EBA  00B5               	movwf	?___ftmul+1
 14890  0EBB  3000               	movlw	0
 14891  0EBC  00B6               	movwf	?___ftmul+2
 14892  0EBD  0008               	return
 14893  0EBE                     l10379:	
 14894  0EBE  0843               	movf	___ftmul@sign,w
 14895  0EBF  3E7B               	addlw	123
 14896  0EC0  00BA               	movwf	??___ftmul
 14897  0EC1  083A               	movf	??___ftmul,w
 14898  0EC2  07BE               	addwf	___ftmul@exp,f
 14899  0EC3  0834               	movf	___ftmul@f1,w
 14900  0EC4  00BA               	movwf	??___ftmul
 14901  0EC5  0835               	movf	___ftmul@f1+1,w
 14902  0EC6  00BB               	movwf	??___ftmul+1
 14903  0EC7  0836               	movf	___ftmul@f1+2,w
 14904  0EC8  00BC               	movwf	??___ftmul+2
 14905  0EC9  3010               	movlw	16
 14906  0ECA                     u12205:	
 14907  0ECA  36BC               	lsrf	??___ftmul+2,f
 14908  0ECB  0CBB               	rrf	??___ftmul+1,f
 14909  0ECC  0CBA               	rrf	??___ftmul,f
 14910  0ECD  0B89               	decfsz	9,f
 14911  0ECE  2ECA               	goto	u12205
 14912  0ECF  083A               	movf	??___ftmul,w
 14913  0ED0  00BD               	movwf	??___ftmul+3
 14914  0ED1  083D               	movf	??___ftmul+3,w
 14915  0ED2  00C3               	movwf	___ftmul@sign
 14916  0ED3  0837               	movf	___ftmul@f2,w
 14917  0ED4  00BA               	movwf	??___ftmul
 14918  0ED5  0838               	movf	___ftmul@f2+1,w
 14919  0ED6  00BB               	movwf	??___ftmul+1
 14920  0ED7  0839               	movf	___ftmul@f2+2,w
 14921  0ED8  00BC               	movwf	??___ftmul+2
 14922  0ED9  3010               	movlw	16
 14923  0EDA                     u12215:	
 14924  0EDA  36BC               	lsrf	??___ftmul+2,f
 14925  0EDB  0CBB               	rrf	??___ftmul+1,f
 14926  0EDC  0CBA               	rrf	??___ftmul,f
 14927  0EDD  0B89               	decfsz	9,f
 14928  0EDE  2EDA               	goto	u12215
 14929  0EDF  083A               	movf	??___ftmul,w
 14930  0EE0  00BD               	movwf	??___ftmul+3
 14931  0EE1  083D               	movf	??___ftmul+3,w
 14932  0EE2  06C3               	xorwf	___ftmul@sign,f
 14933  0EE3  3080               	movlw	128
 14934  0EE4  00BA               	movwf	??___ftmul
 14935  0EE5  083A               	movf	??___ftmul,w
 14936  0EE6  05C3               	andwf	___ftmul@sign,f
 14937  0EE7  17B5               	bsf	___ftmul@f1+1,7
 14938  0EE8  17B8               	bsf	___ftmul@f2+1,7
 14939  0EE9  30FF               	movlw	255
 14940  0EEA  05B7               	andwf	___ftmul@f2,f
 14941  0EEB  30FF               	movlw	255
 14942  0EEC  05B8               	andwf	___ftmul@f2+1,f
 14943  0EED  3000               	movlw	0
 14944  0EEE  05B9               	andwf	___ftmul@f2+2,f
 14945  0EEF  3000               	movlw	0
 14946  0EF0  00BF               	movwf	___ftmul@f3_as_product
 14947  0EF1  3000               	movlw	0
 14948  0EF2  00C0               	movwf	___ftmul@f3_as_product+1
 14949  0EF3  3000               	movlw	0
 14950  0EF4  00C1               	movwf	___ftmul@f3_as_product+2
 14951  0EF5  3007               	movlw	7
 14952  0EF6  00BA               	movwf	??___ftmul
 14953  0EF7  083A               	movf	??___ftmul,w
 14954  0EF8  00C2               	movwf	___ftmul@cntr
 14955  0EF9                     l10391:	
 14956  0EF9  1C34               	btfss	___ftmul@f1,0
 14957  0EFA  2F01               	goto	l10395
 14958  0EFB  0837               	movf	___ftmul@f2,w
 14959  0EFC  07BF               	addwf	___ftmul@f3_as_product,f
 14960  0EFD  0838               	movf	___ftmul@f2+1,w
 14961  0EFE  3DC0               	addwfc	___ftmul@f3_as_product+1,f
 14962  0EFF  0839               	movf	___ftmul@f2+2,w
 14963  0F00  3DC1               	addwfc	___ftmul@f3_as_product+2,f
 14964  0F01                     l10395:	
 14965  0F01  3001               	movlw	1
 14966  0F02                     u12235:	
 14967  0F02  36B6               	lsrf	___ftmul@f1+2,f
 14968  0F03  0CB5               	rrf	___ftmul@f1+1,f
 14969  0F04  0CB4               	rrf	___ftmul@f1,f
 14970  0F05  0B89               	decfsz	9,f
 14971  0F06  2F02               	goto	u12235
 14972  0F07  3001               	movlw	1
 14973  0F08                     u12245:	
 14974  0F08  35B7               	lslf	___ftmul@f2,f
 14975  0F09  0DB8               	rlf	___ftmul@f2+1,f
 14976  0F0A  0DB9               	rlf	___ftmul@f2+2,f
 14977  0F0B  0B89               	decfsz	9,f
 14978  0F0C  2F08               	goto	u12245
 14979  0F0D  3001               	movlw	1
 14980  0F0E  02C2               	subwf	___ftmul@cntr,f
 14981  0F0F  1D03               	btfss	3,2
 14982  0F10  2EF9               	goto	l10391
 14983  0F11  3009               	movlw	9
 14984  0F12  00BA               	movwf	??___ftmul
 14985  0F13  083A               	movf	??___ftmul,w
 14986  0F14  00C2               	movwf	___ftmul@cntr
 14987  0F15                     l10403:	
 14988  0F15  1C34               	btfss	___ftmul@f1,0
 14989  0F16  2F1D               	goto	l10407
 14990  0F17  0837               	movf	___ftmul@f2,w
 14991  0F18  07BF               	addwf	___ftmul@f3_as_product,f
 14992  0F19  0838               	movf	___ftmul@f2+1,w
 14993  0F1A  3DC0               	addwfc	___ftmul@f3_as_product+1,f
 14994  0F1B  0839               	movf	___ftmul@f2+2,w
 14995  0F1C  3DC1               	addwfc	___ftmul@f3_as_product+2,f
 14996  0F1D                     l10407:	
 14997  0F1D  3001               	movlw	1
 14998  0F1E                     u12275:	
 14999  0F1E  36B6               	lsrf	___ftmul@f1+2,f
 15000  0F1F  0CB5               	rrf	___ftmul@f1+1,f
 15001  0F20  0CB4               	rrf	___ftmul@f1,f
 15002  0F21  0B89               	decfsz	9,f
 15003  0F22  2F1E               	goto	u12275
 15004  0F23  3001               	movlw	1
 15005  0F24                     u12285:	
 15006  0F24  36C1               	lsrf	___ftmul@f3_as_product+2,f
 15007  0F25  0CC0               	rrf	___ftmul@f3_as_product+1,f
 15008  0F26  0CBF               	rrf	___ftmul@f3_as_product,f
 15009  0F27  0B89               	decfsz	9,f
 15010  0F28  2F24               	goto	u12285
 15011  0F29  3001               	movlw	1
 15012  0F2A  02C2               	subwf	___ftmul@cntr,f
 15013  0F2B  1D03               	btfss	3,2
 15014  0F2C  2F15               	goto	l10403
 15015  0F2D  083F               	movf	___ftmul@f3_as_product,w
 15016  0F2E  00A6               	movwf	___ftpack@arg
 15017  0F2F  0840               	movf	___ftmul@f3_as_product+1,w
 15018  0F30  00A7               	movwf	___ftpack@arg+1
 15019  0F31  0841               	movf	___ftmul@f3_as_product+2,w
 15020  0F32  00A8               	movwf	___ftpack@arg+2
 15021  0F33  083E               	movf	___ftmul@exp,w
 15022  0F34  00BA               	movwf	??___ftmul
 15023  0F35  083A               	movf	??___ftmul,w
 15024  0F36  00A9               	movwf	___ftpack@exp
 15025  0F37  0843               	movf	___ftmul@sign,w
 15026  0F38  00BB               	movwf	??___ftmul+1
 15027  0F39  083B               	movf	??___ftmul+1,w
 15028  0F3A  00AA               	movwf	___ftpack@sign
 15029  0F3B  3196  2663         	fcall	___ftpack
 15030  0F3D  0020               	movlb	0	; select bank0
 15031  0F3E  0826               	movf	?___ftpack,w
 15032  0F3F  00B4               	movwf	?___ftmul
 15033  0F40  0827               	movf	?___ftpack+1,w
 15034  0F41  00B5               	movwf	?___ftmul+1
 15035  0F42  0828               	movf	?___ftpack+2,w
 15036  0F43  00B6               	movwf	?___ftmul+2
 15037  0F44  0008               	return
 15038  0F45                     __end_of___ftmul:	
 15039                           
 15040                           	psect	text100
 15041  1D24                     __ptext100:	
 15042 ;; *************** function _getDelayOff_GO *****************
 15043 ;; Defined at:
 15044 ;;		line 114 in file "../src/DelayOff_B1.c"
 15045 ;; Parameters:    Size  Location     Type
 15046 ;;  sw              1    wreg     unsigned char 
 15047 ;; Auto vars:     Size  Location     Type
 15048 ;;  sw              1    8[BANK0 ] unsigned char 
 15049 ;;  go              1    9[BANK0 ] unsigned char 
 15050 ;; Return value:  Size  Location     Type
 15051 ;;                  1    wreg      unsigned char 
 15052 ;; Registers used:
 15053 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15054 ;; Tracked objects:
 15055 ;;		On entry : 0/0
 15056 ;;		On exit  : 0/0
 15057 ;;		Unchanged: 0/0
 15058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15060 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15062 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15063 ;;Total ram usage:        2 bytes
 15064 ;; Hardware stack levels used:    1
 15065 ;; Hardware stack levels required when called:    6
 15066 ;; This function calls:
 15067 ;;		_DelayOffPointSelect
 15068 ;; This function is called by:
 15069 ;;		_setDimmerLights_OnOff
 15070 ;; This function uses a non-reentrant model
 15071 ;;
 15072                           
 15073                           
 15074                           ;psect for function _getDelayOff_GO
 15075  1D24                     _getDelayOff_GO:	
 15076                           
 15077                           ;incstack = 0
 15078                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15079                           ;getDelayOff_GO@sw stored from wreg
 15080  1D24  0020               	movlb	0	; select bank0
 15081  1D25  00A8               	movwf	getDelayOff_GO@sw
 15082                           
 15083                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15084  1D26  0828               	movf	getDelayOff_GO@sw,w
 15085  1D27  319C  242C         	fcall	_DelayOffPointSelect
 15086                           
 15087                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15088  1D29  0020               	movlb	0	; select bank0
 15089  1D2A  0863               	movf	_DelayOff,w
 15090  1D2B  0086               	movwf	6
 15091  1D2C  3001               	movlw	1	; select bank2/3
 15092  1D2D  0087               	movwf	7
 15093  1D2E  3000               	movlw	0
 15094  1D2F  1881               	btfsc	1,1
 15095  1D30  3001               	movlw	1
 15096  1D31  00A9               	movwf	getDelayOff_GO@go
 15097                           
 15098                           ;DelayOff_B1.c: 117: return go;
 15099  1D32  0829               	movf	getDelayOff_GO@go,w
 15100  1D33  0008               	return
 15101  1D34                     __end_of_getDelayOff_GO:	
 15102                           
 15103                           	psect	text101
 15104  1D99                     __ptext101:	
 15105 ;; *************** function _getCmd_Status *****************
 15106 ;; Defined at:
 15107 ;;		line 659 in file "../src/Main_B1.c"
 15108 ;; Parameters:    Size  Location     Type
 15109 ;;  number          1    wreg     unsigned char 
 15110 ;; Auto vars:     Size  Location     Type
 15111 ;;  number          1    6[BANK0 ] unsigned char 
 15112 ;;  cmd             1    7[BANK0 ] unsigned char 
 15113 ;; Return value:  Size  Location     Type
 15114 ;;                  1    wreg      unsigned char 
 15115 ;; Registers used:
 15116 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15117 ;; Tracked objects:
 15118 ;;		On entry : 0/0
 15119 ;;		On exit  : 0/0
 15120 ;;		Unchanged: 0/0
 15121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;Total ram usage:        2 bytes
 15127 ;; Hardware stack levels used:    1
 15128 ;; Hardware stack levels required when called:    5
 15129 ;; This function calls:
 15130 ;;		Nothing
 15131 ;; This function is called by:
 15132 ;;		_setDimmerLights_OnOff
 15133 ;; This function uses a non-reentrant model
 15134 ;;
 15135                           
 15136                           
 15137                           ;psect for function _getCmd_Status
 15138  1D99                     _getCmd_Status:	
 15139                           
 15140                           ;incstack = 0
 15141                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15142                           ;getCmd_Status@number stored from wreg
 15143  1D99  0020               	movlb	0	; select bank0
 15144  1D9A  00A6               	movwf	getCmd_Status@number
 15145                           
 15146                           ;Main_B1.c: 660: char cmd = 0;
 15147  1D9B  01A7               	clrf	getCmd_Status@cmd
 15148                           
 15149                           ;Main_B1.c: 661: switch (number) {
 15150  1D9C  2DA4               	goto	l10979
 15151  1D9D                     l10975:	
 15152                           ;Main_B1.c: 662: case 1:
 15153                           
 15154                           
 15155                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15156  1D9D  3000               	movlw	0
 15157  1D9E  0021               	movlb	1	; select bank1
 15158  1D9F  1848               	btfsc	_Cmd^(0+128),0
 15159  1DA0  3001               	movlw	1
 15160  1DA1  0020               	movlb	0	; select bank0
 15161  1DA2  00A7               	movwf	getCmd_Status@cmd
 15162                           
 15163                           ;Main_B1.c: 665: }
 15164                           
 15165                           ;Main_B1.c: 664: break;
 15166  1DA3  2DA9               	goto	l10981
 15167  1DA4                     l10979:	
 15168  1DA4  0826               	movf	getCmd_Status@number,w
 15169                           
 15170                           ; Switch size 1, requested type "space"
 15171                           ; Number of cases is 1, Range of values is 1 to 1
 15172                           ; switch strategies available:
 15173                           ; Name         Instructions Cycles
 15174                           ; simple_byte            4     3 (average)
 15175                           ; direct_byte           11     9 (fixed)
 15176                           ; jumptable            263     9 (fixed)
 15177                           ;	Chosen strategy is simple_byte
 15178  1DA5  3A01               	xorlw	1	; case 1
 15179  1DA6  1903               	skipnz
 15180  1DA7  2D9D               	goto	l10975
 15181  1DA8  2DA9               	goto	l10981
 15182  1DA9                     l10981:	
 15183                           
 15184                           ;Main_B1.c: 666: return cmd;
 15185  1DA9  0827               	movf	getCmd_Status@cmd,w
 15186  1DAA  0008               	return
 15187  1DAB                     __end_of_getCmd_Status:	
 15188                           
 15189                           	psect	text102
 15190  14FB                     __ptext102:	
 15191 ;; *************** function _setDimmerLights_Dimming *****************
 15192 ;; Defined at:
 15193 ;;		line 883 in file "../src/Dimmer_B1.c"
 15194 ;; Parameters:    Size  Location     Type
 15195 ;;  lights          1    wreg     unsigned char 
 15196 ;;  status          1   13[BANK1 ] unsigned char 
 15197 ;; Auto vars:     Size  Location     Type
 15198 ;;  lights          1   15[BANK1 ] unsigned char 
 15199 ;; Return value:  Size  Location     Type
 15200 ;;		None               void
 15201 ;; Registers used:
 15202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15203 ;; Tracked objects:
 15204 ;;		On entry : 0/0
 15205 ;;		On exit  : 0/0
 15206 ;;		Unchanged: 0/0
 15207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15208 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15210 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15211 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 15212 ;;Total ram usage:        3 bytes
 15213 ;; Hardware stack levels used:    1
 15214 ;; Hardware stack levels required when called:    8
 15215 ;; This function calls:
 15216 ;;		_getDimmerIntr_DimmingValue
 15217 ;;		_getDimmerLights_ValueToPercent
 15218 ;;		_setBuz
 15219 ;;		_setDimmerIntr_Dimming_Sw
 15220 ;;		_setDimmerIntr_MaxmumValue
 15221 ;;		_setDimmerLights_Line
 15222 ;;		_setProductData
 15223 ;;		_setRF_DimmerLights
 15224 ;;		_setRF_TransceiveGO
 15225 ;;		_setTxData
 15226 ;; This function is called by:
 15227 ;;		_setDimmerLights_Main
 15228 ;; This function uses a non-reentrant model
 15229 ;;
 15230                           
 15231                           
 15232                           ;psect for function _setDimmerLights_Dimming
 15233  14FB                     _setDimmerLights_Dimming:	
 15234                           
 15235                           ;incstack = 0
 15236                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15237                           ;setDimmerLights_Dimming@lights stored from wreg
 15238  14FB  0021               	movlb	1	; select bank1
 15239  14FC  00EA               	movwf	setDimmerLights_Dimming@lights^(0+128)
 15240                           
 15241                           ;Dimmer_B1.c: 884: if (status == 1) {
 15242  14FD  0868               	movf	setDimmerLights_Dimming@status^(0+128),w
 15243  14FE  3A01               	xorlw	1
 15244  14FF  1D03               	skipz
 15245  1500  2D16               	goto	l11209
 15246                           
 15247                           ;Dimmer_B1.c: 885: setDimmerIntr_Dimming_Sw(lights, 1);
 15248  1501  0020               	movlb	0	; select bank0
 15249  1502  01A6               	clrf	setDimmerIntr_Dimming_Sw@command
 15250  1503  0AA6               	incf	setDimmerIntr_Dimming_Sw@command,f
 15251  1504  0021               	movlb	1	; select bank1
 15252  1505  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15253  1506  319E  26BD  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15254                           
 15255                           ;Dimmer_B1.c: 888: setRF_TransceiveGO(0);
 15256  1509  3000               	movlw	0
 15257  150A  319D  25E1  3194   	fcall	_setRF_TransceiveGO
 15258                           
 15259                           ;Dimmer_B1.c: 890: setBuz(1, 100);
 15260  150D  3064               	movlw	100
 15261  150E  0020               	movlb	0	; select bank0
 15262  150F  00AF               	movwf	setBuz@time
 15263  1510  3000               	movlw	0
 15264  1511  00B0               	movwf	setBuz@time+1
 15265  1512  3001               	movlw	1
 15266  1513  3195  2550         	fcall	_setBuz
 15267                           
 15268                           ;Dimmer_B1.c: 891: } else if (status == 0) {
 15269  1515  0008               	return
 15270  1516                     l11209:	
 15271  1516  0021               	movlb	1	; select bank1
 15272  1517  08E8               	movf	setDimmerLights_Dimming@status^(0+128),f
 15273  1518  1D03               	skipz
 15274  1519  0008               	return
 15275                           
 15276                           ;Dimmer_B1.c: 892: setDimmerIntr_Dimming_Sw(lights, 0);
 15277  151A  0020               	movlb	0	; select bank0
 15278  151B  01A6               	clrf	setDimmerIntr_Dimming_Sw@command
 15279  151C  0021               	movlb	1	; select bank1
 15280  151D  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15281  151E  319E  26BD  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15282                           
 15283                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 15284  1521  0022               	movlb	2	; select bank2
 15285  1522  112D               	bcf	_Dimmer^(0+256),2
 15286                           
 15287                           ;Dimmer_B1.c: 896: setDimmerLights_Line(lights);
 15288  1523  0021               	movlb	1	; select bank1
 15289  1524  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15290  1525  319D  2544  3194   	fcall	_setDimmerLights_Line
 15291                           
 15292                           ;Dimmer_B1.c: 899: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15293  1528  0021               	movlb	1	; select bank1
 15294  1529  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15295  152A  319C  24F6  3194   	fcall	_getDimmerIntr_DimmingValue
 15296  152D  0021               	movlb	1	; select bank1
 15297  152E  00E9               	movwf	??_setDimmerLights_Dimming^(0+128)
 15298  152F  0869               	movf	??_setDimmerLights_Dimming^(0+128),w
 15299  1530  00E1               	movwf	setDimmerIntr_MaxmumValue@value^(0+128)
 15300  1531  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15301  1532  319C  24DA  3194   	fcall	_setDimmerIntr_MaxmumValue
 15302                           
 15303                           ;Dimmer_B1.c: 900: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15304  1535  0021               	movlb	1	; select bank1
 15305  1536  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15306  1537  319C  24F6  3194   	fcall	_getDimmerIntr_DimmingValue
 15307  153A  318A  2208  3194   	fcall	_getDimmerLights_ValueToPercent
 15308  153D  0021               	movlb	1	; select bank1
 15309  153E  00E9               	movwf	??_setDimmerLights_Dimming^(0+128)
 15310  153F  0869               	movf	??_setDimmerLights_Dimming^(0+128),w
 15311  1540  00E1               	movwf	setProductData@value^(0+128)
 15312  1541  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15313  1542  3E14               	addlw	20
 15314  1543  319C  24E7  3194   	fcall	_setProductData
 15315                           
 15316                           ;Dimmer_B1.c: 910: setRF_DimmerLights(lights, 1);
 15317  1546  0021               	movlb	1	; select bank1
 15318  1547  01E3               	clrf	setRF_DimmerLights@on^(0+128)
 15319  1548  0AE3               	incf	setRF_DimmerLights@on^(0+128),f
 15320  1549  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15321  154A  3196  2604  3194   	fcall	_setRF_DimmerLights
 15322                           
 15323                           ;Dimmer_B1.c: 911: setTxData();
 15324  154D  318F  2745         	fcall	_setTxData
 15325  154F  0008               	return
 15326  1550                     __end_of_setDimmerLights_Dimming:	
 15327                           
 15328                           	psect	text103
 15329  0F45                     __ptext103:	
 15330 ;; *************** function _setTxData *****************
 15331 ;; Defined at:
 15332 ;;		line 183 in file "../src/RF_Control_B1.c"
 15333 ;; Parameters:    Size  Location     Type
 15334 ;;		None
 15335 ;; Auto vars:     Size  Location     Type
 15336 ;;  i               1    0        unsigned char 
 15337 ;; Return value:  Size  Location     Type
 15338 ;;		None               void
 15339 ;; Registers used:
 15340 ;;		wreg, fsr1l, fsr1h, status,2
 15341 ;; Tracked objects:
 15342 ;;		On entry : 0/0
 15343 ;;		On exit  : 0/0
 15344 ;;		Unchanged: 0/0
 15345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15349 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15350 ;;Total ram usage:        1 bytes
 15351 ;; Hardware stack levels used:    1
 15352 ;; Hardware stack levels required when called:    5
 15353 ;; This function calls:
 15354 ;;		Nothing
 15355 ;; This function is called by:
 15356 ;;		_setDimmerLights_OnOff
 15357 ;;		_setDimmerLights_Dimming
 15358 ;;		_getRxData
 15359 ;;		_setControl_Lights_Table
 15360 ;;		_setRFSW_Control
 15361 ;;		_setRFSW_AdjControl
 15362 ;; This function uses a non-reentrant model
 15363 ;;
 15364                           
 15365                           
 15366                           ;psect for function _setTxData
 15367  0F45                     _setTxData:	
 15368                           
 15369                           ;RF_Control_B1.c: 184: char i;
 15370                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15371                           
 15372                           ;incstack = 0
 15373                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15374  0F45  0021               	movlb	1	; select bank1
 15375  0F46  1C20               	btfss	_RF1^(0+128),0
 15376  0F47  0008               	return
 15377                           
 15378                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15379  0F48  1520               	bsf	_RF1^(0+128),2
 15380                           
 15381                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15382  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15383  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15384                           
 15385                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15386  0F4B  3063               	movlw	99
 15387  0F4C  0020               	movlb	0	; select bank0
 15388  0F4D  00A6               	movwf	??_setTxData
 15389  0F4E  0826               	movf	??_setTxData,w
 15390  0F4F  0023               	movlb	3	; select bank3
 15391  0F50  00A0               	movwf	_RF_Data^(0+384)
 15392                           
 15393                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15394  0F51  3002               	movlw	2
 15395  0F52  0020               	movlb	0	; select bank0
 15396  0F53  00A6               	movwf	??_setTxData
 15397  0F54  0826               	movf	??_setTxData,w
 15398  0F55  0023               	movlb	3	; select bank3
 15399  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15400                           
 15401                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15402  0F57  0021               	movlb	1	; select bank1
 15403  0F58  086F               	movf	_product^(0+128),w
 15404  0F59  0086               	movwf	6
 15405  0F5A  3002               	movlw	2	; select bank4/5
 15406  0F5B  0087               	movwf	7
 15407  0F5C  3002               	movlw	2	; select bank4/5
 15408  0F5D  3F42               	moviw [2]fsr1
 15409  0F5E  0023               	movlb	3	; select bank3
 15410  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15411                           
 15412                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15413  0F60  0021               	movlb	1	; select bank1
 15414  0F61  086F               	movf	_product^(0+128),w
 15415  0F62  0086               	movwf	6
 15416  0F63  3002               	movlw	2	; select bank4/5
 15417  0F64  0087               	movwf	7
 15418  0F65  3002               	movlw	2	; select bank4/5
 15419  0F66  3F43               	moviw [3]fsr1
 15420  0F67  0023               	movlb	3	; select bank3
 15421  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15422                           
 15423                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15424  0F69  0021               	movlb	1	; select bank1
 15425  0F6A  086F               	movf	_product^(0+128),w
 15426  0F6B  0086               	movwf	6
 15427  0F6C  3002               	movlw	2	; select bank4/5
 15428  0F6D  0087               	movwf	7
 15429  0F6E  3002               	movlw	2	; select bank4/5
 15430  0F6F  3F44               	moviw [4]fsr1
 15431  0F70  0023               	movlb	3	; select bank3
 15432  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15433                           
 15434                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15435  0F72  0021               	movlb	1	; select bank1
 15436  0F73  086F               	movf	_product^(0+128),w
 15437  0F74  0086               	movwf	6
 15438  0F75  3002               	movlw	2	; select bank4/5
 15439  0F76  0087               	movwf	7
 15440  0F77  3002               	movlw	2	; select bank4/5
 15441  0F78  3F45               	moviw [5]fsr1
 15442  0F79  0023               	movlb	3	; select bank3
 15443  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15444                           
 15445                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15446  0F7B  0021               	movlb	1	; select bank1
 15447  0F7C  086F               	movf	_product^(0+128),w
 15448  0F7D  0086               	movwf	6
 15449  0F7E  3002               	movlw	2	; select bank4/5
 15450  0F7F  0087               	movwf	7
 15451  0F80  3002               	movlw	2	; select bank4/5
 15452  0F81  3F46               	moviw [6]fsr1
 15453  0F82  0023               	movlb	3	; select bank3
 15454  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15455                           
 15456                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15457  0F84  0021               	movlb	1	; select bank1
 15458  0F85  086F               	movf	_product^(0+128),w
 15459  0F86  0086               	movwf	6
 15460  0F87  3002               	movlw	2	; select bank4/5
 15461  0F88  0087               	movwf	7
 15462  0F89  3002               	movlw	2	; select bank4/5
 15463  0F8A  3F47               	moviw [7]fsr1
 15464  0F8B  0023               	movlb	3	; select bank3
 15465  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15466                           
 15467                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15468  0F8D  0021               	movlb	1	; select bank1
 15469  0F8E  086F               	movf	_product^(0+128),w
 15470  0F8F  0086               	movwf	6
 15471  0F90  3002               	movlw	2	; select bank4/5
 15472  0F91  0087               	movwf	7
 15473  0F92  3002               	movlw	2	; select bank4/5
 15474  0F93  3F48               	moviw [8]fsr1
 15475  0F94  0023               	movlb	3	; select bank3
 15476  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15477                           
 15478                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15479  0F96  0021               	movlb	1	; select bank1
 15480  0F97  086F               	movf	_product^(0+128),w
 15481  0F98  0086               	movwf	6
 15482  0F99  3002               	movlw	2	; select bank4/5
 15483  0F9A  0087               	movwf	7
 15484  0F9B  3002               	movlw	2	; select bank4/5
 15485  0F9C  3F49               	moviw [9]fsr1
 15486  0F9D  0023               	movlb	3	; select bank3
 15487  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15488                           
 15489                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15490  0F9F  0021               	movlb	1	; select bank1
 15491  0FA0  086F               	movf	_product^(0+128),w
 15492  0FA1  0086               	movwf	6
 15493  0FA2  3002               	movlw	2	; select bank4/5
 15494  0FA3  0087               	movwf	7
 15495  0FA4  3002               	movlw	2	; select bank4/5
 15496  0FA5  3F4A               	moviw [10]fsr1
 15497  0FA6  0023               	movlb	3	; select bank3
 15498  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15499                           
 15500                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15501  0FA8  0021               	movlb	1	; select bank1
 15502  0FA9  086F               	movf	_product^(0+128),w
 15503  0FAA  0086               	movwf	6
 15504  0FAB  3002               	movlw	2	; select bank4/5
 15505  0FAC  0087               	movwf	7
 15506  0FAD  3002               	movlw	2	; select bank4/5
 15507  0FAE  3F4B               	moviw [11]fsr1
 15508  0FAF  0023               	movlb	3	; select bank3
 15509  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15510                           
 15511                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15512  0FB1  0021               	movlb	1	; select bank1
 15513  0FB2  086F               	movf	_product^(0+128),w
 15514  0FB3  0086               	movwf	6
 15515  0FB4  3002               	movlw	2	; select bank4/5
 15516  0FB5  0087               	movwf	7
 15517  0FB6  3002               	movlw	2	; select bank4/5
 15518  0FB7  3F4C               	moviw [12]fsr1
 15519  0FB8  0023               	movlb	3	; select bank3
 15520  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15521                           
 15522                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15523  0FBA  0021               	movlb	1	; select bank1
 15524  0FBB  086F               	movf	_product^(0+128),w
 15525  0FBC  0086               	movwf	6
 15526  0FBD  3002               	movlw	2	; select bank4/5
 15527  0FBE  0087               	movwf	7
 15528  0FBF  3002               	movlw	2	; select bank4/5
 15529  0FC0  3F4D               	moviw [13]fsr1
 15530  0FC1  0023               	movlb	3	; select bank3
 15531  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15532                           
 15533                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15534  0FC3  0021               	movlb	1	; select bank1
 15535  0FC4  086F               	movf	_product^(0+128),w
 15536  0FC5  0086               	movwf	6
 15537  0FC6  3002               	movlw	2	; select bank4/5
 15538  0FC7  0087               	movwf	7
 15539  0FC8  3002               	movlw	2	; select bank4/5
 15540  0FC9  3F4E               	moviw [14]fsr1
 15541  0FCA  0023               	movlb	3	; select bank3
 15542  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15543                           
 15544                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15545  0FCC  0021               	movlb	1	; select bank1
 15546  0FCD  086F               	movf	_product^(0+128),w
 15547  0FCE  0086               	movwf	6
 15548  0FCF  3002               	movlw	2	; select bank4/5
 15549  0FD0  0087               	movwf	7
 15550  0FD1  3002               	movlw	2	; select bank4/5
 15551  0FD2  3F4F               	moviw [15]fsr1
 15552  0FD3  0023               	movlb	3	; select bank3
 15553  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15554                           
 15555                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15556  0FD5  0021               	movlb	1	; select bank1
 15557  0FD6  086F               	movf	_product^(0+128),w
 15558  0FD7  0086               	movwf	6
 15559  0FD8  3002               	movlw	2	; select bank4/5
 15560  0FD9  0087               	movwf	7
 15561  0FDA  3002               	movlw	2	; select bank4/5
 15562  0FDB  3F50               	moviw [16]fsr1
 15563  0FDC  0023               	movlb	3	; select bank3
 15564  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15565                           
 15566                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15567  0FDE  0021               	movlb	1	; select bank1
 15568  0FDF  086F               	movf	_product^(0+128),w
 15569  0FE0  0086               	movwf	6
 15570  0FE1  3002               	movlw	2	; select bank4/5
 15571  0FE2  0087               	movwf	7
 15572  0FE3  3002               	movlw	2	; select bank4/5
 15573  0FE4  3F51               	moviw [17]fsr1
 15574  0FE5  0023               	movlb	3	; select bank3
 15575  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15576                           
 15577                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15578  0FE7  0021               	movlb	1	; select bank1
 15579  0FE8  086F               	movf	_product^(0+128),w
 15580  0FE9  0086               	movwf	6
 15581  0FEA  3002               	movlw	2	; select bank4/5
 15582  0FEB  0087               	movwf	7
 15583  0FEC  3002               	movlw	2	; select bank4/5
 15584  0FED  3F52               	moviw [18]fsr1
 15585  0FEE  0023               	movlb	3	; select bank3
 15586  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15587                           
 15588                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15589  0FF0  0021               	movlb	1	; select bank1
 15590  0FF1  086F               	movf	_product^(0+128),w
 15591  0FF2  0086               	movwf	6
 15592  0FF3  3002               	movlw	2	; select bank4/5
 15593  0FF4  0087               	movwf	7
 15594  0FF5  3002               	movlw	2	; select bank4/5
 15595  0FF6  3F53               	moviw [19]fsr1
 15596  0FF7  0023               	movlb	3	; select bank3
 15597  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15598                           
 15599                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15600  0FF9  30D1               	movlw	209
 15601  0FFA  0020               	movlb	0	; select bank0
 15602  0FFB  00A6               	movwf	??_setTxData
 15603  0FFC  0826               	movf	??_setTxData,w
 15604  0FFD  0023               	movlb	3	; select bank3
 15605  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15606  0FFF  0008               	return
 15607  1000                     __end_of_setTxData:	
 15608                           
 15609                           	psect	text104
 15610  1DE1                     __ptext104:	
 15611 ;; *************** function _setRF_TransceiveGO *****************
 15612 ;; Defined at:
 15613 ;;		line 461 in file "../src/RF_Control_B1.c"
 15614 ;; Parameters:    Size  Location     Type
 15615 ;;  command         1    wreg     unsigned char 
 15616 ;; Auto vars:     Size  Location     Type
 15617 ;;  command         1    7[BANK0 ] unsigned char 
 15618 ;; Return value:  Size  Location     Type
 15619 ;;		None               void
 15620 ;; Registers used:
 15621 ;;		wreg, status,2, status,0
 15622 ;; Tracked objects:
 15623 ;;		On entry : 0/0
 15624 ;;		On exit  : 0/0
 15625 ;;		Unchanged: 0/0
 15626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15630 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15631 ;;Total ram usage:        2 bytes
 15632 ;; Hardware stack levels used:    1
 15633 ;; Hardware stack levels required when called:    5
 15634 ;; This function calls:
 15635 ;;		Nothing
 15636 ;; This function is called by:
 15637 ;;		_setDimmerLights_Dimming
 15638 ;; This function uses a non-reentrant model
 15639 ;;
 15640                           
 15641                           
 15642                           ;psect for function _setRF_TransceiveGO
 15643  1DE1                     _setRF_TransceiveGO:	
 15644                           
 15645                           ;incstack = 0
 15646                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15647                           ;setRF_TransceiveGO@command stored from wreg
 15648  1DE1  0020               	movlb	0	; select bank0
 15649  1DE2  00A7               	movwf	setRF_TransceiveGO@command
 15650                           
 15651                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15652  1DE3  0827               	movf	setRF_TransceiveGO@command,w
 15653  1DE4  3A01               	xorlw	1
 15654  1DE5  3000               	movlw	0
 15655  1DE6  1903               	skipnz
 15656  1DE7  3001               	movlw	1
 15657  1DE8  00A6               	movwf	??_setRF_TransceiveGO
 15658  1DE9  0DA6               	rlf	??_setRF_TransceiveGO,f
 15659  1DEA  0DA6               	rlf	??_setRF_TransceiveGO,f
 15660  1DEB  0021               	movlb	1	; select bank1
 15661  1DEC  0820               	movf	_RF1^(0+128),w
 15662  1DED  0020               	movlb	0	; select bank0
 15663  1DEE  0626               	xorwf	??_setRF_TransceiveGO,w
 15664  1DEF  39FB               	andlw	-5
 15665  1DF0  0626               	xorwf	??_setRF_TransceiveGO,w
 15666  1DF1  0021               	movlb	1	; select bank1
 15667  1DF2  00A0               	movwf	_RF1^(0+128)
 15668  1DF3  0008               	return
 15669  1DF4                     __end_of_setRF_TransceiveGO:	
 15670                           
 15671                           	psect	text105
 15672  1604                     __ptext105:	
 15673 ;; *************** function _setRF_DimmerLights *****************
 15674 ;; Defined at:
 15675 ;;		line 446 in file "../src/RF_Control_B1.c"
 15676 ;; Parameters:    Size  Location     Type
 15677 ;;  lights          1    wreg     unsigned char 
 15678 ;;  on              1    8[BANK1 ] unsigned char 
 15679 ;; Auto vars:     Size  Location     Type
 15680 ;;  lights          1   12[BANK1 ] unsigned char 
 15681 ;;  status          1   11[BANK1 ] unsigned char 
 15682 ;; Return value:  Size  Location     Type
 15683 ;;		None               void
 15684 ;; Registers used:
 15685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15686 ;; Tracked objects:
 15687 ;;		On entry : 0/0
 15688 ;;		On exit  : 0/0
 15689 ;;		Unchanged: 0/0
 15690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15691 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 15693 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 15694 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 15695 ;;Total ram usage:        5 bytes
 15696 ;; Hardware stack levels used:    1
 15697 ;; Hardware stack levels required when called:    6
 15698 ;; This function calls:
 15699 ;;		_setProductData
 15700 ;; This function is called by:
 15701 ;;		_setDimmerLights_OnOff
 15702 ;;		_setDimmerLights_Dimming
 15703 ;;		_setRFSW_Control
 15704 ;; This function uses a non-reentrant model
 15705 ;;
 15706                           
 15707                           
 15708                           ;psect for function _setRF_DimmerLights
 15709  1604                     _setRF_DimmerLights:	
 15710                           
 15711                           ;incstack = 0
 15712                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15713                           ;setRF_DimmerLights@lights stored from wreg
 15714  1604  0021               	movlb	1	; select bank1
 15715  1605  00E7               	movwf	setRF_DimmerLights@lights^(0+128)
 15716                           
 15717                           ;RF_Control_B1.c: 447: char status = 1;
 15718  1606  01E6               	clrf	setRF_DimmerLights@status^(0+128)
 15719  1607  0AE6               	incf	setRF_DimmerLights@status^(0+128),f
 15720                           
 15721                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 15722  1608  0867               	movf	setRF_DimmerLights@lights^(0+128),w
 15723  1609  3EFF               	addlw	-1
 15724  160A  0A89               	incf	9,f
 15725  160B  2E0E               	goto	u12580
 15726  160C                     u12585:	
 15727  160C  1003               	clrc
 15728  160D  0DE6               	rlf	setRF_DimmerLights@status^(0+128),f
 15729  160E                     u12580:	
 15730  160E  3EFF               	addlw	-1
 15731  160F  1D03               	skipz
 15732  1610  2E0C               	goto	u12585
 15733                           
 15734                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 15735  1611  0867               	movf	setRF_DimmerLights@lights^(0+128),w
 15736  1612  00E4               	movwf	??_setRF_DimmerLights^(0+128)
 15737  1613  0864               	movf	??_setRF_DimmerLights^(0+128),w
 15738  1614  00E1               	movwf	setProductData@value^(0+128)
 15739  1615  300B               	movlw	11
 15740  1616  319C  24E7  3196   	fcall	_setProductData
 15741                           
 15742                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 15743  1619  0021               	movlb	1	; select bank1
 15744  161A  0867               	movf	setRF_DimmerLights@lights^(0+128),w
 15745  161B  3E1A               	addlw	26
 15746  161C  076F               	addwf	_product^(0+128),w
 15747  161D  00E4               	movwf	??_setRF_DimmerLights^(0+128)
 15748  161E  0864               	movf	??_setRF_DimmerLights^(0+128),w
 15749  161F  0086               	movwf	6
 15750  1620  3002               	movlw	2	; select bank4/5
 15751  1621  0087               	movwf	7
 15752  1622  0801               	movf	1,w
 15753  1623  00E5               	movwf	(??_setRF_DimmerLights+1)^(0+128)
 15754  1624  0865               	movf	(??_setRF_DimmerLights+1)^(0+128),w
 15755  1625  00E1               	movwf	setProductData@value^(0+128)
 15756  1626  3011               	movlw	17
 15757  1627  319C  24E7  3196   	fcall	_setProductData
 15758                           
 15759                           ;RF_Control_B1.c: 451: if (on == 1) {
 15760  162A  0021               	movlb	1	; select bank1
 15761  162B  0863               	movf	setRF_DimmerLights@on^(0+128),w
 15762  162C  3A01               	xorlw	1
 15763  162D  1D03               	skipz
 15764  162E  2E4E               	goto	l10595
 15765                           
 15766                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 15767  162F  0867               	movf	setRF_DimmerLights@lights^(0+128),w
 15768  1630  3E14               	addlw	20
 15769  1631  076F               	addwf	_product^(0+128),w
 15770  1632  00E4               	movwf	??_setRF_DimmerLights^(0+128)
 15771  1633  0864               	movf	??_setRF_DimmerLights^(0+128),w
 15772  1634  0086               	movwf	6
 15773  1635  3002               	movlw	2	; select bank4/5
 15774  1636  0087               	movwf	7
 15775  1637  0801               	movf	1,w
 15776  1638  00E5               	movwf	(??_setRF_DimmerLights+1)^(0+128)
 15777  1639  0865               	movf	(??_setRF_DimmerLights+1)^(0+128),w
 15778  163A  00E1               	movwf	setProductData@value^(0+128)
 15779  163B  3009               	movlw	9
 15780  163C  319C  24E7  3196   	fcall	_setProductData
 15781                           
 15782                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 15783  163F  0021               	movlb	1	; select bank1
 15784  1640  086F               	movf	_product^(0+128),w
 15785  1641  3E0F               	addlw	15
 15786  1642  0086               	movwf	6
 15787  1643  3002               	movlw	2	; select bank4/5
 15788  1644  0087               	movwf	7
 15789  1645  0801               	movf	1,w
 15790  1646  0466               	iorwf	setRF_DimmerLights@status^(0+128),w
 15791  1647  00E4               	movwf	??_setRF_DimmerLights^(0+128)
 15792  1648  0864               	movf	??_setRF_DimmerLights^(0+128),w
 15793  1649  00E1               	movwf	setProductData@value^(0+128)
 15794  164A  300F               	movlw	15
 15795  164B  319C  24E7         	fcall	_setProductData
 15796                           
 15797                           ;RF_Control_B1.c: 454: } else {
 15798  164D  0008               	return
 15799  164E                     l10595:	
 15800                           
 15801                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 15802  164E  0021               	movlb	1	; select bank1
 15803  164F  01E1               	clrf	setProductData@value^(0+128)
 15804  1650  3009               	movlw	9
 15805  1651  319C  24E7  3196   	fcall	_setProductData
 15806                           
 15807                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 15808  1654  0021               	movlb	1	; select bank1
 15809  1655  086F               	movf	_product^(0+128),w
 15810  1656  3E0F               	addlw	15
 15811  1657  0086               	movwf	6
 15812  1658  3002               	movlw	2	; select bank4/5
 15813  1659  0087               	movwf	7
 15814  165A  0966               	comf	setRF_DimmerLights@status^(0+128),w
 15815  165B  0501               	andwf	1,w
 15816  165C  00E4               	movwf	??_setRF_DimmerLights^(0+128)
 15817  165D  0864               	movf	??_setRF_DimmerLights^(0+128),w
 15818  165E  00E1               	movwf	setProductData@value^(0+128)
 15819  165F  300F               	movlw	15
 15820  1660  319C  24E7         	fcall	_setProductData
 15821  1662  0008               	return
 15822  1663                     __end_of_setRF_DimmerLights:	
 15823                           
 15824                           	psect	text106
 15825  1D44                     __ptext106:	
 15826 ;; *************** function _setDimmerLights_Line *****************
 15827 ;; Defined at:
 15828 ;;		line 955 in file "../src/Dimmer_B1.c"
 15829 ;; Parameters:    Size  Location     Type
 15830 ;;  lights          1    wreg     unsigned char 
 15831 ;; Auto vars:     Size  Location     Type
 15832 ;;  lights          1    6[BANK0 ] unsigned char 
 15833 ;; Return value:  Size  Location     Type
 15834 ;;		None               void
 15835 ;; Registers used:
 15836 ;;		wreg
 15837 ;; Tracked objects:
 15838 ;;		On entry : 0/0
 15839 ;;		On exit  : 0/0
 15840 ;;		Unchanged: 0/0
 15841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15846 ;;Total ram usage:        1 bytes
 15847 ;; Hardware stack levels used:    1
 15848 ;; Hardware stack levels required when called:    5
 15849 ;; This function calls:
 15850 ;;		Nothing
 15851 ;; This function is called by:
 15852 ;;		_setDimmerLights_OnOff
 15853 ;;		_setDimmerLights_Dimming
 15854 ;; This function uses a non-reentrant model
 15855 ;;
 15856                           
 15857                           
 15858                           ;psect for function _setDimmerLights_Line
 15859  1D44                     _setDimmerLights_Line:	
 15860                           
 15861                           ;incstack = 0
 15862                           ; Regs used in _setDimmerLights_Line: [wreg]
 15863                           ;setDimmerLights_Line@lights stored from wreg
 15864  1D44  0020               	movlb	0	; select bank0
 15865  1D45  00A6               	movwf	setDimmerLights_Line@lights
 15866                           
 15867                           ;Dimmer_B1.c: 956: Dimmer.LoadGO = 1;
 15868  1D46  0022               	movlb	2	; select bank2
 15869  1D47  14AD               	bsf	_Dimmer^(0+256),1
 15870                           
 15871                           ;Dimmer_B1.c: 958: DimmerLights1.Line = 0;
 15872  1D48  10DE               	bcf	(_DimmerLights1^(0+256)+1),1
 15873                           
 15874                           ;Dimmer_B1.c: 959: if (lights == 1 && lights != 0) {
 15875  1D49  0020               	movlb	0	; select bank0
 15876  1D4A  0826               	movf	setDimmerLights_Line@lights,w
 15877  1D4B  3A01               	xorlw	1
 15878  1D4C  1D03               	skipz
 15879  1D4D  0008               	return
 15880  1D4E  0826               	movf	setDimmerLights_Line@lights,w
 15881  1D4F  1903               	btfsc	3,2
 15882  1D50  0008               	return
 15883                           
 15884                           ;Dimmer_B1.c: 960: DimmerLights1.Line = 1;
 15885  1D51  0022               	movlb	2	; select bank2
 15886  1D52  14DE               	bsf	(_DimmerLights1^(0+256)+1),1
 15887  1D53  0020               	movlb	0	; select bank0
 15888  1D54  0008               	return
 15889  1D55                     __end_of_setDimmerLights_Line:	
 15890                           
 15891                           	psect	text107
 15892  1CDA                     __ptext107:	
 15893 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15894 ;; Defined at:
 15895 ;;		line 89 in file "../src/Dimmer_B1.c"
 15896 ;; Parameters:    Size  Location     Type
 15897 ;;  lights          1    wreg     unsigned char 
 15898 ;;  value           1    6[BANK1 ] unsigned char 
 15899 ;; Auto vars:     Size  Location     Type
 15900 ;;  lights          1    7[BANK1 ] unsigned char 
 15901 ;; Return value:  Size  Location     Type
 15902 ;;		None               void
 15903 ;; Registers used:
 15904 ;;		wreg
 15905 ;; Tracked objects:
 15906 ;;		On entry : 0/0
 15907 ;;		On exit  : 0/0
 15908 ;;		Unchanged: 0/0
 15909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15910 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;Total ram usage:        3 bytes
 15915 ;; Hardware stack levels used:    1
 15916 ;; Hardware stack levels required when called:    5
 15917 ;; This function calls:
 15918 ;;		Nothing
 15919 ;; This function is called by:
 15920 ;;		_setDimmerLights_OnOff
 15921 ;;		_setDimmerLights_Dimming
 15922 ;;		_setRFSW_AdjControl
 15923 ;; This function uses a non-reentrant model
 15924 ;;
 15925                           
 15926                           
 15927                           ;psect for function _setDimmerIntr_MaxmumValue
 15928  1CDA                     _setDimmerIntr_MaxmumValue:	
 15929                           
 15930                           ;incstack = 0
 15931                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15932                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15933  1CDA  0021               	movlb	1	; select bank1
 15934  1CDB  00E2               	movwf	setDimmerIntr_MaxmumValue@lights^(0+128)
 15935                           
 15936                           ;Dimmer_B1.c: 91: if (lights == 1) {
 15937  1CDC  0862               	movf	setDimmerIntr_MaxmumValue@lights^(0+128),w
 15938  1CDD  3A01               	xorlw	1
 15939  1CDE  1D03               	skipz
 15940  1CDF  0008               	return
 15941                           
 15942                           ;Dimmer_B1.c: 92: DimmerIntr1.MaxmumValue = value;
 15943  1CE0  0861               	movf	setDimmerIntr_MaxmumValue@value^(0+128),w
 15944  1CE1  0020               	movlb	0	; select bank0
 15945  1CE2  00E2               	movwf	??_setDimmerIntr_MaxmumValue
 15946  1CE3  0862               	movf	??_setDimmerIntr_MaxmumValue,w
 15947  1CE4  0021               	movlb	1	; select bank1
 15948  1CE5  00C0               	movwf	(_DimmerIntr1^(0+128)+6)
 15949  1CE6  0008               	return
 15950  1CE7                     __end_of_setDimmerIntr_MaxmumValue:	
 15951                           
 15952                           	psect	text108
 15953  1EBD                     __ptext108:	
 15954 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15955 ;; Defined at:
 15956 ;;		line 166 in file "../src/Dimmer_B1.c"
 15957 ;; Parameters:    Size  Location     Type
 15958 ;;  lights          1    wreg     unsigned char 
 15959 ;;  command         1    6[BANK0 ] unsigned char 
 15960 ;; Auto vars:     Size  Location     Type
 15961 ;;  lights          1    8[BANK0 ] unsigned char 
 15962 ;; Return value:  Size  Location     Type
 15963 ;;		None               void
 15964 ;; Registers used:
 15965 ;;		wreg, status,2, status,0
 15966 ;; Tracked objects:
 15967 ;;		On entry : 0/0
 15968 ;;		On exit  : 0/0
 15969 ;;		Unchanged: 0/0
 15970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15971 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15974 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15975 ;;Total ram usage:        3 bytes
 15976 ;; Hardware stack levels used:    1
 15977 ;; Hardware stack levels required when called:    5
 15978 ;; This function calls:
 15979 ;;		Nothing
 15980 ;; This function is called by:
 15981 ;;		_setDimmerLights_Dimming
 15982 ;; This function uses a non-reentrant model
 15983 ;;
 15984                           
 15985                           
 15986                           ;psect for function _setDimmerIntr_Dimming_Sw
 15987  1EBD                     _setDimmerIntr_Dimming_Sw:	
 15988                           
 15989                           ;incstack = 0
 15990                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15991                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15992  1EBD  0020               	movlb	0	; select bank0
 15993  1EBE  00A8               	movwf	setDimmerIntr_Dimming_Sw@lights
 15994                           
 15995                           ;Dimmer_B1.c: 168: if (lights == 1) {
 15996  1EBF  0828               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15997  1EC0  3A01               	xorlw	1
 15998  1EC1  1D03               	skipz
 15999  1EC2  0008               	return
 16000                           
 16001                           ;Dimmer_B1.c: 169: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16002  1EC3  0826               	movf	setDimmerIntr_Dimming_Sw@command,w
 16003  1EC4  3A01               	xorlw	1
 16004  1EC5  3000               	movlw	0
 16005  1EC6  1903               	skipnz
 16006  1EC7  3001               	movlw	1
 16007  1EC8  00A7               	movwf	??_setDimmerIntr_Dimming_Sw
 16008  1EC9  0EA7               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16009  1ECA  0021               	movlb	1	; select bank1
 16010  1ECB  083A               	movf	_DimmerIntr1^(0+128),w
 16011  1ECC  0020               	movlb	0	; select bank0
 16012  1ECD  0627               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16013  1ECE  39EF               	andlw	-17
 16014  1ECF  0627               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16015  1ED0  0021               	movlb	1	; select bank1
 16016  1ED1  00BA               	movwf	_DimmerIntr1^(0+128)
 16017  1ED2  0008               	return
 16018  1ED3                     __end_of_setDimmerIntr_Dimming_Sw:	
 16019                           
 16020                           	psect	text109
 16021  0A08                     __ptext109:	
 16022 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16023 ;; Defined at:
 16024 ;;		line 1055 in file "../src/Dimmer_B1.c"
 16025 ;; Parameters:    Size  Location     Type
 16026 ;;  value           1    wreg     unsigned char 
 16027 ;; Auto vars:     Size  Location     Type
 16028 ;;  value           1    2[BANK1 ] unsigned char 
 16029 ;;  i               3    3[BANK1 ] float 
 16030 ;; Return value:  Size  Location     Type
 16031 ;;                  1    wreg      unsigned char 
 16032 ;; Registers used:
 16033 ;;		wreg, status,2, status,0, pclath, cstack
 16034 ;; Tracked objects:
 16035 ;;		On entry : 0/0
 16036 ;;		On exit  : 0/0
 16037 ;;		Unchanged: 0/0
 16038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 16042 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 16043 ;;Total ram usage:        6 bytes
 16044 ;; Hardware stack levels used:    1
 16045 ;; Hardware stack levels required when called:    7
 16046 ;; This function calls:
 16047 ;;		___awtoft
 16048 ;;		___ftadd
 16049 ;;		___ftdiv
 16050 ;;		___ftneg
 16051 ;;		___fttol
 16052 ;; This function is called by:
 16053 ;;		_setDimmerLights_OnOff
 16054 ;;		_setDimmerLights_Dimming
 16055 ;;		_Flash_Memory_Initialization
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           
 16060                           ;psect for function _getDimmerLights_ValueToPercent
 16061  0A08                     _getDimmerLights_ValueToPercent:	
 16062                           
 16063                           ;incstack = 0
 16064                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16065                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16066  0A08  0021               	movlb	1	; select bank1
 16067  0A09  00DD               	movwf	getDimmerLights_ValueToPercent@value^(0+128)
 16068                           
 16069                           ;Dimmer_B1.c: 1063: float i = ((char)(65*0.8)) - ((char)(10*0.8));
 16070  0A0A  3000               	movlw	0
 16071  0A0B  00DE               	movwf	getDimmerLights_ValueToPercent@i^(0+128)
 16072  0A0C  3030               	movlw	48
 16073  0A0D  00DF               	movwf	(getDimmerLights_ValueToPercent@i+1)^(0+128)
 16074  0A0E  3042               	movlw	66
 16075  0A0F  00E0               	movwf	(getDimmerLights_ValueToPercent@i+2)^(0+128)
 16076                           
 16077                           ;Dimmer_B1.c: 1064: i /= 100;
 16078  0A10  3000               	movlw	0
 16079  0A11  0020               	movlb	0	; select bank0
 16080  0A12  00B4               	movwf	___ftdiv@f2
 16081  0A13  30C8               	movlw	200
 16082  0A14  00B5               	movwf	___ftdiv@f2+1
 16083  0A15  3042               	movlw	66
 16084  0A16  00B6               	movwf	___ftdiv@f2+2
 16085  0A17  0021               	movlb	1	; select bank1
 16086  0A18  085E               	movf	getDimmerLights_ValueToPercent@i^(0+128),w
 16087  0A19  0020               	movlb	0	; select bank0
 16088  0A1A  00B7               	movwf	___ftdiv@f1
 16089  0A1B  0021               	movlb	1	; select bank1
 16090  0A1C  085F               	movf	(getDimmerLights_ValueToPercent@i+1)^(0+128),w
 16091  0A1D  0020               	movlb	0	; select bank0
 16092  0A1E  00B8               	movwf	___ftdiv@f1+1
 16093  0A1F  0021               	movlb	1	; select bank1
 16094  0A20  0860               	movf	(getDimmerLights_ValueToPercent@i+2)^(0+128),w
 16095  0A21  0020               	movlb	0	; select bank0
 16096  0A22  00B9               	movwf	___ftdiv@f1+2
 16097  0A23  318D  253A  318A   	fcall	___ftdiv
 16098  0A26  0020               	movlb	0	; select bank0
 16099  0A27  0834               	movf	?___ftdiv,w
 16100  0A28  0021               	movlb	1	; select bank1
 16101  0A29  00DE               	movwf	getDimmerLights_ValueToPercent@i^(0+128)
 16102  0A2A  0020               	movlb	0	; select bank0
 16103  0A2B  0835               	movf	?___ftdiv+1,w
 16104  0A2C  0021               	movlb	1	; select bank1
 16105  0A2D  00DF               	movwf	(getDimmerLights_ValueToPercent@i+1)^(0+128)
 16106  0A2E  0020               	movlb	0	; select bank0
 16107  0A2F  0836               	movf	?___ftdiv+2,w
 16108  0A30  0021               	movlb	1	; select bank1
 16109  0A31  00E0               	movwf	(getDimmerLights_ValueToPercent@i+2)^(0+128)
 16110                           
 16111                           ;Dimmer_B1.c: 1066: return (char) (100 - ((((char)(65*0.8)) - value) / i));
 16112  0A32  085D               	movf	getDimmerLights_ValueToPercent@value^(0+128),w
 16113  0A33  00DB               	movwf	??_getDimmerLights_ValueToPercent^(0+128)
 16114  0A34  01DC               	clrf	(??_getDimmerLights_ValueToPercent^(0+128)+1)
 16115  0A35  09DB               	comf	??_getDimmerLights_ValueToPercent^(0+128),f
 16116  0A36  09DC               	comf	(??_getDimmerLights_ValueToPercent^(0+128)+1),f
 16117  0A37  0ADB               	incf	??_getDimmerLights_ValueToPercent^(0+128),f
 16118  0A38  1903               	skipnz
 16119  0A39  0ADC               	incf	(??_getDimmerLights_ValueToPercent^(0+128)+1),f
 16120  0A3A  085B               	movf	??_getDimmerLights_ValueToPercent^(0+128),w
 16121  0A3B  3E34               	addlw	52
 16122  0A3C  0020               	movlb	0	; select bank0
 16123  0A3D  00AE               	movwf	___awtoft@c
 16124  0A3E  3000               	movlw	0
 16125  0A3F  0021               	movlb	1	; select bank1
 16126  0A40  3D5C               	addwfc	(??_getDimmerLights_ValueToPercent+1)^(0+128),w
 16127  0A41  0020               	movlb	0	; select bank0
 16128  0A42  00AF               	movwf	___awtoft@c+1
 16129  0A43  3190  20E1  318A   	fcall	___awtoft
 16130  0A46  0020               	movlb	0	; select bank0
 16131  0A47  082E               	movf	?___awtoft,w
 16132  0A48  00B7               	movwf	___ftdiv@f1
 16133  0A49  082F               	movf	?___awtoft+1,w
 16134  0A4A  00B8               	movwf	___ftdiv@f1+1
 16135  0A4B  0830               	movf	?___awtoft+2,w
 16136  0A4C  00B9               	movwf	___ftdiv@f1+2
 16137  0A4D  0021               	movlb	1	; select bank1
 16138  0A4E  085E               	movf	getDimmerLights_ValueToPercent@i^(0+128),w
 16139  0A4F  0020               	movlb	0	; select bank0
 16140  0A50  00B4               	movwf	___ftdiv@f2
 16141  0A51  0021               	movlb	1	; select bank1
 16142  0A52  085F               	movf	(getDimmerLights_ValueToPercent@i+1)^(0+128),w
 16143  0A53  0020               	movlb	0	; select bank0
 16144  0A54  00B5               	movwf	___ftdiv@f2+1
 16145  0A55  0021               	movlb	1	; select bank1
 16146  0A56  0860               	movf	(getDimmerLights_ValueToPercent@i+2)^(0+128),w
 16147  0A57  0020               	movlb	0	; select bank0
 16148  0A58  00B6               	movwf	___ftdiv@f2+2
 16149  0A59  318D  253A  318A   	fcall	___ftdiv
 16150  0A5C  0020               	movlb	0	; select bank0
 16151  0A5D  0834               	movf	?___ftdiv,w
 16152  0A5E  00C4               	movwf	___ftneg@f1
 16153  0A5F  0835               	movf	?___ftdiv+1,w
 16154  0A60  00C5               	movwf	___ftneg@f1+1
 16155  0A61  0836               	movf	?___ftdiv+2,w
 16156  0A62  00C6               	movwf	___ftneg@f1+2
 16157  0A63  319C  2406  318A   	fcall	___ftneg
 16158  0A66  0020               	movlb	0	; select bank0
 16159  0A67  0844               	movf	?___ftneg,w
 16160  0A68  00CA               	movwf	___ftadd@f2
 16161  0A69  0845               	movf	?___ftneg+1,w
 16162  0A6A  00CB               	movwf	___ftadd@f2+1
 16163  0A6B  0846               	movf	?___ftneg+2,w
 16164  0A6C  00CC               	movwf	___ftadd@f2+2
 16165  0A6D  3000               	movlw	0
 16166  0A6E  00C7               	movwf	___ftadd@f1
 16167  0A6F  30C8               	movlw	200
 16168  0A70  00C8               	movwf	___ftadd@f1+1
 16169  0A71  3042               	movlw	66
 16170  0A72  00C9               	movwf	___ftadd@f1+2
 16171  0A73  3184  246E  318A   	fcall	___ftadd
 16172  0A76  0020               	movlb	0	; select bank0
 16173  0A77  0847               	movf	?___ftadd,w
 16174  0A78  00D4               	movwf	___fttol@f1
 16175  0A79  0848               	movf	?___ftadd+1,w
 16176  0A7A  00D5               	movwf	___fttol@f1+1
 16177  0A7B  0849               	movf	?___ftadd+2,w
 16178  0A7C  00D6               	movwf	___fttol@f1+2
 16179  0A7D  318B  237D         	fcall	___fttol
 16180  0A7F  0020               	movlb	0	; select bank0
 16181  0A80  0854               	movf	?___fttol,w
 16182  0A81  0008               	return
 16183  0A82                     __end_of_getDimmerLights_ValueToPercent:	
 16184                           
 16185                           	psect	text110
 16186  0B7D                     __ptext110:	
 16187 ;; *************** function ___fttol *****************
 16188 ;; Defined at:
 16189 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16190 ;; Parameters:    Size  Location     Type
 16191 ;;  f1              3   52[BANK0 ] float 
 16192 ;; Auto vars:     Size  Location     Type
 16193 ;;  lval            4   61[BANK0 ] unsigned long 
 16194 ;;  exp1            1   65[BANK0 ] unsigned char 
 16195 ;;  sign1           1   60[BANK0 ] unsigned char 
 16196 ;; Return value:  Size  Location     Type
 16197 ;;                  4   52[BANK0 ] long 
 16198 ;; Registers used:
 16199 ;;		wreg, status,2, status,0
 16200 ;; Tracked objects:
 16201 ;;		On entry : 0/0
 16202 ;;		On exit  : 0/0
 16203 ;;		Unchanged: 0/0
 16204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16205 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16208 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;Total ram usage:       14 bytes
 16210 ;; Hardware stack levels used:    1
 16211 ;; Hardware stack levels required when called:    5
 16212 ;; This function calls:
 16213 ;;		Nothing
 16214 ;; This function is called by:
 16215 ;;		_getDimmerLights_PercentToValue
 16216 ;;		_getDimmerLights_ValueToPercent
 16217 ;; This function uses a non-reentrant model
 16218 ;;
 16219                           
 16220                           
 16221                           ;psect for function ___fttol
 16222  0B7D                     ___fttol:	
 16223                           
 16224                           ;incstack = 0
 16225                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16226  0B7D  0020               	movlb	0	; select bank0
 16227  0B7E  0854               	movf	___fttol@f1,w
 16228  0B7F  00D8               	movwf	??___fttol
 16229  0B80  0855               	movf	___fttol@f1+1,w
 16230  0B81  00D9               	movwf	??___fttol+1
 16231  0B82  0856               	movf	___fttol@f1+2,w
 16232  0B83  00DA               	movwf	??___fttol+2
 16233  0B84  1003               	clrc
 16234  0B85  0D59               	rlf	??___fttol+1,w
 16235  0B86  0D5A               	rlf	??___fttol+2,w
 16236  0B87  00DB               	movwf	??___fttol+3
 16237  0B88  085B               	movf	??___fttol+3,w
 16238  0B89  00E1               	movwf	___fttol@exp1
 16239  0B8A  08E1               	movf	___fttol@exp1,f
 16240  0B8B  1D03               	skipz
 16241  0B8C  2B96               	goto	l10431
 16242  0B8D  3000               	movlw	0
 16243  0B8E  00D7               	movwf	?___fttol+3
 16244  0B8F  3000               	movlw	0
 16245  0B90  00D6               	movwf	?___fttol+2
 16246  0B91  3000               	movlw	0
 16247  0B92  00D5               	movwf	?___fttol+1
 16248  0B93  3000               	movlw	0
 16249  0B94  00D4               	movwf	?___fttol
 16250  0B95  0008               	return
 16251  0B96                     l10431:	
 16252  0B96  0854               	movf	___fttol@f1,w
 16253  0B97  00D8               	movwf	??___fttol
 16254  0B98  0855               	movf	___fttol@f1+1,w
 16255  0B99  00D9               	movwf	??___fttol+1
 16256  0B9A  0856               	movf	___fttol@f1+2,w
 16257  0B9B  00DA               	movwf	??___fttol+2
 16258  0B9C  3017               	movlw	23
 16259  0B9D                     u12325:	
 16260  0B9D  36DA               	lsrf	??___fttol+2,f
 16261  0B9E  0CD9               	rrf	??___fttol+1,f
 16262  0B9F  0CD8               	rrf	??___fttol,f
 16263  0BA0  0B89               	decfsz	9,f
 16264  0BA1  2B9D               	goto	u12325
 16265  0BA2  0858               	movf	??___fttol,w
 16266  0BA3  00DB               	movwf	??___fttol+3
 16267  0BA4  085B               	movf	??___fttol+3,w
 16268  0BA5  00DC               	movwf	___fttol@sign1
 16269  0BA6  17D5               	bsf	___fttol@f1+1,7
 16270  0BA7  30FF               	movlw	255
 16271  0BA8  05D4               	andwf	___fttol@f1,f
 16272  0BA9  30FF               	movlw	255
 16273  0BAA  05D5               	andwf	___fttol@f1+1,f
 16274  0BAB  3000               	movlw	0
 16275  0BAC  05D6               	andwf	___fttol@f1+2,f
 16276  0BAD  0854               	movf	___fttol@f1,w
 16277  0BAE  00DD               	movwf	___fttol@lval
 16278  0BAF  0855               	movf	___fttol@f1+1,w
 16279  0BB0  00DE               	movwf	___fttol@lval+1
 16280  0BB1  0856               	movf	___fttol@f1+2,w
 16281  0BB2  00DF               	movwf	___fttol@lval+2
 16282  0BB3  01E0               	clrf	___fttol@lval+3
 16283  0BB4  308E               	movlw	142
 16284  0BB5  02E1               	subwf	___fttol@exp1,f
 16285  0BB6  1FE1               	btfss	___fttol@exp1,7
 16286  0BB7  2BD4               	goto	l10451
 16287  0BB8  0861               	movf	___fttol@exp1,w
 16288  0BB9  3A80               	xorlw	128
 16289  0BBA  3E8F               	addlw	143
 16290  0BBB  1803               	skipnc
 16291  0BBC  2BC6               	goto	l10449
 16292  0BBD  3000               	movlw	0
 16293  0BBE  00D7               	movwf	?___fttol+3
 16294  0BBF  3000               	movlw	0
 16295  0BC0  00D6               	movwf	?___fttol+2
 16296  0BC1  3000               	movlw	0
 16297  0BC2  00D5               	movwf	?___fttol+1
 16298  0BC3  3000               	movlw	0
 16299  0BC4  00D4               	movwf	?___fttol
 16300  0BC5  0008               	return
 16301  0BC6                     l10449:	
 16302  0BC6  3001               	movlw	1
 16303  0BC7                     u12355:	
 16304  0BC7  36E0               	lsrf	___fttol@lval+3,f
 16305  0BC8  0CDF               	rrf	___fttol@lval+2,f
 16306  0BC9  0CDE               	rrf	___fttol@lval+1,f
 16307  0BCA  0CDD               	rrf	___fttol@lval,f
 16308  0BCB  0B89               	decfsz	9,f
 16309  0BCC  2BC7               	goto	u12355
 16310  0BCD  3001               	movlw	1
 16311  0BCE  00D8               	movwf	??___fttol
 16312  0BCF  0858               	movf	??___fttol,w
 16313  0BD0  07E1               	addwf	___fttol@exp1,f
 16314  0BD1  1903               	btfsc	3,2
 16315  0BD2  2BED               	goto	l10461
 16316  0BD3  2BC6               	goto	l10449
 16317  0BD4                     l10451:	
 16318  0BD4  3018               	movlw	24
 16319  0BD5  0261               	subwf	___fttol@exp1,w
 16320  0BD6  1C03               	skipc
 16321  0BD7  2BEA               	goto	l10459
 16322  0BD8  3000               	movlw	0
 16323  0BD9  00D7               	movwf	?___fttol+3
 16324  0BDA  3000               	movlw	0
 16325  0BDB  00D6               	movwf	?___fttol+2
 16326  0BDC  3000               	movlw	0
 16327  0BDD  00D5               	movwf	?___fttol+1
 16328  0BDE  3000               	movlw	0
 16329  0BDF  00D4               	movwf	?___fttol
 16330  0BE0  0008               	return
 16331  0BE1                     l10457:	
 16332  0BE1  3001               	movlw	1
 16333  0BE2                     u12385:	
 16334  0BE2  35DD               	lslf	___fttol@lval,f
 16335  0BE3  0DDE               	rlf	___fttol@lval+1,f
 16336  0BE4  0DDF               	rlf	___fttol@lval+2,f
 16337  0BE5  0DE0               	rlf	___fttol@lval+3,f
 16338  0BE6  0B89               	decfsz	9,f
 16339  0BE7  2BE2               	goto	u12385
 16340  0BE8  3001               	movlw	1
 16341  0BE9  02E1               	subwf	___fttol@exp1,f
 16342  0BEA                     l10459:	
 16343  0BEA  08E1               	movf	___fttol@exp1,f
 16344  0BEB  1D03               	skipz
 16345  0BEC  2BE1               	goto	l10457
 16346  0BED                     l10461:	
 16347  0BED  085C               	movf	___fttol@sign1,w
 16348  0BEE  1903               	btfsc	3,2
 16349  0BEF  2BFB               	goto	l10465
 16350  0BF0  09DD               	comf	___fttol@lval,f
 16351  0BF1  09DE               	comf	___fttol@lval+1,f
 16352  0BF2  09DF               	comf	___fttol@lval+2,f
 16353  0BF3  09E0               	comf	___fttol@lval+3,f
 16354  0BF4  0ADD               	incf	___fttol@lval,f
 16355  0BF5  1903               	skipnz
 16356  0BF6  0ADE               	incf	___fttol@lval+1,f
 16357  0BF7  1903               	skipnz
 16358  0BF8  0ADF               	incf	___fttol@lval+2,f
 16359  0BF9  1903               	skipnz
 16360  0BFA  0AE0               	incf	___fttol@lval+3,f
 16361  0BFB                     l10465:	
 16362  0BFB  0860               	movf	___fttol@lval+3,w
 16363  0BFC  00D7               	movwf	?___fttol+3
 16364  0BFD  085F               	movf	___fttol@lval+2,w
 16365  0BFE  00D6               	movwf	?___fttol+2
 16366  0BFF  085E               	movf	___fttol@lval+1,w
 16367  0C00  00D5               	movwf	?___fttol+1
 16368  0C01  085D               	movf	___fttol@lval,w
 16369  0C02  00D4               	movwf	?___fttol
 16370  0C03  0008               	return
 16371  0C04                     __end_of___fttol:	
 16372                           
 16373                           	psect	text111
 16374  1C06                     __ptext111:	
 16375 ;; *************** function ___ftneg *****************
 16376 ;; Defined at:
 16377 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16378 ;; Parameters:    Size  Location     Type
 16379 ;;  f1              3   36[BANK0 ] float 
 16380 ;; Auto vars:     Size  Location     Type
 16381 ;;		None
 16382 ;; Return value:  Size  Location     Type
 16383 ;;                  3   36[BANK0 ] float 
 16384 ;; Registers used:
 16385 ;;		wreg
 16386 ;; Tracked objects:
 16387 ;;		On entry : 0/0
 16388 ;;		On exit  : 0/0
 16389 ;;		Unchanged: 0/0
 16390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16391 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16394 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16395 ;;Total ram usage:        3 bytes
 16396 ;; Hardware stack levels used:    1
 16397 ;; Hardware stack levels required when called:    5
 16398 ;; This function calls:
 16399 ;;		Nothing
 16400 ;; This function is called by:
 16401 ;;		_getDimmerLights_PercentToValue
 16402 ;;		_getDimmerLights_ValueToPercent
 16403 ;; This function uses a non-reentrant model
 16404 ;;
 16405                           
 16406                           
 16407                           ;psect for function ___ftneg
 16408  1C06                     ___ftneg:	
 16409                           
 16410                           ;incstack = 0
 16411                           ; Regs used in ___ftneg: [wreg]
 16412  1C06  0020               	movlb	0	; select bank0
 16413  1C07  0846               	movf	___ftneg@f1+2,w
 16414  1C08  0445               	iorwf	___ftneg@f1+1,w
 16415  1C09  0444               	iorwf	___ftneg@f1,w
 16416  1C0A  1903               	skipnz
 16417  1C0B  0008               	return
 16418  1C0C  3080               	movlw	128
 16419  1C0D  06C6               	xorwf	___ftneg@f1+2,f
 16420  1C0E  0008               	return
 16421  1C0F                     __end_of___ftneg:	
 16422                           
 16423                           	psect	text112
 16424  0D3A                     __ptext112:	
 16425 ;; *************** function ___ftdiv *****************
 16426 ;; Defined at:
 16427 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16428 ;; Parameters:    Size  Location     Type
 16429 ;;  f2              3   20[BANK0 ] float 
 16430 ;;  f1              3   23[BANK0 ] float 
 16431 ;; Auto vars:     Size  Location     Type
 16432 ;;  f3              3   32[BANK0 ] float 
 16433 ;;  sign            1   35[BANK0 ] unsigned char 
 16434 ;;  exp             1   31[BANK0 ] unsigned char 
 16435 ;;  cntr            1   30[BANK0 ] unsigned char 
 16436 ;; Return value:  Size  Location     Type
 16437 ;;                  3   20[BANK0 ] float 
 16438 ;; Registers used:
 16439 ;;		wreg, status,2, status,0, pclath, cstack
 16440 ;; Tracked objects:
 16441 ;;		On entry : 0/0
 16442 ;;		On exit  : 0/0
 16443 ;;		Unchanged: 0/0
 16444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16445 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16446 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16447 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16448 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16449 ;;Total ram usage:       16 bytes
 16450 ;; Hardware stack levels used:    1
 16451 ;; Hardware stack levels required when called:    6
 16452 ;; This function calls:
 16453 ;;		___ftpack
 16454 ;; This function is called by:
 16455 ;;		_getDimmerLights_PercentToValue
 16456 ;;		_getDimmerLights_ValueToPercent
 16457 ;; This function uses a non-reentrant model
 16458 ;;
 16459                           
 16460                           
 16461                           ;psect for function ___ftdiv
 16462  0D3A                     ___ftdiv:	
 16463                           
 16464                           ;incstack = 0
 16465                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16466  0D3A  0020               	movlb	0	; select bank0
 16467  0D3B  0837               	movf	___ftdiv@f1,w
 16468  0D3C  00BA               	movwf	??___ftdiv
 16469  0D3D  0838               	movf	___ftdiv@f1+1,w
 16470  0D3E  00BB               	movwf	??___ftdiv+1
 16471  0D3F  0839               	movf	___ftdiv@f1+2,w
 16472  0D40  00BC               	movwf	??___ftdiv+2
 16473  0D41  1003               	clrc
 16474  0D42  0D3B               	rlf	??___ftdiv+1,w
 16475  0D43  0D3C               	rlf	??___ftdiv+2,w
 16476  0D44  00BD               	movwf	??___ftdiv+3
 16477  0D45  083D               	movf	??___ftdiv+3,w
 16478  0D46  00BF               	movwf	___ftdiv@exp
 16479  0D47  08BF               	movf	___ftdiv@exp,f
 16480  0D48  1D03               	skipz
 16481  0D49  2D51               	goto	l10331
 16482  0D4A  3000               	movlw	0
 16483  0D4B  00B4               	movwf	?___ftdiv
 16484  0D4C  3000               	movlw	0
 16485  0D4D  00B5               	movwf	?___ftdiv+1
 16486  0D4E  3000               	movlw	0
 16487  0D4F  00B6               	movwf	?___ftdiv+2
 16488  0D50  0008               	return
 16489  0D51                     l10331:	
 16490  0D51  0834               	movf	___ftdiv@f2,w
 16491  0D52  00BA               	movwf	??___ftdiv
 16492  0D53  0835               	movf	___ftdiv@f2+1,w
 16493  0D54  00BB               	movwf	??___ftdiv+1
 16494  0D55  0836               	movf	___ftdiv@f2+2,w
 16495  0D56  00BC               	movwf	??___ftdiv+2
 16496  0D57  1003               	clrc
 16497  0D58  0D3B               	rlf	??___ftdiv+1,w
 16498  0D59  0D3C               	rlf	??___ftdiv+2,w
 16499  0D5A  00BD               	movwf	??___ftdiv+3
 16500  0D5B  083D               	movf	??___ftdiv+3,w
 16501  0D5C  00C3               	movwf	___ftdiv@sign
 16502  0D5D  08C3               	movf	___ftdiv@sign,f
 16503  0D5E  1D03               	skipz
 16504  0D5F  2D67               	goto	l10337
 16505  0D60  3000               	movlw	0
 16506  0D61  00B4               	movwf	?___ftdiv
 16507  0D62  3000               	movlw	0
 16508  0D63  00B5               	movwf	?___ftdiv+1
 16509  0D64  3000               	movlw	0
 16510  0D65  00B6               	movwf	?___ftdiv+2
 16511  0D66  0008               	return
 16512  0D67                     l10337:	
 16513  0D67  3000               	movlw	0
 16514  0D68  00C0               	movwf	___ftdiv@f3
 16515  0D69  3000               	movlw	0
 16516  0D6A  00C1               	movwf	___ftdiv@f3+1
 16517  0D6B  3000               	movlw	0
 16518  0D6C  00C2               	movwf	___ftdiv@f3+2
 16519  0D6D  3089               	movlw	137
 16520  0D6E  0743               	addwf	___ftdiv@sign,w
 16521  0D6F  00BA               	movwf	??___ftdiv
 16522  0D70  083A               	movf	??___ftdiv,w
 16523  0D71  02BF               	subwf	___ftdiv@exp,f
 16524  0D72  0837               	movf	___ftdiv@f1,w
 16525  0D73  00BA               	movwf	??___ftdiv
 16526  0D74  0838               	movf	___ftdiv@f1+1,w
 16527  0D75  00BB               	movwf	??___ftdiv+1
 16528  0D76  0839               	movf	___ftdiv@f1+2,w
 16529  0D77  00BC               	movwf	??___ftdiv+2
 16530  0D78  3010               	movlw	16
 16531  0D79                     u12125:	
 16532  0D79  36BC               	lsrf	??___ftdiv+2,f
 16533  0D7A  0CBB               	rrf	??___ftdiv+1,f
 16534  0D7B  0CBA               	rrf	??___ftdiv,f
 16535  0D7C  0B89               	decfsz	9,f
 16536  0D7D  2D79               	goto	u12125
 16537  0D7E  083A               	movf	??___ftdiv,w
 16538  0D7F  00BD               	movwf	??___ftdiv+3
 16539  0D80  083D               	movf	??___ftdiv+3,w
 16540  0D81  00C3               	movwf	___ftdiv@sign
 16541  0D82  0834               	movf	___ftdiv@f2,w
 16542  0D83  00BA               	movwf	??___ftdiv
 16543  0D84  0835               	movf	___ftdiv@f2+1,w
 16544  0D85  00BB               	movwf	??___ftdiv+1
 16545  0D86  0836               	movf	___ftdiv@f2+2,w
 16546  0D87  00BC               	movwf	??___ftdiv+2
 16547  0D88  3010               	movlw	16
 16548  0D89                     u12135:	
 16549  0D89  36BC               	lsrf	??___ftdiv+2,f
 16550  0D8A  0CBB               	rrf	??___ftdiv+1,f
 16551  0D8B  0CBA               	rrf	??___ftdiv,f
 16552  0D8C  0B89               	decfsz	9,f
 16553  0D8D  2D89               	goto	u12135
 16554  0D8E  083A               	movf	??___ftdiv,w
 16555  0D8F  00BD               	movwf	??___ftdiv+3
 16556  0D90  083D               	movf	??___ftdiv+3,w
 16557  0D91  06C3               	xorwf	___ftdiv@sign,f
 16558  0D92  3080               	movlw	128
 16559  0D93  00BA               	movwf	??___ftdiv
 16560  0D94  083A               	movf	??___ftdiv,w
 16561  0D95  05C3               	andwf	___ftdiv@sign,f
 16562  0D96  17B8               	bsf	___ftdiv@f1+1,7
 16563  0D97  30FF               	movlw	255
 16564  0D98  05B7               	andwf	___ftdiv@f1,f
 16565  0D99  30FF               	movlw	255
 16566  0D9A  05B8               	andwf	___ftdiv@f1+1,f
 16567  0D9B  3000               	movlw	0
 16568  0D9C  05B9               	andwf	___ftdiv@f1+2,f
 16569  0D9D  17B5               	bsf	___ftdiv@f2+1,7
 16570  0D9E  30FF               	movlw	255
 16571  0D9F  05B4               	andwf	___ftdiv@f2,f
 16572  0DA0  30FF               	movlw	255
 16573  0DA1  05B5               	andwf	___ftdiv@f2+1,f
 16574  0DA2  3000               	movlw	0
 16575  0DA3  05B6               	andwf	___ftdiv@f2+2,f
 16576  0DA4  3018               	movlw	24
 16577  0DA5  00BA               	movwf	??___ftdiv
 16578  0DA6  083A               	movf	??___ftdiv,w
 16579  0DA7  00BE               	movwf	___ftdiv@cntr
 16580  0DA8                     l10351:	
 16581  0DA8  3001               	movlw	1
 16582  0DA9                     u12145:	
 16583  0DA9  35C0               	lslf	___ftdiv@f3,f
 16584  0DAA  0DC1               	rlf	___ftdiv@f3+1,f
 16585  0DAB  0DC2               	rlf	___ftdiv@f3+2,f
 16586  0DAC  0B89               	decfsz	9,f
 16587  0DAD  2DA9               	goto	u12145
 16588  0DAE  0836               	movf	___ftdiv@f2+2,w
 16589  0DAF  0239               	subwf	___ftdiv@f1+2,w
 16590  0DB0  1D03               	skipz
 16591  0DB1  2DB8               	goto	u12155
 16592  0DB2  0835               	movf	___ftdiv@f2+1,w
 16593  0DB3  0238               	subwf	___ftdiv@f1+1,w
 16594  0DB4  1D03               	skipz
 16595  0DB5  2DB8               	goto	u12155
 16596  0DB6  0834               	movf	___ftdiv@f2,w
 16597  0DB7  0237               	subwf	___ftdiv@f1,w
 16598  0DB8                     u12155:	
 16599  0DB8  1C03               	skipc
 16600  0DB9  2DC1               	goto	l10359
 16601  0DBA  0834               	movf	___ftdiv@f2,w
 16602  0DBB  02B7               	subwf	___ftdiv@f1,f
 16603  0DBC  0835               	movf	___ftdiv@f2+1,w
 16604  0DBD  3BB8               	subwfb	___ftdiv@f1+1,f
 16605  0DBE  0836               	movf	___ftdiv@f2+2,w
 16606  0DBF  3BB9               	subwfb	___ftdiv@f1+2,f
 16607  0DC0  1440               	bsf	___ftdiv@f3,0
 16608  0DC1                     l10359:	
 16609  0DC1  3001               	movlw	1
 16610  0DC2                     u12165:	
 16611  0DC2  35B7               	lslf	___ftdiv@f1,f
 16612  0DC3  0DB8               	rlf	___ftdiv@f1+1,f
 16613  0DC4  0DB9               	rlf	___ftdiv@f1+2,f
 16614  0DC5  0B89               	decfsz	9,f
 16615  0DC6  2DC2               	goto	u12165
 16616  0DC7  3001               	movlw	1
 16617  0DC8  02BE               	subwf	___ftdiv@cntr,f
 16618  0DC9  1D03               	btfss	3,2
 16619  0DCA  2DA8               	goto	l10351
 16620  0DCB  0840               	movf	___ftdiv@f3,w
 16621  0DCC  00A6               	movwf	___ftpack@arg
 16622  0DCD  0841               	movf	___ftdiv@f3+1,w
 16623  0DCE  00A7               	movwf	___ftpack@arg+1
 16624  0DCF  0842               	movf	___ftdiv@f3+2,w
 16625  0DD0  00A8               	movwf	___ftpack@arg+2
 16626  0DD1  083F               	movf	___ftdiv@exp,w
 16627  0DD2  00BA               	movwf	??___ftdiv
 16628  0DD3  083A               	movf	??___ftdiv,w
 16629  0DD4  00A9               	movwf	___ftpack@exp
 16630  0DD5  0843               	movf	___ftdiv@sign,w
 16631  0DD6  00BB               	movwf	??___ftdiv+1
 16632  0DD7  083B               	movf	??___ftdiv+1,w
 16633  0DD8  00AA               	movwf	___ftpack@sign
 16634  0DD9  3196  2663         	fcall	___ftpack
 16635  0DDB  0020               	movlb	0	; select bank0
 16636  0DDC  0826               	movf	?___ftpack,w
 16637  0DDD  00B4               	movwf	?___ftdiv
 16638  0DDE  0827               	movf	?___ftpack+1,w
 16639  0DDF  00B5               	movwf	?___ftdiv+1
 16640  0DE0  0828               	movf	?___ftpack+2,w
 16641  0DE1  00B6               	movwf	?___ftdiv+2
 16642  0DE2  0008               	return
 16643  0DE3                     __end_of___ftdiv:	
 16644                           
 16645                           	psect	text113
 16646  046E                     __ptext113:	
 16647 ;; *************** function ___ftadd *****************
 16648 ;; Defined at:
 16649 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16650 ;; Parameters:    Size  Location     Type
 16651 ;;  f1              3   39[BANK0 ] float 
 16652 ;;  f2              3   42[BANK0 ] float 
 16653 ;; Auto vars:     Size  Location     Type
 16654 ;;  exp1            1   51[BANK0 ] unsigned char 
 16655 ;;  exp2            1   50[BANK0 ] unsigned char 
 16656 ;;  sign            1   49[BANK0 ] unsigned char 
 16657 ;; Return value:  Size  Location     Type
 16658 ;;                  3   39[BANK0 ] float 
 16659 ;; Registers used:
 16660 ;;		wreg, status,2, status,0, pclath, cstack
 16661 ;; Tracked objects:
 16662 ;;		On entry : 0/0
 16663 ;;		On exit  : 0/0
 16664 ;;		Unchanged: 0/0
 16665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16666 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;Total ram usage:       13 bytes
 16671 ;; Hardware stack levels used:    1
 16672 ;; Hardware stack levels required when called:    6
 16673 ;; This function calls:
 16674 ;;		___ftpack
 16675 ;; This function is called by:
 16676 ;;		_getDimmerLights_PercentToValue
 16677 ;;		_getDimmerLights_ValueToPercent
 16678 ;; This function uses a non-reentrant model
 16679 ;;
 16680                           
 16681                           
 16682                           ;psect for function ___ftadd
 16683  046E                     ___ftadd:	
 16684                           
 16685                           ;incstack = 0
 16686                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16687  046E  0020               	movlb	0	; select bank0
 16688  046F  0847               	movf	___ftadd@f1,w
 16689  0470  00CD               	movwf	??___ftadd
 16690  0471  0848               	movf	___ftadd@f1+1,w
 16691  0472  00CE               	movwf	??___ftadd+1
 16692  0473  0849               	movf	___ftadd@f1+2,w
 16693  0474  00CF               	movwf	??___ftadd+2
 16694  0475  1003               	clrc
 16695  0476  0D4E               	rlf	??___ftadd+1,w
 16696  0477  0D4F               	rlf	??___ftadd+2,w
 16697  0478  00D0               	movwf	??___ftadd+3
 16698  0479  0850               	movf	??___ftadd+3,w
 16699  047A  00D3               	movwf	___ftadd@exp1
 16700  047B  084A               	movf	___ftadd@f2,w
 16701  047C  00CD               	movwf	??___ftadd
 16702  047D  084B               	movf	___ftadd@f2+1,w
 16703  047E  00CE               	movwf	??___ftadd+1
 16704  047F  084C               	movf	___ftadd@f2+2,w
 16705  0480  00CF               	movwf	??___ftadd+2
 16706  0481  1003               	clrc
 16707  0482  0D4E               	rlf	??___ftadd+1,w
 16708  0483  0D4F               	rlf	??___ftadd+2,w
 16709  0484  00D0               	movwf	??___ftadd+3
 16710  0485  0850               	movf	??___ftadd+3,w
 16711  0486  00D2               	movwf	___ftadd@exp2
 16712  0487  0853               	movf	___ftadd@exp1,w
 16713  0488  1903               	btfsc	3,2
 16714  0489  2C96               	goto	l10261
 16715  048A  0852               	movf	___ftadd@exp2,w
 16716  048B  0253               	subwf	___ftadd@exp1,w
 16717  048C  1803               	skipnc
 16718  048D  2C9D               	goto	l10265
 16719  048E  0353               	decf	___ftadd@exp1,w
 16720  048F  3AFF               	xorlw	255
 16721  0490  0752               	addwf	___ftadd@exp2,w
 16722  0491  00CD               	movwf	??___ftadd
 16723  0492  3019               	movlw	25
 16724  0493  024D               	subwf	??___ftadd,w
 16725  0494  1C03               	skipc
 16726  0495  2C9D               	goto	l10265
 16727  0496                     l10261:	
 16728  0496  084A               	movf	___ftadd@f2,w
 16729  0497  00C7               	movwf	?___ftadd
 16730  0498  084B               	movf	___ftadd@f2+1,w
 16731  0499  00C8               	movwf	?___ftadd+1
 16732  049A  084C               	movf	___ftadd@f2+2,w
 16733  049B  00C9               	movwf	?___ftadd+2
 16734  049C  0008               	return
 16735  049D                     l10265:	
 16736  049D  0852               	movf	___ftadd@exp2,w
 16737  049E  1903               	btfsc	3,2
 16738  049F  0008               	return
 16739  04A0  0853               	movf	___ftadd@exp1,w
 16740  04A1  0252               	subwf	___ftadd@exp2,w
 16741  04A2  1803               	skipnc
 16742  04A3  2CAC               	goto	l10271
 16743  04A4  0352               	decf	___ftadd@exp2,w
 16744  04A5  3AFF               	xorlw	255
 16745  04A6  0753               	addwf	___ftadd@exp1,w
 16746  04A7  00CD               	movwf	??___ftadd
 16747  04A8  3019               	movlw	25
 16748  04A9  024D               	subwf	??___ftadd,w
 16749  04AA  1803               	btfsc	3,0
 16750  04AB  0008               	return
 16751  04AC                     l10271:	
 16752  04AC  3006               	movlw	6
 16753  04AD  00CD               	movwf	??___ftadd
 16754  04AE  084D               	movf	??___ftadd,w
 16755  04AF  00D1               	movwf	___ftadd@sign
 16756  04B0  1BC9               	btfsc	___ftadd@f1+2,7
 16757  04B1  17D1               	bsf	___ftadd@sign,7
 16758  04B2  1BCC               	btfsc	___ftadd@f2+2,7
 16759  04B3  1751               	bsf	___ftadd@sign,6
 16760  04B4  17C8               	bsf	___ftadd@f1+1,7
 16761  04B5  30FF               	movlw	255
 16762  04B6  05C7               	andwf	___ftadd@f1,f
 16763  04B7  30FF               	movlw	255
 16764  04B8  05C8               	andwf	___ftadd@f1+1,f
 16765  04B9  3000               	movlw	0
 16766  04BA  05C9               	andwf	___ftadd@f1+2,f
 16767  04BB  17CB               	bsf	___ftadd@f2+1,7
 16768  04BC  30FF               	movlw	255
 16769  04BD  05CA               	andwf	___ftadd@f2,f
 16770  04BE  30FF               	movlw	255
 16771  04BF  05CB               	andwf	___ftadd@f2+1,f
 16772  04C0  3000               	movlw	0
 16773  04C1  05CC               	andwf	___ftadd@f2+2,f
 16774  04C2  0852               	movf	___ftadd@exp2,w
 16775  04C3  0253               	subwf	___ftadd@exp1,w
 16776  04C4  1803               	skipnc
 16777  04C5  2CE8               	goto	l10293
 16778  04C6                     l10283:	
 16779  04C6  3001               	movlw	1
 16780  04C7                     u11965:	
 16781  04C7  35CA               	lslf	___ftadd@f2,f
 16782  04C8  0DCB               	rlf	___ftadd@f2+1,f
 16783  04C9  0DCC               	rlf	___ftadd@f2+2,f
 16784  04CA  0B89               	decfsz	9,f
 16785  04CB  2CC7               	goto	u11965
 16786  04CC  3001               	movlw	1
 16787  04CD  02D2               	subwf	___ftadd@exp2,f
 16788  04CE  0852               	movf	___ftadd@exp2,w
 16789  04CF  0653               	xorwf	___ftadd@exp1,w
 16790  04D0  1903               	skipnz
 16791  04D1  2CE3               	goto	l10291
 16792  04D2  3001               	movlw	1
 16793  04D3  02D1               	subwf	___ftadd@sign,f
 16794  04D4  0851               	movf	___ftadd@sign,w
 16795  04D5  3907               	andlw	7
 16796  04D6  1903               	btfsc	3,2
 16797  04D7  2CE3               	goto	l10291
 16798  04D8  2CC6               	goto	l10283
 16799  04D9                     l10289:	
 16800  04D9  3001               	movlw	1
 16801  04DA                     u11995:	
 16802  04DA  36C9               	lsrf	___ftadd@f1+2,f
 16803  04DB  0CC8               	rrf	___ftadd@f1+1,f
 16804  04DC  0CC7               	rrf	___ftadd@f1,f
 16805  04DD  0B89               	decfsz	9,f
 16806  04DE  2CDA               	goto	u11995
 16807  04DF  3001               	movlw	1
 16808  04E0  00CD               	movwf	??___ftadd
 16809  04E1  084D               	movf	??___ftadd,w
 16810  04E2  07D3               	addwf	___ftadd@exp1,f
 16811  04E3                     l10291:	
 16812  04E3  0853               	movf	___ftadd@exp1,w
 16813  04E4  0652               	xorwf	___ftadd@exp2,w
 16814  04E5  1903               	btfsc	3,2
 16815  04E6  2D0D               	goto	l2850
 16816  04E7  2CD9               	goto	l10289
 16817  04E8                     l10293:	
 16818  04E8  0853               	movf	___ftadd@exp1,w
 16819  04E9  0252               	subwf	___ftadd@exp2,w
 16820  04EA  1803               	skipnc
 16821  04EB  2D0D               	goto	l2850
 16822  04EC                     l10295:	
 16823  04EC  3001               	movlw	1
 16824  04ED                     u12025:	
 16825  04ED  35C7               	lslf	___ftadd@f1,f
 16826  04EE  0DC8               	rlf	___ftadd@f1+1,f
 16827  04EF  0DC9               	rlf	___ftadd@f1+2,f
 16828  04F0  0B89               	decfsz	9,f
 16829  04F1  2CED               	goto	u12025
 16830  04F2  3001               	movlw	1
 16831  04F3  02D3               	subwf	___ftadd@exp1,f
 16832  04F4  0852               	movf	___ftadd@exp2,w
 16833  04F5  0653               	xorwf	___ftadd@exp1,w
 16834  04F6  1903               	skipnz
 16835  04F7  2D09               	goto	l10303
 16836  04F8  3001               	movlw	1
 16837  04F9  02D1               	subwf	___ftadd@sign,f
 16838  04FA  0851               	movf	___ftadd@sign,w
 16839  04FB  3907               	andlw	7
 16840  04FC  1903               	btfsc	3,2
 16841  04FD  2D09               	goto	l10303
 16842  04FE  2CEC               	goto	l10295
 16843  04FF                     l10301:	
 16844  04FF  3001               	movlw	1
 16845  0500                     u12055:	
 16846  0500  36CC               	lsrf	___ftadd@f2+2,f
 16847  0501  0CCB               	rrf	___ftadd@f2+1,f
 16848  0502  0CCA               	rrf	___ftadd@f2,f
 16849  0503  0B89               	decfsz	9,f
 16850  0504  2D00               	goto	u12055
 16851  0505  3001               	movlw	1
 16852  0506  00CD               	movwf	??___ftadd
 16853  0507  084D               	movf	??___ftadd,w
 16854  0508  07D2               	addwf	___ftadd@exp2,f
 16855  0509                     l10303:	
 16856  0509  0853               	movf	___ftadd@exp1,w
 16857  050A  0652               	xorwf	___ftadd@exp2,w
 16858  050B  1D03               	skipz
 16859  050C  2CFF               	goto	l10301
 16860  050D                     l2850:	
 16861  050D  1FD1               	btfss	___ftadd@sign,7
 16862  050E  2D1F               	goto	l10307
 16863  050F  30FF               	movlw	255
 16864  0510  06C7               	xorwf	___ftadd@f1,f
 16865  0511  30FF               	movlw	255
 16866  0512  06C8               	xorwf	___ftadd@f1+1,f
 16867  0513  30FF               	movlw	255
 16868  0514  06C9               	xorwf	___ftadd@f1+2,f
 16869  0515  3001               	movlw	1
 16870  0516  07C7               	addwf	___ftadd@f1,f
 16871  0517  3000               	movlw	0
 16872  0518  1803               	skipnc
 16873  0519  3001               	movlw	1
 16874  051A  07C8               	addwf	___ftadd@f1+1,f
 16875  051B  3000               	movlw	0
 16876  051C  1803               	skipnc
 16877  051D  3001               	movlw	1
 16878  051E  07C9               	addwf	___ftadd@f1+2,f
 16879  051F                     l10307:	
 16880  051F  1F51               	btfss	___ftadd@sign,6
 16881  0520  2D31               	goto	l10311
 16882  0521  30FF               	movlw	255
 16883  0522  06CA               	xorwf	___ftadd@f2,f
 16884  0523  30FF               	movlw	255
 16885  0524  06CB               	xorwf	___ftadd@f2+1,f
 16886  0525  30FF               	movlw	255
 16887  0526  06CC               	xorwf	___ftadd@f2+2,f
 16888  0527  3001               	movlw	1
 16889  0528  07CA               	addwf	___ftadd@f2,f
 16890  0529  3000               	movlw	0
 16891  052A  1803               	skipnc
 16892  052B  3001               	movlw	1
 16893  052C  07CB               	addwf	___ftadd@f2+1,f
 16894  052D  3000               	movlw	0
 16895  052E  1803               	skipnc
 16896  052F  3001               	movlw	1
 16897  0530  07CC               	addwf	___ftadd@f2+2,f
 16898  0531                     l10311:	
 16899  0531  01D1               	clrf	___ftadd@sign
 16900  0532  0847               	movf	___ftadd@f1,w
 16901  0533  07CA               	addwf	___ftadd@f2,f
 16902  0534  0848               	movf	___ftadd@f1+1,w
 16903  0535  3DCB               	addwfc	___ftadd@f2+1,f
 16904  0536  0849               	movf	___ftadd@f1+2,w
 16905  0537  3DCC               	addwfc	___ftadd@f2+2,f
 16906  0538  1FCC               	btfss	___ftadd@f2+2,7
 16907  0539  2D4C               	goto	l10321
 16908  053A  30FF               	movlw	255
 16909  053B  06CA               	xorwf	___ftadd@f2,f
 16910  053C  30FF               	movlw	255
 16911  053D  06CB               	xorwf	___ftadd@f2+1,f
 16912  053E  30FF               	movlw	255
 16913  053F  06CC               	xorwf	___ftadd@f2+2,f
 16914  0540  3001               	movlw	1
 16915  0541  07CA               	addwf	___ftadd@f2,f
 16916  0542  3000               	movlw	0
 16917  0543  1803               	skipnc
 16918  0544  3001               	movlw	1
 16919  0545  07CB               	addwf	___ftadd@f2+1,f
 16920  0546  3000               	movlw	0
 16921  0547  1803               	skipnc
 16922  0548  3001               	movlw	1
 16923  0549  07CC               	addwf	___ftadd@f2+2,f
 16924  054A  01D1               	clrf	___ftadd@sign
 16925  054B  0AD1               	incf	___ftadd@sign,f
 16926  054C                     l10321:	
 16927  054C  084A               	movf	___ftadd@f2,w
 16928  054D  00A6               	movwf	___ftpack@arg
 16929  054E  084B               	movf	___ftadd@f2+1,w
 16930  054F  00A7               	movwf	___ftpack@arg+1
 16931  0550  084C               	movf	___ftadd@f2+2,w
 16932  0551  00A8               	movwf	___ftpack@arg+2
 16933  0552  0853               	movf	___ftadd@exp1,w
 16934  0553  00CD               	movwf	??___ftadd
 16935  0554  084D               	movf	??___ftadd,w
 16936  0555  00A9               	movwf	___ftpack@exp
 16937  0556  0851               	movf	___ftadd@sign,w
 16938  0557  00CE               	movwf	??___ftadd+1
 16939  0558  084E               	movf	??___ftadd+1,w
 16940  0559  00AA               	movwf	___ftpack@sign
 16941  055A  3196  2663         	fcall	___ftpack
 16942  055C  0020               	movlb	0	; select bank0
 16943  055D  0826               	movf	?___ftpack,w
 16944  055E  00C7               	movwf	?___ftadd
 16945  055F  0827               	movf	?___ftpack+1,w
 16946  0560  00C8               	movwf	?___ftadd+1
 16947  0561  0828               	movf	?___ftpack+2,w
 16948  0562  00C9               	movwf	?___ftadd+2
 16949  0563  0008               	return
 16950  0564                     __end_of___ftadd:	
 16951                           
 16952                           	psect	text114
 16953  10E1                     __ptext114:	
 16954 ;; *************** function ___awtoft *****************
 16955 ;; Defined at:
 16956 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16957 ;; Parameters:    Size  Location     Type
 16958 ;;  c               2   14[BANK0 ] int 
 16959 ;; Auto vars:     Size  Location     Type
 16960 ;;  sign            1   19[BANK0 ] unsigned char 
 16961 ;; Return value:  Size  Location     Type
 16962 ;;                  3   14[BANK0 ] float 
 16963 ;; Registers used:
 16964 ;;		wreg, status,2, status,0, pclath, cstack
 16965 ;; Tracked objects:
 16966 ;;		On entry : 0/0
 16967 ;;		On exit  : 0/0
 16968 ;;		Unchanged: 0/0
 16969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16970 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16972 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16973 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16974 ;;Total ram usage:        6 bytes
 16975 ;; Hardware stack levels used:    1
 16976 ;; Hardware stack levels required when called:    6
 16977 ;; This function calls:
 16978 ;;		___ftpack
 16979 ;; This function is called by:
 16980 ;;		_getDimmerLights_PercentToValue
 16981 ;;		_getDimmerLights_ValueToPercent
 16982 ;; This function uses a non-reentrant model
 16983 ;;
 16984                           
 16985                           
 16986                           ;psect for function ___awtoft
 16987  10E1                     ___awtoft:	
 16988                           
 16989                           ;incstack = 0
 16990                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16991  10E1  0020               	movlb	0	; select bank0
 16992  10E2  01B3               	clrf	___awtoft@sign
 16993  10E3  1FAF               	btfss	___awtoft@c+1,7
 16994  10E4  28EC               	goto	l10249
 16995  10E5  09AE               	comf	___awtoft@c,f
 16996  10E6  09AF               	comf	___awtoft@c+1,f
 16997  10E7  0AAE               	incf	___awtoft@c,f
 16998  10E8  1903               	skipnz
 16999  10E9  0AAF               	incf	___awtoft@c+1,f
 17000  10EA  01B3               	clrf	___awtoft@sign
 17001  10EB  0AB3               	incf	___awtoft@sign,f
 17002  10EC                     l10249:	
 17003  10EC  082E               	movf	___awtoft@c,w
 17004  10ED  00A6               	movwf	___ftpack@arg
 17005  10EE  082F               	movf	___awtoft@c+1,w
 17006  10EF  00A7               	movwf	___ftpack@arg+1
 17007  10F0  01A8               	clrf	___ftpack@arg+2
 17008  10F1  308E               	movlw	142
 17009  10F2  00B1               	movwf	??___awtoft
 17010  10F3  0831               	movf	??___awtoft,w
 17011  10F4  00A9               	movwf	___ftpack@exp
 17012  10F5  0833               	movf	___awtoft@sign,w
 17013  10F6  00B2               	movwf	??___awtoft+1
 17014  10F7  0832               	movf	??___awtoft+1,w
 17015  10F8  00AA               	movwf	___ftpack@sign
 17016  10F9  3196  2663         	fcall	___ftpack
 17017  10FB  0020               	movlb	0	; select bank0
 17018  10FC  0826               	movf	?___ftpack,w
 17019  10FD  00AE               	movwf	?___awtoft
 17020  10FE  0827               	movf	?___ftpack+1,w
 17021  10FF  00AF               	movwf	?___awtoft+1
 17022  1100  0828               	movf	?___ftpack+2,w
 17023  1101  00B0               	movwf	?___awtoft+2
 17024  1102  0008               	return
 17025  1103                     __end_of___awtoft:	
 17026                           
 17027                           	psect	text115
 17028  1663                     __ptext115:	
 17029 ;; *************** function ___ftpack *****************
 17030 ;; Defined at:
 17031 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17032 ;; Parameters:    Size  Location     Type
 17033 ;;  arg             3    6[BANK0 ] unsigned um
 17034 ;;  exp             1    9[BANK0 ] unsigned char 
 17035 ;;  sign            1   10[BANK0 ] unsigned char 
 17036 ;; Auto vars:     Size  Location     Type
 17037 ;;		None
 17038 ;; Return value:  Size  Location     Type
 17039 ;;                  3    6[BANK0 ] float 
 17040 ;; Registers used:
 17041 ;;		wreg, status,2, status,0
 17042 ;; Tracked objects:
 17043 ;;		On entry : 0/0
 17044 ;;		On exit  : 0/0
 17045 ;;		Unchanged: 0/0
 17046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17047 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17049 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17050 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17051 ;;Total ram usage:        8 bytes
 17052 ;; Hardware stack levels used:    1
 17053 ;; Hardware stack levels required when called:    5
 17054 ;; This function calls:
 17055 ;;		Nothing
 17056 ;; This function is called by:
 17057 ;;		___awtoft
 17058 ;;		___ftadd
 17059 ;;		___ftdiv
 17060 ;;		___ftmul
 17061 ;; This function uses a non-reentrant model
 17062 ;;
 17063                           
 17064                           
 17065                           ;psect for function ___ftpack
 17066  1663                     ___ftpack:	
 17067                           
 17068                           ;incstack = 0
 17069                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17070  1663  0020               	movlb	0	; select bank0
 17071  1664  0829               	movf	___ftpack@exp,w
 17072  1665  1903               	btfsc	3,2
 17073  1666  2E6C               	goto	l10117
 17074  1667  0828               	movf	___ftpack@arg+2,w
 17075  1668  0427               	iorwf	___ftpack@arg+1,w
 17076  1669  0426               	iorwf	___ftpack@arg,w
 17077  166A  1D03               	skipz
 17078  166B  2E7D               	goto	l10123
 17079  166C                     l10117:	
 17080  166C  3000               	movlw	0
 17081  166D  00A6               	movwf	?___ftpack
 17082  166E  3000               	movlw	0
 17083  166F  00A7               	movwf	?___ftpack+1
 17084  1670  3000               	movlw	0
 17085  1671  00A8               	movwf	?___ftpack+2
 17086  1672  0008               	return
 17087  1673                     l10121:	
 17088  1673  3001               	movlw	1
 17089  1674  00AB               	movwf	??___ftpack
 17090  1675  082B               	movf	??___ftpack,w
 17091  1676  07A9               	addwf	___ftpack@exp,f
 17092  1677  3001               	movlw	1
 17093  1678                     u11595:	
 17094  1678  36A8               	lsrf	___ftpack@arg+2,f
 17095  1679  0CA7               	rrf	___ftpack@arg+1,f
 17096  167A  0CA6               	rrf	___ftpack@arg,f
 17097  167B  0B89               	decfsz	9,f
 17098  167C  2E78               	goto	u11595
 17099  167D                     l10123:	
 17100  167D  30FE               	movlw	254
 17101  167E  0528               	andwf	___ftpack@arg+2,w
 17102  167F  1903               	btfsc	3,2
 17103  1680  2E96               	goto	l2821
 17104  1681  2E73               	goto	l10121
 17105  1682                     l10125:	
 17106  1682  3001               	movlw	1
 17107  1683  00AB               	movwf	??___ftpack
 17108  1684  082B               	movf	??___ftpack,w
 17109  1685  07A9               	addwf	___ftpack@exp,f
 17110  1686  3001               	movlw	1
 17111  1687  07A6               	addwf	___ftpack@arg,f
 17112  1688  3000               	movlw	0
 17113  1689  1803               	skipnc
 17114  168A  3001               	movlw	1
 17115  168B  07A7               	addwf	___ftpack@arg+1,f
 17116  168C  3000               	movlw	0
 17117  168D  1803               	skipnc
 17118  168E  3001               	movlw	1
 17119  168F  07A8               	addwf	___ftpack@arg+2,f
 17120  1690  3001               	movlw	1
 17121  1691                     u11615:	
 17122  1691  36A8               	lsrf	___ftpack@arg+2,f
 17123  1692  0CA7               	rrf	___ftpack@arg+1,f
 17124  1693  0CA6               	rrf	___ftpack@arg,f
 17125  1694  0B89               	decfsz	9,f
 17126  1695  2E91               	goto	u11615
 17127  1696                     l2821:	
 17128  1696  30FF               	movlw	255
 17129  1697  0528               	andwf	___ftpack@arg+2,w
 17130  1698  1903               	btfsc	3,2
 17131  1699  2EA3               	goto	l10133
 17132  169A  2E82               	goto	l10125
 17133  169B                     l10131:	
 17134  169B  3001               	movlw	1
 17135  169C  02A9               	subwf	___ftpack@exp,f
 17136  169D  3001               	movlw	1
 17137  169E                     u11635:	
 17138  169E  35A6               	lslf	___ftpack@arg,f
 17139  169F  0DA7               	rlf	___ftpack@arg+1,f
 17140  16A0  0DA8               	rlf	___ftpack@arg+2,f
 17141  16A1  0B89               	decfsz	9,f
 17142  16A2  2E9E               	goto	u11635
 17143  16A3                     l10133:	
 17144  16A3  1FA7               	btfss	___ftpack@arg+1,7
 17145  16A4  2E9B               	goto	l10131
 17146  16A5  1829               	btfsc	___ftpack@exp,0
 17147  16A6  2EAD               	goto	l2827
 17148  16A7  30FF               	movlw	255
 17149  16A8  05A6               	andwf	___ftpack@arg,f
 17150  16A9  307F               	movlw	127
 17151  16AA  05A7               	andwf	___ftpack@arg+1,f
 17152  16AB  30FF               	movlw	255
 17153  16AC  05A8               	andwf	___ftpack@arg+2,f
 17154  16AD                     l2827:	
 17155  16AD  1003               	clrc
 17156  16AE  0CA9               	rrf	___ftpack@exp,f
 17157  16AF  0829               	movf	___ftpack@exp,w
 17158  16B0  00AB               	movwf	??___ftpack
 17159  16B1  01AC               	clrf	??___ftpack+1
 17160  16B2  01AD               	clrf	??___ftpack+2
 17161  16B3  3010               	movlw	16
 17162  16B4                     u11665:	
 17163  16B4  35AB               	lslf	??___ftpack,f
 17164  16B5  0DAC               	rlf	??___ftpack+1,f
 17165  16B6  0DAD               	rlf	??___ftpack+2,f
 17166  16B7  0B89               	decfsz	9,f
 17167  16B8  2EB4               	goto	u11665
 17168  16B9  082B               	movf	??___ftpack,w
 17169  16BA  04A6               	iorwf	___ftpack@arg,f
 17170  16BB  082C               	movf	??___ftpack+1,w
 17171  16BC  04A7               	iorwf	___ftpack@arg+1,f
 17172  16BD  082D               	movf	??___ftpack+2,w
 17173  16BE  04A8               	iorwf	___ftpack@arg+2,f
 17174  16BF  082A               	movf	___ftpack@sign,w
 17175  16C0  1903               	btfsc	3,2
 17176  16C1  0008               	return
 17177  16C2  17A8               	bsf	___ftpack@arg+2,7
 17178  16C3  0008               	return
 17179  16C4                     __end_of___ftpack:	
 17180                           
 17181                           	psect	text116
 17182  1CF6                     __ptext116:	
 17183 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17184 ;; Defined at:
 17185 ;;		line 67 in file "../src/Dimmer_B1.c"
 17186 ;; Parameters:    Size  Location     Type
 17187 ;;  lights          1    wreg     unsigned char 
 17188 ;; Auto vars:     Size  Location     Type
 17189 ;;  lights          1    7[BANK0 ] unsigned char 
 17190 ;;  value           1    8[BANK0 ] unsigned char 
 17191 ;; Return value:  Size  Location     Type
 17192 ;;                  1    wreg      unsigned char 
 17193 ;; Registers used:
 17194 ;;		wreg, status,2
 17195 ;; Tracked objects:
 17196 ;;		On entry : 0/0
 17197 ;;		On exit  : 0/0
 17198 ;;		Unchanged: 0/0
 17199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17201 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17202 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17203 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17204 ;;Total ram usage:        3 bytes
 17205 ;; Hardware stack levels used:    1
 17206 ;; Hardware stack levels required when called:    5
 17207 ;; This function calls:
 17208 ;;		Nothing
 17209 ;; This function is called by:
 17210 ;;		_setDimmerLights_Dimming
 17211 ;; This function uses a non-reentrant model
 17212 ;;
 17213                           
 17214                           
 17215                           ;psect for function _getDimmerIntr_DimmingValue
 17216  1CF6                     _getDimmerIntr_DimmingValue:	
 17217                           
 17218                           ;incstack = 0
 17219                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17220                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17221  1CF6  0020               	movlb	0	; select bank0
 17222  1CF7  00A7               	movwf	getDimmerIntr_DimmingValue@lights
 17223                           
 17224                           ;Dimmer_B1.c: 68: char value = 0;
 17225  1CF8  01A8               	clrf	getDimmerIntr_DimmingValue@value
 17226                           
 17227                           ;Dimmer_B1.c: 70: if (lights == 1) {
 17228  1CF9  0827               	movf	getDimmerIntr_DimmingValue@lights,w
 17229  1CFA  3A01               	xorlw	1
 17230  1CFB  1D03               	skipz
 17231  1CFC  2D03               	goto	l683
 17232                           
 17233                           ;Dimmer_B1.c: 71: value = DimmerIntr1.DimmingValue;
 17234  1CFD  0021               	movlb	1	; select bank1
 17235  1CFE  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 17236  1CFF  0020               	movlb	0	; select bank0
 17237  1D00  00A6               	movwf	??_getDimmerIntr_DimmingValue
 17238  1D01  0826               	movf	??_getDimmerIntr_DimmingValue,w
 17239  1D02  00A8               	movwf	getDimmerIntr_DimmingValue@value
 17240  1D03                     l683:	
 17241                           
 17242                           ;Dimmer_B1.c: 72: }
 17243                           ;Dimmer_B1.c: 84: return value;
 17244  1D03  0828               	movf	getDimmerIntr_DimmingValue@value,w
 17245  1D04  0008               	return
 17246  1D05                     __end_of_getDimmerIntr_DimmingValue:	
 17247                           
 17248                           	psect	text117
 17249  1EA7                     __ptext117:	
 17250 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17251 ;; Defined at:
 17252 ;;		line 916 in file "../src/Dimmer_B1.c"
 17253 ;; Parameters:    Size  Location     Type
 17254 ;;  lights          1    wreg     unsigned char 
 17255 ;; Auto vars:     Size  Location     Type
 17256 ;;  lights          1    0[COMMON] unsigned char 
 17257 ;;  allow           1    8[BANK0 ] unsigned char 
 17258 ;; Return value:  Size  Location     Type
 17259 ;;                  1    wreg      unsigned char 
 17260 ;; Registers used:
 17261 ;;		wreg, status,2, pclath, cstack
 17262 ;; Tracked objects:
 17263 ;;		On entry : 0/0
 17264 ;;		On exit  : 0/0
 17265 ;;		Unchanged: 0/0
 17266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17268 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17270 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17271 ;;Total ram usage:        3 bytes
 17272 ;; Hardware stack levels used:    1
 17273 ;; Hardware stack levels required when called:    6
 17274 ;; This function calls:
 17275 ;;		_getLoad_OK
 17276 ;; This function is called by:
 17277 ;;		_setDimmerLights_Main
 17278 ;; This function uses a non-reentrant model
 17279 ;;
 17280                           
 17281                           
 17282                           ;psect for function _getDimmerLights_Allow_Condition
 17283  1EA7                     _getDimmerLights_Allow_Condition:	
 17284                           
 17285                           ;Dimmer_B1.c: 917: char allow = 0;
 17286                           
 17287                           ;incstack = 0
 17288                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 17289  1EA7  0020               	movlb	0	; select bank0
 17290  1EA8  01A8               	clrf	getDimmerLights_Allow_Condition@allow
 17291                           
 17292                           ;Dimmer_B1.c: 923: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17293  1EA9  01A9               	clrf	_getDimmerLights_Allow_Condition$2199
 17294  1EAA  0AA9               	incf	_getDimmerLights_Allow_Condition$2199,f
 17295  1EAB  319B  23E5  319E   	fcall	_getLoad_OK
 17296  1EAE  3800               	iorlw	0
 17297  1EAF  1D03               	skipz
 17298  1EB0  2EB6               	goto	l11147
 17299  1EB1  0022               	movlb	2	; select bank2
 17300  1EB2  18AD               	btfsc	_Dimmer^(0+256),1
 17301  1EB3  2EB6               	goto	l11147
 17302  1EB4  0020               	movlb	0	; select bank0
 17303  1EB5  01A9               	clrf	_getDimmerLights_Allow_Condition$2199
 17304  1EB6                     l11147:	
 17305  1EB6  0020               	movlb	0	; select bank0
 17306  1EB7  0829               	movf	_getDimmerLights_Allow_Condition$2199,w
 17307  1EB8  00A7               	movwf	??_getDimmerLights_Allow_Condition
 17308  1EB9  0827               	movf	??_getDimmerLights_Allow_Condition,w
 17309  1EBA  00A8               	movwf	getDimmerLights_Allow_Condition@allow
 17310                           
 17311                           ;Dimmer_B1.c: 950: return allow;
 17312  1EBB  0828               	movf	getDimmerLights_Allow_Condition@allow,w
 17313  1EBC  0008               	return
 17314  1EBD                     __end_of_getDimmerLights_Allow_Condition:	
 17315                           
 17316                           	psect	text118
 17317  1BE5                     __ptext118:	
 17318 ;; *************** function _getLoad_OK *****************
 17319 ;; Defined at:
 17320 ;;		line 272 in file "../src/OverLoad_B1.c"
 17321 ;; Parameters:    Size  Location     Type
 17322 ;;		None
 17323 ;; Auto vars:     Size  Location     Type
 17324 ;;  ok              1    6[BANK0 ] unsigned char 
 17325 ;; Return value:  Size  Location     Type
 17326 ;;                  1    wreg      unsigned char 
 17327 ;; Registers used:
 17328 ;;		wreg, status,2
 17329 ;; Tracked objects:
 17330 ;;		On entry : 0/0
 17331 ;;		On exit  : 0/0
 17332 ;;		Unchanged: 0/0
 17333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17338 ;;Total ram usage:        1 bytes
 17339 ;; Hardware stack levels used:    1
 17340 ;; Hardware stack levels required when called:    5
 17341 ;; This function calls:
 17342 ;;		Nothing
 17343 ;; This function is called by:
 17344 ;;		_DimmerLights_Main
 17345 ;;		_getDimmerLights_Allow_Condition
 17346 ;; This function uses a non-reentrant model
 17347 ;;
 17348                           
 17349                           
 17350                           ;psect for function _getLoad_OK
 17351  1BE5                     _getLoad_OK:	
 17352                           
 17353                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 17354                           
 17355                           ;incstack = 0
 17356                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17357  1BE5  3000               	movlw	0
 17358  1BE6  0022               	movlb	2	; select bank2
 17359  1BE7  1BB5               	btfsc	_Load^(0+256),7
 17360  1BE8  3001               	movlw	1
 17361  1BE9  0020               	movlb	0	; select bank0
 17362  1BEA  00A6               	movwf	getLoad_OK@ok
 17363                           
 17364                           ;OverLoad_B1.c: 274: return ok;
 17365  1BEB  0826               	movf	getLoad_OK@ok,w
 17366  1BEC  0008               	return
 17367  1BED                     __end_of_getLoad_OK:	
 17368                           
 17369                           	psect	text119
 17370  11D5                     __ptext119:	
 17371 ;; *************** function _getMain_All_Error_Status *****************
 17372 ;; Defined at:
 17373 ;;		line 424 in file "../src/Main_B1.c"
 17374 ;; Parameters:    Size  Location     Type
 17375 ;;  command         1    wreg     unsigned char 
 17376 ;; Auto vars:     Size  Location     Type
 17377 ;;  command         1   11[BANK0 ] unsigned char 
 17378 ;;  status          1   12[BANK0 ] unsigned char 
 17379 ;; Return value:  Size  Location     Type
 17380 ;;                  1    wreg      unsigned char 
 17381 ;; Registers used:
 17382 ;;		wreg, status,2, status,0
 17383 ;; Tracked objects:
 17384 ;;		On entry : 0/0
 17385 ;;		On exit  : 0/0
 17386 ;;		Unchanged: 0/0
 17387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17389 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17391 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17392 ;;Total ram usage:        7 bytes
 17393 ;; Hardware stack levels used:    1
 17394 ;; Hardware stack levels required when called:    5
 17395 ;; This function calls:
 17396 ;;		Nothing
 17397 ;; This function is called by:
 17398 ;;		_DimmerLights_Main
 17399 ;;		_Exception_Main
 17400 ;;		_Load_Main
 17401 ;;		_setTemp_Main
 17402 ;;		_getRxData
 17403 ;;		_setSw_Main
 17404 ;; This function uses a non-reentrant model
 17405 ;;
 17406                           
 17407                           
 17408                           ;psect for function _getMain_All_Error_Status
 17409  11D5                     _getMain_All_Error_Status:	
 17410                           
 17411                           ;incstack = 0
 17412                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17413                           ;getMain_All_Error_Status@command stored from wreg
 17414  11D5  0020               	movlb	0	; select bank0
 17415  11D6  00AB               	movwf	getMain_All_Error_Status@command
 17416                           
 17417                           ;Main_B1.c: 425: char status = 0;
 17418  11D7  01AC               	clrf	getMain_All_Error_Status@status
 17419                           
 17420                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 17421  11D8  08AC               	movf	getMain_All_Error_Status@status,f
 17422  11D9  1D03               	skipz
 17423  11DA  29EF               	goto	l10919
 17424  11DB  082B               	movf	getMain_All_Error_Status@command,w
 17425  11DC  3A02               	xorlw	2
 17426  11DD  1903               	skipnz
 17427  11DE  29EF               	goto	l10919
 17428                           
 17429                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17430  11DF  0021               	movlb	1	; select bank1
 17431  11E0  18D1               	btfsc	_Temp^(0+128),1
 17432  11E1  29E6               	goto	l10917
 17433  11E2  0020               	movlb	0	; select bank0
 17434  11E3  01A7               	clrf	_getMain_All_Error_Status$3505
 17435  11E4  01A8               	clrf	_getMain_All_Error_Status$3505+1
 17436  11E5  29EB               	goto	l1455
 17437  11E6                     l10917:	
 17438  11E6  3002               	movlw	2
 17439  11E7  0020               	movlb	0	; select bank0
 17440  11E8  00A7               	movwf	_getMain_All_Error_Status$3505
 17441  11E9  3000               	movlw	0
 17442  11EA  00A8               	movwf	_getMain_All_Error_Status$3505+1
 17443  11EB                     l1455:	
 17444  11EB  0827               	movf	_getMain_All_Error_Status$3505,w
 17445  11EC  00A6               	movwf	??_getMain_All_Error_Status
 17446  11ED  0826               	movf	??_getMain_All_Error_Status,w
 17447  11EE  00AC               	movwf	getMain_All_Error_Status@status
 17448  11EF                     l10919:	
 17449                           
 17450                           ;Main_B1.c: 438: }
 17451                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 17452  11EF  08AC               	movf	getMain_All_Error_Status@status,f
 17453  11F0  1D03               	skipz
 17454  11F1  2A06               	goto	l1456
 17455  11F2  082B               	movf	getMain_All_Error_Status@command,w
 17456  11F3  3A03               	xorlw	3
 17457  11F4  1903               	skipnz
 17458  11F5  2A06               	goto	l1456
 17459                           
 17460                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 17461  11F6  0022               	movlb	2	; select bank2
 17462  11F7  1AB5               	btfsc	_Load^(0+256),5
 17463  11F8  29FD               	goto	l10927
 17464  11F9  0020               	movlb	0	; select bank0
 17465  11FA  01A9               	clrf	_getMain_All_Error_Status$3506
 17466  11FB  01AA               	clrf	_getMain_All_Error_Status$3506+1
 17467  11FC  2A02               	goto	l1460
 17468  11FD                     l10927:	
 17469  11FD  3003               	movlw	3
 17470  11FE  0020               	movlb	0	; select bank0
 17471  11FF  00A9               	movwf	_getMain_All_Error_Status$3506
 17472  1200  3000               	movlw	0
 17473  1201  00AA               	movwf	_getMain_All_Error_Status$3506+1
 17474  1202                     l1460:	
 17475  1202  0829               	movf	_getMain_All_Error_Status$3506,w
 17476  1203  00A6               	movwf	??_getMain_All_Error_Status
 17477  1204  0826               	movf	??_getMain_All_Error_Status,w
 17478  1205  00AC               	movwf	getMain_All_Error_Status@status
 17479  1206                     l1456:	
 17480                           
 17481                           ;Main_B1.c: 445: }
 17482                           ;Main_B1.c: 455: return status;
 17483  1206  082C               	movf	getMain_All_Error_Status@status,w
 17484  1207  0008               	return
 17485  1208                     __end_of_getMain_All_Error_Status:	
 17486                           
 17487                           	psect	text120
 17488  1BD0                     __ptext120:	
 17489 ;; *************** function _DimmerLights_Initialization *****************
 17490 ;; Defined at:
 17491 ;;		line 597 in file "../src/Dimmer_B1.c"
 17492 ;; Parameters:    Size  Location     Type
 17493 ;;		None
 17494 ;; Auto vars:     Size  Location     Type
 17495 ;;		None
 17496 ;; Return value:  Size  Location     Type
 17497 ;;		None               void
 17498 ;; Registers used:
 17499 ;;		wreg, status,2, status,0, pclath, cstack
 17500 ;; Tracked objects:
 17501 ;;		On entry : 0/0
 17502 ;;		On exit  : 0/0
 17503 ;;		Unchanged: 0/0
 17504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17509 ;;Total ram usage:        0 bytes
 17510 ;; Hardware stack levels used:    1
 17511 ;; Hardware stack levels required when called:    6
 17512 ;; This function calls:
 17513 ;;		_DimmerIntr_Initialization
 17514 ;;		_setDimmerLights_Initialization
 17515 ;; This function is called by:
 17516 ;;		_main
 17517 ;; This function uses a non-reentrant model
 17518 ;;
 17519                           
 17520                           
 17521                           ;psect for function _DimmerLights_Initialization
 17522  1BD0                     _DimmerLights_Initialization:	
 17523                           
 17524                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(1);
 17525                           
 17526                           ;incstack = 0
 17527                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17528  1BD0  3001               	movlw	1
 17529  1BD1  3188  2000  319B   	fcall	_setDimmerLights_Initialization
 17530                           
 17531                           ;Dimmer_B1.c: 609: DimmerIntr_Initialization();
 17532  1BD4  319F  2730         	fcall	_DimmerIntr_Initialization
 17533  1BD6  0008               	return
 17534  1BD7                     __end_of_DimmerLights_Initialization:	
 17535                           
 17536                           	psect	text121
 17537  0800                     __ptext121:	
 17538 ;; *************** function _setDimmerLights_Initialization *****************
 17539 ;; Defined at:
 17540 ;;		line 613 in file "../src/Dimmer_B1.c"
 17541 ;; Parameters:    Size  Location     Type
 17542 ;;  lights          1    wreg     unsigned char 
 17543 ;; Auto vars:     Size  Location     Type
 17544 ;;  lights          1    0[COMMON] unsigned char 
 17545 ;; Return value:  Size  Location     Type
 17546 ;;		None               void
 17547 ;; Registers used:
 17548 ;;		wreg
 17549 ;; Tracked objects:
 17550 ;;		On entry : 0/0
 17551 ;;		On exit  : 0/0
 17552 ;;		Unchanged: 0/0
 17553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;Total ram usage:        0 bytes
 17559 ;; Hardware stack levels used:    1
 17560 ;; Hardware stack levels required when called:    5
 17561 ;; This function calls:
 17562 ;;		Nothing
 17563 ;; This function is called by:
 17564 ;;		_DimmerLights_Initialization
 17565 ;; This function uses a non-reentrant model
 17566 ;;
 17567                           
 17568                           
 17569                           ;psect for function _setDimmerLights_Initialization
 17570  0800                     _setDimmerLights_Initialization:	
 17571                           
 17572                           ;incstack = 0
 17573                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17574  0800  0008               	return
 17575  0801                     __end_of_setDimmerLights_Initialization:	
 17576                           
 17577                           	psect	text122
 17578  1F30                     __ptext122:	
 17579 ;; *************** function _DimmerIntr_Initialization *****************
 17580 ;; Defined at:
 17581 ;;		line 7 in file "../src/Dimmer_B1.c"
 17582 ;; Parameters:    Size  Location     Type
 17583 ;;		None
 17584 ;; Auto vars:     Size  Location     Type
 17585 ;;		None
 17586 ;; Return value:  Size  Location     Type
 17587 ;;		None               void
 17588 ;; Registers used:
 17589 ;;		wreg
 17590 ;; Tracked objects:
 17591 ;;		On entry : 0/0
 17592 ;;		On exit  : 0/0
 17593 ;;		Unchanged: 0/0
 17594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17599 ;;Total ram usage:        1 bytes
 17600 ;; Hardware stack levels used:    1
 17601 ;; Hardware stack levels required when called:    5
 17602 ;; This function calls:
 17603 ;;		Nothing
 17604 ;; This function is called by:
 17605 ;;		_DimmerLights_Initialization
 17606 ;; This function uses a non-reentrant model
 17607 ;;
 17608                           
 17609                           
 17610                           ;psect for function _DimmerIntr_Initialization
 17611  1F30                     _DimmerIntr_Initialization:	
 17612                           
 17613                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 17614                           
 17615                           ;incstack = 0
 17616                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17617  1F30  3007               	movlw	7
 17618  1F31  0020               	movlb	0	; select bank0
 17619  1F32  00A6               	movwf	??_DimmerIntr_Initialization
 17620  1F33  0826               	movf	??_DimmerIntr_Initialization,w
 17621  1F34  0021               	movlb	1	; select bank1
 17622  1F35  00BE               	movwf	(_DimmerIntr1^(0+128)+4)
 17623                           
 17624                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(65*0.8));
 17625  1F36  3034               	movlw	52
 17626  1F37  0020               	movlb	0	; select bank0
 17627  1F38  00A6               	movwf	??_DimmerIntr_Initialization
 17628  1F39  0826               	movf	??_DimmerIntr_Initialization,w
 17629  1F3A  0021               	movlb	1	; select bank1
 17630  1F3B  00C0               	movwf	(_DimmerIntr1^(0+128)+6)
 17631                           
 17632                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.8));
 17633  1F3C  3008               	movlw	8
 17634  1F3D  0020               	movlb	0	; select bank0
 17635  1F3E  00A6               	movwf	??_DimmerIntr_Initialization
 17636  1F3F  0826               	movf	??_DimmerIntr_Initialization,w
 17637  1F40  0021               	movlb	1	; select bank1
 17638  1F41  00C1               	movwf	(_DimmerIntr1^(0+128)+7)
 17639                           
 17640                           ;Dimmer_B1.c: 13: DimmerIntr1.DimmingValue = ((char)(65*0.8));
 17641  1F42  3034               	movlw	52
 17642  1F43  0020               	movlb	0	; select bank0
 17643  1F44  00A6               	movwf	??_DimmerIntr_Initialization
 17644  1F45  0826               	movf	??_DimmerIntr_Initialization,w
 17645  1F46  0021               	movlb	1	; select bank1
 17646  1F47  00BF               	movwf	(_DimmerIntr1^(0+128)+5)
 17647  1F48  0008               	return
 17648  1F49                     __end_of_DimmerIntr_Initialization:	
 17649                           
 17650                           	psect	text123
 17651  1B95                     __ptext123:	
 17652 ;; *************** function _DelayOff_Main *****************
 17653 ;; Defined at:
 17654 ;;		line 41 in file "../src/DelayOff_B1.c"
 17655 ;; Parameters:    Size  Location     Type
 17656 ;;		None
 17657 ;; Auto vars:     Size  Location     Type
 17658 ;;		None
 17659 ;; Return value:  Size  Location     Type
 17660 ;;		None               void
 17661 ;; Registers used:
 17662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17663 ;; Tracked objects:
 17664 ;;		On entry : 0/0
 17665 ;;		On exit  : 0/0
 17666 ;;		Unchanged: 0/0
 17667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17672 ;;Total ram usage:        0 bytes
 17673 ;; Hardware stack levels used:    1
 17674 ;; Hardware stack levels required when called:    9
 17675 ;; This function calls:
 17676 ;;		_DlyOff_Main
 17677 ;; This function is called by:
 17678 ;;		_main
 17679 ;; This function uses a non-reentrant model
 17680 ;;
 17681                           
 17682                           
 17683                           ;psect for function _DelayOff_Main
 17684  1B95                     _DelayOff_Main:	
 17685                           
 17686                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17687                           
 17688                           ;incstack = 0
 17689                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17690  1B95  3001               	movlw	1
 17691  1B96  3188  2042         	fcall	_DlyOff_Main
 17692  1B98  0008               	return
 17693  1B99                     __end_of_DelayOff_Main:	
 17694                           
 17695                           	psect	text124
 17696  0842                     __ptext124:	
 17697 ;; *************** function _DlyOff_Main *****************
 17698 ;; Defined at:
 17699 ;;		line 61 in file "../src/DelayOff_B1.c"
 17700 ;; Parameters:    Size  Location     Type
 17701 ;;  sw              1    wreg     unsigned char 
 17702 ;; Auto vars:     Size  Location     Type
 17703 ;;  sw              1   10[BANK1 ] unsigned char 
 17704 ;; Return value:  Size  Location     Type
 17705 ;;		None               void
 17706 ;; Registers used:
 17707 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17708 ;; Tracked objects:
 17709 ;;		On entry : 0/0
 17710 ;;		On exit  : 0/0
 17711 ;;		Unchanged: 0/0
 17712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;Total ram usage:        3 bytes
 17718 ;; Hardware stack levels used:    1
 17719 ;; Hardware stack levels required when called:    8
 17720 ;; This function calls:
 17721 ;;		_DelayOffPointSelect
 17722 ;;		_getDimmerLights_Status
 17723 ;;		_setDimmerLights_SwOff
 17724 ;;		_setDimmerLights_SwOn
 17725 ;;		_setProductData
 17726 ;; This function is called by:
 17727 ;;		_DelayOff_Main
 17728 ;; This function uses a non-reentrant model
 17729 ;;
 17730                           
 17731                           
 17732                           ;psect for function _DlyOff_Main
 17733  0842                     _DlyOff_Main:	
 17734                           
 17735                           ;incstack = 0
 17736                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17737                           ;DlyOff_Main@sw stored from wreg
 17738  0842  0021               	movlb	1	; select bank1
 17739  0843  00E5               	movwf	DlyOff_Main@sw^(0+128)
 17740                           
 17741                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17742  0844  0865               	movf	DlyOff_Main@sw^(0+128),w
 17743  0845  319C  242C  3188   	fcall	_DelayOffPointSelect
 17744                           
 17745                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17746  0848  0020               	movlb	0	; select bank0
 17747  0849  0863               	movf	_DelayOff,w
 17748  084A  0086               	movwf	6
 17749  084B  3001               	movlw	1	; select bank2/3
 17750  084C  0087               	movwf	7
 17751  084D  1C81               	btfss	1,1
 17752  084E  0008               	return
 17753                           
 17754                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17755  084F  0863               	movf	_DelayOff,w
 17756  0850  3E02               	addlw	2
 17757  0851  0086               	movwf	6
 17758  0852  3001               	movlw	1	; select bank2/3
 17759  0853  0087               	movwf	7
 17760  0854  3001               	movlw	1
 17761  0855  0781               	addwf	1,f
 17762  0856  3141               	addfsr 1,1
 17763  0857  1803               	skipnc
 17764  0858  0A81               	incf	1,f
 17765                           
 17766                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17767  0859  0863               	movf	_DelayOff,w
 17768  085A  3E02               	addlw	2
 17769  085B  0086               	movwf	6
 17770  085C  3001               	movlw	1	; select bank2/3
 17771  085D  0087               	movwf	7
 17772  085E  3F40               	moviw [0]fsr1
 17773  085F  0021               	movlb	1	; select bank1
 17774  0860  00E3               	movwf	??_DlyOff_Main^(0+128)
 17775  0861  3F41               	moviw [1]fsr1
 17776  0862  00E4               	movwf	(??_DlyOff_Main^(0+128)+1)
 17777  0863  300B               	movlw	11
 17778  0864  0264               	subwf	(??_DlyOff_Main+1)^(0+128),w
 17779  0865  30B8               	movlw	184
 17780  0866  1903               	skipnz
 17781  0867  0263               	subwf	??_DlyOff_Main^(0+128),w
 17782  0868  1C03               	skipc
 17783  0869  0008               	return
 17784                           
 17785                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17786  086A  0020               	movlb	0	; select bank0
 17787  086B  0863               	movf	_DelayOff,w
 17788  086C  3E02               	addlw	2
 17789  086D  0086               	movwf	6
 17790  086E  3001               	movlw	1	; select bank2/3
 17791  086F  0087               	movwf	7
 17792  0870  3000               	movlw	0
 17793  0871  3FC0               	movwi [0]fsr1
 17794  0872  3FC1               	movwi [1]fsr1
 17795                           
 17796                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17797  0873  3001               	movlw	1
 17798  0874  0021               	movlb	1	; select bank1
 17799  0875  00E3               	movwf	??_DlyOff_Main^(0+128)
 17800  0876  0020               	movlb	0	; select bank0
 17801  0877  0863               	movf	_DelayOff,w
 17802  0878  3E04               	addlw	4
 17803  0879  0086               	movwf	6
 17804  087A  3001               	movlw	1	; select bank2/3
 17805  087B  0087               	movwf	7
 17806  087C  0021               	movlb	1	; select bank1
 17807  087D  0863               	movf	??_DlyOff_Main^(0+128),w
 17808  087E  0781               	addwf	1,f
 17809                           
 17810                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17811  087F  0020               	movlb	0	; select bank0
 17812  0880  0863               	movf	_DelayOff,w
 17813  0881  3E04               	addlw	4
 17814  0882  0086               	movwf	6
 17815  0883  3001               	movlw	1	; select bank2/3
 17816  0884  0087               	movwf	7
 17817  0885  0A63               	incf	_DelayOff,w
 17818  0886  0084               	movwf	4
 17819  0887  3001               	movlw	1	; select bank2/3
 17820  0888  0085               	movwf	5
 17821  0889  0800               	movf	0,w
 17822  088A  0201               	subwf	1,w
 17823  088B  1C03               	skipc
 17824  088C  0008               	return
 17825                           
 17826                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17827  088D  0863               	movf	_DelayOff,w
 17828  088E  3E04               	addlw	4
 17829  088F  0086               	movwf	6
 17830  0890  3001               	movlw	1	; select bank2/3
 17831  0891  0087               	movwf	7
 17832  0892  0181               	clrf	1
 17833                           
 17834                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17835  0893  0863               	movf	_DelayOff,w
 17836  0894  0086               	movwf	6
 17837  0895  3001               	movlw	1	; select bank2/3
 17838  0896  0087               	movwf	7
 17839  0897  1081               	bcf	1,1
 17840                           
 17841                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17842  0898  0021               	movlb	1	; select bank1
 17843  0899  0865               	movf	DlyOff_Main@sw^(0+128),w
 17844  089A  319D  2514  3188   	fcall	_getDimmerLights_Status
 17845  089D  3A01               	xorlw	1
 17846  089E  1D03               	skipz
 17847  089F  28AA               	goto	l531
 17848                           
 17849                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17850  08A0  0021               	movlb	1	; select bank1
 17851  08A1  0865               	movf	DlyOff_Main@sw^(0+128),w
 17852  08A2  3191  21A2  3188   	fcall	_setDimmerLights_SwOn
 17853                           
 17854                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17855  08A5  0021               	movlb	1	; select bank1
 17856  08A6  0865               	movf	DlyOff_Main@sw^(0+128),w
 17857  08A7  3193  2312  3188   	fcall	_setDimmerLights_SwOff
 17858  08AA                     l531:	
 17859                           
 17860                           ;DelayOff_B1.c: 78: }
 17861                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17862  08AA  0021               	movlb	1	; select bank1
 17863  08AB  01E1               	clrf	setProductData@value^(0+128)
 17864  08AC  0865               	movf	DlyOff_Main@sw^(0+128),w
 17865  08AD  3E1A               	addlw	26
 17866  08AE  319C  24E7         	fcall	_setProductData
 17867  08B0  0008               	return
 17868  08B1                     __end_of_DlyOff_Main:	
 17869                           
 17870                           	psect	text125
 17871  1CE7                     __ptext125:	
 17872 ;; *************** function _setProductData *****************
 17873 ;; Defined at:
 17874 ;;		line 645 in file "../src/Main_B1.c"
 17875 ;; Parameters:    Size  Location     Type
 17876 ;;  address         1    wreg     unsigned char 
 17877 ;;  value           1    6[BANK1 ] unsigned char 
 17878 ;; Auto vars:     Size  Location     Type
 17879 ;;  address         1    7[BANK1 ] unsigned char 
 17880 ;; Return value:  Size  Location     Type
 17881 ;;		None               void
 17882 ;; Registers used:
 17883 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17884 ;; Tracked objects:
 17885 ;;		On entry : 0/0
 17886 ;;		On exit  : 0/0
 17887 ;;		Unchanged: 0/0
 17888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17889 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 17890 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 17891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17892 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
 17893 ;;Total ram usage:        3 bytes
 17894 ;; Hardware stack levels used:    1
 17895 ;; Hardware stack levels required when called:    5
 17896 ;; This function calls:
 17897 ;;		Nothing
 17898 ;; This function is called by:
 17899 ;;		_DlyOff_Main
 17900 ;;		_setDelayOff_GO
 17901 ;;		_setDimmerLights_OnOff
 17902 ;;		_setDimmerLights_Dimming
 17903 ;;		_setTemp_Main
 17904 ;;		_setLog_Code
 17905 ;;		_setControl_Lights_Table
 17906 ;;		_setRFSW_AdjControl
 17907 ;;		_setRF_DimmerLights
 17908 ;; This function uses a non-reentrant model
 17909 ;;
 17910                           
 17911                           
 17912                           ;psect for function _setProductData
 17913  1CE7                     _setProductData:	
 17914                           
 17915                           ;incstack = 0
 17916                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17917                           ;setProductData@address stored from wreg
 17918  1CE7  0021               	movlb	1	; select bank1
 17919  1CE8  00E2               	movwf	setProductData@address^(0+128)
 17920                           
 17921                           ;Main_B1.c: 646: _product.Data[address] = value;
 17922  1CE9  0861               	movf	setProductData@value^(0+128),w
 17923  1CEA  0020               	movlb	0	; select bank0
 17924  1CEB  00E2               	movwf	??_setProductData
 17925  1CEC  0021               	movlb	1	; select bank1
 17926  1CED  0862               	movf	setProductData@address^(0+128),w
 17927  1CEE  3E20               	addlw	__product& (0+255)
 17928  1CEF  0086               	movwf	6
 17929  1CF0  3002               	movlw	2	; select bank4/5
 17930  1CF1  0087               	movwf	7
 17931  1CF2  0020               	movlb	0	; select bank0
 17932  1CF3  0862               	movf	??_setProductData,w
 17933  1CF4  0081               	movwf	1
 17934  1CF5  0008               	return
 17935  1CF6                     __end_of_setProductData:	
 17936                           
 17937                           	psect	text126
 17938  11A2                     __ptext126:	
 17939 ;; *************** function _setDimmerLights_SwOn *****************
 17940 ;; Defined at:
 17941 ;;		line 653 in file "../src/Dimmer_B1.c"
 17942 ;; Parameters:    Size  Location     Type
 17943 ;;  sw              1    wreg     unsigned char 
 17944 ;; Auto vars:     Size  Location     Type
 17945 ;;  sw              1   19[BANK0 ] unsigned char 
 17946 ;;  idle            1   20[BANK0 ] unsigned char 
 17947 ;; Return value:  Size  Location     Type
 17948 ;;		None               void
 17949 ;; Registers used:
 17950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17951 ;; Tracked objects:
 17952 ;;		On entry : 0/0
 17953 ;;		On exit  : 0/0
 17954 ;;		Unchanged: 0/0
 17955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17960 ;;Total ram usage:        2 bytes
 17961 ;; Hardware stack levels used:    1
 17962 ;; Hardware stack levels required when called:    7
 17963 ;; This function calls:
 17964 ;;		_DimmerLights_SelectPointer
 17965 ;;		_setBuz
 17966 ;; This function is called by:
 17967 ;;		_DlyOff_Main
 17968 ;;		_setControl_Lights_Table
 17969 ;;		_setRFSW_Control
 17970 ;;		_setRFSW_AdjControl
 17971 ;;		_setSw_Main
 17972 ;; This function uses a non-reentrant model
 17973 ;;
 17974                           
 17975                           
 17976                           ;psect for function _setDimmerLights_SwOn
 17977  11A2                     _setDimmerLights_SwOn:	
 17978                           
 17979                           ;incstack = 0
 17980                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17981                           ;setDimmerLights_SwOn@sw stored from wreg
 17982  11A2  0020               	movlb	0	; select bank0
 17983  11A3  00B3               	movwf	setDimmerLights_SwOn@sw
 17984                           
 17985                           ;Dimmer_B1.c: 654: char idle = 0;
 17986  11A4  01B4               	clrf	setDimmerLights_SwOn@idle
 17987                           
 17988                           ;Dimmer_B1.c: 679: DimmerLights_SelectPointer(sw);
 17989  11A5  0833               	movf	setDimmerLights_SwOn@sw,w
 17990  11A6  319C  2437  3191   	fcall	_DimmerLights_SelectPointer
 17991                           
 17992                           ;Dimmer_B1.c: 680: if (idle == 0) {
 17993  11A9  0020               	movlb	0	; select bank0
 17994  11AA  08B4               	movf	setDimmerLights_SwOn@idle,f
 17995  11AB  1D03               	skipz
 17996  11AC  0008               	return
 17997                           
 17998                           ;Dimmer_B1.c: 681: DimmerLights->SwFlag = 1;
 17999  11AD  0864               	movf	_DimmerLights,w
 18000  11AE  0086               	movwf	6
 18001  11AF  3001               	movlw	1	; select bank2/3
 18002  11B0  0087               	movwf	7
 18003  11B1  1401               	bsf	1,0
 18004                           
 18005                           ;Dimmer_B1.c: 682: if (DimmerLights->Status == 0) {
 18006  11B2  0A64               	incf	_DimmerLights,w
 18007  11B3  0086               	movwf	6
 18008  11B4  3001               	movlw	1	; select bank2/3
 18009  11B5  0087               	movwf	7
 18010  11B6  1801               	btfsc	1,0
 18011  11B7  29C8               	goto	l10513
 18012                           
 18013                           ;Dimmer_B1.c: 683: DimmerLights->Status = 1;
 18014  11B8  0A64               	incf	_DimmerLights,w
 18015  11B9  0086               	movwf	6
 18016  11BA  3001               	movlw	1	; select bank2/3
 18017  11BB  0087               	movwf	7
 18018  11BC  1401               	bsf	1,0
 18019                           
 18020                           ;Dimmer_B1.c: 684: DimmerLights->Trigger = 1;
 18021  11BD  0864               	movf	_DimmerLights,w
 18022  11BE  0086               	movwf	6
 18023  11BF  3001               	movlw	1	; select bank2/3
 18024  11C0  0087               	movwf	7
 18025  11C1  1481               	bsf	1,1
 18026                           
 18027                           ;Dimmer_B1.c: 685: DimmerLights->Switch = 1;
 18028  11C2  0864               	movf	_DimmerLights,w
 18029  11C3  0086               	movwf	6
 18030  11C4  3001               	movlw	1	; select bank2/3
 18031  11C5  0087               	movwf	7
 18032  11C6  1501               	bsf	1,2
 18033                           
 18034                           ;Dimmer_B1.c: 686: } else {
 18035  11C7  29CD               	goto	l10515
 18036  11C8                     l10513:	
 18037                           
 18038                           ;Dimmer_B1.c: 687: DimmerLights->Status = 0;
 18039  11C8  0A64               	incf	_DimmerLights,w
 18040  11C9  0086               	movwf	6
 18041  11CA  3001               	movlw	1	; select bank2/3
 18042  11CB  0087               	movwf	7
 18043  11CC  1001               	bcf	1,0
 18044  11CD                     l10515:	
 18045                           
 18046                           ;Dimmer_B1.c: 688: }
 18047                           ;Dimmer_B1.c: 689: setBuz(1, 100);
 18048  11CD  3064               	movlw	100
 18049  11CE  00AF               	movwf	setBuz@time
 18050  11CF  3000               	movlw	0
 18051  11D0  00B0               	movwf	setBuz@time+1
 18052  11D1  3001               	movlw	1
 18053  11D2  3195  2550         	fcall	_setBuz
 18054  11D4  0008               	return
 18055  11D5                     __end_of_setDimmerLights_SwOn:	
 18056                           
 18057                           	psect	text127
 18058  1550                     __ptext127:	
 18059 ;; *************** function _setBuz *****************
 18060 ;; Defined at:
 18061 ;;		line 22 in file "../src/Buzzer_B1.c"
 18062 ;; Parameters:    Size  Location     Type
 18063 ;;  count           1    wreg     unsigned char 
 18064 ;;  time            2   15[BANK0 ] int 
 18065 ;; Auto vars:     Size  Location     Type
 18066 ;;  count           1   18[BANK0 ] unsigned char 
 18067 ;; Return value:  Size  Location     Type
 18068 ;;		None               void
 18069 ;; Registers used:
 18070 ;;		wreg, status,2, status,0, pclath, cstack
 18071 ;; Tracked objects:
 18072 ;;		On entry : 0/0
 18073 ;;		On exit  : 0/0
 18074 ;;		Unchanged: 0/0
 18075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18076 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18078 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;Total ram usage:        4 bytes
 18081 ;; Hardware stack levels used:    1
 18082 ;; Hardware stack levels required when called:    6
 18083 ;; This function calls:
 18084 ;;		___awdiv
 18085 ;; This function is called by:
 18086 ;;		_setDimmerLights_SwOn
 18087 ;;		_setDimmerLights_Dimming
 18088 ;;		_my_MainTimer
 18089 ;;		_Exception_Main
 18090 ;;		_setTemp_Main
 18091 ;;		_setLog_Code
 18092 ;;		_setRFSW_Control
 18093 ;;		_setSw_Main
 18094 ;; This function uses a non-reentrant model
 18095 ;;
 18096                           
 18097                           
 18098                           ;psect for function _setBuz
 18099  1550                     _setBuz:	
 18100                           
 18101                           ;incstack = 0
 18102                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18103                           ;setBuz@count stored from wreg
 18104  1550  0020               	movlb	0	; select bank0
 18105  1551  00B2               	movwf	setBuz@count
 18106                           
 18107                           ;Buzzer_B1.c: 23: time /= 20;
 18108  1552  3014               	movlw	20
 18109  1553  00A6               	movwf	___awdiv@divisor
 18110  1554  3000               	movlw	0
 18111  1555  00A7               	movwf	___awdiv@divisor+1
 18112  1556  0830               	movf	setBuz@time+1,w
 18113  1557  01A9               	clrf	___awdiv@dividend+1
 18114  1558  07A9               	addwf	___awdiv@dividend+1,f
 18115  1559  082F               	movf	setBuz@time,w
 18116  155A  01A8               	clrf	___awdiv@dividend
 18117  155B  07A8               	addwf	___awdiv@dividend,f
 18118  155C  3194  24A7  3195   	fcall	___awdiv
 18119  155F  0020               	movlb	0	; select bank0
 18120  1560  0827               	movf	?___awdiv+1,w
 18121  1561  01B0               	clrf	setBuz@time+1
 18122  1562  07B0               	addwf	setBuz@time+1,f
 18123  1563  0826               	movf	?___awdiv,w
 18124  1564  01AF               	clrf	setBuz@time
 18125  1565  07AF               	addwf	setBuz@time,f
 18126                           
 18127                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18128  1566  0021               	movlb	1	; select bank1
 18129  1567  1C2E               	btfss	_Buz1^(0+128),0
 18130  1568  0008               	return
 18131                           
 18132                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18133  1569  18AE               	btfsc	_Buz1^(0+128),1
 18134  156A  2D81               	goto	l86
 18135                           
 18136                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18137  156B  14AE               	bsf	_Buz1^(0+128),1
 18138                           
 18139                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18140  156C  01AF               	clrf	(_Buz1^(0+128)+1)
 18141  156D  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18142                           
 18143                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18144  156E  0020               	movlb	0	; select bank0
 18145  156F  0832               	movf	setBuz@count,w
 18146  1570  00B1               	movwf	??_setBuz
 18147  1571  0831               	movf	??_setBuz,w
 18148  1572  0021               	movlb	1	; select bank1
 18149  1573  00B1               	movwf	(_Buz1^(0+128)+3)
 18150                           
 18151                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18152  1574  0020               	movlb	0	; select bank0
 18153  1575  0830               	movf	setBuz@time+1,w
 18154  1576  0021               	movlb	1	; select bank1
 18155  1577  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18156  1578  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18157  1579  0020               	movlb	0	; select bank0
 18158  157A  082F               	movf	setBuz@time,w
 18159  157B  0021               	movlb	1	; select bank1
 18160  157C  01B4               	clrf	(_Buz1^(0+128)+6)
 18161  157D  07B4               	addwf	(_Buz1^(0+128)+6),f
 18162                           
 18163                           ;Buzzer_B1.c: 30: RB3 = 1;
 18164  157E  0020               	movlb	0	; select bank0
 18165  157F  158D               	bsf	13,3	;volatile
 18166                           
 18167                           ;Buzzer_B1.c: 31: } else {
 18168  1580  0008               	return
 18169  1581                     l86:	
 18170                           
 18171                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18172  1581  19AE               	btfsc	_Buz1^(0+128),3
 18173  1582  2D95               	goto	l88
 18174                           
 18175                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18176  1583  15AE               	bsf	_Buz1^(0+128),3
 18177                           
 18178                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18179  1584  0020               	movlb	0	; select bank0
 18180  1585  0832               	movf	setBuz@count,w
 18181  1586  00B1               	movwf	??_setBuz
 18182  1587  0831               	movf	??_setBuz,w
 18183  1588  0021               	movlb	1	; select bank1
 18184  1589  00B2               	movwf	(_Buz1^(0+128)+4)
 18185                           
 18186                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18187  158A  0020               	movlb	0	; select bank0
 18188  158B  0830               	movf	setBuz@time+1,w
 18189  158C  0021               	movlb	1	; select bank1
 18190  158D  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 18191  158E  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 18192  158F  0020               	movlb	0	; select bank0
 18193  1590  082F               	movf	setBuz@time,w
 18194  1591  0021               	movlb	1	; select bank1
 18195  1592  01B6               	clrf	(_Buz1^(0+128)+8)
 18196  1593  07B6               	addwf	(_Buz1^(0+128)+8),f
 18197                           
 18198                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18199  1594  0008               	return
 18200  1595                     l88:	
 18201  1595  1A2E               	btfsc	_Buz1^(0+128),4
 18202  1596  0008               	return
 18203                           
 18204                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18205  1597  162E               	bsf	_Buz1^(0+128),4
 18206                           
 18207                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18208  1598  0020               	movlb	0	; select bank0
 18209  1599  0832               	movf	setBuz@count,w
 18210  159A  00B1               	movwf	??_setBuz
 18211  159B  0831               	movf	??_setBuz,w
 18212  159C  0021               	movlb	1	; select bank1
 18213  159D  00B3               	movwf	(_Buz1^(0+128)+5)
 18214                           
 18215                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18216  159E  0020               	movlb	0	; select bank0
 18217  159F  0830               	movf	setBuz@time+1,w
 18218  15A0  0021               	movlb	1	; select bank1
 18219  15A1  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 18220  15A2  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 18221  15A3  0020               	movlb	0	; select bank0
 18222  15A4  082F               	movf	setBuz@time,w
 18223  15A5  0021               	movlb	1	; select bank1
 18224  15A6  01B8               	clrf	(_Buz1^(0+128)+10)
 18225  15A7  07B8               	addwf	(_Buz1^(0+128)+10),f
 18226  15A8  0008               	return
 18227  15A9                     __end_of_setBuz:	
 18228                           
 18229                           	psect	text128
 18230  14A7                     __ptext128:	
 18231 ;; *************** function ___awdiv *****************
 18232 ;; Defined at:
 18233 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18234 ;; Parameters:    Size  Location     Type
 18235 ;;  divisor         2    6[BANK0 ] int 
 18236 ;;  dividend        2    8[BANK0 ] int 
 18237 ;; Auto vars:     Size  Location     Type
 18238 ;;  quotient        2   13[BANK0 ] int 
 18239 ;;  sign            1   12[BANK0 ] unsigned char 
 18240 ;;  counter         1   11[BANK0 ] unsigned char 
 18241 ;; Return value:  Size  Location     Type
 18242 ;;                  2    6[BANK0 ] int 
 18243 ;; Registers used:
 18244 ;;		wreg, status,2, status,0
 18245 ;; Tracked objects:
 18246 ;;		On entry : 0/0
 18247 ;;		On exit  : 0/0
 18248 ;;		Unchanged: 0/0
 18249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18250 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18251 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18252 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18253 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18254 ;;Total ram usage:        9 bytes
 18255 ;; Hardware stack levels used:    1
 18256 ;; Hardware stack levels required when called:    5
 18257 ;; This function calls:
 18258 ;;		Nothing
 18259 ;; This function is called by:
 18260 ;;		_setBuz
 18261 ;; This function uses a non-reentrant model
 18262 ;;
 18263                           
 18264                           
 18265                           ;psect for function ___awdiv
 18266  14A7                     ___awdiv:	
 18267                           
 18268                           ;incstack = 0
 18269                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18270  14A7  0020               	movlb	0	; select bank0
 18271  14A8  01AC               	clrf	___awdiv@sign
 18272  14A9  1FA7               	btfss	___awdiv@divisor+1,7
 18273  14AA  2CB2               	goto	l10151
 18274  14AB  09A6               	comf	___awdiv@divisor,f
 18275  14AC  09A7               	comf	___awdiv@divisor+1,f
 18276  14AD  0AA6               	incf	___awdiv@divisor,f
 18277  14AE  1903               	skipnz
 18278  14AF  0AA7               	incf	___awdiv@divisor+1,f
 18279  14B0  01AC               	clrf	___awdiv@sign
 18280  14B1  0AAC               	incf	___awdiv@sign,f
 18281  14B2                     l10151:	
 18282  14B2  1FA9               	btfss	___awdiv@dividend+1,7
 18283  14B3  2CBD               	goto	l10157
 18284  14B4  09A8               	comf	___awdiv@dividend,f
 18285  14B5  09A9               	comf	___awdiv@dividend+1,f
 18286  14B6  0AA8               	incf	___awdiv@dividend,f
 18287  14B7  1903               	skipnz
 18288  14B8  0AA9               	incf	___awdiv@dividend+1,f
 18289  14B9  3001               	movlw	1
 18290  14BA  00AA               	movwf	??___awdiv
 18291  14BB  082A               	movf	??___awdiv,w
 18292  14BC  06AC               	xorwf	___awdiv@sign,f
 18293  14BD                     l10157:	
 18294  14BD  01AD               	clrf	___awdiv@quotient
 18295  14BE  01AE               	clrf	___awdiv@quotient+1
 18296  14BF  0827               	movf	___awdiv@divisor+1,w
 18297  14C0  0426               	iorwf	___awdiv@divisor,w
 18298  14C1  1903               	skipnz
 18299  14C2  2CEC               	goto	l10179
 18300  14C3  01AB               	clrf	___awdiv@counter
 18301  14C4  0AAB               	incf	___awdiv@counter,f
 18302  14C5                     l10167:	
 18303  14C5  1BA7               	btfsc	___awdiv@divisor+1,7
 18304  14C6  2CD1               	goto	l10169
 18305  14C7  3001               	movlw	1
 18306  14C8                     u11715:	
 18307  14C8  35A6               	lslf	___awdiv@divisor,f
 18308  14C9  0DA7               	rlf	___awdiv@divisor+1,f
 18309  14CA  0B89               	decfsz	9,f
 18310  14CB  2CC8               	goto	u11715
 18311  14CC  3001               	movlw	1
 18312  14CD  00AA               	movwf	??___awdiv
 18313  14CE  082A               	movf	??___awdiv,w
 18314  14CF  07AB               	addwf	___awdiv@counter,f
 18315  14D0  2CC5               	goto	l10167
 18316  14D1                     l10169:	
 18317  14D1  3001               	movlw	1
 18318  14D2                     u11735:	
 18319  14D2  35AD               	lslf	___awdiv@quotient,f
 18320  14D3  0DAE               	rlf	___awdiv@quotient+1,f
 18321  14D4  0B89               	decfsz	9,f
 18322  14D5  2CD2               	goto	u11735
 18323  14D6  0827               	movf	___awdiv@divisor+1,w
 18324  14D7  0229               	subwf	___awdiv@dividend+1,w
 18325  14D8  1D03               	skipz
 18326  14D9  2CDC               	goto	u11745
 18327  14DA  0826               	movf	___awdiv@divisor,w
 18328  14DB  0228               	subwf	___awdiv@dividend,w
 18329  14DC                     u11745:	
 18330  14DC  1C03               	skipc
 18331  14DD  2CE3               	goto	l10175
 18332  14DE  0826               	movf	___awdiv@divisor,w
 18333  14DF  02A8               	subwf	___awdiv@dividend,f
 18334  14E0  0827               	movf	___awdiv@divisor+1,w
 18335  14E1  3BA9               	subwfb	___awdiv@dividend+1,f
 18336  14E2  142D               	bsf	___awdiv@quotient,0
 18337  14E3                     l10175:	
 18338  14E3  3001               	movlw	1
 18339  14E4                     u11755:	
 18340  14E4  36A7               	lsrf	___awdiv@divisor+1,f
 18341  14E5  0CA6               	rrf	___awdiv@divisor,f
 18342  14E6  0B89               	decfsz	9,f
 18343  14E7  2CE4               	goto	u11755
 18344  14E8  3001               	movlw	1
 18345  14E9  02AB               	subwf	___awdiv@counter,f
 18346  14EA  1D03               	btfss	3,2
 18347  14EB  2CD1               	goto	l10169
 18348  14EC                     l10179:	
 18349  14EC  082C               	movf	___awdiv@sign,w
 18350  14ED  1903               	btfsc	3,2
 18351  14EE  2CF4               	goto	l10183
 18352  14EF  09AD               	comf	___awdiv@quotient,f
 18353  14F0  09AE               	comf	___awdiv@quotient+1,f
 18354  14F1  0AAD               	incf	___awdiv@quotient,f
 18355  14F2  1903               	skipnz
 18356  14F3  0AAE               	incf	___awdiv@quotient+1,f
 18357  14F4                     l10183:	
 18358  14F4  082E               	movf	___awdiv@quotient+1,w
 18359  14F5  01A7               	clrf	?___awdiv+1
 18360  14F6  07A7               	addwf	?___awdiv+1,f
 18361  14F7  082D               	movf	___awdiv@quotient,w
 18362  14F8  01A6               	clrf	?___awdiv
 18363  14F9  07A6               	addwf	?___awdiv,f
 18364  14FA  0008               	return
 18365  14FB                     __end_of___awdiv:	
 18366                           
 18367                           	psect	text129
 18368  1312                     __ptext129:	
 18369 ;; *************** function _setDimmerLights_SwOff *****************
 18370 ;; Defined at:
 18371 ;;		line 694 in file "../src/Dimmer_B1.c"
 18372 ;; Parameters:    Size  Location     Type
 18373 ;;  sw              1    wreg     unsigned char 
 18374 ;; Auto vars:     Size  Location     Type
 18375 ;;  sw              1    8[BANK0 ] unsigned char 
 18376 ;; Return value:  Size  Location     Type
 18377 ;;		None               void
 18378 ;; Registers used:
 18379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18380 ;; Tracked objects:
 18381 ;;		On entry : 0/0
 18382 ;;		On exit  : 0/0
 18383 ;;		Unchanged: 0/0
 18384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18386 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18388 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18389 ;;Total ram usage:        1 bytes
 18390 ;; Hardware stack levels used:    1
 18391 ;; Hardware stack levels required when called:    6
 18392 ;; This function calls:
 18393 ;;		_DimmerLights_SelectPointer
 18394 ;; This function is called by:
 18395 ;;		_DlyOff_Main
 18396 ;;		_Exception_Main
 18397 ;;		_setControl_Lights_Table
 18398 ;;		_setRFSW_Control
 18399 ;;		_setRFSW_AdjControl
 18400 ;;		_setSw_Main
 18401 ;; This function uses a non-reentrant model
 18402 ;;
 18403                           
 18404                           
 18405                           ;psect for function _setDimmerLights_SwOff
 18406  1312                     _setDimmerLights_SwOff:	
 18407                           
 18408                           ;incstack = 0
 18409                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18410                           ;setDimmerLights_SwOff@sw stored from wreg
 18411  1312  0020               	movlb	0	; select bank0
 18412  1313  00A8               	movwf	setDimmerLights_SwOff@sw
 18413                           
 18414                           ;Dimmer_B1.c: 695: DimmerLights_SelectPointer(sw);
 18415  1314  0828               	movf	setDimmerLights_SwOff@sw,w
 18416  1315  319C  2437  3193   	fcall	_DimmerLights_SelectPointer
 18417                           
 18418                           ;Dimmer_B1.c: 697: if (DimmerLights->SwFlag == 1) {
 18419  1318  0020               	movlb	0	; select bank0
 18420  1319  0864               	movf	_DimmerLights,w
 18421  131A  0086               	movwf	6
 18422  131B  3001               	movlw	1	; select bank2/3
 18423  131C  0087               	movwf	7
 18424  131D  1C01               	btfss	1,0
 18425  131E  0008               	return
 18426                           
 18427                           ;Dimmer_B1.c: 698: DimmerLights->SwFlag = 0;
 18428  131F  0864               	movf	_DimmerLights,w
 18429  1320  0086               	movwf	6
 18430  1321  3001               	movlw	1	; select bank2/3
 18431  1322  0087               	movwf	7
 18432  1323  1001               	bcf	1,0
 18433                           
 18434                           ;Dimmer_B1.c: 699: if (DimmerLights->Status == 1) {
 18435  1324  0A64               	incf	_DimmerLights,w
 18436  1325  0086               	movwf	6
 18437  1326  3001               	movlw	1	; select bank2/3
 18438  1327  0087               	movwf	7
 18439  1328  1C01               	btfss	1,0
 18440  1329  2B40               	goto	l10527
 18441                           
 18442                           ;Dimmer_B1.c: 700: if (DimmerLights->DimmingSwFlag == 1) {
 18443  132A  0864               	movf	_DimmerLights,w
 18444  132B  0086               	movwf	6
 18445  132C  3001               	movlw	1	; select bank2/3
 18446  132D  0087               	movwf	7
 18447  132E  1D81               	btfss	1,3
 18448  132F  0008               	return
 18449                           
 18450                           ;Dimmer_B1.c: 701: DimmerLights->DimmingSwFlag = 0;
 18451  1330  0864               	movf	_DimmerLights,w
 18452  1331  0086               	movwf	6
 18453  1332  3001               	movlw	1	; select bank2/3
 18454  1333  0087               	movwf	7
 18455  1334  1181               	bcf	1,3
 18456                           
 18457                           ;Dimmer_B1.c: 703: DimmerLights->DimmingTrigger = 1;
 18458  1335  0864               	movf	_DimmerLights,w
 18459  1336  0086               	movwf	6
 18460  1337  3001               	movlw	1	; select bank2/3
 18461  1338  0087               	movwf	7
 18462  1339  1601               	bsf	1,4
 18463                           
 18464                           ;Dimmer_B1.c: 704: DimmerLights->DimmingSwitch = 0;
 18465  133A  0864               	movf	_DimmerLights,w
 18466  133B  0086               	movwf	6
 18467  133C  3001               	movlw	1	; select bank2/3
 18468  133D  0087               	movwf	7
 18469  133E  1281               	bcf	1,5
 18470                           
 18471                           ;Dimmer_B1.c: 705: }
 18472                           ;Dimmer_B1.c: 706: } else {
 18473  133F  0008               	return
 18474  1340                     l10527:	
 18475                           
 18476                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = 1;
 18477  1340  0864               	movf	_DimmerLights,w
 18478  1341  0086               	movwf	6
 18479  1342  3001               	movlw	1	; select bank2/3
 18480  1343  0087               	movwf	7
 18481  1344  1481               	bsf	1,1
 18482                           
 18483                           ;Dimmer_B1.c: 709: DimmerLights->Switch = 0;
 18484  1345  0864               	movf	_DimmerLights,w
 18485  1346  0086               	movwf	6
 18486  1347  3001               	movlw	1	; select bank2/3
 18487  1348  0087               	movwf	7
 18488  1349  1101               	bcf	1,2
 18489  134A  0008               	return
 18490  134B                     __end_of_setDimmerLights_SwOff:	
 18491                           
 18492                           	psect	text130
 18493  1D14                     __ptext130:	
 18494 ;; *************** function _getDimmerLights_Status *****************
 18495 ;; Defined at:
 18496 ;;		line 1006 in file "../src/Dimmer_B1.c"
 18497 ;; Parameters:    Size  Location     Type
 18498 ;;  lights          1    wreg     unsigned char 
 18499 ;; Auto vars:     Size  Location     Type
 18500 ;;  lights          1    8[BANK0 ] unsigned char 
 18501 ;;  status          1    9[BANK0 ] unsigned char 
 18502 ;; Return value:  Size  Location     Type
 18503 ;;                  1    wreg      unsigned char 
 18504 ;; Registers used:
 18505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18506 ;; Tracked objects:
 18507 ;;		On entry : 0/0
 18508 ;;		On exit  : 0/0
 18509 ;;		Unchanged: 0/0
 18510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18512 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18515 ;;Total ram usage:        2 bytes
 18516 ;; Hardware stack levels used:    1
 18517 ;; Hardware stack levels required when called:    6
 18518 ;; This function calls:
 18519 ;;		_DimmerLights_SelectPointer
 18520 ;; This function is called by:
 18521 ;;		_DlyOff_Main
 18522 ;;		_Exception_Main
 18523 ;;		_setControl_Lights_Table
 18524 ;;		_setRFSW_Control
 18525 ;;		_setRFSW_AdjControl
 18526 ;; This function uses a non-reentrant model
 18527 ;;
 18528                           
 18529                           
 18530                           ;psect for function _getDimmerLights_Status
 18531  1D14                     _getDimmerLights_Status:	
 18532                           
 18533                           ;incstack = 0
 18534                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18535                           ;getDimmerLights_Status@lights stored from wreg
 18536  1D14  0020               	movlb	0	; select bank0
 18537  1D15  00A8               	movwf	getDimmerLights_Status@lights
 18538                           
 18539                           ;Dimmer_B1.c: 1007: DimmerLights_SelectPointer(lights);
 18540  1D16  0828               	movf	getDimmerLights_Status@lights,w
 18541  1D17  319C  2437         	fcall	_DimmerLights_SelectPointer
 18542                           
 18543                           ;Dimmer_B1.c: 1008: char status = DimmerLights->Status == 1 ? 1 : 0;
 18544  1D19  0020               	movlb	0	; select bank0
 18545  1D1A  0A64               	incf	_DimmerLights,w
 18546  1D1B  0086               	movwf	6
 18547  1D1C  3001               	movlw	1	; select bank2/3
 18548  1D1D  0087               	movwf	7
 18549  1D1E  3000               	movlw	0
 18550  1D1F  1801               	btfsc	1,0
 18551  1D20  3001               	movlw	1
 18552  1D21  00A9               	movwf	getDimmerLights_Status@status
 18553                           
 18554                           ;Dimmer_B1.c: 1009: return status;
 18555  1D22  0829               	movf	getDimmerLights_Status@status,w
 18556  1D23  0008               	return
 18557  1D24                     __end_of_getDimmerLights_Status:	
 18558                           
 18559                           	psect	text131
 18560  1C37                     __ptext131:	
 18561 ;; *************** function _DimmerLights_SelectPointer *****************
 18562 ;; Defined at:
 18563 ;;		line 576 in file "../src/Dimmer_B1.c"
 18564 ;; Parameters:    Size  Location     Type
 18565 ;;  lights          1    wreg     unsigned char 
 18566 ;; Auto vars:     Size  Location     Type
 18567 ;;  lights          1    7[BANK0 ] unsigned char 
 18568 ;; Return value:  Size  Location     Type
 18569 ;;		None               void
 18570 ;; Registers used:
 18571 ;;		wreg
 18572 ;; Tracked objects:
 18573 ;;		On entry : 0/0
 18574 ;;		On exit  : 0/0
 18575 ;;		Unchanged: 0/0
 18576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18578 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18581 ;;Total ram usage:        2 bytes
 18582 ;; Hardware stack levels used:    1
 18583 ;; Hardware stack levels required when called:    5
 18584 ;; This function calls:
 18585 ;;		Nothing
 18586 ;; This function is called by:
 18587 ;;		_setDimmerLights_SwOn
 18588 ;;		_setDimmerLights_SwOff
 18589 ;;		_setDimmerLights_DimmingOn
 18590 ;;		_setDimmerLights_Main
 18591 ;;		_getDimmerLights_Status
 18592 ;;		_setDimmerLights_DimmingRun
 18593 ;;		_setDimmerLights_Status
 18594 ;; This function uses a non-reentrant model
 18595 ;;
 18596                           
 18597                           
 18598                           ;psect for function _DimmerLights_SelectPointer
 18599  1C37                     _DimmerLights_SelectPointer:	
 18600                           
 18601                           ;incstack = 0
 18602                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18603                           ;DimmerLights_SelectPointer@lights stored from wreg
 18604  1C37  0020               	movlb	0	; select bank0
 18605  1C38  00A7               	movwf	DimmerLights_SelectPointer@lights
 18606                           
 18607                           ;Dimmer_B1.c: 578: if (lights == 1) {
 18608  1C39  0827               	movf	DimmerLights_SelectPointer@lights,w
 18609  1C3A  3A01               	xorlw	1
 18610  1C3B  1D03               	skipz
 18611  1C3C  0008               	return
 18612                           
 18613                           ;Dimmer_B1.c: 579: DimmerLights = &DimmerLights1;
 18614  1C3D  305D               	movlw	_DimmerLights1& (0+255)
 18615  1C3E  00A6               	movwf	??_DimmerLights_SelectPointer
 18616  1C3F  0826               	movf	??_DimmerLights_SelectPointer,w
 18617  1C40  00E4               	movwf	_DimmerLights
 18618  1C41  0008               	return
 18619  1C42                     __end_of_DimmerLights_SelectPointer:	
 18620                           
 18621                           	psect	text132
 18622  1B91                     __ptext132:	
 18623 ;; *************** function _DelayOff_Initialization *****************
 18624 ;; Defined at:
 18625 ;;		line 26 in file "../src/DelayOff_B1.c"
 18626 ;; Parameters:    Size  Location     Type
 18627 ;;		None
 18628 ;; Auto vars:     Size  Location     Type
 18629 ;;		None
 18630 ;; Return value:  Size  Location     Type
 18631 ;;		None               void
 18632 ;; Registers used:
 18633 ;;		wreg, status,2, status,0, pclath, cstack
 18634 ;; Tracked objects:
 18635 ;;		On entry : 0/0
 18636 ;;		On exit  : 0/0
 18637 ;;		Unchanged: 0/0
 18638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18643 ;;Total ram usage:        0 bytes
 18644 ;; Hardware stack levels used:    1
 18645 ;; Hardware stack levels required when called:    7
 18646 ;; This function calls:
 18647 ;;		_DlyOff_Initialization
 18648 ;; This function is called by:
 18649 ;;		_main
 18650 ;; This function uses a non-reentrant model
 18651 ;;
 18652                           
 18653                           
 18654                           ;psect for function _DelayOff_Initialization
 18655  1B91                     _DelayOff_Initialization:	
 18656                           
 18657                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18658                           
 18659                           ;incstack = 0
 18660                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18661  1B91  3001               	movlw	1
 18662  1B92  319B  23BE         	fcall	_DlyOff_Initialization
 18663  1B94  0008               	return
 18664  1B95                     __end_of_DelayOff_Initialization:	
 18665                           
 18666                           	psect	text133
 18667  1BBE                     __ptext133:	
 18668 ;; *************** function _DlyOff_Initialization *****************
 18669 ;; Defined at:
 18670 ;;		line 56 in file "../src/DelayOff_B1.c"
 18671 ;; Parameters:    Size  Location     Type
 18672 ;;  sw              1    wreg     unsigned char 
 18673 ;; Auto vars:     Size  Location     Type
 18674 ;;  sw              1    8[BANK0 ] unsigned char 
 18675 ;; Return value:  Size  Location     Type
 18676 ;;		None               void
 18677 ;; Registers used:
 18678 ;;		wreg, status,2, status,0, pclath, cstack
 18679 ;; Tracked objects:
 18680 ;;		On entry : 0/0
 18681 ;;		On exit  : 0/0
 18682 ;;		Unchanged: 0/0
 18683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18687 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18688 ;;Total ram usage:        1 bytes
 18689 ;; Hardware stack levels used:    1
 18690 ;; Hardware stack levels required when called:    6
 18691 ;; This function calls:
 18692 ;;		_DelayOffPointSelect
 18693 ;; This function is called by:
 18694 ;;		_DelayOff_Initialization
 18695 ;; This function uses a non-reentrant model
 18696 ;;
 18697                           
 18698                           
 18699                           ;psect for function _DlyOff_Initialization
 18700  1BBE                     _DlyOff_Initialization:	
 18701                           
 18702                           ;incstack = 0
 18703                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18704                           ;DlyOff_Initialization@sw stored from wreg
 18705  1BBE  0020               	movlb	0	; select bank0
 18706  1BBF  00A8               	movwf	DlyOff_Initialization@sw
 18707                           
 18708                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18709  1BC0  0828               	movf	DlyOff_Initialization@sw,w
 18710  1BC1  319C  242C         	fcall	_DelayOffPointSelect
 18711  1BC3  0008               	return
 18712  1BC4                     __end_of_DlyOff_Initialization:	
 18713                           
 18714                           	psect	text134
 18715  1C2C                     __ptext134:	
 18716 ;; *************** function _DelayOffPointSelect *****************
 18717 ;; Defined at:
 18718 ;;		line 7 in file "../src/DelayOff_B1.c"
 18719 ;; Parameters:    Size  Location     Type
 18720 ;;  sw              1    wreg     unsigned char 
 18721 ;; Auto vars:     Size  Location     Type
 18722 ;;  sw              1    7[BANK0 ] unsigned char 
 18723 ;; Return value:  Size  Location     Type
 18724 ;;		None               void
 18725 ;; Registers used:
 18726 ;;		wreg
 18727 ;; Tracked objects:
 18728 ;;		On entry : 0/0
 18729 ;;		On exit  : 0/0
 18730 ;;		Unchanged: 0/0
 18731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18736 ;;Total ram usage:        2 bytes
 18737 ;; Hardware stack levels used:    1
 18738 ;; Hardware stack levels required when called:    5
 18739 ;; This function calls:
 18740 ;;		Nothing
 18741 ;; This function is called by:
 18742 ;;		_DlyOff_Initialization
 18743 ;;		_DlyOff_Main
 18744 ;;		_setDelayOff_GO
 18745 ;;		_getDelayOff_GO
 18746 ;; This function uses a non-reentrant model
 18747 ;;
 18748                           
 18749                           
 18750                           ;psect for function _DelayOffPointSelect
 18751  1C2C                     _DelayOffPointSelect:	
 18752                           
 18753                           ;incstack = 0
 18754                           ; Regs used in _DelayOffPointSelect: [wreg]
 18755                           ;DelayOffPointSelect@sw stored from wreg
 18756  1C2C  0020               	movlb	0	; select bank0
 18757  1C2D  00A7               	movwf	DelayOffPointSelect@sw
 18758                           
 18759                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18760  1C2E  0827               	movf	DelayOffPointSelect@sw,w
 18761  1C2F  3A01               	xorlw	1
 18762  1C30  1D03               	skipz
 18763  1C31  0008               	return
 18764                           
 18765                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18766  1C32  3065               	movlw	_DlySw1& (0+255)
 18767  1C33  00A6               	movwf	??_DelayOffPointSelect
 18768  1C34  0826               	movf	??_DelayOffPointSelect,w
 18769  1C35  00E3               	movwf	_DelayOff
 18770  1C36  0008               	return
 18771  1C37                     __end_of_DelayOffPointSelect:	
 18772                           
 18773                           	psect	text135
 18774  140B                     __ptext135:	
 18775 ;; *************** function _Buzzer_Main *****************
 18776 ;; Defined at:
 18777 ;;		line 46 in file "../src/Buzzer_B1.c"
 18778 ;; Parameters:    Size  Location     Type
 18779 ;;		None
 18780 ;; Auto vars:     Size  Location     Type
 18781 ;;		None
 18782 ;; Return value:  Size  Location     Type
 18783 ;;		None               void
 18784 ;; Registers used:
 18785 ;;		wreg, status,2, status,0
 18786 ;; Tracked objects:
 18787 ;;		On entry : 0/0
 18788 ;;		On exit  : 0/0
 18789 ;;		Unchanged: 0/0
 18790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18794 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18795 ;;Total ram usage:        1 bytes
 18796 ;; Hardware stack levels used:    1
 18797 ;; Hardware stack levels required when called:    5
 18798 ;; This function calls:
 18799 ;;		Nothing
 18800 ;; This function is called by:
 18801 ;;		_main
 18802 ;; This function uses a non-reentrant model
 18803 ;;
 18804                           
 18805                           
 18806                           ;psect for function _Buzzer_Main
 18807  140B                     _Buzzer_Main:	
 18808                           
 18809                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18810                           
 18811                           ;incstack = 0
 18812                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18813  140B  0021               	movlb	1	; select bank1
 18814  140C  1CAE               	btfss	_Buz1^(0+128),1
 18815  140D  0008               	return
 18816                           
 18817                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18818  140E  3001               	movlw	1
 18819  140F  07AF               	addwf	(_Buz1^(0+128)+1),f
 18820  1410  3000               	movlw	0
 18821  1411  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18822                           
 18823                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18824  1412  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18825  1413  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18826  1414  1D03               	skipz
 18827  1415  2C18               	goto	u7435
 18828  1416  0834               	movf	(_Buz1^(0+128)+6),w
 18829  1417  022F               	subwf	(_Buz1^(0+128)+1),w
 18830  1418                     u7435:	
 18831  1418  1C03               	skipc
 18832  1419  0008               	return
 18833                           
 18834                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18835  141A  01AF               	clrf	(_Buz1^(0+128)+1)
 18836  141B  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18837                           
 18838                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18839  141C  12AE               	bcf	_Buz1^(0+128),5
 18840  141D  0020               	movlb	0	; select bank0
 18841  141E  1D8D               	btfss	13,3	;volatile
 18842  141F  2C22               	goto	l7545
 18843  1420  0021               	movlb	1	; select bank1
 18844  1421  16AE               	bsf	_Buz1^(0+128),5
 18845  1422                     l7545:	
 18846                           
 18847                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18848  1422  0021               	movlb	1	; select bank1
 18849  1423  1AAE               	btfsc	_Buz1^(0+128),5
 18850  1424  2C4E               	goto	l96
 18851                           
 18852                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18853  1425  08B1               	movf	(_Buz1^(0+128)+3),f
 18854  1426  1D03               	skipz
 18855  1427  2C4A               	goto	l97
 18856                           
 18857                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18858  1428  1DAE               	btfss	_Buz1^(0+128),3
 18859  1429  2C38               	goto	l98
 18860                           
 18861                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18862  142A  11AE               	bcf	_Buz1^(0+128),3
 18863                           
 18864                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18865  142B  0832               	movf	(_Buz1^(0+128)+4),w
 18866  142C  0020               	movlb	0	; select bank0
 18867  142D  00A6               	movwf	??_Buzzer_Main
 18868  142E  0826               	movf	??_Buzzer_Main,w
 18869  142F  0021               	movlb	1	; select bank1
 18870  1430  00B1               	movwf	(_Buz1^(0+128)+3)
 18871                           
 18872                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18873  1431  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18874  1432  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18875  1433  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18876  1434  0836               	movf	(_Buz1^(0+128)+8),w
 18877  1435  01B4               	clrf	(_Buz1^(0+128)+6)
 18878  1436  07B4               	addwf	(_Buz1^(0+128)+6),f
 18879                           
 18880                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18881  1437  0008               	return
 18882  1438                     l98:	
 18883  1438  1E2E               	btfss	_Buz1^(0+128),4
 18884  1439  2C48               	goto	l100
 18885                           
 18886                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18887  143A  122E               	bcf	_Buz1^(0+128),4
 18888                           
 18889                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18890  143B  0833               	movf	(_Buz1^(0+128)+5),w
 18891  143C  0020               	movlb	0	; select bank0
 18892  143D  00A6               	movwf	??_Buzzer_Main
 18893  143E  0826               	movf	??_Buzzer_Main,w
 18894  143F  0021               	movlb	1	; select bank1
 18895  1440  00B1               	movwf	(_Buz1^(0+128)+3)
 18896                           
 18897                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18898  1441  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18899  1442  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18900  1443  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18901  1444  0838               	movf	(_Buz1^(0+128)+10),w
 18902  1445  01B4               	clrf	(_Buz1^(0+128)+6)
 18903  1446  07B4               	addwf	(_Buz1^(0+128)+6),f
 18904                           
 18905                           ;Buzzer_B1.c: 62: } else {
 18906  1447  0008               	return
 18907  1448                     l100:	
 18908                           
 18909                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18910  1448  10AE               	bcf	_Buz1^(0+128),1
 18911                           
 18912                           ;Buzzer_B1.c: 64: }
 18913                           ;Buzzer_B1.c: 65: } else {
 18914  1449  0008               	return
 18915  144A                     l97:	
 18916                           
 18917                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18918  144A  16AE               	bsf	_Buz1^(0+128),5
 18919                           
 18920                           ;Buzzer_B1.c: 68: RB3 = 1;
 18921  144B  0020               	movlb	0	; select bank0
 18922  144C  158D               	bsf	13,3	;volatile
 18923                           
 18924                           ;Buzzer_B1.c: 69: }
 18925                           ;Buzzer_B1.c: 70: } else {
 18926  144D  0008               	return
 18927  144E                     l96:	
 18928                           
 18929                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18930  144E  12AE               	bcf	_Buz1^(0+128),5
 18931                           
 18932                           ;Buzzer_B1.c: 73: RB3 = 0;
 18933  144F  0020               	movlb	0	; select bank0
 18934  1450  118D               	bcf	13,3	;volatile
 18935                           
 18936                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18937  1451  3001               	movlw	1
 18938  1452  0021               	movlb	1	; select bank1
 18939  1453  02B1               	subwf	(_Buz1^(0+128)+3),f
 18940  1454  0008               	return
 18941  1455                     __end_of_Buzzer_Main:	
 18942                           
 18943                           	psect	text136
 18944  1B7F                     __ptext136:	
 18945 ;; *************** function _Buzzer_Initialization *****************
 18946 ;; Defined at:
 18947 ;;		line 11 in file "../src/Buzzer_B1.c"
 18948 ;; Parameters:    Size  Location     Type
 18949 ;;		None
 18950 ;; Auto vars:     Size  Location     Type
 18951 ;;		None
 18952 ;; Return value:  Size  Location     Type
 18953 ;;		None               void
 18954 ;; Registers used:
 18955 ;;		None
 18956 ;; Tracked objects:
 18957 ;;		On entry : 0/0
 18958 ;;		On exit  : 0/0
 18959 ;;		Unchanged: 0/0
 18960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18965 ;;Total ram usage:        0 bytes
 18966 ;; Hardware stack levels used:    1
 18967 ;; Hardware stack levels required when called:    5
 18968 ;; This function calls:
 18969 ;;		Nothing
 18970 ;; This function is called by:
 18971 ;;		_main
 18972 ;; This function uses a non-reentrant model
 18973 ;;
 18974                           
 18975                           
 18976                           ;psect for function _Buzzer_Initialization
 18977  1B7F                     _Buzzer_Initialization:	
 18978                           
 18979                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18980                           
 18981                           ;incstack = 0
 18982                           ; Regs used in _Buzzer_Initialization: []
 18983  1B7F  0021               	movlb	1	; select bank1
 18984  1B80  142E               	bsf	_Buz1^(0+128),0
 18985  1B81  0008               	return
 18986  1B82                     __end_of_Buzzer_Initialization:	
 18987                           
 18988                           	psect	intentry
 18989  0004                     __pintentry:	
 18990 ;; *************** function _ISR *****************
 18991 ;; Defined at:
 18992 ;;		line 116 in file "../src/MCU_B1.c"
 18993 ;; Parameters:    Size  Location     Type
 18994 ;;		None
 18995 ;; Auto vars:     Size  Location     Type
 18996 ;;		None
 18997 ;; Return value:  Size  Location     Type
 18998 ;;		None               void
 18999 ;; Registers used:
 19000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19001 ;; Tracked objects:
 19002 ;;		On entry : 0/0
 19003 ;;		On exit  : 0/0
 19004 ;;		Unchanged: 0/0
 19005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19009 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19010 ;;Total ram usage:        1 bytes
 19011 ;; Hardware stack levels used:    1
 19012 ;; Hardware stack levels required when called:    4
 19013 ;; This function calls:
 19014 ;;		_IOC_ISR
 19015 ;;		_TMR1_ISR
 19016 ;; This function is called by:
 19017 ;;		Interrupt level 1
 19018 ;; This function uses a non-reentrant model
 19019 ;;
 19020                           
 19021  0004                     _ISR:	
 19022                           
 19023                           ;incstack = 0
 19024                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19025  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19026  0005  3180               	pagesel	$
 19027  0006  0020               	movlb	0	; select bank0
 19028  0007  087F               	movf	127,w
 19029  0008  00FC               	movwf	??_ISR
 19030                           
 19031                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19032  0009  0021               	movlb	1	; select bank1
 19033  000A  1C11               	btfss	17,0	;volatile
 19034  000B  2813               	goto	i1l1194
 19035  000C  0020               	movlb	0	; select bank0
 19036  000D  1C11               	btfss	17,0	;volatile
 19037  000E  2813               	goto	i1l1194
 19038                           
 19039                           ;MCU_B1.c: 126: TMR1_ISR();
 19040  000F  3190  2020  3180   	fcall	_TMR1_ISR
 19041                           
 19042                           ;MCU_B1.c: 127: }
 19043  0012  281B               	goto	i1l1197
 19044  0013                     i1l1194:	
 19045                           
 19046                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19047  0013  198B               	btfsc	11,3	;volatile
 19048  0014  1C0B               	btfss	11,0	;volatile
 19049  0015  281B               	goto	i1l1197
 19050  0016  0027               	movlb	7	; select bank7
 19051  0017  1D16               	btfss	22,2	;volatile
 19052  0018  281B               	goto	i1l1197
 19053                           
 19054                           ;MCU_B1.c: 139: IOC_ISR();
 19055  0019  319B  23FD         	fcall	_IOC_ISR
 19056  001B                     i1l1197:	
 19057                           ;MCU_B1.c: 140: }
 19058                           ;MCU_B1.c: 148: return;
 19059                           
 19060  001B  087C               	movf	??_ISR,w
 19061  001C  0020               	movlb	0	; select bank0
 19062  001D  00FF               	movwf	127
 19063  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19064  001F  0009               	retfie
 19065  0020                     __end_of_ISR:	
 19066                           
 19067                           	psect	text138
 19068  1020                     __ptext138:	
 19069 ;; *************** function _TMR1_ISR *****************
 19070 ;; Defined at:
 19071 ;;		line 236 in file "../src/MCU_B1.c"
 19072 ;; Parameters:    Size  Location     Type
 19073 ;;		None
 19074 ;; Auto vars:     Size  Location     Type
 19075 ;;		None
 19076 ;; Return value:  Size  Location     Type
 19077 ;;		None               void
 19078 ;; Registers used:
 19079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19080 ;; Tracked objects:
 19081 ;;		On entry : 0/0
 19082 ;;		On exit  : 0/0
 19083 ;;		Unchanged: 0/0
 19084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19089 ;;Total ram usage:        0 bytes
 19090 ;; Hardware stack levels used:    1
 19091 ;; Hardware stack levels required when called:    3
 19092 ;; This function calls:
 19093 ;;		_DimmerLights_TMR_1
 19094 ;; This function is called by:
 19095 ;;		_ISR
 19096 ;; This function uses a non-reentrant model
 19097 ;;
 19098                           
 19099                           
 19100                           ;psect for function _TMR1_ISR
 19101  1020                     _TMR1_ISR:	
 19102                           
 19103                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19104                           
 19105                           ;incstack = 0
 19106                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19107  1020  30FA               	movlw	250
 19108  1021  0020               	movlb	0	; select bank0
 19109  1022  0097               	movwf	23	;volatile
 19110                           
 19111                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19112  1023  3038               	movlw	56
 19113  1024  0096               	movwf	22	;volatile
 19114                           
 19115                           ;MCU_B1.c: 240: TMR1IF = 0;
 19116  1025  1011               	bcf	17,0	;volatile
 19117                           
 19118                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19119  1026  318D  25E3  3190   	fcall	_DimmerLights_TMR_1
 19120                           
 19121                           ;MCU_B1.c: 271: Timer1.Count++;
 19122  1029  3001               	movlw	1
 19123  102A  0022               	movlb	2	; select bank2
 19124  102B  07B3               	addwf	(_Timer1^(0+256)+1),f
 19125  102C  3000               	movlw	0
 19126  102D  3DB4               	addwfc	((_Timer1+1)^(0+256)+1),f
 19127                           
 19128                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19129  102E  3001               	movlw	1
 19130  102F  3E32               	addlw	_Timer1& (0+255)
 19131  1030  0086               	movwf	6
 19132  1031  3001               	movlw	1	; select bank2/3
 19133  1032  0087               	movwf	7
 19134  1033  3F40               	moviw [0]fsr1
 19135  1034  3AC8               	xorlw	200
 19136  1035  1D03               	skipz
 19137  1036  2839               	goto	u753_25
 19138  1037  3F41               	moviw [1]fsr1
 19139  1038  3A00               	xorlw	0
 19140  1039                     u753_25:	
 19141  1039  1D03               	skipz
 19142  103A  0008               	return
 19143                           
 19144                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19145  103B  01B3               	clrf	(_Timer1^(0+256)+1)
 19146  103C  01B4               	clrf	((_Timer1+1)^(0+256)+1)
 19147                           
 19148                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19149  103D  1432               	bsf	_Timer1^(0+256),0
 19150  103E  0008               	return
 19151  103F                     __end_of_TMR1_ISR:	
 19152                           
 19153                           	psect	text139
 19154  0DE3                     __ptext139:	
 19155 ;; *************** function _DimmerLights_TMR_1 *****************
 19156 ;; Defined at:
 19157 ;;		line 1312 in file "../src/Dimmer_B1.c"
 19158 ;; Parameters:    Size  Location     Type
 19159 ;;		None
 19160 ;; Auto vars:     Size  Location     Type
 19161 ;;  count           1    5[BANK0 ] unsigned char 
 19162 ;;  TuneValue3      1    4[BANK0 ] unsigned char 
 19163 ;;  TuneValue2      1    3[BANK0 ] unsigned char 
 19164 ;;  TuneValue1      1    2[BANK0 ] unsigned char 
 19165 ;;  dimming         1    1[BANK0 ] unsigned char 
 19166 ;;  TuneValue4      1    0[BANK0 ] unsigned char 
 19167 ;; Return value:  Size  Location     Type
 19168 ;;		None               void
 19169 ;; Registers used:
 19170 ;;		wreg, status,2, status,0, pclath, cstack
 19171 ;; Tracked objects:
 19172 ;;		On entry : 0/0
 19173 ;;		On exit  : 0/0
 19174 ;;		Unchanged: 0/0
 19175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19177 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19178 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19179 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19180 ;;Total ram usage:        8 bytes
 19181 ;; Hardware stack levels used:    1
 19182 ;; Hardware stack levels required when called:    2
 19183 ;; This function calls:
 19184 ;;		_Division
 19185 ;; This function is called by:
 19186 ;;		_TMR1_ISR
 19187 ;; This function uses a non-reentrant model
 19188 ;;
 19189                           
 19190                           
 19191                           ;psect for function _DimmerLights_TMR_1
 19192  0DE3                     _DimmerLights_TMR_1:	
 19193                           
 19194                           ;Dimmer_B1.c: 1313: char count = 0;
 19195                           
 19196                           ;incstack = 0
 19197                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0+pclath+cstack]
 19198  0DE3  0020               	movlb	0	; select bank0
 19199  0DE4  01A5               	clrf	DimmerLights_TMR_1@count
 19200                           
 19201                           ;Dimmer_B1.c: 1314: count = 80;
 19202  0DE5  3050               	movlw	80
 19203  0DE6  00FA               	movwf	??_DimmerLights_TMR_1
 19204  0DE7  087A               	movf	??_DimmerLights_TMR_1,w
 19205  0DE8  00A5               	movwf	DimmerLights_TMR_1@count
 19206                           
 19207                           ;Dimmer_B1.c: 1316: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 19208  0DE9  3002               	movlw	2
 19209  0DEA  00FA               	movwf	??_DimmerLights_TMR_1
 19210  0DEB  087A               	movf	??_DimmerLights_TMR_1,w
 19211  0DEC  00F5               	movwf	Division@num
 19212  0DED  0021               	movlb	1	; select bank1
 19213  0DEE  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 19214  0DEF  319C  24CD  318D   	fcall	_Division
 19215  0DF2  00FB               	movwf	??_DimmerLights_TMR_1+1
 19216  0DF3  087B               	movf	??_DimmerLights_TMR_1+1,w
 19217  0DF4  0020               	movlb	0	; select bank0
 19218  0DF5  00A1               	movwf	DimmerLights_TMR_1@dimming
 19219                           
 19220                           ;Dimmer_B1.c: 1317: char TuneValue1 = 8;
 19221  0DF6  3008               	movlw	8
 19222  0DF7  00FA               	movwf	??_DimmerLights_TMR_1
 19223  0DF8  087A               	movf	??_DimmerLights_TMR_1,w
 19224  0DF9  00A2               	movwf	DimmerLights_TMR_1@TuneValue1
 19225                           
 19226                           ;Dimmer_B1.c: 1318: char TuneValue2 = TuneValue1 + dimming;
 19227  0DFA  0822               	movf	DimmerLights_TMR_1@TuneValue1,w
 19228  0DFB  0721               	addwf	DimmerLights_TMR_1@dimming,w
 19229  0DFC  00FA               	movwf	??_DimmerLights_TMR_1
 19230  0DFD  087A               	movf	??_DimmerLights_TMR_1,w
 19231  0DFE  00A3               	movwf	DimmerLights_TMR_1@TuneValue2
 19232                           
 19233                           ;Dimmer_B1.c: 1319: char TuneValue3 = TuneValue2 + ((count - 10) - DimmerIntr1.DimmingVa
      +                          lue);
 19234  0DFF  0021               	movlb	1	; select bank1
 19235  0E00  033F               	decf	(_DimmerIntr1^(0+128)+5),w
 19236  0E01  3AFF               	xorlw	255
 19237  0E02  0020               	movlb	0	; select bank0
 19238  0E03  0725               	addwf	DimmerLights_TMR_1@count,w
 19239  0E04  0723               	addwf	DimmerLights_TMR_1@TuneValue2,w
 19240  0E05  3EF6               	addlw	246
 19241  0E06  00FA               	movwf	??_DimmerLights_TMR_1
 19242  0E07  087A               	movf	??_DimmerLights_TMR_1,w
 19243  0E08  00A4               	movwf	DimmerLights_TMR_1@TuneValue3
 19244                           
 19245                           ;Dimmer_B1.c: 1320: char TuneValue4 = TuneValue3 + dimming;
 19246  0E09  0824               	movf	DimmerLights_TMR_1@TuneValue3,w
 19247  0E0A  0721               	addwf	DimmerLights_TMR_1@dimming,w
 19248  0E0B  00FA               	movwf	??_DimmerLights_TMR_1
 19249  0E0C  087A               	movf	??_DimmerLights_TMR_1,w
 19250  0E0D  00A0               	movwf	DimmerLights_TMR_1@TuneValue4
 19251                           
 19252                           ;Dimmer_B1.c: 1327: if (DimmerIntr1.Start == 1) {
 19253  0E0E  0021               	movlb	1	; select bank1
 19254  0E0F  1D3A               	btfss	_DimmerIntr1^(0+128),2
 19255  0E10  2E1D               	goto	i1l7073
 19256                           
 19257                           ;Dimmer_B1.c: 1328: DimmerIntr1.Count++;
 19258  0E11  3001               	movlw	1
 19259  0E12  00FA               	movwf	??_DimmerLights_TMR_1
 19260  0E13  087A               	movf	??_DimmerLights_TMR_1,w
 19261  0E14  07BC               	addwf	(_DimmerIntr1^(0+128)+2),f
 19262                           
 19263                           ;Dimmer_B1.c: 1329: if (DimmerIntr1.Count >= count) {
 19264  0E15  0020               	movlb	0	; select bank0
 19265  0E16  0825               	movf	DimmerLights_TMR_1@count,w
 19266  0E17  0021               	movlb	1	; select bank1
 19267  0E18  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19268  0E19  1C03               	skipc
 19269  0E1A  2E1D               	goto	i1l7073
 19270                           
 19271                           ;Dimmer_B1.c: 1330: DimmerIntr1.Count = 0;
 19272  0E1B  01BC               	clrf	(_DimmerIntr1^(0+128)+2)
 19273                           
 19274                           ;Dimmer_B1.c: 1331: DimmerIntr1.Start = 0;
 19275  0E1C  113A               	bcf	_DimmerIntr1^(0+128),2
 19276  0E1D                     i1l7073:	
 19277                           
 19278                           ;Dimmer_B1.c: 1332: }
 19279                           ;Dimmer_B1.c: 1333: }
 19280                           ;Dimmer_B1.c: 1336: if (DimmerIntr1.Trigger1 == 1) {
 19281  0E1D  1C3B               	btfss	(_DimmerIntr1^(0+128)+1),0
 19282  0E1E  2E2B               	goto	i1l835
 19283                           
 19284                           ;Dimmer_B1.c: 1337: if (DimmerIntr1.Count >= TuneValue1) {
 19285  0E1F  0020               	movlb	0	; select bank0
 19286  0E20  0822               	movf	DimmerLights_TMR_1@TuneValue1,w
 19287  0E21  0021               	movlb	1	; select bank1
 19288  0E22  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19289  0E23  1C03               	skipc
 19290  0E24  2E2B               	goto	i1l835
 19291                           
 19292                           ;Dimmer_B1.c: 1338: DimmerIntr1.Trigger1 = 0;
 19293  0E25  103B               	bcf	(_DimmerIntr1^(0+128)+1),0
 19294                           
 19295                           ;Dimmer_B1.c: 1339: DimmerIntr1.Trigger2 = 1;
 19296  0E26  14BB               	bsf	(_DimmerIntr1^(0+128)+1),1
 19297                           
 19298                           ;Dimmer_B1.c: 1341: if (DimmerIntr1.ControlStatus == 1) {
 19299  0E27  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19300  0E28  2E2B               	goto	i1l835
 19301                           
 19302                           ;Dimmer_B1.c: 1342: RB1 = 1;
 19303  0E29  0020               	movlb	0	; select bank0
 19304  0E2A  148D               	bsf	13,1	;volatile
 19305  0E2B                     i1l835:	
 19306                           
 19307                           ;Dimmer_B1.c: 1344: }
 19308                           ;Dimmer_B1.c: 1345: }
 19309                           ;Dimmer_B1.c: 1346: }
 19310                           ;Dimmer_B1.c: 1348: if (DimmerIntr1.Trigger2 == 1) {
 19311  0E2B  0021               	movlb	1	; select bank1
 19312  0E2C  1CBB               	btfss	(_DimmerIntr1^(0+128)+1),1
 19313  0E2D  2E3A               	goto	i1l838
 19314                           
 19315                           ;Dimmer_B1.c: 1349: if (DimmerIntr1.Count >= TuneValue2) {
 19316  0E2E  0020               	movlb	0	; select bank0
 19317  0E2F  0823               	movf	DimmerLights_TMR_1@TuneValue2,w
 19318  0E30  0021               	movlb	1	; select bank1
 19319  0E31  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19320  0E32  1C03               	skipc
 19321  0E33  2E3A               	goto	i1l838
 19322                           
 19323                           ;Dimmer_B1.c: 1350: DimmerIntr1.Trigger2 = 0;
 19324  0E34  10BB               	bcf	(_DimmerIntr1^(0+128)+1),1
 19325                           
 19326                           ;Dimmer_B1.c: 1351: DimmerIntr1.Trigger3 = 1;
 19327  0E35  153B               	bsf	(_DimmerIntr1^(0+128)+1),2
 19328                           
 19329                           ;Dimmer_B1.c: 1352: if (DimmerIntr1.ControlStatus == 1) {
 19330  0E36  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19331  0E37  2E3A               	goto	i1l838
 19332                           
 19333                           ;Dimmer_B1.c: 1353: RB1 = 0;
 19334  0E38  0020               	movlb	0	; select bank0
 19335  0E39  108D               	bcf	13,1	;volatile
 19336  0E3A                     i1l838:	
 19337                           
 19338                           ;Dimmer_B1.c: 1355: }
 19339                           ;Dimmer_B1.c: 1356: }
 19340                           ;Dimmer_B1.c: 1357: }
 19341                           ;Dimmer_B1.c: 1359: if (DimmerIntr1.Trigger3 == 1) {
 19342  0E3A  0021               	movlb	1	; select bank1
 19343  0E3B  1D3B               	btfss	(_DimmerIntr1^(0+128)+1),2
 19344  0E3C  2E49               	goto	i1l841
 19345                           
 19346                           ;Dimmer_B1.c: 1360: if (DimmerIntr1.Count >= TuneValue3) {
 19347  0E3D  0020               	movlb	0	; select bank0
 19348  0E3E  0824               	movf	DimmerLights_TMR_1@TuneValue3,w
 19349  0E3F  0021               	movlb	1	; select bank1
 19350  0E40  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19351  0E41  1C03               	skipc
 19352  0E42  2E49               	goto	i1l841
 19353                           
 19354                           ;Dimmer_B1.c: 1361: DimmerIntr1.Trigger3 = 0;
 19355  0E43  113B               	bcf	(_DimmerIntr1^(0+128)+1),2
 19356                           
 19357                           ;Dimmer_B1.c: 1362: DimmerIntr1.Trigger4 = 1;
 19358  0E44  15BB               	bsf	(_DimmerIntr1^(0+128)+1),3
 19359                           
 19360                           ;Dimmer_B1.c: 1363: if (DimmerIntr1.ControlStatus == 1) {
 19361  0E45  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19362  0E46  2E49               	goto	i1l841
 19363                           
 19364                           ;Dimmer_B1.c: 1364: RB1 = 1;
 19365  0E47  0020               	movlb	0	; select bank0
 19366  0E48  148D               	bsf	13,1	;volatile
 19367  0E49                     i1l841:	
 19368                           
 19369                           ;Dimmer_B1.c: 1366: }
 19370                           ;Dimmer_B1.c: 1367: }
 19371                           ;Dimmer_B1.c: 1368: }
 19372                           ;Dimmer_B1.c: 1369: if (DimmerIntr1.Trigger4 == 1) {
 19373  0E49  0021               	movlb	1	; select bank1
 19374  0E4A  1DBB               	btfss	(_DimmerIntr1^(0+128)+1),3
 19375  0E4B  2E58               	goto	i1l844
 19376                           
 19377                           ;Dimmer_B1.c: 1370: if (DimmerIntr1.Count >= TuneValue4) {
 19378  0E4C  0020               	movlb	0	; select bank0
 19379  0E4D  0820               	movf	DimmerLights_TMR_1@TuneValue4,w
 19380  0E4E  0021               	movlb	1	; select bank1
 19381  0E4F  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19382  0E50  1C03               	skipc
 19383  0E51  2E58               	goto	i1l844
 19384                           
 19385                           ;Dimmer_B1.c: 1371: DimmerIntr1.Trigger4 = 0;
 19386  0E52  11BB               	bcf	(_DimmerIntr1^(0+128)+1),3
 19387                           
 19388                           ;Dimmer_B1.c: 1372: DimmerIntr1.Tune = 1;
 19389  0E53  14BA               	bsf	_DimmerIntr1^(0+128),1
 19390                           
 19391                           ;Dimmer_B1.c: 1373: if (DimmerIntr1.ControlStatus == 1) {
 19392  0E54  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19393  0E55  2E58               	goto	i1l844
 19394                           
 19395                           ;Dimmer_B1.c: 1374: RB1 = 0;
 19396  0E56  0020               	movlb	0	; select bank0
 19397  0E57  108D               	bcf	13,1	;volatile
 19398  0E58                     i1l844:	
 19399                           
 19400                           ;Dimmer_B1.c: 1376: }
 19401                           ;Dimmer_B1.c: 1377: }
 19402                           ;Dimmer_B1.c: 1378: }
 19403                           ;Dimmer_B1.c: 1395: if (DimmerIntr1.Tune == 1) {
 19404  0E58  0021               	movlb	1	; select bank1
 19405  0E59  1CBA               	btfss	_DimmerIntr1^(0+128),1
 19406  0E5A  0008               	return
 19407                           
 19408                           ;Dimmer_B1.c: 1396: DimmerIntr1.Tune = 0;
 19409  0E5B  10BA               	bcf	_DimmerIntr1^(0+128),1
 19410                           
 19411                           ;Dimmer_B1.c: 1397: DimmerIntr1.TuneTime++;
 19412  0E5C  3001               	movlw	1
 19413  0E5D  00FA               	movwf	??_DimmerLights_TMR_1
 19414  0E5E  087A               	movf	??_DimmerLights_TMR_1,w
 19415  0E5F  07BD               	addwf	(_DimmerIntr1^(0+128)+3),f
 19416                           
 19417                           ;Dimmer_B1.c: 1398: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19418  0E60  083E               	movf	(_DimmerIntr1^(0+128)+4),w
 19419  0E61  023D               	subwf	(_DimmerIntr1^(0+128)+3),w
 19420  0E62  1C03               	skipc
 19421  0E63  0008               	return
 19422                           
 19423                           ;Dimmer_B1.c: 1399: DimmerIntr1.TuneTime = 0;
 19424  0E64  01BD               	clrf	(_DimmerIntr1^(0+128)+3)
 19425                           
 19426                           ;Dimmer_B1.c: 1400: if (DimmerIntr1.Dimming_Sw == 1) {
 19427  0E65  1E3A               	btfss	_DimmerIntr1^(0+128),4
 19428  0E66  2E7D               	goto	i1l849
 19429                           
 19430                           ;Dimmer_B1.c: 1401: if (DimmerIntr1.Dimming_Status == 0) {
 19431  0E67  1ABA               	btfsc	_DimmerIntr1^(0+128),5
 19432  0E68  2E74               	goto	i1l7115
 19433                           
 19434                           ;Dimmer_B1.c: 1402: if (DimmerIntr1.DimmingValue < ((char)(65*0.8))) {
 19435  0E69  3034               	movlw	52
 19436  0E6A  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19437  0E6B  1803               	skipnc
 19438  0E6C  2E72               	goto	i1l851
 19439                           
 19440                           ;Dimmer_B1.c: 1403: DimmerIntr1.DimmingValue++;
 19441  0E6D  3001               	movlw	1
 19442  0E6E  00FA               	movwf	??_DimmerLights_TMR_1
 19443  0E6F  087A               	movf	??_DimmerLights_TMR_1,w
 19444  0E70  07BF               	addwf	(_DimmerIntr1^(0+128)+5),f
 19445                           
 19446                           ;Dimmer_B1.c: 1404: } else {
 19447  0E71  0008               	return
 19448  0E72                     i1l851:	
 19449                           
 19450                           ;Dimmer_B1.c: 1405: DimmerIntr1.Dimming_Status = 1;
 19451  0E72  16BA               	bsf	_DimmerIntr1^(0+128),5
 19452                           
 19453                           ;Dimmer_B1.c: 1406: }
 19454                           ;Dimmer_B1.c: 1407: } else {
 19455  0E73  0008               	return
 19456  0E74                     i1l7115:	
 19457                           
 19458                           ;Dimmer_B1.c: 1408: if (DimmerIntr1.DimmingValue > ((char)(10*0.8))) {
 19459  0E74  3009               	movlw	9
 19460  0E75  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19461  0E76  1C03               	skipc
 19462  0E77  2E7B               	goto	i1l854
 19463                           
 19464                           ;Dimmer_B1.c: 1409: DimmerIntr1.DimmingValue--;
 19465  0E78  3001               	movlw	1
 19466  0E79  02BF               	subwf	(_DimmerIntr1^(0+128)+5),f
 19467                           
 19468                           ;Dimmer_B1.c: 1410: } else {
 19469  0E7A  0008               	return
 19470  0E7B                     i1l854:	
 19471                           
 19472                           ;Dimmer_B1.c: 1411: DimmerIntr1.Dimming_Status = 0;
 19473  0E7B  12BA               	bcf	_DimmerIntr1^(0+128),5
 19474                           
 19475                           ;Dimmer_B1.c: 1412: }
 19476                           ;Dimmer_B1.c: 1413: }
 19477                           ;Dimmer_B1.c: 1414: } else if (DimmerIntr1.Dimming_RF == 1) {
 19478  0E7C  0008               	return
 19479  0E7D                     i1l849:	
 19480  0E7D  1F3A               	btfss	_DimmerIntr1^(0+128),6
 19481  0E7E  0008               	return
 19482                           
 19483                           ;Dimmer_B1.c: 1415: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19484  0E7F  0840               	movf	(_DimmerIntr1^(0+128)+6),w
 19485  0E80  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19486  0E81  1803               	skipnc
 19487  0E82  2E88               	goto	i1l7123
 19488                           
 19489                           ;Dimmer_B1.c: 1416: DimmerIntr1.DimmingValue++;
 19490  0E83  3001               	movlw	1
 19491  0E84  00FA               	movwf	??_DimmerLights_TMR_1
 19492  0E85  087A               	movf	??_DimmerLights_TMR_1,w
 19493  0E86  07BF               	addwf	(_DimmerIntr1^(0+128)+5),f
 19494                           
 19495                           ;Dimmer_B1.c: 1417: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19496  0E87  0008               	return
 19497  0E88                     i1l7123:	
 19498  0E88  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 19499  0E89  0240               	subwf	(_DimmerIntr1^(0+128)+6),w
 19500  0E8A  1803               	skipnc
 19501  0E8B  2E8F               	goto	i1l860
 19502                           
 19503                           ;Dimmer_B1.c: 1418: DimmerIntr1.DimmingValue--;
 19504  0E8C  3001               	movlw	1
 19505  0E8D  02BF               	subwf	(_DimmerIntr1^(0+128)+5),f
 19506                           
 19507                           ;Dimmer_B1.c: 1419: } else {
 19508  0E8E  0008               	return
 19509  0E8F                     i1l860:	
 19510                           
 19511                           ;Dimmer_B1.c: 1420: DimmerIntr1.Dimming_RF = 0;
 19512  0E8F  133A               	bcf	_DimmerIntr1^(0+128),6
 19513  0E90  0008               	return
 19514  0E91                     __end_of_DimmerLights_TMR_1:	
 19515                           
 19516                           	psect	text140
 19517  1CCD                     __ptext140:	
 19518 ;; *************** function _Division *****************
 19519 ;; Defined at:
 19520 ;;		line 1307 in file "../src/Dimmer_B1.c"
 19521 ;; Parameters:    Size  Location     Type
 19522 ;;  value           1    wreg     unsigned char 
 19523 ;;  num             1    5[COMMON] unsigned char 
 19524 ;; Auto vars:     Size  Location     Type
 19525 ;;  value           1    8[COMMON] unsigned char 
 19526 ;;  result          1    9[COMMON] unsigned char 
 19527 ;; Return value:  Size  Location     Type
 19528 ;;                  1    wreg      unsigned char 
 19529 ;; Registers used:
 19530 ;;		wreg, status,2, status,0, pclath, cstack
 19531 ;; Tracked objects:
 19532 ;;		On entry : 0/0
 19533 ;;		On exit  : 0/0
 19534 ;;		Unchanged: 0/0
 19535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19536 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19537 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19538 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19539 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19540 ;;Total ram usage:        5 bytes
 19541 ;; Hardware stack levels used:    1
 19542 ;; Hardware stack levels required when called:    1
 19543 ;; This function calls:
 19544 ;;		___lbdiv
 19545 ;; This function is called by:
 19546 ;;		_DimmerLights_TMR_1
 19547 ;; This function uses a non-reentrant model
 19548 ;;
 19549                           
 19550                           
 19551                           ;psect for function _Division
 19552  1CCD                     _Division:	
 19553                           
 19554                           ;incstack = 0
 19555                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19556                           ;Division@value stored from wreg
 19557  1CCD  00F8               	movwf	Division@value
 19558                           
 19559                           ;Dimmer_B1.c: 1308: char result = (char) (value / num);
 19560  1CCE  0875               	movf	Division@num,w
 19561  1CCF  00F6               	movwf	??_Division
 19562  1CD0  0876               	movf	??_Division,w
 19563  1CD1  00F0               	movwf	___lbdiv@divisor
 19564  1CD2  0878               	movf	Division@value,w
 19565  1CD3  3190  207E         	fcall	___lbdiv
 19566  1CD5  00F7               	movwf	??_Division+1
 19567  1CD6  0877               	movf	??_Division+1,w
 19568  1CD7  00F9               	movwf	Division@result
 19569                           
 19570                           ;Dimmer_B1.c: 1309: return result;
 19571  1CD8  0879               	movf	Division@result,w
 19572  1CD9  0008               	return
 19573  1CDA                     __end_of_Division:	
 19574                           
 19575                           	psect	text141
 19576  107E                     __ptext141:	
 19577 ;; *************** function ___lbdiv *****************
 19578 ;; Defined at:
 19579 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19580 ;; Parameters:    Size  Location     Type
 19581 ;;  dividend        1    wreg     unsigned char 
 19582 ;;  divisor         1    0[COMMON] unsigned char 
 19583 ;; Auto vars:     Size  Location     Type
 19584 ;;  dividend        1    2[COMMON] unsigned char 
 19585 ;;  quotient        1    4[COMMON] unsigned char 
 19586 ;;  counter         1    3[COMMON] unsigned char 
 19587 ;; Return value:  Size  Location     Type
 19588 ;;                  1    wreg      unsigned char 
 19589 ;; Registers used:
 19590 ;;		wreg, status,2, status,0
 19591 ;; Tracked objects:
 19592 ;;		On entry : 0/0
 19593 ;;		On exit  : 0/0
 19594 ;;		Unchanged: 0/0
 19595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19596 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19597 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19598 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19599 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19600 ;;Total ram usage:        5 bytes
 19601 ;; Hardware stack levels used:    1
 19602 ;; This function calls:
 19603 ;;		Nothing
 19604 ;; This function is called by:
 19605 ;;		_Division
 19606 ;; This function uses a non-reentrant model
 19607 ;;
 19608                           
 19609                           
 19610                           ;psect for function ___lbdiv
 19611  107E                     ___lbdiv:	
 19612                           
 19613                           ;incstack = 0
 19614                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19615                           ;___lbdiv@dividend stored from wreg
 19616  107E  00F2               	movwf	___lbdiv@dividend
 19617  107F  01F4               	clrf	___lbdiv@quotient
 19618  1080  0870               	movf	___lbdiv@divisor,w
 19619  1081  1903               	btfsc	3,2
 19620  1082  289D               	goto	i1l6547
 19621  1083  01F3               	clrf	___lbdiv@counter
 19622  1084  0AF3               	incf	___lbdiv@counter,f
 19623  1085                     i1l6535:	
 19624  1085  1BF0               	btfsc	___lbdiv@divisor,7
 19625  1086  288E               	goto	i1l6537
 19626  1087  1003               	clrc
 19627  1088  0DF0               	rlf	___lbdiv@divisor,f
 19628  1089  3001               	movlw	1
 19629  108A  00F1               	movwf	??___lbdiv
 19630  108B  0871               	movf	??___lbdiv,w
 19631  108C  07F3               	addwf	___lbdiv@counter,f
 19632  108D  2885               	goto	i1l6535
 19633  108E                     i1l6537:	
 19634  108E  1003               	clrc
 19635  108F  0DF4               	rlf	___lbdiv@quotient,f
 19636  1090  0870               	movf	___lbdiv@divisor,w
 19637  1091  0272               	subwf	___lbdiv@dividend,w
 19638  1092  1C03               	skipc
 19639  1093  2898               	goto	L9
 19640  1094  0870               	movf	___lbdiv@divisor,w
 19641  1095  02F2               	subwf	___lbdiv@dividend,f
 19642  1096  1474               	bsf	___lbdiv@quotient,0
 19643  1097  1003               	clrc
 19644  1098                     L9:	
 19645  1098  0CF0               	rrf	___lbdiv@divisor,f
 19646  1099  3001               	movlw	1
 19647  109A  02F3               	subwf	___lbdiv@counter,f
 19648  109B  1D03               	btfss	3,2
 19649  109C  288E               	goto	i1l6537
 19650  109D                     i1l6547:	
 19651  109D  0874               	movf	___lbdiv@quotient,w
 19652  109E  0008               	return
 19653  109F                     __end_of___lbdiv:	
 19654                           
 19655                           	psect	text142
 19656  1BFD                     __ptext142:	
 19657 ;; *************** function _IOC_ISR *****************
 19658 ;; Defined at:
 19659 ;;		line 394 in file "../src/MCU_B1.c"
 19660 ;; Parameters:    Size  Location     Type
 19661 ;;		None
 19662 ;; Auto vars:     Size  Location     Type
 19663 ;;		None
 19664 ;; Return value:  Size  Location     Type
 19665 ;;		None               void
 19666 ;; Registers used:
 19667 ;;		status,2, status,0, pclath, cstack
 19668 ;; Tracked objects:
 19669 ;;		On entry : 0/0
 19670 ;;		On exit  : 0/0
 19671 ;;		Unchanged: 0/0
 19672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19677 ;;Total ram usage:        0 bytes
 19678 ;; Hardware stack levels used:    1
 19679 ;; Hardware stack levels required when called:    1
 19680 ;; This function calls:
 19681 ;;		_DimmerLights_IOC_1
 19682 ;; This function is called by:
 19683 ;;		_ISR
 19684 ;; This function uses a non-reentrant model
 19685 ;;
 19686                           
 19687                           
 19688                           ;psect for function _IOC_ISR
 19689  1BFD                     _IOC_ISR:	
 19690                           
 19691                           ;MCU_B1.c: 395: IOCBF2 = 0;
 19692                           
 19693                           ;incstack = 0
 19694                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 19695  1BFD  0027               	movlb	7	; select bank7
 19696  1BFE  1116               	bcf	22,2	;volatile
 19697                           
 19698                           ;MCU_B1.c: 396: IOCIF = 0;
 19699  1BFF  100B               	bcf	11,0	;volatile
 19700                           
 19701                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 19702  1C00  0022               	movlb	2	; select bank2
 19703  1C01  1C20               	btfss	_myMain^(0+256),0
 19704  1C02  0008               	return
 19705                           
 19706                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 19707  1C03  319C  24C0         	fcall	_DimmerLights_IOC_1
 19708  1C05  0008               	return
 19709  1C06                     __end_of_IOC_ISR:	
 19710                           
 19711                           	psect	text143
 19712  1CC0                     __ptext143:	
 19713 ;; *************** function _DimmerLights_IOC_1 *****************
 19714 ;; Defined at:
 19715 ;;		line 1427 in file "../src/Dimmer_B1.c"
 19716 ;; Parameters:    Size  Location     Type
 19717 ;;		None
 19718 ;; Auto vars:     Size  Location     Type
 19719 ;;		None
 19720 ;; Return value:  Size  Location     Type
 19721 ;;		None               void
 19722 ;; Registers used:
 19723 ;;		status,2
 19724 ;; Tracked objects:
 19725 ;;		On entry : 0/0
 19726 ;;		On exit  : 0/0
 19727 ;;		Unchanged: 0/0
 19728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19733 ;;Total ram usage:        0 bytes
 19734 ;; Hardware stack levels used:    1
 19735 ;; This function calls:
 19736 ;;		Nothing
 19737 ;; This function is called by:
 19738 ;;		_IOC_ISR
 19739 ;; This function uses a non-reentrant model
 19740 ;;
 19741                           
 19742                           
 19743                           ;psect for function _DimmerLights_IOC_1
 19744  1CC0                     _DimmerLights_IOC_1:	
 19745                           
 19746                           ;Dimmer_B1.c: 1429: if (DimmerIntr1.Start == 0 && RB2 == 1) {
 19747                           
 19748                           ;incstack = 0
 19749                           ; Regs used in _DimmerLights_IOC_1: [status,2]
 19750  1CC0  0021               	movlb	1	; select bank1
 19751  1CC1  193A               	btfsc	_DimmerIntr1^(0+128),2
 19752  1CC2  0008               	return
 19753  1CC3  0020               	movlb	0	; select bank0
 19754  1CC4  1D0D               	btfss	13,2	;volatile
 19755  1CC5  0008               	return
 19756                           
 19757                           ;Dimmer_B1.c: 1430: DimmerIntr1.Start = 1;
 19758  1CC6  0021               	movlb	1	; select bank1
 19759  1CC7  153A               	bsf	_DimmerIntr1^(0+128),2
 19760                           
 19761                           ;Dimmer_B1.c: 1431: DimmerIntr1.Count = 0;
 19762  1CC8  01BC               	clrf	(_DimmerIntr1^(0+128)+2)
 19763                           
 19764                           ;Dimmer_B1.c: 1434: if (DimmerIntr1.ControlStatus == 1) {
 19765  1CC9  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19766  1CCA  0008               	return
 19767                           
 19768                           ;Dimmer_B1.c: 1435: DimmerIntr1.Trigger1 = 1;
 19769  1CCB  143B               	bsf	(_DimmerIntr1^(0+128)+1),0
 19770  1CCC  0008               	return
 19771  1CCD                     __end_of_DimmerLights_IOC_1:	
 19772  007E                     btemp	set	126	;btemp
 19773  007E                     pic14e$flags	set	126
 19774  007E                     wtemp	set	126
 19775  007E                     wtemp0	set	126
 19776  0080                     wtemp1	set	128
 19777  0082                     wtemp2	set	130
 19778  0084                     wtemp3	set	132
 19779  0086                     wtemp4	set	134
 19780  0088                     wtemp5	set	136
 19781  007F                     wtemp6	set	127
 19782  007E                     ttemp	set	126
 19783  007E                     ttemp0	set	126
 19784  0081                     ttemp1	set	129
 19785  0084                     ttemp2	set	132
 19786  0087                     ttemp3	set	135
 19787  007F                     ttemp4	set	127
 19788  007E                     ltemp	set	126
 19789  007E                     ltemp0	set	126
 19790  0082                     ltemp1	set	130
 19791  0086                     ltemp2	set	134
 19792  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         219
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     67      74
    BANK1            80     20      80
    BANK2            80      2      80
    BANK3            80      1      77
    BANK4            80      4      36
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _DimmerLights_TMR_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _main->_Flash_Memory_Initialization
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setProductData
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_OnOff->_setDimmerIntr_MaxmumValue
    _setDimmerLights_OnOff->_setProductData
    _setLED->_LedPointSelect
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setDimmerIntr_MaxmumValue
    _setDimmerLights_Dimming->_setProductData
    _setRF_DimmerLights->_setProductData
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DlyOff_Main->_setProductData
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    _TMR1_ISR->_DimmerLights_TMR_1

Critical Paths under _main in BANK1

    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  206414
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    2261
                                             19 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                             10 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                             10 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              6 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              6 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6822
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    6822
                                              8 BANK1      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    5460
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5460
                                             21 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      84
                                              8 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1077
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1077
                                             10 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   64484
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   64484
                                              1 BANK2      1     1      0
                                              0 BANK3      1     1      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   58198
                                             19 BANK1      1     1      0
                                              0 BANK2      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    6180
                                              8 BANK1      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      42
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   51634
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   15093
                                             16 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   29717
                                              8 BANK1      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      42
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     247
                                              8 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0     108
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      48
                                              6 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0     138
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     330
                                             10 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     660
                                             10 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     234
                                              8 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      96
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    3306
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0     138
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     772
                                             12 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     698
                                             11 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     608
                                             11 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     422
                                              8 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     814
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     676
                                              6 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0     138
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0     138
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0     138
                                              8 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      96
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2990
                                             14 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1552
                                              6 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              8 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1108
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1108
                                             10 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1496
                                             12 BANK0      1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1442
                                             10 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   18429
                                             66 BANK0      1     1      0
                                              6 BANK1      1     1      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1102
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              6 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              6 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4632
                                             19 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   86288
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   85864
                                              0 BANK2      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   56251
                                             16 BANK1      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1015
                                              8 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     326
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     168
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     274
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    5455
                                              8 BANK1      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     434
                                              6 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     326
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      54
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   21616
                                              0 BANK1      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4766
                                             20 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     132
                                              8 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      68
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   29115
                                             13 BANK1      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      31
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    4504
                                              8 BANK1      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     568
                                             66 BANK0      1     1      0
                                              6 BANK1      2     1      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     274
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   16850
                                              0 BANK1      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     764
                                             52 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     332
                                             36 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    5154
                                             20 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    6206
                                             39 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    4256
                                             14 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3828
                                              6 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      68
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              7 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     336
                                              6 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    6696
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    6696
                                              8 BANK1      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3835
                                             66 BANK0      1     1      0
                                              6 BANK1      2     1      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    2393
                                             19 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    2261
                                             15 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     872
                                              6 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      84
                                              8 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     132
                                              8 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      42
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      84
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      84
                                              8 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      42
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     656
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0     656
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  8     8      0     656
                                             10 COMMON     2     2      0
                                              0 BANK0      6     6      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     407
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
   _TMR1_ISR
     _DimmerLights_TMR_1
       _Division
         ___lbdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     43      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     14      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      2      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      1      4D      11       96.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      24      13       45.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     169      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     169      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Jan 21 16:32:41 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1F62  
                          ___bmul@product 0028                 getMain_Lights_Count@count 0026  
                                      l86 1581                                        l96 144E  
                                      l88 1595                                        l97 144A  
                                      l98 1438                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10C0                                        _WR 0CA9  
                            ___awdiv@sign 002C                                        _Sw 0067  
                          setTemp_Main@AD 00EA                       ___wmul@multiplicand 0028  
                    _getDimmerLights_Line 1C4D                    __end_of_setDelayOff_GO 0C92  
                            ___ftadd@exp1 0053                              ___ftadd@exp2 0052  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1793  
                    _setDimmerLights_Line 1D44                              ___ftadd@sign 0051  
                                     l100 1448                                       l303 1E4A  
                                     l304 1E4B                                       l235 1702  
                    _setDimmerLights_SwOn 11A2                                       l531 08AA  
                                     l347 112A                                       l259 1787  
                                     l752 1FDE                                       l683 1D03  
                                     l776 0799                                       _GIE 005F  
                                     _CRC 00C7                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 0065                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 00C5  
                                     _Cmd 00C8              getDimmerLights_Status@lights 0028  
                                     _Sw1 01E3                ??_setDimmerIntr_Dimming_RF 0027  
              ??_setDimmerIntr_Dimming_Sw 0027           setDimmerIntr_Dimming_RF@command 0026  
                __end_of_CC2500_WriteByte 1E54                     _Buzzer_Initialization 1B7F  
                         __end_of_ADC_Set 1BDE                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0029  
     __end_of_setDimmerIntr_ControlStatus 1F18               _setDimmerIntr_ControlStatus 1F00  
                       ??_getSw_KeyStatus 0026                                      ?_ISR 0070  
                            ___ftdiv@cntr 003E                           __end_of_IOC_ISR 1C06  
                   _setDimmerLights_OnOff 0711          setDimmerLights_DimmingRun@lights 002A  
                              Load_Main@i 0036                              ___ftdiv@sign 0043  
                                    l2103 0639                                      l1232 12D5  
                                    l2107 0588                                      l2108 05D9  
                                    l2133 1D0A                                      l1246 119B  
                                    l1255 149F                                      l1432 1386  
                                    l1611 0089                                      l2163 126B  
                                    l1460 1202                                      l1620 01D7  
                                    l1612 0085                                      l2148 0A06  
                                    l1613 0080                                      l1455 11EB  
                                    l1456 1206                                      l2176 0921  
                                    l1609 01FD                                      l1619 01D9  
                         __end_of_IOC_Set 1C2C                                      l2461 1E99  
                                    l1487 0710                                      l1496 1F61  
                                    l2481 0368                                      l2483 0246  
                                    l1771 0D34                                      l2660 100B  
                                    l2821 1696                                      l1782 0D2C  
                                    l1777 0CAF                                      l2850 050D  
                                    l2827 16AD                            _Load_Main$3870 0031  
                                    l7033 1C55                                      l7211 10CB  
                                    l7213 10CE                                      l7217 10D4  
                   _setDimmerLights_SwOff 1312                                      l7431 1EA4  
                                    l7427 1E9E                                      l7525 1005  
                                    l7545 1422                                      l9235 1183  
                                    l7723 0960                                      l7715 0941  
                                    l9423 1471                                      l7743 098F  
                                    l7727 0968                                      l9417 145C  
                                    l6929 1D93                     _myMain_Initialization 1E2D  
                                    l7759 0832                                      l6995 1E05  
                                    _CFGS 0CAE                              __CFG_WDTE$ON 0000  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u6045 1EE3  
                                    u7405 1011                                      u7435 1418  
                                    u7395 100C                                      u7725 097F  
                                    u7675 0950                                      u7775 0826  
                                    _LWLO 0CAD                                      _RSSI 00CB  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1F94                _setDimmerLights_DimmingRun 1F7B  
                                    _Buz1 00AE                                      _Load 0135  
                                    _Temp 00D1                                      _main 15A9  
                            ___ftpack@arg 0026                       __end_of_DlyOff_Main 08B1  
                         __end_of_RF_Main 1B8B                              ___ftpack@exp 0029  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1C6E  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0B7D  
                       ___bmul@multiplier 0029                              ___ftmul@cntr 0042  
                            ___ftmul@sign 0043              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2199 0029                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 0061  
                            ___fttol@lval 005D         setDimmerLights_DimmingRun@command 0028  
 __end_of_getDimmerLights_Allow_Condition 1EBD  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0027          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1EA7                    _getDimmerLights_Status 1D14  
                      ??_getDimmer_LoadGO 0026                          __end_of_LED_Main 1BA1  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00C9  
                                   l10121 1673                                     l10131 169B  
                                   l10123 167D                                     l11011 090A  
                                   l10133 16A3                                     l10125 1682  
                                   l10117 166C                                     l10301 04FF  
                                   l11013 090E                                     l11005 08C7  
                                   l10151 14B2                                     l10311 0531  
                                   l10303 0509                                     l10231 1DB4  
                                   l11031 16D6                                     l11007 08CE  
                                   l10321 054C                                     l11009 08E9  
                                   l11017 0912                                     l10307 051F  
                                   l10331 0D51                                     l10403 0F15  
                                   l10227 1DAE                                     l11203 07D3  
                                   l11107 1756                                     l11035 16DC  
                                   l10157 14BD                                     l10261 0496  
                                   l11301 12E4                                     l11109 176E  
                                   l11061 1715                                     l11053 1708  
                                   l11029 16D3                                     l10183 14F4  
                                   l10175 14E3                                     l10167 14C5  
                                   l10271 04AC                                     l10351 0DA8  
                                   l10431 0B96                                     l10407 0F1D  
                                   l11303 12F0                                     l11063 1718  
                                   l11055 170B                                     l10169 14D1  
                                   l10513 11C8                                     l10249 10EC  
                                   l10265 049D                                     l10337 0D67  
                                   l11209 1516                                     l11313 130B  
                                   l11049 16EC                                     l10179 14EC  
                                   l10515 11CD                                     l11147 1EB6  
                                   l10291 04E3                                     l10283 04C6  
                                   l10451 0BD4                                     l11171 0762  
                                   l11091 1745                                     l11067 171E  
                                   l11059 1711                                     l11235 1D82  
                                   l11411 0CC0                                     l12043 15CD  
                                   l10293 04E8                                     l10461 0BED  
                                   l10373 0EA8                                     l11309 1302  
                                   l11085 173C                                     l11405 0CB1  
                                   l11413 0CC3                                     l10527 1340  
                                   l10295 04EC                                     l10359 0DC1  
                                   l10391 0EF9                                     l11175 0779  
                                   l11351 17BC                                     l10703 10A7  
                                   l11087 173F                                     l11271 09CD  
                                   l11255 09AA                                     l11503 05E8  
                                   l12047 15D8                                     l10289 04D9  
                                   l10465 0BFB                                     l10457 0BE1  
                                   l10449 0BC6                                     l11353 17C3  
                                   l10705 10AA                                     l11601 0315  
                                   l11441 0D05                                     l10459 0BEA  
                                   l10395 0F01                                     l10379 0EBE  
                                   l10563 0C88                                     l11363 17EC  
                                   l11283 09E2                                     l11267 09C4  
                                   l11531 0632                                     l11443 0D07  
                                   l10725 1F4C                                     l10549 0C42  
                                   l11189 07A8                                     l11365 17F3  
                                   l10709 10B0                                     l10813 13EC  
                                   l11517 061A                                     l11453 0D1A  
                                   l10559 0C74                                     l10663 1F73  
                                   l10823 13FC                                     l10815 13EF  
                                   l10751 13BB                                     l11551 0230  
                                   l11455 0D1B                     ?_setDimmerLights_Main 0070  
                                   l10729 1F5B                                     l11641 1FE0  
                                   l10657 1F6A                                     l10825 13FF  
                                   l10681 1EF6                                     l10595 164E  
                                   l10659 1F6D                                     l10819 13F5  
                                   l10683 1EFA                                     l10763 0B13  
                                   l10917 11E6                                     l11813 00DE  
                                   l10829 1405                                     l11741 1365  
                                   l10927 11FD                                     l10919 11EF  
                                   l11807 00AC                                     l10695 113B  
                                   l10791 1115                                     l10767 0B18  
                                   l11591 02E3                                     l11567 0273  
                                   l10961 129B                                     l10953 1287  
                                   l11905 01EC                                     l10697 1146  
                                   l10785 110C                                     l10777 0B67  
                                   l11489 05D4                                     l11577 02A5  
                                   l10947 127E                                     l10787 110F  
                                   l10981 1DA9                                     l11941 066D  
                                   l11669 03F7                                     l11845 0170  
                                   l11853 0199                                     l11773 0067  
                                   l10975 1D9D                                     l11935 065D  
                                   l11839 0161                                     l11791 0088  
                                   l11953 06A3                                     l11945 067C  
                                   l11849 018D                                     l10979 1DA4  
                                   l11971 06E4                                     l11955 067F  
                                   l11859 01A9                                     l11973 06C0  
                                   l11957 06AB                                     l11869 01BF  
                                   l11975 06EC                                     l11983 0706  
                                   l10999 08B2                     ?_setDimmerLights_Line 0070  
                                   l11977 06F6                           ?_setDelayOff_GO 00E3  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 0240  
                         __end_of___awdiv 14FB                           __end_of___lbdiv 109F  
                         __end_of___ftadd 0564                           __end_of___ftdiv 0DE3  
                         __end_of___ftneg 1C0F                           __end_of___ftmul 0F45  
                                   u12025 04ED                           ___awdiv@divisor 0026  
                                   u12125 0D79                                     u12205 0ECA  
                                   u12055 0500                                     u12135 0D89  
                                   u12215 0EDA                                     _T1CON 0018  
                                   u12145 0DA9                                     u12155 0DB8  
                                   u12235 0F02                                     u12165 0DC2  
                                   u12325 0B9D                           __end_of___fttol 0C04  
                                   u12245 0F08                                     u11615 1691  
                                   u12415 1E77                                     u14015 05AC  
                                   u11715 14C8                                     u11635 169E  
                                   u12355 0BC7                                     u12275 0F1E  
                                   u12285 0F24                                     u14045 0609  
                                   u11735 14D2                                     u11745 14DC  
                                   u11665 16B4                                     u12385 0BE2  
                                   u12545 0C4E                                     u11755 14E4  
                                   u11595 1678                                     u12580 160E  
                                   u13605 12E7                                     u12585 160C  
                                   u14345 12CC                                     u13625 12F1  
                                   u13635 12FB                                     u11965 04C7  
                                   u13645 1303                                     u12685 1130  
                                   _IOCBF 0396                                     u14535 00AA  
                                   u14800 06EA                                     u14545 00DC  
                                   u13905 0CEF                                     u11995 04DA  
                                   u14635 01A0                                     u14555 0120  
                                   u14395 137E                                     u14805 06C9  
                                   u13925 0D0D                                     _IOCBN 0395  
                                   _IOCBP 0394                                     u14770 06A9  
                                   _IOCIE 005B                                     _IOCIF 0058  
                                   u14775 0688                           __end_of___lwdiv 1312  
                                   i1l841 0E49                                     i1l851 0E72  
                                   i1l835 0E2B                                     i1l860 0E8F  
                                   i1l844 0E58                                     i1l854 0E7B  
                                   i1l838 0E3A                                     i1l849 0E7D  
                         ___awdiv@counter 002B             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0027                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1EE9                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 0A82   __size_of_getDimmerLights_ValueToPercent 007A  
          _getDimmerLights_ValueToPercent 0A08                                     _Light 00CA  
                        __end_of_TMR1_ISR 103F                   __size_of_setProductData 000F  
            __size_of_CC2500_WriteCommand 0019                          __end_of_TMR1_Set 1CB4  
                                   _getAD 10C0                             ___awtoft@sign 0033  
                           ___ftpack@sign 002A               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0026                          __end_of_WDT_Main 1DE1  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 002B  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1C63                        Flash_Memory_Read@i 0027  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0011  
           __end_of_setLED_Initialization 1D66                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 1604  
                         ___lbdiv@divisor 0070               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0073  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 00E4  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0026  
             ??_setDimmerLights_DimmingOn 0028                        ??_CC2500_SIDLEMode 002A  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                          __end_of_Division 1CDA  
                 __size_of_getDelayOff_GO 0010                              __end_of_main 1604  
                     ?_setRF_DimmerLights 00E3                          __end_of_Fosc_Set 1BA5  
          getMain_All_LightsStatus@status 0026                        ??_setMemory_Modify 0026  
            setDimmerLights_OnOff@command 00EB                            _Exception_Main 063F  
                        ?_CC2500_WriteREG 0028                                 ??_ADC_Set 0026  
                    _setSw_Initialization 1D34                                    ??_main 0063  
                           ___fttol@sign1 005C                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0026              ??_DimmerLights_SelectPointer 0026  
                 _setControl_Lights_Table 08B1                            _setMemory_Data 1C90  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0028  
                              _Receive_OK 0348        setDimmerIntr_ControlStatus@command 0026  
                 _setDimmerLights_Dimming 14FB                                 ??_IOC_ISR 0070  
                               ??_IOC_Set 0026                               _DimmerIntr1 00BA  
                _getMain_All_LightsStatus 1C18                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1E68                   ??_Switch_Initialization 002B  
                  ?_setDimmerLights_OnOff 00EB                      ??_setRF_DimmerLights 00E4  
                                  ?_getAD 0026                         ??_getRF_KeyStatus 0026  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0842  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0063  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0028                     _getDimmer_Load_Status 1BF5  
                               ??_WDT_Set 0026                          __end_of___awtoft 1103  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 16C4  
                _getMain_All_Error_Status 11D5                                    _IOCBF2 1CB2  
                                  i1l1194 0013                                    i1l1197 001B  
                                  i1l7123 0E88                                    i1l7115 0E74  
                                  i1l7073 0E1D                                    i1l6535 1085  
                                  i1l6537 108E                                    i1l6547 109D  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0028  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01B0  
                                  u753_25 1039                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1FAE  
                                  _WDTCON 0097                      Exception_Main@i_3517 0038  
                      DelayTime_1us@count 0026            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 0062             __end_of_CC2500_PowerOnInitial 1E92  
                                  _Dimmer 012D                                    _DlySw1 0165  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1DAB  
              __end_of_Mcu_Initialization 1DCF                       __end_of_Buzzer_Main 1455  
                                  _Memory 01BE                                    _Timer1 0132  
                                  ___bmul 1DAB                    __end_of_Exception_Main 0711  
                    Exception_Main@lights 003A                                    ___wmul 1002  
                               ??___awdiv 002A                                 ??___lbdiv 0071  
                               ??___ftadd 004D              __size_of_DelayOffPointSelect 000B  
                               ??___ftdiv 003A                                 ??___ftneg 0047  
                               ??___ftmul 003A                                 ??___fttol 0058  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0026  
                               ??___lwdiv 002A                    ??_setDimmerLights_Main 0063  
                  ??_setDimmerLights_Line 0026                                    _r_data 00CF  
                    Exception_Main@status 0034   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E07  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013         ??_getAll_DimmerIntr_Dimming_Sw_RF 0026  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1DF4  
                                  _s_data 00D0                    ??_setDimmerLights_SwOn 0033  
                                  _setLED 126F                                    _myMain 0120  
                    ??_RF_Timeout_Counter 0026                    __end_of_setMemory_Data 1C9C  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 002D  
                                  _setBuz 1550                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 0035               __end_of_Load_Initialization 1B85  
        ??_setDimmerLights_Initialization 0026           ?_setDimmerLights_Initialization 0070  
        __end_of_setDimmerIntr_Dimming_RF 1F30                   DimmerLights_TMR_1@count 0025  
        __end_of_setDimmerIntr_Dimming_Sw 1ED3                     ___ftmul@f3_as_product 003F  
               _setDimmerLights_DimmingOn 114B                  Flash_Memory_Read@address 0028  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1E2D  
             getMain_Lights_Count@status1 0027               __size_of_DimmerLights_IOC_1 000D  
                   __end_of_SwPointSelect 1C84               __size_of_DimmerLights_TMR_1 00AE  
            __size_of_Flash_Memory_Modify 0052                   __size_of_LedPointSelect 000B  
         setDimmerIntr_Dimming_Sw@command 0026                        setTemp_Main@TempGO 00E5  
                        ___lbdiv@dividend 0072                       Flash_Memory_Write@i 0027  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1E92  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 002B  
        __end_of_CC2500_registers_address 182F                   __end_of__initialization 004D  
         getDimmerIntr_DimmingValue@value 0028           setDimmerIntr_DimmingValue@value 0026  
                               ?_LED_Main 0070                                ___ftadd@f1 0047  
                              ___ftadd@f2 004A                      _getRF_KeyStatus$5240 0028  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0037  
                              ___ftdiv@f2 0034                                ___ftdiv@f3 0040  
                              ___ftneg@f1 0044                                ___awtoft@c 002E  
                     ___bmul@multiplicand 0026              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 0034                                ___ftmul@f2 0037  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 0054  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 105E                             __end_of_getAD 10E1  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0027                 setMemory_LoopSave@command 0027  
                      _LED_Initialization 1B99                           _getSw_KeyStatus 1D88  
               ??_setControl_Lights_Table 0063                        getRF_KeyStatus@key 0027  
                         ?_setMemory_Data 0026           ?_getDimmerLights_PercentToValue 0070  
        ??_getDimmerLights_PercentToValue 00DB                 ??_setDimmerLights_Dimming 00E9  
           ??_Flash_Memory_Initialization 0062                          ___lbdiv@quotient 0074  
                    _getMain_Lights_Count 1C58                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 0201         setDimmerIntr_ControlStatus@lights 0028  
                      __size_of_getBuz_GO 0011                 _setDimmerIntr_MaxmumValue 1CDA  
              __end_of_set_TimeoutCleared 1BBE           setDimmerIntr_MaxmumValue@lights 00E2  
                      __size_of_getRxData 0074                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1CE7  
                    __size_of_setLED_Main 0033                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0029                       _Temp_Initialization 1B8B  
                      ??_CC2500_WriteByte 0026                                 ?_Division 0075  
                              __pbssBANK0 0063                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 140B  
                       ??_setRFSW_Control 00EB               ?_setDimmerLights_DimmingRun 0028  
                       __end_of_Temp_Main 1B91                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0033                                ??_LED_Main 002B  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B91  
                           ??_Switch_Main 0038                            DelayTime_1us@i 0028  
                          DelayTime_1us@j 002A                      ??_LED_Initialization 002B  
                            _DimmerLights 0064                         LedPointSelect@led 0027  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0026                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 0032  
                 ?_getDimmerLights_Status 0070                                __pmaintext 15A9  
                          _getDelayOff_GO 1D24                       _CC2500_WriteCommand 1F62  
                    ?_Temp_Initialization 0070                                   ?___bmul 0026  
                        ??_setDelayOff_GO 00E5         __end_of_DimmerIntr_Initialization 1F49  
           ??_DimmerLights_Initialization 0027                                   ?___wmul 0026  
                              ??_TMR1_ISR 007C                             ?_setTemp_Main 0070  
                              _getLoad_AD 0922                                ??_TMR1_Set 0026  
                              __pintentry 0004                    ??_setSw_Initialization 002A  
                              _getLoad_OK 1BE5                        __size_of_setTxData 00BB  
                                 ?_setLED 0028                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1BD7  
                                 ?_setBuz 002F                                 ?___awtoft 002E  
                               ?___ftpack 0026                                _getTemp_AD 0802  
      __end_of_DimmerLights_SelectPointer 1C42                _DimmerLights_SelectPointer 1C37  
                              ??_WDT_Main 0026              __end_of_setRF_Initialization 1C79  
                      _setRFSW_AdjControl 0AFC                    __end_of_setProductData 1CF6  
           setDimmerLights_Dimming@lights 00EA                                   _IOC_ISR 1BFD  
                                 _IOC_Set 1C22                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 00E8     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 12A5  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1F94  
                  __size_of_CC2500_RxData 0069                    __size_of_CC2500_TxData 0066  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1B88                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0076  
                                 _WDT_Set 1C63           __end_of_setControl_Lights_Table 0922  
                         setRF_Main@error 01EC                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0026                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 1550                   ??_setLoad_AH_AL_Restore 0026  
                     getCmd_Status@number 0026              __end_of_CC2500_FrequencyCabr 1CC0  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0028  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1D77                 ?_setDimmerIntr_Dimming_RF 0026  
                     ??_Flash_Memory_Main 002C                 ?_setDimmerIntr_Dimming_Sw 0026  
                     ??_Flash_Memory_Read 0026                    __end_of_getDelayOff_GO 1D34  
          __end_of_getDimmerLights_Status 1D24                         __end_of_getRxData 0A08  
                 __end_of_getSw_KeyStatus 1D99                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0026                      ??_setRFSW_AdjControl 00E3  
                          ??_setTemp_Main 00E3                           __size_of___bmul 0012  
                     setProductData@value 00E1                                   ___awdiv 14A7  
                                 ___lbdiv 107E                                   ___ftadd 046E  
                                 ___ftdiv 0D3A                                   ___ftneg 1C06  
                         __size_of___wmul 001E                                   ___ftmul 0E91  
                                 ___fttol 0B7D                       __end_of_Switch_Main 1BE5  
                                 ___lwdiv 12DB                ??_getMain_All_LightsStatus 0026  
                 ??_Buzzer_Initialization 0026                           _getRF_KeyStatus 1D77  
                              ??___awtoft 0031                                ??___ftpack 002B  
                         __size_of_setLED 0036                      setRFSW_AdjControl@sw 00E6  
                         __size_of_setBuz 0059                                   __ptext1 134B  
                                 __ptext2 1E2D                                   __ptext3 0802  
                                 __ptext4 0922                                   __ptext5 10C0  
                                 __ptext6 1DCF                                   __ptext7 0002  
                                 __ptext8 1B8E                                   __ptext9 0C92  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0026                   ??_setDimmerLights_OnOff 00EC  
                         ?_setProductData 00E1                 __end_of_Flash_Memory_Main 12DB  
               __end_of_Flash_Memory_Read 1FAE                   ??_setDimmerLights_SwOff 0028  
                              _setRF_Main 0564                   ??_myMain_Initialization 0026  
                           _DelayOff_Main 1B95                         _DimmerLights_Main 1FC8  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0028  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1BC4  
              __end_of_CC2500_ClearRXFIFO 1BAD                  ??_setTemp_Initialization 0026  
              __end_of_CC2500_ClearTXFIFO 1BB1                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00EF  
                          _LedPointSelect 1C42                           getTemp_AD@ADRES 002C  
                     _DelayOffPointSelect 1C2C                                   clrloop0 1BCB  
          __size_of_Switch_Initialization 0004             __end_of_Switch_Initialization 1BB9  
                    end_of_initialization 004D                 ??_DelayOff_Initialization 0029  
                       _CC2500_InitSetREG 07D6                             _DelayTime_1us 1125  
                       __end_of_setTxData 1000                __end_of_Flash_Memory_Write 11A2  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 1BC4  
              __end_of_setRF_TransceiveGO 1DF4                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 0063                      Flash_Memory_Read@ret 0029  
                                 initloop 1BC5                                _setSw_Main 0201  
                   CC2500_ReadByte@loop_b 0027                    setDimmerLights_SwOn@sw 0033  
                       _CC2500_ReadStatus 1103                      Flash_Memory_Modify@i 002B  
                   _setLED_Initialization 1D55                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 002A                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 0017                             _CC2500_RxData 172A  
                           _CC2500_TxData 16C4                       ??_CC2500_InitSetREG 002B  
           __size_of_Flash_Memory_Erasing 000C                 DimmerLights_TMR_1@dimming 0021  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 1455  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0026                              __pstringtext 1800  
                           _setCmd_Status 1F49                       _Flash_Memory_Unlock 1C0F  
                     ??_CC2500_ReadStatus 0028                   CC2500_InitSetREG@loop_c 002E  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 002A                   setTemp_Main@DangerValue 00E8  
                  setSw_Initialization@sw 002A                 __end_of_DimmerLights_Main 1FE4  
                      _Mcu_Initialization 1DBD                  __size_of_CC2500_PowerRST 0043  
            __end_of_setRF_TimeoutCleared 1BA9                      __end_of_my_MainTimer 1388  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1C4D                  __size_of_CC2500_WriteREG 0021  
                Load_Main@ErrorCountValue 0033          setDimmerIntr_DimmingValue@lights 0028  
        getDimmerIntr_DimmingValue@lights 0027                 __end_of_CC2500_InitSetREG 0800  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 005F                            ?_DelayTime_1us 0026  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000D  
               __end_of_CC2500_ReadStatus 1125                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0028           getMain_All_Error_Status@command 002B  
                             ___ftdiv@exp 003F         __end_of_setDimmerLights_DimmingOn 1173  
                        ??_Exception_Main 0033                            __end_of_IO_Set 1FC8  
                    _setRF_Initialization 1C6E                        _setMemory_LoopSave 1E1A  
                             _Switch_Main 1BDE                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1D88  
                        ??_setMemory_Data 0027                               ___ftmul@exp 003E  
                   _CC2500_PowerOnInitial 1E7D               ??_DimmerIntr_Initialization 0026  
                    ??_Mcu_Initialization 0027                     ??_DelayOffPointSelect 0026  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0026  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1DBD  
     __size_of_getDimmerIntr_DimmingValue 000F                      setRF_DimmerLights@on 00E3  
                          __end_of___wmul 1020                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001F  
           __size_of_getDimmerLights_Line 000B          DimmerLights_SelectPointer@lights 0027  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006D  
                          __end_of_setLED 12A5                             __pbitbssBANK0 0348  
           __size_of_setDimmerLights_Line 0011             __size_of_setDimmerLights_SwOn 0033  
                          __end_of_setBuz 15A9                __end_of_DimmerLights_IOC_1 1CCD  
                    _CC2500_FrequencyCabr 1CB4                   ??_getDimmer_Load_Status 0026  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 1388  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 0E91  
                     start_initialization 0022                           ?_LedPointSelect 0070  
                               _Load_Main 0051                               __end_of_ISR 0020  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1BED  
                   ??_Flash_Memory_Modify 002A              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0026                __end_of_CC2500_InitPATable 105E  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0026  
                   ??_Flash_Memory_Unlock 0026                      __end_of_setTemp_Main 0D3A  
                          ??_RF_RxDisable 002A    __end_of_getDimmerLights_PercentToValue 0AFC  
 __size_of_getDimmerLights_PercentToValue 007A            _getDimmerLights_PercentToValue 0A82  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 00DD                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1BB9         __end_of_setDimmerIntr_MaxmumValue 1CE7  
                                ??_IO_Set 0026                  __size_of_Timeout_Counter 0016  
                               _VarErrLED 016A                         __size_of_Division 000D  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0040  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0014  
                               _Temp_Main 1B8E                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0026                                 _Rx_Length 00CC  
                   setProductData@address 00E2                       Exception_Main@count 0035  
                     Exception_Main@error 003B                                  ??___bmul 0027  
                                ??___wmul 002A                    __size_of_SwPointSelect 000B  
        __end_of_getMain_All_LightsStatus 1C22                                 _Tx_Length 0068  
                             __pdataBANK4 0220                                  ??_setLED 0029  
                                ?_ADC_Set 0070                                  ??_setBuz 0031  
                         ??_DelayOff_Main 0063                         ??_CC2500_ReadByte 0026  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1208  
                        _CC2500_SIDLEMode 1BB1                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0026                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0028                             ??_setLED_Main 0028  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 0034                                 ___latbits 0003  
                        _setMemory_Modify 1E07                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00DB  
                           __pcstackBANK2 016E                 setRF_TransceiveGO@command 0027  
                           __pcstackBANK3 01EC                             __pcstackBANK4 0240  
                    ??_set_TimeoutCleared 0026                 _DimmerIntr_Initialization 1F30  
                         ??_DelayTime_1us 0028                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 00E5                         ??_CC2500_PowerRST 002C  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0027                              ??_TouchPower 0026  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0022  
          setDimmerIntr_MaxmumValue@value 00E1               setDimmerLights_DimmingOn@sw 0028  
                       ??_CC2500_WriteREG 0029                             ??_setRF_Learn 0026  
                           _DimmerLights1 015D                     CC2500_WriteREG@w_addr 002A  
                   setDelayOff_GO@command 00E3            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 002A             __end_of_setLoad_AH_AL_Restore 2000  
                setRFSW_AdjControl@status 00E5                           ??_CC2500_TxData 002A  
                               __pnvBANK1 00EF                            getRxData@error 016E  
             __size_of_LED_Initialization 0004                      _setRF_TimeoutCleared 1BA5  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0036  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00DB  
                        ___lwdiv@dividend 0028                     DelayOffPointSelect@sw 0027  
                           _getCmd_Status 1D99                                setBuz@time 002F  
                         ??_setCmd_Status 0027                  ?_setControl_Lights_Table 0070  
                     setDelayOff_GO@value 00E4                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0030                    _setTemp_Initialization 0801  
                               _getBuz_GO 1D66                  ?_setDimmerLights_Dimming 00E8  
     __end_of_Flash_Memory_Initialization 046E               _Flash_Memory_Initialization 0372  
                                ?___awdiv 0026                                 __ptext100 1D24  
                               __ptext101 1D99                                  ?___lbdiv 0070  
                               __ptext110 0B7D                                 __ptext102 14FB  
                               __ptext111 1C06                                 __ptext103 0F45  
                               __ptext120 1BD0                                 __ptext112 0D3A  
                               __ptext104 1DE1                                 __ptext121 0800  
                               __ptext113 046E                                 __ptext105 1604  
                               __ptext130 1D14                                 __ptext122 1F30  
                               __ptext114 10E1                                 __ptext106 1D44  
                               __ptext131 1C37                                 __ptext123 1B95  
                               __ptext115 1663                                 __ptext107 1CDA  
                               __ptext140 1CCD                                 __ptext132 1B91  
                               __ptext124 0842                                 __ptext116 1CF6  
                               __ptext108 1EBD                                 __ptext141 107E  
                               __ptext133 1BBE                                 __ptext125 1CE7  
                               __ptext117 1EA7                                 __ptext109 0A08  
                                ?___ftadd 0047                                 __ptext142 1BFD  
                               __ptext134 1C2C                                 __ptext126 11A2  
                               __ptext118 1BE5                                 __ptext143 1CC0  
                               __ptext135 140B                                 __ptext127 1550  
                               __ptext119 11D5                                 __ptext136 1B7F  
                               __ptext128 14A7                                 __ptext129 1312  
                               __ptext138 1020                                 __ptext139 0DE3  
                               _getRxData 0994                                  ?___ftdiv 0034  
                                ?___ftneg 0044                                  ?___ftmul 0034  
                                ?___fttol 0054                     __size_of_my_MainTimer 003D  
                                ?___lwdiv 0026                   __end_of_setRFSW_Control 13C8  
                        ??_setProductData 0062             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1B82  
                           ??_setLog_Code 00E3                  getDimmerLights_Line@line 0026  
                      __end_of_TouchPower 1EA7                       __size_of_setSw_Main 0171  
            CC2500_ReadStatus@status_addr 0029        __end_of_getDimmerIntr_DimmingValue 1D05  
            ??_setDimmerIntr_DimmingValue 0027                _getDimmerIntr_DimmingValue 1CF6  
                  CC2500_WriteByte@loop_a 0027            __size_of_setDimmerLights_OnOff 00C5  
                               _r_address 00CE             __end_of_setDimmerLights_OnOff 07D6  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 134B              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 1E40                            __size_of_getAD 0021  
                        ___lwdiv@quotient 002C                             _SwPointSelect 1C79  
                     __end_of_setLED_Main 123B                          ??_getDelayOff_GO 0028  
                  ??_setRF_Initialization 0026               __end_of_Temp_Initialization 1B8E  
                       _CC2500_rfSettings 182F                            ___wmul@product 002A  
                                _LED_Main 1B9D                           SwPointSelect@sw 0027  
                               clear_ram0 1BCA                  CC2500_InitPATable@loop_d 002D  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 134B  
                               _setTxData 0F45       __end_of_DimmerLights_Initialization 1BD7  
             _DimmerLights_Initialization 1BD0                        _CC2500_ClearRXFIFO 1BA9  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 1BAD  
                setRF_DimmerLights@lights 00E7                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1E68                         ??_Timeout_Counter 0026  
                              ?_getBuz_GO 0026                  setRF_DimmerLights@status 00E6  
    __size_of_setDimmerIntr_ControlStatus 0018               __size_of_setRFSW_AdjControl 0081  
     __size_of_setDimmerIntr_DimmingValue 000C                        _Flash_Memory_Write 1173  
                              ?_getRxData 0070                              ??_getLoad_AD 002A  
                                _TMR1_ISR 1020                    CC2500_InitSetREG@temp1 002C  
                  CC2500_InitSetREG@temp2 002D                              ??_getLoad_OK 0026  
                                _TMR1_Set 1CA8                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1DE1  
                                _RF_Count 00C3                      __end_of_RF_RxDisable 1D14  
                            ??_getTemp_AD 002A               __end_of_CC2500_WriteCommand 1F7B  
                  ??_CC2500_FrequencyCabr 002C                                  _WDT_Main 1DCF  
                 DlyOff_Initialization@sw 0028                     getSw_KeyStatus@status 0027  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0026  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00A8  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008E  
                                _DelayOff 0063                              setSw_Main@sw 0037  
                             ??_Load_Main 002E                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 002C                          __size_of_IOC_Set 000A  
            __end_of_Flash_Memory_Erasing 1CA8                            ?_SwPointSelect 0070  
                             getAD@adcon0 0029                               getAD@adcon1 0026  
                          setLED_Main@led 002A                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 126F                     _DlyOff_Initialization 1BBE  
       __size_of_getMain_All_LightsStatus 000A                      ??_CC2500_ClearRXFIFO 002A  
                                _Division 1CCD                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 002A                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1F18  
             setDimmerLights_OnOff@lights 00EE                  _setDimmerIntr_Dimming_Sw 1EBD  
                                _Fosc_Set 1BA1                          __size_of_WDT_Set 000B  
                   setRFSW_Control@status 00EC                        __end_of_getLoad_AD 0994  
                      __end_of_getLoad_OK 1BED                     _Switch_Initialization 1BB5  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0026  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 0842                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1E40  
                       getLoad_AD@channel 002C       __size_of_DimmerLights_SelectPointer 000B  
                    ??_setRF_TransceiveGO 0026              Flash_Memory_Initialization@i 00E1  
                                _SwDetect 00CD                               ??_Temp_Main 0063  
                        getCmd_Status@cmd 0027                          setCmd_Status@cmd 0026  
                       setRFSW_Control@sw 00ED             _getMain_All_Error_Status$3505 0027  
           _getMain_All_Error_Status$3506 0029                  __end_of_getDimmer_LoadGO 1BF5  
                     _Load_Initialization 1B82           ?_getDimmerLights_ValueToPercent 0070  
        ??_getDimmerLights_ValueToPercent 00DB                                 setLED@led 0029  
                            _setTemp_Main 0C92                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0021                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 0034                                  ___awtoft 10E1  
                        ??_LedPointSelect 0026                                  ___ftpack 1663  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0026  
                       getTemp_AD@channel 002B                              ??_setRF_Main 016F  
                    CC2500_WriteREG@value 0028                               _setLED_Main 1208  
              __end_of_setRF_DimmerLights 1663            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0029  
                        getDelayOff_GO@sw 0028             __end_of_getDimmer_Load_Status 1BFD  
                        setDelayOff_GO@sw 00EA                           ___lwdiv@divisor 0026  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 002B  
                                __ptext10 1B8B                                  __ptext11 0801  
                                __ptext20 1ED3                                  __ptext12 1BDE  
                                __ptext21 1BB5                                  __ptext13 0201  
                                __ptext30 0AFC                                  __ptext22 1D34  
                                __ptext14 1E54                                  __ptext31 1E07  
                                __ptext23 1B88                                  __ptext15 114B  
                                __ptext40 1E7D                                  __ptext32 1F7B  
                                __ptext24 0564                                  __ptext16 1D88  
                                __ptext41 1BB1                                  __ptext33 1D77  
                                __ptext25 0994                                  __ptext17 1C79  
                                __ptext50 1F62                                  __ptext42 13C8  
                                __ptext34 1D66                                  __ptext26 123B  
                                __ptext18 1E92                                  __ptext51 1BA5  
                                __ptext43 07D6                                  __ptext35 1D05  
                                __ptext27 1E1A                                  __ptext19 1BB9  
                                __ptext60 1C22                                  __ptext52 1E68  
                                __ptext44 103F                                  __ptext36 16C4  
                                __ptext28 08B1                                  __ptext61 1BA1  
                                __ptext53 1E40                                  __ptext45 109F  
                                __ptext37 172A                                  __ptext29 1388  
                                __ptext70 1B82                                  __ptext62 1BD7  
                                __ptext54 1B85                                  __ptext46 1CB4  
                                __ptext38 1103                                  __ptext71 1FE4  
                                __ptext63 0051                                  __ptext55 1C6E  
                                __ptext47 1125                                  __ptext39 1EE9  
                                __ptext80 1C90                                  __ptext72 1B9D  
                                __ptext64 1C58                                  __ptext56 1DBD  
                                __ptext48 1BAD                                  __ptext81 1173  
                                __ptext73 1208                                  __ptext65 1BF5  
                                __ptext57 1C63                                  __ptext49 1BA9  
                                __ptext90 1C42                                  __ptext82 1C0F  
                                __ptext74 1B99                                  __ptext66 1BED  
                                __ptext58 1CA8                                  __ptext91 1F18  
                                __ptext83 1F94                                  __ptext75 1D55  
                                __ptext67 1DF4                                  __ptext59 1FAE  
                                __ptext92 1C84                                  __ptext84 063F  
                                __ptext76 12A5                                  __ptext68 1002  
                                __ptext93 1F00                                  __ptext85 1C4D  
                                __ptext77 1455                                  __ptext69 12DB  
                                __ptext94 0C04                                  __ptext86 1FC8  
                                __ptext78 1C9C                                  __ptext95 1DAB  
                                __ptext87 1793                                  __ptext79 0372  
                                __ptext96 1F49                                  __ptext88 0711  
                                __ptext97 1C18                                  __ptext89 126F  
                                __ptext98 0A82                                  __ptext99 0E91  
                                __product 0220                   ??_setLED_Initialization 002A  
                ??_getDimmerLights_Status 0028              __end_of_getDimmerLights_Line 1C58  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1D55  
                      _DimmerLights_IOC_1 1CC0              __end_of_setDimmerLights_SwOn 11D5  
                            ??_setSw_Main 0035                    ??_setRF_TimeoutCleared 0026  
            ??_setDimmerLights_DimmingRun 0029                             setLED@command 0028  
                           __size_of_main 005B                               _setRF_Learn 1E54  
      __size_of_DimmerIntr_Initialization 0019                           ??_getCmd_Status 0026  
            DimmerLights_TMR_1@TuneValue1 0022              DimmerLights_TMR_1@TuneValue2 0023  
            DimmerLights_TMR_1@TuneValue3 0024              DimmerLights_TMR_1@TuneValue4 0020  
                      _DimmerLights_TMR_1 0DE3                  __end_of_CC2500_SIDLEMode 1BB5  
              setDimmerLights_Main@lights 016E               __end_of_DelayOffPointSelect 1C37  
              CC2500_WriteCommand@command 0029                           _CC2500_ReadByte 1EE9  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 103F  
                __end_of_setMemory_Modify 1E1A                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 063F                               ??_getBuz_GO 0028  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00EE  
                            getLoad_OK@ok 0026                __end_of_RF_Timeout_Counter 1E7D  
                                main@argc 0240                                  main@argv 0242  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6258 0028  
     getDimmerLights_ValueToPercent@value 00DD                           _CC2500_PowerRST 13C8  
                __size_of_getSw_KeyStatus 0011        __end_of_setDimmerIntr_DimmingValue 1C90  
              _setDimmerIntr_DimmingValue 1C84               __end_of_Flash_Memory_Modify 14A7  
                             _setLog_Code 123B               __end_of_Flash_Memory_Unlock 1C18  
                         ??_SwPointSelect 0026                           _CC2500_WriteREG 109F  
                      __end_of_setSw_Main 0372                     ??_Load_Initialization 0028  
                    ??_DimmerLights_IOC_1 0070           getDimmerLights_PercentToValue@i 00DE  
     __size_of_setDimmerLights_DimmingRun 0019                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 007A  
                          Division@result 0079                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0026                setDimmerLights_Line@lights 0026  
                 setDimmerLights_SwOff@sw 0028               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 002B  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 00E7  
                         setDelayOff_GO@j 00E8                           setDelayOff_GO@k 00E9  
                 ??_CC2500_PowerOnInitial 002F                     setTemp_Main@SafeValue 00E6  
  __end_of_setDimmerLights_Initialization 0801   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 0800                ?_setDimmerIntr_MaxmumValue 00E1  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0026  
                  CC2500_InitPATable@temp 002C                           getLoad_AD@ADRES 002F  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1B85  
                             getLoad_AD@i 0031                               getLoad_AD@j 002E  
                             getLoad_AD@k 002D                      _Flash_Memory_Erasing 1C9C  
                      ?_RF_Initialization 0070                                _SPI0Buffer 0066  
                 __size_of_Exception_Main 00D2                             Division@value 0078  
         __end_of_DelayOff_Initialization 1B95                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B99                       ??_RF_Initialization 0027  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0C04  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0071  
        __size_of_setDimmerLights_Dimming 0055               getDimmer_Load_Status@status 0026  
    __size_of_Flash_Memory_Initialization 00FC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 00E3                     setMemory_Data@address 0028  
                   __end_of_DelayTime_1us 114B                   __end_of_CC2500_ReadByte 1F00  
            __end_of_setSw_Initialization 1D44                           _Timeout_Counter 1ED3  
         __size_of_getDimmerLights_Status 0010           getDimmerLights_ValueToPercent@i 00DE  
                            _RF_RxDisable 1D05                __end_of_LED_Initialization 1B9D  
          __end_of_setTemp_Initialization 0802                               Division@num 0075  
                 setMemory_Modify@command 0027                 __end_of_RF_Initialization 1B88  
                   __end_of_CC2500_RxData 1793                     __end_of_CC2500_TxData 172A  
                   _setLoad_AH_AL_Restore 1FE4                   __end_of_CC2500_PowerRST 140B  
